
PlasmaDriver_NucleoH723ZG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000111e8  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a5c  080114b8  080114b8  000124b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011f14  08011f14  00012f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011f1c  08011f1c  00012f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08011f20  08011f20  00012f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000098  24000000  08011f24  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000098  08011fbc  00013098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000f8  0801201c  000130f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ee4  24000158  0801207c  00013158  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400103c  0801207c  0001403c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00013158  2**0
                  CONTENTS, READONLY
 12 .debug_info   000237e3  00000000  00000000  00013186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003959  00000000  00000000  00036969  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ac0  00000000  00000000  0003a2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014f0  00000000  00000000  0003bd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00037407  00000000  00000000  0003d278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000219f6  00000000  00000000  0007467f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016c4be  00000000  00000000  00096075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00202533  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007aac  00000000  00000000  00202578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0020a024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000158 	.word	0x24000158
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080114a0 	.word	0x080114a0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400015c 	.word	0x2400015c
 800030c:	080114a0 	.word	0x080114a0

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <writeConfigFlash>:
// Prototypes
void measureVoltagesTemperaturesADC3(void);

// Write configuration to flash
static uint32_t writeConfigFlash(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
	uint32_t faultySector;	//Contains error code for faulty sector
	uint32_t error_code = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]

	// Unlock Flash
	HAL_FLASH_Unlock();
 80006ba:	f009 fbc1 	bl	8009e40 <HAL_FLASH_Unlock>

	// Erase flash sector 7
	if (HAL_FLASHEx_Erase(&sFlashErase, &faultySector) == HAL_OK)
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	4619      	mov	r1, r3
 80006c2:	4815      	ldr	r0, [pc, #84]	@ (8000718 <writeConfigFlash+0x68>)
 80006c4:	f009 fc58 	bl	8009f78 <HAL_FLASHEx_Erase>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d119      	bne.n	8000702 <writeConfigFlash+0x52>
	{
		for (uint32_t offset = 0; offset < sizeof(sFlashConfig); offset += FLASH_WORD)
 80006ce:	2300      	movs	r3, #0
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	e012      	b.n	80006fa <writeConfigFlash+0x4a>
		{
			// Program one flash word (8*4 bytes)
			if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, FLASH_SECTOR7_START_ADDR + offset, ((uint32_t) &sFlashConfig) + offset) != HAL_OK)
 80006d4:	68ba      	ldr	r2, [r7, #8]
 80006d6:	4b11      	ldr	r3, [pc, #68]	@ (800071c <writeConfigFlash+0x6c>)
 80006d8:	4413      	add	r3, r2
 80006da:	4911      	ldr	r1, [pc, #68]	@ (8000720 <writeConfigFlash+0x70>)
 80006dc:	68ba      	ldr	r2, [r7, #8]
 80006de:	440a      	add	r2, r1
 80006e0:	4619      	mov	r1, r3
 80006e2:	2001      	movs	r0, #1
 80006e4:	f009 fb3e 	bl	8009d64 <HAL_FLASH_Program>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d002      	beq.n	80006f4 <writeConfigFlash+0x44>
			{
				// Error during flash write
				error_code = HAL_FLASH_GetError();
 80006ee:	f009 fbe1 	bl	8009eb4 <HAL_FLASH_GetError>
 80006f2:	60f8      	str	r0, [r7, #12]
		for (uint32_t offset = 0; offset < sizeof(sFlashConfig); offset += FLASH_WORD)
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	3320      	adds	r3, #32
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d0e9      	beq.n	80006d4 <writeConfigFlash+0x24>
 8000700:	e002      	b.n	8000708 <writeConfigFlash+0x58>
			}
		}
	}
	else
	{
		error_code = HAL_FLASH_GetError();
 8000702:	f009 fbd7 	bl	8009eb4 <HAL_FLASH_GetError>
 8000706:	60f8      	str	r0, [r7, #12]
	}

	  // Lock Flash
	  HAL_FLASH_Lock();
 8000708:	f009 fbbc 	bl	8009e84 <HAL_FLASH_Lock>

	  return error_code;
 800070c:	68fb      	ldr	r3, [r7, #12]
}
 800070e:	4618      	mov	r0, r3
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	24000024 	.word	0x24000024
 800071c:	080e0000 	.word	0x080e0000
 8000720:	240008c4 	.word	0x240008c4

08000724 <readConfigFlash>:

// Read configuration from flash
static void readConfigFlash(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
	// Read configuration from flash
	memcpy(&sFlashConfig, (void *) FLASH_SECTOR7_START_ADDR, sizeof(sFlashConfig));
 8000728:	4b04      	ldr	r3, [pc, #16]	@ (800073c <readConfigFlash+0x18>)
 800072a:	781a      	ldrb	r2, [r3, #0]
 800072c:	4b04      	ldr	r3, [pc, #16]	@ (8000740 <readConfigFlash+0x1c>)
 800072e:	701a      	strb	r2, [r3, #0]
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	080e0000 	.word	0x080e0000
 8000740:	240008c4 	.word	0x240008c4

08000744 <printCR>:

// Print CR
static void printCR(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart3, (uint8_t *) "\n\r", 2, 1000);
 8000748:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800074c:	2202      	movs	r2, #2
 800074e:	4903      	ldr	r1, [pc, #12]	@ (800075c <printCR+0x18>)
 8000750:	4803      	ldr	r0, [pc, #12]	@ (8000760 <printCR+0x1c>)
 8000752:	f00e fe28 	bl	800f3a6 <HAL_UART_Transmit>
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	080114b8 	.word	0x080114b8
 8000760:	24000cb4 	.word	0x24000cb4

08000764 <printString>:

// Print string on UART3
static void printString(char *str)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) str, strlen(str), 1000);
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f7ff fdcf 	bl	8000310 <strlen>
 8000772:	4603      	mov	r3, r0
 8000774:	b29a      	uxth	r2, r3
 8000776:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800077a:	6879      	ldr	r1, [r7, #4]
 800077c:	4803      	ldr	r0, [pc, #12]	@ (800078c <printString+0x28>)
 800077e:	f00e fe12 	bl	800f3a6 <HAL_UART_Transmit>
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	24000cb4 	.word	0x24000cb4

08000790 <printConfigFlash>:

// Print configuration on UART3
static void printConfigFlash(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
	printString("\n\rCurrent configuration:");
 8000794:	480e      	ldr	r0, [pc, #56]	@ (80007d0 <printConfigFlash+0x40>)
 8000796:	f7ff ffe5 	bl	8000764 <printString>
	printString("\n\r  Mode = ");
 800079a:	480e      	ldr	r0, [pc, #56]	@ (80007d4 <printConfigFlash+0x44>)
 800079c:	f7ff ffe2 	bl	8000764 <printString>
	if (sFlashConfig.mode == TEST_MODE)
 80007a0:	4b0d      	ldr	r3, [pc, #52]	@ (80007d8 <printConfigFlash+0x48>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d103      	bne.n	80007b0 <printConfigFlash+0x20>
		printString("TEST");
 80007a8:	480c      	ldr	r0, [pc, #48]	@ (80007dc <printConfigFlash+0x4c>)
 80007aa:	f7ff ffdb 	bl	8000764 <printString>
 80007ae:	e00a      	b.n	80007c6 <printConfigFlash+0x36>
	else if (sFlashConfig.mode == RUN_MODE)
 80007b0:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <printConfigFlash+0x48>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d103      	bne.n	80007c0 <printConfigFlash+0x30>
		printString("RUN");
 80007b8:	4809      	ldr	r0, [pc, #36]	@ (80007e0 <printConfigFlash+0x50>)
 80007ba:	f7ff ffd3 	bl	8000764 <printString>
 80007be:	e002      	b.n	80007c6 <printConfigFlash+0x36>
	else
		printString("UNKNOWN");
 80007c0:	4808      	ldr	r0, [pc, #32]	@ (80007e4 <printConfigFlash+0x54>)
 80007c2:	f7ff ffcf 	bl	8000764 <printString>
	printCR();
 80007c6:	f7ff ffbd 	bl	8000744 <printCR>
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	080114bc 	.word	0x080114bc
 80007d4:	080114d8 	.word	0x080114d8
 80007d8:	240008c4 	.word	0x240008c4
 80007dc:	080114e4 	.word	0x080114e4
 80007e0:	080114ec 	.word	0x080114ec
 80007e4:	080114f0 	.word	0x080114f0

080007e8 <printNumber>:

// Print 16bit unsigned integer on UART3
static void printNumber(const char *text, uint16_t number, uint8_t CR)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b09e      	sub	sp, #120	@ 0x78
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	460b      	mov	r3, r1
 80007f2:	807b      	strh	r3, [r7, #2]
 80007f4:	4613      	mov	r3, r2
 80007f6:	707b      	strb	r3, [r7, #1]
	char s_output[100];
	char s_number[7];
	strcpy(s_output, text);
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	6879      	ldr	r1, [r7, #4]
 80007fe:	4618      	mov	r0, r3
 8000800:	f010 f9fa 	bl	8010bf8 <strcpy>
	itoa(number, s_number, 10);
 8000804:	887b      	ldrh	r3, [r7, #2]
 8000806:	f107 010c 	add.w	r1, r7, #12
 800080a:	220a      	movs	r2, #10
 800080c:	4618      	mov	r0, r3
 800080e:	f010 f8c7 	bl	80109a0 <itoa>
	strcat(s_output, s_number);
 8000812:	f107 020c 	add.w	r2, r7, #12
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4611      	mov	r1, r2
 800081c:	4618      	mov	r0, r3
 800081e:	f010 f9af 	bl	8010b80 <strcat>
	if (CR)
 8000822:	787b      	ldrb	r3, [r7, #1]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d00e      	beq.n	8000846 <printNumber+0x5e>
	{
		strcat(s_output, "\n\r");
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff fd6f 	bl	8000310 <strlen>
 8000832:	4603      	mov	r3, r0
 8000834:	461a      	mov	r2, r3
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4413      	add	r3, r2
 800083c:	4a0b      	ldr	r2, [pc, #44]	@ (800086c <printNumber+0x84>)
 800083e:	8811      	ldrh	r1, [r2, #0]
 8000840:	7892      	ldrb	r2, [r2, #2]
 8000842:	8019      	strh	r1, [r3, #0]
 8000844:	709a      	strb	r2, [r3, #2]
	}
	HAL_UART_Transmit(&huart3, (uint8_t *) s_output, strlen(s_output), 1000);
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff fd60 	bl	8000310 <strlen>
 8000850:	4603      	mov	r3, r0
 8000852:	b29a      	uxth	r2, r3
 8000854:	f107 0114 	add.w	r1, r7, #20
 8000858:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800085c:	4804      	ldr	r0, [pc, #16]	@ (8000870 <printNumber+0x88>)
 800085e:	f00e fda2 	bl	800f3a6 <HAL_UART_Transmit>
}
 8000862:	bf00      	nop
 8000864:	3778      	adds	r7, #120	@ 0x78
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	080114b8 	.word	0x080114b8
 8000870:	24000cb4 	.word	0x24000cb4

08000874 <printHALErrorStatus>:

// Print HAL error status on UART3
static void	printHALErrorStatus(HAL_StatusTypeDef HALresp, const char *text)
{
 8000874:	b5b0      	push	{r4, r5, r7, lr}
 8000876:	b09c      	sub	sp, #112	@ 0x70
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	6039      	str	r1, [r7, #0]
 800087e:	71fb      	strb	r3, [r7, #7]
	char s_output[100];

	switch (HALresp)
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	2b03      	cmp	r3, #3
 8000884:	d828      	bhi.n	80008d8 <printHALErrorStatus+0x64>
 8000886:	a201      	add	r2, pc, #4	@ (adr r2, 800088c <printHALErrorStatus+0x18>)
 8000888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800088c:	080008d9 	.word	0x080008d9
 8000890:	0800089d 	.word	0x0800089d
 8000894:	080008b1 	.word	0x080008b1
 8000898:	080008c5 	.word	0x080008c5
	{
		case HAL_ERROR:
			strcpy(s_output, "** HAL ERROR **: ");
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	4a15      	ldr	r2, [pc, #84]	@ (80008f8 <printHALErrorStatus+0x84>)
 80008a2:	461c      	mov	r4, r3
 80008a4:	4615      	mov	r5, r2
 80008a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008aa:	682b      	ldr	r3, [r5, #0]
 80008ac:	8023      	strh	r3, [r4, #0]
		break;
 80008ae:	e013      	b.n	80008d8 <printHALErrorStatus+0x64>

		case HAL_BUSY:
			strcpy(s_output, "** HAL BUSY **: ");
 80008b0:	f107 030c 	add.w	r3, r7, #12
 80008b4:	4a11      	ldr	r2, [pc, #68]	@ (80008fc <printHALErrorStatus+0x88>)
 80008b6:	461c      	mov	r4, r3
 80008b8:	4615      	mov	r5, r2
 80008ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008be:	682b      	ldr	r3, [r5, #0]
 80008c0:	7023      	strb	r3, [r4, #0]
		break;
 80008c2:	e009      	b.n	80008d8 <printHALErrorStatus+0x64>

		case HAL_TIMEOUT:
			strcpy(s_output, "** HAL TIMEOUT **: ");
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000900 <printHALErrorStatus+0x8c>)
 80008ca:	461c      	mov	r4, r3
 80008cc:	4615      	mov	r5, r2
 80008ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008d2:	682b      	ldr	r3, [r5, #0]
 80008d4:	6023      	str	r3, [r4, #0]
		break;
 80008d6:	bf00      	nop

		case HAL_OK:
		break;
	}
	strcat(s_output, text);
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	6839      	ldr	r1, [r7, #0]
 80008de:	4618      	mov	r0, r3
 80008e0:	f010 f94e 	bl	8010b80 <strcat>
	printString(s_output);
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ff3b 	bl	8000764 <printString>
}
 80008ee:	bf00      	nop
 80008f0:	3770      	adds	r7, #112	@ 0x70
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bdb0      	pop	{r4, r5, r7, pc}
 80008f6:	bf00      	nop
 80008f8:	080114f8 	.word	0x080114f8
 80008fc:	0801150c 	.word	0x0801150c
 8000900:	08011520 	.word	0x08011520

08000904 <stopHbridge>:

void stopHbridge(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]

	//Stop TIMER 1 PWM & interrupts
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);  //This will stop channel PWM1
 8000918:	2100      	movs	r1, #0
 800091a:	480f      	ldr	r0, [pc, #60]	@ (8000958 <stopHbridge+0x54>)
 800091c:	f00d faee 	bl	800defc <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1); //This will stop channel PWM1N
 8000920:	2100      	movs	r1, #0
 8000922:	480d      	ldr	r0, [pc, #52]	@ (8000958 <stopHbridge+0x54>)
 8000924:	f00e fb30 	bl	800ef88 <HAL_TIMEx_PWMN_Stop>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, TIM1_CH1N_Pin|TIM1_CH1_Pin, GPIO_PIN_SET);
 8000928:	2201      	movs	r2, #1
 800092a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800092e:	480b      	ldr	r0, [pc, #44]	@ (800095c <stopHbridge+0x58>)
 8000930:	f009 fdb6 	bl	800a4a0 <HAL_GPIO_WritePin>
	/*Configure GPIO pins : LED_GREEN_Pin LINE_DRIVER1_ENABLE_Pin LINE_DRIVER2_ENABLE_Pin LED_RED_Pin */
	GPIO_InitStruct.Pin = TIM1_CH1N_Pin|TIM1_CH1_Pin;
 8000934:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000938:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093a:	2301      	movs	r3, #1
 800093c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	4619      	mov	r1, r3
 800094a:	4804      	ldr	r0, [pc, #16]	@ (800095c <stopHbridge+0x58>)
 800094c:	f009 fbe8 	bl	800a120 <HAL_GPIO_Init>

}
 8000950:	bf00      	nop
 8000952:	3718      	adds	r7, #24
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	24000d48 	.word	0x24000d48
 800095c:	58021000 	.word	0x58021000

08000960 <printHbridgeData>:

// Print H-bridge data on UART3
static void printHbridgeData(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b09c      	sub	sp, #112	@ 0x70
 8000964:	af02      	add	r7, sp, #8
	char s_output[100];
	sprintf(s_output, "\n\rH-bridge 1=On 0=Off: %u, Frequency: %u (Hz), Dead time: %u (%%)\n\r", sHbridge.on, sHbridge.frequency, sHbridge.deadtime);
 8000966:	4b0f      	ldr	r3, [pc, #60]	@ (80009a4 <printHbridgeData+0x44>)
 8000968:	881b      	ldrh	r3, [r3, #0]
 800096a:	461a      	mov	r2, r3
 800096c:	4b0d      	ldr	r3, [pc, #52]	@ (80009a4 <printHbridgeData+0x44>)
 800096e:	885b      	ldrh	r3, [r3, #2]
 8000970:	4619      	mov	r1, r3
 8000972:	4b0c      	ldr	r3, [pc, #48]	@ (80009a4 <printHbridgeData+0x44>)
 8000974:	889b      	ldrh	r3, [r3, #4]
 8000976:	1d38      	adds	r0, r7, #4
 8000978:	9300      	str	r3, [sp, #0]
 800097a:	460b      	mov	r3, r1
 800097c:	490a      	ldr	r1, [pc, #40]	@ (80009a8 <printHbridgeData+0x48>)
 800097e:	f010 f8d7 	bl	8010b30 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t *) s_output, strlen(s_output), 1000);
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff fcc3 	bl	8000310 <strlen>
 800098a:	4603      	mov	r3, r0
 800098c:	b29a      	uxth	r2, r3
 800098e:	1d39      	adds	r1, r7, #4
 8000990:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000994:	4805      	ldr	r0, [pc, #20]	@ (80009ac <printHbridgeData+0x4c>)
 8000996:	f00e fd06 	bl	800f3a6 <HAL_UART_Transmit>
}
 800099a:	bf00      	nop
 800099c:	3768      	adds	r7, #104	@ 0x68
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	2400001c 	.word	0x2400001c
 80009a8:	08011534 	.word	0x08011534
 80009ac:	24000cb4 	.word	0x24000cb4

080009b0 <programHbridge>:

// Program TIMER 1 controlling the H-bridge
static void programHbridge(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b0a6      	sub	sp, #152	@ 0x98
 80009b4:	af00      	add	r7, sp, #0
	uint8_t DT, DTG;
	float tDTS = 1E6/((float) TIMER_BASE_CLOCK);  //Minimum step in usec
 80009b6:	4b96      	ldr	r3, [pc, #600]	@ (8000c10 <programHbridge+0x260>)
 80009b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	// TIMER 1 has already been initialized using HAL.
	// Program the H-bridge TIMER 1 - Clock TIMER_BASE_CLOCK

	// Calculate the period and duty cycle based on the frequency requested.
	timARR_f = ((float) TIMER_BASE_CLOCK) / ((float) sHbridge.frequency);
 80009bc:	4b95      	ldr	r3, [pc, #596]	@ (8000c14 <programHbridge+0x264>)
 80009be:	885b      	ldrh	r3, [r3, #2]
 80009c0:	ee07 3a90 	vmov	s15, r3
 80009c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009c8:	eddf 6a93 	vldr	s13, [pc, #588]	@ 8000c18 <programHbridge+0x268>
 80009cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009d0:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
	timARR = (uint32_t) (timARR_f + 0.5);							// Set period counter
 80009d4:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80009d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009dc:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 80009e0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80009e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80009e8:	ee17 3a90 	vmov	r3, s15
 80009ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	timCCR1 = timARR / 2;  											// 50% duty cycle
 80009f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80009f4:	085b      	lsrs	r3, r3, #1
 80009f6:	67fb      	str	r3, [r7, #124]	@ 0x7c

	// Print out the set frequency
	if (debug == 1)
 80009f8:	4b88      	ldr	r3, [pc, #544]	@ (8000c1c <programHbridge+0x26c>)
 80009fa:	881b      	ldrh	r3, [r3, #0]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d111      	bne.n	8000a24 <programHbridge+0x74>
	{
		value_int = ((uint32_t) TIMER_BASE_CLOCK) / timARR;
 8000a00:	4a87      	ldr	r2, [pc, #540]	@ (8000c20 <programHbridge+0x270>)
 8000a02:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a0a:	67bb      	str	r3, [r7, #120]	@ 0x78
		sprintf(s_output, "\n\rSet frequency (Hz): %lu\n\r", value_int);
 8000a0c:	f107 030c 	add.w	r3, r7, #12
 8000a10:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000a12:	4984      	ldr	r1, [pc, #528]	@ (8000c24 <programHbridge+0x274>)
 8000a14:	4618      	mov	r0, r3
 8000a16:	f010 f88b 	bl	8010b30 <siprintf>
		printString(s_output);
 8000a1a:	f107 030c 	add.w	r3, r7, #12
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff fea0 	bl	8000764 <printString>
	//  DTG[7:5] = 10x => DT = (64 + DTG[5:0]) x tDTG with tDTG =2xtDTS.	 max (64 + 63)*2*tDTS  	: 3.7236 usec - 7.3890 usec
	//  DTG[7:5] = 110 => DT = (32 + DTG[4:0]) x tDTG with tDTG =8xtDTS.     max (32 + 31)*8*tDTS   : 7.4472 usec - 14.662 usec
	//  DTG[7:5] = 111 => DT = (32 + DTG[4:0]) x tDTG with tDTG = 16 x tDTS. max (32 + 31)*16*tDTS 	: 14.895 usec - 29.324 usec

	// Calculate dead time in usec
	req_dtime_us = (((float) sHbridge.deadtime))*(10000./(float) sHbridge.frequency);
 8000a24:	4b7b      	ldr	r3, [pc, #492]	@ (8000c14 <programHbridge+0x264>)
 8000a26:	889b      	ldrh	r3, [r3, #4]
 8000a28:	ee07 3a90 	vmov	s15, r3
 8000a2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a30:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000a34:	4b77      	ldr	r3, [pc, #476]	@ (8000c14 <programHbridge+0x264>)
 8000a36:	885b      	ldrh	r3, [r3, #2]
 8000a38:	ee07 3a90 	vmov	s15, r3
 8000a3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a40:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000a44:	ed9f 4b70 	vldr	d4, [pc, #448]	@ 8000c08 <programHbridge+0x258>
 8000a48:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000a4c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000a50:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a54:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
		printString(s_output);
	}
*/

	// Minimum allowed dead time is 1 usec.
	if (req_dtime_us < 1.0)
 8000a58:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8000a5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000a60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a68:	d503      	bpl.n	8000a72 <programHbridge+0xc2>
		req_dtime_us = 1.0;
 8000a6a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000a6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

	if (req_dtime_us <= 127*tDTS) //3.6946
 8000a72:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000a76:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8000c28 <programHbridge+0x278>
 8000a7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a7e:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8000a82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a8a:	d81e      	bhi.n	8000aca <programHbridge+0x11a>
	{
		DT = (uint8_t) (req_dtime_us/tDTS + 0.5);
 8000a8c:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8000a90:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000a94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a98:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a9c:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000aa0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000aa4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000aa8:	edc7 7a01 	vstr	s15, [r7, #4]
 8000aac:	793b      	ldrb	r3, [r7, #4]
 8000aae:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		if (DT > 127)
 8000ab2:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	da02      	bge.n	8000ac0 <programHbridge+0x110>
			DT = 127;
 8000aba:	237f      	movs	r3, #127	@ 0x7f
 8000abc:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		DTG = DT;
 8000ac0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000ac4:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000ac8:	e0bd      	b.n	8000c46 <programHbridge+0x296>
	}
	else if (req_dtime_us <= 127*2*tDTS) //7.3890
 8000aca:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000ace:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8000c2c <programHbridge+0x27c>
 8000ad2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ad6:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8000ada:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ae2:	d825      	bhi.n	8000b30 <programHbridge+0x180>
	{
		DT = (uint8_t) ((req_dtime_us/(2*tDTS)) - 64 + 0.5);
 8000ae4:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000ae8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000aec:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8000af0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000af4:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8000c30 <programHbridge+0x280>
 8000af8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000afc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b00:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000b04:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b08:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b0c:	edc7 7a01 	vstr	s15, [r7, #4]
 8000b10:	793b      	ldrb	r3, [r7, #4]
 8000b12:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		if (DT > 63)
 8000b16:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000b1a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b1c:	d902      	bls.n	8000b24 <programHbridge+0x174>
			DT = 63;
 8000b1e:	233f      	movs	r3, #63	@ 0x3f
 8000b20:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		DTG = DT + 0x80;
 8000b24:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000b28:	3b80      	subs	r3, #128	@ 0x80
 8000b2a:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000b2e:	e08a      	b.n	8000c46 <programHbridge+0x296>
	}
	else if (req_dtime_us <= 63*8*tDTS) //14.662
 8000b30:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000b34:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8000c34 <programHbridge+0x284>
 8000b38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b3c:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8000b40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b48:	d827      	bhi.n	8000b9a <programHbridge+0x1ea>
	{
		DT = (uint8_t) ((req_dtime_us/(8*tDTS)) - 32 + 0.5);
 8000b4a:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000b4e:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8000b52:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b56:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8000b5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b5e:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8000c38 <programHbridge+0x288>
 8000b62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000b66:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b6a:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000b6e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b72:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b76:	edc7 7a01 	vstr	s15, [r7, #4]
 8000b7a:	793b      	ldrb	r3, [r7, #4]
 8000b7c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		if (DT > 31)
 8000b80:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000b84:	2b1f      	cmp	r3, #31
 8000b86:	d902      	bls.n	8000b8e <programHbridge+0x1de>
			DT = 31;
 8000b88:	231f      	movs	r3, #31
 8000b8a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		DTG = DT + 0xC0;
 8000b8e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000b92:	3b40      	subs	r3, #64	@ 0x40
 8000b94:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000b98:	e055      	b.n	8000c46 <programHbridge+0x296>
	}
	else if (req_dtime_us <= 63*16*tDTS) //29.324
 8000b9a:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000b9e:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8000c3c <programHbridge+0x28c>
 8000ba2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ba6:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8000baa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bb2:	d845      	bhi.n	8000c40 <programHbridge+0x290>
	{
		DT = (uint8_t) ((req_dtime_us/(16*tDTS)) - 32 + 0.5);
 8000bb4:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000bb8:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8000bbc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000bc0:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8000bc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bc8:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8000c38 <programHbridge+0x288>
 8000bcc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000bd0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bd4:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000bd8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000bdc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000be0:	edc7 7a01 	vstr	s15, [r7, #4]
 8000be4:	793b      	ldrb	r3, [r7, #4]
 8000be6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		if (DT > 31)
 8000bea:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000bee:	2b1f      	cmp	r3, #31
 8000bf0:	d902      	bls.n	8000bf8 <programHbridge+0x248>
			DT = 31;
 8000bf2:	231f      	movs	r3, #31
 8000bf4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		DTG = DT + 0xE0;
 8000bf8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000bfc:	3b20      	subs	r3, #32
 8000bfe:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000c02:	e020      	b.n	8000c46 <programHbridge+0x296>
 8000c04:	f3af 8000 	nop.w
 8000c08:	00000000 	.word	0x00000000
 8000c0c:	40c38800 	.word	0x40c38800
 8000c10:	3cee500f 	.word	0x3cee500f
 8000c14:	2400001c 	.word	0x2400001c
 8000c18:	4c032156 	.word	0x4c032156
 8000c1c:	24000000 	.word	0x24000000
 8000c20:	020c8558 	.word	0x020c8558
 8000c24:	08011578 	.word	0x08011578
 8000c28:	42fe0000 	.word	0x42fe0000
 8000c2c:	437e0000 	.word	0x437e0000
 8000c30:	42800000 	.word	0x42800000
 8000c34:	43fc0000 	.word	0x43fc0000
 8000c38:	42000000 	.word	0x42000000
 8000c3c:	447c0000 	.word	0x447c0000
	}
	else
		DTG = 255;
 8000c40:	23ff      	movs	r3, #255	@ 0xff
 8000c42:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96

	uint32_t temp = TIM1->BDTR & 0xFFFFFF00;		//Mask out DTG
 8000c46:	4b54      	ldr	r3, [pc, #336]	@ (8000d98 <programHbridge+0x3e8>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c4a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000c4e:	677b      	str	r3, [r7, #116]	@ 0x74
	timBDTR = temp | DTG;							//Add new DTG
 8000c50:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000c54:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000c56:	4313      	orrs	r3, r2
 8000c58:	673b      	str	r3, [r7, #112]	@ 0x70

	//Change timer1 settings
	htim1.Init.Period = timARR;   // Updating internal structure for timer
 8000c5a:	4a50      	ldr	r2, [pc, #320]	@ (8000d9c <programHbridge+0x3ec>)
 8000c5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000c60:	60d3      	str	r3, [r2, #12]
	TIM1->ARR = timARR;			  // Update period
 8000c62:	4a4d      	ldr	r2, [pc, #308]	@ (8000d98 <programHbridge+0x3e8>)
 8000c64:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000c68:	62d3      	str	r3, [r2, #44]	@ 0x2c
	TIM1->CCR1 = timCCR1;		  // Update duty cycle
 8000c6a:	4a4b      	ldr	r2, [pc, #300]	@ (8000d98 <programHbridge+0x3e8>)
 8000c6c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000c6e:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM1->BDTR = timBDTR;	      // Update dead time
 8000c70:	4a49      	ldr	r2, [pc, #292]	@ (8000d98 <programHbridge+0x3e8>)
 8000c72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000c74:	6453      	str	r3, [r2, #68]	@ 0x44

	if (debug == 1) {
 8000c76:	4b4a      	ldr	r3, [pc, #296]	@ (8000da0 <programHbridge+0x3f0>)
 8000c78:	881b      	ldrh	r3, [r3, #0]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d16c      	bne.n	8000d58 <programHbridge+0x3a8>
		//sprintf(s_output, "ARR %lu CCR1 %lu BDTR %lu", timARR, timCCR1, timBDTR & 0xFF);
		//printString(s_output);

		float calcDT = 0;
 8000c7e:	f04f 0300 	mov.w	r3, #0
 8000c82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		//  DTG[7:5] = 0xx => DT = DTG[7:0] x tDTG with tDTG = tDTS.			 max 127*tDTS   		: 0.0000 usec - 3.6946 usec
		if ((DTG & 0x80) == 0) {
 8000c86:	f997 3096 	ldrsb.w	r3, [r7, #150]	@ 0x96
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	db0b      	blt.n	8000ca6 <programHbridge+0x2f6>
			calcDT = DTG*tDTS;
 8000c8e:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000c92:	ee07 3a90 	vmov	s15, r3
 8000c96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c9a:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ca2:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
		}
		//  DTG[7:5] = 10x => DT = (64 + DTG[5:0]) x tDTG with tDTG =2xtDTS.	 max (64 + 63)*2*tDTS  	: 3.7236 usec - 7.3890 usec
		if ((DTG & 0xC0) == 0x80) {
 8000ca6:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000caa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000cae:	2b80      	cmp	r3, #128	@ 0x80
 8000cb0:	d10f      	bne.n	8000cd2 <programHbridge+0x322>
			calcDT = (64 + (DTG & 0x3F))*2*tDTS;
 8000cb2:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000cb6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000cba:	3340      	adds	r3, #64	@ 0x40
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	ee07 3a90 	vmov	s15, r3
 8000cc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cc6:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cce:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
		}
		//  DTG[7:5] = 110 => DT = (32 + DTG[4:0]) x tDTG with tDTG =8xtDTS.     max (32 + 31)*8*tDTS   : 7.4472 usec - 14.662 usec
		if ((DTG & 0xE0) == 0xC0) {
 8000cd2:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000cd6:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000cda:	2bc0      	cmp	r3, #192	@ 0xc0
 8000cdc:	d10f      	bne.n	8000cfe <programHbridge+0x34e>
			calcDT = (32 + (DTG & 0x1F))*8*tDTS;
 8000cde:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000ce2:	f003 031f 	and.w	r3, r3, #31
 8000ce6:	3320      	adds	r3, #32
 8000ce8:	00db      	lsls	r3, r3, #3
 8000cea:	ee07 3a90 	vmov	s15, r3
 8000cee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cf2:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cfa:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
		}
		//  DTG[7:5] = 111 => DT = (32 + DTG[4:0]) x tDTG with tDTG = 16 x tDTS. max (32 + 31)*16*tDTS 	: 14.895 usec - 29.324 usec
		if ((DTG & 0xE0) == 0xE0) {
 8000cfe:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000d02:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000d06:	2be0      	cmp	r3, #224	@ 0xe0
 8000d08:	d10f      	bne.n	8000d2a <programHbridge+0x37a>
			calcDT = (32 + (DTG & 0x1F))*16*tDTS;
 8000d0a:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000d0e:	f003 031f 	and.w	r3, r3, #31
 8000d12:	3320      	adds	r3, #32
 8000d14:	011b      	lsls	r3, r3, #4
 8000d16:	ee07 3a90 	vmov	s15, r3
 8000d1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d1e:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d26:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
		}
		value_int = (uint32_t) 1000*calcDT;
 8000d2a:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8000d2e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8000da4 <programHbridge+0x3f4>
 8000d32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d3a:	ee17 3a90 	vmov	r3, s15
 8000d3e:	67bb      	str	r3, [r7, #120]	@ 0x78
		sprintf(s_output, "\n\rSet dead time: %lu (ns)\n\r", value_int);
 8000d40:	f107 030c 	add.w	r3, r7, #12
 8000d44:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000d46:	4918      	ldr	r1, [pc, #96]	@ (8000da8 <programHbridge+0x3f8>)
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f00f fef1 	bl	8010b30 <siprintf>
		printString(s_output);
 8000d4e:	f107 030c 	add.w	r3, r7, #12
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff fd06 	bl	8000764 <printString>
	}

	//Start driving the H-bridge
	if (sHbridge.on && (TIM_CHANNEL_STATE_GET(&htim1, TIM_CHANNEL_1) == HAL_TIM_CHANNEL_STATE_READY))
 8000d58:	4b14      	ldr	r3, [pc, #80]	@ (8000dac <programHbridge+0x3fc>)
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d010      	beq.n	8000d82 <programHbridge+0x3d2>
 8000d60:	4b0e      	ldr	r3, [pc, #56]	@ (8000d9c <programHbridge+0x3ec>)
 8000d62:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d10a      	bne.n	8000d82 <programHbridge+0x3d2>
	{
		HAL_TIM_MspPostInit(&htim1);	//Setup GPIO for timer alternate function
 8000d6c:	480b      	ldr	r0, [pc, #44]	@ (8000d9c <programHbridge+0x3ec>)
 8000d6e:	f002 ff0b 	bl	8003b88 <HAL_TIM_MspPostInit>
		//Start TIMER 1 PWM & interrupts
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  //This will start channel PWM1
 8000d72:	2100      	movs	r1, #0
 8000d74:	4809      	ldr	r0, [pc, #36]	@ (8000d9c <programHbridge+0x3ec>)
 8000d76:	f00c ffa5 	bl	800dcc4 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1); //This will start channel PWM1N
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4807      	ldr	r0, [pc, #28]	@ (8000d9c <programHbridge+0x3ec>)
 8000d7e:	f00e f833 	bl	800ede8 <HAL_TIMEx_PWMN_Start>
	}

	//Stop driving the H-bridge
	if (!sHbridge.on)
 8000d82:	4b0a      	ldr	r3, [pc, #40]	@ (8000dac <programHbridge+0x3fc>)
 8000d84:	881b      	ldrh	r3, [r3, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d101      	bne.n	8000d8e <programHbridge+0x3de>
	{
		stopHbridge();
 8000d8a:	f7ff fdbb 	bl	8000904 <stopHbridge>
	}

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);

}
 8000d8e:	bf00      	nop
 8000d90:	3798      	adds	r7, #152	@ 0x98
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40010000 	.word	0x40010000
 8000d9c:	24000d48 	.word	0x24000d48
 8000da0:	24000000 	.word	0x24000000
 8000da4:	447a0000 	.word	0x447a0000
 8000da8:	08011594 	.word	0x08011594
 8000dac:	2400001c 	.word	0x2400001c

08000db0 <convertADC12data>:
#define ADC1_VplaL1			4	//Plasma voltage L1
#define ADC2_VplaL2			5	//Plasma voltage L2

//Convert ADC1 & ADC2 data to voltages and current
float convertADC12data(uint32_t item, char **text)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
	float result = 0;
 8000dba:	f04f 0300 	mov.w	r3, #0
 8000dbe:	60fb      	str	r3, [r7, #12]
* 3.3           *   (ADCData/65536.0)       *    1000
*   ^                   ^       ^                  ^
*   |                   |       |                  |
 * full scale V      Raw Data   Max ADC Value    Convert to mV
 */
	switch (item % (2*ADC12_NO_CHANNELS)) {
 8000dc0:	6879      	ldr	r1, [r7, #4]
 8000dc2:	4b7d      	ldr	r3, [pc, #500]	@ (8000fb8 <convertADC12data+0x208>)
 8000dc4:	fba3 2301 	umull	r2, r3, r3, r1
 8000dc8:	089a      	lsrs	r2, r3, #2
 8000dca:	4613      	mov	r3, r2
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	4413      	add	r3, r2
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	1aca      	subs	r2, r1, r3
 8000dd4:	2a05      	cmp	r2, #5
 8000dd6:	f200 80d8 	bhi.w	8000f8a <convertADC12data+0x1da>
 8000dda:	a301      	add	r3, pc, #4	@ (adr r3, 8000de0 <convertADC12data+0x30>)
 8000ddc:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8000de0:	08000df9 	.word	0x08000df9
 8000de4:	08000e1d 	.word	0x08000e1d
 8000de8:	08000e65 	.word	0x08000e65
 8000dec:	08000ea7 	.word	0x08000ea7
 8000df0:	08000ee9 	.word	0x08000ee9
 8000df4:	08000f2f 	.word	0x08000f2f
		case ADC1_TIM1_CH1:
			result = sADC.adc12_data[item];
 8000df8:	4a70      	ldr	r2, [pc, #448]	@ (8000fbc <convertADC12data+0x20c>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e00:	ee07 3a90 	vmov	s15, r3
 8000e04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e08:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f000 80b0 	beq.w	8000f74 <convertADC12data+0x1c4>
				*text ="ADC1_TIM1_CH1";
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	4a6a      	ldr	r2, [pc, #424]	@ (8000fc0 <convertADC12data+0x210>)
 8000e18:	601a      	str	r2, [r3, #0]
			break;
 8000e1a:	e0ab      	b.n	8000f74 <convertADC12data+0x1c4>

		case ADC2_Is:
			V = 3.3*(((float) sADC.adc12_data[item])/65536.0)*1000;
 8000e1c:	4a67      	ldr	r2, [pc, #412]	@ (8000fbc <convertADC12data+0x20c>)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e24:	ee07 3a90 	vmov	s15, r3
 8000e28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e2c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000e30:	ed9f 5b5b 	vldr	d5, [pc, #364]	@ 8000fa0 <convertADC12data+0x1f0>
 8000e34:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e38:	ed9f 6b5b 	vldr	d6, [pc, #364]	@ 8000fa8 <convertADC12data+0x1f8>
 8000e3c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e40:	ed9f 6b5b 	vldr	d6, [pc, #364]	@ 8000fb0 <convertADC12data+0x200>
 8000e44:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e48:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e4c:	edc7 7a02 	vstr	s15, [r7, #8]
			result =  V;//2000*(V - 1.585714)/3.594286;
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	60fb      	str	r3, [r7, #12]
			if (text)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	f000 808e 	beq.w	8000f78 <convertADC12data+0x1c8>
				*text ="ADC2_Is(mA)";
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	4a59      	ldr	r2, [pc, #356]	@ (8000fc4 <convertADC12data+0x214>)
 8000e60:	601a      	str	r2, [r3, #0]
			break;
 8000e62:	e089      	b.n	8000f78 <convertADC12data+0x1c8>

		case ADC1_VbriS1:
			result =  3.3*(((float) sADC.adc12_data[item])/65536.0)*1000; //1000*((12.0+2000.0)/12.0)*3.3*(((float) sADC.adc12_data[item])/65536.0);
 8000e64:	4a55      	ldr	r2, [pc, #340]	@ (8000fbc <convertADC12data+0x20c>)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e6c:	ee07 3a90 	vmov	s15, r3
 8000e70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e74:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000e78:	ed9f 5b49 	vldr	d5, [pc, #292]	@ 8000fa0 <convertADC12data+0x1f0>
 8000e7c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e80:	ed9f 6b49 	vldr	d6, [pc, #292]	@ 8000fa8 <convertADC12data+0x1f8>
 8000e84:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e88:	ed9f 6b49 	vldr	d6, [pc, #292]	@ 8000fb0 <convertADC12data+0x200>
 8000e8c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e90:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e94:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d06e      	beq.n	8000f7c <convertADC12data+0x1cc>
				*text ="ADC1_VbriS1(mV)";
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	4a49      	ldr	r2, [pc, #292]	@ (8000fc8 <convertADC12data+0x218>)
 8000ea2:	601a      	str	r2, [r3, #0]
			break;
 8000ea4:	e06a      	b.n	8000f7c <convertADC12data+0x1cc>

		case ADC2_VbriS2:
			result =  3.3*(((float) sADC.adc12_data[item])/65536.0) * 1000;//1000*((12.0+2000.0)/12.0)*3.3*(((float) sADC.adc12_data[item])/65536.0);
 8000ea6:	4a45      	ldr	r2, [pc, #276]	@ (8000fbc <convertADC12data+0x20c>)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000eae:	ee07 3a90 	vmov	s15, r3
 8000eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000eb6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000eba:	ed9f 5b39 	vldr	d5, [pc, #228]	@ 8000fa0 <convertADC12data+0x1f0>
 8000ebe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ec2:	ed9f 6b39 	vldr	d6, [pc, #228]	@ 8000fa8 <convertADC12data+0x1f8>
 8000ec6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000eca:	ed9f 6b39 	vldr	d6, [pc, #228]	@ 8000fb0 <convertADC12data+0x200>
 8000ece:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ed2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ed6:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d04f      	beq.n	8000f80 <convertADC12data+0x1d0>
				*text ="ADC2_VbriS2(mV)";
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	4a3a      	ldr	r2, [pc, #232]	@ (8000fcc <convertADC12data+0x21c>)
 8000ee4:	601a      	str	r2, [r3, #0]
			break;
 8000ee6:	e04b      	b.n	8000f80 <convertADC12data+0x1d0>

		case ADC1_VplaL1:
			V = 3.3*(((float) sADC.adc12_data[item])/65536.0) * 1000;
 8000ee8:	4a34      	ldr	r2, [pc, #208]	@ (8000fbc <convertADC12data+0x20c>)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ef0:	ee07 3a90 	vmov	s15, r3
 8000ef4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ef8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000efc:	ed9f 5b28 	vldr	d5, [pc, #160]	@ 8000fa0 <convertADC12data+0x1f0>
 8000f00:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f04:	ed9f 6b28 	vldr	d6, [pc, #160]	@ 8000fa8 <convertADC12data+0x1f8>
 8000f08:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f0c:	ed9f 6b28 	vldr	d6, [pc, #160]	@ 8000fb0 <convertADC12data+0x200>
 8000f10:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f14:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f18:	edc7 7a02 	vstr	s15, [r7, #8]
			result =  V;//1E6*(V-1.648348)/0.999;
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	60fb      	str	r3, [r7, #12]
			if (text)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d02e      	beq.n	8000f84 <convertADC12data+0x1d4>
				*text ="ADC1_VplaL1(mV)";
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	4a29      	ldr	r2, [pc, #164]	@ (8000fd0 <convertADC12data+0x220>)
 8000f2a:	601a      	str	r2, [r3, #0]
			break;
 8000f2c:	e02a      	b.n	8000f84 <convertADC12data+0x1d4>

		case ADC2_VplaL2:
			//V is the directly measured voltage from the ADC in mV
			V = 3.3*(((float) sADC.adc12_data[item])/65536.0) * 1000;
 8000f2e:	4a23      	ldr	r2, [pc, #140]	@ (8000fbc <convertADC12data+0x20c>)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f36:	ee07 3a90 	vmov	s15, r3
 8000f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f3e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000f42:	ed9f 5b17 	vldr	d5, [pc, #92]	@ 8000fa0 <convertADC12data+0x1f0>
 8000f46:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f4a:	ed9f 6b17 	vldr	d6, [pc, #92]	@ 8000fa8 <convertADC12data+0x1f8>
 8000f4e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f52:	ed9f 6b17 	vldr	d6, [pc, #92]	@ 8000fb0 <convertADC12data+0x200>
 8000f56:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f5a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f5e:	edc7 7a02 	vstr	s15, [r7, #8]
			//result is the True voltage at L2 (corrected for voltage divider)
			result =  V;//1E6*(V-1.648348)/0.999;
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	60fb      	str	r3, [r7, #12]
			if (text)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d00d      	beq.n	8000f88 <convertADC12data+0x1d8>
				*text ="ADC2_VplaL2(mV)";
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	4a19      	ldr	r2, [pc, #100]	@ (8000fd4 <convertADC12data+0x224>)
 8000f70:	601a      	str	r2, [r3, #0]
			break;
 8000f72:	e009      	b.n	8000f88 <convertADC12data+0x1d8>
			break;
 8000f74:	bf00      	nop
 8000f76:	e008      	b.n	8000f8a <convertADC12data+0x1da>
			break;
 8000f78:	bf00      	nop
 8000f7a:	e006      	b.n	8000f8a <convertADC12data+0x1da>
			break;
 8000f7c:	bf00      	nop
 8000f7e:	e004      	b.n	8000f8a <convertADC12data+0x1da>
			break;
 8000f80:	bf00      	nop
 8000f82:	e002      	b.n	8000f8a <convertADC12data+0x1da>
			break;
 8000f84:	bf00      	nop
 8000f86:	e000      	b.n	8000f8a <convertADC12data+0x1da>
			break;
 8000f88:	bf00      	nop
	}

	return(result);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	ee07 3a90 	vmov	s15, r3
}
 8000f90:	eeb0 0a67 	vmov.f32	s0, s15
 8000f94:	3714      	adds	r7, #20
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	00000000 	.word	0x00000000
 8000fa4:	40f00000 	.word	0x40f00000
 8000fa8:	66666666 	.word	0x66666666
 8000fac:	400a6666 	.word	0x400a6666
 8000fb0:	00000000 	.word	0x00000000
 8000fb4:	408f4000 	.word	0x408f4000
 8000fb8:	aaaaaaab 	.word	0xaaaaaaab
 8000fbc:	240001b0 	.word	0x240001b0
 8000fc0:	080115b0 	.word	0x080115b0
 8000fc4:	080115c0 	.word	0x080115c0
 8000fc8:	080115cc 	.word	0x080115cc
 8000fcc:	080115dc 	.word	0x080115dc
 8000fd0:	080115ec 	.word	0x080115ec
 8000fd4:	080115fc 	.word	0x080115fc

08000fd8 <printADC12data>:

//Print measured ADC1 and ADC2 data on UART3
void printADC12data(void)
{
 8000fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fda:	b0f7      	sub	sp, #476	@ 0x1dc
 8000fdc:	af10      	add	r7, sp, #64	@ 0x40
	char *p_text[2*ADC12_NO_CHANNELS];
	float result[2*ADC12_NO_CHANNELS];

	if (debug == 1)
 8000fde:	4ba0      	ldr	r3, [pc, #640]	@ (8001260 <printADC12data+0x288>)
 8000fe0:	881b      	ldrh	r3, [r3, #0]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	f040 8136 	bne.w	8001254 <printADC12data+0x27c>
	{
		printCR();
 8000fe8:	f7ff fbac 	bl	8000744 <printCR>
		printNumber("No data: ", sADC.nADC12Read, 1);
 8000fec:	4b9d      	ldr	r3, [pc, #628]	@ (8001264 <printADC12data+0x28c>)
 8000fee:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	489b      	ldr	r0, [pc, #620]	@ (8001268 <printADC12data+0x290>)
 8000ffa:	f7ff fbf5 	bl	80007e8 <printNumber>
		for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i++)
 8000ffe:	2300      	movs	r3, #0
 8001000:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8001004:	e119      	b.n	800123a <printADC12data+0x262>
		{
			int ii = i % (2*ADC12_NO_CHANNELS);
 8001006:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800100a:	4b98      	ldr	r3, [pc, #608]	@ (800126c <printADC12data+0x294>)
 800100c:	fb83 3102 	smull	r3, r1, r3, r2
 8001010:	17d3      	asrs	r3, r2, #31
 8001012:	1ac9      	subs	r1, r1, r3
 8001014:	460b      	mov	r3, r1
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	440b      	add	r3, r1
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
			result[ii] = convertADC12data(i, &p_text[ii]);
 8001022:	f8d7 0194 	ldr.w	r0, [r7, #404]	@ 0x194
 8001026:	f507 72bc 	add.w	r2, r7, #376	@ 0x178
 800102a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	4413      	add	r3, r2
 8001032:	4619      	mov	r1, r3
 8001034:	f7ff febc 	bl	8000db0 <convertADC12data>
 8001038:	eef0 7a40 	vmov.f32	s15, s0
 800103c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001046:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800104a:	4413      	add	r3, r2
 800104c:	3b38      	subs	r3, #56	@ 0x38
 800104e:	edc3 7a00 	vstr	s15, [r3]
			char text[300];
			if (ii == 5)
 8001052:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001056:	2b05      	cmp	r3, #5
 8001058:	f040 80ea 	bne.w	8001230 <printADC12data+0x258>
			{
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 800105c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001060:	4a82      	ldr	r2, [pc, #520]	@ (800126c <printADC12data+0x294>)
 8001062:	fb82 1203 	smull	r1, r2, r2, r3
 8001066:	17db      	asrs	r3, r3, #31
 8001068:	eba2 0c03 	sub.w	ip, r2, r3
						p_text[ii-5],                     sADC.adc12_data[i-5],
 800106c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001070:	3b05      	subs	r3, #5
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001078:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800107c:	4413      	add	r3, r2
 800107e:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8001082:	62fb      	str	r3, [r7, #44]	@ 0x2c
						p_text[ii-5],                     sADC.adc12_data[i-5],
 8001084:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001088:	3b05      	subs	r3, #5
 800108a:	4a76      	ldr	r2, [pc, #472]	@ (8001264 <printADC12data+0x28c>)
 800108c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001090:	62bb      	str	r3, [r7, #40]	@ 0x28
						p_text[ii-4], (int) result[ii-4], sADC.adc12_data[i-4],
 8001092:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001096:	3b04      	subs	r3, #4
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 800109e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80010a2:	18d3      	adds	r3, r2, r3
 80010a4:	f853 5c20 	ldr.w	r5, [r3, #-32]
						p_text[ii-4], (int) result[ii-4], sADC.adc12_data[i-4],
 80010a8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80010ac:	3b04      	subs	r3, #4
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 80010b4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80010b8:	18d3      	adds	r3, r2, r3
 80010ba:	3b38      	subs	r3, #56	@ 0x38
 80010bc:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80010c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010c4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
						p_text[ii-4], (int) result[ii-4], sADC.adc12_data[i-4],
 80010c8:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80010cc:	3b04      	subs	r3, #4
 80010ce:	4a65      	ldr	r2, [pc, #404]	@ (8001264 <printADC12data+0x28c>)
 80010d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80010d4:	623b      	str	r3, [r7, #32]
						p_text[ii-3], (int) result[ii-3], sADC.adc12_data[i-3],
 80010d6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80010da:	3b03      	subs	r3, #3
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 80010e2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80010e6:	18d3      	adds	r3, r2, r3
 80010e8:	f853 6c20 	ldr.w	r6, [r3, #-32]
						p_text[ii-3], (int) result[ii-3], sADC.adc12_data[i-3],
 80010ec:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80010f0:	3b03      	subs	r3, #3
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 80010f8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80010fc:	18d3      	adds	r3, r2, r3
 80010fe:	3b38      	subs	r3, #56	@ 0x38
 8001100:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001104:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001108:	edc7 7a07 	vstr	s15, [r7, #28]
						p_text[ii-3], (int) result[ii-3], sADC.adc12_data[i-3],
 800110c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001110:	3b03      	subs	r3, #3
 8001112:	4a54      	ldr	r2, [pc, #336]	@ (8001264 <printADC12data+0x28c>)
 8001114:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001118:	61bb      	str	r3, [r7, #24]
						p_text[ii-2], (int) result[ii-2], sADC.adc12_data[i-2],
 800111a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800111e:	3b02      	subs	r3, #2
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 8001126:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800112a:	18d3      	adds	r3, r2, r3
 800112c:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8001130:	617a      	str	r2, [r7, #20]
						p_text[ii-2], (int) result[ii-2], sADC.adc12_data[i-2],
 8001132:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001136:	3b02      	subs	r3, #2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	f503 71b4 	add.w	r1, r3, #360	@ 0x168
 800113e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001142:	18cb      	adds	r3, r1, r3
 8001144:	3b38      	subs	r3, #56	@ 0x38
 8001146:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 800114a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800114e:	edc7 7a04 	vstr	s15, [r7, #16]
						p_text[ii-2], (int) result[ii-2], sADC.adc12_data[i-2],
 8001152:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001156:	3b02      	subs	r3, #2
 8001158:	4a42      	ldr	r2, [pc, #264]	@ (8001264 <printADC12data+0x28c>)
 800115a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 800115e:	60fb      	str	r3, [r7, #12]
						p_text[ii-1], (int) result[ii-1], sADC.adc12_data[i-1],
 8001160:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001164:	3b01      	subs	r3, #1
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	f503 71b4 	add.w	r1, r3, #360	@ 0x168
 800116c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001170:	18cb      	adds	r3, r1, r3
 8001172:	f853 1c20 	ldr.w	r1, [r3, #-32]
 8001176:	60b9      	str	r1, [r7, #8]
						p_text[ii-1], (int) result[ii-1], sADC.adc12_data[i-1],
 8001178:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800117c:	3b01      	subs	r3, #1
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	f503 70b4 	add.w	r0, r3, #360	@ 0x168
 8001184:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001188:	18c3      	adds	r3, r0, r3
 800118a:	3b38      	subs	r3, #56	@ 0x38
 800118c:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001190:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001194:	edc7 7a01 	vstr	s15, [r7, #4]
						p_text[ii-1], (int) result[ii-1], sADC.adc12_data[i-1],
 8001198:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800119c:	1e5a      	subs	r2, r3, #1
 800119e:	4b31      	ldr	r3, [pc, #196]	@ (8001264 <printADC12data+0x28c>)
 80011a0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80011a4:	603b      	str	r3, [r7, #0]
 80011a6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	f503 70b4 	add.w	r0, r3, #360	@ 0x168
 80011b0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011b4:	18c3      	adds	r3, r0, r3
 80011b6:	f853 1c20 	ldr.w	r1, [r3, #-32]
						p_text[ii],   (int) result[ii],   sADC.adc12_data[i]);
 80011ba:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	f503 70b4 	add.w	r0, r3, #360	@ 0x168
 80011c4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011c8:	18c3      	adds	r3, r0, r3
 80011ca:	3b38      	subs	r3, #56	@ 0x38
 80011cc:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80011d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011d4:	ee17 4a90 	vmov	r4, s15
						p_text[ii],   (int) result[ii],   sADC.adc12_data[i]);
 80011d8:	4a22      	ldr	r2, [pc, #136]	@ (8001264 <printADC12data+0x28c>)
 80011da:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80011de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80011e2:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80011e6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80011e8:	940e      	str	r4, [sp, #56]	@ 0x38
 80011ea:	910d      	str	r1, [sp, #52]	@ 0x34
 80011ec:	683c      	ldr	r4, [r7, #0]
 80011ee:	940c      	str	r4, [sp, #48]	@ 0x30
 80011f0:	687c      	ldr	r4, [r7, #4]
 80011f2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	910a      	str	r1, [sp, #40]	@ 0x28
 80011f8:	68f9      	ldr	r1, [r7, #12]
 80011fa:	9109      	str	r1, [sp, #36]	@ 0x24
 80011fc:	6939      	ldr	r1, [r7, #16]
 80011fe:	9108      	str	r1, [sp, #32]
 8001200:	697a      	ldr	r2, [r7, #20]
 8001202:	9207      	str	r2, [sp, #28]
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	9206      	str	r2, [sp, #24]
 8001208:	69fa      	ldr	r2, [r7, #28]
 800120a:	9205      	str	r2, [sp, #20]
 800120c:	9604      	str	r6, [sp, #16]
 800120e:	6a3a      	ldr	r2, [r7, #32]
 8001210:	9203      	str	r2, [sp, #12]
 8001212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001214:	9202      	str	r2, [sp, #8]
 8001216:	9501      	str	r5, [sp, #4]
 8001218:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800121a:	9200      	str	r2, [sp, #0]
 800121c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800121e:	4662      	mov	r2, ip
 8001220:	4913      	ldr	r1, [pc, #76]	@ (8001270 <printADC12data+0x298>)
 8001222:	f00f fc85 	bl	8010b30 <siprintf>
				printString(text);
 8001226:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff fa9a 	bl	8000764 <printString>
		for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i++)
 8001230:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001234:	3301      	adds	r3, #1
 8001236:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 800123a:	4b0a      	ldr	r3, [pc, #40]	@ (8001264 <printADC12data+0x28c>)
 800123c:	f8d3 2708 	ldr.w	r2, [r3, #1800]	@ 0x708
 8001240:	4613      	mov	r3, r2
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	4413      	add	r3, r2
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	461a      	mov	r2, r3
 800124a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800124e:	429a      	cmp	r2, r3
 8001250:	f63f aed9 	bhi.w	8001006 <printADC12data+0x2e>
			}
		}
	}
}
 8001254:	bf00      	nop
 8001256:	f507 77ce 	add.w	r7, r7, #412	@ 0x19c
 800125a:	46bd      	mov	sp, r7
 800125c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800125e:	bf00      	nop
 8001260:	24000000 	.word	0x24000000
 8001264:	240001b0 	.word	0x240001b0
 8001268:	0801160c 	.word	0x0801160c
 800126c:	2aaaaaab 	.word	0x2aaaaaab
 8001270:	08011618 	.word	0x08011618

08001274 <freqCorrection>:

//Calculate frequency correction
//Returns 1 if a valid frequency correction is calculated, otherwise 0
uint8_t freqCorrection(int16_t *freqCorr)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08e      	sub	sp, #56	@ 0x38
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	int start_index=0;
 800127c:	2300      	movs	r3, #0
 800127e:	637b      	str	r3, [r7, #52]	@ 0x34
	int stop_index=0;
 8001280:	2300      	movs	r3, #0
 8001282:	633b      	str	r3, [r7, #48]	@ 0x30
	int number_of_lows=0;
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
	int lowDetected = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int highDetected = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	62bb      	str	r3, [r7, #40]	@ 0x28
	float min = 100000;
 8001290:	4b55      	ldr	r3, [pc, #340]	@ (80013e8 <freqCorrection+0x174>)
 8001292:	627b      	str	r3, [r7, #36]	@ 0x24
	float max = -100000;
 8001294:	4b55      	ldr	r3, [pc, #340]	@ (80013ec <freqCorrection+0x178>)
 8001296:	623b      	str	r3, [r7, #32]
	float norm = 0;
 8001298:	f04f 0300 	mov.w	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]

	//Find when MOSFET branch is on (start and stop time)
	//Find minimum and maximum value of bridge current
 	for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i=i+6)
 800129e:	2300      	movs	r3, #0
 80012a0:	61bb      	str	r3, [r7, #24]
 80012a2:	e043      	b.n	800132c <freqCorrection+0xb8>
	{
		// Find minimum of bridge current
		float data = convertADC12data(i+ADC2_Is, NULL);
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	3301      	adds	r3, #1
 80012a8:	2100      	movs	r1, #0
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fd80 	bl	8000db0 <convertADC12data>
 80012b0:	ed87 0a02 	vstr	s0, [r7, #8]
		if (data < min)
 80012b4:	ed97 7a02 	vldr	s14, [r7, #8]
 80012b8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80012bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c4:	d501      	bpl.n	80012ca <freqCorrection+0x56>
			min = data;
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	627b      	str	r3, [r7, #36]	@ 0x24
			//HAL_UART_Transmit(huart3, min);
			printCR();
 80012ca:	f7ff fa3b 	bl	8000744 <printCR>
		// Find maximum
		if (data > max)
 80012ce:	ed97 7a02 	vldr	s14, [r7, #8]
 80012d2:	edd7 7a08 	vldr	s15, [r7, #32]
 80012d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012de:	dd01      	ble.n	80012e4 <freqCorrection+0x70>
			max = data;
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	623b      	str	r3, [r7, #32]

		// Check for low
		if (!lowDetected && sADC.adc12_data[i+ADC1_TIM1_CH1] < 500)
 80012e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d10a      	bne.n	8001300 <freqCorrection+0x8c>
 80012ea:	4a41      	ldr	r2, [pc, #260]	@ (80013f0 <freqCorrection+0x17c>)
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012f2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80012f6:	d203      	bcs.n	8001300 <freqCorrection+0x8c>
		{
			//First low detected
			start_index = i; 		// Store index of first low detected
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	637b      	str	r3, [r7, #52]	@ 0x34
			lowDetected = 1;
 80012fc:	2301      	movs	r3, #1
 80012fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
		}
		//Check for high
		if (!highDetected && lowDetected && sADC.adc12_data[i+ADC1_TIM1_CH1] > 65000)
 8001300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001302:	2b00      	cmp	r3, #0
 8001304:	d10f      	bne.n	8001326 <freqCorrection+0xb2>
 8001306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001308:	2b00      	cmp	r3, #0
 800130a:	d00c      	beq.n	8001326 <freqCorrection+0xb2>
 800130c:	4a38      	ldr	r2, [pc, #224]	@ (80013f0 <freqCorrection+0x17c>)
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001314:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 8001318:	4293      	cmp	r3, r2
 800131a:	d904      	bls.n	8001326 <freqCorrection+0xb2>
		{
			//High after first low detected
			stop_index = i-6;		// Store index of last low
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	3b06      	subs	r3, #6
 8001320:	633b      	str	r3, [r7, #48]	@ 0x30
			highDetected = 1;
 8001322:	2301      	movs	r3, #1
 8001324:	62bb      	str	r3, [r7, #40]	@ 0x28
 	for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i=i+6)
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	3306      	adds	r3, #6
 800132a:	61bb      	str	r3, [r7, #24]
 800132c:	4b30      	ldr	r3, [pc, #192]	@ (80013f0 <freqCorrection+0x17c>)
 800132e:	f8d3 2708 	ldr.w	r2, [r3, #1800]	@ 0x708
 8001332:	4613      	mov	r3, r2
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	4413      	add	r3, r2
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	461a      	mov	r2, r3
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	429a      	cmp	r2, r3
 8001340:	d8b0      	bhi.n	80012a4 <freqCorrection+0x30>
		}
	}

	// Check maximum and minimum difference
	norm = max - min;
 8001342:	ed97 7a08 	vldr	s14, [r7, #32]
 8001346:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800134a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800134e:	edc7 7a07 	vstr	s15, [r7, #28]
	if (norm < 10)
 8001352:	edd7 7a07 	vldr	s15, [r7, #28]
 8001356:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800135a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800135e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001362:	d501      	bpl.n	8001368 <freqCorrection+0xf4>
		norm = max;
 8001364:	6a3b      	ldr	r3, [r7, #32]
 8001366:	61fb      	str	r3, [r7, #28]

	number_of_lows = (stop_index - start_index)/6 + 1;
 8001368:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800136a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	4a21      	ldr	r2, [pc, #132]	@ (80013f4 <freqCorrection+0x180>)
 8001370:	fb82 1203 	smull	r1, r2, r2, r3
 8001374:	17db      	asrs	r3, r3, #31
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	3301      	adds	r3, #1
 800137a:	617b      	str	r3, [r7, #20]
	if (lowDetected && highDetected && (number_of_lows >= 5))
 800137c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800137e:	2b00      	cmp	r3, #0
 8001380:	d02c      	beq.n	80013dc <freqCorrection+0x168>
 8001382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001384:	2b00      	cmp	r3, #0
 8001386:	d029      	beq.n	80013dc <freqCorrection+0x168>
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	2b04      	cmp	r3, #4
 800138c:	dd26      	ble.n	80013dc <freqCorrection+0x168>
	{
		float upper = convertADC12data(start_index+ADC2_Is+6, NULL);
 800138e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001390:	3307      	adds	r3, #7
 8001392:	2100      	movs	r1, #0
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fd0b 	bl	8000db0 <convertADC12data>
 800139a:	ed87 0a04 	vstr	s0, [r7, #16]
		float lower = convertADC12data(stop_index+ADC2_Is-6, NULL);
 800139e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013a0:	3b05      	subs	r3, #5
 80013a2:	2100      	movs	r1, #0
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fd03 	bl	8000db0 <convertADC12data>
 80013aa:	ed87 0a03 	vstr	s0, [r7, #12]
		*freqCorr = (int16_t) 1000*(upper - lower)/norm;
 80013ae:	ed97 7a04 	vldr	s14, [r7, #16]
 80013b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80013b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ba:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80013f8 <freqCorrection+0x184>
 80013be:	ee67 6a87 	vmul.f32	s13, s15, s14
 80013c2:	ed97 7a07 	vldr	s14, [r7, #28]
 80013c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013ce:	ee17 3a90 	vmov	r3, s15
 80013d2:	b21a      	sxth	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	801a      	strh	r2, [r3, #0]
		return(1);
 80013d8:	2301      	movs	r3, #1
 80013da:	e000      	b.n	80013de <freqCorrection+0x16a>
	}
	else
		return(0);
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3738      	adds	r7, #56	@ 0x38
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	47c35000 	.word	0x47c35000
 80013ec:	c7c35000 	.word	0xc7c35000
 80013f0:	240001b0 	.word	0x240001b0
 80013f4:	2aaaaaab 	.word	0x2aaaaaab
 80013f8:	447a0000 	.word	0x447a0000
 80013fc:	00000000 	.word	0x00000000

08001400 <measureBridgePlasmaADC12>:


// Measure bridge current, plasma voltage, and bridge current using ADC1 and ADC2 for one period
// After the measurement is done the function doneMeasuringBridgePlasmaADC12 is called
void measureBridgePlasmaADC12(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_SET);

	//Calculate number of reads needed for one period
	sADC.nADC12Read = 2 * ((uint32_t) ((1/(float) sHbridge.frequency)/ADC12_GROUP_READTIME));
 8001406:	4b26      	ldr	r3, [pc, #152]	@ (80014a0 <measureBridgePlasmaADC12+0xa0>)
 8001408:	885b      	ldrh	r3, [r3, #2]
 800140a:	ee07 3a90 	vmov	s15, r3
 800140e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001412:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001416:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800141a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800141e:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8001498 <measureBridgePlasmaADC12+0x98>
 8001422:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001426:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800142a:	ee17 3a90 	vmov	r3, s15
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	4a1c      	ldr	r2, [pc, #112]	@ (80014a4 <measureBridgePlasmaADC12+0xa4>)
 8001432:	f8c2 3708 	str.w	r3, [r2, #1800]	@ 0x708
	sADC.nADC12Read +=2; //Add to see the start of next period
 8001436:	4b1b      	ldr	r3, [pc, #108]	@ (80014a4 <measureBridgePlasmaADC12+0xa4>)
 8001438:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
 800143c:	3302      	adds	r3, #2
 800143e:	4a19      	ldr	r2, [pc, #100]	@ (80014a4 <measureBridgePlasmaADC12+0xa4>)
 8001440:	f8c2 3708 	str.w	r3, [r2, #1800]	@ 0x708

	//Start ADC1 and ADC2 measurements
	if (sADC.nADC12Read <= ADC12_MAX_GROUP)
 8001444:	4b17      	ldr	r3, [pc, #92]	@ (80014a4 <measureBridgePlasmaADC12+0xa4>)
 8001446:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
 800144a:	2b64      	cmp	r3, #100	@ 0x64
 800144c:	d81a      	bhi.n	8001484 <measureBridgePlasmaADC12+0x84>
	{
		//Calculate the number DMA transfers needed
		uint32_t noDMARequests = ADC12_NO_CHANNELS*sADC.nADC12Read;
 800144e:	4b15      	ldr	r3, [pc, #84]	@ (80014a4 <measureBridgePlasmaADC12+0xa4>)
 8001450:	f8d3 2708 	ldr.w	r2, [r3, #1800]	@ 0x708
 8001454:	4613      	mov	r3, r2
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	4413      	add	r3, r2
 800145a:	607b      	str	r3, [r7, #4]

		// Start reading ADC1 and ADC2
		sADC.adc12_reading = 1;
 800145c:	4b11      	ldr	r3, [pc, #68]	@ (80014a4 <measureBridgePlasmaADC12+0xa4>)
 800145e:	2201      	movs	r2, #1
 8001460:	f8a3 270e 	strh.w	r2, [r3, #1806]	@ 0x70e

		//This will start the ADC1 and ADC2 measurements when H-BRIDGE_B_CTRL (TIM1_CH1) goes from 0 to 1.
		//When the measurements are done doneMeasuringBridgePlasmaADC12 is called.
		HAL_StatusTypeDef HALresp = HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t *) sADC.adc12_data, noDMARequests);
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	490f      	ldr	r1, [pc, #60]	@ (80014a4 <measureBridgePlasmaADC12+0xa4>)
 8001468:	480f      	ldr	r0, [pc, #60]	@ (80014a8 <measureBridgePlasmaADC12+0xa8>)
 800146a:	f005 fb83 	bl	8006b74 <HAL_ADCEx_MultiModeStart_DMA>
 800146e:	4603      	mov	r3, r0
 8001470:	70fb      	strb	r3, [r7, #3]
		if (HALresp != HAL_OK)
 8001472:	78fb      	ldrb	r3, [r7, #3]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d008      	beq.n	800148a <measureBridgePlasmaADC12+0x8a>
		{
			printHALErrorStatus(HALresp, "measureBridgePlasmaADC12");
 8001478:	78fb      	ldrb	r3, [r7, #3]
 800147a:	490c      	ldr	r1, [pc, #48]	@ (80014ac <measureBridgePlasmaADC12+0xac>)
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff f9f9 	bl	8000874 <printHALErrorStatus>
	}
	else
		printString("** ERROR ** pADC.nRead > ADC12_MAX_GROUP");

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
}
 8001482:	e002      	b.n	800148a <measureBridgePlasmaADC12+0x8a>
		printString("** ERROR ** pADC.nRead > ADC12_MAX_GROUP");
 8001484:	480a      	ldr	r0, [pc, #40]	@ (80014b0 <measureBridgePlasmaADC12+0xb0>)
 8001486:	f7ff f96d 	bl	8000764 <printString>
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	f3af 8000 	nop.w
 8001498:	a0b5ed8d 	.word	0xa0b5ed8d
 800149c:	3eb0c6f7 	.word	0x3eb0c6f7
 80014a0:	2400001c 	.word	0x2400001c
 80014a4:	240001b0 	.word	0x240001b0
 80014a8:	24000904 	.word	0x24000904
 80014ac:	08011670 	.word	0x08011670
 80014b0:	0801168c 	.word	0x0801168c

080014b4 <doneMeasuringBridgePlasmaADC12>:

// Done measuring bridge current, plasma voltage, and bridge current
void doneMeasuringBridgePlasmaADC12(uint32_t errorCode)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	static uint32_t count = 0;

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_SET);

	count++;
 80014bc:	4b20      	ldr	r3, [pc, #128]	@ (8001540 <doneMeasuringBridgePlasmaADC12+0x8c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	3301      	adds	r3, #1
 80014c2:	4a1f      	ldr	r2, [pc, #124]	@ (8001540 <doneMeasuringBridgePlasmaADC12+0x8c>)
 80014c4:	6013      	str	r3, [r2, #0]

	// Done reading ADC1 and ADC2
	sADC.adc12_reading = 0;
 80014c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001544 <doneMeasuringBridgePlasmaADC12+0x90>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	f8a3 270e 	strh.w	r2, [r3, #1806]	@ 0x70e

	if (errorCode == HAL_ADC_ERROR_NONE)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d124      	bne.n	800151e <doneMeasuringBridgePlasmaADC12+0x6a>

			//TODO Check plasma voltage VplaL1 and VplaL2 (To high? Not present?)
			//TODO Calculate plasma voltage Vrms, Vmax and Vmin

			//Adjust H-bridge frequency
			if (powerStatus == V500_ON)
 80014d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001548 <doneMeasuringBridgePlasmaADC12+0x94>)
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d127      	bne.n	800152c <doneMeasuringBridgePlasmaADC12+0x78>
			{
				//Adjust H-bridge frequency
				int16_t freqCorr = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	81fb      	strh	r3, [r7, #14]
				if (freqCorrection(&freqCorr))
 80014e0:	f107 030e 	add.w	r3, r7, #14
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fec5 	bl	8001274 <freqCorrection>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d008      	beq.n	8001502 <doneMeasuringBridgePlasmaADC12+0x4e>
					sHbridge.frequency += freqCorr;
 80014f0:	4b16      	ldr	r3, [pc, #88]	@ (800154c <doneMeasuringBridgePlasmaADC12+0x98>)
 80014f2:	885a      	ldrh	r2, [r3, #2]
 80014f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	4413      	add	r3, r2
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	4b13      	ldr	r3, [pc, #76]	@ (800154c <doneMeasuringBridgePlasmaADC12+0x98>)
 8001500:	805a      	strh	r2, [r3, #2]
				//TODO Adjust H-bridge dead time
				//sHbridge.deadtime = new setting;
				programHbridge();
 8001502:	f7ff fa55 	bl	80009b0 <programHbridge>
				HAL_Delay(1);	//Allow H-bridge to settle with new settings
 8001506:	2001      	movs	r0, #1
 8001508:	f002 fd94 	bl	8004034 <HAL_Delay>
				if (count % 2048)
 800150c:	4b0c      	ldr	r3, [pc, #48]	@ (8001540 <doneMeasuringBridgePlasmaADC12+0x8c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001514:	2b00      	cmp	r3, #0
 8001516:	d009      	beq.n	800152c <doneMeasuringBridgePlasmaADC12+0x78>
					printHbridgeData();
 8001518:	f7ff fa22 	bl	8000960 <printHbridgeData>
 800151c:	e006      	b.n	800152c <doneMeasuringBridgePlasmaADC12+0x78>
			}
		}
	}
	else
	{
		printNumber("ADC12 Error Code: ", errorCode, 1);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	b29b      	uxth	r3, r3
 8001522:	2201      	movs	r2, #1
 8001524:	4619      	mov	r1, r3
 8001526:	480a      	ldr	r0, [pc, #40]	@ (8001550 <doneMeasuringBridgePlasmaADC12+0x9c>)
 8001528:	f7ff f95e 	bl	80007e8 <printNumber>
	}

	//Measure ADC3 voltages
	if (sFlashConfig.mode == RUN_MODE)
 800152c:	4b09      	ldr	r3, [pc, #36]	@ (8001554 <doneMeasuringBridgePlasmaADC12+0xa0>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d101      	bne.n	8001538 <doneMeasuringBridgePlasmaADC12+0x84>
		measureVoltagesTemperaturesADC3();
 8001534:	f000 f964 	bl	8001800 <measureVoltagesTemperaturesADC3>

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
}
 8001538:	bf00      	nop
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	240008c8 	.word	0x240008c8
 8001544:	240001b0 	.word	0x240001b0
 8001548:	240008c0 	.word	0x240008c0
 800154c:	2400001c 	.word	0x2400001c
 8001550:	080116b8 	.word	0x080116b8
 8001554:	240008c4 	.word	0x240008c4

08001558 <convertADC3data>:

//Convert ADC3 data to voltages
float convertADC3data(uint32_t item, char **text)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
	float result = 0;
 8001562:	f04f 0300 	mov.w	r3, #0
 8001566:	60fb      	str	r3, [r7, #12]

	switch (item) {
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b0a      	cmp	r3, #10
 800156c:	f200 80c5 	bhi.w	80016fa <convertADC3data+0x1a2>
 8001570:	a201      	add	r2, pc, #4	@ (adr r2, 8001578 <convertADC3data+0x20>)
 8001572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001576:	bf00      	nop
 8001578:	080015a5 	.word	0x080015a5
 800157c:	080015d7 	.word	0x080015d7
 8001580:	08001609 	.word	0x08001609
 8001584:	0800163b 	.word	0x0800163b
 8001588:	08001649 	.word	0x08001649
 800158c:	08001683 	.word	0x08001683
 8001590:	080016b5 	.word	0x080016b5
 8001594:	080016c3 	.word	0x080016c3
 8001598:	080016d1 	.word	0x080016d1
 800159c:	080016df 	.word	0x080016df
 80015a0:	080016ed 	.word	0x080016ed
		case ADC3_VBAT:
			result =  1000*((9.76+169.0)/9.76)*3.3*(((float) sADC.adc3_data[ADC3_VBAT])/4096.0);
 80015a4:	4b66      	ldr	r3, [pc, #408]	@ (8001740 <convertADC3data+0x1e8>)
 80015a6:	f8b3 34b0 	ldrh.w	r3, [r3, #1200]	@ 0x4b0
 80015aa:	ee07 3a90 	vmov	s15, r3
 80015ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015b2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80015b6:	ed9f 5b56 	vldr	d5, [pc, #344]	@ 8001710 <convertADC3data+0x1b8>
 80015ba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80015be:	ed9f 6b56 	vldr	d6, [pc, #344]	@ 8001718 <convertADC3data+0x1c0>
 80015c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80015c6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015ca:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_VBAT (mV)";
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	4a5c      	ldr	r2, [pc, #368]	@ (8001744 <convertADC3data+0x1ec>)
 80015d2:	601a      	str	r2, [r3, #0]
			break;
 80015d4:	e091      	b.n	80016fa <convertADC3data+0x1a2>
		case ADC3_15V:
			result =  1000*((30.0+120.0)/30.0)*3.3*(((float) sADC.adc3_data[ADC3_15V])/4096.0);
 80015d6:	4b5a      	ldr	r3, [pc, #360]	@ (8001740 <convertADC3data+0x1e8>)
 80015d8:	f8b3 34b2 	ldrh.w	r3, [r3, #1202]	@ 0x4b2
 80015dc:	ee07 3a90 	vmov	s15, r3
 80015e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015e4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80015e8:	ed9f 5b49 	vldr	d5, [pc, #292]	@ 8001710 <convertADC3data+0x1b8>
 80015ec:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80015f0:	ed9f 6b4b 	vldr	d6, [pc, #300]	@ 8001720 <convertADC3data+0x1c8>
 80015f4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80015f8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80015fc:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_15V (mV)";
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	4a51      	ldr	r2, [pc, #324]	@ (8001748 <convertADC3data+0x1f0>)
 8001604:	601a      	str	r2, [r3, #0]
			break;
 8001606:	e078      	b.n	80016fa <convertADC3data+0x1a2>
		case ADC3_3_3V:
			result =  1000*((30.0+3.0)/30.0)*3.3*(((float) sADC.adc3_data[ADC3_3_3V])/4096.0);
 8001608:	4b4d      	ldr	r3, [pc, #308]	@ (8001740 <convertADC3data+0x1e8>)
 800160a:	f8b3 34b4 	ldrh.w	r3, [r3, #1204]	@ 0x4b4
 800160e:	ee07 3a90 	vmov	s15, r3
 8001612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001616:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800161a:	ed9f 5b3d 	vldr	d5, [pc, #244]	@ 8001710 <convertADC3data+0x1b8>
 800161e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001622:	ed9f 6b41 	vldr	d6, [pc, #260]	@ 8001728 <convertADC3data+0x1d0>
 8001626:	ee27 7b06 	vmul.f64	d7, d7, d6
 800162a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800162e:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_3_3V (mV)";
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	4a45      	ldr	r2, [pc, #276]	@ (800174c <convertADC3data+0x1f4>)
 8001636:	601a      	str	r2, [r3, #0]
			break;
 8001638:	e05f      	b.n	80016fa <convertADC3data+0x1a2>
		case ADC3_NC3:
			result = 0;
 800163a:	f04f 0300 	mov.w	r3, #0
 800163e:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_NC3";
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	4a43      	ldr	r2, [pc, #268]	@ (8001750 <convertADC3data+0x1f8>)
 8001644:	601a      	str	r2, [r3, #0]
			break;
 8001646:	e058      	b.n	80016fa <convertADC3data+0x1a2>
		case ADC3_BridgeTemp:
			result = 1000*((float) sADC.adc3_data[ADC3_BridgeTemp])*3.3/4096.0;
 8001648:	4b3d      	ldr	r3, [pc, #244]	@ (8001740 <convertADC3data+0x1e8>)
 800164a:	f8b3 34b8 	ldrh.w	r3, [r3, #1208]	@ 0x4b8
 800164e:	ee07 3a90 	vmov	s15, r3
 8001652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001656:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8001754 <convertADC3data+0x1fc>
 800165a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800165e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001662:	ed9f 6b33 	vldr	d6, [pc, #204]	@ 8001730 <convertADC3data+0x1d8>
 8001666:	ee27 6b06 	vmul.f64	d6, d7, d6
 800166a:	ed9f 5b29 	vldr	d5, [pc, #164]	@ 8001710 <convertADC3data+0x1b8>
 800166e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001672:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001676:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_BridgeTemp (mV)";
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	4a36      	ldr	r2, [pc, #216]	@ (8001758 <convertADC3data+0x200>)
 800167e:	601a      	str	r2, [r3, #0]
			break;
 8001680:	e03b      	b.n	80016fa <convertADC3data+0x1a2>
		case ADC3_500VDC:
			result =  1000*((12.0+2000.0)/12.0)*3.3*(((float) sADC.adc3_data[ADC3_500VDC])/4096.0);
 8001682:	4b2f      	ldr	r3, [pc, #188]	@ (8001740 <convertADC3data+0x1e8>)
 8001684:	f8b3 34ba 	ldrh.w	r3, [r3, #1210]	@ 0x4ba
 8001688:	ee07 3a90 	vmov	s15, r3
 800168c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001690:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001694:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8001710 <convertADC3data+0x1b8>
 8001698:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800169c:	ed9f 6b26 	vldr	d6, [pc, #152]	@ 8001738 <convertADC3data+0x1e0>
 80016a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80016a4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80016a8:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_500VDC (mV)";
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	4a2b      	ldr	r2, [pc, #172]	@ (800175c <convertADC3data+0x204>)
 80016b0:	601a      	str	r2, [r3, #0]
			break;
 80016b2:	e022      	b.n	80016fa <convertADC3data+0x1a2>
		case ADC3_Thermistor1:
			result = 0;
 80016b4:	f04f 0300 	mov.w	r3, #0
 80016b8:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_Thermistor1";
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	4a28      	ldr	r2, [pc, #160]	@ (8001760 <convertADC3data+0x208>)
 80016be:	601a      	str	r2, [r3, #0]
			break;
 80016c0:	e01b      	b.n	80016fa <convertADC3data+0x1a2>
		case ADC3_Thermistor2:
			result = 0;
 80016c2:	f04f 0300 	mov.w	r3, #0
 80016c6:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_Thermistor2";
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	4a26      	ldr	r2, [pc, #152]	@ (8001764 <convertADC3data+0x20c>)
 80016cc:	601a      	str	r2, [r3, #0]
			break;
 80016ce:	e014      	b.n	80016fa <convertADC3data+0x1a2>
		case ADC3_Thermistor3:
			result = 0;
 80016d0:	f04f 0300 	mov.w	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_Thermistor3";
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	4a23      	ldr	r2, [pc, #140]	@ (8001768 <convertADC3data+0x210>)
 80016da:	601a      	str	r2, [r3, #0]
			break;
 80016dc:	e00d      	b.n	80016fa <convertADC3data+0x1a2>
		case ADC3_Thermistor4:
			result = 0;
 80016de:	f04f 0300 	mov.w	r3, #0
 80016e2:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_Thermistor4";
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	4a21      	ldr	r2, [pc, #132]	@ (800176c <convertADC3data+0x214>)
 80016e8:	601a      	str	r2, [r3, #0]
			break;
 80016ea:	e006      	b.n	80016fa <convertADC3data+0x1a2>
		case ADC3_NC10:
			result = 0;
 80016ec:	f04f 0300 	mov.w	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_NC10";
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	4a1e      	ldr	r2, [pc, #120]	@ (8001770 <convertADC3data+0x218>)
 80016f6:	601a      	str	r2, [r3, #0]
			break;
 80016f8:	bf00      	nop
	}

	return(result);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	ee07 3a90 	vmov	s15, r3
}
 8001700:	eeb0 0a67 	vmov.f32	s0, s15
 8001704:	3714      	adds	r7, #20
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	00000000 	.word	0x00000000
 8001714:	40b00000 	.word	0x40b00000
 8001718:	9714fbcd 	.word	0x9714fbcd
 800171c:	40ed832c 	.word	0x40ed832c
 8001720:	00000000 	.word	0x00000000
 8001724:	40d01d00 	.word	0x40d01d00
 8001728:	00000000 	.word	0x00000000
 800172c:	40ac5c00 	.word	0x40ac5c00
 8001730:	66666666 	.word	0x66666666
 8001734:	400a6666 	.word	0x400a6666
 8001738:	ffffffff 	.word	0xffffffff
 800173c:	4120e2a7 	.word	0x4120e2a7
 8001740:	240001b0 	.word	0x240001b0
 8001744:	080116cc 	.word	0x080116cc
 8001748:	080116dc 	.word	0x080116dc
 800174c:	080116ec 	.word	0x080116ec
 8001750:	080116fc 	.word	0x080116fc
 8001754:	447a0000 	.word	0x447a0000
 8001758:	08011708 	.word	0x08011708
 800175c:	08011720 	.word	0x08011720
 8001760:	08011734 	.word	0x08011734
 8001764:	08011748 	.word	0x08011748
 8001768:	0801175c 	.word	0x0801175c
 800176c:	08011770 	.word	0x08011770
 8001770:	08011784 	.word	0x08011784

08001774 <printADC3data>:

//Print measured ADC3 data on UART3
void printADC3data(void)
{
 8001774:	b590      	push	{r4, r7, lr}
 8001776:	b09f      	sub	sp, #124	@ 0x7c
 8001778:	af02      	add	r7, sp, #8
	if (debug == 1)
 800177a:	4b1d      	ldr	r3, [pc, #116]	@ (80017f0 <printADC3data+0x7c>)
 800177c:	881b      	ldrh	r3, [r3, #0]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d131      	bne.n	80017e6 <printADC3data+0x72>
	{
		printCR();
 8001782:	f7fe ffdf 	bl	8000744 <printCR>
		printNumber("No data: ", ADC3_DMA_REQUESTS, 1);
 8001786:	2201      	movs	r2, #1
 8001788:	210b      	movs	r1, #11
 800178a:	481a      	ldr	r0, [pc, #104]	@ (80017f4 <printADC3data+0x80>)
 800178c:	f7ff f82c 	bl	80007e8 <printNumber>
		for (int i=0; i<ADC3_DMA_REQUESTS; i++)
 8001790:	2300      	movs	r3, #0
 8001792:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001794:	e024      	b.n	80017e0 <printADC3data+0x6c>
		{
			char text[100];
			char *p_text;
			float result = convertADC3data(i, &p_text);
 8001796:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001798:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 800179c:	4611      	mov	r1, r2
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff feda 	bl	8001558 <convertADC3data>
 80017a4:	ed87 0a1a 	vstr	s0, [r7, #104]	@ 0x68
			sprintf(text, "%2u %20s: %7u    (%6u)\n\r", i, p_text, (int) result, sADC.adc3_data[i]);
 80017a8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80017aa:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80017ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017b2:	ee17 4a90 	vmov	r4, s15
 80017b6:	4910      	ldr	r1, [pc, #64]	@ (80017f8 <printADC3data+0x84>)
 80017b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80017ba:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80017be:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80017c2:	4638      	mov	r0, r7
 80017c4:	9301      	str	r3, [sp, #4]
 80017c6:	9400      	str	r4, [sp, #0]
 80017c8:	4613      	mov	r3, r2
 80017ca:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80017cc:	490b      	ldr	r1, [pc, #44]	@ (80017fc <printADC3data+0x88>)
 80017ce:	f00f f9af 	bl	8010b30 <siprintf>
			printString(text);
 80017d2:	463b      	mov	r3, r7
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7fe ffc5 	bl	8000764 <printString>
		for (int i=0; i<ADC3_DMA_REQUESTS; i++)
 80017da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80017dc:	3301      	adds	r3, #1
 80017de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80017e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80017e2:	2b0a      	cmp	r3, #10
 80017e4:	ddd7      	ble.n	8001796 <printADC3data+0x22>
		}
	}
}
 80017e6:	bf00      	nop
 80017e8:	3774      	adds	r7, #116	@ 0x74
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd90      	pop	{r4, r7, pc}
 80017ee:	bf00      	nop
 80017f0:	24000000 	.word	0x24000000
 80017f4:	0801160c 	.word	0x0801160c
 80017f8:	240001b0 	.word	0x240001b0
 80017fc:	08011790 	.word	0x08011790

08001800 <measureVoltagesTemperaturesADC3>:

// Measure voltages and temperatures using ADC3
// After the measurement is done the function doneMeasuringVoltagesTemperaturesADC3 is called
void measureVoltagesTemperaturesADC3(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_SET);

	// This will start the measurement of voltages and temperatures using ADC3
	sADC.adc3_reading = 1; //Started to read ADC3
 8001804:	4b05      	ldr	r3, [pc, #20]	@ (800181c <measureVoltagesTemperaturesADC3+0x1c>)
 8001806:	2201      	movs	r2, #1
 8001808:	f8a3 270c 	strh.w	r2, [r3, #1804]	@ 0x70c
	HAL_ADC_Start_DMA(&hadc3, (uint32_t *) sADC.adc3_data, ADC3_DMA_REQUESTS);
 800180c:	220b      	movs	r2, #11
 800180e:	4904      	ldr	r1, [pc, #16]	@ (8001820 <measureVoltagesTemperaturesADC3+0x20>)
 8001810:	4804      	ldr	r0, [pc, #16]	@ (8001824 <measureVoltagesTemperaturesADC3+0x24>)
 8001812:	f003 fa8d 	bl	8004d30 <HAL_ADC_Start_DMA>

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	240001b0 	.word	0x240001b0
 8001820:	24000660 	.word	0x24000660
 8001824:	240009e4 	.word	0x240009e4

08001828 <doneMeasuringVoltagesTemperaturesADC3>:


// Done measuring voltages and temperatures
void doneMeasuringVoltagesTemperaturesADC3(uint32_t errorCode)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_SET);

	sADC.adc3_reading = 0; //Done reading ADC3
 8001830:	4b0b      	ldr	r3, [pc, #44]	@ (8001860 <doneMeasuringVoltagesTemperaturesADC3+0x38>)
 8001832:	2200      	movs	r2, #0
 8001834:	f8a3 270c 	strh.w	r2, [r3, #1804]	@ 0x70c

	if (errorCode == HAL_ADC_ERROR_NONE)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d006      	beq.n	800184c <doneMeasuringVoltagesTemperaturesADC3+0x24>
		// TODO Check temperatures

	}
	else
	{
		printNumber("ADC12 Error Code: ", errorCode, 1);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	b29b      	uxth	r3, r3
 8001842:	2201      	movs	r2, #1
 8001844:	4619      	mov	r1, r3
 8001846:	4807      	ldr	r0, [pc, #28]	@ (8001864 <doneMeasuringVoltagesTemperaturesADC3+0x3c>)
 8001848:	f7fe ffce 	bl	80007e8 <printNumber>
	}


	//Start ADC1 and ADC2 measurements
	if (sFlashConfig.mode == RUN_MODE)
 800184c:	4b06      	ldr	r3, [pc, #24]	@ (8001868 <doneMeasuringVoltagesTemperaturesADC3+0x40>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d101      	bne.n	8001858 <doneMeasuringVoltagesTemperaturesADC3+0x30>
		measureBridgePlasmaADC12();
 8001854:	f7ff fdd4 	bl	8001400 <measureBridgePlasmaADC12>

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
}
 8001858:	bf00      	nop
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	240001b0 	.word	0x240001b0
 8001864:	080116b8 	.word	0x080116b8
 8001868:	240008c4 	.word	0x240008c4

0800186c <GetNumber>:

// Get an integer number from UART3. If the number is valid, the function returns 1, otherwise 0.
static uint8_t GetNumber(int *number)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08a      	sub	sp, #40	@ 0x28
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
	char input;
	char s_input[MAX_INPUT];
	int pos = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	627b      	str	r3, [r7, #36]	@ 0x24
	//Wait for user input
	HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 100000);
 8001878:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 800187c:	4b2f      	ldr	r3, [pc, #188]	@ (800193c <GetNumber+0xd0>)
 800187e:	2201      	movs	r2, #1
 8001880:	482f      	ldr	r0, [pc, #188]	@ (8001940 <GetNumber+0xd4>)
 8001882:	f00d fe1e 	bl	800f4c2 <HAL_UART_Receive>
	while (input != 13)
 8001886:	e039      	b.n	80018fc <GetNumber+0x90>
	{
		// Backspace?
		if ((input == 127) && (pos > 0))
 8001888:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800188c:	2b7f      	cmp	r3, #127	@ 0x7f
 800188e:	d10e      	bne.n	80018ae <GetNumber+0x42>
 8001890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001892:	2b00      	cmp	r3, #0
 8001894:	dd0b      	ble.n	80018ae <GetNumber+0x42>
		{
			// Delete digit
			HAL_UART_Transmit(&huart3, (uint8_t *) &input, 1, 1000);
 8001896:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 800189a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800189e:	2201      	movs	r2, #1
 80018a0:	4827      	ldr	r0, [pc, #156]	@ (8001940 <GetNumber+0xd4>)
 80018a2:	f00d fd80 	bl	800f3a6 <HAL_UART_Transmit>
			pos--;
 80018a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a8:	3b01      	subs	r3, #1
 80018aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80018ac:	e018      	b.n	80018e0 <GetNumber+0x74>
		}
		// A digit?
		else if ((input >= 48) && (input <=57))
 80018ae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80018b2:	2b2f      	cmp	r3, #47	@ 0x2f
 80018b4:	d914      	bls.n	80018e0 <GetNumber+0x74>
 80018b6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80018ba:	2b39      	cmp	r3, #57	@ 0x39
 80018bc:	d810      	bhi.n	80018e0 <GetNumber+0x74>
		{
			// Echo digit and store it
			HAL_UART_Transmit(&huart3, (uint8_t *) &input, 1, 1000);
 80018be:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 80018c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018c6:	2201      	movs	r2, #1
 80018c8:	481d      	ldr	r0, [pc, #116]	@ (8001940 <GetNumber+0xd4>)
 80018ca:	f00d fd6c 	bl	800f3a6 <HAL_UART_Transmit>
			s_input[pos++] = input;
 80018ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d0:	1c5a      	adds	r2, r3, #1
 80018d2:	627a      	str	r2, [r7, #36]	@ 0x24
 80018d4:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80018d8:	3328      	adds	r3, #40	@ 0x28
 80018da:	443b      	add	r3, r7
 80018dc:	f803 2c1c 	strb.w	r2, [r3, #-28]
		}

		// Get next character
		if (pos < MAX_INPUT-1)
 80018e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e2:	2b12      	cmp	r3, #18
 80018e4:	dc07      	bgt.n	80018f6 <GetNumber+0x8a>
		{
			HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 100000);
 80018e6:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 80018ea:	4b14      	ldr	r3, [pc, #80]	@ (800193c <GetNumber+0xd0>)
 80018ec:	2201      	movs	r2, #1
 80018ee:	4814      	ldr	r0, [pc, #80]	@ (8001940 <GetNumber+0xd4>)
 80018f0:	f00d fde7 	bl	800f4c2 <HAL_UART_Receive>
 80018f4:	e002      	b.n	80018fc <GetNumber+0x90>
		}
		else
		{
			input = 13; // Terminate while loop
 80018f6:	230d      	movs	r3, #13
 80018f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	while (input != 13)
 80018fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001900:	2b0d      	cmp	r3, #13
 8001902:	d1c1      	bne.n	8001888 <GetNumber+0x1c>
		}
	}
	s_input[pos] = 0;
 8001904:	f107 020c 	add.w	r2, r7, #12
 8001908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190a:	4413      	add	r3, r2
 800190c:	2200      	movs	r2, #0
 800190e:	701a      	strb	r2, [r3, #0]
	if (pos > 0)
 8001910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001912:	2b00      	cmp	r3, #0
 8001914:	dd07      	ble.n	8001926 <GetNumber+0xba>
		*number = atoi(s_input);
 8001916:	f107 030c 	add.w	r3, r7, #12
 800191a:	4618      	mov	r0, r3
 800191c:	f00f f824 	bl	8010968 <atoi>
 8001920:	4602      	mov	r2, r0
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	601a      	str	r2, [r3, #0]
	return(pos > 0);
 8001926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001928:	2b00      	cmp	r3, #0
 800192a:	bfcc      	ite	gt
 800192c:	2301      	movgt	r3, #1
 800192e:	2300      	movle	r3, #0
 8001930:	b2db      	uxtb	r3, r3
}
 8001932:	4618      	mov	r0, r3
 8001934:	3728      	adds	r7, #40	@ 0x28
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	000186a0 	.word	0x000186a0
 8001940:	24000cb4 	.word	0x24000cb4

08001944 <GetUint16Input>:

// Get an 16bit unsigned number from UAR3 and validate the input againts min and max values
static uint8_t GetUint16Input(uint16_t *input, uint8_t bValidate, uint16_t min, uint16_t max)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b0a0      	sub	sp, #128	@ 0x80
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	4608      	mov	r0, r1
 800194e:	4611      	mov	r1, r2
 8001950:	461a      	mov	r2, r3
 8001952:	4603      	mov	r3, r0
 8001954:	72fb      	strb	r3, [r7, #11]
 8001956:	460b      	mov	r3, r1
 8001958:	813b      	strh	r3, [r7, #8]
 800195a:	4613      	mov	r3, r2
 800195c:	80fb      	strh	r3, [r7, #6]
	int number;
	char s_output[100];
	uint8_t result;

	result = GetNumber(&number);
 800195e:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff ff82 	bl	800186c <GetNumber>
 8001968:	4603      	mov	r3, r0
 800196a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (bValidate)
 800196e:	7afb      	ldrb	r3, [r7, #11]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d02f      	beq.n	80019d4 <GetUint16Input+0x90>
	{
		if (result && (number >= min) && (number <= max))
 8001974:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001978:	2b00      	cmp	r3, #0
 800197a:	d013      	beq.n	80019a4 <GetUint16Input+0x60>
 800197c:	893a      	ldrh	r2, [r7, #8]
 800197e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001980:	429a      	cmp	r2, r3
 8001982:	dc0f      	bgt.n	80019a4 <GetUint16Input+0x60>
 8001984:	88fa      	ldrh	r2, [r7, #6]
 8001986:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001988:	429a      	cmp	r2, r3
 800198a:	db0b      	blt.n	80019a4 <GetUint16Input+0x60>
		{
			*input =  number;
 800198c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800198e:	b29a      	uxth	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, (uint8_t *) " - Ok\n\r", 7, 1000);
 8001994:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001998:	2207      	movs	r2, #7
 800199a:	4911      	ldr	r1, [pc, #68]	@ (80019e0 <GetUint16Input+0x9c>)
 800199c:	4811      	ldr	r0, [pc, #68]	@ (80019e4 <GetUint16Input+0xa0>)
 800199e:	f00d fd02 	bl	800f3a6 <HAL_UART_Transmit>
 80019a2:	e017      	b.n	80019d4 <GetUint16Input+0x90>
		}
		else
		{
			result = 0; //Indicate failure
 80019a4:	2300      	movs	r3, #0
 80019a6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			sprintf(s_output, " - Invalid number, valid range %u - %u\n\r", min, max);
 80019aa:	893a      	ldrh	r2, [r7, #8]
 80019ac:	88fb      	ldrh	r3, [r7, #6]
 80019ae:	f107 0014 	add.w	r0, r7, #20
 80019b2:	490d      	ldr	r1, [pc, #52]	@ (80019e8 <GetUint16Input+0xa4>)
 80019b4:	f00f f8bc 	bl	8010b30 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t *) s_output, strlen(s_output), 1000);
 80019b8:	f107 0314 	add.w	r3, r7, #20
 80019bc:	4618      	mov	r0, r3
 80019be:	f7fe fca7 	bl	8000310 <strlen>
 80019c2:	4603      	mov	r3, r0
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	f107 0114 	add.w	r1, r7, #20
 80019ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019ce:	4805      	ldr	r0, [pc, #20]	@ (80019e4 <GetUint16Input+0xa0>)
 80019d0:	f00d fce9 	bl	800f3a6 <HAL_UART_Transmit>
		}
	}
	return(result);
 80019d4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3780      	adds	r7, #128	@ 0x80
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	080117ac 	.word	0x080117ac
 80019e4:	24000cb4 	.word	0x24000cb4
 80019e8:	080117b4 	.word	0x080117b4

080019ec <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef* hadc)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
	// ADC1 is master and ADC2 is slave
	if (hadc->Instance == ADC1)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a0e      	ldr	r2, [pc, #56]	@ (8001a34 <HAL_ADC_ErrorCallback+0x48>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d108      	bne.n	8001a10 <HAL_ADC_ErrorCallback+0x24>
	{
		printNumber("** ERROR ** ADC12 Error Code: ", hadc->ErrorCode, 1);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	2201      	movs	r2, #1
 8001a06:	4619      	mov	r1, r3
 8001a08:	480b      	ldr	r0, [pc, #44]	@ (8001a38 <HAL_ADC_ErrorCallback+0x4c>)
 8001a0a:	f7fe feed 	bl	80007e8 <printNumber>
	}
	else if ((hadc->Instance == ADC3))
	{
		printNumber("** ERROR ** ADC3 Error Code: ", hadc->ErrorCode, 1);
	}
}
 8001a0e:	e00c      	b.n	8001a2a <HAL_ADC_ErrorCallback+0x3e>
	else if ((hadc->Instance == ADC3))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a09      	ldr	r2, [pc, #36]	@ (8001a3c <HAL_ADC_ErrorCallback+0x50>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d107      	bne.n	8001a2a <HAL_ADC_ErrorCallback+0x3e>
		printNumber("** ERROR ** ADC3 Error Code: ", hadc->ErrorCode, 1);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	2201      	movs	r2, #1
 8001a22:	4619      	mov	r1, r3
 8001a24:	4806      	ldr	r0, [pc, #24]	@ (8001a40 <HAL_ADC_ErrorCallback+0x54>)
 8001a26:	f7fe fedf 	bl	80007e8 <printNumber>
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40022000 	.word	0x40022000
 8001a38:	080117e0 	.word	0x080117e0
 8001a3c:	58026000 	.word	0x58026000
 8001a40:	08011800 	.word	0x08011800

08001a44 <HAL_ADC_ConvCpltCallback>:

// ADC conversion and DMA transfer complete
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
	// ADC1 is master and ADC2 is slave
	if (hadc->Instance == ADC1)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a10      	ldr	r2, [pc, #64]	@ (8001a94 <HAL_ADC_ConvCpltCallback+0x50>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d105      	bne.n	8001a62 <HAL_ADC_ConvCpltCallback+0x1e>
	{
		//HAL_ADCEx_MultiModeStop_DMA(&hadc1);
		doneMeasuringBridgePlasmaADC12(hadc->ErrorCode);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff fd2a 	bl	80014b4 <doneMeasuringBridgePlasmaADC12>
	else
	{
		HAL_UART_Transmit(&huart3, (uint8_t *) "** ERROR ** Unknown ADC\n\r", 25, 1000);
		printCR();
	}
}
 8001a60:	e013      	b.n	8001a8a <HAL_ADC_ConvCpltCallback+0x46>
	else if (hadc->Instance == ADC3)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a0c      	ldr	r2, [pc, #48]	@ (8001a98 <HAL_ADC_ConvCpltCallback+0x54>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d105      	bne.n	8001a78 <HAL_ADC_ConvCpltCallback+0x34>
		doneMeasuringVoltagesTemperaturesADC3(hadc->ErrorCode);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff fed9 	bl	8001828 <doneMeasuringVoltagesTemperaturesADC3>
}
 8001a76:	e008      	b.n	8001a8a <HAL_ADC_ConvCpltCallback+0x46>
		HAL_UART_Transmit(&huart3, (uint8_t *) "** ERROR ** Unknown ADC\n\r", 25, 1000);
 8001a78:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a7c:	2219      	movs	r2, #25
 8001a7e:	4907      	ldr	r1, [pc, #28]	@ (8001a9c <HAL_ADC_ConvCpltCallback+0x58>)
 8001a80:	4807      	ldr	r0, [pc, #28]	@ (8001aa0 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001a82:	f00d fc90 	bl	800f3a6 <HAL_UART_Transmit>
		printCR();
 8001a86:	f7fe fe5d 	bl	8000744 <printCR>
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40022000 	.word	0x40022000
 8001a98:	58026000 	.word	0x58026000
 8001a9c:	08011820 	.word	0x08011820
 8001aa0:	24000cb4 	.word	0x24000cb4

08001aa4 <PowerOffLowSupplies>:

//Power Off Supplies in order3.3V switch and 15V
void PowerOffLowSupplies(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
	if (powerStatus == V500_OFF)
 8001aa8:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae0 <PowerOffLowSupplies+0x3c>)
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d110      	bne.n	8001ad2 <PowerOffLowSupplies+0x2e>
	{
		//Power off 3.3V switch voltage
		HAL_GPIO_WritePin(OUT_3V3_SWITCH_GPIO_Port, OUT_3V3_SWITCH_Pin, GPIO_PIN_SET);
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	480b      	ldr	r0, [pc, #44]	@ (8001ae4 <PowerOffLowSupplies+0x40>)
 8001ab6:	f008 fcf3 	bl	800a4a0 <HAL_GPIO_WritePin>
		HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001aba:	2001      	movs	r0, #1
 8001abc:	f002 faba 	bl	8004034 <HAL_Delay>

		//Power off 15V
		HAL_GPIO_WritePin(OUT_15V_ENABLE_GPIO_Port, OUT_15V_ENABLE_Pin, GPIO_PIN_SET);		//There is an inverter between MCU and the output, thus SET
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	2102      	movs	r1, #2
 8001ac4:	4807      	ldr	r0, [pc, #28]	@ (8001ae4 <PowerOffLowSupplies+0x40>)
 8001ac6:	f008 fceb 	bl	800a4a0 <HAL_GPIO_WritePin>
		HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001aca:	2001      	movs	r0, #1
 8001acc:	f002 fab2 	bl	8004034 <HAL_Delay>
	else
	{
		printString("** ERROR ** PowerOffLowSupplies: 500V is On\n\r");
		printCR();
	}
}
 8001ad0:	e004      	b.n	8001adc <PowerOffLowSupplies+0x38>
		printString("** ERROR ** PowerOffLowSupplies: 500V is On\n\r");
 8001ad2:	4805      	ldr	r0, [pc, #20]	@ (8001ae8 <PowerOffLowSupplies+0x44>)
 8001ad4:	f7fe fe46 	bl	8000764 <printString>
		printCR();
 8001ad8:	f7fe fe34 	bl	8000744 <printCR>
}
 8001adc:	bf00      	nop
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	240008c0 	.word	0x240008c0
 8001ae4:	58020c00 	.word	0x58020c00
 8001ae8:	0801183c 	.word	0x0801183c

08001aec <PowerOffHighSupplies>:


//Power Off Supply 500V
void PowerOffHighSupplies(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
	//Make sure the H-bridge outputs are zero before turning off power
	stopHbridge();
 8001af0:	f7fe ff08 	bl	8000904 <stopHbridge>

	//Power off 500V
	HAL_GPIO_WritePin(OUT_500V_ENABLE_GPIO_Port, OUT_500V_ENABLE_Pin, GPIO_PIN_SET);	//There is an inverter between MCU and the output, thus SET
 8001af4:	2201      	movs	r2, #1
 8001af6:	2101      	movs	r1, #1
 8001af8:	480b      	ldr	r0, [pc, #44]	@ (8001b28 <PowerOffHighSupplies+0x3c>)
 8001afa:	f008 fcd1 	bl	800a4a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001afe:	2001      	movs	r0, #1
 8001b00:	f002 fa98 	bl	8004034 <HAL_Delay>

	//Disable Line Drive 1
	HAL_GPIO_WritePin(LINE_DRIVER1_ENABLE_GPIO_Port, LINE_DRIVER1_ENABLE_Pin, GPIO_PIN_SET);
 8001b04:	2201      	movs	r2, #1
 8001b06:	2104      	movs	r1, #4
 8001b08:	4808      	ldr	r0, [pc, #32]	@ (8001b2c <PowerOffHighSupplies+0x40>)
 8001b0a:	f008 fcc9 	bl	800a4a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001b0e:	2001      	movs	r0, #1
 8001b10:	f002 fa90 	bl	8004034 <HAL_Delay>

	//Signal to robot controller all power supplies are inactive.
	HAL_GPIO_WritePin(LED_ACTIVE_GPIO_Port, LED_ACTIVE_Pin, GPIO_PIN_SET);			//There is an inverter between MCU and the output, thus SET
 8001b14:	2201      	movs	r2, #1
 8001b16:	2101      	movs	r1, #1
 8001b18:	4805      	ldr	r0, [pc, #20]	@ (8001b30 <PowerOffHighSupplies+0x44>)
 8001b1a:	f008 fcc1 	bl	800a4a0 <HAL_GPIO_WritePin>

	powerStatus = V500_OFF;
 8001b1e:	4b05      	ldr	r3, [pc, #20]	@ (8001b34 <PowerOffHighSupplies+0x48>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	801a      	strh	r2, [r3, #0]
}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	58021800 	.word	0x58021800
 8001b2c:	58020400 	.word	0x58020400
 8001b30:	58021000 	.word	0x58021000
 8001b34:	240008c0 	.word	0x240008c0

08001b38 <PowerOffSupplies>:

void PowerOffSupplies(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
	PowerOffHighSupplies();
 8001b3c:	f7ff ffd6 	bl	8001aec <PowerOffHighSupplies>
	PowerOffLowSupplies();
 8001b40:	f7ff ffb0 	bl	8001aa4 <PowerOffLowSupplies>
}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <PowerOnLowSupplies>:

//Power On Supplies in order 15V, 3.3V switch
//Returns 1 if the power up sequence was successful, and 0 if it failed
int PowerOnLowSupplies(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
	//Power on 15V
	//printString("\n\rPower on 15V - ");
	HAL_GPIO_WritePin(OUT_15V_ENABLE_GPIO_Port, OUT_15V_ENABLE_Pin, GPIO_PIN_RESET);	//There is an inverter between MCU and the output, thus RESET
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2102      	movs	r1, #2
 8001b50:	4818      	ldr	r0, [pc, #96]	@ (8001bb4 <PowerOnLowSupplies+0x6c>)
 8001b52:	f008 fca5 	bl	800a4a0 <HAL_GPIO_WritePin>
	printString("\n\rPower on 15V - ");
 8001b56:	4818      	ldr	r0, [pc, #96]	@ (8001bb8 <PowerOnLowSupplies+0x70>)
 8001b58:	f7fe fe04 	bl	8000764 <printString>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001b5c:	2001      	movs	r0, #1
 8001b5e:	f002 fa69 	bl	8004034 <HAL_Delay>

	//Start reading ADC3 channels
	measureVoltagesTemperaturesADC3();
 8001b62:	f7ff fe4d 	bl	8001800 <measureVoltagesTemperaturesADC3>
	//Wait until ADC3 reading is done
	while (sADC.adc3_reading) ;
 8001b66:	bf00      	nop
 8001b68:	4b14      	ldr	r3, [pc, #80]	@ (8001bbc <PowerOnLowSupplies+0x74>)
 8001b6a:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	@ 0x70c
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1f9      	bne.n	8001b68 <PowerOnLowSupplies+0x20>

	//Check 15V voltage
	if (sADC.adc3_data[ADC3_15V] >= sADC3threshold[ADC3_15V])
 8001b74:	4b11      	ldr	r3, [pc, #68]	@ (8001bbc <PowerOnLowSupplies+0x74>)
 8001b76:	f8b3 24b2 	ldrh.w	r2, [r3, #1202]	@ 0x4b2
 8001b7a:	4b11      	ldr	r3, [pc, #68]	@ (8001bc0 <PowerOnLowSupplies+0x78>)
 8001b7c:	885b      	ldrh	r3, [r3, #2]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d30f      	bcc.n	8001ba2 <PowerOnLowSupplies+0x5a>
		printString("Ok");
 8001b82:	4810      	ldr	r0, [pc, #64]	@ (8001bc4 <PowerOnLowSupplies+0x7c>)
 8001b84:	f7fe fdee 	bl	8000764 <printString>
		PowerOffLowSupplies();
		return(0);
	}

	//Power on 3.3V switch voltage
	printString("\n\rPower on 3.3V switch");
 8001b88:	480f      	ldr	r0, [pc, #60]	@ (8001bc8 <PowerOnLowSupplies+0x80>)
 8001b8a:	f7fe fdeb 	bl	8000764 <printString>
	HAL_GPIO_WritePin(OUT_3V3_SWITCH_GPIO_Port, OUT_3V3_SWITCH_Pin, GPIO_PIN_RESET);
 8001b8e:	2200      	movs	r2, #0
 8001b90:	2101      	movs	r1, #1
 8001b92:	4808      	ldr	r0, [pc, #32]	@ (8001bb4 <PowerOnLowSupplies+0x6c>)
 8001b94:	f008 fc84 	bl	800a4a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001b98:	2001      	movs	r0, #1
 8001b9a:	f002 fa4b 	bl	8004034 <HAL_Delay>

	return(1);
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e005      	b.n	8001bae <PowerOnLowSupplies+0x66>
		printString("Fail");
 8001ba2:	480a      	ldr	r0, [pc, #40]	@ (8001bcc <PowerOnLowSupplies+0x84>)
 8001ba4:	f7fe fdde 	bl	8000764 <printString>
		PowerOffLowSupplies();
 8001ba8:	f7ff ff7c 	bl	8001aa4 <PowerOffLowSupplies>
		return(0);
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	58020c00 	.word	0x58020c00
 8001bb8:	0801186c 	.word	0x0801186c
 8001bbc:	240001b0 	.word	0x240001b0
 8001bc0:	24000004 	.word	0x24000004
 8001bc4:	08011880 	.word	0x08011880
 8001bc8:	0801188c 	.word	0x0801188c
 8001bcc:	08011884 	.word	0x08011884

08001bd0 <PowerOnHighSupplies>:

//Power On Supply 500V
//Returns 1 if the power up was successful, and 0 if it failed
int PowerOnHighSupplies(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
	stopHbridge(); 	//Make sure the H-bridge outputs are zero before enabling the line driver
 8001bd4:	f7fe fe96 	bl	8000904 <stopHbridge>

	//Enable Line Drive 1
	printString("\n\rEnable Line Drive 1");
 8001bd8:	481b      	ldr	r0, [pc, #108]	@ (8001c48 <PowerOnHighSupplies+0x78>)
 8001bda:	f7fe fdc3 	bl	8000764 <printString>
	HAL_GPIO_WritePin(LINE_DRIVER1_ENABLE_GPIO_Port, LINE_DRIVER1_ENABLE_Pin, GPIO_PIN_RESET);
 8001bde:	2200      	movs	r2, #0
 8001be0:	2104      	movs	r1, #4
 8001be2:	481a      	ldr	r0, [pc, #104]	@ (8001c4c <PowerOnHighSupplies+0x7c>)
 8001be4:	f008 fc5c 	bl	800a4a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001be8:	2001      	movs	r0, #1
 8001bea:	f002 fa23 	bl	8004034 <HAL_Delay>

	//Power on 500V
	printString("\n\rPower on 500V - ");
 8001bee:	4818      	ldr	r0, [pc, #96]	@ (8001c50 <PowerOnHighSupplies+0x80>)
 8001bf0:	f7fe fdb8 	bl	8000764 <printString>
	HAL_GPIO_WritePin(OUT_500V_ENABLE_GPIO_Port, OUT_500V_ENABLE_Pin, GPIO_PIN_RESET);	//There is an inverter between MCU and the output, thus RESET
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	4816      	ldr	r0, [pc, #88]	@ (8001c54 <PowerOnHighSupplies+0x84>)
 8001bfa:	f008 fc51 	bl	800a4a0 <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001bfe:	2001      	movs	r0, #1
 8001c00:	f002 fa18 	bl	8004034 <HAL_Delay>

	//Start reading ADC3 channels
	measureVoltagesTemperaturesADC3();
 8001c04:	f7ff fdfc 	bl	8001800 <measureVoltagesTemperaturesADC3>
	//Wait until ADC reading is done
	while (sADC.adc3_reading) ;
 8001c08:	bf00      	nop
 8001c0a:	4b13      	ldr	r3, [pc, #76]	@ (8001c58 <PowerOnHighSupplies+0x88>)
 8001c0c:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	@ 0x70c
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f9      	bne.n	8001c0a <PowerOnHighSupplies+0x3a>

	//Check 500V voltage
	if (sADC.adc3_data[ADC3_500VDC] >= sADC3threshold[ADC3_500VDC])
 8001c16:	4b10      	ldr	r3, [pc, #64]	@ (8001c58 <PowerOnHighSupplies+0x88>)
 8001c18:	f8b3 24ba 	ldrh.w	r2, [r3, #1210]	@ 0x4ba
 8001c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c5c <PowerOnHighSupplies+0x8c>)
 8001c1e:	895b      	ldrh	r3, [r3, #10]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d303      	bcc.n	8001c2c <PowerOnHighSupplies+0x5c>
		printString("Ok");
 8001c24:	480e      	ldr	r0, [pc, #56]	@ (8001c60 <PowerOnHighSupplies+0x90>)
 8001c26:	f7fe fd9d 	bl	8000764 <printString>
 8001c2a:	e002      	b.n	8001c32 <PowerOnHighSupplies+0x62>
	else
	{
		//printString("Fail");
		printString("debug");
 8001c2c:	480d      	ldr	r0, [pc, #52]	@ (8001c64 <PowerOnHighSupplies+0x94>)
 8001c2e:	f7fe fd99 	bl	8000764 <printString>
		//PowerOffHighSupplies();
		//return(0);
	}

	//Signal to robot controller all power supplies are active
	HAL_GPIO_WritePin(LED_ACTIVE_GPIO_Port, LED_ACTIVE_Pin, GPIO_PIN_RESET);	//There is an inverter between MCU and the output, thus RESET
 8001c32:	2200      	movs	r2, #0
 8001c34:	2101      	movs	r1, #1
 8001c36:	480c      	ldr	r0, [pc, #48]	@ (8001c68 <PowerOnHighSupplies+0x98>)
 8001c38:	f008 fc32 	bl	800a4a0 <HAL_GPIO_WritePin>

	powerStatus = V500_ON;
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c6c <PowerOnHighSupplies+0x9c>)
 8001c3e:	2201      	movs	r2, #1
 8001c40:	801a      	strh	r2, [r3, #0]

	return(1);
 8001c42:	2301      	movs	r3, #1
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	080118a4 	.word	0x080118a4
 8001c4c:	58020400 	.word	0x58020400
 8001c50:	080118bc 	.word	0x080118bc
 8001c54:	58021800 	.word	0x58021800
 8001c58:	240001b0 	.word	0x240001b0
 8001c5c:	24000004 	.word	0x24000004
 8001c60:	08011880 	.word	0x08011880
 8001c64:	080118d0 	.word	0x080118d0
 8001c68:	58021000 	.word	0x58021000
 8001c6c:	240008c0 	.word	0x240008c0

08001c70 <HAL_GPIO_EXTI_Callback>:

// GPIO interrupt handler
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	80fb      	strh	r3, [r7, #6]
	if (sFlashConfig.mode == RUN_MODE)
 8001c7a:	4b07      	ldr	r3, [pc, #28]	@ (8001c98 <HAL_GPIO_EXTI_Callback+0x28>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d105      	bne.n	8001c8e <HAL_GPIO_EXTI_Callback+0x1e>
	{
		// Power off request received
		if(GPIO_Pin == POWER_OFF_IRQ_Pin)
 8001c82:	88fb      	ldrh	r3, [r7, #6]
 8001c84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c88:	d101      	bne.n	8001c8e <HAL_GPIO_EXTI_Callback+0x1e>
			PowerOffSupplies();
 8001c8a:	f7ff ff55 	bl	8001b38 <PowerOffSupplies>
	}
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	240008c4 	.word	0x240008c4

08001c9c <InitializeConfigMenu>:

// Initialize the UART3 configuration menu
static void InitializeConfigMenu(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
	int item = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	607b      	str	r3, [r7, #4]

	config_menu[item++] = "\n\rPlasma Driver Configuration Menu";
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	1c5a      	adds	r2, r3, #1
 8001caa:	607a      	str	r2, [r7, #4]
 8001cac:	4a0c      	ldr	r2, [pc, #48]	@ (8001ce0 <InitializeConfigMenu+0x44>)
 8001cae:	490d      	ldr	r1, [pc, #52]	@ (8001ce4 <InitializeConfigMenu+0x48>)
 8001cb0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	config_menu[item++] = "   m: Change mode (Test/Run)";
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	1c5a      	adds	r2, r3, #1
 8001cb8:	607a      	str	r2, [r7, #4]
 8001cba:	4a09      	ldr	r2, [pc, #36]	@ (8001ce0 <InitializeConfigMenu+0x44>)
 8001cbc:	490a      	ldr	r1, [pc, #40]	@ (8001ce8 <InitializeConfigMenu+0x4c>)
 8001cbe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if (item > CONFIG_MENU_SIZE)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	dd06      	ble.n	8001cd6 <InitializeConfigMenu+0x3a>
		HAL_UART_Transmit(&huart3, (uint8_t *) "\n\rIncrease CONFIG_MENU_SIZE", 20, 1000);
 8001cc8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ccc:	2214      	movs	r2, #20
 8001cce:	4907      	ldr	r1, [pc, #28]	@ (8001cec <InitializeConfigMenu+0x50>)
 8001cd0:	4807      	ldr	r0, [pc, #28]	@ (8001cf0 <InitializeConfigMenu+0x54>)
 8001cd2:	f00d fb68 	bl	800f3a6 <HAL_UART_Transmit>

}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	240001a8 	.word	0x240001a8
 8001ce4:	080118d8 	.word	0x080118d8
 8001ce8:	080118fc 	.word	0x080118fc
 8001cec:	0801191c 	.word	0x0801191c
 8001cf0:	24000cb4 	.word	0x24000cb4

08001cf4 <InitializeMenu>:

// Initialize the UART3 menu
static void InitializeMenu(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
	int item = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	607b      	str	r3, [r7, #4]

	//Clear previous menu
	for (int i=0; i < MAX_MENU_SIZE; ++i)
 8001cfe:	2300      	movs	r3, #0
 8001d00:	603b      	str	r3, [r7, #0]
 8001d02:	e007      	b.n	8001d14 <InitializeMenu+0x20>
	{
		menu[i] = "";
 8001d04:	4a48      	ldr	r2, [pc, #288]	@ (8001e28 <InitializeMenu+0x134>)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	4948      	ldr	r1, [pc, #288]	@ (8001e2c <InitializeMenu+0x138>)
 8001d0a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i=0; i < MAX_MENU_SIZE; ++i)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	3301      	adds	r3, #1
 8001d12:	603b      	str	r3, [r7, #0]
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	2b0b      	cmp	r3, #11
 8001d18:	ddf4      	ble.n	8001d04 <InitializeMenu+0x10>
	}

	if (sFlashConfig.mode == TEST_MODE)
 8001d1a:	4b45      	ldr	r3, [pc, #276]	@ (8001e30 <InitializeMenu+0x13c>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d154      	bne.n	8001dcc <InitializeMenu+0xd8>
	{
		menu[item++] = "\n\rPlasma Driver TEST Menu";
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	1c5a      	adds	r2, r3, #1
 8001d26:	607a      	str	r2, [r7, #4]
 8001d28:	4a3f      	ldr	r2, [pc, #252]	@ (8001e28 <InitializeMenu+0x134>)
 8001d2a:	4942      	ldr	r1, [pc, #264]	@ (8001e34 <InitializeMenu+0x140>)
 8001d2c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   p: Power on supplies";
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	1c5a      	adds	r2, r3, #1
 8001d34:	607a      	str	r2, [r7, #4]
 8001d36:	4a3c      	ldr	r2, [pc, #240]	@ (8001e28 <InitializeMenu+0x134>)
 8001d38:	493f      	ldr	r1, [pc, #252]	@ (8001e38 <InitializeMenu+0x144>)
 8001d3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   o: Power off supplies";
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	1c5a      	adds	r2, r3, #1
 8001d42:	607a      	str	r2, [r7, #4]
 8001d44:	4a38      	ldr	r2, [pc, #224]	@ (8001e28 <InitializeMenu+0x134>)
 8001d46:	493d      	ldr	r1, [pc, #244]	@ (8001e3c <InitializeMenu+0x148>)
 8001d48:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   s: Start/stop driving H-Bridge";
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	1c5a      	adds	r2, r3, #1
 8001d50:	607a      	str	r2, [r7, #4]
 8001d52:	4a35      	ldr	r2, [pc, #212]	@ (8001e28 <InitializeMenu+0x134>)
 8001d54:	493a      	ldr	r1, [pc, #232]	@ (8001e40 <InitializeMenu+0x14c>)
 8001d56:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   f: Set H-bridge frequency (Hz)";
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	1c5a      	adds	r2, r3, #1
 8001d5e:	607a      	str	r2, [r7, #4]
 8001d60:	4a31      	ldr	r2, [pc, #196]	@ (8001e28 <InitializeMenu+0x134>)
 8001d62:	4938      	ldr	r1, [pc, #224]	@ (8001e44 <InitializeMenu+0x150>)
 8001d64:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   d: Set H-bridge dead time (%)";
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	1c5a      	adds	r2, r3, #1
 8001d6c:	607a      	str	r2, [r7, #4]
 8001d6e:	4a2e      	ldr	r2, [pc, #184]	@ (8001e28 <InitializeMenu+0x134>)
 8001d70:	4935      	ldr	r1, [pc, #212]	@ (8001e48 <InitializeMenu+0x154>)
 8001d72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   a: Start ADC1 and ADC2 measurement";
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	1c5a      	adds	r2, r3, #1
 8001d7a:	607a      	str	r2, [r7, #4]
 8001d7c:	4a2a      	ldr	r2, [pc, #168]	@ (8001e28 <InitializeMenu+0x134>)
 8001d7e:	4933      	ldr	r1, [pc, #204]	@ (8001e4c <InitializeMenu+0x158>)
 8001d80:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   b: Start ADC3 measurement";
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	1c5a      	adds	r2, r3, #1
 8001d88:	607a      	str	r2, [r7, #4]
 8001d8a:	4a27      	ldr	r2, [pc, #156]	@ (8001e28 <InitializeMenu+0x134>)
 8001d8c:	4930      	ldr	r1, [pc, #192]	@ (8001e50 <InitializeMenu+0x15c>)
 8001d8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   q: Frequency correction";
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	1c5a      	adds	r2, r3, #1
 8001d96:	607a      	str	r2, [r7, #4]
 8001d98:	4a23      	ldr	r2, [pc, #140]	@ (8001e28 <InitializeMenu+0x134>)
 8001d9a:	492e      	ldr	r1, [pc, #184]	@ (8001e54 <InitializeMenu+0x160>)
 8001d9c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   z: Debug output (On/Off)";
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	1c5a      	adds	r2, r3, #1
 8001da4:	607a      	str	r2, [r7, #4]
 8001da6:	4a20      	ldr	r2, [pc, #128]	@ (8001e28 <InitializeMenu+0x134>)
 8001da8:	492b      	ldr	r1, [pc, #172]	@ (8001e58 <InitializeMenu+0x164>)
 8001daa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   c: Show/Change configuration";
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	1c5a      	adds	r2, r3, #1
 8001db2:	607a      	str	r2, [r7, #4]
 8001db4:	4a1c      	ldr	r2, [pc, #112]	@ (8001e28 <InitializeMenu+0x134>)
 8001db6:	4929      	ldr	r1, [pc, #164]	@ (8001e5c <InitializeMenu+0x168>)
 8001db8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   t: Test GPIO";
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	1c5a      	adds	r2, r3, #1
 8001dc0:	607a      	str	r2, [r7, #4]
 8001dc2:	4a19      	ldr	r2, [pc, #100]	@ (8001e28 <InitializeMenu+0x134>)
 8001dc4:	4926      	ldr	r1, [pc, #152]	@ (8001e60 <InitializeMenu+0x16c>)
 8001dc6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001dca:	e019      	b.n	8001e00 <InitializeMenu+0x10c>
	}
	else if ((sFlashConfig.mode == RUN_MODE))
 8001dcc:	4b18      	ldr	r3, [pc, #96]	@ (8001e30 <InitializeMenu+0x13c>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d10e      	bne.n	8001df2 <InitializeMenu+0xfe>
	{
		menu[item++] = "\n\rPlasma Driver RUN Menu";
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	1c5a      	adds	r2, r3, #1
 8001dd8:	607a      	str	r2, [r7, #4]
 8001dda:	4a13      	ldr	r2, [pc, #76]	@ (8001e28 <InitializeMenu+0x134>)
 8001ddc:	4921      	ldr	r1, [pc, #132]	@ (8001e64 <InitializeMenu+0x170>)
 8001dde:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   c: Show/Change current configuration";
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	1c5a      	adds	r2, r3, #1
 8001de6:	607a      	str	r2, [r7, #4]
 8001de8:	4a0f      	ldr	r2, [pc, #60]	@ (8001e28 <InitializeMenu+0x134>)
 8001dea:	491f      	ldr	r1, [pc, #124]	@ (8001e68 <InitializeMenu+0x174>)
 8001dec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001df0:	e006      	b.n	8001e00 <InitializeMenu+0x10c>
	}
	else
	{
		menu[item++] = "\n\rERROR SETTING UP MENU";
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	1c5a      	adds	r2, r3, #1
 8001df6:	607a      	str	r2, [r7, #4]
 8001df8:	4a0b      	ldr	r2, [pc, #44]	@ (8001e28 <InitializeMenu+0x134>)
 8001dfa:	491c      	ldr	r1, [pc, #112]	@ (8001e6c <InitializeMenu+0x178>)
 8001dfc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	menu_size = item;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	4b1a      	ldr	r3, [pc, #104]	@ (8001e70 <InitializeMenu+0x17c>)
 8001e06:	801a      	strh	r2, [r3, #0]

	if (menu_size> MAX_MENU_SIZE)
 8001e08:	4b19      	ldr	r3, [pc, #100]	@ (8001e70 <InitializeMenu+0x17c>)
 8001e0a:	881b      	ldrh	r3, [r3, #0]
 8001e0c:	2b0c      	cmp	r3, #12
 8001e0e:	d906      	bls.n	8001e1e <InitializeMenu+0x12a>
		HAL_UART_Transmit(&huart3, (uint8_t *) "\n\rIncrease MENU_SIZE", 20, 1000);
 8001e10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e14:	2214      	movs	r2, #20
 8001e16:	4917      	ldr	r1, [pc, #92]	@ (8001e74 <InitializeMenu+0x180>)
 8001e18:	4817      	ldr	r0, [pc, #92]	@ (8001e78 <InitializeMenu+0x184>)
 8001e1a:	f00d fac4 	bl	800f3a6 <HAL_UART_Transmit>

}
 8001e1e:	bf00      	nop
 8001e20:	3708      	adds	r7, #8
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	24000174 	.word	0x24000174
 8001e2c:	08011938 	.word	0x08011938
 8001e30:	240008c4 	.word	0x240008c4
 8001e34:	0801193c 	.word	0x0801193c
 8001e38:	08011958 	.word	0x08011958
 8001e3c:	08011970 	.word	0x08011970
 8001e40:	0801198c 	.word	0x0801198c
 8001e44:	080119b0 	.word	0x080119b0
 8001e48:	080119d4 	.word	0x080119d4
 8001e4c:	080119f8 	.word	0x080119f8
 8001e50:	08011a20 	.word	0x08011a20
 8001e54:	08011a40 	.word	0x08011a40
 8001e58:	08011a5c 	.word	0x08011a5c
 8001e5c:	08011a78 	.word	0x08011a78
 8001e60:	08011a98 	.word	0x08011a98
 8001e64:	08011aa8 	.word	0x08011aa8
 8001e68:	08011ac4 	.word	0x08011ac4
 8001e6c:	08011aec 	.word	0x08011aec
 8001e70:	240001a4 	.word	0x240001a4
 8001e74:	08011b04 	.word	0x08011b04
 8001e78:	24000cb4 	.word	0x24000cb4

08001e7c <ShowChangeConfigFlash>:

// Show configuration. Add option to change configuration
void ShowChangeConfigFlash(void)
{
 8001e7c:	b590      	push	{r4, r7, lr}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
	uint16_t aYes;
	uint16_t mode;
	char input;

	printConfigFlash();
 8001e82:	f7fe fc85 	bl	8000790 <printConfigFlash>
	printString("\n\rChange configuration (0:No 1:Yes)? ");
 8001e86:	482e      	ldr	r0, [pc, #184]	@ (8001f40 <ShowChangeConfigFlash+0xc4>)
 8001e88:	f7fe fc6c 	bl	8000764 <printString>
	if (GetUint16Input(&aYes, 1, 0, 1))
 8001e8c:	f107 000a 	add.w	r0, r7, #10
 8001e90:	2301      	movs	r3, #1
 8001e92:	2200      	movs	r2, #0
 8001e94:	2101      	movs	r1, #1
 8001e96:	f7ff fd55 	bl	8001944 <GetUint16Input>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d04b      	beq.n	8001f38 <ShowChangeConfigFlash+0xbc>
	{
		if (aYes)
 8001ea0:	897b      	ldrh	r3, [r7, #10]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d048      	beq.n	8001f38 <ShowChangeConfigFlash+0xbc>
		{
			for (int i=0; i<CONFIG_MENU_SIZE; i++)
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	e017      	b.n	8001edc <ShowChangeConfigFlash+0x60>
			{
				HAL_UART_Transmit(&huart3, (uint8_t *) config_menu[i], strlen(config_menu[i]), 1000);
 8001eac:	4a25      	ldr	r2, [pc, #148]	@ (8001f44 <ShowChangeConfigFlash+0xc8>)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8001eb4:	4a23      	ldr	r2, [pc, #140]	@ (8001f44 <ShowChangeConfigFlash+0xc8>)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7fe fa27 	bl	8000310 <strlen>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eca:	4621      	mov	r1, r4
 8001ecc:	481e      	ldr	r0, [pc, #120]	@ (8001f48 <ShowChangeConfigFlash+0xcc>)
 8001ece:	f00d fa6a 	bl	800f3a6 <HAL_UART_Transmit>
				printCR();
 8001ed2:	f7fe fc37 	bl	8000744 <printCR>
			for (int i=0; i<CONFIG_MENU_SIZE; i++)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	dde4      	ble.n	8001eac <ShowChangeConfigFlash+0x30>
			}
			printCR();
 8001ee2:	f7fe fc2f 	bl	8000744 <printCR>

			//Wait for user input
			if (HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 60000) == HAL_OK)
 8001ee6:	1df9      	adds	r1, r7, #7
 8001ee8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8001eec:	2201      	movs	r2, #1
 8001eee:	4816      	ldr	r0, [pc, #88]	@ (8001f48 <ShowChangeConfigFlash+0xcc>)
 8001ef0:	f00d fae7 	bl	800f4c2 <HAL_UART_Receive>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d11e      	bne.n	8001f38 <ShowChangeConfigFlash+0xbc>
			{
				switch (input)
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	2b6d      	cmp	r3, #109	@ 0x6d
 8001efe:	d11b      	bne.n	8001f38 <ShowChangeConfigFlash+0xbc>
				{
					case 'm': //Change mode
						printString("\n\rChange mode (0:Test 1:Run)? ");
 8001f00:	4812      	ldr	r0, [pc, #72]	@ (8001f4c <ShowChangeConfigFlash+0xd0>)
 8001f02:	f7fe fc2f 	bl	8000764 <printString>
						if (GetUint16Input(&mode, 1, 0, 1))
 8001f06:	f107 0008 	add.w	r0, r7, #8
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	2101      	movs	r1, #1
 8001f10:	f7ff fd18 	bl	8001944 <GetUint16Input>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00d      	beq.n	8001f36 <ShowChangeConfigFlash+0xba>
						{   // Data entry valid
							if (sFlashConfig.mode != mode)
 8001f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f50 <ShowChangeConfigFlash+0xd4>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	893b      	ldrh	r3, [r7, #8]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d007      	beq.n	8001f36 <ShowChangeConfigFlash+0xba>
							{
								sFlashConfig.mode = mode;
 8001f26:	893b      	ldrh	r3, [r7, #8]
 8001f28:	b2da      	uxtb	r2, r3
 8001f2a:	4b09      	ldr	r3, [pc, #36]	@ (8001f50 <ShowChangeConfigFlash+0xd4>)
 8001f2c:	701a      	strb	r2, [r3, #0]
								InitializeMenu();
 8001f2e:	f7ff fee1 	bl	8001cf4 <InitializeMenu>
								writeConfigFlash();
 8001f32:	f7fe fbbd 	bl	80006b0 <writeConfigFlash>
							}
						}
					break;
 8001f36:	bf00      	nop
				}
			}
		}
	}
}
 8001f38:	bf00      	nop
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd90      	pop	{r4, r7, pc}
 8001f40:	08011b1c 	.word	0x08011b1c
 8001f44:	240001a8 	.word	0x240001a8
 8001f48:	24000cb4 	.word	0x24000cb4
 8001f4c:	08011b44 	.word	0x08011b44
 8001f50:	240008c4 	.word	0x240008c4

08001f54 <testGPIO>:

//Test GPIO settings
void testGPIO(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0

		printString("\n\rClear LED_GREEN");
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
		GetUint16Input(&aYes, 1, 0, 1);
*/
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <RunModeAction>:

// Action table for the run mode menu
static void RunModeAction(char input)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b082      	sub	sp, #8
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	4603      	mov	r3, r0
 8001f6a:	71fb      	strb	r3, [r7, #7]
	switch (input)
 8001f6c:	79fb      	ldrb	r3, [r7, #7]
 8001f6e:	2b63      	cmp	r3, #99	@ 0x63
 8001f70:	d102      	bne.n	8001f78 <RunModeAction+0x16>
	{
		case 'c': //Show/Change current configuration
			ShowChangeConfigFlash();
 8001f72:	f7ff ff83 	bl	8001e7c <ShowChangeConfigFlash>
			break;
 8001f76:	bf00      	nop
	}
}
 8001f78:	bf00      	nop
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <TestModeAction>:

// Action table for the test mode menu
static void TestModeAction(char input)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b09c      	sub	sp, #112	@ 0x70
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	71fb      	strb	r3, [r7, #7]
	switch (input)
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	3b61      	subs	r3, #97	@ 0x61
 8001f8e:	2b19      	cmp	r3, #25
 8001f90:	f200 80e3 	bhi.w	800215a <TestModeAction+0x1da>
 8001f94:	a201      	add	r2, pc, #4	@ (adr r2, 8001f9c <TestModeAction+0x1c>)
 8001f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f9a:	bf00      	nop
 8001f9c:	0800203b 	.word	0x0800203b
 8001fa0:	08002063 	.word	0x08002063
 8001fa4:	08002141 	.word	0x08002141
 8001fa8:	080020a5 	.word	0x080020a5
 8001fac:	0800215b 	.word	0x0800215b
 8001fb0:	0800207b 	.word	0x0800207b
 8001fb4:	0800215b 	.word	0x0800215b
 8001fb8:	0800215b 	.word	0x0800215b
 8001fbc:	0800215b 	.word	0x0800215b
 8001fc0:	0800215b 	.word	0x0800215b
 8001fc4:	0800215b 	.word	0x0800215b
 8001fc8:	0800215b 	.word	0x0800215b
 8001fcc:	0800215b 	.word	0x0800215b
 8001fd0:	0800215b 	.word	0x0800215b
 8001fd4:	0800202f 	.word	0x0800202f
 8001fd8:	08002005 	.word	0x08002005
 8001fdc:	080020f1 	.word	0x080020f1
 8001fe0:	0800215b 	.word	0x0800215b
 8001fe4:	080020cb 	.word	0x080020cb
 8001fe8:	08002147 	.word	0x08002147
 8001fec:	0800215b 	.word	0x0800215b
 8001ff0:	0800215b 	.word	0x0800215b
 8001ff4:	0800215b 	.word	0x0800215b
 8001ff8:	0800215b 	.word	0x0800215b
 8001ffc:	0800215b 	.word	0x0800215b
 8002000:	0800211f 	.word	0x0800211f
	{
		case 'p': //Power supplies on
			if (powerStatus == V500_OFF)
 8002004:	4b57      	ldr	r3, [pc, #348]	@ (8002164 <TestModeAction+0x1e4>)
 8002006:	881b      	ldrh	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d10c      	bne.n	8002026 <TestModeAction+0xa6>
			{
				if (PowerOnHighSupplies() == POWERON_FAILED)
 800200c:	f7ff fde0 	bl	8001bd0 <PowerOnHighSupplies>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d103      	bne.n	800201e <TestModeAction+0x9e>
				{
					printString("\n\rPower on failed\n\r");
 8002016:	4854      	ldr	r0, [pc, #336]	@ (8002168 <TestModeAction+0x1e8>)
 8002018:	f7fe fba4 	bl	8000764 <printString>
			}
			else
			{
				printString("\n\rPower supplies are on\n\r");
			}
			break;
 800201c:	e09d      	b.n	800215a <TestModeAction+0x1da>
					printString("\n\rPower on succeeded\n\r");
 800201e:	4853      	ldr	r0, [pc, #332]	@ (800216c <TestModeAction+0x1ec>)
 8002020:	f7fe fba0 	bl	8000764 <printString>
			break;
 8002024:	e099      	b.n	800215a <TestModeAction+0x1da>
				printString("\n\rPower supplies are on\n\r");
 8002026:	4852      	ldr	r0, [pc, #328]	@ (8002170 <TestModeAction+0x1f0>)
 8002028:	f7fe fb9c 	bl	8000764 <printString>
			break;
 800202c:	e095      	b.n	800215a <TestModeAction+0x1da>

		case 'o': //Power supplies off
			printString("\n\rPower off supplies\n\r");
 800202e:	4851      	ldr	r0, [pc, #324]	@ (8002174 <TestModeAction+0x1f4>)
 8002030:	f7fe fb98 	bl	8000764 <printString>
			PowerOffHighSupplies();
 8002034:	f7ff fd5a 	bl	8001aec <PowerOffHighSupplies>
			break;
 8002038:	e08f      	b.n	800215a <TestModeAction+0x1da>

		case 'a': //Start ADC1 and ADC2 analog voltage measurement
			if (sHbridge.on)
 800203a:	4b4f      	ldr	r3, [pc, #316]	@ (8002178 <TestModeAction+0x1f8>)
 800203c:	881b      	ldrh	r3, [r3, #0]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00b      	beq.n	800205a <TestModeAction+0xda>
			{
				//Setup to read ADC1 and ADC2 channels
				//Reading will start at TIM1 CH1 0->1 interrupt
				measureBridgePlasmaADC12();
 8002042:	f7ff f9dd 	bl	8001400 <measureBridgePlasmaADC12>
				//Wait until ADC3 reading is done
				while (sADC.adc12_reading) ;
 8002046:	bf00      	nop
 8002048:	4b4c      	ldr	r3, [pc, #304]	@ (800217c <TestModeAction+0x1fc>)
 800204a:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	@ 0x70e
 800204e:	b29b      	uxth	r3, r3
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1f9      	bne.n	8002048 <TestModeAction+0xc8>
				//Print ADC3 data on UART3
				printADC12data();
 8002054:	f7fe ffc0 	bl	8000fd8 <printADC12data>
			}
			else
			{
				printString("\n\r ---- H-Bridge needs to be on");
			}
			break;
 8002058:	e07f      	b.n	800215a <TestModeAction+0x1da>
				printString("\n\r ---- H-Bridge needs to be on");
 800205a:	4849      	ldr	r0, [pc, #292]	@ (8002180 <TestModeAction+0x200>)
 800205c:	f7fe fb82 	bl	8000764 <printString>
			break;
 8002060:	e07b      	b.n	800215a <TestModeAction+0x1da>

		case 'b': //Start ADC3 analog voltage measurement
				//Start reading ADC3 channels
				measureVoltagesTemperaturesADC3();
 8002062:	f7ff fbcd 	bl	8001800 <measureVoltagesTemperaturesADC3>
				//Wait until ADC3 reading is done
				while (sADC.adc3_reading) ;
 8002066:	bf00      	nop
 8002068:	4b44      	ldr	r3, [pc, #272]	@ (800217c <TestModeAction+0x1fc>)
 800206a:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	@ 0x70c
 800206e:	b29b      	uxth	r3, r3
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1f9      	bne.n	8002068 <TestModeAction+0xe8>
				//Print ADC3 data on UART3
				printADC3data();
 8002074:	f7ff fb7e 	bl	8001774 <printADC3data>
			break;
 8002078:	e06f      	b.n	800215a <TestModeAction+0x1da>

		case 'f': //Enter frequency (Hz)
			printHbridgeData();
 800207a:	f7fe fc71 	bl	8000960 <printHbridgeData>
			printString("\n\rEnter frequency (Hz): ");
 800207e:	4841      	ldr	r0, [pc, #260]	@ (8002184 <TestModeAction+0x204>)
 8002080:	f7fe fb70 	bl	8000764 <printString>
			if (GetUint16Input(&sHbridge.frequency, 1, MIN_FREQUENCY, MAX_FREQUENCY))
 8002084:	f64f 53e8 	movw	r3, #65000	@ 0xfde8
 8002088:	f643 2298 	movw	r2, #15000	@ 0x3a98
 800208c:	2101      	movs	r1, #1
 800208e:	483e      	ldr	r0, [pc, #248]	@ (8002188 <TestModeAction+0x208>)
 8002090:	f7ff fc58 	bl	8001944 <GetUint16Input>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d058      	beq.n	800214c <TestModeAction+0x1cc>
			{   // Data entry valid
				programHbridge();
 800209a:	f7fe fc89 	bl	80009b0 <programHbridge>
				printHbridgeData();
 800209e:	f7fe fc5f 	bl	8000960 <printHbridgeData>
			}
			break;
 80020a2:	e053      	b.n	800214c <TestModeAction+0x1cc>

		case 'd': //Enter dead time (%)
			printHbridgeData();
 80020a4:	f7fe fc5c 	bl	8000960 <printHbridgeData>
			printString("\n\rEnter dead time (%): ");
 80020a8:	4838      	ldr	r0, [pc, #224]	@ (800218c <TestModeAction+0x20c>)
 80020aa:	f7fe fb5b 	bl	8000764 <printString>
			if (GetUint16Input(&sHbridge.deadtime, 1, MIN_DEADTIME, MAX_DEADTIME))
 80020ae:	2328      	movs	r3, #40	@ 0x28
 80020b0:	2201      	movs	r2, #1
 80020b2:	2101      	movs	r1, #1
 80020b4:	4836      	ldr	r0, [pc, #216]	@ (8002190 <TestModeAction+0x210>)
 80020b6:	f7ff fc45 	bl	8001944 <GetUint16Input>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d047      	beq.n	8002150 <TestModeAction+0x1d0>
			{   // Data entry valid
				programHbridge();
 80020c0:	f7fe fc76 	bl	80009b0 <programHbridge>
				printHbridgeData();
 80020c4:	f7fe fc4c 	bl	8000960 <printHbridgeData>
			}
			break;
 80020c8:	e042      	b.n	8002150 <TestModeAction+0x1d0>

		case 's': //Start/stop driving H-bridge
			printHbridgeData();
 80020ca:	f7fe fc49 	bl	8000960 <printHbridgeData>
			printString("\n\rDrive H-bridge 1:Yes 0:No : ");
 80020ce:	4831      	ldr	r0, [pc, #196]	@ (8002194 <TestModeAction+0x214>)
 80020d0:	f7fe fb48 	bl	8000764 <printString>
			if (GetUint16Input(&sHbridge.on, 1, 0, 1))
 80020d4:	2301      	movs	r3, #1
 80020d6:	2200      	movs	r2, #0
 80020d8:	2101      	movs	r1, #1
 80020da:	4827      	ldr	r0, [pc, #156]	@ (8002178 <TestModeAction+0x1f8>)
 80020dc:	f7ff fc32 	bl	8001944 <GetUint16Input>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d036      	beq.n	8002154 <TestModeAction+0x1d4>
			{   // Data entry valid
				programHbridge();
 80020e6:	f7fe fc63 	bl	80009b0 <programHbridge>
				printHbridgeData();
 80020ea:	f7fe fc39 	bl	8000960 <printHbridgeData>
			}
			break;
 80020ee:	e031      	b.n	8002154 <TestModeAction+0x1d4>

		case 'q': //Frequency correction
			int16_t freqCorr;
			if (freqCorrection(&freqCorr))
 80020f0:	f107 036e 	add.w	r3, r7, #110	@ 0x6e
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff f8bd 	bl	8001274 <freqCorrection>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d02b      	beq.n	8002158 <TestModeAction+0x1d8>
			{
				char text[100];
				sprintf(text, "\n\rFrequency correction: %i", (int) freqCorr);
 8002100:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8002104:	461a      	mov	r2, r3
 8002106:	f107 0308 	add.w	r3, r7, #8
 800210a:	4923      	ldr	r1, [pc, #140]	@ (8002198 <TestModeAction+0x218>)
 800210c:	4618      	mov	r0, r3
 800210e:	f00e fd0f 	bl	8010b30 <siprintf>
				printString(text);
 8002112:	f107 0308 	add.w	r3, r7, #8
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe fb24 	bl	8000764 <printString>
			}
			break;
 800211c:	e01c      	b.n	8002158 <TestModeAction+0x1d8>

		case 'z': //Debug output
			printNumber("\n\rCurrent Debug output: ", debug, 0);
 800211e:	4b1f      	ldr	r3, [pc, #124]	@ (800219c <TestModeAction+0x21c>)
 8002120:	881b      	ldrh	r3, [r3, #0]
 8002122:	2200      	movs	r2, #0
 8002124:	4619      	mov	r1, r3
 8002126:	481e      	ldr	r0, [pc, #120]	@ (80021a0 <TestModeAction+0x220>)
 8002128:	f7fe fb5e 	bl	80007e8 <printNumber>
			printString("\n\rSet Debug output 1:On 0:Off : ");
 800212c:	481d      	ldr	r0, [pc, #116]	@ (80021a4 <TestModeAction+0x224>)
 800212e:	f7fe fb19 	bl	8000764 <printString>
			GetUint16Input(&debug, 1, 0, 1);
 8002132:	2301      	movs	r3, #1
 8002134:	2200      	movs	r2, #0
 8002136:	2101      	movs	r1, #1
 8002138:	4818      	ldr	r0, [pc, #96]	@ (800219c <TestModeAction+0x21c>)
 800213a:	f7ff fc03 	bl	8001944 <GetUint16Input>
			break;
 800213e:	e00c      	b.n	800215a <TestModeAction+0x1da>

		case 'c': //Show/Change current configuration
			ShowChangeConfigFlash();
 8002140:	f7ff fe9c 	bl	8001e7c <ShowChangeConfigFlash>
			break;
 8002144:	e009      	b.n	800215a <TestModeAction+0x1da>

		case 't': //Test GPIO
			testGPIO();
 8002146:	f7ff ff05 	bl	8001f54 <testGPIO>
			break;
 800214a:	e006      	b.n	800215a <TestModeAction+0x1da>
			break;
 800214c:	bf00      	nop
 800214e:	e004      	b.n	800215a <TestModeAction+0x1da>
			break;
 8002150:	bf00      	nop
 8002152:	e002      	b.n	800215a <TestModeAction+0x1da>
			break;
 8002154:	bf00      	nop
 8002156:	e000      	b.n	800215a <TestModeAction+0x1da>
			break;
 8002158:	bf00      	nop
	}
}
 800215a:	bf00      	nop
 800215c:	3770      	adds	r7, #112	@ 0x70
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	240008c0 	.word	0x240008c0
 8002168:	08011b64 	.word	0x08011b64
 800216c:	08011b78 	.word	0x08011b78
 8002170:	08011b90 	.word	0x08011b90
 8002174:	08011bac 	.word	0x08011bac
 8002178:	2400001c 	.word	0x2400001c
 800217c:	240001b0 	.word	0x240001b0
 8002180:	08011bc4 	.word	0x08011bc4
 8002184:	08011be4 	.word	0x08011be4
 8002188:	2400001e 	.word	0x2400001e
 800218c:	08011c00 	.word	0x08011c00
 8002190:	24000020 	.word	0x24000020
 8002194:	08011c18 	.word	0x08011c18
 8002198:	08011c38 	.word	0x08011c38
 800219c:	24000000 	.word	0x24000000
 80021a0:	08011c54 	.word	0x08011c54
 80021a4:	08011c70 	.word	0x08011c70

080021a8 <PlasmaDriverMenu>:

// Print the plasma driver menu on UART3, and execute entered command.
static void PlasmaDriverMenu(void)
{
 80021a8:	b590      	push	{r4, r7, lr}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
	char input;

	//Wait for user input
	if (HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 1) == HAL_OK)
 80021ae:	1cf9      	adds	r1, r7, #3
 80021b0:	2301      	movs	r3, #1
 80021b2:	2201      	movs	r2, #1
 80021b4:	4822      	ldr	r0, [pc, #136]	@ (8002240 <PlasmaDriverMenu+0x98>)
 80021b6:	f00d f984 	bl	800f4c2 <HAL_UART_Receive>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d13b      	bne.n	8002238 <PlasmaDriverMenu+0x90>
	{
		// Return pressed -- Display Menu
		if (input == 13)
 80021c0:	78fb      	ldrb	r3, [r7, #3]
 80021c2:	2b0d      	cmp	r3, #13
 80021c4:	d123      	bne.n	800220e <PlasmaDriverMenu+0x66>
		{
			for (int i=0; i<menu_size; i++)
 80021c6:	2300      	movs	r3, #0
 80021c8:	607b      	str	r3, [r7, #4]
 80021ca:	e017      	b.n	80021fc <PlasmaDriverMenu+0x54>
			{
				HAL_UART_Transmit(&huart3, (uint8_t *) menu[i], strlen(menu[i]), 1000);
 80021cc:	4a1d      	ldr	r2, [pc, #116]	@ (8002244 <PlasmaDriverMenu+0x9c>)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80021d4:	4a1b      	ldr	r2, [pc, #108]	@ (8002244 <PlasmaDriverMenu+0x9c>)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021dc:	4618      	mov	r0, r3
 80021de:	f7fe f897 	bl	8000310 <strlen>
 80021e2:	4603      	mov	r3, r0
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021ea:	4621      	mov	r1, r4
 80021ec:	4814      	ldr	r0, [pc, #80]	@ (8002240 <PlasmaDriverMenu+0x98>)
 80021ee:	f00d f8da 	bl	800f3a6 <HAL_UART_Transmit>
				printCR();
 80021f2:	f7fe faa7 	bl	8000744 <printCR>
			for (int i=0; i<menu_size; i++)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	3301      	adds	r3, #1
 80021fa:	607b      	str	r3, [r7, #4]
 80021fc:	4b12      	ldr	r3, [pc, #72]	@ (8002248 <PlasmaDriverMenu+0xa0>)
 80021fe:	881b      	ldrh	r3, [r3, #0]
 8002200:	461a      	mov	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4293      	cmp	r3, r2
 8002206:	dbe1      	blt.n	80021cc <PlasmaDriverMenu+0x24>
			}
			printCR();
 8002208:	f7fe fa9c 	bl	8000744 <printCR>
				RunModeAction(input);
			else
				printString("\n\r*** ERROR *** Invalid mode");
		}
	}
}
 800220c:	e014      	b.n	8002238 <PlasmaDriverMenu+0x90>
			if (sFlashConfig.mode == TEST_MODE)
 800220e:	4b0f      	ldr	r3, [pc, #60]	@ (800224c <PlasmaDriverMenu+0xa4>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d104      	bne.n	8002220 <PlasmaDriverMenu+0x78>
				TestModeAction(input);
 8002216:	78fb      	ldrb	r3, [r7, #3]
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff feb1 	bl	8001f80 <TestModeAction>
}
 800221e:	e00b      	b.n	8002238 <PlasmaDriverMenu+0x90>
			else if (sFlashConfig.mode == RUN_MODE)
 8002220:	4b0a      	ldr	r3, [pc, #40]	@ (800224c <PlasmaDriverMenu+0xa4>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d104      	bne.n	8002232 <PlasmaDriverMenu+0x8a>
				RunModeAction(input);
 8002228:	78fb      	ldrb	r3, [r7, #3]
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff fe99 	bl	8001f62 <RunModeAction>
}
 8002230:	e002      	b.n	8002238 <PlasmaDriverMenu+0x90>
				printString("\n\r*** ERROR *** Invalid mode");
 8002232:	4807      	ldr	r0, [pc, #28]	@ (8002250 <PlasmaDriverMenu+0xa8>)
 8002234:	f7fe fa96 	bl	8000764 <printString>
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	bd90      	pop	{r4, r7, pc}
 8002240:	24000cb4 	.word	0x24000cb4
 8002244:	24000174 	.word	0x24000174
 8002248:	240001a4 	.word	0x240001a4
 800224c:	240008c4 	.word	0x240008c4
 8002250:	08011c94 	.word	0x08011c94

08002254 <PlasmaDriverInit>:

// Initialize the plasma driver
void PlasmaDriverInit(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
	//Enable line driver 2 (HAL has initialized all GPIO)
	HAL_GPIO_WritePin(LINE_DRIVER2_ENABLE_GPIO_Port, LINE_DRIVER2_ENABLE_Pin, GPIO_PIN_RESET);  //Enable = Low
 8002258:	2200      	movs	r2, #0
 800225a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800225e:	4821      	ldr	r0, [pc, #132]	@ (80022e4 <PlasmaDriverInit+0x90>)
 8002260:	f008 f91e 	bl	800a4a0 <HAL_GPIO_WritePin>
	printString("\n\rEnable Line Drive 2");
 8002264:	4820      	ldr	r0, [pc, #128]	@ (80022e8 <PlasmaDriverInit+0x94>)
 8002266:	f7fe fa7d 	bl	8000764 <printString>

	//Power On Supplies in order 15V, 3.3V switch
	PowerOnLowSupplies();
 800226a:	f7ff fc6d 	bl	8001b48 <PowerOnLowSupplies>

	//Read configuration from flash
	readConfigFlash();
 800226e:	f7fe fa59 	bl	8000724 <readConfigFlash>

	//Has the flash configuration been initialized?
	if (sFlashConfig.mode == 0xFF)
 8002272:	4b1e      	ldr	r3, [pc, #120]	@ (80022ec <PlasmaDriverInit+0x98>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2bff      	cmp	r3, #255	@ 0xff
 8002278:	d107      	bne.n	800228a <PlasmaDriverInit+0x36>
	{
		// write default configuration to flash
		if (writeConfigFlash() != 0)
 800227a:	f7fe fa19 	bl	80006b0 <writeConfigFlash>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d002      	beq.n	800228a <PlasmaDriverInit+0x36>
			printString("\n\r*** ERROR FLASH");
 8002284:	481a      	ldr	r0, [pc, #104]	@ (80022f0 <PlasmaDriverInit+0x9c>)
 8002286:	f7fe fa6d 	bl	8000764 <printString>
	}

	//Initialize menu and configuration menu
	InitializeMenu();
 800228a:	f7ff fd33 	bl	8001cf4 <InitializeMenu>
	InitializeConfigMenu();
 800228e:	f7ff fd05 	bl	8001c9c <InitializeConfigMenu>

	//Calibrate ADC1, ADC2 and ADC3
	printString("\n\rCalibrate ADC1, ADC2 and ADC3");
 8002292:	4818      	ldr	r0, [pc, #96]	@ (80022f4 <PlasmaDriverInit+0xa0>)
 8002294:	f7fe fa66 	bl	8000764 <printString>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8002298:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800229c:	2100      	movs	r1, #0
 800229e:	4816      	ldr	r0, [pc, #88]	@ (80022f8 <PlasmaDriverInit+0xa4>)
 80022a0:	f004 fc04 	bl	8006aac <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 80022a4:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80022a8:	2100      	movs	r1, #0
 80022aa:	4814      	ldr	r0, [pc, #80]	@ (80022fc <PlasmaDriverInit+0xa8>)
 80022ac:	f004 fbfe 	bl	8006aac <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 80022b0:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80022b4:	2100      	movs	r1, #0
 80022b6:	4812      	ldr	r0, [pc, #72]	@ (8002300 <PlasmaDriverInit+0xac>)
 80022b8:	f004 fbf8 	bl	8006aac <HAL_ADCEx_Calibration_Start>

	//Power On Supply 500V
	if (sFlashConfig.mode == RUN_MODE)
 80022bc:	4b0b      	ldr	r3, [pc, #44]	@ (80022ec <PlasmaDriverInit+0x98>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d10d      	bne.n	80022e0 <PlasmaDriverInit+0x8c>
	{
		//POWER_OFF_IRQ needs to be high before powering On
		if (HAL_GPIO_ReadPin(POWER_OFF_IRQ_GPIO_Port, POWER_OFF_IRQ_Pin) == GPIO_PIN_RESET)		//There is an inverter between MCU and the input, thus check RESET
 80022c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022c8:	480e      	ldr	r0, [pc, #56]	@ (8002304 <PlasmaDriverInit+0xb0>)
 80022ca:	f008 f8d1 	bl	800a470 <HAL_GPIO_ReadPin>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d102      	bne.n	80022da <PlasmaDriverInit+0x86>
			PowerOnHighSupplies();
 80022d4:	f7ff fc7c 	bl	8001bd0 <PowerOnHighSupplies>
		else
		printString("\n\rPOWER_OFF_IRQ line is not high - 500V is not powered on");
	}
}
 80022d8:	e002      	b.n	80022e0 <PlasmaDriverInit+0x8c>
		printString("\n\rPOWER_OFF_IRQ line is not high - 500V is not powered on");
 80022da:	480b      	ldr	r0, [pc, #44]	@ (8002308 <PlasmaDriverInit+0xb4>)
 80022dc:	f7fe fa42 	bl	8000764 <printString>
}
 80022e0:	bf00      	nop
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	58020400 	.word	0x58020400
 80022e8:	08011cb4 	.word	0x08011cb4
 80022ec:	240008c4 	.word	0x240008c4
 80022f0:	08011ccc 	.word	0x08011ccc
 80022f4:	08011ce0 	.word	0x08011ce0
 80022f8:	24000904 	.word	0x24000904
 80022fc:	24000974 	.word	0x24000974
 8002300:	240009e4 	.word	0x240009e4
 8002304:	58021000 	.word	0x58021000
 8002308:	08011d00 	.word	0x08011d00

0800230c <PlasmaDoTask>:

// This command is called from a while loop, and will execute any needed task.
void PlasmaDoTask(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
	PlasmaDriverMenu(); //Check UART3 and execute command
 8002310:	f7ff ff4a 	bl	80021a8 <PlasmaDriverMenu>

	if (sFlashConfig.mode == RUN_MODE)
 8002314:	4b0d      	ldr	r3, [pc, #52]	@ (800234c <PlasmaDoTask+0x40>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d114      	bne.n	8002346 <PlasmaDoTask+0x3a>
	{
		//Check if robot controller requested the plasma On or Off
		if (HAL_GPIO_ReadPin(TURN_PLASMA_ON_GPIO_Port, TURN_PLASMA_ON_Pin) == GPIO_PIN_RESET)		//There is an inverter between MCU and the input, thus check RESET
 800231c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002320:	480b      	ldr	r0, [pc, #44]	@ (8002350 <PlasmaDoTask+0x44>)
 8002322:	f008 f8a5 	bl	800a470 <HAL_GPIO_ReadPin>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d10c      	bne.n	8002346 <PlasmaDoTask+0x3a>
		{
			if (powerStatus == V500_ON)
 800232c:	4b09      	ldr	r3, [pc, #36]	@ (8002354 <PlasmaDoTask+0x48>)
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d105      	bne.n	8002340 <PlasmaDoTask+0x34>
			{
				sHbridge.on = 1; // Turn Hbridge on
 8002334:	4b08      	ldr	r3, [pc, #32]	@ (8002358 <PlasmaDoTask+0x4c>)
 8002336:	2201      	movs	r2, #1
 8002338:	801a      	strh	r2, [r3, #0]
				programHbridge();
 800233a:	f7fe fb39 	bl	80009b0 <programHbridge>
			}
			else
				printString("\n\rUnable to turn H-bridge on, since 500V is not powered on");
		}
	}
}
 800233e:	e002      	b.n	8002346 <PlasmaDoTask+0x3a>
				printString("\n\rUnable to turn H-bridge on, since 500V is not powered on");
 8002340:	4806      	ldr	r0, [pc, #24]	@ (800235c <PlasmaDoTask+0x50>)
 8002342:	f7fe fa0f 	bl	8000764 <printString>
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	240008c4 	.word	0x240008c4
 8002350:	58021000 	.word	0x58021000
 8002354:	240008c0 	.word	0x240008c0
 8002358:	2400001c 	.word	0x2400001c
 800235c:	08011d3c 	.word	0x08011d3c

08002360 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002364:	f001 fdd4 	bl	8003f10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002368:	f000 f826 	bl	80023b8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800236c:	f000 f894 	bl	8002498 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002370:	f000 fe4c 	bl	800300c <MX_GPIO_Init>
  MX_DMA_Init();
 8002374:	f000 fe22 	bl	8002fbc <MX_DMA_Init>
  MX_TIM1_Init();
 8002378:	f000 fc26 	bl	8002bc8 <MX_TIM1_Init>
  MX_ETH_Init();
 800237c:	f000 fb3e 	bl	80029fc <MX_ETH_Init>
  MX_ADC2_Init();
 8002380:	f000 f958 	bl	8002634 <MX_ADC2_Init>
  MX_USB_OTG_HS_USB_Init();
 8002384:	f000 fe12 	bl	8002fac <MX_USB_OTG_HS_USB_Init>
  MX_ADC3_Init();
 8002388:	f000 f9f8 	bl	800277c <MX_ADC3_Init>
  MX_USART3_UART_Init();
 800238c:	f000 fbd0 	bl	8002b30 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8002390:	f000 f8b2 	bl	80024f8 <MX_ADC1_Init>
  MX_COMP2_Init();
 8002394:	f000 fb04 	bl	80029a0 <MX_COMP2_Init>
  MX_TIM2_Init();
 8002398:	f000 fca8 	bl	8002cec <MX_TIM2_Init>
  MX_LPUART1_UART_Init();
 800239c:	f000 fb7a 	bl	8002a94 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 80023a0:	f000 fcfe 	bl	8002da0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80023a4:	f000 fd50 	bl	8002e48 <MX_TIM4_Init>
  MX_TIM15_Init();
 80023a8:	f000 fda8 	bl	8002efc <MX_TIM15_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  PlasmaDriverInit();  			//Initialize plasma driver
 80023ac:	f7ff ff52 	bl	8002254 <PlasmaDriverInit>
  while (1)
  {
	PlasmaDoTask();     	    //Handle plasma driver task
 80023b0:	f7ff ffac 	bl	800230c <PlasmaDoTask>
 80023b4:	e7fc      	b.n	80023b0 <main+0x50>
	...

080023b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b09c      	sub	sp, #112	@ 0x70
 80023bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023c2:	224c      	movs	r2, #76	@ 0x4c
 80023c4:	2100      	movs	r1, #0
 80023c6:	4618      	mov	r0, r3
 80023c8:	f00e fbd2 	bl	8010b70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023cc:	1d3b      	adds	r3, r7, #4
 80023ce:	2220      	movs	r2, #32
 80023d0:	2100      	movs	r1, #0
 80023d2:	4618      	mov	r0, r3
 80023d4:	f00e fbcc 	bl	8010b70 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80023d8:	2002      	movs	r0, #2
 80023da:	f008 f895 	bl	800a508 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80023de:	2300      	movs	r3, #0
 80023e0:	603b      	str	r3, [r7, #0]
 80023e2:	4b2c      	ldr	r3, [pc, #176]	@ (8002494 <SystemClock_Config+0xdc>)
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	4a2b      	ldr	r2, [pc, #172]	@ (8002494 <SystemClock_Config+0xdc>)
 80023e8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80023ec:	6193      	str	r3, [r2, #24]
 80023ee:	4b29      	ldr	r3, [pc, #164]	@ (8002494 <SystemClock_Config+0xdc>)
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80023f6:	603b      	str	r3, [r7, #0]
 80023f8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80023fa:	bf00      	nop
 80023fc:	4b25      	ldr	r3, [pc, #148]	@ (8002494 <SystemClock_Config+0xdc>)
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002404:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002408:	d1f8      	bne.n	80023fc <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800240a:	2321      	movs	r3, #33	@ 0x21
 800240c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800240e:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8002412:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002414:	2301      	movs	r3, #1
 8002416:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002418:	2302      	movs	r3, #2
 800241a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800241c:	2302      	movs	r3, #2
 800241e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002420:	2304      	movs	r3, #4
 8002422:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8002424:	f240 1313 	movw	r3, #275	@ 0x113
 8002428:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800242a:	2301      	movs	r3, #1
 800242c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800242e:	2304      	movs	r3, #4
 8002430:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002432:	2302      	movs	r3, #2
 8002434:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8002436:	2304      	movs	r3, #4
 8002438:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800243a:	2300      	movs	r3, #0
 800243c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800243e:	2300      	movs	r3, #0
 8002440:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002442:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002446:	4618      	mov	r0, r3
 8002448:	f008 f898 	bl	800a57c <HAL_RCC_OscConfig>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002452:	f000 ff4b 	bl	80032ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002456:	233f      	movs	r3, #63	@ 0x3f
 8002458:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800245a:	2303      	movs	r3, #3
 800245c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800245e:	2300      	movs	r3, #0
 8002460:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002462:	2308      	movs	r3, #8
 8002464:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002466:	2340      	movs	r3, #64	@ 0x40
 8002468:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800246a:	2340      	movs	r3, #64	@ 0x40
 800246c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV16;
 800246e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002472:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002474:	2340      	movs	r3, #64	@ 0x40
 8002476:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002478:	1d3b      	adds	r3, r7, #4
 800247a:	2103      	movs	r1, #3
 800247c:	4618      	mov	r0, r3
 800247e:	f008 fc57 	bl	800ad30 <HAL_RCC_ClockConfig>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002488:	f000 ff30 	bl	80032ec <Error_Handler>
  }
}
 800248c:	bf00      	nop
 800248e:	3770      	adds	r7, #112	@ 0x70
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	58024800 	.word	0x58024800

08002498 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b0ae      	sub	sp, #184	@ 0xb8
 800249c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800249e:	463b      	mov	r3, r7
 80024a0:	22b8      	movs	r2, #184	@ 0xb8
 80024a2:	2100      	movs	r1, #0
 80024a4:	4618      	mov	r0, r3
 80024a6:	f00e fb63 	bl	8010b70 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80024aa:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80024ae:	f04f 0300 	mov.w	r3, #0
 80024b2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 80024b6:	2301      	movs	r3, #1
 80024b8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 80024ba:	2318      	movs	r3, #24
 80024bc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80024be:	2302      	movs	r3, #2
 80024c0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80024c2:	2302      	movs	r3, #2
 80024c4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80024c6:	2302      	movs	r3, #2
 80024c8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80024ca:	23c0      	movs	r3, #192	@ 0xc0
 80024cc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80024ce:	2300      	movs	r3, #0
 80024d0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80024d6:	2300      	movs	r3, #0
 80024d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024dc:	463b      	mov	r3, r7
 80024de:	4618      	mov	r0, r3
 80024e0:	f008 ffb2 	bl	800b448 <HAL_RCCEx_PeriphCLKConfig>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80024ea:	f000 feff 	bl	80032ec <Error_Handler>
  }
}
 80024ee:	bf00      	nop
 80024f0:	37b8      	adds	r7, #184	@ 0xb8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
	...

080024f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08c      	sub	sp, #48	@ 0x30
 80024fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80024fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	605a      	str	r2, [r3, #4]
 8002508:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800250a:	463b      	mov	r3, r7
 800250c:	2224      	movs	r2, #36	@ 0x24
 800250e:	2100      	movs	r1, #0
 8002510:	4618      	mov	r0, r3
 8002512:	f00e fb2d 	bl	8010b70 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002516:	4b42      	ldr	r3, [pc, #264]	@ (8002620 <MX_ADC1_Init+0x128>)
 8002518:	4a42      	ldr	r2, [pc, #264]	@ (8002624 <MX_ADC1_Init+0x12c>)
 800251a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800251c:	4b40      	ldr	r3, [pc, #256]	@ (8002620 <MX_ADC1_Init+0x128>)
 800251e:	2200      	movs	r2, #0
 8002520:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8002522:	4b3f      	ldr	r3, [pc, #252]	@ (8002620 <MX_ADC1_Init+0x128>)
 8002524:	2200      	movs	r2, #0
 8002526:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002528:	4b3d      	ldr	r3, [pc, #244]	@ (8002620 <MX_ADC1_Init+0x128>)
 800252a:	2201      	movs	r2, #1
 800252c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800252e:	4b3c      	ldr	r3, [pc, #240]	@ (8002620 <MX_ADC1_Init+0x128>)
 8002530:	2208      	movs	r2, #8
 8002532:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002534:	4b3a      	ldr	r3, [pc, #232]	@ (8002620 <MX_ADC1_Init+0x128>)
 8002536:	2200      	movs	r2, #0
 8002538:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800253a:	4b39      	ldr	r3, [pc, #228]	@ (8002620 <MX_ADC1_Init+0x128>)
 800253c:	2201      	movs	r2, #1
 800253e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8002540:	4b37      	ldr	r3, [pc, #220]	@ (8002620 <MX_ADC1_Init+0x128>)
 8002542:	2203      	movs	r2, #3
 8002544:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002546:	4b36      	ldr	r3, [pc, #216]	@ (8002620 <MX_ADC1_Init+0x128>)
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC1;
 800254e:	4b34      	ldr	r3, [pc, #208]	@ (8002620 <MX_ADC1_Init+0x128>)
 8002550:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002554:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002556:	4b32      	ldr	r3, [pc, #200]	@ (8002620 <MX_ADC1_Init+0x128>)
 8002558:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800255c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 800255e:	4b30      	ldr	r3, [pc, #192]	@ (8002620 <MX_ADC1_Init+0x128>)
 8002560:	2201      	movs	r2, #1
 8002562:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002564:	4b2e      	ldr	r3, [pc, #184]	@ (8002620 <MX_ADC1_Init+0x128>)
 8002566:	2200      	movs	r2, #0
 8002568:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800256a:	4b2d      	ldr	r3, [pc, #180]	@ (8002620 <MX_ADC1_Init+0x128>)
 800256c:	2200      	movs	r2, #0
 800256e:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8002570:	4b2b      	ldr	r3, [pc, #172]	@ (8002620 <MX_ADC1_Init+0x128>)
 8002572:	2200      	movs	r2, #0
 8002574:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002578:	4829      	ldr	r0, [pc, #164]	@ (8002620 <MX_ADC1_Init+0x128>)
 800257a:	f002 f9d1 	bl	8004920 <HAL_ADC_Init>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002584:	f000 feb2 	bl	80032ec <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8002588:	2306      	movs	r3, #6
 800258a:	627b      	str	r3, [r7, #36]	@ 0x24
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 800258c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002590:	62bb      	str	r3, [r7, #40]	@ 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8002592:	2300      	movs	r3, #0
 8002594:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002596:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800259a:	4619      	mov	r1, r3
 800259c:	4820      	ldr	r0, [pc, #128]	@ (8002620 <MX_ADC1_Init+0x128>)
 800259e:	f004 fbcd 	bl	8006d3c <HAL_ADCEx_MultiModeConfigChannel>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80025a8:	f000 fea0 	bl	80032ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80025ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002628 <MX_ADC1_Init+0x130>)
 80025ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80025b0:	2306      	movs	r3, #6
 80025b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 80025b4:	2302      	movs	r3, #2
 80025b6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80025b8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80025bc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80025be:	2304      	movs	r3, #4
 80025c0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80025c2:	2300      	movs	r3, #0
 80025c4:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80025c6:	2300      	movs	r3, #0
 80025c8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025cc:	463b      	mov	r3, r7
 80025ce:	4619      	mov	r1, r3
 80025d0:	4813      	ldr	r0, [pc, #76]	@ (8002620 <MX_ADC1_Init+0x128>)
 80025d2:	f002 fed7 	bl	8005384 <HAL_ADC_ConfigChannel>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 80025dc:	f000 fe86 	bl	80032ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 80025e0:	4b12      	ldr	r3, [pc, #72]	@ (800262c <MX_ADC1_Init+0x134>)
 80025e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80025e4:	230c      	movs	r3, #12
 80025e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80025e8:	463b      	mov	r3, r7
 80025ea:	4619      	mov	r1, r3
 80025ec:	480c      	ldr	r0, [pc, #48]	@ (8002620 <MX_ADC1_Init+0x128>)
 80025ee:	f002 fec9 	bl	8005384 <HAL_ADC_ConfigChannel>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 80025f8:	f000 fe78 	bl	80032ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 80025fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002630 <MX_ADC1_Init+0x138>)
 80025fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002600:	2312      	movs	r3, #18
 8002602:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002604:	463b      	mov	r3, r7
 8002606:	4619      	mov	r1, r3
 8002608:	4805      	ldr	r0, [pc, #20]	@ (8002620 <MX_ADC1_Init+0x128>)
 800260a:	f002 febb 	bl	8005384 <HAL_ADC_ConfigChannel>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 8002614:	f000 fe6a 	bl	80032ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002618:	bf00      	nop
 800261a:	3730      	adds	r7, #48	@ 0x30
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	24000904 	.word	0x24000904
 8002624:	40022000 	.word	0x40022000
 8002628:	3ef08000 	.word	0x3ef08000
 800262c:	4b840000 	.word	0x4b840000
 8002630:	43210000 	.word	0x43210000

08002634 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b090      	sub	sp, #64	@ 0x40
 8002638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800263a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	605a      	str	r2, [r3, #4]
 8002644:	609a      	str	r2, [r3, #8]
 8002646:	60da      	str	r2, [r3, #12]
 8002648:	611a      	str	r2, [r3, #16]
 800264a:	615a      	str	r2, [r3, #20]
 800264c:	619a      	str	r2, [r3, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 800264e:	463b      	mov	r3, r7
 8002650:	2224      	movs	r2, #36	@ 0x24
 8002652:	2100      	movs	r1, #0
 8002654:	4618      	mov	r0, r3
 8002656:	f00e fa8b 	bl	8010b70 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800265a:	4b42      	ldr	r3, [pc, #264]	@ (8002764 <MX_ADC2_Init+0x130>)
 800265c:	4a42      	ldr	r2, [pc, #264]	@ (8002768 <MX_ADC2_Init+0x134>)
 800265e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002660:	4b40      	ldr	r3, [pc, #256]	@ (8002764 <MX_ADC2_Init+0x130>)
 8002662:	2200      	movs	r2, #0
 8002664:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8002666:	4b3f      	ldr	r3, [pc, #252]	@ (8002764 <MX_ADC2_Init+0x130>)
 8002668:	2200      	movs	r2, #0
 800266a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800266c:	4b3d      	ldr	r3, [pc, #244]	@ (8002764 <MX_ADC2_Init+0x130>)
 800266e:	2201      	movs	r2, #1
 8002670:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002672:	4b3c      	ldr	r3, [pc, #240]	@ (8002764 <MX_ADC2_Init+0x130>)
 8002674:	2208      	movs	r2, #8
 8002676:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002678:	4b3a      	ldr	r3, [pc, #232]	@ (8002764 <MX_ADC2_Init+0x130>)
 800267a:	2200      	movs	r2, #0
 800267c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800267e:	4b39      	ldr	r3, [pc, #228]	@ (8002764 <MX_ADC2_Init+0x130>)
 8002680:	2201      	movs	r2, #1
 8002682:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 3;
 8002684:	4b37      	ldr	r3, [pc, #220]	@ (8002764 <MX_ADC2_Init+0x130>)
 8002686:	2203      	movs	r2, #3
 8002688:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800268a:	4b36      	ldr	r3, [pc, #216]	@ (8002764 <MX_ADC2_Init+0x130>)
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8002692:	4b34      	ldr	r3, [pc, #208]	@ (8002764 <MX_ADC2_Init+0x130>)
 8002694:	2200      	movs	r2, #0
 8002696:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002698:	4b32      	ldr	r3, [pc, #200]	@ (8002764 <MX_ADC2_Init+0x130>)
 800269a:	2200      	movs	r2, #0
 800269c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800269e:	4b31      	ldr	r3, [pc, #196]	@ (8002764 <MX_ADC2_Init+0x130>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 80026a4:	4b2f      	ldr	r3, [pc, #188]	@ (8002764 <MX_ADC2_Init+0x130>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80026ac:	482d      	ldr	r0, [pc, #180]	@ (8002764 <MX_ADC2_Init+0x130>)
 80026ae:	f002 f937 	bl	8004920 <HAL_ADC_Init>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 80026b8:	f000 fe18 	bl	80032ec <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 80026bc:	4b2b      	ldr	r3, [pc, #172]	@ (800276c <MX_ADC2_Init+0x138>)
 80026be:	627b      	str	r3, [r7, #36]	@ 0x24
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80026c0:	f44f 0340 	mov.w	r3, #12582912	@ 0xc00000
 80026c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  AnalogWDGConfig.Channel = ADC_CHANNEL_3;
 80026c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002770 <MX_ADC2_Init+0x13c>)
 80026c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  AnalogWDGConfig.ITMode = DISABLE;
 80026ca:	2300      	movs	r3, #0
 80026cc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  AnalogWDGConfig.HighThreshold = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	637b      	str	r3, [r7, #52]	@ 0x34
  AnalogWDGConfig.LowThreshold = 0;
 80026d4:	2300      	movs	r3, #0
 80026d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 80026d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026dc:	4619      	mov	r1, r3
 80026de:	4821      	ldr	r0, [pc, #132]	@ (8002764 <MX_ADC2_Init+0x130>)
 80026e0:	f003 fb7c 	bl	8005ddc <HAL_ADC_AnalogWDGConfig>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80026ea:	f000 fdff 	bl	80032ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80026ee:	4b20      	ldr	r3, [pc, #128]	@ (8002770 <MX_ADC2_Init+0x13c>)
 80026f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80026f2:	2306      	movs	r3, #6
 80026f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 80026f6:	2302      	movs	r3, #2
 80026f8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80026fa:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80026fe:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002700:	2304      	movs	r3, #4
 8002702:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8002708:	2300      	movs	r3, #0
 800270a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800270e:	463b      	mov	r3, r7
 8002710:	4619      	mov	r1, r3
 8002712:	4814      	ldr	r0, [pc, #80]	@ (8002764 <MX_ADC2_Init+0x130>)
 8002714:	f002 fe36 	bl	8005384 <HAL_ADC_ConfigChannel>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <MX_ADC2_Init+0xee>
  {
    Error_Handler();
 800271e:	f000 fde5 	bl	80032ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8002722:	4b14      	ldr	r3, [pc, #80]	@ (8002774 <MX_ADC2_Init+0x140>)
 8002724:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002726:	230c      	movs	r3, #12
 8002728:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800272a:	463b      	mov	r3, r7
 800272c:	4619      	mov	r1, r3
 800272e:	480d      	ldr	r0, [pc, #52]	@ (8002764 <MX_ADC2_Init+0x130>)
 8002730:	f002 fe28 	bl	8005384 <HAL_ADC_ConfigChannel>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <MX_ADC2_Init+0x10a>
  {
    Error_Handler();
 800273a:	f000 fdd7 	bl	80032ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800273e:	4b0e      	ldr	r3, [pc, #56]	@ (8002778 <MX_ADC2_Init+0x144>)
 8002740:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002742:	2312      	movs	r3, #18
 8002744:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002746:	463b      	mov	r3, r7
 8002748:	4619      	mov	r1, r3
 800274a:	4806      	ldr	r0, [pc, #24]	@ (8002764 <MX_ADC2_Init+0x130>)
 800274c:	f002 fe1a 	bl	8005384 <HAL_ADC_ConfigChannel>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <MX_ADC2_Init+0x126>
  {
    Error_Handler();
 8002756:	f000 fdc9 	bl	80032ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800275a:	bf00      	nop
 800275c:	3740      	adds	r7, #64	@ 0x40
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	24000974 	.word	0x24000974
 8002768:	40022100 	.word	0x40022100
 800276c:	7dc00000 	.word	0x7dc00000
 8002770:	0c900008 	.word	0x0c900008
 8002774:	4fb80000 	.word	0x4fb80000
 8002778:	14f00020 	.word	0x14f00020

0800277c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b08a      	sub	sp, #40	@ 0x28
 8002780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002782:	1d3b      	adds	r3, r7, #4
 8002784:	2224      	movs	r2, #36	@ 0x24
 8002786:	2100      	movs	r1, #0
 8002788:	4618      	mov	r0, r3
 800278a:	f00e f9f1 	bl	8010b70 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800278e:	4b78      	ldr	r3, [pc, #480]	@ (8002970 <MX_ADC3_Init+0x1f4>)
 8002790:	4a78      	ldr	r2, [pc, #480]	@ (8002974 <MX_ADC3_Init+0x1f8>)
 8002792:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002794:	4b76      	ldr	r3, [pc, #472]	@ (8002970 <MX_ADC3_Init+0x1f4>)
 8002796:	2200      	movs	r2, #0
 8002798:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800279a:	4b75      	ldr	r3, [pc, #468]	@ (8002970 <MX_ADC3_Init+0x1f4>)
 800279c:	2208      	movs	r2, #8
 800279e:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 80027a0:	4b73      	ldr	r3, [pc, #460]	@ (8002970 <MX_ADC3_Init+0x1f4>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80027a6:	4b72      	ldr	r3, [pc, #456]	@ (8002970 <MX_ADC3_Init+0x1f4>)
 80027a8:	2201      	movs	r2, #1
 80027aa:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80027ac:	4b70      	ldr	r3, [pc, #448]	@ (8002970 <MX_ADC3_Init+0x1f4>)
 80027ae:	2208      	movs	r2, #8
 80027b0:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80027b2:	4b6f      	ldr	r3, [pc, #444]	@ (8002970 <MX_ADC3_Init+0x1f4>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80027b8:	4b6d      	ldr	r3, [pc, #436]	@ (8002970 <MX_ADC3_Init+0x1f4>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 11;
 80027be:	4b6c      	ldr	r3, [pc, #432]	@ (8002970 <MX_ADC3_Init+0x1f4>)
 80027c0:	220b      	movs	r2, #11
 80027c2:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80027c4:	4b6a      	ldr	r3, [pc, #424]	@ (8002970 <MX_ADC3_Init+0x1f4>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027cc:	4b68      	ldr	r3, [pc, #416]	@ (8002970 <MX_ADC3_Init+0x1f4>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80027d2:	4b67      	ldr	r3, [pc, #412]	@ (8002970 <MX_ADC3_Init+0x1f4>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80027d8:	4b65      	ldr	r3, [pc, #404]	@ (8002970 <MX_ADC3_Init+0x1f4>)
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80027e0:	4b63      	ldr	r3, [pc, #396]	@ (8002970 <MX_ADC3_Init+0x1f4>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 80027e6:	4b62      	ldr	r3, [pc, #392]	@ (8002970 <MX_ADC3_Init+0x1f4>)
 80027e8:	2201      	movs	r2, #1
 80027ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80027ec:	4b60      	ldr	r3, [pc, #384]	@ (8002970 <MX_ADC3_Init+0x1f4>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80027f2:	4b5f      	ldr	r3, [pc, #380]	@ (8002970 <MX_ADC3_Init+0x1f4>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 80027f8:	4b5d      	ldr	r3, [pc, #372]	@ (8002970 <MX_ADC3_Init+0x1f4>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002800:	485b      	ldr	r0, [pc, #364]	@ (8002970 <MX_ADC3_Init+0x1f4>)
 8002802:	f002 f88d 	bl	8004920 <HAL_ADC_Init>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 800280c:	f000 fd6e 	bl	80032ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002810:	2301      	movs	r3, #1
 8002812:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002814:	2306      	movs	r3, #6
 8002816:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_6CYCLES_5;
 8002818:	2301      	movs	r3, #1
 800281a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800281c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8002820:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002822:	2304      	movs	r3, #4
 8002824:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002826:	2300      	movs	r3, #0
 8002828:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 800282a:	2300      	movs	r3, #0
 800282c:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800282e:	1d3b      	adds	r3, r7, #4
 8002830:	4619      	mov	r1, r3
 8002832:	484f      	ldr	r0, [pc, #316]	@ (8002970 <MX_ADC3_Init+0x1f4>)
 8002834:	f002 fda6 	bl	8005384 <HAL_ADC_ConfigChannel>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <MX_ADC3_Init+0xc6>
  {
    Error_Handler();
 800283e:	f000 fd55 	bl	80032ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002842:	4b4d      	ldr	r3, [pc, #308]	@ (8002978 <MX_ADC3_Init+0x1fc>)
 8002844:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002846:	230c      	movs	r3, #12
 8002848:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800284a:	1d3b      	adds	r3, r7, #4
 800284c:	4619      	mov	r1, r3
 800284e:	4848      	ldr	r0, [pc, #288]	@ (8002970 <MX_ADC3_Init+0x1f4>)
 8002850:	f002 fd98 	bl	8005384 <HAL_ADC_ConfigChannel>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <MX_ADC3_Init+0xe2>
  {
    Error_Handler();
 800285a:	f000 fd47 	bl	80032ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800285e:	4b47      	ldr	r3, [pc, #284]	@ (800297c <MX_ADC3_Init+0x200>)
 8002860:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002862:	2312      	movs	r3, #18
 8002864:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002866:	1d3b      	adds	r3, r7, #4
 8002868:	4619      	mov	r1, r3
 800286a:	4841      	ldr	r0, [pc, #260]	@ (8002970 <MX_ADC3_Init+0x1f4>)
 800286c:	f002 fd8a 	bl	8005384 <HAL_ADC_ConfigChannel>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <MX_ADC3_Init+0xfe>
  {
    Error_Handler();
 8002876:	f000 fd39 	bl	80032ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800287a:	4b41      	ldr	r3, [pc, #260]	@ (8002980 <MX_ADC3_Init+0x204>)
 800287c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800287e:	2318      	movs	r3, #24
 8002880:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002882:	1d3b      	adds	r3, r7, #4
 8002884:	4619      	mov	r1, r3
 8002886:	483a      	ldr	r0, [pc, #232]	@ (8002970 <MX_ADC3_Init+0x1f4>)
 8002888:	f002 fd7c 	bl	8005384 <HAL_ADC_ConfigChannel>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <MX_ADC3_Init+0x11a>
  {
    Error_Handler();
 8002892:	f000 fd2b 	bl	80032ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002896:	4b3b      	ldr	r3, [pc, #236]	@ (8002984 <MX_ADC3_Init+0x208>)
 8002898:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800289a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800289e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80028a0:	1d3b      	adds	r3, r7, #4
 80028a2:	4619      	mov	r1, r3
 80028a4:	4832      	ldr	r0, [pc, #200]	@ (8002970 <MX_ADC3_Init+0x1f4>)
 80028a6:	f002 fd6d 	bl	8005384 <HAL_ADC_ConfigChannel>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <MX_ADC3_Init+0x138>
  {
    Error_Handler();
 80028b0:	f000 fd1c 	bl	80032ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80028b4:	4b34      	ldr	r3, [pc, #208]	@ (8002988 <MX_ADC3_Init+0x20c>)
 80028b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80028b8:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80028bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80028be:	1d3b      	adds	r3, r7, #4
 80028c0:	4619      	mov	r1, r3
 80028c2:	482b      	ldr	r0, [pc, #172]	@ (8002970 <MX_ADC3_Init+0x1f4>)
 80028c4:	f002 fd5e 	bl	8005384 <HAL_ADC_ConfigChannel>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <MX_ADC3_Init+0x156>
  {
    Error_Handler();
 80028ce:	f000 fd0d 	bl	80032ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80028d2:	4b2e      	ldr	r3, [pc, #184]	@ (800298c <MX_ADC3_Init+0x210>)
 80028d4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80028d6:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 80028da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80028dc:	1d3b      	adds	r3, r7, #4
 80028de:	4619      	mov	r1, r3
 80028e0:	4823      	ldr	r0, [pc, #140]	@ (8002970 <MX_ADC3_Init+0x1f4>)
 80028e2:	f002 fd4f 	bl	8005384 <HAL_ADC_ConfigChannel>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <MX_ADC3_Init+0x174>
  {
    Error_Handler();
 80028ec:	f000 fcfe 	bl	80032ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80028f0:	4b27      	ldr	r3, [pc, #156]	@ (8002990 <MX_ADC3_Init+0x214>)
 80028f2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80028f4:	f44f 7389 	mov.w	r3, #274	@ 0x112
 80028f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80028fa:	1d3b      	adds	r3, r7, #4
 80028fc:	4619      	mov	r1, r3
 80028fe:	481c      	ldr	r0, [pc, #112]	@ (8002970 <MX_ADC3_Init+0x1f4>)
 8002900:	f002 fd40 	bl	8005384 <HAL_ADC_ConfigChannel>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <MX_ADC3_Init+0x192>
  {
    Error_Handler();
 800290a:	f000 fcef 	bl	80032ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800290e:	4b21      	ldr	r3, [pc, #132]	@ (8002994 <MX_ADC3_Init+0x218>)
 8002910:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8002912:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8002916:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002918:	1d3b      	adds	r3, r7, #4
 800291a:	4619      	mov	r1, r3
 800291c:	4814      	ldr	r0, [pc, #80]	@ (8002970 <MX_ADC3_Init+0x1f4>)
 800291e:	f002 fd31 	bl	8005384 <HAL_ADC_ConfigChannel>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <MX_ADC3_Init+0x1b0>
  {
    Error_Handler();
 8002928:	f000 fce0 	bl	80032ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800292c:	4b1a      	ldr	r3, [pc, #104]	@ (8002998 <MX_ADC3_Init+0x21c>)
 800292e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8002930:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002934:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002936:	1d3b      	adds	r3, r7, #4
 8002938:	4619      	mov	r1, r3
 800293a:	480d      	ldr	r0, [pc, #52]	@ (8002970 <MX_ADC3_Init+0x1f4>)
 800293c:	f002 fd22 	bl	8005384 <HAL_ADC_ConfigChannel>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <MX_ADC3_Init+0x1ce>
  {
    Error_Handler();
 8002946:	f000 fcd1 	bl	80032ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800294a:	4b14      	ldr	r3, [pc, #80]	@ (800299c <MX_ADC3_Init+0x220>)
 800294c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 800294e:	f240 2306 	movw	r3, #518	@ 0x206
 8002952:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002954:	1d3b      	adds	r3, r7, #4
 8002956:	4619      	mov	r1, r3
 8002958:	4805      	ldr	r0, [pc, #20]	@ (8002970 <MX_ADC3_Init+0x1f4>)
 800295a:	f002 fd13 	bl	8005384 <HAL_ADC_ConfigChannel>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <MX_ADC3_Init+0x1ec>
  {
    Error_Handler();
 8002964:	f000 fcc2 	bl	80032ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002968:	bf00      	nop
 800296a:	3728      	adds	r7, #40	@ 0x28
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	240009e4 	.word	0x240009e4
 8002974:	58026000 	.word	0x58026000
 8002978:	04300002 	.word	0x04300002
 800297c:	08600004 	.word	0x08600004
 8002980:	0c900008 	.word	0x0c900008
 8002984:	10c00010 	.word	0x10c00010
 8002988:	14f00020 	.word	0x14f00020
 800298c:	19200040 	.word	0x19200040
 8002990:	1d500080 	.word	0x1d500080
 8002994:	21800100 	.word	0x21800100
 8002998:	25b00200 	.word	0x25b00200
 800299c:	2a000400 	.word	0x2a000400

080029a0 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 80029a4:	4b13      	ldr	r3, [pc, #76]	@ (80029f4 <MX_COMP2_Init+0x54>)
 80029a6:	4a14      	ldr	r2, [pc, #80]	@ (80029f8 <MX_COMP2_Init+0x58>)
 80029a8:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 80029aa:	4b12      	ldr	r3, [pc, #72]	@ (80029f4 <MX_COMP2_Init+0x54>)
 80029ac:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80029b0:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 80029b2:	4b10      	ldr	r3, [pc, #64]	@ (80029f4 <MX_COMP2_Init+0x54>)
 80029b4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80029b8:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80029ba:	4b0e      	ldr	r3, [pc, #56]	@ (80029f4 <MX_COMP2_Init+0x54>)
 80029bc:	2200      	movs	r2, #0
 80029be:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80029c0:	4b0c      	ldr	r3, [pc, #48]	@ (80029f4 <MX_COMP2_Init+0x54>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80029c6:	4b0b      	ldr	r3, [pc, #44]	@ (80029f4 <MX_COMP2_Init+0x54>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 80029cc:	4b09      	ldr	r3, [pc, #36]	@ (80029f4 <MX_COMP2_Init+0x54>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80029d2:	4b08      	ldr	r3, [pc, #32]	@ (80029f4 <MX_COMP2_Init+0x54>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80029d8:	4b06      	ldr	r3, [pc, #24]	@ (80029f4 <MX_COMP2_Init+0x54>)
 80029da:	2200      	movs	r2, #0
 80029dc:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 80029de:	4805      	ldr	r0, [pc, #20]	@ (80029f4 <MX_COMP2_Init+0x54>)
 80029e0:	f004 fa8e 	bl	8006f00 <HAL_COMP_Init>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <MX_COMP2_Init+0x4e>
  {
    Error_Handler();
 80029ea:	f000 fc7f 	bl	80032ec <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 80029ee:	bf00      	nop
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	24000b44 	.word	0x24000b44
 80029f8:	58003810 	.word	0x58003810

080029fc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8002a00:	4b1e      	ldr	r3, [pc, #120]	@ (8002a7c <MX_ETH_Init+0x80>)
 8002a02:	4a1f      	ldr	r2, [pc, #124]	@ (8002a80 <MX_ETH_Init+0x84>)
 8002a04:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8002a06:	4b1f      	ldr	r3, [pc, #124]	@ (8002a84 <MX_ETH_Init+0x88>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8002a0c:	4b1d      	ldr	r3, [pc, #116]	@ (8002a84 <MX_ETH_Init+0x88>)
 8002a0e:	2280      	movs	r2, #128	@ 0x80
 8002a10:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8002a12:	4b1c      	ldr	r3, [pc, #112]	@ (8002a84 <MX_ETH_Init+0x88>)
 8002a14:	22e1      	movs	r2, #225	@ 0xe1
 8002a16:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8002a18:	4b1a      	ldr	r3, [pc, #104]	@ (8002a84 <MX_ETH_Init+0x88>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8002a1e:	4b19      	ldr	r3, [pc, #100]	@ (8002a84 <MX_ETH_Init+0x88>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8002a24:	4b17      	ldr	r3, [pc, #92]	@ (8002a84 <MX_ETH_Init+0x88>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8002a2a:	4b14      	ldr	r3, [pc, #80]	@ (8002a7c <MX_ETH_Init+0x80>)
 8002a2c:	4a15      	ldr	r2, [pc, #84]	@ (8002a84 <MX_ETH_Init+0x88>)
 8002a2e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8002a30:	4b12      	ldr	r3, [pc, #72]	@ (8002a7c <MX_ETH_Init+0x80>)
 8002a32:	2201      	movs	r2, #1
 8002a34:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8002a36:	4b11      	ldr	r3, [pc, #68]	@ (8002a7c <MX_ETH_Init+0x80>)
 8002a38:	4a13      	ldr	r2, [pc, #76]	@ (8002a88 <MX_ETH_Init+0x8c>)
 8002a3a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8002a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8002a7c <MX_ETH_Init+0x80>)
 8002a3e:	4a13      	ldr	r2, [pc, #76]	@ (8002a8c <MX_ETH_Init+0x90>)
 8002a40:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8002a42:	4b0e      	ldr	r3, [pc, #56]	@ (8002a7c <MX_ETH_Init+0x80>)
 8002a44:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8002a48:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8002a4a:	480c      	ldr	r0, [pc, #48]	@ (8002a7c <MX_ETH_Init+0x80>)
 8002a4c:	f006 fd66 	bl	800951c <HAL_ETH_Init>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8002a56:	f000 fc49 	bl	80032ec <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8002a5a:	2238      	movs	r2, #56	@ 0x38
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	480c      	ldr	r0, [pc, #48]	@ (8002a90 <MX_ETH_Init+0x94>)
 8002a60:	f00e f886 	bl	8010b70 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8002a64:	4b0a      	ldr	r3, [pc, #40]	@ (8002a90 <MX_ETH_Init+0x94>)
 8002a66:	2221      	movs	r2, #33	@ 0x21
 8002a68:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8002a6a:	4b09      	ldr	r3, [pc, #36]	@ (8002a90 <MX_ETH_Init+0x94>)
 8002a6c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002a70:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8002a72:	4b07      	ldr	r3, [pc, #28]	@ (8002a90 <MX_ETH_Init+0x94>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8002a78:	bf00      	nop
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	24000b70 	.word	0x24000b70
 8002a80:	40028000 	.word	0x40028000
 8002a84:	24000ec4 	.word	0x24000ec4
 8002a88:	240000f8 	.word	0x240000f8
 8002a8c:	24000098 	.word	0x24000098
 8002a90:	240008cc 	.word	0x240008cc

08002a94 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002a98:	4b22      	ldr	r3, [pc, #136]	@ (8002b24 <MX_LPUART1_UART_Init+0x90>)
 8002a9a:	4a23      	ldr	r2, [pc, #140]	@ (8002b28 <MX_LPUART1_UART_Init+0x94>)
 8002a9c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8002a9e:	4b21      	ldr	r3, [pc, #132]	@ (8002b24 <MX_LPUART1_UART_Init+0x90>)
 8002aa0:	4a22      	ldr	r2, [pc, #136]	@ (8002b2c <MX_LPUART1_UART_Init+0x98>)
 8002aa2:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8002b24 <MX_LPUART1_UART_Init+0x90>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8002b24 <MX_LPUART1_UART_Init+0x90>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002ab0:	4b1c      	ldr	r3, [pc, #112]	@ (8002b24 <MX_LPUART1_UART_Init+0x90>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002ab6:	4b1b      	ldr	r3, [pc, #108]	@ (8002b24 <MX_LPUART1_UART_Init+0x90>)
 8002ab8:	220c      	movs	r2, #12
 8002aba:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002abc:	4b19      	ldr	r3, [pc, #100]	@ (8002b24 <MX_LPUART1_UART_Init+0x90>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ac2:	4b18      	ldr	r3, [pc, #96]	@ (8002b24 <MX_LPUART1_UART_Init+0x90>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ac8:	4b16      	ldr	r3, [pc, #88]	@ (8002b24 <MX_LPUART1_UART_Init+0x90>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ace:	4b15      	ldr	r3, [pc, #84]	@ (8002b24 <MX_LPUART1_UART_Init+0x90>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002ad4:	4b13      	ldr	r3, [pc, #76]	@ (8002b24 <MX_LPUART1_UART_Init+0x90>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002ada:	4812      	ldr	r0, [pc, #72]	@ (8002b24 <MX_LPUART1_UART_Init+0x90>)
 8002adc:	f00c fc13 	bl	800f306 <HAL_UART_Init>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8002ae6:	f000 fc01 	bl	80032ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002aea:	2100      	movs	r1, #0
 8002aec:	480d      	ldr	r0, [pc, #52]	@ (8002b24 <MX_LPUART1_UART_Init+0x90>)
 8002aee:	f00d fe70 	bl	80107d2 <HAL_UARTEx_SetTxFifoThreshold>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d001      	beq.n	8002afc <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8002af8:	f000 fbf8 	bl	80032ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002afc:	2100      	movs	r1, #0
 8002afe:	4809      	ldr	r0, [pc, #36]	@ (8002b24 <MX_LPUART1_UART_Init+0x90>)
 8002b00:	f00d fea5 	bl	801084e <HAL_UARTEx_SetRxFifoThreshold>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8002b0a:	f000 fbef 	bl	80032ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002b0e:	4805      	ldr	r0, [pc, #20]	@ (8002b24 <MX_LPUART1_UART_Init+0x90>)
 8002b10:	f00d fe26 	bl	8010760 <HAL_UARTEx_DisableFifoMode>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8002b1a:	f000 fbe7 	bl	80032ec <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002b1e:	bf00      	nop
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	24000c20 	.word	0x24000c20
 8002b28:	58000c00 	.word	0x58000c00
 8002b2c:	00033324 	.word	0x00033324

08002b30 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002b34:	4b22      	ldr	r3, [pc, #136]	@ (8002bc0 <MX_USART3_UART_Init+0x90>)
 8002b36:	4a23      	ldr	r2, [pc, #140]	@ (8002bc4 <MX_USART3_UART_Init+0x94>)
 8002b38:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002b3a:	4b21      	ldr	r3, [pc, #132]	@ (8002bc0 <MX_USART3_UART_Init+0x90>)
 8002b3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002b40:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002b42:	4b1f      	ldr	r3, [pc, #124]	@ (8002bc0 <MX_USART3_UART_Init+0x90>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002b48:	4b1d      	ldr	r3, [pc, #116]	@ (8002bc0 <MX_USART3_UART_Init+0x90>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002b4e:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc0 <MX_USART3_UART_Init+0x90>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002b54:	4b1a      	ldr	r3, [pc, #104]	@ (8002bc0 <MX_USART3_UART_Init+0x90>)
 8002b56:	220c      	movs	r2, #12
 8002b58:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b5a:	4b19      	ldr	r3, [pc, #100]	@ (8002bc0 <MX_USART3_UART_Init+0x90>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b60:	4b17      	ldr	r3, [pc, #92]	@ (8002bc0 <MX_USART3_UART_Init+0x90>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b66:	4b16      	ldr	r3, [pc, #88]	@ (8002bc0 <MX_USART3_UART_Init+0x90>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b6c:	4b14      	ldr	r3, [pc, #80]	@ (8002bc0 <MX_USART3_UART_Init+0x90>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b72:	4b13      	ldr	r3, [pc, #76]	@ (8002bc0 <MX_USART3_UART_Init+0x90>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002b78:	4811      	ldr	r0, [pc, #68]	@ (8002bc0 <MX_USART3_UART_Init+0x90>)
 8002b7a:	f00c fbc4 	bl	800f306 <HAL_UART_Init>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002b84:	f000 fbb2 	bl	80032ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b88:	2100      	movs	r1, #0
 8002b8a:	480d      	ldr	r0, [pc, #52]	@ (8002bc0 <MX_USART3_UART_Init+0x90>)
 8002b8c:	f00d fe21 	bl	80107d2 <HAL_UARTEx_SetTxFifoThreshold>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002b96:	f000 fba9 	bl	80032ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	4808      	ldr	r0, [pc, #32]	@ (8002bc0 <MX_USART3_UART_Init+0x90>)
 8002b9e:	f00d fe56 	bl	801084e <HAL_UARTEx_SetRxFifoThreshold>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002ba8:	f000 fba0 	bl	80032ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002bac:	4804      	ldr	r0, [pc, #16]	@ (8002bc0 <MX_USART3_UART_Init+0x90>)
 8002bae:	f00d fdd7 	bl	8010760 <HAL_UARTEx_DisableFifoMode>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002bb8:	f000 fb98 	bl	80032ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002bbc:	bf00      	nop
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	24000cb4 	.word	0x24000cb4
 8002bc4:	40004800 	.word	0x40004800

08002bc8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b098      	sub	sp, #96	@ 0x60
 8002bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bce:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	605a      	str	r2, [r3, #4]
 8002bd8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bda:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	605a      	str	r2, [r3, #4]
 8002be4:	609a      	str	r2, [r3, #8]
 8002be6:	60da      	str	r2, [r3, #12]
 8002be8:	611a      	str	r2, [r3, #16]
 8002bea:	615a      	str	r2, [r3, #20]
 8002bec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002bee:	1d3b      	adds	r3, r7, #4
 8002bf0:	2234      	movs	r2, #52	@ 0x34
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f00d ffbb 	bl	8010b70 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002bfa:	4b3a      	ldr	r3, [pc, #232]	@ (8002ce4 <MX_TIM1_Init+0x11c>)
 8002bfc:	4a3a      	ldr	r2, [pc, #232]	@ (8002ce8 <MX_TIM1_Init+0x120>)
 8002bfe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002c00:	4b38      	ldr	r3, [pc, #224]	@ (8002ce4 <MX_TIM1_Init+0x11c>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c06:	4b37      	ldr	r3, [pc, #220]	@ (8002ce4 <MX_TIM1_Init+0x11c>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3240;
 8002c0c:	4b35      	ldr	r3, [pc, #212]	@ (8002ce4 <MX_TIM1_Init+0x11c>)
 8002c0e:	f640 42a8 	movw	r2, #3240	@ 0xca8
 8002c12:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c14:	4b33      	ldr	r3, [pc, #204]	@ (8002ce4 <MX_TIM1_Init+0x11c>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002c1a:	4b32      	ldr	r3, [pc, #200]	@ (8002ce4 <MX_TIM1_Init+0x11c>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c20:	4b30      	ldr	r3, [pc, #192]	@ (8002ce4 <MX_TIM1_Init+0x11c>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002c26:	482f      	ldr	r0, [pc, #188]	@ (8002ce4 <MX_TIM1_Init+0x11c>)
 8002c28:	f00a fff4 	bl	800dc14 <HAL_TIM_PWM_Init>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002c32:	f000 fb5b 	bl	80032ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c36:	2300      	movs	r3, #0
 8002c38:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002c42:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002c46:	4619      	mov	r1, r3
 8002c48:	4826      	ldr	r0, [pc, #152]	@ (8002ce4 <MX_TIM1_Init+0x11c>)
 8002c4a:	f00c f9fb 	bl	800f044 <HAL_TIMEx_MasterConfigSynchronization>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002c54:	f000 fb4a 	bl	80032ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c58:	2360      	movs	r3, #96	@ 0x60
 8002c5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 1620;
 8002c5c:	f240 6354 	movw	r3, #1620	@ 0x654
 8002c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002c62:	2302      	movs	r3, #2
 8002c64:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8002c66:	2308      	movs	r3, #8
 8002c68:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8002c6e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8002c74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c78:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c7a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002c7e:	2200      	movs	r2, #0
 8002c80:	4619      	mov	r1, r3
 8002c82:	4818      	ldr	r0, [pc, #96]	@ (8002ce4 <MX_TIM1_Init+0x11c>)
 8002c84:	f00b fac4 	bl	800e210 <HAL_TIM_PWM_ConfigChannel>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002c8e:	f000 fb2d 	bl	80032ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c92:	2300      	movs	r3, #0
 8002c94:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c96:	2300      	movs	r3, #0
 8002c98:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0xFF;
 8002c9e:	23ff      	movs	r3, #255	@ 0xff
 8002ca0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002ca6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002caa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002cac:	2300      	movs	r3, #0
 8002cae:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002cb4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002cc2:	1d3b      	adds	r3, r7, #4
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	4807      	ldr	r0, [pc, #28]	@ (8002ce4 <MX_TIM1_Init+0x11c>)
 8002cc8:	f00c fa58 	bl	800f17c <HAL_TIMEx_ConfigBreakDeadTime>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8002cd2:	f000 fb0b 	bl	80032ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002cd6:	4803      	ldr	r0, [pc, #12]	@ (8002ce4 <MX_TIM1_Init+0x11c>)
 8002cd8:	f000 ff56 	bl	8003b88 <HAL_TIM_MspPostInit>

}
 8002cdc:	bf00      	nop
 8002cde:	3760      	adds	r7, #96	@ 0x60
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	24000d48 	.word	0x24000d48
 8002ce8:	40010000 	.word	0x40010000

08002cec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b08a      	sub	sp, #40	@ 0x28
 8002cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cf2:	f107 031c 	add.w	r3, r7, #28
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	605a      	str	r2, [r3, #4]
 8002cfc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cfe:	463b      	mov	r3, r7
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	605a      	str	r2, [r3, #4]
 8002d06:	609a      	str	r2, [r3, #8]
 8002d08:	60da      	str	r2, [r3, #12]
 8002d0a:	611a      	str	r2, [r3, #16]
 8002d0c:	615a      	str	r2, [r3, #20]
 8002d0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d10:	4b22      	ldr	r3, [pc, #136]	@ (8002d9c <MX_TIM2_Init+0xb0>)
 8002d12:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002d16:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002d18:	4b20      	ldr	r3, [pc, #128]	@ (8002d9c <MX_TIM2_Init+0xb0>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d1e:	4b1f      	ldr	r3, [pc, #124]	@ (8002d9c <MX_TIM2_Init+0xb0>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002d24:	4b1d      	ldr	r3, [pc, #116]	@ (8002d9c <MX_TIM2_Init+0xb0>)
 8002d26:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002d2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8002d9c <MX_TIM2_Init+0xb0>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d32:	4b1a      	ldr	r3, [pc, #104]	@ (8002d9c <MX_TIM2_Init+0xb0>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002d38:	4818      	ldr	r0, [pc, #96]	@ (8002d9c <MX_TIM2_Init+0xb0>)
 8002d3a:	f00a ff6b 	bl	800dc14 <HAL_TIM_PWM_Init>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002d44:	f000 fad2 	bl	80032ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d50:	f107 031c 	add.w	r3, r7, #28
 8002d54:	4619      	mov	r1, r3
 8002d56:	4811      	ldr	r0, [pc, #68]	@ (8002d9c <MX_TIM2_Init+0xb0>)
 8002d58:	f00c f974 	bl	800f044 <HAL_TIMEx_MasterConfigSynchronization>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8002d62:	f000 fac3 	bl	80032ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d66:	2360      	movs	r3, #96	@ 0x60
 8002d68:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d72:	2300      	movs	r3, #0
 8002d74:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d76:	463b      	mov	r3, r7
 8002d78:	2200      	movs	r2, #0
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4807      	ldr	r0, [pc, #28]	@ (8002d9c <MX_TIM2_Init+0xb0>)
 8002d7e:	f00b fa47 	bl	800e210 <HAL_TIM_PWM_ConfigChannel>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002d88:	f000 fab0 	bl	80032ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002d8c:	4803      	ldr	r0, [pc, #12]	@ (8002d9c <MX_TIM2_Init+0xb0>)
 8002d8e:	f000 fefb 	bl	8003b88 <HAL_TIM_MspPostInit>

}
 8002d92:	bf00      	nop
 8002d94:	3728      	adds	r7, #40	@ 0x28
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	24000d94 	.word	0x24000d94

08002da0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b088      	sub	sp, #32
 8002da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002da6:	f107 0314 	add.w	r3, r7, #20
 8002daa:	2200      	movs	r2, #0
 8002dac:	601a      	str	r2, [r3, #0]
 8002dae:	605a      	str	r2, [r3, #4]
 8002db0:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002db2:	1d3b      	adds	r3, r7, #4
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	605a      	str	r2, [r3, #4]
 8002dba:	609a      	str	r2, [r3, #8]
 8002dbc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002dbe:	4b20      	ldr	r3, [pc, #128]	@ (8002e40 <MX_TIM3_Init+0xa0>)
 8002dc0:	4a20      	ldr	r2, [pc, #128]	@ (8002e44 <MX_TIM3_Init+0xa4>)
 8002dc2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002dc4:	4b1e      	ldr	r3, [pc, #120]	@ (8002e40 <MX_TIM3_Init+0xa0>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dca:	4b1d      	ldr	r3, [pc, #116]	@ (8002e40 <MX_TIM3_Init+0xa0>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002dd0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e40 <MX_TIM3_Init+0xa0>)
 8002dd2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002dd6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dd8:	4b19      	ldr	r3, [pc, #100]	@ (8002e40 <MX_TIM3_Init+0xa0>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dde:	4b18      	ldr	r3, [pc, #96]	@ (8002e40 <MX_TIM3_Init+0xa0>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002de4:	4816      	ldr	r0, [pc, #88]	@ (8002e40 <MX_TIM3_Init+0xa0>)
 8002de6:	f00b f91f 	bl	800e028 <HAL_TIM_IC_Init>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002df0:	f000 fa7c 	bl	80032ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002df4:	2300      	movs	r3, #0
 8002df6:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002dfc:	f107 0314 	add.w	r3, r7, #20
 8002e00:	4619      	mov	r1, r3
 8002e02:	480f      	ldr	r0, [pc, #60]	@ (8002e40 <MX_TIM3_Init+0xa0>)
 8002e04:	f00c f91e 	bl	800f044 <HAL_TIMEx_MasterConfigSynchronization>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8002e0e:	f000 fa6d 	bl	80032ec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002e12:	2300      	movs	r3, #0
 8002e14:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002e16:	2301      	movs	r3, #1
 8002e18:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002e22:	1d3b      	adds	r3, r7, #4
 8002e24:	2200      	movs	r2, #0
 8002e26:	4619      	mov	r1, r3
 8002e28:	4805      	ldr	r0, [pc, #20]	@ (8002e40 <MX_TIM3_Init+0xa0>)
 8002e2a:	f00b f954 	bl	800e0d6 <HAL_TIM_IC_ConfigChannel>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002e34:	f000 fa5a 	bl	80032ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002e38:	bf00      	nop
 8002e3a:	3720      	adds	r7, #32
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	24000de0 	.word	0x24000de0
 8002e44:	40000400 	.word	0x40000400

08002e48 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b08a      	sub	sp, #40	@ 0x28
 8002e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e4e:	f107 031c 	add.w	r3, r7, #28
 8002e52:	2200      	movs	r2, #0
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	605a      	str	r2, [r3, #4]
 8002e58:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e5a:	463b      	mov	r3, r7
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	605a      	str	r2, [r3, #4]
 8002e62:	609a      	str	r2, [r3, #8]
 8002e64:	60da      	str	r2, [r3, #12]
 8002e66:	611a      	str	r2, [r3, #16]
 8002e68:	615a      	str	r2, [r3, #20]
 8002e6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002e6c:	4b21      	ldr	r3, [pc, #132]	@ (8002ef4 <MX_TIM4_Init+0xac>)
 8002e6e:	4a22      	ldr	r2, [pc, #136]	@ (8002ef8 <MX_TIM4_Init+0xb0>)
 8002e70:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002e72:	4b20      	ldr	r3, [pc, #128]	@ (8002ef4 <MX_TIM4_Init+0xac>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e78:	4b1e      	ldr	r3, [pc, #120]	@ (8002ef4 <MX_TIM4_Init+0xac>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002e7e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ef4 <MX_TIM4_Init+0xac>)
 8002e80:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e84:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e86:	4b1b      	ldr	r3, [pc, #108]	@ (8002ef4 <MX_TIM4_Init+0xac>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e8c:	4b19      	ldr	r3, [pc, #100]	@ (8002ef4 <MX_TIM4_Init+0xac>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002e92:	4818      	ldr	r0, [pc, #96]	@ (8002ef4 <MX_TIM4_Init+0xac>)
 8002e94:	f00a febe 	bl	800dc14 <HAL_TIM_PWM_Init>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8002e9e:	f000 fa25 	bl	80032ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002eaa:	f107 031c 	add.w	r3, r7, #28
 8002eae:	4619      	mov	r1, r3
 8002eb0:	4810      	ldr	r0, [pc, #64]	@ (8002ef4 <MX_TIM4_Init+0xac>)
 8002eb2:	f00c f8c7 	bl	800f044 <HAL_TIMEx_MasterConfigSynchronization>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002ebc:	f000 fa16 	bl	80032ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ec0:	2360      	movs	r3, #96	@ 0x60
 8002ec2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ed0:	463b      	mov	r3, r7
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4807      	ldr	r0, [pc, #28]	@ (8002ef4 <MX_TIM4_Init+0xac>)
 8002ed8:	f00b f99a 	bl	800e210 <HAL_TIM_PWM_ConfigChannel>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002ee2:	f000 fa03 	bl	80032ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002ee6:	4803      	ldr	r0, [pc, #12]	@ (8002ef4 <MX_TIM4_Init+0xac>)
 8002ee8:	f000 fe4e 	bl	8003b88 <HAL_TIM_MspPostInit>

}
 8002eec:	bf00      	nop
 8002eee:	3728      	adds	r7, #40	@ 0x28
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	24000e2c 	.word	0x24000e2c
 8002ef8:	40000800 	.word	0x40000800

08002efc <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b088      	sub	sp, #32
 8002f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f02:	f107 0314 	add.w	r3, r7, #20
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	605a      	str	r2, [r3, #4]
 8002f0c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002f0e:	1d3b      	adds	r3, r7, #4
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	605a      	str	r2, [r3, #4]
 8002f16:	609a      	str	r2, [r3, #8]
 8002f18:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002f1a:	4b22      	ldr	r3, [pc, #136]	@ (8002fa4 <MX_TIM15_Init+0xa8>)
 8002f1c:	4a22      	ldr	r2, [pc, #136]	@ (8002fa8 <MX_TIM15_Init+0xac>)
 8002f1e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8002f20:	4b20      	ldr	r3, [pc, #128]	@ (8002fa4 <MX_TIM15_Init+0xa8>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f26:	4b1f      	ldr	r3, [pc, #124]	@ (8002fa4 <MX_TIM15_Init+0xa8>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8002f2c:	4b1d      	ldr	r3, [pc, #116]	@ (8002fa4 <MX_TIM15_Init+0xa8>)
 8002f2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f32:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f34:	4b1b      	ldr	r3, [pc, #108]	@ (8002fa4 <MX_TIM15_Init+0xa8>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002f3a:	4b1a      	ldr	r3, [pc, #104]	@ (8002fa4 <MX_TIM15_Init+0xa8>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f40:	4b18      	ldr	r3, [pc, #96]	@ (8002fa4 <MX_TIM15_Init+0xa8>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8002f46:	4817      	ldr	r0, [pc, #92]	@ (8002fa4 <MX_TIM15_Init+0xa8>)
 8002f48:	f00b f86e 	bl	800e028 <HAL_TIM_IC_Init>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8002f52:	f000 f9cb 	bl	80032ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f56:	2300      	movs	r3, #0
 8002f58:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002f5e:	f107 0314 	add.w	r3, r7, #20
 8002f62:	4619      	mov	r1, r3
 8002f64:	480f      	ldr	r0, [pc, #60]	@ (8002fa4 <MX_TIM15_Init+0xa8>)
 8002f66:	f00c f86d 	bl	800f044 <HAL_TIMEx_MasterConfigSynchronization>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8002f70:	f000 f9bc 	bl	80032ec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002f74:	2300      	movs	r3, #0
 8002f76:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002f80:	2300      	movs	r3, #0
 8002f82:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002f84:	1d3b      	adds	r3, r7, #4
 8002f86:	2200      	movs	r2, #0
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4806      	ldr	r0, [pc, #24]	@ (8002fa4 <MX_TIM15_Init+0xa8>)
 8002f8c:	f00b f8a3 	bl	800e0d6 <HAL_TIM_IC_ConfigChannel>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <MX_TIM15_Init+0x9e>
  {
    Error_Handler();
 8002f96:	f000 f9a9 	bl	80032ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8002f9a:	bf00      	nop
 8002f9c:	3720      	adds	r7, #32
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	24000e78 	.word	0x24000e78
 8002fa8:	40014000 	.word	0x40014000

08002fac <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8002fb0:	bf00      	nop
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
	...

08002fbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002fc2:	4b11      	ldr	r3, [pc, #68]	@ (8003008 <MX_DMA_Init+0x4c>)
 8002fc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002fc8:	4a0f      	ldr	r2, [pc, #60]	@ (8003008 <MX_DMA_Init+0x4c>)
 8002fca:	f043 0301 	orr.w	r3, r3, #1
 8002fce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8003008 <MX_DMA_Init+0x4c>)
 8002fd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	607b      	str	r3, [r7, #4]
 8002fde:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	200c      	movs	r0, #12
 8002fe6:	f004 f990 	bl	800730a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002fea:	200c      	movs	r0, #12
 8002fec:	f004 f9a7 	bl	800733e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	200d      	movs	r0, #13
 8002ff6:	f004 f988 	bl	800730a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002ffa:	200d      	movs	r0, #13
 8002ffc:	f004 f99f 	bl	800733e <HAL_NVIC_EnableIRQ>

}
 8003000:	bf00      	nop
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	58024400 	.word	0x58024400

0800300c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b08e      	sub	sp, #56	@ 0x38
 8003010:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003012:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003016:	2200      	movs	r2, #0
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	605a      	str	r2, [r3, #4]
 800301c:	609a      	str	r2, [r3, #8]
 800301e:	60da      	str	r2, [r3, #12]
 8003020:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003022:	4bab      	ldr	r3, [pc, #684]	@ (80032d0 <MX_GPIO_Init+0x2c4>)
 8003024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003028:	4aa9      	ldr	r2, [pc, #676]	@ (80032d0 <MX_GPIO_Init+0x2c4>)
 800302a:	f043 0310 	orr.w	r3, r3, #16
 800302e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003032:	4ba7      	ldr	r3, [pc, #668]	@ (80032d0 <MX_GPIO_Init+0x2c4>)
 8003034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003038:	f003 0310 	and.w	r3, r3, #16
 800303c:	623b      	str	r3, [r7, #32]
 800303e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003040:	4ba3      	ldr	r3, [pc, #652]	@ (80032d0 <MX_GPIO_Init+0x2c4>)
 8003042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003046:	4aa2      	ldr	r2, [pc, #648]	@ (80032d0 <MX_GPIO_Init+0x2c4>)
 8003048:	f043 0304 	orr.w	r3, r3, #4
 800304c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003050:	4b9f      	ldr	r3, [pc, #636]	@ (80032d0 <MX_GPIO_Init+0x2c4>)
 8003052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003056:	f003 0304 	and.w	r3, r3, #4
 800305a:	61fb      	str	r3, [r7, #28]
 800305c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800305e:	4b9c      	ldr	r3, [pc, #624]	@ (80032d0 <MX_GPIO_Init+0x2c4>)
 8003060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003064:	4a9a      	ldr	r2, [pc, #616]	@ (80032d0 <MX_GPIO_Init+0x2c4>)
 8003066:	f043 0320 	orr.w	r3, r3, #32
 800306a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800306e:	4b98      	ldr	r3, [pc, #608]	@ (80032d0 <MX_GPIO_Init+0x2c4>)
 8003070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003074:	f003 0320 	and.w	r3, r3, #32
 8003078:	61bb      	str	r3, [r7, #24]
 800307a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800307c:	4b94      	ldr	r3, [pc, #592]	@ (80032d0 <MX_GPIO_Init+0x2c4>)
 800307e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003082:	4a93      	ldr	r2, [pc, #588]	@ (80032d0 <MX_GPIO_Init+0x2c4>)
 8003084:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003088:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800308c:	4b90      	ldr	r3, [pc, #576]	@ (80032d0 <MX_GPIO_Init+0x2c4>)
 800308e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003096:	617b      	str	r3, [r7, #20]
 8003098:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800309a:	4b8d      	ldr	r3, [pc, #564]	@ (80032d0 <MX_GPIO_Init+0x2c4>)
 800309c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030a0:	4a8b      	ldr	r2, [pc, #556]	@ (80032d0 <MX_GPIO_Init+0x2c4>)
 80030a2:	f043 0301 	orr.w	r3, r3, #1
 80030a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80030aa:	4b89      	ldr	r3, [pc, #548]	@ (80032d0 <MX_GPIO_Init+0x2c4>)
 80030ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	613b      	str	r3, [r7, #16]
 80030b6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030b8:	4b85      	ldr	r3, [pc, #532]	@ (80032d0 <MX_GPIO_Init+0x2c4>)
 80030ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030be:	4a84      	ldr	r2, [pc, #528]	@ (80032d0 <MX_GPIO_Init+0x2c4>)
 80030c0:	f043 0302 	orr.w	r3, r3, #2
 80030c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80030c8:	4b81      	ldr	r3, [pc, #516]	@ (80032d0 <MX_GPIO_Init+0x2c4>)
 80030ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	60fb      	str	r3, [r7, #12]
 80030d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80030d6:	4b7e      	ldr	r3, [pc, #504]	@ (80032d0 <MX_GPIO_Init+0x2c4>)
 80030d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030dc:	4a7c      	ldr	r2, [pc, #496]	@ (80032d0 <MX_GPIO_Init+0x2c4>)
 80030de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80030e6:	4b7a      	ldr	r3, [pc, #488]	@ (80032d0 <MX_GPIO_Init+0x2c4>)
 80030e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030f0:	60bb      	str	r3, [r7, #8]
 80030f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80030f4:	4b76      	ldr	r3, [pc, #472]	@ (80032d0 <MX_GPIO_Init+0x2c4>)
 80030f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030fa:	4a75      	ldr	r2, [pc, #468]	@ (80032d0 <MX_GPIO_Init+0x2c4>)
 80030fc:	f043 0308 	orr.w	r3, r3, #8
 8003100:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003104:	4b72      	ldr	r3, [pc, #456]	@ (80032d0 <MX_GPIO_Init+0x2c4>)
 8003106:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	607b      	str	r3, [r7, #4]
 8003110:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LINE_DRIVER1_ENABLE_Pin|LINE_DRIVER2_ENABLE_Pin, GPIO_PIN_SET);
 8003112:	2201      	movs	r2, #1
 8003114:	f640 0105 	movw	r1, #2053	@ 0x805
 8003118:	486e      	ldr	r0, [pc, #440]	@ (80032d4 <MX_GPIO_Init+0x2c8>)
 800311a:	f007 f9c1 	bl	800a4a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
 800311e:	2200      	movs	r2, #0
 8003120:	2102      	movs	r1, #2
 8003122:	486d      	ldr	r0, [pc, #436]	@ (80032d8 <MX_GPIO_Init+0x2cc>)
 8003124:	f007 f9bc 	bl	800a4a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8003128:	2200      	movs	r2, #0
 800312a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800312e:	4869      	ldr	r0, [pc, #420]	@ (80032d4 <MX_GPIO_Init+0x2c8>)
 8003130:	f007 f9b6 	bl	800a4a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_3V3_SWITCH_GPIO_Port, OUT_3V3_SWITCH_Pin, GPIO_PIN_SET);
 8003134:	2201      	movs	r2, #1
 8003136:	2101      	movs	r1, #1
 8003138:	4868      	ldr	r0, [pc, #416]	@ (80032dc <MX_GPIO_Init+0x2d0>)
 800313a:	f007 f9b1 	bl	800a4a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ACTIVE_GPIO_Port, LED_ACTIVE_Pin, GPIO_PIN_SET);
 800313e:	2201      	movs	r2, #1
 8003140:	2101      	movs	r1, #1
 8003142:	4867      	ldr	r0, [pc, #412]	@ (80032e0 <MX_GPIO_Init+0x2d4>)
 8003144:	f007 f9ac 	bl	800a4a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8003148:	2200      	movs	r2, #0
 800314a:	2102      	movs	r1, #2
 800314c:	4864      	ldr	r0, [pc, #400]	@ (80032e0 <MX_GPIO_Init+0x2d4>)
 800314e:	f007 f9a7 	bl	800a4a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003152:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003156:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003158:	2300      	movs	r3, #0
 800315a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315c:	2300      	movs	r3, #0
 800315e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003160:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003164:	4619      	mov	r1, r3
 8003166:	485f      	ldr	r0, [pc, #380]	@ (80032e4 <MX_GPIO_Init+0x2d8>)
 8003168:	f006 ffda 	bl	800a120 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LINE_DRIVER1_ENABLE_Pin LINE_DRIVER2_ENABLE_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LINE_DRIVER1_ENABLE_Pin|LINE_DRIVER2_ENABLE_Pin|LED_RED_Pin;
 800316c:	f644 0305 	movw	r3, #18437	@ 0x4805
 8003170:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003172:	2301      	movs	r3, #1
 8003174:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003176:	2300      	movs	r3, #0
 8003178:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800317a:	2300      	movs	r3, #0
 800317c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800317e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003182:	4619      	mov	r1, r3
 8003184:	4853      	ldr	r0, [pc, #332]	@ (80032d4 <MX_GPIO_Init+0x2c8>)
 8003186:	f006 ffcb 	bl	800a120 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_500V_ENABLE_Pin */
  GPIO_InitStruct.Pin = OUT_500V_ENABLE_Pin;
 800318a:	2301      	movs	r3, #1
 800318c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800318e:	2300      	movs	r3, #0
 8003190:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003192:	2300      	movs	r3, #0
 8003194:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OUT_500V_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003196:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800319a:	4619      	mov	r1, r3
 800319c:	484e      	ldr	r0, [pc, #312]	@ (80032d8 <MX_GPIO_Init+0x2cc>)
 800319e:	f006 ffbf 	bl	800a120 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_OUTPUT_Pin */
  GPIO_InitStruct.Pin = TEST_OUTPUT_Pin;
 80031a2:	2302      	movs	r3, #2
 80031a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031a6:	2301      	movs	r3, #1
 80031a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031aa:	2300      	movs	r3, #0
 80031ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ae:	2300      	movs	r3, #0
 80031b0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(TEST_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 80031b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031b6:	4619      	mov	r1, r3
 80031b8:	4847      	ldr	r0, [pc, #284]	@ (80032d8 <MX_GPIO_Init+0x2cc>)
 80031ba:	f006 ffb1 	bl	800a120 <HAL_GPIO_Init>

  /*Configure GPIO pin : TURN_PLASMA_ON_Pin */
  GPIO_InitStruct.Pin = TURN_PLASMA_ON_Pin;
 80031be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80031c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031c4:	2300      	movs	r3, #0
 80031c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031c8:	2300      	movs	r3, #0
 80031ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TURN_PLASMA_ON_GPIO_Port, &GPIO_InitStruct);
 80031cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031d0:	4619      	mov	r1, r3
 80031d2:	4843      	ldr	r0, [pc, #268]	@ (80032e0 <MX_GPIO_Init+0x2d4>)
 80031d4:	f006 ffa4 	bl	800a120 <HAL_GPIO_Init>

  /*Configure GPIO pin : INP_COMP_IRQ_Pin */
  GPIO_InitStruct.Pin = INP_COMP_IRQ_Pin;
 80031d8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80031dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80031de:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80031e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e4:	2300      	movs	r3, #0
 80031e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(INP_COMP_IRQ_GPIO_Port, &GPIO_InitStruct);
 80031e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031ec:	4619      	mov	r1, r3
 80031ee:	483c      	ldr	r0, [pc, #240]	@ (80032e0 <MX_GPIO_Init+0x2d4>)
 80031f0:	f006 ff96 	bl	800a120 <HAL_GPIO_Init>

  /*Configure GPIO pin : POWER_OFF_IRQ_Pin */
  GPIO_InitStruct.Pin = POWER_OFF_IRQ_Pin;
 80031f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80031fa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80031fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003200:	2300      	movs	r3, #0
 8003202:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(POWER_OFF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003204:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003208:	4619      	mov	r1, r3
 800320a:	4835      	ldr	r0, [pc, #212]	@ (80032e0 <MX_GPIO_Init+0x2d4>)
 800320c:	f006 ff88 	bl	800a120 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8003210:	2380      	movs	r3, #128	@ 0x80
 8003212:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003214:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003218:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321a:	2300      	movs	r3, #0
 800321c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800321e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003222:	4619      	mov	r1, r3
 8003224:	482c      	ldr	r0, [pc, #176]	@ (80032d8 <MX_GPIO_Init+0x2cc>)
 8003226:	f006 ff7b 	bl	800a120 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 800322a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800322e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003230:	2300      	movs	r3, #0
 8003232:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003234:	2300      	movs	r3, #0
 8003236:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003238:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800323c:	4619      	mov	r1, r3
 800323e:	482a      	ldr	r0, [pc, #168]	@ (80032e8 <MX_GPIO_Init+0x2dc>)
 8003240:	f006 ff6e 	bl	800a120 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8003244:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003248:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800324a:	2302      	movs	r3, #2
 800324c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324e:	2300      	movs	r3, #0
 8003250:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003252:	2300      	movs	r3, #0
 8003254:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8003256:	230a      	movs	r3, #10
 8003258:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800325a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800325e:	4619      	mov	r1, r3
 8003260:	4821      	ldr	r0, [pc, #132]	@ (80032e8 <MX_GPIO_Init+0x2dc>)
 8003262:	f006 ff5d 	bl	800a120 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_3V3_SWITCH_Pin */
  GPIO_InitStruct.Pin = OUT_3V3_SWITCH_Pin;
 8003266:	2301      	movs	r3, #1
 8003268:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800326a:	2301      	movs	r3, #1
 800326c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800326e:	2300      	movs	r3, #0
 8003270:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003272:	2300      	movs	r3, #0
 8003274:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(OUT_3V3_SWITCH_GPIO_Port, &GPIO_InitStruct);
 8003276:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800327a:	4619      	mov	r1, r3
 800327c:	4817      	ldr	r0, [pc, #92]	@ (80032dc <MX_GPIO_Init+0x2d0>)
 800327e:	f006 ff4f 	bl	800a120 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_15V_ENABLE_Pin */
  GPIO_InitStruct.Pin = OUT_15V_ENABLE_Pin;
 8003282:	2302      	movs	r3, #2
 8003284:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003286:	2300      	movs	r3, #0
 8003288:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328a:	2300      	movs	r3, #0
 800328c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OUT_15V_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800328e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003292:	4619      	mov	r1, r3
 8003294:	4811      	ldr	r0, [pc, #68]	@ (80032dc <MX_GPIO_Init+0x2d0>)
 8003296:	f006 ff43 	bl	800a120 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_ACTIVE_Pin LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_ACTIVE_Pin|LED_YELLOW_Pin;
 800329a:	2303      	movs	r3, #3
 800329c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800329e:	2301      	movs	r3, #1
 80032a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a2:	2300      	movs	r3, #0
 80032a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a6:	2300      	movs	r3, #0
 80032a8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032ae:	4619      	mov	r1, r3
 80032b0:	480b      	ldr	r0, [pc, #44]	@ (80032e0 <MX_GPIO_Init+0x2d4>)
 80032b2:	f006 ff35 	bl	800a120 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80032b6:	2200      	movs	r2, #0
 80032b8:	2100      	movs	r1, #0
 80032ba:	2028      	movs	r0, #40	@ 0x28
 80032bc:	f004 f825 	bl	800730a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80032c0:	2028      	movs	r0, #40	@ 0x28
 80032c2:	f004 f83c 	bl	800733e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80032c6:	bf00      	nop
 80032c8:	3738      	adds	r7, #56	@ 0x38
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	58024400 	.word	0x58024400
 80032d4:	58020400 	.word	0x58020400
 80032d8:	58021800 	.word	0x58021800
 80032dc:	58020c00 	.word	0x58020c00
 80032e0:	58021000 	.word	0x58021000
 80032e4:	58020800 	.word	0x58020800
 80032e8:	58020000 	.word	0x58020000

080032ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032f0:	b672      	cpsid	i
}
 80032f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80032f4:	bf00      	nop
 80032f6:	e7fd      	b.n	80032f4 <Error_Handler+0x8>

080032f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003328 <HAL_MspInit+0x30>)
 8003300:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003304:	4a08      	ldr	r2, [pc, #32]	@ (8003328 <HAL_MspInit+0x30>)
 8003306:	f043 0302 	orr.w	r3, r3, #2
 800330a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800330e:	4b06      	ldr	r3, [pc, #24]	@ (8003328 <HAL_MspInit+0x30>)
 8003310:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	607b      	str	r3, [r7, #4]
 800331a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr
 8003328:	58024400 	.word	0x58024400

0800332c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b090      	sub	sp, #64	@ 0x40
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003334:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	605a      	str	r2, [r3, #4]
 800333e:	609a      	str	r2, [r3, #8]
 8003340:	60da      	str	r2, [r3, #12]
 8003342:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4aaa      	ldr	r2, [pc, #680]	@ (80035f4 <HAL_ADC_MspInit+0x2c8>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d16b      	bne.n	8003426 <HAL_ADC_MspInit+0xfa>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800334e:	4baa      	ldr	r3, [pc, #680]	@ (80035f8 <HAL_ADC_MspInit+0x2cc>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	3301      	adds	r3, #1
 8003354:	4aa8      	ldr	r2, [pc, #672]	@ (80035f8 <HAL_ADC_MspInit+0x2cc>)
 8003356:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003358:	4ba7      	ldr	r3, [pc, #668]	@ (80035f8 <HAL_ADC_MspInit+0x2cc>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d10e      	bne.n	800337e <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003360:	4ba6      	ldr	r3, [pc, #664]	@ (80035fc <HAL_ADC_MspInit+0x2d0>)
 8003362:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003366:	4aa5      	ldr	r2, [pc, #660]	@ (80035fc <HAL_ADC_MspInit+0x2d0>)
 8003368:	f043 0320 	orr.w	r3, r3, #32
 800336c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003370:	4ba2      	ldr	r3, [pc, #648]	@ (80035fc <HAL_ADC_MspInit+0x2d0>)
 8003372:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003376:	f003 0320 	and.w	r3, r3, #32
 800337a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800337c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800337e:	4b9f      	ldr	r3, [pc, #636]	@ (80035fc <HAL_ADC_MspInit+0x2d0>)
 8003380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003384:	4a9d      	ldr	r2, [pc, #628]	@ (80035fc <HAL_ADC_MspInit+0x2d0>)
 8003386:	f043 0301 	orr.w	r3, r3, #1
 800338a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800338e:	4b9b      	ldr	r3, [pc, #620]	@ (80035fc <HAL_ADC_MspInit+0x2d0>)
 8003390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	627b      	str	r3, [r7, #36]	@ 0x24
 800339a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP16
    PA3     ------> ADC1_INP15
    PA4     ------> ADC1_INP18
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 800339c:	2319      	movs	r3, #25
 800339e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033a0:	2303      	movs	r3, #3
 80033a2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a4:	2300      	movs	r3, #0
 80033a6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80033ac:	4619      	mov	r1, r3
 80033ae:	4894      	ldr	r0, [pc, #592]	@ (8003600 <HAL_ADC_MspInit+0x2d4>)
 80033b0:	f006 feb6 	bl	800a120 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream2;
 80033b4:	4b93      	ldr	r3, [pc, #588]	@ (8003604 <HAL_ADC_MspInit+0x2d8>)
 80033b6:	4a94      	ldr	r2, [pc, #592]	@ (8003608 <HAL_ADC_MspInit+0x2dc>)
 80033b8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80033ba:	4b92      	ldr	r3, [pc, #584]	@ (8003604 <HAL_ADC_MspInit+0x2d8>)
 80033bc:	2209      	movs	r2, #9
 80033be:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033c0:	4b90      	ldr	r3, [pc, #576]	@ (8003604 <HAL_ADC_MspInit+0x2d8>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80033c6:	4b8f      	ldr	r3, [pc, #572]	@ (8003604 <HAL_ADC_MspInit+0x2d8>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80033cc:	4b8d      	ldr	r3, [pc, #564]	@ (8003604 <HAL_ADC_MspInit+0x2d8>)
 80033ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80033d2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80033d4:	4b8b      	ldr	r3, [pc, #556]	@ (8003604 <HAL_ADC_MspInit+0x2d8>)
 80033d6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80033da:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80033dc:	4b89      	ldr	r3, [pc, #548]	@ (8003604 <HAL_ADC_MspInit+0x2d8>)
 80033de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80033e2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80033e4:	4b87      	ldr	r3, [pc, #540]	@ (8003604 <HAL_ADC_MspInit+0x2d8>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80033ea:	4b86      	ldr	r3, [pc, #536]	@ (8003604 <HAL_ADC_MspInit+0x2d8>)
 80033ec:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80033f0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033f2:	4b84      	ldr	r3, [pc, #528]	@ (8003604 <HAL_ADC_MspInit+0x2d8>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80033f8:	4882      	ldr	r0, [pc, #520]	@ (8003604 <HAL_ADC_MspInit+0x2d8>)
 80033fa:	f003 ffbb 	bl	8007374 <HAL_DMA_Init>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <HAL_ADC_MspInit+0xdc>
    {
      Error_Handler();
 8003404:	f7ff ff72 	bl	80032ec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a7e      	ldr	r2, [pc, #504]	@ (8003604 <HAL_ADC_MspInit+0x2d8>)
 800340c:	659a      	str	r2, [r3, #88]	@ 0x58
 800340e:	4a7d      	ldr	r2, [pc, #500]	@ (8003604 <HAL_ADC_MspInit+0x2d8>)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003414:	2200      	movs	r2, #0
 8003416:	2100      	movs	r1, #0
 8003418:	2012      	movs	r0, #18
 800341a:	f003 ff76 	bl	800730a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800341e:	2012      	movs	r0, #18
 8003420:	f003 ff8d 	bl	800733e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003424:	e0e2      	b.n	80035ec <HAL_ADC_MspInit+0x2c0>
  else if(hadc->Instance==ADC2)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a78      	ldr	r2, [pc, #480]	@ (800360c <HAL_ADC_MspInit+0x2e0>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d156      	bne.n	80034de <HAL_ADC_MspInit+0x1b2>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003430:	4b71      	ldr	r3, [pc, #452]	@ (80035f8 <HAL_ADC_MspInit+0x2cc>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	3301      	adds	r3, #1
 8003436:	4a70      	ldr	r2, [pc, #448]	@ (80035f8 <HAL_ADC_MspInit+0x2cc>)
 8003438:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800343a:	4b6f      	ldr	r3, [pc, #444]	@ (80035f8 <HAL_ADC_MspInit+0x2cc>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d10e      	bne.n	8003460 <HAL_ADC_MspInit+0x134>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003442:	4b6e      	ldr	r3, [pc, #440]	@ (80035fc <HAL_ADC_MspInit+0x2d0>)
 8003444:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003448:	4a6c      	ldr	r2, [pc, #432]	@ (80035fc <HAL_ADC_MspInit+0x2d0>)
 800344a:	f043 0320 	orr.w	r3, r3, #32
 800344e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003452:	4b6a      	ldr	r3, [pc, #424]	@ (80035fc <HAL_ADC_MspInit+0x2d0>)
 8003454:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003458:	f003 0320 	and.w	r3, r3, #32
 800345c:	623b      	str	r3, [r7, #32]
 800345e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003460:	4b66      	ldr	r3, [pc, #408]	@ (80035fc <HAL_ADC_MspInit+0x2d0>)
 8003462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003466:	4a65      	ldr	r2, [pc, #404]	@ (80035fc <HAL_ADC_MspInit+0x2d0>)
 8003468:	f043 0301 	orr.w	r3, r3, #1
 800346c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003470:	4b62      	ldr	r3, [pc, #392]	@ (80035fc <HAL_ADC_MspInit+0x2d0>)
 8003472:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	61fb      	str	r3, [r7, #28]
 800347c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800347e:	4b5f      	ldr	r3, [pc, #380]	@ (80035fc <HAL_ADC_MspInit+0x2d0>)
 8003480:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003484:	4a5d      	ldr	r2, [pc, #372]	@ (80035fc <HAL_ADC_MspInit+0x2d0>)
 8003486:	f043 0302 	orr.w	r3, r3, #2
 800348a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800348e:	4b5b      	ldr	r3, [pc, #364]	@ (80035fc <HAL_ADC_MspInit+0x2d0>)
 8003490:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	61bb      	str	r3, [r7, #24]
 800349a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800349c:	2360      	movs	r3, #96	@ 0x60
 800349e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034a0:	2303      	movs	r3, #3
 80034a2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a4:	2300      	movs	r3, #0
 80034a6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80034ac:	4619      	mov	r1, r3
 80034ae:	4854      	ldr	r0, [pc, #336]	@ (8003600 <HAL_ADC_MspInit+0x2d4>)
 80034b0:	f006 fe36 	bl	800a120 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80034b4:	2302      	movs	r3, #2
 80034b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034b8:	2303      	movs	r3, #3
 80034ba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034bc:	2300      	movs	r3, #0
 80034be:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80034c4:	4619      	mov	r1, r3
 80034c6:	4852      	ldr	r0, [pc, #328]	@ (8003610 <HAL_ADC_MspInit+0x2e4>)
 80034c8:	f006 fe2a 	bl	800a120 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80034cc:	2200      	movs	r2, #0
 80034ce:	2100      	movs	r1, #0
 80034d0:	2012      	movs	r0, #18
 80034d2:	f003 ff1a 	bl	800730a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80034d6:	2012      	movs	r0, #18
 80034d8:	f003 ff31 	bl	800733e <HAL_NVIC_EnableIRQ>
}
 80034dc:	e086      	b.n	80035ec <HAL_ADC_MspInit+0x2c0>
  else if(hadc->Instance==ADC3)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a4c      	ldr	r2, [pc, #304]	@ (8003614 <HAL_ADC_MspInit+0x2e8>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	f040 8081 	bne.w	80035ec <HAL_ADC_MspInit+0x2c0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80034ea:	4b44      	ldr	r3, [pc, #272]	@ (80035fc <HAL_ADC_MspInit+0x2d0>)
 80034ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034f0:	4a42      	ldr	r2, [pc, #264]	@ (80035fc <HAL_ADC_MspInit+0x2d0>)
 80034f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80034fa:	4b40      	ldr	r3, [pc, #256]	@ (80035fc <HAL_ADC_MspInit+0x2d0>)
 80034fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003500:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003504:	617b      	str	r3, [r7, #20]
 8003506:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003508:	4b3c      	ldr	r3, [pc, #240]	@ (80035fc <HAL_ADC_MspInit+0x2d0>)
 800350a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800350e:	4a3b      	ldr	r2, [pc, #236]	@ (80035fc <HAL_ADC_MspInit+0x2d0>)
 8003510:	f043 0320 	orr.w	r3, r3, #32
 8003514:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003518:	4b38      	ldr	r3, [pc, #224]	@ (80035fc <HAL_ADC_MspInit+0x2d0>)
 800351a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800351e:	f003 0320 	and.w	r3, r3, #32
 8003522:	613b      	str	r3, [r7, #16]
 8003524:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003526:	4b35      	ldr	r3, [pc, #212]	@ (80035fc <HAL_ADC_MspInit+0x2d0>)
 8003528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800352c:	4a33      	ldr	r2, [pc, #204]	@ (80035fc <HAL_ADC_MspInit+0x2d0>)
 800352e:	f043 0304 	orr.w	r3, r3, #4
 8003532:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003536:	4b31      	ldr	r3, [pc, #196]	@ (80035fc <HAL_ADC_MspInit+0x2d0>)
 8003538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800353c:	f003 0304 	and.w	r3, r3, #4
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8003544:	f44f 63ff 	mov.w	r3, #2040	@ 0x7f8
 8003548:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800354a:	2303      	movs	r3, #3
 800354c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354e:	2300      	movs	r3, #0
 8003550:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003552:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003556:	4619      	mov	r1, r3
 8003558:	482f      	ldr	r0, [pc, #188]	@ (8003618 <HAL_ADC_MspInit+0x2ec>)
 800355a:	f006 fde1 	bl	800a120 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800355e:	2301      	movs	r3, #1
 8003560:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003562:	2303      	movs	r3, #3
 8003564:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003566:	2300      	movs	r3, #0
 8003568:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800356a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800356e:	4619      	mov	r1, r3
 8003570:	482a      	ldr	r0, [pc, #168]	@ (800361c <HAL_ADC_MspInit+0x2f0>)
 8003572:	f006 fdd5 	bl	800a120 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8003576:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 800357a:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800357e:	f000 fd91 	bl	80040a4 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8003582:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 8003586:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 800358a:	f000 fd8b 	bl	80040a4 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 800358e:	4b24      	ldr	r3, [pc, #144]	@ (8003620 <HAL_ADC_MspInit+0x2f4>)
 8003590:	4a24      	ldr	r2, [pc, #144]	@ (8003624 <HAL_ADC_MspInit+0x2f8>)
 8003592:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8003594:	4b22      	ldr	r3, [pc, #136]	@ (8003620 <HAL_ADC_MspInit+0x2f4>)
 8003596:	2273      	movs	r2, #115	@ 0x73
 8003598:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800359a:	4b21      	ldr	r3, [pc, #132]	@ (8003620 <HAL_ADC_MspInit+0x2f4>)
 800359c:	2200      	movs	r2, #0
 800359e:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80035a0:	4b1f      	ldr	r3, [pc, #124]	@ (8003620 <HAL_ADC_MspInit+0x2f4>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80035a6:	4b1e      	ldr	r3, [pc, #120]	@ (8003620 <HAL_ADC_MspInit+0x2f4>)
 80035a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035ac:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80035ae:	4b1c      	ldr	r3, [pc, #112]	@ (8003620 <HAL_ADC_MspInit+0x2f4>)
 80035b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80035b4:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80035b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003620 <HAL_ADC_MspInit+0x2f4>)
 80035b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80035bc:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 80035be:	4b18      	ldr	r3, [pc, #96]	@ (8003620 <HAL_ADC_MspInit+0x2f4>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80035c4:	4b16      	ldr	r3, [pc, #88]	@ (8003620 <HAL_ADC_MspInit+0x2f4>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035ca:	4b15      	ldr	r3, [pc, #84]	@ (8003620 <HAL_ADC_MspInit+0x2f4>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80035d0:	4813      	ldr	r0, [pc, #76]	@ (8003620 <HAL_ADC_MspInit+0x2f4>)
 80035d2:	f003 fecf 	bl	8007374 <HAL_DMA_Init>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d001      	beq.n	80035e0 <HAL_ADC_MspInit+0x2b4>
      Error_Handler();
 80035dc:	f7ff fe86 	bl	80032ec <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a0f      	ldr	r2, [pc, #60]	@ (8003620 <HAL_ADC_MspInit+0x2f4>)
 80035e4:	659a      	str	r2, [r3, #88]	@ 0x58
 80035e6:	4a0e      	ldr	r2, [pc, #56]	@ (8003620 <HAL_ADC_MspInit+0x2f4>)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80035ec:	bf00      	nop
 80035ee:	3740      	adds	r7, #64	@ 0x40
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	40022000 	.word	0x40022000
 80035f8:	24000ecc 	.word	0x24000ecc
 80035fc:	58024400 	.word	0x58024400
 8003600:	58020000 	.word	0x58020000
 8003604:	24000a54 	.word	0x24000a54
 8003608:	40020040 	.word	0x40020040
 800360c:	40022100 	.word	0x40022100
 8003610:	58020400 	.word	0x58020400
 8003614:	58026000 	.word	0x58026000
 8003618:	58021400 	.word	0x58021400
 800361c:	58020800 	.word	0x58020800
 8003620:	24000acc 	.word	0x24000acc
 8003624:	40020028 	.word	0x40020028

08003628 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b08a      	sub	sp, #40	@ 0x28
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003630:	f107 0314 	add.w	r3, r7, #20
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	605a      	str	r2, [r3, #4]
 800363a:	609a      	str	r2, [r3, #8]
 800363c:	60da      	str	r2, [r3, #12]
 800363e:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a21      	ldr	r2, [pc, #132]	@ (80036cc <HAL_COMP_MspInit+0xa4>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d13b      	bne.n	80036c2 <HAL_COMP_MspInit+0x9a>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_COMP12_CLK_ENABLE();
 800364a:	4b21      	ldr	r3, [pc, #132]	@ (80036d0 <HAL_COMP_MspInit+0xa8>)
 800364c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003650:	4a1f      	ldr	r2, [pc, #124]	@ (80036d0 <HAL_COMP_MspInit+0xa8>)
 8003652:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003656:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800365a:	4b1d      	ldr	r3, [pc, #116]	@ (80036d0 <HAL_COMP_MspInit+0xa8>)
 800365c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003660:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003664:	613b      	str	r3, [r7, #16]
 8003666:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003668:	4b19      	ldr	r3, [pc, #100]	@ (80036d0 <HAL_COMP_MspInit+0xa8>)
 800366a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800366e:	4a18      	ldr	r2, [pc, #96]	@ (80036d0 <HAL_COMP_MspInit+0xa8>)
 8003670:	f043 0310 	orr.w	r3, r3, #16
 8003674:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003678:	4b15      	ldr	r3, [pc, #84]	@ (80036d0 <HAL_COMP_MspInit+0xa8>)
 800367a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800367e:	f003 0310 	and.w	r3, r3, #16
 8003682:	60fb      	str	r3, [r7, #12]
 8003684:	68fb      	ldr	r3, [r7, #12]
    /**COMP2 GPIO Configuration
    PE7     ------> COMP2_INM
    PE11     ------> COMP2_INP
    PE13     ------> COMP2_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_11;
 8003686:	f44f 6308 	mov.w	r3, #2176	@ 0x880
 800368a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800368c:	2303      	movs	r3, #3
 800368e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003690:	2300      	movs	r3, #0
 8003692:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003694:	f107 0314 	add.w	r3, r7, #20
 8003698:	4619      	mov	r1, r3
 800369a:	480e      	ldr	r0, [pc, #56]	@ (80036d4 <HAL_COMP_MspInit+0xac>)
 800369c:	f006 fd40 	bl	800a120 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80036a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80036a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a6:	2302      	movs	r3, #2
 80036a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036aa:	2300      	movs	r3, #0
 80036ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ae:	2300      	movs	r3, #0
 80036b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_COMP2;
 80036b2:	230d      	movs	r3, #13
 80036b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80036b6:	f107 0314 	add.w	r3, r7, #20
 80036ba:	4619      	mov	r1, r3
 80036bc:	4805      	ldr	r0, [pc, #20]	@ (80036d4 <HAL_COMP_MspInit+0xac>)
 80036be:	f006 fd2f 	bl	800a120 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 80036c2:	bf00      	nop
 80036c4:	3728      	adds	r7, #40	@ 0x28
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	58003810 	.word	0x58003810
 80036d0:	58024400 	.word	0x58024400
 80036d4:	58021000 	.word	0x58021000

080036d8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b08e      	sub	sp, #56	@ 0x38
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	605a      	str	r2, [r3, #4]
 80036ea:	609a      	str	r2, [r3, #8]
 80036ec:	60da      	str	r2, [r3, #12]
 80036ee:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a59      	ldr	r2, [pc, #356]	@ (800385c <HAL_ETH_MspInit+0x184>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	f040 80ab 	bne.w	8003852 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80036fc:	4b58      	ldr	r3, [pc, #352]	@ (8003860 <HAL_ETH_MspInit+0x188>)
 80036fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003702:	4a57      	ldr	r2, [pc, #348]	@ (8003860 <HAL_ETH_MspInit+0x188>)
 8003704:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003708:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800370c:	4b54      	ldr	r3, [pc, #336]	@ (8003860 <HAL_ETH_MspInit+0x188>)
 800370e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003712:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003716:	623b      	str	r3, [r7, #32]
 8003718:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800371a:	4b51      	ldr	r3, [pc, #324]	@ (8003860 <HAL_ETH_MspInit+0x188>)
 800371c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003720:	4a4f      	ldr	r2, [pc, #316]	@ (8003860 <HAL_ETH_MspInit+0x188>)
 8003722:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003726:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800372a:	4b4d      	ldr	r3, [pc, #308]	@ (8003860 <HAL_ETH_MspInit+0x188>)
 800372c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003730:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003734:	61fb      	str	r3, [r7, #28]
 8003736:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8003738:	4b49      	ldr	r3, [pc, #292]	@ (8003860 <HAL_ETH_MspInit+0x188>)
 800373a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800373e:	4a48      	ldr	r2, [pc, #288]	@ (8003860 <HAL_ETH_MspInit+0x188>)
 8003740:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003744:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003748:	4b45      	ldr	r3, [pc, #276]	@ (8003860 <HAL_ETH_MspInit+0x188>)
 800374a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800374e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003752:	61bb      	str	r3, [r7, #24]
 8003754:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003756:	4b42      	ldr	r3, [pc, #264]	@ (8003860 <HAL_ETH_MspInit+0x188>)
 8003758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800375c:	4a40      	ldr	r2, [pc, #256]	@ (8003860 <HAL_ETH_MspInit+0x188>)
 800375e:	f043 0304 	orr.w	r3, r3, #4
 8003762:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003766:	4b3e      	ldr	r3, [pc, #248]	@ (8003860 <HAL_ETH_MspInit+0x188>)
 8003768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	617b      	str	r3, [r7, #20]
 8003772:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003774:	4b3a      	ldr	r3, [pc, #232]	@ (8003860 <HAL_ETH_MspInit+0x188>)
 8003776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800377a:	4a39      	ldr	r2, [pc, #228]	@ (8003860 <HAL_ETH_MspInit+0x188>)
 800377c:	f043 0301 	orr.w	r3, r3, #1
 8003780:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003784:	4b36      	ldr	r3, [pc, #216]	@ (8003860 <HAL_ETH_MspInit+0x188>)
 8003786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	613b      	str	r3, [r7, #16]
 8003790:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003792:	4b33      	ldr	r3, [pc, #204]	@ (8003860 <HAL_ETH_MspInit+0x188>)
 8003794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003798:	4a31      	ldr	r2, [pc, #196]	@ (8003860 <HAL_ETH_MspInit+0x188>)
 800379a:	f043 0302 	orr.w	r3, r3, #2
 800379e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80037a2:	4b2f      	ldr	r3, [pc, #188]	@ (8003860 <HAL_ETH_MspInit+0x188>)
 80037a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	60fb      	str	r3, [r7, #12]
 80037ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80037b0:	4b2b      	ldr	r3, [pc, #172]	@ (8003860 <HAL_ETH_MspInit+0x188>)
 80037b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80037b6:	4a2a      	ldr	r2, [pc, #168]	@ (8003860 <HAL_ETH_MspInit+0x188>)
 80037b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80037c0:	4b27      	ldr	r3, [pc, #156]	@ (8003860 <HAL_ETH_MspInit+0x188>)
 80037c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80037c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037ca:	60bb      	str	r3, [r7, #8]
 80037cc:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80037ce:	2332      	movs	r3, #50	@ 0x32
 80037d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037d2:	2302      	movs	r3, #2
 80037d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d6:	2300      	movs	r3, #0
 80037d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037da:	2300      	movs	r3, #0
 80037dc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80037de:	230b      	movs	r3, #11
 80037e0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037e6:	4619      	mov	r1, r3
 80037e8:	481e      	ldr	r0, [pc, #120]	@ (8003864 <HAL_ETH_MspInit+0x18c>)
 80037ea:	f006 fc99 	bl	800a120 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80037ee:	2386      	movs	r3, #134	@ 0x86
 80037f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f2:	2302      	movs	r3, #2
 80037f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f6:	2300      	movs	r3, #0
 80037f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037fa:	2300      	movs	r3, #0
 80037fc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80037fe:	230b      	movs	r3, #11
 8003800:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003802:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003806:	4619      	mov	r1, r3
 8003808:	4817      	ldr	r0, [pc, #92]	@ (8003868 <HAL_ETH_MspInit+0x190>)
 800380a:	f006 fc89 	bl	800a120 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800380e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003812:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003814:	2302      	movs	r3, #2
 8003816:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003818:	2300      	movs	r3, #0
 800381a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800381c:	2300      	movs	r3, #0
 800381e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003820:	230b      	movs	r3, #11
 8003822:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003824:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003828:	4619      	mov	r1, r3
 800382a:	4810      	ldr	r0, [pc, #64]	@ (800386c <HAL_ETH_MspInit+0x194>)
 800382c:	f006 fc78 	bl	800a120 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003830:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8003834:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003836:	2302      	movs	r3, #2
 8003838:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800383a:	2300      	movs	r3, #0
 800383c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800383e:	2300      	movs	r3, #0
 8003840:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003842:	230b      	movs	r3, #11
 8003844:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003846:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800384a:	4619      	mov	r1, r3
 800384c:	4808      	ldr	r0, [pc, #32]	@ (8003870 <HAL_ETH_MspInit+0x198>)
 800384e:	f006 fc67 	bl	800a120 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8003852:	bf00      	nop
 8003854:	3738      	adds	r7, #56	@ 0x38
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40028000 	.word	0x40028000
 8003860:	58024400 	.word	0x58024400
 8003864:	58020800 	.word	0x58020800
 8003868:	58020000 	.word	0x58020000
 800386c:	58020400 	.word	0x58020400
 8003870:	58021800 	.word	0x58021800

08003874 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b0ba      	sub	sp, #232	@ 0xe8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800387c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003880:	2200      	movs	r2, #0
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	605a      	str	r2, [r3, #4]
 8003886:	609a      	str	r2, [r3, #8]
 8003888:	60da      	str	r2, [r3, #12]
 800388a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800388c:	f107 0318 	add.w	r3, r7, #24
 8003890:	22b8      	movs	r2, #184	@ 0xb8
 8003892:	2100      	movs	r1, #0
 8003894:	4618      	mov	r0, r3
 8003896:	f00d f96b 	bl	8010b70 <memset>
  if(huart->Instance==LPUART1)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a4d      	ldr	r2, [pc, #308]	@ (80039d4 <HAL_UART_MspInit+0x160>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d146      	bne.n	8003932 <HAL_UART_MspInit+0xbe>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80038a4:	f04f 0204 	mov.w	r2, #4
 80038a8:	f04f 0300 	mov.w	r3, #0
 80038ac:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 80038b0:	2300      	movs	r3, #0
 80038b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038b6:	f107 0318 	add.w	r3, r7, #24
 80038ba:	4618      	mov	r0, r3
 80038bc:	f007 fdc4 	bl	800b448 <HAL_RCCEx_PeriphCLKConfig>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80038c6:	f7ff fd11 	bl	80032ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80038ca:	4b43      	ldr	r3, [pc, #268]	@ (80039d8 <HAL_UART_MspInit+0x164>)
 80038cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80038d0:	4a41      	ldr	r2, [pc, #260]	@ (80039d8 <HAL_UART_MspInit+0x164>)
 80038d2:	f043 0308 	orr.w	r3, r3, #8
 80038d6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80038da:	4b3f      	ldr	r3, [pc, #252]	@ (80039d8 <HAL_UART_MspInit+0x164>)
 80038dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80038e0:	f003 0308 	and.w	r3, r3, #8
 80038e4:	617b      	str	r3, [r7, #20]
 80038e6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038e8:	4b3b      	ldr	r3, [pc, #236]	@ (80039d8 <HAL_UART_MspInit+0x164>)
 80038ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038ee:	4a3a      	ldr	r2, [pc, #232]	@ (80039d8 <HAL_UART_MspInit+0x164>)
 80038f0:	f043 0302 	orr.w	r3, r3, #2
 80038f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80038f8:	4b37      	ldr	r3, [pc, #220]	@ (80039d8 <HAL_UART_MspInit+0x164>)
 80038fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	613b      	str	r3, [r7, #16]
 8003904:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB6     ------> LPUART1_TX
    PB7     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003906:	23c0      	movs	r3, #192	@ 0xc0
 8003908:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800390c:	2302      	movs	r3, #2
 800390e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003912:	2300      	movs	r3, #0
 8003914:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003918:	2300      	movs	r3, #0
 800391a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART;
 800391e:	2308      	movs	r3, #8
 8003920:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003924:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003928:	4619      	mov	r1, r3
 800392a:	482c      	ldr	r0, [pc, #176]	@ (80039dc <HAL_UART_MspInit+0x168>)
 800392c:	f006 fbf8 	bl	800a120 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003930:	e04b      	b.n	80039ca <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART3)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a2a      	ldr	r2, [pc, #168]	@ (80039e0 <HAL_UART_MspInit+0x16c>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d146      	bne.n	80039ca <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800393c:	f04f 0202 	mov.w	r2, #2
 8003940:	f04f 0300 	mov.w	r3, #0
 8003944:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003948:	2300      	movs	r3, #0
 800394a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800394e:	f107 0318 	add.w	r3, r7, #24
 8003952:	4618      	mov	r0, r3
 8003954:	f007 fd78 	bl	800b448 <HAL_RCCEx_PeriphCLKConfig>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <HAL_UART_MspInit+0xee>
      Error_Handler();
 800395e:	f7ff fcc5 	bl	80032ec <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003962:	4b1d      	ldr	r3, [pc, #116]	@ (80039d8 <HAL_UART_MspInit+0x164>)
 8003964:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003968:	4a1b      	ldr	r2, [pc, #108]	@ (80039d8 <HAL_UART_MspInit+0x164>)
 800396a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800396e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003972:	4b19      	ldr	r3, [pc, #100]	@ (80039d8 <HAL_UART_MspInit+0x164>)
 8003974:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003978:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800397c:	60fb      	str	r3, [r7, #12]
 800397e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003980:	4b15      	ldr	r3, [pc, #84]	@ (80039d8 <HAL_UART_MspInit+0x164>)
 8003982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003986:	4a14      	ldr	r2, [pc, #80]	@ (80039d8 <HAL_UART_MspInit+0x164>)
 8003988:	f043 0308 	orr.w	r3, r3, #8
 800398c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003990:	4b11      	ldr	r3, [pc, #68]	@ (80039d8 <HAL_UART_MspInit+0x164>)
 8003992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003996:	f003 0308 	and.w	r3, r3, #8
 800399a:	60bb      	str	r3, [r7, #8]
 800399c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 800399e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80039a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039a6:	2302      	movs	r3, #2
 80039a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ac:	2300      	movs	r3, #0
 80039ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039b2:	2300      	movs	r3, #0
 80039b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80039b8:	2307      	movs	r3, #7
 80039ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039be:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80039c2:	4619      	mov	r1, r3
 80039c4:	4807      	ldr	r0, [pc, #28]	@ (80039e4 <HAL_UART_MspInit+0x170>)
 80039c6:	f006 fbab 	bl	800a120 <HAL_GPIO_Init>
}
 80039ca:	bf00      	nop
 80039cc:	37e8      	adds	r7, #232	@ 0xe8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	58000c00 	.word	0x58000c00
 80039d8:	58024400 	.word	0x58024400
 80039dc:	58020400 	.word	0x58020400
 80039e0:	40004800 	.word	0x40004800
 80039e4:	58020c00 	.word	0x58020c00

080039e8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b087      	sub	sp, #28
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a20      	ldr	r2, [pc, #128]	@ (8003a78 <HAL_TIM_PWM_MspInit+0x90>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d10f      	bne.n	8003a1a <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80039fa:	4b20      	ldr	r3, [pc, #128]	@ (8003a7c <HAL_TIM_PWM_MspInit+0x94>)
 80039fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a00:	4a1e      	ldr	r2, [pc, #120]	@ (8003a7c <HAL_TIM_PWM_MspInit+0x94>)
 8003a02:	f043 0301 	orr.w	r3, r3, #1
 8003a06:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003a0a:	4b1c      	ldr	r3, [pc, #112]	@ (8003a7c <HAL_TIM_PWM_MspInit+0x94>)
 8003a0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	617b      	str	r3, [r7, #20]
 8003a16:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003a18:	e028      	b.n	8003a6c <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM2)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a22:	d10f      	bne.n	8003a44 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a24:	4b15      	ldr	r3, [pc, #84]	@ (8003a7c <HAL_TIM_PWM_MspInit+0x94>)
 8003a26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003a2a:	4a14      	ldr	r2, [pc, #80]	@ (8003a7c <HAL_TIM_PWM_MspInit+0x94>)
 8003a2c:	f043 0301 	orr.w	r3, r3, #1
 8003a30:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003a34:	4b11      	ldr	r3, [pc, #68]	@ (8003a7c <HAL_TIM_PWM_MspInit+0x94>)
 8003a36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	613b      	str	r3, [r7, #16]
 8003a40:	693b      	ldr	r3, [r7, #16]
}
 8003a42:	e013      	b.n	8003a6c <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM4)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a0d      	ldr	r2, [pc, #52]	@ (8003a80 <HAL_TIM_PWM_MspInit+0x98>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d10e      	bne.n	8003a6c <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a7c <HAL_TIM_PWM_MspInit+0x94>)
 8003a50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003a54:	4a09      	ldr	r2, [pc, #36]	@ (8003a7c <HAL_TIM_PWM_MspInit+0x94>)
 8003a56:	f043 0304 	orr.w	r3, r3, #4
 8003a5a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003a5e:	4b07      	ldr	r3, [pc, #28]	@ (8003a7c <HAL_TIM_PWM_MspInit+0x94>)
 8003a60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003a64:	f003 0304 	and.w	r3, r3, #4
 8003a68:	60fb      	str	r3, [r7, #12]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
}
 8003a6c:	bf00      	nop
 8003a6e:	371c      	adds	r7, #28
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr
 8003a78:	40010000 	.word	0x40010000
 8003a7c:	58024400 	.word	0x58024400
 8003a80:	40000800 	.word	0x40000800

08003a84 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b08c      	sub	sp, #48	@ 0x30
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a8c:	f107 031c 	add.w	r3, r7, #28
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	605a      	str	r2, [r3, #4]
 8003a96:	609a      	str	r2, [r3, #8]
 8003a98:	60da      	str	r2, [r3, #12]
 8003a9a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a34      	ldr	r2, [pc, #208]	@ (8003b74 <HAL_TIM_IC_MspInit+0xf0>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d12e      	bne.n	8003b04 <HAL_TIM_IC_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003aa6:	4b34      	ldr	r3, [pc, #208]	@ (8003b78 <HAL_TIM_IC_MspInit+0xf4>)
 8003aa8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003aac:	4a32      	ldr	r2, [pc, #200]	@ (8003b78 <HAL_TIM_IC_MspInit+0xf4>)
 8003aae:	f043 0302 	orr.w	r3, r3, #2
 8003ab2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003ab6:	4b30      	ldr	r3, [pc, #192]	@ (8003b78 <HAL_TIM_IC_MspInit+0xf4>)
 8003ab8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	61bb      	str	r3, [r7, #24]
 8003ac2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ac4:	4b2c      	ldr	r3, [pc, #176]	@ (8003b78 <HAL_TIM_IC_MspInit+0xf4>)
 8003ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003aca:	4a2b      	ldr	r2, [pc, #172]	@ (8003b78 <HAL_TIM_IC_MspInit+0xf4>)
 8003acc:	f043 0304 	orr.w	r3, r3, #4
 8003ad0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003ad4:	4b28      	ldr	r3, [pc, #160]	@ (8003b78 <HAL_TIM_IC_MspInit+0xf4>)
 8003ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ada:	f003 0304 	and.w	r3, r3, #4
 8003ade:	617b      	str	r3, [r7, #20]
 8003ae0:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003ae2:	2340      	movs	r3, #64	@ 0x40
 8003ae4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003aea:	2301      	movs	r3, #1
 8003aec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aee:	2300      	movs	r3, #0
 8003af0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003af2:	2302      	movs	r3, #2
 8003af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003af6:	f107 031c 	add.w	r3, r7, #28
 8003afa:	4619      	mov	r1, r3
 8003afc:	481f      	ldr	r0, [pc, #124]	@ (8003b7c <HAL_TIM_IC_MspInit+0xf8>)
 8003afe:	f006 fb0f 	bl	800a120 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8003b02:	e032      	b.n	8003b6a <HAL_TIM_IC_MspInit+0xe6>
  else if(htim_ic->Instance==TIM15)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a1d      	ldr	r2, [pc, #116]	@ (8003b80 <HAL_TIM_IC_MspInit+0xfc>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d12d      	bne.n	8003b6a <HAL_TIM_IC_MspInit+0xe6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003b0e:	4b1a      	ldr	r3, [pc, #104]	@ (8003b78 <HAL_TIM_IC_MspInit+0xf4>)
 8003b10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b14:	4a18      	ldr	r2, [pc, #96]	@ (8003b78 <HAL_TIM_IC_MspInit+0xf4>)
 8003b16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b1a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003b1e:	4b16      	ldr	r3, [pc, #88]	@ (8003b78 <HAL_TIM_IC_MspInit+0xf4>)
 8003b20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b28:	613b      	str	r3, [r7, #16]
 8003b2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b2c:	4b12      	ldr	r3, [pc, #72]	@ (8003b78 <HAL_TIM_IC_MspInit+0xf4>)
 8003b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b32:	4a11      	ldr	r2, [pc, #68]	@ (8003b78 <HAL_TIM_IC_MspInit+0xf4>)
 8003b34:	f043 0310 	orr.w	r3, r3, #16
 8003b38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8003b78 <HAL_TIM_IC_MspInit+0xf4>)
 8003b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b42:	f003 0310 	and.w	r3, r3, #16
 8003b46:	60fb      	str	r3, [r7, #12]
 8003b48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003b4a:	2320      	movs	r3, #32
 8003b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b4e:	2302      	movs	r3, #2
 8003b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b52:	2301      	movs	r3, #1
 8003b54:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b56:	2300      	movs	r3, #0
 8003b58:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8003b5a:	2304      	movs	r3, #4
 8003b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b5e:	f107 031c 	add.w	r3, r7, #28
 8003b62:	4619      	mov	r1, r3
 8003b64:	4807      	ldr	r0, [pc, #28]	@ (8003b84 <HAL_TIM_IC_MspInit+0x100>)
 8003b66:	f006 fadb 	bl	800a120 <HAL_GPIO_Init>
}
 8003b6a:	bf00      	nop
 8003b6c:	3730      	adds	r7, #48	@ 0x30
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	40000400 	.word	0x40000400
 8003b78:	58024400 	.word	0x58024400
 8003b7c:	58020800 	.word	0x58020800
 8003b80:	40014000 	.word	0x40014000
 8003b84:	58021000 	.word	0x58021000

08003b88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b08a      	sub	sp, #40	@ 0x28
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b90:	f107 0314 	add.w	r3, r7, #20
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	605a      	str	r2, [r3, #4]
 8003b9a:	609a      	str	r2, [r3, #8]
 8003b9c:	60da      	str	r2, [r3, #12]
 8003b9e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a39      	ldr	r2, [pc, #228]	@ (8003c8c <HAL_TIM_MspPostInit+0x104>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d120      	bne.n	8003bec <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003baa:	4b39      	ldr	r3, [pc, #228]	@ (8003c90 <HAL_TIM_MspPostInit+0x108>)
 8003bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003bb0:	4a37      	ldr	r2, [pc, #220]	@ (8003c90 <HAL_TIM_MspPostInit+0x108>)
 8003bb2:	f043 0310 	orr.w	r3, r3, #16
 8003bb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003bba:	4b35      	ldr	r3, [pc, #212]	@ (8003c90 <HAL_TIM_MspPostInit+0x108>)
 8003bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003bc0:	f003 0310 	and.w	r3, r3, #16
 8003bc4:	613b      	str	r3, [r7, #16]
 8003bc6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE8     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = TIM1_CH1N_Pin|TIM1_CH1_Pin;
 8003bc8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bce:	2302      	movs	r3, #2
 8003bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003bde:	f107 0314 	add.w	r3, r7, #20
 8003be2:	4619      	mov	r1, r3
 8003be4:	482b      	ldr	r0, [pc, #172]	@ (8003c94 <HAL_TIM_MspPostInit+0x10c>)
 8003be6:	f006 fa9b 	bl	800a120 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003bea:	e04a      	b.n	8003c82 <HAL_TIM_MspPostInit+0xfa>
  else if(htim->Instance==TIM2)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bf4:	d120      	bne.n	8003c38 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bf6:	4b26      	ldr	r3, [pc, #152]	@ (8003c90 <HAL_TIM_MspPostInit+0x108>)
 8003bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003bfc:	4a24      	ldr	r2, [pc, #144]	@ (8003c90 <HAL_TIM_MspPostInit+0x108>)
 8003bfe:	f043 0301 	orr.w	r3, r3, #1
 8003c02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003c06:	4b22      	ldr	r3, [pc, #136]	@ (8003c90 <HAL_TIM_MspPostInit+0x108>)
 8003c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	60fb      	str	r3, [r7, #12]
 8003c12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003c14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c1a:	2312      	movs	r3, #18
 8003c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c22:	2300      	movs	r3, #0
 8003c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003c26:	2301      	movs	r3, #1
 8003c28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c2a:	f107 0314 	add.w	r3, r7, #20
 8003c2e:	4619      	mov	r1, r3
 8003c30:	4819      	ldr	r0, [pc, #100]	@ (8003c98 <HAL_TIM_MspPostInit+0x110>)
 8003c32:	f006 fa75 	bl	800a120 <HAL_GPIO_Init>
}
 8003c36:	e024      	b.n	8003c82 <HAL_TIM_MspPostInit+0xfa>
  else if(htim->Instance==TIM4)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a17      	ldr	r2, [pc, #92]	@ (8003c9c <HAL_TIM_MspPostInit+0x114>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d11f      	bne.n	8003c82 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c42:	4b13      	ldr	r3, [pc, #76]	@ (8003c90 <HAL_TIM_MspPostInit+0x108>)
 8003c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c48:	4a11      	ldr	r2, [pc, #68]	@ (8003c90 <HAL_TIM_MspPostInit+0x108>)
 8003c4a:	f043 0308 	orr.w	r3, r3, #8
 8003c4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003c52:	4b0f      	ldr	r3, [pc, #60]	@ (8003c90 <HAL_TIM_MspPostInit+0x108>)
 8003c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c58:	f003 0308 	and.w	r3, r3, #8
 8003c5c:	60bb      	str	r3, [r7, #8]
 8003c5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003c60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c66:	2312      	movs	r3, #18
 8003c68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003c72:	2302      	movs	r3, #2
 8003c74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c76:	f107 0314 	add.w	r3, r7, #20
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	4808      	ldr	r0, [pc, #32]	@ (8003ca0 <HAL_TIM_MspPostInit+0x118>)
 8003c7e:	f006 fa4f 	bl	800a120 <HAL_GPIO_Init>
}
 8003c82:	bf00      	nop
 8003c84:	3728      	adds	r7, #40	@ 0x28
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	40010000 	.word	0x40010000
 8003c90:	58024400 	.word	0x58024400
 8003c94:	58021000 	.word	0x58021000
 8003c98:	58020000 	.word	0x58020000
 8003c9c:	40000800 	.word	0x40000800
 8003ca0:	58020c00 	.word	0x58020c00

08003ca4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ca8:	bf00      	nop
 8003caa:	e7fd      	b.n	8003ca8 <NMI_Handler+0x4>

08003cac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cb0:	bf00      	nop
 8003cb2:	e7fd      	b.n	8003cb0 <HardFault_Handler+0x4>

08003cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003cb8:	bf00      	nop
 8003cba:	e7fd      	b.n	8003cb8 <MemManage_Handler+0x4>

08003cbc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003cc0:	bf00      	nop
 8003cc2:	e7fd      	b.n	8003cc0 <BusFault_Handler+0x4>

08003cc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003cc8:	bf00      	nop
 8003cca:	e7fd      	b.n	8003cc8 <UsageFault_Handler+0x4>

08003ccc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003cd0:	bf00      	nop
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003cde:	bf00      	nop
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003cec:	bf00      	nop
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr

08003cf6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003cfa:	f000 f97b 	bl	8003ff4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003cfe:	bf00      	nop
 8003d00:	bd80      	pop	{r7, pc}
	...

08003d04 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003d08:	4802      	ldr	r0, [pc, #8]	@ (8003d14 <DMA1_Stream1_IRQHandler+0x10>)
 8003d0a:	f004 f8f5 	bl	8007ef8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003d0e:	bf00      	nop
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	24000acc 	.word	0x24000acc

08003d18 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003d1c:	4802      	ldr	r0, [pc, #8]	@ (8003d28 <DMA1_Stream2_IRQHandler+0x10>)
 8003d1e:	f004 f8eb 	bl	8007ef8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003d22:	bf00      	nop
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	24000a54 	.word	0x24000a54

08003d2c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003d30:	4803      	ldr	r0, [pc, #12]	@ (8003d40 <ADC_IRQHandler+0x14>)
 8003d32:	f001 f8d9 	bl	8004ee8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8003d36:	4803      	ldr	r0, [pc, #12]	@ (8003d44 <ADC_IRQHandler+0x18>)
 8003d38:	f001 f8d6 	bl	8004ee8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003d3c:	bf00      	nop
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	24000904 	.word	0x24000904
 8003d44:	24000974 	.word	0x24000974

08003d48 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INP_COMP_IRQ_Pin);
 8003d4c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003d50:	f006 fbbf 	bl	800a4d2 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(POWER_OFF_IRQ_Pin);
 8003d54:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003d58:	f006 fbbb 	bl	800a4d2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003d5c:	bf00      	nop
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d68:	4a14      	ldr	r2, [pc, #80]	@ (8003dbc <_sbrk+0x5c>)
 8003d6a:	4b15      	ldr	r3, [pc, #84]	@ (8003dc0 <_sbrk+0x60>)
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d74:	4b13      	ldr	r3, [pc, #76]	@ (8003dc4 <_sbrk+0x64>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d102      	bne.n	8003d82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d7c:	4b11      	ldr	r3, [pc, #68]	@ (8003dc4 <_sbrk+0x64>)
 8003d7e:	4a12      	ldr	r2, [pc, #72]	@ (8003dc8 <_sbrk+0x68>)
 8003d80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d82:	4b10      	ldr	r3, [pc, #64]	@ (8003dc4 <_sbrk+0x64>)
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4413      	add	r3, r2
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d207      	bcs.n	8003da0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d90:	f00c ff06 	bl	8010ba0 <__errno>
 8003d94:	4603      	mov	r3, r0
 8003d96:	220c      	movs	r2, #12
 8003d98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003d9e:	e009      	b.n	8003db4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003da0:	4b08      	ldr	r3, [pc, #32]	@ (8003dc4 <_sbrk+0x64>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003da6:	4b07      	ldr	r3, [pc, #28]	@ (8003dc4 <_sbrk+0x64>)
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4413      	add	r3, r2
 8003dae:	4a05      	ldr	r2, [pc, #20]	@ (8003dc4 <_sbrk+0x64>)
 8003db0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003db2:	68fb      	ldr	r3, [r7, #12]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3718      	adds	r7, #24
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	24050000 	.word	0x24050000
 8003dc0:	00000400 	.word	0x00000400
 8003dc4:	24000ed0 	.word	0x24000ed0
 8003dc8:	24001040 	.word	0x24001040

08003dcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003dd0:	4b32      	ldr	r3, [pc, #200]	@ (8003e9c <SystemInit+0xd0>)
 8003dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dd6:	4a31      	ldr	r2, [pc, #196]	@ (8003e9c <SystemInit+0xd0>)
 8003dd8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003ddc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003de0:	4b2f      	ldr	r3, [pc, #188]	@ (8003ea0 <SystemInit+0xd4>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 030f 	and.w	r3, r3, #15
 8003de8:	2b06      	cmp	r3, #6
 8003dea:	d807      	bhi.n	8003dfc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003dec:	4b2c      	ldr	r3, [pc, #176]	@ (8003ea0 <SystemInit+0xd4>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f023 030f 	bic.w	r3, r3, #15
 8003df4:	4a2a      	ldr	r2, [pc, #168]	@ (8003ea0 <SystemInit+0xd4>)
 8003df6:	f043 0307 	orr.w	r3, r3, #7
 8003dfa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003dfc:	4b29      	ldr	r3, [pc, #164]	@ (8003ea4 <SystemInit+0xd8>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a28      	ldr	r2, [pc, #160]	@ (8003ea4 <SystemInit+0xd8>)
 8003e02:	f043 0301 	orr.w	r3, r3, #1
 8003e06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003e08:	4b26      	ldr	r3, [pc, #152]	@ (8003ea4 <SystemInit+0xd8>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003e0e:	4b25      	ldr	r3, [pc, #148]	@ (8003ea4 <SystemInit+0xd8>)
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	4924      	ldr	r1, [pc, #144]	@ (8003ea4 <SystemInit+0xd8>)
 8003e14:	4b24      	ldr	r3, [pc, #144]	@ (8003ea8 <SystemInit+0xdc>)
 8003e16:	4013      	ands	r3, r2
 8003e18:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003e1a:	4b21      	ldr	r3, [pc, #132]	@ (8003ea0 <SystemInit+0xd4>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0308 	and.w	r3, r3, #8
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d007      	beq.n	8003e36 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003e26:	4b1e      	ldr	r3, [pc, #120]	@ (8003ea0 <SystemInit+0xd4>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f023 030f 	bic.w	r3, r3, #15
 8003e2e:	4a1c      	ldr	r2, [pc, #112]	@ (8003ea0 <SystemInit+0xd4>)
 8003e30:	f043 0307 	orr.w	r3, r3, #7
 8003e34:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003e36:	4b1b      	ldr	r3, [pc, #108]	@ (8003ea4 <SystemInit+0xd8>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003e3c:	4b19      	ldr	r3, [pc, #100]	@ (8003ea4 <SystemInit+0xd8>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003e42:	4b18      	ldr	r3, [pc, #96]	@ (8003ea4 <SystemInit+0xd8>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003e48:	4b16      	ldr	r3, [pc, #88]	@ (8003ea4 <SystemInit+0xd8>)
 8003e4a:	4a18      	ldr	r2, [pc, #96]	@ (8003eac <SystemInit+0xe0>)
 8003e4c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003e4e:	4b15      	ldr	r3, [pc, #84]	@ (8003ea4 <SystemInit+0xd8>)
 8003e50:	4a17      	ldr	r2, [pc, #92]	@ (8003eb0 <SystemInit+0xe4>)
 8003e52:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003e54:	4b13      	ldr	r3, [pc, #76]	@ (8003ea4 <SystemInit+0xd8>)
 8003e56:	4a17      	ldr	r2, [pc, #92]	@ (8003eb4 <SystemInit+0xe8>)
 8003e58:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003e5a:	4b12      	ldr	r3, [pc, #72]	@ (8003ea4 <SystemInit+0xd8>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003e60:	4b10      	ldr	r3, [pc, #64]	@ (8003ea4 <SystemInit+0xd8>)
 8003e62:	4a14      	ldr	r2, [pc, #80]	@ (8003eb4 <SystemInit+0xe8>)
 8003e64:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003e66:	4b0f      	ldr	r3, [pc, #60]	@ (8003ea4 <SystemInit+0xd8>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003e6c:	4b0d      	ldr	r3, [pc, #52]	@ (8003ea4 <SystemInit+0xd8>)
 8003e6e:	4a11      	ldr	r2, [pc, #68]	@ (8003eb4 <SystemInit+0xe8>)
 8003e70:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003e72:	4b0c      	ldr	r3, [pc, #48]	@ (8003ea4 <SystemInit+0xd8>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003e78:	4b0a      	ldr	r3, [pc, #40]	@ (8003ea4 <SystemInit+0xd8>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a09      	ldr	r2, [pc, #36]	@ (8003ea4 <SystemInit+0xd8>)
 8003e7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e82:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003e84:	4b07      	ldr	r3, [pc, #28]	@ (8003ea4 <SystemInit+0xd8>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb8 <SystemInit+0xec>)
 8003e8c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003e90:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003e92:	bf00      	nop
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr
 8003e9c:	e000ed00 	.word	0xe000ed00
 8003ea0:	52002000 	.word	0x52002000
 8003ea4:	58024400 	.word	0x58024400
 8003ea8:	eaf6ed7f 	.word	0xeaf6ed7f
 8003eac:	02020200 	.word	0x02020200
 8003eb0:	01ff0000 	.word	0x01ff0000
 8003eb4:	01010280 	.word	0x01010280
 8003eb8:	52004000 	.word	0x52004000

08003ebc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003ebc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003ef4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003ec0:	f7ff ff84 	bl	8003dcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ec4:	480c      	ldr	r0, [pc, #48]	@ (8003ef8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003ec6:	490d      	ldr	r1, [pc, #52]	@ (8003efc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003ec8:	4a0d      	ldr	r2, [pc, #52]	@ (8003f00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003eca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ecc:	e002      	b.n	8003ed4 <LoopCopyDataInit>

08003ece <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ece:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ed0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ed2:	3304      	adds	r3, #4

08003ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ed4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ed6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ed8:	d3f9      	bcc.n	8003ece <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003eda:	4a0a      	ldr	r2, [pc, #40]	@ (8003f04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003edc:	4c0a      	ldr	r4, [pc, #40]	@ (8003f08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003ede:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ee0:	e001      	b.n	8003ee6 <LoopFillZerobss>

08003ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ee2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ee4:	3204      	adds	r2, #4

08003ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ee6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ee8:	d3fb      	bcc.n	8003ee2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003eea:	f00c fe5f 	bl	8010bac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003eee:	f7fe fa37 	bl	8002360 <main>
  bx  lr
 8003ef2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003ef4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003ef8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003efc:	24000098 	.word	0x24000098
  ldr r2, =_sidata
 8003f00:	08011f24 	.word	0x08011f24
  ldr r2, =_sbss
 8003f04:	24000158 	.word	0x24000158
  ldr r4, =_ebss
 8003f08:	2400103c 	.word	0x2400103c

08003f0c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f0c:	e7fe      	b.n	8003f0c <ADC3_IRQHandler>
	...

08003f10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f16:	2003      	movs	r0, #3
 8003f18:	f003 f9ec 	bl	80072f4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003f1c:	f007 f8be 	bl	800b09c <HAL_RCC_GetSysClockFreq>
 8003f20:	4602      	mov	r2, r0
 8003f22:	4b15      	ldr	r3, [pc, #84]	@ (8003f78 <HAL_Init+0x68>)
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	0a1b      	lsrs	r3, r3, #8
 8003f28:	f003 030f 	and.w	r3, r3, #15
 8003f2c:	4913      	ldr	r1, [pc, #76]	@ (8003f7c <HAL_Init+0x6c>)
 8003f2e:	5ccb      	ldrb	r3, [r1, r3]
 8003f30:	f003 031f 	and.w	r3, r3, #31
 8003f34:	fa22 f303 	lsr.w	r3, r2, r3
 8003f38:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8003f78 <HAL_Init+0x68>)
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	f003 030f 	and.w	r3, r3, #15
 8003f42:	4a0e      	ldr	r2, [pc, #56]	@ (8003f7c <HAL_Init+0x6c>)
 8003f44:	5cd3      	ldrb	r3, [r2, r3]
 8003f46:	f003 031f 	and.w	r3, r3, #31
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f50:	4a0b      	ldr	r2, [pc, #44]	@ (8003f80 <HAL_Init+0x70>)
 8003f52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f54:	4a0b      	ldr	r2, [pc, #44]	@ (8003f84 <HAL_Init+0x74>)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f5a:	2000      	movs	r0, #0
 8003f5c:	f000 f814 	bl	8003f88 <HAL_InitTick>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e002      	b.n	8003f70 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003f6a:	f7ff f9c5 	bl	80032f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3708      	adds	r7, #8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	58024400 	.word	0x58024400
 8003f7c:	08011d78 	.word	0x08011d78
 8003f80:	2400003c 	.word	0x2400003c
 8003f84:	24000038 	.word	0x24000038

08003f88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003f90:	4b15      	ldr	r3, [pc, #84]	@ (8003fe8 <HAL_InitTick+0x60>)
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e021      	b.n	8003fe0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003f9c:	4b13      	ldr	r3, [pc, #76]	@ (8003fec <HAL_InitTick+0x64>)
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	4b11      	ldr	r3, [pc, #68]	@ (8003fe8 <HAL_InitTick+0x60>)
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f003 f9d1 	bl	800735a <HAL_SYSTICK_Config>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e00e      	b.n	8003fe0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b0f      	cmp	r3, #15
 8003fc6:	d80a      	bhi.n	8003fde <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003fc8:	2200      	movs	r2, #0
 8003fca:	6879      	ldr	r1, [r7, #4]
 8003fcc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003fd0:	f003 f99b 	bl	800730a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003fd4:	4a06      	ldr	r2, [pc, #24]	@ (8003ff0 <HAL_InitTick+0x68>)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	e000      	b.n	8003fe0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3708      	adds	r7, #8
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	24000044 	.word	0x24000044
 8003fec:	24000038 	.word	0x24000038
 8003ff0:	24000040 	.word	0x24000040

08003ff4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003ff8:	4b06      	ldr	r3, [pc, #24]	@ (8004014 <HAL_IncTick+0x20>)
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	4b06      	ldr	r3, [pc, #24]	@ (8004018 <HAL_IncTick+0x24>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4413      	add	r3, r2
 8004004:	4a04      	ldr	r2, [pc, #16]	@ (8004018 <HAL_IncTick+0x24>)
 8004006:	6013      	str	r3, [r2, #0]
}
 8004008:	bf00      	nop
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	24000044 	.word	0x24000044
 8004018:	24000ed4 	.word	0x24000ed4

0800401c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
  return uwTick;
 8004020:	4b03      	ldr	r3, [pc, #12]	@ (8004030 <HAL_GetTick+0x14>)
 8004022:	681b      	ldr	r3, [r3, #0]
}
 8004024:	4618      	mov	r0, r3
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	24000ed4 	.word	0x24000ed4

08004034 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800403c:	f7ff ffee 	bl	800401c <HAL_GetTick>
 8004040:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800404c:	d005      	beq.n	800405a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800404e:	4b0a      	ldr	r3, [pc, #40]	@ (8004078 <HAL_Delay+0x44>)
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	461a      	mov	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4413      	add	r3, r2
 8004058:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800405a:	bf00      	nop
 800405c:	f7ff ffde 	bl	800401c <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	429a      	cmp	r2, r3
 800406a:	d8f7      	bhi.n	800405c <HAL_Delay+0x28>
  {
  }
}
 800406c:	bf00      	nop
 800406e:	bf00      	nop
 8004070:	3710      	adds	r7, #16
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	24000044 	.word	0x24000044

0800407c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8004084:	4b06      	ldr	r3, [pc, #24]	@ (80040a0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 800408c:	4904      	ldr	r1, [pc, #16]	@ (80040a0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4313      	orrs	r3, r2
 8004092:	604b      	str	r3, [r1, #4]
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	58000400 	.word	0x58000400

080040a4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80040ae:	4b07      	ldr	r3, [pc, #28]	@ (80040cc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	43db      	mvns	r3, r3
 80040b6:	401a      	ands	r2, r3
 80040b8:	4904      	ldr	r1, [pc, #16]	@ (80040cc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	4313      	orrs	r3, r2
 80040be:	604b      	str	r3, [r1, #4]
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr
 80040cc:	58000400 	.word	0x58000400

080040d0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	431a      	orrs	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	609a      	str	r2, [r3, #8]
}
 80040ea:	bf00      	nop
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b083      	sub	sp, #12
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
 80040fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	431a      	orrs	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	609a      	str	r2, [r3, #8]
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800412c:	4618      	mov	r0, r3
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
 8004144:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	3360      	adds	r3, #96	@ 0x60
 800414a:	461a      	mov	r2, r3
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4413      	add	r3, r2
 8004152:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	4a10      	ldr	r2, [pc, #64]	@ (8004198 <LL_ADC_SetOffset+0x60>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d10b      	bne.n	8004174 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	4313      	orrs	r3, r2
 800416a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004172:	e00b      	b.n	800418c <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	430b      	orrs	r3, r1
 8004186:	431a      	orrs	r2, r3
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	601a      	str	r2, [r3, #0]
}
 800418c:	bf00      	nop
 800418e:	371c      	adds	r7, #28
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr
 8004198:	58026000 	.word	0x58026000

0800419c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	3360      	adds	r3, #96	@ 0x60
 80041aa:	461a      	mov	r2, r3
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4413      	add	r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3714      	adds	r7, #20
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	f003 031f 	and.w	r3, r3, #31
 80041e2:	6879      	ldr	r1, [r7, #4]
 80041e4:	fa01 f303 	lsl.w	r3, r1, r3
 80041e8:	431a      	orrs	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	611a      	str	r2, [r3, #16]
}
 80041ee:	bf00      	nop
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
	...

080041fc <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b087      	sub	sp, #28
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	4a0c      	ldr	r2, [pc, #48]	@ (800423c <LL_ADC_SetOffsetSignedSaturation+0x40>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d00e      	beq.n	800422e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	3360      	adds	r3, #96	@ 0x60
 8004214:	461a      	mov	r2, r3
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4413      	add	r3, r2
 800421c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	431a      	orrs	r2, r3
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	601a      	str	r2, [r3, #0]
  }
}
 800422e:	bf00      	nop
 8004230:	371c      	adds	r7, #28
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	58026000 	.word	0x58026000

08004240 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004240:	b480      	push	{r7}
 8004242:	b087      	sub	sp, #28
 8004244:	af00      	add	r7, sp, #0
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	4a0c      	ldr	r2, [pc, #48]	@ (8004280 <LL_ADC_SetOffsetSaturation+0x40>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d10e      	bne.n	8004272 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	3360      	adds	r3, #96	@ 0x60
 8004258:	461a      	mov	r2, r3
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	4413      	add	r3, r2
 8004260:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	431a      	orrs	r2, r3
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8004272:	bf00      	nop
 8004274:	371c      	adds	r7, #28
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	58026000 	.word	0x58026000

08004284 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004284:	b480      	push	{r7}
 8004286:	b087      	sub	sp, #28
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	4a0c      	ldr	r2, [pc, #48]	@ (80042c4 <LL_ADC_SetOffsetSign+0x40>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d10e      	bne.n	80042b6 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	3360      	adds	r3, #96	@ 0x60
 800429c:	461a      	mov	r2, r3
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	4413      	add	r3, r2
 80042a4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	431a      	orrs	r2, r3
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80042b6:	bf00      	nop
 80042b8:	371c      	adds	r7, #28
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	58026000 	.word	0x58026000

080042c8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	3360      	adds	r3, #96	@ 0x60
 80042d8:	461a      	mov	r2, r3
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	4413      	add	r3, r2
 80042e0:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	4a0c      	ldr	r2, [pc, #48]	@ (8004318 <LL_ADC_SetOffsetState+0x50>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d108      	bne.n	80042fc <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	431a      	orrs	r2, r3
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80042fa:	e007      	b.n	800430c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	431a      	orrs	r2, r3
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	601a      	str	r2, [r3, #0]
}
 800430c:	bf00      	nop
 800430e:	371c      	adds	r7, #28
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	58026000 	.word	0x58026000

0800431c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004330:	2301      	movs	r3, #1
 8004332:	e000      	b.n	8004336 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr

08004342 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004342:	b480      	push	{r7}
 8004344:	b087      	sub	sp, #28
 8004346:	af00      	add	r7, sp, #0
 8004348:	60f8      	str	r0, [r7, #12]
 800434a:	60b9      	str	r1, [r7, #8]
 800434c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	3330      	adds	r3, #48	@ 0x30
 8004352:	461a      	mov	r2, r3
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	0a1b      	lsrs	r3, r3, #8
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	f003 030c 	and.w	r3, r3, #12
 800435e:	4413      	add	r3, r2
 8004360:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	f003 031f 	and.w	r3, r3, #31
 800436c:	211f      	movs	r1, #31
 800436e:	fa01 f303 	lsl.w	r3, r1, r3
 8004372:	43db      	mvns	r3, r3
 8004374:	401a      	ands	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	0e9b      	lsrs	r3, r3, #26
 800437a:	f003 011f 	and.w	r1, r3, #31
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	f003 031f 	and.w	r3, r3, #31
 8004384:	fa01 f303 	lsl.w	r3, r1, r3
 8004388:	431a      	orrs	r2, r3
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800438e:	bf00      	nop
 8004390:	371c      	adds	r7, #28
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr

0800439a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800439a:	b480      	push	{r7}
 800439c:	b083      	sub	sp, #12
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
 80043a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	f023 0203 	bic.w	r2, r3, #3
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	431a      	orrs	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	60da      	str	r2, [r3, #12]
}
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	f043 0201 	orr.w	r2, r3, #1
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	60da      	str	r2, [r3, #12]
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a08      	ldr	r2, [pc, #32]	@ (8004410 <LL_ADC_REG_SetDMATransferMode+0x30>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d107      	bne.n	8004402 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	f023 0203 	bic.w	r2, r3, #3
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	431a      	orrs	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	60da      	str	r2, [r3, #12]
  }
}
 8004402:	bf00      	nop
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	58026000 	.word	0x58026000

08004414 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004420:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8004428:	2301      	movs	r3, #1
 800442a:	e000      	b.n	800442e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr

0800443a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800443a:	b480      	push	{r7}
 800443c:	b087      	sub	sp, #28
 800443e:	af00      	add	r7, sp, #0
 8004440:	60f8      	str	r0, [r7, #12]
 8004442:	60b9      	str	r1, [r7, #8]
 8004444:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	3314      	adds	r3, #20
 800444a:	461a      	mov	r2, r3
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	0e5b      	lsrs	r3, r3, #25
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	f003 0304 	and.w	r3, r3, #4
 8004456:	4413      	add	r3, r2
 8004458:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	0d1b      	lsrs	r3, r3, #20
 8004462:	f003 031f 	and.w	r3, r3, #31
 8004466:	2107      	movs	r1, #7
 8004468:	fa01 f303 	lsl.w	r3, r1, r3
 800446c:	43db      	mvns	r3, r3
 800446e:	401a      	ands	r2, r3
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	0d1b      	lsrs	r3, r3, #20
 8004474:	f003 031f 	and.w	r3, r3, #31
 8004478:	6879      	ldr	r1, [r7, #4]
 800447a:	fa01 f303 	lsl.w	r3, r1, r3
 800447e:	431a      	orrs	r2, r3
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004484:	bf00      	nop
 8004486:	371c      	adds	r7, #28
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	4a1a      	ldr	r2, [pc, #104]	@ (8004508 <LL_ADC_SetChannelSingleDiff+0x78>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d115      	bne.n	80044d0 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044b0:	43db      	mvns	r3, r3
 80044b2:	401a      	ands	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f003 0318 	and.w	r3, r3, #24
 80044ba:	4914      	ldr	r1, [pc, #80]	@ (800450c <LL_ADC_SetChannelSingleDiff+0x7c>)
 80044bc:	40d9      	lsrs	r1, r3
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	400b      	ands	r3, r1
 80044c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044c6:	431a      	orrs	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80044ce:	e014      	b.n	80044fa <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044dc:	43db      	mvns	r3, r3
 80044de:	401a      	ands	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f003 0318 	and.w	r3, r3, #24
 80044e6:	4909      	ldr	r1, [pc, #36]	@ (800450c <LL_ADC_SetChannelSingleDiff+0x7c>)
 80044e8:	40d9      	lsrs	r1, r3
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	400b      	ands	r3, r1
 80044ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044f2:	431a      	orrs	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 80044fa:	bf00      	nop
 80044fc:	3714      	adds	r7, #20
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	58026000 	.word	0x58026000
 800450c:	000fffff 	.word	0x000fffff

08004510 <LL_ADC_SetAnalogWDMonitChannels>:
  *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
  *         (2) On STM32H7, parameter available only on ADC instance: ADC2.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8004510:	b480      	push	{r7}
 8004512:	b087      	sub	sp, #28
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	330c      	adds	r3, #12
 8004520:	4618      	mov	r0, r3
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	0d1b      	lsrs	r3, r3, #20
 8004526:	f003 0103 	and.w	r1, r3, #3
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	f003 0201 	and.w	r2, r3, #1
 8004530:	4613      	mov	r3, r2
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	4413      	add	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	440b      	add	r3, r1
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4403      	add	r3, r0
 800453e:	617b      	str	r3, [r7, #20]
                                                      + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	68b9      	ldr	r1, [r7, #8]
 8004546:	4b08      	ldr	r3, [pc, #32]	@ (8004568 <LL_ADC_SetAnalogWDMonitChannels+0x58>)
 8004548:	400b      	ands	r3, r1
 800454a:	43db      	mvns	r3, r3
 800454c:	401a      	ands	r2, r3
 800454e:	6879      	ldr	r1, [r7, #4]
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	400b      	ands	r3, r1
 8004554:	431a      	orrs	r2, r3
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 800455a:	bf00      	nop
 800455c:	371c      	adds	r7, #28
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	7dcfffff 	.word	0x7dcfffff

0800456c <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdHighValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue, uint32_t AWDThresholdLowValue)
{
 800456c:	b480      	push	{r7}
 800456e:	b089      	sub	sp, #36	@ 0x24
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
 8004578:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  if (ADCx == ADC3)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	4a29      	ldr	r2, [pc, #164]	@ (8004624 <LL_ADC_ConfigAnalogWDThresholds+0xb8>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d115      	bne.n	80045ae <LL_ADC_ConfigAnalogWDThresholds+0x42>
  {
    uint32_t __IO *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	3320      	adds	r3, #32
 8004586:	461a      	mov	r2, r3
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	0d1b      	lsrs	r3, r3, #20
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	f003 030c 	and.w	r3, r3, #12
 8004592:	4413      	add	r3, r2
 8004594:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 22f0 	and.w	r2, r3, #4026593280	@ 0xf000f000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	0419      	lsls	r1, r3, #16
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	430b      	orrs	r3, r1
 80045a6:	431a      	orrs	r2, r3
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	601a      	str	r2, [r3, #0]
                                                         + (LL_ADC_AWD_THRESHOLD_HIGH));

    MODIFY_REG(*preg, ADC_LTR_LT, AWDThresholdLowValue);
    MODIFY_REG(*preg2, ADC_HTR_HT, AWDThresholdHighValue);
  }
}
 80045ac:	e034      	b.n	8004618 <LL_ADC_ConfigAnalogWDThresholds+0xac>
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS) * 2UL)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	3320      	adds	r3, #32
 80045b2:	4618      	mov	r0, r3
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	0d1b      	lsrs	r3, r3, #20
 80045b8:	f003 0103 	and.w	r1, r3, #3
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	f003 0201 	and.w	r2, r3, #1
 80045c2:	4613      	mov	r3, r2
 80045c4:	011b      	lsls	r3, r3, #4
 80045c6:	4413      	add	r3, r2
 80045c8:	440b      	add	r3, r1
 80045ca:	005b      	lsls	r3, r3, #1
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	4403      	add	r3, r0
 80045d0:	61fb      	str	r3, [r7, #28]
    __IO uint32_t *preg2 = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS) * 2UL)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	3320      	adds	r3, #32
 80045d6:	4618      	mov	r0, r3
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	0d1b      	lsrs	r3, r3, #20
 80045dc:	f003 0103 	and.w	r1, r3, #3
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f003 0201 	and.w	r2, r3, #1
 80045e6:	4613      	mov	r3, r2
 80045e8:	011b      	lsls	r3, r3, #4
 80045ea:	4413      	add	r3, r2
 80045ec:	440b      	add	r3, r1
 80045ee:	005b      	lsls	r3, r3, #1
 80045f0:	3301      	adds	r3, #1
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4403      	add	r3, r0
 80045f6:	61bb      	str	r3, [r7, #24]
    MODIFY_REG(*preg, ADC_LTR_LT, AWDThresholdLowValue);
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 427c 	and.w	r2, r3, #4227858432	@ 0xfc000000
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	431a      	orrs	r2, r3
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	601a      	str	r2, [r3, #0]
    MODIFY_REG(*preg2, ADC_HTR_HT, AWDThresholdHighValue);
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 427c 	and.w	r2, r3, #4227858432	@ 0xfc000000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	431a      	orrs	r2, r3
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	601a      	str	r2, [r3, #0]
}
 8004618:	bf00      	nop
 800461a:	3724      	adds	r7, #36	@ 0x24
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr
 8004624:	58026000 	.word	0x58026000

08004628 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f003 031f 	and.w	r3, r3, #31
}
 8004638:	4618      	mov	r0, r3
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8004654:	4618      	mov	r0, r3
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689a      	ldr	r2, [r3, #8]
 800466c:	4b04      	ldr	r3, [pc, #16]	@ (8004680 <LL_ADC_DisableDeepPowerDown+0x20>)
 800466e:	4013      	ands	r3, r2
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	6093      	str	r3, [r2, #8]
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	5fffffc0 	.word	0x5fffffc0

08004684 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004694:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004698:	d101      	bne.n	800469e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800469a:	2301      	movs	r3, #1
 800469c:	e000      	b.n	80046a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689a      	ldr	r2, [r3, #8]
 80046b8:	4b05      	ldr	r3, [pc, #20]	@ (80046d0 <LL_ADC_EnableInternalRegulator+0x24>)
 80046ba:	4013      	ands	r3, r2
 80046bc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr
 80046d0:	6fffffc0 	.word	0x6fffffc0

080046d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80046e8:	d101      	bne.n	80046ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80046ea:	2301      	movs	r3, #1
 80046ec:	e000      	b.n	80046f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689a      	ldr	r2, [r3, #8]
 8004708:	4b05      	ldr	r3, [pc, #20]	@ (8004720 <LL_ADC_Enable+0x24>)
 800470a:	4013      	ands	r3, r2
 800470c:	f043 0201 	orr.w	r2, r3, #1
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr
 8004720:	7fffffc0 	.word	0x7fffffc0

08004724 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689a      	ldr	r2, [r3, #8]
 8004730:	4b05      	ldr	r3, [pc, #20]	@ (8004748 <LL_ADC_Disable+0x24>)
 8004732:	4013      	ands	r3, r2
 8004734:	f043 0202 	orr.w	r2, r3, #2
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800473c:	bf00      	nop
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr
 8004748:	7fffffc0 	.word	0x7fffffc0

0800474c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b01      	cmp	r3, #1
 800475e:	d101      	bne.n	8004764 <LL_ADC_IsEnabled+0x18>
 8004760:	2301      	movs	r3, #1
 8004762:	e000      	b.n	8004766 <LL_ADC_IsEnabled+0x1a>
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	370c      	adds	r7, #12
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr

08004772 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004772:	b480      	push	{r7}
 8004774:	b083      	sub	sp, #12
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b02      	cmp	r3, #2
 8004784:	d101      	bne.n	800478a <LL_ADC_IsDisableOngoing+0x18>
 8004786:	2301      	movs	r3, #1
 8004788:	e000      	b.n	800478c <LL_ADC_IsDisableOngoing+0x1a>
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689a      	ldr	r2, [r3, #8]
 80047a4:	4b05      	ldr	r3, [pc, #20]	@ (80047bc <LL_ADC_REG_StartConversion+0x24>)
 80047a6:	4013      	ands	r3, r2
 80047a8:	f043 0204 	orr.w	r2, r3, #4
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr
 80047bc:	7fffffc0 	.word	0x7fffffc0

080047c0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f003 0304 	and.w	r3, r3, #4
 80047d0:	2b04      	cmp	r3, #4
 80047d2:	d101      	bne.n	80047d8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80047d4:	2301      	movs	r3, #1
 80047d6:	e000      	b.n	80047da <LL_ADC_REG_IsConversionOngoing+0x1a>
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	370c      	adds	r7, #12
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b083      	sub	sp, #12
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f003 0308 	and.w	r3, r3, #8
 80047f6:	2b08      	cmp	r3, #8
 80047f8:	d101      	bne.n	80047fe <LL_ADC_INJ_IsConversionOngoing+0x18>
 80047fa:	2301      	movs	r3, #1
 80047fc:	e000      	b.n	8004800 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2280      	movs	r2, #128	@ 0x80
 8004818:	601a      	str	r2, [r3, #0]
}
 800481a:	bf00      	nop
 800481c:	370c      	adds	r7, #12
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr

08004826 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 8004826:	b480      	push	{r7}
 8004828:	b083      	sub	sp, #12
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004834:	601a      	str	r2, [r3, #0]
}
 8004836:	bf00      	nop
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 8004842:	b480      	push	{r7}
 8004844:	b083      	sub	sp, #12
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004850:	601a      	str	r2, [r3, #0]
}
 8004852:	bf00      	nop
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr

0800485e <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 800485e:	b480      	push	{r7}
 8004860:	b083      	sub	sp, #12
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	605a      	str	r2, [r3, #4]
}
 8004872:	bf00      	nop
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 800487e:	b480      	push	{r7}
 8004880:	b083      	sub	sp, #12
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	605a      	str	r2, [r3, #4]
}
 8004892:	bf00      	nop
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 800489e:	b480      	push	{r7}
 80048a0:	b083      	sub	sp, #12
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	605a      	str	r2, [r3, #4]
}
 80048b2:	bf00      	nop
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 80048be:	b480      	push	{r7}
 80048c0:	b083      	sub	sp, #12
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	605a      	str	r2, [r3, #4]
}
 80048d2:	bf00      	nop
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 80048de:	b480      	push	{r7}
 80048e0:	b083      	sub	sp, #12
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	605a      	str	r2, [r3, #4]
}
 80048f2:	bf00      	nop
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 80048fe:	b480      	push	{r7}
 8004900:	b083      	sub	sp, #12
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	605a      	str	r2, [r3, #4]
}
 8004912:	bf00      	nop
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
	...

08004920 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004920:	b590      	push	{r4, r7, lr}
 8004922:	b089      	sub	sp, #36	@ 0x24
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004928:	2300      	movs	r3, #0
 800492a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800492c:	2300      	movs	r3, #0
 800492e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e1ee      	b.n	8004d18 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004944:	2b00      	cmp	r3, #0
 8004946:	d109      	bne.n	800495c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f7fe fcef 	bl	800332c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4618      	mov	r0, r3
 8004962:	f7ff fe8f 	bl	8004684 <LL_ADC_IsDeepPowerDownEnabled>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d004      	beq.n	8004976 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4618      	mov	r0, r3
 8004972:	f7ff fe75 	bl	8004660 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4618      	mov	r0, r3
 800497c:	f7ff feaa 	bl	80046d4 <LL_ADC_IsInternalRegulatorEnabled>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d114      	bne.n	80049b0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4618      	mov	r0, r3
 800498c:	f7ff fe8e 	bl	80046ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004990:	4b8e      	ldr	r3, [pc, #568]	@ (8004bcc <HAL_ADC_Init+0x2ac>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	099b      	lsrs	r3, r3, #6
 8004996:	4a8e      	ldr	r2, [pc, #568]	@ (8004bd0 <HAL_ADC_Init+0x2b0>)
 8004998:	fba2 2303 	umull	r2, r3, r2, r3
 800499c:	099b      	lsrs	r3, r3, #6
 800499e:	3301      	adds	r3, #1
 80049a0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80049a2:	e002      	b.n	80049aa <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	3b01      	subs	r3, #1
 80049a8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1f9      	bne.n	80049a4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7ff fe8d 	bl	80046d4 <LL_ADC_IsInternalRegulatorEnabled>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10d      	bne.n	80049dc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049c4:	f043 0210 	orr.w	r2, r3, #16
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049d0:	f043 0201 	orr.w	r2, r3, #1
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff feed 	bl	80047c0 <LL_ADC_REG_IsConversionOngoing>
 80049e6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049ec:	f003 0310 	and.w	r3, r3, #16
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f040 8188 	bne.w	8004d06 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f040 8184 	bne.w	8004d06 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a02:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004a06:	f043 0202 	orr.w	r2, r3, #2
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7ff fe9a 	bl	800474c <LL_ADC_IsEnabled>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d136      	bne.n	8004a8c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a6c      	ldr	r2, [pc, #432]	@ (8004bd4 <HAL_ADC_Init+0x2b4>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d004      	beq.n	8004a32 <HAL_ADC_Init+0x112>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a6a      	ldr	r2, [pc, #424]	@ (8004bd8 <HAL_ADC_Init+0x2b8>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d10e      	bne.n	8004a50 <HAL_ADC_Init+0x130>
 8004a32:	4868      	ldr	r0, [pc, #416]	@ (8004bd4 <HAL_ADC_Init+0x2b4>)
 8004a34:	f7ff fe8a 	bl	800474c <LL_ADC_IsEnabled>
 8004a38:	4604      	mov	r4, r0
 8004a3a:	4867      	ldr	r0, [pc, #412]	@ (8004bd8 <HAL_ADC_Init+0x2b8>)
 8004a3c:	f7ff fe86 	bl	800474c <LL_ADC_IsEnabled>
 8004a40:	4603      	mov	r3, r0
 8004a42:	4323      	orrs	r3, r4
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	bf0c      	ite	eq
 8004a48:	2301      	moveq	r3, #1
 8004a4a:	2300      	movne	r3, #0
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	e008      	b.n	8004a62 <HAL_ADC_Init+0x142>
 8004a50:	4862      	ldr	r0, [pc, #392]	@ (8004bdc <HAL_ADC_Init+0x2bc>)
 8004a52:	f7ff fe7b 	bl	800474c <LL_ADC_IsEnabled>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	bf0c      	ite	eq
 8004a5c:	2301      	moveq	r3, #1
 8004a5e:	2300      	movne	r3, #0
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d012      	beq.n	8004a8c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a5a      	ldr	r2, [pc, #360]	@ (8004bd4 <HAL_ADC_Init+0x2b4>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d004      	beq.n	8004a7a <HAL_ADC_Init+0x15a>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a58      	ldr	r2, [pc, #352]	@ (8004bd8 <HAL_ADC_Init+0x2b8>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d101      	bne.n	8004a7e <HAL_ADC_Init+0x15e>
 8004a7a:	4a59      	ldr	r2, [pc, #356]	@ (8004be0 <HAL_ADC_Init+0x2c0>)
 8004a7c:	e000      	b.n	8004a80 <HAL_ADC_Init+0x160>
 8004a7e:	4a59      	ldr	r2, [pc, #356]	@ (8004be4 <HAL_ADC_Init+0x2c4>)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	4619      	mov	r1, r3
 8004a86:	4610      	mov	r0, r2
 8004a88:	f7ff fb22 	bl	80040d0 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a52      	ldr	r2, [pc, #328]	@ (8004bdc <HAL_ADC_Init+0x2bc>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d129      	bne.n	8004aea <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	7e5b      	ldrb	r3, [r3, #25]
 8004a9a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004aa0:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8004aa6:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	2b08      	cmp	r3, #8
 8004aae:	d013      	beq.n	8004ad8 <HAL_ADC_Init+0x1b8>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	2b0c      	cmp	r3, #12
 8004ab6:	d00d      	beq.n	8004ad4 <HAL_ADC_Init+0x1b4>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	2b1c      	cmp	r3, #28
 8004abe:	d007      	beq.n	8004ad0 <HAL_ADC_Init+0x1b0>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	2b18      	cmp	r3, #24
 8004ac6:	d101      	bne.n	8004acc <HAL_ADC_Init+0x1ac>
 8004ac8:	2318      	movs	r3, #24
 8004aca:	e006      	b.n	8004ada <HAL_ADC_Init+0x1ba>
 8004acc:	2300      	movs	r3, #0
 8004ace:	e004      	b.n	8004ada <HAL_ADC_Init+0x1ba>
 8004ad0:	2310      	movs	r3, #16
 8004ad2:	e002      	b.n	8004ada <HAL_ADC_Init+0x1ba>
 8004ad4:	2308      	movs	r3, #8
 8004ad6:	e000      	b.n	8004ada <HAL_ADC_Init+0x1ba>
 8004ad8:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8004ada:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ae2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	61bb      	str	r3, [r7, #24]
 8004ae8:	e00e      	b.n	8004b08 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	7e5b      	ldrb	r3, [r3, #25]
 8004aee:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004af4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004afa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b02:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004b04:	4313      	orrs	r3, r2
 8004b06:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d106      	bne.n	8004b20 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b16:	3b01      	subs	r3, #1
 8004b18:	045b      	lsls	r3, r3, #17
 8004b1a:	69ba      	ldr	r2, [r7, #24]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d009      	beq.n	8004b3c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b2c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b34:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004b36:	69ba      	ldr	r2, [r7, #24]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a26      	ldr	r2, [pc, #152]	@ (8004bdc <HAL_ADC_Init+0x2bc>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d115      	bne.n	8004b72 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68da      	ldr	r2, [r3, #12]
 8004b4c:	4b26      	ldr	r3, [pc, #152]	@ (8004be8 <HAL_ADC_Init+0x2c8>)
 8004b4e:	4013      	ands	r3, r2
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	6812      	ldr	r2, [r2, #0]
 8004b54:	69b9      	ldr	r1, [r7, #24]
 8004b56:	430b      	orrs	r3, r1
 8004b58:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	611a      	str	r2, [r3, #16]
 8004b70:	e009      	b.n	8004b86 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68da      	ldr	r2, [r3, #12]
 8004b78:	4b1c      	ldr	r3, [pc, #112]	@ (8004bec <HAL_ADC_Init+0x2cc>)
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	6812      	ldr	r2, [r2, #0]
 8004b80:	69b9      	ldr	r1, [r7, #24]
 8004b82:	430b      	orrs	r3, r1
 8004b84:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7ff fe18 	bl	80047c0 <LL_ADC_REG_IsConversionOngoing>
 8004b90:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7ff fe25 	bl	80047e6 <LL_ADC_INJ_IsConversionOngoing>
 8004b9c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f040 808e 	bne.w	8004cc2 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f040 808a 	bne.w	8004cc2 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8004bdc <HAL_ADC_Init+0x2bc>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d11b      	bne.n	8004bf0 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	7e1b      	ldrb	r3, [r3, #24]
 8004bbc:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004bc4:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	61bb      	str	r3, [r7, #24]
 8004bca:	e018      	b.n	8004bfe <HAL_ADC_Init+0x2de>
 8004bcc:	24000038 	.word	0x24000038
 8004bd0:	053e2d63 	.word	0x053e2d63
 8004bd4:	40022000 	.word	0x40022000
 8004bd8:	40022100 	.word	0x40022100
 8004bdc:	58026000 	.word	0x58026000
 8004be0:	40022300 	.word	0x40022300
 8004be4:	58026300 	.word	0x58026300
 8004be8:	fff04007 	.word	0xfff04007
 8004bec:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	7e1b      	ldrb	r3, [r3, #24]
 8004bf4:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68da      	ldr	r2, [r3, #12]
 8004c04:	4b46      	ldr	r3, [pc, #280]	@ (8004d20 <HAL_ADC_Init+0x400>)
 8004c06:	4013      	ands	r3, r2
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	6812      	ldr	r2, [r2, #0]
 8004c0c:	69b9      	ldr	r1, [r7, #24]
 8004c0e:	430b      	orrs	r3, r1
 8004c10:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d137      	bne.n	8004c8c <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c20:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a3f      	ldr	r2, [pc, #252]	@ (8004d24 <HAL_ADC_Init+0x404>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d116      	bne.n	8004c5a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	691a      	ldr	r2, [r3, #16]
 8004c32:	4b3d      	ldr	r3, [pc, #244]	@ (8004d28 <HAL_ADC_Init+0x408>)
 8004c34:	4013      	ands	r3, r2
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004c3e:	4311      	orrs	r1, r2
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004c44:	4311      	orrs	r1, r2
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	431a      	orrs	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f042 0201 	orr.w	r2, r2, #1
 8004c56:	611a      	str	r2, [r3, #16]
 8004c58:	e020      	b.n	8004c9c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	691a      	ldr	r2, [r3, #16]
 8004c60:	4b32      	ldr	r3, [pc, #200]	@ (8004d2c <HAL_ADC_Init+0x40c>)
 8004c62:	4013      	ands	r3, r2
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004c68:	3a01      	subs	r2, #1
 8004c6a:	0411      	lsls	r1, r2, #16
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004c70:	4311      	orrs	r1, r2
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004c76:	4311      	orrs	r1, r2
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f042 0201 	orr.w	r2, r2, #1
 8004c88:	611a      	str	r2, [r3, #16]
 8004c8a:	e007      	b.n	8004c9c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	691a      	ldr	r2, [r3, #16]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f022 0201 	bic.w	r2, r2, #1
 8004c9a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a1b      	ldr	r2, [pc, #108]	@ (8004d24 <HAL_ADC_Init+0x404>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d002      	beq.n	8004cc2 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f001 fd99 	bl	80067f4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d10c      	bne.n	8004ce4 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd0:	f023 010f 	bic.w	r1, r3, #15
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	69db      	ldr	r3, [r3, #28]
 8004cd8:	1e5a      	subs	r2, r3, #1
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	631a      	str	r2, [r3, #48]	@ 0x30
 8004ce2:	e007      	b.n	8004cf4 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f022 020f 	bic.w	r2, r2, #15
 8004cf2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cf8:	f023 0303 	bic.w	r3, r3, #3
 8004cfc:	f043 0201 	orr.w	r2, r3, #1
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	661a      	str	r2, [r3, #96]	@ 0x60
 8004d04:	e007      	b.n	8004d16 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d0a:	f043 0210 	orr.w	r2, r3, #16
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004d16:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3724      	adds	r7, #36	@ 0x24
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd90      	pop	{r4, r7, pc}
 8004d20:	ffffbffc 	.word	0xffffbffc
 8004d24:	58026000 	.word	0x58026000
 8004d28:	fc00f81f 	.word	0xfc00f81f
 8004d2c:	fc00f81e 	.word	0xfc00f81e

08004d30 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b086      	sub	sp, #24
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a60      	ldr	r2, [pc, #384]	@ (8004ec4 <HAL_ADC_Start_DMA+0x194>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d004      	beq.n	8004d50 <HAL_ADC_Start_DMA+0x20>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a5f      	ldr	r2, [pc, #380]	@ (8004ec8 <HAL_ADC_Start_DMA+0x198>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d101      	bne.n	8004d54 <HAL_ADC_Start_DMA+0x24>
 8004d50:	4b5e      	ldr	r3, [pc, #376]	@ (8004ecc <HAL_ADC_Start_DMA+0x19c>)
 8004d52:	e000      	b.n	8004d56 <HAL_ADC_Start_DMA+0x26>
 8004d54:	4b5e      	ldr	r3, [pc, #376]	@ (8004ed0 <HAL_ADC_Start_DMA+0x1a0>)
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7ff fc66 	bl	8004628 <LL_ADC_GetMultimode>
 8004d5c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7ff fd2c 	bl	80047c0 <LL_ADC_REG_IsConversionOngoing>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f040 80a2 	bne.w	8004eb4 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d101      	bne.n	8004d7e <HAL_ADC_Start_DMA+0x4e>
 8004d7a:	2302      	movs	r3, #2
 8004d7c:	e09d      	b.n	8004eba <HAL_ADC_Start_DMA+0x18a>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d006      	beq.n	8004d9a <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	2b05      	cmp	r3, #5
 8004d90:	d003      	beq.n	8004d9a <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	2b09      	cmp	r3, #9
 8004d96:	f040 8086 	bne.w	8004ea6 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f001 fbac 	bl	80064f8 <ADC_Enable>
 8004da0:	4603      	mov	r3, r0
 8004da2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004da4:	7dfb      	ldrb	r3, [r7, #23]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d178      	bne.n	8004e9c <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004dae:	4b49      	ldr	r3, [pc, #292]	@ (8004ed4 <HAL_ADC_Start_DMA+0x1a4>)
 8004db0:	4013      	ands	r3, r2
 8004db2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a42      	ldr	r2, [pc, #264]	@ (8004ec8 <HAL_ADC_Start_DMA+0x198>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d002      	beq.n	8004dca <HAL_ADC_Start_DMA+0x9a>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	e000      	b.n	8004dcc <HAL_ADC_Start_DMA+0x9c>
 8004dca:	4b3e      	ldr	r3, [pc, #248]	@ (8004ec4 <HAL_ADC_Start_DMA+0x194>)
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	6812      	ldr	r2, [r2, #0]
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d002      	beq.n	8004dda <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d105      	bne.n	8004de6 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dde:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d006      	beq.n	8004e00 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004df6:	f023 0206 	bic.w	r2, r3, #6
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	665a      	str	r2, [r3, #100]	@ 0x64
 8004dfe:	e002      	b.n	8004e06 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2200      	movs	r2, #0
 8004e04:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e0a:	4a33      	ldr	r2, [pc, #204]	@ (8004ed8 <HAL_ADC_Start_DMA+0x1a8>)
 8004e0c:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e12:	4a32      	ldr	r2, [pc, #200]	@ (8004edc <HAL_ADC_Start_DMA+0x1ac>)
 8004e14:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e1a:	4a31      	ldr	r2, [pc, #196]	@ (8004ee0 <HAL_ADC_Start_DMA+0x1b0>)
 8004e1c:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	221c      	movs	r2, #28
 8004e24:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	685a      	ldr	r2, [r3, #4]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f042 0210 	orr.w	r2, r2, #16
 8004e3c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a28      	ldr	r2, [pc, #160]	@ (8004ee4 <HAL_ADC_Start_DMA+0x1b4>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d10f      	bne.n	8004e68 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004e52:	005b      	lsls	r3, r3, #1
 8004e54:	4619      	mov	r1, r3
 8004e56:	4610      	mov	r0, r2
 8004e58:	f7ff fac2 	bl	80043e0 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7ff faad 	bl	80043c0 <LL_ADC_EnableDMAReq>
 8004e66:	e007      	b.n	8004e78 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e70:	4619      	mov	r1, r3
 8004e72:	4610      	mov	r0, r2
 8004e74:	f7ff fa91 	bl	800439a <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	3340      	adds	r3, #64	@ 0x40
 8004e82:	4619      	mov	r1, r3
 8004e84:	68ba      	ldr	r2, [r7, #8]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f002 fdcc 	bl	8007a24 <HAL_DMA_Start_IT>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7ff fc7f 	bl	8004798 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004e9a:	e00d      	b.n	8004eb8 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 8004ea4:	e008      	b.n	8004eb8 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8004eb2:	e001      	b.n	8004eb8 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3718      	adds	r7, #24
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	40022000 	.word	0x40022000
 8004ec8:	40022100 	.word	0x40022100
 8004ecc:	40022300 	.word	0x40022300
 8004ed0:	58026300 	.word	0x58026300
 8004ed4:	fffff0fe 	.word	0xfffff0fe
 8004ed8:	080066cb 	.word	0x080066cb
 8004edc:	080067a3 	.word	0x080067a3
 8004ee0:	080067bf 	.word	0x080067bf
 8004ee4:	58026000 	.word	0x58026000

08004ee8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b08a      	sub	sp, #40	@ 0x28
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a87      	ldr	r2, [pc, #540]	@ (8005128 <HAL_ADC_IRQHandler+0x240>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d004      	beq.n	8004f18 <HAL_ADC_IRQHandler+0x30>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a86      	ldr	r2, [pc, #536]	@ (800512c <HAL_ADC_IRQHandler+0x244>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d101      	bne.n	8004f1c <HAL_ADC_IRQHandler+0x34>
 8004f18:	4b85      	ldr	r3, [pc, #532]	@ (8005130 <HAL_ADC_IRQHandler+0x248>)
 8004f1a:	e000      	b.n	8004f1e <HAL_ADC_IRQHandler+0x36>
 8004f1c:	4b85      	ldr	r3, [pc, #532]	@ (8005134 <HAL_ADC_IRQHandler+0x24c>)
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7ff fb82 	bl	8004628 <LL_ADC_GetMultimode>
 8004f24:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	f003 0302 	and.w	r3, r3, #2
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d017      	beq.n	8004f60 <HAL_ADC_IRQHandler+0x78>
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d012      	beq.n	8004f60 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f3e:	f003 0310 	and.w	r3, r3, #16
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d105      	bne.n	8004f52 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f4a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f001 fee8 	bl	8006d28 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2202      	movs	r2, #2
 8004f5e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	f003 0304 	and.w	r3, r3, #4
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d004      	beq.n	8004f74 <HAL_ADC_IRQHandler+0x8c>
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	f003 0304 	and.w	r3, r3, #4
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10a      	bne.n	8004f8a <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f000 8083 	beq.w	8005086 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	f003 0308 	and.w	r3, r3, #8
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d07d      	beq.n	8005086 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f8e:	f003 0310 	and.w	r3, r3, #16
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d105      	bne.n	8004fa2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f9a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7ff f9b8 	bl	800431c <LL_ADC_REG_IsTriggerSourceSWStart>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d062      	beq.n	8005078 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a5d      	ldr	r2, [pc, #372]	@ (800512c <HAL_ADC_IRQHandler+0x244>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d002      	beq.n	8004fc2 <HAL_ADC_IRQHandler+0xda>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	e000      	b.n	8004fc4 <HAL_ADC_IRQHandler+0xdc>
 8004fc2:	4b59      	ldr	r3, [pc, #356]	@ (8005128 <HAL_ADC_IRQHandler+0x240>)
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	6812      	ldr	r2, [r2, #0]
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d008      	beq.n	8004fde <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d005      	beq.n	8004fde <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	2b05      	cmp	r3, #5
 8004fd6:	d002      	beq.n	8004fde <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	2b09      	cmp	r3, #9
 8004fdc:	d104      	bne.n	8004fe8 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	623b      	str	r3, [r7, #32]
 8004fe6:	e00c      	b.n	8005002 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a4f      	ldr	r2, [pc, #316]	@ (800512c <HAL_ADC_IRQHandler+0x244>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d002      	beq.n	8004ff8 <HAL_ADC_IRQHandler+0x110>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	e000      	b.n	8004ffa <HAL_ADC_IRQHandler+0x112>
 8004ff8:	4b4b      	ldr	r3, [pc, #300]	@ (8005128 <HAL_ADC_IRQHandler+0x240>)
 8004ffa:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005002:	6a3b      	ldr	r3, [r7, #32]
 8005004:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d135      	bne.n	8005078 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0308 	and.w	r3, r3, #8
 8005016:	2b08      	cmp	r3, #8
 8005018:	d12e      	bne.n	8005078 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4618      	mov	r0, r3
 8005020:	f7ff fbce 	bl	80047c0 <LL_ADC_REG_IsConversionOngoing>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d11a      	bne.n	8005060 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	685a      	ldr	r2, [r3, #4]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f022 020c 	bic.w	r2, r2, #12
 8005038:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800503e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800504a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d112      	bne.n	8005078 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005056:	f043 0201 	orr.w	r2, r3, #1
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	661a      	str	r2, [r3, #96]	@ 0x60
 800505e:	e00b      	b.n	8005078 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005064:	f043 0210 	orr.w	r2, r3, #16
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005070:	f043 0201 	orr.w	r2, r3, #1
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f7fc fce3 	bl	8001a44 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	220c      	movs	r2, #12
 8005084:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	f003 0320 	and.w	r3, r3, #32
 800508c:	2b00      	cmp	r3, #0
 800508e:	d004      	beq.n	800509a <HAL_ADC_IRQHandler+0x1b2>
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	f003 0320 	and.w	r3, r3, #32
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10b      	bne.n	80050b2 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f000 80a0 	beq.w	80051e6 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f000 809a 	beq.w	80051e6 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050b6:	f003 0310 	and.w	r3, r3, #16
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d105      	bne.n	80050ca <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050c2:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7ff f9a0 	bl	8004414 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80050d4:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4618      	mov	r0, r3
 80050dc:	f7ff f91e 	bl	800431c <LL_ADC_REG_IsTriggerSourceSWStart>
 80050e0:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a11      	ldr	r2, [pc, #68]	@ (800512c <HAL_ADC_IRQHandler+0x244>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d002      	beq.n	80050f2 <HAL_ADC_IRQHandler+0x20a>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	e000      	b.n	80050f4 <HAL_ADC_IRQHandler+0x20c>
 80050f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005128 <HAL_ADC_IRQHandler+0x240>)
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	6812      	ldr	r2, [r2, #0]
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d008      	beq.n	800510e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d005      	beq.n	800510e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	2b06      	cmp	r3, #6
 8005106:	d002      	beq.n	800510e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	2b07      	cmp	r3, #7
 800510c:	d104      	bne.n	8005118 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	623b      	str	r3, [r7, #32]
 8005116:	e014      	b.n	8005142 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a03      	ldr	r2, [pc, #12]	@ (800512c <HAL_ADC_IRQHandler+0x244>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d00a      	beq.n	8005138 <HAL_ADC_IRQHandler+0x250>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	e008      	b.n	800513a <HAL_ADC_IRQHandler+0x252>
 8005128:	40022000 	.word	0x40022000
 800512c:	40022100 	.word	0x40022100
 8005130:	40022300 	.word	0x40022300
 8005134:	58026300 	.word	0x58026300
 8005138:	4b84      	ldr	r3, [pc, #528]	@ (800534c <HAL_ADC_IRQHandler+0x464>)
 800513a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d047      	beq.n	80051d8 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005148:	6a3b      	ldr	r3, [r7, #32]
 800514a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d007      	beq.n	8005162 <HAL_ADC_IRQHandler+0x27a>
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d03f      	beq.n	80051d8 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005158:	6a3b      	ldr	r3, [r7, #32]
 800515a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800515e:	2b00      	cmp	r3, #0
 8005160:	d13a      	bne.n	80051d8 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800516c:	2b40      	cmp	r3, #64	@ 0x40
 800516e:	d133      	bne.n	80051d8 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005170:	6a3b      	ldr	r3, [r7, #32]
 8005172:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d12e      	bne.n	80051d8 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4618      	mov	r0, r3
 8005180:	f7ff fb31 	bl	80047e6 <LL_ADC_INJ_IsConversionOngoing>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d11a      	bne.n	80051c0 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	685a      	ldr	r2, [r3, #4]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005198:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800519e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d112      	bne.n	80051d8 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051b6:	f043 0201 	orr.w	r2, r3, #1
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	661a      	str	r2, [r3, #96]	@ 0x60
 80051be:	e00b      	b.n	80051d8 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051c4:	f043 0210 	orr.w	r2, r3, #16
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80051d0:	f043 0201 	orr.w	r2, r3, #1
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f001 fd7d 	bl	8006cd8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2260      	movs	r2, #96	@ 0x60
 80051e4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d011      	beq.n	8005214 <HAL_ADC_IRQHandler+0x32c>
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00c      	beq.n	8005214 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051fe:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f8b2 	bl	8005370 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2280      	movs	r2, #128	@ 0x80
 8005212:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800521a:	2b00      	cmp	r3, #0
 800521c:	d012      	beq.n	8005244 <HAL_ADC_IRQHandler+0x35c>
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00d      	beq.n	8005244 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800522c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f001 fd63 	bl	8006d00 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005242:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800524a:	2b00      	cmp	r3, #0
 800524c:	d012      	beq.n	8005274 <HAL_ADC_IRQHandler+0x38c>
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00d      	beq.n	8005274 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800525c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f001 fd55 	bl	8006d14 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005272:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	f003 0310 	and.w	r3, r3, #16
 800527a:	2b00      	cmp	r3, #0
 800527c:	d043      	beq.n	8005306 <HAL_ADC_IRQHandler+0x41e>
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	f003 0310 	and.w	r3, r3, #16
 8005284:	2b00      	cmp	r3, #0
 8005286:	d03e      	beq.n	8005306 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800528c:	2b00      	cmp	r3, #0
 800528e:	d102      	bne.n	8005296 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8005290:	2301      	movs	r3, #1
 8005292:	627b      	str	r3, [r7, #36]	@ 0x24
 8005294:	e021      	b.n	80052da <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d015      	beq.n	80052c8 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a2a      	ldr	r2, [pc, #168]	@ (800534c <HAL_ADC_IRQHandler+0x464>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d004      	beq.n	80052b0 <HAL_ADC_IRQHandler+0x3c8>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a29      	ldr	r2, [pc, #164]	@ (8005350 <HAL_ADC_IRQHandler+0x468>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d101      	bne.n	80052b4 <HAL_ADC_IRQHandler+0x3cc>
 80052b0:	4b28      	ldr	r3, [pc, #160]	@ (8005354 <HAL_ADC_IRQHandler+0x46c>)
 80052b2:	e000      	b.n	80052b6 <HAL_ADC_IRQHandler+0x3ce>
 80052b4:	4b28      	ldr	r3, [pc, #160]	@ (8005358 <HAL_ADC_IRQHandler+0x470>)
 80052b6:	4618      	mov	r0, r3
 80052b8:	f7ff f9c4 	bl	8004644 <LL_ADC_GetMultiDMATransfer>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00b      	beq.n	80052da <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80052c2:	2301      	movs	r3, #1
 80052c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80052c6:	e008      	b.n	80052da <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	f003 0303 	and.w	r3, r3, #3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d001      	beq.n	80052da <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80052d6:	2301      	movs	r3, #1
 80052d8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80052da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d10e      	bne.n	80052fe <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052e4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052f0:	f043 0202 	orr.w	r2, r3, #2
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f7fc fb77 	bl	80019ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2210      	movs	r2, #16
 8005304:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800530c:	2b00      	cmp	r3, #0
 800530e:	d018      	beq.n	8005342 <HAL_ADC_IRQHandler+0x45a>
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005316:	2b00      	cmp	r3, #0
 8005318:	d013      	beq.n	8005342 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800531e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800532a:	f043 0208 	orr.w	r2, r3, #8
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800533a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f001 fcd5 	bl	8006cec <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005342:	bf00      	nop
 8005344:	3728      	adds	r7, #40	@ 0x28
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	40022000 	.word	0x40022000
 8005350:	40022100 	.word	0x40022100
 8005354:	40022300 	.word	0x40022300
 8005358:	58026300 	.word	0x58026300

0800535c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005364:	bf00      	nop
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005378:	bf00      	nop
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005384:	b590      	push	{r4, r7, lr}
 8005386:	b0b9      	sub	sp, #228	@ 0xe4
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800538e:	2300      	movs	r3, #0
 8005390:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005394:	2300      	movs	r3, #0
 8005396:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800539e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	4aa9      	ldr	r2, [pc, #676]	@ (800564c <HAL_ADC_ConfigChannel+0x2c8>)
 80053a6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d102      	bne.n	80053b8 <HAL_ADC_ConfigChannel+0x34>
 80053b2:	2302      	movs	r3, #2
 80053b4:	f000 bcfa 	b.w	8005dac <HAL_ADC_ConfigChannel+0xa28>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4618      	mov	r0, r3
 80053c6:	f7ff f9fb 	bl	80047c0 <LL_ADC_REG_IsConversionOngoing>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f040 84de 	bne.w	8005d8e <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a9e      	ldr	r2, [pc, #632]	@ (8005650 <HAL_ADC_ConfigChannel+0x2cc>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d033      	beq.n	8005444 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d108      	bne.n	80053fa <HAL_ADC_ConfigChannel+0x76>
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	0e9b      	lsrs	r3, r3, #26
 80053ee:	f003 031f 	and.w	r3, r3, #31
 80053f2:	2201      	movs	r2, #1
 80053f4:	fa02 f303 	lsl.w	r3, r2, r3
 80053f8:	e01d      	b.n	8005436 <HAL_ADC_ConfigChannel+0xb2>
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005402:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005406:	fa93 f3a3 	rbit	r3, r3
 800540a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800540e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005412:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005416:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800541a:	2b00      	cmp	r3, #0
 800541c:	d101      	bne.n	8005422 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 800541e:	2320      	movs	r3, #32
 8005420:	e004      	b.n	800542c <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8005422:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005426:	fab3 f383 	clz	r3, r3
 800542a:	b2db      	uxtb	r3, r3
 800542c:	f003 031f 	and.w	r3, r3, #31
 8005430:	2201      	movs	r2, #1
 8005432:	fa02 f303 	lsl.w	r3, r2, r3
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	6812      	ldr	r2, [r2, #0]
 800543a:	69d1      	ldr	r1, [r2, #28]
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	6812      	ldr	r2, [r2, #0]
 8005440:	430b      	orrs	r3, r1
 8005442:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6818      	ldr	r0, [r3, #0]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	6859      	ldr	r1, [r3, #4]
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	461a      	mov	r2, r3
 8005452:	f7fe ff76 	bl	8004342 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4618      	mov	r0, r3
 800545c:	f7ff f9b0 	bl	80047c0 <LL_ADC_REG_IsConversionOngoing>
 8005460:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4618      	mov	r0, r3
 800546a:	f7ff f9bc 	bl	80047e6 <LL_ADC_INJ_IsConversionOngoing>
 800546e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005472:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005476:	2b00      	cmp	r3, #0
 8005478:	f040 8270 	bne.w	800595c <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800547c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005480:	2b00      	cmp	r3, #0
 8005482:	f040 826b 	bne.w	800595c <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6818      	ldr	r0, [r3, #0]
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	6819      	ldr	r1, [r3, #0]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	461a      	mov	r2, r3
 8005494:	f7fe ffd1 	bl	800443a <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a6c      	ldr	r2, [pc, #432]	@ (8005650 <HAL_ADC_ConfigChannel+0x2cc>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d10d      	bne.n	80054be <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	695a      	ldr	r2, [r3, #20]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	08db      	lsrs	r3, r3, #3
 80054ae:	f003 0303 	and.w	r3, r3, #3
 80054b2:	005b      	lsls	r3, r3, #1
 80054b4:	fa02 f303 	lsl.w	r3, r2, r3
 80054b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80054bc:	e032      	b.n	8005524 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80054be:	4b65      	ldr	r3, [pc, #404]	@ (8005654 <HAL_ADC_ConfigChannel+0x2d0>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80054c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80054ca:	d10b      	bne.n	80054e4 <HAL_ADC_ConfigChannel+0x160>
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	695a      	ldr	r2, [r3, #20]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	089b      	lsrs	r3, r3, #2
 80054d8:	f003 0307 	and.w	r3, r3, #7
 80054dc:	005b      	lsls	r3, r3, #1
 80054de:	fa02 f303 	lsl.w	r3, r2, r3
 80054e2:	e01d      	b.n	8005520 <HAL_ADC_ConfigChannel+0x19c>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	f003 0310 	and.w	r3, r3, #16
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d10b      	bne.n	800550a <HAL_ADC_ConfigChannel+0x186>
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	695a      	ldr	r2, [r3, #20]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	089b      	lsrs	r3, r3, #2
 80054fe:	f003 0307 	and.w	r3, r3, #7
 8005502:	005b      	lsls	r3, r3, #1
 8005504:	fa02 f303 	lsl.w	r3, r2, r3
 8005508:	e00a      	b.n	8005520 <HAL_ADC_ConfigChannel+0x19c>
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	695a      	ldr	r2, [r3, #20]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	089b      	lsrs	r3, r3, #2
 8005516:	f003 0304 	and.w	r3, r3, #4
 800551a:	005b      	lsls	r3, r3, #1
 800551c:	fa02 f303 	lsl.w	r3, r2, r3
 8005520:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	2b04      	cmp	r3, #4
 800552a:	d048      	beq.n	80055be <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6818      	ldr	r0, [r3, #0]
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	6919      	ldr	r1, [r3, #16]
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800553c:	f7fe fdfc 	bl	8004138 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a42      	ldr	r2, [pc, #264]	@ (8005650 <HAL_ADC_ConfigChannel+0x2cc>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d119      	bne.n	800557e <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6818      	ldr	r0, [r3, #0]
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	6919      	ldr	r1, [r3, #16]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	69db      	ldr	r3, [r3, #28]
 8005556:	461a      	mov	r2, r3
 8005558:	f7fe fe94 	bl	8004284 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6818      	ldr	r0, [r3, #0]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	6919      	ldr	r1, [r3, #16]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	f893 3020 	ldrb.w	r3, [r3, #32]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d102      	bne.n	8005574 <HAL_ADC_ConfigChannel+0x1f0>
 800556e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005572:	e000      	b.n	8005576 <HAL_ADC_ConfigChannel+0x1f2>
 8005574:	2300      	movs	r3, #0
 8005576:	461a      	mov	r2, r3
 8005578:	f7fe fe62 	bl	8004240 <LL_ADC_SetOffsetSaturation>
 800557c:	e1ee      	b.n	800595c <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6818      	ldr	r0, [r3, #0]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	6919      	ldr	r1, [r3, #16]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800558c:	2b01      	cmp	r3, #1
 800558e:	d102      	bne.n	8005596 <HAL_ADC_ConfigChannel+0x212>
 8005590:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005594:	e000      	b.n	8005598 <HAL_ADC_ConfigChannel+0x214>
 8005596:	2300      	movs	r3, #0
 8005598:	461a      	mov	r2, r3
 800559a:	f7fe fe2f 	bl	80041fc <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6818      	ldr	r0, [r3, #0]
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	6919      	ldr	r1, [r3, #16]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	7e1b      	ldrb	r3, [r3, #24]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d102      	bne.n	80055b4 <HAL_ADC_ConfigChannel+0x230>
 80055ae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80055b2:	e000      	b.n	80055b6 <HAL_ADC_ConfigChannel+0x232>
 80055b4:	2300      	movs	r3, #0
 80055b6:	461a      	mov	r2, r3
 80055b8:	f7fe fe06 	bl	80041c8 <LL_ADC_SetDataRightShift>
 80055bc:	e1ce      	b.n	800595c <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a23      	ldr	r2, [pc, #140]	@ (8005650 <HAL_ADC_ConfigChannel+0x2cc>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	f040 8181 	bne.w	80058cc <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2100      	movs	r1, #0
 80055d0:	4618      	mov	r0, r3
 80055d2:	f7fe fde3 	bl	800419c <LL_ADC_GetOffsetChannel>
 80055d6:	4603      	mov	r3, r0
 80055d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d10a      	bne.n	80055f6 <HAL_ADC_ConfigChannel+0x272>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2100      	movs	r1, #0
 80055e6:	4618      	mov	r0, r3
 80055e8:	f7fe fdd8 	bl	800419c <LL_ADC_GetOffsetChannel>
 80055ec:	4603      	mov	r3, r0
 80055ee:	0e9b      	lsrs	r3, r3, #26
 80055f0:	f003 021f 	and.w	r2, r3, #31
 80055f4:	e01e      	b.n	8005634 <HAL_ADC_ConfigChannel+0x2b0>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2100      	movs	r1, #0
 80055fc:	4618      	mov	r0, r3
 80055fe:	f7fe fdcd 	bl	800419c <LL_ADC_GetOffsetChannel>
 8005602:	4603      	mov	r3, r0
 8005604:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005608:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800560c:	fa93 f3a3 	rbit	r3, r3
 8005610:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8005614:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005618:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 800561c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005620:	2b00      	cmp	r3, #0
 8005622:	d101      	bne.n	8005628 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8005624:	2320      	movs	r3, #32
 8005626:	e004      	b.n	8005632 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8005628:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800562c:	fab3 f383 	clz	r3, r3
 8005630:	b2db      	uxtb	r3, r3
 8005632:	461a      	mov	r2, r3
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800563c:	2b00      	cmp	r3, #0
 800563e:	d10b      	bne.n	8005658 <HAL_ADC_ConfigChannel+0x2d4>
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	0e9b      	lsrs	r3, r3, #26
 8005646:	f003 031f 	and.w	r3, r3, #31
 800564a:	e01e      	b.n	800568a <HAL_ADC_ConfigChannel+0x306>
 800564c:	47ff0000 	.word	0x47ff0000
 8005650:	58026000 	.word	0x58026000
 8005654:	5c001000 	.word	0x5c001000
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005660:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005664:	fa93 f3a3 	rbit	r3, r3
 8005668:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800566c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005670:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8005674:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d101      	bne.n	8005680 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 800567c:	2320      	movs	r3, #32
 800567e:	e004      	b.n	800568a <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8005680:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005684:	fab3 f383 	clz	r3, r3
 8005688:	b2db      	uxtb	r3, r3
 800568a:	429a      	cmp	r2, r3
 800568c:	d106      	bne.n	800569c <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2200      	movs	r2, #0
 8005694:	2100      	movs	r1, #0
 8005696:	4618      	mov	r0, r3
 8005698:	f7fe fe16 	bl	80042c8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2101      	movs	r1, #1
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7fe fd7a 	bl	800419c <LL_ADC_GetOffsetChannel>
 80056a8:	4603      	mov	r3, r0
 80056aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10a      	bne.n	80056c8 <HAL_ADC_ConfigChannel+0x344>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2101      	movs	r1, #1
 80056b8:	4618      	mov	r0, r3
 80056ba:	f7fe fd6f 	bl	800419c <LL_ADC_GetOffsetChannel>
 80056be:	4603      	mov	r3, r0
 80056c0:	0e9b      	lsrs	r3, r3, #26
 80056c2:	f003 021f 	and.w	r2, r3, #31
 80056c6:	e01e      	b.n	8005706 <HAL_ADC_ConfigChannel+0x382>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2101      	movs	r1, #1
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7fe fd64 	bl	800419c <LL_ADC_GetOffsetChannel>
 80056d4:	4603      	mov	r3, r0
 80056d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80056de:	fa93 f3a3 	rbit	r3, r3
 80056e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80056e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80056ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80056ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d101      	bne.n	80056fa <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 80056f6:	2320      	movs	r3, #32
 80056f8:	e004      	b.n	8005704 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 80056fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80056fe:	fab3 f383 	clz	r3, r3
 8005702:	b2db      	uxtb	r3, r3
 8005704:	461a      	mov	r2, r3
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800570e:	2b00      	cmp	r3, #0
 8005710:	d105      	bne.n	800571e <HAL_ADC_ConfigChannel+0x39a>
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	0e9b      	lsrs	r3, r3, #26
 8005718:	f003 031f 	and.w	r3, r3, #31
 800571c:	e018      	b.n	8005750 <HAL_ADC_ConfigChannel+0x3cc>
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005726:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800572a:	fa93 f3a3 	rbit	r3, r3
 800572e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8005732:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005736:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800573a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8005742:	2320      	movs	r3, #32
 8005744:	e004      	b.n	8005750 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8005746:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800574a:	fab3 f383 	clz	r3, r3
 800574e:	b2db      	uxtb	r3, r3
 8005750:	429a      	cmp	r2, r3
 8005752:	d106      	bne.n	8005762 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2200      	movs	r2, #0
 800575a:	2101      	movs	r1, #1
 800575c:	4618      	mov	r0, r3
 800575e:	f7fe fdb3 	bl	80042c8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2102      	movs	r1, #2
 8005768:	4618      	mov	r0, r3
 800576a:	f7fe fd17 	bl	800419c <LL_ADC_GetOffsetChannel>
 800576e:	4603      	mov	r3, r0
 8005770:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005774:	2b00      	cmp	r3, #0
 8005776:	d10a      	bne.n	800578e <HAL_ADC_ConfigChannel+0x40a>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2102      	movs	r1, #2
 800577e:	4618      	mov	r0, r3
 8005780:	f7fe fd0c 	bl	800419c <LL_ADC_GetOffsetChannel>
 8005784:	4603      	mov	r3, r0
 8005786:	0e9b      	lsrs	r3, r3, #26
 8005788:	f003 021f 	and.w	r2, r3, #31
 800578c:	e01e      	b.n	80057cc <HAL_ADC_ConfigChannel+0x448>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2102      	movs	r1, #2
 8005794:	4618      	mov	r0, r3
 8005796:	f7fe fd01 	bl	800419c <LL_ADC_GetOffsetChannel>
 800579a:	4603      	mov	r3, r0
 800579c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80057a4:	fa93 f3a3 	rbit	r3, r3
 80057a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80057ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80057b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80057b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d101      	bne.n	80057c0 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 80057bc:	2320      	movs	r3, #32
 80057be:	e004      	b.n	80057ca <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 80057c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057c4:	fab3 f383 	clz	r3, r3
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	461a      	mov	r2, r3
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d105      	bne.n	80057e4 <HAL_ADC_ConfigChannel+0x460>
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	0e9b      	lsrs	r3, r3, #26
 80057de:	f003 031f 	and.w	r3, r3, #31
 80057e2:	e014      	b.n	800580e <HAL_ADC_ConfigChannel+0x48a>
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80057ec:	fa93 f3a3 	rbit	r3, r3
 80057f0:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80057f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80057f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d101      	bne.n	8005804 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8005800:	2320      	movs	r3, #32
 8005802:	e004      	b.n	800580e <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8005804:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005808:	fab3 f383 	clz	r3, r3
 800580c:	b2db      	uxtb	r3, r3
 800580e:	429a      	cmp	r2, r3
 8005810:	d106      	bne.n	8005820 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2200      	movs	r2, #0
 8005818:	2102      	movs	r1, #2
 800581a:	4618      	mov	r0, r3
 800581c:	f7fe fd54 	bl	80042c8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2103      	movs	r1, #3
 8005826:	4618      	mov	r0, r3
 8005828:	f7fe fcb8 	bl	800419c <LL_ADC_GetOffsetChannel>
 800582c:	4603      	mov	r3, r0
 800582e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10a      	bne.n	800584c <HAL_ADC_ConfigChannel+0x4c8>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2103      	movs	r1, #3
 800583c:	4618      	mov	r0, r3
 800583e:	f7fe fcad 	bl	800419c <LL_ADC_GetOffsetChannel>
 8005842:	4603      	mov	r3, r0
 8005844:	0e9b      	lsrs	r3, r3, #26
 8005846:	f003 021f 	and.w	r2, r3, #31
 800584a:	e017      	b.n	800587c <HAL_ADC_ConfigChannel+0x4f8>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2103      	movs	r1, #3
 8005852:	4618      	mov	r0, r3
 8005854:	f7fe fca2 	bl	800419c <LL_ADC_GetOffsetChannel>
 8005858:	4603      	mov	r3, r0
 800585a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800585c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800585e:	fa93 f3a3 	rbit	r3, r3
 8005862:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8005864:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005866:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8005868:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800586e:	2320      	movs	r3, #32
 8005870:	e003      	b.n	800587a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8005872:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005874:	fab3 f383 	clz	r3, r3
 8005878:	b2db      	uxtb	r3, r3
 800587a:	461a      	mov	r2, r3
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005884:	2b00      	cmp	r3, #0
 8005886:	d105      	bne.n	8005894 <HAL_ADC_ConfigChannel+0x510>
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	0e9b      	lsrs	r3, r3, #26
 800588e:	f003 031f 	and.w	r3, r3, #31
 8005892:	e011      	b.n	80058b8 <HAL_ADC_ConfigChannel+0x534>
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800589a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800589c:	fa93 f3a3 	rbit	r3, r3
 80058a0:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80058a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80058a4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80058a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d101      	bne.n	80058b0 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 80058ac:	2320      	movs	r3, #32
 80058ae:	e003      	b.n	80058b8 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 80058b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80058b2:	fab3 f383 	clz	r3, r3
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d14f      	bne.n	800595c <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2200      	movs	r2, #0
 80058c2:	2103      	movs	r1, #3
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7fe fcff 	bl	80042c8 <LL_ADC_SetOffsetState>
 80058ca:	e047      	b.n	800595c <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	069b      	lsls	r3, r3, #26
 80058dc:	429a      	cmp	r2, r3
 80058de:	d107      	bne.n	80058f0 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80058ee:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	069b      	lsls	r3, r3, #26
 8005900:	429a      	cmp	r2, r3
 8005902:	d107      	bne.n	8005914 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005912:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800591a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	069b      	lsls	r3, r3, #26
 8005924:	429a      	cmp	r2, r3
 8005926:	d107      	bne.n	8005938 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005936:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800593e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	069b      	lsls	r3, r3, #26
 8005948:	429a      	cmp	r2, r3
 800594a:	d107      	bne.n	800595c <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800595a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4618      	mov	r0, r3
 8005962:	f7fe fef3 	bl	800474c <LL_ADC_IsEnabled>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	f040 8219 	bne.w	8005da0 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6818      	ldr	r0, [r3, #0]
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	6819      	ldr	r1, [r3, #0]
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	461a      	mov	r2, r3
 800597c:	f7fe fd88 	bl	8004490 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	4aa1      	ldr	r2, [pc, #644]	@ (8005c0c <HAL_ADC_ConfigChannel+0x888>)
 8005986:	4293      	cmp	r3, r2
 8005988:	f040 812e 	bne.w	8005be8 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005998:	2b00      	cmp	r3, #0
 800599a:	d10b      	bne.n	80059b4 <HAL_ADC_ConfigChannel+0x630>
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	0e9b      	lsrs	r3, r3, #26
 80059a2:	3301      	adds	r3, #1
 80059a4:	f003 031f 	and.w	r3, r3, #31
 80059a8:	2b09      	cmp	r3, #9
 80059aa:	bf94      	ite	ls
 80059ac:	2301      	movls	r3, #1
 80059ae:	2300      	movhi	r3, #0
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	e019      	b.n	80059e8 <HAL_ADC_ConfigChannel+0x664>
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80059bc:	fa93 f3a3 	rbit	r3, r3
 80059c0:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80059c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80059c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d101      	bne.n	80059d0 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 80059cc:	2320      	movs	r3, #32
 80059ce:	e003      	b.n	80059d8 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 80059d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80059d2:	fab3 f383 	clz	r3, r3
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	3301      	adds	r3, #1
 80059da:	f003 031f 	and.w	r3, r3, #31
 80059de:	2b09      	cmp	r3, #9
 80059e0:	bf94      	ite	ls
 80059e2:	2301      	movls	r3, #1
 80059e4:	2300      	movhi	r3, #0
 80059e6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d079      	beq.n	8005ae0 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d107      	bne.n	8005a08 <HAL_ADC_ConfigChannel+0x684>
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	0e9b      	lsrs	r3, r3, #26
 80059fe:	3301      	adds	r3, #1
 8005a00:	069b      	lsls	r3, r3, #26
 8005a02:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005a06:	e015      	b.n	8005a34 <HAL_ADC_ConfigChannel+0x6b0>
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a10:	fa93 f3a3 	rbit	r3, r3
 8005a14:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8005a16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a18:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8005a1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d101      	bne.n	8005a24 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8005a20:	2320      	movs	r3, #32
 8005a22:	e003      	b.n	8005a2c <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8005a24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a26:	fab3 f383 	clz	r3, r3
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	069b      	lsls	r3, r3, #26
 8005a30:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d109      	bne.n	8005a54 <HAL_ADC_ConfigChannel+0x6d0>
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	0e9b      	lsrs	r3, r3, #26
 8005a46:	3301      	adds	r3, #1
 8005a48:	f003 031f 	and.w	r3, r3, #31
 8005a4c:	2101      	movs	r1, #1
 8005a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a52:	e017      	b.n	8005a84 <HAL_ADC_ConfigChannel+0x700>
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a5c:	fa93 f3a3 	rbit	r3, r3
 8005a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8005a62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a64:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8005a66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d101      	bne.n	8005a70 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8005a6c:	2320      	movs	r3, #32
 8005a6e:	e003      	b.n	8005a78 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8005a70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a72:	fab3 f383 	clz	r3, r3
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	3301      	adds	r3, #1
 8005a7a:	f003 031f 	and.w	r3, r3, #31
 8005a7e:	2101      	movs	r1, #1
 8005a80:	fa01 f303 	lsl.w	r3, r1, r3
 8005a84:	ea42 0103 	orr.w	r1, r2, r3
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d10a      	bne.n	8005aaa <HAL_ADC_ConfigChannel+0x726>
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	0e9b      	lsrs	r3, r3, #26
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	f003 021f 	and.w	r2, r3, #31
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	005b      	lsls	r3, r3, #1
 8005aa4:	4413      	add	r3, r2
 8005aa6:	051b      	lsls	r3, r3, #20
 8005aa8:	e018      	b.n	8005adc <HAL_ADC_ConfigChannel+0x758>
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ab2:	fa93 f3a3 	rbit	r3, r3
 8005ab6:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8005ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aba:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8005abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d101      	bne.n	8005ac6 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8005ac2:	2320      	movs	r3, #32
 8005ac4:	e003      	b.n	8005ace <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8005ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ac8:	fab3 f383 	clz	r3, r3
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	3301      	adds	r3, #1
 8005ad0:	f003 021f 	and.w	r2, r3, #31
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	005b      	lsls	r3, r3, #1
 8005ad8:	4413      	add	r3, r2
 8005ada:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005adc:	430b      	orrs	r3, r1
 8005ade:	e07e      	b.n	8005bde <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d107      	bne.n	8005afc <HAL_ADC_ConfigChannel+0x778>
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	0e9b      	lsrs	r3, r3, #26
 8005af2:	3301      	adds	r3, #1
 8005af4:	069b      	lsls	r3, r3, #26
 8005af6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005afa:	e015      	b.n	8005b28 <HAL_ADC_ConfigChannel+0x7a4>
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b04:	fa93 f3a3 	rbit	r3, r3
 8005b08:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8005b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d101      	bne.n	8005b18 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8005b14:	2320      	movs	r3, #32
 8005b16:	e003      	b.n	8005b20 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8005b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b1a:	fab3 f383 	clz	r3, r3
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	3301      	adds	r3, #1
 8005b22:	069b      	lsls	r3, r3, #26
 8005b24:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d109      	bne.n	8005b48 <HAL_ADC_ConfigChannel+0x7c4>
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	0e9b      	lsrs	r3, r3, #26
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	f003 031f 	and.w	r3, r3, #31
 8005b40:	2101      	movs	r1, #1
 8005b42:	fa01 f303 	lsl.w	r3, r1, r3
 8005b46:	e017      	b.n	8005b78 <HAL_ADC_ConfigChannel+0x7f4>
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	fa93 f3a3 	rbit	r3, r3
 8005b54:	61bb      	str	r3, [r7, #24]
  return result;
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005b5a:	6a3b      	ldr	r3, [r7, #32]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d101      	bne.n	8005b64 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8005b60:	2320      	movs	r3, #32
 8005b62:	e003      	b.n	8005b6c <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8005b64:	6a3b      	ldr	r3, [r7, #32]
 8005b66:	fab3 f383 	clz	r3, r3
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	f003 031f 	and.w	r3, r3, #31
 8005b72:	2101      	movs	r1, #1
 8005b74:	fa01 f303 	lsl.w	r3, r1, r3
 8005b78:	ea42 0103 	orr.w	r1, r2, r3
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d10d      	bne.n	8005ba4 <HAL_ADC_ConfigChannel+0x820>
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	0e9b      	lsrs	r3, r3, #26
 8005b8e:	3301      	adds	r3, #1
 8005b90:	f003 021f 	and.w	r2, r3, #31
 8005b94:	4613      	mov	r3, r2
 8005b96:	005b      	lsls	r3, r3, #1
 8005b98:	4413      	add	r3, r2
 8005b9a:	3b1e      	subs	r3, #30
 8005b9c:	051b      	lsls	r3, r3, #20
 8005b9e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005ba2:	e01b      	b.n	8005bdc <HAL_ADC_ConfigChannel+0x858>
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	fa93 f3a3 	rbit	r3, r3
 8005bb0:	60fb      	str	r3, [r7, #12]
  return result;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d101      	bne.n	8005bc0 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8005bbc:	2320      	movs	r3, #32
 8005bbe:	e003      	b.n	8005bc8 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	fab3 f383 	clz	r3, r3
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	3301      	adds	r3, #1
 8005bca:	f003 021f 	and.w	r2, r3, #31
 8005bce:	4613      	mov	r3, r2
 8005bd0:	005b      	lsls	r3, r3, #1
 8005bd2:	4413      	add	r3, r2
 8005bd4:	3b1e      	subs	r3, #30
 8005bd6:	051b      	lsls	r3, r3, #20
 8005bd8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005bdc:	430b      	orrs	r3, r1
 8005bde:	683a      	ldr	r2, [r7, #0]
 8005be0:	6892      	ldr	r2, [r2, #8]
 8005be2:	4619      	mov	r1, r3
 8005be4:	f7fe fc29 	bl	800443a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f280 80d7 	bge.w	8005da0 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a06      	ldr	r2, [pc, #24]	@ (8005c10 <HAL_ADC_ConfigChannel+0x88c>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d004      	beq.n	8005c06 <HAL_ADC_ConfigChannel+0x882>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a04      	ldr	r2, [pc, #16]	@ (8005c14 <HAL_ADC_ConfigChannel+0x890>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d10a      	bne.n	8005c1c <HAL_ADC_ConfigChannel+0x898>
 8005c06:	4b04      	ldr	r3, [pc, #16]	@ (8005c18 <HAL_ADC_ConfigChannel+0x894>)
 8005c08:	e009      	b.n	8005c1e <HAL_ADC_ConfigChannel+0x89a>
 8005c0a:	bf00      	nop
 8005c0c:	47ff0000 	.word	0x47ff0000
 8005c10:	40022000 	.word	0x40022000
 8005c14:	40022100 	.word	0x40022100
 8005c18:	40022300 	.word	0x40022300
 8005c1c:	4b65      	ldr	r3, [pc, #404]	@ (8005db4 <HAL_ADC_ConfigChannel+0xa30>)
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7fe fa7c 	bl	800411c <LL_ADC_GetCommonPathInternalCh>
 8005c24:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a62      	ldr	r2, [pc, #392]	@ (8005db8 <HAL_ADC_ConfigChannel+0xa34>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d004      	beq.n	8005c3c <HAL_ADC_ConfigChannel+0x8b8>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a61      	ldr	r2, [pc, #388]	@ (8005dbc <HAL_ADC_ConfigChannel+0xa38>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d10e      	bne.n	8005c5a <HAL_ADC_ConfigChannel+0x8d6>
 8005c3c:	485e      	ldr	r0, [pc, #376]	@ (8005db8 <HAL_ADC_ConfigChannel+0xa34>)
 8005c3e:	f7fe fd85 	bl	800474c <LL_ADC_IsEnabled>
 8005c42:	4604      	mov	r4, r0
 8005c44:	485d      	ldr	r0, [pc, #372]	@ (8005dbc <HAL_ADC_ConfigChannel+0xa38>)
 8005c46:	f7fe fd81 	bl	800474c <LL_ADC_IsEnabled>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	4323      	orrs	r3, r4
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	bf0c      	ite	eq
 8005c52:	2301      	moveq	r3, #1
 8005c54:	2300      	movne	r3, #0
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	e008      	b.n	8005c6c <HAL_ADC_ConfigChannel+0x8e8>
 8005c5a:	4859      	ldr	r0, [pc, #356]	@ (8005dc0 <HAL_ADC_ConfigChannel+0xa3c>)
 8005c5c:	f7fe fd76 	bl	800474c <LL_ADC_IsEnabled>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	bf0c      	ite	eq
 8005c66:	2301      	moveq	r3, #1
 8005c68:	2300      	movne	r3, #0
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f000 8084 	beq.w	8005d7a <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a53      	ldr	r2, [pc, #332]	@ (8005dc4 <HAL_ADC_ConfigChannel+0xa40>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d132      	bne.n	8005ce2 <HAL_ADC_ConfigChannel+0x95e>
 8005c7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005c80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d12c      	bne.n	8005ce2 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a4c      	ldr	r2, [pc, #304]	@ (8005dc0 <HAL_ADC_ConfigChannel+0xa3c>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	f040 8086 	bne.w	8005da0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a47      	ldr	r2, [pc, #284]	@ (8005db8 <HAL_ADC_ConfigChannel+0xa34>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d004      	beq.n	8005ca8 <HAL_ADC_ConfigChannel+0x924>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a46      	ldr	r2, [pc, #280]	@ (8005dbc <HAL_ADC_ConfigChannel+0xa38>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d101      	bne.n	8005cac <HAL_ADC_ConfigChannel+0x928>
 8005ca8:	4a47      	ldr	r2, [pc, #284]	@ (8005dc8 <HAL_ADC_ConfigChannel+0xa44>)
 8005caa:	e000      	b.n	8005cae <HAL_ADC_ConfigChannel+0x92a>
 8005cac:	4a41      	ldr	r2, [pc, #260]	@ (8005db4 <HAL_ADC_ConfigChannel+0xa30>)
 8005cae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005cb2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	4610      	mov	r0, r2
 8005cba:	f7fe fa1c 	bl	80040f6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005cbe:	4b43      	ldr	r3, [pc, #268]	@ (8005dcc <HAL_ADC_ConfigChannel+0xa48>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	099b      	lsrs	r3, r3, #6
 8005cc4:	4a42      	ldr	r2, [pc, #264]	@ (8005dd0 <HAL_ADC_ConfigChannel+0xa4c>)
 8005cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cca:	099b      	lsrs	r3, r3, #6
 8005ccc:	3301      	adds	r3, #1
 8005cce:	005b      	lsls	r3, r3, #1
 8005cd0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005cd2:	e002      	b.n	8005cda <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d1f9      	bne.n	8005cd4 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005ce0:	e05e      	b.n	8005da0 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a3b      	ldr	r2, [pc, #236]	@ (8005dd4 <HAL_ADC_ConfigChannel+0xa50>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d120      	bne.n	8005d2e <HAL_ADC_ConfigChannel+0x9aa>
 8005cec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005cf0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d11a      	bne.n	8005d2e <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a30      	ldr	r2, [pc, #192]	@ (8005dc0 <HAL_ADC_ConfigChannel+0xa3c>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d14e      	bne.n	8005da0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a2c      	ldr	r2, [pc, #176]	@ (8005db8 <HAL_ADC_ConfigChannel+0xa34>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d004      	beq.n	8005d16 <HAL_ADC_ConfigChannel+0x992>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a2a      	ldr	r2, [pc, #168]	@ (8005dbc <HAL_ADC_ConfigChannel+0xa38>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d101      	bne.n	8005d1a <HAL_ADC_ConfigChannel+0x996>
 8005d16:	4a2c      	ldr	r2, [pc, #176]	@ (8005dc8 <HAL_ADC_ConfigChannel+0xa44>)
 8005d18:	e000      	b.n	8005d1c <HAL_ADC_ConfigChannel+0x998>
 8005d1a:	4a26      	ldr	r2, [pc, #152]	@ (8005db4 <HAL_ADC_ConfigChannel+0xa30>)
 8005d1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d20:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d24:	4619      	mov	r1, r3
 8005d26:	4610      	mov	r0, r2
 8005d28:	f7fe f9e5 	bl	80040f6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005d2c:	e038      	b.n	8005da0 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a29      	ldr	r2, [pc, #164]	@ (8005dd8 <HAL_ADC_ConfigChannel+0xa54>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d133      	bne.n	8005da0 <HAL_ADC_ConfigChannel+0xa1c>
 8005d38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d12d      	bne.n	8005da0 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a1d      	ldr	r2, [pc, #116]	@ (8005dc0 <HAL_ADC_ConfigChannel+0xa3c>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d128      	bne.n	8005da0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a19      	ldr	r2, [pc, #100]	@ (8005db8 <HAL_ADC_ConfigChannel+0xa34>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d004      	beq.n	8005d62 <HAL_ADC_ConfigChannel+0x9de>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a17      	ldr	r2, [pc, #92]	@ (8005dbc <HAL_ADC_ConfigChannel+0xa38>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d101      	bne.n	8005d66 <HAL_ADC_ConfigChannel+0x9e2>
 8005d62:	4a19      	ldr	r2, [pc, #100]	@ (8005dc8 <HAL_ADC_ConfigChannel+0xa44>)
 8005d64:	e000      	b.n	8005d68 <HAL_ADC_ConfigChannel+0x9e4>
 8005d66:	4a13      	ldr	r2, [pc, #76]	@ (8005db4 <HAL_ADC_ConfigChannel+0xa30>)
 8005d68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d6c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005d70:	4619      	mov	r1, r3
 8005d72:	4610      	mov	r0, r2
 8005d74:	f7fe f9bf 	bl	80040f6 <LL_ADC_SetCommonPathInternalCh>
 8005d78:	e012      	b.n	8005da0 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d7e:	f043 0220 	orr.w	r2, r3, #32
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8005d8c:	e008      	b.n	8005da0 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d92:	f043 0220 	orr.w	r2, r3, #32
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005da8:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	37e4      	adds	r7, #228	@ 0xe4
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd90      	pop	{r4, r7, pc}
 8005db4:	58026300 	.word	0x58026300
 8005db8:	40022000 	.word	0x40022000
 8005dbc:	40022100 	.word	0x40022100
 8005dc0:	58026000 	.word	0x58026000
 8005dc4:	c7520000 	.word	0xc7520000
 8005dc8:	40022300 	.word	0x40022300
 8005dcc:	24000038 	.word	0x24000038
 8005dd0:	053e2d63 	.word	0x053e2d63
 8005dd4:	c3210000 	.word	0xc3210000
 8005dd8:	cb840000 	.word	0xcb840000

08005ddc <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b094      	sub	sp, #80	@ 0x50
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005de6:	2300      	movs	r3, #0
 8005de8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));

  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005df4:	d003      	beq.n	8005dfe <HAL_ADC_AnalogWDGConfig+0x22>
      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	685b      	ldr	r3, [r3, #4]
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8005dfa:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
  }

#if defined(ADC_VER_V5_V90)

  if (hadc->Instance == ADC3)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a8c      	ldr	r2, [pc, #560]	@ (8006034 <HAL_ADC_AnalogWDGConfig+0x258>)
 8005e04:	4293      	cmp	r3, r2
      assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
    }
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d101      	bne.n	8005e14 <HAL_ADC_AnalogWDGConfig+0x38>
 8005e10:	2302      	movs	r3, #2
 8005e12:	e36b      	b.n	80064ec <HAL_ADC_AnalogWDGConfig+0x710>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  /*  - Analog watchdog thresholds                                            */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4618      	mov	r0, r3
 8005e22:	f7fe fccd 	bl	80047c0 <LL_ADC_REG_IsConversionOngoing>
 8005e26:	6438      	str	r0, [r7, #64]	@ 0x40
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f7fe fcda 	bl	80047e6 <LL_ADC_INJ_IsConversionOngoing>
 8005e32:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005e34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	f040 8349 	bne.w	80064ce <HAL_ADC_AnalogWDGConfig+0x6f2>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005e3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f040 8345 	bne.w	80064ce <HAL_ADC_AnalogWDGConfig+0x6f2>
     )
  {
    /* Analog watchdog configuration */
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a7b      	ldr	r2, [pc, #492]	@ (8006038 <HAL_ADC_AnalogWDGConfig+0x25c>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	f040 8131 	bne.w	80060b2 <HAL_ADC_AnalogWDGConfig+0x2d6>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (AnalogWDGConfig->WatchdogMode)
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 8005e58:	d034      	beq.n	8005ec4 <HAL_ADC_AnalogWDGConfig+0xe8>
 8005e5a:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 8005e5e:	d856      	bhi.n	8005f0e <HAL_ADC_AnalogWDGConfig+0x132>
 8005e60:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005e64:	d04b      	beq.n	8005efe <HAL_ADC_AnalogWDGConfig+0x122>
 8005e66:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005e6a:	d850      	bhi.n	8005f0e <HAL_ADC_AnalogWDGConfig+0x132>
 8005e6c:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8005e70:	d01b      	beq.n	8005eaa <HAL_ADC_AnalogWDGConfig+0xce>
 8005e72:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8005e76:	d84a      	bhi.n	8005f0e <HAL_ADC_AnalogWDGConfig+0x132>
 8005e78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e7c:	d037      	beq.n	8005eee <HAL_ADC_AnalogWDGConfig+0x112>
 8005e7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e82:	d844      	bhi.n	8005f0e <HAL_ADC_AnalogWDGConfig+0x132>
 8005e84:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005e88:	d029      	beq.n	8005ede <HAL_ADC_AnalogWDGConfig+0x102>
 8005e8a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005e8e:	d13e      	bne.n	8005f0e <HAL_ADC_AnalogWDGConfig+0x132>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6818      	ldr	r0, [r3, #0]
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8005e9c:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	4965      	ldr	r1, [pc, #404]	@ (8006038 <HAL_ADC_AnalogWDGConfig+0x25c>)
 8005ea4:	f7fe fb34 	bl	8004510 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR));
          break;
 8005ea8:	e039      	b.n	8005f1e <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6818      	ldr	r0, [r3, #0]
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8005eb6:	f043 73a0 	orr.w	r3, r3, #20971520	@ 0x1400000
 8005eba:	461a      	mov	r2, r3
 8005ebc:	495e      	ldr	r1, [pc, #376]	@ (8006038 <HAL_ADC_AnalogWDGConfig+0x25c>)
 8005ebe:	f7fe fb27 	bl	8004510 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_INJECTED));
          break;
 8005ec2:	e02c      	b.n	8005f1e <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6818      	ldr	r0, [r3, #0]
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8005ed0:	f043 73e0 	orr.w	r3, r3, #29360128	@ 0x1c00000
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	4958      	ldr	r1, [pc, #352]	@ (8006038 <HAL_ADC_AnalogWDGConfig+0x25c>)
 8005ed8:	f7fe fb1a 	bl	8004510 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 8005edc:	e01f      	b.n	8005f1e <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a56      	ldr	r2, [pc, #344]	@ (800603c <HAL_ADC_AnalogWDGConfig+0x260>)
 8005ee4:	4954      	ldr	r1, [pc, #336]	@ (8006038 <HAL_ADC_AnalogWDGConfig+0x25c>)
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7fe fb12 	bl	8004510 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8005eec:	e017      	b.n	8005f1e <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a53      	ldr	r2, [pc, #332]	@ (8006040 <HAL_ADC_AnalogWDGConfig+0x264>)
 8005ef4:	4950      	ldr	r1, [pc, #320]	@ (8006038 <HAL_ADC_AnalogWDGConfig+0x25c>)
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7fe fb0a 	bl	8004510 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8005efc:	e00f      	b.n	8005f1e <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a50      	ldr	r2, [pc, #320]	@ (8006044 <HAL_ADC_AnalogWDGConfig+0x268>)
 8005f04:	494c      	ldr	r1, [pc, #304]	@ (8006038 <HAL_ADC_AnalogWDGConfig+0x25c>)
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7fe fb02 	bl	8004510 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8005f0c:	e007      	b.n	8005f1e <HAL_ADC_AnalogWDGConfig+0x142>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2200      	movs	r2, #0
 8005f14:	4948      	ldr	r1, [pc, #288]	@ (8006038 <HAL_ADC_AnalogWDGConfig+0x25c>)
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7fe fafa 	bl	8004510 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8005f1c:	bf00      	nop
      }

      /* Shift the offset in function of the selected ADC resolution:         */
      /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
      /* are set to 0                                                         */
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8005f1e:	4b4a      	ldr	r3, [pc, #296]	@ (8006048 <HAL_ADC_AnalogWDGConfig+0x26c>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005f26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f2a:	d10b      	bne.n	8005f44 <HAL_ADC_AnalogWDGConfig+0x168>
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	691a      	ldr	r2, [r3, #16]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	089b      	lsrs	r3, r3, #2
 8005f38:	f003 0307 	and.w	r3, r3, #7
 8005f3c:	005b      	lsls	r3, r3, #1
 8005f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f42:	e01d      	b.n	8005f80 <HAL_ADC_AnalogWDGConfig+0x1a4>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	f003 0310 	and.w	r3, r3, #16
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10b      	bne.n	8005f6a <HAL_ADC_AnalogWDGConfig+0x18e>
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	691a      	ldr	r2, [r3, #16]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	089b      	lsrs	r3, r3, #2
 8005f5e:	f003 0307 	and.w	r3, r3, #7
 8005f62:	005b      	lsls	r3, r3, #1
 8005f64:	fa02 f303 	lsl.w	r3, r2, r3
 8005f68:	e00a      	b.n	8005f80 <HAL_ADC_AnalogWDGConfig+0x1a4>
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	691a      	ldr	r2, [r3, #16]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	089b      	lsrs	r3, r3, #2
 8005f76:	f003 0304 	and.w	r3, r3, #4
 8005f7a:	005b      	lsls	r3, r3, #1
 8005f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f80:	64bb      	str	r3, [r7, #72]	@ 0x48
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8005f82:	4b31      	ldr	r3, [pc, #196]	@ (8006048 <HAL_ADC_AnalogWDGConfig+0x26c>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005f8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005f8e:	d10b      	bne.n	8005fa8 <HAL_ADC_AnalogWDGConfig+0x1cc>
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	695a      	ldr	r2, [r3, #20]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	089b      	lsrs	r3, r3, #2
 8005f9c:	f003 0307 	and.w	r3, r3, #7
 8005fa0:	005b      	lsls	r3, r3, #1
 8005fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa6:	e01d      	b.n	8005fe4 <HAL_ADC_AnalogWDGConfig+0x208>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	f003 0310 	and.w	r3, r3, #16
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d10b      	bne.n	8005fce <HAL_ADC_AnalogWDGConfig+0x1f2>
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	695a      	ldr	r2, [r3, #20]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	089b      	lsrs	r3, r3, #2
 8005fc2:	f003 0307 	and.w	r3, r3, #7
 8005fc6:	005b      	lsls	r3, r3, #1
 8005fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fcc:	e00a      	b.n	8005fe4 <HAL_ADC_AnalogWDGConfig+0x208>
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	695a      	ldr	r2, [r3, #20]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	089b      	lsrs	r3, r3, #2
 8005fda:	f003 0304 	and.w	r3, r3, #4
 8005fde:	005b      	lsls	r3, r3, #1
 8005fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe4:	647b      	str	r3, [r7, #68]	@ 0x44

      /* Set the high and low thresholds */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a12      	ldr	r2, [pc, #72]	@ (8006034 <HAL_ADC_AnalogWDGConfig+0x258>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d131      	bne.n	8006054 <HAL_ADC_AnalogWDGConfig+0x278>
      {
        MODIFY_REG(hadc->Instance->LTR1_TR1,
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	699a      	ldr	r2, [r3, #24]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	430a      	orrs	r2, r1
 8006004:	621a      	str	r2, [r3, #32]
                   ADC3_TR1_AWDFILT,
                   AnalogWDGConfig->FilteringConfig);
        MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC3_TR1_LT1, tmpAWDLowThresholdShifted);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	6a1a      	ldr	r2, [r3, #32]
 800600c:	4b0f      	ldr	r3, [pc, #60]	@ (800604c <HAL_ADC_AnalogWDGConfig+0x270>)
 800600e:	4013      	ands	r3, r2
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	6812      	ldr	r2, [r2, #0]
 8006014:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006016:	430b      	orrs	r3, r1
 8006018:	6213      	str	r3, [r2, #32]
        MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC3_TR1_HT1, (tmpAWDHighThresholdShifted << ADC3_TR1_HT1_Pos));
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	6a1a      	ldr	r2, [r3, #32]
 8006020:	4b0b      	ldr	r3, [pc, #44]	@ (8006050 <HAL_ADC_AnalogWDGConfig+0x274>)
 8006022:	4013      	ands	r3, r2
 8006024:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006026:	0411      	lsls	r1, r2, #16
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	6812      	ldr	r2, [r2, #0]
 800602c:	430b      	orrs	r3, r1
 800602e:	6213      	str	r3, [r2, #32]
 8006030:	e024      	b.n	800607c <HAL_ADC_AnalogWDGConfig+0x2a0>
 8006032:	bf00      	nop
 8006034:	58026000 	.word	0x58026000
 8006038:	7dc00000 	.word	0x7dc00000
 800603c:	008fffff 	.word	0x008fffff
 8006040:	010fffff 	.word	0x010fffff
 8006044:	018fffff 	.word	0x018fffff
 8006048:	5c001000 	.word	0x5c001000
 800604c:	fffff000 	.word	0xfffff000
 8006050:	f000ffff 	.word	0xf000ffff
      }
      else
      {

        MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6a1b      	ldr	r3, [r3, #32]
 800605a:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006064:	430a      	orrs	r2, r1
 8006066:	621a      	str	r2, [r3, #32]
        MODIFY_REG(hadc->Instance->HTR1_TR2,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800606e:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006078:	430a      	orrs	r2, r1
 800607a:	625a      	str	r2, [r3, #36]	@ 0x24
      MODIFY_REG(hadc->Instance->LTR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
      MODIFY_REG(hadc->Instance->HTR1,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
#endif

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006080:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4618      	mov	r0, r3
 800608e:	f7fe fbbd 	bl	800480c <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (AnalogWDGConfig->ITMode == ENABLE)
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	7b1b      	ldrb	r3, [r3, #12]
 8006096:	2b01      	cmp	r3, #1
 8006098:	d105      	bne.n	80060a6 <HAL_ADC_AnalogWDGConfig+0x2ca>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4618      	mov	r0, r3
 80060a0:	f7fe fbdd 	bl	800485e <LL_ADC_EnableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80060a4:	e21c      	b.n	80064e0 <HAL_ADC_AnalogWDGConfig+0x704>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4618      	mov	r0, r3
 80060ac:	f7fe fc07 	bl	80048be <LL_ADC_DisableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80060b0:	e216      	b.n	80064e0 <HAL_ADC_AnalogWDGConfig+0x704>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (AnalogWDGConfig->WatchdogMode)
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 80060ba:	d01f      	beq.n	80060fc <HAL_ADC_AnalogWDGConfig+0x320>
 80060bc:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 80060c0:	f200 80f4 	bhi.w	80062ac <HAL_ADC_AnalogWDGConfig+0x4d0>
 80060c4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80060c8:	d07d      	beq.n	80061c6 <HAL_ADC_AnalogWDGConfig+0x3ea>
 80060ca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80060ce:	f200 80ed 	bhi.w	80062ac <HAL_ADC_AnalogWDGConfig+0x4d0>
 80060d2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80060d6:	d011      	beq.n	80060fc <HAL_ADC_AnalogWDGConfig+0x320>
 80060d8:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80060dc:	f200 80e6 	bhi.w	80062ac <HAL_ADC_AnalogWDGConfig+0x4d0>
 80060e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80060e4:	d06f      	beq.n	80061c6 <HAL_ADC_AnalogWDGConfig+0x3ea>
 80060e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80060ea:	f200 80df 	bhi.w	80062ac <HAL_ADC_AnalogWDGConfig+0x4d0>
 80060ee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80060f2:	d068      	beq.n	80061c6 <HAL_ADC_AnalogWDGConfig+0x3ea>
 80060f4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80060f8:	f040 80d8 	bne.w	80062ac <HAL_ADC_AnalogWDGConfig+0x4d0>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a9c      	ldr	r2, [pc, #624]	@ (8006374 <HAL_ADC_AnalogWDGConfig+0x598>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d12f      	bne.n	8006166 <HAL_ADC_AnalogWDGConfig+0x38a>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800610e:	2b00      	cmp	r3, #0
 8006110:	d108      	bne.n	8006124 <HAL_ADC_AnalogWDGConfig+0x348>
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	0e9b      	lsrs	r3, r3, #26
 8006118:	f003 031f 	and.w	r3, r3, #31
 800611c:	2201      	movs	r2, #1
 800611e:	fa02 f303 	lsl.w	r3, r2, r3
 8006122:	e016      	b.n	8006152 <HAL_ADC_AnalogWDGConfig+0x376>
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800612a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800612c:	fa93 f3a3 	rbit	r3, r3
 8006130:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8006132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006134:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8006136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006138:	2b00      	cmp	r3, #0
 800613a:	d101      	bne.n	8006140 <HAL_ADC_AnalogWDGConfig+0x364>
    return 32U;
 800613c:	2320      	movs	r3, #32
 800613e:	e003      	b.n	8006148 <HAL_ADC_AnalogWDGConfig+0x36c>
  return __builtin_clz(value);
 8006140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006142:	fab3 f383 	clz	r3, r3
 8006146:	b2db      	uxtb	r3, r3
 8006148:	f003 031f 	and.w	r3, r3, #31
 800614c:	2201      	movs	r2, #1
 800614e:	fa02 f303 	lsl.w	r3, r2, r3
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	6812      	ldr	r2, [r2, #0]
 8006156:	f8d2 10a0 	ldr.w	r1, [r2, #160]	@ 0xa0
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	6812      	ldr	r2, [r2, #0]
 800615e:	430b      	orrs	r3, r1
 8006160:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 8006164:	e0ab      	b.n	80062be <HAL_ADC_AnalogWDGConfig+0x4e2>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800616e:	2b00      	cmp	r3, #0
 8006170:	d108      	bne.n	8006184 <HAL_ADC_AnalogWDGConfig+0x3a8>
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	0e9b      	lsrs	r3, r3, #26
 8006178:	f003 031f 	and.w	r3, r3, #31
 800617c:	2201      	movs	r2, #1
 800617e:	fa02 f303 	lsl.w	r3, r2, r3
 8006182:	e016      	b.n	80061b2 <HAL_ADC_AnalogWDGConfig+0x3d6>
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800618a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800618c:	fa93 f3a3 	rbit	r3, r3
 8006190:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8006192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006194:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8006196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006198:	2b00      	cmp	r3, #0
 800619a:	d101      	bne.n	80061a0 <HAL_ADC_AnalogWDGConfig+0x3c4>
    return 32U;
 800619c:	2320      	movs	r3, #32
 800619e:	e003      	b.n	80061a8 <HAL_ADC_AnalogWDGConfig+0x3cc>
  return __builtin_clz(value);
 80061a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061a2:	fab3 f383 	clz	r3, r3
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	f003 031f 	and.w	r3, r3, #31
 80061ac:	2201      	movs	r2, #1
 80061ae:	fa02 f303 	lsl.w	r3, r2, r3
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	6812      	ldr	r2, [r2, #0]
 80061b6:	f8d2 10a4 	ldr.w	r1, [r2, #164]	@ 0xa4
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	6812      	ldr	r2, [r2, #0]
 80061be:	430b      	orrs	r3, r1
 80061c0:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
          break;
 80061c4:	e07b      	b.n	80062be <HAL_ADC_AnalogWDGConfig+0x4e2>
        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:

#if defined(ADC_VER_V5_V90)
          if (hadc->Instance == ADC3)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a6b      	ldr	r2, [pc, #428]	@ (8006378 <HAL_ADC_AnalogWDGConfig+0x59c>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d108      	bne.n	80061e2 <HAL_ADC_AnalogWDGConfig+0x406>
          {

            LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6818      	ldr	r0, [r3, #0]
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a68      	ldr	r2, [pc, #416]	@ (800637c <HAL_ADC_AnalogWDGConfig+0x5a0>)
 80061da:	4619      	mov	r1, r3
 80061dc:	f7fe f998 	bl	8004510 <LL_ADC_SetAnalogWDMonitChannels>
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
            }
#if defined(ADC_VER_V5_V90)
          }
#endif  /*ADC_VER_V5_V90*/
          break;
 80061e0:	e06d      	b.n	80062be <HAL_ADC_AnalogWDGConfig+0x4e2>
            if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a63      	ldr	r2, [pc, #396]	@ (8006374 <HAL_ADC_AnalogWDGConfig+0x598>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d12f      	bne.n	800624c <HAL_ADC_AnalogWDGConfig+0x470>
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d108      	bne.n	800620a <HAL_ADC_AnalogWDGConfig+0x42e>
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	0e9b      	lsrs	r3, r3, #26
 80061fe:	f003 031f 	and.w	r3, r3, #31
 8006202:	2201      	movs	r2, #1
 8006204:	fa02 f303 	lsl.w	r3, r2, r3
 8006208:	e016      	b.n	8006238 <HAL_ADC_AnalogWDGConfig+0x45c>
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	fa93 f3a3 	rbit	r3, r3
 8006216:	61bb      	str	r3, [r7, #24]
  return result;
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800621c:	6a3b      	ldr	r3, [r7, #32]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d101      	bne.n	8006226 <HAL_ADC_AnalogWDGConfig+0x44a>
    return 32U;
 8006222:	2320      	movs	r3, #32
 8006224:	e003      	b.n	800622e <HAL_ADC_AnalogWDGConfig+0x452>
  return __builtin_clz(value);
 8006226:	6a3b      	ldr	r3, [r7, #32]
 8006228:	fab3 f383 	clz	r3, r3
 800622c:	b2db      	uxtb	r3, r3
 800622e:	f003 031f 	and.w	r3, r3, #31
 8006232:	2201      	movs	r2, #1
 8006234:	fa02 f303 	lsl.w	r3, r2, r3
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	6812      	ldr	r2, [r2, #0]
 800623c:	f8d2 10a0 	ldr.w	r1, [r2, #160]	@ 0xa0
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	6812      	ldr	r2, [r2, #0]
 8006244:	430b      	orrs	r3, r1
 8006246:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
          break;
 800624a:	e038      	b.n	80062be <HAL_ADC_AnalogWDGConfig+0x4e2>
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006254:	2b00      	cmp	r3, #0
 8006256:	d108      	bne.n	800626a <HAL_ADC_AnalogWDGConfig+0x48e>
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	0e9b      	lsrs	r3, r3, #26
 800625e:	f003 031f 	and.w	r3, r3, #31
 8006262:	2201      	movs	r2, #1
 8006264:	fa02 f303 	lsl.w	r3, r2, r3
 8006268:	e016      	b.n	8006298 <HAL_ADC_AnalogWDGConfig+0x4bc>
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	fa93 f3a3 	rbit	r3, r3
 8006276:	60fb      	str	r3, [r7, #12]
  return result;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d101      	bne.n	8006286 <HAL_ADC_AnalogWDGConfig+0x4aa>
    return 32U;
 8006282:	2320      	movs	r3, #32
 8006284:	e003      	b.n	800628e <HAL_ADC_AnalogWDGConfig+0x4b2>
  return __builtin_clz(value);
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	fab3 f383 	clz	r3, r3
 800628c:	b2db      	uxtb	r3, r3
 800628e:	f003 031f 	and.w	r3, r3, #31
 8006292:	2201      	movs	r2, #1
 8006294:	fa02 f303 	lsl.w	r3, r2, r3
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	6812      	ldr	r2, [r2, #0]
 800629c:	f8d2 10a4 	ldr.w	r1, [r2, #164]	@ 0xa4
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	6812      	ldr	r2, [r2, #0]
 80062a4:	430b      	orrs	r3, r1
 80062a6:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
          break;
 80062aa:	e008      	b.n	80062be <HAL_ADC_AnalogWDGConfig+0x4e2>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6818      	ldr	r0, [r3, #0]
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2200      	movs	r2, #0
 80062b6:	4619      	mov	r1, r3
 80062b8:	f7fe f92a 	bl	8004510 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80062bc:	bf00      	nop
      }

      /* Shift the thresholds in function of the selected ADC resolution      */
      /* have to be left-aligned on bit 15, the LSB (right bits) are set to 0 */
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	f003 0310 	and.w	r3, r3, #16
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d10b      	bne.n	80062e4 <HAL_ADC_AnalogWDGConfig+0x508>
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	691a      	ldr	r2, [r3, #16]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	089b      	lsrs	r3, r3, #2
 80062d8:	f003 0307 	and.w	r3, r3, #7
 80062dc:	005b      	lsls	r3, r3, #1
 80062de:	fa02 f303 	lsl.w	r3, r2, r3
 80062e2:	e00a      	b.n	80062fa <HAL_ADC_AnalogWDGConfig+0x51e>
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	691a      	ldr	r2, [r3, #16]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	089b      	lsrs	r3, r3, #2
 80062f0:	f003 0304 	and.w	r3, r3, #4
 80062f4:	005b      	lsls	r3, r3, #1
 80062f6:	fa02 f303 	lsl.w	r3, r2, r3
 80062fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	f003 0310 	and.w	r3, r3, #16
 8006306:	2b00      	cmp	r3, #0
 8006308:	d10b      	bne.n	8006322 <HAL_ADC_AnalogWDGConfig+0x546>
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	695a      	ldr	r2, [r3, #20]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	089b      	lsrs	r3, r3, #2
 8006316:	f003 0307 	and.w	r3, r3, #7
 800631a:	005b      	lsls	r3, r3, #1
 800631c:	fa02 f303 	lsl.w	r3, r2, r3
 8006320:	e00a      	b.n	8006338 <HAL_ADC_AnalogWDGConfig+0x55c>
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	695a      	ldr	r2, [r3, #20]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	089b      	lsrs	r3, r3, #2
 800632e:	f003 0304 	and.w	r3, r3, #4
 8006332:	005b      	lsls	r3, r3, #1
 8006334:	fa02 f303 	lsl.w	r3, r2, r3
 8006338:	647b      	str	r3, [r7, #68]	@ 0x44

#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a0e      	ldr	r2, [pc, #56]	@ (8006378 <HAL_ADC_AnalogWDGConfig+0x59c>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d153      	bne.n	80063ec <HAL_ADC_AnalogWDGConfig+0x610>
      {

        /* Analog watchdog thresholds configuration */
        if (AnalogWDGConfig->WatchdogNumber != ADC_ANALOGWATCHDOG_1)
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a0d      	ldr	r2, [pc, #52]	@ (8006380 <HAL_ADC_AnalogWDGConfig+0x5a4>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d045      	beq.n	80063da <HAL_ADC_AnalogWDGConfig+0x5fe>
        {
          /* Shift the offset with respect to the selected ADC resolution:        */
          /* Thresholds have to be left-aligned on bit 7, the LSB (right bits)    */
          /* are set to 0.                                                        */
          tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	f003 0310 	and.w	r3, r3, #16
 8006358:	2b00      	cmp	r3, #0
 800635a:	d113      	bne.n	8006384 <HAL_ADC_AnalogWDGConfig+0x5a8>
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	691a      	ldr	r2, [r3, #16]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	089b      	lsrs	r3, r3, #2
 8006368:	f003 0307 	and.w	r3, r3, #7
 800636c:	005b      	lsls	r3, r3, #1
 800636e:	fa02 f303 	lsl.w	r3, r2, r3
 8006372:	e012      	b.n	800639a <HAL_ADC_AnalogWDGConfig+0x5be>
 8006374:	001fffff 	.word	0x001fffff
 8006378:	58026000 	.word	0x58026000
 800637c:	018fffff 	.word	0x018fffff
 8006380:	7dc00000 	.word	0x7dc00000
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	691a      	ldr	r2, [r3, #16]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	089b      	lsrs	r3, r3, #2
 8006390:	f003 0304 	and.w	r3, r3, #4
 8006394:	005b      	lsls	r3, r3, #1
 8006396:	fa02 f303 	lsl.w	r3, r2, r3
 800639a:	64bb      	str	r3, [r7, #72]	@ 0x48
          tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	f003 0310 	and.w	r3, r3, #16
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10b      	bne.n	80063c2 <HAL_ADC_AnalogWDGConfig+0x5e6>
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	695a      	ldr	r2, [r3, #20]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	089b      	lsrs	r3, r3, #2
 80063b6:	f003 0307 	and.w	r3, r3, #7
 80063ba:	005b      	lsls	r3, r3, #1
 80063bc:	fa02 f303 	lsl.w	r3, r2, r3
 80063c0:	e00a      	b.n	80063d8 <HAL_ADC_AnalogWDGConfig+0x5fc>
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	695a      	ldr	r2, [r3, #20]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	089b      	lsrs	r3, r3, #2
 80063ce:	f003 0304 	and.w	r3, r3, #4
 80063d2:	005b      	lsls	r3, r3, #1
 80063d4:	fa02 f303 	lsl.w	r3, r2, r3
 80063d8:	647b      	str	r3, [r7, #68]	@ 0x44
        }

        /* Set ADC analog watchdog thresholds value of both thresholds high and low */
        LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted, tmpAWDLowThresholdShifted);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6818      	ldr	r0, [r3, #0]
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	6819      	ldr	r1, [r3, #0]
 80063e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063e6:	f7fe f8c1 	bl	800456c <LL_ADC_ConfigAnalogWDThresholds>
 80063ea:	e035      	b.n	8006458 <HAL_ADC_AnalogWDGConfig+0x67c>

      }
      else
      {

        if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a40      	ldr	r2, [pc, #256]	@ (80064f4 <HAL_ADC_AnalogWDGConfig+0x718>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d118      	bne.n	8006428 <HAL_ADC_AnalogWDGConfig+0x64c>
        {
          /* Set ADC analog watchdog thresholds value of both thresholds high and low */
          MODIFY_REG(hadc->Instance->LTR2_DIFSEL,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80063fe:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006408:	430a      	orrs	r2, r1
 800640a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
          MODIFY_REG(hadc->Instance->HTR2_CALFACT,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006416:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006420:	430a      	orrs	r2, r1
 8006422:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
 8006426:	e017      	b.n	8006458 <HAL_ADC_AnalogWDGConfig+0x67c>
        }
        else
        {
          /* Set ADC analog watchdog thresholds value of both thresholds high and low */
          MODIFY_REG(hadc->Instance->LTR3_RES10,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006430:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800643a:	430a      	orrs	r2, r1
 800643c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
          MODIFY_REG(hadc->Instance->HTR3_RES11,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006448:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006452:	430a      	orrs	r2, r1
 8006454:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        MODIFY_REG(hadc->Instance->LTR3,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
        MODIFY_REG(hadc->Instance->HTR3,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
      }

#endif
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a25      	ldr	r2, [pc, #148]	@ (80064f4 <HAL_ADC_AnalogWDGConfig+0x718>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d11a      	bne.n	8006498 <HAL_ADC_AnalogWDGConfig+0x6bc>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006466:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4618      	mov	r0, r3
 8006474:	f7fe f9d7 	bl	8004826 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	7b1b      	ldrb	r3, [r3, #12]
 800647c:	2b01      	cmp	r3, #1
 800647e:	d105      	bne.n	800648c <HAL_ADC_AnalogWDGConfig+0x6b0>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4618      	mov	r0, r3
 8006486:	f7fe f9fa 	bl	800487e <LL_ADC_EnableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800648a:	e029      	b.n	80064e0 <HAL_ADC_AnalogWDGConfig+0x704>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4618      	mov	r0, r3
 8006492:	f7fe fa24 	bl	80048de <LL_ADC_DisableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006496:	e023      	b.n	80064e0 <HAL_ADC_AnalogWDGConfig+0x704>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800649c:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4618      	mov	r0, r3
 80064aa:	f7fe f9ca 	bl	8004842 <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	7b1b      	ldrb	r3, [r3, #12]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d105      	bne.n	80064c2 <HAL_ADC_AnalogWDGConfig+0x6e6>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7fe f9ef 	bl	800489e <LL_ADC_EnableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80064c0:	e00e      	b.n	80064e0 <HAL_ADC_AnalogWDGConfig+0x704>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7fe fa19 	bl	80048fe <LL_ADC_DisableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80064cc:	e008      	b.n	80064e0 <HAL_ADC_AnalogWDGConfig+0x704>
  /* If a conversion is on going on ADC group regular or injected, no update  */
  /* could be done on neither of the AWD configuration structure parameters.  */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064d2:	f043 0220 	orr.w	r2, r3, #32
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80064e8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3750      	adds	r7, #80	@ 0x50
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	001fffff 	.word	0x001fffff

080064f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4618      	mov	r0, r3
 8006506:	f7fe f921 	bl	800474c <LL_ADC_IsEnabled>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d16e      	bne.n	80065ee <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	689a      	ldr	r2, [r3, #8]
 8006516:	4b38      	ldr	r3, [pc, #224]	@ (80065f8 <ADC_Enable+0x100>)
 8006518:	4013      	ands	r3, r2
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00d      	beq.n	800653a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006522:	f043 0210 	orr.w	r2, r3, #16
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800652e:	f043 0201 	orr.w	r2, r3, #1
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e05a      	b.n	80065f0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4618      	mov	r0, r3
 8006540:	f7fe f8dc 	bl	80046fc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006544:	f7fd fd6a 	bl	800401c <HAL_GetTick>
 8006548:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a2b      	ldr	r2, [pc, #172]	@ (80065fc <ADC_Enable+0x104>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d004      	beq.n	800655e <ADC_Enable+0x66>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a29      	ldr	r2, [pc, #164]	@ (8006600 <ADC_Enable+0x108>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d101      	bne.n	8006562 <ADC_Enable+0x6a>
 800655e:	4b29      	ldr	r3, [pc, #164]	@ (8006604 <ADC_Enable+0x10c>)
 8006560:	e000      	b.n	8006564 <ADC_Enable+0x6c>
 8006562:	4b29      	ldr	r3, [pc, #164]	@ (8006608 <ADC_Enable+0x110>)
 8006564:	4618      	mov	r0, r3
 8006566:	f7fe f85f 	bl	8004628 <LL_ADC_GetMultimode>
 800656a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a23      	ldr	r2, [pc, #140]	@ (8006600 <ADC_Enable+0x108>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d002      	beq.n	800657c <ADC_Enable+0x84>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	e000      	b.n	800657e <ADC_Enable+0x86>
 800657c:	4b1f      	ldr	r3, [pc, #124]	@ (80065fc <ADC_Enable+0x104>)
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	6812      	ldr	r2, [r2, #0]
 8006582:	4293      	cmp	r3, r2
 8006584:	d02c      	beq.n	80065e0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d130      	bne.n	80065ee <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800658c:	e028      	b.n	80065e0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4618      	mov	r0, r3
 8006594:	f7fe f8da 	bl	800474c <LL_ADC_IsEnabled>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d104      	bne.n	80065a8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7fe f8aa 	bl	80046fc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80065a8:	f7fd fd38 	bl	800401c <HAL_GetTick>
 80065ac:	4602      	mov	r2, r0
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	2b02      	cmp	r3, #2
 80065b4:	d914      	bls.n	80065e0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0301 	and.w	r3, r3, #1
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d00d      	beq.n	80065e0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065c8:	f043 0210 	orr.w	r2, r3, #16
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80065d4:	f043 0201 	orr.w	r2, r3, #1
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e007      	b.n	80065f0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 0301 	and.w	r3, r3, #1
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d1cf      	bne.n	800658e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3710      	adds	r7, #16
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	8000003f 	.word	0x8000003f
 80065fc:	40022000 	.word	0x40022000
 8006600:	40022100 	.word	0x40022100
 8006604:	40022300 	.word	0x40022300
 8006608:	58026300 	.word	0x58026300

0800660c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4618      	mov	r0, r3
 800661a:	f7fe f8aa 	bl	8004772 <LL_ADC_IsDisableOngoing>
 800661e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4618      	mov	r0, r3
 8006626:	f7fe f891 	bl	800474c <LL_ADC_IsEnabled>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d047      	beq.n	80066c0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d144      	bne.n	80066c0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	f003 030d 	and.w	r3, r3, #13
 8006640:	2b01      	cmp	r3, #1
 8006642:	d10c      	bne.n	800665e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4618      	mov	r0, r3
 800664a:	f7fe f86b 	bl	8004724 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2203      	movs	r2, #3
 8006654:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006656:	f7fd fce1 	bl	800401c <HAL_GetTick>
 800665a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800665c:	e029      	b.n	80066b2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006662:	f043 0210 	orr.w	r2, r3, #16
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800666e:	f043 0201 	orr.w	r2, r3, #1
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e023      	b.n	80066c2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800667a:	f7fd fccf 	bl	800401c <HAL_GetTick>
 800667e:	4602      	mov	r2, r0
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	1ad3      	subs	r3, r2, r3
 8006684:	2b02      	cmp	r3, #2
 8006686:	d914      	bls.n	80066b2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f003 0301 	and.w	r3, r3, #1
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00d      	beq.n	80066b2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800669a:	f043 0210 	orr.w	r2, r3, #16
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80066a6:	f043 0201 	orr.w	r2, r3, #1
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e007      	b.n	80066c2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	f003 0301 	and.w	r3, r3, #1
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1dc      	bne.n	800667a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b084      	sub	sp, #16
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066d6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066dc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d14b      	bne.n	800677c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066e8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f003 0308 	and.w	r3, r3, #8
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d021      	beq.n	8006742 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4618      	mov	r0, r3
 8006704:	f7fd fe0a 	bl	800431c <LL_ADC_REG_IsTriggerSourceSWStart>
 8006708:	4603      	mov	r3, r0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d032      	beq.n	8006774 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d12b      	bne.n	8006774 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006720:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800672c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d11f      	bne.n	8006774 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006738:	f043 0201 	orr.w	r2, r3, #1
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	661a      	str	r2, [r3, #96]	@ 0x60
 8006740:	e018      	b.n	8006774 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	f003 0303 	and.w	r3, r3, #3
 800674c:	2b00      	cmp	r3, #0
 800674e:	d111      	bne.n	8006774 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006754:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006760:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006764:	2b00      	cmp	r3, #0
 8006766:	d105      	bne.n	8006774 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800676c:	f043 0201 	orr.w	r2, r3, #1
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006774:	68f8      	ldr	r0, [r7, #12]
 8006776:	f7fb f965 	bl	8001a44 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800677a:	e00e      	b.n	800679a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006780:	f003 0310 	and.w	r3, r3, #16
 8006784:	2b00      	cmp	r3, #0
 8006786:	d003      	beq.n	8006790 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f7fb f92f 	bl	80019ec <HAL_ADC_ErrorCallback>
}
 800678e:	e004      	b.n	800679a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	4798      	blx	r3
}
 800679a:	bf00      	nop
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80067a2:	b580      	push	{r7, lr}
 80067a4:	b084      	sub	sp, #16
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067ae:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f7fe fdd3 	bl	800535c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80067b6:	bf00      	nop
 80067b8:	3710      	adds	r7, #16
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80067be:	b580      	push	{r7, lr}
 80067c0:	b084      	sub	sp, #16
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067ca:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067d0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067dc:	f043 0204 	orr.w	r2, r3, #4
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80067e4:	68f8      	ldr	r0, [r7, #12]
 80067e6:	f7fb f901 	bl	80019ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80067ea:	bf00      	nop
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
	...

080067f4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a6c      	ldr	r2, [pc, #432]	@ (80069b4 <ADC_ConfigureBoostMode+0x1c0>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d004      	beq.n	8006810 <ADC_ConfigureBoostMode+0x1c>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a6b      	ldr	r2, [pc, #428]	@ (80069b8 <ADC_ConfigureBoostMode+0x1c4>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d109      	bne.n	8006824 <ADC_ConfigureBoostMode+0x30>
 8006810:	4b6a      	ldr	r3, [pc, #424]	@ (80069bc <ADC_ConfigureBoostMode+0x1c8>)
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006818:	2b00      	cmp	r3, #0
 800681a:	bf14      	ite	ne
 800681c:	2301      	movne	r3, #1
 800681e:	2300      	moveq	r3, #0
 8006820:	b2db      	uxtb	r3, r3
 8006822:	e008      	b.n	8006836 <ADC_ConfigureBoostMode+0x42>
 8006824:	4b66      	ldr	r3, [pc, #408]	@ (80069c0 <ADC_ConfigureBoostMode+0x1cc>)
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800682c:	2b00      	cmp	r3, #0
 800682e:	bf14      	ite	ne
 8006830:	2301      	movne	r3, #1
 8006832:	2300      	moveq	r3, #0
 8006834:	b2db      	uxtb	r3, r3
 8006836:	2b00      	cmp	r3, #0
 8006838:	d01c      	beq.n	8006874 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800683a:	f004 fda9 	bl	800b390 <HAL_RCC_GetHCLKFreq>
 800683e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006848:	d010      	beq.n	800686c <ADC_ConfigureBoostMode+0x78>
 800684a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800684e:	d873      	bhi.n	8006938 <ADC_ConfigureBoostMode+0x144>
 8006850:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006854:	d002      	beq.n	800685c <ADC_ConfigureBoostMode+0x68>
 8006856:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800685a:	d16d      	bne.n	8006938 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	0c1b      	lsrs	r3, r3, #16
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	fbb2 f3f3 	udiv	r3, r2, r3
 8006868:	60fb      	str	r3, [r7, #12]
        break;
 800686a:	e068      	b.n	800693e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	089b      	lsrs	r3, r3, #2
 8006870:	60fb      	str	r3, [r7, #12]
        break;
 8006872:	e064      	b.n	800693e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006874:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8006878:	f04f 0100 	mov.w	r1, #0
 800687c:	f005 ff84 	bl	800c788 <HAL_RCCEx_GetPeriphCLKFreq>
 8006880:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800688a:	d051      	beq.n	8006930 <ADC_ConfigureBoostMode+0x13c>
 800688c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8006890:	d854      	bhi.n	800693c <ADC_ConfigureBoostMode+0x148>
 8006892:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8006896:	d047      	beq.n	8006928 <ADC_ConfigureBoostMode+0x134>
 8006898:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800689c:	d84e      	bhi.n	800693c <ADC_ConfigureBoostMode+0x148>
 800689e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80068a2:	d03d      	beq.n	8006920 <ADC_ConfigureBoostMode+0x12c>
 80068a4:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80068a8:	d848      	bhi.n	800693c <ADC_ConfigureBoostMode+0x148>
 80068aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80068ae:	d033      	beq.n	8006918 <ADC_ConfigureBoostMode+0x124>
 80068b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80068b4:	d842      	bhi.n	800693c <ADC_ConfigureBoostMode+0x148>
 80068b6:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80068ba:	d029      	beq.n	8006910 <ADC_ConfigureBoostMode+0x11c>
 80068bc:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80068c0:	d83c      	bhi.n	800693c <ADC_ConfigureBoostMode+0x148>
 80068c2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80068c6:	d01a      	beq.n	80068fe <ADC_ConfigureBoostMode+0x10a>
 80068c8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80068cc:	d836      	bhi.n	800693c <ADC_ConfigureBoostMode+0x148>
 80068ce:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80068d2:	d014      	beq.n	80068fe <ADC_ConfigureBoostMode+0x10a>
 80068d4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80068d8:	d830      	bhi.n	800693c <ADC_ConfigureBoostMode+0x148>
 80068da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068de:	d00e      	beq.n	80068fe <ADC_ConfigureBoostMode+0x10a>
 80068e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068e4:	d82a      	bhi.n	800693c <ADC_ConfigureBoostMode+0x148>
 80068e6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80068ea:	d008      	beq.n	80068fe <ADC_ConfigureBoostMode+0x10a>
 80068ec:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80068f0:	d824      	bhi.n	800693c <ADC_ConfigureBoostMode+0x148>
 80068f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80068f6:	d002      	beq.n	80068fe <ADC_ConfigureBoostMode+0x10a>
 80068f8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80068fc:	d11e      	bne.n	800693c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	0c9b      	lsrs	r3, r3, #18
 8006904:	005b      	lsls	r3, r3, #1
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	fbb2 f3f3 	udiv	r3, r2, r3
 800690c:	60fb      	str	r3, [r7, #12]
        break;
 800690e:	e016      	b.n	800693e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	091b      	lsrs	r3, r3, #4
 8006914:	60fb      	str	r3, [r7, #12]
        break;
 8006916:	e012      	b.n	800693e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	095b      	lsrs	r3, r3, #5
 800691c:	60fb      	str	r3, [r7, #12]
        break;
 800691e:	e00e      	b.n	800693e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	099b      	lsrs	r3, r3, #6
 8006924:	60fb      	str	r3, [r7, #12]
        break;
 8006926:	e00a      	b.n	800693e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	09db      	lsrs	r3, r3, #7
 800692c:	60fb      	str	r3, [r7, #12]
        break;
 800692e:	e006      	b.n	800693e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	0a1b      	lsrs	r3, r3, #8
 8006934:	60fb      	str	r3, [r7, #12]
        break;
 8006936:	e002      	b.n	800693e <ADC_ConfigureBoostMode+0x14a>
        break;
 8006938:	bf00      	nop
 800693a:	e000      	b.n	800693e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800693c:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	085b      	lsrs	r3, r3, #1
 8006942:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	4a1f      	ldr	r2, [pc, #124]	@ (80069c4 <ADC_ConfigureBoostMode+0x1d0>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d808      	bhi.n	800695e <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	689a      	ldr	r2, [r3, #8]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800695a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800695c:	e025      	b.n	80069aa <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	4a19      	ldr	r2, [pc, #100]	@ (80069c8 <ADC_ConfigureBoostMode+0x1d4>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d80a      	bhi.n	800697c <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006978:	609a      	str	r2, [r3, #8]
}
 800697a:	e016      	b.n	80069aa <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	4a13      	ldr	r2, [pc, #76]	@ (80069cc <ADC_ConfigureBoostMode+0x1d8>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d80a      	bhi.n	800699a <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006996:	609a      	str	r2, [r3, #8]
}
 8006998:	e007      	b.n	80069aa <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	689a      	ldr	r2, [r3, #8]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80069a8:	609a      	str	r2, [r3, #8]
}
 80069aa:	bf00      	nop
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	40022000 	.word	0x40022000
 80069b8:	40022100 	.word	0x40022100
 80069bc:	40022300 	.word	0x40022300
 80069c0:	58026300 	.word	0x58026300
 80069c4:	005f5e10 	.word	0x005f5e10
 80069c8:	00bebc20 	.word	0x00bebc20
 80069cc:	017d7840 	.word	0x017d7840

080069d0 <LL_ADC_IsEnabled>:
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	f003 0301 	and.w	r3, r3, #1
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d101      	bne.n	80069e8 <LL_ADC_IsEnabled+0x18>
 80069e4:	2301      	movs	r3, #1
 80069e6:	e000      	b.n	80069ea <LL_ADC_IsEnabled+0x1a>
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	370c      	adds	r7, #12
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr
	...

080069f8 <LL_ADC_StartCalibration>:
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	689a      	ldr	r2, [r3, #8]
 8006a08:	4b09      	ldr	r3, [pc, #36]	@ (8006a30 <LL_ADC_StartCalibration+0x38>)
 8006a0a:	4013      	ands	r3, r2
 8006a0c:	68ba      	ldr	r2, [r7, #8]
 8006a0e:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	609a      	str	r2, [r3, #8]
}
 8006a24:	bf00      	nop
 8006a26:	3714      	adds	r7, #20
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr
 8006a30:	3ffeffc0 	.word	0x3ffeffc0

08006a34 <LL_ADC_IsCalibrationOnGoing>:
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a48:	d101      	bne.n	8006a4e <LL_ADC_IsCalibrationOnGoing+0x1a>
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e000      	b.n	8006a50 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <LL_ADC_REG_StartConversion>:
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	689a      	ldr	r2, [r3, #8]
 8006a68:	4b05      	ldr	r3, [pc, #20]	@ (8006a80 <LL_ADC_REG_StartConversion+0x24>)
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	f043 0204 	orr.w	r2, r3, #4
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	609a      	str	r2, [r3, #8]
}
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr
 8006a80:	7fffffc0 	.word	0x7fffffc0

08006a84 <LL_ADC_REG_IsConversionOngoing>:
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	f003 0304 	and.w	r3, r3, #4
 8006a94:	2b04      	cmp	r3, #4
 8006a96:	d101      	bne.n	8006a9c <LL_ADC_REG_IsConversionOngoing+0x18>
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e000      	b.n	8006a9e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	370c      	adds	r7, #12
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr
	...

08006aac <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b086      	sub	sp, #24
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d101      	bne.n	8006aca <HAL_ADCEx_Calibration_Start+0x1e>
 8006ac6:	2302      	movs	r3, #2
 8006ac8:	e04c      	b.n	8006b64 <HAL_ADCEx_Calibration_Start+0xb8>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2201      	movs	r2, #1
 8006ace:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f7ff fd9a 	bl	800660c <ADC_Disable>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006adc:	7dfb      	ldrb	r3, [r7, #23]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d135      	bne.n	8006b4e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006ae6:	4b21      	ldr	r3, [pc, #132]	@ (8006b6c <HAL_ADCEx_Calibration_Start+0xc0>)
 8006ae8:	4013      	ands	r3, r2
 8006aea:	f043 0202 	orr.w	r2, r3, #2
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	661a      	str	r2, [r3, #96]	@ 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	68b9      	ldr	r1, [r7, #8]
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7ff ff7c 	bl	80069f8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006b00:	e014      	b.n	8006b2c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	3301      	adds	r3, #1
 8006b06:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	4a19      	ldr	r2, [pc, #100]	@ (8006b70 <HAL_ADCEx_Calibration_Start+0xc4>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d30d      	bcc.n	8006b2c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b14:	f023 0312 	bic.w	r3, r3, #18
 8006b18:	f043 0210 	orr.w	r2, r3, #16
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e01b      	b.n	8006b64 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4618      	mov	r0, r3
 8006b32:	f7ff ff7f 	bl	8006a34 <LL_ADC_IsCalibrationOnGoing>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1e2      	bne.n	8006b02 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b40:	f023 0303 	bic.w	r3, r3, #3
 8006b44:	f043 0201 	orr.w	r2, r3, #1
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	661a      	str	r2, [r3, #96]	@ 0x60
 8006b4c:	e005      	b.n	8006b5a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b52:	f043 0210 	orr.w	r2, r3, #16
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8006b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3718      	adds	r7, #24
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	ffffeefd 	.word	0xffffeefd
 8006b70:	25c3f800 	.word	0x25c3f800

08006b74 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b0a2      	sub	sp, #136	@ 0x88
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4618      	mov	r0, r3
 8006b86:	f7ff ff7d 	bl	8006a84 <LL_ADC_REG_IsConversionOngoing>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d001      	beq.n	8006b94 <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 8006b90:	2302      	movs	r3, #2
 8006b92:	e08c      	b.n	8006cae <HAL_ADCEx_MultiModeStart_DMA+0x13a>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d101      	bne.n	8006ba2 <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 8006b9e:	2302      	movs	r3, #2
 8006ba0:	e085      	b.n	8006cae <HAL_ADCEx_MultiModeStart_DMA+0x13a>
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006baa:	2300      	movs	r3, #0
 8006bac:	673b      	str	r3, [r7, #112]	@ 0x70
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	677b      	str	r3, [r7, #116]	@ 0x74
    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a40      	ldr	r2, [pc, #256]	@ (8006cb8 <HAL_ADCEx_MultiModeStart_DMA+0x144>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d102      	bne.n	8006bc2 <HAL_ADCEx_MultiModeStart_DMA+0x4e>
 8006bbc:	4b3f      	ldr	r3, [pc, #252]	@ (8006cbc <HAL_ADCEx_MultiModeStart_DMA+0x148>)
 8006bbe:	613b      	str	r3, [r7, #16]
 8006bc0:	e001      	b.n	8006bc6 <HAL_ADCEx_MultiModeStart_DMA+0x52>
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	613b      	str	r3, [r7, #16]

    if (tmphadcSlave.Instance == NULL)
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d10b      	bne.n	8006be4 <HAL_ADCEx_MultiModeStart_DMA+0x70>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bd0:	f043 0220 	orr.w	r2, r3, #32
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	e064      	b.n	8006cae <HAL_ADCEx_MultiModeStart_DMA+0x13a>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 8006be4:	68f8      	ldr	r0, [r7, #12]
 8006be6:	f7ff fc87 	bl	80064f8 <ADC_Enable>
 8006bea:	4603      	mov	r3, r0
 8006bec:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    if (tmp_hal_status == HAL_OK)
 8006bf0:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d107      	bne.n	8006c08 <HAL_ADCEx_MultiModeStart_DMA+0x94>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8006bf8:	f107 0310 	add.w	r3, r7, #16
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f7ff fc7b 	bl	80064f8 <ADC_Enable>
 8006c02:	4603      	mov	r3, r0
 8006c04:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 8006c08:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d148      	bne.n	8006ca2 <HAL_ADCEx_MultiModeStart_DMA+0x12e>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006c14:	4b2a      	ldr	r3, [pc, #168]	@ (8006cc0 <HAL_ADCEx_MultiModeStart_DMA+0x14c>)
 8006c16:	4013      	ands	r3, r2
 8006c18:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	661a      	str	r2, [r3, #96]	@ 0x60
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c2a:	4a26      	ldr	r2, [pc, #152]	@ (8006cc4 <HAL_ADCEx_MultiModeStart_DMA+0x150>)
 8006c2c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c32:	4a25      	ldr	r2, [pc, #148]	@ (8006cc8 <HAL_ADCEx_MultiModeStart_DMA+0x154>)
 8006c34:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c3a:	4a24      	ldr	r2, [pc, #144]	@ (8006ccc <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 8006c3c:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a1d      	ldr	r2, [pc, #116]	@ (8006cb8 <HAL_ADCEx_MultiModeStart_DMA+0x144>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d004      	beq.n	8006c52 <HAL_ADCEx_MultiModeStart_DMA+0xde>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a1b      	ldr	r2, [pc, #108]	@ (8006cbc <HAL_ADCEx_MultiModeStart_DMA+0x148>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d101      	bne.n	8006c56 <HAL_ADCEx_MultiModeStart_DMA+0xe2>
 8006c52:	4b1f      	ldr	r3, [pc, #124]	@ (8006cd0 <HAL_ADCEx_MultiModeStart_DMA+0x15c>)
 8006c54:	e000      	b.n	8006c58 <HAL_ADCEx_MultiModeStart_DMA+0xe4>
 8006c56:	4b1f      	ldr	r3, [pc, #124]	@ (8006cd4 <HAL_ADCEx_MultiModeStart_DMA+0x160>)
 8006c58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	221c      	movs	r2, #28
 8006c62:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	685a      	ldr	r2, [r3, #4]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f042 0210 	orr.w	r2, r2, #16
 8006c7a:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8006c80:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006c84:	330c      	adds	r3, #12
 8006c86:	4619      	mov	r1, r3
 8006c88:	68ba      	ldr	r2, [r7, #8]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f000 feca 	bl	8007a24 <HAL_DMA_Start_IT>
 8006c90:	4603      	mov	r3, r0
 8006c92:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7ff fede 	bl	8006a5c <LL_ADC_REG_StartConversion>
 8006ca0:	e003      	b.n	8006caa <HAL_ADCEx_MultiModeStart_DMA+0x136>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    }

    /* Return function status */
    return tmp_hal_status;
 8006caa:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
  }
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3788      	adds	r7, #136	@ 0x88
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	40022000 	.word	0x40022000
 8006cbc:	40022100 	.word	0x40022100
 8006cc0:	fffff0fe 	.word	0xfffff0fe
 8006cc4:	080066cb 	.word	0x080066cb
 8006cc8:	080067a3 	.word	0x080067a3
 8006ccc:	080067bf 	.word	0x080067bf
 8006cd0:	40022300 	.word	0x40022300
 8006cd4:	58026300 	.word	0x58026300

08006cd8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b083      	sub	sp, #12
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006d3c:	b590      	push	{r4, r7, lr}
 8006d3e:	b0a3      	sub	sp, #140	@ 0x8c
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006d46:	2300      	movs	r3, #0
 8006d48:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d101      	bne.n	8006d5a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006d56:	2302      	movs	r3, #2
 8006d58:	e0c1      	b.n	8006ede <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006d62:	2300      	movs	r3, #0
 8006d64:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8006d66:	2300      	movs	r3, #0
 8006d68:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a5e      	ldr	r2, [pc, #376]	@ (8006ee8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d102      	bne.n	8006d7a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006d74:	4b5d      	ldr	r3, [pc, #372]	@ (8006eec <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006d76:	60fb      	str	r3, [r7, #12]
 8006d78:	e001      	b.n	8006d7e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d10b      	bne.n	8006d9c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d88:	f043 0220 	orr.w	r2, r3, #32
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	e0a0      	b.n	8006ede <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7ff fe70 	bl	8006a84 <LL_ADC_REG_IsConversionOngoing>
 8006da4:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4618      	mov	r0, r3
 8006dae:	f7ff fe69 	bl	8006a84 <LL_ADC_REG_IsConversionOngoing>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f040 8081 	bne.w	8006ebc <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006dba:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d17c      	bne.n	8006ebc <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a48      	ldr	r2, [pc, #288]	@ (8006ee8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d004      	beq.n	8006dd6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a46      	ldr	r2, [pc, #280]	@ (8006eec <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d101      	bne.n	8006dda <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8006dd6:	4b46      	ldr	r3, [pc, #280]	@ (8006ef0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006dd8:	e000      	b.n	8006ddc <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8006dda:	4b46      	ldr	r3, [pc, #280]	@ (8006ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006ddc:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d039      	beq.n	8006e5a <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006de6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	431a      	orrs	r2, r3
 8006df4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006df6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a3a      	ldr	r2, [pc, #232]	@ (8006ee8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d004      	beq.n	8006e0c <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a39      	ldr	r2, [pc, #228]	@ (8006eec <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d10e      	bne.n	8006e2a <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8006e0c:	4836      	ldr	r0, [pc, #216]	@ (8006ee8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006e0e:	f7ff fddf 	bl	80069d0 <LL_ADC_IsEnabled>
 8006e12:	4604      	mov	r4, r0
 8006e14:	4835      	ldr	r0, [pc, #212]	@ (8006eec <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006e16:	f7ff fddb 	bl	80069d0 <LL_ADC_IsEnabled>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	4323      	orrs	r3, r4
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	bf0c      	ite	eq
 8006e22:	2301      	moveq	r3, #1
 8006e24:	2300      	movne	r3, #0
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	e008      	b.n	8006e3c <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8006e2a:	4833      	ldr	r0, [pc, #204]	@ (8006ef8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8006e2c:	f7ff fdd0 	bl	80069d0 <LL_ADC_IsEnabled>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	bf0c      	ite	eq
 8006e36:	2301      	moveq	r3, #1
 8006e38:	2300      	movne	r3, #0
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d047      	beq.n	8006ed0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006e40:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006e42:	689a      	ldr	r2, [r3, #8]
 8006e44:	4b2d      	ldr	r3, [pc, #180]	@ (8006efc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006e46:	4013      	ands	r3, r2
 8006e48:	683a      	ldr	r2, [r7, #0]
 8006e4a:	6811      	ldr	r1, [r2, #0]
 8006e4c:	683a      	ldr	r2, [r7, #0]
 8006e4e:	6892      	ldr	r2, [r2, #8]
 8006e50:	430a      	orrs	r2, r1
 8006e52:	431a      	orrs	r2, r3
 8006e54:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006e56:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006e58:	e03a      	b.n	8006ed0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006e5a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006e62:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006e64:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a1f      	ldr	r2, [pc, #124]	@ (8006ee8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d004      	beq.n	8006e7a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a1d      	ldr	r2, [pc, #116]	@ (8006eec <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d10e      	bne.n	8006e98 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8006e7a:	481b      	ldr	r0, [pc, #108]	@ (8006ee8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006e7c:	f7ff fda8 	bl	80069d0 <LL_ADC_IsEnabled>
 8006e80:	4604      	mov	r4, r0
 8006e82:	481a      	ldr	r0, [pc, #104]	@ (8006eec <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006e84:	f7ff fda4 	bl	80069d0 <LL_ADC_IsEnabled>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	4323      	orrs	r3, r4
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	bf0c      	ite	eq
 8006e90:	2301      	moveq	r3, #1
 8006e92:	2300      	movne	r3, #0
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	e008      	b.n	8006eaa <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8006e98:	4817      	ldr	r0, [pc, #92]	@ (8006ef8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8006e9a:	f7ff fd99 	bl	80069d0 <LL_ADC_IsEnabled>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	bf0c      	ite	eq
 8006ea4:	2301      	moveq	r3, #1
 8006ea6:	2300      	movne	r3, #0
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d010      	beq.n	8006ed0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006eae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006eb0:	689a      	ldr	r2, [r3, #8]
 8006eb2:	4b12      	ldr	r3, [pc, #72]	@ (8006efc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006eb8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006eba:	e009      	b.n	8006ed0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ec0:	f043 0220 	orr.w	r2, r3, #32
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8006ece:	e000      	b.n	8006ed2 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006ed0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8006eda:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	378c      	adds	r7, #140	@ 0x8c
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd90      	pop	{r4, r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	40022000 	.word	0x40022000
 8006eec:	40022100 	.word	0x40022100
 8006ef0:	40022300 	.word	0x40022300
 8006ef4:	58026300 	.word	0x58026300
 8006ef8:	58026000 	.word	0x58026000
 8006efc:	fffff0e0 	.word	0xfffff0e0

08006f00 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b088      	sub	sp, #32
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d102      	bne.n	8006f1c <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	77fb      	strb	r3, [r7, #31]
 8006f1a:	e10e      	b.n	800713a <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f2a:	d102      	bne.n	8006f32 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	77fb      	strb	r3, [r7, #31]
 8006f30:	e103      	b.n	800713a <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d109      	bne.n	8006f52 <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f7fc fb6b 	bl	8003628 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f003 0304 	and.w	r3, r3, #4
 8006f5c:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8006f66:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 8006f6c:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 8006f72:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 8006f78:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	4b6e      	ldr	r3, [pc, #440]	@ (8007144 <HAL_COMP_Init+0x244>)
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	6812      	ldr	r2, [r2, #0]
 8006f90:	6979      	ldr	r1, [r7, #20]
 8006f92:	430b      	orrs	r3, r1
 8006f94:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	2b10      	cmp	r3, #16
 8006f9c:	d108      	bne.n	8006fb0 <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f042 0210 	orr.w	r2, r2, #16
 8006fac:	601a      	str	r2, [r3, #0]
 8006fae:	e007      	b.n	8006fc0 <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f022 0210 	bic.w	r2, r2, #16
 8006fbe:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 0304 	and.w	r3, r3, #4
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d016      	beq.n	8006ffc <HAL_COMP_Init+0xfc>
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d013      	beq.n	8006ffc <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006fd4:	4b5c      	ldr	r3, [pc, #368]	@ (8007148 <HAL_COMP_Init+0x248>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	099b      	lsrs	r3, r3, #6
 8006fda:	4a5c      	ldr	r2, [pc, #368]	@ (800714c <HAL_COMP_Init+0x24c>)
 8006fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8006fe0:	099b      	lsrs	r3, r3, #6
 8006fe2:	1c5a      	adds	r2, r3, #1
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	4413      	add	r3, r2
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 8006fee:	e002      	b.n	8006ff6 <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d1f9      	bne.n	8006ff0 <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a53      	ldr	r2, [pc, #332]	@ (8007150 <HAL_COMP_Init+0x250>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d102      	bne.n	800700c <HAL_COMP_Init+0x10c>
 8007006:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800700a:	e001      	b.n	8007010 <HAL_COMP_Init+0x110>
 800700c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007010:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a1b      	ldr	r3, [r3, #32]
 8007016:	f003 0303 	and.w	r3, r3, #3
 800701a:	2b00      	cmp	r3, #0
 800701c:	d06d      	beq.n	80070fa <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a1b      	ldr	r3, [r3, #32]
 8007022:	f003 0310 	and.w	r3, r3, #16
 8007026:	2b00      	cmp	r3, #0
 8007028:	d008      	beq.n	800703c <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 800702a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	4313      	orrs	r3, r2
 8007038:	600b      	str	r3, [r1, #0]
 800703a:	e008      	b.n	800704e <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 800703c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	43db      	mvns	r3, r3
 8007046:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800704a:	4013      	ands	r3, r2
 800704c:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a1b      	ldr	r3, [r3, #32]
 8007052:	f003 0320 	and.w	r3, r3, #32
 8007056:	2b00      	cmp	r3, #0
 8007058:	d008      	beq.n	800706c <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 800705a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800705e:	685a      	ldr	r2, [r3, #4]
 8007060:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	4313      	orrs	r3, r2
 8007068:	604b      	str	r3, [r1, #4]
 800706a:	e008      	b.n	800707e <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 800706c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007070:	685a      	ldr	r2, [r3, #4]
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	43db      	mvns	r3, r3
 8007076:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800707a:	4013      	ands	r3, r2
 800707c:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 800707e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6a1b      	ldr	r3, [r3, #32]
 800708c:	f003 0302 	and.w	r3, r3, #2
 8007090:	2b00      	cmp	r3, #0
 8007092:	d00a      	beq.n	80070aa <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 8007094:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007098:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800709c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	4313      	orrs	r3, r2
 80070a4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 80070a8:	e00a      	b.n	80070c0 <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 80070aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80070ae:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	43db      	mvns	r3, r3
 80070b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80070ba:	4013      	ands	r3, r2
 80070bc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6a1b      	ldr	r3, [r3, #32]
 80070c4:	f003 0301 	and.w	r3, r3, #1
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d00a      	beq.n	80070e2 <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 80070cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80070d0:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80070d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	4313      	orrs	r3, r2
 80070dc:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 80070e0:	e021      	b.n	8007126 <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 80070e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80070e6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	43db      	mvns	r3, r3
 80070ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80070f2:	4013      	ands	r3, r2
 80070f4:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 80070f8:	e015      	b.n	8007126 <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 80070fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80070fe:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	43db      	mvns	r3, r3
 8007106:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800710a:	4013      	ands	r3, r2
 800710c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 8007110:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007114:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	43db      	mvns	r3, r3
 800711c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007120:	4013      	ands	r3, r2
 8007122:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800712c:	b2db      	uxtb	r3, r3
 800712e:	2b00      	cmp	r3, #0
 8007130:	d103      	bne.n	800713a <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2201      	movs	r2, #1
 8007136:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
   
  }
  
  return status;
 800713a:	7ffb      	ldrb	r3, [r7, #31]
}
 800713c:	4618      	mov	r0, r3
 800713e:	3720      	adds	r7, #32
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}
 8007144:	f0e8cce1 	.word	0xf0e8cce1
 8007148:	24000038 	.word	0x24000038
 800714c:	053e2d63 	.word	0x053e2d63
 8007150:	5800380c 	.word	0x5800380c

08007154 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007154:	b480      	push	{r7}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f003 0307 	and.w	r3, r3, #7
 8007162:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007164:	4b0b      	ldr	r3, [pc, #44]	@ (8007194 <__NVIC_SetPriorityGrouping+0x40>)
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800716a:	68ba      	ldr	r2, [r7, #8]
 800716c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007170:	4013      	ands	r3, r2
 8007172:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800717c:	4b06      	ldr	r3, [pc, #24]	@ (8007198 <__NVIC_SetPriorityGrouping+0x44>)
 800717e:	4313      	orrs	r3, r2
 8007180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007182:	4a04      	ldr	r2, [pc, #16]	@ (8007194 <__NVIC_SetPriorityGrouping+0x40>)
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	60d3      	str	r3, [r2, #12]
}
 8007188:	bf00      	nop
 800718a:	3714      	adds	r7, #20
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr
 8007194:	e000ed00 	.word	0xe000ed00
 8007198:	05fa0000 	.word	0x05fa0000

0800719c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800719c:	b480      	push	{r7}
 800719e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80071a0:	4b04      	ldr	r3, [pc, #16]	@ (80071b4 <__NVIC_GetPriorityGrouping+0x18>)
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	0a1b      	lsrs	r3, r3, #8
 80071a6:	f003 0307 	and.w	r3, r3, #7
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr
 80071b4:	e000ed00 	.word	0xe000ed00

080071b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	4603      	mov	r3, r0
 80071c0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80071c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	db0b      	blt.n	80071e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80071ca:	88fb      	ldrh	r3, [r7, #6]
 80071cc:	f003 021f 	and.w	r2, r3, #31
 80071d0:	4907      	ldr	r1, [pc, #28]	@ (80071f0 <__NVIC_EnableIRQ+0x38>)
 80071d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071d6:	095b      	lsrs	r3, r3, #5
 80071d8:	2001      	movs	r0, #1
 80071da:	fa00 f202 	lsl.w	r2, r0, r2
 80071de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80071e2:	bf00      	nop
 80071e4:	370c      	adds	r7, #12
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop
 80071f0:	e000e100 	.word	0xe000e100

080071f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	4603      	mov	r3, r0
 80071fc:	6039      	str	r1, [r7, #0]
 80071fe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007200:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007204:	2b00      	cmp	r3, #0
 8007206:	db0a      	blt.n	800721e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	b2da      	uxtb	r2, r3
 800720c:	490c      	ldr	r1, [pc, #48]	@ (8007240 <__NVIC_SetPriority+0x4c>)
 800720e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007212:	0112      	lsls	r2, r2, #4
 8007214:	b2d2      	uxtb	r2, r2
 8007216:	440b      	add	r3, r1
 8007218:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800721c:	e00a      	b.n	8007234 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	b2da      	uxtb	r2, r3
 8007222:	4908      	ldr	r1, [pc, #32]	@ (8007244 <__NVIC_SetPriority+0x50>)
 8007224:	88fb      	ldrh	r3, [r7, #6]
 8007226:	f003 030f 	and.w	r3, r3, #15
 800722a:	3b04      	subs	r3, #4
 800722c:	0112      	lsls	r2, r2, #4
 800722e:	b2d2      	uxtb	r2, r2
 8007230:	440b      	add	r3, r1
 8007232:	761a      	strb	r2, [r3, #24]
}
 8007234:	bf00      	nop
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr
 8007240:	e000e100 	.word	0xe000e100
 8007244:	e000ed00 	.word	0xe000ed00

08007248 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007248:	b480      	push	{r7}
 800724a:	b089      	sub	sp, #36	@ 0x24
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f003 0307 	and.w	r3, r3, #7
 800725a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	f1c3 0307 	rsb	r3, r3, #7
 8007262:	2b04      	cmp	r3, #4
 8007264:	bf28      	it	cs
 8007266:	2304      	movcs	r3, #4
 8007268:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	3304      	adds	r3, #4
 800726e:	2b06      	cmp	r3, #6
 8007270:	d902      	bls.n	8007278 <NVIC_EncodePriority+0x30>
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	3b03      	subs	r3, #3
 8007276:	e000      	b.n	800727a <NVIC_EncodePriority+0x32>
 8007278:	2300      	movs	r3, #0
 800727a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800727c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	fa02 f303 	lsl.w	r3, r2, r3
 8007286:	43da      	mvns	r2, r3
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	401a      	ands	r2, r3
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007290:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	fa01 f303 	lsl.w	r3, r1, r3
 800729a:	43d9      	mvns	r1, r3
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80072a0:	4313      	orrs	r3, r2
         );
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3724      	adds	r7, #36	@ 0x24
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
	...

080072b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	3b01      	subs	r3, #1
 80072bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80072c0:	d301      	bcc.n	80072c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80072c2:	2301      	movs	r3, #1
 80072c4:	e00f      	b.n	80072e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80072c6:	4a0a      	ldr	r2, [pc, #40]	@ (80072f0 <SysTick_Config+0x40>)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	3b01      	subs	r3, #1
 80072cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80072ce:	210f      	movs	r1, #15
 80072d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80072d4:	f7ff ff8e 	bl	80071f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80072d8:	4b05      	ldr	r3, [pc, #20]	@ (80072f0 <SysTick_Config+0x40>)
 80072da:	2200      	movs	r2, #0
 80072dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80072de:	4b04      	ldr	r3, [pc, #16]	@ (80072f0 <SysTick_Config+0x40>)
 80072e0:	2207      	movs	r2, #7
 80072e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3708      	adds	r7, #8
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	e000e010 	.word	0xe000e010

080072f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f7ff ff29 	bl	8007154 <__NVIC_SetPriorityGrouping>
}
 8007302:	bf00      	nop
 8007304:	3708      	adds	r7, #8
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}

0800730a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800730a:	b580      	push	{r7, lr}
 800730c:	b086      	sub	sp, #24
 800730e:	af00      	add	r7, sp, #0
 8007310:	4603      	mov	r3, r0
 8007312:	60b9      	str	r1, [r7, #8]
 8007314:	607a      	str	r2, [r7, #4]
 8007316:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007318:	f7ff ff40 	bl	800719c <__NVIC_GetPriorityGrouping>
 800731c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	68b9      	ldr	r1, [r7, #8]
 8007322:	6978      	ldr	r0, [r7, #20]
 8007324:	f7ff ff90 	bl	8007248 <NVIC_EncodePriority>
 8007328:	4602      	mov	r2, r0
 800732a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800732e:	4611      	mov	r1, r2
 8007330:	4618      	mov	r0, r3
 8007332:	f7ff ff5f 	bl	80071f4 <__NVIC_SetPriority>
}
 8007336:	bf00      	nop
 8007338:	3718      	adds	r7, #24
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b082      	sub	sp, #8
 8007342:	af00      	add	r7, sp, #0
 8007344:	4603      	mov	r3, r0
 8007346:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007348:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800734c:	4618      	mov	r0, r3
 800734e:	f7ff ff33 	bl	80071b8 <__NVIC_EnableIRQ>
}
 8007352:	bf00      	nop
 8007354:	3708      	adds	r7, #8
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}

0800735a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800735a:	b580      	push	{r7, lr}
 800735c:	b082      	sub	sp, #8
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f7ff ffa4 	bl	80072b0 <SysTick_Config>
 8007368:	4603      	mov	r3, r0
}
 800736a:	4618      	mov	r0, r3
 800736c:	3708      	adds	r7, #8
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
	...

08007374 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b086      	sub	sp, #24
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800737c:	f7fc fe4e 	bl	800401c <HAL_GetTick>
 8007380:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d101      	bne.n	800738c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	e312      	b.n	80079b2 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a66      	ldr	r2, [pc, #408]	@ (800752c <HAL_DMA_Init+0x1b8>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d04a      	beq.n	800742c <HAL_DMA_Init+0xb8>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a65      	ldr	r2, [pc, #404]	@ (8007530 <HAL_DMA_Init+0x1bc>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d045      	beq.n	800742c <HAL_DMA_Init+0xb8>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a63      	ldr	r2, [pc, #396]	@ (8007534 <HAL_DMA_Init+0x1c0>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d040      	beq.n	800742c <HAL_DMA_Init+0xb8>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a62      	ldr	r2, [pc, #392]	@ (8007538 <HAL_DMA_Init+0x1c4>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d03b      	beq.n	800742c <HAL_DMA_Init+0xb8>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a60      	ldr	r2, [pc, #384]	@ (800753c <HAL_DMA_Init+0x1c8>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d036      	beq.n	800742c <HAL_DMA_Init+0xb8>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a5f      	ldr	r2, [pc, #380]	@ (8007540 <HAL_DMA_Init+0x1cc>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d031      	beq.n	800742c <HAL_DMA_Init+0xb8>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a5d      	ldr	r2, [pc, #372]	@ (8007544 <HAL_DMA_Init+0x1d0>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d02c      	beq.n	800742c <HAL_DMA_Init+0xb8>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a5c      	ldr	r2, [pc, #368]	@ (8007548 <HAL_DMA_Init+0x1d4>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d027      	beq.n	800742c <HAL_DMA_Init+0xb8>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a5a      	ldr	r2, [pc, #360]	@ (800754c <HAL_DMA_Init+0x1d8>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d022      	beq.n	800742c <HAL_DMA_Init+0xb8>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a59      	ldr	r2, [pc, #356]	@ (8007550 <HAL_DMA_Init+0x1dc>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d01d      	beq.n	800742c <HAL_DMA_Init+0xb8>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a57      	ldr	r2, [pc, #348]	@ (8007554 <HAL_DMA_Init+0x1e0>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d018      	beq.n	800742c <HAL_DMA_Init+0xb8>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a56      	ldr	r2, [pc, #344]	@ (8007558 <HAL_DMA_Init+0x1e4>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d013      	beq.n	800742c <HAL_DMA_Init+0xb8>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a54      	ldr	r2, [pc, #336]	@ (800755c <HAL_DMA_Init+0x1e8>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d00e      	beq.n	800742c <HAL_DMA_Init+0xb8>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a53      	ldr	r2, [pc, #332]	@ (8007560 <HAL_DMA_Init+0x1ec>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d009      	beq.n	800742c <HAL_DMA_Init+0xb8>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a51      	ldr	r2, [pc, #324]	@ (8007564 <HAL_DMA_Init+0x1f0>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d004      	beq.n	800742c <HAL_DMA_Init+0xb8>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a50      	ldr	r2, [pc, #320]	@ (8007568 <HAL_DMA_Init+0x1f4>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d101      	bne.n	8007430 <HAL_DMA_Init+0xbc>
 800742c:	2301      	movs	r3, #1
 800742e:	e000      	b.n	8007432 <HAL_DMA_Init+0xbe>
 8007430:	2300      	movs	r3, #0
 8007432:	2b00      	cmp	r3, #0
 8007434:	f000 813c 	beq.w	80076b0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2202      	movs	r2, #2
 800743c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a37      	ldr	r2, [pc, #220]	@ (800752c <HAL_DMA_Init+0x1b8>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d04a      	beq.n	80074e8 <HAL_DMA_Init+0x174>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a36      	ldr	r2, [pc, #216]	@ (8007530 <HAL_DMA_Init+0x1bc>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d045      	beq.n	80074e8 <HAL_DMA_Init+0x174>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a34      	ldr	r2, [pc, #208]	@ (8007534 <HAL_DMA_Init+0x1c0>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d040      	beq.n	80074e8 <HAL_DMA_Init+0x174>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a33      	ldr	r2, [pc, #204]	@ (8007538 <HAL_DMA_Init+0x1c4>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d03b      	beq.n	80074e8 <HAL_DMA_Init+0x174>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a31      	ldr	r2, [pc, #196]	@ (800753c <HAL_DMA_Init+0x1c8>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d036      	beq.n	80074e8 <HAL_DMA_Init+0x174>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a30      	ldr	r2, [pc, #192]	@ (8007540 <HAL_DMA_Init+0x1cc>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d031      	beq.n	80074e8 <HAL_DMA_Init+0x174>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a2e      	ldr	r2, [pc, #184]	@ (8007544 <HAL_DMA_Init+0x1d0>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d02c      	beq.n	80074e8 <HAL_DMA_Init+0x174>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a2d      	ldr	r2, [pc, #180]	@ (8007548 <HAL_DMA_Init+0x1d4>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d027      	beq.n	80074e8 <HAL_DMA_Init+0x174>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a2b      	ldr	r2, [pc, #172]	@ (800754c <HAL_DMA_Init+0x1d8>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d022      	beq.n	80074e8 <HAL_DMA_Init+0x174>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a2a      	ldr	r2, [pc, #168]	@ (8007550 <HAL_DMA_Init+0x1dc>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d01d      	beq.n	80074e8 <HAL_DMA_Init+0x174>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a28      	ldr	r2, [pc, #160]	@ (8007554 <HAL_DMA_Init+0x1e0>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d018      	beq.n	80074e8 <HAL_DMA_Init+0x174>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a27      	ldr	r2, [pc, #156]	@ (8007558 <HAL_DMA_Init+0x1e4>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d013      	beq.n	80074e8 <HAL_DMA_Init+0x174>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a25      	ldr	r2, [pc, #148]	@ (800755c <HAL_DMA_Init+0x1e8>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d00e      	beq.n	80074e8 <HAL_DMA_Init+0x174>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a24      	ldr	r2, [pc, #144]	@ (8007560 <HAL_DMA_Init+0x1ec>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d009      	beq.n	80074e8 <HAL_DMA_Init+0x174>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a22      	ldr	r2, [pc, #136]	@ (8007564 <HAL_DMA_Init+0x1f0>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d004      	beq.n	80074e8 <HAL_DMA_Init+0x174>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a21      	ldr	r2, [pc, #132]	@ (8007568 <HAL_DMA_Init+0x1f4>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d108      	bne.n	80074fa <HAL_DMA_Init+0x186>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f022 0201 	bic.w	r2, r2, #1
 80074f6:	601a      	str	r2, [r3, #0]
 80074f8:	e007      	b.n	800750a <HAL_DMA_Init+0x196>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f022 0201 	bic.w	r2, r2, #1
 8007508:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800750a:	e02f      	b.n	800756c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800750c:	f7fc fd86 	bl	800401c <HAL_GetTick>
 8007510:	4602      	mov	r2, r0
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	2b05      	cmp	r3, #5
 8007518:	d928      	bls.n	800756c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2220      	movs	r2, #32
 800751e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2203      	movs	r2, #3
 8007524:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8007528:	2301      	movs	r3, #1
 800752a:	e242      	b.n	80079b2 <HAL_DMA_Init+0x63e>
 800752c:	40020010 	.word	0x40020010
 8007530:	40020028 	.word	0x40020028
 8007534:	40020040 	.word	0x40020040
 8007538:	40020058 	.word	0x40020058
 800753c:	40020070 	.word	0x40020070
 8007540:	40020088 	.word	0x40020088
 8007544:	400200a0 	.word	0x400200a0
 8007548:	400200b8 	.word	0x400200b8
 800754c:	40020410 	.word	0x40020410
 8007550:	40020428 	.word	0x40020428
 8007554:	40020440 	.word	0x40020440
 8007558:	40020458 	.word	0x40020458
 800755c:	40020470 	.word	0x40020470
 8007560:	40020488 	.word	0x40020488
 8007564:	400204a0 	.word	0x400204a0
 8007568:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 0301 	and.w	r3, r3, #1
 8007576:	2b00      	cmp	r3, #0
 8007578:	d1c8      	bne.n	800750c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007582:	697a      	ldr	r2, [r7, #20]
 8007584:	4b83      	ldr	r3, [pc, #524]	@ (8007794 <HAL_DMA_Init+0x420>)
 8007586:	4013      	ands	r3, r2
 8007588:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8007592:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	691b      	ldr	r3, [r3, #16]
 8007598:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800759e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	699b      	ldr	r3, [r3, #24]
 80075a4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80075aa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6a1b      	ldr	r3, [r3, #32]
 80075b0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80075b2:	697a      	ldr	r2, [r7, #20]
 80075b4:	4313      	orrs	r3, r2
 80075b6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075bc:	2b04      	cmp	r3, #4
 80075be:	d107      	bne.n	80075d0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075c8:	4313      	orrs	r3, r2
 80075ca:	697a      	ldr	r2, [r7, #20]
 80075cc:	4313      	orrs	r3, r2
 80075ce:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	2b28      	cmp	r3, #40	@ 0x28
 80075d6:	d903      	bls.n	80075e0 <HAL_DMA_Init+0x26c>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80075de:	d91f      	bls.n	8007620 <HAL_DMA_Init+0x2ac>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	2b3e      	cmp	r3, #62	@ 0x3e
 80075e6:	d903      	bls.n	80075f0 <HAL_DMA_Init+0x27c>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	2b42      	cmp	r3, #66	@ 0x42
 80075ee:	d917      	bls.n	8007620 <HAL_DMA_Init+0x2ac>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	2b46      	cmp	r3, #70	@ 0x46
 80075f6:	d903      	bls.n	8007600 <HAL_DMA_Init+0x28c>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	2b48      	cmp	r3, #72	@ 0x48
 80075fe:	d90f      	bls.n	8007620 <HAL_DMA_Init+0x2ac>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	2b4e      	cmp	r3, #78	@ 0x4e
 8007606:	d903      	bls.n	8007610 <HAL_DMA_Init+0x29c>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	2b52      	cmp	r3, #82	@ 0x52
 800760e:	d907      	bls.n	8007620 <HAL_DMA_Init+0x2ac>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	2b73      	cmp	r3, #115	@ 0x73
 8007616:	d905      	bls.n	8007624 <HAL_DMA_Init+0x2b0>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	2b77      	cmp	r3, #119	@ 0x77
 800761e:	d801      	bhi.n	8007624 <HAL_DMA_Init+0x2b0>
 8007620:	2301      	movs	r3, #1
 8007622:	e000      	b.n	8007626 <HAL_DMA_Init+0x2b2>
 8007624:	2300      	movs	r3, #0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d003      	beq.n	8007632 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007630:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	697a      	ldr	r2, [r7, #20]
 8007638:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	695b      	ldr	r3, [r3, #20]
 8007640:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	f023 0307 	bic.w	r3, r3, #7
 8007648:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800764e:	697a      	ldr	r2, [r7, #20]
 8007650:	4313      	orrs	r3, r2
 8007652:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007658:	2b04      	cmp	r3, #4
 800765a:	d117      	bne.n	800768c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007660:	697a      	ldr	r2, [r7, #20]
 8007662:	4313      	orrs	r3, r2
 8007664:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00e      	beq.n	800768c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f001 fdca 	bl	8009208 <DMA_CheckFifoParam>
 8007674:	4603      	mov	r3, r0
 8007676:	2b00      	cmp	r3, #0
 8007678:	d008      	beq.n	800768c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2240      	movs	r2, #64	@ 0x40
 800767e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2201      	movs	r2, #1
 8007684:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	e192      	b.n	80079b2 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	697a      	ldr	r2, [r7, #20]
 8007692:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f001 fd05 	bl	80090a4 <DMA_CalcBaseAndBitshift>
 800769a:	4603      	mov	r3, r0
 800769c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076a2:	f003 031f 	and.w	r3, r3, #31
 80076a6:	223f      	movs	r2, #63	@ 0x3f
 80076a8:	409a      	lsls	r2, r3
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	609a      	str	r2, [r3, #8]
 80076ae:	e0c8      	b.n	8007842 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a38      	ldr	r2, [pc, #224]	@ (8007798 <HAL_DMA_Init+0x424>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d022      	beq.n	8007700 <HAL_DMA_Init+0x38c>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a37      	ldr	r2, [pc, #220]	@ (800779c <HAL_DMA_Init+0x428>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d01d      	beq.n	8007700 <HAL_DMA_Init+0x38c>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a35      	ldr	r2, [pc, #212]	@ (80077a0 <HAL_DMA_Init+0x42c>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d018      	beq.n	8007700 <HAL_DMA_Init+0x38c>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a34      	ldr	r2, [pc, #208]	@ (80077a4 <HAL_DMA_Init+0x430>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d013      	beq.n	8007700 <HAL_DMA_Init+0x38c>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a32      	ldr	r2, [pc, #200]	@ (80077a8 <HAL_DMA_Init+0x434>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d00e      	beq.n	8007700 <HAL_DMA_Init+0x38c>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a31      	ldr	r2, [pc, #196]	@ (80077ac <HAL_DMA_Init+0x438>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d009      	beq.n	8007700 <HAL_DMA_Init+0x38c>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a2f      	ldr	r2, [pc, #188]	@ (80077b0 <HAL_DMA_Init+0x43c>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d004      	beq.n	8007700 <HAL_DMA_Init+0x38c>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a2e      	ldr	r2, [pc, #184]	@ (80077b4 <HAL_DMA_Init+0x440>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d101      	bne.n	8007704 <HAL_DMA_Init+0x390>
 8007700:	2301      	movs	r3, #1
 8007702:	e000      	b.n	8007706 <HAL_DMA_Init+0x392>
 8007704:	2300      	movs	r3, #0
 8007706:	2b00      	cmp	r3, #0
 8007708:	f000 8092 	beq.w	8007830 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a21      	ldr	r2, [pc, #132]	@ (8007798 <HAL_DMA_Init+0x424>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d021      	beq.n	800775a <HAL_DMA_Init+0x3e6>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a20      	ldr	r2, [pc, #128]	@ (800779c <HAL_DMA_Init+0x428>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d01c      	beq.n	800775a <HAL_DMA_Init+0x3e6>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a1e      	ldr	r2, [pc, #120]	@ (80077a0 <HAL_DMA_Init+0x42c>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d017      	beq.n	800775a <HAL_DMA_Init+0x3e6>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a1d      	ldr	r2, [pc, #116]	@ (80077a4 <HAL_DMA_Init+0x430>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d012      	beq.n	800775a <HAL_DMA_Init+0x3e6>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a1b      	ldr	r2, [pc, #108]	@ (80077a8 <HAL_DMA_Init+0x434>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d00d      	beq.n	800775a <HAL_DMA_Init+0x3e6>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a1a      	ldr	r2, [pc, #104]	@ (80077ac <HAL_DMA_Init+0x438>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d008      	beq.n	800775a <HAL_DMA_Init+0x3e6>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a18      	ldr	r2, [pc, #96]	@ (80077b0 <HAL_DMA_Init+0x43c>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d003      	beq.n	800775a <HAL_DMA_Init+0x3e6>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a17      	ldr	r2, [pc, #92]	@ (80077b4 <HAL_DMA_Init+0x440>)
 8007758:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2202      	movs	r2, #2
 800775e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007772:	697a      	ldr	r2, [r7, #20]
 8007774:	4b10      	ldr	r3, [pc, #64]	@ (80077b8 <HAL_DMA_Init+0x444>)
 8007776:	4013      	ands	r3, r2
 8007778:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	2b40      	cmp	r3, #64	@ 0x40
 8007780:	d01c      	beq.n	80077bc <HAL_DMA_Init+0x448>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	2b80      	cmp	r3, #128	@ 0x80
 8007788:	d102      	bne.n	8007790 <HAL_DMA_Init+0x41c>
 800778a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800778e:	e016      	b.n	80077be <HAL_DMA_Init+0x44a>
 8007790:	2300      	movs	r3, #0
 8007792:	e014      	b.n	80077be <HAL_DMA_Init+0x44a>
 8007794:	fe10803f 	.word	0xfe10803f
 8007798:	58025408 	.word	0x58025408
 800779c:	5802541c 	.word	0x5802541c
 80077a0:	58025430 	.word	0x58025430
 80077a4:	58025444 	.word	0x58025444
 80077a8:	58025458 	.word	0x58025458
 80077ac:	5802546c 	.word	0x5802546c
 80077b0:	58025480 	.word	0x58025480
 80077b4:	58025494 	.word	0x58025494
 80077b8:	fffe000f 	.word	0xfffe000f
 80077bc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	68d2      	ldr	r2, [r2, #12]
 80077c2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80077c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80077cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	695b      	ldr	r3, [r3, #20]
 80077d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80077d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	699b      	ldr	r3, [r3, #24]
 80077da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80077dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	69db      	ldr	r3, [r3, #28]
 80077e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80077e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6a1b      	ldr	r3, [r3, #32]
 80077ea:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80077ec:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80077ee:	697a      	ldr	r2, [r7, #20]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	697a      	ldr	r2, [r7, #20]
 80077fa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	461a      	mov	r2, r3
 8007802:	4b6e      	ldr	r3, [pc, #440]	@ (80079bc <HAL_DMA_Init+0x648>)
 8007804:	4413      	add	r3, r2
 8007806:	4a6e      	ldr	r2, [pc, #440]	@ (80079c0 <HAL_DMA_Init+0x64c>)
 8007808:	fba2 2303 	umull	r2, r3, r2, r3
 800780c:	091b      	lsrs	r3, r3, #4
 800780e:	009a      	lsls	r2, r3, #2
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f001 fc45 	bl	80090a4 <DMA_CalcBaseAndBitshift>
 800781a:	4603      	mov	r3, r0
 800781c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007822:	f003 031f 	and.w	r3, r3, #31
 8007826:	2201      	movs	r2, #1
 8007828:	409a      	lsls	r2, r3
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	605a      	str	r2, [r3, #4]
 800782e:	e008      	b.n	8007842 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2240      	movs	r2, #64	@ 0x40
 8007834:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2203      	movs	r2, #3
 800783a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	e0b7      	b.n	80079b2 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a5f      	ldr	r2, [pc, #380]	@ (80079c4 <HAL_DMA_Init+0x650>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d072      	beq.n	8007932 <HAL_DMA_Init+0x5be>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a5d      	ldr	r2, [pc, #372]	@ (80079c8 <HAL_DMA_Init+0x654>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d06d      	beq.n	8007932 <HAL_DMA_Init+0x5be>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a5c      	ldr	r2, [pc, #368]	@ (80079cc <HAL_DMA_Init+0x658>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d068      	beq.n	8007932 <HAL_DMA_Init+0x5be>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a5a      	ldr	r2, [pc, #360]	@ (80079d0 <HAL_DMA_Init+0x65c>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d063      	beq.n	8007932 <HAL_DMA_Init+0x5be>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a59      	ldr	r2, [pc, #356]	@ (80079d4 <HAL_DMA_Init+0x660>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d05e      	beq.n	8007932 <HAL_DMA_Init+0x5be>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a57      	ldr	r2, [pc, #348]	@ (80079d8 <HAL_DMA_Init+0x664>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d059      	beq.n	8007932 <HAL_DMA_Init+0x5be>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a56      	ldr	r2, [pc, #344]	@ (80079dc <HAL_DMA_Init+0x668>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d054      	beq.n	8007932 <HAL_DMA_Init+0x5be>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a54      	ldr	r2, [pc, #336]	@ (80079e0 <HAL_DMA_Init+0x66c>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d04f      	beq.n	8007932 <HAL_DMA_Init+0x5be>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a53      	ldr	r2, [pc, #332]	@ (80079e4 <HAL_DMA_Init+0x670>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d04a      	beq.n	8007932 <HAL_DMA_Init+0x5be>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a51      	ldr	r2, [pc, #324]	@ (80079e8 <HAL_DMA_Init+0x674>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d045      	beq.n	8007932 <HAL_DMA_Init+0x5be>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a50      	ldr	r2, [pc, #320]	@ (80079ec <HAL_DMA_Init+0x678>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d040      	beq.n	8007932 <HAL_DMA_Init+0x5be>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a4e      	ldr	r2, [pc, #312]	@ (80079f0 <HAL_DMA_Init+0x67c>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d03b      	beq.n	8007932 <HAL_DMA_Init+0x5be>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a4d      	ldr	r2, [pc, #308]	@ (80079f4 <HAL_DMA_Init+0x680>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d036      	beq.n	8007932 <HAL_DMA_Init+0x5be>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a4b      	ldr	r2, [pc, #300]	@ (80079f8 <HAL_DMA_Init+0x684>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d031      	beq.n	8007932 <HAL_DMA_Init+0x5be>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a4a      	ldr	r2, [pc, #296]	@ (80079fc <HAL_DMA_Init+0x688>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d02c      	beq.n	8007932 <HAL_DMA_Init+0x5be>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a48      	ldr	r2, [pc, #288]	@ (8007a00 <HAL_DMA_Init+0x68c>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d027      	beq.n	8007932 <HAL_DMA_Init+0x5be>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a47      	ldr	r2, [pc, #284]	@ (8007a04 <HAL_DMA_Init+0x690>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d022      	beq.n	8007932 <HAL_DMA_Init+0x5be>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a45      	ldr	r2, [pc, #276]	@ (8007a08 <HAL_DMA_Init+0x694>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d01d      	beq.n	8007932 <HAL_DMA_Init+0x5be>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a44      	ldr	r2, [pc, #272]	@ (8007a0c <HAL_DMA_Init+0x698>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d018      	beq.n	8007932 <HAL_DMA_Init+0x5be>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a42      	ldr	r2, [pc, #264]	@ (8007a10 <HAL_DMA_Init+0x69c>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d013      	beq.n	8007932 <HAL_DMA_Init+0x5be>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a41      	ldr	r2, [pc, #260]	@ (8007a14 <HAL_DMA_Init+0x6a0>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d00e      	beq.n	8007932 <HAL_DMA_Init+0x5be>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a3f      	ldr	r2, [pc, #252]	@ (8007a18 <HAL_DMA_Init+0x6a4>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d009      	beq.n	8007932 <HAL_DMA_Init+0x5be>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a3e      	ldr	r2, [pc, #248]	@ (8007a1c <HAL_DMA_Init+0x6a8>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d004      	beq.n	8007932 <HAL_DMA_Init+0x5be>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a3c      	ldr	r2, [pc, #240]	@ (8007a20 <HAL_DMA_Init+0x6ac>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d101      	bne.n	8007936 <HAL_DMA_Init+0x5c2>
 8007932:	2301      	movs	r3, #1
 8007934:	e000      	b.n	8007938 <HAL_DMA_Init+0x5c4>
 8007936:	2300      	movs	r3, #0
 8007938:	2b00      	cmp	r3, #0
 800793a:	d032      	beq.n	80079a2 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f001 fcdf 	bl	8009300 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	2b80      	cmp	r3, #128	@ 0x80
 8007948:	d102      	bne.n	8007950 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	685a      	ldr	r2, [r3, #4]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007958:	b2d2      	uxtb	r2, r2
 800795a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007964:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d010      	beq.n	8007990 <HAL_DMA_Init+0x61c>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	2b08      	cmp	r3, #8
 8007974:	d80c      	bhi.n	8007990 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f001 fd5c 	bl	8009434 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007980:	2200      	movs	r2, #0
 8007982:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800798c:	605a      	str	r2, [r3, #4]
 800798e:	e008      	b.n	80079a2 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2200      	movs	r2, #0
 80079a0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3718      	adds	r7, #24
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	a7fdabf8 	.word	0xa7fdabf8
 80079c0:	cccccccd 	.word	0xcccccccd
 80079c4:	40020010 	.word	0x40020010
 80079c8:	40020028 	.word	0x40020028
 80079cc:	40020040 	.word	0x40020040
 80079d0:	40020058 	.word	0x40020058
 80079d4:	40020070 	.word	0x40020070
 80079d8:	40020088 	.word	0x40020088
 80079dc:	400200a0 	.word	0x400200a0
 80079e0:	400200b8 	.word	0x400200b8
 80079e4:	40020410 	.word	0x40020410
 80079e8:	40020428 	.word	0x40020428
 80079ec:	40020440 	.word	0x40020440
 80079f0:	40020458 	.word	0x40020458
 80079f4:	40020470 	.word	0x40020470
 80079f8:	40020488 	.word	0x40020488
 80079fc:	400204a0 	.word	0x400204a0
 8007a00:	400204b8 	.word	0x400204b8
 8007a04:	58025408 	.word	0x58025408
 8007a08:	5802541c 	.word	0x5802541c
 8007a0c:	58025430 	.word	0x58025430
 8007a10:	58025444 	.word	0x58025444
 8007a14:	58025458 	.word	0x58025458
 8007a18:	5802546c 	.word	0x5802546c
 8007a1c:	58025480 	.word	0x58025480
 8007a20:	58025494 	.word	0x58025494

08007a24 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b086      	sub	sp, #24
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	607a      	str	r2, [r7, #4]
 8007a30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a32:	2300      	movs	r3, #0
 8007a34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d101      	bne.n	8007a40 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	e226      	b.n	8007e8e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d101      	bne.n	8007a4e <HAL_DMA_Start_IT+0x2a>
 8007a4a:	2302      	movs	r3, #2
 8007a4c:	e21f      	b.n	8007e8e <HAL_DMA_Start_IT+0x46a>
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2201      	movs	r2, #1
 8007a52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007a5c:	b2db      	uxtb	r3, r3
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	f040 820a 	bne.w	8007e78 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2202      	movs	r2, #2
 8007a68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a68      	ldr	r2, [pc, #416]	@ (8007c18 <HAL_DMA_Start_IT+0x1f4>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d04a      	beq.n	8007b12 <HAL_DMA_Start_IT+0xee>
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a66      	ldr	r2, [pc, #408]	@ (8007c1c <HAL_DMA_Start_IT+0x1f8>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d045      	beq.n	8007b12 <HAL_DMA_Start_IT+0xee>
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a65      	ldr	r2, [pc, #404]	@ (8007c20 <HAL_DMA_Start_IT+0x1fc>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d040      	beq.n	8007b12 <HAL_DMA_Start_IT+0xee>
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a63      	ldr	r2, [pc, #396]	@ (8007c24 <HAL_DMA_Start_IT+0x200>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d03b      	beq.n	8007b12 <HAL_DMA_Start_IT+0xee>
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a62      	ldr	r2, [pc, #392]	@ (8007c28 <HAL_DMA_Start_IT+0x204>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d036      	beq.n	8007b12 <HAL_DMA_Start_IT+0xee>
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a60      	ldr	r2, [pc, #384]	@ (8007c2c <HAL_DMA_Start_IT+0x208>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d031      	beq.n	8007b12 <HAL_DMA_Start_IT+0xee>
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a5f      	ldr	r2, [pc, #380]	@ (8007c30 <HAL_DMA_Start_IT+0x20c>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d02c      	beq.n	8007b12 <HAL_DMA_Start_IT+0xee>
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a5d      	ldr	r2, [pc, #372]	@ (8007c34 <HAL_DMA_Start_IT+0x210>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d027      	beq.n	8007b12 <HAL_DMA_Start_IT+0xee>
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a5c      	ldr	r2, [pc, #368]	@ (8007c38 <HAL_DMA_Start_IT+0x214>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d022      	beq.n	8007b12 <HAL_DMA_Start_IT+0xee>
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a5a      	ldr	r2, [pc, #360]	@ (8007c3c <HAL_DMA_Start_IT+0x218>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d01d      	beq.n	8007b12 <HAL_DMA_Start_IT+0xee>
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a59      	ldr	r2, [pc, #356]	@ (8007c40 <HAL_DMA_Start_IT+0x21c>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d018      	beq.n	8007b12 <HAL_DMA_Start_IT+0xee>
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a57      	ldr	r2, [pc, #348]	@ (8007c44 <HAL_DMA_Start_IT+0x220>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d013      	beq.n	8007b12 <HAL_DMA_Start_IT+0xee>
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a56      	ldr	r2, [pc, #344]	@ (8007c48 <HAL_DMA_Start_IT+0x224>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d00e      	beq.n	8007b12 <HAL_DMA_Start_IT+0xee>
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a54      	ldr	r2, [pc, #336]	@ (8007c4c <HAL_DMA_Start_IT+0x228>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d009      	beq.n	8007b12 <HAL_DMA_Start_IT+0xee>
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a53      	ldr	r2, [pc, #332]	@ (8007c50 <HAL_DMA_Start_IT+0x22c>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d004      	beq.n	8007b12 <HAL_DMA_Start_IT+0xee>
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a51      	ldr	r2, [pc, #324]	@ (8007c54 <HAL_DMA_Start_IT+0x230>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d108      	bne.n	8007b24 <HAL_DMA_Start_IT+0x100>
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f022 0201 	bic.w	r2, r2, #1
 8007b20:	601a      	str	r2, [r3, #0]
 8007b22:	e007      	b.n	8007b34 <HAL_DMA_Start_IT+0x110>
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f022 0201 	bic.w	r2, r2, #1
 8007b32:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	68b9      	ldr	r1, [r7, #8]
 8007b3a:	68f8      	ldr	r0, [r7, #12]
 8007b3c:	f001 f906 	bl	8008d4c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a34      	ldr	r2, [pc, #208]	@ (8007c18 <HAL_DMA_Start_IT+0x1f4>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d04a      	beq.n	8007be0 <HAL_DMA_Start_IT+0x1bc>
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a33      	ldr	r2, [pc, #204]	@ (8007c1c <HAL_DMA_Start_IT+0x1f8>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d045      	beq.n	8007be0 <HAL_DMA_Start_IT+0x1bc>
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a31      	ldr	r2, [pc, #196]	@ (8007c20 <HAL_DMA_Start_IT+0x1fc>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d040      	beq.n	8007be0 <HAL_DMA_Start_IT+0x1bc>
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a30      	ldr	r2, [pc, #192]	@ (8007c24 <HAL_DMA_Start_IT+0x200>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d03b      	beq.n	8007be0 <HAL_DMA_Start_IT+0x1bc>
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a2e      	ldr	r2, [pc, #184]	@ (8007c28 <HAL_DMA_Start_IT+0x204>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d036      	beq.n	8007be0 <HAL_DMA_Start_IT+0x1bc>
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a2d      	ldr	r2, [pc, #180]	@ (8007c2c <HAL_DMA_Start_IT+0x208>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d031      	beq.n	8007be0 <HAL_DMA_Start_IT+0x1bc>
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a2b      	ldr	r2, [pc, #172]	@ (8007c30 <HAL_DMA_Start_IT+0x20c>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d02c      	beq.n	8007be0 <HAL_DMA_Start_IT+0x1bc>
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a2a      	ldr	r2, [pc, #168]	@ (8007c34 <HAL_DMA_Start_IT+0x210>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d027      	beq.n	8007be0 <HAL_DMA_Start_IT+0x1bc>
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a28      	ldr	r2, [pc, #160]	@ (8007c38 <HAL_DMA_Start_IT+0x214>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d022      	beq.n	8007be0 <HAL_DMA_Start_IT+0x1bc>
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a27      	ldr	r2, [pc, #156]	@ (8007c3c <HAL_DMA_Start_IT+0x218>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d01d      	beq.n	8007be0 <HAL_DMA_Start_IT+0x1bc>
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a25      	ldr	r2, [pc, #148]	@ (8007c40 <HAL_DMA_Start_IT+0x21c>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d018      	beq.n	8007be0 <HAL_DMA_Start_IT+0x1bc>
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a24      	ldr	r2, [pc, #144]	@ (8007c44 <HAL_DMA_Start_IT+0x220>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d013      	beq.n	8007be0 <HAL_DMA_Start_IT+0x1bc>
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a22      	ldr	r2, [pc, #136]	@ (8007c48 <HAL_DMA_Start_IT+0x224>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d00e      	beq.n	8007be0 <HAL_DMA_Start_IT+0x1bc>
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a21      	ldr	r2, [pc, #132]	@ (8007c4c <HAL_DMA_Start_IT+0x228>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d009      	beq.n	8007be0 <HAL_DMA_Start_IT+0x1bc>
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a1f      	ldr	r2, [pc, #124]	@ (8007c50 <HAL_DMA_Start_IT+0x22c>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d004      	beq.n	8007be0 <HAL_DMA_Start_IT+0x1bc>
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a1e      	ldr	r2, [pc, #120]	@ (8007c54 <HAL_DMA_Start_IT+0x230>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d101      	bne.n	8007be4 <HAL_DMA_Start_IT+0x1c0>
 8007be0:	2301      	movs	r3, #1
 8007be2:	e000      	b.n	8007be6 <HAL_DMA_Start_IT+0x1c2>
 8007be4:	2300      	movs	r3, #0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d036      	beq.n	8007c58 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f023 021e 	bic.w	r2, r3, #30
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f042 0216 	orr.w	r2, r2, #22
 8007bfc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d03e      	beq.n	8007c84 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f042 0208 	orr.w	r2, r2, #8
 8007c14:	601a      	str	r2, [r3, #0]
 8007c16:	e035      	b.n	8007c84 <HAL_DMA_Start_IT+0x260>
 8007c18:	40020010 	.word	0x40020010
 8007c1c:	40020028 	.word	0x40020028
 8007c20:	40020040 	.word	0x40020040
 8007c24:	40020058 	.word	0x40020058
 8007c28:	40020070 	.word	0x40020070
 8007c2c:	40020088 	.word	0x40020088
 8007c30:	400200a0 	.word	0x400200a0
 8007c34:	400200b8 	.word	0x400200b8
 8007c38:	40020410 	.word	0x40020410
 8007c3c:	40020428 	.word	0x40020428
 8007c40:	40020440 	.word	0x40020440
 8007c44:	40020458 	.word	0x40020458
 8007c48:	40020470 	.word	0x40020470
 8007c4c:	40020488 	.word	0x40020488
 8007c50:	400204a0 	.word	0x400204a0
 8007c54:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f023 020e 	bic.w	r2, r3, #14
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f042 020a 	orr.w	r2, r2, #10
 8007c6a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d007      	beq.n	8007c84 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f042 0204 	orr.w	r2, r2, #4
 8007c82:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a83      	ldr	r2, [pc, #524]	@ (8007e98 <HAL_DMA_Start_IT+0x474>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d072      	beq.n	8007d74 <HAL_DMA_Start_IT+0x350>
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a82      	ldr	r2, [pc, #520]	@ (8007e9c <HAL_DMA_Start_IT+0x478>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d06d      	beq.n	8007d74 <HAL_DMA_Start_IT+0x350>
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a80      	ldr	r2, [pc, #512]	@ (8007ea0 <HAL_DMA_Start_IT+0x47c>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d068      	beq.n	8007d74 <HAL_DMA_Start_IT+0x350>
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a7f      	ldr	r2, [pc, #508]	@ (8007ea4 <HAL_DMA_Start_IT+0x480>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d063      	beq.n	8007d74 <HAL_DMA_Start_IT+0x350>
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a7d      	ldr	r2, [pc, #500]	@ (8007ea8 <HAL_DMA_Start_IT+0x484>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d05e      	beq.n	8007d74 <HAL_DMA_Start_IT+0x350>
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a7c      	ldr	r2, [pc, #496]	@ (8007eac <HAL_DMA_Start_IT+0x488>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d059      	beq.n	8007d74 <HAL_DMA_Start_IT+0x350>
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a7a      	ldr	r2, [pc, #488]	@ (8007eb0 <HAL_DMA_Start_IT+0x48c>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d054      	beq.n	8007d74 <HAL_DMA_Start_IT+0x350>
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a79      	ldr	r2, [pc, #484]	@ (8007eb4 <HAL_DMA_Start_IT+0x490>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d04f      	beq.n	8007d74 <HAL_DMA_Start_IT+0x350>
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a77      	ldr	r2, [pc, #476]	@ (8007eb8 <HAL_DMA_Start_IT+0x494>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d04a      	beq.n	8007d74 <HAL_DMA_Start_IT+0x350>
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a76      	ldr	r2, [pc, #472]	@ (8007ebc <HAL_DMA_Start_IT+0x498>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d045      	beq.n	8007d74 <HAL_DMA_Start_IT+0x350>
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a74      	ldr	r2, [pc, #464]	@ (8007ec0 <HAL_DMA_Start_IT+0x49c>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d040      	beq.n	8007d74 <HAL_DMA_Start_IT+0x350>
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a73      	ldr	r2, [pc, #460]	@ (8007ec4 <HAL_DMA_Start_IT+0x4a0>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d03b      	beq.n	8007d74 <HAL_DMA_Start_IT+0x350>
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a71      	ldr	r2, [pc, #452]	@ (8007ec8 <HAL_DMA_Start_IT+0x4a4>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d036      	beq.n	8007d74 <HAL_DMA_Start_IT+0x350>
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a70      	ldr	r2, [pc, #448]	@ (8007ecc <HAL_DMA_Start_IT+0x4a8>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d031      	beq.n	8007d74 <HAL_DMA_Start_IT+0x350>
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a6e      	ldr	r2, [pc, #440]	@ (8007ed0 <HAL_DMA_Start_IT+0x4ac>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d02c      	beq.n	8007d74 <HAL_DMA_Start_IT+0x350>
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a6d      	ldr	r2, [pc, #436]	@ (8007ed4 <HAL_DMA_Start_IT+0x4b0>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d027      	beq.n	8007d74 <HAL_DMA_Start_IT+0x350>
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a6b      	ldr	r2, [pc, #428]	@ (8007ed8 <HAL_DMA_Start_IT+0x4b4>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d022      	beq.n	8007d74 <HAL_DMA_Start_IT+0x350>
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4a6a      	ldr	r2, [pc, #424]	@ (8007edc <HAL_DMA_Start_IT+0x4b8>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d01d      	beq.n	8007d74 <HAL_DMA_Start_IT+0x350>
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a68      	ldr	r2, [pc, #416]	@ (8007ee0 <HAL_DMA_Start_IT+0x4bc>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d018      	beq.n	8007d74 <HAL_DMA_Start_IT+0x350>
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a67      	ldr	r2, [pc, #412]	@ (8007ee4 <HAL_DMA_Start_IT+0x4c0>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d013      	beq.n	8007d74 <HAL_DMA_Start_IT+0x350>
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a65      	ldr	r2, [pc, #404]	@ (8007ee8 <HAL_DMA_Start_IT+0x4c4>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d00e      	beq.n	8007d74 <HAL_DMA_Start_IT+0x350>
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a64      	ldr	r2, [pc, #400]	@ (8007eec <HAL_DMA_Start_IT+0x4c8>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d009      	beq.n	8007d74 <HAL_DMA_Start_IT+0x350>
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a62      	ldr	r2, [pc, #392]	@ (8007ef0 <HAL_DMA_Start_IT+0x4cc>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d004      	beq.n	8007d74 <HAL_DMA_Start_IT+0x350>
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a61      	ldr	r2, [pc, #388]	@ (8007ef4 <HAL_DMA_Start_IT+0x4d0>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d101      	bne.n	8007d78 <HAL_DMA_Start_IT+0x354>
 8007d74:	2301      	movs	r3, #1
 8007d76:	e000      	b.n	8007d7a <HAL_DMA_Start_IT+0x356>
 8007d78:	2300      	movs	r3, #0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d01a      	beq.n	8007db4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d007      	beq.n	8007d9c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d96:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007d9a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d007      	beq.n	8007db4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007dae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007db2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a37      	ldr	r2, [pc, #220]	@ (8007e98 <HAL_DMA_Start_IT+0x474>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d04a      	beq.n	8007e54 <HAL_DMA_Start_IT+0x430>
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a36      	ldr	r2, [pc, #216]	@ (8007e9c <HAL_DMA_Start_IT+0x478>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d045      	beq.n	8007e54 <HAL_DMA_Start_IT+0x430>
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a34      	ldr	r2, [pc, #208]	@ (8007ea0 <HAL_DMA_Start_IT+0x47c>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d040      	beq.n	8007e54 <HAL_DMA_Start_IT+0x430>
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a33      	ldr	r2, [pc, #204]	@ (8007ea4 <HAL_DMA_Start_IT+0x480>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d03b      	beq.n	8007e54 <HAL_DMA_Start_IT+0x430>
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a31      	ldr	r2, [pc, #196]	@ (8007ea8 <HAL_DMA_Start_IT+0x484>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d036      	beq.n	8007e54 <HAL_DMA_Start_IT+0x430>
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a30      	ldr	r2, [pc, #192]	@ (8007eac <HAL_DMA_Start_IT+0x488>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d031      	beq.n	8007e54 <HAL_DMA_Start_IT+0x430>
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a2e      	ldr	r2, [pc, #184]	@ (8007eb0 <HAL_DMA_Start_IT+0x48c>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d02c      	beq.n	8007e54 <HAL_DMA_Start_IT+0x430>
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a2d      	ldr	r2, [pc, #180]	@ (8007eb4 <HAL_DMA_Start_IT+0x490>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d027      	beq.n	8007e54 <HAL_DMA_Start_IT+0x430>
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a2b      	ldr	r2, [pc, #172]	@ (8007eb8 <HAL_DMA_Start_IT+0x494>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d022      	beq.n	8007e54 <HAL_DMA_Start_IT+0x430>
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a2a      	ldr	r2, [pc, #168]	@ (8007ebc <HAL_DMA_Start_IT+0x498>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d01d      	beq.n	8007e54 <HAL_DMA_Start_IT+0x430>
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a28      	ldr	r2, [pc, #160]	@ (8007ec0 <HAL_DMA_Start_IT+0x49c>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d018      	beq.n	8007e54 <HAL_DMA_Start_IT+0x430>
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a27      	ldr	r2, [pc, #156]	@ (8007ec4 <HAL_DMA_Start_IT+0x4a0>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d013      	beq.n	8007e54 <HAL_DMA_Start_IT+0x430>
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a25      	ldr	r2, [pc, #148]	@ (8007ec8 <HAL_DMA_Start_IT+0x4a4>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d00e      	beq.n	8007e54 <HAL_DMA_Start_IT+0x430>
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a24      	ldr	r2, [pc, #144]	@ (8007ecc <HAL_DMA_Start_IT+0x4a8>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d009      	beq.n	8007e54 <HAL_DMA_Start_IT+0x430>
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a22      	ldr	r2, [pc, #136]	@ (8007ed0 <HAL_DMA_Start_IT+0x4ac>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d004      	beq.n	8007e54 <HAL_DMA_Start_IT+0x430>
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a21      	ldr	r2, [pc, #132]	@ (8007ed4 <HAL_DMA_Start_IT+0x4b0>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d108      	bne.n	8007e66 <HAL_DMA_Start_IT+0x442>
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f042 0201 	orr.w	r2, r2, #1
 8007e62:	601a      	str	r2, [r3, #0]
 8007e64:	e012      	b.n	8007e8c <HAL_DMA_Start_IT+0x468>
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f042 0201 	orr.w	r2, r2, #1
 8007e74:	601a      	str	r2, [r3, #0]
 8007e76:	e009      	b.n	8007e8c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007e7e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007e8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3718      	adds	r7, #24
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop
 8007e98:	40020010 	.word	0x40020010
 8007e9c:	40020028 	.word	0x40020028
 8007ea0:	40020040 	.word	0x40020040
 8007ea4:	40020058 	.word	0x40020058
 8007ea8:	40020070 	.word	0x40020070
 8007eac:	40020088 	.word	0x40020088
 8007eb0:	400200a0 	.word	0x400200a0
 8007eb4:	400200b8 	.word	0x400200b8
 8007eb8:	40020410 	.word	0x40020410
 8007ebc:	40020428 	.word	0x40020428
 8007ec0:	40020440 	.word	0x40020440
 8007ec4:	40020458 	.word	0x40020458
 8007ec8:	40020470 	.word	0x40020470
 8007ecc:	40020488 	.word	0x40020488
 8007ed0:	400204a0 	.word	0x400204a0
 8007ed4:	400204b8 	.word	0x400204b8
 8007ed8:	58025408 	.word	0x58025408
 8007edc:	5802541c 	.word	0x5802541c
 8007ee0:	58025430 	.word	0x58025430
 8007ee4:	58025444 	.word	0x58025444
 8007ee8:	58025458 	.word	0x58025458
 8007eec:	5802546c 	.word	0x5802546c
 8007ef0:	58025480 	.word	0x58025480
 8007ef4:	58025494 	.word	0x58025494

08007ef8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b08a      	sub	sp, #40	@ 0x28
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007f00:	2300      	movs	r3, #0
 8007f02:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007f04:	4b67      	ldr	r3, [pc, #412]	@ (80080a4 <HAL_DMA_IRQHandler+0x1ac>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a67      	ldr	r2, [pc, #412]	@ (80080a8 <HAL_DMA_IRQHandler+0x1b0>)
 8007f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8007f0e:	0a9b      	lsrs	r3, r3, #10
 8007f10:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f16:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f1c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007f1e:	6a3b      	ldr	r3, [r7, #32]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007f24:	69fb      	ldr	r3, [r7, #28]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a5f      	ldr	r2, [pc, #380]	@ (80080ac <HAL_DMA_IRQHandler+0x1b4>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d04a      	beq.n	8007fca <HAL_DMA_IRQHandler+0xd2>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a5d      	ldr	r2, [pc, #372]	@ (80080b0 <HAL_DMA_IRQHandler+0x1b8>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d045      	beq.n	8007fca <HAL_DMA_IRQHandler+0xd2>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a5c      	ldr	r2, [pc, #368]	@ (80080b4 <HAL_DMA_IRQHandler+0x1bc>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d040      	beq.n	8007fca <HAL_DMA_IRQHandler+0xd2>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a5a      	ldr	r2, [pc, #360]	@ (80080b8 <HAL_DMA_IRQHandler+0x1c0>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d03b      	beq.n	8007fca <HAL_DMA_IRQHandler+0xd2>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a59      	ldr	r2, [pc, #356]	@ (80080bc <HAL_DMA_IRQHandler+0x1c4>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d036      	beq.n	8007fca <HAL_DMA_IRQHandler+0xd2>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a57      	ldr	r2, [pc, #348]	@ (80080c0 <HAL_DMA_IRQHandler+0x1c8>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d031      	beq.n	8007fca <HAL_DMA_IRQHandler+0xd2>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a56      	ldr	r2, [pc, #344]	@ (80080c4 <HAL_DMA_IRQHandler+0x1cc>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d02c      	beq.n	8007fca <HAL_DMA_IRQHandler+0xd2>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a54      	ldr	r2, [pc, #336]	@ (80080c8 <HAL_DMA_IRQHandler+0x1d0>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d027      	beq.n	8007fca <HAL_DMA_IRQHandler+0xd2>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a53      	ldr	r2, [pc, #332]	@ (80080cc <HAL_DMA_IRQHandler+0x1d4>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d022      	beq.n	8007fca <HAL_DMA_IRQHandler+0xd2>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a51      	ldr	r2, [pc, #324]	@ (80080d0 <HAL_DMA_IRQHandler+0x1d8>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d01d      	beq.n	8007fca <HAL_DMA_IRQHandler+0xd2>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a50      	ldr	r2, [pc, #320]	@ (80080d4 <HAL_DMA_IRQHandler+0x1dc>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d018      	beq.n	8007fca <HAL_DMA_IRQHandler+0xd2>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a4e      	ldr	r2, [pc, #312]	@ (80080d8 <HAL_DMA_IRQHandler+0x1e0>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d013      	beq.n	8007fca <HAL_DMA_IRQHandler+0xd2>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a4d      	ldr	r2, [pc, #308]	@ (80080dc <HAL_DMA_IRQHandler+0x1e4>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d00e      	beq.n	8007fca <HAL_DMA_IRQHandler+0xd2>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a4b      	ldr	r2, [pc, #300]	@ (80080e0 <HAL_DMA_IRQHandler+0x1e8>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d009      	beq.n	8007fca <HAL_DMA_IRQHandler+0xd2>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a4a      	ldr	r2, [pc, #296]	@ (80080e4 <HAL_DMA_IRQHandler+0x1ec>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d004      	beq.n	8007fca <HAL_DMA_IRQHandler+0xd2>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a48      	ldr	r2, [pc, #288]	@ (80080e8 <HAL_DMA_IRQHandler+0x1f0>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d101      	bne.n	8007fce <HAL_DMA_IRQHandler+0xd6>
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e000      	b.n	8007fd0 <HAL_DMA_IRQHandler+0xd8>
 8007fce:	2300      	movs	r3, #0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	f000 842b 	beq.w	800882c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fda:	f003 031f 	and.w	r3, r3, #31
 8007fde:	2208      	movs	r2, #8
 8007fe0:	409a      	lsls	r2, r3
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	4013      	ands	r3, r2
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	f000 80a2 	beq.w	8008130 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a2e      	ldr	r2, [pc, #184]	@ (80080ac <HAL_DMA_IRQHandler+0x1b4>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d04a      	beq.n	800808c <HAL_DMA_IRQHandler+0x194>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a2d      	ldr	r2, [pc, #180]	@ (80080b0 <HAL_DMA_IRQHandler+0x1b8>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d045      	beq.n	800808c <HAL_DMA_IRQHandler+0x194>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a2b      	ldr	r2, [pc, #172]	@ (80080b4 <HAL_DMA_IRQHandler+0x1bc>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d040      	beq.n	800808c <HAL_DMA_IRQHandler+0x194>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a2a      	ldr	r2, [pc, #168]	@ (80080b8 <HAL_DMA_IRQHandler+0x1c0>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d03b      	beq.n	800808c <HAL_DMA_IRQHandler+0x194>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a28      	ldr	r2, [pc, #160]	@ (80080bc <HAL_DMA_IRQHandler+0x1c4>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d036      	beq.n	800808c <HAL_DMA_IRQHandler+0x194>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a27      	ldr	r2, [pc, #156]	@ (80080c0 <HAL_DMA_IRQHandler+0x1c8>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d031      	beq.n	800808c <HAL_DMA_IRQHandler+0x194>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a25      	ldr	r2, [pc, #148]	@ (80080c4 <HAL_DMA_IRQHandler+0x1cc>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d02c      	beq.n	800808c <HAL_DMA_IRQHandler+0x194>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a24      	ldr	r2, [pc, #144]	@ (80080c8 <HAL_DMA_IRQHandler+0x1d0>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d027      	beq.n	800808c <HAL_DMA_IRQHandler+0x194>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a22      	ldr	r2, [pc, #136]	@ (80080cc <HAL_DMA_IRQHandler+0x1d4>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d022      	beq.n	800808c <HAL_DMA_IRQHandler+0x194>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a21      	ldr	r2, [pc, #132]	@ (80080d0 <HAL_DMA_IRQHandler+0x1d8>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d01d      	beq.n	800808c <HAL_DMA_IRQHandler+0x194>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a1f      	ldr	r2, [pc, #124]	@ (80080d4 <HAL_DMA_IRQHandler+0x1dc>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d018      	beq.n	800808c <HAL_DMA_IRQHandler+0x194>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a1e      	ldr	r2, [pc, #120]	@ (80080d8 <HAL_DMA_IRQHandler+0x1e0>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d013      	beq.n	800808c <HAL_DMA_IRQHandler+0x194>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a1c      	ldr	r2, [pc, #112]	@ (80080dc <HAL_DMA_IRQHandler+0x1e4>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d00e      	beq.n	800808c <HAL_DMA_IRQHandler+0x194>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a1b      	ldr	r2, [pc, #108]	@ (80080e0 <HAL_DMA_IRQHandler+0x1e8>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d009      	beq.n	800808c <HAL_DMA_IRQHandler+0x194>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a19      	ldr	r2, [pc, #100]	@ (80080e4 <HAL_DMA_IRQHandler+0x1ec>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d004      	beq.n	800808c <HAL_DMA_IRQHandler+0x194>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a18      	ldr	r2, [pc, #96]	@ (80080e8 <HAL_DMA_IRQHandler+0x1f0>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d12f      	bne.n	80080ec <HAL_DMA_IRQHandler+0x1f4>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f003 0304 	and.w	r3, r3, #4
 8008096:	2b00      	cmp	r3, #0
 8008098:	bf14      	ite	ne
 800809a:	2301      	movne	r3, #1
 800809c:	2300      	moveq	r3, #0
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	e02e      	b.n	8008100 <HAL_DMA_IRQHandler+0x208>
 80080a2:	bf00      	nop
 80080a4:	24000038 	.word	0x24000038
 80080a8:	1b4e81b5 	.word	0x1b4e81b5
 80080ac:	40020010 	.word	0x40020010
 80080b0:	40020028 	.word	0x40020028
 80080b4:	40020040 	.word	0x40020040
 80080b8:	40020058 	.word	0x40020058
 80080bc:	40020070 	.word	0x40020070
 80080c0:	40020088 	.word	0x40020088
 80080c4:	400200a0 	.word	0x400200a0
 80080c8:	400200b8 	.word	0x400200b8
 80080cc:	40020410 	.word	0x40020410
 80080d0:	40020428 	.word	0x40020428
 80080d4:	40020440 	.word	0x40020440
 80080d8:	40020458 	.word	0x40020458
 80080dc:	40020470 	.word	0x40020470
 80080e0:	40020488 	.word	0x40020488
 80080e4:	400204a0 	.word	0x400204a0
 80080e8:	400204b8 	.word	0x400204b8
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f003 0308 	and.w	r3, r3, #8
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	bf14      	ite	ne
 80080fa:	2301      	movne	r3, #1
 80080fc:	2300      	moveq	r3, #0
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	2b00      	cmp	r3, #0
 8008102:	d015      	beq.n	8008130 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f022 0204 	bic.w	r2, r2, #4
 8008112:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008118:	f003 031f 	and.w	r3, r3, #31
 800811c:	2208      	movs	r2, #8
 800811e:	409a      	lsls	r2, r3
 8008120:	6a3b      	ldr	r3, [r7, #32]
 8008122:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008128:	f043 0201 	orr.w	r2, r3, #1
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008134:	f003 031f 	and.w	r3, r3, #31
 8008138:	69ba      	ldr	r2, [r7, #24]
 800813a:	fa22 f303 	lsr.w	r3, r2, r3
 800813e:	f003 0301 	and.w	r3, r3, #1
 8008142:	2b00      	cmp	r3, #0
 8008144:	d06e      	beq.n	8008224 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a69      	ldr	r2, [pc, #420]	@ (80082f0 <HAL_DMA_IRQHandler+0x3f8>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d04a      	beq.n	80081e6 <HAL_DMA_IRQHandler+0x2ee>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a67      	ldr	r2, [pc, #412]	@ (80082f4 <HAL_DMA_IRQHandler+0x3fc>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d045      	beq.n	80081e6 <HAL_DMA_IRQHandler+0x2ee>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a66      	ldr	r2, [pc, #408]	@ (80082f8 <HAL_DMA_IRQHandler+0x400>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d040      	beq.n	80081e6 <HAL_DMA_IRQHandler+0x2ee>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a64      	ldr	r2, [pc, #400]	@ (80082fc <HAL_DMA_IRQHandler+0x404>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d03b      	beq.n	80081e6 <HAL_DMA_IRQHandler+0x2ee>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a63      	ldr	r2, [pc, #396]	@ (8008300 <HAL_DMA_IRQHandler+0x408>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d036      	beq.n	80081e6 <HAL_DMA_IRQHandler+0x2ee>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a61      	ldr	r2, [pc, #388]	@ (8008304 <HAL_DMA_IRQHandler+0x40c>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d031      	beq.n	80081e6 <HAL_DMA_IRQHandler+0x2ee>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a60      	ldr	r2, [pc, #384]	@ (8008308 <HAL_DMA_IRQHandler+0x410>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d02c      	beq.n	80081e6 <HAL_DMA_IRQHandler+0x2ee>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a5e      	ldr	r2, [pc, #376]	@ (800830c <HAL_DMA_IRQHandler+0x414>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d027      	beq.n	80081e6 <HAL_DMA_IRQHandler+0x2ee>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a5d      	ldr	r2, [pc, #372]	@ (8008310 <HAL_DMA_IRQHandler+0x418>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d022      	beq.n	80081e6 <HAL_DMA_IRQHandler+0x2ee>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a5b      	ldr	r2, [pc, #364]	@ (8008314 <HAL_DMA_IRQHandler+0x41c>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d01d      	beq.n	80081e6 <HAL_DMA_IRQHandler+0x2ee>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a5a      	ldr	r2, [pc, #360]	@ (8008318 <HAL_DMA_IRQHandler+0x420>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d018      	beq.n	80081e6 <HAL_DMA_IRQHandler+0x2ee>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a58      	ldr	r2, [pc, #352]	@ (800831c <HAL_DMA_IRQHandler+0x424>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d013      	beq.n	80081e6 <HAL_DMA_IRQHandler+0x2ee>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a57      	ldr	r2, [pc, #348]	@ (8008320 <HAL_DMA_IRQHandler+0x428>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d00e      	beq.n	80081e6 <HAL_DMA_IRQHandler+0x2ee>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a55      	ldr	r2, [pc, #340]	@ (8008324 <HAL_DMA_IRQHandler+0x42c>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d009      	beq.n	80081e6 <HAL_DMA_IRQHandler+0x2ee>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a54      	ldr	r2, [pc, #336]	@ (8008328 <HAL_DMA_IRQHandler+0x430>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d004      	beq.n	80081e6 <HAL_DMA_IRQHandler+0x2ee>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a52      	ldr	r2, [pc, #328]	@ (800832c <HAL_DMA_IRQHandler+0x434>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d10a      	bne.n	80081fc <HAL_DMA_IRQHandler+0x304>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	695b      	ldr	r3, [r3, #20]
 80081ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	bf14      	ite	ne
 80081f4:	2301      	movne	r3, #1
 80081f6:	2300      	moveq	r3, #0
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	e003      	b.n	8008204 <HAL_DMA_IRQHandler+0x30c>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	2300      	movs	r3, #0
 8008204:	2b00      	cmp	r3, #0
 8008206:	d00d      	beq.n	8008224 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800820c:	f003 031f 	and.w	r3, r3, #31
 8008210:	2201      	movs	r2, #1
 8008212:	409a      	lsls	r2, r3
 8008214:	6a3b      	ldr	r3, [r7, #32]
 8008216:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800821c:	f043 0202 	orr.w	r2, r3, #2
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008228:	f003 031f 	and.w	r3, r3, #31
 800822c:	2204      	movs	r2, #4
 800822e:	409a      	lsls	r2, r3
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	4013      	ands	r3, r2
 8008234:	2b00      	cmp	r3, #0
 8008236:	f000 808f 	beq.w	8008358 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a2c      	ldr	r2, [pc, #176]	@ (80082f0 <HAL_DMA_IRQHandler+0x3f8>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d04a      	beq.n	80082da <HAL_DMA_IRQHandler+0x3e2>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a2a      	ldr	r2, [pc, #168]	@ (80082f4 <HAL_DMA_IRQHandler+0x3fc>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d045      	beq.n	80082da <HAL_DMA_IRQHandler+0x3e2>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a29      	ldr	r2, [pc, #164]	@ (80082f8 <HAL_DMA_IRQHandler+0x400>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d040      	beq.n	80082da <HAL_DMA_IRQHandler+0x3e2>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a27      	ldr	r2, [pc, #156]	@ (80082fc <HAL_DMA_IRQHandler+0x404>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d03b      	beq.n	80082da <HAL_DMA_IRQHandler+0x3e2>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a26      	ldr	r2, [pc, #152]	@ (8008300 <HAL_DMA_IRQHandler+0x408>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d036      	beq.n	80082da <HAL_DMA_IRQHandler+0x3e2>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a24      	ldr	r2, [pc, #144]	@ (8008304 <HAL_DMA_IRQHandler+0x40c>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d031      	beq.n	80082da <HAL_DMA_IRQHandler+0x3e2>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a23      	ldr	r2, [pc, #140]	@ (8008308 <HAL_DMA_IRQHandler+0x410>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d02c      	beq.n	80082da <HAL_DMA_IRQHandler+0x3e2>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a21      	ldr	r2, [pc, #132]	@ (800830c <HAL_DMA_IRQHandler+0x414>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d027      	beq.n	80082da <HAL_DMA_IRQHandler+0x3e2>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a20      	ldr	r2, [pc, #128]	@ (8008310 <HAL_DMA_IRQHandler+0x418>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d022      	beq.n	80082da <HAL_DMA_IRQHandler+0x3e2>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a1e      	ldr	r2, [pc, #120]	@ (8008314 <HAL_DMA_IRQHandler+0x41c>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d01d      	beq.n	80082da <HAL_DMA_IRQHandler+0x3e2>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a1d      	ldr	r2, [pc, #116]	@ (8008318 <HAL_DMA_IRQHandler+0x420>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d018      	beq.n	80082da <HAL_DMA_IRQHandler+0x3e2>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a1b      	ldr	r2, [pc, #108]	@ (800831c <HAL_DMA_IRQHandler+0x424>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d013      	beq.n	80082da <HAL_DMA_IRQHandler+0x3e2>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a1a      	ldr	r2, [pc, #104]	@ (8008320 <HAL_DMA_IRQHandler+0x428>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d00e      	beq.n	80082da <HAL_DMA_IRQHandler+0x3e2>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a18      	ldr	r2, [pc, #96]	@ (8008324 <HAL_DMA_IRQHandler+0x42c>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d009      	beq.n	80082da <HAL_DMA_IRQHandler+0x3e2>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a17      	ldr	r2, [pc, #92]	@ (8008328 <HAL_DMA_IRQHandler+0x430>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d004      	beq.n	80082da <HAL_DMA_IRQHandler+0x3e2>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a15      	ldr	r2, [pc, #84]	@ (800832c <HAL_DMA_IRQHandler+0x434>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d12a      	bne.n	8008330 <HAL_DMA_IRQHandler+0x438>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f003 0302 	and.w	r3, r3, #2
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	bf14      	ite	ne
 80082e8:	2301      	movne	r3, #1
 80082ea:	2300      	moveq	r3, #0
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	e023      	b.n	8008338 <HAL_DMA_IRQHandler+0x440>
 80082f0:	40020010 	.word	0x40020010
 80082f4:	40020028 	.word	0x40020028
 80082f8:	40020040 	.word	0x40020040
 80082fc:	40020058 	.word	0x40020058
 8008300:	40020070 	.word	0x40020070
 8008304:	40020088 	.word	0x40020088
 8008308:	400200a0 	.word	0x400200a0
 800830c:	400200b8 	.word	0x400200b8
 8008310:	40020410 	.word	0x40020410
 8008314:	40020428 	.word	0x40020428
 8008318:	40020440 	.word	0x40020440
 800831c:	40020458 	.word	0x40020458
 8008320:	40020470 	.word	0x40020470
 8008324:	40020488 	.word	0x40020488
 8008328:	400204a0 	.word	0x400204a0
 800832c:	400204b8 	.word	0x400204b8
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2300      	movs	r3, #0
 8008338:	2b00      	cmp	r3, #0
 800833a:	d00d      	beq.n	8008358 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008340:	f003 031f 	and.w	r3, r3, #31
 8008344:	2204      	movs	r2, #4
 8008346:	409a      	lsls	r2, r3
 8008348:	6a3b      	ldr	r3, [r7, #32]
 800834a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008350:	f043 0204 	orr.w	r2, r3, #4
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800835c:	f003 031f 	and.w	r3, r3, #31
 8008360:	2210      	movs	r2, #16
 8008362:	409a      	lsls	r2, r3
 8008364:	69bb      	ldr	r3, [r7, #24]
 8008366:	4013      	ands	r3, r2
 8008368:	2b00      	cmp	r3, #0
 800836a:	f000 80a6 	beq.w	80084ba <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a85      	ldr	r2, [pc, #532]	@ (8008588 <HAL_DMA_IRQHandler+0x690>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d04a      	beq.n	800840e <HAL_DMA_IRQHandler+0x516>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a83      	ldr	r2, [pc, #524]	@ (800858c <HAL_DMA_IRQHandler+0x694>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d045      	beq.n	800840e <HAL_DMA_IRQHandler+0x516>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a82      	ldr	r2, [pc, #520]	@ (8008590 <HAL_DMA_IRQHandler+0x698>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d040      	beq.n	800840e <HAL_DMA_IRQHandler+0x516>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a80      	ldr	r2, [pc, #512]	@ (8008594 <HAL_DMA_IRQHandler+0x69c>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d03b      	beq.n	800840e <HAL_DMA_IRQHandler+0x516>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a7f      	ldr	r2, [pc, #508]	@ (8008598 <HAL_DMA_IRQHandler+0x6a0>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d036      	beq.n	800840e <HAL_DMA_IRQHandler+0x516>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a7d      	ldr	r2, [pc, #500]	@ (800859c <HAL_DMA_IRQHandler+0x6a4>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d031      	beq.n	800840e <HAL_DMA_IRQHandler+0x516>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a7c      	ldr	r2, [pc, #496]	@ (80085a0 <HAL_DMA_IRQHandler+0x6a8>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d02c      	beq.n	800840e <HAL_DMA_IRQHandler+0x516>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a7a      	ldr	r2, [pc, #488]	@ (80085a4 <HAL_DMA_IRQHandler+0x6ac>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d027      	beq.n	800840e <HAL_DMA_IRQHandler+0x516>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a79      	ldr	r2, [pc, #484]	@ (80085a8 <HAL_DMA_IRQHandler+0x6b0>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d022      	beq.n	800840e <HAL_DMA_IRQHandler+0x516>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a77      	ldr	r2, [pc, #476]	@ (80085ac <HAL_DMA_IRQHandler+0x6b4>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d01d      	beq.n	800840e <HAL_DMA_IRQHandler+0x516>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a76      	ldr	r2, [pc, #472]	@ (80085b0 <HAL_DMA_IRQHandler+0x6b8>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d018      	beq.n	800840e <HAL_DMA_IRQHandler+0x516>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a74      	ldr	r2, [pc, #464]	@ (80085b4 <HAL_DMA_IRQHandler+0x6bc>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d013      	beq.n	800840e <HAL_DMA_IRQHandler+0x516>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a73      	ldr	r2, [pc, #460]	@ (80085b8 <HAL_DMA_IRQHandler+0x6c0>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d00e      	beq.n	800840e <HAL_DMA_IRQHandler+0x516>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a71      	ldr	r2, [pc, #452]	@ (80085bc <HAL_DMA_IRQHandler+0x6c4>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d009      	beq.n	800840e <HAL_DMA_IRQHandler+0x516>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a70      	ldr	r2, [pc, #448]	@ (80085c0 <HAL_DMA_IRQHandler+0x6c8>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d004      	beq.n	800840e <HAL_DMA_IRQHandler+0x516>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a6e      	ldr	r2, [pc, #440]	@ (80085c4 <HAL_DMA_IRQHandler+0x6cc>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d10a      	bne.n	8008424 <HAL_DMA_IRQHandler+0x52c>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f003 0308 	and.w	r3, r3, #8
 8008418:	2b00      	cmp	r3, #0
 800841a:	bf14      	ite	ne
 800841c:	2301      	movne	r3, #1
 800841e:	2300      	moveq	r3, #0
 8008420:	b2db      	uxtb	r3, r3
 8008422:	e009      	b.n	8008438 <HAL_DMA_IRQHandler+0x540>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f003 0304 	and.w	r3, r3, #4
 800842e:	2b00      	cmp	r3, #0
 8008430:	bf14      	ite	ne
 8008432:	2301      	movne	r3, #1
 8008434:	2300      	moveq	r3, #0
 8008436:	b2db      	uxtb	r3, r3
 8008438:	2b00      	cmp	r3, #0
 800843a:	d03e      	beq.n	80084ba <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008440:	f003 031f 	and.w	r3, r3, #31
 8008444:	2210      	movs	r2, #16
 8008446:	409a      	lsls	r2, r3
 8008448:	6a3b      	ldr	r3, [r7, #32]
 800844a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008456:	2b00      	cmp	r3, #0
 8008458:	d018      	beq.n	800848c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008464:	2b00      	cmp	r3, #0
 8008466:	d108      	bne.n	800847a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800846c:	2b00      	cmp	r3, #0
 800846e:	d024      	beq.n	80084ba <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	4798      	blx	r3
 8008478:	e01f      	b.n	80084ba <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800847e:	2b00      	cmp	r3, #0
 8008480:	d01b      	beq.n	80084ba <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	4798      	blx	r3
 800848a:	e016      	b.n	80084ba <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008496:	2b00      	cmp	r3, #0
 8008498:	d107      	bne.n	80084aa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f022 0208 	bic.w	r2, r2, #8
 80084a8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d003      	beq.n	80084ba <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084be:	f003 031f 	and.w	r3, r3, #31
 80084c2:	2220      	movs	r2, #32
 80084c4:	409a      	lsls	r2, r3
 80084c6:	69bb      	ldr	r3, [r7, #24]
 80084c8:	4013      	ands	r3, r2
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	f000 8110 	beq.w	80086f0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a2c      	ldr	r2, [pc, #176]	@ (8008588 <HAL_DMA_IRQHandler+0x690>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d04a      	beq.n	8008570 <HAL_DMA_IRQHandler+0x678>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a2b      	ldr	r2, [pc, #172]	@ (800858c <HAL_DMA_IRQHandler+0x694>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d045      	beq.n	8008570 <HAL_DMA_IRQHandler+0x678>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a29      	ldr	r2, [pc, #164]	@ (8008590 <HAL_DMA_IRQHandler+0x698>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d040      	beq.n	8008570 <HAL_DMA_IRQHandler+0x678>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a28      	ldr	r2, [pc, #160]	@ (8008594 <HAL_DMA_IRQHandler+0x69c>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d03b      	beq.n	8008570 <HAL_DMA_IRQHandler+0x678>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a26      	ldr	r2, [pc, #152]	@ (8008598 <HAL_DMA_IRQHandler+0x6a0>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d036      	beq.n	8008570 <HAL_DMA_IRQHandler+0x678>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a25      	ldr	r2, [pc, #148]	@ (800859c <HAL_DMA_IRQHandler+0x6a4>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d031      	beq.n	8008570 <HAL_DMA_IRQHandler+0x678>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a23      	ldr	r2, [pc, #140]	@ (80085a0 <HAL_DMA_IRQHandler+0x6a8>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d02c      	beq.n	8008570 <HAL_DMA_IRQHandler+0x678>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a22      	ldr	r2, [pc, #136]	@ (80085a4 <HAL_DMA_IRQHandler+0x6ac>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d027      	beq.n	8008570 <HAL_DMA_IRQHandler+0x678>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a20      	ldr	r2, [pc, #128]	@ (80085a8 <HAL_DMA_IRQHandler+0x6b0>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d022      	beq.n	8008570 <HAL_DMA_IRQHandler+0x678>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a1f      	ldr	r2, [pc, #124]	@ (80085ac <HAL_DMA_IRQHandler+0x6b4>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d01d      	beq.n	8008570 <HAL_DMA_IRQHandler+0x678>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a1d      	ldr	r2, [pc, #116]	@ (80085b0 <HAL_DMA_IRQHandler+0x6b8>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d018      	beq.n	8008570 <HAL_DMA_IRQHandler+0x678>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a1c      	ldr	r2, [pc, #112]	@ (80085b4 <HAL_DMA_IRQHandler+0x6bc>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d013      	beq.n	8008570 <HAL_DMA_IRQHandler+0x678>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a1a      	ldr	r2, [pc, #104]	@ (80085b8 <HAL_DMA_IRQHandler+0x6c0>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d00e      	beq.n	8008570 <HAL_DMA_IRQHandler+0x678>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a19      	ldr	r2, [pc, #100]	@ (80085bc <HAL_DMA_IRQHandler+0x6c4>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d009      	beq.n	8008570 <HAL_DMA_IRQHandler+0x678>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a17      	ldr	r2, [pc, #92]	@ (80085c0 <HAL_DMA_IRQHandler+0x6c8>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d004      	beq.n	8008570 <HAL_DMA_IRQHandler+0x678>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a16      	ldr	r2, [pc, #88]	@ (80085c4 <HAL_DMA_IRQHandler+0x6cc>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d12b      	bne.n	80085c8 <HAL_DMA_IRQHandler+0x6d0>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f003 0310 	and.w	r3, r3, #16
 800857a:	2b00      	cmp	r3, #0
 800857c:	bf14      	ite	ne
 800857e:	2301      	movne	r3, #1
 8008580:	2300      	moveq	r3, #0
 8008582:	b2db      	uxtb	r3, r3
 8008584:	e02a      	b.n	80085dc <HAL_DMA_IRQHandler+0x6e4>
 8008586:	bf00      	nop
 8008588:	40020010 	.word	0x40020010
 800858c:	40020028 	.word	0x40020028
 8008590:	40020040 	.word	0x40020040
 8008594:	40020058 	.word	0x40020058
 8008598:	40020070 	.word	0x40020070
 800859c:	40020088 	.word	0x40020088
 80085a0:	400200a0 	.word	0x400200a0
 80085a4:	400200b8 	.word	0x400200b8
 80085a8:	40020410 	.word	0x40020410
 80085ac:	40020428 	.word	0x40020428
 80085b0:	40020440 	.word	0x40020440
 80085b4:	40020458 	.word	0x40020458
 80085b8:	40020470 	.word	0x40020470
 80085bc:	40020488 	.word	0x40020488
 80085c0:	400204a0 	.word	0x400204a0
 80085c4:	400204b8 	.word	0x400204b8
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f003 0302 	and.w	r3, r3, #2
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	bf14      	ite	ne
 80085d6:	2301      	movne	r3, #1
 80085d8:	2300      	moveq	r3, #0
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f000 8087 	beq.w	80086f0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085e6:	f003 031f 	and.w	r3, r3, #31
 80085ea:	2220      	movs	r2, #32
 80085ec:	409a      	lsls	r2, r3
 80085ee:	6a3b      	ldr	r3, [r7, #32]
 80085f0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	2b04      	cmp	r3, #4
 80085fc:	d139      	bne.n	8008672 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f022 0216 	bic.w	r2, r2, #22
 800860c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	695a      	ldr	r2, [r3, #20]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800861c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008622:	2b00      	cmp	r3, #0
 8008624:	d103      	bne.n	800862e <HAL_DMA_IRQHandler+0x736>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800862a:	2b00      	cmp	r3, #0
 800862c:	d007      	beq.n	800863e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f022 0208 	bic.w	r2, r2, #8
 800863c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008642:	f003 031f 	and.w	r3, r3, #31
 8008646:	223f      	movs	r2, #63	@ 0x3f
 8008648:	409a      	lsls	r2, r3
 800864a:	6a3b      	ldr	r3, [r7, #32]
 800864c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2201      	movs	r2, #1
 8008652:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2200      	movs	r2, #0
 800865a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008662:	2b00      	cmp	r3, #0
 8008664:	f000 834a 	beq.w	8008cfc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	4798      	blx	r3
          }
          return;
 8008670:	e344      	b.n	8008cfc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800867c:	2b00      	cmp	r3, #0
 800867e:	d018      	beq.n	80086b2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800868a:	2b00      	cmp	r3, #0
 800868c:	d108      	bne.n	80086a0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008692:	2b00      	cmp	r3, #0
 8008694:	d02c      	beq.n	80086f0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	4798      	blx	r3
 800869e:	e027      	b.n	80086f0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d023      	beq.n	80086f0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	4798      	blx	r3
 80086b0:	e01e      	b.n	80086f0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d10f      	bne.n	80086e0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f022 0210 	bic.w	r2, r2, #16
 80086ce:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2201      	movs	r2, #1
 80086d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d003      	beq.n	80086f0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	f000 8306 	beq.w	8008d06 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086fe:	f003 0301 	and.w	r3, r3, #1
 8008702:	2b00      	cmp	r3, #0
 8008704:	f000 8088 	beq.w	8008818 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2204      	movs	r2, #4
 800870c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a7a      	ldr	r2, [pc, #488]	@ (8008900 <HAL_DMA_IRQHandler+0xa08>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d04a      	beq.n	80087b0 <HAL_DMA_IRQHandler+0x8b8>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a79      	ldr	r2, [pc, #484]	@ (8008904 <HAL_DMA_IRQHandler+0xa0c>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d045      	beq.n	80087b0 <HAL_DMA_IRQHandler+0x8b8>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a77      	ldr	r2, [pc, #476]	@ (8008908 <HAL_DMA_IRQHandler+0xa10>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d040      	beq.n	80087b0 <HAL_DMA_IRQHandler+0x8b8>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a76      	ldr	r2, [pc, #472]	@ (800890c <HAL_DMA_IRQHandler+0xa14>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d03b      	beq.n	80087b0 <HAL_DMA_IRQHandler+0x8b8>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a74      	ldr	r2, [pc, #464]	@ (8008910 <HAL_DMA_IRQHandler+0xa18>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d036      	beq.n	80087b0 <HAL_DMA_IRQHandler+0x8b8>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a73      	ldr	r2, [pc, #460]	@ (8008914 <HAL_DMA_IRQHandler+0xa1c>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d031      	beq.n	80087b0 <HAL_DMA_IRQHandler+0x8b8>
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a71      	ldr	r2, [pc, #452]	@ (8008918 <HAL_DMA_IRQHandler+0xa20>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d02c      	beq.n	80087b0 <HAL_DMA_IRQHandler+0x8b8>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a70      	ldr	r2, [pc, #448]	@ (800891c <HAL_DMA_IRQHandler+0xa24>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d027      	beq.n	80087b0 <HAL_DMA_IRQHandler+0x8b8>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a6e      	ldr	r2, [pc, #440]	@ (8008920 <HAL_DMA_IRQHandler+0xa28>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d022      	beq.n	80087b0 <HAL_DMA_IRQHandler+0x8b8>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a6d      	ldr	r2, [pc, #436]	@ (8008924 <HAL_DMA_IRQHandler+0xa2c>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d01d      	beq.n	80087b0 <HAL_DMA_IRQHandler+0x8b8>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a6b      	ldr	r2, [pc, #428]	@ (8008928 <HAL_DMA_IRQHandler+0xa30>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d018      	beq.n	80087b0 <HAL_DMA_IRQHandler+0x8b8>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a6a      	ldr	r2, [pc, #424]	@ (800892c <HAL_DMA_IRQHandler+0xa34>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d013      	beq.n	80087b0 <HAL_DMA_IRQHandler+0x8b8>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a68      	ldr	r2, [pc, #416]	@ (8008930 <HAL_DMA_IRQHandler+0xa38>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d00e      	beq.n	80087b0 <HAL_DMA_IRQHandler+0x8b8>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a67      	ldr	r2, [pc, #412]	@ (8008934 <HAL_DMA_IRQHandler+0xa3c>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d009      	beq.n	80087b0 <HAL_DMA_IRQHandler+0x8b8>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a65      	ldr	r2, [pc, #404]	@ (8008938 <HAL_DMA_IRQHandler+0xa40>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d004      	beq.n	80087b0 <HAL_DMA_IRQHandler+0x8b8>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a64      	ldr	r2, [pc, #400]	@ (800893c <HAL_DMA_IRQHandler+0xa44>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d108      	bne.n	80087c2 <HAL_DMA_IRQHandler+0x8ca>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f022 0201 	bic.w	r2, r2, #1
 80087be:	601a      	str	r2, [r3, #0]
 80087c0:	e007      	b.n	80087d2 <HAL_DMA_IRQHandler+0x8da>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	681a      	ldr	r2, [r3, #0]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f022 0201 	bic.w	r2, r2, #1
 80087d0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	3301      	adds	r3, #1
 80087d6:	60fb      	str	r3, [r7, #12]
 80087d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087da:	429a      	cmp	r2, r3
 80087dc:	d307      	bcc.n	80087ee <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f003 0301 	and.w	r3, r3, #1
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d1f2      	bne.n	80087d2 <HAL_DMA_IRQHandler+0x8da>
 80087ec:	e000      	b.n	80087f0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80087ee:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f003 0301 	and.w	r3, r3, #1
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d004      	beq.n	8008808 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2203      	movs	r2, #3
 8008802:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8008806:	e003      	b.n	8008810 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2201      	movs	r2, #1
 800880c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800881c:	2b00      	cmp	r3, #0
 800881e:	f000 8272 	beq.w	8008d06 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	4798      	blx	r3
 800882a:	e26c      	b.n	8008d06 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a43      	ldr	r2, [pc, #268]	@ (8008940 <HAL_DMA_IRQHandler+0xa48>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d022      	beq.n	800887c <HAL_DMA_IRQHandler+0x984>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a42      	ldr	r2, [pc, #264]	@ (8008944 <HAL_DMA_IRQHandler+0xa4c>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d01d      	beq.n	800887c <HAL_DMA_IRQHandler+0x984>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a40      	ldr	r2, [pc, #256]	@ (8008948 <HAL_DMA_IRQHandler+0xa50>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d018      	beq.n	800887c <HAL_DMA_IRQHandler+0x984>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a3f      	ldr	r2, [pc, #252]	@ (800894c <HAL_DMA_IRQHandler+0xa54>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d013      	beq.n	800887c <HAL_DMA_IRQHandler+0x984>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a3d      	ldr	r2, [pc, #244]	@ (8008950 <HAL_DMA_IRQHandler+0xa58>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d00e      	beq.n	800887c <HAL_DMA_IRQHandler+0x984>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a3c      	ldr	r2, [pc, #240]	@ (8008954 <HAL_DMA_IRQHandler+0xa5c>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d009      	beq.n	800887c <HAL_DMA_IRQHandler+0x984>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a3a      	ldr	r2, [pc, #232]	@ (8008958 <HAL_DMA_IRQHandler+0xa60>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d004      	beq.n	800887c <HAL_DMA_IRQHandler+0x984>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a39      	ldr	r2, [pc, #228]	@ (800895c <HAL_DMA_IRQHandler+0xa64>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d101      	bne.n	8008880 <HAL_DMA_IRQHandler+0x988>
 800887c:	2301      	movs	r3, #1
 800887e:	e000      	b.n	8008882 <HAL_DMA_IRQHandler+0x98a>
 8008880:	2300      	movs	r3, #0
 8008882:	2b00      	cmp	r3, #0
 8008884:	f000 823f 	beq.w	8008d06 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008894:	f003 031f 	and.w	r3, r3, #31
 8008898:	2204      	movs	r2, #4
 800889a:	409a      	lsls	r2, r3
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	4013      	ands	r3, r2
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	f000 80cd 	beq.w	8008a40 <HAL_DMA_IRQHandler+0xb48>
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	f003 0304 	and.w	r3, r3, #4
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	f000 80c7 	beq.w	8008a40 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088b6:	f003 031f 	and.w	r3, r3, #31
 80088ba:	2204      	movs	r2, #4
 80088bc:	409a      	lsls	r2, r3
 80088be:	69fb      	ldr	r3, [r7, #28]
 80088c0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d049      	beq.n	8008960 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d109      	bne.n	80088ea <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088da:	2b00      	cmp	r3, #0
 80088dc:	f000 8210 	beq.w	8008d00 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80088e8:	e20a      	b.n	8008d00 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	f000 8206 	beq.w	8008d00 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80088fc:	e200      	b.n	8008d00 <HAL_DMA_IRQHandler+0xe08>
 80088fe:	bf00      	nop
 8008900:	40020010 	.word	0x40020010
 8008904:	40020028 	.word	0x40020028
 8008908:	40020040 	.word	0x40020040
 800890c:	40020058 	.word	0x40020058
 8008910:	40020070 	.word	0x40020070
 8008914:	40020088 	.word	0x40020088
 8008918:	400200a0 	.word	0x400200a0
 800891c:	400200b8 	.word	0x400200b8
 8008920:	40020410 	.word	0x40020410
 8008924:	40020428 	.word	0x40020428
 8008928:	40020440 	.word	0x40020440
 800892c:	40020458 	.word	0x40020458
 8008930:	40020470 	.word	0x40020470
 8008934:	40020488 	.word	0x40020488
 8008938:	400204a0 	.word	0x400204a0
 800893c:	400204b8 	.word	0x400204b8
 8008940:	58025408 	.word	0x58025408
 8008944:	5802541c 	.word	0x5802541c
 8008948:	58025430 	.word	0x58025430
 800894c:	58025444 	.word	0x58025444
 8008950:	58025458 	.word	0x58025458
 8008954:	5802546c 	.word	0x5802546c
 8008958:	58025480 	.word	0x58025480
 800895c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	f003 0320 	and.w	r3, r3, #32
 8008966:	2b00      	cmp	r3, #0
 8008968:	d160      	bne.n	8008a2c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a7f      	ldr	r2, [pc, #508]	@ (8008b6c <HAL_DMA_IRQHandler+0xc74>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d04a      	beq.n	8008a0a <HAL_DMA_IRQHandler+0xb12>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a7d      	ldr	r2, [pc, #500]	@ (8008b70 <HAL_DMA_IRQHandler+0xc78>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d045      	beq.n	8008a0a <HAL_DMA_IRQHandler+0xb12>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a7c      	ldr	r2, [pc, #496]	@ (8008b74 <HAL_DMA_IRQHandler+0xc7c>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d040      	beq.n	8008a0a <HAL_DMA_IRQHandler+0xb12>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a7a      	ldr	r2, [pc, #488]	@ (8008b78 <HAL_DMA_IRQHandler+0xc80>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d03b      	beq.n	8008a0a <HAL_DMA_IRQHandler+0xb12>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a79      	ldr	r2, [pc, #484]	@ (8008b7c <HAL_DMA_IRQHandler+0xc84>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d036      	beq.n	8008a0a <HAL_DMA_IRQHandler+0xb12>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a77      	ldr	r2, [pc, #476]	@ (8008b80 <HAL_DMA_IRQHandler+0xc88>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d031      	beq.n	8008a0a <HAL_DMA_IRQHandler+0xb12>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a76      	ldr	r2, [pc, #472]	@ (8008b84 <HAL_DMA_IRQHandler+0xc8c>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d02c      	beq.n	8008a0a <HAL_DMA_IRQHandler+0xb12>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a74      	ldr	r2, [pc, #464]	@ (8008b88 <HAL_DMA_IRQHandler+0xc90>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d027      	beq.n	8008a0a <HAL_DMA_IRQHandler+0xb12>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4a73      	ldr	r2, [pc, #460]	@ (8008b8c <HAL_DMA_IRQHandler+0xc94>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d022      	beq.n	8008a0a <HAL_DMA_IRQHandler+0xb12>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a71      	ldr	r2, [pc, #452]	@ (8008b90 <HAL_DMA_IRQHandler+0xc98>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d01d      	beq.n	8008a0a <HAL_DMA_IRQHandler+0xb12>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a70      	ldr	r2, [pc, #448]	@ (8008b94 <HAL_DMA_IRQHandler+0xc9c>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d018      	beq.n	8008a0a <HAL_DMA_IRQHandler+0xb12>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a6e      	ldr	r2, [pc, #440]	@ (8008b98 <HAL_DMA_IRQHandler+0xca0>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d013      	beq.n	8008a0a <HAL_DMA_IRQHandler+0xb12>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a6d      	ldr	r2, [pc, #436]	@ (8008b9c <HAL_DMA_IRQHandler+0xca4>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d00e      	beq.n	8008a0a <HAL_DMA_IRQHandler+0xb12>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a6b      	ldr	r2, [pc, #428]	@ (8008ba0 <HAL_DMA_IRQHandler+0xca8>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d009      	beq.n	8008a0a <HAL_DMA_IRQHandler+0xb12>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a6a      	ldr	r2, [pc, #424]	@ (8008ba4 <HAL_DMA_IRQHandler+0xcac>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d004      	beq.n	8008a0a <HAL_DMA_IRQHandler+0xb12>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a68      	ldr	r2, [pc, #416]	@ (8008ba8 <HAL_DMA_IRQHandler+0xcb0>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d108      	bne.n	8008a1c <HAL_DMA_IRQHandler+0xb24>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f022 0208 	bic.w	r2, r2, #8
 8008a18:	601a      	str	r2, [r3, #0]
 8008a1a:	e007      	b.n	8008a2c <HAL_DMA_IRQHandler+0xb34>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f022 0204 	bic.w	r2, r2, #4
 8008a2a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	f000 8165 	beq.w	8008d00 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008a3e:	e15f      	b.n	8008d00 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a44:	f003 031f 	and.w	r3, r3, #31
 8008a48:	2202      	movs	r2, #2
 8008a4a:	409a      	lsls	r2, r3
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	4013      	ands	r3, r2
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	f000 80c5 	beq.w	8008be0 <HAL_DMA_IRQHandler+0xce8>
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	f003 0302 	and.w	r3, r3, #2
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	f000 80bf 	beq.w	8008be0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a66:	f003 031f 	and.w	r3, r3, #31
 8008a6a:	2202      	movs	r2, #2
 8008a6c:	409a      	lsls	r2, r3
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d018      	beq.n	8008aae <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d109      	bne.n	8008a9a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	f000 813a 	beq.w	8008d04 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008a98:	e134      	b.n	8008d04 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	f000 8130 	beq.w	8008d04 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008aac:	e12a      	b.n	8008d04 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	f003 0320 	and.w	r3, r3, #32
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	f040 8089 	bne.w	8008bcc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4a2b      	ldr	r2, [pc, #172]	@ (8008b6c <HAL_DMA_IRQHandler+0xc74>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d04a      	beq.n	8008b5a <HAL_DMA_IRQHandler+0xc62>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a29      	ldr	r2, [pc, #164]	@ (8008b70 <HAL_DMA_IRQHandler+0xc78>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d045      	beq.n	8008b5a <HAL_DMA_IRQHandler+0xc62>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a28      	ldr	r2, [pc, #160]	@ (8008b74 <HAL_DMA_IRQHandler+0xc7c>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d040      	beq.n	8008b5a <HAL_DMA_IRQHandler+0xc62>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a26      	ldr	r2, [pc, #152]	@ (8008b78 <HAL_DMA_IRQHandler+0xc80>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d03b      	beq.n	8008b5a <HAL_DMA_IRQHandler+0xc62>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a25      	ldr	r2, [pc, #148]	@ (8008b7c <HAL_DMA_IRQHandler+0xc84>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d036      	beq.n	8008b5a <HAL_DMA_IRQHandler+0xc62>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a23      	ldr	r2, [pc, #140]	@ (8008b80 <HAL_DMA_IRQHandler+0xc88>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d031      	beq.n	8008b5a <HAL_DMA_IRQHandler+0xc62>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a22      	ldr	r2, [pc, #136]	@ (8008b84 <HAL_DMA_IRQHandler+0xc8c>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d02c      	beq.n	8008b5a <HAL_DMA_IRQHandler+0xc62>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a20      	ldr	r2, [pc, #128]	@ (8008b88 <HAL_DMA_IRQHandler+0xc90>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d027      	beq.n	8008b5a <HAL_DMA_IRQHandler+0xc62>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a1f      	ldr	r2, [pc, #124]	@ (8008b8c <HAL_DMA_IRQHandler+0xc94>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d022      	beq.n	8008b5a <HAL_DMA_IRQHandler+0xc62>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a1d      	ldr	r2, [pc, #116]	@ (8008b90 <HAL_DMA_IRQHandler+0xc98>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d01d      	beq.n	8008b5a <HAL_DMA_IRQHandler+0xc62>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a1c      	ldr	r2, [pc, #112]	@ (8008b94 <HAL_DMA_IRQHandler+0xc9c>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d018      	beq.n	8008b5a <HAL_DMA_IRQHandler+0xc62>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a1a      	ldr	r2, [pc, #104]	@ (8008b98 <HAL_DMA_IRQHandler+0xca0>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d013      	beq.n	8008b5a <HAL_DMA_IRQHandler+0xc62>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a19      	ldr	r2, [pc, #100]	@ (8008b9c <HAL_DMA_IRQHandler+0xca4>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d00e      	beq.n	8008b5a <HAL_DMA_IRQHandler+0xc62>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a17      	ldr	r2, [pc, #92]	@ (8008ba0 <HAL_DMA_IRQHandler+0xca8>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d009      	beq.n	8008b5a <HAL_DMA_IRQHandler+0xc62>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a16      	ldr	r2, [pc, #88]	@ (8008ba4 <HAL_DMA_IRQHandler+0xcac>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d004      	beq.n	8008b5a <HAL_DMA_IRQHandler+0xc62>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4a14      	ldr	r2, [pc, #80]	@ (8008ba8 <HAL_DMA_IRQHandler+0xcb0>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d128      	bne.n	8008bac <HAL_DMA_IRQHandler+0xcb4>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f022 0214 	bic.w	r2, r2, #20
 8008b68:	601a      	str	r2, [r3, #0]
 8008b6a:	e027      	b.n	8008bbc <HAL_DMA_IRQHandler+0xcc4>
 8008b6c:	40020010 	.word	0x40020010
 8008b70:	40020028 	.word	0x40020028
 8008b74:	40020040 	.word	0x40020040
 8008b78:	40020058 	.word	0x40020058
 8008b7c:	40020070 	.word	0x40020070
 8008b80:	40020088 	.word	0x40020088
 8008b84:	400200a0 	.word	0x400200a0
 8008b88:	400200b8 	.word	0x400200b8
 8008b8c:	40020410 	.word	0x40020410
 8008b90:	40020428 	.word	0x40020428
 8008b94:	40020440 	.word	0x40020440
 8008b98:	40020458 	.word	0x40020458
 8008b9c:	40020470 	.word	0x40020470
 8008ba0:	40020488 	.word	0x40020488
 8008ba4:	400204a0 	.word	0x400204a0
 8008ba8:	400204b8 	.word	0x400204b8
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f022 020a 	bic.w	r2, r2, #10
 8008bba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	f000 8097 	beq.w	8008d04 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008bde:	e091      	b.n	8008d04 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008be4:	f003 031f 	and.w	r3, r3, #31
 8008be8:	2208      	movs	r2, #8
 8008bea:	409a      	lsls	r2, r3
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	4013      	ands	r3, r2
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	f000 8088 	beq.w	8008d06 <HAL_DMA_IRQHandler+0xe0e>
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	f003 0308 	and.w	r3, r3, #8
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	f000 8082 	beq.w	8008d06 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a41      	ldr	r2, [pc, #260]	@ (8008d0c <HAL_DMA_IRQHandler+0xe14>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d04a      	beq.n	8008ca2 <HAL_DMA_IRQHandler+0xdaa>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a3f      	ldr	r2, [pc, #252]	@ (8008d10 <HAL_DMA_IRQHandler+0xe18>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d045      	beq.n	8008ca2 <HAL_DMA_IRQHandler+0xdaa>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a3e      	ldr	r2, [pc, #248]	@ (8008d14 <HAL_DMA_IRQHandler+0xe1c>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d040      	beq.n	8008ca2 <HAL_DMA_IRQHandler+0xdaa>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a3c      	ldr	r2, [pc, #240]	@ (8008d18 <HAL_DMA_IRQHandler+0xe20>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d03b      	beq.n	8008ca2 <HAL_DMA_IRQHandler+0xdaa>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a3b      	ldr	r2, [pc, #236]	@ (8008d1c <HAL_DMA_IRQHandler+0xe24>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d036      	beq.n	8008ca2 <HAL_DMA_IRQHandler+0xdaa>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a39      	ldr	r2, [pc, #228]	@ (8008d20 <HAL_DMA_IRQHandler+0xe28>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d031      	beq.n	8008ca2 <HAL_DMA_IRQHandler+0xdaa>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a38      	ldr	r2, [pc, #224]	@ (8008d24 <HAL_DMA_IRQHandler+0xe2c>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d02c      	beq.n	8008ca2 <HAL_DMA_IRQHandler+0xdaa>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a36      	ldr	r2, [pc, #216]	@ (8008d28 <HAL_DMA_IRQHandler+0xe30>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d027      	beq.n	8008ca2 <HAL_DMA_IRQHandler+0xdaa>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a35      	ldr	r2, [pc, #212]	@ (8008d2c <HAL_DMA_IRQHandler+0xe34>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d022      	beq.n	8008ca2 <HAL_DMA_IRQHandler+0xdaa>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a33      	ldr	r2, [pc, #204]	@ (8008d30 <HAL_DMA_IRQHandler+0xe38>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d01d      	beq.n	8008ca2 <HAL_DMA_IRQHandler+0xdaa>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a32      	ldr	r2, [pc, #200]	@ (8008d34 <HAL_DMA_IRQHandler+0xe3c>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d018      	beq.n	8008ca2 <HAL_DMA_IRQHandler+0xdaa>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a30      	ldr	r2, [pc, #192]	@ (8008d38 <HAL_DMA_IRQHandler+0xe40>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d013      	beq.n	8008ca2 <HAL_DMA_IRQHandler+0xdaa>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a2f      	ldr	r2, [pc, #188]	@ (8008d3c <HAL_DMA_IRQHandler+0xe44>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d00e      	beq.n	8008ca2 <HAL_DMA_IRQHandler+0xdaa>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a2d      	ldr	r2, [pc, #180]	@ (8008d40 <HAL_DMA_IRQHandler+0xe48>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d009      	beq.n	8008ca2 <HAL_DMA_IRQHandler+0xdaa>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a2c      	ldr	r2, [pc, #176]	@ (8008d44 <HAL_DMA_IRQHandler+0xe4c>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d004      	beq.n	8008ca2 <HAL_DMA_IRQHandler+0xdaa>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a2a      	ldr	r2, [pc, #168]	@ (8008d48 <HAL_DMA_IRQHandler+0xe50>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d108      	bne.n	8008cb4 <HAL_DMA_IRQHandler+0xdbc>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	681a      	ldr	r2, [r3, #0]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f022 021c 	bic.w	r2, r2, #28
 8008cb0:	601a      	str	r2, [r3, #0]
 8008cb2:	e007      	b.n	8008cc4 <HAL_DMA_IRQHandler+0xdcc>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f022 020e 	bic.w	r2, r2, #14
 8008cc2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008cc8:	f003 031f 	and.w	r3, r3, #31
 8008ccc:	2201      	movs	r2, #1
 8008cce:	409a      	lsls	r2, r3
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2201      	movs	r2, #1
 8008cde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d009      	beq.n	8008d06 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	4798      	blx	r3
 8008cfa:	e004      	b.n	8008d06 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008cfc:	bf00      	nop
 8008cfe:	e002      	b.n	8008d06 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008d00:	bf00      	nop
 8008d02:	e000      	b.n	8008d06 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008d04:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008d06:	3728      	adds	r7, #40	@ 0x28
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}
 8008d0c:	40020010 	.word	0x40020010
 8008d10:	40020028 	.word	0x40020028
 8008d14:	40020040 	.word	0x40020040
 8008d18:	40020058 	.word	0x40020058
 8008d1c:	40020070 	.word	0x40020070
 8008d20:	40020088 	.word	0x40020088
 8008d24:	400200a0 	.word	0x400200a0
 8008d28:	400200b8 	.word	0x400200b8
 8008d2c:	40020410 	.word	0x40020410
 8008d30:	40020428 	.word	0x40020428
 8008d34:	40020440 	.word	0x40020440
 8008d38:	40020458 	.word	0x40020458
 8008d3c:	40020470 	.word	0x40020470
 8008d40:	40020488 	.word	0x40020488
 8008d44:	400204a0 	.word	0x400204a0
 8008d48:	400204b8 	.word	0x400204b8

08008d4c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b087      	sub	sp, #28
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	607a      	str	r2, [r7, #4]
 8008d58:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d5e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d64:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a7f      	ldr	r2, [pc, #508]	@ (8008f68 <DMA_SetConfig+0x21c>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d072      	beq.n	8008e56 <DMA_SetConfig+0x10a>
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a7d      	ldr	r2, [pc, #500]	@ (8008f6c <DMA_SetConfig+0x220>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d06d      	beq.n	8008e56 <DMA_SetConfig+0x10a>
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a7c      	ldr	r2, [pc, #496]	@ (8008f70 <DMA_SetConfig+0x224>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d068      	beq.n	8008e56 <DMA_SetConfig+0x10a>
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a7a      	ldr	r2, [pc, #488]	@ (8008f74 <DMA_SetConfig+0x228>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d063      	beq.n	8008e56 <DMA_SetConfig+0x10a>
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a79      	ldr	r2, [pc, #484]	@ (8008f78 <DMA_SetConfig+0x22c>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d05e      	beq.n	8008e56 <DMA_SetConfig+0x10a>
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a77      	ldr	r2, [pc, #476]	@ (8008f7c <DMA_SetConfig+0x230>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d059      	beq.n	8008e56 <DMA_SetConfig+0x10a>
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a76      	ldr	r2, [pc, #472]	@ (8008f80 <DMA_SetConfig+0x234>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d054      	beq.n	8008e56 <DMA_SetConfig+0x10a>
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a74      	ldr	r2, [pc, #464]	@ (8008f84 <DMA_SetConfig+0x238>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d04f      	beq.n	8008e56 <DMA_SetConfig+0x10a>
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a73      	ldr	r2, [pc, #460]	@ (8008f88 <DMA_SetConfig+0x23c>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d04a      	beq.n	8008e56 <DMA_SetConfig+0x10a>
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a71      	ldr	r2, [pc, #452]	@ (8008f8c <DMA_SetConfig+0x240>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d045      	beq.n	8008e56 <DMA_SetConfig+0x10a>
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a70      	ldr	r2, [pc, #448]	@ (8008f90 <DMA_SetConfig+0x244>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d040      	beq.n	8008e56 <DMA_SetConfig+0x10a>
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a6e      	ldr	r2, [pc, #440]	@ (8008f94 <DMA_SetConfig+0x248>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d03b      	beq.n	8008e56 <DMA_SetConfig+0x10a>
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a6d      	ldr	r2, [pc, #436]	@ (8008f98 <DMA_SetConfig+0x24c>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d036      	beq.n	8008e56 <DMA_SetConfig+0x10a>
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a6b      	ldr	r2, [pc, #428]	@ (8008f9c <DMA_SetConfig+0x250>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d031      	beq.n	8008e56 <DMA_SetConfig+0x10a>
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a6a      	ldr	r2, [pc, #424]	@ (8008fa0 <DMA_SetConfig+0x254>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d02c      	beq.n	8008e56 <DMA_SetConfig+0x10a>
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a68      	ldr	r2, [pc, #416]	@ (8008fa4 <DMA_SetConfig+0x258>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d027      	beq.n	8008e56 <DMA_SetConfig+0x10a>
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a67      	ldr	r2, [pc, #412]	@ (8008fa8 <DMA_SetConfig+0x25c>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d022      	beq.n	8008e56 <DMA_SetConfig+0x10a>
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4a65      	ldr	r2, [pc, #404]	@ (8008fac <DMA_SetConfig+0x260>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d01d      	beq.n	8008e56 <DMA_SetConfig+0x10a>
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a64      	ldr	r2, [pc, #400]	@ (8008fb0 <DMA_SetConfig+0x264>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d018      	beq.n	8008e56 <DMA_SetConfig+0x10a>
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a62      	ldr	r2, [pc, #392]	@ (8008fb4 <DMA_SetConfig+0x268>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d013      	beq.n	8008e56 <DMA_SetConfig+0x10a>
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a61      	ldr	r2, [pc, #388]	@ (8008fb8 <DMA_SetConfig+0x26c>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d00e      	beq.n	8008e56 <DMA_SetConfig+0x10a>
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a5f      	ldr	r2, [pc, #380]	@ (8008fbc <DMA_SetConfig+0x270>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d009      	beq.n	8008e56 <DMA_SetConfig+0x10a>
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a5e      	ldr	r2, [pc, #376]	@ (8008fc0 <DMA_SetConfig+0x274>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d004      	beq.n	8008e56 <DMA_SetConfig+0x10a>
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a5c      	ldr	r2, [pc, #368]	@ (8008fc4 <DMA_SetConfig+0x278>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d101      	bne.n	8008e5a <DMA_SetConfig+0x10e>
 8008e56:	2301      	movs	r3, #1
 8008e58:	e000      	b.n	8008e5c <DMA_SetConfig+0x110>
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d00d      	beq.n	8008e7c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008e64:	68fa      	ldr	r2, [r7, #12]
 8008e66:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8008e68:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d004      	beq.n	8008e7c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e76:	68fa      	ldr	r2, [r7, #12]
 8008e78:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008e7a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a39      	ldr	r2, [pc, #228]	@ (8008f68 <DMA_SetConfig+0x21c>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d04a      	beq.n	8008f1c <DMA_SetConfig+0x1d0>
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a38      	ldr	r2, [pc, #224]	@ (8008f6c <DMA_SetConfig+0x220>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d045      	beq.n	8008f1c <DMA_SetConfig+0x1d0>
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a36      	ldr	r2, [pc, #216]	@ (8008f70 <DMA_SetConfig+0x224>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d040      	beq.n	8008f1c <DMA_SetConfig+0x1d0>
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a35      	ldr	r2, [pc, #212]	@ (8008f74 <DMA_SetConfig+0x228>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d03b      	beq.n	8008f1c <DMA_SetConfig+0x1d0>
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a33      	ldr	r2, [pc, #204]	@ (8008f78 <DMA_SetConfig+0x22c>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d036      	beq.n	8008f1c <DMA_SetConfig+0x1d0>
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a32      	ldr	r2, [pc, #200]	@ (8008f7c <DMA_SetConfig+0x230>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d031      	beq.n	8008f1c <DMA_SetConfig+0x1d0>
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a30      	ldr	r2, [pc, #192]	@ (8008f80 <DMA_SetConfig+0x234>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d02c      	beq.n	8008f1c <DMA_SetConfig+0x1d0>
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a2f      	ldr	r2, [pc, #188]	@ (8008f84 <DMA_SetConfig+0x238>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d027      	beq.n	8008f1c <DMA_SetConfig+0x1d0>
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a2d      	ldr	r2, [pc, #180]	@ (8008f88 <DMA_SetConfig+0x23c>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d022      	beq.n	8008f1c <DMA_SetConfig+0x1d0>
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a2c      	ldr	r2, [pc, #176]	@ (8008f8c <DMA_SetConfig+0x240>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d01d      	beq.n	8008f1c <DMA_SetConfig+0x1d0>
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a2a      	ldr	r2, [pc, #168]	@ (8008f90 <DMA_SetConfig+0x244>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d018      	beq.n	8008f1c <DMA_SetConfig+0x1d0>
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a29      	ldr	r2, [pc, #164]	@ (8008f94 <DMA_SetConfig+0x248>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d013      	beq.n	8008f1c <DMA_SetConfig+0x1d0>
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a27      	ldr	r2, [pc, #156]	@ (8008f98 <DMA_SetConfig+0x24c>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d00e      	beq.n	8008f1c <DMA_SetConfig+0x1d0>
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a26      	ldr	r2, [pc, #152]	@ (8008f9c <DMA_SetConfig+0x250>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d009      	beq.n	8008f1c <DMA_SetConfig+0x1d0>
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a24      	ldr	r2, [pc, #144]	@ (8008fa0 <DMA_SetConfig+0x254>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d004      	beq.n	8008f1c <DMA_SetConfig+0x1d0>
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a23      	ldr	r2, [pc, #140]	@ (8008fa4 <DMA_SetConfig+0x258>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d101      	bne.n	8008f20 <DMA_SetConfig+0x1d4>
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	e000      	b.n	8008f22 <DMA_SetConfig+0x1d6>
 8008f20:	2300      	movs	r3, #0
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d059      	beq.n	8008fda <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f2a:	f003 031f 	and.w	r3, r3, #31
 8008f2e:	223f      	movs	r2, #63	@ 0x3f
 8008f30:	409a      	lsls	r2, r3
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008f44:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	683a      	ldr	r2, [r7, #0]
 8008f4c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	2b40      	cmp	r3, #64	@ 0x40
 8008f54:	d138      	bne.n	8008fc8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	68ba      	ldr	r2, [r7, #8]
 8008f64:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008f66:	e086      	b.n	8009076 <DMA_SetConfig+0x32a>
 8008f68:	40020010 	.word	0x40020010
 8008f6c:	40020028 	.word	0x40020028
 8008f70:	40020040 	.word	0x40020040
 8008f74:	40020058 	.word	0x40020058
 8008f78:	40020070 	.word	0x40020070
 8008f7c:	40020088 	.word	0x40020088
 8008f80:	400200a0 	.word	0x400200a0
 8008f84:	400200b8 	.word	0x400200b8
 8008f88:	40020410 	.word	0x40020410
 8008f8c:	40020428 	.word	0x40020428
 8008f90:	40020440 	.word	0x40020440
 8008f94:	40020458 	.word	0x40020458
 8008f98:	40020470 	.word	0x40020470
 8008f9c:	40020488 	.word	0x40020488
 8008fa0:	400204a0 	.word	0x400204a0
 8008fa4:	400204b8 	.word	0x400204b8
 8008fa8:	58025408 	.word	0x58025408
 8008fac:	5802541c 	.word	0x5802541c
 8008fb0:	58025430 	.word	0x58025430
 8008fb4:	58025444 	.word	0x58025444
 8008fb8:	58025458 	.word	0x58025458
 8008fbc:	5802546c 	.word	0x5802546c
 8008fc0:	58025480 	.word	0x58025480
 8008fc4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	68ba      	ldr	r2, [r7, #8]
 8008fce:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	60da      	str	r2, [r3, #12]
}
 8008fd8:	e04d      	b.n	8009076 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a29      	ldr	r2, [pc, #164]	@ (8009084 <DMA_SetConfig+0x338>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d022      	beq.n	800902a <DMA_SetConfig+0x2de>
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a27      	ldr	r2, [pc, #156]	@ (8009088 <DMA_SetConfig+0x33c>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d01d      	beq.n	800902a <DMA_SetConfig+0x2de>
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a26      	ldr	r2, [pc, #152]	@ (800908c <DMA_SetConfig+0x340>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d018      	beq.n	800902a <DMA_SetConfig+0x2de>
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a24      	ldr	r2, [pc, #144]	@ (8009090 <DMA_SetConfig+0x344>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d013      	beq.n	800902a <DMA_SetConfig+0x2de>
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a23      	ldr	r2, [pc, #140]	@ (8009094 <DMA_SetConfig+0x348>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d00e      	beq.n	800902a <DMA_SetConfig+0x2de>
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a21      	ldr	r2, [pc, #132]	@ (8009098 <DMA_SetConfig+0x34c>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d009      	beq.n	800902a <DMA_SetConfig+0x2de>
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a20      	ldr	r2, [pc, #128]	@ (800909c <DMA_SetConfig+0x350>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d004      	beq.n	800902a <DMA_SetConfig+0x2de>
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a1e      	ldr	r2, [pc, #120]	@ (80090a0 <DMA_SetConfig+0x354>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d101      	bne.n	800902e <DMA_SetConfig+0x2e2>
 800902a:	2301      	movs	r3, #1
 800902c:	e000      	b.n	8009030 <DMA_SetConfig+0x2e4>
 800902e:	2300      	movs	r3, #0
 8009030:	2b00      	cmp	r3, #0
 8009032:	d020      	beq.n	8009076 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009038:	f003 031f 	and.w	r3, r3, #31
 800903c:	2201      	movs	r2, #1
 800903e:	409a      	lsls	r2, r3
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	683a      	ldr	r2, [r7, #0]
 800904a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	689b      	ldr	r3, [r3, #8]
 8009050:	2b40      	cmp	r3, #64	@ 0x40
 8009052:	d108      	bne.n	8009066 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	687a      	ldr	r2, [r7, #4]
 800905a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	68ba      	ldr	r2, [r7, #8]
 8009062:	60da      	str	r2, [r3, #12]
}
 8009064:	e007      	b.n	8009076 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	68ba      	ldr	r2, [r7, #8]
 800906c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	60da      	str	r2, [r3, #12]
}
 8009076:	bf00      	nop
 8009078:	371c      	adds	r7, #28
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr
 8009082:	bf00      	nop
 8009084:	58025408 	.word	0x58025408
 8009088:	5802541c 	.word	0x5802541c
 800908c:	58025430 	.word	0x58025430
 8009090:	58025444 	.word	0x58025444
 8009094:	58025458 	.word	0x58025458
 8009098:	5802546c 	.word	0x5802546c
 800909c:	58025480 	.word	0x58025480
 80090a0:	58025494 	.word	0x58025494

080090a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b085      	sub	sp, #20
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a42      	ldr	r2, [pc, #264]	@ (80091bc <DMA_CalcBaseAndBitshift+0x118>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d04a      	beq.n	800914c <DMA_CalcBaseAndBitshift+0xa8>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4a41      	ldr	r2, [pc, #260]	@ (80091c0 <DMA_CalcBaseAndBitshift+0x11c>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d045      	beq.n	800914c <DMA_CalcBaseAndBitshift+0xa8>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4a3f      	ldr	r2, [pc, #252]	@ (80091c4 <DMA_CalcBaseAndBitshift+0x120>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d040      	beq.n	800914c <DMA_CalcBaseAndBitshift+0xa8>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4a3e      	ldr	r2, [pc, #248]	@ (80091c8 <DMA_CalcBaseAndBitshift+0x124>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d03b      	beq.n	800914c <DMA_CalcBaseAndBitshift+0xa8>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a3c      	ldr	r2, [pc, #240]	@ (80091cc <DMA_CalcBaseAndBitshift+0x128>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d036      	beq.n	800914c <DMA_CalcBaseAndBitshift+0xa8>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4a3b      	ldr	r2, [pc, #236]	@ (80091d0 <DMA_CalcBaseAndBitshift+0x12c>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d031      	beq.n	800914c <DMA_CalcBaseAndBitshift+0xa8>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	4a39      	ldr	r2, [pc, #228]	@ (80091d4 <DMA_CalcBaseAndBitshift+0x130>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d02c      	beq.n	800914c <DMA_CalcBaseAndBitshift+0xa8>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4a38      	ldr	r2, [pc, #224]	@ (80091d8 <DMA_CalcBaseAndBitshift+0x134>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d027      	beq.n	800914c <DMA_CalcBaseAndBitshift+0xa8>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a36      	ldr	r2, [pc, #216]	@ (80091dc <DMA_CalcBaseAndBitshift+0x138>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d022      	beq.n	800914c <DMA_CalcBaseAndBitshift+0xa8>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4a35      	ldr	r2, [pc, #212]	@ (80091e0 <DMA_CalcBaseAndBitshift+0x13c>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d01d      	beq.n	800914c <DMA_CalcBaseAndBitshift+0xa8>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a33      	ldr	r2, [pc, #204]	@ (80091e4 <DMA_CalcBaseAndBitshift+0x140>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d018      	beq.n	800914c <DMA_CalcBaseAndBitshift+0xa8>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4a32      	ldr	r2, [pc, #200]	@ (80091e8 <DMA_CalcBaseAndBitshift+0x144>)
 8009120:	4293      	cmp	r3, r2
 8009122:	d013      	beq.n	800914c <DMA_CalcBaseAndBitshift+0xa8>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a30      	ldr	r2, [pc, #192]	@ (80091ec <DMA_CalcBaseAndBitshift+0x148>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d00e      	beq.n	800914c <DMA_CalcBaseAndBitshift+0xa8>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4a2f      	ldr	r2, [pc, #188]	@ (80091f0 <DMA_CalcBaseAndBitshift+0x14c>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d009      	beq.n	800914c <DMA_CalcBaseAndBitshift+0xa8>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a2d      	ldr	r2, [pc, #180]	@ (80091f4 <DMA_CalcBaseAndBitshift+0x150>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d004      	beq.n	800914c <DMA_CalcBaseAndBitshift+0xa8>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a2c      	ldr	r2, [pc, #176]	@ (80091f8 <DMA_CalcBaseAndBitshift+0x154>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d101      	bne.n	8009150 <DMA_CalcBaseAndBitshift+0xac>
 800914c:	2301      	movs	r3, #1
 800914e:	e000      	b.n	8009152 <DMA_CalcBaseAndBitshift+0xae>
 8009150:	2300      	movs	r3, #0
 8009152:	2b00      	cmp	r3, #0
 8009154:	d024      	beq.n	80091a0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	b2db      	uxtb	r3, r3
 800915c:	3b10      	subs	r3, #16
 800915e:	4a27      	ldr	r2, [pc, #156]	@ (80091fc <DMA_CalcBaseAndBitshift+0x158>)
 8009160:	fba2 2303 	umull	r2, r3, r2, r3
 8009164:	091b      	lsrs	r3, r3, #4
 8009166:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f003 0307 	and.w	r3, r3, #7
 800916e:	4a24      	ldr	r2, [pc, #144]	@ (8009200 <DMA_CalcBaseAndBitshift+0x15c>)
 8009170:	5cd3      	ldrb	r3, [r2, r3]
 8009172:	461a      	mov	r2, r3
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2b03      	cmp	r3, #3
 800917c:	d908      	bls.n	8009190 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	461a      	mov	r2, r3
 8009184:	4b1f      	ldr	r3, [pc, #124]	@ (8009204 <DMA_CalcBaseAndBitshift+0x160>)
 8009186:	4013      	ands	r3, r2
 8009188:	1d1a      	adds	r2, r3, #4
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	659a      	str	r2, [r3, #88]	@ 0x58
 800918e:	e00d      	b.n	80091ac <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	461a      	mov	r2, r3
 8009196:	4b1b      	ldr	r3, [pc, #108]	@ (8009204 <DMA_CalcBaseAndBitshift+0x160>)
 8009198:	4013      	ands	r3, r2
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	6593      	str	r3, [r2, #88]	@ 0x58
 800919e:	e005      	b.n	80091ac <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3714      	adds	r7, #20
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr
 80091bc:	40020010 	.word	0x40020010
 80091c0:	40020028 	.word	0x40020028
 80091c4:	40020040 	.word	0x40020040
 80091c8:	40020058 	.word	0x40020058
 80091cc:	40020070 	.word	0x40020070
 80091d0:	40020088 	.word	0x40020088
 80091d4:	400200a0 	.word	0x400200a0
 80091d8:	400200b8 	.word	0x400200b8
 80091dc:	40020410 	.word	0x40020410
 80091e0:	40020428 	.word	0x40020428
 80091e4:	40020440 	.word	0x40020440
 80091e8:	40020458 	.word	0x40020458
 80091ec:	40020470 	.word	0x40020470
 80091f0:	40020488 	.word	0x40020488
 80091f4:	400204a0 	.word	0x400204a0
 80091f8:	400204b8 	.word	0x400204b8
 80091fc:	aaaaaaab 	.word	0xaaaaaaab
 8009200:	08011d88 	.word	0x08011d88
 8009204:	fffffc00 	.word	0xfffffc00

08009208 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009208:	b480      	push	{r7}
 800920a:	b085      	sub	sp, #20
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009210:	2300      	movs	r3, #0
 8009212:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	699b      	ldr	r3, [r3, #24]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d120      	bne.n	800925e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009220:	2b03      	cmp	r3, #3
 8009222:	d858      	bhi.n	80092d6 <DMA_CheckFifoParam+0xce>
 8009224:	a201      	add	r2, pc, #4	@ (adr r2, 800922c <DMA_CheckFifoParam+0x24>)
 8009226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800922a:	bf00      	nop
 800922c:	0800923d 	.word	0x0800923d
 8009230:	0800924f 	.word	0x0800924f
 8009234:	0800923d 	.word	0x0800923d
 8009238:	080092d7 	.word	0x080092d7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009240:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009244:	2b00      	cmp	r3, #0
 8009246:	d048      	beq.n	80092da <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009248:	2301      	movs	r3, #1
 800924a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800924c:	e045      	b.n	80092da <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009252:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8009256:	d142      	bne.n	80092de <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009258:	2301      	movs	r3, #1
 800925a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800925c:	e03f      	b.n	80092de <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	699b      	ldr	r3, [r3, #24]
 8009262:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009266:	d123      	bne.n	80092b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800926c:	2b03      	cmp	r3, #3
 800926e:	d838      	bhi.n	80092e2 <DMA_CheckFifoParam+0xda>
 8009270:	a201      	add	r2, pc, #4	@ (adr r2, 8009278 <DMA_CheckFifoParam+0x70>)
 8009272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009276:	bf00      	nop
 8009278:	08009289 	.word	0x08009289
 800927c:	0800928f 	.word	0x0800928f
 8009280:	08009289 	.word	0x08009289
 8009284:	080092a1 	.word	0x080092a1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009288:	2301      	movs	r3, #1
 800928a:	73fb      	strb	r3, [r7, #15]
        break;
 800928c:	e030      	b.n	80092f0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009292:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009296:	2b00      	cmp	r3, #0
 8009298:	d025      	beq.n	80092e6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800929a:	2301      	movs	r3, #1
 800929c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800929e:	e022      	b.n	80092e6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092a4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80092a8:	d11f      	bne.n	80092ea <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80092aa:	2301      	movs	r3, #1
 80092ac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80092ae:	e01c      	b.n	80092ea <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092b4:	2b02      	cmp	r3, #2
 80092b6:	d902      	bls.n	80092be <DMA_CheckFifoParam+0xb6>
 80092b8:	2b03      	cmp	r3, #3
 80092ba:	d003      	beq.n	80092c4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80092bc:	e018      	b.n	80092f0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80092be:	2301      	movs	r3, #1
 80092c0:	73fb      	strb	r3, [r7, #15]
        break;
 80092c2:	e015      	b.n	80092f0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d00e      	beq.n	80092ee <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80092d0:	2301      	movs	r3, #1
 80092d2:	73fb      	strb	r3, [r7, #15]
    break;
 80092d4:	e00b      	b.n	80092ee <DMA_CheckFifoParam+0xe6>
        break;
 80092d6:	bf00      	nop
 80092d8:	e00a      	b.n	80092f0 <DMA_CheckFifoParam+0xe8>
        break;
 80092da:	bf00      	nop
 80092dc:	e008      	b.n	80092f0 <DMA_CheckFifoParam+0xe8>
        break;
 80092de:	bf00      	nop
 80092e0:	e006      	b.n	80092f0 <DMA_CheckFifoParam+0xe8>
        break;
 80092e2:	bf00      	nop
 80092e4:	e004      	b.n	80092f0 <DMA_CheckFifoParam+0xe8>
        break;
 80092e6:	bf00      	nop
 80092e8:	e002      	b.n	80092f0 <DMA_CheckFifoParam+0xe8>
        break;
 80092ea:	bf00      	nop
 80092ec:	e000      	b.n	80092f0 <DMA_CheckFifoParam+0xe8>
    break;
 80092ee:	bf00      	nop
    }
  }

  return status;
 80092f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3714      	adds	r7, #20
 80092f6:	46bd      	mov	sp, r7
 80092f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fc:	4770      	bx	lr
 80092fe:	bf00      	nop

08009300 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009300:	b480      	push	{r7}
 8009302:	b085      	sub	sp, #20
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4a38      	ldr	r2, [pc, #224]	@ (80093f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d022      	beq.n	800935e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a36      	ldr	r2, [pc, #216]	@ (80093f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d01d      	beq.n	800935e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a35      	ldr	r2, [pc, #212]	@ (80093fc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d018      	beq.n	800935e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	4a33      	ldr	r2, [pc, #204]	@ (8009400 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d013      	beq.n	800935e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a32      	ldr	r2, [pc, #200]	@ (8009404 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d00e      	beq.n	800935e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a30      	ldr	r2, [pc, #192]	@ (8009408 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d009      	beq.n	800935e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4a2f      	ldr	r2, [pc, #188]	@ (800940c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d004      	beq.n	800935e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a2d      	ldr	r2, [pc, #180]	@ (8009410 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d101      	bne.n	8009362 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800935e:	2301      	movs	r3, #1
 8009360:	e000      	b.n	8009364 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009362:	2300      	movs	r3, #0
 8009364:	2b00      	cmp	r3, #0
 8009366:	d01a      	beq.n	800939e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	b2db      	uxtb	r3, r3
 800936e:	3b08      	subs	r3, #8
 8009370:	4a28      	ldr	r2, [pc, #160]	@ (8009414 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009372:	fba2 2303 	umull	r2, r3, r2, r3
 8009376:	091b      	lsrs	r3, r3, #4
 8009378:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800937a:	68fa      	ldr	r2, [r7, #12]
 800937c:	4b26      	ldr	r3, [pc, #152]	@ (8009418 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800937e:	4413      	add	r3, r2
 8009380:	009b      	lsls	r3, r3, #2
 8009382:	461a      	mov	r2, r3
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	4a24      	ldr	r2, [pc, #144]	@ (800941c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800938c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f003 031f 	and.w	r3, r3, #31
 8009394:	2201      	movs	r2, #1
 8009396:	409a      	lsls	r2, r3
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800939c:	e024      	b.n	80093e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	3b10      	subs	r3, #16
 80093a6:	4a1e      	ldr	r2, [pc, #120]	@ (8009420 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80093a8:	fba2 2303 	umull	r2, r3, r2, r3
 80093ac:	091b      	lsrs	r3, r3, #4
 80093ae:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	4a1c      	ldr	r2, [pc, #112]	@ (8009424 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d806      	bhi.n	80093c6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	4a1b      	ldr	r2, [pc, #108]	@ (8009428 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d902      	bls.n	80093c6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	3308      	adds	r3, #8
 80093c4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80093c6:	68fa      	ldr	r2, [r7, #12]
 80093c8:	4b18      	ldr	r3, [pc, #96]	@ (800942c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80093ca:	4413      	add	r3, r2
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	461a      	mov	r2, r3
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	4a16      	ldr	r2, [pc, #88]	@ (8009430 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80093d8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f003 031f 	and.w	r3, r3, #31
 80093e0:	2201      	movs	r2, #1
 80093e2:	409a      	lsls	r2, r3
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80093e8:	bf00      	nop
 80093ea:	3714      	adds	r7, #20
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr
 80093f4:	58025408 	.word	0x58025408
 80093f8:	5802541c 	.word	0x5802541c
 80093fc:	58025430 	.word	0x58025430
 8009400:	58025444 	.word	0x58025444
 8009404:	58025458 	.word	0x58025458
 8009408:	5802546c 	.word	0x5802546c
 800940c:	58025480 	.word	0x58025480
 8009410:	58025494 	.word	0x58025494
 8009414:	cccccccd 	.word	0xcccccccd
 8009418:	16009600 	.word	0x16009600
 800941c:	58025880 	.word	0x58025880
 8009420:	aaaaaaab 	.word	0xaaaaaaab
 8009424:	400204b8 	.word	0x400204b8
 8009428:	4002040f 	.word	0x4002040f
 800942c:	10008200 	.word	0x10008200
 8009430:	40020880 	.word	0x40020880

08009434 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009434:	b480      	push	{r7}
 8009436:	b085      	sub	sp, #20
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	b2db      	uxtb	r3, r3
 8009442:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d04a      	beq.n	80094e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	2b08      	cmp	r3, #8
 800944e:	d847      	bhi.n	80094e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a25      	ldr	r2, [pc, #148]	@ (80094ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d022      	beq.n	80094a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a24      	ldr	r2, [pc, #144]	@ (80094f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d01d      	beq.n	80094a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a22      	ldr	r2, [pc, #136]	@ (80094f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d018      	beq.n	80094a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a21      	ldr	r2, [pc, #132]	@ (80094f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d013      	beq.n	80094a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a1f      	ldr	r2, [pc, #124]	@ (80094fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d00e      	beq.n	80094a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a1e      	ldr	r2, [pc, #120]	@ (8009500 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d009      	beq.n	80094a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a1c      	ldr	r2, [pc, #112]	@ (8009504 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d004      	beq.n	80094a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a1b      	ldr	r2, [pc, #108]	@ (8009508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d101      	bne.n	80094a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80094a0:	2301      	movs	r3, #1
 80094a2:	e000      	b.n	80094a6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80094a4:	2300      	movs	r3, #0
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d00a      	beq.n	80094c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80094aa:	68fa      	ldr	r2, [r7, #12]
 80094ac:	4b17      	ldr	r3, [pc, #92]	@ (800950c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80094ae:	4413      	add	r3, r2
 80094b0:	009b      	lsls	r3, r3, #2
 80094b2:	461a      	mov	r2, r3
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	4a15      	ldr	r2, [pc, #84]	@ (8009510 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80094bc:	671a      	str	r2, [r3, #112]	@ 0x70
 80094be:	e009      	b.n	80094d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80094c0:	68fa      	ldr	r2, [r7, #12]
 80094c2:	4b14      	ldr	r3, [pc, #80]	@ (8009514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80094c4:	4413      	add	r3, r2
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	461a      	mov	r2, r3
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	4a11      	ldr	r2, [pc, #68]	@ (8009518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80094d2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	3b01      	subs	r3, #1
 80094d8:	2201      	movs	r2, #1
 80094da:	409a      	lsls	r2, r3
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80094e0:	bf00      	nop
 80094e2:	3714      	adds	r7, #20
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr
 80094ec:	58025408 	.word	0x58025408
 80094f0:	5802541c 	.word	0x5802541c
 80094f4:	58025430 	.word	0x58025430
 80094f8:	58025444 	.word	0x58025444
 80094fc:	58025458 	.word	0x58025458
 8009500:	5802546c 	.word	0x5802546c
 8009504:	58025480 	.word	0x58025480
 8009508:	58025494 	.word	0x58025494
 800950c:	1600963f 	.word	0x1600963f
 8009510:	58025940 	.word	0x58025940
 8009514:	1000823f 	.word	0x1000823f
 8009518:	40020940 	.word	0x40020940

0800951c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b084      	sub	sp, #16
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d101      	bne.n	800952e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800952a:	2301      	movs	r3, #1
 800952c:	e0cf      	b.n	80096ce <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009534:	2b00      	cmp	r3, #0
 8009536:	d106      	bne.n	8009546 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2223      	movs	r2, #35	@ 0x23
 800953c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f7fa f8c9 	bl	80036d8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009546:	4b64      	ldr	r3, [pc, #400]	@ (80096d8 <HAL_ETH_Init+0x1bc>)
 8009548:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800954c:	4a62      	ldr	r2, [pc, #392]	@ (80096d8 <HAL_ETH_Init+0x1bc>)
 800954e:	f043 0302 	orr.w	r3, r3, #2
 8009552:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8009556:	4b60      	ldr	r3, [pc, #384]	@ (80096d8 <HAL_ETH_Init+0x1bc>)
 8009558:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800955c:	f003 0302 	and.w	r3, r3, #2
 8009560:	60bb      	str	r3, [r7, #8]
 8009562:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	7a1b      	ldrb	r3, [r3, #8]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d103      	bne.n	8009574 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800956c:	2000      	movs	r0, #0
 800956e:	f7fa fd85 	bl	800407c <HAL_SYSCFG_ETHInterfaceSelect>
 8009572:	e003      	b.n	800957c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8009574:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8009578:	f7fa fd80 	bl	800407c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800957c:	4b57      	ldr	r3, [pc, #348]	@ (80096dc <HAL_ETH_Init+0x1c0>)
 800957e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	687a      	ldr	r2, [r7, #4]
 800958c:	6812      	ldr	r2, [r2, #0]
 800958e:	f043 0301 	orr.w	r3, r3, #1
 8009592:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009596:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009598:	f7fa fd40 	bl	800401c <HAL_GetTick>
 800959c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800959e:	e011      	b.n	80095c4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80095a0:	f7fa fd3c 	bl	800401c <HAL_GetTick>
 80095a4:	4602      	mov	r2, r0
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	1ad3      	subs	r3, r2, r3
 80095aa:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80095ae:	d909      	bls.n	80095c4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2204      	movs	r2, #4
 80095b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	22e0      	movs	r2, #224	@ 0xe0
 80095bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80095c0:	2301      	movs	r3, #1
 80095c2:	e084      	b.n	80096ce <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f003 0301 	and.w	r3, r3, #1
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d1e4      	bne.n	80095a0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f000 f886 	bl	80096e8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80095dc:	f001 fed8 	bl	800b390 <HAL_RCC_GetHCLKFreq>
 80095e0:	4603      	mov	r3, r0
 80095e2:	4a3f      	ldr	r2, [pc, #252]	@ (80096e0 <HAL_ETH_Init+0x1c4>)
 80095e4:	fba2 2303 	umull	r2, r3, r2, r3
 80095e8:	0c9a      	lsrs	r2, r3, #18
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	3a01      	subs	r2, #1
 80095f0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f000 fa71 	bl	8009adc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009602:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8009606:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800960a:	687a      	ldr	r2, [r7, #4]
 800960c:	6812      	ldr	r2, [r2, #0]
 800960e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009612:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009616:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	695b      	ldr	r3, [r3, #20]
 800961e:	f003 0303 	and.w	r3, r3, #3
 8009622:	2b00      	cmp	r3, #0
 8009624:	d009      	beq.n	800963a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2201      	movs	r2, #1
 800962a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	22e0      	movs	r2, #224	@ 0xe0
 8009632:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8009636:	2301      	movs	r3, #1
 8009638:	e049      	b.n	80096ce <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009642:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8009646:	4b27      	ldr	r3, [pc, #156]	@ (80096e4 <HAL_ETH_Init+0x1c8>)
 8009648:	4013      	ands	r3, r2
 800964a:	687a      	ldr	r2, [r7, #4]
 800964c:	6952      	ldr	r2, [r2, #20]
 800964e:	0051      	lsls	r1, r2, #1
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	6812      	ldr	r2, [r2, #0]
 8009654:	430b      	orrs	r3, r1
 8009656:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800965a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f000 fad9 	bl	8009c16 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f000 fb1f 	bl	8009ca8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	3305      	adds	r3, #5
 8009670:	781b      	ldrb	r3, [r3, #0]
 8009672:	021a      	lsls	r2, r3, #8
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	3304      	adds	r3, #4
 800967a:	781b      	ldrb	r3, [r3, #0]
 800967c:	4619      	mov	r1, r3
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	430a      	orrs	r2, r1
 8009684:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	3303      	adds	r3, #3
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	061a      	lsls	r2, r3, #24
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	3302      	adds	r3, #2
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	041b      	lsls	r3, r3, #16
 800969c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	3301      	adds	r3, #1
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80096a8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	781b      	ldrb	r3, [r3, #0]
 80096b0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80096b6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80096b8:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2200      	movs	r2, #0
 80096c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2210      	movs	r2, #16
 80096c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80096cc:	2300      	movs	r3, #0
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3710      	adds	r7, #16
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	bf00      	nop
 80096d8:	58024400 	.word	0x58024400
 80096dc:	58000400 	.word	0x58000400
 80096e0:	431bde83 	.word	0x431bde83
 80096e4:	ffff8001 	.word	0xffff8001

080096e8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b084      	sub	sp, #16
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80096f8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009700:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8009702:	f001 fe45 	bl	800b390 <HAL_RCC_GetHCLKFreq>
 8009706:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	4a1e      	ldr	r2, [pc, #120]	@ (8009784 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d908      	bls.n	8009722 <HAL_ETH_SetMDIOClockRange+0x3a>
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	4a1d      	ldr	r2, [pc, #116]	@ (8009788 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d804      	bhi.n	8009722 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800971e:	60fb      	str	r3, [r7, #12]
 8009720:	e027      	b.n	8009772 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	4a18      	ldr	r2, [pc, #96]	@ (8009788 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d908      	bls.n	800973c <HAL_ETH_SetMDIOClockRange+0x54>
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	4a17      	ldr	r2, [pc, #92]	@ (800978c <HAL_ETH_SetMDIOClockRange+0xa4>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d204      	bcs.n	800973c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8009738:	60fb      	str	r3, [r7, #12]
 800973a:	e01a      	b.n	8009772 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	4a13      	ldr	r2, [pc, #76]	@ (800978c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d303      	bcc.n	800974c <HAL_ETH_SetMDIOClockRange+0x64>
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	4a12      	ldr	r2, [pc, #72]	@ (8009790 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d911      	bls.n	8009770 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	4a10      	ldr	r2, [pc, #64]	@ (8009790 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d908      	bls.n	8009766 <HAL_ETH_SetMDIOClockRange+0x7e>
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	4a0f      	ldr	r2, [pc, #60]	@ (8009794 <HAL_ETH_SetMDIOClockRange+0xac>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d804      	bhi.n	8009766 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009762:	60fb      	str	r3, [r7, #12]
 8009764:	e005      	b.n	8009772 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800976c:	60fb      	str	r3, [r7, #12]
 800976e:	e000      	b.n	8009772 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8009770:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	68fa      	ldr	r2, [r7, #12]
 8009778:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800977c:	bf00      	nop
 800977e:	3710      	adds	r7, #16
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}
 8009784:	01312cff 	.word	0x01312cff
 8009788:	02160ebf 	.word	0x02160ebf
 800978c:	03938700 	.word	0x03938700
 8009790:	05f5e0ff 	.word	0x05f5e0ff
 8009794:	08f0d17f 	.word	0x08f0d17f

08009798 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8009798:	b480      	push	{r7}
 800979a:	b085      	sub	sp, #20
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80097aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	791b      	ldrb	r3, [r3, #4]
 80097b0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80097b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	7b1b      	ldrb	r3, [r3, #12]
 80097b8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80097ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	7b5b      	ldrb	r3, [r3, #13]
 80097c0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80097c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	7b9b      	ldrb	r3, [r3, #14]
 80097c8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80097ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	7bdb      	ldrb	r3, [r3, #15]
 80097d0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80097d2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80097d4:	683a      	ldr	r2, [r7, #0]
 80097d6:	7c12      	ldrb	r2, [r2, #16]
 80097d8:	2a00      	cmp	r2, #0
 80097da:	d102      	bne.n	80097e2 <ETH_SetMACConfig+0x4a>
 80097dc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80097e0:	e000      	b.n	80097e4 <ETH_SetMACConfig+0x4c>
 80097e2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80097e4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80097e6:	683a      	ldr	r2, [r7, #0]
 80097e8:	7c52      	ldrb	r2, [r2, #17]
 80097ea:	2a00      	cmp	r2, #0
 80097ec:	d102      	bne.n	80097f4 <ETH_SetMACConfig+0x5c>
 80097ee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80097f2:	e000      	b.n	80097f6 <ETH_SetMACConfig+0x5e>
 80097f4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80097f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	7c9b      	ldrb	r3, [r3, #18]
 80097fc:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80097fe:	431a      	orrs	r2, r3
               macconf->Speed |
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8009804:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800980a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	7f1b      	ldrb	r3, [r3, #28]
 8009810:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8009812:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	7f5b      	ldrb	r3, [r3, #29]
 8009818:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800981a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800981c:	683a      	ldr	r2, [r7, #0]
 800981e:	7f92      	ldrb	r2, [r2, #30]
 8009820:	2a00      	cmp	r2, #0
 8009822:	d102      	bne.n	800982a <ETH_SetMACConfig+0x92>
 8009824:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009828:	e000      	b.n	800982c <ETH_SetMACConfig+0x94>
 800982a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800982c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	7fdb      	ldrb	r3, [r3, #31]
 8009832:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8009834:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8009836:	683a      	ldr	r2, [r7, #0]
 8009838:	f892 2020 	ldrb.w	r2, [r2, #32]
 800983c:	2a00      	cmp	r2, #0
 800983e:	d102      	bne.n	8009846 <ETH_SetMACConfig+0xae>
 8009840:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009844:	e000      	b.n	8009848 <ETH_SetMACConfig+0xb0>
 8009846:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8009848:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800984e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009856:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8009858:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800985e:	4313      	orrs	r3, r2
 8009860:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	681a      	ldr	r2, [r3, #0]
 8009868:	4b56      	ldr	r3, [pc, #344]	@ (80099c4 <ETH_SetMACConfig+0x22c>)
 800986a:	4013      	ands	r3, r2
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	6812      	ldr	r2, [r2, #0]
 8009870:	68f9      	ldr	r1, [r7, #12]
 8009872:	430b      	orrs	r3, r1
 8009874:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800987a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009882:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8009884:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800988c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800988e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009896:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8009898:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800989a:	683a      	ldr	r2, [r7, #0]
 800989c:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80098a0:	2a00      	cmp	r2, #0
 80098a2:	d102      	bne.n	80098aa <ETH_SetMACConfig+0x112>
 80098a4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80098a8:	e000      	b.n	80098ac <ETH_SetMACConfig+0x114>
 80098aa:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80098ac:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80098b2:	4313      	orrs	r3, r2
 80098b4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	685a      	ldr	r2, [r3, #4]
 80098bc:	4b42      	ldr	r3, [pc, #264]	@ (80099c8 <ETH_SetMACConfig+0x230>)
 80098be:	4013      	ands	r3, r2
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	6812      	ldr	r2, [r2, #0]
 80098c4:	68f9      	ldr	r1, [r7, #12]
 80098c6:	430b      	orrs	r3, r1
 80098c8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80098d0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80098d6:	4313      	orrs	r3, r2
 80098d8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	68da      	ldr	r2, [r3, #12]
 80098e0:	4b3a      	ldr	r3, [pc, #232]	@ (80099cc <ETH_SetMACConfig+0x234>)
 80098e2:	4013      	ands	r3, r2
 80098e4:	687a      	ldr	r2, [r7, #4]
 80098e6:	6812      	ldr	r2, [r2, #0]
 80098e8:	68f9      	ldr	r1, [r7, #12]
 80098ea:	430b      	orrs	r3, r1
 80098ec:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80098f4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80098fa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80098fc:	683a      	ldr	r2, [r7, #0]
 80098fe:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8009902:	2a00      	cmp	r2, #0
 8009904:	d101      	bne.n	800990a <ETH_SetMACConfig+0x172>
 8009906:	2280      	movs	r2, #128	@ 0x80
 8009908:	e000      	b.n	800990c <ETH_SetMACConfig+0x174>
 800990a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800990c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009912:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8009914:	4313      	orrs	r3, r2
 8009916:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800991e:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8009922:	4013      	ands	r3, r2
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	6812      	ldr	r2, [r2, #0]
 8009928:	68f9      	ldr	r1, [r7, #12]
 800992a:	430b      	orrs	r3, r1
 800992c:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8009934:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800993c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800993e:	4313      	orrs	r3, r2
 8009940:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800994a:	f023 0103 	bic.w	r1, r3, #3
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	68fa      	ldr	r2, [r7, #12]
 8009954:	430a      	orrs	r2, r1
 8009956:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8009962:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	430a      	orrs	r2, r1
 8009970:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8009978:	683a      	ldr	r2, [r7, #0]
 800997a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800997e:	2a00      	cmp	r2, #0
 8009980:	d101      	bne.n	8009986 <ETH_SetMACConfig+0x1ee>
 8009982:	2240      	movs	r2, #64	@ 0x40
 8009984:	e000      	b.n	8009988 <ETH_SetMACConfig+0x1f0>
 8009986:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8009988:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8009990:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8009992:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800999a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800999c:	4313      	orrs	r3, r2
 800999e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80099a8:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	68fa      	ldr	r2, [r7, #12]
 80099b2:	430a      	orrs	r2, r1
 80099b4:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80099b8:	bf00      	nop
 80099ba:	3714      	adds	r7, #20
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr
 80099c4:	00048083 	.word	0x00048083
 80099c8:	c0f88000 	.word	0xc0f88000
 80099cc:	fffffef0 	.word	0xfffffef0

080099d0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b085      	sub	sp, #20
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	4b38      	ldr	r3, [pc, #224]	@ (8009ac8 <ETH_SetDMAConfig+0xf8>)
 80099e6:	4013      	ands	r3, r2
 80099e8:	683a      	ldr	r2, [r7, #0]
 80099ea:	6811      	ldr	r1, [r2, #0]
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	6812      	ldr	r2, [r2, #0]
 80099f0:	430b      	orrs	r3, r1
 80099f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80099f6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	791b      	ldrb	r3, [r3, #4]
 80099fc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8009a02:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	7b1b      	ldrb	r3, [r3, #12]
 8009a08:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009a16:	685a      	ldr	r2, [r3, #4]
 8009a18:	4b2c      	ldr	r3, [pc, #176]	@ (8009acc <ETH_SetDMAConfig+0xfc>)
 8009a1a:	4013      	ands	r3, r2
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	6812      	ldr	r2, [r2, #0]
 8009a20:	68f9      	ldr	r1, [r7, #12]
 8009a22:	430b      	orrs	r3, r1
 8009a24:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009a28:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	7b5b      	ldrb	r3, [r3, #13]
 8009a2e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8009a34:	4313      	orrs	r3, r2
 8009a36:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009a40:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8009a44:	4b22      	ldr	r3, [pc, #136]	@ (8009ad0 <ETH_SetDMAConfig+0x100>)
 8009a46:	4013      	ands	r3, r2
 8009a48:	687a      	ldr	r2, [r7, #4]
 8009a4a:	6812      	ldr	r2, [r2, #0]
 8009a4c:	68f9      	ldr	r1, [r7, #12]
 8009a4e:	430b      	orrs	r3, r1
 8009a50:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009a54:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	7d1b      	ldrb	r3, [r3, #20]
 8009a60:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8009a62:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	7f5b      	ldrb	r3, [r3, #29]
 8009a68:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009a76:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8009a7a:	4b16      	ldr	r3, [pc, #88]	@ (8009ad4 <ETH_SetDMAConfig+0x104>)
 8009a7c:	4013      	ands	r3, r2
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	6812      	ldr	r2, [r2, #0]
 8009a82:	68f9      	ldr	r1, [r7, #12]
 8009a84:	430b      	orrs	r3, r1
 8009a86:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009a8a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	7f1b      	ldrb	r3, [r3, #28]
 8009a92:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009aa4:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8009aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8009ad8 <ETH_SetDMAConfig+0x108>)
 8009aaa:	4013      	ands	r3, r2
 8009aac:	687a      	ldr	r2, [r7, #4]
 8009aae:	6812      	ldr	r2, [r2, #0]
 8009ab0:	68f9      	ldr	r1, [r7, #12]
 8009ab2:	430b      	orrs	r3, r1
 8009ab4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009ab8:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8009abc:	bf00      	nop
 8009abe:	3714      	adds	r7, #20
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac6:	4770      	bx	lr
 8009ac8:	ffff87fd 	.word	0xffff87fd
 8009acc:	ffff2ffe 	.word	0xffff2ffe
 8009ad0:	fffec000 	.word	0xfffec000
 8009ad4:	ffc0efef 	.word	0xffc0efef
 8009ad8:	7fc0ffff 	.word	0x7fc0ffff

08009adc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b0a4      	sub	sp, #144	@ 0x90
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8009aea:	2300      	movs	r3, #0
 8009aec:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8009aee:	2300      	movs	r3, #0
 8009af0:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8009af4:	2300      	movs	r3, #0
 8009af6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8009afa:	2301      	movs	r3, #1
 8009afc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8009b00:	2301      	movs	r3, #1
 8009b02:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8009b06:	2301      	movs	r3, #1
 8009b08:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8009b12:	2301      	movs	r3, #1
 8009b14:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8009b18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009b1c:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8009b24:	2300      	movs	r3, #0
 8009b26:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8009b34:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8009b38:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8009b40:	2300      	movs	r3, #0
 8009b42:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8009b44:	2301      	movs	r3, #1
 8009b46:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8009b50:	2300      	movs	r3, #0
 8009b52:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8009b56:	2300      	movs	r3, #0
 8009b58:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8009b62:	2300      	movs	r3, #0
 8009b64:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8009b74:	2320      	movs	r3, #32
 8009b76:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8009b80:	2300      	movs	r3, #0
 8009b82:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8009b86:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8009b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8009b8c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009b90:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8009b92:	2300      	movs	r3, #0
 8009b94:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8009b98:	2302      	movs	r3, #2
 8009b9a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8009baa:	2300      	movs	r3, #0
 8009bac:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8009bba:	2301      	movs	r3, #1
 8009bbc:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8009bc0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f7ff fde6 	bl	8009798 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8009bcc:	2301      	movs	r3, #1
 8009bce:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8009bde:	2300      	movs	r3, #0
 8009be0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8009be2:	2300      	movs	r3, #0
 8009be4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8009be6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009bea:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8009bec:	2300      	movs	r3, #0
 8009bee:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8009bf0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009bf4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8009bfc:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8009c00:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8009c02:	f107 0308 	add.w	r3, r7, #8
 8009c06:	4619      	mov	r1, r3
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f7ff fee1 	bl	80099d0 <ETH_SetDMAConfig>
}
 8009c0e:	bf00      	nop
 8009c10:	3790      	adds	r7, #144	@ 0x90
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}

08009c16 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8009c16:	b480      	push	{r7}
 8009c18:	b085      	sub	sp, #20
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8009c1e:	2300      	movs	r3, #0
 8009c20:	60fb      	str	r3, [r7, #12]
 8009c22:	e01d      	b.n	8009c60 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	68d9      	ldr	r1, [r3, #12]
 8009c28:	68fa      	ldr	r2, [r7, #12]
 8009c2a:	4613      	mov	r3, r2
 8009c2c:	005b      	lsls	r3, r3, #1
 8009c2e:	4413      	add	r3, r2
 8009c30:	00db      	lsls	r3, r3, #3
 8009c32:	440b      	add	r3, r1
 8009c34:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	2200      	movs	r2, #0
 8009c40:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	2200      	movs	r2, #0
 8009c46:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8009c4e:	68b9      	ldr	r1, [r7, #8]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	68fa      	ldr	r2, [r7, #12]
 8009c54:	3206      	adds	r2, #6
 8009c56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	3301      	adds	r3, #1
 8009c5e:	60fb      	str	r3, [r7, #12]
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	2b03      	cmp	r3, #3
 8009c64:	d9de      	bls.n	8009c24 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2200      	movs	r2, #0
 8009c6a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c74:	461a      	mov	r2, r3
 8009c76:	2303      	movs	r3, #3
 8009c78:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	68da      	ldr	r2, [r3, #12]
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c88:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	68da      	ldr	r2, [r3, #12]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c98:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8009c9c:	bf00      	nop
 8009c9e:	3714      	adds	r7, #20
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr

08009ca8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b085      	sub	sp, #20
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	60fb      	str	r3, [r7, #12]
 8009cb4:	e023      	b.n	8009cfe <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6919      	ldr	r1, [r3, #16]
 8009cba:	68fa      	ldr	r2, [r7, #12]
 8009cbc:	4613      	mov	r3, r2
 8009cbe:	005b      	lsls	r3, r3, #1
 8009cc0:	4413      	add	r3, r2
 8009cc2:	00db      	lsls	r3, r3, #3
 8009cc4:	440b      	add	r3, r1
 8009cc6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8009cec:	68b9      	ldr	r1, [r7, #8]
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	68fa      	ldr	r2, [r7, #12]
 8009cf2:	3212      	adds	r2, #18
 8009cf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	60fb      	str	r3, [r7, #12]
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2b03      	cmp	r3, #3
 8009d02:	d9d8      	bls.n	8009cb6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2200      	movs	r2, #0
 8009d08:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2200      	movs	r2, #0
 8009d14:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	2303      	movs	r3, #3
 8009d2e:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	691a      	ldr	r2, [r3, #16]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009d3e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	691b      	ldr	r3, [r3, #16]
 8009d46:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009d52:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8009d56:	bf00      	nop
 8009d58:	3714      	adds	r7, #20
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr
	...

08009d64 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b08a      	sub	sp, #40	@ 0x28
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	60f8      	str	r0, [r7, #12]
 8009d6c:	60b9      	str	r1, [r7, #8]
 8009d6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 8009d78:	2308      	movs	r3, #8
 8009d7a:	76fb      	strb	r3, [r7, #27]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009d7c:	4b2e      	ldr	r3, [pc, #184]	@ (8009e38 <HAL_FLASH_Program+0xd4>)
 8009d7e:	7d1b      	ldrb	r3, [r3, #20]
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d101      	bne.n	8009d88 <HAL_FLASH_Program+0x24>
 8009d84:	2302      	movs	r3, #2
 8009d86:	e053      	b.n	8009e30 <HAL_FLASH_Program+0xcc>
 8009d88:	4b2b      	ldr	r3, [pc, #172]	@ (8009e38 <HAL_FLASH_Program+0xd4>)
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d94:	d315      	bcc.n	8009dc2 <HAL_FLASH_Program+0x5e>
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 8009d9c:	d211      	bcs.n	8009dc2 <HAL_FLASH_Program+0x5e>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 8009d9e:	2301      	movs	r3, #1
 8009da0:	617b      	str	r3, [r7, #20]
  {
    return HAL_ERROR;
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009da2:	4b25      	ldr	r3, [pc, #148]	@ (8009e38 <HAL_FLASH_Program+0xd4>)
 8009da4:	2200      	movs	r2, #0
 8009da6:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8009da8:	6979      	ldr	r1, [r7, #20]
 8009daa:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8009dae:	f000 f88d 	bl	8009ecc <FLASH_WaitForLastOperation>
 8009db2:	4603      	mov	r3, r0
 8009db4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if(status == HAL_OK)
 8009db8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d002      	beq.n	8009dc6 <HAL_FLASH_Program+0x62>
 8009dc0:	e031      	b.n	8009e26 <HAL_FLASH_Program+0xc2>
    return HAL_ERROR;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	e034      	b.n	8009e30 <HAL_FLASH_Program+0xcc>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 8009dc6:	4b1d      	ldr	r3, [pc, #116]	@ (8009e3c <HAL_FLASH_Program+0xd8>)
 8009dc8:	68db      	ldr	r3, [r3, #12]
 8009dca:	4a1c      	ldr	r2, [pc, #112]	@ (8009e3c <HAL_FLASH_Program+0xd8>)
 8009dcc:	f043 0302 	orr.w	r3, r3, #2
 8009dd0:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("isb 0xF":::"memory");
 8009dd2:	f3bf 8f6f 	isb	sy
}
 8009dd6:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8009dd8:	f3bf 8f4f 	dsb	sy
}
 8009ddc:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 8009dde:	69fb      	ldr	r3, [r7, #28]
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	6a3b      	ldr	r3, [r7, #32]
 8009de4:	601a      	str	r2, [r3, #0]
        dest_addr++;
 8009de6:	6a3b      	ldr	r3, [r7, #32]
 8009de8:	3304      	adds	r3, #4
 8009dea:	623b      	str	r3, [r7, #32]
        src_addr++;
 8009dec:	69fb      	ldr	r3, [r7, #28]
 8009dee:	3304      	adds	r3, #4
 8009df0:	61fb      	str	r3, [r7, #28]
        row_index--;
 8009df2:	7efb      	ldrb	r3, [r7, #27]
 8009df4:	3b01      	subs	r3, #1
 8009df6:	76fb      	strb	r3, [r7, #27]
     } while (row_index != 0U);
 8009df8:	7efb      	ldrb	r3, [r7, #27]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d1ef      	bne.n	8009dde <HAL_FLASH_Program+0x7a>
  __ASM volatile ("isb 0xF":::"memory");
 8009dfe:	f3bf 8f6f 	isb	sy
}
 8009e02:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8009e04:	f3bf 8f4f 	dsb	sy
}
 8009e08:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8009e0a:	6979      	ldr	r1, [r7, #20]
 8009e0c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8009e10:	f000 f85c 	bl	8009ecc <FLASH_WaitForLastOperation>
 8009e14:	4603      	mov	r3, r0
 8009e16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* If the program operation is completed, disable the PG */
      CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 8009e1a:	4b08      	ldr	r3, [pc, #32]	@ (8009e3c <HAL_FLASH_Program+0xd8>)
 8009e1c:	68db      	ldr	r3, [r3, #12]
 8009e1e:	4a07      	ldr	r2, [pc, #28]	@ (8009e3c <HAL_FLASH_Program+0xd8>)
 8009e20:	f023 0302 	bic.w	r3, r3, #2
 8009e24:	60d3      	str	r3, [r2, #12]
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009e26:	4b04      	ldr	r3, [pc, #16]	@ (8009e38 <HAL_FLASH_Program+0xd4>)
 8009e28:	2200      	movs	r2, #0
 8009e2a:	751a      	strb	r2, [r3, #20]

  return status;
 8009e2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3728      	adds	r7, #40	@ 0x28
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}
 8009e38:	24000ed8 	.word	0x24000ed8
 8009e3c:	52002000 	.word	0x52002000

08009e40 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8009e40:	b480      	push	{r7}
 8009e42:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8009e44:	4b0c      	ldr	r3, [pc, #48]	@ (8009e78 <HAL_FLASH_Unlock+0x38>)
 8009e46:	68db      	ldr	r3, [r3, #12]
 8009e48:	f003 0301 	and.w	r3, r3, #1
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d00d      	beq.n	8009e6c <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 8009e50:	4b09      	ldr	r3, [pc, #36]	@ (8009e78 <HAL_FLASH_Unlock+0x38>)
 8009e52:	4a0a      	ldr	r2, [pc, #40]	@ (8009e7c <HAL_FLASH_Unlock+0x3c>)
 8009e54:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 8009e56:	4b08      	ldr	r3, [pc, #32]	@ (8009e78 <HAL_FLASH_Unlock+0x38>)
 8009e58:	4a09      	ldr	r2, [pc, #36]	@ (8009e80 <HAL_FLASH_Unlock+0x40>)
 8009e5a:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8009e5c:	4b06      	ldr	r3, [pc, #24]	@ (8009e78 <HAL_FLASH_Unlock+0x38>)
 8009e5e:	68db      	ldr	r3, [r3, #12]
 8009e60:	f003 0301 	and.w	r3, r3, #1
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d001      	beq.n	8009e6c <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	e000      	b.n	8009e6e <HAL_FLASH_Unlock+0x2e>
      return HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8009e6c:	2300      	movs	r3, #0
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr
 8009e78:	52002000 	.word	0x52002000
 8009e7c:	45670123 	.word	0x45670123
 8009e80:	cdef89ab 	.word	0xcdef89ab

08009e84 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8009e84:	b480      	push	{r7}
 8009e86:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 8009e88:	4b09      	ldr	r3, [pc, #36]	@ (8009eb0 <HAL_FLASH_Lock+0x2c>)
 8009e8a:	68db      	ldr	r3, [r3, #12]
 8009e8c:	4a08      	ldr	r2, [pc, #32]	@ (8009eb0 <HAL_FLASH_Lock+0x2c>)
 8009e8e:	f043 0301 	orr.w	r3, r3, #1
 8009e92:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 8009e94:	4b06      	ldr	r3, [pc, #24]	@ (8009eb0 <HAL_FLASH_Lock+0x2c>)
 8009e96:	68db      	ldr	r3, [r3, #12]
 8009e98:	f003 0301 	and.w	r3, r3, #1
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d101      	bne.n	8009ea4 <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	e000      	b.n	8009ea6 <HAL_FLASH_Lock+0x22>
  {
    return HAL_ERROR;
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8009ea4:	2300      	movs	r3, #0
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr
 8009eb0:	52002000 	.word	0x52002000

08009eb4 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_DBECC_BANK2: Double Detection ECC on Bank 2
  *            @arg HAL_FLASH_ERROR_CRCRD_BANK2: CRC Read Error on Bank 2
*/

uint32_t HAL_FLASH_GetError(void)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8009eb8:	4b03      	ldr	r3, [pc, #12]	@ (8009ec8 <HAL_FLASH_GetError+0x14>)
 8009eba:	699b      	ldr	r3, [r3, #24]
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec4:	4770      	bx	lr
 8009ec6:	bf00      	nop
 8009ec8:	24000ed8 	.word	0x24000ed8

08009ecc <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b086      	sub	sp, #24
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 8009ed6:	2304      	movs	r3, #4
 8009ed8:	613b      	str	r3, [r7, #16]
  uint32_t errorflag = 0;
 8009eda:	2300      	movs	r3, #0
 8009edc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009ede:	f7fa f89d 	bl	800401c <HAL_GetTick>
 8009ee2:	60f8      	str	r0, [r7, #12]
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8009ee4:	e010      	b.n	8009f08 <FLASH_WaitForLastOperation+0x3c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009eec:	d00c      	beq.n	8009f08 <FLASH_WaitForLastOperation+0x3c>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009eee:	f7fa f895 	bl	800401c <HAL_GetTick>
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	1ad3      	subs	r3, r2, r3
 8009ef8:	687a      	ldr	r2, [r7, #4]
 8009efa:	429a      	cmp	r2, r3
 8009efc:	d302      	bcc.n	8009f04 <FLASH_WaitForLastOperation+0x38>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d101      	bne.n	8009f08 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8009f04:	2303      	movs	r3, #3
 8009f06:	e02d      	b.n	8009f64 <FLASH_WaitForLastOperation+0x98>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8009f08:	4b18      	ldr	r3, [pc, #96]	@ (8009f6c <FLASH_WaitForLastOperation+0xa0>)
 8009f0a:	691a      	ldr	r2, [r3, #16]
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	4013      	ands	r3, r2
 8009f10:	693a      	ldr	r2, [r7, #16]
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d0e7      	beq.n	8009ee6 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	2b01      	cmp	r3, #1
 8009f1a:	d104      	bne.n	8009f26 <FLASH_WaitForLastOperation+0x5a>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 8009f1c:	4b13      	ldr	r3, [pc, #76]	@ (8009f6c <FLASH_WaitForLastOperation+0xa0>)
 8009f1e:	691a      	ldr	r2, [r3, #16]
 8009f20:	4b13      	ldr	r3, [pc, #76]	@ (8009f70 <FLASH_WaitForLastOperation+0xa4>)
 8009f22:	4013      	ands	r3, r2
 8009f24:	617b      	str	r3, [r7, #20]
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d00a      	beq.n	8009f46 <FLASH_WaitForLastOperation+0x7a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 8009f30:	4b10      	ldr	r3, [pc, #64]	@ (8009f74 <FLASH_WaitForLastOperation+0xa8>)
 8009f32:	699a      	ldr	r2, [r3, #24]
 8009f34:	697b      	ldr	r3, [r7, #20]
 8009f36:	4313      	orrs	r3, r2
 8009f38:	4a0e      	ldr	r2, [pc, #56]	@ (8009f74 <FLASH_WaitForLastOperation+0xa8>)
 8009f3a:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 8009f3c:	4a0b      	ldr	r2, [pc, #44]	@ (8009f6c <FLASH_WaitForLastOperation+0xa0>)
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	6153      	str	r3, [r2, #20]

    return HAL_ERROR;
 8009f42:	2301      	movs	r3, #1
 8009f44:	e00e      	b.n	8009f64 <FLASH_WaitForLastOperation+0x98>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	2b01      	cmp	r3, #1
 8009f4a:	d10a      	bne.n	8009f62 <FLASH_WaitForLastOperation+0x96>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 8009f4c:	4b07      	ldr	r3, [pc, #28]	@ (8009f6c <FLASH_WaitForLastOperation+0xa0>)
 8009f4e:	691b      	ldr	r3, [r3, #16]
 8009f50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009f54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f58:	d103      	bne.n	8009f62 <FLASH_WaitForLastOperation+0x96>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 8009f5a:	4b04      	ldr	r3, [pc, #16]	@ (8009f6c <FLASH_WaitForLastOperation+0xa0>)
 8009f5c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8009f60:	615a      	str	r2, [r3, #20]
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8009f62:	2300      	movs	r3, #0
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3718      	adds	r7, #24
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}
 8009f6c:	52002000 	.word	0x52002000
 8009f70:	17ee0000 	.word	0x17ee0000
 8009f74:	24000ed8 	.word	0x24000ed8

08009f78 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b084      	sub	sp, #16
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009f82:	2300      	movs	r3, #0
 8009f84:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009f86:	4b3f      	ldr	r3, [pc, #252]	@ (800a084 <HAL_FLASHEx_Erase+0x10c>)
 8009f88:	7d1b      	ldrb	r3, [r3, #20]
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	d101      	bne.n	8009f92 <HAL_FLASHEx_Erase+0x1a>
 8009f8e:	2302      	movs	r3, #2
 8009f90:	e074      	b.n	800a07c <HAL_FLASHEx_Erase+0x104>
 8009f92:	4b3c      	ldr	r3, [pc, #240]	@ (800a084 <HAL_FLASHEx_Erase+0x10c>)
 8009f94:	2201      	movs	r2, #1
 8009f96:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009f98:	4b3a      	ldr	r3, [pc, #232]	@ (800a084 <HAL_FLASHEx_Erase+0x10c>)
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	f003 0301 	and.w	r3, r3, #1
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d009      	beq.n	8009fbe <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8009faa:	2101      	movs	r1, #1
 8009fac:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8009fb0:	f7ff ff8c 	bl	8009ecc <FLASH_WaitForLastOperation>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d001      	beq.n	8009fbe <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 8009fba:	2301      	movs	r3, #1
 8009fbc:	73fb      	strb	r3, [r7, #15]
      status = HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 8009fbe:	7bfb      	ldrb	r3, [r7, #15]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d157      	bne.n	800a074 <HAL_FLASHEx_Erase+0xfc>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	d11e      	bne.n	800a00a <HAL_FLASHEx_Erase+0x92>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	691a      	ldr	r2, [r3, #16]
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	685b      	ldr	r3, [r3, #4]
 8009fd4:	4619      	mov	r1, r3
 8009fd6:	4610      	mov	r0, r2
 8009fd8:	f000 f85a 	bl	800a090 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	f003 0301 	and.w	r3, r3, #1
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d045      	beq.n	800a074 <HAL_FLASHEx_Erase+0xfc>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8009fe8:	2101      	movs	r1, #1
 8009fea:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8009fee:	f7ff ff6d 	bl	8009ecc <FLASH_WaitForLastOperation>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d001      	beq.n	8009ffc <HAL_FLASHEx_Erase+0x84>
        {
          status = HAL_ERROR;
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 8009ffc:	4b22      	ldr	r3, [pc, #136]	@ (800a088 <HAL_FLASHEx_Erase+0x110>)
 8009ffe:	68db      	ldr	r3, [r3, #12]
 800a000:	4a21      	ldr	r2, [pc, #132]	@ (800a088 <HAL_FLASHEx_Erase+0x110>)
 800a002:	f023 0308 	bic.w	r3, r3, #8
 800a006:	60d3      	str	r3, [r2, #12]
 800a008:	e034      	b.n	800a074 <HAL_FLASHEx_Erase+0xfc>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a010:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	689b      	ldr	r3, [r3, #8]
 800a016:	60bb      	str	r3, [r7, #8]
 800a018:	e024      	b.n	800a064 <HAL_FLASHEx_Erase+0xec>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6859      	ldr	r1, [r3, #4]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	691b      	ldr	r3, [r3, #16]
 800a022:	461a      	mov	r2, r3
 800a024:	68b8      	ldr	r0, [r7, #8]
 800a026:	f000 f857 	bl	800a0d8 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	f003 0301 	and.w	r3, r3, #1
 800a032:	2b00      	cmp	r3, #0
 800a034:	d00c      	beq.n	800a050 <HAL_FLASHEx_Erase+0xd8>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 800a036:	2101      	movs	r1, #1
 800a038:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800a03c:	f7ff ff46 	bl	8009ecc <FLASH_WaitForLastOperation>
 800a040:	4603      	mov	r3, r0
 800a042:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800a044:	4b10      	ldr	r3, [pc, #64]	@ (800a088 <HAL_FLASHEx_Erase+0x110>)
 800a046:	68da      	ldr	r2, [r3, #12]
 800a048:	490f      	ldr	r1, [pc, #60]	@ (800a088 <HAL_FLASHEx_Erase+0x110>)
 800a04a:	4b10      	ldr	r3, [pc, #64]	@ (800a08c <HAL_FLASHEx_Erase+0x114>)
 800a04c:	4013      	ands	r3, r2
 800a04e:	60cb      	str	r3, [r1, #12]
          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 800a050:	7bfb      	ldrb	r3, [r7, #15]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d003      	beq.n	800a05e <HAL_FLASHEx_Erase+0xe6>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	68ba      	ldr	r2, [r7, #8]
 800a05a:	601a      	str	r2, [r3, #0]
          break;
 800a05c:	e00a      	b.n	800a074 <HAL_FLASHEx_Erase+0xfc>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	3301      	adds	r3, #1
 800a062:	60bb      	str	r3, [r7, #8]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	68da      	ldr	r2, [r3, #12]
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	689b      	ldr	r3, [r3, #8]
 800a06c:	4413      	add	r3, r2
 800a06e:	68ba      	ldr	r2, [r7, #8]
 800a070:	429a      	cmp	r2, r3
 800a072:	d3d2      	bcc.n	800a01a <HAL_FLASHEx_Erase+0xa2>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a074:	4b03      	ldr	r3, [pc, #12]	@ (800a084 <HAL_FLASHEx_Erase+0x10c>)
 800a076:	2200      	movs	r2, #0
 800a078:	751a      	strb	r2, [r3, #20]

  return status;
 800a07a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3710      	adds	r7, #16
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}
 800a084:	24000ed8 	.word	0x24000ed8
 800a088:	52002000 	.word	0x52002000
 800a08c:	fffff8fb 	.word	0xfffff8fb

0800a090 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 800a090:	b480      	push	{r7}
 800a092:	b083      	sub	sp, #12
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	6039      	str	r1, [r7, #0]
  }
  else
#endif /* DUAL_BANK */
  {
    /* Proceed to erase Flash Bank  */
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	f003 0301 	and.w	r3, r3, #1
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d011      	beq.n	800a0c8 <FLASH_MassErase+0x38>
    {
#if defined (FLASH_CR_PSIZE)
      /* Set Program/erase VoltageRange for Bank1 */
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800a0a4:	4b0b      	ldr	r3, [pc, #44]	@ (800a0d4 <FLASH_MassErase+0x44>)
 800a0a6:	68db      	ldr	r3, [r3, #12]
 800a0a8:	4a0a      	ldr	r2, [pc, #40]	@ (800a0d4 <FLASH_MassErase+0x44>)
 800a0aa:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800a0ae:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 800a0b0:	4b08      	ldr	r3, [pc, #32]	@ (800a0d4 <FLASH_MassErase+0x44>)
 800a0b2:	68da      	ldr	r2, [r3, #12]
 800a0b4:	4907      	ldr	r1, [pc, #28]	@ (800a0d4 <FLASH_MassErase+0x44>)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	60cb      	str	r3, [r1, #12]
#endif /* FLASH_CR_PSIZE */

      /* Erase Bank1 */
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 800a0bc:	4b05      	ldr	r3, [pc, #20]	@ (800a0d4 <FLASH_MassErase+0x44>)
 800a0be:	68db      	ldr	r3, [r3, #12]
 800a0c0:	4a04      	ldr	r2, [pc, #16]	@ (800a0d4 <FLASH_MassErase+0x44>)
 800a0c2:	f043 0388 	orr.w	r3, r3, #136	@ 0x88
 800a0c6:	60d3      	str	r3, [r2, #12]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 800a0c8:	bf00      	nop
 800a0ca:	370c      	adds	r7, #12
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d2:	4770      	bx	lr
 800a0d4:	52002000 	.word	0x52002000

0800a0d8 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b085      	sub	sp, #20
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	60f8      	str	r0, [r7, #12]
 800a0e0:	60b9      	str	r1, [r7, #8]
 800a0e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	f003 0301 	and.w	r3, r3, #1
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d010      	beq.n	800a110 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800a0ee:	4b0b      	ldr	r3, [pc, #44]	@ (800a11c <FLASH_Erase_Sector+0x44>)
 800a0f0:	68db      	ldr	r3, [r3, #12]
 800a0f2:	4a0a      	ldr	r2, [pc, #40]	@ (800a11c <FLASH_Erase_Sector+0x44>)
 800a0f4:	f423 63e6 	bic.w	r3, r3, #1840	@ 0x730
 800a0f8:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800a0fa:	4b08      	ldr	r3, [pc, #32]	@ (800a11c <FLASH_Erase_Sector+0x44>)
 800a0fc:	68da      	ldr	r2, [r3, #12]
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	0219      	lsls	r1, r3, #8
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	430b      	orrs	r3, r1
 800a106:	4313      	orrs	r3, r2
 800a108:	4a04      	ldr	r2, [pc, #16]	@ (800a11c <FLASH_Erase_Sector+0x44>)
 800a10a:	f043 0384 	orr.w	r3, r3, #132	@ 0x84
 800a10e:	60d3      	str	r3, [r2, #12]

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 800a110:	bf00      	nop
 800a112:	3714      	adds	r7, #20
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr
 800a11c:	52002000 	.word	0x52002000

0800a120 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a120:	b480      	push	{r7}
 800a122:	b089      	sub	sp, #36	@ 0x24
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
 800a128:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a12a:	2300      	movs	r3, #0
 800a12c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a12e:	4b86      	ldr	r3, [pc, #536]	@ (800a348 <HAL_GPIO_Init+0x228>)
 800a130:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a132:	e18c      	b.n	800a44e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	681a      	ldr	r2, [r3, #0]
 800a138:	2101      	movs	r1, #1
 800a13a:	69fb      	ldr	r3, [r7, #28]
 800a13c:	fa01 f303 	lsl.w	r3, r1, r3
 800a140:	4013      	ands	r3, r2
 800a142:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	2b00      	cmp	r3, #0
 800a148:	f000 817e 	beq.w	800a448 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	f003 0303 	and.w	r3, r3, #3
 800a154:	2b01      	cmp	r3, #1
 800a156:	d005      	beq.n	800a164 <HAL_GPIO_Init+0x44>
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	f003 0303 	and.w	r3, r3, #3
 800a160:	2b02      	cmp	r3, #2
 800a162:	d130      	bne.n	800a1c6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	689b      	ldr	r3, [r3, #8]
 800a168:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a16a:	69fb      	ldr	r3, [r7, #28]
 800a16c:	005b      	lsls	r3, r3, #1
 800a16e:	2203      	movs	r2, #3
 800a170:	fa02 f303 	lsl.w	r3, r2, r3
 800a174:	43db      	mvns	r3, r3
 800a176:	69ba      	ldr	r2, [r7, #24]
 800a178:	4013      	ands	r3, r2
 800a17a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	68da      	ldr	r2, [r3, #12]
 800a180:	69fb      	ldr	r3, [r7, #28]
 800a182:	005b      	lsls	r3, r3, #1
 800a184:	fa02 f303 	lsl.w	r3, r2, r3
 800a188:	69ba      	ldr	r2, [r7, #24]
 800a18a:	4313      	orrs	r3, r2
 800a18c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	69ba      	ldr	r2, [r7, #24]
 800a192:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a19a:	2201      	movs	r2, #1
 800a19c:	69fb      	ldr	r3, [r7, #28]
 800a19e:	fa02 f303 	lsl.w	r3, r2, r3
 800a1a2:	43db      	mvns	r3, r3
 800a1a4:	69ba      	ldr	r2, [r7, #24]
 800a1a6:	4013      	ands	r3, r2
 800a1a8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	091b      	lsrs	r3, r3, #4
 800a1b0:	f003 0201 	and.w	r2, r3, #1
 800a1b4:	69fb      	ldr	r3, [r7, #28]
 800a1b6:	fa02 f303 	lsl.w	r3, r2, r3
 800a1ba:	69ba      	ldr	r2, [r7, #24]
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	69ba      	ldr	r2, [r7, #24]
 800a1c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	685b      	ldr	r3, [r3, #4]
 800a1ca:	f003 0303 	and.w	r3, r3, #3
 800a1ce:	2b03      	cmp	r3, #3
 800a1d0:	d017      	beq.n	800a202 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	68db      	ldr	r3, [r3, #12]
 800a1d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a1d8:	69fb      	ldr	r3, [r7, #28]
 800a1da:	005b      	lsls	r3, r3, #1
 800a1dc:	2203      	movs	r2, #3
 800a1de:	fa02 f303 	lsl.w	r3, r2, r3
 800a1e2:	43db      	mvns	r3, r3
 800a1e4:	69ba      	ldr	r2, [r7, #24]
 800a1e6:	4013      	ands	r3, r2
 800a1e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	689a      	ldr	r2, [r3, #8]
 800a1ee:	69fb      	ldr	r3, [r7, #28]
 800a1f0:	005b      	lsls	r3, r3, #1
 800a1f2:	fa02 f303 	lsl.w	r3, r2, r3
 800a1f6:	69ba      	ldr	r2, [r7, #24]
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	69ba      	ldr	r2, [r7, #24]
 800a200:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	f003 0303 	and.w	r3, r3, #3
 800a20a:	2b02      	cmp	r3, #2
 800a20c:	d123      	bne.n	800a256 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a20e:	69fb      	ldr	r3, [r7, #28]
 800a210:	08da      	lsrs	r2, r3, #3
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	3208      	adds	r2, #8
 800a216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a21a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a21c:	69fb      	ldr	r3, [r7, #28]
 800a21e:	f003 0307 	and.w	r3, r3, #7
 800a222:	009b      	lsls	r3, r3, #2
 800a224:	220f      	movs	r2, #15
 800a226:	fa02 f303 	lsl.w	r3, r2, r3
 800a22a:	43db      	mvns	r3, r3
 800a22c:	69ba      	ldr	r2, [r7, #24]
 800a22e:	4013      	ands	r3, r2
 800a230:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	691a      	ldr	r2, [r3, #16]
 800a236:	69fb      	ldr	r3, [r7, #28]
 800a238:	f003 0307 	and.w	r3, r3, #7
 800a23c:	009b      	lsls	r3, r3, #2
 800a23e:	fa02 f303 	lsl.w	r3, r2, r3
 800a242:	69ba      	ldr	r2, [r7, #24]
 800a244:	4313      	orrs	r3, r2
 800a246:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a248:	69fb      	ldr	r3, [r7, #28]
 800a24a:	08da      	lsrs	r2, r3, #3
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	3208      	adds	r2, #8
 800a250:	69b9      	ldr	r1, [r7, #24]
 800a252:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a25c:	69fb      	ldr	r3, [r7, #28]
 800a25e:	005b      	lsls	r3, r3, #1
 800a260:	2203      	movs	r2, #3
 800a262:	fa02 f303 	lsl.w	r3, r2, r3
 800a266:	43db      	mvns	r3, r3
 800a268:	69ba      	ldr	r2, [r7, #24]
 800a26a:	4013      	ands	r3, r2
 800a26c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	685b      	ldr	r3, [r3, #4]
 800a272:	f003 0203 	and.w	r2, r3, #3
 800a276:	69fb      	ldr	r3, [r7, #28]
 800a278:	005b      	lsls	r3, r3, #1
 800a27a:	fa02 f303 	lsl.w	r3, r2, r3
 800a27e:	69ba      	ldr	r2, [r7, #24]
 800a280:	4313      	orrs	r3, r2
 800a282:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	69ba      	ldr	r2, [r7, #24]
 800a288:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a292:	2b00      	cmp	r3, #0
 800a294:	f000 80d8 	beq.w	800a448 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a298:	4b2c      	ldr	r3, [pc, #176]	@ (800a34c <HAL_GPIO_Init+0x22c>)
 800a29a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a29e:	4a2b      	ldr	r2, [pc, #172]	@ (800a34c <HAL_GPIO_Init+0x22c>)
 800a2a0:	f043 0302 	orr.w	r3, r3, #2
 800a2a4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800a2a8:	4b28      	ldr	r3, [pc, #160]	@ (800a34c <HAL_GPIO_Init+0x22c>)
 800a2aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a2ae:	f003 0302 	and.w	r3, r3, #2
 800a2b2:	60fb      	str	r3, [r7, #12]
 800a2b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a2b6:	4a26      	ldr	r2, [pc, #152]	@ (800a350 <HAL_GPIO_Init+0x230>)
 800a2b8:	69fb      	ldr	r3, [r7, #28]
 800a2ba:	089b      	lsrs	r3, r3, #2
 800a2bc:	3302      	adds	r3, #2
 800a2be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a2c4:	69fb      	ldr	r3, [r7, #28]
 800a2c6:	f003 0303 	and.w	r3, r3, #3
 800a2ca:	009b      	lsls	r3, r3, #2
 800a2cc:	220f      	movs	r2, #15
 800a2ce:	fa02 f303 	lsl.w	r3, r2, r3
 800a2d2:	43db      	mvns	r3, r3
 800a2d4:	69ba      	ldr	r2, [r7, #24]
 800a2d6:	4013      	ands	r3, r2
 800a2d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	4a1d      	ldr	r2, [pc, #116]	@ (800a354 <HAL_GPIO_Init+0x234>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d04a      	beq.n	800a378 <HAL_GPIO_Init+0x258>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	4a1c      	ldr	r2, [pc, #112]	@ (800a358 <HAL_GPIO_Init+0x238>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d02b      	beq.n	800a342 <HAL_GPIO_Init+0x222>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	4a1b      	ldr	r2, [pc, #108]	@ (800a35c <HAL_GPIO_Init+0x23c>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d025      	beq.n	800a33e <HAL_GPIO_Init+0x21e>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	4a1a      	ldr	r2, [pc, #104]	@ (800a360 <HAL_GPIO_Init+0x240>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d01f      	beq.n	800a33a <HAL_GPIO_Init+0x21a>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	4a19      	ldr	r2, [pc, #100]	@ (800a364 <HAL_GPIO_Init+0x244>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d019      	beq.n	800a336 <HAL_GPIO_Init+0x216>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	4a18      	ldr	r2, [pc, #96]	@ (800a368 <HAL_GPIO_Init+0x248>)
 800a306:	4293      	cmp	r3, r2
 800a308:	d013      	beq.n	800a332 <HAL_GPIO_Init+0x212>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	4a17      	ldr	r2, [pc, #92]	@ (800a36c <HAL_GPIO_Init+0x24c>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d00d      	beq.n	800a32e <HAL_GPIO_Init+0x20e>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	4a16      	ldr	r2, [pc, #88]	@ (800a370 <HAL_GPIO_Init+0x250>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d007      	beq.n	800a32a <HAL_GPIO_Init+0x20a>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	4a15      	ldr	r2, [pc, #84]	@ (800a374 <HAL_GPIO_Init+0x254>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d101      	bne.n	800a326 <HAL_GPIO_Init+0x206>
 800a322:	2309      	movs	r3, #9
 800a324:	e029      	b.n	800a37a <HAL_GPIO_Init+0x25a>
 800a326:	230a      	movs	r3, #10
 800a328:	e027      	b.n	800a37a <HAL_GPIO_Init+0x25a>
 800a32a:	2307      	movs	r3, #7
 800a32c:	e025      	b.n	800a37a <HAL_GPIO_Init+0x25a>
 800a32e:	2306      	movs	r3, #6
 800a330:	e023      	b.n	800a37a <HAL_GPIO_Init+0x25a>
 800a332:	2305      	movs	r3, #5
 800a334:	e021      	b.n	800a37a <HAL_GPIO_Init+0x25a>
 800a336:	2304      	movs	r3, #4
 800a338:	e01f      	b.n	800a37a <HAL_GPIO_Init+0x25a>
 800a33a:	2303      	movs	r3, #3
 800a33c:	e01d      	b.n	800a37a <HAL_GPIO_Init+0x25a>
 800a33e:	2302      	movs	r3, #2
 800a340:	e01b      	b.n	800a37a <HAL_GPIO_Init+0x25a>
 800a342:	2301      	movs	r3, #1
 800a344:	e019      	b.n	800a37a <HAL_GPIO_Init+0x25a>
 800a346:	bf00      	nop
 800a348:	58000080 	.word	0x58000080
 800a34c:	58024400 	.word	0x58024400
 800a350:	58000400 	.word	0x58000400
 800a354:	58020000 	.word	0x58020000
 800a358:	58020400 	.word	0x58020400
 800a35c:	58020800 	.word	0x58020800
 800a360:	58020c00 	.word	0x58020c00
 800a364:	58021000 	.word	0x58021000
 800a368:	58021400 	.word	0x58021400
 800a36c:	58021800 	.word	0x58021800
 800a370:	58021c00 	.word	0x58021c00
 800a374:	58022400 	.word	0x58022400
 800a378:	2300      	movs	r3, #0
 800a37a:	69fa      	ldr	r2, [r7, #28]
 800a37c:	f002 0203 	and.w	r2, r2, #3
 800a380:	0092      	lsls	r2, r2, #2
 800a382:	4093      	lsls	r3, r2
 800a384:	69ba      	ldr	r2, [r7, #24]
 800a386:	4313      	orrs	r3, r2
 800a388:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a38a:	4938      	ldr	r1, [pc, #224]	@ (800a46c <HAL_GPIO_Init+0x34c>)
 800a38c:	69fb      	ldr	r3, [r7, #28]
 800a38e:	089b      	lsrs	r3, r3, #2
 800a390:	3302      	adds	r3, #2
 800a392:	69ba      	ldr	r2, [r7, #24]
 800a394:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a398:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	43db      	mvns	r3, r3
 800a3a4:	69ba      	ldr	r2, [r7, #24]
 800a3a6:	4013      	ands	r3, r2
 800a3a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d003      	beq.n	800a3be <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800a3b6:	69ba      	ldr	r2, [r7, #24]
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800a3be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a3c2:	69bb      	ldr	r3, [r7, #24]
 800a3c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a3c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a3ca:	685b      	ldr	r3, [r3, #4]
 800a3cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	43db      	mvns	r3, r3
 800a3d2:	69ba      	ldr	r2, [r7, #24]
 800a3d4:	4013      	ands	r3, r2
 800a3d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	685b      	ldr	r3, [r3, #4]
 800a3dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d003      	beq.n	800a3ec <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800a3e4:	69ba      	ldr	r2, [r7, #24]
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800a3ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a3f0:	69bb      	ldr	r3, [r7, #24]
 800a3f2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a3fa:	693b      	ldr	r3, [r7, #16]
 800a3fc:	43db      	mvns	r3, r3
 800a3fe:	69ba      	ldr	r2, [r7, #24]
 800a400:	4013      	ands	r3, r2
 800a402:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d003      	beq.n	800a418 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800a410:	69ba      	ldr	r2, [r7, #24]
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	4313      	orrs	r3, r2
 800a416:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	69ba      	ldr	r2, [r7, #24]
 800a41c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	43db      	mvns	r3, r3
 800a428:	69ba      	ldr	r2, [r7, #24]
 800a42a:	4013      	ands	r3, r2
 800a42c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	685b      	ldr	r3, [r3, #4]
 800a432:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a436:	2b00      	cmp	r3, #0
 800a438:	d003      	beq.n	800a442 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800a43a:	69ba      	ldr	r2, [r7, #24]
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	4313      	orrs	r3, r2
 800a440:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	69ba      	ldr	r2, [r7, #24]
 800a446:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800a448:	69fb      	ldr	r3, [r7, #28]
 800a44a:	3301      	adds	r3, #1
 800a44c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	681a      	ldr	r2, [r3, #0]
 800a452:	69fb      	ldr	r3, [r7, #28]
 800a454:	fa22 f303 	lsr.w	r3, r2, r3
 800a458:	2b00      	cmp	r3, #0
 800a45a:	f47f ae6b 	bne.w	800a134 <HAL_GPIO_Init+0x14>
  }
}
 800a45e:	bf00      	nop
 800a460:	bf00      	nop
 800a462:	3724      	adds	r7, #36	@ 0x24
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr
 800a46c:	58000400 	.word	0x58000400

0800a470 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a470:	b480      	push	{r7}
 800a472:	b085      	sub	sp, #20
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
 800a478:	460b      	mov	r3, r1
 800a47a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	691a      	ldr	r2, [r3, #16]
 800a480:	887b      	ldrh	r3, [r7, #2]
 800a482:	4013      	ands	r3, r2
 800a484:	2b00      	cmp	r3, #0
 800a486:	d002      	beq.n	800a48e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a488:	2301      	movs	r3, #1
 800a48a:	73fb      	strb	r3, [r7, #15]
 800a48c:	e001      	b.n	800a492 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a48e:	2300      	movs	r3, #0
 800a490:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a492:	7bfb      	ldrb	r3, [r7, #15]
}
 800a494:	4618      	mov	r0, r3
 800a496:	3714      	adds	r7, #20
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr

0800a4a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b083      	sub	sp, #12
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	460b      	mov	r3, r1
 800a4aa:	807b      	strh	r3, [r7, #2]
 800a4ac:	4613      	mov	r3, r2
 800a4ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a4b0:	787b      	ldrb	r3, [r7, #1]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d003      	beq.n	800a4be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a4b6:	887a      	ldrh	r2, [r7, #2]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800a4bc:	e003      	b.n	800a4c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a4be:	887b      	ldrh	r3, [r7, #2]
 800a4c0:	041a      	lsls	r2, r3, #16
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	619a      	str	r2, [r3, #24]
}
 800a4c6:	bf00      	nop
 800a4c8:	370c      	adds	r7, #12
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d0:	4770      	bx	lr

0800a4d2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a4d2:	b580      	push	{r7, lr}
 800a4d4:	b082      	sub	sp, #8
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	4603      	mov	r3, r0
 800a4da:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800a4dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a4e0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800a4e4:	88fb      	ldrh	r3, [r7, #6]
 800a4e6:	4013      	ands	r3, r2
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d008      	beq.n	800a4fe <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a4ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a4f0:	88fb      	ldrh	r3, [r7, #6]
 800a4f2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a4f6:	88fb      	ldrh	r3, [r7, #6]
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f7f7 fbb9 	bl	8001c70 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800a4fe:	bf00      	nop
 800a500:	3708      	adds	r7, #8
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}
	...

0800a508 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b084      	sub	sp, #16
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a510:	4b19      	ldr	r3, [pc, #100]	@ (800a578 <HAL_PWREx_ConfigSupply+0x70>)
 800a512:	68db      	ldr	r3, [r3, #12]
 800a514:	f003 0304 	and.w	r3, r3, #4
 800a518:	2b04      	cmp	r3, #4
 800a51a:	d00a      	beq.n	800a532 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a51c:	4b16      	ldr	r3, [pc, #88]	@ (800a578 <HAL_PWREx_ConfigSupply+0x70>)
 800a51e:	68db      	ldr	r3, [r3, #12]
 800a520:	f003 0307 	and.w	r3, r3, #7
 800a524:	687a      	ldr	r2, [r7, #4]
 800a526:	429a      	cmp	r2, r3
 800a528:	d001      	beq.n	800a52e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a52a:	2301      	movs	r3, #1
 800a52c:	e01f      	b.n	800a56e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a52e:	2300      	movs	r3, #0
 800a530:	e01d      	b.n	800a56e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a532:	4b11      	ldr	r3, [pc, #68]	@ (800a578 <HAL_PWREx_ConfigSupply+0x70>)
 800a534:	68db      	ldr	r3, [r3, #12]
 800a536:	f023 0207 	bic.w	r2, r3, #7
 800a53a:	490f      	ldr	r1, [pc, #60]	@ (800a578 <HAL_PWREx_ConfigSupply+0x70>)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	4313      	orrs	r3, r2
 800a540:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a542:	f7f9 fd6b 	bl	800401c <HAL_GetTick>
 800a546:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a548:	e009      	b.n	800a55e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a54a:	f7f9 fd67 	bl	800401c <HAL_GetTick>
 800a54e:	4602      	mov	r2, r0
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	1ad3      	subs	r3, r2, r3
 800a554:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a558:	d901      	bls.n	800a55e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a55a:	2301      	movs	r3, #1
 800a55c:	e007      	b.n	800a56e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a55e:	4b06      	ldr	r3, [pc, #24]	@ (800a578 <HAL_PWREx_ConfigSupply+0x70>)
 800a560:	685b      	ldr	r3, [r3, #4]
 800a562:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a566:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a56a:	d1ee      	bne.n	800a54a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a56c:	2300      	movs	r3, #0
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3710      	adds	r7, #16
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}
 800a576:	bf00      	nop
 800a578:	58024800 	.word	0x58024800

0800a57c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b08c      	sub	sp, #48	@ 0x30
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d101      	bne.n	800a58e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a58a:	2301      	movs	r3, #1
 800a58c:	e3c8      	b.n	800ad20 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f003 0301 	and.w	r3, r3, #1
 800a596:	2b00      	cmp	r3, #0
 800a598:	f000 8087 	beq.w	800a6aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a59c:	4b88      	ldr	r3, [pc, #544]	@ (800a7c0 <HAL_RCC_OscConfig+0x244>)
 800a59e:	691b      	ldr	r3, [r3, #16]
 800a5a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a5a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a5a6:	4b86      	ldr	r3, [pc, #536]	@ (800a7c0 <HAL_RCC_OscConfig+0x244>)
 800a5a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a5ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5ae:	2b10      	cmp	r3, #16
 800a5b0:	d007      	beq.n	800a5c2 <HAL_RCC_OscConfig+0x46>
 800a5b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5b4:	2b18      	cmp	r3, #24
 800a5b6:	d110      	bne.n	800a5da <HAL_RCC_OscConfig+0x5e>
 800a5b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5ba:	f003 0303 	and.w	r3, r3, #3
 800a5be:	2b02      	cmp	r3, #2
 800a5c0:	d10b      	bne.n	800a5da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a5c2:	4b7f      	ldr	r3, [pc, #508]	@ (800a7c0 <HAL_RCC_OscConfig+0x244>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d06c      	beq.n	800a6a8 <HAL_RCC_OscConfig+0x12c>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d168      	bne.n	800a6a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	e3a2      	b.n	800ad20 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a5e2:	d106      	bne.n	800a5f2 <HAL_RCC_OscConfig+0x76>
 800a5e4:	4b76      	ldr	r3, [pc, #472]	@ (800a7c0 <HAL_RCC_OscConfig+0x244>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	4a75      	ldr	r2, [pc, #468]	@ (800a7c0 <HAL_RCC_OscConfig+0x244>)
 800a5ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a5ee:	6013      	str	r3, [r2, #0]
 800a5f0:	e02e      	b.n	800a650 <HAL_RCC_OscConfig+0xd4>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	685b      	ldr	r3, [r3, #4]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d10c      	bne.n	800a614 <HAL_RCC_OscConfig+0x98>
 800a5fa:	4b71      	ldr	r3, [pc, #452]	@ (800a7c0 <HAL_RCC_OscConfig+0x244>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	4a70      	ldr	r2, [pc, #448]	@ (800a7c0 <HAL_RCC_OscConfig+0x244>)
 800a600:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a604:	6013      	str	r3, [r2, #0]
 800a606:	4b6e      	ldr	r3, [pc, #440]	@ (800a7c0 <HAL_RCC_OscConfig+0x244>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	4a6d      	ldr	r2, [pc, #436]	@ (800a7c0 <HAL_RCC_OscConfig+0x244>)
 800a60c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a610:	6013      	str	r3, [r2, #0]
 800a612:	e01d      	b.n	800a650 <HAL_RCC_OscConfig+0xd4>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a61c:	d10c      	bne.n	800a638 <HAL_RCC_OscConfig+0xbc>
 800a61e:	4b68      	ldr	r3, [pc, #416]	@ (800a7c0 <HAL_RCC_OscConfig+0x244>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	4a67      	ldr	r2, [pc, #412]	@ (800a7c0 <HAL_RCC_OscConfig+0x244>)
 800a624:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a628:	6013      	str	r3, [r2, #0]
 800a62a:	4b65      	ldr	r3, [pc, #404]	@ (800a7c0 <HAL_RCC_OscConfig+0x244>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	4a64      	ldr	r2, [pc, #400]	@ (800a7c0 <HAL_RCC_OscConfig+0x244>)
 800a630:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a634:	6013      	str	r3, [r2, #0]
 800a636:	e00b      	b.n	800a650 <HAL_RCC_OscConfig+0xd4>
 800a638:	4b61      	ldr	r3, [pc, #388]	@ (800a7c0 <HAL_RCC_OscConfig+0x244>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	4a60      	ldr	r2, [pc, #384]	@ (800a7c0 <HAL_RCC_OscConfig+0x244>)
 800a63e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a642:	6013      	str	r3, [r2, #0]
 800a644:	4b5e      	ldr	r3, [pc, #376]	@ (800a7c0 <HAL_RCC_OscConfig+0x244>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4a5d      	ldr	r2, [pc, #372]	@ (800a7c0 <HAL_RCC_OscConfig+0x244>)
 800a64a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a64e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d013      	beq.n	800a680 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a658:	f7f9 fce0 	bl	800401c <HAL_GetTick>
 800a65c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a65e:	e008      	b.n	800a672 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a660:	f7f9 fcdc 	bl	800401c <HAL_GetTick>
 800a664:	4602      	mov	r2, r0
 800a666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a668:	1ad3      	subs	r3, r2, r3
 800a66a:	2b64      	cmp	r3, #100	@ 0x64
 800a66c:	d901      	bls.n	800a672 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a66e:	2303      	movs	r3, #3
 800a670:	e356      	b.n	800ad20 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a672:	4b53      	ldr	r3, [pc, #332]	@ (800a7c0 <HAL_RCC_OscConfig+0x244>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d0f0      	beq.n	800a660 <HAL_RCC_OscConfig+0xe4>
 800a67e:	e014      	b.n	800a6aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a680:	f7f9 fccc 	bl	800401c <HAL_GetTick>
 800a684:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a686:	e008      	b.n	800a69a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a688:	f7f9 fcc8 	bl	800401c <HAL_GetTick>
 800a68c:	4602      	mov	r2, r0
 800a68e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a690:	1ad3      	subs	r3, r2, r3
 800a692:	2b64      	cmp	r3, #100	@ 0x64
 800a694:	d901      	bls.n	800a69a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a696:	2303      	movs	r3, #3
 800a698:	e342      	b.n	800ad20 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a69a:	4b49      	ldr	r3, [pc, #292]	@ (800a7c0 <HAL_RCC_OscConfig+0x244>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d1f0      	bne.n	800a688 <HAL_RCC_OscConfig+0x10c>
 800a6a6:	e000      	b.n	800a6aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a6a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f003 0302 	and.w	r3, r3, #2
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	f000 808c 	beq.w	800a7d0 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a6b8:	4b41      	ldr	r3, [pc, #260]	@ (800a7c0 <HAL_RCC_OscConfig+0x244>)
 800a6ba:	691b      	ldr	r3, [r3, #16]
 800a6bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a6c0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a6c2:	4b3f      	ldr	r3, [pc, #252]	@ (800a7c0 <HAL_RCC_OscConfig+0x244>)
 800a6c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6c6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a6c8:	6a3b      	ldr	r3, [r7, #32]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d007      	beq.n	800a6de <HAL_RCC_OscConfig+0x162>
 800a6ce:	6a3b      	ldr	r3, [r7, #32]
 800a6d0:	2b18      	cmp	r3, #24
 800a6d2:	d137      	bne.n	800a744 <HAL_RCC_OscConfig+0x1c8>
 800a6d4:	69fb      	ldr	r3, [r7, #28]
 800a6d6:	f003 0303 	and.w	r3, r3, #3
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d132      	bne.n	800a744 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a6de:	4b38      	ldr	r3, [pc, #224]	@ (800a7c0 <HAL_RCC_OscConfig+0x244>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f003 0304 	and.w	r3, r3, #4
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d005      	beq.n	800a6f6 <HAL_RCC_OscConfig+0x17a>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	68db      	ldr	r3, [r3, #12]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d101      	bne.n	800a6f6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	e314      	b.n	800ad20 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a6f6:	4b32      	ldr	r3, [pc, #200]	@ (800a7c0 <HAL_RCC_OscConfig+0x244>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f023 0219 	bic.w	r2, r3, #25
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	68db      	ldr	r3, [r3, #12]
 800a702:	492f      	ldr	r1, [pc, #188]	@ (800a7c0 <HAL_RCC_OscConfig+0x244>)
 800a704:	4313      	orrs	r3, r2
 800a706:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a708:	f7f9 fc88 	bl	800401c <HAL_GetTick>
 800a70c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a70e:	e008      	b.n	800a722 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a710:	f7f9 fc84 	bl	800401c <HAL_GetTick>
 800a714:	4602      	mov	r2, r0
 800a716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a718:	1ad3      	subs	r3, r2, r3
 800a71a:	2b02      	cmp	r3, #2
 800a71c:	d901      	bls.n	800a722 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800a71e:	2303      	movs	r3, #3
 800a720:	e2fe      	b.n	800ad20 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a722:	4b27      	ldr	r3, [pc, #156]	@ (800a7c0 <HAL_RCC_OscConfig+0x244>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f003 0304 	and.w	r3, r3, #4
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d0f0      	beq.n	800a710 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a72e:	4b24      	ldr	r3, [pc, #144]	@ (800a7c0 <HAL_RCC_OscConfig+0x244>)
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	691b      	ldr	r3, [r3, #16]
 800a73a:	061b      	lsls	r3, r3, #24
 800a73c:	4920      	ldr	r1, [pc, #128]	@ (800a7c0 <HAL_RCC_OscConfig+0x244>)
 800a73e:	4313      	orrs	r3, r2
 800a740:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a742:	e045      	b.n	800a7d0 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	68db      	ldr	r3, [r3, #12]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d026      	beq.n	800a79a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a74c:	4b1c      	ldr	r3, [pc, #112]	@ (800a7c0 <HAL_RCC_OscConfig+0x244>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f023 0219 	bic.w	r2, r3, #25
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	68db      	ldr	r3, [r3, #12]
 800a758:	4919      	ldr	r1, [pc, #100]	@ (800a7c0 <HAL_RCC_OscConfig+0x244>)
 800a75a:	4313      	orrs	r3, r2
 800a75c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a75e:	f7f9 fc5d 	bl	800401c <HAL_GetTick>
 800a762:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a764:	e008      	b.n	800a778 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a766:	f7f9 fc59 	bl	800401c <HAL_GetTick>
 800a76a:	4602      	mov	r2, r0
 800a76c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a76e:	1ad3      	subs	r3, r2, r3
 800a770:	2b02      	cmp	r3, #2
 800a772:	d901      	bls.n	800a778 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800a774:	2303      	movs	r3, #3
 800a776:	e2d3      	b.n	800ad20 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a778:	4b11      	ldr	r3, [pc, #68]	@ (800a7c0 <HAL_RCC_OscConfig+0x244>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f003 0304 	and.w	r3, r3, #4
 800a780:	2b00      	cmp	r3, #0
 800a782:	d0f0      	beq.n	800a766 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a784:	4b0e      	ldr	r3, [pc, #56]	@ (800a7c0 <HAL_RCC_OscConfig+0x244>)
 800a786:	685b      	ldr	r3, [r3, #4]
 800a788:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	691b      	ldr	r3, [r3, #16]
 800a790:	061b      	lsls	r3, r3, #24
 800a792:	490b      	ldr	r1, [pc, #44]	@ (800a7c0 <HAL_RCC_OscConfig+0x244>)
 800a794:	4313      	orrs	r3, r2
 800a796:	604b      	str	r3, [r1, #4]
 800a798:	e01a      	b.n	800a7d0 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a79a:	4b09      	ldr	r3, [pc, #36]	@ (800a7c0 <HAL_RCC_OscConfig+0x244>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	4a08      	ldr	r2, [pc, #32]	@ (800a7c0 <HAL_RCC_OscConfig+0x244>)
 800a7a0:	f023 0301 	bic.w	r3, r3, #1
 800a7a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7a6:	f7f9 fc39 	bl	800401c <HAL_GetTick>
 800a7aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a7ac:	e00a      	b.n	800a7c4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a7ae:	f7f9 fc35 	bl	800401c <HAL_GetTick>
 800a7b2:	4602      	mov	r2, r0
 800a7b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7b6:	1ad3      	subs	r3, r2, r3
 800a7b8:	2b02      	cmp	r3, #2
 800a7ba:	d903      	bls.n	800a7c4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a7bc:	2303      	movs	r3, #3
 800a7be:	e2af      	b.n	800ad20 <HAL_RCC_OscConfig+0x7a4>
 800a7c0:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a7c4:	4b96      	ldr	r3, [pc, #600]	@ (800aa20 <HAL_RCC_OscConfig+0x4a4>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f003 0304 	and.w	r3, r3, #4
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d1ee      	bne.n	800a7ae <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f003 0310 	and.w	r3, r3, #16
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d06a      	beq.n	800a8b2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a7dc:	4b90      	ldr	r3, [pc, #576]	@ (800aa20 <HAL_RCC_OscConfig+0x4a4>)
 800a7de:	691b      	ldr	r3, [r3, #16]
 800a7e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a7e4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a7e6:	4b8e      	ldr	r3, [pc, #568]	@ (800aa20 <HAL_RCC_OscConfig+0x4a4>)
 800a7e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7ea:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a7ec:	69bb      	ldr	r3, [r7, #24]
 800a7ee:	2b08      	cmp	r3, #8
 800a7f0:	d007      	beq.n	800a802 <HAL_RCC_OscConfig+0x286>
 800a7f2:	69bb      	ldr	r3, [r7, #24]
 800a7f4:	2b18      	cmp	r3, #24
 800a7f6:	d11b      	bne.n	800a830 <HAL_RCC_OscConfig+0x2b4>
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	f003 0303 	and.w	r3, r3, #3
 800a7fe:	2b01      	cmp	r3, #1
 800a800:	d116      	bne.n	800a830 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a802:	4b87      	ldr	r3, [pc, #540]	@ (800aa20 <HAL_RCC_OscConfig+0x4a4>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d005      	beq.n	800a81a <HAL_RCC_OscConfig+0x29e>
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	69db      	ldr	r3, [r3, #28]
 800a812:	2b80      	cmp	r3, #128	@ 0x80
 800a814:	d001      	beq.n	800a81a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800a816:	2301      	movs	r3, #1
 800a818:	e282      	b.n	800ad20 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a81a:	4b81      	ldr	r3, [pc, #516]	@ (800aa20 <HAL_RCC_OscConfig+0x4a4>)
 800a81c:	68db      	ldr	r3, [r3, #12]
 800a81e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6a1b      	ldr	r3, [r3, #32]
 800a826:	061b      	lsls	r3, r3, #24
 800a828:	497d      	ldr	r1, [pc, #500]	@ (800aa20 <HAL_RCC_OscConfig+0x4a4>)
 800a82a:	4313      	orrs	r3, r2
 800a82c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a82e:	e040      	b.n	800a8b2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	69db      	ldr	r3, [r3, #28]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d023      	beq.n	800a880 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a838:	4b79      	ldr	r3, [pc, #484]	@ (800aa20 <HAL_RCC_OscConfig+0x4a4>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	4a78      	ldr	r2, [pc, #480]	@ (800aa20 <HAL_RCC_OscConfig+0x4a4>)
 800a83e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a842:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a844:	f7f9 fbea 	bl	800401c <HAL_GetTick>
 800a848:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a84a:	e008      	b.n	800a85e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a84c:	f7f9 fbe6 	bl	800401c <HAL_GetTick>
 800a850:	4602      	mov	r2, r0
 800a852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a854:	1ad3      	subs	r3, r2, r3
 800a856:	2b02      	cmp	r3, #2
 800a858:	d901      	bls.n	800a85e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a85a:	2303      	movs	r3, #3
 800a85c:	e260      	b.n	800ad20 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a85e:	4b70      	ldr	r3, [pc, #448]	@ (800aa20 <HAL_RCC_OscConfig+0x4a4>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a866:	2b00      	cmp	r3, #0
 800a868:	d0f0      	beq.n	800a84c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a86a:	4b6d      	ldr	r3, [pc, #436]	@ (800aa20 <HAL_RCC_OscConfig+0x4a4>)
 800a86c:	68db      	ldr	r3, [r3, #12]
 800a86e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6a1b      	ldr	r3, [r3, #32]
 800a876:	061b      	lsls	r3, r3, #24
 800a878:	4969      	ldr	r1, [pc, #420]	@ (800aa20 <HAL_RCC_OscConfig+0x4a4>)
 800a87a:	4313      	orrs	r3, r2
 800a87c:	60cb      	str	r3, [r1, #12]
 800a87e:	e018      	b.n	800a8b2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a880:	4b67      	ldr	r3, [pc, #412]	@ (800aa20 <HAL_RCC_OscConfig+0x4a4>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	4a66      	ldr	r2, [pc, #408]	@ (800aa20 <HAL_RCC_OscConfig+0x4a4>)
 800a886:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a88a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a88c:	f7f9 fbc6 	bl	800401c <HAL_GetTick>
 800a890:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a892:	e008      	b.n	800a8a6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a894:	f7f9 fbc2 	bl	800401c <HAL_GetTick>
 800a898:	4602      	mov	r2, r0
 800a89a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a89c:	1ad3      	subs	r3, r2, r3
 800a89e:	2b02      	cmp	r3, #2
 800a8a0:	d901      	bls.n	800a8a6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800a8a2:	2303      	movs	r3, #3
 800a8a4:	e23c      	b.n	800ad20 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a8a6:	4b5e      	ldr	r3, [pc, #376]	@ (800aa20 <HAL_RCC_OscConfig+0x4a4>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d1f0      	bne.n	800a894 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f003 0308 	and.w	r3, r3, #8
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d036      	beq.n	800a92c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	695b      	ldr	r3, [r3, #20]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d019      	beq.n	800a8fa <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a8c6:	4b56      	ldr	r3, [pc, #344]	@ (800aa20 <HAL_RCC_OscConfig+0x4a4>)
 800a8c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a8ca:	4a55      	ldr	r2, [pc, #340]	@ (800aa20 <HAL_RCC_OscConfig+0x4a4>)
 800a8cc:	f043 0301 	orr.w	r3, r3, #1
 800a8d0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a8d2:	f7f9 fba3 	bl	800401c <HAL_GetTick>
 800a8d6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a8d8:	e008      	b.n	800a8ec <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a8da:	f7f9 fb9f 	bl	800401c <HAL_GetTick>
 800a8de:	4602      	mov	r2, r0
 800a8e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8e2:	1ad3      	subs	r3, r2, r3
 800a8e4:	2b02      	cmp	r3, #2
 800a8e6:	d901      	bls.n	800a8ec <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800a8e8:	2303      	movs	r3, #3
 800a8ea:	e219      	b.n	800ad20 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a8ec:	4b4c      	ldr	r3, [pc, #304]	@ (800aa20 <HAL_RCC_OscConfig+0x4a4>)
 800a8ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a8f0:	f003 0302 	and.w	r3, r3, #2
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d0f0      	beq.n	800a8da <HAL_RCC_OscConfig+0x35e>
 800a8f8:	e018      	b.n	800a92c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a8fa:	4b49      	ldr	r3, [pc, #292]	@ (800aa20 <HAL_RCC_OscConfig+0x4a4>)
 800a8fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a8fe:	4a48      	ldr	r2, [pc, #288]	@ (800aa20 <HAL_RCC_OscConfig+0x4a4>)
 800a900:	f023 0301 	bic.w	r3, r3, #1
 800a904:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a906:	f7f9 fb89 	bl	800401c <HAL_GetTick>
 800a90a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a90c:	e008      	b.n	800a920 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a90e:	f7f9 fb85 	bl	800401c <HAL_GetTick>
 800a912:	4602      	mov	r2, r0
 800a914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a916:	1ad3      	subs	r3, r2, r3
 800a918:	2b02      	cmp	r3, #2
 800a91a:	d901      	bls.n	800a920 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800a91c:	2303      	movs	r3, #3
 800a91e:	e1ff      	b.n	800ad20 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a920:	4b3f      	ldr	r3, [pc, #252]	@ (800aa20 <HAL_RCC_OscConfig+0x4a4>)
 800a922:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a924:	f003 0302 	and.w	r3, r3, #2
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d1f0      	bne.n	800a90e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f003 0320 	and.w	r3, r3, #32
 800a934:	2b00      	cmp	r3, #0
 800a936:	d036      	beq.n	800a9a6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	699b      	ldr	r3, [r3, #24]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d019      	beq.n	800a974 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a940:	4b37      	ldr	r3, [pc, #220]	@ (800aa20 <HAL_RCC_OscConfig+0x4a4>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4a36      	ldr	r2, [pc, #216]	@ (800aa20 <HAL_RCC_OscConfig+0x4a4>)
 800a946:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a94a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a94c:	f7f9 fb66 	bl	800401c <HAL_GetTick>
 800a950:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a952:	e008      	b.n	800a966 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a954:	f7f9 fb62 	bl	800401c <HAL_GetTick>
 800a958:	4602      	mov	r2, r0
 800a95a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a95c:	1ad3      	subs	r3, r2, r3
 800a95e:	2b02      	cmp	r3, #2
 800a960:	d901      	bls.n	800a966 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800a962:	2303      	movs	r3, #3
 800a964:	e1dc      	b.n	800ad20 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a966:	4b2e      	ldr	r3, [pc, #184]	@ (800aa20 <HAL_RCC_OscConfig+0x4a4>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d0f0      	beq.n	800a954 <HAL_RCC_OscConfig+0x3d8>
 800a972:	e018      	b.n	800a9a6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a974:	4b2a      	ldr	r3, [pc, #168]	@ (800aa20 <HAL_RCC_OscConfig+0x4a4>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	4a29      	ldr	r2, [pc, #164]	@ (800aa20 <HAL_RCC_OscConfig+0x4a4>)
 800a97a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a97e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a980:	f7f9 fb4c 	bl	800401c <HAL_GetTick>
 800a984:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a986:	e008      	b.n	800a99a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a988:	f7f9 fb48 	bl	800401c <HAL_GetTick>
 800a98c:	4602      	mov	r2, r0
 800a98e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a990:	1ad3      	subs	r3, r2, r3
 800a992:	2b02      	cmp	r3, #2
 800a994:	d901      	bls.n	800a99a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800a996:	2303      	movs	r3, #3
 800a998:	e1c2      	b.n	800ad20 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a99a:	4b21      	ldr	r3, [pc, #132]	@ (800aa20 <HAL_RCC_OscConfig+0x4a4>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d1f0      	bne.n	800a988 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f003 0304 	and.w	r3, r3, #4
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	f000 8086 	beq.w	800aac0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a9b4:	4b1b      	ldr	r3, [pc, #108]	@ (800aa24 <HAL_RCC_OscConfig+0x4a8>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	4a1a      	ldr	r2, [pc, #104]	@ (800aa24 <HAL_RCC_OscConfig+0x4a8>)
 800a9ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a9be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a9c0:	f7f9 fb2c 	bl	800401c <HAL_GetTick>
 800a9c4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a9c6:	e008      	b.n	800a9da <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a9c8:	f7f9 fb28 	bl	800401c <HAL_GetTick>
 800a9cc:	4602      	mov	r2, r0
 800a9ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9d0:	1ad3      	subs	r3, r2, r3
 800a9d2:	2b64      	cmp	r3, #100	@ 0x64
 800a9d4:	d901      	bls.n	800a9da <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800a9d6:	2303      	movs	r3, #3
 800a9d8:	e1a2      	b.n	800ad20 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a9da:	4b12      	ldr	r3, [pc, #72]	@ (800aa24 <HAL_RCC_OscConfig+0x4a8>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d0f0      	beq.n	800a9c8 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	689b      	ldr	r3, [r3, #8]
 800a9ea:	2b01      	cmp	r3, #1
 800a9ec:	d106      	bne.n	800a9fc <HAL_RCC_OscConfig+0x480>
 800a9ee:	4b0c      	ldr	r3, [pc, #48]	@ (800aa20 <HAL_RCC_OscConfig+0x4a4>)
 800a9f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a9f2:	4a0b      	ldr	r2, [pc, #44]	@ (800aa20 <HAL_RCC_OscConfig+0x4a4>)
 800a9f4:	f043 0301 	orr.w	r3, r3, #1
 800a9f8:	6713      	str	r3, [r2, #112]	@ 0x70
 800a9fa:	e032      	b.n	800aa62 <HAL_RCC_OscConfig+0x4e6>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	689b      	ldr	r3, [r3, #8]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d111      	bne.n	800aa28 <HAL_RCC_OscConfig+0x4ac>
 800aa04:	4b06      	ldr	r3, [pc, #24]	@ (800aa20 <HAL_RCC_OscConfig+0x4a4>)
 800aa06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa08:	4a05      	ldr	r2, [pc, #20]	@ (800aa20 <HAL_RCC_OscConfig+0x4a4>)
 800aa0a:	f023 0301 	bic.w	r3, r3, #1
 800aa0e:	6713      	str	r3, [r2, #112]	@ 0x70
 800aa10:	4b03      	ldr	r3, [pc, #12]	@ (800aa20 <HAL_RCC_OscConfig+0x4a4>)
 800aa12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa14:	4a02      	ldr	r2, [pc, #8]	@ (800aa20 <HAL_RCC_OscConfig+0x4a4>)
 800aa16:	f023 0304 	bic.w	r3, r3, #4
 800aa1a:	6713      	str	r3, [r2, #112]	@ 0x70
 800aa1c:	e021      	b.n	800aa62 <HAL_RCC_OscConfig+0x4e6>
 800aa1e:	bf00      	nop
 800aa20:	58024400 	.word	0x58024400
 800aa24:	58024800 	.word	0x58024800
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	689b      	ldr	r3, [r3, #8]
 800aa2c:	2b05      	cmp	r3, #5
 800aa2e:	d10c      	bne.n	800aa4a <HAL_RCC_OscConfig+0x4ce>
 800aa30:	4b83      	ldr	r3, [pc, #524]	@ (800ac40 <HAL_RCC_OscConfig+0x6c4>)
 800aa32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa34:	4a82      	ldr	r2, [pc, #520]	@ (800ac40 <HAL_RCC_OscConfig+0x6c4>)
 800aa36:	f043 0304 	orr.w	r3, r3, #4
 800aa3a:	6713      	str	r3, [r2, #112]	@ 0x70
 800aa3c:	4b80      	ldr	r3, [pc, #512]	@ (800ac40 <HAL_RCC_OscConfig+0x6c4>)
 800aa3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa40:	4a7f      	ldr	r2, [pc, #508]	@ (800ac40 <HAL_RCC_OscConfig+0x6c4>)
 800aa42:	f043 0301 	orr.w	r3, r3, #1
 800aa46:	6713      	str	r3, [r2, #112]	@ 0x70
 800aa48:	e00b      	b.n	800aa62 <HAL_RCC_OscConfig+0x4e6>
 800aa4a:	4b7d      	ldr	r3, [pc, #500]	@ (800ac40 <HAL_RCC_OscConfig+0x6c4>)
 800aa4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa4e:	4a7c      	ldr	r2, [pc, #496]	@ (800ac40 <HAL_RCC_OscConfig+0x6c4>)
 800aa50:	f023 0301 	bic.w	r3, r3, #1
 800aa54:	6713      	str	r3, [r2, #112]	@ 0x70
 800aa56:	4b7a      	ldr	r3, [pc, #488]	@ (800ac40 <HAL_RCC_OscConfig+0x6c4>)
 800aa58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa5a:	4a79      	ldr	r2, [pc, #484]	@ (800ac40 <HAL_RCC_OscConfig+0x6c4>)
 800aa5c:	f023 0304 	bic.w	r3, r3, #4
 800aa60:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	689b      	ldr	r3, [r3, #8]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d015      	beq.n	800aa96 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa6a:	f7f9 fad7 	bl	800401c <HAL_GetTick>
 800aa6e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aa70:	e00a      	b.n	800aa88 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa72:	f7f9 fad3 	bl	800401c <HAL_GetTick>
 800aa76:	4602      	mov	r2, r0
 800aa78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa7a:	1ad3      	subs	r3, r2, r3
 800aa7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d901      	bls.n	800aa88 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800aa84:	2303      	movs	r3, #3
 800aa86:	e14b      	b.n	800ad20 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aa88:	4b6d      	ldr	r3, [pc, #436]	@ (800ac40 <HAL_RCC_OscConfig+0x6c4>)
 800aa8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa8c:	f003 0302 	and.w	r3, r3, #2
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d0ee      	beq.n	800aa72 <HAL_RCC_OscConfig+0x4f6>
 800aa94:	e014      	b.n	800aac0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa96:	f7f9 fac1 	bl	800401c <HAL_GetTick>
 800aa9a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800aa9c:	e00a      	b.n	800aab4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800aa9e:	f7f9 fabd 	bl	800401c <HAL_GetTick>
 800aaa2:	4602      	mov	r2, r0
 800aaa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaa6:	1ad3      	subs	r3, r2, r3
 800aaa8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d901      	bls.n	800aab4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800aab0:	2303      	movs	r3, #3
 800aab2:	e135      	b.n	800ad20 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800aab4:	4b62      	ldr	r3, [pc, #392]	@ (800ac40 <HAL_RCC_OscConfig+0x6c4>)
 800aab6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aab8:	f003 0302 	and.w	r3, r3, #2
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d1ee      	bne.n	800aa9e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	f000 812a 	beq.w	800ad1e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800aaca:	4b5d      	ldr	r3, [pc, #372]	@ (800ac40 <HAL_RCC_OscConfig+0x6c4>)
 800aacc:	691b      	ldr	r3, [r3, #16]
 800aace:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aad2:	2b18      	cmp	r3, #24
 800aad4:	f000 80ba 	beq.w	800ac4c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aadc:	2b02      	cmp	r3, #2
 800aade:	f040 8095 	bne.w	800ac0c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aae2:	4b57      	ldr	r3, [pc, #348]	@ (800ac40 <HAL_RCC_OscConfig+0x6c4>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	4a56      	ldr	r2, [pc, #344]	@ (800ac40 <HAL_RCC_OscConfig+0x6c4>)
 800aae8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800aaec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aaee:	f7f9 fa95 	bl	800401c <HAL_GetTick>
 800aaf2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aaf4:	e008      	b.n	800ab08 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aaf6:	f7f9 fa91 	bl	800401c <HAL_GetTick>
 800aafa:	4602      	mov	r2, r0
 800aafc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aafe:	1ad3      	subs	r3, r2, r3
 800ab00:	2b02      	cmp	r3, #2
 800ab02:	d901      	bls.n	800ab08 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800ab04:	2303      	movs	r3, #3
 800ab06:	e10b      	b.n	800ad20 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ab08:	4b4d      	ldr	r3, [pc, #308]	@ (800ac40 <HAL_RCC_OscConfig+0x6c4>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d1f0      	bne.n	800aaf6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ab14:	4b4a      	ldr	r3, [pc, #296]	@ (800ac40 <HAL_RCC_OscConfig+0x6c4>)
 800ab16:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ab18:	4b4a      	ldr	r3, [pc, #296]	@ (800ac44 <HAL_RCC_OscConfig+0x6c8>)
 800ab1a:	4013      	ands	r3, r2
 800ab1c:	687a      	ldr	r2, [r7, #4]
 800ab1e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800ab20:	687a      	ldr	r2, [r7, #4]
 800ab22:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800ab24:	0112      	lsls	r2, r2, #4
 800ab26:	430a      	orrs	r2, r1
 800ab28:	4945      	ldr	r1, [pc, #276]	@ (800ac40 <HAL_RCC_OscConfig+0x6c4>)
 800ab2a:	4313      	orrs	r3, r2
 800ab2c:	628b      	str	r3, [r1, #40]	@ 0x28
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab32:	3b01      	subs	r3, #1
 800ab34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab3c:	3b01      	subs	r3, #1
 800ab3e:	025b      	lsls	r3, r3, #9
 800ab40:	b29b      	uxth	r3, r3
 800ab42:	431a      	orrs	r2, r3
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab48:	3b01      	subs	r3, #1
 800ab4a:	041b      	lsls	r3, r3, #16
 800ab4c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ab50:	431a      	orrs	r2, r3
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab56:	3b01      	subs	r3, #1
 800ab58:	061b      	lsls	r3, r3, #24
 800ab5a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ab5e:	4938      	ldr	r1, [pc, #224]	@ (800ac40 <HAL_RCC_OscConfig+0x6c4>)
 800ab60:	4313      	orrs	r3, r2
 800ab62:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800ab64:	4b36      	ldr	r3, [pc, #216]	@ (800ac40 <HAL_RCC_OscConfig+0x6c4>)
 800ab66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab68:	4a35      	ldr	r2, [pc, #212]	@ (800ac40 <HAL_RCC_OscConfig+0x6c4>)
 800ab6a:	f023 0301 	bic.w	r3, r3, #1
 800ab6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ab70:	4b33      	ldr	r3, [pc, #204]	@ (800ac40 <HAL_RCC_OscConfig+0x6c4>)
 800ab72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ab74:	4b34      	ldr	r3, [pc, #208]	@ (800ac48 <HAL_RCC_OscConfig+0x6cc>)
 800ab76:	4013      	ands	r3, r2
 800ab78:	687a      	ldr	r2, [r7, #4]
 800ab7a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ab7c:	00d2      	lsls	r2, r2, #3
 800ab7e:	4930      	ldr	r1, [pc, #192]	@ (800ac40 <HAL_RCC_OscConfig+0x6c4>)
 800ab80:	4313      	orrs	r3, r2
 800ab82:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ab84:	4b2e      	ldr	r3, [pc, #184]	@ (800ac40 <HAL_RCC_OscConfig+0x6c4>)
 800ab86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab88:	f023 020c 	bic.w	r2, r3, #12
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab90:	492b      	ldr	r1, [pc, #172]	@ (800ac40 <HAL_RCC_OscConfig+0x6c4>)
 800ab92:	4313      	orrs	r3, r2
 800ab94:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ab96:	4b2a      	ldr	r3, [pc, #168]	@ (800ac40 <HAL_RCC_OscConfig+0x6c4>)
 800ab98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab9a:	f023 0202 	bic.w	r2, r3, #2
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aba2:	4927      	ldr	r1, [pc, #156]	@ (800ac40 <HAL_RCC_OscConfig+0x6c4>)
 800aba4:	4313      	orrs	r3, r2
 800aba6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800aba8:	4b25      	ldr	r3, [pc, #148]	@ (800ac40 <HAL_RCC_OscConfig+0x6c4>)
 800abaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abac:	4a24      	ldr	r2, [pc, #144]	@ (800ac40 <HAL_RCC_OscConfig+0x6c4>)
 800abae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800abb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abb4:	4b22      	ldr	r3, [pc, #136]	@ (800ac40 <HAL_RCC_OscConfig+0x6c4>)
 800abb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abb8:	4a21      	ldr	r2, [pc, #132]	@ (800ac40 <HAL_RCC_OscConfig+0x6c4>)
 800abba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800abbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800abc0:	4b1f      	ldr	r3, [pc, #124]	@ (800ac40 <HAL_RCC_OscConfig+0x6c4>)
 800abc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abc4:	4a1e      	ldr	r2, [pc, #120]	@ (800ac40 <HAL_RCC_OscConfig+0x6c4>)
 800abc6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800abca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800abcc:	4b1c      	ldr	r3, [pc, #112]	@ (800ac40 <HAL_RCC_OscConfig+0x6c4>)
 800abce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abd0:	4a1b      	ldr	r2, [pc, #108]	@ (800ac40 <HAL_RCC_OscConfig+0x6c4>)
 800abd2:	f043 0301 	orr.w	r3, r3, #1
 800abd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800abd8:	4b19      	ldr	r3, [pc, #100]	@ (800ac40 <HAL_RCC_OscConfig+0x6c4>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	4a18      	ldr	r2, [pc, #96]	@ (800ac40 <HAL_RCC_OscConfig+0x6c4>)
 800abde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800abe2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abe4:	f7f9 fa1a 	bl	800401c <HAL_GetTick>
 800abe8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800abea:	e008      	b.n	800abfe <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800abec:	f7f9 fa16 	bl	800401c <HAL_GetTick>
 800abf0:	4602      	mov	r2, r0
 800abf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abf4:	1ad3      	subs	r3, r2, r3
 800abf6:	2b02      	cmp	r3, #2
 800abf8:	d901      	bls.n	800abfe <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800abfa:	2303      	movs	r3, #3
 800abfc:	e090      	b.n	800ad20 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800abfe:	4b10      	ldr	r3, [pc, #64]	@ (800ac40 <HAL_RCC_OscConfig+0x6c4>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d0f0      	beq.n	800abec <HAL_RCC_OscConfig+0x670>
 800ac0a:	e088      	b.n	800ad1e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac0c:	4b0c      	ldr	r3, [pc, #48]	@ (800ac40 <HAL_RCC_OscConfig+0x6c4>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	4a0b      	ldr	r2, [pc, #44]	@ (800ac40 <HAL_RCC_OscConfig+0x6c4>)
 800ac12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ac16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac18:	f7f9 fa00 	bl	800401c <HAL_GetTick>
 800ac1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ac1e:	e008      	b.n	800ac32 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac20:	f7f9 f9fc 	bl	800401c <HAL_GetTick>
 800ac24:	4602      	mov	r2, r0
 800ac26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac28:	1ad3      	subs	r3, r2, r3
 800ac2a:	2b02      	cmp	r3, #2
 800ac2c:	d901      	bls.n	800ac32 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800ac2e:	2303      	movs	r3, #3
 800ac30:	e076      	b.n	800ad20 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ac32:	4b03      	ldr	r3, [pc, #12]	@ (800ac40 <HAL_RCC_OscConfig+0x6c4>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d1f0      	bne.n	800ac20 <HAL_RCC_OscConfig+0x6a4>
 800ac3e:	e06e      	b.n	800ad1e <HAL_RCC_OscConfig+0x7a2>
 800ac40:	58024400 	.word	0x58024400
 800ac44:	fffffc0c 	.word	0xfffffc0c
 800ac48:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ac4c:	4b36      	ldr	r3, [pc, #216]	@ (800ad28 <HAL_RCC_OscConfig+0x7ac>)
 800ac4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac50:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ac52:	4b35      	ldr	r3, [pc, #212]	@ (800ad28 <HAL_RCC_OscConfig+0x7ac>)
 800ac54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac56:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac5c:	2b01      	cmp	r3, #1
 800ac5e:	d031      	beq.n	800acc4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	f003 0203 	and.w	r2, r3, #3
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ac6a:	429a      	cmp	r2, r3
 800ac6c:	d12a      	bne.n	800acc4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	091b      	lsrs	r3, r3, #4
 800ac72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	d122      	bne.n	800acc4 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac88:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d11a      	bne.n	800acc4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	0a5b      	lsrs	r3, r3, #9
 800ac92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac9a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ac9c:	429a      	cmp	r2, r3
 800ac9e:	d111      	bne.n	800acc4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	0c1b      	lsrs	r3, r3, #16
 800aca4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800acae:	429a      	cmp	r2, r3
 800acb0:	d108      	bne.n	800acc4 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	0e1b      	lsrs	r3, r3, #24
 800acb6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acbe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800acc0:	429a      	cmp	r2, r3
 800acc2:	d001      	beq.n	800acc8 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800acc4:	2301      	movs	r3, #1
 800acc6:	e02b      	b.n	800ad20 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800acc8:	4b17      	ldr	r3, [pc, #92]	@ (800ad28 <HAL_RCC_OscConfig+0x7ac>)
 800acca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800accc:	08db      	lsrs	r3, r3, #3
 800acce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800acd2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800acd8:	693a      	ldr	r2, [r7, #16]
 800acda:	429a      	cmp	r2, r3
 800acdc:	d01f      	beq.n	800ad1e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800acde:	4b12      	ldr	r3, [pc, #72]	@ (800ad28 <HAL_RCC_OscConfig+0x7ac>)
 800ace0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ace2:	4a11      	ldr	r2, [pc, #68]	@ (800ad28 <HAL_RCC_OscConfig+0x7ac>)
 800ace4:	f023 0301 	bic.w	r3, r3, #1
 800ace8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800acea:	f7f9 f997 	bl	800401c <HAL_GetTick>
 800acee:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800acf0:	bf00      	nop
 800acf2:	f7f9 f993 	bl	800401c <HAL_GetTick>
 800acf6:	4602      	mov	r2, r0
 800acf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d0f9      	beq.n	800acf2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800acfe:	4b0a      	ldr	r3, [pc, #40]	@ (800ad28 <HAL_RCC_OscConfig+0x7ac>)
 800ad00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ad02:	4b0a      	ldr	r3, [pc, #40]	@ (800ad2c <HAL_RCC_OscConfig+0x7b0>)
 800ad04:	4013      	ands	r3, r2
 800ad06:	687a      	ldr	r2, [r7, #4]
 800ad08:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ad0a:	00d2      	lsls	r2, r2, #3
 800ad0c:	4906      	ldr	r1, [pc, #24]	@ (800ad28 <HAL_RCC_OscConfig+0x7ac>)
 800ad0e:	4313      	orrs	r3, r2
 800ad10:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800ad12:	4b05      	ldr	r3, [pc, #20]	@ (800ad28 <HAL_RCC_OscConfig+0x7ac>)
 800ad14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad16:	4a04      	ldr	r2, [pc, #16]	@ (800ad28 <HAL_RCC_OscConfig+0x7ac>)
 800ad18:	f043 0301 	orr.w	r3, r3, #1
 800ad1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800ad1e:	2300      	movs	r3, #0
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3730      	adds	r7, #48	@ 0x30
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}
 800ad28:	58024400 	.word	0x58024400
 800ad2c:	ffff0007 	.word	0xffff0007

0800ad30 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b086      	sub	sp, #24
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
 800ad38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d101      	bne.n	800ad44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ad40:	2301      	movs	r3, #1
 800ad42:	e19c      	b.n	800b07e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ad44:	4b8a      	ldr	r3, [pc, #552]	@ (800af70 <HAL_RCC_ClockConfig+0x240>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f003 030f 	and.w	r3, r3, #15
 800ad4c:	683a      	ldr	r2, [r7, #0]
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d910      	bls.n	800ad74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad52:	4b87      	ldr	r3, [pc, #540]	@ (800af70 <HAL_RCC_ClockConfig+0x240>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f023 020f 	bic.w	r2, r3, #15
 800ad5a:	4985      	ldr	r1, [pc, #532]	@ (800af70 <HAL_RCC_ClockConfig+0x240>)
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	4313      	orrs	r3, r2
 800ad60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad62:	4b83      	ldr	r3, [pc, #524]	@ (800af70 <HAL_RCC_ClockConfig+0x240>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f003 030f 	and.w	r3, r3, #15
 800ad6a:	683a      	ldr	r2, [r7, #0]
 800ad6c:	429a      	cmp	r2, r3
 800ad6e:	d001      	beq.n	800ad74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ad70:	2301      	movs	r3, #1
 800ad72:	e184      	b.n	800b07e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f003 0304 	and.w	r3, r3, #4
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d010      	beq.n	800ada2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	691a      	ldr	r2, [r3, #16]
 800ad84:	4b7b      	ldr	r3, [pc, #492]	@ (800af74 <HAL_RCC_ClockConfig+0x244>)
 800ad86:	699b      	ldr	r3, [r3, #24]
 800ad88:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ad8c:	429a      	cmp	r2, r3
 800ad8e:	d908      	bls.n	800ada2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ad90:	4b78      	ldr	r3, [pc, #480]	@ (800af74 <HAL_RCC_ClockConfig+0x244>)
 800ad92:	699b      	ldr	r3, [r3, #24]
 800ad94:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	691b      	ldr	r3, [r3, #16]
 800ad9c:	4975      	ldr	r1, [pc, #468]	@ (800af74 <HAL_RCC_ClockConfig+0x244>)
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f003 0308 	and.w	r3, r3, #8
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d010      	beq.n	800add0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	695a      	ldr	r2, [r3, #20]
 800adb2:	4b70      	ldr	r3, [pc, #448]	@ (800af74 <HAL_RCC_ClockConfig+0x244>)
 800adb4:	69db      	ldr	r3, [r3, #28]
 800adb6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800adba:	429a      	cmp	r2, r3
 800adbc:	d908      	bls.n	800add0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800adbe:	4b6d      	ldr	r3, [pc, #436]	@ (800af74 <HAL_RCC_ClockConfig+0x244>)
 800adc0:	69db      	ldr	r3, [r3, #28]
 800adc2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	695b      	ldr	r3, [r3, #20]
 800adca:	496a      	ldr	r1, [pc, #424]	@ (800af74 <HAL_RCC_ClockConfig+0x244>)
 800adcc:	4313      	orrs	r3, r2
 800adce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f003 0310 	and.w	r3, r3, #16
 800add8:	2b00      	cmp	r3, #0
 800adda:	d010      	beq.n	800adfe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	699a      	ldr	r2, [r3, #24]
 800ade0:	4b64      	ldr	r3, [pc, #400]	@ (800af74 <HAL_RCC_ClockConfig+0x244>)
 800ade2:	69db      	ldr	r3, [r3, #28]
 800ade4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ade8:	429a      	cmp	r2, r3
 800adea:	d908      	bls.n	800adfe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800adec:	4b61      	ldr	r3, [pc, #388]	@ (800af74 <HAL_RCC_ClockConfig+0x244>)
 800adee:	69db      	ldr	r3, [r3, #28]
 800adf0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	699b      	ldr	r3, [r3, #24]
 800adf8:	495e      	ldr	r1, [pc, #376]	@ (800af74 <HAL_RCC_ClockConfig+0x244>)
 800adfa:	4313      	orrs	r3, r2
 800adfc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f003 0320 	and.w	r3, r3, #32
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d010      	beq.n	800ae2c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	69da      	ldr	r2, [r3, #28]
 800ae0e:	4b59      	ldr	r3, [pc, #356]	@ (800af74 <HAL_RCC_ClockConfig+0x244>)
 800ae10:	6a1b      	ldr	r3, [r3, #32]
 800ae12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ae16:	429a      	cmp	r2, r3
 800ae18:	d908      	bls.n	800ae2c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ae1a:	4b56      	ldr	r3, [pc, #344]	@ (800af74 <HAL_RCC_ClockConfig+0x244>)
 800ae1c:	6a1b      	ldr	r3, [r3, #32]
 800ae1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	69db      	ldr	r3, [r3, #28]
 800ae26:	4953      	ldr	r1, [pc, #332]	@ (800af74 <HAL_RCC_ClockConfig+0x244>)
 800ae28:	4313      	orrs	r3, r2
 800ae2a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f003 0302 	and.w	r3, r3, #2
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d010      	beq.n	800ae5a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	68da      	ldr	r2, [r3, #12]
 800ae3c:	4b4d      	ldr	r3, [pc, #308]	@ (800af74 <HAL_RCC_ClockConfig+0x244>)
 800ae3e:	699b      	ldr	r3, [r3, #24]
 800ae40:	f003 030f 	and.w	r3, r3, #15
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d908      	bls.n	800ae5a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ae48:	4b4a      	ldr	r3, [pc, #296]	@ (800af74 <HAL_RCC_ClockConfig+0x244>)
 800ae4a:	699b      	ldr	r3, [r3, #24]
 800ae4c:	f023 020f 	bic.w	r2, r3, #15
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	68db      	ldr	r3, [r3, #12]
 800ae54:	4947      	ldr	r1, [pc, #284]	@ (800af74 <HAL_RCC_ClockConfig+0x244>)
 800ae56:	4313      	orrs	r3, r2
 800ae58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f003 0301 	and.w	r3, r3, #1
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d055      	beq.n	800af12 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800ae66:	4b43      	ldr	r3, [pc, #268]	@ (800af74 <HAL_RCC_ClockConfig+0x244>)
 800ae68:	699b      	ldr	r3, [r3, #24]
 800ae6a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	689b      	ldr	r3, [r3, #8]
 800ae72:	4940      	ldr	r1, [pc, #256]	@ (800af74 <HAL_RCC_ClockConfig+0x244>)
 800ae74:	4313      	orrs	r3, r2
 800ae76:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	685b      	ldr	r3, [r3, #4]
 800ae7c:	2b02      	cmp	r3, #2
 800ae7e:	d107      	bne.n	800ae90 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ae80:	4b3c      	ldr	r3, [pc, #240]	@ (800af74 <HAL_RCC_ClockConfig+0x244>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d121      	bne.n	800aed0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	e0f6      	b.n	800b07e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	2b03      	cmp	r3, #3
 800ae96:	d107      	bne.n	800aea8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ae98:	4b36      	ldr	r3, [pc, #216]	@ (800af74 <HAL_RCC_ClockConfig+0x244>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d115      	bne.n	800aed0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aea4:	2301      	movs	r3, #1
 800aea6:	e0ea      	b.n	800b07e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	685b      	ldr	r3, [r3, #4]
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d107      	bne.n	800aec0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aeb0:	4b30      	ldr	r3, [pc, #192]	@ (800af74 <HAL_RCC_ClockConfig+0x244>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d109      	bne.n	800aed0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aebc:	2301      	movs	r3, #1
 800aebe:	e0de      	b.n	800b07e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aec0:	4b2c      	ldr	r3, [pc, #176]	@ (800af74 <HAL_RCC_ClockConfig+0x244>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f003 0304 	and.w	r3, r3, #4
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d101      	bne.n	800aed0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aecc:	2301      	movs	r3, #1
 800aece:	e0d6      	b.n	800b07e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800aed0:	4b28      	ldr	r3, [pc, #160]	@ (800af74 <HAL_RCC_ClockConfig+0x244>)
 800aed2:	691b      	ldr	r3, [r3, #16]
 800aed4:	f023 0207 	bic.w	r2, r3, #7
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	685b      	ldr	r3, [r3, #4]
 800aedc:	4925      	ldr	r1, [pc, #148]	@ (800af74 <HAL_RCC_ClockConfig+0x244>)
 800aede:	4313      	orrs	r3, r2
 800aee0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aee2:	f7f9 f89b 	bl	800401c <HAL_GetTick>
 800aee6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aee8:	e00a      	b.n	800af00 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aeea:	f7f9 f897 	bl	800401c <HAL_GetTick>
 800aeee:	4602      	mov	r2, r0
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	1ad3      	subs	r3, r2, r3
 800aef4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d901      	bls.n	800af00 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800aefc:	2303      	movs	r3, #3
 800aefe:	e0be      	b.n	800b07e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800af00:	4b1c      	ldr	r3, [pc, #112]	@ (800af74 <HAL_RCC_ClockConfig+0x244>)
 800af02:	691b      	ldr	r3, [r3, #16]
 800af04:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	685b      	ldr	r3, [r3, #4]
 800af0c:	00db      	lsls	r3, r3, #3
 800af0e:	429a      	cmp	r2, r3
 800af10:	d1eb      	bne.n	800aeea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f003 0302 	and.w	r3, r3, #2
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d010      	beq.n	800af40 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	68da      	ldr	r2, [r3, #12]
 800af22:	4b14      	ldr	r3, [pc, #80]	@ (800af74 <HAL_RCC_ClockConfig+0x244>)
 800af24:	699b      	ldr	r3, [r3, #24]
 800af26:	f003 030f 	and.w	r3, r3, #15
 800af2a:	429a      	cmp	r2, r3
 800af2c:	d208      	bcs.n	800af40 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800af2e:	4b11      	ldr	r3, [pc, #68]	@ (800af74 <HAL_RCC_ClockConfig+0x244>)
 800af30:	699b      	ldr	r3, [r3, #24]
 800af32:	f023 020f 	bic.w	r2, r3, #15
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	68db      	ldr	r3, [r3, #12]
 800af3a:	490e      	ldr	r1, [pc, #56]	@ (800af74 <HAL_RCC_ClockConfig+0x244>)
 800af3c:	4313      	orrs	r3, r2
 800af3e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800af40:	4b0b      	ldr	r3, [pc, #44]	@ (800af70 <HAL_RCC_ClockConfig+0x240>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f003 030f 	and.w	r3, r3, #15
 800af48:	683a      	ldr	r2, [r7, #0]
 800af4a:	429a      	cmp	r2, r3
 800af4c:	d214      	bcs.n	800af78 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800af4e:	4b08      	ldr	r3, [pc, #32]	@ (800af70 <HAL_RCC_ClockConfig+0x240>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f023 020f 	bic.w	r2, r3, #15
 800af56:	4906      	ldr	r1, [pc, #24]	@ (800af70 <HAL_RCC_ClockConfig+0x240>)
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	4313      	orrs	r3, r2
 800af5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800af5e:	4b04      	ldr	r3, [pc, #16]	@ (800af70 <HAL_RCC_ClockConfig+0x240>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f003 030f 	and.w	r3, r3, #15
 800af66:	683a      	ldr	r2, [r7, #0]
 800af68:	429a      	cmp	r2, r3
 800af6a:	d005      	beq.n	800af78 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800af6c:	2301      	movs	r3, #1
 800af6e:	e086      	b.n	800b07e <HAL_RCC_ClockConfig+0x34e>
 800af70:	52002000 	.word	0x52002000
 800af74:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f003 0304 	and.w	r3, r3, #4
 800af80:	2b00      	cmp	r3, #0
 800af82:	d010      	beq.n	800afa6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	691a      	ldr	r2, [r3, #16]
 800af88:	4b3f      	ldr	r3, [pc, #252]	@ (800b088 <HAL_RCC_ClockConfig+0x358>)
 800af8a:	699b      	ldr	r3, [r3, #24]
 800af8c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800af90:	429a      	cmp	r2, r3
 800af92:	d208      	bcs.n	800afa6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800af94:	4b3c      	ldr	r3, [pc, #240]	@ (800b088 <HAL_RCC_ClockConfig+0x358>)
 800af96:	699b      	ldr	r3, [r3, #24]
 800af98:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	691b      	ldr	r3, [r3, #16]
 800afa0:	4939      	ldr	r1, [pc, #228]	@ (800b088 <HAL_RCC_ClockConfig+0x358>)
 800afa2:	4313      	orrs	r3, r2
 800afa4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f003 0308 	and.w	r3, r3, #8
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d010      	beq.n	800afd4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	695a      	ldr	r2, [r3, #20]
 800afb6:	4b34      	ldr	r3, [pc, #208]	@ (800b088 <HAL_RCC_ClockConfig+0x358>)
 800afb8:	69db      	ldr	r3, [r3, #28]
 800afba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800afbe:	429a      	cmp	r2, r3
 800afc0:	d208      	bcs.n	800afd4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800afc2:	4b31      	ldr	r3, [pc, #196]	@ (800b088 <HAL_RCC_ClockConfig+0x358>)
 800afc4:	69db      	ldr	r3, [r3, #28]
 800afc6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	695b      	ldr	r3, [r3, #20]
 800afce:	492e      	ldr	r1, [pc, #184]	@ (800b088 <HAL_RCC_ClockConfig+0x358>)
 800afd0:	4313      	orrs	r3, r2
 800afd2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f003 0310 	and.w	r3, r3, #16
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d010      	beq.n	800b002 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	699a      	ldr	r2, [r3, #24]
 800afe4:	4b28      	ldr	r3, [pc, #160]	@ (800b088 <HAL_RCC_ClockConfig+0x358>)
 800afe6:	69db      	ldr	r3, [r3, #28]
 800afe8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800afec:	429a      	cmp	r2, r3
 800afee:	d208      	bcs.n	800b002 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800aff0:	4b25      	ldr	r3, [pc, #148]	@ (800b088 <HAL_RCC_ClockConfig+0x358>)
 800aff2:	69db      	ldr	r3, [r3, #28]
 800aff4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	699b      	ldr	r3, [r3, #24]
 800affc:	4922      	ldr	r1, [pc, #136]	@ (800b088 <HAL_RCC_ClockConfig+0x358>)
 800affe:	4313      	orrs	r3, r2
 800b000:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f003 0320 	and.w	r3, r3, #32
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d010      	beq.n	800b030 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	69da      	ldr	r2, [r3, #28]
 800b012:	4b1d      	ldr	r3, [pc, #116]	@ (800b088 <HAL_RCC_ClockConfig+0x358>)
 800b014:	6a1b      	ldr	r3, [r3, #32]
 800b016:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d208      	bcs.n	800b030 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b01e:	4b1a      	ldr	r3, [pc, #104]	@ (800b088 <HAL_RCC_ClockConfig+0x358>)
 800b020:	6a1b      	ldr	r3, [r3, #32]
 800b022:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	69db      	ldr	r3, [r3, #28]
 800b02a:	4917      	ldr	r1, [pc, #92]	@ (800b088 <HAL_RCC_ClockConfig+0x358>)
 800b02c:	4313      	orrs	r3, r2
 800b02e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b030:	f000 f834 	bl	800b09c <HAL_RCC_GetSysClockFreq>
 800b034:	4602      	mov	r2, r0
 800b036:	4b14      	ldr	r3, [pc, #80]	@ (800b088 <HAL_RCC_ClockConfig+0x358>)
 800b038:	699b      	ldr	r3, [r3, #24]
 800b03a:	0a1b      	lsrs	r3, r3, #8
 800b03c:	f003 030f 	and.w	r3, r3, #15
 800b040:	4912      	ldr	r1, [pc, #72]	@ (800b08c <HAL_RCC_ClockConfig+0x35c>)
 800b042:	5ccb      	ldrb	r3, [r1, r3]
 800b044:	f003 031f 	and.w	r3, r3, #31
 800b048:	fa22 f303 	lsr.w	r3, r2, r3
 800b04c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b04e:	4b0e      	ldr	r3, [pc, #56]	@ (800b088 <HAL_RCC_ClockConfig+0x358>)
 800b050:	699b      	ldr	r3, [r3, #24]
 800b052:	f003 030f 	and.w	r3, r3, #15
 800b056:	4a0d      	ldr	r2, [pc, #52]	@ (800b08c <HAL_RCC_ClockConfig+0x35c>)
 800b058:	5cd3      	ldrb	r3, [r2, r3]
 800b05a:	f003 031f 	and.w	r3, r3, #31
 800b05e:	693a      	ldr	r2, [r7, #16]
 800b060:	fa22 f303 	lsr.w	r3, r2, r3
 800b064:	4a0a      	ldr	r2, [pc, #40]	@ (800b090 <HAL_RCC_ClockConfig+0x360>)
 800b066:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b068:	4a0a      	ldr	r2, [pc, #40]	@ (800b094 <HAL_RCC_ClockConfig+0x364>)
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b06e:	4b0a      	ldr	r3, [pc, #40]	@ (800b098 <HAL_RCC_ClockConfig+0x368>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	4618      	mov	r0, r3
 800b074:	f7f8 ff88 	bl	8003f88 <HAL_InitTick>
 800b078:	4603      	mov	r3, r0
 800b07a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b07c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b07e:	4618      	mov	r0, r3
 800b080:	3718      	adds	r7, #24
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}
 800b086:	bf00      	nop
 800b088:	58024400 	.word	0x58024400
 800b08c:	08011d78 	.word	0x08011d78
 800b090:	2400003c 	.word	0x2400003c
 800b094:	24000038 	.word	0x24000038
 800b098:	24000040 	.word	0x24000040

0800b09c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b09c:	b480      	push	{r7}
 800b09e:	b089      	sub	sp, #36	@ 0x24
 800b0a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b0a2:	4bb3      	ldr	r3, [pc, #716]	@ (800b370 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0a4:	691b      	ldr	r3, [r3, #16]
 800b0a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b0aa:	2b18      	cmp	r3, #24
 800b0ac:	f200 8155 	bhi.w	800b35a <HAL_RCC_GetSysClockFreq+0x2be>
 800b0b0:	a201      	add	r2, pc, #4	@ (adr r2, 800b0b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b0b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0b6:	bf00      	nop
 800b0b8:	0800b11d 	.word	0x0800b11d
 800b0bc:	0800b35b 	.word	0x0800b35b
 800b0c0:	0800b35b 	.word	0x0800b35b
 800b0c4:	0800b35b 	.word	0x0800b35b
 800b0c8:	0800b35b 	.word	0x0800b35b
 800b0cc:	0800b35b 	.word	0x0800b35b
 800b0d0:	0800b35b 	.word	0x0800b35b
 800b0d4:	0800b35b 	.word	0x0800b35b
 800b0d8:	0800b143 	.word	0x0800b143
 800b0dc:	0800b35b 	.word	0x0800b35b
 800b0e0:	0800b35b 	.word	0x0800b35b
 800b0e4:	0800b35b 	.word	0x0800b35b
 800b0e8:	0800b35b 	.word	0x0800b35b
 800b0ec:	0800b35b 	.word	0x0800b35b
 800b0f0:	0800b35b 	.word	0x0800b35b
 800b0f4:	0800b35b 	.word	0x0800b35b
 800b0f8:	0800b149 	.word	0x0800b149
 800b0fc:	0800b35b 	.word	0x0800b35b
 800b100:	0800b35b 	.word	0x0800b35b
 800b104:	0800b35b 	.word	0x0800b35b
 800b108:	0800b35b 	.word	0x0800b35b
 800b10c:	0800b35b 	.word	0x0800b35b
 800b110:	0800b35b 	.word	0x0800b35b
 800b114:	0800b35b 	.word	0x0800b35b
 800b118:	0800b14f 	.word	0x0800b14f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b11c:	4b94      	ldr	r3, [pc, #592]	@ (800b370 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	f003 0320 	and.w	r3, r3, #32
 800b124:	2b00      	cmp	r3, #0
 800b126:	d009      	beq.n	800b13c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b128:	4b91      	ldr	r3, [pc, #580]	@ (800b370 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	08db      	lsrs	r3, r3, #3
 800b12e:	f003 0303 	and.w	r3, r3, #3
 800b132:	4a90      	ldr	r2, [pc, #576]	@ (800b374 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b134:	fa22 f303 	lsr.w	r3, r2, r3
 800b138:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b13a:	e111      	b.n	800b360 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b13c:	4b8d      	ldr	r3, [pc, #564]	@ (800b374 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b13e:	61bb      	str	r3, [r7, #24]
      break;
 800b140:	e10e      	b.n	800b360 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b142:	4b8d      	ldr	r3, [pc, #564]	@ (800b378 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b144:	61bb      	str	r3, [r7, #24]
      break;
 800b146:	e10b      	b.n	800b360 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b148:	4b8c      	ldr	r3, [pc, #560]	@ (800b37c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b14a:	61bb      	str	r3, [r7, #24]
      break;
 800b14c:	e108      	b.n	800b360 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b14e:	4b88      	ldr	r3, [pc, #544]	@ (800b370 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b152:	f003 0303 	and.w	r3, r3, #3
 800b156:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b158:	4b85      	ldr	r3, [pc, #532]	@ (800b370 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b15a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b15c:	091b      	lsrs	r3, r3, #4
 800b15e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b162:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b164:	4b82      	ldr	r3, [pc, #520]	@ (800b370 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b168:	f003 0301 	and.w	r3, r3, #1
 800b16c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b16e:	4b80      	ldr	r3, [pc, #512]	@ (800b370 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b170:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b172:	08db      	lsrs	r3, r3, #3
 800b174:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b178:	68fa      	ldr	r2, [r7, #12]
 800b17a:	fb02 f303 	mul.w	r3, r2, r3
 800b17e:	ee07 3a90 	vmov	s15, r3
 800b182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b186:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b18a:	693b      	ldr	r3, [r7, #16]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	f000 80e1 	beq.w	800b354 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	2b02      	cmp	r3, #2
 800b196:	f000 8083 	beq.w	800b2a0 <HAL_RCC_GetSysClockFreq+0x204>
 800b19a:	697b      	ldr	r3, [r7, #20]
 800b19c:	2b02      	cmp	r3, #2
 800b19e:	f200 80a1 	bhi.w	800b2e4 <HAL_RCC_GetSysClockFreq+0x248>
 800b1a2:	697b      	ldr	r3, [r7, #20]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d003      	beq.n	800b1b0 <HAL_RCC_GetSysClockFreq+0x114>
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	2b01      	cmp	r3, #1
 800b1ac:	d056      	beq.n	800b25c <HAL_RCC_GetSysClockFreq+0x1c0>
 800b1ae:	e099      	b.n	800b2e4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b1b0:	4b6f      	ldr	r3, [pc, #444]	@ (800b370 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f003 0320 	and.w	r3, r3, #32
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d02d      	beq.n	800b218 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b1bc:	4b6c      	ldr	r3, [pc, #432]	@ (800b370 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	08db      	lsrs	r3, r3, #3
 800b1c2:	f003 0303 	and.w	r3, r3, #3
 800b1c6:	4a6b      	ldr	r2, [pc, #428]	@ (800b374 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b1c8:	fa22 f303 	lsr.w	r3, r2, r3
 800b1cc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	ee07 3a90 	vmov	s15, r3
 800b1d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1d8:	693b      	ldr	r3, [r7, #16]
 800b1da:	ee07 3a90 	vmov	s15, r3
 800b1de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1e6:	4b62      	ldr	r3, [pc, #392]	@ (800b370 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b1e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1ee:	ee07 3a90 	vmov	s15, r3
 800b1f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1f6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b1fa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800b380 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b1fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b206:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b20a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b20e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b212:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b216:	e087      	b.n	800b328 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	ee07 3a90 	vmov	s15, r3
 800b21e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b222:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800b384 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b22a:	4b51      	ldr	r3, [pc, #324]	@ (800b370 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b22c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b22e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b232:	ee07 3a90 	vmov	s15, r3
 800b236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b23a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b23e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800b380 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b24a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b24e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b252:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b256:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b25a:	e065      	b.n	800b328 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	ee07 3a90 	vmov	s15, r3
 800b262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b266:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800b388 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b26a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b26e:	4b40      	ldr	r3, [pc, #256]	@ (800b370 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b276:	ee07 3a90 	vmov	s15, r3
 800b27a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b27e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b282:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800b380 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b28a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b28e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b29a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b29e:	e043      	b.n	800b328 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	ee07 3a90 	vmov	s15, r3
 800b2a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2aa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800b38c <HAL_RCC_GetSysClockFreq+0x2f0>
 800b2ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2b2:	4b2f      	ldr	r3, [pc, #188]	@ (800b370 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2ba:	ee07 3a90 	vmov	s15, r3
 800b2be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2c2:	ed97 6a02 	vldr	s12, [r7, #8]
 800b2c6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800b380 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b2ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b2d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b2e2:	e021      	b.n	800b328 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	ee07 3a90 	vmov	s15, r3
 800b2ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2ee:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800b388 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b2f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2f6:	4b1e      	ldr	r3, [pc, #120]	@ (800b370 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2fe:	ee07 3a90 	vmov	s15, r3
 800b302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b306:	ed97 6a02 	vldr	s12, [r7, #8]
 800b30a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800b380 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b30e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b312:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b316:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b31a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b31e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b322:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b326:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b328:	4b11      	ldr	r3, [pc, #68]	@ (800b370 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b32a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b32c:	0a5b      	lsrs	r3, r3, #9
 800b32e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b332:	3301      	adds	r3, #1
 800b334:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	ee07 3a90 	vmov	s15, r3
 800b33c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b340:	edd7 6a07 	vldr	s13, [r7, #28]
 800b344:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b348:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b34c:	ee17 3a90 	vmov	r3, s15
 800b350:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b352:	e005      	b.n	800b360 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b354:	2300      	movs	r3, #0
 800b356:	61bb      	str	r3, [r7, #24]
      break;
 800b358:	e002      	b.n	800b360 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b35a:	4b07      	ldr	r3, [pc, #28]	@ (800b378 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b35c:	61bb      	str	r3, [r7, #24]
      break;
 800b35e:	bf00      	nop
  }

  return sysclockfreq;
 800b360:	69bb      	ldr	r3, [r7, #24]
}
 800b362:	4618      	mov	r0, r3
 800b364:	3724      	adds	r7, #36	@ 0x24
 800b366:	46bd      	mov	sp, r7
 800b368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36c:	4770      	bx	lr
 800b36e:	bf00      	nop
 800b370:	58024400 	.word	0x58024400
 800b374:	03d09000 	.word	0x03d09000
 800b378:	003d0900 	.word	0x003d0900
 800b37c:	007a1200 	.word	0x007a1200
 800b380:	46000000 	.word	0x46000000
 800b384:	4c742400 	.word	0x4c742400
 800b388:	4a742400 	.word	0x4a742400
 800b38c:	4af42400 	.word	0x4af42400

0800b390 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b082      	sub	sp, #8
 800b394:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b396:	f7ff fe81 	bl	800b09c <HAL_RCC_GetSysClockFreq>
 800b39a:	4602      	mov	r2, r0
 800b39c:	4b10      	ldr	r3, [pc, #64]	@ (800b3e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800b39e:	699b      	ldr	r3, [r3, #24]
 800b3a0:	0a1b      	lsrs	r3, r3, #8
 800b3a2:	f003 030f 	and.w	r3, r3, #15
 800b3a6:	490f      	ldr	r1, [pc, #60]	@ (800b3e4 <HAL_RCC_GetHCLKFreq+0x54>)
 800b3a8:	5ccb      	ldrb	r3, [r1, r3]
 800b3aa:	f003 031f 	and.w	r3, r3, #31
 800b3ae:	fa22 f303 	lsr.w	r3, r2, r3
 800b3b2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b3b4:	4b0a      	ldr	r3, [pc, #40]	@ (800b3e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800b3b6:	699b      	ldr	r3, [r3, #24]
 800b3b8:	f003 030f 	and.w	r3, r3, #15
 800b3bc:	4a09      	ldr	r2, [pc, #36]	@ (800b3e4 <HAL_RCC_GetHCLKFreq+0x54>)
 800b3be:	5cd3      	ldrb	r3, [r2, r3]
 800b3c0:	f003 031f 	and.w	r3, r3, #31
 800b3c4:	687a      	ldr	r2, [r7, #4]
 800b3c6:	fa22 f303 	lsr.w	r3, r2, r3
 800b3ca:	4a07      	ldr	r2, [pc, #28]	@ (800b3e8 <HAL_RCC_GetHCLKFreq+0x58>)
 800b3cc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b3ce:	4a07      	ldr	r2, [pc, #28]	@ (800b3ec <HAL_RCC_GetHCLKFreq+0x5c>)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b3d4:	4b04      	ldr	r3, [pc, #16]	@ (800b3e8 <HAL_RCC_GetHCLKFreq+0x58>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3708      	adds	r7, #8
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}
 800b3e0:	58024400 	.word	0x58024400
 800b3e4:	08011d78 	.word	0x08011d78
 800b3e8:	2400003c 	.word	0x2400003c
 800b3ec:	24000038 	.word	0x24000038

0800b3f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b3f4:	f7ff ffcc 	bl	800b390 <HAL_RCC_GetHCLKFreq>
 800b3f8:	4602      	mov	r2, r0
 800b3fa:	4b06      	ldr	r3, [pc, #24]	@ (800b414 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b3fc:	69db      	ldr	r3, [r3, #28]
 800b3fe:	091b      	lsrs	r3, r3, #4
 800b400:	f003 0307 	and.w	r3, r3, #7
 800b404:	4904      	ldr	r1, [pc, #16]	@ (800b418 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b406:	5ccb      	ldrb	r3, [r1, r3]
 800b408:	f003 031f 	and.w	r3, r3, #31
 800b40c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b410:	4618      	mov	r0, r3
 800b412:	bd80      	pop	{r7, pc}
 800b414:	58024400 	.word	0x58024400
 800b418:	08011d78 	.word	0x08011d78

0800b41c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b420:	f7ff ffb6 	bl	800b390 <HAL_RCC_GetHCLKFreq>
 800b424:	4602      	mov	r2, r0
 800b426:	4b06      	ldr	r3, [pc, #24]	@ (800b440 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b428:	69db      	ldr	r3, [r3, #28]
 800b42a:	0a1b      	lsrs	r3, r3, #8
 800b42c:	f003 0307 	and.w	r3, r3, #7
 800b430:	4904      	ldr	r1, [pc, #16]	@ (800b444 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b432:	5ccb      	ldrb	r3, [r1, r3]
 800b434:	f003 031f 	and.w	r3, r3, #31
 800b438:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	bd80      	pop	{r7, pc}
 800b440:	58024400 	.word	0x58024400
 800b444:	08011d78 	.word	0x08011d78

0800b448 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b448:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b44c:	b0c6      	sub	sp, #280	@ 0x118
 800b44e:	af00      	add	r7, sp, #0
 800b450:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b454:	2300      	movs	r3, #0
 800b456:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b45a:	2300      	movs	r3, #0
 800b45c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b460:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b468:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800b46c:	2500      	movs	r5, #0
 800b46e:	ea54 0305 	orrs.w	r3, r4, r5
 800b472:	d049      	beq.n	800b508 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b474:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b478:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b47a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b47e:	d02f      	beq.n	800b4e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b480:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b484:	d828      	bhi.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b486:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b48a:	d01a      	beq.n	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b48c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b490:	d822      	bhi.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b492:	2b00      	cmp	r3, #0
 800b494:	d003      	beq.n	800b49e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b496:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b49a:	d007      	beq.n	800b4ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b49c:	e01c      	b.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b49e:	4bab      	ldr	r3, [pc, #684]	@ (800b74c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b4a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4a2:	4aaa      	ldr	r2, [pc, #680]	@ (800b74c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b4a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b4a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b4aa:	e01a      	b.n	800b4e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b4ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4b0:	3308      	adds	r3, #8
 800b4b2:	2102      	movs	r1, #2
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f002 fa49 	bl	800d94c <RCCEx_PLL2_Config>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b4c0:	e00f      	b.n	800b4e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b4c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4c6:	3328      	adds	r3, #40	@ 0x28
 800b4c8:	2102      	movs	r1, #2
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f002 faf0 	bl	800dab0 <RCCEx_PLL3_Config>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b4d6:	e004      	b.n	800b4e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4d8:	2301      	movs	r3, #1
 800b4da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b4de:	e000      	b.n	800b4e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b4e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d10a      	bne.n	800b500 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b4ea:	4b98      	ldr	r3, [pc, #608]	@ (800b74c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b4ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4ee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b4f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b4f8:	4a94      	ldr	r2, [pc, #592]	@ (800b74c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b4fa:	430b      	orrs	r3, r1
 800b4fc:	6513      	str	r3, [r2, #80]	@ 0x50
 800b4fe:	e003      	b.n	800b508 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b500:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b504:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b510:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800b514:	f04f 0900 	mov.w	r9, #0
 800b518:	ea58 0309 	orrs.w	r3, r8, r9
 800b51c:	d047      	beq.n	800b5ae <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b51e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b524:	2b04      	cmp	r3, #4
 800b526:	d82a      	bhi.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b528:	a201      	add	r2, pc, #4	@ (adr r2, 800b530 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b52a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b52e:	bf00      	nop
 800b530:	0800b545 	.word	0x0800b545
 800b534:	0800b553 	.word	0x0800b553
 800b538:	0800b569 	.word	0x0800b569
 800b53c:	0800b587 	.word	0x0800b587
 800b540:	0800b587 	.word	0x0800b587
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b544:	4b81      	ldr	r3, [pc, #516]	@ (800b74c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b548:	4a80      	ldr	r2, [pc, #512]	@ (800b74c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b54a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b54e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b550:	e01a      	b.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b552:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b556:	3308      	adds	r3, #8
 800b558:	2100      	movs	r1, #0
 800b55a:	4618      	mov	r0, r3
 800b55c:	f002 f9f6 	bl	800d94c <RCCEx_PLL2_Config>
 800b560:	4603      	mov	r3, r0
 800b562:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b566:	e00f      	b.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b568:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b56c:	3328      	adds	r3, #40	@ 0x28
 800b56e:	2100      	movs	r1, #0
 800b570:	4618      	mov	r0, r3
 800b572:	f002 fa9d 	bl	800dab0 <RCCEx_PLL3_Config>
 800b576:	4603      	mov	r3, r0
 800b578:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b57c:	e004      	b.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b57e:	2301      	movs	r3, #1
 800b580:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b584:	e000      	b.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b586:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b588:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d10a      	bne.n	800b5a6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b590:	4b6e      	ldr	r3, [pc, #440]	@ (800b74c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b592:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b594:	f023 0107 	bic.w	r1, r3, #7
 800b598:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b59c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b59e:	4a6b      	ldr	r2, [pc, #428]	@ (800b74c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b5a0:	430b      	orrs	r3, r1
 800b5a2:	6513      	str	r3, [r2, #80]	@ 0x50
 800b5a4:	e003      	b.n	800b5ae <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b5aa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b5ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b6:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800b5ba:	f04f 0b00 	mov.w	fp, #0
 800b5be:	ea5a 030b 	orrs.w	r3, sl, fp
 800b5c2:	d05b      	beq.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b5c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b5cc:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800b5d0:	d03b      	beq.n	800b64a <HAL_RCCEx_PeriphCLKConfig+0x202>
 800b5d2:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800b5d6:	d834      	bhi.n	800b642 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b5d8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b5dc:	d037      	beq.n	800b64e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800b5de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b5e2:	d82e      	bhi.n	800b642 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b5e4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b5e8:	d033      	beq.n	800b652 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800b5ea:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b5ee:	d828      	bhi.n	800b642 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b5f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b5f4:	d01a      	beq.n	800b62c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800b5f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b5fa:	d822      	bhi.n	800b642 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d003      	beq.n	800b608 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800b600:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b604:	d007      	beq.n	800b616 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800b606:	e01c      	b.n	800b642 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b608:	4b50      	ldr	r3, [pc, #320]	@ (800b74c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b60a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b60c:	4a4f      	ldr	r2, [pc, #316]	@ (800b74c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b60e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b612:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b614:	e01e      	b.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b616:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b61a:	3308      	adds	r3, #8
 800b61c:	2100      	movs	r1, #0
 800b61e:	4618      	mov	r0, r3
 800b620:	f002 f994 	bl	800d94c <RCCEx_PLL2_Config>
 800b624:	4603      	mov	r3, r0
 800b626:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b62a:	e013      	b.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b62c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b630:	3328      	adds	r3, #40	@ 0x28
 800b632:	2100      	movs	r1, #0
 800b634:	4618      	mov	r0, r3
 800b636:	f002 fa3b 	bl	800dab0 <RCCEx_PLL3_Config>
 800b63a:	4603      	mov	r3, r0
 800b63c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b640:	e008      	b.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b642:	2301      	movs	r3, #1
 800b644:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b648:	e004      	b.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b64a:	bf00      	nop
 800b64c:	e002      	b.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b64e:	bf00      	nop
 800b650:	e000      	b.n	800b654 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b652:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b654:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d10b      	bne.n	800b674 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b65c:	4b3b      	ldr	r3, [pc, #236]	@ (800b74c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b65e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b660:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800b664:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b668:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b66c:	4a37      	ldr	r2, [pc, #220]	@ (800b74c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b66e:	430b      	orrs	r3, r1
 800b670:	6593      	str	r3, [r2, #88]	@ 0x58
 800b672:	e003      	b.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b674:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b678:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b67c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b680:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b684:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800b688:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b68c:	2300      	movs	r3, #0
 800b68e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b692:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800b696:	460b      	mov	r3, r1
 800b698:	4313      	orrs	r3, r2
 800b69a:	d05d      	beq.n	800b758 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b69c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6a0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b6a4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800b6a8:	d03b      	beq.n	800b722 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800b6aa:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800b6ae:	d834      	bhi.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b6b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b6b4:	d037      	beq.n	800b726 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800b6b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b6ba:	d82e      	bhi.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b6bc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b6c0:	d033      	beq.n	800b72a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800b6c2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b6c6:	d828      	bhi.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b6c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b6cc:	d01a      	beq.n	800b704 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800b6ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b6d2:	d822      	bhi.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d003      	beq.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800b6d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b6dc:	d007      	beq.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800b6de:	e01c      	b.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6e0:	4b1a      	ldr	r3, [pc, #104]	@ (800b74c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b6e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6e4:	4a19      	ldr	r2, [pc, #100]	@ (800b74c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b6e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b6ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b6ec:	e01e      	b.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b6ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6f2:	3308      	adds	r3, #8
 800b6f4:	2100      	movs	r1, #0
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f002 f928 	bl	800d94c <RCCEx_PLL2_Config>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b702:	e013      	b.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b704:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b708:	3328      	adds	r3, #40	@ 0x28
 800b70a:	2100      	movs	r1, #0
 800b70c:	4618      	mov	r0, r3
 800b70e:	f002 f9cf 	bl	800dab0 <RCCEx_PLL3_Config>
 800b712:	4603      	mov	r3, r0
 800b714:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b718:	e008      	b.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b71a:	2301      	movs	r3, #1
 800b71c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b720:	e004      	b.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b722:	bf00      	nop
 800b724:	e002      	b.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b726:	bf00      	nop
 800b728:	e000      	b.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b72a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b72c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b730:	2b00      	cmp	r3, #0
 800b732:	d10d      	bne.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b734:	4b05      	ldr	r3, [pc, #20]	@ (800b74c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b738:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800b73c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b740:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b744:	4a01      	ldr	r2, [pc, #4]	@ (800b74c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b746:	430b      	orrs	r3, r1
 800b748:	6593      	str	r3, [r2, #88]	@ 0x58
 800b74a:	e005      	b.n	800b758 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800b74c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b750:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b754:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b758:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b760:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800b764:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b768:	2300      	movs	r3, #0
 800b76a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b76e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800b772:	460b      	mov	r3, r1
 800b774:	4313      	orrs	r3, r2
 800b776:	d03a      	beq.n	800b7ee <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800b778:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b77c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b77e:	2b30      	cmp	r3, #48	@ 0x30
 800b780:	d01f      	beq.n	800b7c2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800b782:	2b30      	cmp	r3, #48	@ 0x30
 800b784:	d819      	bhi.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0x372>
 800b786:	2b20      	cmp	r3, #32
 800b788:	d00c      	beq.n	800b7a4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800b78a:	2b20      	cmp	r3, #32
 800b78c:	d815      	bhi.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0x372>
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d019      	beq.n	800b7c6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b792:	2b10      	cmp	r3, #16
 800b794:	d111      	bne.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b796:	4baa      	ldr	r3, [pc, #680]	@ (800ba40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b79a:	4aa9      	ldr	r2, [pc, #676]	@ (800ba40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b79c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b7a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b7a2:	e011      	b.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b7a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7a8:	3308      	adds	r3, #8
 800b7aa:	2102      	movs	r1, #2
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f002 f8cd 	bl	800d94c <RCCEx_PLL2_Config>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b7b8:	e006      	b.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b7c0:	e002      	b.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800b7c2:	bf00      	nop
 800b7c4:	e000      	b.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800b7c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d10a      	bne.n	800b7e6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b7d0:	4b9b      	ldr	r3, [pc, #620]	@ (800ba40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b7d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b7d4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800b7d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b7de:	4a98      	ldr	r2, [pc, #608]	@ (800ba40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b7e0:	430b      	orrs	r3, r1
 800b7e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b7e4:	e003      	b.n	800b7ee <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b7ea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b7ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800b7fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b7fe:	2300      	movs	r3, #0
 800b800:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b804:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800b808:	460b      	mov	r3, r1
 800b80a:	4313      	orrs	r3, r2
 800b80c:	d051      	beq.n	800b8b2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b80e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b814:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b818:	d035      	beq.n	800b886 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800b81a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b81e:	d82e      	bhi.n	800b87e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b820:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b824:	d031      	beq.n	800b88a <HAL_RCCEx_PeriphCLKConfig+0x442>
 800b826:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b82a:	d828      	bhi.n	800b87e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b82c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b830:	d01a      	beq.n	800b868 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800b832:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b836:	d822      	bhi.n	800b87e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d003      	beq.n	800b844 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800b83c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b840:	d007      	beq.n	800b852 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800b842:	e01c      	b.n	800b87e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b844:	4b7e      	ldr	r3, [pc, #504]	@ (800ba40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b848:	4a7d      	ldr	r2, [pc, #500]	@ (800ba40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b84a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b84e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b850:	e01c      	b.n	800b88c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b852:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b856:	3308      	adds	r3, #8
 800b858:	2100      	movs	r1, #0
 800b85a:	4618      	mov	r0, r3
 800b85c:	f002 f876 	bl	800d94c <RCCEx_PLL2_Config>
 800b860:	4603      	mov	r3, r0
 800b862:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b866:	e011      	b.n	800b88c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b868:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b86c:	3328      	adds	r3, #40	@ 0x28
 800b86e:	2100      	movs	r1, #0
 800b870:	4618      	mov	r0, r3
 800b872:	f002 f91d 	bl	800dab0 <RCCEx_PLL3_Config>
 800b876:	4603      	mov	r3, r0
 800b878:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b87c:	e006      	b.n	800b88c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b87e:	2301      	movs	r3, #1
 800b880:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b884:	e002      	b.n	800b88c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800b886:	bf00      	nop
 800b888:	e000      	b.n	800b88c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800b88a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b88c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b890:	2b00      	cmp	r3, #0
 800b892:	d10a      	bne.n	800b8aa <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b894:	4b6a      	ldr	r3, [pc, #424]	@ (800ba40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b896:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b898:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800b89c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b8a2:	4a67      	ldr	r2, [pc, #412]	@ (800ba40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b8a4:	430b      	orrs	r3, r1
 800b8a6:	6513      	str	r3, [r2, #80]	@ 0x50
 800b8a8:	e003      	b.n	800b8b2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b8ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b8b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ba:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800b8be:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b8c8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800b8cc:	460b      	mov	r3, r1
 800b8ce:	4313      	orrs	r3, r2
 800b8d0:	d053      	beq.n	800b97a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b8d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b8d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b8dc:	d033      	beq.n	800b946 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800b8de:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b8e2:	d82c      	bhi.n	800b93e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b8e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b8e8:	d02f      	beq.n	800b94a <HAL_RCCEx_PeriphCLKConfig+0x502>
 800b8ea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b8ee:	d826      	bhi.n	800b93e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b8f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b8f4:	d02b      	beq.n	800b94e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800b8f6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b8fa:	d820      	bhi.n	800b93e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b8fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b900:	d012      	beq.n	800b928 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800b902:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b906:	d81a      	bhi.n	800b93e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d022      	beq.n	800b952 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800b90c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b910:	d115      	bne.n	800b93e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b912:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b916:	3308      	adds	r3, #8
 800b918:	2101      	movs	r1, #1
 800b91a:	4618      	mov	r0, r3
 800b91c:	f002 f816 	bl	800d94c <RCCEx_PLL2_Config>
 800b920:	4603      	mov	r3, r0
 800b922:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b926:	e015      	b.n	800b954 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b928:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b92c:	3328      	adds	r3, #40	@ 0x28
 800b92e:	2101      	movs	r1, #1
 800b930:	4618      	mov	r0, r3
 800b932:	f002 f8bd 	bl	800dab0 <RCCEx_PLL3_Config>
 800b936:	4603      	mov	r3, r0
 800b938:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b93c:	e00a      	b.n	800b954 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b93e:	2301      	movs	r3, #1
 800b940:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b944:	e006      	b.n	800b954 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b946:	bf00      	nop
 800b948:	e004      	b.n	800b954 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b94a:	bf00      	nop
 800b94c:	e002      	b.n	800b954 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b94e:	bf00      	nop
 800b950:	e000      	b.n	800b954 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b952:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b954:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d10a      	bne.n	800b972 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b95c:	4b38      	ldr	r3, [pc, #224]	@ (800ba40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b95e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b960:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800b964:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b968:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b96a:	4a35      	ldr	r2, [pc, #212]	@ (800ba40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b96c:	430b      	orrs	r3, r1
 800b96e:	6513      	str	r3, [r2, #80]	@ 0x50
 800b970:	e003      	b.n	800b97a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b972:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b976:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b97a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b982:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800b986:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b98a:	2300      	movs	r3, #0
 800b98c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b990:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800b994:	460b      	mov	r3, r1
 800b996:	4313      	orrs	r3, r2
 800b998:	d058      	beq.n	800ba4c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b99a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b99e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800b9a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b9a6:	d033      	beq.n	800ba10 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800b9a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b9ac:	d82c      	bhi.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b9ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9b2:	d02f      	beq.n	800ba14 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800b9b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9b8:	d826      	bhi.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b9ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b9be:	d02b      	beq.n	800ba18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800b9c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b9c4:	d820      	bhi.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b9c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b9ca:	d012      	beq.n	800b9f2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800b9cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b9d0:	d81a      	bhi.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d022      	beq.n	800ba1c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b9d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b9da:	d115      	bne.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b9dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9e0:	3308      	adds	r3, #8
 800b9e2:	2101      	movs	r1, #1
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f001 ffb1 	bl	800d94c <RCCEx_PLL2_Config>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b9f0:	e015      	b.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b9f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9f6:	3328      	adds	r3, #40	@ 0x28
 800b9f8:	2101      	movs	r1, #1
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f002 f858 	bl	800dab0 <RCCEx_PLL3_Config>
 800ba00:	4603      	mov	r3, r0
 800ba02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ba06:	e00a      	b.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800ba08:	2301      	movs	r3, #1
 800ba0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ba0e:	e006      	b.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ba10:	bf00      	nop
 800ba12:	e004      	b.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ba14:	bf00      	nop
 800ba16:	e002      	b.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ba18:	bf00      	nop
 800ba1a:	e000      	b.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ba1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba1e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d10e      	bne.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ba26:	4b06      	ldr	r3, [pc, #24]	@ (800ba40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba2a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800ba2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba32:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ba36:	4a02      	ldr	r2, [pc, #8]	@ (800ba40 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba38:	430b      	orrs	r3, r1
 800ba3a:	6593      	str	r3, [r2, #88]	@ 0x58
 800ba3c:	e006      	b.n	800ba4c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800ba3e:	bf00      	nop
 800ba40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ba48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ba4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba54:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800ba58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ba62:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800ba66:	460b      	mov	r3, r1
 800ba68:	4313      	orrs	r3, r2
 800ba6a:	d037      	beq.n	800badc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800ba6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba76:	d00e      	beq.n	800ba96 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800ba78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ba7c:	d816      	bhi.n	800baac <HAL_RCCEx_PeriphCLKConfig+0x664>
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d018      	beq.n	800bab4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800ba82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ba86:	d111      	bne.n	800baac <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba88:	4bc4      	ldr	r3, [pc, #784]	@ (800bd9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba8c:	4ac3      	ldr	r2, [pc, #780]	@ (800bd9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ba92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ba94:	e00f      	b.n	800bab6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ba96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba9a:	3308      	adds	r3, #8
 800ba9c:	2101      	movs	r1, #1
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f001 ff54 	bl	800d94c <RCCEx_PLL2_Config>
 800baa4:	4603      	mov	r3, r0
 800baa6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800baaa:	e004      	b.n	800bab6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800baac:	2301      	movs	r3, #1
 800baae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bab2:	e000      	b.n	800bab6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800bab4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bab6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800baba:	2b00      	cmp	r3, #0
 800babc:	d10a      	bne.n	800bad4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800babe:	4bb7      	ldr	r3, [pc, #732]	@ (800bd9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bac0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bac2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800bac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800baca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bacc:	4ab3      	ldr	r2, [pc, #716]	@ (800bd9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bace:	430b      	orrs	r3, r1
 800bad0:	6513      	str	r3, [r2, #80]	@ 0x50
 800bad2:	e003      	b.n	800badc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bad4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bad8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800badc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800bae8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800baec:	2300      	movs	r3, #0
 800baee:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800baf2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800baf6:	460b      	mov	r3, r1
 800baf8:	4313      	orrs	r3, r2
 800bafa:	d039      	beq.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800bafc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bb02:	2b03      	cmp	r3, #3
 800bb04:	d81c      	bhi.n	800bb40 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800bb06:	a201      	add	r2, pc, #4	@ (adr r2, 800bb0c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800bb08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb0c:	0800bb49 	.word	0x0800bb49
 800bb10:	0800bb1d 	.word	0x0800bb1d
 800bb14:	0800bb2b 	.word	0x0800bb2b
 800bb18:	0800bb49 	.word	0x0800bb49
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb1c:	4b9f      	ldr	r3, [pc, #636]	@ (800bd9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb20:	4a9e      	ldr	r2, [pc, #632]	@ (800bd9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bb26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bb28:	e00f      	b.n	800bb4a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bb2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb2e:	3308      	adds	r3, #8
 800bb30:	2102      	movs	r1, #2
 800bb32:	4618      	mov	r0, r3
 800bb34:	f001 ff0a 	bl	800d94c <RCCEx_PLL2_Config>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bb3e:	e004      	b.n	800bb4a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bb40:	2301      	movs	r3, #1
 800bb42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bb46:	e000      	b.n	800bb4a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800bb48:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d10a      	bne.n	800bb68 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bb52:	4b92      	ldr	r3, [pc, #584]	@ (800bd9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bb56:	f023 0103 	bic.w	r1, r3, #3
 800bb5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bb60:	4a8e      	ldr	r2, [pc, #568]	@ (800bd9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb62:	430b      	orrs	r3, r1
 800bb64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800bb66:	e003      	b.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bb6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bb70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb78:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800bb7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bb80:	2300      	movs	r3, #0
 800bb82:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bb86:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800bb8a:	460b      	mov	r3, r1
 800bb8c:	4313      	orrs	r3, r2
 800bb8e:	f000 8099 	beq.w	800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bb92:	4b83      	ldr	r3, [pc, #524]	@ (800bda0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	4a82      	ldr	r2, [pc, #520]	@ (800bda0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bb98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bb9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bb9e:	f7f8 fa3d 	bl	800401c <HAL_GetTick>
 800bba2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bba6:	e00b      	b.n	800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bba8:	f7f8 fa38 	bl	800401c <HAL_GetTick>
 800bbac:	4602      	mov	r2, r0
 800bbae:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800bbb2:	1ad3      	subs	r3, r2, r3
 800bbb4:	2b64      	cmp	r3, #100	@ 0x64
 800bbb6:	d903      	bls.n	800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800bbb8:	2303      	movs	r3, #3
 800bbba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bbbe:	e005      	b.n	800bbcc <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bbc0:	4b77      	ldr	r3, [pc, #476]	@ (800bda0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d0ed      	beq.n	800bba8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800bbcc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d173      	bne.n	800bcbc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bbd4:	4b71      	ldr	r3, [pc, #452]	@ (800bd9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bbd6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800bbd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbdc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bbe0:	4053      	eors	r3, r2
 800bbe2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d015      	beq.n	800bc16 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bbea:	4b6c      	ldr	r3, [pc, #432]	@ (800bd9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bbec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bbee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bbf2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bbf6:	4b69      	ldr	r3, [pc, #420]	@ (800bd9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bbf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bbfa:	4a68      	ldr	r2, [pc, #416]	@ (800bd9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bbfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bc00:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bc02:	4b66      	ldr	r3, [pc, #408]	@ (800bd9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc06:	4a65      	ldr	r2, [pc, #404]	@ (800bd9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bc0c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bc0e:	4a63      	ldr	r2, [pc, #396]	@ (800bd9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc14:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bc16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bc1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bc22:	d118      	bne.n	800bc56 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc24:	f7f8 f9fa 	bl	800401c <HAL_GetTick>
 800bc28:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bc2c:	e00d      	b.n	800bc4a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bc2e:	f7f8 f9f5 	bl	800401c <HAL_GetTick>
 800bc32:	4602      	mov	r2, r0
 800bc34:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800bc38:	1ad2      	subs	r2, r2, r3
 800bc3a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800bc3e:	429a      	cmp	r2, r3
 800bc40:	d903      	bls.n	800bc4a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800bc42:	2303      	movs	r3, #3
 800bc44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800bc48:	e005      	b.n	800bc56 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bc4a:	4b54      	ldr	r3, [pc, #336]	@ (800bd9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bc4e:	f003 0302 	and.w	r3, r3, #2
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d0eb      	beq.n	800bc2e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800bc56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d129      	bne.n	800bcb2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bc5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bc66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bc6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bc6e:	d10e      	bne.n	800bc8e <HAL_RCCEx_PeriphCLKConfig+0x846>
 800bc70:	4b4a      	ldr	r3, [pc, #296]	@ (800bd9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc72:	691b      	ldr	r3, [r3, #16]
 800bc74:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800bc78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bc80:	091a      	lsrs	r2, r3, #4
 800bc82:	4b48      	ldr	r3, [pc, #288]	@ (800bda4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800bc84:	4013      	ands	r3, r2
 800bc86:	4a45      	ldr	r2, [pc, #276]	@ (800bd9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc88:	430b      	orrs	r3, r1
 800bc8a:	6113      	str	r3, [r2, #16]
 800bc8c:	e005      	b.n	800bc9a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800bc8e:	4b43      	ldr	r3, [pc, #268]	@ (800bd9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc90:	691b      	ldr	r3, [r3, #16]
 800bc92:	4a42      	ldr	r2, [pc, #264]	@ (800bd9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc94:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800bc98:	6113      	str	r3, [r2, #16]
 800bc9a:	4b40      	ldr	r3, [pc, #256]	@ (800bd9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc9c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800bc9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bca2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bca6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bcaa:	4a3c      	ldr	r2, [pc, #240]	@ (800bd9c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bcac:	430b      	orrs	r3, r1
 800bcae:	6713      	str	r3, [r2, #112]	@ 0x70
 800bcb0:	e008      	b.n	800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bcb2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bcb6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800bcba:	e003      	b.n	800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bcc0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bcc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bccc:	f002 0301 	and.w	r3, r2, #1
 800bcd0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800bcda:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800bcde:	460b      	mov	r3, r1
 800bce0:	4313      	orrs	r3, r2
 800bce2:	f000 808f 	beq.w	800be04 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800bce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bcec:	2b28      	cmp	r3, #40	@ 0x28
 800bcee:	d871      	bhi.n	800bdd4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800bcf0:	a201      	add	r2, pc, #4	@ (adr r2, 800bcf8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800bcf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcf6:	bf00      	nop
 800bcf8:	0800bddd 	.word	0x0800bddd
 800bcfc:	0800bdd5 	.word	0x0800bdd5
 800bd00:	0800bdd5 	.word	0x0800bdd5
 800bd04:	0800bdd5 	.word	0x0800bdd5
 800bd08:	0800bdd5 	.word	0x0800bdd5
 800bd0c:	0800bdd5 	.word	0x0800bdd5
 800bd10:	0800bdd5 	.word	0x0800bdd5
 800bd14:	0800bdd5 	.word	0x0800bdd5
 800bd18:	0800bda9 	.word	0x0800bda9
 800bd1c:	0800bdd5 	.word	0x0800bdd5
 800bd20:	0800bdd5 	.word	0x0800bdd5
 800bd24:	0800bdd5 	.word	0x0800bdd5
 800bd28:	0800bdd5 	.word	0x0800bdd5
 800bd2c:	0800bdd5 	.word	0x0800bdd5
 800bd30:	0800bdd5 	.word	0x0800bdd5
 800bd34:	0800bdd5 	.word	0x0800bdd5
 800bd38:	0800bdbf 	.word	0x0800bdbf
 800bd3c:	0800bdd5 	.word	0x0800bdd5
 800bd40:	0800bdd5 	.word	0x0800bdd5
 800bd44:	0800bdd5 	.word	0x0800bdd5
 800bd48:	0800bdd5 	.word	0x0800bdd5
 800bd4c:	0800bdd5 	.word	0x0800bdd5
 800bd50:	0800bdd5 	.word	0x0800bdd5
 800bd54:	0800bdd5 	.word	0x0800bdd5
 800bd58:	0800bddd 	.word	0x0800bddd
 800bd5c:	0800bdd5 	.word	0x0800bdd5
 800bd60:	0800bdd5 	.word	0x0800bdd5
 800bd64:	0800bdd5 	.word	0x0800bdd5
 800bd68:	0800bdd5 	.word	0x0800bdd5
 800bd6c:	0800bdd5 	.word	0x0800bdd5
 800bd70:	0800bdd5 	.word	0x0800bdd5
 800bd74:	0800bdd5 	.word	0x0800bdd5
 800bd78:	0800bddd 	.word	0x0800bddd
 800bd7c:	0800bdd5 	.word	0x0800bdd5
 800bd80:	0800bdd5 	.word	0x0800bdd5
 800bd84:	0800bdd5 	.word	0x0800bdd5
 800bd88:	0800bdd5 	.word	0x0800bdd5
 800bd8c:	0800bdd5 	.word	0x0800bdd5
 800bd90:	0800bdd5 	.word	0x0800bdd5
 800bd94:	0800bdd5 	.word	0x0800bdd5
 800bd98:	0800bddd 	.word	0x0800bddd
 800bd9c:	58024400 	.word	0x58024400
 800bda0:	58024800 	.word	0x58024800
 800bda4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bda8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdac:	3308      	adds	r3, #8
 800bdae:	2101      	movs	r1, #1
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f001 fdcb 	bl	800d94c <RCCEx_PLL2_Config>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bdbc:	e00f      	b.n	800bdde <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bdbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdc2:	3328      	adds	r3, #40	@ 0x28
 800bdc4:	2101      	movs	r1, #1
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f001 fe72 	bl	800dab0 <RCCEx_PLL3_Config>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bdd2:	e004      	b.n	800bdde <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bdda:	e000      	b.n	800bdde <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800bddc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bdde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d10a      	bne.n	800bdfc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bde6:	4bbf      	ldr	r3, [pc, #764]	@ (800c0e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bde8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bdea:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800bdee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdf2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bdf4:	4abb      	ldr	r2, [pc, #748]	@ (800c0e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bdf6:	430b      	orrs	r3, r1
 800bdf8:	6553      	str	r3, [r2, #84]	@ 0x54
 800bdfa:	e003      	b.n	800be04 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdfc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800be00:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800be04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be0c:	f002 0302 	and.w	r3, r2, #2
 800be10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800be14:	2300      	movs	r3, #0
 800be16:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800be1a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800be1e:	460b      	mov	r3, r1
 800be20:	4313      	orrs	r3, r2
 800be22:	d041      	beq.n	800bea8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800be24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800be2a:	2b05      	cmp	r3, #5
 800be2c:	d824      	bhi.n	800be78 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800be2e:	a201      	add	r2, pc, #4	@ (adr r2, 800be34 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800be30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be34:	0800be81 	.word	0x0800be81
 800be38:	0800be4d 	.word	0x0800be4d
 800be3c:	0800be63 	.word	0x0800be63
 800be40:	0800be81 	.word	0x0800be81
 800be44:	0800be81 	.word	0x0800be81
 800be48:	0800be81 	.word	0x0800be81
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800be4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be50:	3308      	adds	r3, #8
 800be52:	2101      	movs	r1, #1
 800be54:	4618      	mov	r0, r3
 800be56:	f001 fd79 	bl	800d94c <RCCEx_PLL2_Config>
 800be5a:	4603      	mov	r3, r0
 800be5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800be60:	e00f      	b.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800be62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be66:	3328      	adds	r3, #40	@ 0x28
 800be68:	2101      	movs	r1, #1
 800be6a:	4618      	mov	r0, r3
 800be6c:	f001 fe20 	bl	800dab0 <RCCEx_PLL3_Config>
 800be70:	4603      	mov	r3, r0
 800be72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800be76:	e004      	b.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be78:	2301      	movs	r3, #1
 800be7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800be7e:	e000      	b.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800be80:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be82:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800be86:	2b00      	cmp	r3, #0
 800be88:	d10a      	bne.n	800bea0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800be8a:	4b96      	ldr	r3, [pc, #600]	@ (800c0e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800be8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be8e:	f023 0107 	bic.w	r1, r3, #7
 800be92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800be98:	4a92      	ldr	r2, [pc, #584]	@ (800c0e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800be9a:	430b      	orrs	r3, r1
 800be9c:	6553      	str	r3, [r2, #84]	@ 0x54
 800be9e:	e003      	b.n	800bea8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bea0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bea4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800beac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb0:	f002 0304 	and.w	r3, r2, #4
 800beb4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800beb8:	2300      	movs	r3, #0
 800beba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bebe:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800bec2:	460b      	mov	r3, r1
 800bec4:	4313      	orrs	r3, r2
 800bec6:	d044      	beq.n	800bf52 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800bec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800becc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bed0:	2b05      	cmp	r3, #5
 800bed2:	d825      	bhi.n	800bf20 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800bed4:	a201      	add	r2, pc, #4	@ (adr r2, 800bedc <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800bed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beda:	bf00      	nop
 800bedc:	0800bf29 	.word	0x0800bf29
 800bee0:	0800bef5 	.word	0x0800bef5
 800bee4:	0800bf0b 	.word	0x0800bf0b
 800bee8:	0800bf29 	.word	0x0800bf29
 800beec:	0800bf29 	.word	0x0800bf29
 800bef0:	0800bf29 	.word	0x0800bf29
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bef8:	3308      	adds	r3, #8
 800befa:	2101      	movs	r1, #1
 800befc:	4618      	mov	r0, r3
 800befe:	f001 fd25 	bl	800d94c <RCCEx_PLL2_Config>
 800bf02:	4603      	mov	r3, r0
 800bf04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bf08:	e00f      	b.n	800bf2a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bf0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf0e:	3328      	adds	r3, #40	@ 0x28
 800bf10:	2101      	movs	r1, #1
 800bf12:	4618      	mov	r0, r3
 800bf14:	f001 fdcc 	bl	800dab0 <RCCEx_PLL3_Config>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bf1e:	e004      	b.n	800bf2a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf20:	2301      	movs	r3, #1
 800bf22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bf26:	e000      	b.n	800bf2a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800bf28:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d10b      	bne.n	800bf4a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bf32:	4b6c      	ldr	r3, [pc, #432]	@ (800c0e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bf34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf36:	f023 0107 	bic.w	r1, r3, #7
 800bf3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf42:	4a68      	ldr	r2, [pc, #416]	@ (800c0e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bf44:	430b      	orrs	r3, r1
 800bf46:	6593      	str	r3, [r2, #88]	@ 0x58
 800bf48:	e003      	b.n	800bf52 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bf4e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bf52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf5a:	f002 0320 	and.w	r3, r2, #32
 800bf5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bf62:	2300      	movs	r3, #0
 800bf64:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800bf68:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800bf6c:	460b      	mov	r3, r1
 800bf6e:	4313      	orrs	r3, r2
 800bf70:	d055      	beq.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800bf72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bf7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bf7e:	d033      	beq.n	800bfe8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800bf80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bf84:	d82c      	bhi.n	800bfe0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800bf86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf8a:	d02f      	beq.n	800bfec <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800bf8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf90:	d826      	bhi.n	800bfe0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800bf92:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bf96:	d02b      	beq.n	800bff0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800bf98:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bf9c:	d820      	bhi.n	800bfe0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800bf9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bfa2:	d012      	beq.n	800bfca <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800bfa4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bfa8:	d81a      	bhi.n	800bfe0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d022      	beq.n	800bff4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800bfae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bfb2:	d115      	bne.n	800bfe0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bfb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfb8:	3308      	adds	r3, #8
 800bfba:	2100      	movs	r1, #0
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f001 fcc5 	bl	800d94c <RCCEx_PLL2_Config>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bfc8:	e015      	b.n	800bff6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bfca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfce:	3328      	adds	r3, #40	@ 0x28
 800bfd0:	2102      	movs	r1, #2
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f001 fd6c 	bl	800dab0 <RCCEx_PLL3_Config>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bfde:	e00a      	b.n	800bff6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bfe6:	e006      	b.n	800bff6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800bfe8:	bf00      	nop
 800bfea:	e004      	b.n	800bff6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800bfec:	bf00      	nop
 800bfee:	e002      	b.n	800bff6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800bff0:	bf00      	nop
 800bff2:	e000      	b.n	800bff6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800bff4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bff6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d10b      	bne.n	800c016 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bffe:	4b39      	ldr	r3, [pc, #228]	@ (800c0e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c002:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c006:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c00a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c00e:	4a35      	ldr	r2, [pc, #212]	@ (800c0e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c010:	430b      	orrs	r3, r1
 800c012:	6553      	str	r3, [r2, #84]	@ 0x54
 800c014:	e003      	b.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c016:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c01a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c01e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c026:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800c02a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c02e:	2300      	movs	r3, #0
 800c030:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c034:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800c038:	460b      	mov	r3, r1
 800c03a:	4313      	orrs	r3, r2
 800c03c:	d058      	beq.n	800c0f0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c03e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c042:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c046:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c04a:	d033      	beq.n	800c0b4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800c04c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c050:	d82c      	bhi.n	800c0ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c052:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c056:	d02f      	beq.n	800c0b8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c058:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c05c:	d826      	bhi.n	800c0ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c05e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c062:	d02b      	beq.n	800c0bc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c064:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c068:	d820      	bhi.n	800c0ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c06a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c06e:	d012      	beq.n	800c096 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800c070:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c074:	d81a      	bhi.n	800c0ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c076:	2b00      	cmp	r3, #0
 800c078:	d022      	beq.n	800c0c0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c07a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c07e:	d115      	bne.n	800c0ac <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c080:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c084:	3308      	adds	r3, #8
 800c086:	2100      	movs	r1, #0
 800c088:	4618      	mov	r0, r3
 800c08a:	f001 fc5f 	bl	800d94c <RCCEx_PLL2_Config>
 800c08e:	4603      	mov	r3, r0
 800c090:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c094:	e015      	b.n	800c0c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c096:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c09a:	3328      	adds	r3, #40	@ 0x28
 800c09c:	2102      	movs	r1, #2
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f001 fd06 	bl	800dab0 <RCCEx_PLL3_Config>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c0aa:	e00a      	b.n	800c0c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c0b2:	e006      	b.n	800c0c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c0b4:	bf00      	nop
 800c0b6:	e004      	b.n	800c0c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c0b8:	bf00      	nop
 800c0ba:	e002      	b.n	800c0c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c0bc:	bf00      	nop
 800c0be:	e000      	b.n	800c0c2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c0c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c0c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d10e      	bne.n	800c0e8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c0ca:	4b06      	ldr	r3, [pc, #24]	@ (800c0e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c0cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0ce:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800c0d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c0da:	4a02      	ldr	r2, [pc, #8]	@ (800c0e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c0dc:	430b      	orrs	r3, r1
 800c0de:	6593      	str	r3, [r2, #88]	@ 0x58
 800c0e0:	e006      	b.n	800c0f0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800c0e2:	bf00      	nop
 800c0e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c0ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c0f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800c0fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c100:	2300      	movs	r3, #0
 800c102:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c106:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800c10a:	460b      	mov	r3, r1
 800c10c:	4313      	orrs	r3, r2
 800c10e:	d055      	beq.n	800c1bc <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c110:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c114:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c118:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c11c:	d033      	beq.n	800c186 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800c11e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c122:	d82c      	bhi.n	800c17e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c124:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c128:	d02f      	beq.n	800c18a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c12a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c12e:	d826      	bhi.n	800c17e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c130:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c134:	d02b      	beq.n	800c18e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c136:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c13a:	d820      	bhi.n	800c17e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c13c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c140:	d012      	beq.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800c142:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c146:	d81a      	bhi.n	800c17e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d022      	beq.n	800c192 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c14c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c150:	d115      	bne.n	800c17e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c152:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c156:	3308      	adds	r3, #8
 800c158:	2100      	movs	r1, #0
 800c15a:	4618      	mov	r0, r3
 800c15c:	f001 fbf6 	bl	800d94c <RCCEx_PLL2_Config>
 800c160:	4603      	mov	r3, r0
 800c162:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c166:	e015      	b.n	800c194 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c168:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c16c:	3328      	adds	r3, #40	@ 0x28
 800c16e:	2102      	movs	r1, #2
 800c170:	4618      	mov	r0, r3
 800c172:	f001 fc9d 	bl	800dab0 <RCCEx_PLL3_Config>
 800c176:	4603      	mov	r3, r0
 800c178:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c17c:	e00a      	b.n	800c194 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c17e:	2301      	movs	r3, #1
 800c180:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c184:	e006      	b.n	800c194 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c186:	bf00      	nop
 800c188:	e004      	b.n	800c194 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c18a:	bf00      	nop
 800c18c:	e002      	b.n	800c194 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c18e:	bf00      	nop
 800c190:	e000      	b.n	800c194 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c192:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c194:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d10b      	bne.n	800c1b4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c19c:	4ba0      	ldr	r3, [pc, #640]	@ (800c420 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c19e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c1a0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800c1a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c1ac:	4a9c      	ldr	r2, [pc, #624]	@ (800c420 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c1ae:	430b      	orrs	r3, r1
 800c1b0:	6593      	str	r3, [r2, #88]	@ 0x58
 800c1b2:	e003      	b.n	800c1bc <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c1b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800c1bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c4:	f002 0308 	and.w	r3, r2, #8
 800c1c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c1d2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800c1d6:	460b      	mov	r3, r1
 800c1d8:	4313      	orrs	r3, r2
 800c1da:	d01e      	beq.n	800c21a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800c1dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c1e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c1e8:	d10c      	bne.n	800c204 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c1ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1ee:	3328      	adds	r3, #40	@ 0x28
 800c1f0:	2102      	movs	r1, #2
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f001 fc5c 	bl	800dab0 <RCCEx_PLL3_Config>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d002      	beq.n	800c204 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800c1fe:	2301      	movs	r3, #1
 800c200:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800c204:	4b86      	ldr	r3, [pc, #536]	@ (800c420 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c208:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c20c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c210:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c214:	4a82      	ldr	r2, [pc, #520]	@ (800c420 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c216:	430b      	orrs	r3, r1
 800c218:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c21a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c222:	f002 0310 	and.w	r3, r2, #16
 800c226:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c22a:	2300      	movs	r3, #0
 800c22c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c230:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800c234:	460b      	mov	r3, r1
 800c236:	4313      	orrs	r3, r2
 800c238:	d01e      	beq.n	800c278 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c23a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c23e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c242:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c246:	d10c      	bne.n	800c262 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c248:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c24c:	3328      	adds	r3, #40	@ 0x28
 800c24e:	2102      	movs	r1, #2
 800c250:	4618      	mov	r0, r3
 800c252:	f001 fc2d 	bl	800dab0 <RCCEx_PLL3_Config>
 800c256:	4603      	mov	r3, r0
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d002      	beq.n	800c262 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800c25c:	2301      	movs	r3, #1
 800c25e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c262:	4b6f      	ldr	r3, [pc, #444]	@ (800c420 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c266:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c26a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c26e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c272:	4a6b      	ldr	r2, [pc, #428]	@ (800c420 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c274:	430b      	orrs	r3, r1
 800c276:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c278:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c280:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800c284:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c286:	2300      	movs	r3, #0
 800c288:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c28a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800c28e:	460b      	mov	r3, r1
 800c290:	4313      	orrs	r3, r2
 800c292:	d03e      	beq.n	800c312 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c298:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c29c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c2a0:	d022      	beq.n	800c2e8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c2a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c2a6:	d81b      	bhi.n	800c2e0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d003      	beq.n	800c2b4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800c2ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c2b0:	d00b      	beq.n	800c2ca <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800c2b2:	e015      	b.n	800c2e0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c2b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2b8:	3308      	adds	r3, #8
 800c2ba:	2100      	movs	r1, #0
 800c2bc:	4618      	mov	r0, r3
 800c2be:	f001 fb45 	bl	800d94c <RCCEx_PLL2_Config>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c2c8:	e00f      	b.n	800c2ea <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c2ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2ce:	3328      	adds	r3, #40	@ 0x28
 800c2d0:	2102      	movs	r1, #2
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f001 fbec 	bl	800dab0 <RCCEx_PLL3_Config>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c2de:	e004      	b.n	800c2ea <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c2e6:	e000      	b.n	800c2ea <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800c2e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c2ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d10b      	bne.n	800c30a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c2f2:	4b4b      	ldr	r3, [pc, #300]	@ (800c420 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c2f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c2f6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800c2fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c302:	4a47      	ldr	r2, [pc, #284]	@ (800c420 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c304:	430b      	orrs	r3, r1
 800c306:	6593      	str	r3, [r2, #88]	@ 0x58
 800c308:	e003      	b.n	800c312 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c30a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c30e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c312:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c31a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800c31e:	673b      	str	r3, [r7, #112]	@ 0x70
 800c320:	2300      	movs	r3, #0
 800c322:	677b      	str	r3, [r7, #116]	@ 0x74
 800c324:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800c328:	460b      	mov	r3, r1
 800c32a:	4313      	orrs	r3, r2
 800c32c:	d03b      	beq.n	800c3a6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c32e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c332:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c336:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c33a:	d01f      	beq.n	800c37c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c33c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c340:	d818      	bhi.n	800c374 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800c342:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c346:	d003      	beq.n	800c350 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800c348:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c34c:	d007      	beq.n	800c35e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800c34e:	e011      	b.n	800c374 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c350:	4b33      	ldr	r3, [pc, #204]	@ (800c420 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c354:	4a32      	ldr	r2, [pc, #200]	@ (800c420 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c356:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c35a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c35c:	e00f      	b.n	800c37e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c35e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c362:	3328      	adds	r3, #40	@ 0x28
 800c364:	2101      	movs	r1, #1
 800c366:	4618      	mov	r0, r3
 800c368:	f001 fba2 	bl	800dab0 <RCCEx_PLL3_Config>
 800c36c:	4603      	mov	r3, r0
 800c36e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800c372:	e004      	b.n	800c37e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c374:	2301      	movs	r3, #1
 800c376:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c37a:	e000      	b.n	800c37e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800c37c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c37e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c382:	2b00      	cmp	r3, #0
 800c384:	d10b      	bne.n	800c39e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c386:	4b26      	ldr	r3, [pc, #152]	@ (800c420 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c38a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c38e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c392:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c396:	4a22      	ldr	r2, [pc, #136]	@ (800c420 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c398:	430b      	orrs	r3, r1
 800c39a:	6553      	str	r3, [r2, #84]	@ 0x54
 800c39c:	e003      	b.n	800c3a6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c39e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c3a2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c3a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ae:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800c3b2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c3b8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800c3bc:	460b      	mov	r3, r1
 800c3be:	4313      	orrs	r3, r2
 800c3c0:	d034      	beq.n	800c42c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c3c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d003      	beq.n	800c3d4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800c3cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c3d0:	d007      	beq.n	800c3e2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800c3d2:	e011      	b.n	800c3f8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3d4:	4b12      	ldr	r3, [pc, #72]	@ (800c420 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c3d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3d8:	4a11      	ldr	r2, [pc, #68]	@ (800c420 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c3da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c3de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c3e0:	e00e      	b.n	800c400 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c3e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3e6:	3308      	adds	r3, #8
 800c3e8:	2102      	movs	r1, #2
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f001 faae 	bl	800d94c <RCCEx_PLL2_Config>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c3f6:	e003      	b.n	800c400 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c3fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c400:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c404:	2b00      	cmp	r3, #0
 800c406:	d10d      	bne.n	800c424 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c408:	4b05      	ldr	r3, [pc, #20]	@ (800c420 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c40a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c40c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c410:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c414:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c416:	4a02      	ldr	r2, [pc, #8]	@ (800c420 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c418:	430b      	orrs	r3, r1
 800c41a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c41c:	e006      	b.n	800c42c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800c41e:	bf00      	nop
 800c420:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c424:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c428:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c42c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c434:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800c438:	663b      	str	r3, [r7, #96]	@ 0x60
 800c43a:	2300      	movs	r3, #0
 800c43c:	667b      	str	r3, [r7, #100]	@ 0x64
 800c43e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800c442:	460b      	mov	r3, r1
 800c444:	4313      	orrs	r3, r2
 800c446:	d00c      	beq.n	800c462 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c448:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c44c:	3328      	adds	r3, #40	@ 0x28
 800c44e:	2102      	movs	r1, #2
 800c450:	4618      	mov	r0, r3
 800c452:	f001 fb2d 	bl	800dab0 <RCCEx_PLL3_Config>
 800c456:	4603      	mov	r3, r0
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d002      	beq.n	800c462 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800c45c:	2301      	movs	r3, #1
 800c45e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c462:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c46a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800c46e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c470:	2300      	movs	r3, #0
 800c472:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c474:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800c478:	460b      	mov	r3, r1
 800c47a:	4313      	orrs	r3, r2
 800c47c:	d036      	beq.n	800c4ec <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c47e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c482:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c484:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c488:	d018      	beq.n	800c4bc <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800c48a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c48e:	d811      	bhi.n	800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c490:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c494:	d014      	beq.n	800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800c496:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c49a:	d80b      	bhi.n	800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d011      	beq.n	800c4c4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800c4a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c4a4:	d106      	bne.n	800c4b4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c4a6:	4bb7      	ldr	r3, [pc, #732]	@ (800c784 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c4a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4aa:	4ab6      	ldr	r2, [pc, #728]	@ (800c784 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c4ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c4b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c4b2:	e008      	b.n	800c4c6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c4ba:	e004      	b.n	800c4c6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c4bc:	bf00      	nop
 800c4be:	e002      	b.n	800c4c6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c4c0:	bf00      	nop
 800c4c2:	e000      	b.n	800c4c6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c4c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c4c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d10a      	bne.n	800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c4ce:	4bad      	ldr	r3, [pc, #692]	@ (800c784 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c4d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4d2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c4d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c4dc:	4aa9      	ldr	r2, [pc, #676]	@ (800c784 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c4de:	430b      	orrs	r3, r1
 800c4e0:	6553      	str	r3, [r2, #84]	@ 0x54
 800c4e2:	e003      	b.n	800c4ec <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c4e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c4ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4f4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800c4f8:	653b      	str	r3, [r7, #80]	@ 0x50
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	657b      	str	r3, [r7, #84]	@ 0x54
 800c4fe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800c502:	460b      	mov	r3, r1
 800c504:	4313      	orrs	r3, r2
 800c506:	d009      	beq.n	800c51c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c508:	4b9e      	ldr	r3, [pc, #632]	@ (800c784 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c50a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c50c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c510:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c514:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c516:	4a9b      	ldr	r2, [pc, #620]	@ (800c784 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c518:	430b      	orrs	r3, r1
 800c51a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c51c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c524:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800c528:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c52a:	2300      	movs	r3, #0
 800c52c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c52e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800c532:	460b      	mov	r3, r1
 800c534:	4313      	orrs	r3, r2
 800c536:	d009      	beq.n	800c54c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c538:	4b92      	ldr	r3, [pc, #584]	@ (800c784 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c53a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c53c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800c540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c544:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c546:	4a8f      	ldr	r2, [pc, #572]	@ (800c784 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c548:	430b      	orrs	r3, r1
 800c54a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c54c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c554:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800c558:	643b      	str	r3, [r7, #64]	@ 0x40
 800c55a:	2300      	movs	r3, #0
 800c55c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c55e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800c562:	460b      	mov	r3, r1
 800c564:	4313      	orrs	r3, r2
 800c566:	d00e      	beq.n	800c586 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c568:	4b86      	ldr	r3, [pc, #536]	@ (800c784 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c56a:	691b      	ldr	r3, [r3, #16]
 800c56c:	4a85      	ldr	r2, [pc, #532]	@ (800c784 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c56e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c572:	6113      	str	r3, [r2, #16]
 800c574:	4b83      	ldr	r3, [pc, #524]	@ (800c784 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c576:	6919      	ldr	r1, [r3, #16]
 800c578:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c57c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c580:	4a80      	ldr	r2, [pc, #512]	@ (800c784 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c582:	430b      	orrs	r3, r1
 800c584:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c586:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c58e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800c592:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c594:	2300      	movs	r3, #0
 800c596:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c598:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800c59c:	460b      	mov	r3, r1
 800c59e:	4313      	orrs	r3, r2
 800c5a0:	d009      	beq.n	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c5a2:	4b78      	ldr	r3, [pc, #480]	@ (800c784 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c5a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c5a6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800c5aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5b0:	4a74      	ldr	r2, [pc, #464]	@ (800c784 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c5b2:	430b      	orrs	r3, r1
 800c5b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c5b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5be:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800c5c2:	633b      	str	r3, [r7, #48]	@ 0x30
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c5c8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800c5cc:	460b      	mov	r3, r1
 800c5ce:	4313      	orrs	r3, r2
 800c5d0:	d00a      	beq.n	800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c5d2:	4b6c      	ldr	r3, [pc, #432]	@ (800c784 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c5d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5d6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800c5da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c5e2:	4a68      	ldr	r2, [pc, #416]	@ (800c784 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c5e4:	430b      	orrs	r3, r1
 800c5e6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c5e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f0:	2100      	movs	r1, #0
 800c5f2:	62b9      	str	r1, [r7, #40]	@ 0x28
 800c5f4:	f003 0301 	and.w	r3, r3, #1
 800c5f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c5fa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800c5fe:	460b      	mov	r3, r1
 800c600:	4313      	orrs	r3, r2
 800c602:	d011      	beq.n	800c628 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c604:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c608:	3308      	adds	r3, #8
 800c60a:	2100      	movs	r1, #0
 800c60c:	4618      	mov	r0, r3
 800c60e:	f001 f99d 	bl	800d94c <RCCEx_PLL2_Config>
 800c612:	4603      	mov	r3, r0
 800c614:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c618:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d003      	beq.n	800c628 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c620:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c624:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c628:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c630:	2100      	movs	r1, #0
 800c632:	6239      	str	r1, [r7, #32]
 800c634:	f003 0302 	and.w	r3, r3, #2
 800c638:	627b      	str	r3, [r7, #36]	@ 0x24
 800c63a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c63e:	460b      	mov	r3, r1
 800c640:	4313      	orrs	r3, r2
 800c642:	d011      	beq.n	800c668 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c648:	3308      	adds	r3, #8
 800c64a:	2101      	movs	r1, #1
 800c64c:	4618      	mov	r0, r3
 800c64e:	f001 f97d 	bl	800d94c <RCCEx_PLL2_Config>
 800c652:	4603      	mov	r3, r0
 800c654:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c658:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d003      	beq.n	800c668 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c660:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c664:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c668:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c670:	2100      	movs	r1, #0
 800c672:	61b9      	str	r1, [r7, #24]
 800c674:	f003 0304 	and.w	r3, r3, #4
 800c678:	61fb      	str	r3, [r7, #28]
 800c67a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c67e:	460b      	mov	r3, r1
 800c680:	4313      	orrs	r3, r2
 800c682:	d011      	beq.n	800c6a8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c688:	3308      	adds	r3, #8
 800c68a:	2102      	movs	r1, #2
 800c68c:	4618      	mov	r0, r3
 800c68e:	f001 f95d 	bl	800d94c <RCCEx_PLL2_Config>
 800c692:	4603      	mov	r3, r0
 800c694:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c698:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d003      	beq.n	800c6a8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c6a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c6a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6b0:	2100      	movs	r1, #0
 800c6b2:	6139      	str	r1, [r7, #16]
 800c6b4:	f003 0308 	and.w	r3, r3, #8
 800c6b8:	617b      	str	r3, [r7, #20]
 800c6ba:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c6be:	460b      	mov	r3, r1
 800c6c0:	4313      	orrs	r3, r2
 800c6c2:	d011      	beq.n	800c6e8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c6c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6c8:	3328      	adds	r3, #40	@ 0x28
 800c6ca:	2100      	movs	r1, #0
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	f001 f9ef 	bl	800dab0 <RCCEx_PLL3_Config>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800c6d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d003      	beq.n	800c6e8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c6e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c6e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f0:	2100      	movs	r1, #0
 800c6f2:	60b9      	str	r1, [r7, #8]
 800c6f4:	f003 0310 	and.w	r3, r3, #16
 800c6f8:	60fb      	str	r3, [r7, #12]
 800c6fa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c6fe:	460b      	mov	r3, r1
 800c700:	4313      	orrs	r3, r2
 800c702:	d011      	beq.n	800c728 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c704:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c708:	3328      	adds	r3, #40	@ 0x28
 800c70a:	2101      	movs	r1, #1
 800c70c:	4618      	mov	r0, r3
 800c70e:	f001 f9cf 	bl	800dab0 <RCCEx_PLL3_Config>
 800c712:	4603      	mov	r3, r0
 800c714:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c718:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d003      	beq.n	800c728 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c720:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c724:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c728:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c730:	2100      	movs	r1, #0
 800c732:	6039      	str	r1, [r7, #0]
 800c734:	f003 0320 	and.w	r3, r3, #32
 800c738:	607b      	str	r3, [r7, #4]
 800c73a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c73e:	460b      	mov	r3, r1
 800c740:	4313      	orrs	r3, r2
 800c742:	d011      	beq.n	800c768 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c748:	3328      	adds	r3, #40	@ 0x28
 800c74a:	2102      	movs	r1, #2
 800c74c:	4618      	mov	r0, r3
 800c74e:	f001 f9af 	bl	800dab0 <RCCEx_PLL3_Config>
 800c752:	4603      	mov	r3, r0
 800c754:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c758:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d003      	beq.n	800c768 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c760:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c764:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800c768:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d101      	bne.n	800c774 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800c770:	2300      	movs	r3, #0
 800c772:	e000      	b.n	800c776 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800c774:	2301      	movs	r3, #1
}
 800c776:	4618      	mov	r0, r3
 800c778:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800c77c:	46bd      	mov	sp, r7
 800c77e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c782:	bf00      	nop
 800c784:	58024400 	.word	0x58024400

0800c788 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b090      	sub	sp, #64	@ 0x40
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c792:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c796:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800c79a:	430b      	orrs	r3, r1
 800c79c:	f040 8094 	bne.w	800c8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c7a0:	4b9b      	ldr	r3, [pc, #620]	@ (800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c7a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c7a4:	f003 0307 	and.w	r3, r3, #7
 800c7a8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800c7aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7ac:	2b04      	cmp	r3, #4
 800c7ae:	f200 8087 	bhi.w	800c8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c7b2:	a201      	add	r2, pc, #4	@ (adr r2, 800c7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c7b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7b8:	0800c7cd 	.word	0x0800c7cd
 800c7bc:	0800c7f5 	.word	0x0800c7f5
 800c7c0:	0800c81d 	.word	0x0800c81d
 800c7c4:	0800c8b9 	.word	0x0800c8b9
 800c7c8:	0800c845 	.word	0x0800c845
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c7cc:	4b90      	ldr	r3, [pc, #576]	@ (800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c7d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c7d8:	d108      	bne.n	800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c7da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c7de:	4618      	mov	r0, r3
 800c7e0:	f000 ff62 	bl	800d6a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c7e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7e8:	f000 bc93 	b.w	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c7f0:	f000 bc8f 	b.w	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c7f4:	4b86      	ldr	r3, [pc, #536]	@ (800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c7fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c800:	d108      	bne.n	800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c802:	f107 0318 	add.w	r3, r7, #24
 800c806:	4618      	mov	r0, r3
 800c808:	f000 fca6 	bl	800d158 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c80c:	69bb      	ldr	r3, [r7, #24]
 800c80e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c810:	f000 bc7f 	b.w	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c814:	2300      	movs	r3, #0
 800c816:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c818:	f000 bc7b 	b.w	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c81c:	4b7c      	ldr	r3, [pc, #496]	@ (800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c824:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c828:	d108      	bne.n	800c83c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c82a:	f107 030c 	add.w	r3, r7, #12
 800c82e:	4618      	mov	r0, r3
 800c830:	f000 fde6 	bl	800d400 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c838:	f000 bc6b 	b.w	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c83c:	2300      	movs	r3, #0
 800c83e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c840:	f000 bc67 	b.w	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c844:	4b72      	ldr	r3, [pc, #456]	@ (800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c846:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c848:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c84c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c84e:	4b70      	ldr	r3, [pc, #448]	@ (800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	f003 0304 	and.w	r3, r3, #4
 800c856:	2b04      	cmp	r3, #4
 800c858:	d10c      	bne.n	800c874 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c85a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d109      	bne.n	800c874 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c860:	4b6b      	ldr	r3, [pc, #428]	@ (800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	08db      	lsrs	r3, r3, #3
 800c866:	f003 0303 	and.w	r3, r3, #3
 800c86a:	4a6a      	ldr	r2, [pc, #424]	@ (800ca14 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800c86c:	fa22 f303 	lsr.w	r3, r2, r3
 800c870:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c872:	e01f      	b.n	800c8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c874:	4b66      	ldr	r3, [pc, #408]	@ (800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c87c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c880:	d106      	bne.n	800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c884:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c888:	d102      	bne.n	800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c88a:	4b63      	ldr	r3, [pc, #396]	@ (800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800c88c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c88e:	e011      	b.n	800c8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c890:	4b5f      	ldr	r3, [pc, #380]	@ (800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c898:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c89c:	d106      	bne.n	800c8ac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c89e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c8a4:	d102      	bne.n	800c8ac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c8a6:	4b5d      	ldr	r3, [pc, #372]	@ (800ca1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c8a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c8aa:	e003      	b.n	800c8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c8b0:	f000 bc2f 	b.w	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c8b4:	f000 bc2d 	b.w	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c8b8:	4b59      	ldr	r3, [pc, #356]	@ (800ca20 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c8ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8bc:	f000 bc29 	b.w	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8c4:	f000 bc25 	b.w	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c8c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8cc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800c8d0:	430b      	orrs	r3, r1
 800c8d2:	f040 80a7 	bne.w	800ca24 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c8d6:	4b4e      	ldr	r3, [pc, #312]	@ (800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c8d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c8da:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800c8de:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800c8e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c8e6:	d054      	beq.n	800c992 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800c8e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c8ee:	f200 808b 	bhi.w	800ca08 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c8f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8f4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c8f8:	f000 8083 	beq.w	800ca02 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800c8fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8fe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c902:	f200 8081 	bhi.w	800ca08 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c908:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c90c:	d02f      	beq.n	800c96e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c90e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c910:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c914:	d878      	bhi.n	800ca08 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d004      	beq.n	800c926 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800c91c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c91e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c922:	d012      	beq.n	800c94a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800c924:	e070      	b.n	800ca08 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c926:	4b3a      	ldr	r3, [pc, #232]	@ (800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c92e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c932:	d107      	bne.n	800c944 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c934:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c938:	4618      	mov	r0, r3
 800c93a:	f000 feb5 	bl	800d6a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c93e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c940:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c942:	e3e6      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c944:	2300      	movs	r3, #0
 800c946:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c948:	e3e3      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c94a:	4b31      	ldr	r3, [pc, #196]	@ (800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c952:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c956:	d107      	bne.n	800c968 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c958:	f107 0318 	add.w	r3, r7, #24
 800c95c:	4618      	mov	r0, r3
 800c95e:	f000 fbfb 	bl	800d158 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c962:	69bb      	ldr	r3, [r7, #24]
 800c964:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c966:	e3d4      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c968:	2300      	movs	r3, #0
 800c96a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c96c:	e3d1      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c96e:	4b28      	ldr	r3, [pc, #160]	@ (800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c976:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c97a:	d107      	bne.n	800c98c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c97c:	f107 030c 	add.w	r3, r7, #12
 800c980:	4618      	mov	r0, r3
 800c982:	f000 fd3d 	bl	800d400 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c98a:	e3c2      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c98c:	2300      	movs	r3, #0
 800c98e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c990:	e3bf      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c992:	4b1f      	ldr	r3, [pc, #124]	@ (800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c996:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c99a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c99c:	4b1c      	ldr	r3, [pc, #112]	@ (800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	f003 0304 	and.w	r3, r3, #4
 800c9a4:	2b04      	cmp	r3, #4
 800c9a6:	d10c      	bne.n	800c9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800c9a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d109      	bne.n	800c9c2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c9ae:	4b18      	ldr	r3, [pc, #96]	@ (800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	08db      	lsrs	r3, r3, #3
 800c9b4:	f003 0303 	and.w	r3, r3, #3
 800c9b8:	4a16      	ldr	r2, [pc, #88]	@ (800ca14 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800c9ba:	fa22 f303 	lsr.w	r3, r2, r3
 800c9be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c9c0:	e01e      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c9c2:	4b13      	ldr	r3, [pc, #76]	@ (800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c9ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c9ce:	d106      	bne.n	800c9de <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800c9d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c9d6:	d102      	bne.n	800c9de <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c9d8:	4b0f      	ldr	r3, [pc, #60]	@ (800ca18 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800c9da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c9dc:	e010      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c9de:	4b0c      	ldr	r3, [pc, #48]	@ (800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c9e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c9ea:	d106      	bne.n	800c9fa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800c9ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c9f2:	d102      	bne.n	800c9fa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c9f4:	4b09      	ldr	r3, [pc, #36]	@ (800ca1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c9f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c9f8:	e002      	b.n	800ca00 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c9fe:	e388      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ca00:	e387      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ca02:	4b07      	ldr	r3, [pc, #28]	@ (800ca20 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ca04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca06:	e384      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800ca08:	2300      	movs	r3, #0
 800ca0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca0c:	e381      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ca0e:	bf00      	nop
 800ca10:	58024400 	.word	0x58024400
 800ca14:	03d09000 	.word	0x03d09000
 800ca18:	003d0900 	.word	0x003d0900
 800ca1c:	007a1200 	.word	0x007a1200
 800ca20:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ca24:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca28:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800ca2c:	430b      	orrs	r3, r1
 800ca2e:	f040 809c 	bne.w	800cb6a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800ca32:	4b9e      	ldr	r3, [pc, #632]	@ (800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ca34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca36:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800ca3a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ca3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca3e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ca42:	d054      	beq.n	800caee <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800ca44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca46:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ca4a:	f200 808b 	bhi.w	800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ca4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca50:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ca54:	f000 8083 	beq.w	800cb5e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800ca58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca5a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ca5e:	f200 8081 	bhi.w	800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ca62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ca68:	d02f      	beq.n	800caca <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800ca6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ca70:	d878      	bhi.n	800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ca72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d004      	beq.n	800ca82 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800ca78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ca7e:	d012      	beq.n	800caa6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800ca80:	e070      	b.n	800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ca82:	4b8a      	ldr	r3, [pc, #552]	@ (800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ca8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ca8e:	d107      	bne.n	800caa0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ca90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ca94:	4618      	mov	r0, r3
 800ca96:	f000 fe07 	bl	800d6a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ca9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca9e:	e338      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800caa0:	2300      	movs	r3, #0
 800caa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800caa4:	e335      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800caa6:	4b81      	ldr	r3, [pc, #516]	@ (800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800caae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cab2:	d107      	bne.n	800cac4 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cab4:	f107 0318 	add.w	r3, r7, #24
 800cab8:	4618      	mov	r0, r3
 800caba:	f000 fb4d 	bl	800d158 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cabe:	69bb      	ldr	r3, [r7, #24]
 800cac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cac2:	e326      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cac4:	2300      	movs	r3, #0
 800cac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cac8:	e323      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800caca:	4b78      	ldr	r3, [pc, #480]	@ (800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cad2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cad6:	d107      	bne.n	800cae8 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cad8:	f107 030c 	add.w	r3, r7, #12
 800cadc:	4618      	mov	r0, r3
 800cade:	f000 fc8f 	bl	800d400 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cae6:	e314      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cae8:	2300      	movs	r3, #0
 800caea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800caec:	e311      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800caee:	4b6f      	ldr	r3, [pc, #444]	@ (800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800caf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800caf2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800caf6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800caf8:	4b6c      	ldr	r3, [pc, #432]	@ (800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	f003 0304 	and.w	r3, r3, #4
 800cb00:	2b04      	cmp	r3, #4
 800cb02:	d10c      	bne.n	800cb1e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800cb04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d109      	bne.n	800cb1e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb0a:	4b68      	ldr	r3, [pc, #416]	@ (800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	08db      	lsrs	r3, r3, #3
 800cb10:	f003 0303 	and.w	r3, r3, #3
 800cb14:	4a66      	ldr	r2, [pc, #408]	@ (800ccb0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800cb16:	fa22 f303 	lsr.w	r3, r2, r3
 800cb1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cb1c:	e01e      	b.n	800cb5c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cb1e:	4b63      	ldr	r3, [pc, #396]	@ (800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cb26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cb2a:	d106      	bne.n	800cb3a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800cb2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cb32:	d102      	bne.n	800cb3a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cb34:	4b5f      	ldr	r3, [pc, #380]	@ (800ccb4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800cb36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cb38:	e010      	b.n	800cb5c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cb3a:	4b5c      	ldr	r3, [pc, #368]	@ (800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cb42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cb46:	d106      	bne.n	800cb56 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800cb48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cb4e:	d102      	bne.n	800cb56 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cb50:	4b59      	ldr	r3, [pc, #356]	@ (800ccb8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cb52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cb54:	e002      	b.n	800cb5c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cb56:	2300      	movs	r3, #0
 800cb58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800cb5a:	e2da      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cb5c:	e2d9      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cb5e:	4b57      	ldr	r3, [pc, #348]	@ (800ccbc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800cb60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb62:	e2d6      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800cb64:	2300      	movs	r3, #0
 800cb66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb68:	e2d3      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800cb6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb6e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800cb72:	430b      	orrs	r3, r1
 800cb74:	f040 80a7 	bne.w	800ccc6 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800cb78:	4b4c      	ldr	r3, [pc, #304]	@ (800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cb7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb7c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800cb80:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800cb82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cb88:	d055      	beq.n	800cc36 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800cb8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cb90:	f200 8096 	bhi.w	800ccc0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800cb94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb96:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cb9a:	f000 8084 	beq.w	800cca6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800cb9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cba0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cba4:	f200 808c 	bhi.w	800ccc0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800cba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cbae:	d030      	beq.n	800cc12 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800cbb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cbb6:	f200 8083 	bhi.w	800ccc0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800cbba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d004      	beq.n	800cbca <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800cbc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cbc6:	d012      	beq.n	800cbee <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800cbc8:	e07a      	b.n	800ccc0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cbca:	4b38      	ldr	r3, [pc, #224]	@ (800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cbd2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cbd6:	d107      	bne.n	800cbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cbd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cbdc:	4618      	mov	r0, r3
 800cbde:	f000 fd63 	bl	800d6a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cbe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbe6:	e294      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cbe8:	2300      	movs	r3, #0
 800cbea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cbec:	e291      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cbee:	4b2f      	ldr	r3, [pc, #188]	@ (800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cbf6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cbfa:	d107      	bne.n	800cc0c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbfc:	f107 0318 	add.w	r3, r7, #24
 800cc00:	4618      	mov	r0, r3
 800cc02:	f000 faa9 	bl	800d158 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cc06:	69bb      	ldr	r3, [r7, #24]
 800cc08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc0a:	e282      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc10:	e27f      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cc12:	4b26      	ldr	r3, [pc, #152]	@ (800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cc1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cc1e:	d107      	bne.n	800cc30 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc20:	f107 030c 	add.w	r3, r7, #12
 800cc24:	4618      	mov	r0, r3
 800cc26:	f000 fbeb 	bl	800d400 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc2e:	e270      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cc30:	2300      	movs	r3, #0
 800cc32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc34:	e26d      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cc36:	4b1d      	ldr	r3, [pc, #116]	@ (800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cc38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cc3a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800cc3e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cc40:	4b1a      	ldr	r3, [pc, #104]	@ (800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	f003 0304 	and.w	r3, r3, #4
 800cc48:	2b04      	cmp	r3, #4
 800cc4a:	d10c      	bne.n	800cc66 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800cc4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d109      	bne.n	800cc66 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc52:	4b16      	ldr	r3, [pc, #88]	@ (800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	08db      	lsrs	r3, r3, #3
 800cc58:	f003 0303 	and.w	r3, r3, #3
 800cc5c:	4a14      	ldr	r2, [pc, #80]	@ (800ccb0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800cc5e:	fa22 f303 	lsr.w	r3, r2, r3
 800cc62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cc64:	e01e      	b.n	800cca4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cc66:	4b11      	ldr	r3, [pc, #68]	@ (800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cc72:	d106      	bne.n	800cc82 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800cc74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc76:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cc7a:	d102      	bne.n	800cc82 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cc7c:	4b0d      	ldr	r3, [pc, #52]	@ (800ccb4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800cc7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cc80:	e010      	b.n	800cca4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cc82:	4b0a      	ldr	r3, [pc, #40]	@ (800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cc8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cc8e:	d106      	bne.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800cc90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cc96:	d102      	bne.n	800cc9e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cc98:	4b07      	ldr	r3, [pc, #28]	@ (800ccb8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cc9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cc9c:	e002      	b.n	800cca4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800cca2:	e236      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cca4:	e235      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cca6:	4b05      	ldr	r3, [pc, #20]	@ (800ccbc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800cca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ccaa:	e232      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ccac:	58024400 	.word	0x58024400
 800ccb0:	03d09000 	.word	0x03d09000
 800ccb4:	003d0900 	.word	0x003d0900
 800ccb8:	007a1200 	.word	0x007a1200
 800ccbc:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ccc4:	e225      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ccc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ccca:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800ccce:	430b      	orrs	r3, r1
 800ccd0:	f040 8085 	bne.w	800cdde <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ccd4:	4b9c      	ldr	r3, [pc, #624]	@ (800cf48 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ccd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ccd8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800ccdc:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800ccde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cce0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800cce4:	d06b      	beq.n	800cdbe <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800cce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cce8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ccec:	d874      	bhi.n	800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ccee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccf0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ccf4:	d056      	beq.n	800cda4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800ccf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccf8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ccfc:	d86c      	bhi.n	800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ccfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd00:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cd04:	d03b      	beq.n	800cd7e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800cd06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd08:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cd0c:	d864      	bhi.n	800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800cd0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cd14:	d021      	beq.n	800cd5a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800cd16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cd1c:	d85c      	bhi.n	800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800cd1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d004      	beq.n	800cd2e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800cd24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cd2a:	d004      	beq.n	800cd36 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800cd2c:	e054      	b.n	800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800cd2e:	f7fe fb5f 	bl	800b3f0 <HAL_RCC_GetPCLK1Freq>
 800cd32:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cd34:	e1ed      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cd36:	4b84      	ldr	r3, [pc, #528]	@ (800cf48 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cd3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cd42:	d107      	bne.n	800cd54 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd44:	f107 0318 	add.w	r3, r7, #24
 800cd48:	4618      	mov	r0, r3
 800cd4a:	f000 fa05 	bl	800d158 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cd4e:	69fb      	ldr	r3, [r7, #28]
 800cd50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd52:	e1de      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cd54:	2300      	movs	r3, #0
 800cd56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd58:	e1db      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cd5a:	4b7b      	ldr	r3, [pc, #492]	@ (800cf48 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cd62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cd66:	d107      	bne.n	800cd78 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd68:	f107 030c 	add.w	r3, r7, #12
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	f000 fb47 	bl	800d400 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cd72:	693b      	ldr	r3, [r7, #16]
 800cd74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd76:	e1cc      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cd78:	2300      	movs	r3, #0
 800cd7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd7c:	e1c9      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cd7e:	4b72      	ldr	r3, [pc, #456]	@ (800cf48 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	f003 0304 	and.w	r3, r3, #4
 800cd86:	2b04      	cmp	r3, #4
 800cd88:	d109      	bne.n	800cd9e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd8a:	4b6f      	ldr	r3, [pc, #444]	@ (800cf48 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	08db      	lsrs	r3, r3, #3
 800cd90:	f003 0303 	and.w	r3, r3, #3
 800cd94:	4a6d      	ldr	r2, [pc, #436]	@ (800cf4c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800cd96:	fa22 f303 	lsr.w	r3, r2, r3
 800cd9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd9c:	e1b9      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cda2:	e1b6      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cda4:	4b68      	ldr	r3, [pc, #416]	@ (800cf48 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cdac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cdb0:	d102      	bne.n	800cdb8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800cdb2:	4b67      	ldr	r3, [pc, #412]	@ (800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800cdb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdb6:	e1ac      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cdb8:	2300      	movs	r3, #0
 800cdba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cdbc:	e1a9      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cdbe:	4b62      	ldr	r3, [pc, #392]	@ (800cf48 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cdc6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cdca:	d102      	bne.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800cdcc:	4b61      	ldr	r3, [pc, #388]	@ (800cf54 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800cdce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdd0:	e19f      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cdd6:	e19c      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cddc:	e199      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800cdde:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cde2:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800cde6:	430b      	orrs	r3, r1
 800cde8:	d173      	bne.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800cdea:	4b57      	ldr	r3, [pc, #348]	@ (800cf48 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cdec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cdee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800cdf2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800cdf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdf6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cdfa:	d02f      	beq.n	800ce5c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800cdfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdfe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ce02:	d863      	bhi.n	800cecc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800ce04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d004      	beq.n	800ce14 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800ce0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ce10:	d012      	beq.n	800ce38 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800ce12:	e05b      	b.n	800cecc <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ce14:	4b4c      	ldr	r3, [pc, #304]	@ (800cf48 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ce1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ce20:	d107      	bne.n	800ce32 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce22:	f107 0318 	add.w	r3, r7, #24
 800ce26:	4618      	mov	r0, r3
 800ce28:	f000 f996 	bl	800d158 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ce2c:	69bb      	ldr	r3, [r7, #24]
 800ce2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce30:	e16f      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ce32:	2300      	movs	r3, #0
 800ce34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce36:	e16c      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ce38:	4b43      	ldr	r3, [pc, #268]	@ (800cf48 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ce40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ce44:	d107      	bne.n	800ce56 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce46:	f107 030c 	add.w	r3, r7, #12
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	f000 fad8 	bl	800d400 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ce50:	697b      	ldr	r3, [r7, #20]
 800ce52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce54:	e15d      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ce56:	2300      	movs	r3, #0
 800ce58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce5a:	e15a      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ce5c:	4b3a      	ldr	r3, [pc, #232]	@ (800cf48 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ce5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ce60:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ce64:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ce66:	4b38      	ldr	r3, [pc, #224]	@ (800cf48 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	f003 0304 	and.w	r3, r3, #4
 800ce6e:	2b04      	cmp	r3, #4
 800ce70:	d10c      	bne.n	800ce8c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800ce72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d109      	bne.n	800ce8c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce78:	4b33      	ldr	r3, [pc, #204]	@ (800cf48 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	08db      	lsrs	r3, r3, #3
 800ce7e:	f003 0303 	and.w	r3, r3, #3
 800ce82:	4a32      	ldr	r2, [pc, #200]	@ (800cf4c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800ce84:	fa22 f303 	lsr.w	r3, r2, r3
 800ce88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ce8a:	e01e      	b.n	800ceca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ce8c:	4b2e      	ldr	r3, [pc, #184]	@ (800cf48 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ce94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ce98:	d106      	bne.n	800cea8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800ce9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cea0:	d102      	bne.n	800cea8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cea2:	4b2b      	ldr	r3, [pc, #172]	@ (800cf50 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800cea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cea6:	e010      	b.n	800ceca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cea8:	4b27      	ldr	r3, [pc, #156]	@ (800cf48 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ceb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ceb4:	d106      	bne.n	800cec4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800ceb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ceb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cebc:	d102      	bne.n	800cec4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cebe:	4b25      	ldr	r3, [pc, #148]	@ (800cf54 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800cec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cec2:	e002      	b.n	800ceca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cec4:	2300      	movs	r3, #0
 800cec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800cec8:	e123      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ceca:	e122      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800cecc:	2300      	movs	r3, #0
 800cece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ced0:	e11f      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ced2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ced6:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800ceda:	430b      	orrs	r3, r1
 800cedc:	d13c      	bne.n	800cf58 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800cede:	4b1a      	ldr	r3, [pc, #104]	@ (800cf48 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cee2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cee6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800cee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d004      	beq.n	800cef8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800ceee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cef4:	d012      	beq.n	800cf1c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800cef6:	e023      	b.n	800cf40 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cef8:	4b13      	ldr	r3, [pc, #76]	@ (800cf48 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cf00:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cf04:	d107      	bne.n	800cf16 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cf06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f000 fbcc 	bl	800d6a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cf10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf14:	e0fd      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf16:	2300      	movs	r3, #0
 800cf18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf1a:	e0fa      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cf1c:	4b0a      	ldr	r3, [pc, #40]	@ (800cf48 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cf24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cf28:	d107      	bne.n	800cf3a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf2a:	f107 0318 	add.w	r3, r7, #24
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f000 f912 	bl	800d158 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800cf34:	6a3b      	ldr	r3, [r7, #32]
 800cf36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf38:	e0eb      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf3e:	e0e8      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800cf40:	2300      	movs	r3, #0
 800cf42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf44:	e0e5      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cf46:	bf00      	nop
 800cf48:	58024400 	.word	0x58024400
 800cf4c:	03d09000 	.word	0x03d09000
 800cf50:	003d0900 	.word	0x003d0900
 800cf54:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800cf58:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf5c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800cf60:	430b      	orrs	r3, r1
 800cf62:	f040 8085 	bne.w	800d070 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800cf66:	4b6d      	ldr	r3, [pc, #436]	@ (800d11c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cf68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf6a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800cf6e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800cf70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cf76:	d06b      	beq.n	800d050 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800cf78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cf7e:	d874      	bhi.n	800d06a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800cf80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cf86:	d056      	beq.n	800d036 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800cf88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cf8e:	d86c      	bhi.n	800d06a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800cf90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf92:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800cf96:	d03b      	beq.n	800d010 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800cf98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf9a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800cf9e:	d864      	bhi.n	800d06a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800cfa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfa2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cfa6:	d021      	beq.n	800cfec <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800cfa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cfae:	d85c      	bhi.n	800d06a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800cfb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d004      	beq.n	800cfc0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800cfb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cfbc:	d004      	beq.n	800cfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800cfbe:	e054      	b.n	800d06a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800cfc0:	f000 f8b4 	bl	800d12c <HAL_RCCEx_GetD3PCLK1Freq>
 800cfc4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cfc6:	e0a4      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cfc8:	4b54      	ldr	r3, [pc, #336]	@ (800d11c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cfd0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cfd4:	d107      	bne.n	800cfe6 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cfd6:	f107 0318 	add.w	r3, r7, #24
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f000 f8bc 	bl	800d158 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cfe0:	69fb      	ldr	r3, [r7, #28]
 800cfe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfe4:	e095      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cfea:	e092      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cfec:	4b4b      	ldr	r3, [pc, #300]	@ (800d11c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cff4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cff8:	d107      	bne.n	800d00a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cffa:	f107 030c 	add.w	r3, r7, #12
 800cffe:	4618      	mov	r0, r3
 800d000:	f000 f9fe 	bl	800d400 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d004:	693b      	ldr	r3, [r7, #16]
 800d006:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d008:	e083      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d00a:	2300      	movs	r3, #0
 800d00c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d00e:	e080      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d010:	4b42      	ldr	r3, [pc, #264]	@ (800d11c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	f003 0304 	and.w	r3, r3, #4
 800d018:	2b04      	cmp	r3, #4
 800d01a:	d109      	bne.n	800d030 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d01c:	4b3f      	ldr	r3, [pc, #252]	@ (800d11c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	08db      	lsrs	r3, r3, #3
 800d022:	f003 0303 	and.w	r3, r3, #3
 800d026:	4a3e      	ldr	r2, [pc, #248]	@ (800d120 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800d028:	fa22 f303 	lsr.w	r3, r2, r3
 800d02c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d02e:	e070      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d030:	2300      	movs	r3, #0
 800d032:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d034:	e06d      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d036:	4b39      	ldr	r3, [pc, #228]	@ (800d11c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d03e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d042:	d102      	bne.n	800d04a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800d044:	4b37      	ldr	r3, [pc, #220]	@ (800d124 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d046:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d048:	e063      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d04a:	2300      	movs	r3, #0
 800d04c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d04e:	e060      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d050:	4b32      	ldr	r3, [pc, #200]	@ (800d11c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d058:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d05c:	d102      	bne.n	800d064 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800d05e:	4b32      	ldr	r3, [pc, #200]	@ (800d128 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d060:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d062:	e056      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d064:	2300      	movs	r3, #0
 800d066:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d068:	e053      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800d06a:	2300      	movs	r3, #0
 800d06c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d06e:	e050      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d070:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d074:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800d078:	430b      	orrs	r3, r1
 800d07a:	d148      	bne.n	800d10e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800d07c:	4b27      	ldr	r3, [pc, #156]	@ (800d11c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d07e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d080:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d084:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d088:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d08c:	d02a      	beq.n	800d0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800d08e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d090:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d094:	d838      	bhi.n	800d108 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800d096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d004      	beq.n	800d0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800d09c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d09e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d0a2:	d00d      	beq.n	800d0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800d0a4:	e030      	b.n	800d108 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d0a6:	4b1d      	ldr	r3, [pc, #116]	@ (800d11c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d0ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d0b2:	d102      	bne.n	800d0ba <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800d0b4:	4b1c      	ldr	r3, [pc, #112]	@ (800d128 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d0b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0b8:	e02b      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d0be:	e028      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d0c0:	4b16      	ldr	r3, [pc, #88]	@ (800d11c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d0c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d0cc:	d107      	bne.n	800d0de <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d0ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	f000 fae8 	bl	800d6a8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d0d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0dc:	e019      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d0de:	2300      	movs	r3, #0
 800d0e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d0e2:	e016      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d0e4:	4b0d      	ldr	r3, [pc, #52]	@ (800d11c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d0ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d0f0:	d107      	bne.n	800d102 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d0f2:	f107 0318 	add.w	r3, r7, #24
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f000 f82e 	bl	800d158 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d0fc:	69fb      	ldr	r3, [r7, #28]
 800d0fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d100:	e007      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d102:	2300      	movs	r3, #0
 800d104:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d106:	e004      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d108:	2300      	movs	r3, #0
 800d10a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d10c:	e001      	b.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800d10e:	2300      	movs	r3, #0
 800d110:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800d112:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d114:	4618      	mov	r0, r3
 800d116:	3740      	adds	r7, #64	@ 0x40
 800d118:	46bd      	mov	sp, r7
 800d11a:	bd80      	pop	{r7, pc}
 800d11c:	58024400 	.word	0x58024400
 800d120:	03d09000 	.word	0x03d09000
 800d124:	003d0900 	.word	0x003d0900
 800d128:	007a1200 	.word	0x007a1200

0800d12c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d130:	f7fe f92e 	bl	800b390 <HAL_RCC_GetHCLKFreq>
 800d134:	4602      	mov	r2, r0
 800d136:	4b06      	ldr	r3, [pc, #24]	@ (800d150 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d138:	6a1b      	ldr	r3, [r3, #32]
 800d13a:	091b      	lsrs	r3, r3, #4
 800d13c:	f003 0307 	and.w	r3, r3, #7
 800d140:	4904      	ldr	r1, [pc, #16]	@ (800d154 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d142:	5ccb      	ldrb	r3, [r1, r3]
 800d144:	f003 031f 	and.w	r3, r3, #31
 800d148:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	bd80      	pop	{r7, pc}
 800d150:	58024400 	.word	0x58024400
 800d154:	08011d78 	.word	0x08011d78

0800d158 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d158:	b480      	push	{r7}
 800d15a:	b089      	sub	sp, #36	@ 0x24
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d160:	4ba1      	ldr	r3, [pc, #644]	@ (800d3e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d164:	f003 0303 	and.w	r3, r3, #3
 800d168:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d16a:	4b9f      	ldr	r3, [pc, #636]	@ (800d3e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d16c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d16e:	0b1b      	lsrs	r3, r3, #12
 800d170:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d174:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d176:	4b9c      	ldr	r3, [pc, #624]	@ (800d3e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d17a:	091b      	lsrs	r3, r3, #4
 800d17c:	f003 0301 	and.w	r3, r3, #1
 800d180:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d182:	4b99      	ldr	r3, [pc, #612]	@ (800d3e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d186:	08db      	lsrs	r3, r3, #3
 800d188:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d18c:	693a      	ldr	r2, [r7, #16]
 800d18e:	fb02 f303 	mul.w	r3, r2, r3
 800d192:	ee07 3a90 	vmov	s15, r3
 800d196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d19a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d19e:	697b      	ldr	r3, [r7, #20]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	f000 8111 	beq.w	800d3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d1a6:	69bb      	ldr	r3, [r7, #24]
 800d1a8:	2b02      	cmp	r3, #2
 800d1aa:	f000 8083 	beq.w	800d2b4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d1ae:	69bb      	ldr	r3, [r7, #24]
 800d1b0:	2b02      	cmp	r3, #2
 800d1b2:	f200 80a1 	bhi.w	800d2f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d1b6:	69bb      	ldr	r3, [r7, #24]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d003      	beq.n	800d1c4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d1bc:	69bb      	ldr	r3, [r7, #24]
 800d1be:	2b01      	cmp	r3, #1
 800d1c0:	d056      	beq.n	800d270 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d1c2:	e099      	b.n	800d2f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d1c4:	4b88      	ldr	r3, [pc, #544]	@ (800d3e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	f003 0320 	and.w	r3, r3, #32
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d02d      	beq.n	800d22c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d1d0:	4b85      	ldr	r3, [pc, #532]	@ (800d3e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	08db      	lsrs	r3, r3, #3
 800d1d6:	f003 0303 	and.w	r3, r3, #3
 800d1da:	4a84      	ldr	r2, [pc, #528]	@ (800d3ec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d1dc:	fa22 f303 	lsr.w	r3, r2, r3
 800d1e0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d1e2:	68bb      	ldr	r3, [r7, #8]
 800d1e4:	ee07 3a90 	vmov	s15, r3
 800d1e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1ec:	697b      	ldr	r3, [r7, #20]
 800d1ee:	ee07 3a90 	vmov	s15, r3
 800d1f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1fa:	4b7b      	ldr	r3, [pc, #492]	@ (800d3e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d202:	ee07 3a90 	vmov	s15, r3
 800d206:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d20a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d20e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800d3f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d212:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d216:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d21a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d21e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d222:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d226:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d22a:	e087      	b.n	800d33c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d22c:	697b      	ldr	r3, [r7, #20]
 800d22e:	ee07 3a90 	vmov	s15, r3
 800d232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d236:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800d3f4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d23a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d23e:	4b6a      	ldr	r3, [pc, #424]	@ (800d3e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d246:	ee07 3a90 	vmov	s15, r3
 800d24a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d24e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d252:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800d3f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d256:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d25a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d25e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d26a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d26e:	e065      	b.n	800d33c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d270:	697b      	ldr	r3, [r7, #20]
 800d272:	ee07 3a90 	vmov	s15, r3
 800d276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d27a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800d3f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d27e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d282:	4b59      	ldr	r3, [pc, #356]	@ (800d3e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d28a:	ee07 3a90 	vmov	s15, r3
 800d28e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d292:	ed97 6a03 	vldr	s12, [r7, #12]
 800d296:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800d3f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d29a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d29e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d2a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d2b2:	e043      	b.n	800d33c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d2b4:	697b      	ldr	r3, [r7, #20]
 800d2b6:	ee07 3a90 	vmov	s15, r3
 800d2ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2be:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800d3fc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d2c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2c6:	4b48      	ldr	r3, [pc, #288]	@ (800d3e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d2c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2ce:	ee07 3a90 	vmov	s15, r3
 800d2d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d2da:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800d3f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d2de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d2ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d2f6:	e021      	b.n	800d33c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d2f8:	697b      	ldr	r3, [r7, #20]
 800d2fa:	ee07 3a90 	vmov	s15, r3
 800d2fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d302:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800d3f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d30a:	4b37      	ldr	r3, [pc, #220]	@ (800d3e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d30c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d30e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d312:	ee07 3a90 	vmov	s15, r3
 800d316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d31a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d31e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800d3f0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d32a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d32e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d332:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d336:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d33a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d33c:	4b2a      	ldr	r3, [pc, #168]	@ (800d3e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d33e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d340:	0a5b      	lsrs	r3, r3, #9
 800d342:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d346:	ee07 3a90 	vmov	s15, r3
 800d34a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d34e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d352:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d356:	edd7 6a07 	vldr	s13, [r7, #28]
 800d35a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d35e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d362:	ee17 2a90 	vmov	r2, s15
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d36a:	4b1f      	ldr	r3, [pc, #124]	@ (800d3e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d36c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d36e:	0c1b      	lsrs	r3, r3, #16
 800d370:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d374:	ee07 3a90 	vmov	s15, r3
 800d378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d37c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d380:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d384:	edd7 6a07 	vldr	s13, [r7, #28]
 800d388:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d38c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d390:	ee17 2a90 	vmov	r2, s15
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d398:	4b13      	ldr	r3, [pc, #76]	@ (800d3e8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d39a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d39c:	0e1b      	lsrs	r3, r3, #24
 800d39e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d3a2:	ee07 3a90 	vmov	s15, r3
 800d3a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d3ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d3b2:	edd7 6a07 	vldr	s13, [r7, #28]
 800d3b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d3ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3be:	ee17 2a90 	vmov	r2, s15
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d3c6:	e008      	b.n	800d3da <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	609a      	str	r2, [r3, #8]
}
 800d3da:	bf00      	nop
 800d3dc:	3724      	adds	r7, #36	@ 0x24
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e4:	4770      	bx	lr
 800d3e6:	bf00      	nop
 800d3e8:	58024400 	.word	0x58024400
 800d3ec:	03d09000 	.word	0x03d09000
 800d3f0:	46000000 	.word	0x46000000
 800d3f4:	4c742400 	.word	0x4c742400
 800d3f8:	4a742400 	.word	0x4a742400
 800d3fc:	4af42400 	.word	0x4af42400

0800d400 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d400:	b480      	push	{r7}
 800d402:	b089      	sub	sp, #36	@ 0x24
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d408:	4ba1      	ldr	r3, [pc, #644]	@ (800d690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d40a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d40c:	f003 0303 	and.w	r3, r3, #3
 800d410:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d412:	4b9f      	ldr	r3, [pc, #636]	@ (800d690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d416:	0d1b      	lsrs	r3, r3, #20
 800d418:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d41c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d41e:	4b9c      	ldr	r3, [pc, #624]	@ (800d690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d422:	0a1b      	lsrs	r3, r3, #8
 800d424:	f003 0301 	and.w	r3, r3, #1
 800d428:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d42a:	4b99      	ldr	r3, [pc, #612]	@ (800d690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d42c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d42e:	08db      	lsrs	r3, r3, #3
 800d430:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d434:	693a      	ldr	r2, [r7, #16]
 800d436:	fb02 f303 	mul.w	r3, r2, r3
 800d43a:	ee07 3a90 	vmov	s15, r3
 800d43e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d442:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d446:	697b      	ldr	r3, [r7, #20]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	f000 8111 	beq.w	800d670 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d44e:	69bb      	ldr	r3, [r7, #24]
 800d450:	2b02      	cmp	r3, #2
 800d452:	f000 8083 	beq.w	800d55c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d456:	69bb      	ldr	r3, [r7, #24]
 800d458:	2b02      	cmp	r3, #2
 800d45a:	f200 80a1 	bhi.w	800d5a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d45e:	69bb      	ldr	r3, [r7, #24]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d003      	beq.n	800d46c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d464:	69bb      	ldr	r3, [r7, #24]
 800d466:	2b01      	cmp	r3, #1
 800d468:	d056      	beq.n	800d518 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d46a:	e099      	b.n	800d5a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d46c:	4b88      	ldr	r3, [pc, #544]	@ (800d690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	f003 0320 	and.w	r3, r3, #32
 800d474:	2b00      	cmp	r3, #0
 800d476:	d02d      	beq.n	800d4d4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d478:	4b85      	ldr	r3, [pc, #532]	@ (800d690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	08db      	lsrs	r3, r3, #3
 800d47e:	f003 0303 	and.w	r3, r3, #3
 800d482:	4a84      	ldr	r2, [pc, #528]	@ (800d694 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d484:	fa22 f303 	lsr.w	r3, r2, r3
 800d488:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d48a:	68bb      	ldr	r3, [r7, #8]
 800d48c:	ee07 3a90 	vmov	s15, r3
 800d490:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d494:	697b      	ldr	r3, [r7, #20]
 800d496:	ee07 3a90 	vmov	s15, r3
 800d49a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d49e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4a2:	4b7b      	ldr	r3, [pc, #492]	@ (800d690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d4a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4aa:	ee07 3a90 	vmov	s15, r3
 800d4ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d4b6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800d698 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d4ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d4c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d4d2:	e087      	b.n	800d5e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d4d4:	697b      	ldr	r3, [r7, #20]
 800d4d6:	ee07 3a90 	vmov	s15, r3
 800d4da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4de:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800d69c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d4e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4e6:	4b6a      	ldr	r3, [pc, #424]	@ (800d690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d4e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d4ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4ee:	ee07 3a90 	vmov	s15, r3
 800d4f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d4fa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800d698 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d4fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d506:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d50a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d50e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d512:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d516:	e065      	b.n	800d5e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d518:	697b      	ldr	r3, [r7, #20]
 800d51a:	ee07 3a90 	vmov	s15, r3
 800d51e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d522:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800d6a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d52a:	4b59      	ldr	r3, [pc, #356]	@ (800d690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d52c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d52e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d532:	ee07 3a90 	vmov	s15, r3
 800d536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d53a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d53e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800d698 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d54a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d54e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d552:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d556:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d55a:	e043      	b.n	800d5e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d55c:	697b      	ldr	r3, [r7, #20]
 800d55e:	ee07 3a90 	vmov	s15, r3
 800d562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d566:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800d6a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d56a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d56e:	4b48      	ldr	r3, [pc, #288]	@ (800d690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d576:	ee07 3a90 	vmov	s15, r3
 800d57a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d57e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d582:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800d698 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d58a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d58e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d59a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d59e:	e021      	b.n	800d5e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d5a0:	697b      	ldr	r3, [r7, #20]
 800d5a2:	ee07 3a90 	vmov	s15, r3
 800d5a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5aa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800d6a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d5ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5b2:	4b37      	ldr	r3, [pc, #220]	@ (800d690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d5b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5ba:	ee07 3a90 	vmov	s15, r3
 800d5be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5c6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800d698 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d5ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d5d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d5e2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d5e4:	4b2a      	ldr	r3, [pc, #168]	@ (800d690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d5e8:	0a5b      	lsrs	r3, r3, #9
 800d5ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d5ee:	ee07 3a90 	vmov	s15, r3
 800d5f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d5fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d5fe:	edd7 6a07 	vldr	s13, [r7, #28]
 800d602:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d606:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d60a:	ee17 2a90 	vmov	r2, s15
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d612:	4b1f      	ldr	r3, [pc, #124]	@ (800d690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d616:	0c1b      	lsrs	r3, r3, #16
 800d618:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d61c:	ee07 3a90 	vmov	s15, r3
 800d620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d624:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d628:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d62c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d630:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d634:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d638:	ee17 2a90 	vmov	r2, s15
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d640:	4b13      	ldr	r3, [pc, #76]	@ (800d690 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d644:	0e1b      	lsrs	r3, r3, #24
 800d646:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d64a:	ee07 3a90 	vmov	s15, r3
 800d64e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d652:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d656:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d65a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d65e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d662:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d666:	ee17 2a90 	vmov	r2, s15
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d66e:	e008      	b.n	800d682 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2200      	movs	r2, #0
 800d674:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	2200      	movs	r2, #0
 800d67a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2200      	movs	r2, #0
 800d680:	609a      	str	r2, [r3, #8]
}
 800d682:	bf00      	nop
 800d684:	3724      	adds	r7, #36	@ 0x24
 800d686:	46bd      	mov	sp, r7
 800d688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68c:	4770      	bx	lr
 800d68e:	bf00      	nop
 800d690:	58024400 	.word	0x58024400
 800d694:	03d09000 	.word	0x03d09000
 800d698:	46000000 	.word	0x46000000
 800d69c:	4c742400 	.word	0x4c742400
 800d6a0:	4a742400 	.word	0x4a742400
 800d6a4:	4af42400 	.word	0x4af42400

0800d6a8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d6a8:	b480      	push	{r7}
 800d6aa:	b089      	sub	sp, #36	@ 0x24
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d6b0:	4ba0      	ldr	r3, [pc, #640]	@ (800d934 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6b4:	f003 0303 	and.w	r3, r3, #3
 800d6b8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d6ba:	4b9e      	ldr	r3, [pc, #632]	@ (800d934 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6be:	091b      	lsrs	r3, r3, #4
 800d6c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d6c4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d6c6:	4b9b      	ldr	r3, [pc, #620]	@ (800d934 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6ca:	f003 0301 	and.w	r3, r3, #1
 800d6ce:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d6d0:	4b98      	ldr	r3, [pc, #608]	@ (800d934 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d6d4:	08db      	lsrs	r3, r3, #3
 800d6d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d6da:	693a      	ldr	r2, [r7, #16]
 800d6dc:	fb02 f303 	mul.w	r3, r2, r3
 800d6e0:	ee07 3a90 	vmov	s15, r3
 800d6e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6e8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d6ec:	697b      	ldr	r3, [r7, #20]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	f000 8111 	beq.w	800d916 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d6f4:	69bb      	ldr	r3, [r7, #24]
 800d6f6:	2b02      	cmp	r3, #2
 800d6f8:	f000 8083 	beq.w	800d802 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d6fc:	69bb      	ldr	r3, [r7, #24]
 800d6fe:	2b02      	cmp	r3, #2
 800d700:	f200 80a1 	bhi.w	800d846 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d704:	69bb      	ldr	r3, [r7, #24]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d003      	beq.n	800d712 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d70a:	69bb      	ldr	r3, [r7, #24]
 800d70c:	2b01      	cmp	r3, #1
 800d70e:	d056      	beq.n	800d7be <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d710:	e099      	b.n	800d846 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d712:	4b88      	ldr	r3, [pc, #544]	@ (800d934 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	f003 0320 	and.w	r3, r3, #32
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d02d      	beq.n	800d77a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d71e:	4b85      	ldr	r3, [pc, #532]	@ (800d934 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	08db      	lsrs	r3, r3, #3
 800d724:	f003 0303 	and.w	r3, r3, #3
 800d728:	4a83      	ldr	r2, [pc, #524]	@ (800d938 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d72a:	fa22 f303 	lsr.w	r3, r2, r3
 800d72e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	ee07 3a90 	vmov	s15, r3
 800d736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d73a:	697b      	ldr	r3, [r7, #20]
 800d73c:	ee07 3a90 	vmov	s15, r3
 800d740:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d744:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d748:	4b7a      	ldr	r3, [pc, #488]	@ (800d934 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d74a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d74c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d750:	ee07 3a90 	vmov	s15, r3
 800d754:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d758:	ed97 6a03 	vldr	s12, [r7, #12]
 800d75c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800d93c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d760:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d764:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d768:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d76c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d770:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d774:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d778:	e087      	b.n	800d88a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d77a:	697b      	ldr	r3, [r7, #20]
 800d77c:	ee07 3a90 	vmov	s15, r3
 800d780:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d784:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800d940 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d788:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d78c:	4b69      	ldr	r3, [pc, #420]	@ (800d934 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d78e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d794:	ee07 3a90 	vmov	s15, r3
 800d798:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d79c:	ed97 6a03 	vldr	s12, [r7, #12]
 800d7a0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800d93c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d7a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d7a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d7ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d7b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d7bc:	e065      	b.n	800d88a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d7be:	697b      	ldr	r3, [r7, #20]
 800d7c0:	ee07 3a90 	vmov	s15, r3
 800d7c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7c8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800d944 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d7cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d7d0:	4b58      	ldr	r3, [pc, #352]	@ (800d934 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d7d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7d8:	ee07 3a90 	vmov	s15, r3
 800d7dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d7e0:	ed97 6a03 	vldr	s12, [r7, #12]
 800d7e4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800d93c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d7e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d7ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d7f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d7f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d800:	e043      	b.n	800d88a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d802:	697b      	ldr	r3, [r7, #20]
 800d804:	ee07 3a90 	vmov	s15, r3
 800d808:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d80c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800d948 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d810:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d814:	4b47      	ldr	r3, [pc, #284]	@ (800d934 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d818:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d81c:	ee07 3a90 	vmov	s15, r3
 800d820:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d824:	ed97 6a03 	vldr	s12, [r7, #12]
 800d828:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800d93c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d82c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d830:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d834:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d838:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d83c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d840:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d844:	e021      	b.n	800d88a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d846:	697b      	ldr	r3, [r7, #20]
 800d848:	ee07 3a90 	vmov	s15, r3
 800d84c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d850:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800d940 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d854:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d858:	4b36      	ldr	r3, [pc, #216]	@ (800d934 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d85a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d85c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d860:	ee07 3a90 	vmov	s15, r3
 800d864:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d868:	ed97 6a03 	vldr	s12, [r7, #12]
 800d86c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800d93c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d870:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d874:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d878:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d87c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d880:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d884:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d888:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d88a:	4b2a      	ldr	r3, [pc, #168]	@ (800d934 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d88c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d88e:	0a5b      	lsrs	r3, r3, #9
 800d890:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d894:	ee07 3a90 	vmov	s15, r3
 800d898:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d89c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d8a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d8a4:	edd7 6a07 	vldr	s13, [r7, #28]
 800d8a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d8ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d8b0:	ee17 2a90 	vmov	r2, s15
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d8b8:	4b1e      	ldr	r3, [pc, #120]	@ (800d934 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d8ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d8bc:	0c1b      	lsrs	r3, r3, #16
 800d8be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d8c2:	ee07 3a90 	vmov	s15, r3
 800d8c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d8ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d8d2:	edd7 6a07 	vldr	s13, [r7, #28]
 800d8d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d8da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d8de:	ee17 2a90 	vmov	r2, s15
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d8e6:	4b13      	ldr	r3, [pc, #76]	@ (800d934 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d8e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d8ea:	0e1b      	lsrs	r3, r3, #24
 800d8ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d8f0:	ee07 3a90 	vmov	s15, r3
 800d8f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d8fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d900:	edd7 6a07 	vldr	s13, [r7, #28]
 800d904:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d908:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d90c:	ee17 2a90 	vmov	r2, s15
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d914:	e008      	b.n	800d928 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2200      	movs	r2, #0
 800d91a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2200      	movs	r2, #0
 800d920:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2200      	movs	r2, #0
 800d926:	609a      	str	r2, [r3, #8]
}
 800d928:	bf00      	nop
 800d92a:	3724      	adds	r7, #36	@ 0x24
 800d92c:	46bd      	mov	sp, r7
 800d92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d932:	4770      	bx	lr
 800d934:	58024400 	.word	0x58024400
 800d938:	03d09000 	.word	0x03d09000
 800d93c:	46000000 	.word	0x46000000
 800d940:	4c742400 	.word	0x4c742400
 800d944:	4a742400 	.word	0x4a742400
 800d948:	4af42400 	.word	0x4af42400

0800d94c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b084      	sub	sp, #16
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
 800d954:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d956:	2300      	movs	r3, #0
 800d958:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d95a:	4b53      	ldr	r3, [pc, #332]	@ (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800d95c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d95e:	f003 0303 	and.w	r3, r3, #3
 800d962:	2b03      	cmp	r3, #3
 800d964:	d101      	bne.n	800d96a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d966:	2301      	movs	r3, #1
 800d968:	e099      	b.n	800da9e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d96a:	4b4f      	ldr	r3, [pc, #316]	@ (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	4a4e      	ldr	r2, [pc, #312]	@ (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800d970:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800d974:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d976:	f7f6 fb51 	bl	800401c <HAL_GetTick>
 800d97a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d97c:	e008      	b.n	800d990 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d97e:	f7f6 fb4d 	bl	800401c <HAL_GetTick>
 800d982:	4602      	mov	r2, r0
 800d984:	68bb      	ldr	r3, [r7, #8]
 800d986:	1ad3      	subs	r3, r2, r3
 800d988:	2b02      	cmp	r3, #2
 800d98a:	d901      	bls.n	800d990 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d98c:	2303      	movs	r3, #3
 800d98e:	e086      	b.n	800da9e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d990:	4b45      	ldr	r3, [pc, #276]	@ (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d1f0      	bne.n	800d97e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d99c:	4b42      	ldr	r3, [pc, #264]	@ (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800d99e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9a0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	031b      	lsls	r3, r3, #12
 800d9aa:	493f      	ldr	r1, [pc, #252]	@ (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800d9ac:	4313      	orrs	r3, r2
 800d9ae:	628b      	str	r3, [r1, #40]	@ 0x28
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	685b      	ldr	r3, [r3, #4]
 800d9b4:	3b01      	subs	r3, #1
 800d9b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	689b      	ldr	r3, [r3, #8]
 800d9be:	3b01      	subs	r3, #1
 800d9c0:	025b      	lsls	r3, r3, #9
 800d9c2:	b29b      	uxth	r3, r3
 800d9c4:	431a      	orrs	r2, r3
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	68db      	ldr	r3, [r3, #12]
 800d9ca:	3b01      	subs	r3, #1
 800d9cc:	041b      	lsls	r3, r3, #16
 800d9ce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800d9d2:	431a      	orrs	r2, r3
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	691b      	ldr	r3, [r3, #16]
 800d9d8:	3b01      	subs	r3, #1
 800d9da:	061b      	lsls	r3, r3, #24
 800d9dc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800d9e0:	4931      	ldr	r1, [pc, #196]	@ (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800d9e2:	4313      	orrs	r3, r2
 800d9e4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d9e6:	4b30      	ldr	r3, [pc, #192]	@ (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800d9e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	695b      	ldr	r3, [r3, #20]
 800d9f2:	492d      	ldr	r1, [pc, #180]	@ (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800d9f4:	4313      	orrs	r3, r2
 800d9f6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d9f8:	4b2b      	ldr	r3, [pc, #172]	@ (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800d9fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9fc:	f023 0220 	bic.w	r2, r3, #32
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	699b      	ldr	r3, [r3, #24]
 800da04:	4928      	ldr	r1, [pc, #160]	@ (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800da06:	4313      	orrs	r3, r2
 800da08:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800da0a:	4b27      	ldr	r3, [pc, #156]	@ (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800da0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da0e:	4a26      	ldr	r2, [pc, #152]	@ (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800da10:	f023 0310 	bic.w	r3, r3, #16
 800da14:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800da16:	4b24      	ldr	r3, [pc, #144]	@ (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800da18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800da1a:	4b24      	ldr	r3, [pc, #144]	@ (800daac <RCCEx_PLL2_Config+0x160>)
 800da1c:	4013      	ands	r3, r2
 800da1e:	687a      	ldr	r2, [r7, #4]
 800da20:	69d2      	ldr	r2, [r2, #28]
 800da22:	00d2      	lsls	r2, r2, #3
 800da24:	4920      	ldr	r1, [pc, #128]	@ (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800da26:	4313      	orrs	r3, r2
 800da28:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800da2a:	4b1f      	ldr	r3, [pc, #124]	@ (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800da2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da2e:	4a1e      	ldr	r2, [pc, #120]	@ (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800da30:	f043 0310 	orr.w	r3, r3, #16
 800da34:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d106      	bne.n	800da4a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800da3c:	4b1a      	ldr	r3, [pc, #104]	@ (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800da3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da40:	4a19      	ldr	r2, [pc, #100]	@ (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800da42:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800da46:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800da48:	e00f      	b.n	800da6a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	2b01      	cmp	r3, #1
 800da4e:	d106      	bne.n	800da5e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800da50:	4b15      	ldr	r3, [pc, #84]	@ (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800da52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da54:	4a14      	ldr	r2, [pc, #80]	@ (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800da56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800da5a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800da5c:	e005      	b.n	800da6a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800da5e:	4b12      	ldr	r3, [pc, #72]	@ (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800da60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da62:	4a11      	ldr	r2, [pc, #68]	@ (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800da64:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800da68:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800da6a:	4b0f      	ldr	r3, [pc, #60]	@ (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	4a0e      	ldr	r2, [pc, #56]	@ (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800da70:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800da74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800da76:	f7f6 fad1 	bl	800401c <HAL_GetTick>
 800da7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800da7c:	e008      	b.n	800da90 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800da7e:	f7f6 facd 	bl	800401c <HAL_GetTick>
 800da82:	4602      	mov	r2, r0
 800da84:	68bb      	ldr	r3, [r7, #8]
 800da86:	1ad3      	subs	r3, r2, r3
 800da88:	2b02      	cmp	r3, #2
 800da8a:	d901      	bls.n	800da90 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800da8c:	2303      	movs	r3, #3
 800da8e:	e006      	b.n	800da9e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800da90:	4b05      	ldr	r3, [pc, #20]	@ (800daa8 <RCCEx_PLL2_Config+0x15c>)
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d0f0      	beq.n	800da7e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800da9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	3710      	adds	r7, #16
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}
 800daa6:	bf00      	nop
 800daa8:	58024400 	.word	0x58024400
 800daac:	ffff0007 	.word	0xffff0007

0800dab0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b084      	sub	sp, #16
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
 800dab8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800daba:	2300      	movs	r3, #0
 800dabc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dabe:	4b53      	ldr	r3, [pc, #332]	@ (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800dac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dac2:	f003 0303 	and.w	r3, r3, #3
 800dac6:	2b03      	cmp	r3, #3
 800dac8:	d101      	bne.n	800dace <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800daca:	2301      	movs	r3, #1
 800dacc:	e099      	b.n	800dc02 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800dace:	4b4f      	ldr	r3, [pc, #316]	@ (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	4a4e      	ldr	r2, [pc, #312]	@ (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800dad4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dad8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dada:	f7f6 fa9f 	bl	800401c <HAL_GetTick>
 800dade:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dae0:	e008      	b.n	800daf4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dae2:	f7f6 fa9b 	bl	800401c <HAL_GetTick>
 800dae6:	4602      	mov	r2, r0
 800dae8:	68bb      	ldr	r3, [r7, #8]
 800daea:	1ad3      	subs	r3, r2, r3
 800daec:	2b02      	cmp	r3, #2
 800daee:	d901      	bls.n	800daf4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800daf0:	2303      	movs	r3, #3
 800daf2:	e086      	b.n	800dc02 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800daf4:	4b45      	ldr	r3, [pc, #276]	@ (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d1f0      	bne.n	800dae2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800db00:	4b42      	ldr	r3, [pc, #264]	@ (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800db02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db04:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	051b      	lsls	r3, r3, #20
 800db0e:	493f      	ldr	r1, [pc, #252]	@ (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800db10:	4313      	orrs	r3, r2
 800db12:	628b      	str	r3, [r1, #40]	@ 0x28
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	685b      	ldr	r3, [r3, #4]
 800db18:	3b01      	subs	r3, #1
 800db1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	689b      	ldr	r3, [r3, #8]
 800db22:	3b01      	subs	r3, #1
 800db24:	025b      	lsls	r3, r3, #9
 800db26:	b29b      	uxth	r3, r3
 800db28:	431a      	orrs	r2, r3
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	68db      	ldr	r3, [r3, #12]
 800db2e:	3b01      	subs	r3, #1
 800db30:	041b      	lsls	r3, r3, #16
 800db32:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800db36:	431a      	orrs	r2, r3
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	691b      	ldr	r3, [r3, #16]
 800db3c:	3b01      	subs	r3, #1
 800db3e:	061b      	lsls	r3, r3, #24
 800db40:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800db44:	4931      	ldr	r1, [pc, #196]	@ (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800db46:	4313      	orrs	r3, r2
 800db48:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800db4a:	4b30      	ldr	r3, [pc, #192]	@ (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800db4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db4e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	695b      	ldr	r3, [r3, #20]
 800db56:	492d      	ldr	r1, [pc, #180]	@ (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800db58:	4313      	orrs	r3, r2
 800db5a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800db5c:	4b2b      	ldr	r3, [pc, #172]	@ (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800db5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db60:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	699b      	ldr	r3, [r3, #24]
 800db68:	4928      	ldr	r1, [pc, #160]	@ (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800db6a:	4313      	orrs	r3, r2
 800db6c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800db6e:	4b27      	ldr	r3, [pc, #156]	@ (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800db70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db72:	4a26      	ldr	r2, [pc, #152]	@ (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800db74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800db78:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800db7a:	4b24      	ldr	r3, [pc, #144]	@ (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800db7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800db7e:	4b24      	ldr	r3, [pc, #144]	@ (800dc10 <RCCEx_PLL3_Config+0x160>)
 800db80:	4013      	ands	r3, r2
 800db82:	687a      	ldr	r2, [r7, #4]
 800db84:	69d2      	ldr	r2, [r2, #28]
 800db86:	00d2      	lsls	r2, r2, #3
 800db88:	4920      	ldr	r1, [pc, #128]	@ (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800db8a:	4313      	orrs	r3, r2
 800db8c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800db8e:	4b1f      	ldr	r3, [pc, #124]	@ (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800db90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db92:	4a1e      	ldr	r2, [pc, #120]	@ (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800db94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800db98:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d106      	bne.n	800dbae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800dba0:	4b1a      	ldr	r3, [pc, #104]	@ (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800dba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dba4:	4a19      	ldr	r2, [pc, #100]	@ (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800dba6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800dbaa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dbac:	e00f      	b.n	800dbce <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	2b01      	cmp	r3, #1
 800dbb2:	d106      	bne.n	800dbc2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800dbb4:	4b15      	ldr	r3, [pc, #84]	@ (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800dbb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbb8:	4a14      	ldr	r2, [pc, #80]	@ (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800dbba:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800dbbe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dbc0:	e005      	b.n	800dbce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800dbc2:	4b12      	ldr	r3, [pc, #72]	@ (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800dbc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbc6:	4a11      	ldr	r2, [pc, #68]	@ (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800dbc8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800dbcc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800dbce:	4b0f      	ldr	r3, [pc, #60]	@ (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	4a0e      	ldr	r2, [pc, #56]	@ (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800dbd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dbd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dbda:	f7f6 fa1f 	bl	800401c <HAL_GetTick>
 800dbde:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dbe0:	e008      	b.n	800dbf4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dbe2:	f7f6 fa1b 	bl	800401c <HAL_GetTick>
 800dbe6:	4602      	mov	r2, r0
 800dbe8:	68bb      	ldr	r3, [r7, #8]
 800dbea:	1ad3      	subs	r3, r2, r3
 800dbec:	2b02      	cmp	r3, #2
 800dbee:	d901      	bls.n	800dbf4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800dbf0:	2303      	movs	r3, #3
 800dbf2:	e006      	b.n	800dc02 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dbf4:	4b05      	ldr	r3, [pc, #20]	@ (800dc0c <RCCEx_PLL3_Config+0x15c>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d0f0      	beq.n	800dbe2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800dc00:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc02:	4618      	mov	r0, r3
 800dc04:	3710      	adds	r7, #16
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}
 800dc0a:	bf00      	nop
 800dc0c:	58024400 	.word	0x58024400
 800dc10:	ffff0007 	.word	0xffff0007

0800dc14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b082      	sub	sp, #8
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d101      	bne.n	800dc26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800dc22:	2301      	movs	r3, #1
 800dc24:	e049      	b.n	800dcba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dc2c:	b2db      	uxtb	r3, r3
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d106      	bne.n	800dc40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	2200      	movs	r2, #0
 800dc36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800dc3a:	6878      	ldr	r0, [r7, #4]
 800dc3c:	f7f5 fed4 	bl	80039e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2202      	movs	r2, #2
 800dc44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681a      	ldr	r2, [r3, #0]
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	3304      	adds	r3, #4
 800dc50:	4619      	mov	r1, r3
 800dc52:	4610      	mov	r0, r2
 800dc54:	f000 fbf0 	bl	800e438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2201      	movs	r2, #1
 800dc5c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2201      	movs	r2, #1
 800dc64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	2201      	movs	r2, #1
 800dc6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	2201      	movs	r2, #1
 800dc74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2201      	movs	r2, #1
 800dc7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	2201      	movs	r2, #1
 800dc84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	2201      	movs	r2, #1
 800dc8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2201      	movs	r2, #1
 800dc94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	2201      	movs	r2, #1
 800dc9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	2201      	movs	r2, #1
 800dca4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	2201      	movs	r2, #1
 800dcac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	2201      	movs	r2, #1
 800dcb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800dcb8:	2300      	movs	r3, #0
}
 800dcba:	4618      	mov	r0, r3
 800dcbc:	3708      	adds	r7, #8
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	bd80      	pop	{r7, pc}
	...

0800dcc4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b084      	sub	sp, #16
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
 800dccc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800dcce:	683b      	ldr	r3, [r7, #0]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d109      	bne.n	800dce8 <HAL_TIM_PWM_Start+0x24>
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800dcda:	b2db      	uxtb	r3, r3
 800dcdc:	2b01      	cmp	r3, #1
 800dcde:	bf14      	ite	ne
 800dce0:	2301      	movne	r3, #1
 800dce2:	2300      	moveq	r3, #0
 800dce4:	b2db      	uxtb	r3, r3
 800dce6:	e03c      	b.n	800dd62 <HAL_TIM_PWM_Start+0x9e>
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	2b04      	cmp	r3, #4
 800dcec:	d109      	bne.n	800dd02 <HAL_TIM_PWM_Start+0x3e>
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800dcf4:	b2db      	uxtb	r3, r3
 800dcf6:	2b01      	cmp	r3, #1
 800dcf8:	bf14      	ite	ne
 800dcfa:	2301      	movne	r3, #1
 800dcfc:	2300      	moveq	r3, #0
 800dcfe:	b2db      	uxtb	r3, r3
 800dd00:	e02f      	b.n	800dd62 <HAL_TIM_PWM_Start+0x9e>
 800dd02:	683b      	ldr	r3, [r7, #0]
 800dd04:	2b08      	cmp	r3, #8
 800dd06:	d109      	bne.n	800dd1c <HAL_TIM_PWM_Start+0x58>
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800dd0e:	b2db      	uxtb	r3, r3
 800dd10:	2b01      	cmp	r3, #1
 800dd12:	bf14      	ite	ne
 800dd14:	2301      	movne	r3, #1
 800dd16:	2300      	moveq	r3, #0
 800dd18:	b2db      	uxtb	r3, r3
 800dd1a:	e022      	b.n	800dd62 <HAL_TIM_PWM_Start+0x9e>
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	2b0c      	cmp	r3, #12
 800dd20:	d109      	bne.n	800dd36 <HAL_TIM_PWM_Start+0x72>
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800dd28:	b2db      	uxtb	r3, r3
 800dd2a:	2b01      	cmp	r3, #1
 800dd2c:	bf14      	ite	ne
 800dd2e:	2301      	movne	r3, #1
 800dd30:	2300      	moveq	r3, #0
 800dd32:	b2db      	uxtb	r3, r3
 800dd34:	e015      	b.n	800dd62 <HAL_TIM_PWM_Start+0x9e>
 800dd36:	683b      	ldr	r3, [r7, #0]
 800dd38:	2b10      	cmp	r3, #16
 800dd3a:	d109      	bne.n	800dd50 <HAL_TIM_PWM_Start+0x8c>
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800dd42:	b2db      	uxtb	r3, r3
 800dd44:	2b01      	cmp	r3, #1
 800dd46:	bf14      	ite	ne
 800dd48:	2301      	movne	r3, #1
 800dd4a:	2300      	moveq	r3, #0
 800dd4c:	b2db      	uxtb	r3, r3
 800dd4e:	e008      	b.n	800dd62 <HAL_TIM_PWM_Start+0x9e>
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800dd56:	b2db      	uxtb	r3, r3
 800dd58:	2b01      	cmp	r3, #1
 800dd5a:	bf14      	ite	ne
 800dd5c:	2301      	movne	r3, #1
 800dd5e:	2300      	moveq	r3, #0
 800dd60:	b2db      	uxtb	r3, r3
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d001      	beq.n	800dd6a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800dd66:	2301      	movs	r3, #1
 800dd68:	e0ab      	b.n	800dec2 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d104      	bne.n	800dd7a <HAL_TIM_PWM_Start+0xb6>
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2202      	movs	r2, #2
 800dd74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800dd78:	e023      	b.n	800ddc2 <HAL_TIM_PWM_Start+0xfe>
 800dd7a:	683b      	ldr	r3, [r7, #0]
 800dd7c:	2b04      	cmp	r3, #4
 800dd7e:	d104      	bne.n	800dd8a <HAL_TIM_PWM_Start+0xc6>
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2202      	movs	r2, #2
 800dd84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800dd88:	e01b      	b.n	800ddc2 <HAL_TIM_PWM_Start+0xfe>
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	2b08      	cmp	r3, #8
 800dd8e:	d104      	bne.n	800dd9a <HAL_TIM_PWM_Start+0xd6>
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2202      	movs	r2, #2
 800dd94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800dd98:	e013      	b.n	800ddc2 <HAL_TIM_PWM_Start+0xfe>
 800dd9a:	683b      	ldr	r3, [r7, #0]
 800dd9c:	2b0c      	cmp	r3, #12
 800dd9e:	d104      	bne.n	800ddaa <HAL_TIM_PWM_Start+0xe6>
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2202      	movs	r2, #2
 800dda4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800dda8:	e00b      	b.n	800ddc2 <HAL_TIM_PWM_Start+0xfe>
 800ddaa:	683b      	ldr	r3, [r7, #0]
 800ddac:	2b10      	cmp	r3, #16
 800ddae:	d104      	bne.n	800ddba <HAL_TIM_PWM_Start+0xf6>
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	2202      	movs	r2, #2
 800ddb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ddb8:	e003      	b.n	800ddc2 <HAL_TIM_PWM_Start+0xfe>
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	2202      	movs	r2, #2
 800ddbe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	2201      	movs	r2, #1
 800ddc8:	6839      	ldr	r1, [r7, #0]
 800ddca:	4618      	mov	r0, r3
 800ddcc:	f000 ffe6 	bl	800ed9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	4a3d      	ldr	r2, [pc, #244]	@ (800decc <HAL_TIM_PWM_Start+0x208>)
 800ddd6:	4293      	cmp	r3, r2
 800ddd8:	d013      	beq.n	800de02 <HAL_TIM_PWM_Start+0x13e>
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	4a3c      	ldr	r2, [pc, #240]	@ (800ded0 <HAL_TIM_PWM_Start+0x20c>)
 800dde0:	4293      	cmp	r3, r2
 800dde2:	d00e      	beq.n	800de02 <HAL_TIM_PWM_Start+0x13e>
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	4a3a      	ldr	r2, [pc, #232]	@ (800ded4 <HAL_TIM_PWM_Start+0x210>)
 800ddea:	4293      	cmp	r3, r2
 800ddec:	d009      	beq.n	800de02 <HAL_TIM_PWM_Start+0x13e>
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	4a39      	ldr	r2, [pc, #228]	@ (800ded8 <HAL_TIM_PWM_Start+0x214>)
 800ddf4:	4293      	cmp	r3, r2
 800ddf6:	d004      	beq.n	800de02 <HAL_TIM_PWM_Start+0x13e>
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	4a37      	ldr	r2, [pc, #220]	@ (800dedc <HAL_TIM_PWM_Start+0x218>)
 800ddfe:	4293      	cmp	r3, r2
 800de00:	d101      	bne.n	800de06 <HAL_TIM_PWM_Start+0x142>
 800de02:	2301      	movs	r3, #1
 800de04:	e000      	b.n	800de08 <HAL_TIM_PWM_Start+0x144>
 800de06:	2300      	movs	r3, #0
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d007      	beq.n	800de1c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800de1a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	4a2a      	ldr	r2, [pc, #168]	@ (800decc <HAL_TIM_PWM_Start+0x208>)
 800de22:	4293      	cmp	r3, r2
 800de24:	d02c      	beq.n	800de80 <HAL_TIM_PWM_Start+0x1bc>
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800de2e:	d027      	beq.n	800de80 <HAL_TIM_PWM_Start+0x1bc>
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	4a2a      	ldr	r2, [pc, #168]	@ (800dee0 <HAL_TIM_PWM_Start+0x21c>)
 800de36:	4293      	cmp	r3, r2
 800de38:	d022      	beq.n	800de80 <HAL_TIM_PWM_Start+0x1bc>
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	4a29      	ldr	r2, [pc, #164]	@ (800dee4 <HAL_TIM_PWM_Start+0x220>)
 800de40:	4293      	cmp	r3, r2
 800de42:	d01d      	beq.n	800de80 <HAL_TIM_PWM_Start+0x1bc>
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	4a27      	ldr	r2, [pc, #156]	@ (800dee8 <HAL_TIM_PWM_Start+0x224>)
 800de4a:	4293      	cmp	r3, r2
 800de4c:	d018      	beq.n	800de80 <HAL_TIM_PWM_Start+0x1bc>
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	4a1f      	ldr	r2, [pc, #124]	@ (800ded0 <HAL_TIM_PWM_Start+0x20c>)
 800de54:	4293      	cmp	r3, r2
 800de56:	d013      	beq.n	800de80 <HAL_TIM_PWM_Start+0x1bc>
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	4a23      	ldr	r2, [pc, #140]	@ (800deec <HAL_TIM_PWM_Start+0x228>)
 800de5e:	4293      	cmp	r3, r2
 800de60:	d00e      	beq.n	800de80 <HAL_TIM_PWM_Start+0x1bc>
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	4a1b      	ldr	r2, [pc, #108]	@ (800ded4 <HAL_TIM_PWM_Start+0x210>)
 800de68:	4293      	cmp	r3, r2
 800de6a:	d009      	beq.n	800de80 <HAL_TIM_PWM_Start+0x1bc>
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	4a1f      	ldr	r2, [pc, #124]	@ (800def0 <HAL_TIM_PWM_Start+0x22c>)
 800de72:	4293      	cmp	r3, r2
 800de74:	d004      	beq.n	800de80 <HAL_TIM_PWM_Start+0x1bc>
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	4a1e      	ldr	r2, [pc, #120]	@ (800def4 <HAL_TIM_PWM_Start+0x230>)
 800de7c:	4293      	cmp	r3, r2
 800de7e:	d115      	bne.n	800deac <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	689a      	ldr	r2, [r3, #8]
 800de86:	4b1c      	ldr	r3, [pc, #112]	@ (800def8 <HAL_TIM_PWM_Start+0x234>)
 800de88:	4013      	ands	r3, r2
 800de8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	2b06      	cmp	r3, #6
 800de90:	d015      	beq.n	800debe <HAL_TIM_PWM_Start+0x1fa>
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800de98:	d011      	beq.n	800debe <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	681a      	ldr	r2, [r3, #0]
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	f042 0201 	orr.w	r2, r2, #1
 800dea8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800deaa:	e008      	b.n	800debe <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	681a      	ldr	r2, [r3, #0]
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	f042 0201 	orr.w	r2, r2, #1
 800deba:	601a      	str	r2, [r3, #0]
 800debc:	e000      	b.n	800dec0 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800debe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800dec0:	2300      	movs	r3, #0
}
 800dec2:	4618      	mov	r0, r3
 800dec4:	3710      	adds	r7, #16
 800dec6:	46bd      	mov	sp, r7
 800dec8:	bd80      	pop	{r7, pc}
 800deca:	bf00      	nop
 800decc:	40010000 	.word	0x40010000
 800ded0:	40010400 	.word	0x40010400
 800ded4:	40014000 	.word	0x40014000
 800ded8:	40014400 	.word	0x40014400
 800dedc:	40014800 	.word	0x40014800
 800dee0:	40000400 	.word	0x40000400
 800dee4:	40000800 	.word	0x40000800
 800dee8:	40000c00 	.word	0x40000c00
 800deec:	40001800 	.word	0x40001800
 800def0:	4000e000 	.word	0x4000e000
 800def4:	4000e400 	.word	0x4000e400
 800def8:	00010007 	.word	0x00010007

0800defc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b082      	sub	sp, #8
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
 800df04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	2200      	movs	r2, #0
 800df0c:	6839      	ldr	r1, [r7, #0]
 800df0e:	4618      	mov	r0, r3
 800df10:	f000 ff44 	bl	800ed9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	4a3e      	ldr	r2, [pc, #248]	@ (800e014 <HAL_TIM_PWM_Stop+0x118>)
 800df1a:	4293      	cmp	r3, r2
 800df1c:	d013      	beq.n	800df46 <HAL_TIM_PWM_Stop+0x4a>
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	4a3d      	ldr	r2, [pc, #244]	@ (800e018 <HAL_TIM_PWM_Stop+0x11c>)
 800df24:	4293      	cmp	r3, r2
 800df26:	d00e      	beq.n	800df46 <HAL_TIM_PWM_Stop+0x4a>
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	4a3b      	ldr	r2, [pc, #236]	@ (800e01c <HAL_TIM_PWM_Stop+0x120>)
 800df2e:	4293      	cmp	r3, r2
 800df30:	d009      	beq.n	800df46 <HAL_TIM_PWM_Stop+0x4a>
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	4a3a      	ldr	r2, [pc, #232]	@ (800e020 <HAL_TIM_PWM_Stop+0x124>)
 800df38:	4293      	cmp	r3, r2
 800df3a:	d004      	beq.n	800df46 <HAL_TIM_PWM_Stop+0x4a>
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	4a38      	ldr	r2, [pc, #224]	@ (800e024 <HAL_TIM_PWM_Stop+0x128>)
 800df42:	4293      	cmp	r3, r2
 800df44:	d101      	bne.n	800df4a <HAL_TIM_PWM_Stop+0x4e>
 800df46:	2301      	movs	r3, #1
 800df48:	e000      	b.n	800df4c <HAL_TIM_PWM_Stop+0x50>
 800df4a:	2300      	movs	r3, #0
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d017      	beq.n	800df80 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	6a1a      	ldr	r2, [r3, #32]
 800df56:	f241 1311 	movw	r3, #4369	@ 0x1111
 800df5a:	4013      	ands	r3, r2
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d10f      	bne.n	800df80 <HAL_TIM_PWM_Stop+0x84>
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	6a1a      	ldr	r2, [r3, #32]
 800df66:	f240 4344 	movw	r3, #1092	@ 0x444
 800df6a:	4013      	ands	r3, r2
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d107      	bne.n	800df80 <HAL_TIM_PWM_Stop+0x84>
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800df7e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	6a1a      	ldr	r2, [r3, #32]
 800df86:	f241 1311 	movw	r3, #4369	@ 0x1111
 800df8a:	4013      	ands	r3, r2
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d10f      	bne.n	800dfb0 <HAL_TIM_PWM_Stop+0xb4>
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	6a1a      	ldr	r2, [r3, #32]
 800df96:	f240 4344 	movw	r3, #1092	@ 0x444
 800df9a:	4013      	ands	r3, r2
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d107      	bne.n	800dfb0 <HAL_TIM_PWM_Stop+0xb4>
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	681a      	ldr	r2, [r3, #0]
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	f022 0201 	bic.w	r2, r2, #1
 800dfae:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800dfb0:	683b      	ldr	r3, [r7, #0]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d104      	bne.n	800dfc0 <HAL_TIM_PWM_Stop+0xc4>
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2201      	movs	r2, #1
 800dfba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800dfbe:	e023      	b.n	800e008 <HAL_TIM_PWM_Stop+0x10c>
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	2b04      	cmp	r3, #4
 800dfc4:	d104      	bne.n	800dfd0 <HAL_TIM_PWM_Stop+0xd4>
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	2201      	movs	r2, #1
 800dfca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800dfce:	e01b      	b.n	800e008 <HAL_TIM_PWM_Stop+0x10c>
 800dfd0:	683b      	ldr	r3, [r7, #0]
 800dfd2:	2b08      	cmp	r3, #8
 800dfd4:	d104      	bne.n	800dfe0 <HAL_TIM_PWM_Stop+0xe4>
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	2201      	movs	r2, #1
 800dfda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800dfde:	e013      	b.n	800e008 <HAL_TIM_PWM_Stop+0x10c>
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	2b0c      	cmp	r3, #12
 800dfe4:	d104      	bne.n	800dff0 <HAL_TIM_PWM_Stop+0xf4>
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	2201      	movs	r2, #1
 800dfea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800dfee:	e00b      	b.n	800e008 <HAL_TIM_PWM_Stop+0x10c>
 800dff0:	683b      	ldr	r3, [r7, #0]
 800dff2:	2b10      	cmp	r3, #16
 800dff4:	d104      	bne.n	800e000 <HAL_TIM_PWM_Stop+0x104>
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	2201      	movs	r2, #1
 800dffa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800dffe:	e003      	b.n	800e008 <HAL_TIM_PWM_Stop+0x10c>
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	2201      	movs	r2, #1
 800e004:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800e008:	2300      	movs	r3, #0
}
 800e00a:	4618      	mov	r0, r3
 800e00c:	3708      	adds	r7, #8
 800e00e:	46bd      	mov	sp, r7
 800e010:	bd80      	pop	{r7, pc}
 800e012:	bf00      	nop
 800e014:	40010000 	.word	0x40010000
 800e018:	40010400 	.word	0x40010400
 800e01c:	40014000 	.word	0x40014000
 800e020:	40014400 	.word	0x40014400
 800e024:	40014800 	.word	0x40014800

0800e028 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b082      	sub	sp, #8
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d101      	bne.n	800e03a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800e036:	2301      	movs	r3, #1
 800e038:	e049      	b.n	800e0ce <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e040:	b2db      	uxtb	r3, r3
 800e042:	2b00      	cmp	r3, #0
 800e044:	d106      	bne.n	800e054 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	2200      	movs	r2, #0
 800e04a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800e04e:	6878      	ldr	r0, [r7, #4]
 800e050:	f7f5 fd18 	bl	8003a84 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	2202      	movs	r2, #2
 800e058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681a      	ldr	r2, [r3, #0]
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	3304      	adds	r3, #4
 800e064:	4619      	mov	r1, r3
 800e066:	4610      	mov	r0, r2
 800e068:	f000 f9e6 	bl	800e438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	2201      	movs	r2, #1
 800e070:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2201      	movs	r2, #1
 800e078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2201      	movs	r2, #1
 800e080:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	2201      	movs	r2, #1
 800e088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2201      	movs	r2, #1
 800e090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	2201      	movs	r2, #1
 800e098:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	2201      	movs	r2, #1
 800e0a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2201      	movs	r2, #1
 800e0a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2201      	movs	r2, #1
 800e0b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2201      	movs	r2, #1
 800e0b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	2201      	movs	r2, #1
 800e0c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	2201      	movs	r2, #1
 800e0c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e0cc:	2300      	movs	r3, #0
}
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	3708      	adds	r7, #8
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}

0800e0d6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800e0d6:	b580      	push	{r7, lr}
 800e0d8:	b086      	sub	sp, #24
 800e0da:	af00      	add	r7, sp, #0
 800e0dc:	60f8      	str	r0, [r7, #12]
 800e0de:	60b9      	str	r1, [r7, #8]
 800e0e0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e0ec:	2b01      	cmp	r3, #1
 800e0ee:	d101      	bne.n	800e0f4 <HAL_TIM_IC_ConfigChannel+0x1e>
 800e0f0:	2302      	movs	r3, #2
 800e0f2:	e088      	b.n	800e206 <HAL_TIM_IC_ConfigChannel+0x130>
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	2201      	movs	r2, #1
 800e0f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d11b      	bne.n	800e13a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800e106:	68bb      	ldr	r3, [r7, #8]
 800e108:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800e10a:	68bb      	ldr	r3, [r7, #8]
 800e10c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800e10e:	68bb      	ldr	r3, [r7, #8]
 800e110:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800e112:	f000 fd0d 	bl	800eb30 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	699a      	ldr	r2, [r3, #24]
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	f022 020c 	bic.w	r2, r2, #12
 800e124:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	6999      	ldr	r1, [r3, #24]
 800e12c:	68bb      	ldr	r3, [r7, #8]
 800e12e:	689a      	ldr	r2, [r3, #8]
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	430a      	orrs	r2, r1
 800e136:	619a      	str	r2, [r3, #24]
 800e138:	e060      	b.n	800e1fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	2b04      	cmp	r3, #4
 800e13e:	d11c      	bne.n	800e17a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800e144:	68bb      	ldr	r3, [r7, #8]
 800e146:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800e148:	68bb      	ldr	r3, [r7, #8]
 800e14a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800e14c:	68bb      	ldr	r3, [r7, #8]
 800e14e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800e150:	f000 fd6e 	bl	800ec30 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	699a      	ldr	r2, [r3, #24]
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800e162:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	6999      	ldr	r1, [r3, #24]
 800e16a:	68bb      	ldr	r3, [r7, #8]
 800e16c:	689b      	ldr	r3, [r3, #8]
 800e16e:	021a      	lsls	r2, r3, #8
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	430a      	orrs	r2, r1
 800e176:	619a      	str	r2, [r3, #24]
 800e178:	e040      	b.n	800e1fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	2b08      	cmp	r3, #8
 800e17e:	d11b      	bne.n	800e1b8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800e184:	68bb      	ldr	r3, [r7, #8]
 800e186:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800e188:	68bb      	ldr	r3, [r7, #8]
 800e18a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800e18c:	68bb      	ldr	r3, [r7, #8]
 800e18e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800e190:	f000 fd8b 	bl	800ecaa <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	69da      	ldr	r2, [r3, #28]
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	f022 020c 	bic.w	r2, r2, #12
 800e1a2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	69d9      	ldr	r1, [r3, #28]
 800e1aa:	68bb      	ldr	r3, [r7, #8]
 800e1ac:	689a      	ldr	r2, [r3, #8]
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	430a      	orrs	r2, r1
 800e1b4:	61da      	str	r2, [r3, #28]
 800e1b6:	e021      	b.n	800e1fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2b0c      	cmp	r3, #12
 800e1bc:	d11c      	bne.n	800e1f8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800e1c2:	68bb      	ldr	r3, [r7, #8]
 800e1c4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800e1c6:	68bb      	ldr	r3, [r7, #8]
 800e1c8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800e1ca:	68bb      	ldr	r3, [r7, #8]
 800e1cc:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800e1ce:	f000 fda8 	bl	800ed22 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	69da      	ldr	r2, [r3, #28]
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800e1e0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	69d9      	ldr	r1, [r3, #28]
 800e1e8:	68bb      	ldr	r3, [r7, #8]
 800e1ea:	689b      	ldr	r3, [r3, #8]
 800e1ec:	021a      	lsls	r2, r3, #8
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	430a      	orrs	r2, r1
 800e1f4:	61da      	str	r2, [r3, #28]
 800e1f6:	e001      	b.n	800e1fc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800e1f8:	2301      	movs	r3, #1
 800e1fa:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	2200      	movs	r2, #0
 800e200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e204:	7dfb      	ldrb	r3, [r7, #23]
}
 800e206:	4618      	mov	r0, r3
 800e208:	3718      	adds	r7, #24
 800e20a:	46bd      	mov	sp, r7
 800e20c:	bd80      	pop	{r7, pc}
	...

0800e210 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b086      	sub	sp, #24
 800e214:	af00      	add	r7, sp, #0
 800e216:	60f8      	str	r0, [r7, #12]
 800e218:	60b9      	str	r1, [r7, #8]
 800e21a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e21c:	2300      	movs	r3, #0
 800e21e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e226:	2b01      	cmp	r3, #1
 800e228:	d101      	bne.n	800e22e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e22a:	2302      	movs	r3, #2
 800e22c:	e0ff      	b.n	800e42e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	2201      	movs	r2, #1
 800e232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	2b14      	cmp	r3, #20
 800e23a:	f200 80f0 	bhi.w	800e41e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e23e:	a201      	add	r2, pc, #4	@ (adr r2, 800e244 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e244:	0800e299 	.word	0x0800e299
 800e248:	0800e41f 	.word	0x0800e41f
 800e24c:	0800e41f 	.word	0x0800e41f
 800e250:	0800e41f 	.word	0x0800e41f
 800e254:	0800e2d9 	.word	0x0800e2d9
 800e258:	0800e41f 	.word	0x0800e41f
 800e25c:	0800e41f 	.word	0x0800e41f
 800e260:	0800e41f 	.word	0x0800e41f
 800e264:	0800e31b 	.word	0x0800e31b
 800e268:	0800e41f 	.word	0x0800e41f
 800e26c:	0800e41f 	.word	0x0800e41f
 800e270:	0800e41f 	.word	0x0800e41f
 800e274:	0800e35b 	.word	0x0800e35b
 800e278:	0800e41f 	.word	0x0800e41f
 800e27c:	0800e41f 	.word	0x0800e41f
 800e280:	0800e41f 	.word	0x0800e41f
 800e284:	0800e39d 	.word	0x0800e39d
 800e288:	0800e41f 	.word	0x0800e41f
 800e28c:	0800e41f 	.word	0x0800e41f
 800e290:	0800e41f 	.word	0x0800e41f
 800e294:	0800e3dd 	.word	0x0800e3dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	68b9      	ldr	r1, [r7, #8]
 800e29e:	4618      	mov	r0, r3
 800e2a0:	f000 f970 	bl	800e584 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	699a      	ldr	r2, [r3, #24]
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	f042 0208 	orr.w	r2, r2, #8
 800e2b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	699a      	ldr	r2, [r3, #24]
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	f022 0204 	bic.w	r2, r2, #4
 800e2c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	6999      	ldr	r1, [r3, #24]
 800e2ca:	68bb      	ldr	r3, [r7, #8]
 800e2cc:	691a      	ldr	r2, [r3, #16]
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	430a      	orrs	r2, r1
 800e2d4:	619a      	str	r2, [r3, #24]
      break;
 800e2d6:	e0a5      	b.n	800e424 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	68b9      	ldr	r1, [r7, #8]
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f000 f9e0 	bl	800e6a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	699a      	ldr	r2, [r3, #24]
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e2f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	699a      	ldr	r2, [r3, #24]
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e302:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	6999      	ldr	r1, [r3, #24]
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	691b      	ldr	r3, [r3, #16]
 800e30e:	021a      	lsls	r2, r3, #8
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	430a      	orrs	r2, r1
 800e316:	619a      	str	r2, [r3, #24]
      break;
 800e318:	e084      	b.n	800e424 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	68b9      	ldr	r1, [r7, #8]
 800e320:	4618      	mov	r0, r3
 800e322:	f000 fa49 	bl	800e7b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	69da      	ldr	r2, [r3, #28]
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	f042 0208 	orr.w	r2, r2, #8
 800e334:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	69da      	ldr	r2, [r3, #28]
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	f022 0204 	bic.w	r2, r2, #4
 800e344:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	69d9      	ldr	r1, [r3, #28]
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	691a      	ldr	r2, [r3, #16]
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	430a      	orrs	r2, r1
 800e356:	61da      	str	r2, [r3, #28]
      break;
 800e358:	e064      	b.n	800e424 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	68b9      	ldr	r1, [r7, #8]
 800e360:	4618      	mov	r0, r3
 800e362:	f000 fab1 	bl	800e8c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	69da      	ldr	r2, [r3, #28]
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e374:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	69da      	ldr	r2, [r3, #28]
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e384:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	69d9      	ldr	r1, [r3, #28]
 800e38c:	68bb      	ldr	r3, [r7, #8]
 800e38e:	691b      	ldr	r3, [r3, #16]
 800e390:	021a      	lsls	r2, r3, #8
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	430a      	orrs	r2, r1
 800e398:	61da      	str	r2, [r3, #28]
      break;
 800e39a:	e043      	b.n	800e424 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	68b9      	ldr	r1, [r7, #8]
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f000 fafa 	bl	800e99c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	f042 0208 	orr.w	r2, r2, #8
 800e3b6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	f022 0204 	bic.w	r2, r2, #4
 800e3c6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e3ce:	68bb      	ldr	r3, [r7, #8]
 800e3d0:	691a      	ldr	r2, [r3, #16]
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	430a      	orrs	r2, r1
 800e3d8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e3da:	e023      	b.n	800e424 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	68b9      	ldr	r1, [r7, #8]
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	f000 fb3e 	bl	800ea64 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e3f6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e406:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e40e:	68bb      	ldr	r3, [r7, #8]
 800e410:	691b      	ldr	r3, [r3, #16]
 800e412:	021a      	lsls	r2, r3, #8
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	430a      	orrs	r2, r1
 800e41a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e41c:	e002      	b.n	800e424 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e41e:	2301      	movs	r3, #1
 800e420:	75fb      	strb	r3, [r7, #23]
      break;
 800e422:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	2200      	movs	r2, #0
 800e428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e42c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e42e:	4618      	mov	r0, r3
 800e430:	3718      	adds	r7, #24
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}
 800e436:	bf00      	nop

0800e438 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e438:	b480      	push	{r7}
 800e43a:	b085      	sub	sp, #20
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
 800e440:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	4a44      	ldr	r2, [pc, #272]	@ (800e55c <TIM_Base_SetConfig+0x124>)
 800e44c:	4293      	cmp	r3, r2
 800e44e:	d013      	beq.n	800e478 <TIM_Base_SetConfig+0x40>
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e456:	d00f      	beq.n	800e478 <TIM_Base_SetConfig+0x40>
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	4a41      	ldr	r2, [pc, #260]	@ (800e560 <TIM_Base_SetConfig+0x128>)
 800e45c:	4293      	cmp	r3, r2
 800e45e:	d00b      	beq.n	800e478 <TIM_Base_SetConfig+0x40>
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	4a40      	ldr	r2, [pc, #256]	@ (800e564 <TIM_Base_SetConfig+0x12c>)
 800e464:	4293      	cmp	r3, r2
 800e466:	d007      	beq.n	800e478 <TIM_Base_SetConfig+0x40>
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	4a3f      	ldr	r2, [pc, #252]	@ (800e568 <TIM_Base_SetConfig+0x130>)
 800e46c:	4293      	cmp	r3, r2
 800e46e:	d003      	beq.n	800e478 <TIM_Base_SetConfig+0x40>
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	4a3e      	ldr	r2, [pc, #248]	@ (800e56c <TIM_Base_SetConfig+0x134>)
 800e474:	4293      	cmp	r3, r2
 800e476:	d108      	bne.n	800e48a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e47e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e480:	683b      	ldr	r3, [r7, #0]
 800e482:	685b      	ldr	r3, [r3, #4]
 800e484:	68fa      	ldr	r2, [r7, #12]
 800e486:	4313      	orrs	r3, r2
 800e488:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	4a33      	ldr	r2, [pc, #204]	@ (800e55c <TIM_Base_SetConfig+0x124>)
 800e48e:	4293      	cmp	r3, r2
 800e490:	d027      	beq.n	800e4e2 <TIM_Base_SetConfig+0xaa>
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e498:	d023      	beq.n	800e4e2 <TIM_Base_SetConfig+0xaa>
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	4a30      	ldr	r2, [pc, #192]	@ (800e560 <TIM_Base_SetConfig+0x128>)
 800e49e:	4293      	cmp	r3, r2
 800e4a0:	d01f      	beq.n	800e4e2 <TIM_Base_SetConfig+0xaa>
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	4a2f      	ldr	r2, [pc, #188]	@ (800e564 <TIM_Base_SetConfig+0x12c>)
 800e4a6:	4293      	cmp	r3, r2
 800e4a8:	d01b      	beq.n	800e4e2 <TIM_Base_SetConfig+0xaa>
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	4a2e      	ldr	r2, [pc, #184]	@ (800e568 <TIM_Base_SetConfig+0x130>)
 800e4ae:	4293      	cmp	r3, r2
 800e4b0:	d017      	beq.n	800e4e2 <TIM_Base_SetConfig+0xaa>
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	4a2d      	ldr	r2, [pc, #180]	@ (800e56c <TIM_Base_SetConfig+0x134>)
 800e4b6:	4293      	cmp	r3, r2
 800e4b8:	d013      	beq.n	800e4e2 <TIM_Base_SetConfig+0xaa>
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	4a2c      	ldr	r2, [pc, #176]	@ (800e570 <TIM_Base_SetConfig+0x138>)
 800e4be:	4293      	cmp	r3, r2
 800e4c0:	d00f      	beq.n	800e4e2 <TIM_Base_SetConfig+0xaa>
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	4a2b      	ldr	r2, [pc, #172]	@ (800e574 <TIM_Base_SetConfig+0x13c>)
 800e4c6:	4293      	cmp	r3, r2
 800e4c8:	d00b      	beq.n	800e4e2 <TIM_Base_SetConfig+0xaa>
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	4a2a      	ldr	r2, [pc, #168]	@ (800e578 <TIM_Base_SetConfig+0x140>)
 800e4ce:	4293      	cmp	r3, r2
 800e4d0:	d007      	beq.n	800e4e2 <TIM_Base_SetConfig+0xaa>
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	4a29      	ldr	r2, [pc, #164]	@ (800e57c <TIM_Base_SetConfig+0x144>)
 800e4d6:	4293      	cmp	r3, r2
 800e4d8:	d003      	beq.n	800e4e2 <TIM_Base_SetConfig+0xaa>
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	4a28      	ldr	r2, [pc, #160]	@ (800e580 <TIM_Base_SetConfig+0x148>)
 800e4de:	4293      	cmp	r3, r2
 800e4e0:	d108      	bne.n	800e4f4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e4e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	68db      	ldr	r3, [r3, #12]
 800e4ee:	68fa      	ldr	r2, [r7, #12]
 800e4f0:	4313      	orrs	r3, r2
 800e4f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e4fa:	683b      	ldr	r3, [r7, #0]
 800e4fc:	695b      	ldr	r3, [r3, #20]
 800e4fe:	4313      	orrs	r3, r2
 800e500:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	68fa      	ldr	r2, [r7, #12]
 800e506:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e508:	683b      	ldr	r3, [r7, #0]
 800e50a:	689a      	ldr	r2, [r3, #8]
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e510:	683b      	ldr	r3, [r7, #0]
 800e512:	681a      	ldr	r2, [r3, #0]
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	4a10      	ldr	r2, [pc, #64]	@ (800e55c <TIM_Base_SetConfig+0x124>)
 800e51c:	4293      	cmp	r3, r2
 800e51e:	d00f      	beq.n	800e540 <TIM_Base_SetConfig+0x108>
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	4a12      	ldr	r2, [pc, #72]	@ (800e56c <TIM_Base_SetConfig+0x134>)
 800e524:	4293      	cmp	r3, r2
 800e526:	d00b      	beq.n	800e540 <TIM_Base_SetConfig+0x108>
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	4a11      	ldr	r2, [pc, #68]	@ (800e570 <TIM_Base_SetConfig+0x138>)
 800e52c:	4293      	cmp	r3, r2
 800e52e:	d007      	beq.n	800e540 <TIM_Base_SetConfig+0x108>
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	4a10      	ldr	r2, [pc, #64]	@ (800e574 <TIM_Base_SetConfig+0x13c>)
 800e534:	4293      	cmp	r3, r2
 800e536:	d003      	beq.n	800e540 <TIM_Base_SetConfig+0x108>
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	4a0f      	ldr	r2, [pc, #60]	@ (800e578 <TIM_Base_SetConfig+0x140>)
 800e53c:	4293      	cmp	r3, r2
 800e53e:	d103      	bne.n	800e548 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	691a      	ldr	r2, [r3, #16]
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	2201      	movs	r2, #1
 800e54c:	615a      	str	r2, [r3, #20]
}
 800e54e:	bf00      	nop
 800e550:	3714      	adds	r7, #20
 800e552:	46bd      	mov	sp, r7
 800e554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e558:	4770      	bx	lr
 800e55a:	bf00      	nop
 800e55c:	40010000 	.word	0x40010000
 800e560:	40000400 	.word	0x40000400
 800e564:	40000800 	.word	0x40000800
 800e568:	40000c00 	.word	0x40000c00
 800e56c:	40010400 	.word	0x40010400
 800e570:	40014000 	.word	0x40014000
 800e574:	40014400 	.word	0x40014400
 800e578:	40014800 	.word	0x40014800
 800e57c:	4000e000 	.word	0x4000e000
 800e580:	4000e400 	.word	0x4000e400

0800e584 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e584:	b480      	push	{r7}
 800e586:	b087      	sub	sp, #28
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
 800e58c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	6a1b      	ldr	r3, [r3, #32]
 800e592:	f023 0201 	bic.w	r2, r3, #1
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	6a1b      	ldr	r3, [r3, #32]
 800e59e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	685b      	ldr	r3, [r3, #4]
 800e5a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	699b      	ldr	r3, [r3, #24]
 800e5aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e5ac:	68fa      	ldr	r2, [r7, #12]
 800e5ae:	4b37      	ldr	r3, [pc, #220]	@ (800e68c <TIM_OC1_SetConfig+0x108>)
 800e5b0:	4013      	ands	r3, r2
 800e5b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	f023 0303 	bic.w	r3, r3, #3
 800e5ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e5bc:	683b      	ldr	r3, [r7, #0]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	68fa      	ldr	r2, [r7, #12]
 800e5c2:	4313      	orrs	r3, r2
 800e5c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e5c6:	697b      	ldr	r3, [r7, #20]
 800e5c8:	f023 0302 	bic.w	r3, r3, #2
 800e5cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e5ce:	683b      	ldr	r3, [r7, #0]
 800e5d0:	689b      	ldr	r3, [r3, #8]
 800e5d2:	697a      	ldr	r2, [r7, #20]
 800e5d4:	4313      	orrs	r3, r2
 800e5d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	4a2d      	ldr	r2, [pc, #180]	@ (800e690 <TIM_OC1_SetConfig+0x10c>)
 800e5dc:	4293      	cmp	r3, r2
 800e5de:	d00f      	beq.n	800e600 <TIM_OC1_SetConfig+0x7c>
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	4a2c      	ldr	r2, [pc, #176]	@ (800e694 <TIM_OC1_SetConfig+0x110>)
 800e5e4:	4293      	cmp	r3, r2
 800e5e6:	d00b      	beq.n	800e600 <TIM_OC1_SetConfig+0x7c>
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	4a2b      	ldr	r2, [pc, #172]	@ (800e698 <TIM_OC1_SetConfig+0x114>)
 800e5ec:	4293      	cmp	r3, r2
 800e5ee:	d007      	beq.n	800e600 <TIM_OC1_SetConfig+0x7c>
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	4a2a      	ldr	r2, [pc, #168]	@ (800e69c <TIM_OC1_SetConfig+0x118>)
 800e5f4:	4293      	cmp	r3, r2
 800e5f6:	d003      	beq.n	800e600 <TIM_OC1_SetConfig+0x7c>
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	4a29      	ldr	r2, [pc, #164]	@ (800e6a0 <TIM_OC1_SetConfig+0x11c>)
 800e5fc:	4293      	cmp	r3, r2
 800e5fe:	d10c      	bne.n	800e61a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e600:	697b      	ldr	r3, [r7, #20]
 800e602:	f023 0308 	bic.w	r3, r3, #8
 800e606:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	68db      	ldr	r3, [r3, #12]
 800e60c:	697a      	ldr	r2, [r7, #20]
 800e60e:	4313      	orrs	r3, r2
 800e610:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e612:	697b      	ldr	r3, [r7, #20]
 800e614:	f023 0304 	bic.w	r3, r3, #4
 800e618:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	4a1c      	ldr	r2, [pc, #112]	@ (800e690 <TIM_OC1_SetConfig+0x10c>)
 800e61e:	4293      	cmp	r3, r2
 800e620:	d00f      	beq.n	800e642 <TIM_OC1_SetConfig+0xbe>
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	4a1b      	ldr	r2, [pc, #108]	@ (800e694 <TIM_OC1_SetConfig+0x110>)
 800e626:	4293      	cmp	r3, r2
 800e628:	d00b      	beq.n	800e642 <TIM_OC1_SetConfig+0xbe>
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	4a1a      	ldr	r2, [pc, #104]	@ (800e698 <TIM_OC1_SetConfig+0x114>)
 800e62e:	4293      	cmp	r3, r2
 800e630:	d007      	beq.n	800e642 <TIM_OC1_SetConfig+0xbe>
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	4a19      	ldr	r2, [pc, #100]	@ (800e69c <TIM_OC1_SetConfig+0x118>)
 800e636:	4293      	cmp	r3, r2
 800e638:	d003      	beq.n	800e642 <TIM_OC1_SetConfig+0xbe>
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	4a18      	ldr	r2, [pc, #96]	@ (800e6a0 <TIM_OC1_SetConfig+0x11c>)
 800e63e:	4293      	cmp	r3, r2
 800e640:	d111      	bne.n	800e666 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e642:	693b      	ldr	r3, [r7, #16]
 800e644:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e648:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e64a:	693b      	ldr	r3, [r7, #16]
 800e64c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e650:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e652:	683b      	ldr	r3, [r7, #0]
 800e654:	695b      	ldr	r3, [r3, #20]
 800e656:	693a      	ldr	r2, [r7, #16]
 800e658:	4313      	orrs	r3, r2
 800e65a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e65c:	683b      	ldr	r3, [r7, #0]
 800e65e:	699b      	ldr	r3, [r3, #24]
 800e660:	693a      	ldr	r2, [r7, #16]
 800e662:	4313      	orrs	r3, r2
 800e664:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	693a      	ldr	r2, [r7, #16]
 800e66a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	68fa      	ldr	r2, [r7, #12]
 800e670:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e672:	683b      	ldr	r3, [r7, #0]
 800e674:	685a      	ldr	r2, [r3, #4]
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	697a      	ldr	r2, [r7, #20]
 800e67e:	621a      	str	r2, [r3, #32]
}
 800e680:	bf00      	nop
 800e682:	371c      	adds	r7, #28
 800e684:	46bd      	mov	sp, r7
 800e686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68a:	4770      	bx	lr
 800e68c:	fffeff8f 	.word	0xfffeff8f
 800e690:	40010000 	.word	0x40010000
 800e694:	40010400 	.word	0x40010400
 800e698:	40014000 	.word	0x40014000
 800e69c:	40014400 	.word	0x40014400
 800e6a0:	40014800 	.word	0x40014800

0800e6a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e6a4:	b480      	push	{r7}
 800e6a6:	b087      	sub	sp, #28
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
 800e6ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	6a1b      	ldr	r3, [r3, #32]
 800e6b2:	f023 0210 	bic.w	r2, r3, #16
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	6a1b      	ldr	r3, [r3, #32]
 800e6be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	685b      	ldr	r3, [r3, #4]
 800e6c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	699b      	ldr	r3, [r3, #24]
 800e6ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e6cc:	68fa      	ldr	r2, [r7, #12]
 800e6ce:	4b34      	ldr	r3, [pc, #208]	@ (800e7a0 <TIM_OC2_SetConfig+0xfc>)
 800e6d0:	4013      	ands	r3, r2
 800e6d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e6da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e6dc:	683b      	ldr	r3, [r7, #0]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	021b      	lsls	r3, r3, #8
 800e6e2:	68fa      	ldr	r2, [r7, #12]
 800e6e4:	4313      	orrs	r3, r2
 800e6e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e6e8:	697b      	ldr	r3, [r7, #20]
 800e6ea:	f023 0320 	bic.w	r3, r3, #32
 800e6ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e6f0:	683b      	ldr	r3, [r7, #0]
 800e6f2:	689b      	ldr	r3, [r3, #8]
 800e6f4:	011b      	lsls	r3, r3, #4
 800e6f6:	697a      	ldr	r2, [r7, #20]
 800e6f8:	4313      	orrs	r3, r2
 800e6fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	4a29      	ldr	r2, [pc, #164]	@ (800e7a4 <TIM_OC2_SetConfig+0x100>)
 800e700:	4293      	cmp	r3, r2
 800e702:	d003      	beq.n	800e70c <TIM_OC2_SetConfig+0x68>
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	4a28      	ldr	r2, [pc, #160]	@ (800e7a8 <TIM_OC2_SetConfig+0x104>)
 800e708:	4293      	cmp	r3, r2
 800e70a:	d10d      	bne.n	800e728 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e70c:	697b      	ldr	r3, [r7, #20]
 800e70e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e712:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e714:	683b      	ldr	r3, [r7, #0]
 800e716:	68db      	ldr	r3, [r3, #12]
 800e718:	011b      	lsls	r3, r3, #4
 800e71a:	697a      	ldr	r2, [r7, #20]
 800e71c:	4313      	orrs	r3, r2
 800e71e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e720:	697b      	ldr	r3, [r7, #20]
 800e722:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e726:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	4a1e      	ldr	r2, [pc, #120]	@ (800e7a4 <TIM_OC2_SetConfig+0x100>)
 800e72c:	4293      	cmp	r3, r2
 800e72e:	d00f      	beq.n	800e750 <TIM_OC2_SetConfig+0xac>
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	4a1d      	ldr	r2, [pc, #116]	@ (800e7a8 <TIM_OC2_SetConfig+0x104>)
 800e734:	4293      	cmp	r3, r2
 800e736:	d00b      	beq.n	800e750 <TIM_OC2_SetConfig+0xac>
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	4a1c      	ldr	r2, [pc, #112]	@ (800e7ac <TIM_OC2_SetConfig+0x108>)
 800e73c:	4293      	cmp	r3, r2
 800e73e:	d007      	beq.n	800e750 <TIM_OC2_SetConfig+0xac>
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	4a1b      	ldr	r2, [pc, #108]	@ (800e7b0 <TIM_OC2_SetConfig+0x10c>)
 800e744:	4293      	cmp	r3, r2
 800e746:	d003      	beq.n	800e750 <TIM_OC2_SetConfig+0xac>
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	4a1a      	ldr	r2, [pc, #104]	@ (800e7b4 <TIM_OC2_SetConfig+0x110>)
 800e74c:	4293      	cmp	r3, r2
 800e74e:	d113      	bne.n	800e778 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e750:	693b      	ldr	r3, [r7, #16]
 800e752:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e756:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e758:	693b      	ldr	r3, [r7, #16]
 800e75a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e75e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	695b      	ldr	r3, [r3, #20]
 800e764:	009b      	lsls	r3, r3, #2
 800e766:	693a      	ldr	r2, [r7, #16]
 800e768:	4313      	orrs	r3, r2
 800e76a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	699b      	ldr	r3, [r3, #24]
 800e770:	009b      	lsls	r3, r3, #2
 800e772:	693a      	ldr	r2, [r7, #16]
 800e774:	4313      	orrs	r3, r2
 800e776:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	693a      	ldr	r2, [r7, #16]
 800e77c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	68fa      	ldr	r2, [r7, #12]
 800e782:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e784:	683b      	ldr	r3, [r7, #0]
 800e786:	685a      	ldr	r2, [r3, #4]
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	697a      	ldr	r2, [r7, #20]
 800e790:	621a      	str	r2, [r3, #32]
}
 800e792:	bf00      	nop
 800e794:	371c      	adds	r7, #28
 800e796:	46bd      	mov	sp, r7
 800e798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79c:	4770      	bx	lr
 800e79e:	bf00      	nop
 800e7a0:	feff8fff 	.word	0xfeff8fff
 800e7a4:	40010000 	.word	0x40010000
 800e7a8:	40010400 	.word	0x40010400
 800e7ac:	40014000 	.word	0x40014000
 800e7b0:	40014400 	.word	0x40014400
 800e7b4:	40014800 	.word	0x40014800

0800e7b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e7b8:	b480      	push	{r7}
 800e7ba:	b087      	sub	sp, #28
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
 800e7c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	6a1b      	ldr	r3, [r3, #32]
 800e7c6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	6a1b      	ldr	r3, [r3, #32]
 800e7d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	685b      	ldr	r3, [r3, #4]
 800e7d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	69db      	ldr	r3, [r3, #28]
 800e7de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e7e0:	68fa      	ldr	r2, [r7, #12]
 800e7e2:	4b33      	ldr	r3, [pc, #204]	@ (800e8b0 <TIM_OC3_SetConfig+0xf8>)
 800e7e4:	4013      	ands	r3, r2
 800e7e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	f023 0303 	bic.w	r3, r3, #3
 800e7ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	68fa      	ldr	r2, [r7, #12]
 800e7f6:	4313      	orrs	r3, r2
 800e7f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e7fa:	697b      	ldr	r3, [r7, #20]
 800e7fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e800:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e802:	683b      	ldr	r3, [r7, #0]
 800e804:	689b      	ldr	r3, [r3, #8]
 800e806:	021b      	lsls	r3, r3, #8
 800e808:	697a      	ldr	r2, [r7, #20]
 800e80a:	4313      	orrs	r3, r2
 800e80c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	4a28      	ldr	r2, [pc, #160]	@ (800e8b4 <TIM_OC3_SetConfig+0xfc>)
 800e812:	4293      	cmp	r3, r2
 800e814:	d003      	beq.n	800e81e <TIM_OC3_SetConfig+0x66>
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	4a27      	ldr	r2, [pc, #156]	@ (800e8b8 <TIM_OC3_SetConfig+0x100>)
 800e81a:	4293      	cmp	r3, r2
 800e81c:	d10d      	bne.n	800e83a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e81e:	697b      	ldr	r3, [r7, #20]
 800e820:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e824:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e826:	683b      	ldr	r3, [r7, #0]
 800e828:	68db      	ldr	r3, [r3, #12]
 800e82a:	021b      	lsls	r3, r3, #8
 800e82c:	697a      	ldr	r2, [r7, #20]
 800e82e:	4313      	orrs	r3, r2
 800e830:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e832:	697b      	ldr	r3, [r7, #20]
 800e834:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e838:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	4a1d      	ldr	r2, [pc, #116]	@ (800e8b4 <TIM_OC3_SetConfig+0xfc>)
 800e83e:	4293      	cmp	r3, r2
 800e840:	d00f      	beq.n	800e862 <TIM_OC3_SetConfig+0xaa>
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	4a1c      	ldr	r2, [pc, #112]	@ (800e8b8 <TIM_OC3_SetConfig+0x100>)
 800e846:	4293      	cmp	r3, r2
 800e848:	d00b      	beq.n	800e862 <TIM_OC3_SetConfig+0xaa>
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	4a1b      	ldr	r2, [pc, #108]	@ (800e8bc <TIM_OC3_SetConfig+0x104>)
 800e84e:	4293      	cmp	r3, r2
 800e850:	d007      	beq.n	800e862 <TIM_OC3_SetConfig+0xaa>
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	4a1a      	ldr	r2, [pc, #104]	@ (800e8c0 <TIM_OC3_SetConfig+0x108>)
 800e856:	4293      	cmp	r3, r2
 800e858:	d003      	beq.n	800e862 <TIM_OC3_SetConfig+0xaa>
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	4a19      	ldr	r2, [pc, #100]	@ (800e8c4 <TIM_OC3_SetConfig+0x10c>)
 800e85e:	4293      	cmp	r3, r2
 800e860:	d113      	bne.n	800e88a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e862:	693b      	ldr	r3, [r7, #16]
 800e864:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e868:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e86a:	693b      	ldr	r3, [r7, #16]
 800e86c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e870:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e872:	683b      	ldr	r3, [r7, #0]
 800e874:	695b      	ldr	r3, [r3, #20]
 800e876:	011b      	lsls	r3, r3, #4
 800e878:	693a      	ldr	r2, [r7, #16]
 800e87a:	4313      	orrs	r3, r2
 800e87c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e87e:	683b      	ldr	r3, [r7, #0]
 800e880:	699b      	ldr	r3, [r3, #24]
 800e882:	011b      	lsls	r3, r3, #4
 800e884:	693a      	ldr	r2, [r7, #16]
 800e886:	4313      	orrs	r3, r2
 800e888:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	693a      	ldr	r2, [r7, #16]
 800e88e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	68fa      	ldr	r2, [r7, #12]
 800e894:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	685a      	ldr	r2, [r3, #4]
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	697a      	ldr	r2, [r7, #20]
 800e8a2:	621a      	str	r2, [r3, #32]
}
 800e8a4:	bf00      	nop
 800e8a6:	371c      	adds	r7, #28
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ae:	4770      	bx	lr
 800e8b0:	fffeff8f 	.word	0xfffeff8f
 800e8b4:	40010000 	.word	0x40010000
 800e8b8:	40010400 	.word	0x40010400
 800e8bc:	40014000 	.word	0x40014000
 800e8c0:	40014400 	.word	0x40014400
 800e8c4:	40014800 	.word	0x40014800

0800e8c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e8c8:	b480      	push	{r7}
 800e8ca:	b087      	sub	sp, #28
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
 800e8d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	6a1b      	ldr	r3, [r3, #32]
 800e8d6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	6a1b      	ldr	r3, [r3, #32]
 800e8e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	685b      	ldr	r3, [r3, #4]
 800e8e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	69db      	ldr	r3, [r3, #28]
 800e8ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e8f0:	68fa      	ldr	r2, [r7, #12]
 800e8f2:	4b24      	ldr	r3, [pc, #144]	@ (800e984 <TIM_OC4_SetConfig+0xbc>)
 800e8f4:	4013      	ands	r3, r2
 800e8f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e8fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e900:	683b      	ldr	r3, [r7, #0]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	021b      	lsls	r3, r3, #8
 800e906:	68fa      	ldr	r2, [r7, #12]
 800e908:	4313      	orrs	r3, r2
 800e90a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e90c:	693b      	ldr	r3, [r7, #16]
 800e90e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e912:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	689b      	ldr	r3, [r3, #8]
 800e918:	031b      	lsls	r3, r3, #12
 800e91a:	693a      	ldr	r2, [r7, #16]
 800e91c:	4313      	orrs	r3, r2
 800e91e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	4a19      	ldr	r2, [pc, #100]	@ (800e988 <TIM_OC4_SetConfig+0xc0>)
 800e924:	4293      	cmp	r3, r2
 800e926:	d00f      	beq.n	800e948 <TIM_OC4_SetConfig+0x80>
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	4a18      	ldr	r2, [pc, #96]	@ (800e98c <TIM_OC4_SetConfig+0xc4>)
 800e92c:	4293      	cmp	r3, r2
 800e92e:	d00b      	beq.n	800e948 <TIM_OC4_SetConfig+0x80>
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	4a17      	ldr	r2, [pc, #92]	@ (800e990 <TIM_OC4_SetConfig+0xc8>)
 800e934:	4293      	cmp	r3, r2
 800e936:	d007      	beq.n	800e948 <TIM_OC4_SetConfig+0x80>
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	4a16      	ldr	r2, [pc, #88]	@ (800e994 <TIM_OC4_SetConfig+0xcc>)
 800e93c:	4293      	cmp	r3, r2
 800e93e:	d003      	beq.n	800e948 <TIM_OC4_SetConfig+0x80>
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	4a15      	ldr	r2, [pc, #84]	@ (800e998 <TIM_OC4_SetConfig+0xd0>)
 800e944:	4293      	cmp	r3, r2
 800e946:	d109      	bne.n	800e95c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e948:	697b      	ldr	r3, [r7, #20]
 800e94a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e94e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e950:	683b      	ldr	r3, [r7, #0]
 800e952:	695b      	ldr	r3, [r3, #20]
 800e954:	019b      	lsls	r3, r3, #6
 800e956:	697a      	ldr	r2, [r7, #20]
 800e958:	4313      	orrs	r3, r2
 800e95a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	697a      	ldr	r2, [r7, #20]
 800e960:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	68fa      	ldr	r2, [r7, #12]
 800e966:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e968:	683b      	ldr	r3, [r7, #0]
 800e96a:	685a      	ldr	r2, [r3, #4]
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	693a      	ldr	r2, [r7, #16]
 800e974:	621a      	str	r2, [r3, #32]
}
 800e976:	bf00      	nop
 800e978:	371c      	adds	r7, #28
 800e97a:	46bd      	mov	sp, r7
 800e97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e980:	4770      	bx	lr
 800e982:	bf00      	nop
 800e984:	feff8fff 	.word	0xfeff8fff
 800e988:	40010000 	.word	0x40010000
 800e98c:	40010400 	.word	0x40010400
 800e990:	40014000 	.word	0x40014000
 800e994:	40014400 	.word	0x40014400
 800e998:	40014800 	.word	0x40014800

0800e99c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e99c:	b480      	push	{r7}
 800e99e:	b087      	sub	sp, #28
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
 800e9a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	6a1b      	ldr	r3, [r3, #32]
 800e9aa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	6a1b      	ldr	r3, [r3, #32]
 800e9b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	685b      	ldr	r3, [r3, #4]
 800e9bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e9c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e9c4:	68fa      	ldr	r2, [r7, #12]
 800e9c6:	4b21      	ldr	r3, [pc, #132]	@ (800ea4c <TIM_OC5_SetConfig+0xb0>)
 800e9c8:	4013      	ands	r3, r2
 800e9ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e9cc:	683b      	ldr	r3, [r7, #0]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	68fa      	ldr	r2, [r7, #12]
 800e9d2:	4313      	orrs	r3, r2
 800e9d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e9d6:	693b      	ldr	r3, [r7, #16]
 800e9d8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800e9dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	689b      	ldr	r3, [r3, #8]
 800e9e2:	041b      	lsls	r3, r3, #16
 800e9e4:	693a      	ldr	r2, [r7, #16]
 800e9e6:	4313      	orrs	r3, r2
 800e9e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	4a18      	ldr	r2, [pc, #96]	@ (800ea50 <TIM_OC5_SetConfig+0xb4>)
 800e9ee:	4293      	cmp	r3, r2
 800e9f0:	d00f      	beq.n	800ea12 <TIM_OC5_SetConfig+0x76>
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	4a17      	ldr	r2, [pc, #92]	@ (800ea54 <TIM_OC5_SetConfig+0xb8>)
 800e9f6:	4293      	cmp	r3, r2
 800e9f8:	d00b      	beq.n	800ea12 <TIM_OC5_SetConfig+0x76>
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	4a16      	ldr	r2, [pc, #88]	@ (800ea58 <TIM_OC5_SetConfig+0xbc>)
 800e9fe:	4293      	cmp	r3, r2
 800ea00:	d007      	beq.n	800ea12 <TIM_OC5_SetConfig+0x76>
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	4a15      	ldr	r2, [pc, #84]	@ (800ea5c <TIM_OC5_SetConfig+0xc0>)
 800ea06:	4293      	cmp	r3, r2
 800ea08:	d003      	beq.n	800ea12 <TIM_OC5_SetConfig+0x76>
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	4a14      	ldr	r2, [pc, #80]	@ (800ea60 <TIM_OC5_SetConfig+0xc4>)
 800ea0e:	4293      	cmp	r3, r2
 800ea10:	d109      	bne.n	800ea26 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ea12:	697b      	ldr	r3, [r7, #20]
 800ea14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ea18:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ea1a:	683b      	ldr	r3, [r7, #0]
 800ea1c:	695b      	ldr	r3, [r3, #20]
 800ea1e:	021b      	lsls	r3, r3, #8
 800ea20:	697a      	ldr	r2, [r7, #20]
 800ea22:	4313      	orrs	r3, r2
 800ea24:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	697a      	ldr	r2, [r7, #20]
 800ea2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	68fa      	ldr	r2, [r7, #12]
 800ea30:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ea32:	683b      	ldr	r3, [r7, #0]
 800ea34:	685a      	ldr	r2, [r3, #4]
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	693a      	ldr	r2, [r7, #16]
 800ea3e:	621a      	str	r2, [r3, #32]
}
 800ea40:	bf00      	nop
 800ea42:	371c      	adds	r7, #28
 800ea44:	46bd      	mov	sp, r7
 800ea46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4a:	4770      	bx	lr
 800ea4c:	fffeff8f 	.word	0xfffeff8f
 800ea50:	40010000 	.word	0x40010000
 800ea54:	40010400 	.word	0x40010400
 800ea58:	40014000 	.word	0x40014000
 800ea5c:	40014400 	.word	0x40014400
 800ea60:	40014800 	.word	0x40014800

0800ea64 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ea64:	b480      	push	{r7}
 800ea66:	b087      	sub	sp, #28
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
 800ea6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	6a1b      	ldr	r3, [r3, #32]
 800ea72:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	6a1b      	ldr	r3, [r3, #32]
 800ea7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	685b      	ldr	r3, [r3, #4]
 800ea84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ea8c:	68fa      	ldr	r2, [r7, #12]
 800ea8e:	4b22      	ldr	r3, [pc, #136]	@ (800eb18 <TIM_OC6_SetConfig+0xb4>)
 800ea90:	4013      	ands	r3, r2
 800ea92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ea94:	683b      	ldr	r3, [r7, #0]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	021b      	lsls	r3, r3, #8
 800ea9a:	68fa      	ldr	r2, [r7, #12]
 800ea9c:	4313      	orrs	r3, r2
 800ea9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800eaa0:	693b      	ldr	r3, [r7, #16]
 800eaa2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800eaa6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800eaa8:	683b      	ldr	r3, [r7, #0]
 800eaaa:	689b      	ldr	r3, [r3, #8]
 800eaac:	051b      	lsls	r3, r3, #20
 800eaae:	693a      	ldr	r2, [r7, #16]
 800eab0:	4313      	orrs	r3, r2
 800eab2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	4a19      	ldr	r2, [pc, #100]	@ (800eb1c <TIM_OC6_SetConfig+0xb8>)
 800eab8:	4293      	cmp	r3, r2
 800eaba:	d00f      	beq.n	800eadc <TIM_OC6_SetConfig+0x78>
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	4a18      	ldr	r2, [pc, #96]	@ (800eb20 <TIM_OC6_SetConfig+0xbc>)
 800eac0:	4293      	cmp	r3, r2
 800eac2:	d00b      	beq.n	800eadc <TIM_OC6_SetConfig+0x78>
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	4a17      	ldr	r2, [pc, #92]	@ (800eb24 <TIM_OC6_SetConfig+0xc0>)
 800eac8:	4293      	cmp	r3, r2
 800eaca:	d007      	beq.n	800eadc <TIM_OC6_SetConfig+0x78>
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	4a16      	ldr	r2, [pc, #88]	@ (800eb28 <TIM_OC6_SetConfig+0xc4>)
 800ead0:	4293      	cmp	r3, r2
 800ead2:	d003      	beq.n	800eadc <TIM_OC6_SetConfig+0x78>
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	4a15      	ldr	r2, [pc, #84]	@ (800eb2c <TIM_OC6_SetConfig+0xc8>)
 800ead8:	4293      	cmp	r3, r2
 800eada:	d109      	bne.n	800eaf0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800eadc:	697b      	ldr	r3, [r7, #20]
 800eade:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800eae2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800eae4:	683b      	ldr	r3, [r7, #0]
 800eae6:	695b      	ldr	r3, [r3, #20]
 800eae8:	029b      	lsls	r3, r3, #10
 800eaea:	697a      	ldr	r2, [r7, #20]
 800eaec:	4313      	orrs	r3, r2
 800eaee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	697a      	ldr	r2, [r7, #20]
 800eaf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	68fa      	ldr	r2, [r7, #12]
 800eafa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800eafc:	683b      	ldr	r3, [r7, #0]
 800eafe:	685a      	ldr	r2, [r3, #4]
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	693a      	ldr	r2, [r7, #16]
 800eb08:	621a      	str	r2, [r3, #32]
}
 800eb0a:	bf00      	nop
 800eb0c:	371c      	adds	r7, #28
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb14:	4770      	bx	lr
 800eb16:	bf00      	nop
 800eb18:	feff8fff 	.word	0xfeff8fff
 800eb1c:	40010000 	.word	0x40010000
 800eb20:	40010400 	.word	0x40010400
 800eb24:	40014000 	.word	0x40014000
 800eb28:	40014400 	.word	0x40014400
 800eb2c:	40014800 	.word	0x40014800

0800eb30 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800eb30:	b480      	push	{r7}
 800eb32:	b087      	sub	sp, #28
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	60f8      	str	r0, [r7, #12]
 800eb38:	60b9      	str	r1, [r7, #8]
 800eb3a:	607a      	str	r2, [r7, #4]
 800eb3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	6a1b      	ldr	r3, [r3, #32]
 800eb42:	f023 0201 	bic.w	r2, r3, #1
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	699b      	ldr	r3, [r3, #24]
 800eb4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	6a1b      	ldr	r3, [r3, #32]
 800eb54:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	4a2c      	ldr	r2, [pc, #176]	@ (800ec0c <TIM_TI1_SetConfig+0xdc>)
 800eb5a:	4293      	cmp	r3, r2
 800eb5c:	d023      	beq.n	800eba6 <TIM_TI1_SetConfig+0x76>
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eb64:	d01f      	beq.n	800eba6 <TIM_TI1_SetConfig+0x76>
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	4a29      	ldr	r2, [pc, #164]	@ (800ec10 <TIM_TI1_SetConfig+0xe0>)
 800eb6a:	4293      	cmp	r3, r2
 800eb6c:	d01b      	beq.n	800eba6 <TIM_TI1_SetConfig+0x76>
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	4a28      	ldr	r2, [pc, #160]	@ (800ec14 <TIM_TI1_SetConfig+0xe4>)
 800eb72:	4293      	cmp	r3, r2
 800eb74:	d017      	beq.n	800eba6 <TIM_TI1_SetConfig+0x76>
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	4a27      	ldr	r2, [pc, #156]	@ (800ec18 <TIM_TI1_SetConfig+0xe8>)
 800eb7a:	4293      	cmp	r3, r2
 800eb7c:	d013      	beq.n	800eba6 <TIM_TI1_SetConfig+0x76>
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	4a26      	ldr	r2, [pc, #152]	@ (800ec1c <TIM_TI1_SetConfig+0xec>)
 800eb82:	4293      	cmp	r3, r2
 800eb84:	d00f      	beq.n	800eba6 <TIM_TI1_SetConfig+0x76>
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	4a25      	ldr	r2, [pc, #148]	@ (800ec20 <TIM_TI1_SetConfig+0xf0>)
 800eb8a:	4293      	cmp	r3, r2
 800eb8c:	d00b      	beq.n	800eba6 <TIM_TI1_SetConfig+0x76>
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	4a24      	ldr	r2, [pc, #144]	@ (800ec24 <TIM_TI1_SetConfig+0xf4>)
 800eb92:	4293      	cmp	r3, r2
 800eb94:	d007      	beq.n	800eba6 <TIM_TI1_SetConfig+0x76>
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	4a23      	ldr	r2, [pc, #140]	@ (800ec28 <TIM_TI1_SetConfig+0xf8>)
 800eb9a:	4293      	cmp	r3, r2
 800eb9c:	d003      	beq.n	800eba6 <TIM_TI1_SetConfig+0x76>
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	4a22      	ldr	r2, [pc, #136]	@ (800ec2c <TIM_TI1_SetConfig+0xfc>)
 800eba2:	4293      	cmp	r3, r2
 800eba4:	d101      	bne.n	800ebaa <TIM_TI1_SetConfig+0x7a>
 800eba6:	2301      	movs	r3, #1
 800eba8:	e000      	b.n	800ebac <TIM_TI1_SetConfig+0x7c>
 800ebaa:	2300      	movs	r3, #0
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d008      	beq.n	800ebc2 <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800ebb0:	697b      	ldr	r3, [r7, #20]
 800ebb2:	f023 0303 	bic.w	r3, r3, #3
 800ebb6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800ebb8:	697a      	ldr	r2, [r7, #20]
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	4313      	orrs	r3, r2
 800ebbe:	617b      	str	r3, [r7, #20]
 800ebc0:	e003      	b.n	800ebca <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800ebc2:	697b      	ldr	r3, [r7, #20]
 800ebc4:	f043 0301 	orr.w	r3, r3, #1
 800ebc8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ebca:	697b      	ldr	r3, [r7, #20]
 800ebcc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ebd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800ebd2:	683b      	ldr	r3, [r7, #0]
 800ebd4:	011b      	lsls	r3, r3, #4
 800ebd6:	b2db      	uxtb	r3, r3
 800ebd8:	697a      	ldr	r2, [r7, #20]
 800ebda:	4313      	orrs	r3, r2
 800ebdc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ebde:	693b      	ldr	r3, [r7, #16]
 800ebe0:	f023 030a 	bic.w	r3, r3, #10
 800ebe4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800ebe6:	68bb      	ldr	r3, [r7, #8]
 800ebe8:	f003 030a 	and.w	r3, r3, #10
 800ebec:	693a      	ldr	r2, [r7, #16]
 800ebee:	4313      	orrs	r3, r2
 800ebf0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	697a      	ldr	r2, [r7, #20]
 800ebf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	693a      	ldr	r2, [r7, #16]
 800ebfc:	621a      	str	r2, [r3, #32]
}
 800ebfe:	bf00      	nop
 800ec00:	371c      	adds	r7, #28
 800ec02:	46bd      	mov	sp, r7
 800ec04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec08:	4770      	bx	lr
 800ec0a:	bf00      	nop
 800ec0c:	40010000 	.word	0x40010000
 800ec10:	40000400 	.word	0x40000400
 800ec14:	40000800 	.word	0x40000800
 800ec18:	40000c00 	.word	0x40000c00
 800ec1c:	40010400 	.word	0x40010400
 800ec20:	40001800 	.word	0x40001800
 800ec24:	40014000 	.word	0x40014000
 800ec28:	4000e000 	.word	0x4000e000
 800ec2c:	4000e400 	.word	0x4000e400

0800ec30 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ec30:	b480      	push	{r7}
 800ec32:	b087      	sub	sp, #28
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	60f8      	str	r0, [r7, #12]
 800ec38:	60b9      	str	r1, [r7, #8]
 800ec3a:	607a      	str	r2, [r7, #4]
 800ec3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	6a1b      	ldr	r3, [r3, #32]
 800ec42:	f023 0210 	bic.w	r2, r3, #16
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	699b      	ldr	r3, [r3, #24]
 800ec4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	6a1b      	ldr	r3, [r3, #32]
 800ec54:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800ec56:	697b      	ldr	r3, [r7, #20]
 800ec58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ec5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	021b      	lsls	r3, r3, #8
 800ec62:	697a      	ldr	r2, [r7, #20]
 800ec64:	4313      	orrs	r3, r2
 800ec66:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ec68:	697b      	ldr	r3, [r7, #20]
 800ec6a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ec6e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800ec70:	683b      	ldr	r3, [r7, #0]
 800ec72:	031b      	lsls	r3, r3, #12
 800ec74:	b29b      	uxth	r3, r3
 800ec76:	697a      	ldr	r2, [r7, #20]
 800ec78:	4313      	orrs	r3, r2
 800ec7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ec7c:	693b      	ldr	r3, [r7, #16]
 800ec7e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ec82:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800ec84:	68bb      	ldr	r3, [r7, #8]
 800ec86:	011b      	lsls	r3, r3, #4
 800ec88:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800ec8c:	693a      	ldr	r2, [r7, #16]
 800ec8e:	4313      	orrs	r3, r2
 800ec90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	697a      	ldr	r2, [r7, #20]
 800ec96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	693a      	ldr	r2, [r7, #16]
 800ec9c:	621a      	str	r2, [r3, #32]
}
 800ec9e:	bf00      	nop
 800eca0:	371c      	adds	r7, #28
 800eca2:	46bd      	mov	sp, r7
 800eca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca8:	4770      	bx	lr

0800ecaa <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ecaa:	b480      	push	{r7}
 800ecac:	b087      	sub	sp, #28
 800ecae:	af00      	add	r7, sp, #0
 800ecb0:	60f8      	str	r0, [r7, #12]
 800ecb2:	60b9      	str	r1, [r7, #8]
 800ecb4:	607a      	str	r2, [r7, #4]
 800ecb6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	6a1b      	ldr	r3, [r3, #32]
 800ecbc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	69db      	ldr	r3, [r3, #28]
 800ecc8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	6a1b      	ldr	r3, [r3, #32]
 800ecce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800ecd0:	697b      	ldr	r3, [r7, #20]
 800ecd2:	f023 0303 	bic.w	r3, r3, #3
 800ecd6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800ecd8:	697a      	ldr	r2, [r7, #20]
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	4313      	orrs	r3, r2
 800ecde:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800ece0:	697b      	ldr	r3, [r7, #20]
 800ece2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ece6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800ece8:	683b      	ldr	r3, [r7, #0]
 800ecea:	011b      	lsls	r3, r3, #4
 800ecec:	b2db      	uxtb	r3, r3
 800ecee:	697a      	ldr	r2, [r7, #20]
 800ecf0:	4313      	orrs	r3, r2
 800ecf2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800ecf4:	693b      	ldr	r3, [r7, #16]
 800ecf6:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800ecfa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800ecfc:	68bb      	ldr	r3, [r7, #8]
 800ecfe:	021b      	lsls	r3, r3, #8
 800ed00:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800ed04:	693a      	ldr	r2, [r7, #16]
 800ed06:	4313      	orrs	r3, r2
 800ed08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	697a      	ldr	r2, [r7, #20]
 800ed0e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	693a      	ldr	r2, [r7, #16]
 800ed14:	621a      	str	r2, [r3, #32]
}
 800ed16:	bf00      	nop
 800ed18:	371c      	adds	r7, #28
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed20:	4770      	bx	lr

0800ed22 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ed22:	b480      	push	{r7}
 800ed24:	b087      	sub	sp, #28
 800ed26:	af00      	add	r7, sp, #0
 800ed28:	60f8      	str	r0, [r7, #12]
 800ed2a:	60b9      	str	r1, [r7, #8]
 800ed2c:	607a      	str	r2, [r7, #4]
 800ed2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	6a1b      	ldr	r3, [r3, #32]
 800ed34:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	69db      	ldr	r3, [r3, #28]
 800ed40:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	6a1b      	ldr	r3, [r3, #32]
 800ed46:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800ed48:	697b      	ldr	r3, [r7, #20]
 800ed4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ed4e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	021b      	lsls	r3, r3, #8
 800ed54:	697a      	ldr	r2, [r7, #20]
 800ed56:	4313      	orrs	r3, r2
 800ed58:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800ed5a:	697b      	ldr	r3, [r7, #20]
 800ed5c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ed60:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800ed62:	683b      	ldr	r3, [r7, #0]
 800ed64:	031b      	lsls	r3, r3, #12
 800ed66:	b29b      	uxth	r3, r3
 800ed68:	697a      	ldr	r2, [r7, #20]
 800ed6a:	4313      	orrs	r3, r2
 800ed6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800ed6e:	693b      	ldr	r3, [r7, #16]
 800ed70:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800ed74:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800ed76:	68bb      	ldr	r3, [r7, #8]
 800ed78:	031b      	lsls	r3, r3, #12
 800ed7a:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800ed7e:	693a      	ldr	r2, [r7, #16]
 800ed80:	4313      	orrs	r3, r2
 800ed82:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	697a      	ldr	r2, [r7, #20]
 800ed88:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	693a      	ldr	r2, [r7, #16]
 800ed8e:	621a      	str	r2, [r3, #32]
}
 800ed90:	bf00      	nop
 800ed92:	371c      	adds	r7, #28
 800ed94:	46bd      	mov	sp, r7
 800ed96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9a:	4770      	bx	lr

0800ed9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ed9c:	b480      	push	{r7}
 800ed9e:	b087      	sub	sp, #28
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	60f8      	str	r0, [r7, #12]
 800eda4:	60b9      	str	r1, [r7, #8]
 800eda6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800eda8:	68bb      	ldr	r3, [r7, #8]
 800edaa:	f003 031f 	and.w	r3, r3, #31
 800edae:	2201      	movs	r2, #1
 800edb0:	fa02 f303 	lsl.w	r3, r2, r3
 800edb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	6a1a      	ldr	r2, [r3, #32]
 800edba:	697b      	ldr	r3, [r7, #20]
 800edbc:	43db      	mvns	r3, r3
 800edbe:	401a      	ands	r2, r3
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	6a1a      	ldr	r2, [r3, #32]
 800edc8:	68bb      	ldr	r3, [r7, #8]
 800edca:	f003 031f 	and.w	r3, r3, #31
 800edce:	6879      	ldr	r1, [r7, #4]
 800edd0:	fa01 f303 	lsl.w	r3, r1, r3
 800edd4:	431a      	orrs	r2, r3
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	621a      	str	r2, [r3, #32]
}
 800edda:	bf00      	nop
 800eddc:	371c      	adds	r7, #28
 800edde:	46bd      	mov	sp, r7
 800ede0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede4:	4770      	bx	lr
	...

0800ede8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b084      	sub	sp, #16
 800edec:	af00      	add	r7, sp, #0
 800edee:	6078      	str	r0, [r7, #4]
 800edf0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d109      	bne.n	800ee0c <HAL_TIMEx_PWMN_Start+0x24>
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800edfe:	b2db      	uxtb	r3, r3
 800ee00:	2b01      	cmp	r3, #1
 800ee02:	bf14      	ite	ne
 800ee04:	2301      	movne	r3, #1
 800ee06:	2300      	moveq	r3, #0
 800ee08:	b2db      	uxtb	r3, r3
 800ee0a:	e022      	b.n	800ee52 <HAL_TIMEx_PWMN_Start+0x6a>
 800ee0c:	683b      	ldr	r3, [r7, #0]
 800ee0e:	2b04      	cmp	r3, #4
 800ee10:	d109      	bne.n	800ee26 <HAL_TIMEx_PWMN_Start+0x3e>
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ee18:	b2db      	uxtb	r3, r3
 800ee1a:	2b01      	cmp	r3, #1
 800ee1c:	bf14      	ite	ne
 800ee1e:	2301      	movne	r3, #1
 800ee20:	2300      	moveq	r3, #0
 800ee22:	b2db      	uxtb	r3, r3
 800ee24:	e015      	b.n	800ee52 <HAL_TIMEx_PWMN_Start+0x6a>
 800ee26:	683b      	ldr	r3, [r7, #0]
 800ee28:	2b08      	cmp	r3, #8
 800ee2a:	d109      	bne.n	800ee40 <HAL_TIMEx_PWMN_Start+0x58>
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800ee32:	b2db      	uxtb	r3, r3
 800ee34:	2b01      	cmp	r3, #1
 800ee36:	bf14      	ite	ne
 800ee38:	2301      	movne	r3, #1
 800ee3a:	2300      	moveq	r3, #0
 800ee3c:	b2db      	uxtb	r3, r3
 800ee3e:	e008      	b.n	800ee52 <HAL_TIMEx_PWMN_Start+0x6a>
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800ee46:	b2db      	uxtb	r3, r3
 800ee48:	2b01      	cmp	r3, #1
 800ee4a:	bf14      	ite	ne
 800ee4c:	2301      	movne	r3, #1
 800ee4e:	2300      	moveq	r3, #0
 800ee50:	b2db      	uxtb	r3, r3
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d001      	beq.n	800ee5a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800ee56:	2301      	movs	r3, #1
 800ee58:	e07d      	b.n	800ef56 <HAL_TIMEx_PWMN_Start+0x16e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ee5a:	683b      	ldr	r3, [r7, #0]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d104      	bne.n	800ee6a <HAL_TIMEx_PWMN_Start+0x82>
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2202      	movs	r2, #2
 800ee64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ee68:	e013      	b.n	800ee92 <HAL_TIMEx_PWMN_Start+0xaa>
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	2b04      	cmp	r3, #4
 800ee6e:	d104      	bne.n	800ee7a <HAL_TIMEx_PWMN_Start+0x92>
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	2202      	movs	r2, #2
 800ee74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ee78:	e00b      	b.n	800ee92 <HAL_TIMEx_PWMN_Start+0xaa>
 800ee7a:	683b      	ldr	r3, [r7, #0]
 800ee7c:	2b08      	cmp	r3, #8
 800ee7e:	d104      	bne.n	800ee8a <HAL_TIMEx_PWMN_Start+0xa2>
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	2202      	movs	r2, #2
 800ee84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ee88:	e003      	b.n	800ee92 <HAL_TIMEx_PWMN_Start+0xaa>
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	2202      	movs	r2, #2
 800ee8e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	2204      	movs	r2, #4
 800ee98:	6839      	ldr	r1, [r7, #0]
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	f000 fa0e 	bl	800f2bc <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800eeae:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	4a2a      	ldr	r2, [pc, #168]	@ (800ef60 <HAL_TIMEx_PWMN_Start+0x178>)
 800eeb6:	4293      	cmp	r3, r2
 800eeb8:	d02c      	beq.n	800ef14 <HAL_TIMEx_PWMN_Start+0x12c>
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eec2:	d027      	beq.n	800ef14 <HAL_TIMEx_PWMN_Start+0x12c>
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	4a26      	ldr	r2, [pc, #152]	@ (800ef64 <HAL_TIMEx_PWMN_Start+0x17c>)
 800eeca:	4293      	cmp	r3, r2
 800eecc:	d022      	beq.n	800ef14 <HAL_TIMEx_PWMN_Start+0x12c>
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	4a25      	ldr	r2, [pc, #148]	@ (800ef68 <HAL_TIMEx_PWMN_Start+0x180>)
 800eed4:	4293      	cmp	r3, r2
 800eed6:	d01d      	beq.n	800ef14 <HAL_TIMEx_PWMN_Start+0x12c>
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	4a23      	ldr	r2, [pc, #140]	@ (800ef6c <HAL_TIMEx_PWMN_Start+0x184>)
 800eede:	4293      	cmp	r3, r2
 800eee0:	d018      	beq.n	800ef14 <HAL_TIMEx_PWMN_Start+0x12c>
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	4a22      	ldr	r2, [pc, #136]	@ (800ef70 <HAL_TIMEx_PWMN_Start+0x188>)
 800eee8:	4293      	cmp	r3, r2
 800eeea:	d013      	beq.n	800ef14 <HAL_TIMEx_PWMN_Start+0x12c>
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	4a20      	ldr	r2, [pc, #128]	@ (800ef74 <HAL_TIMEx_PWMN_Start+0x18c>)
 800eef2:	4293      	cmp	r3, r2
 800eef4:	d00e      	beq.n	800ef14 <HAL_TIMEx_PWMN_Start+0x12c>
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	4a1f      	ldr	r2, [pc, #124]	@ (800ef78 <HAL_TIMEx_PWMN_Start+0x190>)
 800eefc:	4293      	cmp	r3, r2
 800eefe:	d009      	beq.n	800ef14 <HAL_TIMEx_PWMN_Start+0x12c>
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	4a1d      	ldr	r2, [pc, #116]	@ (800ef7c <HAL_TIMEx_PWMN_Start+0x194>)
 800ef06:	4293      	cmp	r3, r2
 800ef08:	d004      	beq.n	800ef14 <HAL_TIMEx_PWMN_Start+0x12c>
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	4a1c      	ldr	r2, [pc, #112]	@ (800ef80 <HAL_TIMEx_PWMN_Start+0x198>)
 800ef10:	4293      	cmp	r3, r2
 800ef12:	d115      	bne.n	800ef40 <HAL_TIMEx_PWMN_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	689a      	ldr	r2, [r3, #8]
 800ef1a:	4b1a      	ldr	r3, [pc, #104]	@ (800ef84 <HAL_TIMEx_PWMN_Start+0x19c>)
 800ef1c:	4013      	ands	r3, r2
 800ef1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	2b06      	cmp	r3, #6
 800ef24:	d015      	beq.n	800ef52 <HAL_TIMEx_PWMN_Start+0x16a>
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ef2c:	d011      	beq.n	800ef52 <HAL_TIMEx_PWMN_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	681a      	ldr	r2, [r3, #0]
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	f042 0201 	orr.w	r2, r2, #1
 800ef3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef3e:	e008      	b.n	800ef52 <HAL_TIMEx_PWMN_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	681a      	ldr	r2, [r3, #0]
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	f042 0201 	orr.w	r2, r2, #1
 800ef4e:	601a      	str	r2, [r3, #0]
 800ef50:	e000      	b.n	800ef54 <HAL_TIMEx_PWMN_Start+0x16c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ef54:	2300      	movs	r3, #0
}
 800ef56:	4618      	mov	r0, r3
 800ef58:	3710      	adds	r7, #16
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	bd80      	pop	{r7, pc}
 800ef5e:	bf00      	nop
 800ef60:	40010000 	.word	0x40010000
 800ef64:	40000400 	.word	0x40000400
 800ef68:	40000800 	.word	0x40000800
 800ef6c:	40000c00 	.word	0x40000c00
 800ef70:	40010400 	.word	0x40010400
 800ef74:	40001800 	.word	0x40001800
 800ef78:	40014000 	.word	0x40014000
 800ef7c:	4000e000 	.word	0x4000e000
 800ef80:	4000e400 	.word	0x4000e400
 800ef84:	00010007 	.word	0x00010007

0800ef88 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b082      	sub	sp, #8
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
 800ef90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	2200      	movs	r2, #0
 800ef98:	6839      	ldr	r1, [r7, #0]
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	f000 f98e 	bl	800f2bc <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	6a1a      	ldr	r2, [r3, #32]
 800efa6:	f241 1311 	movw	r3, #4369	@ 0x1111
 800efaa:	4013      	ands	r3, r2
 800efac:	2b00      	cmp	r3, #0
 800efae:	d10f      	bne.n	800efd0 <HAL_TIMEx_PWMN_Stop+0x48>
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	6a1a      	ldr	r2, [r3, #32]
 800efb6:	f240 4344 	movw	r3, #1092	@ 0x444
 800efba:	4013      	ands	r3, r2
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d107      	bne.n	800efd0 <HAL_TIMEx_PWMN_Stop+0x48>
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800efce:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	6a1a      	ldr	r2, [r3, #32]
 800efd6:	f241 1311 	movw	r3, #4369	@ 0x1111
 800efda:	4013      	ands	r3, r2
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d10f      	bne.n	800f000 <HAL_TIMEx_PWMN_Stop+0x78>
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	6a1a      	ldr	r2, [r3, #32]
 800efe6:	f240 4344 	movw	r3, #1092	@ 0x444
 800efea:	4013      	ands	r3, r2
 800efec:	2b00      	cmp	r3, #0
 800efee:	d107      	bne.n	800f000 <HAL_TIMEx_PWMN_Stop+0x78>
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	681a      	ldr	r2, [r3, #0]
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	f022 0201 	bic.w	r2, r2, #1
 800effe:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f000:	683b      	ldr	r3, [r7, #0]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d104      	bne.n	800f010 <HAL_TIMEx_PWMN_Stop+0x88>
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	2201      	movs	r2, #1
 800f00a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f00e:	e013      	b.n	800f038 <HAL_TIMEx_PWMN_Stop+0xb0>
 800f010:	683b      	ldr	r3, [r7, #0]
 800f012:	2b04      	cmp	r3, #4
 800f014:	d104      	bne.n	800f020 <HAL_TIMEx_PWMN_Stop+0x98>
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	2201      	movs	r2, #1
 800f01a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f01e:	e00b      	b.n	800f038 <HAL_TIMEx_PWMN_Stop+0xb0>
 800f020:	683b      	ldr	r3, [r7, #0]
 800f022:	2b08      	cmp	r3, #8
 800f024:	d104      	bne.n	800f030 <HAL_TIMEx_PWMN_Stop+0xa8>
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	2201      	movs	r2, #1
 800f02a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f02e:	e003      	b.n	800f038 <HAL_TIMEx_PWMN_Stop+0xb0>
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	2201      	movs	r2, #1
 800f034:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 800f038:	2300      	movs	r3, #0
}
 800f03a:	4618      	mov	r0, r3
 800f03c:	3708      	adds	r7, #8
 800f03e:	46bd      	mov	sp, r7
 800f040:	bd80      	pop	{r7, pc}
	...

0800f044 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f044:	b480      	push	{r7}
 800f046:	b085      	sub	sp, #20
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
 800f04c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f054:	2b01      	cmp	r3, #1
 800f056:	d101      	bne.n	800f05c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f058:	2302      	movs	r3, #2
 800f05a:	e077      	b.n	800f14c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	2201      	movs	r2, #1
 800f060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	2202      	movs	r2, #2
 800f068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	685b      	ldr	r3, [r3, #4]
 800f072:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	689b      	ldr	r3, [r3, #8]
 800f07a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	4a35      	ldr	r2, [pc, #212]	@ (800f158 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f082:	4293      	cmp	r3, r2
 800f084:	d004      	beq.n	800f090 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	4a34      	ldr	r2, [pc, #208]	@ (800f15c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f08c:	4293      	cmp	r3, r2
 800f08e:	d108      	bne.n	800f0a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f096:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f098:	683b      	ldr	r3, [r7, #0]
 800f09a:	685b      	ldr	r3, [r3, #4]
 800f09c:	68fa      	ldr	r2, [r7, #12]
 800f09e:	4313      	orrs	r3, r2
 800f0a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f0a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f0aa:	683b      	ldr	r3, [r7, #0]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	68fa      	ldr	r2, [r7, #12]
 800f0b0:	4313      	orrs	r3, r2
 800f0b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	68fa      	ldr	r2, [r7, #12]
 800f0ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	4a25      	ldr	r2, [pc, #148]	@ (800f158 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f0c2:	4293      	cmp	r3, r2
 800f0c4:	d02c      	beq.n	800f120 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f0ce:	d027      	beq.n	800f120 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	4a22      	ldr	r2, [pc, #136]	@ (800f160 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800f0d6:	4293      	cmp	r3, r2
 800f0d8:	d022      	beq.n	800f120 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	4a21      	ldr	r2, [pc, #132]	@ (800f164 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800f0e0:	4293      	cmp	r3, r2
 800f0e2:	d01d      	beq.n	800f120 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	4a1f      	ldr	r2, [pc, #124]	@ (800f168 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800f0ea:	4293      	cmp	r3, r2
 800f0ec:	d018      	beq.n	800f120 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	4a1a      	ldr	r2, [pc, #104]	@ (800f15c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f0f4:	4293      	cmp	r3, r2
 800f0f6:	d013      	beq.n	800f120 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	4a1b      	ldr	r2, [pc, #108]	@ (800f16c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800f0fe:	4293      	cmp	r3, r2
 800f100:	d00e      	beq.n	800f120 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	4a1a      	ldr	r2, [pc, #104]	@ (800f170 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800f108:	4293      	cmp	r3, r2
 800f10a:	d009      	beq.n	800f120 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	4a18      	ldr	r2, [pc, #96]	@ (800f174 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800f112:	4293      	cmp	r3, r2
 800f114:	d004      	beq.n	800f120 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	4a17      	ldr	r2, [pc, #92]	@ (800f178 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800f11c:	4293      	cmp	r3, r2
 800f11e:	d10c      	bne.n	800f13a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f120:	68bb      	ldr	r3, [r7, #8]
 800f122:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f126:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f128:	683b      	ldr	r3, [r7, #0]
 800f12a:	689b      	ldr	r3, [r3, #8]
 800f12c:	68ba      	ldr	r2, [r7, #8]
 800f12e:	4313      	orrs	r3, r2
 800f130:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	68ba      	ldr	r2, [r7, #8]
 800f138:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	2201      	movs	r2, #1
 800f13e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	2200      	movs	r2, #0
 800f146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f14a:	2300      	movs	r3, #0
}
 800f14c:	4618      	mov	r0, r3
 800f14e:	3714      	adds	r7, #20
 800f150:	46bd      	mov	sp, r7
 800f152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f156:	4770      	bx	lr
 800f158:	40010000 	.word	0x40010000
 800f15c:	40010400 	.word	0x40010400
 800f160:	40000400 	.word	0x40000400
 800f164:	40000800 	.word	0x40000800
 800f168:	40000c00 	.word	0x40000c00
 800f16c:	40001800 	.word	0x40001800
 800f170:	40014000 	.word	0x40014000
 800f174:	4000e000 	.word	0x4000e000
 800f178:	4000e400 	.word	0x4000e400

0800f17c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f17c:	b480      	push	{r7}
 800f17e:	b085      	sub	sp, #20
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
 800f184:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f186:	2300      	movs	r3, #0
 800f188:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f190:	2b01      	cmp	r3, #1
 800f192:	d101      	bne.n	800f198 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f194:	2302      	movs	r3, #2
 800f196:	e087      	b.n	800f2a8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	2201      	movs	r2, #1
 800f19c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800f1a6:	683b      	ldr	r3, [r7, #0]
 800f1a8:	68db      	ldr	r3, [r3, #12]
 800f1aa:	4313      	orrs	r3, r2
 800f1ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f1b4:	683b      	ldr	r3, [r7, #0]
 800f1b6:	689b      	ldr	r3, [r3, #8]
 800f1b8:	4313      	orrs	r3, r2
 800f1ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800f1c2:	683b      	ldr	r3, [r7, #0]
 800f1c4:	685b      	ldr	r3, [r3, #4]
 800f1c6:	4313      	orrs	r3, r2
 800f1c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800f1d0:	683b      	ldr	r3, [r7, #0]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	4313      	orrs	r3, r2
 800f1d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f1de:	683b      	ldr	r3, [r7, #0]
 800f1e0:	691b      	ldr	r3, [r3, #16]
 800f1e2:	4313      	orrs	r3, r2
 800f1e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	695b      	ldr	r3, [r3, #20]
 800f1f0:	4313      	orrs	r3, r2
 800f1f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f1fe:	4313      	orrs	r3, r2
 800f200:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800f208:	683b      	ldr	r3, [r7, #0]
 800f20a:	699b      	ldr	r3, [r3, #24]
 800f20c:	041b      	lsls	r3, r3, #16
 800f20e:	4313      	orrs	r3, r2
 800f210:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	4a27      	ldr	r2, [pc, #156]	@ (800f2b4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800f218:	4293      	cmp	r3, r2
 800f21a:	d004      	beq.n	800f226 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	4a25      	ldr	r2, [pc, #148]	@ (800f2b8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800f222:	4293      	cmp	r3, r2
 800f224:	d106      	bne.n	800f234 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800f22c:	683b      	ldr	r3, [r7, #0]
 800f22e:	69db      	ldr	r3, [r3, #28]
 800f230:	4313      	orrs	r3, r2
 800f232:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	4a1e      	ldr	r2, [pc, #120]	@ (800f2b4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800f23a:	4293      	cmp	r3, r2
 800f23c:	d004      	beq.n	800f248 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	4a1d      	ldr	r2, [pc, #116]	@ (800f2b8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800f244:	4293      	cmp	r3, r2
 800f246:	d126      	bne.n	800f296 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800f24e:	683b      	ldr	r3, [r7, #0]
 800f250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f252:	051b      	lsls	r3, r3, #20
 800f254:	4313      	orrs	r3, r2
 800f256:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800f25e:	683b      	ldr	r3, [r7, #0]
 800f260:	6a1b      	ldr	r3, [r3, #32]
 800f262:	4313      	orrs	r3, r2
 800f264:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800f26c:	683b      	ldr	r3, [r7, #0]
 800f26e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f270:	4313      	orrs	r3, r2
 800f272:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	4a0e      	ldr	r2, [pc, #56]	@ (800f2b4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800f27a:	4293      	cmp	r3, r2
 800f27c:	d004      	beq.n	800f288 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	4a0d      	ldr	r2, [pc, #52]	@ (800f2b8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800f284:	4293      	cmp	r3, r2
 800f286:	d106      	bne.n	800f296 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800f28e:	683b      	ldr	r3, [r7, #0]
 800f290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f292:	4313      	orrs	r3, r2
 800f294:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	68fa      	ldr	r2, [r7, #12]
 800f29c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	2200      	movs	r2, #0
 800f2a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f2a6:	2300      	movs	r3, #0
}
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	3714      	adds	r7, #20
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b2:	4770      	bx	lr
 800f2b4:	40010000 	.word	0x40010000
 800f2b8:	40010400 	.word	0x40010400

0800f2bc <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800f2bc:	b480      	push	{r7}
 800f2be:	b087      	sub	sp, #28
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	60f8      	str	r0, [r7, #12]
 800f2c4:	60b9      	str	r1, [r7, #8]
 800f2c6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f2c8:	68bb      	ldr	r3, [r7, #8]
 800f2ca:	f003 031f 	and.w	r3, r3, #31
 800f2ce:	2204      	movs	r2, #4
 800f2d0:	fa02 f303 	lsl.w	r3, r2, r3
 800f2d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	6a1a      	ldr	r2, [r3, #32]
 800f2da:	697b      	ldr	r3, [r7, #20]
 800f2dc:	43db      	mvns	r3, r3
 800f2de:	401a      	ands	r2, r3
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	6a1a      	ldr	r2, [r3, #32]
 800f2e8:	68bb      	ldr	r3, [r7, #8]
 800f2ea:	f003 031f 	and.w	r3, r3, #31
 800f2ee:	6879      	ldr	r1, [r7, #4]
 800f2f0:	fa01 f303 	lsl.w	r3, r1, r3
 800f2f4:	431a      	orrs	r2, r3
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	621a      	str	r2, [r3, #32]
}
 800f2fa:	bf00      	nop
 800f2fc:	371c      	adds	r7, #28
 800f2fe:	46bd      	mov	sp, r7
 800f300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f304:	4770      	bx	lr

0800f306 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f306:	b580      	push	{r7, lr}
 800f308:	b082      	sub	sp, #8
 800f30a:	af00      	add	r7, sp, #0
 800f30c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d101      	bne.n	800f318 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f314:	2301      	movs	r3, #1
 800f316:	e042      	b.n	800f39e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d106      	bne.n	800f330 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	2200      	movs	r2, #0
 800f326:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f32a:	6878      	ldr	r0, [r7, #4]
 800f32c:	f7f4 faa2 	bl	8003874 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	2224      	movs	r2, #36	@ 0x24
 800f334:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	681a      	ldr	r2, [r3, #0]
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	f022 0201 	bic.w	r2, r2, #1
 800f346:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f348:	6878      	ldr	r0, [r7, #4]
 800f34a:	f000 f983 	bl	800f654 <UART_SetConfig>
 800f34e:	4603      	mov	r3, r0
 800f350:	2b01      	cmp	r3, #1
 800f352:	d101      	bne.n	800f358 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800f354:	2301      	movs	r3, #1
 800f356:	e022      	b.n	800f39e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d002      	beq.n	800f366 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800f360:	6878      	ldr	r0, [r7, #4]
 800f362:	f000 ffe3 	bl	801032c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	685a      	ldr	r2, [r3, #4]
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f374:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	689a      	ldr	r2, [r3, #8]
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f384:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	681a      	ldr	r2, [r3, #0]
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	f042 0201 	orr.w	r2, r2, #1
 800f394:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f396:	6878      	ldr	r0, [r7, #4]
 800f398:	f001 f86a 	bl	8010470 <UART_CheckIdleState>
 800f39c:	4603      	mov	r3, r0
}
 800f39e:	4618      	mov	r0, r3
 800f3a0:	3708      	adds	r7, #8
 800f3a2:	46bd      	mov	sp, r7
 800f3a4:	bd80      	pop	{r7, pc}

0800f3a6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f3a6:	b580      	push	{r7, lr}
 800f3a8:	b08a      	sub	sp, #40	@ 0x28
 800f3aa:	af02      	add	r7, sp, #8
 800f3ac:	60f8      	str	r0, [r7, #12]
 800f3ae:	60b9      	str	r1, [r7, #8]
 800f3b0:	603b      	str	r3, [r7, #0]
 800f3b2:	4613      	mov	r3, r2
 800f3b4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f3bc:	2b20      	cmp	r3, #32
 800f3be:	d17b      	bne.n	800f4b8 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800f3c0:	68bb      	ldr	r3, [r7, #8]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d002      	beq.n	800f3cc <HAL_UART_Transmit+0x26>
 800f3c6:	88fb      	ldrh	r3, [r7, #6]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d101      	bne.n	800f3d0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800f3cc:	2301      	movs	r3, #1
 800f3ce:	e074      	b.n	800f4ba <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	2200      	movs	r2, #0
 800f3d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	2221      	movs	r2, #33	@ 0x21
 800f3dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f3e0:	f7f4 fe1c 	bl	800401c <HAL_GetTick>
 800f3e4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	88fa      	ldrh	r2, [r7, #6]
 800f3ea:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	88fa      	ldrh	r2, [r7, #6]
 800f3f2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	689b      	ldr	r3, [r3, #8]
 800f3fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f3fe:	d108      	bne.n	800f412 <HAL_UART_Transmit+0x6c>
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	691b      	ldr	r3, [r3, #16]
 800f404:	2b00      	cmp	r3, #0
 800f406:	d104      	bne.n	800f412 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800f408:	2300      	movs	r3, #0
 800f40a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f40c:	68bb      	ldr	r3, [r7, #8]
 800f40e:	61bb      	str	r3, [r7, #24]
 800f410:	e003      	b.n	800f41a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800f412:	68bb      	ldr	r3, [r7, #8]
 800f414:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f416:	2300      	movs	r3, #0
 800f418:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f41a:	e030      	b.n	800f47e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f41c:	683b      	ldr	r3, [r7, #0]
 800f41e:	9300      	str	r3, [sp, #0]
 800f420:	697b      	ldr	r3, [r7, #20]
 800f422:	2200      	movs	r2, #0
 800f424:	2180      	movs	r1, #128	@ 0x80
 800f426:	68f8      	ldr	r0, [r7, #12]
 800f428:	f001 f8cc 	bl	80105c4 <UART_WaitOnFlagUntilTimeout>
 800f42c:	4603      	mov	r3, r0
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d005      	beq.n	800f43e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	2220      	movs	r2, #32
 800f436:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800f43a:	2303      	movs	r3, #3
 800f43c:	e03d      	b.n	800f4ba <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800f43e:	69fb      	ldr	r3, [r7, #28]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d10b      	bne.n	800f45c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f444:	69bb      	ldr	r3, [r7, #24]
 800f446:	881b      	ldrh	r3, [r3, #0]
 800f448:	461a      	mov	r2, r3
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f452:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800f454:	69bb      	ldr	r3, [r7, #24]
 800f456:	3302      	adds	r3, #2
 800f458:	61bb      	str	r3, [r7, #24]
 800f45a:	e007      	b.n	800f46c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f45c:	69fb      	ldr	r3, [r7, #28]
 800f45e:	781a      	ldrb	r2, [r3, #0]
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800f466:	69fb      	ldr	r3, [r7, #28]
 800f468:	3301      	adds	r3, #1
 800f46a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f472:	b29b      	uxth	r3, r3
 800f474:	3b01      	subs	r3, #1
 800f476:	b29a      	uxth	r2, r3
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f484:	b29b      	uxth	r3, r3
 800f486:	2b00      	cmp	r3, #0
 800f488:	d1c8      	bne.n	800f41c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f48a:	683b      	ldr	r3, [r7, #0]
 800f48c:	9300      	str	r3, [sp, #0]
 800f48e:	697b      	ldr	r3, [r7, #20]
 800f490:	2200      	movs	r2, #0
 800f492:	2140      	movs	r1, #64	@ 0x40
 800f494:	68f8      	ldr	r0, [r7, #12]
 800f496:	f001 f895 	bl	80105c4 <UART_WaitOnFlagUntilTimeout>
 800f49a:	4603      	mov	r3, r0
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d005      	beq.n	800f4ac <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	2220      	movs	r2, #32
 800f4a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800f4a8:	2303      	movs	r3, #3
 800f4aa:	e006      	b.n	800f4ba <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	2220      	movs	r2, #32
 800f4b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	e000      	b.n	800f4ba <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800f4b8:	2302      	movs	r3, #2
  }
}
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	3720      	adds	r7, #32
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	bd80      	pop	{r7, pc}

0800f4c2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f4c2:	b580      	push	{r7, lr}
 800f4c4:	b08a      	sub	sp, #40	@ 0x28
 800f4c6:	af02      	add	r7, sp, #8
 800f4c8:	60f8      	str	r0, [r7, #12]
 800f4ca:	60b9      	str	r1, [r7, #8]
 800f4cc:	603b      	str	r3, [r7, #0]
 800f4ce:	4613      	mov	r3, r2
 800f4d0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f4d8:	2b20      	cmp	r3, #32
 800f4da:	f040 80b5 	bne.w	800f648 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800f4de:	68bb      	ldr	r3, [r7, #8]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d002      	beq.n	800f4ea <HAL_UART_Receive+0x28>
 800f4e4:	88fb      	ldrh	r3, [r7, #6]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d101      	bne.n	800f4ee <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800f4ea:	2301      	movs	r3, #1
 800f4ec:	e0ad      	b.n	800f64a <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	2222      	movs	r2, #34	@ 0x22
 800f4fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	2200      	movs	r2, #0
 800f502:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f504:	f7f4 fd8a 	bl	800401c <HAL_GetTick>
 800f508:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	88fa      	ldrh	r2, [r7, #6]
 800f50e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	88fa      	ldrh	r2, [r7, #6]
 800f516:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	689b      	ldr	r3, [r3, #8]
 800f51e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f522:	d10e      	bne.n	800f542 <HAL_UART_Receive+0x80>
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	691b      	ldr	r3, [r3, #16]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d105      	bne.n	800f538 <HAL_UART_Receive+0x76>
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800f532:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f536:	e02d      	b.n	800f594 <HAL_UART_Receive+0xd2>
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	22ff      	movs	r2, #255	@ 0xff
 800f53c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f540:	e028      	b.n	800f594 <HAL_UART_Receive+0xd2>
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	689b      	ldr	r3, [r3, #8]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d10d      	bne.n	800f566 <HAL_UART_Receive+0xa4>
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	691b      	ldr	r3, [r3, #16]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d104      	bne.n	800f55c <HAL_UART_Receive+0x9a>
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	22ff      	movs	r2, #255	@ 0xff
 800f556:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f55a:	e01b      	b.n	800f594 <HAL_UART_Receive+0xd2>
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	227f      	movs	r2, #127	@ 0x7f
 800f560:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f564:	e016      	b.n	800f594 <HAL_UART_Receive+0xd2>
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	689b      	ldr	r3, [r3, #8]
 800f56a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f56e:	d10d      	bne.n	800f58c <HAL_UART_Receive+0xca>
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	691b      	ldr	r3, [r3, #16]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d104      	bne.n	800f582 <HAL_UART_Receive+0xc0>
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	227f      	movs	r2, #127	@ 0x7f
 800f57c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f580:	e008      	b.n	800f594 <HAL_UART_Receive+0xd2>
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	223f      	movs	r2, #63	@ 0x3f
 800f586:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f58a:	e003      	b.n	800f594 <HAL_UART_Receive+0xd2>
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	2200      	movs	r2, #0
 800f590:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f59a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	689b      	ldr	r3, [r3, #8]
 800f5a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f5a4:	d108      	bne.n	800f5b8 <HAL_UART_Receive+0xf6>
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	691b      	ldr	r3, [r3, #16]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d104      	bne.n	800f5b8 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f5b2:	68bb      	ldr	r3, [r7, #8]
 800f5b4:	61bb      	str	r3, [r7, #24]
 800f5b6:	e003      	b.n	800f5c0 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800f5b8:	68bb      	ldr	r3, [r7, #8]
 800f5ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f5bc:	2300      	movs	r3, #0
 800f5be:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800f5c0:	e036      	b.n	800f630 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800f5c2:	683b      	ldr	r3, [r7, #0]
 800f5c4:	9300      	str	r3, [sp, #0]
 800f5c6:	697b      	ldr	r3, [r7, #20]
 800f5c8:	2200      	movs	r2, #0
 800f5ca:	2120      	movs	r1, #32
 800f5cc:	68f8      	ldr	r0, [r7, #12]
 800f5ce:	f000 fff9 	bl	80105c4 <UART_WaitOnFlagUntilTimeout>
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d005      	beq.n	800f5e4 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	2220      	movs	r2, #32
 800f5dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800f5e0:	2303      	movs	r3, #3
 800f5e2:	e032      	b.n	800f64a <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800f5e4:	69fb      	ldr	r3, [r7, #28]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d10c      	bne.n	800f604 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5f0:	b29a      	uxth	r2, r3
 800f5f2:	8a7b      	ldrh	r3, [r7, #18]
 800f5f4:	4013      	ands	r3, r2
 800f5f6:	b29a      	uxth	r2, r3
 800f5f8:	69bb      	ldr	r3, [r7, #24]
 800f5fa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800f5fc:	69bb      	ldr	r3, [r7, #24]
 800f5fe:	3302      	adds	r3, #2
 800f600:	61bb      	str	r3, [r7, #24]
 800f602:	e00c      	b.n	800f61e <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f60a:	b2da      	uxtb	r2, r3
 800f60c:	8a7b      	ldrh	r3, [r7, #18]
 800f60e:	b2db      	uxtb	r3, r3
 800f610:	4013      	ands	r3, r2
 800f612:	b2da      	uxtb	r2, r3
 800f614:	69fb      	ldr	r3, [r7, #28]
 800f616:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800f618:	69fb      	ldr	r3, [r7, #28]
 800f61a:	3301      	adds	r3, #1
 800f61c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f624:	b29b      	uxth	r3, r3
 800f626:	3b01      	subs	r3, #1
 800f628:	b29a      	uxth	r2, r3
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f636:	b29b      	uxth	r3, r3
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d1c2      	bne.n	800f5c2 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	2220      	movs	r2, #32
 800f640:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800f644:	2300      	movs	r3, #0
 800f646:	e000      	b.n	800f64a <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800f648:	2302      	movs	r3, #2
  }
}
 800f64a:	4618      	mov	r0, r3
 800f64c:	3720      	adds	r7, #32
 800f64e:	46bd      	mov	sp, r7
 800f650:	bd80      	pop	{r7, pc}
	...

0800f654 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f654:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f658:	b092      	sub	sp, #72	@ 0x48
 800f65a:	af00      	add	r7, sp, #0
 800f65c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f65e:	2300      	movs	r3, #0
 800f660:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f664:	697b      	ldr	r3, [r7, #20]
 800f666:	689a      	ldr	r2, [r3, #8]
 800f668:	697b      	ldr	r3, [r7, #20]
 800f66a:	691b      	ldr	r3, [r3, #16]
 800f66c:	431a      	orrs	r2, r3
 800f66e:	697b      	ldr	r3, [r7, #20]
 800f670:	695b      	ldr	r3, [r3, #20]
 800f672:	431a      	orrs	r2, r3
 800f674:	697b      	ldr	r3, [r7, #20]
 800f676:	69db      	ldr	r3, [r3, #28]
 800f678:	4313      	orrs	r3, r2
 800f67a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f67c:	697b      	ldr	r3, [r7, #20]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	681a      	ldr	r2, [r3, #0]
 800f682:	4bbe      	ldr	r3, [pc, #760]	@ (800f97c <UART_SetConfig+0x328>)
 800f684:	4013      	ands	r3, r2
 800f686:	697a      	ldr	r2, [r7, #20]
 800f688:	6812      	ldr	r2, [r2, #0]
 800f68a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f68c:	430b      	orrs	r3, r1
 800f68e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f690:	697b      	ldr	r3, [r7, #20]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	685b      	ldr	r3, [r3, #4]
 800f696:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f69a:	697b      	ldr	r3, [r7, #20]
 800f69c:	68da      	ldr	r2, [r3, #12]
 800f69e:	697b      	ldr	r3, [r7, #20]
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	430a      	orrs	r2, r1
 800f6a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f6a6:	697b      	ldr	r3, [r7, #20]
 800f6a8:	699b      	ldr	r3, [r3, #24]
 800f6aa:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f6ac:	697b      	ldr	r3, [r7, #20]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	4ab3      	ldr	r2, [pc, #716]	@ (800f980 <UART_SetConfig+0x32c>)
 800f6b2:	4293      	cmp	r3, r2
 800f6b4:	d004      	beq.n	800f6c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f6b6:	697b      	ldr	r3, [r7, #20]
 800f6b8:	6a1b      	ldr	r3, [r3, #32]
 800f6ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f6bc:	4313      	orrs	r3, r2
 800f6be:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f6c0:	697b      	ldr	r3, [r7, #20]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	689a      	ldr	r2, [r3, #8]
 800f6c6:	4baf      	ldr	r3, [pc, #700]	@ (800f984 <UART_SetConfig+0x330>)
 800f6c8:	4013      	ands	r3, r2
 800f6ca:	697a      	ldr	r2, [r7, #20]
 800f6cc:	6812      	ldr	r2, [r2, #0]
 800f6ce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f6d0:	430b      	orrs	r3, r1
 800f6d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f6d4:	697b      	ldr	r3, [r7, #20]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6da:	f023 010f 	bic.w	r1, r3, #15
 800f6de:	697b      	ldr	r3, [r7, #20]
 800f6e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f6e2:	697b      	ldr	r3, [r7, #20]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	430a      	orrs	r2, r1
 800f6e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f6ea:	697b      	ldr	r3, [r7, #20]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	4aa6      	ldr	r2, [pc, #664]	@ (800f988 <UART_SetConfig+0x334>)
 800f6f0:	4293      	cmp	r3, r2
 800f6f2:	d177      	bne.n	800f7e4 <UART_SetConfig+0x190>
 800f6f4:	4ba5      	ldr	r3, [pc, #660]	@ (800f98c <UART_SetConfig+0x338>)
 800f6f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f6f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f6fc:	2b28      	cmp	r3, #40	@ 0x28
 800f6fe:	d86d      	bhi.n	800f7dc <UART_SetConfig+0x188>
 800f700:	a201      	add	r2, pc, #4	@ (adr r2, 800f708 <UART_SetConfig+0xb4>)
 800f702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f706:	bf00      	nop
 800f708:	0800f7ad 	.word	0x0800f7ad
 800f70c:	0800f7dd 	.word	0x0800f7dd
 800f710:	0800f7dd 	.word	0x0800f7dd
 800f714:	0800f7dd 	.word	0x0800f7dd
 800f718:	0800f7dd 	.word	0x0800f7dd
 800f71c:	0800f7dd 	.word	0x0800f7dd
 800f720:	0800f7dd 	.word	0x0800f7dd
 800f724:	0800f7dd 	.word	0x0800f7dd
 800f728:	0800f7b5 	.word	0x0800f7b5
 800f72c:	0800f7dd 	.word	0x0800f7dd
 800f730:	0800f7dd 	.word	0x0800f7dd
 800f734:	0800f7dd 	.word	0x0800f7dd
 800f738:	0800f7dd 	.word	0x0800f7dd
 800f73c:	0800f7dd 	.word	0x0800f7dd
 800f740:	0800f7dd 	.word	0x0800f7dd
 800f744:	0800f7dd 	.word	0x0800f7dd
 800f748:	0800f7bd 	.word	0x0800f7bd
 800f74c:	0800f7dd 	.word	0x0800f7dd
 800f750:	0800f7dd 	.word	0x0800f7dd
 800f754:	0800f7dd 	.word	0x0800f7dd
 800f758:	0800f7dd 	.word	0x0800f7dd
 800f75c:	0800f7dd 	.word	0x0800f7dd
 800f760:	0800f7dd 	.word	0x0800f7dd
 800f764:	0800f7dd 	.word	0x0800f7dd
 800f768:	0800f7c5 	.word	0x0800f7c5
 800f76c:	0800f7dd 	.word	0x0800f7dd
 800f770:	0800f7dd 	.word	0x0800f7dd
 800f774:	0800f7dd 	.word	0x0800f7dd
 800f778:	0800f7dd 	.word	0x0800f7dd
 800f77c:	0800f7dd 	.word	0x0800f7dd
 800f780:	0800f7dd 	.word	0x0800f7dd
 800f784:	0800f7dd 	.word	0x0800f7dd
 800f788:	0800f7cd 	.word	0x0800f7cd
 800f78c:	0800f7dd 	.word	0x0800f7dd
 800f790:	0800f7dd 	.word	0x0800f7dd
 800f794:	0800f7dd 	.word	0x0800f7dd
 800f798:	0800f7dd 	.word	0x0800f7dd
 800f79c:	0800f7dd 	.word	0x0800f7dd
 800f7a0:	0800f7dd 	.word	0x0800f7dd
 800f7a4:	0800f7dd 	.word	0x0800f7dd
 800f7a8:	0800f7d5 	.word	0x0800f7d5
 800f7ac:	2301      	movs	r3, #1
 800f7ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7b2:	e326      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800f7b4:	2304      	movs	r3, #4
 800f7b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7ba:	e322      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800f7bc:	2308      	movs	r3, #8
 800f7be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7c2:	e31e      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800f7c4:	2310      	movs	r3, #16
 800f7c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7ca:	e31a      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800f7cc:	2320      	movs	r3, #32
 800f7ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7d2:	e316      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800f7d4:	2340      	movs	r3, #64	@ 0x40
 800f7d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7da:	e312      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800f7dc:	2380      	movs	r3, #128	@ 0x80
 800f7de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f7e2:	e30e      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800f7e4:	697b      	ldr	r3, [r7, #20]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	4a69      	ldr	r2, [pc, #420]	@ (800f990 <UART_SetConfig+0x33c>)
 800f7ea:	4293      	cmp	r3, r2
 800f7ec:	d130      	bne.n	800f850 <UART_SetConfig+0x1fc>
 800f7ee:	4b67      	ldr	r3, [pc, #412]	@ (800f98c <UART_SetConfig+0x338>)
 800f7f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f7f2:	f003 0307 	and.w	r3, r3, #7
 800f7f6:	2b05      	cmp	r3, #5
 800f7f8:	d826      	bhi.n	800f848 <UART_SetConfig+0x1f4>
 800f7fa:	a201      	add	r2, pc, #4	@ (adr r2, 800f800 <UART_SetConfig+0x1ac>)
 800f7fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f800:	0800f819 	.word	0x0800f819
 800f804:	0800f821 	.word	0x0800f821
 800f808:	0800f829 	.word	0x0800f829
 800f80c:	0800f831 	.word	0x0800f831
 800f810:	0800f839 	.word	0x0800f839
 800f814:	0800f841 	.word	0x0800f841
 800f818:	2300      	movs	r3, #0
 800f81a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f81e:	e2f0      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800f820:	2304      	movs	r3, #4
 800f822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f826:	e2ec      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800f828:	2308      	movs	r3, #8
 800f82a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f82e:	e2e8      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800f830:	2310      	movs	r3, #16
 800f832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f836:	e2e4      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800f838:	2320      	movs	r3, #32
 800f83a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f83e:	e2e0      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800f840:	2340      	movs	r3, #64	@ 0x40
 800f842:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f846:	e2dc      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800f848:	2380      	movs	r3, #128	@ 0x80
 800f84a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f84e:	e2d8      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800f850:	697b      	ldr	r3, [r7, #20]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	4a4f      	ldr	r2, [pc, #316]	@ (800f994 <UART_SetConfig+0x340>)
 800f856:	4293      	cmp	r3, r2
 800f858:	d130      	bne.n	800f8bc <UART_SetConfig+0x268>
 800f85a:	4b4c      	ldr	r3, [pc, #304]	@ (800f98c <UART_SetConfig+0x338>)
 800f85c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f85e:	f003 0307 	and.w	r3, r3, #7
 800f862:	2b05      	cmp	r3, #5
 800f864:	d826      	bhi.n	800f8b4 <UART_SetConfig+0x260>
 800f866:	a201      	add	r2, pc, #4	@ (adr r2, 800f86c <UART_SetConfig+0x218>)
 800f868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f86c:	0800f885 	.word	0x0800f885
 800f870:	0800f88d 	.word	0x0800f88d
 800f874:	0800f895 	.word	0x0800f895
 800f878:	0800f89d 	.word	0x0800f89d
 800f87c:	0800f8a5 	.word	0x0800f8a5
 800f880:	0800f8ad 	.word	0x0800f8ad
 800f884:	2300      	movs	r3, #0
 800f886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f88a:	e2ba      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800f88c:	2304      	movs	r3, #4
 800f88e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f892:	e2b6      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800f894:	2308      	movs	r3, #8
 800f896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f89a:	e2b2      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800f89c:	2310      	movs	r3, #16
 800f89e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8a2:	e2ae      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800f8a4:	2320      	movs	r3, #32
 800f8a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8aa:	e2aa      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800f8ac:	2340      	movs	r3, #64	@ 0x40
 800f8ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8b2:	e2a6      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800f8b4:	2380      	movs	r3, #128	@ 0x80
 800f8b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8ba:	e2a2      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800f8bc:	697b      	ldr	r3, [r7, #20]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	4a35      	ldr	r2, [pc, #212]	@ (800f998 <UART_SetConfig+0x344>)
 800f8c2:	4293      	cmp	r3, r2
 800f8c4:	d130      	bne.n	800f928 <UART_SetConfig+0x2d4>
 800f8c6:	4b31      	ldr	r3, [pc, #196]	@ (800f98c <UART_SetConfig+0x338>)
 800f8c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f8ca:	f003 0307 	and.w	r3, r3, #7
 800f8ce:	2b05      	cmp	r3, #5
 800f8d0:	d826      	bhi.n	800f920 <UART_SetConfig+0x2cc>
 800f8d2:	a201      	add	r2, pc, #4	@ (adr r2, 800f8d8 <UART_SetConfig+0x284>)
 800f8d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8d8:	0800f8f1 	.word	0x0800f8f1
 800f8dc:	0800f8f9 	.word	0x0800f8f9
 800f8e0:	0800f901 	.word	0x0800f901
 800f8e4:	0800f909 	.word	0x0800f909
 800f8e8:	0800f911 	.word	0x0800f911
 800f8ec:	0800f919 	.word	0x0800f919
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8f6:	e284      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800f8f8:	2304      	movs	r3, #4
 800f8fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8fe:	e280      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800f900:	2308      	movs	r3, #8
 800f902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f906:	e27c      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800f908:	2310      	movs	r3, #16
 800f90a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f90e:	e278      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800f910:	2320      	movs	r3, #32
 800f912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f916:	e274      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800f918:	2340      	movs	r3, #64	@ 0x40
 800f91a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f91e:	e270      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800f920:	2380      	movs	r3, #128	@ 0x80
 800f922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f926:	e26c      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800f928:	697b      	ldr	r3, [r7, #20]
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	4a1b      	ldr	r2, [pc, #108]	@ (800f99c <UART_SetConfig+0x348>)
 800f92e:	4293      	cmp	r3, r2
 800f930:	d142      	bne.n	800f9b8 <UART_SetConfig+0x364>
 800f932:	4b16      	ldr	r3, [pc, #88]	@ (800f98c <UART_SetConfig+0x338>)
 800f934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f936:	f003 0307 	and.w	r3, r3, #7
 800f93a:	2b05      	cmp	r3, #5
 800f93c:	d838      	bhi.n	800f9b0 <UART_SetConfig+0x35c>
 800f93e:	a201      	add	r2, pc, #4	@ (adr r2, 800f944 <UART_SetConfig+0x2f0>)
 800f940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f944:	0800f95d 	.word	0x0800f95d
 800f948:	0800f965 	.word	0x0800f965
 800f94c:	0800f96d 	.word	0x0800f96d
 800f950:	0800f975 	.word	0x0800f975
 800f954:	0800f9a1 	.word	0x0800f9a1
 800f958:	0800f9a9 	.word	0x0800f9a9
 800f95c:	2300      	movs	r3, #0
 800f95e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f962:	e24e      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800f964:	2304      	movs	r3, #4
 800f966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f96a:	e24a      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800f96c:	2308      	movs	r3, #8
 800f96e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f972:	e246      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800f974:	2310      	movs	r3, #16
 800f976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f97a:	e242      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800f97c:	cfff69f3 	.word	0xcfff69f3
 800f980:	58000c00 	.word	0x58000c00
 800f984:	11fff4ff 	.word	0x11fff4ff
 800f988:	40011000 	.word	0x40011000
 800f98c:	58024400 	.word	0x58024400
 800f990:	40004400 	.word	0x40004400
 800f994:	40004800 	.word	0x40004800
 800f998:	40004c00 	.word	0x40004c00
 800f99c:	40005000 	.word	0x40005000
 800f9a0:	2320      	movs	r3, #32
 800f9a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9a6:	e22c      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800f9a8:	2340      	movs	r3, #64	@ 0x40
 800f9aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9ae:	e228      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800f9b0:	2380      	movs	r3, #128	@ 0x80
 800f9b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9b6:	e224      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800f9b8:	697b      	ldr	r3, [r7, #20]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	4ab1      	ldr	r2, [pc, #708]	@ (800fc84 <UART_SetConfig+0x630>)
 800f9be:	4293      	cmp	r3, r2
 800f9c0:	d176      	bne.n	800fab0 <UART_SetConfig+0x45c>
 800f9c2:	4bb1      	ldr	r3, [pc, #708]	@ (800fc88 <UART_SetConfig+0x634>)
 800f9c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f9c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f9ca:	2b28      	cmp	r3, #40	@ 0x28
 800f9cc:	d86c      	bhi.n	800faa8 <UART_SetConfig+0x454>
 800f9ce:	a201      	add	r2, pc, #4	@ (adr r2, 800f9d4 <UART_SetConfig+0x380>)
 800f9d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9d4:	0800fa79 	.word	0x0800fa79
 800f9d8:	0800faa9 	.word	0x0800faa9
 800f9dc:	0800faa9 	.word	0x0800faa9
 800f9e0:	0800faa9 	.word	0x0800faa9
 800f9e4:	0800faa9 	.word	0x0800faa9
 800f9e8:	0800faa9 	.word	0x0800faa9
 800f9ec:	0800faa9 	.word	0x0800faa9
 800f9f0:	0800faa9 	.word	0x0800faa9
 800f9f4:	0800fa81 	.word	0x0800fa81
 800f9f8:	0800faa9 	.word	0x0800faa9
 800f9fc:	0800faa9 	.word	0x0800faa9
 800fa00:	0800faa9 	.word	0x0800faa9
 800fa04:	0800faa9 	.word	0x0800faa9
 800fa08:	0800faa9 	.word	0x0800faa9
 800fa0c:	0800faa9 	.word	0x0800faa9
 800fa10:	0800faa9 	.word	0x0800faa9
 800fa14:	0800fa89 	.word	0x0800fa89
 800fa18:	0800faa9 	.word	0x0800faa9
 800fa1c:	0800faa9 	.word	0x0800faa9
 800fa20:	0800faa9 	.word	0x0800faa9
 800fa24:	0800faa9 	.word	0x0800faa9
 800fa28:	0800faa9 	.word	0x0800faa9
 800fa2c:	0800faa9 	.word	0x0800faa9
 800fa30:	0800faa9 	.word	0x0800faa9
 800fa34:	0800fa91 	.word	0x0800fa91
 800fa38:	0800faa9 	.word	0x0800faa9
 800fa3c:	0800faa9 	.word	0x0800faa9
 800fa40:	0800faa9 	.word	0x0800faa9
 800fa44:	0800faa9 	.word	0x0800faa9
 800fa48:	0800faa9 	.word	0x0800faa9
 800fa4c:	0800faa9 	.word	0x0800faa9
 800fa50:	0800faa9 	.word	0x0800faa9
 800fa54:	0800fa99 	.word	0x0800fa99
 800fa58:	0800faa9 	.word	0x0800faa9
 800fa5c:	0800faa9 	.word	0x0800faa9
 800fa60:	0800faa9 	.word	0x0800faa9
 800fa64:	0800faa9 	.word	0x0800faa9
 800fa68:	0800faa9 	.word	0x0800faa9
 800fa6c:	0800faa9 	.word	0x0800faa9
 800fa70:	0800faa9 	.word	0x0800faa9
 800fa74:	0800faa1 	.word	0x0800faa1
 800fa78:	2301      	movs	r3, #1
 800fa7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa7e:	e1c0      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800fa80:	2304      	movs	r3, #4
 800fa82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa86:	e1bc      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800fa88:	2308      	movs	r3, #8
 800fa8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa8e:	e1b8      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800fa90:	2310      	movs	r3, #16
 800fa92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa96:	e1b4      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800fa98:	2320      	movs	r3, #32
 800fa9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa9e:	e1b0      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800faa0:	2340      	movs	r3, #64	@ 0x40
 800faa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800faa6:	e1ac      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800faa8:	2380      	movs	r3, #128	@ 0x80
 800faaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800faae:	e1a8      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800fab0:	697b      	ldr	r3, [r7, #20]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	4a75      	ldr	r2, [pc, #468]	@ (800fc8c <UART_SetConfig+0x638>)
 800fab6:	4293      	cmp	r3, r2
 800fab8:	d130      	bne.n	800fb1c <UART_SetConfig+0x4c8>
 800faba:	4b73      	ldr	r3, [pc, #460]	@ (800fc88 <UART_SetConfig+0x634>)
 800fabc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fabe:	f003 0307 	and.w	r3, r3, #7
 800fac2:	2b05      	cmp	r3, #5
 800fac4:	d826      	bhi.n	800fb14 <UART_SetConfig+0x4c0>
 800fac6:	a201      	add	r2, pc, #4	@ (adr r2, 800facc <UART_SetConfig+0x478>)
 800fac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800facc:	0800fae5 	.word	0x0800fae5
 800fad0:	0800faed 	.word	0x0800faed
 800fad4:	0800faf5 	.word	0x0800faf5
 800fad8:	0800fafd 	.word	0x0800fafd
 800fadc:	0800fb05 	.word	0x0800fb05
 800fae0:	0800fb0d 	.word	0x0800fb0d
 800fae4:	2300      	movs	r3, #0
 800fae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800faea:	e18a      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800faec:	2304      	movs	r3, #4
 800faee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800faf2:	e186      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800faf4:	2308      	movs	r3, #8
 800faf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fafa:	e182      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800fafc:	2310      	movs	r3, #16
 800fafe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb02:	e17e      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800fb04:	2320      	movs	r3, #32
 800fb06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb0a:	e17a      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800fb0c:	2340      	movs	r3, #64	@ 0x40
 800fb0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb12:	e176      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800fb14:	2380      	movs	r3, #128	@ 0x80
 800fb16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb1a:	e172      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800fb1c:	697b      	ldr	r3, [r7, #20]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	4a5b      	ldr	r2, [pc, #364]	@ (800fc90 <UART_SetConfig+0x63c>)
 800fb22:	4293      	cmp	r3, r2
 800fb24:	d130      	bne.n	800fb88 <UART_SetConfig+0x534>
 800fb26:	4b58      	ldr	r3, [pc, #352]	@ (800fc88 <UART_SetConfig+0x634>)
 800fb28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fb2a:	f003 0307 	and.w	r3, r3, #7
 800fb2e:	2b05      	cmp	r3, #5
 800fb30:	d826      	bhi.n	800fb80 <UART_SetConfig+0x52c>
 800fb32:	a201      	add	r2, pc, #4	@ (adr r2, 800fb38 <UART_SetConfig+0x4e4>)
 800fb34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb38:	0800fb51 	.word	0x0800fb51
 800fb3c:	0800fb59 	.word	0x0800fb59
 800fb40:	0800fb61 	.word	0x0800fb61
 800fb44:	0800fb69 	.word	0x0800fb69
 800fb48:	0800fb71 	.word	0x0800fb71
 800fb4c:	0800fb79 	.word	0x0800fb79
 800fb50:	2300      	movs	r3, #0
 800fb52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb56:	e154      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800fb58:	2304      	movs	r3, #4
 800fb5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb5e:	e150      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800fb60:	2308      	movs	r3, #8
 800fb62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb66:	e14c      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800fb68:	2310      	movs	r3, #16
 800fb6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb6e:	e148      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800fb70:	2320      	movs	r3, #32
 800fb72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb76:	e144      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800fb78:	2340      	movs	r3, #64	@ 0x40
 800fb7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb7e:	e140      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800fb80:	2380      	movs	r3, #128	@ 0x80
 800fb82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb86:	e13c      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800fb88:	697b      	ldr	r3, [r7, #20]
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	4a41      	ldr	r2, [pc, #260]	@ (800fc94 <UART_SetConfig+0x640>)
 800fb8e:	4293      	cmp	r3, r2
 800fb90:	f040 8082 	bne.w	800fc98 <UART_SetConfig+0x644>
 800fb94:	4b3c      	ldr	r3, [pc, #240]	@ (800fc88 <UART_SetConfig+0x634>)
 800fb96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fb98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fb9c:	2b28      	cmp	r3, #40	@ 0x28
 800fb9e:	d86d      	bhi.n	800fc7c <UART_SetConfig+0x628>
 800fba0:	a201      	add	r2, pc, #4	@ (adr r2, 800fba8 <UART_SetConfig+0x554>)
 800fba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fba6:	bf00      	nop
 800fba8:	0800fc4d 	.word	0x0800fc4d
 800fbac:	0800fc7d 	.word	0x0800fc7d
 800fbb0:	0800fc7d 	.word	0x0800fc7d
 800fbb4:	0800fc7d 	.word	0x0800fc7d
 800fbb8:	0800fc7d 	.word	0x0800fc7d
 800fbbc:	0800fc7d 	.word	0x0800fc7d
 800fbc0:	0800fc7d 	.word	0x0800fc7d
 800fbc4:	0800fc7d 	.word	0x0800fc7d
 800fbc8:	0800fc55 	.word	0x0800fc55
 800fbcc:	0800fc7d 	.word	0x0800fc7d
 800fbd0:	0800fc7d 	.word	0x0800fc7d
 800fbd4:	0800fc7d 	.word	0x0800fc7d
 800fbd8:	0800fc7d 	.word	0x0800fc7d
 800fbdc:	0800fc7d 	.word	0x0800fc7d
 800fbe0:	0800fc7d 	.word	0x0800fc7d
 800fbe4:	0800fc7d 	.word	0x0800fc7d
 800fbe8:	0800fc5d 	.word	0x0800fc5d
 800fbec:	0800fc7d 	.word	0x0800fc7d
 800fbf0:	0800fc7d 	.word	0x0800fc7d
 800fbf4:	0800fc7d 	.word	0x0800fc7d
 800fbf8:	0800fc7d 	.word	0x0800fc7d
 800fbfc:	0800fc7d 	.word	0x0800fc7d
 800fc00:	0800fc7d 	.word	0x0800fc7d
 800fc04:	0800fc7d 	.word	0x0800fc7d
 800fc08:	0800fc65 	.word	0x0800fc65
 800fc0c:	0800fc7d 	.word	0x0800fc7d
 800fc10:	0800fc7d 	.word	0x0800fc7d
 800fc14:	0800fc7d 	.word	0x0800fc7d
 800fc18:	0800fc7d 	.word	0x0800fc7d
 800fc1c:	0800fc7d 	.word	0x0800fc7d
 800fc20:	0800fc7d 	.word	0x0800fc7d
 800fc24:	0800fc7d 	.word	0x0800fc7d
 800fc28:	0800fc6d 	.word	0x0800fc6d
 800fc2c:	0800fc7d 	.word	0x0800fc7d
 800fc30:	0800fc7d 	.word	0x0800fc7d
 800fc34:	0800fc7d 	.word	0x0800fc7d
 800fc38:	0800fc7d 	.word	0x0800fc7d
 800fc3c:	0800fc7d 	.word	0x0800fc7d
 800fc40:	0800fc7d 	.word	0x0800fc7d
 800fc44:	0800fc7d 	.word	0x0800fc7d
 800fc48:	0800fc75 	.word	0x0800fc75
 800fc4c:	2301      	movs	r3, #1
 800fc4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc52:	e0d6      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800fc54:	2304      	movs	r3, #4
 800fc56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc5a:	e0d2      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800fc5c:	2308      	movs	r3, #8
 800fc5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc62:	e0ce      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800fc64:	2310      	movs	r3, #16
 800fc66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc6a:	e0ca      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800fc6c:	2320      	movs	r3, #32
 800fc6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc72:	e0c6      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800fc74:	2340      	movs	r3, #64	@ 0x40
 800fc76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc7a:	e0c2      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800fc7c:	2380      	movs	r3, #128	@ 0x80
 800fc7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc82:	e0be      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800fc84:	40011400 	.word	0x40011400
 800fc88:	58024400 	.word	0x58024400
 800fc8c:	40007800 	.word	0x40007800
 800fc90:	40007c00 	.word	0x40007c00
 800fc94:	40011800 	.word	0x40011800
 800fc98:	697b      	ldr	r3, [r7, #20]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	4aad      	ldr	r2, [pc, #692]	@ (800ff54 <UART_SetConfig+0x900>)
 800fc9e:	4293      	cmp	r3, r2
 800fca0:	d176      	bne.n	800fd90 <UART_SetConfig+0x73c>
 800fca2:	4bad      	ldr	r3, [pc, #692]	@ (800ff58 <UART_SetConfig+0x904>)
 800fca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fca6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fcaa:	2b28      	cmp	r3, #40	@ 0x28
 800fcac:	d86c      	bhi.n	800fd88 <UART_SetConfig+0x734>
 800fcae:	a201      	add	r2, pc, #4	@ (adr r2, 800fcb4 <UART_SetConfig+0x660>)
 800fcb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcb4:	0800fd59 	.word	0x0800fd59
 800fcb8:	0800fd89 	.word	0x0800fd89
 800fcbc:	0800fd89 	.word	0x0800fd89
 800fcc0:	0800fd89 	.word	0x0800fd89
 800fcc4:	0800fd89 	.word	0x0800fd89
 800fcc8:	0800fd89 	.word	0x0800fd89
 800fccc:	0800fd89 	.word	0x0800fd89
 800fcd0:	0800fd89 	.word	0x0800fd89
 800fcd4:	0800fd61 	.word	0x0800fd61
 800fcd8:	0800fd89 	.word	0x0800fd89
 800fcdc:	0800fd89 	.word	0x0800fd89
 800fce0:	0800fd89 	.word	0x0800fd89
 800fce4:	0800fd89 	.word	0x0800fd89
 800fce8:	0800fd89 	.word	0x0800fd89
 800fcec:	0800fd89 	.word	0x0800fd89
 800fcf0:	0800fd89 	.word	0x0800fd89
 800fcf4:	0800fd69 	.word	0x0800fd69
 800fcf8:	0800fd89 	.word	0x0800fd89
 800fcfc:	0800fd89 	.word	0x0800fd89
 800fd00:	0800fd89 	.word	0x0800fd89
 800fd04:	0800fd89 	.word	0x0800fd89
 800fd08:	0800fd89 	.word	0x0800fd89
 800fd0c:	0800fd89 	.word	0x0800fd89
 800fd10:	0800fd89 	.word	0x0800fd89
 800fd14:	0800fd71 	.word	0x0800fd71
 800fd18:	0800fd89 	.word	0x0800fd89
 800fd1c:	0800fd89 	.word	0x0800fd89
 800fd20:	0800fd89 	.word	0x0800fd89
 800fd24:	0800fd89 	.word	0x0800fd89
 800fd28:	0800fd89 	.word	0x0800fd89
 800fd2c:	0800fd89 	.word	0x0800fd89
 800fd30:	0800fd89 	.word	0x0800fd89
 800fd34:	0800fd79 	.word	0x0800fd79
 800fd38:	0800fd89 	.word	0x0800fd89
 800fd3c:	0800fd89 	.word	0x0800fd89
 800fd40:	0800fd89 	.word	0x0800fd89
 800fd44:	0800fd89 	.word	0x0800fd89
 800fd48:	0800fd89 	.word	0x0800fd89
 800fd4c:	0800fd89 	.word	0x0800fd89
 800fd50:	0800fd89 	.word	0x0800fd89
 800fd54:	0800fd81 	.word	0x0800fd81
 800fd58:	2301      	movs	r3, #1
 800fd5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd5e:	e050      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800fd60:	2304      	movs	r3, #4
 800fd62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd66:	e04c      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800fd68:	2308      	movs	r3, #8
 800fd6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd6e:	e048      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800fd70:	2310      	movs	r3, #16
 800fd72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd76:	e044      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800fd78:	2320      	movs	r3, #32
 800fd7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd7e:	e040      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800fd80:	2340      	movs	r3, #64	@ 0x40
 800fd82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd86:	e03c      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800fd88:	2380      	movs	r3, #128	@ 0x80
 800fd8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd8e:	e038      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800fd90:	697b      	ldr	r3, [r7, #20]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	4a71      	ldr	r2, [pc, #452]	@ (800ff5c <UART_SetConfig+0x908>)
 800fd96:	4293      	cmp	r3, r2
 800fd98:	d130      	bne.n	800fdfc <UART_SetConfig+0x7a8>
 800fd9a:	4b6f      	ldr	r3, [pc, #444]	@ (800ff58 <UART_SetConfig+0x904>)
 800fd9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fd9e:	f003 0307 	and.w	r3, r3, #7
 800fda2:	2b05      	cmp	r3, #5
 800fda4:	d826      	bhi.n	800fdf4 <UART_SetConfig+0x7a0>
 800fda6:	a201      	add	r2, pc, #4	@ (adr r2, 800fdac <UART_SetConfig+0x758>)
 800fda8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdac:	0800fdc5 	.word	0x0800fdc5
 800fdb0:	0800fdcd 	.word	0x0800fdcd
 800fdb4:	0800fdd5 	.word	0x0800fdd5
 800fdb8:	0800fddd 	.word	0x0800fddd
 800fdbc:	0800fde5 	.word	0x0800fde5
 800fdc0:	0800fded 	.word	0x0800fded
 800fdc4:	2302      	movs	r3, #2
 800fdc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fdca:	e01a      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800fdcc:	2304      	movs	r3, #4
 800fdce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fdd2:	e016      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800fdd4:	2308      	movs	r3, #8
 800fdd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fdda:	e012      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800fddc:	2310      	movs	r3, #16
 800fdde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fde2:	e00e      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800fde4:	2320      	movs	r3, #32
 800fde6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fdea:	e00a      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800fdec:	2340      	movs	r3, #64	@ 0x40
 800fdee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fdf2:	e006      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800fdf4:	2380      	movs	r3, #128	@ 0x80
 800fdf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fdfa:	e002      	b.n	800fe02 <UART_SetConfig+0x7ae>
 800fdfc:	2380      	movs	r3, #128	@ 0x80
 800fdfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fe02:	697b      	ldr	r3, [r7, #20]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	4a55      	ldr	r2, [pc, #340]	@ (800ff5c <UART_SetConfig+0x908>)
 800fe08:	4293      	cmp	r3, r2
 800fe0a:	f040 80f8 	bne.w	800fffe <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fe0e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800fe12:	2b20      	cmp	r3, #32
 800fe14:	dc46      	bgt.n	800fea4 <UART_SetConfig+0x850>
 800fe16:	2b02      	cmp	r3, #2
 800fe18:	db75      	blt.n	800ff06 <UART_SetConfig+0x8b2>
 800fe1a:	3b02      	subs	r3, #2
 800fe1c:	2b1e      	cmp	r3, #30
 800fe1e:	d872      	bhi.n	800ff06 <UART_SetConfig+0x8b2>
 800fe20:	a201      	add	r2, pc, #4	@ (adr r2, 800fe28 <UART_SetConfig+0x7d4>)
 800fe22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe26:	bf00      	nop
 800fe28:	0800feab 	.word	0x0800feab
 800fe2c:	0800ff07 	.word	0x0800ff07
 800fe30:	0800feb3 	.word	0x0800feb3
 800fe34:	0800ff07 	.word	0x0800ff07
 800fe38:	0800ff07 	.word	0x0800ff07
 800fe3c:	0800ff07 	.word	0x0800ff07
 800fe40:	0800fec3 	.word	0x0800fec3
 800fe44:	0800ff07 	.word	0x0800ff07
 800fe48:	0800ff07 	.word	0x0800ff07
 800fe4c:	0800ff07 	.word	0x0800ff07
 800fe50:	0800ff07 	.word	0x0800ff07
 800fe54:	0800ff07 	.word	0x0800ff07
 800fe58:	0800ff07 	.word	0x0800ff07
 800fe5c:	0800ff07 	.word	0x0800ff07
 800fe60:	0800fed3 	.word	0x0800fed3
 800fe64:	0800ff07 	.word	0x0800ff07
 800fe68:	0800ff07 	.word	0x0800ff07
 800fe6c:	0800ff07 	.word	0x0800ff07
 800fe70:	0800ff07 	.word	0x0800ff07
 800fe74:	0800ff07 	.word	0x0800ff07
 800fe78:	0800ff07 	.word	0x0800ff07
 800fe7c:	0800ff07 	.word	0x0800ff07
 800fe80:	0800ff07 	.word	0x0800ff07
 800fe84:	0800ff07 	.word	0x0800ff07
 800fe88:	0800ff07 	.word	0x0800ff07
 800fe8c:	0800ff07 	.word	0x0800ff07
 800fe90:	0800ff07 	.word	0x0800ff07
 800fe94:	0800ff07 	.word	0x0800ff07
 800fe98:	0800ff07 	.word	0x0800ff07
 800fe9c:	0800ff07 	.word	0x0800ff07
 800fea0:	0800fef9 	.word	0x0800fef9
 800fea4:	2b40      	cmp	r3, #64	@ 0x40
 800fea6:	d02a      	beq.n	800fefe <UART_SetConfig+0x8aa>
 800fea8:	e02d      	b.n	800ff06 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800feaa:	f7fd f93f 	bl	800d12c <HAL_RCCEx_GetD3PCLK1Freq>
 800feae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800feb0:	e02f      	b.n	800ff12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800feb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800feb6:	4618      	mov	r0, r3
 800feb8:	f7fd f94e 	bl	800d158 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800febc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800febe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fec0:	e027      	b.n	800ff12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fec2:	f107 0318 	add.w	r3, r7, #24
 800fec6:	4618      	mov	r0, r3
 800fec8:	f7fd fa9a 	bl	800d400 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fecc:	69fb      	ldr	r3, [r7, #28]
 800fece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fed0:	e01f      	b.n	800ff12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fed2:	4b21      	ldr	r3, [pc, #132]	@ (800ff58 <UART_SetConfig+0x904>)
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	f003 0320 	and.w	r3, r3, #32
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d009      	beq.n	800fef2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fede:	4b1e      	ldr	r3, [pc, #120]	@ (800ff58 <UART_SetConfig+0x904>)
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	08db      	lsrs	r3, r3, #3
 800fee4:	f003 0303 	and.w	r3, r3, #3
 800fee8:	4a1d      	ldr	r2, [pc, #116]	@ (800ff60 <UART_SetConfig+0x90c>)
 800feea:	fa22 f303 	lsr.w	r3, r2, r3
 800feee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fef0:	e00f      	b.n	800ff12 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800fef2:	4b1b      	ldr	r3, [pc, #108]	@ (800ff60 <UART_SetConfig+0x90c>)
 800fef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fef6:	e00c      	b.n	800ff12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fef8:	4b1a      	ldr	r3, [pc, #104]	@ (800ff64 <UART_SetConfig+0x910>)
 800fefa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800fefc:	e009      	b.n	800ff12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fefe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ff02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ff04:	e005      	b.n	800ff12 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ff06:	2300      	movs	r3, #0
 800ff08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ff0a:	2301      	movs	r3, #1
 800ff0c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ff10:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ff12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	f000 81ee 	beq.w	80102f6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ff1a:	697b      	ldr	r3, [r7, #20]
 800ff1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff1e:	4a12      	ldr	r2, [pc, #72]	@ (800ff68 <UART_SetConfig+0x914>)
 800ff20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ff24:	461a      	mov	r2, r3
 800ff26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff28:	fbb3 f3f2 	udiv	r3, r3, r2
 800ff2c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ff2e:	697b      	ldr	r3, [r7, #20]
 800ff30:	685a      	ldr	r2, [r3, #4]
 800ff32:	4613      	mov	r3, r2
 800ff34:	005b      	lsls	r3, r3, #1
 800ff36:	4413      	add	r3, r2
 800ff38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ff3a:	429a      	cmp	r2, r3
 800ff3c:	d305      	bcc.n	800ff4a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ff3e:	697b      	ldr	r3, [r7, #20]
 800ff40:	685b      	ldr	r3, [r3, #4]
 800ff42:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ff44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ff46:	429a      	cmp	r2, r3
 800ff48:	d910      	bls.n	800ff6c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800ff4a:	2301      	movs	r3, #1
 800ff4c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ff50:	e1d1      	b.n	80102f6 <UART_SetConfig+0xca2>
 800ff52:	bf00      	nop
 800ff54:	40011c00 	.word	0x40011c00
 800ff58:	58024400 	.word	0x58024400
 800ff5c:	58000c00 	.word	0x58000c00
 800ff60:	03d09000 	.word	0x03d09000
 800ff64:	003d0900 	.word	0x003d0900
 800ff68:	08011d90 	.word	0x08011d90
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ff6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff6e:	2200      	movs	r2, #0
 800ff70:	60bb      	str	r3, [r7, #8]
 800ff72:	60fa      	str	r2, [r7, #12]
 800ff74:	697b      	ldr	r3, [r7, #20]
 800ff76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff78:	4ac0      	ldr	r2, [pc, #768]	@ (801027c <UART_SetConfig+0xc28>)
 800ff7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ff7e:	b29b      	uxth	r3, r3
 800ff80:	2200      	movs	r2, #0
 800ff82:	603b      	str	r3, [r7, #0]
 800ff84:	607a      	str	r2, [r7, #4]
 800ff86:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ff8a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ff8e:	f7f0 fa17 	bl	80003c0 <__aeabi_uldivmod>
 800ff92:	4602      	mov	r2, r0
 800ff94:	460b      	mov	r3, r1
 800ff96:	4610      	mov	r0, r2
 800ff98:	4619      	mov	r1, r3
 800ff9a:	f04f 0200 	mov.w	r2, #0
 800ff9e:	f04f 0300 	mov.w	r3, #0
 800ffa2:	020b      	lsls	r3, r1, #8
 800ffa4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ffa8:	0202      	lsls	r2, r0, #8
 800ffaa:	6979      	ldr	r1, [r7, #20]
 800ffac:	6849      	ldr	r1, [r1, #4]
 800ffae:	0849      	lsrs	r1, r1, #1
 800ffb0:	2000      	movs	r0, #0
 800ffb2:	460c      	mov	r4, r1
 800ffb4:	4605      	mov	r5, r0
 800ffb6:	eb12 0804 	adds.w	r8, r2, r4
 800ffba:	eb43 0905 	adc.w	r9, r3, r5
 800ffbe:	697b      	ldr	r3, [r7, #20]
 800ffc0:	685b      	ldr	r3, [r3, #4]
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	469a      	mov	sl, r3
 800ffc6:	4693      	mov	fp, r2
 800ffc8:	4652      	mov	r2, sl
 800ffca:	465b      	mov	r3, fp
 800ffcc:	4640      	mov	r0, r8
 800ffce:	4649      	mov	r1, r9
 800ffd0:	f7f0 f9f6 	bl	80003c0 <__aeabi_uldivmod>
 800ffd4:	4602      	mov	r2, r0
 800ffd6:	460b      	mov	r3, r1
 800ffd8:	4613      	mov	r3, r2
 800ffda:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ffdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffde:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ffe2:	d308      	bcc.n	800fff6 <UART_SetConfig+0x9a2>
 800ffe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffe6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ffea:	d204      	bcs.n	800fff6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800ffec:	697b      	ldr	r3, [r7, #20]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fff2:	60da      	str	r2, [r3, #12]
 800fff4:	e17f      	b.n	80102f6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800fff6:	2301      	movs	r3, #1
 800fff8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800fffc:	e17b      	b.n	80102f6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fffe:	697b      	ldr	r3, [r7, #20]
 8010000:	69db      	ldr	r3, [r3, #28]
 8010002:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010006:	f040 80bd 	bne.w	8010184 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 801000a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801000e:	2b20      	cmp	r3, #32
 8010010:	dc48      	bgt.n	80100a4 <UART_SetConfig+0xa50>
 8010012:	2b00      	cmp	r3, #0
 8010014:	db7b      	blt.n	801010e <UART_SetConfig+0xaba>
 8010016:	2b20      	cmp	r3, #32
 8010018:	d879      	bhi.n	801010e <UART_SetConfig+0xaba>
 801001a:	a201      	add	r2, pc, #4	@ (adr r2, 8010020 <UART_SetConfig+0x9cc>)
 801001c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010020:	080100ab 	.word	0x080100ab
 8010024:	080100b3 	.word	0x080100b3
 8010028:	0801010f 	.word	0x0801010f
 801002c:	0801010f 	.word	0x0801010f
 8010030:	080100bb 	.word	0x080100bb
 8010034:	0801010f 	.word	0x0801010f
 8010038:	0801010f 	.word	0x0801010f
 801003c:	0801010f 	.word	0x0801010f
 8010040:	080100cb 	.word	0x080100cb
 8010044:	0801010f 	.word	0x0801010f
 8010048:	0801010f 	.word	0x0801010f
 801004c:	0801010f 	.word	0x0801010f
 8010050:	0801010f 	.word	0x0801010f
 8010054:	0801010f 	.word	0x0801010f
 8010058:	0801010f 	.word	0x0801010f
 801005c:	0801010f 	.word	0x0801010f
 8010060:	080100db 	.word	0x080100db
 8010064:	0801010f 	.word	0x0801010f
 8010068:	0801010f 	.word	0x0801010f
 801006c:	0801010f 	.word	0x0801010f
 8010070:	0801010f 	.word	0x0801010f
 8010074:	0801010f 	.word	0x0801010f
 8010078:	0801010f 	.word	0x0801010f
 801007c:	0801010f 	.word	0x0801010f
 8010080:	0801010f 	.word	0x0801010f
 8010084:	0801010f 	.word	0x0801010f
 8010088:	0801010f 	.word	0x0801010f
 801008c:	0801010f 	.word	0x0801010f
 8010090:	0801010f 	.word	0x0801010f
 8010094:	0801010f 	.word	0x0801010f
 8010098:	0801010f 	.word	0x0801010f
 801009c:	0801010f 	.word	0x0801010f
 80100a0:	08010101 	.word	0x08010101
 80100a4:	2b40      	cmp	r3, #64	@ 0x40
 80100a6:	d02e      	beq.n	8010106 <UART_SetConfig+0xab2>
 80100a8:	e031      	b.n	801010e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80100aa:	f7fb f9a1 	bl	800b3f0 <HAL_RCC_GetPCLK1Freq>
 80100ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80100b0:	e033      	b.n	801011a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80100b2:	f7fb f9b3 	bl	800b41c <HAL_RCC_GetPCLK2Freq>
 80100b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80100b8:	e02f      	b.n	801011a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80100ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80100be:	4618      	mov	r0, r3
 80100c0:	f7fd f84a 	bl	800d158 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80100c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80100c8:	e027      	b.n	801011a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80100ca:	f107 0318 	add.w	r3, r7, #24
 80100ce:	4618      	mov	r0, r3
 80100d0:	f7fd f996 	bl	800d400 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80100d4:	69fb      	ldr	r3, [r7, #28]
 80100d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80100d8:	e01f      	b.n	801011a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80100da:	4b69      	ldr	r3, [pc, #420]	@ (8010280 <UART_SetConfig+0xc2c>)
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	f003 0320 	and.w	r3, r3, #32
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d009      	beq.n	80100fa <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80100e6:	4b66      	ldr	r3, [pc, #408]	@ (8010280 <UART_SetConfig+0xc2c>)
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	08db      	lsrs	r3, r3, #3
 80100ec:	f003 0303 	and.w	r3, r3, #3
 80100f0:	4a64      	ldr	r2, [pc, #400]	@ (8010284 <UART_SetConfig+0xc30>)
 80100f2:	fa22 f303 	lsr.w	r3, r2, r3
 80100f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80100f8:	e00f      	b.n	801011a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80100fa:	4b62      	ldr	r3, [pc, #392]	@ (8010284 <UART_SetConfig+0xc30>)
 80100fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80100fe:	e00c      	b.n	801011a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010100:	4b61      	ldr	r3, [pc, #388]	@ (8010288 <UART_SetConfig+0xc34>)
 8010102:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010104:	e009      	b.n	801011a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010106:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801010a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801010c:	e005      	b.n	801011a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 801010e:	2300      	movs	r3, #0
 8010110:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010112:	2301      	movs	r3, #1
 8010114:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010118:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801011a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801011c:	2b00      	cmp	r3, #0
 801011e:	f000 80ea 	beq.w	80102f6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010122:	697b      	ldr	r3, [r7, #20]
 8010124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010126:	4a55      	ldr	r2, [pc, #340]	@ (801027c <UART_SetConfig+0xc28>)
 8010128:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801012c:	461a      	mov	r2, r3
 801012e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010130:	fbb3 f3f2 	udiv	r3, r3, r2
 8010134:	005a      	lsls	r2, r3, #1
 8010136:	697b      	ldr	r3, [r7, #20]
 8010138:	685b      	ldr	r3, [r3, #4]
 801013a:	085b      	lsrs	r3, r3, #1
 801013c:	441a      	add	r2, r3
 801013e:	697b      	ldr	r3, [r7, #20]
 8010140:	685b      	ldr	r3, [r3, #4]
 8010142:	fbb2 f3f3 	udiv	r3, r2, r3
 8010146:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801014a:	2b0f      	cmp	r3, #15
 801014c:	d916      	bls.n	801017c <UART_SetConfig+0xb28>
 801014e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010150:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010154:	d212      	bcs.n	801017c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010158:	b29b      	uxth	r3, r3
 801015a:	f023 030f 	bic.w	r3, r3, #15
 801015e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010162:	085b      	lsrs	r3, r3, #1
 8010164:	b29b      	uxth	r3, r3
 8010166:	f003 0307 	and.w	r3, r3, #7
 801016a:	b29a      	uxth	r2, r3
 801016c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801016e:	4313      	orrs	r3, r2
 8010170:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8010172:	697b      	ldr	r3, [r7, #20]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8010178:	60da      	str	r2, [r3, #12]
 801017a:	e0bc      	b.n	80102f6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 801017c:	2301      	movs	r3, #1
 801017e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010182:	e0b8      	b.n	80102f6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010184:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010188:	2b20      	cmp	r3, #32
 801018a:	dc4b      	bgt.n	8010224 <UART_SetConfig+0xbd0>
 801018c:	2b00      	cmp	r3, #0
 801018e:	f2c0 8087 	blt.w	80102a0 <UART_SetConfig+0xc4c>
 8010192:	2b20      	cmp	r3, #32
 8010194:	f200 8084 	bhi.w	80102a0 <UART_SetConfig+0xc4c>
 8010198:	a201      	add	r2, pc, #4	@ (adr r2, 80101a0 <UART_SetConfig+0xb4c>)
 801019a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801019e:	bf00      	nop
 80101a0:	0801022b 	.word	0x0801022b
 80101a4:	08010233 	.word	0x08010233
 80101a8:	080102a1 	.word	0x080102a1
 80101ac:	080102a1 	.word	0x080102a1
 80101b0:	0801023b 	.word	0x0801023b
 80101b4:	080102a1 	.word	0x080102a1
 80101b8:	080102a1 	.word	0x080102a1
 80101bc:	080102a1 	.word	0x080102a1
 80101c0:	0801024b 	.word	0x0801024b
 80101c4:	080102a1 	.word	0x080102a1
 80101c8:	080102a1 	.word	0x080102a1
 80101cc:	080102a1 	.word	0x080102a1
 80101d0:	080102a1 	.word	0x080102a1
 80101d4:	080102a1 	.word	0x080102a1
 80101d8:	080102a1 	.word	0x080102a1
 80101dc:	080102a1 	.word	0x080102a1
 80101e0:	0801025b 	.word	0x0801025b
 80101e4:	080102a1 	.word	0x080102a1
 80101e8:	080102a1 	.word	0x080102a1
 80101ec:	080102a1 	.word	0x080102a1
 80101f0:	080102a1 	.word	0x080102a1
 80101f4:	080102a1 	.word	0x080102a1
 80101f8:	080102a1 	.word	0x080102a1
 80101fc:	080102a1 	.word	0x080102a1
 8010200:	080102a1 	.word	0x080102a1
 8010204:	080102a1 	.word	0x080102a1
 8010208:	080102a1 	.word	0x080102a1
 801020c:	080102a1 	.word	0x080102a1
 8010210:	080102a1 	.word	0x080102a1
 8010214:	080102a1 	.word	0x080102a1
 8010218:	080102a1 	.word	0x080102a1
 801021c:	080102a1 	.word	0x080102a1
 8010220:	08010293 	.word	0x08010293
 8010224:	2b40      	cmp	r3, #64	@ 0x40
 8010226:	d037      	beq.n	8010298 <UART_SetConfig+0xc44>
 8010228:	e03a      	b.n	80102a0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801022a:	f7fb f8e1 	bl	800b3f0 <HAL_RCC_GetPCLK1Freq>
 801022e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010230:	e03c      	b.n	80102ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010232:	f7fb f8f3 	bl	800b41c <HAL_RCC_GetPCLK2Freq>
 8010236:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010238:	e038      	b.n	80102ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801023a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801023e:	4618      	mov	r0, r3
 8010240:	f7fc ff8a 	bl	800d158 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010246:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010248:	e030      	b.n	80102ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801024a:	f107 0318 	add.w	r3, r7, #24
 801024e:	4618      	mov	r0, r3
 8010250:	f7fd f8d6 	bl	800d400 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010254:	69fb      	ldr	r3, [r7, #28]
 8010256:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010258:	e028      	b.n	80102ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801025a:	4b09      	ldr	r3, [pc, #36]	@ (8010280 <UART_SetConfig+0xc2c>)
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	f003 0320 	and.w	r3, r3, #32
 8010262:	2b00      	cmp	r3, #0
 8010264:	d012      	beq.n	801028c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010266:	4b06      	ldr	r3, [pc, #24]	@ (8010280 <UART_SetConfig+0xc2c>)
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	08db      	lsrs	r3, r3, #3
 801026c:	f003 0303 	and.w	r3, r3, #3
 8010270:	4a04      	ldr	r2, [pc, #16]	@ (8010284 <UART_SetConfig+0xc30>)
 8010272:	fa22 f303 	lsr.w	r3, r2, r3
 8010276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010278:	e018      	b.n	80102ac <UART_SetConfig+0xc58>
 801027a:	bf00      	nop
 801027c:	08011d90 	.word	0x08011d90
 8010280:	58024400 	.word	0x58024400
 8010284:	03d09000 	.word	0x03d09000
 8010288:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 801028c:	4b24      	ldr	r3, [pc, #144]	@ (8010320 <UART_SetConfig+0xccc>)
 801028e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010290:	e00c      	b.n	80102ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010292:	4b24      	ldr	r3, [pc, #144]	@ (8010324 <UART_SetConfig+0xcd0>)
 8010294:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010296:	e009      	b.n	80102ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010298:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801029c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801029e:	e005      	b.n	80102ac <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80102a0:	2300      	movs	r3, #0
 80102a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80102a4:	2301      	movs	r3, #1
 80102a6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80102aa:	bf00      	nop
    }

    if (pclk != 0U)
 80102ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d021      	beq.n	80102f6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80102b2:	697b      	ldr	r3, [r7, #20]
 80102b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102b6:	4a1c      	ldr	r2, [pc, #112]	@ (8010328 <UART_SetConfig+0xcd4>)
 80102b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80102bc:	461a      	mov	r2, r3
 80102be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80102c0:	fbb3 f2f2 	udiv	r2, r3, r2
 80102c4:	697b      	ldr	r3, [r7, #20]
 80102c6:	685b      	ldr	r3, [r3, #4]
 80102c8:	085b      	lsrs	r3, r3, #1
 80102ca:	441a      	add	r2, r3
 80102cc:	697b      	ldr	r3, [r7, #20]
 80102ce:	685b      	ldr	r3, [r3, #4]
 80102d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80102d4:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80102d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102d8:	2b0f      	cmp	r3, #15
 80102da:	d909      	bls.n	80102f0 <UART_SetConfig+0xc9c>
 80102dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80102e2:	d205      	bcs.n	80102f0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80102e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102e6:	b29a      	uxth	r2, r3
 80102e8:	697b      	ldr	r3, [r7, #20]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	60da      	str	r2, [r3, #12]
 80102ee:	e002      	b.n	80102f6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80102f0:	2301      	movs	r3, #1
 80102f2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80102f6:	697b      	ldr	r3, [r7, #20]
 80102f8:	2201      	movs	r2, #1
 80102fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80102fe:	697b      	ldr	r3, [r7, #20]
 8010300:	2201      	movs	r2, #1
 8010302:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010306:	697b      	ldr	r3, [r7, #20]
 8010308:	2200      	movs	r2, #0
 801030a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801030c:	697b      	ldr	r3, [r7, #20]
 801030e:	2200      	movs	r2, #0
 8010310:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8010312:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8010316:	4618      	mov	r0, r3
 8010318:	3748      	adds	r7, #72	@ 0x48
 801031a:	46bd      	mov	sp, r7
 801031c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010320:	03d09000 	.word	0x03d09000
 8010324:	003d0900 	.word	0x003d0900
 8010328:	08011d90 	.word	0x08011d90

0801032c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801032c:	b480      	push	{r7}
 801032e:	b083      	sub	sp, #12
 8010330:	af00      	add	r7, sp, #0
 8010332:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010338:	f003 0301 	and.w	r3, r3, #1
 801033c:	2b00      	cmp	r3, #0
 801033e:	d00a      	beq.n	8010356 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	685b      	ldr	r3, [r3, #4]
 8010346:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	430a      	orrs	r2, r1
 8010354:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801035a:	f003 0302 	and.w	r3, r3, #2
 801035e:	2b00      	cmp	r3, #0
 8010360:	d00a      	beq.n	8010378 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	685b      	ldr	r3, [r3, #4]
 8010368:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	430a      	orrs	r2, r1
 8010376:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801037c:	f003 0304 	and.w	r3, r3, #4
 8010380:	2b00      	cmp	r3, #0
 8010382:	d00a      	beq.n	801039a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	685b      	ldr	r3, [r3, #4]
 801038a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	430a      	orrs	r2, r1
 8010398:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801039e:	f003 0308 	and.w	r3, r3, #8
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d00a      	beq.n	80103bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	685b      	ldr	r3, [r3, #4]
 80103ac:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	430a      	orrs	r2, r1
 80103ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80103c0:	f003 0310 	and.w	r3, r3, #16
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d00a      	beq.n	80103de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	689b      	ldr	r3, [r3, #8]
 80103ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	430a      	orrs	r2, r1
 80103dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80103e2:	f003 0320 	and.w	r3, r3, #32
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d00a      	beq.n	8010400 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	689b      	ldr	r3, [r3, #8]
 80103f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	430a      	orrs	r2, r1
 80103fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010404:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010408:	2b00      	cmp	r3, #0
 801040a:	d01a      	beq.n	8010442 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	685b      	ldr	r3, [r3, #4]
 8010412:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	430a      	orrs	r2, r1
 8010420:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010426:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801042a:	d10a      	bne.n	8010442 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	685b      	ldr	r3, [r3, #4]
 8010432:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	430a      	orrs	r2, r1
 8010440:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801044a:	2b00      	cmp	r3, #0
 801044c:	d00a      	beq.n	8010464 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	685b      	ldr	r3, [r3, #4]
 8010454:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	430a      	orrs	r2, r1
 8010462:	605a      	str	r2, [r3, #4]
  }
}
 8010464:	bf00      	nop
 8010466:	370c      	adds	r7, #12
 8010468:	46bd      	mov	sp, r7
 801046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046e:	4770      	bx	lr

08010470 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010470:	b580      	push	{r7, lr}
 8010472:	b098      	sub	sp, #96	@ 0x60
 8010474:	af02      	add	r7, sp, #8
 8010476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	2200      	movs	r2, #0
 801047c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010480:	f7f3 fdcc 	bl	800401c <HAL_GetTick>
 8010484:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	f003 0308 	and.w	r3, r3, #8
 8010490:	2b08      	cmp	r3, #8
 8010492:	d12f      	bne.n	80104f4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010494:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010498:	9300      	str	r3, [sp, #0]
 801049a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801049c:	2200      	movs	r2, #0
 801049e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80104a2:	6878      	ldr	r0, [r7, #4]
 80104a4:	f000 f88e 	bl	80105c4 <UART_WaitOnFlagUntilTimeout>
 80104a8:	4603      	mov	r3, r0
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d022      	beq.n	80104f4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104b6:	e853 3f00 	ldrex	r3, [r3]
 80104ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80104bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80104be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80104c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	461a      	mov	r2, r3
 80104ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80104cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80104ce:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80104d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80104d4:	e841 2300 	strex	r3, r2, [r1]
 80104d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80104da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d1e6      	bne.n	80104ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	2220      	movs	r2, #32
 80104e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	2200      	movs	r2, #0
 80104ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80104f0:	2303      	movs	r3, #3
 80104f2:	e063      	b.n	80105bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	f003 0304 	and.w	r3, r3, #4
 80104fe:	2b04      	cmp	r3, #4
 8010500:	d149      	bne.n	8010596 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010502:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010506:	9300      	str	r3, [sp, #0]
 8010508:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801050a:	2200      	movs	r2, #0
 801050c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010510:	6878      	ldr	r0, [r7, #4]
 8010512:	f000 f857 	bl	80105c4 <UART_WaitOnFlagUntilTimeout>
 8010516:	4603      	mov	r3, r0
 8010518:	2b00      	cmp	r3, #0
 801051a:	d03c      	beq.n	8010596 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010524:	e853 3f00 	ldrex	r3, [r3]
 8010528:	623b      	str	r3, [r7, #32]
   return(result);
 801052a:	6a3b      	ldr	r3, [r7, #32]
 801052c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010530:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	461a      	mov	r2, r3
 8010538:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801053a:	633b      	str	r3, [r7, #48]	@ 0x30
 801053c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801053e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010540:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010542:	e841 2300 	strex	r3, r2, [r1]
 8010546:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801054a:	2b00      	cmp	r3, #0
 801054c:	d1e6      	bne.n	801051c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	3308      	adds	r3, #8
 8010554:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010556:	693b      	ldr	r3, [r7, #16]
 8010558:	e853 3f00 	ldrex	r3, [r3]
 801055c:	60fb      	str	r3, [r7, #12]
   return(result);
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	f023 0301 	bic.w	r3, r3, #1
 8010564:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	3308      	adds	r3, #8
 801056c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801056e:	61fa      	str	r2, [r7, #28]
 8010570:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010572:	69b9      	ldr	r1, [r7, #24]
 8010574:	69fa      	ldr	r2, [r7, #28]
 8010576:	e841 2300 	strex	r3, r2, [r1]
 801057a:	617b      	str	r3, [r7, #20]
   return(result);
 801057c:	697b      	ldr	r3, [r7, #20]
 801057e:	2b00      	cmp	r3, #0
 8010580:	d1e5      	bne.n	801054e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	2220      	movs	r2, #32
 8010586:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	2200      	movs	r2, #0
 801058e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010592:	2303      	movs	r3, #3
 8010594:	e012      	b.n	80105bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	2220      	movs	r2, #32
 801059a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	2220      	movs	r2, #32
 80105a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	2200      	movs	r2, #0
 80105aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	2200      	movs	r2, #0
 80105b0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	2200      	movs	r2, #0
 80105b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80105ba:	2300      	movs	r3, #0
}
 80105bc:	4618      	mov	r0, r3
 80105be:	3758      	adds	r7, #88	@ 0x58
 80105c0:	46bd      	mov	sp, r7
 80105c2:	bd80      	pop	{r7, pc}

080105c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80105c4:	b580      	push	{r7, lr}
 80105c6:	b084      	sub	sp, #16
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	60f8      	str	r0, [r7, #12]
 80105cc:	60b9      	str	r1, [r7, #8]
 80105ce:	603b      	str	r3, [r7, #0]
 80105d0:	4613      	mov	r3, r2
 80105d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80105d4:	e049      	b.n	801066a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80105d6:	69bb      	ldr	r3, [r7, #24]
 80105d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80105dc:	d045      	beq.n	801066a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80105de:	f7f3 fd1d 	bl	800401c <HAL_GetTick>
 80105e2:	4602      	mov	r2, r0
 80105e4:	683b      	ldr	r3, [r7, #0]
 80105e6:	1ad3      	subs	r3, r2, r3
 80105e8:	69ba      	ldr	r2, [r7, #24]
 80105ea:	429a      	cmp	r2, r3
 80105ec:	d302      	bcc.n	80105f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80105ee:	69bb      	ldr	r3, [r7, #24]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d101      	bne.n	80105f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80105f4:	2303      	movs	r3, #3
 80105f6:	e048      	b.n	801068a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	f003 0304 	and.w	r3, r3, #4
 8010602:	2b00      	cmp	r3, #0
 8010604:	d031      	beq.n	801066a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	69db      	ldr	r3, [r3, #28]
 801060c:	f003 0308 	and.w	r3, r3, #8
 8010610:	2b08      	cmp	r3, #8
 8010612:	d110      	bne.n	8010636 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	2208      	movs	r2, #8
 801061a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 801061c:	68f8      	ldr	r0, [r7, #12]
 801061e:	f000 f839 	bl	8010694 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	2208      	movs	r2, #8
 8010626:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	2200      	movs	r2, #0
 801062e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 8010632:	2301      	movs	r3, #1
 8010634:	e029      	b.n	801068a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	69db      	ldr	r3, [r3, #28]
 801063c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010640:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010644:	d111      	bne.n	801066a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801064e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010650:	68f8      	ldr	r0, [r7, #12]
 8010652:	f000 f81f 	bl	8010694 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	2220      	movs	r2, #32
 801065a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	2200      	movs	r2, #0
 8010662:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8010666:	2303      	movs	r3, #3
 8010668:	e00f      	b.n	801068a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	69da      	ldr	r2, [r3, #28]
 8010670:	68bb      	ldr	r3, [r7, #8]
 8010672:	4013      	ands	r3, r2
 8010674:	68ba      	ldr	r2, [r7, #8]
 8010676:	429a      	cmp	r2, r3
 8010678:	bf0c      	ite	eq
 801067a:	2301      	moveq	r3, #1
 801067c:	2300      	movne	r3, #0
 801067e:	b2db      	uxtb	r3, r3
 8010680:	461a      	mov	r2, r3
 8010682:	79fb      	ldrb	r3, [r7, #7]
 8010684:	429a      	cmp	r2, r3
 8010686:	d0a6      	beq.n	80105d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010688:	2300      	movs	r3, #0
}
 801068a:	4618      	mov	r0, r3
 801068c:	3710      	adds	r7, #16
 801068e:	46bd      	mov	sp, r7
 8010690:	bd80      	pop	{r7, pc}
	...

08010694 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010694:	b480      	push	{r7}
 8010696:	b095      	sub	sp, #84	@ 0x54
 8010698:	af00      	add	r7, sp, #0
 801069a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80106a4:	e853 3f00 	ldrex	r3, [r3]
 80106a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80106aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80106b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	461a      	mov	r2, r3
 80106b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80106ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80106bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80106c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80106c2:	e841 2300 	strex	r3, r2, [r1]
 80106c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80106c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d1e6      	bne.n	801069c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	3308      	adds	r3, #8
 80106d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106d6:	6a3b      	ldr	r3, [r7, #32]
 80106d8:	e853 3f00 	ldrex	r3, [r3]
 80106dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80106de:	69fa      	ldr	r2, [r7, #28]
 80106e0:	4b1e      	ldr	r3, [pc, #120]	@ (801075c <UART_EndRxTransfer+0xc8>)
 80106e2:	4013      	ands	r3, r2
 80106e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	3308      	adds	r3, #8
 80106ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80106ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80106f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80106f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80106f6:	e841 2300 	strex	r3, r2, [r1]
 80106fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80106fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d1e5      	bne.n	80106ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010706:	2b01      	cmp	r3, #1
 8010708:	d118      	bne.n	801073c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	e853 3f00 	ldrex	r3, [r3]
 8010716:	60bb      	str	r3, [r7, #8]
   return(result);
 8010718:	68bb      	ldr	r3, [r7, #8]
 801071a:	f023 0310 	bic.w	r3, r3, #16
 801071e:	647b      	str	r3, [r7, #68]	@ 0x44
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	461a      	mov	r2, r3
 8010726:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010728:	61bb      	str	r3, [r7, #24]
 801072a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801072c:	6979      	ldr	r1, [r7, #20]
 801072e:	69ba      	ldr	r2, [r7, #24]
 8010730:	e841 2300 	strex	r3, r2, [r1]
 8010734:	613b      	str	r3, [r7, #16]
   return(result);
 8010736:	693b      	ldr	r3, [r7, #16]
 8010738:	2b00      	cmp	r3, #0
 801073a:	d1e6      	bne.n	801070a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	2220      	movs	r2, #32
 8010740:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	2200      	movs	r2, #0
 8010748:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	2200      	movs	r2, #0
 801074e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010750:	bf00      	nop
 8010752:	3754      	adds	r7, #84	@ 0x54
 8010754:	46bd      	mov	sp, r7
 8010756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801075a:	4770      	bx	lr
 801075c:	effffffe 	.word	0xeffffffe

08010760 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010760:	b480      	push	{r7}
 8010762:	b085      	sub	sp, #20
 8010764:	af00      	add	r7, sp, #0
 8010766:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801076e:	2b01      	cmp	r3, #1
 8010770:	d101      	bne.n	8010776 <HAL_UARTEx_DisableFifoMode+0x16>
 8010772:	2302      	movs	r3, #2
 8010774:	e027      	b.n	80107c6 <HAL_UARTEx_DisableFifoMode+0x66>
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	2201      	movs	r2, #1
 801077a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	2224      	movs	r2, #36	@ 0x24
 8010782:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	681a      	ldr	r2, [r3, #0]
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	f022 0201 	bic.w	r2, r2, #1
 801079c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80107a4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	2200      	movs	r2, #0
 80107aa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	68fa      	ldr	r2, [r7, #12]
 80107b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	2220      	movs	r2, #32
 80107b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	2200      	movs	r2, #0
 80107c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80107c4:	2300      	movs	r3, #0
}
 80107c6:	4618      	mov	r0, r3
 80107c8:	3714      	adds	r7, #20
 80107ca:	46bd      	mov	sp, r7
 80107cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d0:	4770      	bx	lr

080107d2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80107d2:	b580      	push	{r7, lr}
 80107d4:	b084      	sub	sp, #16
 80107d6:	af00      	add	r7, sp, #0
 80107d8:	6078      	str	r0, [r7, #4]
 80107da:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80107e2:	2b01      	cmp	r3, #1
 80107e4:	d101      	bne.n	80107ea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80107e6:	2302      	movs	r3, #2
 80107e8:	e02d      	b.n	8010846 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	2201      	movs	r2, #1
 80107ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	2224      	movs	r2, #36	@ 0x24
 80107f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	681a      	ldr	r2, [r3, #0]
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	f022 0201 	bic.w	r2, r2, #1
 8010810:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	689b      	ldr	r3, [r3, #8]
 8010818:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	683a      	ldr	r2, [r7, #0]
 8010822:	430a      	orrs	r2, r1
 8010824:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010826:	6878      	ldr	r0, [r7, #4]
 8010828:	f000 f850 	bl	80108cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	68fa      	ldr	r2, [r7, #12]
 8010832:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	2220      	movs	r2, #32
 8010838:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	2200      	movs	r2, #0
 8010840:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010844:	2300      	movs	r3, #0
}
 8010846:	4618      	mov	r0, r3
 8010848:	3710      	adds	r7, #16
 801084a:	46bd      	mov	sp, r7
 801084c:	bd80      	pop	{r7, pc}

0801084e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801084e:	b580      	push	{r7, lr}
 8010850:	b084      	sub	sp, #16
 8010852:	af00      	add	r7, sp, #0
 8010854:	6078      	str	r0, [r7, #4]
 8010856:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801085e:	2b01      	cmp	r3, #1
 8010860:	d101      	bne.n	8010866 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010862:	2302      	movs	r3, #2
 8010864:	e02d      	b.n	80108c2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	2201      	movs	r2, #1
 801086a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	2224      	movs	r2, #36	@ 0x24
 8010872:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	681a      	ldr	r2, [r3, #0]
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	f022 0201 	bic.w	r2, r2, #1
 801088c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	689b      	ldr	r3, [r3, #8]
 8010894:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	683a      	ldr	r2, [r7, #0]
 801089e:	430a      	orrs	r2, r1
 80108a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80108a2:	6878      	ldr	r0, [r7, #4]
 80108a4:	f000 f812 	bl	80108cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	68fa      	ldr	r2, [r7, #12]
 80108ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	2220      	movs	r2, #32
 80108b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	2200      	movs	r2, #0
 80108bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80108c0:	2300      	movs	r3, #0
}
 80108c2:	4618      	mov	r0, r3
 80108c4:	3710      	adds	r7, #16
 80108c6:	46bd      	mov	sp, r7
 80108c8:	bd80      	pop	{r7, pc}
	...

080108cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80108cc:	b480      	push	{r7}
 80108ce:	b085      	sub	sp, #20
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d108      	bne.n	80108ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	2201      	movs	r2, #1
 80108e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	2201      	movs	r2, #1
 80108e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80108ec:	e031      	b.n	8010952 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80108ee:	2310      	movs	r3, #16
 80108f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80108f2:	2310      	movs	r3, #16
 80108f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	689b      	ldr	r3, [r3, #8]
 80108fc:	0e5b      	lsrs	r3, r3, #25
 80108fe:	b2db      	uxtb	r3, r3
 8010900:	f003 0307 	and.w	r3, r3, #7
 8010904:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	689b      	ldr	r3, [r3, #8]
 801090c:	0f5b      	lsrs	r3, r3, #29
 801090e:	b2db      	uxtb	r3, r3
 8010910:	f003 0307 	and.w	r3, r3, #7
 8010914:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010916:	7bbb      	ldrb	r3, [r7, #14]
 8010918:	7b3a      	ldrb	r2, [r7, #12]
 801091a:	4911      	ldr	r1, [pc, #68]	@ (8010960 <UARTEx_SetNbDataToProcess+0x94>)
 801091c:	5c8a      	ldrb	r2, [r1, r2]
 801091e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010922:	7b3a      	ldrb	r2, [r7, #12]
 8010924:	490f      	ldr	r1, [pc, #60]	@ (8010964 <UARTEx_SetNbDataToProcess+0x98>)
 8010926:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010928:	fb93 f3f2 	sdiv	r3, r3, r2
 801092c:	b29a      	uxth	r2, r3
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010934:	7bfb      	ldrb	r3, [r7, #15]
 8010936:	7b7a      	ldrb	r2, [r7, #13]
 8010938:	4909      	ldr	r1, [pc, #36]	@ (8010960 <UARTEx_SetNbDataToProcess+0x94>)
 801093a:	5c8a      	ldrb	r2, [r1, r2]
 801093c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010940:	7b7a      	ldrb	r2, [r7, #13]
 8010942:	4908      	ldr	r1, [pc, #32]	@ (8010964 <UARTEx_SetNbDataToProcess+0x98>)
 8010944:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010946:	fb93 f3f2 	sdiv	r3, r3, r2
 801094a:	b29a      	uxth	r2, r3
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8010952:	bf00      	nop
 8010954:	3714      	adds	r7, #20
 8010956:	46bd      	mov	sp, r7
 8010958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801095c:	4770      	bx	lr
 801095e:	bf00      	nop
 8010960:	08011da8 	.word	0x08011da8
 8010964:	08011db0 	.word	0x08011db0

08010968 <atoi>:
 8010968:	220a      	movs	r2, #10
 801096a:	2100      	movs	r1, #0
 801096c:	f000 b894 	b.w	8010a98 <strtol>

08010970 <__itoa>:
 8010970:	1e93      	subs	r3, r2, #2
 8010972:	2b22      	cmp	r3, #34	@ 0x22
 8010974:	b510      	push	{r4, lr}
 8010976:	460c      	mov	r4, r1
 8010978:	d904      	bls.n	8010984 <__itoa+0x14>
 801097a:	2300      	movs	r3, #0
 801097c:	700b      	strb	r3, [r1, #0]
 801097e:	461c      	mov	r4, r3
 8010980:	4620      	mov	r0, r4
 8010982:	bd10      	pop	{r4, pc}
 8010984:	2a0a      	cmp	r2, #10
 8010986:	d109      	bne.n	801099c <__itoa+0x2c>
 8010988:	2800      	cmp	r0, #0
 801098a:	da07      	bge.n	801099c <__itoa+0x2c>
 801098c:	232d      	movs	r3, #45	@ 0x2d
 801098e:	700b      	strb	r3, [r1, #0]
 8010990:	4240      	negs	r0, r0
 8010992:	2101      	movs	r1, #1
 8010994:	4421      	add	r1, r4
 8010996:	f000 f889 	bl	8010aac <__utoa>
 801099a:	e7f1      	b.n	8010980 <__itoa+0x10>
 801099c:	2100      	movs	r1, #0
 801099e:	e7f9      	b.n	8010994 <__itoa+0x24>

080109a0 <itoa>:
 80109a0:	f7ff bfe6 	b.w	8010970 <__itoa>

080109a4 <_strtol_l.constprop.0>:
 80109a4:	2b24      	cmp	r3, #36	@ 0x24
 80109a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109aa:	4686      	mov	lr, r0
 80109ac:	4690      	mov	r8, r2
 80109ae:	d801      	bhi.n	80109b4 <_strtol_l.constprop.0+0x10>
 80109b0:	2b01      	cmp	r3, #1
 80109b2:	d106      	bne.n	80109c2 <_strtol_l.constprop.0+0x1e>
 80109b4:	f000 f8f4 	bl	8010ba0 <__errno>
 80109b8:	2316      	movs	r3, #22
 80109ba:	6003      	str	r3, [r0, #0]
 80109bc:	2000      	movs	r0, #0
 80109be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109c2:	4834      	ldr	r0, [pc, #208]	@ (8010a94 <_strtol_l.constprop.0+0xf0>)
 80109c4:	460d      	mov	r5, r1
 80109c6:	462a      	mov	r2, r5
 80109c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80109cc:	5d06      	ldrb	r6, [r0, r4]
 80109ce:	f016 0608 	ands.w	r6, r6, #8
 80109d2:	d1f8      	bne.n	80109c6 <_strtol_l.constprop.0+0x22>
 80109d4:	2c2d      	cmp	r4, #45	@ 0x2d
 80109d6:	d12d      	bne.n	8010a34 <_strtol_l.constprop.0+0x90>
 80109d8:	782c      	ldrb	r4, [r5, #0]
 80109da:	2601      	movs	r6, #1
 80109dc:	1c95      	adds	r5, r2, #2
 80109de:	f033 0210 	bics.w	r2, r3, #16
 80109e2:	d109      	bne.n	80109f8 <_strtol_l.constprop.0+0x54>
 80109e4:	2c30      	cmp	r4, #48	@ 0x30
 80109e6:	d12a      	bne.n	8010a3e <_strtol_l.constprop.0+0x9a>
 80109e8:	782a      	ldrb	r2, [r5, #0]
 80109ea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80109ee:	2a58      	cmp	r2, #88	@ 0x58
 80109f0:	d125      	bne.n	8010a3e <_strtol_l.constprop.0+0x9a>
 80109f2:	786c      	ldrb	r4, [r5, #1]
 80109f4:	2310      	movs	r3, #16
 80109f6:	3502      	adds	r5, #2
 80109f8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80109fc:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8010a00:	2200      	movs	r2, #0
 8010a02:	fbbc f9f3 	udiv	r9, ip, r3
 8010a06:	4610      	mov	r0, r2
 8010a08:	fb03 ca19 	mls	sl, r3, r9, ip
 8010a0c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8010a10:	2f09      	cmp	r7, #9
 8010a12:	d81b      	bhi.n	8010a4c <_strtol_l.constprop.0+0xa8>
 8010a14:	463c      	mov	r4, r7
 8010a16:	42a3      	cmp	r3, r4
 8010a18:	dd27      	ble.n	8010a6a <_strtol_l.constprop.0+0xc6>
 8010a1a:	1c57      	adds	r7, r2, #1
 8010a1c:	d007      	beq.n	8010a2e <_strtol_l.constprop.0+0x8a>
 8010a1e:	4581      	cmp	r9, r0
 8010a20:	d320      	bcc.n	8010a64 <_strtol_l.constprop.0+0xc0>
 8010a22:	d101      	bne.n	8010a28 <_strtol_l.constprop.0+0x84>
 8010a24:	45a2      	cmp	sl, r4
 8010a26:	db1d      	blt.n	8010a64 <_strtol_l.constprop.0+0xc0>
 8010a28:	fb00 4003 	mla	r0, r0, r3, r4
 8010a2c:	2201      	movs	r2, #1
 8010a2e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010a32:	e7eb      	b.n	8010a0c <_strtol_l.constprop.0+0x68>
 8010a34:	2c2b      	cmp	r4, #43	@ 0x2b
 8010a36:	bf04      	itt	eq
 8010a38:	782c      	ldrbeq	r4, [r5, #0]
 8010a3a:	1c95      	addeq	r5, r2, #2
 8010a3c:	e7cf      	b.n	80109de <_strtol_l.constprop.0+0x3a>
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d1da      	bne.n	80109f8 <_strtol_l.constprop.0+0x54>
 8010a42:	2c30      	cmp	r4, #48	@ 0x30
 8010a44:	bf0c      	ite	eq
 8010a46:	2308      	moveq	r3, #8
 8010a48:	230a      	movne	r3, #10
 8010a4a:	e7d5      	b.n	80109f8 <_strtol_l.constprop.0+0x54>
 8010a4c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010a50:	2f19      	cmp	r7, #25
 8010a52:	d801      	bhi.n	8010a58 <_strtol_l.constprop.0+0xb4>
 8010a54:	3c37      	subs	r4, #55	@ 0x37
 8010a56:	e7de      	b.n	8010a16 <_strtol_l.constprop.0+0x72>
 8010a58:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8010a5c:	2f19      	cmp	r7, #25
 8010a5e:	d804      	bhi.n	8010a6a <_strtol_l.constprop.0+0xc6>
 8010a60:	3c57      	subs	r4, #87	@ 0x57
 8010a62:	e7d8      	b.n	8010a16 <_strtol_l.constprop.0+0x72>
 8010a64:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010a68:	e7e1      	b.n	8010a2e <_strtol_l.constprop.0+0x8a>
 8010a6a:	1c53      	adds	r3, r2, #1
 8010a6c:	d108      	bne.n	8010a80 <_strtol_l.constprop.0+0xdc>
 8010a6e:	2322      	movs	r3, #34	@ 0x22
 8010a70:	f8ce 3000 	str.w	r3, [lr]
 8010a74:	4660      	mov	r0, ip
 8010a76:	f1b8 0f00 	cmp.w	r8, #0
 8010a7a:	d0a0      	beq.n	80109be <_strtol_l.constprop.0+0x1a>
 8010a7c:	1e69      	subs	r1, r5, #1
 8010a7e:	e006      	b.n	8010a8e <_strtol_l.constprop.0+0xea>
 8010a80:	b106      	cbz	r6, 8010a84 <_strtol_l.constprop.0+0xe0>
 8010a82:	4240      	negs	r0, r0
 8010a84:	f1b8 0f00 	cmp.w	r8, #0
 8010a88:	d099      	beq.n	80109be <_strtol_l.constprop.0+0x1a>
 8010a8a:	2a00      	cmp	r2, #0
 8010a8c:	d1f6      	bne.n	8010a7c <_strtol_l.constprop.0+0xd8>
 8010a8e:	f8c8 1000 	str.w	r1, [r8]
 8010a92:	e794      	b.n	80109be <_strtol_l.constprop.0+0x1a>
 8010a94:	08011dde 	.word	0x08011dde

08010a98 <strtol>:
 8010a98:	4613      	mov	r3, r2
 8010a9a:	460a      	mov	r2, r1
 8010a9c:	4601      	mov	r1, r0
 8010a9e:	4802      	ldr	r0, [pc, #8]	@ (8010aa8 <strtol+0x10>)
 8010aa0:	6800      	ldr	r0, [r0, #0]
 8010aa2:	f7ff bf7f 	b.w	80109a4 <_strtol_l.constprop.0>
 8010aa6:	bf00      	nop
 8010aa8:	24000048 	.word	0x24000048

08010aac <__utoa>:
 8010aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010aae:	4c1f      	ldr	r4, [pc, #124]	@ (8010b2c <__utoa+0x80>)
 8010ab0:	b08b      	sub	sp, #44	@ 0x2c
 8010ab2:	4605      	mov	r5, r0
 8010ab4:	460b      	mov	r3, r1
 8010ab6:	466e      	mov	r6, sp
 8010ab8:	f104 0c20 	add.w	ip, r4, #32
 8010abc:	6820      	ldr	r0, [r4, #0]
 8010abe:	6861      	ldr	r1, [r4, #4]
 8010ac0:	4637      	mov	r7, r6
 8010ac2:	c703      	stmia	r7!, {r0, r1}
 8010ac4:	3408      	adds	r4, #8
 8010ac6:	4564      	cmp	r4, ip
 8010ac8:	463e      	mov	r6, r7
 8010aca:	d1f7      	bne.n	8010abc <__utoa+0x10>
 8010acc:	7921      	ldrb	r1, [r4, #4]
 8010ace:	7139      	strb	r1, [r7, #4]
 8010ad0:	1e91      	subs	r1, r2, #2
 8010ad2:	6820      	ldr	r0, [r4, #0]
 8010ad4:	6038      	str	r0, [r7, #0]
 8010ad6:	2922      	cmp	r1, #34	@ 0x22
 8010ad8:	f04f 0100 	mov.w	r1, #0
 8010adc:	d904      	bls.n	8010ae8 <__utoa+0x3c>
 8010ade:	7019      	strb	r1, [r3, #0]
 8010ae0:	460b      	mov	r3, r1
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	b00b      	add	sp, #44	@ 0x2c
 8010ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ae8:	1e58      	subs	r0, r3, #1
 8010aea:	4684      	mov	ip, r0
 8010aec:	fbb5 f7f2 	udiv	r7, r5, r2
 8010af0:	fb02 5617 	mls	r6, r2, r7, r5
 8010af4:	3628      	adds	r6, #40	@ 0x28
 8010af6:	446e      	add	r6, sp
 8010af8:	460c      	mov	r4, r1
 8010afa:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8010afe:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8010b02:	462e      	mov	r6, r5
 8010b04:	42b2      	cmp	r2, r6
 8010b06:	f101 0101 	add.w	r1, r1, #1
 8010b0a:	463d      	mov	r5, r7
 8010b0c:	d9ee      	bls.n	8010aec <__utoa+0x40>
 8010b0e:	2200      	movs	r2, #0
 8010b10:	545a      	strb	r2, [r3, r1]
 8010b12:	1919      	adds	r1, r3, r4
 8010b14:	1aa5      	subs	r5, r4, r2
 8010b16:	42aa      	cmp	r2, r5
 8010b18:	dae3      	bge.n	8010ae2 <__utoa+0x36>
 8010b1a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8010b1e:	780e      	ldrb	r6, [r1, #0]
 8010b20:	7006      	strb	r6, [r0, #0]
 8010b22:	3201      	adds	r2, #1
 8010b24:	f801 5901 	strb.w	r5, [r1], #-1
 8010b28:	e7f4      	b.n	8010b14 <__utoa+0x68>
 8010b2a:	bf00      	nop
 8010b2c:	08011db8 	.word	0x08011db8

08010b30 <siprintf>:
 8010b30:	b40e      	push	{r1, r2, r3}
 8010b32:	b500      	push	{lr}
 8010b34:	b09c      	sub	sp, #112	@ 0x70
 8010b36:	ab1d      	add	r3, sp, #116	@ 0x74
 8010b38:	9002      	str	r0, [sp, #8]
 8010b3a:	9006      	str	r0, [sp, #24]
 8010b3c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010b40:	4809      	ldr	r0, [pc, #36]	@ (8010b68 <siprintf+0x38>)
 8010b42:	9107      	str	r1, [sp, #28]
 8010b44:	9104      	str	r1, [sp, #16]
 8010b46:	4909      	ldr	r1, [pc, #36]	@ (8010b6c <siprintf+0x3c>)
 8010b48:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b4c:	9105      	str	r1, [sp, #20]
 8010b4e:	6800      	ldr	r0, [r0, #0]
 8010b50:	9301      	str	r3, [sp, #4]
 8010b52:	a902      	add	r1, sp, #8
 8010b54:	f000 f9ac 	bl	8010eb0 <_svfiprintf_r>
 8010b58:	9b02      	ldr	r3, [sp, #8]
 8010b5a:	2200      	movs	r2, #0
 8010b5c:	701a      	strb	r2, [r3, #0]
 8010b5e:	b01c      	add	sp, #112	@ 0x70
 8010b60:	f85d eb04 	ldr.w	lr, [sp], #4
 8010b64:	b003      	add	sp, #12
 8010b66:	4770      	bx	lr
 8010b68:	24000048 	.word	0x24000048
 8010b6c:	ffff0208 	.word	0xffff0208

08010b70 <memset>:
 8010b70:	4402      	add	r2, r0
 8010b72:	4603      	mov	r3, r0
 8010b74:	4293      	cmp	r3, r2
 8010b76:	d100      	bne.n	8010b7a <memset+0xa>
 8010b78:	4770      	bx	lr
 8010b7a:	f803 1b01 	strb.w	r1, [r3], #1
 8010b7e:	e7f9      	b.n	8010b74 <memset+0x4>

08010b80 <strcat>:
 8010b80:	b510      	push	{r4, lr}
 8010b82:	4602      	mov	r2, r0
 8010b84:	7814      	ldrb	r4, [r2, #0]
 8010b86:	4613      	mov	r3, r2
 8010b88:	3201      	adds	r2, #1
 8010b8a:	2c00      	cmp	r4, #0
 8010b8c:	d1fa      	bne.n	8010b84 <strcat+0x4>
 8010b8e:	3b01      	subs	r3, #1
 8010b90:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010b94:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010b98:	2a00      	cmp	r2, #0
 8010b9a:	d1f9      	bne.n	8010b90 <strcat+0x10>
 8010b9c:	bd10      	pop	{r4, pc}
	...

08010ba0 <__errno>:
 8010ba0:	4b01      	ldr	r3, [pc, #4]	@ (8010ba8 <__errno+0x8>)
 8010ba2:	6818      	ldr	r0, [r3, #0]
 8010ba4:	4770      	bx	lr
 8010ba6:	bf00      	nop
 8010ba8:	24000048 	.word	0x24000048

08010bac <__libc_init_array>:
 8010bac:	b570      	push	{r4, r5, r6, lr}
 8010bae:	4d0d      	ldr	r5, [pc, #52]	@ (8010be4 <__libc_init_array+0x38>)
 8010bb0:	4c0d      	ldr	r4, [pc, #52]	@ (8010be8 <__libc_init_array+0x3c>)
 8010bb2:	1b64      	subs	r4, r4, r5
 8010bb4:	10a4      	asrs	r4, r4, #2
 8010bb6:	2600      	movs	r6, #0
 8010bb8:	42a6      	cmp	r6, r4
 8010bba:	d109      	bne.n	8010bd0 <__libc_init_array+0x24>
 8010bbc:	4d0b      	ldr	r5, [pc, #44]	@ (8010bec <__libc_init_array+0x40>)
 8010bbe:	4c0c      	ldr	r4, [pc, #48]	@ (8010bf0 <__libc_init_array+0x44>)
 8010bc0:	f000 fc6e 	bl	80114a0 <_init>
 8010bc4:	1b64      	subs	r4, r4, r5
 8010bc6:	10a4      	asrs	r4, r4, #2
 8010bc8:	2600      	movs	r6, #0
 8010bca:	42a6      	cmp	r6, r4
 8010bcc:	d105      	bne.n	8010bda <__libc_init_array+0x2e>
 8010bce:	bd70      	pop	{r4, r5, r6, pc}
 8010bd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8010bd4:	4798      	blx	r3
 8010bd6:	3601      	adds	r6, #1
 8010bd8:	e7ee      	b.n	8010bb8 <__libc_init_array+0xc>
 8010bda:	f855 3b04 	ldr.w	r3, [r5], #4
 8010bde:	4798      	blx	r3
 8010be0:	3601      	adds	r6, #1
 8010be2:	e7f2      	b.n	8010bca <__libc_init_array+0x1e>
 8010be4:	08011f1c 	.word	0x08011f1c
 8010be8:	08011f1c 	.word	0x08011f1c
 8010bec:	08011f1c 	.word	0x08011f1c
 8010bf0:	08011f20 	.word	0x08011f20

08010bf4 <__retarget_lock_acquire_recursive>:
 8010bf4:	4770      	bx	lr

08010bf6 <__retarget_lock_release_recursive>:
 8010bf6:	4770      	bx	lr

08010bf8 <strcpy>:
 8010bf8:	4603      	mov	r3, r0
 8010bfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010bfe:	f803 2b01 	strb.w	r2, [r3], #1
 8010c02:	2a00      	cmp	r2, #0
 8010c04:	d1f9      	bne.n	8010bfa <strcpy+0x2>
 8010c06:	4770      	bx	lr

08010c08 <_free_r>:
 8010c08:	b538      	push	{r3, r4, r5, lr}
 8010c0a:	4605      	mov	r5, r0
 8010c0c:	2900      	cmp	r1, #0
 8010c0e:	d041      	beq.n	8010c94 <_free_r+0x8c>
 8010c10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010c14:	1f0c      	subs	r4, r1, #4
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	bfb8      	it	lt
 8010c1a:	18e4      	addlt	r4, r4, r3
 8010c1c:	f000 f8e0 	bl	8010de0 <__malloc_lock>
 8010c20:	4a1d      	ldr	r2, [pc, #116]	@ (8010c98 <_free_r+0x90>)
 8010c22:	6813      	ldr	r3, [r2, #0]
 8010c24:	b933      	cbnz	r3, 8010c34 <_free_r+0x2c>
 8010c26:	6063      	str	r3, [r4, #4]
 8010c28:	6014      	str	r4, [r2, #0]
 8010c2a:	4628      	mov	r0, r5
 8010c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c30:	f000 b8dc 	b.w	8010dec <__malloc_unlock>
 8010c34:	42a3      	cmp	r3, r4
 8010c36:	d908      	bls.n	8010c4a <_free_r+0x42>
 8010c38:	6820      	ldr	r0, [r4, #0]
 8010c3a:	1821      	adds	r1, r4, r0
 8010c3c:	428b      	cmp	r3, r1
 8010c3e:	bf01      	itttt	eq
 8010c40:	6819      	ldreq	r1, [r3, #0]
 8010c42:	685b      	ldreq	r3, [r3, #4]
 8010c44:	1809      	addeq	r1, r1, r0
 8010c46:	6021      	streq	r1, [r4, #0]
 8010c48:	e7ed      	b.n	8010c26 <_free_r+0x1e>
 8010c4a:	461a      	mov	r2, r3
 8010c4c:	685b      	ldr	r3, [r3, #4]
 8010c4e:	b10b      	cbz	r3, 8010c54 <_free_r+0x4c>
 8010c50:	42a3      	cmp	r3, r4
 8010c52:	d9fa      	bls.n	8010c4a <_free_r+0x42>
 8010c54:	6811      	ldr	r1, [r2, #0]
 8010c56:	1850      	adds	r0, r2, r1
 8010c58:	42a0      	cmp	r0, r4
 8010c5a:	d10b      	bne.n	8010c74 <_free_r+0x6c>
 8010c5c:	6820      	ldr	r0, [r4, #0]
 8010c5e:	4401      	add	r1, r0
 8010c60:	1850      	adds	r0, r2, r1
 8010c62:	4283      	cmp	r3, r0
 8010c64:	6011      	str	r1, [r2, #0]
 8010c66:	d1e0      	bne.n	8010c2a <_free_r+0x22>
 8010c68:	6818      	ldr	r0, [r3, #0]
 8010c6a:	685b      	ldr	r3, [r3, #4]
 8010c6c:	6053      	str	r3, [r2, #4]
 8010c6e:	4408      	add	r0, r1
 8010c70:	6010      	str	r0, [r2, #0]
 8010c72:	e7da      	b.n	8010c2a <_free_r+0x22>
 8010c74:	d902      	bls.n	8010c7c <_free_r+0x74>
 8010c76:	230c      	movs	r3, #12
 8010c78:	602b      	str	r3, [r5, #0]
 8010c7a:	e7d6      	b.n	8010c2a <_free_r+0x22>
 8010c7c:	6820      	ldr	r0, [r4, #0]
 8010c7e:	1821      	adds	r1, r4, r0
 8010c80:	428b      	cmp	r3, r1
 8010c82:	bf04      	itt	eq
 8010c84:	6819      	ldreq	r1, [r3, #0]
 8010c86:	685b      	ldreq	r3, [r3, #4]
 8010c88:	6063      	str	r3, [r4, #4]
 8010c8a:	bf04      	itt	eq
 8010c8c:	1809      	addeq	r1, r1, r0
 8010c8e:	6021      	streq	r1, [r4, #0]
 8010c90:	6054      	str	r4, [r2, #4]
 8010c92:	e7ca      	b.n	8010c2a <_free_r+0x22>
 8010c94:	bd38      	pop	{r3, r4, r5, pc}
 8010c96:	bf00      	nop
 8010c98:	24001038 	.word	0x24001038

08010c9c <sbrk_aligned>:
 8010c9c:	b570      	push	{r4, r5, r6, lr}
 8010c9e:	4e0f      	ldr	r6, [pc, #60]	@ (8010cdc <sbrk_aligned+0x40>)
 8010ca0:	460c      	mov	r4, r1
 8010ca2:	6831      	ldr	r1, [r6, #0]
 8010ca4:	4605      	mov	r5, r0
 8010ca6:	b911      	cbnz	r1, 8010cae <sbrk_aligned+0x12>
 8010ca8:	f000 fba6 	bl	80113f8 <_sbrk_r>
 8010cac:	6030      	str	r0, [r6, #0]
 8010cae:	4621      	mov	r1, r4
 8010cb0:	4628      	mov	r0, r5
 8010cb2:	f000 fba1 	bl	80113f8 <_sbrk_r>
 8010cb6:	1c43      	adds	r3, r0, #1
 8010cb8:	d103      	bne.n	8010cc2 <sbrk_aligned+0x26>
 8010cba:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8010cbe:	4620      	mov	r0, r4
 8010cc0:	bd70      	pop	{r4, r5, r6, pc}
 8010cc2:	1cc4      	adds	r4, r0, #3
 8010cc4:	f024 0403 	bic.w	r4, r4, #3
 8010cc8:	42a0      	cmp	r0, r4
 8010cca:	d0f8      	beq.n	8010cbe <sbrk_aligned+0x22>
 8010ccc:	1a21      	subs	r1, r4, r0
 8010cce:	4628      	mov	r0, r5
 8010cd0:	f000 fb92 	bl	80113f8 <_sbrk_r>
 8010cd4:	3001      	adds	r0, #1
 8010cd6:	d1f2      	bne.n	8010cbe <sbrk_aligned+0x22>
 8010cd8:	e7ef      	b.n	8010cba <sbrk_aligned+0x1e>
 8010cda:	bf00      	nop
 8010cdc:	24001034 	.word	0x24001034

08010ce0 <_malloc_r>:
 8010ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ce4:	1ccd      	adds	r5, r1, #3
 8010ce6:	f025 0503 	bic.w	r5, r5, #3
 8010cea:	3508      	adds	r5, #8
 8010cec:	2d0c      	cmp	r5, #12
 8010cee:	bf38      	it	cc
 8010cf0:	250c      	movcc	r5, #12
 8010cf2:	2d00      	cmp	r5, #0
 8010cf4:	4606      	mov	r6, r0
 8010cf6:	db01      	blt.n	8010cfc <_malloc_r+0x1c>
 8010cf8:	42a9      	cmp	r1, r5
 8010cfa:	d904      	bls.n	8010d06 <_malloc_r+0x26>
 8010cfc:	230c      	movs	r3, #12
 8010cfe:	6033      	str	r3, [r6, #0]
 8010d00:	2000      	movs	r0, #0
 8010d02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010ddc <_malloc_r+0xfc>
 8010d0a:	f000 f869 	bl	8010de0 <__malloc_lock>
 8010d0e:	f8d8 3000 	ldr.w	r3, [r8]
 8010d12:	461c      	mov	r4, r3
 8010d14:	bb44      	cbnz	r4, 8010d68 <_malloc_r+0x88>
 8010d16:	4629      	mov	r1, r5
 8010d18:	4630      	mov	r0, r6
 8010d1a:	f7ff ffbf 	bl	8010c9c <sbrk_aligned>
 8010d1e:	1c43      	adds	r3, r0, #1
 8010d20:	4604      	mov	r4, r0
 8010d22:	d158      	bne.n	8010dd6 <_malloc_r+0xf6>
 8010d24:	f8d8 4000 	ldr.w	r4, [r8]
 8010d28:	4627      	mov	r7, r4
 8010d2a:	2f00      	cmp	r7, #0
 8010d2c:	d143      	bne.n	8010db6 <_malloc_r+0xd6>
 8010d2e:	2c00      	cmp	r4, #0
 8010d30:	d04b      	beq.n	8010dca <_malloc_r+0xea>
 8010d32:	6823      	ldr	r3, [r4, #0]
 8010d34:	4639      	mov	r1, r7
 8010d36:	4630      	mov	r0, r6
 8010d38:	eb04 0903 	add.w	r9, r4, r3
 8010d3c:	f000 fb5c 	bl	80113f8 <_sbrk_r>
 8010d40:	4581      	cmp	r9, r0
 8010d42:	d142      	bne.n	8010dca <_malloc_r+0xea>
 8010d44:	6821      	ldr	r1, [r4, #0]
 8010d46:	1a6d      	subs	r5, r5, r1
 8010d48:	4629      	mov	r1, r5
 8010d4a:	4630      	mov	r0, r6
 8010d4c:	f7ff ffa6 	bl	8010c9c <sbrk_aligned>
 8010d50:	3001      	adds	r0, #1
 8010d52:	d03a      	beq.n	8010dca <_malloc_r+0xea>
 8010d54:	6823      	ldr	r3, [r4, #0]
 8010d56:	442b      	add	r3, r5
 8010d58:	6023      	str	r3, [r4, #0]
 8010d5a:	f8d8 3000 	ldr.w	r3, [r8]
 8010d5e:	685a      	ldr	r2, [r3, #4]
 8010d60:	bb62      	cbnz	r2, 8010dbc <_malloc_r+0xdc>
 8010d62:	f8c8 7000 	str.w	r7, [r8]
 8010d66:	e00f      	b.n	8010d88 <_malloc_r+0xa8>
 8010d68:	6822      	ldr	r2, [r4, #0]
 8010d6a:	1b52      	subs	r2, r2, r5
 8010d6c:	d420      	bmi.n	8010db0 <_malloc_r+0xd0>
 8010d6e:	2a0b      	cmp	r2, #11
 8010d70:	d917      	bls.n	8010da2 <_malloc_r+0xc2>
 8010d72:	1961      	adds	r1, r4, r5
 8010d74:	42a3      	cmp	r3, r4
 8010d76:	6025      	str	r5, [r4, #0]
 8010d78:	bf18      	it	ne
 8010d7a:	6059      	strne	r1, [r3, #4]
 8010d7c:	6863      	ldr	r3, [r4, #4]
 8010d7e:	bf08      	it	eq
 8010d80:	f8c8 1000 	streq.w	r1, [r8]
 8010d84:	5162      	str	r2, [r4, r5]
 8010d86:	604b      	str	r3, [r1, #4]
 8010d88:	4630      	mov	r0, r6
 8010d8a:	f000 f82f 	bl	8010dec <__malloc_unlock>
 8010d8e:	f104 000b 	add.w	r0, r4, #11
 8010d92:	1d23      	adds	r3, r4, #4
 8010d94:	f020 0007 	bic.w	r0, r0, #7
 8010d98:	1ac2      	subs	r2, r0, r3
 8010d9a:	bf1c      	itt	ne
 8010d9c:	1a1b      	subne	r3, r3, r0
 8010d9e:	50a3      	strne	r3, [r4, r2]
 8010da0:	e7af      	b.n	8010d02 <_malloc_r+0x22>
 8010da2:	6862      	ldr	r2, [r4, #4]
 8010da4:	42a3      	cmp	r3, r4
 8010da6:	bf0c      	ite	eq
 8010da8:	f8c8 2000 	streq.w	r2, [r8]
 8010dac:	605a      	strne	r2, [r3, #4]
 8010dae:	e7eb      	b.n	8010d88 <_malloc_r+0xa8>
 8010db0:	4623      	mov	r3, r4
 8010db2:	6864      	ldr	r4, [r4, #4]
 8010db4:	e7ae      	b.n	8010d14 <_malloc_r+0x34>
 8010db6:	463c      	mov	r4, r7
 8010db8:	687f      	ldr	r7, [r7, #4]
 8010dba:	e7b6      	b.n	8010d2a <_malloc_r+0x4a>
 8010dbc:	461a      	mov	r2, r3
 8010dbe:	685b      	ldr	r3, [r3, #4]
 8010dc0:	42a3      	cmp	r3, r4
 8010dc2:	d1fb      	bne.n	8010dbc <_malloc_r+0xdc>
 8010dc4:	2300      	movs	r3, #0
 8010dc6:	6053      	str	r3, [r2, #4]
 8010dc8:	e7de      	b.n	8010d88 <_malloc_r+0xa8>
 8010dca:	230c      	movs	r3, #12
 8010dcc:	6033      	str	r3, [r6, #0]
 8010dce:	4630      	mov	r0, r6
 8010dd0:	f000 f80c 	bl	8010dec <__malloc_unlock>
 8010dd4:	e794      	b.n	8010d00 <_malloc_r+0x20>
 8010dd6:	6005      	str	r5, [r0, #0]
 8010dd8:	e7d6      	b.n	8010d88 <_malloc_r+0xa8>
 8010dda:	bf00      	nop
 8010ddc:	24001038 	.word	0x24001038

08010de0 <__malloc_lock>:
 8010de0:	4801      	ldr	r0, [pc, #4]	@ (8010de8 <__malloc_lock+0x8>)
 8010de2:	f7ff bf07 	b.w	8010bf4 <__retarget_lock_acquire_recursive>
 8010de6:	bf00      	nop
 8010de8:	24001030 	.word	0x24001030

08010dec <__malloc_unlock>:
 8010dec:	4801      	ldr	r0, [pc, #4]	@ (8010df4 <__malloc_unlock+0x8>)
 8010dee:	f7ff bf02 	b.w	8010bf6 <__retarget_lock_release_recursive>
 8010df2:	bf00      	nop
 8010df4:	24001030 	.word	0x24001030

08010df8 <__ssputs_r>:
 8010df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010dfc:	688e      	ldr	r6, [r1, #8]
 8010dfe:	461f      	mov	r7, r3
 8010e00:	42be      	cmp	r6, r7
 8010e02:	680b      	ldr	r3, [r1, #0]
 8010e04:	4682      	mov	sl, r0
 8010e06:	460c      	mov	r4, r1
 8010e08:	4690      	mov	r8, r2
 8010e0a:	d82d      	bhi.n	8010e68 <__ssputs_r+0x70>
 8010e0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010e10:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010e14:	d026      	beq.n	8010e64 <__ssputs_r+0x6c>
 8010e16:	6965      	ldr	r5, [r4, #20]
 8010e18:	6909      	ldr	r1, [r1, #16]
 8010e1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010e1e:	eba3 0901 	sub.w	r9, r3, r1
 8010e22:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010e26:	1c7b      	adds	r3, r7, #1
 8010e28:	444b      	add	r3, r9
 8010e2a:	106d      	asrs	r5, r5, #1
 8010e2c:	429d      	cmp	r5, r3
 8010e2e:	bf38      	it	cc
 8010e30:	461d      	movcc	r5, r3
 8010e32:	0553      	lsls	r3, r2, #21
 8010e34:	d527      	bpl.n	8010e86 <__ssputs_r+0x8e>
 8010e36:	4629      	mov	r1, r5
 8010e38:	f7ff ff52 	bl	8010ce0 <_malloc_r>
 8010e3c:	4606      	mov	r6, r0
 8010e3e:	b360      	cbz	r0, 8010e9a <__ssputs_r+0xa2>
 8010e40:	6921      	ldr	r1, [r4, #16]
 8010e42:	464a      	mov	r2, r9
 8010e44:	f000 fae8 	bl	8011418 <memcpy>
 8010e48:	89a3      	ldrh	r3, [r4, #12]
 8010e4a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010e4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010e52:	81a3      	strh	r3, [r4, #12]
 8010e54:	6126      	str	r6, [r4, #16]
 8010e56:	6165      	str	r5, [r4, #20]
 8010e58:	444e      	add	r6, r9
 8010e5a:	eba5 0509 	sub.w	r5, r5, r9
 8010e5e:	6026      	str	r6, [r4, #0]
 8010e60:	60a5      	str	r5, [r4, #8]
 8010e62:	463e      	mov	r6, r7
 8010e64:	42be      	cmp	r6, r7
 8010e66:	d900      	bls.n	8010e6a <__ssputs_r+0x72>
 8010e68:	463e      	mov	r6, r7
 8010e6a:	6820      	ldr	r0, [r4, #0]
 8010e6c:	4632      	mov	r2, r6
 8010e6e:	4641      	mov	r1, r8
 8010e70:	f000 faa8 	bl	80113c4 <memmove>
 8010e74:	68a3      	ldr	r3, [r4, #8]
 8010e76:	1b9b      	subs	r3, r3, r6
 8010e78:	60a3      	str	r3, [r4, #8]
 8010e7a:	6823      	ldr	r3, [r4, #0]
 8010e7c:	4433      	add	r3, r6
 8010e7e:	6023      	str	r3, [r4, #0]
 8010e80:	2000      	movs	r0, #0
 8010e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e86:	462a      	mov	r2, r5
 8010e88:	f000 fad4 	bl	8011434 <_realloc_r>
 8010e8c:	4606      	mov	r6, r0
 8010e8e:	2800      	cmp	r0, #0
 8010e90:	d1e0      	bne.n	8010e54 <__ssputs_r+0x5c>
 8010e92:	6921      	ldr	r1, [r4, #16]
 8010e94:	4650      	mov	r0, sl
 8010e96:	f7ff feb7 	bl	8010c08 <_free_r>
 8010e9a:	230c      	movs	r3, #12
 8010e9c:	f8ca 3000 	str.w	r3, [sl]
 8010ea0:	89a3      	ldrh	r3, [r4, #12]
 8010ea2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010ea6:	81a3      	strh	r3, [r4, #12]
 8010ea8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010eac:	e7e9      	b.n	8010e82 <__ssputs_r+0x8a>
	...

08010eb0 <_svfiprintf_r>:
 8010eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010eb4:	4698      	mov	r8, r3
 8010eb6:	898b      	ldrh	r3, [r1, #12]
 8010eb8:	061b      	lsls	r3, r3, #24
 8010eba:	b09d      	sub	sp, #116	@ 0x74
 8010ebc:	4607      	mov	r7, r0
 8010ebe:	460d      	mov	r5, r1
 8010ec0:	4614      	mov	r4, r2
 8010ec2:	d510      	bpl.n	8010ee6 <_svfiprintf_r+0x36>
 8010ec4:	690b      	ldr	r3, [r1, #16]
 8010ec6:	b973      	cbnz	r3, 8010ee6 <_svfiprintf_r+0x36>
 8010ec8:	2140      	movs	r1, #64	@ 0x40
 8010eca:	f7ff ff09 	bl	8010ce0 <_malloc_r>
 8010ece:	6028      	str	r0, [r5, #0]
 8010ed0:	6128      	str	r0, [r5, #16]
 8010ed2:	b930      	cbnz	r0, 8010ee2 <_svfiprintf_r+0x32>
 8010ed4:	230c      	movs	r3, #12
 8010ed6:	603b      	str	r3, [r7, #0]
 8010ed8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010edc:	b01d      	add	sp, #116	@ 0x74
 8010ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ee2:	2340      	movs	r3, #64	@ 0x40
 8010ee4:	616b      	str	r3, [r5, #20]
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	9309      	str	r3, [sp, #36]	@ 0x24
 8010eea:	2320      	movs	r3, #32
 8010eec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010ef0:	f8cd 800c 	str.w	r8, [sp, #12]
 8010ef4:	2330      	movs	r3, #48	@ 0x30
 8010ef6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011094 <_svfiprintf_r+0x1e4>
 8010efa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010efe:	f04f 0901 	mov.w	r9, #1
 8010f02:	4623      	mov	r3, r4
 8010f04:	469a      	mov	sl, r3
 8010f06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f0a:	b10a      	cbz	r2, 8010f10 <_svfiprintf_r+0x60>
 8010f0c:	2a25      	cmp	r2, #37	@ 0x25
 8010f0e:	d1f9      	bne.n	8010f04 <_svfiprintf_r+0x54>
 8010f10:	ebba 0b04 	subs.w	fp, sl, r4
 8010f14:	d00b      	beq.n	8010f2e <_svfiprintf_r+0x7e>
 8010f16:	465b      	mov	r3, fp
 8010f18:	4622      	mov	r2, r4
 8010f1a:	4629      	mov	r1, r5
 8010f1c:	4638      	mov	r0, r7
 8010f1e:	f7ff ff6b 	bl	8010df8 <__ssputs_r>
 8010f22:	3001      	adds	r0, #1
 8010f24:	f000 80a7 	beq.w	8011076 <_svfiprintf_r+0x1c6>
 8010f28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010f2a:	445a      	add	r2, fp
 8010f2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8010f2e:	f89a 3000 	ldrb.w	r3, [sl]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	f000 809f 	beq.w	8011076 <_svfiprintf_r+0x1c6>
 8010f38:	2300      	movs	r3, #0
 8010f3a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010f3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010f42:	f10a 0a01 	add.w	sl, sl, #1
 8010f46:	9304      	str	r3, [sp, #16]
 8010f48:	9307      	str	r3, [sp, #28]
 8010f4a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010f4e:	931a      	str	r3, [sp, #104]	@ 0x68
 8010f50:	4654      	mov	r4, sl
 8010f52:	2205      	movs	r2, #5
 8010f54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f58:	484e      	ldr	r0, [pc, #312]	@ (8011094 <_svfiprintf_r+0x1e4>)
 8010f5a:	f7ef f9e1 	bl	8000320 <memchr>
 8010f5e:	9a04      	ldr	r2, [sp, #16]
 8010f60:	b9d8      	cbnz	r0, 8010f9a <_svfiprintf_r+0xea>
 8010f62:	06d0      	lsls	r0, r2, #27
 8010f64:	bf44      	itt	mi
 8010f66:	2320      	movmi	r3, #32
 8010f68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010f6c:	0711      	lsls	r1, r2, #28
 8010f6e:	bf44      	itt	mi
 8010f70:	232b      	movmi	r3, #43	@ 0x2b
 8010f72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010f76:	f89a 3000 	ldrb.w	r3, [sl]
 8010f7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8010f7c:	d015      	beq.n	8010faa <_svfiprintf_r+0xfa>
 8010f7e:	9a07      	ldr	r2, [sp, #28]
 8010f80:	4654      	mov	r4, sl
 8010f82:	2000      	movs	r0, #0
 8010f84:	f04f 0c0a 	mov.w	ip, #10
 8010f88:	4621      	mov	r1, r4
 8010f8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010f8e:	3b30      	subs	r3, #48	@ 0x30
 8010f90:	2b09      	cmp	r3, #9
 8010f92:	d94b      	bls.n	801102c <_svfiprintf_r+0x17c>
 8010f94:	b1b0      	cbz	r0, 8010fc4 <_svfiprintf_r+0x114>
 8010f96:	9207      	str	r2, [sp, #28]
 8010f98:	e014      	b.n	8010fc4 <_svfiprintf_r+0x114>
 8010f9a:	eba0 0308 	sub.w	r3, r0, r8
 8010f9e:	fa09 f303 	lsl.w	r3, r9, r3
 8010fa2:	4313      	orrs	r3, r2
 8010fa4:	9304      	str	r3, [sp, #16]
 8010fa6:	46a2      	mov	sl, r4
 8010fa8:	e7d2      	b.n	8010f50 <_svfiprintf_r+0xa0>
 8010faa:	9b03      	ldr	r3, [sp, #12]
 8010fac:	1d19      	adds	r1, r3, #4
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	9103      	str	r1, [sp, #12]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	bfbb      	ittet	lt
 8010fb6:	425b      	neglt	r3, r3
 8010fb8:	f042 0202 	orrlt.w	r2, r2, #2
 8010fbc:	9307      	strge	r3, [sp, #28]
 8010fbe:	9307      	strlt	r3, [sp, #28]
 8010fc0:	bfb8      	it	lt
 8010fc2:	9204      	strlt	r2, [sp, #16]
 8010fc4:	7823      	ldrb	r3, [r4, #0]
 8010fc6:	2b2e      	cmp	r3, #46	@ 0x2e
 8010fc8:	d10a      	bne.n	8010fe0 <_svfiprintf_r+0x130>
 8010fca:	7863      	ldrb	r3, [r4, #1]
 8010fcc:	2b2a      	cmp	r3, #42	@ 0x2a
 8010fce:	d132      	bne.n	8011036 <_svfiprintf_r+0x186>
 8010fd0:	9b03      	ldr	r3, [sp, #12]
 8010fd2:	1d1a      	adds	r2, r3, #4
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	9203      	str	r2, [sp, #12]
 8010fd8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010fdc:	3402      	adds	r4, #2
 8010fde:	9305      	str	r3, [sp, #20]
 8010fe0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80110a4 <_svfiprintf_r+0x1f4>
 8010fe4:	7821      	ldrb	r1, [r4, #0]
 8010fe6:	2203      	movs	r2, #3
 8010fe8:	4650      	mov	r0, sl
 8010fea:	f7ef f999 	bl	8000320 <memchr>
 8010fee:	b138      	cbz	r0, 8011000 <_svfiprintf_r+0x150>
 8010ff0:	9b04      	ldr	r3, [sp, #16]
 8010ff2:	eba0 000a 	sub.w	r0, r0, sl
 8010ff6:	2240      	movs	r2, #64	@ 0x40
 8010ff8:	4082      	lsls	r2, r0
 8010ffa:	4313      	orrs	r3, r2
 8010ffc:	3401      	adds	r4, #1
 8010ffe:	9304      	str	r3, [sp, #16]
 8011000:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011004:	4824      	ldr	r0, [pc, #144]	@ (8011098 <_svfiprintf_r+0x1e8>)
 8011006:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801100a:	2206      	movs	r2, #6
 801100c:	f7ef f988 	bl	8000320 <memchr>
 8011010:	2800      	cmp	r0, #0
 8011012:	d036      	beq.n	8011082 <_svfiprintf_r+0x1d2>
 8011014:	4b21      	ldr	r3, [pc, #132]	@ (801109c <_svfiprintf_r+0x1ec>)
 8011016:	bb1b      	cbnz	r3, 8011060 <_svfiprintf_r+0x1b0>
 8011018:	9b03      	ldr	r3, [sp, #12]
 801101a:	3307      	adds	r3, #7
 801101c:	f023 0307 	bic.w	r3, r3, #7
 8011020:	3308      	adds	r3, #8
 8011022:	9303      	str	r3, [sp, #12]
 8011024:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011026:	4433      	add	r3, r6
 8011028:	9309      	str	r3, [sp, #36]	@ 0x24
 801102a:	e76a      	b.n	8010f02 <_svfiprintf_r+0x52>
 801102c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011030:	460c      	mov	r4, r1
 8011032:	2001      	movs	r0, #1
 8011034:	e7a8      	b.n	8010f88 <_svfiprintf_r+0xd8>
 8011036:	2300      	movs	r3, #0
 8011038:	3401      	adds	r4, #1
 801103a:	9305      	str	r3, [sp, #20]
 801103c:	4619      	mov	r1, r3
 801103e:	f04f 0c0a 	mov.w	ip, #10
 8011042:	4620      	mov	r0, r4
 8011044:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011048:	3a30      	subs	r2, #48	@ 0x30
 801104a:	2a09      	cmp	r2, #9
 801104c:	d903      	bls.n	8011056 <_svfiprintf_r+0x1a6>
 801104e:	2b00      	cmp	r3, #0
 8011050:	d0c6      	beq.n	8010fe0 <_svfiprintf_r+0x130>
 8011052:	9105      	str	r1, [sp, #20]
 8011054:	e7c4      	b.n	8010fe0 <_svfiprintf_r+0x130>
 8011056:	fb0c 2101 	mla	r1, ip, r1, r2
 801105a:	4604      	mov	r4, r0
 801105c:	2301      	movs	r3, #1
 801105e:	e7f0      	b.n	8011042 <_svfiprintf_r+0x192>
 8011060:	ab03      	add	r3, sp, #12
 8011062:	9300      	str	r3, [sp, #0]
 8011064:	462a      	mov	r2, r5
 8011066:	4b0e      	ldr	r3, [pc, #56]	@ (80110a0 <_svfiprintf_r+0x1f0>)
 8011068:	a904      	add	r1, sp, #16
 801106a:	4638      	mov	r0, r7
 801106c:	f3af 8000 	nop.w
 8011070:	1c42      	adds	r2, r0, #1
 8011072:	4606      	mov	r6, r0
 8011074:	d1d6      	bne.n	8011024 <_svfiprintf_r+0x174>
 8011076:	89ab      	ldrh	r3, [r5, #12]
 8011078:	065b      	lsls	r3, r3, #25
 801107a:	f53f af2d 	bmi.w	8010ed8 <_svfiprintf_r+0x28>
 801107e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011080:	e72c      	b.n	8010edc <_svfiprintf_r+0x2c>
 8011082:	ab03      	add	r3, sp, #12
 8011084:	9300      	str	r3, [sp, #0]
 8011086:	462a      	mov	r2, r5
 8011088:	4b05      	ldr	r3, [pc, #20]	@ (80110a0 <_svfiprintf_r+0x1f0>)
 801108a:	a904      	add	r1, sp, #16
 801108c:	4638      	mov	r0, r7
 801108e:	f000 f879 	bl	8011184 <_printf_i>
 8011092:	e7ed      	b.n	8011070 <_svfiprintf_r+0x1c0>
 8011094:	08011ede 	.word	0x08011ede
 8011098:	08011ee8 	.word	0x08011ee8
 801109c:	00000000 	.word	0x00000000
 80110a0:	08010df9 	.word	0x08010df9
 80110a4:	08011ee4 	.word	0x08011ee4

080110a8 <_printf_common>:
 80110a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110ac:	4616      	mov	r6, r2
 80110ae:	4698      	mov	r8, r3
 80110b0:	688a      	ldr	r2, [r1, #8]
 80110b2:	690b      	ldr	r3, [r1, #16]
 80110b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80110b8:	4293      	cmp	r3, r2
 80110ba:	bfb8      	it	lt
 80110bc:	4613      	movlt	r3, r2
 80110be:	6033      	str	r3, [r6, #0]
 80110c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80110c4:	4607      	mov	r7, r0
 80110c6:	460c      	mov	r4, r1
 80110c8:	b10a      	cbz	r2, 80110ce <_printf_common+0x26>
 80110ca:	3301      	adds	r3, #1
 80110cc:	6033      	str	r3, [r6, #0]
 80110ce:	6823      	ldr	r3, [r4, #0]
 80110d0:	0699      	lsls	r1, r3, #26
 80110d2:	bf42      	ittt	mi
 80110d4:	6833      	ldrmi	r3, [r6, #0]
 80110d6:	3302      	addmi	r3, #2
 80110d8:	6033      	strmi	r3, [r6, #0]
 80110da:	6825      	ldr	r5, [r4, #0]
 80110dc:	f015 0506 	ands.w	r5, r5, #6
 80110e0:	d106      	bne.n	80110f0 <_printf_common+0x48>
 80110e2:	f104 0a19 	add.w	sl, r4, #25
 80110e6:	68e3      	ldr	r3, [r4, #12]
 80110e8:	6832      	ldr	r2, [r6, #0]
 80110ea:	1a9b      	subs	r3, r3, r2
 80110ec:	42ab      	cmp	r3, r5
 80110ee:	dc26      	bgt.n	801113e <_printf_common+0x96>
 80110f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80110f4:	6822      	ldr	r2, [r4, #0]
 80110f6:	3b00      	subs	r3, #0
 80110f8:	bf18      	it	ne
 80110fa:	2301      	movne	r3, #1
 80110fc:	0692      	lsls	r2, r2, #26
 80110fe:	d42b      	bmi.n	8011158 <_printf_common+0xb0>
 8011100:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011104:	4641      	mov	r1, r8
 8011106:	4638      	mov	r0, r7
 8011108:	47c8      	blx	r9
 801110a:	3001      	adds	r0, #1
 801110c:	d01e      	beq.n	801114c <_printf_common+0xa4>
 801110e:	6823      	ldr	r3, [r4, #0]
 8011110:	6922      	ldr	r2, [r4, #16]
 8011112:	f003 0306 	and.w	r3, r3, #6
 8011116:	2b04      	cmp	r3, #4
 8011118:	bf02      	ittt	eq
 801111a:	68e5      	ldreq	r5, [r4, #12]
 801111c:	6833      	ldreq	r3, [r6, #0]
 801111e:	1aed      	subeq	r5, r5, r3
 8011120:	68a3      	ldr	r3, [r4, #8]
 8011122:	bf0c      	ite	eq
 8011124:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011128:	2500      	movne	r5, #0
 801112a:	4293      	cmp	r3, r2
 801112c:	bfc4      	itt	gt
 801112e:	1a9b      	subgt	r3, r3, r2
 8011130:	18ed      	addgt	r5, r5, r3
 8011132:	2600      	movs	r6, #0
 8011134:	341a      	adds	r4, #26
 8011136:	42b5      	cmp	r5, r6
 8011138:	d11a      	bne.n	8011170 <_printf_common+0xc8>
 801113a:	2000      	movs	r0, #0
 801113c:	e008      	b.n	8011150 <_printf_common+0xa8>
 801113e:	2301      	movs	r3, #1
 8011140:	4652      	mov	r2, sl
 8011142:	4641      	mov	r1, r8
 8011144:	4638      	mov	r0, r7
 8011146:	47c8      	blx	r9
 8011148:	3001      	adds	r0, #1
 801114a:	d103      	bne.n	8011154 <_printf_common+0xac>
 801114c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011154:	3501      	adds	r5, #1
 8011156:	e7c6      	b.n	80110e6 <_printf_common+0x3e>
 8011158:	18e1      	adds	r1, r4, r3
 801115a:	1c5a      	adds	r2, r3, #1
 801115c:	2030      	movs	r0, #48	@ 0x30
 801115e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011162:	4422      	add	r2, r4
 8011164:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011168:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801116c:	3302      	adds	r3, #2
 801116e:	e7c7      	b.n	8011100 <_printf_common+0x58>
 8011170:	2301      	movs	r3, #1
 8011172:	4622      	mov	r2, r4
 8011174:	4641      	mov	r1, r8
 8011176:	4638      	mov	r0, r7
 8011178:	47c8      	blx	r9
 801117a:	3001      	adds	r0, #1
 801117c:	d0e6      	beq.n	801114c <_printf_common+0xa4>
 801117e:	3601      	adds	r6, #1
 8011180:	e7d9      	b.n	8011136 <_printf_common+0x8e>
	...

08011184 <_printf_i>:
 8011184:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011188:	7e0f      	ldrb	r7, [r1, #24]
 801118a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801118c:	2f78      	cmp	r7, #120	@ 0x78
 801118e:	4691      	mov	r9, r2
 8011190:	4680      	mov	r8, r0
 8011192:	460c      	mov	r4, r1
 8011194:	469a      	mov	sl, r3
 8011196:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801119a:	d807      	bhi.n	80111ac <_printf_i+0x28>
 801119c:	2f62      	cmp	r7, #98	@ 0x62
 801119e:	d80a      	bhi.n	80111b6 <_printf_i+0x32>
 80111a0:	2f00      	cmp	r7, #0
 80111a2:	f000 80d2 	beq.w	801134a <_printf_i+0x1c6>
 80111a6:	2f58      	cmp	r7, #88	@ 0x58
 80111a8:	f000 80b9 	beq.w	801131e <_printf_i+0x19a>
 80111ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80111b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80111b4:	e03a      	b.n	801122c <_printf_i+0xa8>
 80111b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80111ba:	2b15      	cmp	r3, #21
 80111bc:	d8f6      	bhi.n	80111ac <_printf_i+0x28>
 80111be:	a101      	add	r1, pc, #4	@ (adr r1, 80111c4 <_printf_i+0x40>)
 80111c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80111c4:	0801121d 	.word	0x0801121d
 80111c8:	08011231 	.word	0x08011231
 80111cc:	080111ad 	.word	0x080111ad
 80111d0:	080111ad 	.word	0x080111ad
 80111d4:	080111ad 	.word	0x080111ad
 80111d8:	080111ad 	.word	0x080111ad
 80111dc:	08011231 	.word	0x08011231
 80111e0:	080111ad 	.word	0x080111ad
 80111e4:	080111ad 	.word	0x080111ad
 80111e8:	080111ad 	.word	0x080111ad
 80111ec:	080111ad 	.word	0x080111ad
 80111f0:	08011331 	.word	0x08011331
 80111f4:	0801125b 	.word	0x0801125b
 80111f8:	080112eb 	.word	0x080112eb
 80111fc:	080111ad 	.word	0x080111ad
 8011200:	080111ad 	.word	0x080111ad
 8011204:	08011353 	.word	0x08011353
 8011208:	080111ad 	.word	0x080111ad
 801120c:	0801125b 	.word	0x0801125b
 8011210:	080111ad 	.word	0x080111ad
 8011214:	080111ad 	.word	0x080111ad
 8011218:	080112f3 	.word	0x080112f3
 801121c:	6833      	ldr	r3, [r6, #0]
 801121e:	1d1a      	adds	r2, r3, #4
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	6032      	str	r2, [r6, #0]
 8011224:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011228:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801122c:	2301      	movs	r3, #1
 801122e:	e09d      	b.n	801136c <_printf_i+0x1e8>
 8011230:	6833      	ldr	r3, [r6, #0]
 8011232:	6820      	ldr	r0, [r4, #0]
 8011234:	1d19      	adds	r1, r3, #4
 8011236:	6031      	str	r1, [r6, #0]
 8011238:	0606      	lsls	r6, r0, #24
 801123a:	d501      	bpl.n	8011240 <_printf_i+0xbc>
 801123c:	681d      	ldr	r5, [r3, #0]
 801123e:	e003      	b.n	8011248 <_printf_i+0xc4>
 8011240:	0645      	lsls	r5, r0, #25
 8011242:	d5fb      	bpl.n	801123c <_printf_i+0xb8>
 8011244:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011248:	2d00      	cmp	r5, #0
 801124a:	da03      	bge.n	8011254 <_printf_i+0xd0>
 801124c:	232d      	movs	r3, #45	@ 0x2d
 801124e:	426d      	negs	r5, r5
 8011250:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011254:	4859      	ldr	r0, [pc, #356]	@ (80113bc <_printf_i+0x238>)
 8011256:	230a      	movs	r3, #10
 8011258:	e011      	b.n	801127e <_printf_i+0xfa>
 801125a:	6821      	ldr	r1, [r4, #0]
 801125c:	6833      	ldr	r3, [r6, #0]
 801125e:	0608      	lsls	r0, r1, #24
 8011260:	f853 5b04 	ldr.w	r5, [r3], #4
 8011264:	d402      	bmi.n	801126c <_printf_i+0xe8>
 8011266:	0649      	lsls	r1, r1, #25
 8011268:	bf48      	it	mi
 801126a:	b2ad      	uxthmi	r5, r5
 801126c:	2f6f      	cmp	r7, #111	@ 0x6f
 801126e:	4853      	ldr	r0, [pc, #332]	@ (80113bc <_printf_i+0x238>)
 8011270:	6033      	str	r3, [r6, #0]
 8011272:	bf14      	ite	ne
 8011274:	230a      	movne	r3, #10
 8011276:	2308      	moveq	r3, #8
 8011278:	2100      	movs	r1, #0
 801127a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801127e:	6866      	ldr	r6, [r4, #4]
 8011280:	60a6      	str	r6, [r4, #8]
 8011282:	2e00      	cmp	r6, #0
 8011284:	bfa2      	ittt	ge
 8011286:	6821      	ldrge	r1, [r4, #0]
 8011288:	f021 0104 	bicge.w	r1, r1, #4
 801128c:	6021      	strge	r1, [r4, #0]
 801128e:	b90d      	cbnz	r5, 8011294 <_printf_i+0x110>
 8011290:	2e00      	cmp	r6, #0
 8011292:	d04b      	beq.n	801132c <_printf_i+0x1a8>
 8011294:	4616      	mov	r6, r2
 8011296:	fbb5 f1f3 	udiv	r1, r5, r3
 801129a:	fb03 5711 	mls	r7, r3, r1, r5
 801129e:	5dc7      	ldrb	r7, [r0, r7]
 80112a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80112a4:	462f      	mov	r7, r5
 80112a6:	42bb      	cmp	r3, r7
 80112a8:	460d      	mov	r5, r1
 80112aa:	d9f4      	bls.n	8011296 <_printf_i+0x112>
 80112ac:	2b08      	cmp	r3, #8
 80112ae:	d10b      	bne.n	80112c8 <_printf_i+0x144>
 80112b0:	6823      	ldr	r3, [r4, #0]
 80112b2:	07df      	lsls	r7, r3, #31
 80112b4:	d508      	bpl.n	80112c8 <_printf_i+0x144>
 80112b6:	6923      	ldr	r3, [r4, #16]
 80112b8:	6861      	ldr	r1, [r4, #4]
 80112ba:	4299      	cmp	r1, r3
 80112bc:	bfde      	ittt	le
 80112be:	2330      	movle	r3, #48	@ 0x30
 80112c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80112c4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80112c8:	1b92      	subs	r2, r2, r6
 80112ca:	6122      	str	r2, [r4, #16]
 80112cc:	f8cd a000 	str.w	sl, [sp]
 80112d0:	464b      	mov	r3, r9
 80112d2:	aa03      	add	r2, sp, #12
 80112d4:	4621      	mov	r1, r4
 80112d6:	4640      	mov	r0, r8
 80112d8:	f7ff fee6 	bl	80110a8 <_printf_common>
 80112dc:	3001      	adds	r0, #1
 80112de:	d14a      	bne.n	8011376 <_printf_i+0x1f2>
 80112e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80112e4:	b004      	add	sp, #16
 80112e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112ea:	6823      	ldr	r3, [r4, #0]
 80112ec:	f043 0320 	orr.w	r3, r3, #32
 80112f0:	6023      	str	r3, [r4, #0]
 80112f2:	4833      	ldr	r0, [pc, #204]	@ (80113c0 <_printf_i+0x23c>)
 80112f4:	2778      	movs	r7, #120	@ 0x78
 80112f6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80112fa:	6823      	ldr	r3, [r4, #0]
 80112fc:	6831      	ldr	r1, [r6, #0]
 80112fe:	061f      	lsls	r7, r3, #24
 8011300:	f851 5b04 	ldr.w	r5, [r1], #4
 8011304:	d402      	bmi.n	801130c <_printf_i+0x188>
 8011306:	065f      	lsls	r7, r3, #25
 8011308:	bf48      	it	mi
 801130a:	b2ad      	uxthmi	r5, r5
 801130c:	6031      	str	r1, [r6, #0]
 801130e:	07d9      	lsls	r1, r3, #31
 8011310:	bf44      	itt	mi
 8011312:	f043 0320 	orrmi.w	r3, r3, #32
 8011316:	6023      	strmi	r3, [r4, #0]
 8011318:	b11d      	cbz	r5, 8011322 <_printf_i+0x19e>
 801131a:	2310      	movs	r3, #16
 801131c:	e7ac      	b.n	8011278 <_printf_i+0xf4>
 801131e:	4827      	ldr	r0, [pc, #156]	@ (80113bc <_printf_i+0x238>)
 8011320:	e7e9      	b.n	80112f6 <_printf_i+0x172>
 8011322:	6823      	ldr	r3, [r4, #0]
 8011324:	f023 0320 	bic.w	r3, r3, #32
 8011328:	6023      	str	r3, [r4, #0]
 801132a:	e7f6      	b.n	801131a <_printf_i+0x196>
 801132c:	4616      	mov	r6, r2
 801132e:	e7bd      	b.n	80112ac <_printf_i+0x128>
 8011330:	6833      	ldr	r3, [r6, #0]
 8011332:	6825      	ldr	r5, [r4, #0]
 8011334:	6961      	ldr	r1, [r4, #20]
 8011336:	1d18      	adds	r0, r3, #4
 8011338:	6030      	str	r0, [r6, #0]
 801133a:	062e      	lsls	r6, r5, #24
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	d501      	bpl.n	8011344 <_printf_i+0x1c0>
 8011340:	6019      	str	r1, [r3, #0]
 8011342:	e002      	b.n	801134a <_printf_i+0x1c6>
 8011344:	0668      	lsls	r0, r5, #25
 8011346:	d5fb      	bpl.n	8011340 <_printf_i+0x1bc>
 8011348:	8019      	strh	r1, [r3, #0]
 801134a:	2300      	movs	r3, #0
 801134c:	6123      	str	r3, [r4, #16]
 801134e:	4616      	mov	r6, r2
 8011350:	e7bc      	b.n	80112cc <_printf_i+0x148>
 8011352:	6833      	ldr	r3, [r6, #0]
 8011354:	1d1a      	adds	r2, r3, #4
 8011356:	6032      	str	r2, [r6, #0]
 8011358:	681e      	ldr	r6, [r3, #0]
 801135a:	6862      	ldr	r2, [r4, #4]
 801135c:	2100      	movs	r1, #0
 801135e:	4630      	mov	r0, r6
 8011360:	f7ee ffde 	bl	8000320 <memchr>
 8011364:	b108      	cbz	r0, 801136a <_printf_i+0x1e6>
 8011366:	1b80      	subs	r0, r0, r6
 8011368:	6060      	str	r0, [r4, #4]
 801136a:	6863      	ldr	r3, [r4, #4]
 801136c:	6123      	str	r3, [r4, #16]
 801136e:	2300      	movs	r3, #0
 8011370:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011374:	e7aa      	b.n	80112cc <_printf_i+0x148>
 8011376:	6923      	ldr	r3, [r4, #16]
 8011378:	4632      	mov	r2, r6
 801137a:	4649      	mov	r1, r9
 801137c:	4640      	mov	r0, r8
 801137e:	47d0      	blx	sl
 8011380:	3001      	adds	r0, #1
 8011382:	d0ad      	beq.n	80112e0 <_printf_i+0x15c>
 8011384:	6823      	ldr	r3, [r4, #0]
 8011386:	079b      	lsls	r3, r3, #30
 8011388:	d413      	bmi.n	80113b2 <_printf_i+0x22e>
 801138a:	68e0      	ldr	r0, [r4, #12]
 801138c:	9b03      	ldr	r3, [sp, #12]
 801138e:	4298      	cmp	r0, r3
 8011390:	bfb8      	it	lt
 8011392:	4618      	movlt	r0, r3
 8011394:	e7a6      	b.n	80112e4 <_printf_i+0x160>
 8011396:	2301      	movs	r3, #1
 8011398:	4632      	mov	r2, r6
 801139a:	4649      	mov	r1, r9
 801139c:	4640      	mov	r0, r8
 801139e:	47d0      	blx	sl
 80113a0:	3001      	adds	r0, #1
 80113a2:	d09d      	beq.n	80112e0 <_printf_i+0x15c>
 80113a4:	3501      	adds	r5, #1
 80113a6:	68e3      	ldr	r3, [r4, #12]
 80113a8:	9903      	ldr	r1, [sp, #12]
 80113aa:	1a5b      	subs	r3, r3, r1
 80113ac:	42ab      	cmp	r3, r5
 80113ae:	dcf2      	bgt.n	8011396 <_printf_i+0x212>
 80113b0:	e7eb      	b.n	801138a <_printf_i+0x206>
 80113b2:	2500      	movs	r5, #0
 80113b4:	f104 0619 	add.w	r6, r4, #25
 80113b8:	e7f5      	b.n	80113a6 <_printf_i+0x222>
 80113ba:	bf00      	nop
 80113bc:	08011eef 	.word	0x08011eef
 80113c0:	08011f00 	.word	0x08011f00

080113c4 <memmove>:
 80113c4:	4288      	cmp	r0, r1
 80113c6:	b510      	push	{r4, lr}
 80113c8:	eb01 0402 	add.w	r4, r1, r2
 80113cc:	d902      	bls.n	80113d4 <memmove+0x10>
 80113ce:	4284      	cmp	r4, r0
 80113d0:	4623      	mov	r3, r4
 80113d2:	d807      	bhi.n	80113e4 <memmove+0x20>
 80113d4:	1e43      	subs	r3, r0, #1
 80113d6:	42a1      	cmp	r1, r4
 80113d8:	d008      	beq.n	80113ec <memmove+0x28>
 80113da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80113de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80113e2:	e7f8      	b.n	80113d6 <memmove+0x12>
 80113e4:	4402      	add	r2, r0
 80113e6:	4601      	mov	r1, r0
 80113e8:	428a      	cmp	r2, r1
 80113ea:	d100      	bne.n	80113ee <memmove+0x2a>
 80113ec:	bd10      	pop	{r4, pc}
 80113ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80113f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80113f6:	e7f7      	b.n	80113e8 <memmove+0x24>

080113f8 <_sbrk_r>:
 80113f8:	b538      	push	{r3, r4, r5, lr}
 80113fa:	4d06      	ldr	r5, [pc, #24]	@ (8011414 <_sbrk_r+0x1c>)
 80113fc:	2300      	movs	r3, #0
 80113fe:	4604      	mov	r4, r0
 8011400:	4608      	mov	r0, r1
 8011402:	602b      	str	r3, [r5, #0]
 8011404:	f7f2 fcac 	bl	8003d60 <_sbrk>
 8011408:	1c43      	adds	r3, r0, #1
 801140a:	d102      	bne.n	8011412 <_sbrk_r+0x1a>
 801140c:	682b      	ldr	r3, [r5, #0]
 801140e:	b103      	cbz	r3, 8011412 <_sbrk_r+0x1a>
 8011410:	6023      	str	r3, [r4, #0]
 8011412:	bd38      	pop	{r3, r4, r5, pc}
 8011414:	2400102c 	.word	0x2400102c

08011418 <memcpy>:
 8011418:	440a      	add	r2, r1
 801141a:	4291      	cmp	r1, r2
 801141c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8011420:	d100      	bne.n	8011424 <memcpy+0xc>
 8011422:	4770      	bx	lr
 8011424:	b510      	push	{r4, lr}
 8011426:	f811 4b01 	ldrb.w	r4, [r1], #1
 801142a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801142e:	4291      	cmp	r1, r2
 8011430:	d1f9      	bne.n	8011426 <memcpy+0xe>
 8011432:	bd10      	pop	{r4, pc}

08011434 <_realloc_r>:
 8011434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011438:	4680      	mov	r8, r0
 801143a:	4615      	mov	r5, r2
 801143c:	460c      	mov	r4, r1
 801143e:	b921      	cbnz	r1, 801144a <_realloc_r+0x16>
 8011440:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011444:	4611      	mov	r1, r2
 8011446:	f7ff bc4b 	b.w	8010ce0 <_malloc_r>
 801144a:	b92a      	cbnz	r2, 8011458 <_realloc_r+0x24>
 801144c:	f7ff fbdc 	bl	8010c08 <_free_r>
 8011450:	2400      	movs	r4, #0
 8011452:	4620      	mov	r0, r4
 8011454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011458:	f000 f81a 	bl	8011490 <_malloc_usable_size_r>
 801145c:	4285      	cmp	r5, r0
 801145e:	4606      	mov	r6, r0
 8011460:	d802      	bhi.n	8011468 <_realloc_r+0x34>
 8011462:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011466:	d8f4      	bhi.n	8011452 <_realloc_r+0x1e>
 8011468:	4629      	mov	r1, r5
 801146a:	4640      	mov	r0, r8
 801146c:	f7ff fc38 	bl	8010ce0 <_malloc_r>
 8011470:	4607      	mov	r7, r0
 8011472:	2800      	cmp	r0, #0
 8011474:	d0ec      	beq.n	8011450 <_realloc_r+0x1c>
 8011476:	42b5      	cmp	r5, r6
 8011478:	462a      	mov	r2, r5
 801147a:	4621      	mov	r1, r4
 801147c:	bf28      	it	cs
 801147e:	4632      	movcs	r2, r6
 8011480:	f7ff ffca 	bl	8011418 <memcpy>
 8011484:	4621      	mov	r1, r4
 8011486:	4640      	mov	r0, r8
 8011488:	f7ff fbbe 	bl	8010c08 <_free_r>
 801148c:	463c      	mov	r4, r7
 801148e:	e7e0      	b.n	8011452 <_realloc_r+0x1e>

08011490 <_malloc_usable_size_r>:
 8011490:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011494:	1f18      	subs	r0, r3, #4
 8011496:	2b00      	cmp	r3, #0
 8011498:	bfbc      	itt	lt
 801149a:	580b      	ldrlt	r3, [r1, r0]
 801149c:	18c0      	addlt	r0, r0, r3
 801149e:	4770      	bx	lr

080114a0 <_init>:
 80114a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114a2:	bf00      	nop
 80114a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80114a6:	bc08      	pop	{r3}
 80114a8:	469e      	mov	lr, r3
 80114aa:	4770      	bx	lr

080114ac <_fini>:
 80114ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114ae:	bf00      	nop
 80114b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80114b2:	bc08      	pop	{r3}
 80114b4:	469e      	mov	lr, r3
 80114b6:	4770      	bx	lr
