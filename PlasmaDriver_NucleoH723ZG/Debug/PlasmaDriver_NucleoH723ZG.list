
PlasmaDriver_NucleoH723ZG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013dcc  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ce8  080140a0  080140a0  000150a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014d88  08014d88  00015d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014d90  08014d90  00015d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08014d94  08014d94  00015d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000210  24000000  08014d98  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000210  08014fa8  00016210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000270  08015008  00016270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f38  240002d0  08015068  000162d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24001208  08015068  00017208  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000162d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024140  00000000  00000000  000162fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b25  00000000  00000000  0003a43e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b98  00000000  00000000  0003df68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001590  00000000  00000000  0003fb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003804d  00000000  00000000  00041090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000223d2  00000000  00000000  000790dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016e0af  00000000  00000000  0009b4af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0020955e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008870  00000000  00000000  002095a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00211e14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002d0 	.word	0x240002d0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08014084 	.word	0x08014084

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002d4 	.word	0x240002d4
 800030c:	08014084 	.word	0x08014084

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <writeConfigFlash>:
// Prototypes
void measureVoltagesTemperaturesADC3(void);

// Write configuration to flash
static uint32_t writeConfigFlash(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
	uint32_t faultySector;	//Contains error code for faulty sector
	uint32_t error_code = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]

	// Unlock Flash
	HAL_FLASH_Unlock();
 80006ba:	f009 fe33 	bl	800a324 <HAL_FLASH_Unlock>

	// Erase flash sector 7
	if (HAL_FLASHEx_Erase(&sFlashErase, &faultySector) == HAL_OK)
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	4619      	mov	r1, r3
 80006c2:	4815      	ldr	r0, [pc, #84]	@ (8000718 <writeConfigFlash+0x68>)
 80006c4:	f009 feca 	bl	800a45c <HAL_FLASHEx_Erase>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d119      	bne.n	8000702 <writeConfigFlash+0x52>
	{
		for (uint32_t offset = 0; offset < sizeof(sFlashConfig); offset += FLASH_WORD)
 80006ce:	2300      	movs	r3, #0
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	e012      	b.n	80006fa <writeConfigFlash+0x4a>
		{
			// Program one flash word (8*4 bytes)
			if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, FLASH_SECTOR7_START_ADDR + offset, ((uint32_t) &sFlashConfig) + offset) != HAL_OK)
 80006d4:	68ba      	ldr	r2, [r7, #8]
 80006d6:	4b11      	ldr	r3, [pc, #68]	@ (800071c <writeConfigFlash+0x6c>)
 80006d8:	4413      	add	r3, r2
 80006da:	4911      	ldr	r1, [pc, #68]	@ (8000720 <writeConfigFlash+0x70>)
 80006dc:	68ba      	ldr	r2, [r7, #8]
 80006de:	440a      	add	r2, r1
 80006e0:	4619      	mov	r1, r3
 80006e2:	2001      	movs	r0, #1
 80006e4:	f009 fdb0 	bl	800a248 <HAL_FLASH_Program>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d002      	beq.n	80006f4 <writeConfigFlash+0x44>
			{
				// Error during flash write
				error_code = HAL_FLASH_GetError();
 80006ee:	f009 fe53 	bl	800a398 <HAL_FLASH_GetError>
 80006f2:	60f8      	str	r0, [r7, #12]
		for (uint32_t offset = 0; offset < sizeof(sFlashConfig); offset += FLASH_WORD)
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	3320      	adds	r3, #32
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d0e9      	beq.n	80006d4 <writeConfigFlash+0x24>
 8000700:	e002      	b.n	8000708 <writeConfigFlash+0x58>
			}
		}
	}
	else
	{
		error_code = HAL_FLASH_GetError();
 8000702:	f009 fe49 	bl	800a398 <HAL_FLASH_GetError>
 8000706:	60f8      	str	r0, [r7, #12]
	}

	  // Lock Flash
	  HAL_FLASH_Lock();
 8000708:	f009 fe2e 	bl	800a368 <HAL_FLASH_Lock>

	  return error_code;
 800070c:	68fb      	ldr	r3, [r7, #12]
}
 800070e:	4618      	mov	r0, r3
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	24000024 	.word	0x24000024
 800071c:	080e0000 	.word	0x080e0000
 8000720:	24000a40 	.word	0x24000a40

08000724 <readConfigFlash>:

// Read configuration from flash
static void readConfigFlash(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
	// Read configuration from flash
	memcpy(&sFlashConfig, (void *) FLASH_SECTOR7_START_ADDR, sizeof(sFlashConfig));
 8000728:	4b04      	ldr	r3, [pc, #16]	@ (800073c <readConfigFlash+0x18>)
 800072a:	781a      	ldrb	r2, [r3, #0]
 800072c:	4b04      	ldr	r3, [pc, #16]	@ (8000740 <readConfigFlash+0x1c>)
 800072e:	701a      	strb	r2, [r3, #0]
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	080e0000 	.word	0x080e0000
 8000740:	24000a40 	.word	0x24000a40

08000744 <printCR>:

// Print CR
static void printCR(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart3, (uint8_t *) "\n\r", 2, 1000);
 8000748:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800074c:	2202      	movs	r2, #2
 800074e:	4903      	ldr	r1, [pc, #12]	@ (800075c <printCR+0x18>)
 8000750:	4803      	ldr	r0, [pc, #12]	@ (8000760 <printCR+0x1c>)
 8000752:	f00f fb06 	bl	800fd62 <HAL_UART_Transmit>
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	080140a0 	.word	0x080140a0
 8000760:	24000e30 	.word	0x24000e30

08000764 <printString>:

// Print string on UART3
static void printString(char *str)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) str, strlen(str), 1000);
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f7ff fe1f 	bl	80003b0 <strlen>
 8000772:	4603      	mov	r3, r0
 8000774:	b29a      	uxth	r2, r3
 8000776:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800077a:	6879      	ldr	r1, [r7, #4]
 800077c:	4803      	ldr	r0, [pc, #12]	@ (800078c <printString+0x28>)
 800077e:	f00f faf0 	bl	800fd62 <HAL_UART_Transmit>
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	24000e30 	.word	0x24000e30

08000790 <printConfigFlash>:

// Print configuration on UART3
static void printConfigFlash(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
	printString("\n\rCurrent configuration:");
 8000794:	480e      	ldr	r0, [pc, #56]	@ (80007d0 <printConfigFlash+0x40>)
 8000796:	f7ff ffe5 	bl	8000764 <printString>
	printString("\n\r  Mode = ");
 800079a:	480e      	ldr	r0, [pc, #56]	@ (80007d4 <printConfigFlash+0x44>)
 800079c:	f7ff ffe2 	bl	8000764 <printString>
	if (sFlashConfig.mode == TEST_MODE)
 80007a0:	4b0d      	ldr	r3, [pc, #52]	@ (80007d8 <printConfigFlash+0x48>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d103      	bne.n	80007b0 <printConfigFlash+0x20>
		printString("TEST");
 80007a8:	480c      	ldr	r0, [pc, #48]	@ (80007dc <printConfigFlash+0x4c>)
 80007aa:	f7ff ffdb 	bl	8000764 <printString>
 80007ae:	e00a      	b.n	80007c6 <printConfigFlash+0x36>
	else if (sFlashConfig.mode == RUN_MODE)
 80007b0:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <printConfigFlash+0x48>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d103      	bne.n	80007c0 <printConfigFlash+0x30>
		printString("RUN");
 80007b8:	4809      	ldr	r0, [pc, #36]	@ (80007e0 <printConfigFlash+0x50>)
 80007ba:	f7ff ffd3 	bl	8000764 <printString>
 80007be:	e002      	b.n	80007c6 <printConfigFlash+0x36>
	else
		printString("UNKNOWN");
 80007c0:	4808      	ldr	r0, [pc, #32]	@ (80007e4 <printConfigFlash+0x54>)
 80007c2:	f7ff ffcf 	bl	8000764 <printString>
	printCR();
 80007c6:	f7ff ffbd 	bl	8000744 <printCR>
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	080140a4 	.word	0x080140a4
 80007d4:	080140c0 	.word	0x080140c0
 80007d8:	24000a40 	.word	0x24000a40
 80007dc:	080140cc 	.word	0x080140cc
 80007e0:	080140d4 	.word	0x080140d4
 80007e4:	080140d8 	.word	0x080140d8

080007e8 <printNumber>:

// Print 16bit unsigned integer on UART3
static void printNumber(const char *text, uint16_t number, uint8_t CR)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b09e      	sub	sp, #120	@ 0x78
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	460b      	mov	r3, r1
 80007f2:	807b      	strh	r3, [r7, #2]
 80007f4:	4613      	mov	r3, r2
 80007f6:	707b      	strb	r3, [r7, #1]
	char s_output[100];
	char s_number[7];
	strcpy(s_output, text);
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	6879      	ldr	r1, [r7, #4]
 80007fe:	4618      	mov	r0, r3
 8000800:	f011 fc5d 	bl	80120be <strcpy>
	itoa(number, s_number, 10);
 8000804:	887b      	ldrh	r3, [r7, #2]
 8000806:	f107 010c 	add.w	r1, r7, #12
 800080a:	220a      	movs	r2, #10
 800080c:	4618      	mov	r0, r3
 800080e:	f010 fda5 	bl	801135c <itoa>
	strcat(s_output, s_number);
 8000812:	f107 020c 	add.w	r2, r7, #12
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4611      	mov	r1, r2
 800081c:	4618      	mov	r0, r3
 800081e:	f011 fbc8 	bl	8011fb2 <strcat>
	if (CR)
 8000822:	787b      	ldrb	r3, [r7, #1]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d00e      	beq.n	8000846 <printNumber+0x5e>
	{
		strcat(s_output, "\n\r");
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff fdbf 	bl	80003b0 <strlen>
 8000832:	4603      	mov	r3, r0
 8000834:	461a      	mov	r2, r3
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4413      	add	r3, r2
 800083c:	4a0b      	ldr	r2, [pc, #44]	@ (800086c <printNumber+0x84>)
 800083e:	8811      	ldrh	r1, [r2, #0]
 8000840:	7892      	ldrb	r2, [r2, #2]
 8000842:	8019      	strh	r1, [r3, #0]
 8000844:	709a      	strb	r2, [r3, #2]
	}
	HAL_UART_Transmit(&huart3, (uint8_t *) s_output, strlen(s_output), 1000);
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff fdb0 	bl	80003b0 <strlen>
 8000850:	4603      	mov	r3, r0
 8000852:	b29a      	uxth	r2, r3
 8000854:	f107 0114 	add.w	r1, r7, #20
 8000858:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800085c:	4804      	ldr	r0, [pc, #16]	@ (8000870 <printNumber+0x88>)
 800085e:	f00f fa80 	bl	800fd62 <HAL_UART_Transmit>
}
 8000862:	bf00      	nop
 8000864:	3778      	adds	r7, #120	@ 0x78
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	080140a0 	.word	0x080140a0
 8000870:	24000e30 	.word	0x24000e30

08000874 <printHALErrorStatus>:

// Print HAL error status on UART3
static void	printHALErrorStatus(HAL_StatusTypeDef HALresp, const char *text)
{
 8000874:	b5b0      	push	{r4, r5, r7, lr}
 8000876:	b09c      	sub	sp, #112	@ 0x70
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	6039      	str	r1, [r7, #0]
 800087e:	71fb      	strb	r3, [r7, #7]
	char s_output[100];

	switch (HALresp)
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	2b03      	cmp	r3, #3
 8000884:	d828      	bhi.n	80008d8 <printHALErrorStatus+0x64>
 8000886:	a201      	add	r2, pc, #4	@ (adr r2, 800088c <printHALErrorStatus+0x18>)
 8000888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800088c:	080008d9 	.word	0x080008d9
 8000890:	0800089d 	.word	0x0800089d
 8000894:	080008b1 	.word	0x080008b1
 8000898:	080008c5 	.word	0x080008c5
	{
		case HAL_ERROR:
			strcpy(s_output, "** HAL ERROR **: ");
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	4a15      	ldr	r2, [pc, #84]	@ (80008f8 <printHALErrorStatus+0x84>)
 80008a2:	461c      	mov	r4, r3
 80008a4:	4615      	mov	r5, r2
 80008a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008aa:	682b      	ldr	r3, [r5, #0]
 80008ac:	8023      	strh	r3, [r4, #0]
		break;
 80008ae:	e013      	b.n	80008d8 <printHALErrorStatus+0x64>

		case HAL_BUSY:
			strcpy(s_output, "** HAL BUSY **: ");
 80008b0:	f107 030c 	add.w	r3, r7, #12
 80008b4:	4a11      	ldr	r2, [pc, #68]	@ (80008fc <printHALErrorStatus+0x88>)
 80008b6:	461c      	mov	r4, r3
 80008b8:	4615      	mov	r5, r2
 80008ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008be:	682b      	ldr	r3, [r5, #0]
 80008c0:	7023      	strb	r3, [r4, #0]
		break;
 80008c2:	e009      	b.n	80008d8 <printHALErrorStatus+0x64>

		case HAL_TIMEOUT:
			strcpy(s_output, "** HAL TIMEOUT **: ");
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000900 <printHALErrorStatus+0x8c>)
 80008ca:	461c      	mov	r4, r3
 80008cc:	4615      	mov	r5, r2
 80008ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008d2:	682b      	ldr	r3, [r5, #0]
 80008d4:	6023      	str	r3, [r4, #0]
		break;
 80008d6:	bf00      	nop

		case HAL_OK:
		break;
	}
	strcat(s_output, text);
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	6839      	ldr	r1, [r7, #0]
 80008de:	4618      	mov	r0, r3
 80008e0:	f011 fb67 	bl	8011fb2 <strcat>
	printString(s_output);
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ff3b 	bl	8000764 <printString>
}
 80008ee:	bf00      	nop
 80008f0:	3770      	adds	r7, #112	@ 0x70
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bdb0      	pop	{r4, r5, r7, pc}
 80008f6:	bf00      	nop
 80008f8:	080140e0 	.word	0x080140e0
 80008fc:	080140f4 	.word	0x080140f4
 8000900:	08014108 	.word	0x08014108

08000904 <stopHbridge>:

void stopHbridge(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]

	//Stop TIMER 1 PWM & interrupts
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);  //This will stop channel PWM1
 8000918:	2100      	movs	r1, #0
 800091a:	480f      	ldr	r0, [pc, #60]	@ (8000958 <stopHbridge+0x54>)
 800091c:	f00d fe36 	bl	800e58c <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1); //This will stop channel PWM1N
 8000920:	2100      	movs	r1, #0
 8000922:	480d      	ldr	r0, [pc, #52]	@ (8000958 <stopHbridge+0x54>)
 8000924:	f00f f80e 	bl	800f944 <HAL_TIMEx_PWMN_Stop>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, TIM1_CH1N_Pin|TIM1_CH1_Pin, GPIO_PIN_SET);
 8000928:	2201      	movs	r2, #1
 800092a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800092e:	480b      	ldr	r0, [pc, #44]	@ (800095c <stopHbridge+0x58>)
 8000930:	f00a f828 	bl	800a984 <HAL_GPIO_WritePin>
	/*Configure GPIO pins : LED_GREEN_Pin LINE_DRIVER1_ENABLE_Pin LINE_DRIVER2_ENABLE_Pin LED_RED_Pin */
	GPIO_InitStruct.Pin = TIM1_CH1N_Pin|TIM1_CH1_Pin;
 8000934:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000938:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093a:	2301      	movs	r3, #1
 800093c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	4619      	mov	r1, r3
 800094a:	4804      	ldr	r0, [pc, #16]	@ (800095c <stopHbridge+0x58>)
 800094c:	f009 fe5a 	bl	800a604 <HAL_GPIO_Init>

}
 8000950:	bf00      	nop
 8000952:	3718      	adds	r7, #24
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	24000ec4 	.word	0x24000ec4
 800095c:	58021000 	.word	0x58021000

08000960 <printHbridgeData>:

// Print H-bridge data on UART3
static void printHbridgeData(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b09c      	sub	sp, #112	@ 0x70
 8000964:	af02      	add	r7, sp, #8
	char s_output[100];
	sprintf(s_output, "\n\rH-bridge 1=On 0=Off: %u, Frequency: %u (Hz), Dead time: %u (%%)\n\r", sHbridge.on, sHbridge.frequency, sHbridge.deadtime);
 8000966:	4b0f      	ldr	r3, [pc, #60]	@ (80009a4 <printHbridgeData+0x44>)
 8000968:	881b      	ldrh	r3, [r3, #0]
 800096a:	461a      	mov	r2, r3
 800096c:	4b0d      	ldr	r3, [pc, #52]	@ (80009a4 <printHbridgeData+0x44>)
 800096e:	885b      	ldrh	r3, [r3, #2]
 8000970:	4619      	mov	r1, r3
 8000972:	4b0c      	ldr	r3, [pc, #48]	@ (80009a4 <printHbridgeData+0x44>)
 8000974:	889b      	ldrh	r3, [r3, #4]
 8000976:	1d38      	adds	r0, r7, #4
 8000978:	9300      	str	r3, [sp, #0]
 800097a:	460b      	mov	r3, r1
 800097c:	490a      	ldr	r1, [pc, #40]	@ (80009a8 <printHbridgeData+0x48>)
 800097e:	f011 faad 	bl	8011edc <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t *) s_output, strlen(s_output), 1000);
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff fd13 	bl	80003b0 <strlen>
 800098a:	4603      	mov	r3, r0
 800098c:	b29a      	uxth	r2, r3
 800098e:	1d39      	adds	r1, r7, #4
 8000990:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000994:	4805      	ldr	r0, [pc, #20]	@ (80009ac <printHbridgeData+0x4c>)
 8000996:	f00f f9e4 	bl	800fd62 <HAL_UART_Transmit>
}
 800099a:	bf00      	nop
 800099c:	3768      	adds	r7, #104	@ 0x68
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	2400001c 	.word	0x2400001c
 80009a8:	0801411c 	.word	0x0801411c
 80009ac:	24000e30 	.word	0x24000e30

080009b0 <programHbridge>:



// Program TIMER 1 controlling the H-bridge
static void programHbridge()
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b0a6      	sub	sp, #152	@ 0x98
 80009b4:	af00      	add	r7, sp, #0
	uint8_t DT, DTG;
	float tDTS = 1E6/((float) TIMER_BASE_CLOCK);  //Minimum step in usec
 80009b6:	4b90      	ldr	r3, [pc, #576]	@ (8000bf8 <programHbridge+0x248>)
 80009b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	// TIMER 1 has already been initialized using HAL.
	// Program the H-bridge TIMER 1 - Clock TIMER_BASE_CLOCK

	// Calculate the period and duty cycle based on the frequency requested.
	timARR_f = ((float) TIMER_BASE_CLOCK) / ((float) sHbridge.frequency);
 80009bc:	4b8f      	ldr	r3, [pc, #572]	@ (8000bfc <programHbridge+0x24c>)
 80009be:	885b      	ldrh	r3, [r3, #2]
 80009c0:	ee07 3a90 	vmov	s15, r3
 80009c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009c8:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 8000c00 <programHbridge+0x250>
 80009cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009d0:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
	timARR = (uint32_t) (timARR_f + 0.5);							// Set period counter
 80009d4:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80009d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009dc:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 80009e0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80009e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80009e8:	ee17 3a90 	vmov	r3, s15
 80009ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	timCCR1 = timARR / 2;  											// 50% duty cycle
 80009f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80009f4:	085b      	lsrs	r3, r3, #1
 80009f6:	67fb      	str	r3, [r7, #124]	@ 0x7c

	// Print out the set frequency
	if (debug == 1)
 80009f8:	4b82      	ldr	r3, [pc, #520]	@ (8000c04 <programHbridge+0x254>)
 80009fa:	881b      	ldrh	r3, [r3, #0]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d105      	bne.n	8000a0c <programHbridge+0x5c>
	{
		value_int = ((uint32_t) TIMER_BASE_CLOCK) / timARR;
 8000a00:	4a81      	ldr	r2, [pc, #516]	@ (8000c08 <programHbridge+0x258>)
 8000a02:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a0a:	67bb      	str	r3, [r7, #120]	@ 0x78
	//  DTG[7:5] = 10x => DT = (64 + DTG[5:0]) x tDTG with tDTG =2xtDTS.	 max (64 + 63)*2*tDTS  	: 3.7236 usec - 7.3890 usec
	//  DTG[7:5] = 110 => DT = (32 + DTG[4:0]) x tDTG with tDTG =8xtDTS.     max (32 + 31)*8*tDTS   : 7.4472 usec - 14.662 usec
	//  DTG[7:5] = 111 => DT = (32 + DTG[4:0]) x tDTG with tDTG = 16 x tDTS. max (32 + 31)*16*tDTS 	: 14.895 usec - 29.324 usec

	// Calculate dead time in usec
	req_dtime_us = (((float) sHbridge.deadtime))*(10000./(float) sHbridge.frequency);
 8000a0c:	4b7b      	ldr	r3, [pc, #492]	@ (8000bfc <programHbridge+0x24c>)
 8000a0e:	889b      	ldrh	r3, [r3, #4]
 8000a10:	ee07 3a90 	vmov	s15, r3
 8000a14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a18:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000a1c:	4b77      	ldr	r3, [pc, #476]	@ (8000bfc <programHbridge+0x24c>)
 8000a1e:	885b      	ldrh	r3, [r3, #2]
 8000a20:	ee07 3a90 	vmov	s15, r3
 8000a24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a28:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000a2c:	ed9f 4b70 	vldr	d4, [pc, #448]	@ 8000bf0 <programHbridge+0x240>
 8000a30:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000a34:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000a38:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a3c:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
		printString(s_output);
	}
*/

	// Minimum allowed dead time is 1 usec.
	if (req_dtime_us < 1.0)
 8000a40:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8000a44:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000a48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a50:	d503      	bpl.n	8000a5a <programHbridge+0xaa>
		req_dtime_us = 1.0;
 8000a52:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000a56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

	if (req_dtime_us <= 127*tDTS) //3.6946
 8000a5a:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000a5e:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 8000c0c <programHbridge+0x25c>
 8000a62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a66:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8000a6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a72:	d81e      	bhi.n	8000ab2 <programHbridge+0x102>
	{
		DT = (uint8_t) (req_dtime_us/tDTS + 0.5);
 8000a74:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8000a78:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000a7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a80:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a84:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000a88:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000a8c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a90:	edc7 7a01 	vstr	s15, [r7, #4]
 8000a94:	793b      	ldrb	r3, [r7, #4]
 8000a96:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		if (DT > 127)
 8000a9a:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	da02      	bge.n	8000aa8 <programHbridge+0xf8>
			DT = 127;
 8000aa2:	237f      	movs	r3, #127	@ 0x7f
 8000aa4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		DTG = DT;
 8000aa8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000aac:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000ab0:	e0bb      	b.n	8000c2a <programHbridge+0x27a>
	}
	else if (req_dtime_us <= 127*2*tDTS) //7.3890
 8000ab2:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000ab6:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8000c10 <programHbridge+0x260>
 8000aba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000abe:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8000ac2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aca:	d825      	bhi.n	8000b18 <programHbridge+0x168>
	{
		DT = (uint8_t) ((req_dtime_us/(2*tDTS)) - 64 + 0.5);
 8000acc:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000ad0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000ad4:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8000ad8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000adc:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8000c14 <programHbridge+0x264>
 8000ae0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000ae4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ae8:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000aec:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000af0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000af4:	edc7 7a01 	vstr	s15, [r7, #4]
 8000af8:	793b      	ldrb	r3, [r7, #4]
 8000afa:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		if (DT > 63)
 8000afe:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000b02:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b04:	d902      	bls.n	8000b0c <programHbridge+0x15c>
			DT = 63;
 8000b06:	233f      	movs	r3, #63	@ 0x3f
 8000b08:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		DTG = DT + 0x80;
 8000b0c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000b10:	3b80      	subs	r3, #128	@ 0x80
 8000b12:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000b16:	e088      	b.n	8000c2a <programHbridge+0x27a>
	}
	else if (req_dtime_us <= 63*8*tDTS) //14.662
 8000b18:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000b1c:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8000c18 <programHbridge+0x268>
 8000b20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b24:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8000b28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b30:	d827      	bhi.n	8000b82 <programHbridge+0x1d2>
	{
		DT = (uint8_t) ((req_dtime_us/(8*tDTS)) - 32 + 0.5);
 8000b32:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000b36:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8000b3a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b3e:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8000b42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b46:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8000c1c <programHbridge+0x26c>
 8000b4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000b4e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b52:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000b56:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b5a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b5e:	edc7 7a01 	vstr	s15, [r7, #4]
 8000b62:	793b      	ldrb	r3, [r7, #4]
 8000b64:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		if (DT > 31)
 8000b68:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000b6c:	2b1f      	cmp	r3, #31
 8000b6e:	d902      	bls.n	8000b76 <programHbridge+0x1c6>
			DT = 31;
 8000b70:	231f      	movs	r3, #31
 8000b72:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		DTG = DT + 0xC0;
 8000b76:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000b7a:	3b40      	subs	r3, #64	@ 0x40
 8000b7c:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000b80:	e053      	b.n	8000c2a <programHbridge+0x27a>
	}
	else if (req_dtime_us <= 63*16*tDTS) //29.324
 8000b82:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000b86:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8000c20 <programHbridge+0x270>
 8000b8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b8e:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8000b92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b9a:	d843      	bhi.n	8000c24 <programHbridge+0x274>
	{
		DT = (uint8_t) ((req_dtime_us/(16*tDTS)) - 32 + 0.5);
 8000b9c:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000ba0:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8000ba4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ba8:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8000bac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bb0:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8000c1c <programHbridge+0x26c>
 8000bb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000bb8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bbc:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000bc0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000bc4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000bc8:	edc7 7a01 	vstr	s15, [r7, #4]
 8000bcc:	793b      	ldrb	r3, [r7, #4]
 8000bce:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		if (DT > 31)
 8000bd2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000bd6:	2b1f      	cmp	r3, #31
 8000bd8:	d902      	bls.n	8000be0 <programHbridge+0x230>
			DT = 31;
 8000bda:	231f      	movs	r3, #31
 8000bdc:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		DTG = DT + 0xE0;
 8000be0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000be4:	3b20      	subs	r3, #32
 8000be6:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000bea:	e01e      	b.n	8000c2a <programHbridge+0x27a>
 8000bec:	f3af 8000 	nop.w
 8000bf0:	00000000 	.word	0x00000000
 8000bf4:	40c38800 	.word	0x40c38800
 8000bf8:	3cee500f 	.word	0x3cee500f
 8000bfc:	2400001c 	.word	0x2400001c
 8000c00:	4c032156 	.word	0x4c032156
 8000c04:	24000000 	.word	0x24000000
 8000c08:	020c8558 	.word	0x020c8558
 8000c0c:	42fe0000 	.word	0x42fe0000
 8000c10:	437e0000 	.word	0x437e0000
 8000c14:	42800000 	.word	0x42800000
 8000c18:	43fc0000 	.word	0x43fc0000
 8000c1c:	42000000 	.word	0x42000000
 8000c20:	447c0000 	.word	0x447c0000
	}
	else
		DTG = 255;
 8000c24:	23ff      	movs	r3, #255	@ 0xff
 8000c26:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96

	uint32_t temp = TIM1->BDTR & 0xFFFFFF00;		//Mask out DTG
 8000c2a:	4b4e      	ldr	r3, [pc, #312]	@ (8000d64 <programHbridge+0x3b4>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c2e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000c32:	677b      	str	r3, [r7, #116]	@ 0x74
	timBDTR = temp | DTG;							//Add new DTG
 8000c34:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000c38:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	673b      	str	r3, [r7, #112]	@ 0x70

	//Change timer1 settings
	htim1.Init.Period = timARR;   // Updating internal structure for timer
 8000c3e:	4a4a      	ldr	r2, [pc, #296]	@ (8000d68 <programHbridge+0x3b8>)
 8000c40:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000c44:	60d3      	str	r3, [r2, #12]
	TIM1->ARR = timARR;			  // Update period
 8000c46:	4a47      	ldr	r2, [pc, #284]	@ (8000d64 <programHbridge+0x3b4>)
 8000c48:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000c4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
	TIM1->CCR1 = timCCR1;		  // Update duty cycle
 8000c4e:	4a45      	ldr	r2, [pc, #276]	@ (8000d64 <programHbridge+0x3b4>)
 8000c50:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000c52:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM1->BDTR = timBDTR;	      // Update dead time
 8000c54:	4a43      	ldr	r2, [pc, #268]	@ (8000d64 <programHbridge+0x3b4>)
 8000c56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000c58:	6453      	str	r3, [r2, #68]	@ 0x44

	if (debug == 1) {
 8000c5a:	4b44      	ldr	r3, [pc, #272]	@ (8000d6c <programHbridge+0x3bc>)
 8000c5c:	881b      	ldrh	r3, [r3, #0]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d160      	bne.n	8000d24 <programHbridge+0x374>
		//sprintf(s_output, "ARR %lu CCR1 %lu BDTR %lu", timARR, timCCR1, timBDTR & 0xFF);
		//printString(s_output);

		float calcDT = 0;
 8000c62:	f04f 0300 	mov.w	r3, #0
 8000c66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		//  DTG[7:5] = 0xx => DT = DTG[7:0] x tDTG with tDTG = tDTS.			 max 127*tDTS   		: 0.0000 usec - 3.6946 usec
		if ((DTG & 0x80) == 0) {
 8000c6a:	f997 3096 	ldrsb.w	r3, [r7, #150]	@ 0x96
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	db0b      	blt.n	8000c8a <programHbridge+0x2da>
			calcDT = DTG*tDTS;
 8000c72:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000c76:	ee07 3a90 	vmov	s15, r3
 8000c7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c7e:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c86:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
		}
		//  DTG[7:5] = 10x => DT = (64 + DTG[5:0]) x tDTG with tDTG =2xtDTS.	 max (64 + 63)*2*tDTS  	: 3.7236 usec - 7.3890 usec
		if ((DTG & 0xC0) == 0x80) {
 8000c8a:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000c8e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000c92:	2b80      	cmp	r3, #128	@ 0x80
 8000c94:	d10f      	bne.n	8000cb6 <programHbridge+0x306>
			calcDT = (64 + (DTG & 0x3F))*2*tDTS;
 8000c96:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000c9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000c9e:	3340      	adds	r3, #64	@ 0x40
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	ee07 3a90 	vmov	s15, r3
 8000ca6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000caa:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cb2:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
		}
		//  DTG[7:5] = 110 => DT = (32 + DTG[4:0]) x tDTG with tDTG =8xtDTS.     max (32 + 31)*8*tDTS   : 7.4472 usec - 14.662 usec
		if ((DTG & 0xE0) == 0xC0) {
 8000cb6:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000cba:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000cbe:	2bc0      	cmp	r3, #192	@ 0xc0
 8000cc0:	d10f      	bne.n	8000ce2 <programHbridge+0x332>
			calcDT = (32 + (DTG & 0x1F))*8*tDTS;
 8000cc2:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000cc6:	f003 031f 	and.w	r3, r3, #31
 8000cca:	3320      	adds	r3, #32
 8000ccc:	00db      	lsls	r3, r3, #3
 8000cce:	ee07 3a90 	vmov	s15, r3
 8000cd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cd6:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cde:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
		}
		//  DTG[7:5] = 111 => DT = (32 + DTG[4:0]) x tDTG with tDTG = 16 x tDTS. max (32 + 31)*16*tDTS 	: 14.895 usec - 29.324 usec
		if ((DTG & 0xE0) == 0xE0) {
 8000ce2:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000ce6:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000cea:	2be0      	cmp	r3, #224	@ 0xe0
 8000cec:	d10f      	bne.n	8000d0e <programHbridge+0x35e>
			calcDT = (32 + (DTG & 0x1F))*16*tDTS;
 8000cee:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000cf2:	f003 031f 	and.w	r3, r3, #31
 8000cf6:	3320      	adds	r3, #32
 8000cf8:	011b      	lsls	r3, r3, #4
 8000cfa:	ee07 3a90 	vmov	s15, r3
 8000cfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d02:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d0a:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
		}
		value_int = (uint32_t) 1000*calcDT;
 8000d0e:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8000d12:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000d70 <programHbridge+0x3c0>
 8000d16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d1e:	ee17 3a90 	vmov	r3, s15
 8000d22:	67bb      	str	r3, [r7, #120]	@ 0x78
		//sprintf(s_output, "\n\rSet dead time: %lu (ns)\n\r", value_int);
		//printString(s_output);
	}

	//Start driving the H-bridge
	if (sHbridge.on && (TIM_CHANNEL_STATE_GET(&htim1, TIM_CHANNEL_1) == HAL_TIM_CHANNEL_STATE_READY))
 8000d24:	4b13      	ldr	r3, [pc, #76]	@ (8000d74 <programHbridge+0x3c4>)
 8000d26:	881b      	ldrh	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d010      	beq.n	8000d4e <programHbridge+0x39e>
 8000d2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d68 <programHbridge+0x3b8>)
 8000d2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d10a      	bne.n	8000d4e <programHbridge+0x39e>
	{
		HAL_TIM_MspPostInit(&htim1);	//Setup GPIO for timer alternate function
 8000d38:	480b      	ldr	r0, [pc, #44]	@ (8000d68 <programHbridge+0x3b8>)
 8000d3a:	f003 f907 	bl	8003f4c <HAL_TIM_MspPostInit>
		//Start TIMER 1 PWM & interrupts
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  //This will start channel PWM1
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4809      	ldr	r0, [pc, #36]	@ (8000d68 <programHbridge+0x3b8>)
 8000d42:	f00d fb07 	bl	800e354 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1); //This will start channel PWM1N
 8000d46:	2100      	movs	r1, #0
 8000d48:	4807      	ldr	r0, [pc, #28]	@ (8000d68 <programHbridge+0x3b8>)
 8000d4a:	f00e fd2b 	bl	800f7a4 <HAL_TIMEx_PWMN_Start>
	}

	//Stop driving the H-bridge
	if (!sHbridge.on)
 8000d4e:	4b09      	ldr	r3, [pc, #36]	@ (8000d74 <programHbridge+0x3c4>)
 8000d50:	881b      	ldrh	r3, [r3, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d101      	bne.n	8000d5a <programHbridge+0x3aa>
	{
		stopHbridge();
 8000d56:	f7ff fdd5 	bl	8000904 <stopHbridge>
	}

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);

}
 8000d5a:	bf00      	nop
 8000d5c:	3798      	adds	r7, #152	@ 0x98
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40010000 	.word	0x40010000
 8000d68:	24000ec4 	.word	0x24000ec4
 8000d6c:	24000000 	.word	0x24000000
 8000d70:	447a0000 	.word	0x447a0000
 8000d74:	2400001c 	.word	0x2400001c

08000d78 <convertADC12data>:
#define ADC1_VplaL1			4	//Plasma voltage L1
#define ADC2_VplaL2			5	//Plasma voltage L2

//Convert ADC1 & ADC2 data to voltages and current
float convertADC12data(uint32_t item, char **text)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
	float result = 0;
 8000d82:	f04f 0300 	mov.w	r3, #0
 8000d86:	60fb      	str	r3, [r7, #12]
* 3.3           *   (ADCData/65536.0)       *    1000
*   ^                   ^       ^                  ^
*   |                   |       |                  |
 * full scale V      Raw Data   Max ADC Value    Convert to mV
 */
	switch (item % (2*ADC12_NO_CHANNELS)) {
 8000d88:	6879      	ldr	r1, [r7, #4]
 8000d8a:	4b99      	ldr	r3, [pc, #612]	@ (8000ff0 <convertADC12data+0x278>)
 8000d8c:	fba3 2301 	umull	r2, r3, r3, r1
 8000d90:	089a      	lsrs	r2, r3, #2
 8000d92:	4613      	mov	r3, r2
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	4413      	add	r3, r2
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	1aca      	subs	r2, r1, r3
 8000d9c:	2a05      	cmp	r2, #5
 8000d9e:	f200 80f4 	bhi.w	8000f8a <convertADC12data+0x212>
 8000da2:	a301      	add	r3, pc, #4	@ (adr r3, 8000da8 <convertADC12data+0x30>)
 8000da4:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8000da8:	08000dc1 	.word	0x08000dc1
 8000dac:	08000de5 	.word	0x08000de5
 8000db0:	08000e51 	.word	0x08000e51
 8000db4:	08000e8b 	.word	0x08000e8b
 8000db8:	08000ec5 	.word	0x08000ec5
 8000dbc:	08000f2f 	.word	0x08000f2f
		case ADC1_TIM1_CH1:
			result = sADC.adc12_data[item];
 8000dc0:	4a8c      	ldr	r2, [pc, #560]	@ (8000ff4 <convertADC12data+0x27c>)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dc8:	ee07 3a90 	vmov	s15, r3
 8000dcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dd0:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	f000 80cc 	beq.w	8000f74 <convertADC12data+0x1fc>
				*text ="ADC1_TIM1_CH1";
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	4a86      	ldr	r2, [pc, #536]	@ (8000ff8 <convertADC12data+0x280>)
 8000de0:	601a      	str	r2, [r3, #0]
			break;
 8000de2:	e0c7      	b.n	8000f74 <convertADC12data+0x1fc>

		case ADC2_Is:
			V = 3.3*(((float) sADC.adc12_data[item])/65536.0)*1000;
 8000de4:	4a83      	ldr	r2, [pc, #524]	@ (8000ff4 <convertADC12data+0x27c>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dec:	ee07 3a90 	vmov	s15, r3
 8000df0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000df4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000df8:	ed9f 5b69 	vldr	d5, [pc, #420]	@ 8000fa0 <convertADC12data+0x228>
 8000dfc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e00:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8000fa8 <convertADC12data+0x230>
 8000e04:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e08:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8000fb0 <convertADC12data+0x238>
 8000e0c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e10:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e14:	edc7 7a02 	vstr	s15, [r7, #8]
			result =  2000*(V - 1.585714)/3.594286; //V;
 8000e18:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e1c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e20:	ed9f 6b65 	vldr	d6, [pc, #404]	@ 8000fb8 <convertADC12data+0x240>
 8000e24:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e28:	ed9f 6b65 	vldr	d6, [pc, #404]	@ 8000fc0 <convertADC12data+0x248>
 8000e2c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000e30:	ed9f 5b65 	vldr	d5, [pc, #404]	@ 8000fc8 <convertADC12data+0x250>
 8000e34:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e38:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e3c:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	f000 8098 	beq.w	8000f78 <convertADC12data+0x200>
				*text ="ADC2_Is(mA)";
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	4a6c      	ldr	r2, [pc, #432]	@ (8000ffc <convertADC12data+0x284>)
 8000e4c:	601a      	str	r2, [r3, #0]
			break;
 8000e4e:	e093      	b.n	8000f78 <convertADC12data+0x200>

		case ADC1_VbriS1:
			result =  1000*((12.0+2000.0)/12.0)*3.3*(((float) sADC.adc12_data[item])/65536.0); // 3.3*(((float) sADC.adc12_data[item])/65536.0)*1000;
 8000e50:	4a68      	ldr	r2, [pc, #416]	@ (8000ff4 <convertADC12data+0x27c>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e58:	ee07 3a90 	vmov	s15, r3
 8000e5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e60:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000e64:	ed9f 5b4e 	vldr	d5, [pc, #312]	@ 8000fa0 <convertADC12data+0x228>
 8000e68:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e6c:	ed9f 6b58 	vldr	d6, [pc, #352]	@ 8000fd0 <convertADC12data+0x258>
 8000e70:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e74:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e78:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d07c      	beq.n	8000f7c <convertADC12data+0x204>
				*text ="ADC1_VbriS1(mV)";
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	4a5e      	ldr	r2, [pc, #376]	@ (8001000 <convertADC12data+0x288>)
 8000e86:	601a      	str	r2, [r3, #0]
			break;
 8000e88:	e078      	b.n	8000f7c <convertADC12data+0x204>

		case ADC2_VbriS2:
			result =  1000*((12.0+2000.0)/12.0)*3.3*(((float) sADC.adc12_data[item])/65536.0); //3.3*(((float) sADC.adc12_data[item])/65536.0) * 1000;
 8000e8a:	4a5a      	ldr	r2, [pc, #360]	@ (8000ff4 <convertADC12data+0x27c>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e92:	ee07 3a90 	vmov	s15, r3
 8000e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e9a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000e9e:	ed9f 5b40 	vldr	d5, [pc, #256]	@ 8000fa0 <convertADC12data+0x228>
 8000ea2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ea6:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 8000fd0 <convertADC12data+0x258>
 8000eaa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000eae:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000eb2:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d061      	beq.n	8000f80 <convertADC12data+0x208>
				*text ="ADC2_VbriS2(mV)";
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	4a51      	ldr	r2, [pc, #324]	@ (8001004 <convertADC12data+0x28c>)
 8000ec0:	601a      	str	r2, [r3, #0]
			break;
 8000ec2:	e05d      	b.n	8000f80 <convertADC12data+0x208>

		case ADC1_VplaL1:
			V = 3.3*(((float) sADC.adc12_data[item])/65536.0) * 1000;
 8000ec4:	4a4b      	ldr	r2, [pc, #300]	@ (8000ff4 <convertADC12data+0x27c>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ecc:	ee07 3a90 	vmov	s15, r3
 8000ed0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ed4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000ed8:	ed9f 5b31 	vldr	d5, [pc, #196]	@ 8000fa0 <convertADC12data+0x228>
 8000edc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ee0:	ed9f 6b31 	vldr	d6, [pc, #196]	@ 8000fa8 <convertADC12data+0x230>
 8000ee4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ee8:	ed9f 6b31 	vldr	d6, [pc, #196]	@ 8000fb0 <convertADC12data+0x238>
 8000eec:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ef0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ef4:	edc7 7a02 	vstr	s15, [r7, #8]
			result =  1E6*(V-1.648348)/0.999; //V;//
 8000ef8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000efc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f00:	ed9f 6b35 	vldr	d6, [pc, #212]	@ 8000fd8 <convertADC12data+0x260>
 8000f04:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000f08:	ed9f 6b35 	vldr	d6, [pc, #212]	@ 8000fe0 <convertADC12data+0x268>
 8000f0c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000f10:	ed9f 5b35 	vldr	d5, [pc, #212]	@ 8000fe8 <convertADC12data+0x270>
 8000f14:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f18:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f1c:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d02e      	beq.n	8000f84 <convertADC12data+0x20c>
				*text ="ADC1_VplaL1(mV)";
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	4a37      	ldr	r2, [pc, #220]	@ (8001008 <convertADC12data+0x290>)
 8000f2a:	601a      	str	r2, [r3, #0]
			break;
 8000f2c:	e02a      	b.n	8000f84 <convertADC12data+0x20c>

		case ADC2_VplaL2:
			//V is the directly measured voltage from the ADC in mV
			V = 3.3*(((float) sADC.adc12_data[item])/65536.0) * 1000;
 8000f2e:	4a31      	ldr	r2, [pc, #196]	@ (8000ff4 <convertADC12data+0x27c>)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f36:	ee07 3a90 	vmov	s15, r3
 8000f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f3e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000f42:	ed9f 5b17 	vldr	d5, [pc, #92]	@ 8000fa0 <convertADC12data+0x228>
 8000f46:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f4a:	ed9f 6b17 	vldr	d6, [pc, #92]	@ 8000fa8 <convertADC12data+0x230>
 8000f4e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f52:	ed9f 6b17 	vldr	d6, [pc, #92]	@ 8000fb0 <convertADC12data+0x238>
 8000f56:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f5a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f5e:	edc7 7a02 	vstr	s15, [r7, #8]
			//result is the True voltage at L2 (corrected for voltage divider)
			result =  V;//1E6*(V-1.648348)/0.999;
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	60fb      	str	r3, [r7, #12]
			if (text)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d00d      	beq.n	8000f88 <convertADC12data+0x210>
				*text ="ADC2_VplaL2(mV)";
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	4a27      	ldr	r2, [pc, #156]	@ (800100c <convertADC12data+0x294>)
 8000f70:	601a      	str	r2, [r3, #0]
			break;
 8000f72:	e009      	b.n	8000f88 <convertADC12data+0x210>
			break;
 8000f74:	bf00      	nop
 8000f76:	e008      	b.n	8000f8a <convertADC12data+0x212>
			break;
 8000f78:	bf00      	nop
 8000f7a:	e006      	b.n	8000f8a <convertADC12data+0x212>
			break;
 8000f7c:	bf00      	nop
 8000f7e:	e004      	b.n	8000f8a <convertADC12data+0x212>
			break;
 8000f80:	bf00      	nop
 8000f82:	e002      	b.n	8000f8a <convertADC12data+0x212>
			break;
 8000f84:	bf00      	nop
 8000f86:	e000      	b.n	8000f8a <convertADC12data+0x212>
			break;
 8000f88:	bf00      	nop
	}

	return(result);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	ee07 3a90 	vmov	s15, r3
}
 8000f90:	eeb0 0a67 	vmov.f32	s0, s15
 8000f94:	3714      	adds	r7, #20
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	00000000 	.word	0x00000000
 8000fa4:	40f00000 	.word	0x40f00000
 8000fa8:	66666666 	.word	0x66666666
 8000fac:	400a6666 	.word	0x400a6666
 8000fb0:	00000000 	.word	0x00000000
 8000fb4:	408f4000 	.word	0x408f4000
 8000fb8:	a4acf313 	.word	0xa4acf313
 8000fbc:	3ff95f15 	.word	0x3ff95f15
 8000fc0:	00000000 	.word	0x00000000
 8000fc4:	409f4000 	.word	0x409f4000
 8000fc8:	04b3c3e7 	.word	0x04b3c3e7
 8000fcc:	400cc119 	.word	0x400cc119
 8000fd0:	ffffffff 	.word	0xffffffff
 8000fd4:	4120e2a7 	.word	0x4120e2a7
 8000fd8:	2706d506 	.word	0x2706d506
 8000fdc:	3ffa5fa2 	.word	0x3ffa5fa2
 8000fe0:	00000000 	.word	0x00000000
 8000fe4:	412e8480 	.word	0x412e8480
 8000fe8:	d916872b 	.word	0xd916872b
 8000fec:	3feff7ce 	.word	0x3feff7ce
 8000ff0:	aaaaaaab 	.word	0xaaaaaaab
 8000ff4:	2400032c 	.word	0x2400032c
 8000ff8:	08014160 	.word	0x08014160
 8000ffc:	08014170 	.word	0x08014170
 8001000:	0801417c 	.word	0x0801417c
 8001004:	0801418c 	.word	0x0801418c
 8001008:	0801419c 	.word	0x0801419c
 800100c:	080141ac 	.word	0x080141ac

08001010 <printADC12data>:

//Print measured ADC1 and ADC2 data on UART3
void printADC12data(void)
{
 8001010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001012:	b0f7      	sub	sp, #476	@ 0x1dc
 8001014:	af10      	add	r7, sp, #64	@ 0x40
	char *p_text[2*ADC12_NO_CHANNELS];
	float result[2*ADC12_NO_CHANNELS];

	if (debug == 1)
 8001016:	4ba0      	ldr	r3, [pc, #640]	@ (8001298 <printADC12data+0x288>)
 8001018:	881b      	ldrh	r3, [r3, #0]
 800101a:	2b01      	cmp	r3, #1
 800101c:	f040 8136 	bne.w	800128c <printADC12data+0x27c>
	{
		printCR();
 8001020:	f7ff fb90 	bl	8000744 <printCR>
		printNumber("No data: ", sADC.nADC12Read, 1);
 8001024:	4b9d      	ldr	r3, [pc, #628]	@ (800129c <printADC12data+0x28c>)
 8001026:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
 800102a:	b29b      	uxth	r3, r3
 800102c:	2201      	movs	r2, #1
 800102e:	4619      	mov	r1, r3
 8001030:	489b      	ldr	r0, [pc, #620]	@ (80012a0 <printADC12data+0x290>)
 8001032:	f7ff fbd9 	bl	80007e8 <printNumber>
		for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i++)
 8001036:	2300      	movs	r3, #0
 8001038:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 800103c:	e119      	b.n	8001272 <printADC12data+0x262>
		{
			int ii = i % (2*ADC12_NO_CHANNELS);
 800103e:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001042:	4b98      	ldr	r3, [pc, #608]	@ (80012a4 <printADC12data+0x294>)
 8001044:	fb83 3102 	smull	r3, r1, r3, r2
 8001048:	17d3      	asrs	r3, r2, #31
 800104a:	1ac9      	subs	r1, r1, r3
 800104c:	460b      	mov	r3, r1
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	440b      	add	r3, r1
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
			result[ii] = convertADC12data(i, &p_text[ii]);
 800105a:	f8d7 0194 	ldr.w	r0, [r7, #404]	@ 0x194
 800105e:	f507 72bc 	add.w	r2, r7, #376	@ 0x178
 8001062:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	4413      	add	r3, r2
 800106a:	4619      	mov	r1, r3
 800106c:	f7ff fe84 	bl	8000d78 <convertADC12data>
 8001070:	eef0 7a40 	vmov.f32	s15, s0
 8001074:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800107e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001082:	4413      	add	r3, r2
 8001084:	3b38      	subs	r3, #56	@ 0x38
 8001086:	edc3 7a00 	vstr	s15, [r3]
			char text[300];
			if (ii == 5)
 800108a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800108e:	2b05      	cmp	r3, #5
 8001090:	f040 80ea 	bne.w	8001268 <printADC12data+0x258>
			{
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001094:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001098:	4a82      	ldr	r2, [pc, #520]	@ (80012a4 <printADC12data+0x294>)
 800109a:	fb82 1203 	smull	r1, r2, r2, r3
 800109e:	17db      	asrs	r3, r3, #31
 80010a0:	eba2 0c03 	sub.w	ip, r2, r3
						p_text[ii-5],                     sADC.adc12_data[i-5],
 80010a4:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80010a8:	3b05      	subs	r3, #5
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80010b0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80010b4:	4413      	add	r3, r2
 80010b6:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80010ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
						p_text[ii-5],                     sADC.adc12_data[i-5],
 80010bc:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80010c0:	3b05      	subs	r3, #5
 80010c2:	4a76      	ldr	r2, [pc, #472]	@ (800129c <printADC12data+0x28c>)
 80010c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80010c8:	62bb      	str	r3, [r7, #40]	@ 0x28
						p_text[ii-4], (int) result[ii-4], sADC.adc12_data[i-4],
 80010ca:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80010ce:	3b04      	subs	r3, #4
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 80010d6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80010da:	18d3      	adds	r3, r2, r3
 80010dc:	f853 5c20 	ldr.w	r5, [r3, #-32]
						p_text[ii-4], (int) result[ii-4], sADC.adc12_data[i-4],
 80010e0:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80010e4:	3b04      	subs	r3, #4
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 80010ec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80010f0:	18d3      	adds	r3, r2, r3
 80010f2:	3b38      	subs	r3, #56	@ 0x38
 80010f4:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80010f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010fc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
						p_text[ii-4], (int) result[ii-4], sADC.adc12_data[i-4],
 8001100:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001104:	3b04      	subs	r3, #4
 8001106:	4a65      	ldr	r2, [pc, #404]	@ (800129c <printADC12data+0x28c>)
 8001108:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 800110c:	623b      	str	r3, [r7, #32]
						p_text[ii-3], (int) result[ii-3], sADC.adc12_data[i-3],
 800110e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001112:	3b03      	subs	r3, #3
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 800111a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800111e:	18d3      	adds	r3, r2, r3
 8001120:	f853 6c20 	ldr.w	r6, [r3, #-32]
						p_text[ii-3], (int) result[ii-3], sADC.adc12_data[i-3],
 8001124:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001128:	3b03      	subs	r3, #3
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 8001130:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001134:	18d3      	adds	r3, r2, r3
 8001136:	3b38      	subs	r3, #56	@ 0x38
 8001138:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 800113c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001140:	edc7 7a07 	vstr	s15, [r7, #28]
						p_text[ii-3], (int) result[ii-3], sADC.adc12_data[i-3],
 8001144:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001148:	3b03      	subs	r3, #3
 800114a:	4a54      	ldr	r2, [pc, #336]	@ (800129c <printADC12data+0x28c>)
 800114c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001150:	61bb      	str	r3, [r7, #24]
						p_text[ii-2], (int) result[ii-2], sADC.adc12_data[i-2],
 8001152:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001156:	3b02      	subs	r3, #2
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 800115e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001162:	18d3      	adds	r3, r2, r3
 8001164:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8001168:	617a      	str	r2, [r7, #20]
						p_text[ii-2], (int) result[ii-2], sADC.adc12_data[i-2],
 800116a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800116e:	3b02      	subs	r3, #2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	f503 71b4 	add.w	r1, r3, #360	@ 0x168
 8001176:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800117a:	18cb      	adds	r3, r1, r3
 800117c:	3b38      	subs	r3, #56	@ 0x38
 800117e:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001182:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001186:	edc7 7a04 	vstr	s15, [r7, #16]
						p_text[ii-2], (int) result[ii-2], sADC.adc12_data[i-2],
 800118a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800118e:	3b02      	subs	r3, #2
 8001190:	4a42      	ldr	r2, [pc, #264]	@ (800129c <printADC12data+0x28c>)
 8001192:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001196:	60fb      	str	r3, [r7, #12]
						p_text[ii-1], (int) result[ii-1], sADC.adc12_data[i-1],
 8001198:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800119c:	3b01      	subs	r3, #1
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	f503 71b4 	add.w	r1, r3, #360	@ 0x168
 80011a4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011a8:	18cb      	adds	r3, r1, r3
 80011aa:	f853 1c20 	ldr.w	r1, [r3, #-32]
 80011ae:	60b9      	str	r1, [r7, #8]
						p_text[ii-1], (int) result[ii-1], sADC.adc12_data[i-1],
 80011b0:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80011b4:	3b01      	subs	r3, #1
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	f503 70b4 	add.w	r0, r3, #360	@ 0x168
 80011bc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011c0:	18c3      	adds	r3, r0, r3
 80011c2:	3b38      	subs	r3, #56	@ 0x38
 80011c4:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80011c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011cc:	edc7 7a01 	vstr	s15, [r7, #4]
						p_text[ii-1], (int) result[ii-1], sADC.adc12_data[i-1],
 80011d0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80011d4:	1e5a      	subs	r2, r3, #1
 80011d6:	4b31      	ldr	r3, [pc, #196]	@ (800129c <printADC12data+0x28c>)
 80011d8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80011dc:	603b      	str	r3, [r7, #0]
 80011de:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	f503 70b4 	add.w	r0, r3, #360	@ 0x168
 80011e8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011ec:	18c3      	adds	r3, r0, r3
 80011ee:	f853 1c20 	ldr.w	r1, [r3, #-32]
						p_text[ii],   (int) result[ii],   sADC.adc12_data[i]);
 80011f2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	f503 70b4 	add.w	r0, r3, #360	@ 0x168
 80011fc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001200:	18c3      	adds	r3, r0, r3
 8001202:	3b38      	subs	r3, #56	@ 0x38
 8001204:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001208:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800120c:	ee17 4a90 	vmov	r4, s15
						p_text[ii],   (int) result[ii],   sADC.adc12_data[i]);
 8001210:	4a22      	ldr	r2, [pc, #136]	@ (800129c <printADC12data+0x28c>)
 8001212:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001216:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 800121a:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 800121e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8001220:	940e      	str	r4, [sp, #56]	@ 0x38
 8001222:	910d      	str	r1, [sp, #52]	@ 0x34
 8001224:	683c      	ldr	r4, [r7, #0]
 8001226:	940c      	str	r4, [sp, #48]	@ 0x30
 8001228:	687c      	ldr	r4, [r7, #4]
 800122a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800122c:	68b9      	ldr	r1, [r7, #8]
 800122e:	910a      	str	r1, [sp, #40]	@ 0x28
 8001230:	68f9      	ldr	r1, [r7, #12]
 8001232:	9109      	str	r1, [sp, #36]	@ 0x24
 8001234:	6939      	ldr	r1, [r7, #16]
 8001236:	9108      	str	r1, [sp, #32]
 8001238:	697a      	ldr	r2, [r7, #20]
 800123a:	9207      	str	r2, [sp, #28]
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	9206      	str	r2, [sp, #24]
 8001240:	69fa      	ldr	r2, [r7, #28]
 8001242:	9205      	str	r2, [sp, #20]
 8001244:	9604      	str	r6, [sp, #16]
 8001246:	6a3a      	ldr	r2, [r7, #32]
 8001248:	9203      	str	r2, [sp, #12]
 800124a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800124c:	9202      	str	r2, [sp, #8]
 800124e:	9501      	str	r5, [sp, #4]
 8001250:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001252:	9200      	str	r2, [sp, #0]
 8001254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001256:	4662      	mov	r2, ip
 8001258:	4913      	ldr	r1, [pc, #76]	@ (80012a8 <printADC12data+0x298>)
 800125a:	f010 fe3f 	bl	8011edc <siprintf>
				printString(text);
 800125e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fa7e 	bl	8000764 <printString>
		for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i++)
 8001268:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800126c:	3301      	adds	r3, #1
 800126e:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8001272:	4b0a      	ldr	r3, [pc, #40]	@ (800129c <printADC12data+0x28c>)
 8001274:	f8d3 2708 	ldr.w	r2, [r3, #1800]	@ 0x708
 8001278:	4613      	mov	r3, r2
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	4413      	add	r3, r2
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	461a      	mov	r2, r3
 8001282:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001286:	429a      	cmp	r2, r3
 8001288:	f63f aed9 	bhi.w	800103e <printADC12data+0x2e>
			}
		}
	}
}
 800128c:	bf00      	nop
 800128e:	f507 77ce 	add.w	r7, r7, #412	@ 0x19c
 8001292:	46bd      	mov	sp, r7
 8001294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001296:	bf00      	nop
 8001298:	24000000 	.word	0x24000000
 800129c:	2400032c 	.word	0x2400032c
 80012a0:	080141bc 	.word	0x080141bc
 80012a4:	2aaaaaab 	.word	0x2aaaaaab
 80012a8:	080141c8 	.word	0x080141c8

080012ac <freqCorrection>:

//Calculate frequency correction
//Returns 1 if a valid frequency correction is calculated, otherwise 0
uint8_t freqCorrection(int16_t *freqCorr)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08e      	sub	sp, #56	@ 0x38
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	int start_index=0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	637b      	str	r3, [r7, #52]	@ 0x34
	int stop_index=0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	633b      	str	r3, [r7, #48]	@ 0x30
	int number_of_lows=0;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
	int lowDetected = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int highDetected = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	62bb      	str	r3, [r7, #40]	@ 0x28
	float min = 100000;
 80012c8:	4b54      	ldr	r3, [pc, #336]	@ (800141c <freqCorrection+0x170>)
 80012ca:	627b      	str	r3, [r7, #36]	@ 0x24
	float max = -100000;
 80012cc:	4b54      	ldr	r3, [pc, #336]	@ (8001420 <freqCorrection+0x174>)
 80012ce:	623b      	str	r3, [r7, #32]
	float norm = 0;
 80012d0:	f04f 0300 	mov.w	r3, #0
 80012d4:	61fb      	str	r3, [r7, #28]

	//Find when MOSFET branch is on (start and stop time)
	//Find minimum and maximum value of bridge current
 	for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i=i+6)
 80012d6:	2300      	movs	r3, #0
 80012d8:	61bb      	str	r3, [r7, #24]
 80012da:	e041      	b.n	8001360 <freqCorrection+0xb4>
	{
		// Find minimum of bridge current
		float data = convertADC12data(i+ADC2_Is, NULL);
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	3301      	adds	r3, #1
 80012e0:	2100      	movs	r1, #0
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fd48 	bl	8000d78 <convertADC12data>
 80012e8:	ed87 0a02 	vstr	s0, [r7, #8]
		if (data < min)
 80012ec:	ed97 7a02 	vldr	s14, [r7, #8]
 80012f0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80012f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012fc:	d501      	bpl.n	8001302 <freqCorrection+0x56>
		{
			min = data;
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	627b      	str	r3, [r7, #36]	@ 0x24
			//HAL_UART_Transmit(huart3, min);
			//printCR();
		}
		// Find maximum
		if (data > max)
 8001302:	ed97 7a02 	vldr	s14, [r7, #8]
 8001306:	edd7 7a08 	vldr	s15, [r7, #32]
 800130a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800130e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001312:	dd01      	ble.n	8001318 <freqCorrection+0x6c>
		{
			max = data;
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	623b      	str	r3, [r7, #32]
		}
		// Check for low
		if (!lowDetected && sADC.adc12_data[i+ADC1_TIM1_CH1] < 500)
 8001318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800131a:	2b00      	cmp	r3, #0
 800131c:	d10a      	bne.n	8001334 <freqCorrection+0x88>
 800131e:	4a41      	ldr	r2, [pc, #260]	@ (8001424 <freqCorrection+0x178>)
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001326:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800132a:	d203      	bcs.n	8001334 <freqCorrection+0x88>
		{
			//First low detected
			start_index = i; 		// Store index of first low detected
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	637b      	str	r3, [r7, #52]	@ 0x34
			lowDetected = 1;
 8001330:	2301      	movs	r3, #1
 8001332:	62fb      	str	r3, [r7, #44]	@ 0x2c
		}
		//Check for high
		if (!highDetected && lowDetected && sADC.adc12_data[i+ADC1_TIM1_CH1] > 65000)
 8001334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001336:	2b00      	cmp	r3, #0
 8001338:	d10f      	bne.n	800135a <freqCorrection+0xae>
 800133a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800133c:	2b00      	cmp	r3, #0
 800133e:	d00c      	beq.n	800135a <freqCorrection+0xae>
 8001340:	4a38      	ldr	r2, [pc, #224]	@ (8001424 <freqCorrection+0x178>)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001348:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 800134c:	4293      	cmp	r3, r2
 800134e:	d904      	bls.n	800135a <freqCorrection+0xae>
		{
			//High after first low detected
			stop_index = i-6;		// Store index of last low
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	3b06      	subs	r3, #6
 8001354:	633b      	str	r3, [r7, #48]	@ 0x30
			highDetected = 1;
 8001356:	2301      	movs	r3, #1
 8001358:	62bb      	str	r3, [r7, #40]	@ 0x28
 	for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i=i+6)
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	3306      	adds	r3, #6
 800135e:	61bb      	str	r3, [r7, #24]
 8001360:	4b30      	ldr	r3, [pc, #192]	@ (8001424 <freqCorrection+0x178>)
 8001362:	f8d3 2708 	ldr.w	r2, [r3, #1800]	@ 0x708
 8001366:	4613      	mov	r3, r2
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	4413      	add	r3, r2
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	461a      	mov	r2, r3
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	429a      	cmp	r2, r3
 8001374:	d8b2      	bhi.n	80012dc <freqCorrection+0x30>
		}
	}

	// Check maximum and minimum difference
	norm = max - min;
 8001376:	ed97 7a08 	vldr	s14, [r7, #32]
 800137a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800137e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001382:	edc7 7a07 	vstr	s15, [r7, #28]
	if (norm < 10)
 8001386:	edd7 7a07 	vldr	s15, [r7, #28]
 800138a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800138e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001396:	d501      	bpl.n	800139c <freqCorrection+0xf0>
		norm = max;
 8001398:	6a3b      	ldr	r3, [r7, #32]
 800139a:	61fb      	str	r3, [r7, #28]

	number_of_lows = (stop_index - start_index)/6 + 1;
 800139c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800139e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	4a21      	ldr	r2, [pc, #132]	@ (8001428 <freqCorrection+0x17c>)
 80013a4:	fb82 1203 	smull	r1, r2, r2, r3
 80013a8:	17db      	asrs	r3, r3, #31
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	3301      	adds	r3, #1
 80013ae:	617b      	str	r3, [r7, #20]
	if (lowDetected && highDetected && (number_of_lows >= 5))
 80013b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d02c      	beq.n	8001410 <freqCorrection+0x164>
 80013b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d029      	beq.n	8001410 <freqCorrection+0x164>
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	2b04      	cmp	r3, #4
 80013c0:	dd26      	ble.n	8001410 <freqCorrection+0x164>
	{
		float upper = convertADC12data(start_index+ADC2_Is+6, NULL);
 80013c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013c4:	3307      	adds	r3, #7
 80013c6:	2100      	movs	r1, #0
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff fcd5 	bl	8000d78 <convertADC12data>
 80013ce:	ed87 0a04 	vstr	s0, [r7, #16]
		float lower = convertADC12data(stop_index+ADC2_Is-6, NULL);
 80013d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013d4:	3b05      	subs	r3, #5
 80013d6:	2100      	movs	r1, #0
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff fccd 	bl	8000d78 <convertADC12data>
 80013de:	ed87 0a03 	vstr	s0, [r7, #12]
		*freqCorr = (int16_t) 1000*(upper - lower)/norm;
 80013e2:	ed97 7a04 	vldr	s14, [r7, #16]
 80013e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80013ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ee:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800142c <freqCorrection+0x180>
 80013f2:	ee67 6a87 	vmul.f32	s13, s15, s14
 80013f6:	ed97 7a07 	vldr	s14, [r7, #28]
 80013fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001402:	ee17 3a90 	vmov	r3, s15
 8001406:	b21a      	sxth	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	801a      	strh	r2, [r3, #0]
		return(1);
 800140c:	2301      	movs	r3, #1
 800140e:	e000      	b.n	8001412 <freqCorrection+0x166>
	}
	else
		return(0);
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3738      	adds	r7, #56	@ 0x38
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	47c35000 	.word	0x47c35000
 8001420:	c7c35000 	.word	0xc7c35000
 8001424:	2400032c 	.word	0x2400032c
 8001428:	2aaaaaab 	.word	0x2aaaaaab
 800142c:	447a0000 	.word	0x447a0000

08001430 <measureBridgePlasmaADC12>:


// Measure bridge current, plasma voltage, and bridge current using ADC1 and ADC2 for one period
// After the measurement is done the function doneMeasuringBridgePlasmaADC12 is called
void measureBridgePlasmaADC12(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_SET);

	//Calculate number of reads needed for one period
	sADC.nADC12Read = 2 * 2 * ((uint32_t) ((1/(float) sHbridge.frequency)/ADC12_GROUP_READTIME));
 8001436:	4b26      	ldr	r3, [pc, #152]	@ (80014d0 <measureBridgePlasmaADC12+0xa0>)
 8001438:	885b      	ldrh	r3, [r3, #2]
 800143a:	ee07 3a90 	vmov	s15, r3
 800143e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001442:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001446:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800144a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800144e:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 80014c8 <measureBridgePlasmaADC12+0x98>
 8001452:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001456:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800145a:	ee17 3a90 	vmov	r3, s15
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	4a1c      	ldr	r2, [pc, #112]	@ (80014d4 <measureBridgePlasmaADC12+0xa4>)
 8001462:	f8c2 3708 	str.w	r3, [r2, #1800]	@ 0x708
	sADC.nADC12Read +=2; //Add to see the start of next period
 8001466:	4b1b      	ldr	r3, [pc, #108]	@ (80014d4 <measureBridgePlasmaADC12+0xa4>)
 8001468:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
 800146c:	3302      	adds	r3, #2
 800146e:	4a19      	ldr	r2, [pc, #100]	@ (80014d4 <measureBridgePlasmaADC12+0xa4>)
 8001470:	f8c2 3708 	str.w	r3, [r2, #1800]	@ 0x708

	//Start ADC1 and ADC2 measurements
	if (sADC.nADC12Read <= ADC12_MAX_GROUP)
 8001474:	4b17      	ldr	r3, [pc, #92]	@ (80014d4 <measureBridgePlasmaADC12+0xa4>)
 8001476:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
 800147a:	2b64      	cmp	r3, #100	@ 0x64
 800147c:	d81a      	bhi.n	80014b4 <measureBridgePlasmaADC12+0x84>
	{
		//Calculate the number DMA transfers needed
		uint32_t noDMARequests = ADC12_NO_CHANNELS*sADC.nADC12Read;
 800147e:	4b15      	ldr	r3, [pc, #84]	@ (80014d4 <measureBridgePlasmaADC12+0xa4>)
 8001480:	f8d3 2708 	ldr.w	r2, [r3, #1800]	@ 0x708
 8001484:	4613      	mov	r3, r2
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	4413      	add	r3, r2
 800148a:	607b      	str	r3, [r7, #4]

		// Start reading ADC1 and ADC2
		sADC.adc12_reading = 1;
 800148c:	4b11      	ldr	r3, [pc, #68]	@ (80014d4 <measureBridgePlasmaADC12+0xa4>)
 800148e:	2201      	movs	r2, #1
 8001490:	f8a3 270e 	strh.w	r2, [r3, #1806]	@ 0x70e

		//This will start the ADC1 and ADC2 measurements when H-BRIDGE_B_CTRL (TIM1_CH1) goes from 0 to 1.
		//When the measurements are done doneMeasuringBridgePlasmaADC12 is called.
		HAL_StatusTypeDef HALresp = HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t *) sADC.adc12_data, noDMARequests);
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	490f      	ldr	r1, [pc, #60]	@ (80014d4 <measureBridgePlasmaADC12+0xa4>)
 8001498:	480f      	ldr	r0, [pc, #60]	@ (80014d8 <measureBridgePlasmaADC12+0xa8>)
 800149a:	f005 fddd 	bl	8007058 <HAL_ADCEx_MultiModeStart_DMA>
 800149e:	4603      	mov	r3, r0
 80014a0:	70fb      	strb	r3, [r7, #3]
		if (HALresp != HAL_OK)
 80014a2:	78fb      	ldrb	r3, [r7, #3]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d008      	beq.n	80014ba <measureBridgePlasmaADC12+0x8a>
		{
			printHALErrorStatus(HALresp, "measureBridgePlasmaADC12");
 80014a8:	78fb      	ldrb	r3, [r7, #3]
 80014aa:	490c      	ldr	r1, [pc, #48]	@ (80014dc <measureBridgePlasmaADC12+0xac>)
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff f9e1 	bl	8000874 <printHALErrorStatus>
	}
	else
		printString("** ERROR ** pADC.nRead > ADC12_MAX_GROUP");

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
}
 80014b2:	e002      	b.n	80014ba <measureBridgePlasmaADC12+0x8a>
		printString("** ERROR ** pADC.nRead > ADC12_MAX_GROUP");
 80014b4:	480a      	ldr	r0, [pc, #40]	@ (80014e0 <measureBridgePlasmaADC12+0xb0>)
 80014b6:	f7ff f955 	bl	8000764 <printString>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	f3af 8000 	nop.w
 80014c8:	a0b5ed8d 	.word	0xa0b5ed8d
 80014cc:	3eb0c6f7 	.word	0x3eb0c6f7
 80014d0:	2400001c 	.word	0x2400001c
 80014d4:	2400032c 	.word	0x2400032c
 80014d8:	24000a80 	.word	0x24000a80
 80014dc:	08014220 	.word	0x08014220
 80014e0:	0801423c 	.word	0x0801423c

080014e4 <doneMeasuringBridgePlasmaADC12>:

// Done measuring bridge current, plasma voltage, and bridge current
void doneMeasuringBridgePlasmaADC12(uint32_t errorCode)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
	static uint32_t count = 0;

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_SET);

	count++;
 80014ec:	4b22      	ldr	r3, [pc, #136]	@ (8001578 <doneMeasuringBridgePlasmaADC12+0x94>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	3301      	adds	r3, #1
 80014f2:	4a21      	ldr	r2, [pc, #132]	@ (8001578 <doneMeasuringBridgePlasmaADC12+0x94>)
 80014f4:	6013      	str	r3, [r2, #0]

	// Done reading ADC1 and ADC2
	sADC.adc12_reading = 0;
 80014f6:	4b21      	ldr	r3, [pc, #132]	@ (800157c <doneMeasuringBridgePlasmaADC12+0x98>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	f8a3 270e 	strh.w	r2, [r3, #1806]	@ 0x70e

	if (errorCode == HAL_ADC_ERROR_NONE)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d128      	bne.n	8001556 <doneMeasuringBridgePlasmaADC12+0x72>
	{
		if (sFlashConfig.mode == RUN_MODE)
 8001504:	4b1e      	ldr	r3, [pc, #120]	@ (8001580 <doneMeasuringBridgePlasmaADC12+0x9c>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d12b      	bne.n	8001564 <doneMeasuringBridgePlasmaADC12+0x80>

			//TODO Check plasma voltage VplaL1 and VplaL2 (To high? Not present?)
			//TODO Calculate plasma voltage Vrms, Vmax and Vmin

			//Adjust H-bridge frequency
			if (powerStatus == V500_ON)
 800150c:	4b1d      	ldr	r3, [pc, #116]	@ (8001584 <doneMeasuringBridgePlasmaADC12+0xa0>)
 800150e:	881b      	ldrh	r3, [r3, #0]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d127      	bne.n	8001564 <doneMeasuringBridgePlasmaADC12+0x80>
			{
				//Adjust H-bridge frequency
				int16_t freqCorr = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	81fb      	strh	r3, [r7, #14]
				if (freqCorrection(&freqCorr))
 8001518:	f107 030e 	add.w	r3, r7, #14
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fec5 	bl	80012ac <freqCorrection>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d008      	beq.n	800153a <doneMeasuringBridgePlasmaADC12+0x56>
					sHbridge.frequency += freqCorr;
 8001528:	4b17      	ldr	r3, [pc, #92]	@ (8001588 <doneMeasuringBridgePlasmaADC12+0xa4>)
 800152a:	885a      	ldrh	r2, [r3, #2]
 800152c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001530:	b29b      	uxth	r3, r3
 8001532:	4413      	add	r3, r2
 8001534:	b29a      	uxth	r2, r3
 8001536:	4b14      	ldr	r3, [pc, #80]	@ (8001588 <doneMeasuringBridgePlasmaADC12+0xa4>)
 8001538:	805a      	strh	r2, [r3, #2]
				//TODO Adjust H-bridge dead time
				//sHbridge.deadtime = new setting;
				programHbridge();
 800153a:	f7ff fa39 	bl	80009b0 <programHbridge>
					HAL_Delay(1);	//Allow H-bridge to settle with new settings
 800153e:	2001      	movs	r0, #1
 8001540:	f002 ffea 	bl	8004518 <HAL_Delay>
				if (count % 2048)
 8001544:	4b0c      	ldr	r3, [pc, #48]	@ (8001578 <doneMeasuringBridgePlasmaADC12+0x94>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800154c:	2b00      	cmp	r3, #0
 800154e:	d009      	beq.n	8001564 <doneMeasuringBridgePlasmaADC12+0x80>
					printHbridgeData();
 8001550:	f7ff fa06 	bl	8000960 <printHbridgeData>
 8001554:	e006      	b.n	8001564 <doneMeasuringBridgePlasmaADC12+0x80>
			}
		}
	}
	else
	{
		printNumber("ADC12 Error Code: ", errorCode, 1);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	b29b      	uxth	r3, r3
 800155a:	2201      	movs	r2, #1
 800155c:	4619      	mov	r1, r3
 800155e:	480b      	ldr	r0, [pc, #44]	@ (800158c <doneMeasuringBridgePlasmaADC12+0xa8>)
 8001560:	f7ff f942 	bl	80007e8 <printNumber>
	}

	//Measure ADC3 voltages
	if (sFlashConfig.mode == RUN_MODE)
 8001564:	4b06      	ldr	r3, [pc, #24]	@ (8001580 <doneMeasuringBridgePlasmaADC12+0x9c>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d101      	bne.n	8001570 <doneMeasuringBridgePlasmaADC12+0x8c>
		measureVoltagesTemperaturesADC3();
 800156c:	f000 faac 	bl	8001ac8 <measureVoltagesTemperaturesADC3>

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
}
 8001570:	bf00      	nop
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	24000a44 	.word	0x24000a44
 800157c:	2400032c 	.word	0x2400032c
 8001580:	24000a40 	.word	0x24000a40
 8001584:	24000a3c 	.word	0x24000a3c
 8001588:	2400001c 	.word	0x2400001c
 800158c:	08014268 	.word	0x08014268

08001590 <printHbridgeDatalogging>:
// Print H-bridge data on UART3 formatted for CSV datalogging
// Prints: Hbridge Freq, Deadtime, Is, VplaL1, VplaL2, VbrS1, VbriS2
// Parameter:
//		startTime: denotes the system time when ADC measurement was started
static void printHbridgeDatalogging(uint32_t startTime, uint32_t stopTime)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	f5ad 6d8a 	sub.w	sp, sp, #1104	@ 0x450
 8001596:	af0c      	add	r7, sp, #48	@ 0x30
 8001598:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 800159c:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 80015a0:	6018      	str	r0, [r3, #0]
 80015a2:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80015a6:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 80015aa:	6019      	str	r1, [r3, #0]
	char s_output[1000];
	//Convert from ms to sec: time elapsed / number of adc reads
	//This assumes that the time taken for each adc read is approx. equal
	double interval = (double) (stopTime - startTime) / (double) sADC.nADC12Read;
 80015ac:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80015b0:	f5a3 6284 	sub.w	r2, r3, #1056	@ 0x420
 80015b4:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80015b8:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 80015bc:	6812      	ldr	r2, [r2, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	ee07 3a90 	vmov	s15, r3
 80015c6:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 80015ca:	4b5c      	ldr	r3, [pc, #368]	@ (800173c <printHbridgeDatalogging+0x1ac>)
 80015cc:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
 80015d0:	ee07 3a90 	vmov	s15, r3
 80015d4:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80015d8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80015dc:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80015e0:	ed83 7b00 	vstr	d7, [r3]

	for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i=i+6)
 80015e4:	2300      	movs	r3, #0
 80015e6:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
 80015ea:	e093      	b.n	8001714 <printHbridgeDatalogging+0x184>
		{
			//calculate time of current measurement (start time + ADC sample rate)
			//TODO: This is likely not exactly accurate. Better way to record time of measurement accounting for conversion/DMA time?
			double measTime = startTime + (interval * i);
 80015ec:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80015f0:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	ee07 3a90 	vmov	s15, r3
 80015fa:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80015fe:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8001602:	ee07 3a90 	vmov	s15, r3
 8001606:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800160a:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800160e:	ed93 7b00 	vldr	d7, [r3]
 8001612:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001616:	ee36 7b07 	vadd.f64	d7, d6, d7
 800161a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 800161e:	ed83 7b00 	vstr	d7, [r3]

			float Is = convertADC12data(i+ADC2_Is, NULL);
 8001622:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8001626:	3301      	adds	r3, #1
 8001628:	2100      	movs	r1, #0
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff fba4 	bl	8000d78 <convertADC12data>
 8001630:	f207 4304 	addw	r3, r7, #1028	@ 0x404
 8001634:	ed83 0a00 	vstr	s0, [r3]
			float VplaL1 = convertADC12data(i+ADC1_VplaL1, NULL);
 8001638:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 800163c:	3304      	adds	r3, #4
 800163e:	2100      	movs	r1, #0
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fb99 	bl	8000d78 <convertADC12data>
 8001646:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 800164a:	ed83 0a00 	vstr	s0, [r3]
			float VplaL2 = convertADC12data(i+ADC2_VplaL2, NULL);
 800164e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8001652:	3305      	adds	r3, #5
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff fb8e 	bl	8000d78 <convertADC12data>
 800165c:	ed87 0aff 	vstr	s0, [r7, #1020]	@ 0x3fc
			float VbriS1 = convertADC12data(i+ADC1_VbriS1, NULL);
 8001660:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8001664:	3302      	adds	r3, #2
 8001666:	2100      	movs	r1, #0
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff fb85 	bl	8000d78 <convertADC12data>
 800166e:	ed87 0afe 	vstr	s0, [r7, #1016]	@ 0x3f8
			float VbriS2 = convertADC12data(i+ADC2_VbriS2, NULL);
 8001672:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8001676:	3303      	adds	r3, #3
 8001678:	2100      	movs	r1, #0
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fb7c 	bl	8000d78 <convertADC12data>
 8001680:	ed87 0afd 	vstr	s0, [r7, #1012]	@ 0x3f4

			sprintf(s_output, "%.2lf,%u,%u,%f,%f,%f,%f,%f", measTime, sHbridge.frequency, sHbridge.deadtime,Is,VplaL1,VplaL2,VbriS1,VbriS2);
 8001684:	4b2e      	ldr	r3, [pc, #184]	@ (8001740 <printHbridgeDatalogging+0x1b0>)
 8001686:	885b      	ldrh	r3, [r3, #2]
 8001688:	461a      	mov	r2, r3
 800168a:	4b2d      	ldr	r3, [pc, #180]	@ (8001740 <printHbridgeDatalogging+0x1b0>)
 800168c:	889b      	ldrh	r3, [r3, #4]
 800168e:	f207 4104 	addw	r1, r7, #1028	@ 0x404
 8001692:	edd1 7a00 	vldr	s15, [r1]
 8001696:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800169a:	f507 6180 	add.w	r1, r7, #1024	@ 0x400
 800169e:	edd1 6a00 	vldr	s13, [r1]
 80016a2:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80016a6:	edd7 5aff 	vldr	s11, [r7, #1020]	@ 0x3fc
 80016aa:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 80016ae:	edd7 4afe 	vldr	s9, [r7, #1016]	@ 0x3f8
 80016b2:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 80016b6:	edd7 3afd 	vldr	s7, [r7, #1012]	@ 0x3f4
 80016ba:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 80016be:	f107 000c 	add.w	r0, r7, #12
 80016c2:	ed8d 3b0a 	vstr	d3, [sp, #40]	@ 0x28
 80016c6:	ed8d 4b08 	vstr	d4, [sp, #32]
 80016ca:	ed8d 5b06 	vstr	d5, [sp, #24]
 80016ce:	ed8d 6b04 	vstr	d6, [sp, #16]
 80016d2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80016d6:	9301      	str	r3, [sp, #4]
 80016d8:	9200      	str	r2, [sp, #0]
 80016da:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80016de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e2:	4918      	ldr	r1, [pc, #96]	@ (8001744 <printHbridgeDatalogging+0x1b4>)
 80016e4:	f010 fbfa 	bl	8011edc <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t *) s_output, strlen(s_output), 1000);
 80016e8:	f107 030c 	add.w	r3, r7, #12
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7fe fe5f 	bl	80003b0 <strlen>
 80016f2:	4603      	mov	r3, r0
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	f107 010c 	add.w	r1, r7, #12
 80016fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016fe:	4812      	ldr	r0, [pc, #72]	@ (8001748 <printHbridgeDatalogging+0x1b8>)
 8001700:	f00e fb2f 	bl	800fd62 <HAL_UART_Transmit>
			printString("\n");
 8001704:	4811      	ldr	r0, [pc, #68]	@ (800174c <printHbridgeDatalogging+0x1bc>)
 8001706:	f7ff f82d 	bl	8000764 <printString>
	for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i=i+6)
 800170a:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 800170e:	3306      	adds	r3, #6
 8001710:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
 8001714:	4b09      	ldr	r3, [pc, #36]	@ (800173c <printHbridgeDatalogging+0x1ac>)
 8001716:	f8d3 2708 	ldr.w	r2, [r3, #1800]	@ 0x708
 800171a:	4613      	mov	r3, r2
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	4413      	add	r3, r2
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	461a      	mov	r2, r3
 8001724:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8001728:	429a      	cmp	r2, r3
 800172a:	f63f af5f 	bhi.w	80015ec <printHbridgeDatalogging+0x5c>
		}
}
 800172e:	bf00      	nop
 8001730:	bf00      	nop
 8001732:	f507 6784 	add.w	r7, r7, #1056	@ 0x420
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	2400032c 	.word	0x2400032c
 8001740:	2400001c 	.word	0x2400001c
 8001744:	0801427c 	.word	0x0801427c
 8001748:	24000e30 	.word	0x24000e30
 800174c:	08014298 	.word	0x08014298

08001750 <autoFreqAdj>:

// Automatically Correct the Drive Frequency until user presses any key
void autoFreqAdj(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
	char input;


	//printString("\n\r%Press any key to exit"); //Commented out to allow for automated remote serial control (datalogging)

	printString("Time(us),Freq (Hz),Deadtime (%),Bridge I,VplaL1,VplaL2,VbriS1,VbriS2");
 8001756:	482c      	ldr	r0, [pc, #176]	@ (8001808 <autoFreqAdj+0xb8>)
 8001758:	f7ff f804 	bl	8000764 <printString>
	printCR();
 800175c:	f7fe fff2 	bl	8000744 <printCR>

	//Start timer24 which is used to time when each ADC measurement is captured
	HAL_TIM_Base_Start(&htim24);
 8001760:	482a      	ldr	r0, [pc, #168]	@ (800180c <autoFreqAdj+0xbc>)
 8001762:	f00c fd21 	bl	800e1a8 <HAL_TIM_Base_Start>


	while (!(HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 1) == HAL_OK))
 8001766:	e041      	b.n	80017ec <autoFreqAdj+0x9c>
	{
		uint32_t startTime = __HAL_TIM_GET_COUNTER(&htim24);//TIM24->CNT;
 8001768:	4b28      	ldr	r3, [pc, #160]	@ (800180c <autoFreqAdj+0xbc>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800176e:	60fb      	str	r3, [r7, #12]
		measureBridgePlasmaADC12();
 8001770:	f7ff fe5e 	bl	8001430 <measureBridgePlasmaADC12>
		//Wait until ADC3 reading is done
		while (sADC.adc12_reading);
 8001774:	bf00      	nop
 8001776:	4b26      	ldr	r3, [pc, #152]	@ (8001810 <autoFreqAdj+0xc0>)
 8001778:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	@ 0x70e
 800177c:	b29b      	uxth	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1f9      	bne.n	8001776 <autoFreqAdj+0x26>
		uint32_t stopTime = __HAL_TIM_GET_COUNTER(&htim24);//TIM24->CNT;
 8001782:	4b22      	ldr	r3, [pc, #136]	@ (800180c <autoFreqAdj+0xbc>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001788:	60bb      	str	r3, [r7, #8]
		//printADC12data();

		//Calculate delta f
		int16_t freqCorr;
		freqCorrection(&freqCorr);
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fd8d 	bl	80012ac <freqCorrection>

		//char text[100];
		//sprintf(text, "\n\rFrequency correction: %i", (int) freqCorr);
		//printString(text);

		if (sHbridge.frequency + freqCorr > MAX_FREQUENCY) //GetUint16Input(&sHbridge.frequency, 1, MIN_FREQUENCY, MAX_FREQUENCY))
 8001792:	4b20      	ldr	r3, [pc, #128]	@ (8001814 <autoFreqAdj+0xc4>)
 8001794:	885b      	ldrh	r3, [r3, #2]
 8001796:	461a      	mov	r2, r3
 8001798:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800179c:	4413      	add	r3, r2
 800179e:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 80017a2:	4293      	cmp	r3, r2
 80017a4:	dd04      	ble.n	80017b0 <autoFreqAdj+0x60>
		{   // Calculated freq is higher than max

			//sprintf(text, "\n\r%i is higher than max freq", (int) sHbridge.frequency + freqCorr);
			//printString(text);
			sHbridge.frequency = MAX_FREQUENCY;
 80017a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001814 <autoFreqAdj+0xc4>)
 80017a8:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 80017ac:	805a      	strh	r2, [r3, #2]
 80017ae:	e017      	b.n	80017e0 <autoFreqAdj+0x90>
		}
		else if (sHbridge.frequency + freqCorr < MIN_FREQUENCY)
 80017b0:	4b18      	ldr	r3, [pc, #96]	@ (8001814 <autoFreqAdj+0xc4>)
 80017b2:	885b      	ldrh	r3, [r3, #2]
 80017b4:	461a      	mov	r2, r3
 80017b6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017ba:	4413      	add	r3, r2
 80017bc:	f643 2297 	movw	r2, #14999	@ 0x3a97
 80017c0:	4293      	cmp	r3, r2
 80017c2:	dc04      	bgt.n	80017ce <autoFreqAdj+0x7e>
		{
			//sprintf(text, "\n\r%i is lower than min freq", (int) sHbridge.frequency + freqCorr);
			//printString(text);

			sHbridge.frequency = MIN_FREQUENCY;
 80017c4:	4b13      	ldr	r3, [pc, #76]	@ (8001814 <autoFreqAdj+0xc4>)
 80017c6:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80017ca:	805a      	strh	r2, [r3, #2]
 80017cc:	e008      	b.n	80017e0 <autoFreqAdj+0x90>

		}
		else
		{
			sHbridge.frequency = sHbridge.frequency + freqCorr;
 80017ce:	4b11      	ldr	r3, [pc, #68]	@ (8001814 <autoFreqAdj+0xc4>)
 80017d0:	885a      	ldrh	r2, [r3, #2]
 80017d2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	4413      	add	r3, r2
 80017da:	b29a      	uxth	r2, r3
 80017dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001814 <autoFreqAdj+0xc4>)
 80017de:	805a      	strh	r2, [r3, #2]
		}

		programHbridge();
 80017e0:	f7ff f8e6 	bl	80009b0 <programHbridge>

		//Print current ADC data
		printHbridgeDatalogging(startTime, stopTime);
 80017e4:	68b9      	ldr	r1, [r7, #8]
 80017e6:	68f8      	ldr	r0, [r7, #12]
 80017e8:	f7ff fed2 	bl	8001590 <printHbridgeDatalogging>
	while (!(HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 1) == HAL_OK))
 80017ec:	1df9      	adds	r1, r7, #7
 80017ee:	2301      	movs	r3, #1
 80017f0:	2201      	movs	r2, #1
 80017f2:	4809      	ldr	r0, [pc, #36]	@ (8001818 <autoFreqAdj+0xc8>)
 80017f4:	f00e fb43 	bl	800fe7e <HAL_UART_Receive>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d1b4      	bne.n	8001768 <autoFreqAdj+0x18>


	}
}
 80017fe:	bf00      	nop
 8001800:	bf00      	nop
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	0801429c 	.word	0x0801429c
 800180c:	24001040 	.word	0x24001040
 8001810:	2400032c 	.word	0x2400032c
 8001814:	2400001c 	.word	0x2400001c
 8001818:	24000e30 	.word	0x24000e30
 800181c:	00000000 	.word	0x00000000

08001820 <convertADC3data>:

//Convert ADC3 data to voltages
float convertADC3data(uint32_t item, char **text)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
	float result = 0;
 800182a:	f04f 0300 	mov.w	r3, #0
 800182e:	60fb      	str	r3, [r7, #12]

	switch (item) {
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2b0a      	cmp	r3, #10
 8001834:	f200 80c5 	bhi.w	80019c2 <convertADC3data+0x1a2>
 8001838:	a201      	add	r2, pc, #4	@ (adr r2, 8001840 <convertADC3data+0x20>)
 800183a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183e:	bf00      	nop
 8001840:	0800186d 	.word	0x0800186d
 8001844:	0800189f 	.word	0x0800189f
 8001848:	080018d1 	.word	0x080018d1
 800184c:	08001903 	.word	0x08001903
 8001850:	08001911 	.word	0x08001911
 8001854:	0800194b 	.word	0x0800194b
 8001858:	0800197d 	.word	0x0800197d
 800185c:	0800198b 	.word	0x0800198b
 8001860:	08001999 	.word	0x08001999
 8001864:	080019a7 	.word	0x080019a7
 8001868:	080019b5 	.word	0x080019b5
		case ADC3_VBAT:
			result =  1000*((9.76+169.0)/9.76)*3.3*(((float) sADC.adc3_data[ADC3_VBAT])/4096.0);
 800186c:	4b66      	ldr	r3, [pc, #408]	@ (8001a08 <convertADC3data+0x1e8>)
 800186e:	f8b3 34b0 	ldrh.w	r3, [r3, #1200]	@ 0x4b0
 8001872:	ee07 3a90 	vmov	s15, r3
 8001876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800187a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800187e:	ed9f 5b56 	vldr	d5, [pc, #344]	@ 80019d8 <convertADC3data+0x1b8>
 8001882:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001886:	ed9f 6b56 	vldr	d6, [pc, #344]	@ 80019e0 <convertADC3data+0x1c0>
 800188a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800188e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001892:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_VBAT (mV)";
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	4a5c      	ldr	r2, [pc, #368]	@ (8001a0c <convertADC3data+0x1ec>)
 800189a:	601a      	str	r2, [r3, #0]
			break;
 800189c:	e091      	b.n	80019c2 <convertADC3data+0x1a2>
		case ADC3_15V:
			result =  1000*((30.0+120.0)/30.0)*3.3*(((float) sADC.adc3_data[ADC3_15V])/4096.0);
 800189e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a08 <convertADC3data+0x1e8>)
 80018a0:	f8b3 34b2 	ldrh.w	r3, [r3, #1202]	@ 0x4b2
 80018a4:	ee07 3a90 	vmov	s15, r3
 80018a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018ac:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80018b0:	ed9f 5b49 	vldr	d5, [pc, #292]	@ 80019d8 <convertADC3data+0x1b8>
 80018b4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018b8:	ed9f 6b4b 	vldr	d6, [pc, #300]	@ 80019e8 <convertADC3data+0x1c8>
 80018bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80018c0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80018c4:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_15V (mV)";
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	4a51      	ldr	r2, [pc, #324]	@ (8001a10 <convertADC3data+0x1f0>)
 80018cc:	601a      	str	r2, [r3, #0]
			break;
 80018ce:	e078      	b.n	80019c2 <convertADC3data+0x1a2>
		case ADC3_3_3V:
			result =  1000*((30.0+3.0)/30.0)*3.3*(((float) sADC.adc3_data[ADC3_3_3V])/4096.0);
 80018d0:	4b4d      	ldr	r3, [pc, #308]	@ (8001a08 <convertADC3data+0x1e8>)
 80018d2:	f8b3 34b4 	ldrh.w	r3, [r3, #1204]	@ 0x4b4
 80018d6:	ee07 3a90 	vmov	s15, r3
 80018da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018de:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80018e2:	ed9f 5b3d 	vldr	d5, [pc, #244]	@ 80019d8 <convertADC3data+0x1b8>
 80018e6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018ea:	ed9f 6b41 	vldr	d6, [pc, #260]	@ 80019f0 <convertADC3data+0x1d0>
 80018ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 80018f2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80018f6:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_3_3V (mV)";
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	4a45      	ldr	r2, [pc, #276]	@ (8001a14 <convertADC3data+0x1f4>)
 80018fe:	601a      	str	r2, [r3, #0]
			break;
 8001900:	e05f      	b.n	80019c2 <convertADC3data+0x1a2>
		case ADC3_NC3:
			result = 0;
 8001902:	f04f 0300 	mov.w	r3, #0
 8001906:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_NC3";
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	4a43      	ldr	r2, [pc, #268]	@ (8001a18 <convertADC3data+0x1f8>)
 800190c:	601a      	str	r2, [r3, #0]
			break;
 800190e:	e058      	b.n	80019c2 <convertADC3data+0x1a2>
		case ADC3_BridgeTemp:
			result = 1000*((float) sADC.adc3_data[ADC3_BridgeTemp])*3.3/4096.0;
 8001910:	4b3d      	ldr	r3, [pc, #244]	@ (8001a08 <convertADC3data+0x1e8>)
 8001912:	f8b3 34b8 	ldrh.w	r3, [r3, #1208]	@ 0x4b8
 8001916:	ee07 3a90 	vmov	s15, r3
 800191a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800191e:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8001a1c <convertADC3data+0x1fc>
 8001922:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001926:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800192a:	ed9f 6b33 	vldr	d6, [pc, #204]	@ 80019f8 <convertADC3data+0x1d8>
 800192e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001932:	ed9f 5b29 	vldr	d5, [pc, #164]	@ 80019d8 <convertADC3data+0x1b8>
 8001936:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800193a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800193e:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_BridgeTemp (mV)";
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	4a36      	ldr	r2, [pc, #216]	@ (8001a20 <convertADC3data+0x200>)
 8001946:	601a      	str	r2, [r3, #0]
			break;
 8001948:	e03b      	b.n	80019c2 <convertADC3data+0x1a2>
		case ADC3_500VDC:
			result =  1000*((12.0+2000.0)/12.0)*3.3*(((float) sADC.adc3_data[ADC3_500VDC])/4096.0);
 800194a:	4b2f      	ldr	r3, [pc, #188]	@ (8001a08 <convertADC3data+0x1e8>)
 800194c:	f8b3 34ba 	ldrh.w	r3, [r3, #1210]	@ 0x4ba
 8001950:	ee07 3a90 	vmov	s15, r3
 8001954:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001958:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800195c:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 80019d8 <convertADC3data+0x1b8>
 8001960:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001964:	ed9f 6b26 	vldr	d6, [pc, #152]	@ 8001a00 <convertADC3data+0x1e0>
 8001968:	ee27 7b06 	vmul.f64	d7, d7, d6
 800196c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001970:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_500VDC (mV)";
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	4a2b      	ldr	r2, [pc, #172]	@ (8001a24 <convertADC3data+0x204>)
 8001978:	601a      	str	r2, [r3, #0]
			break;
 800197a:	e022      	b.n	80019c2 <convertADC3data+0x1a2>
		case ADC3_Thermistor1:
			result = 0;
 800197c:	f04f 0300 	mov.w	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_Thermistor1";
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	4a28      	ldr	r2, [pc, #160]	@ (8001a28 <convertADC3data+0x208>)
 8001986:	601a      	str	r2, [r3, #0]
			break;
 8001988:	e01b      	b.n	80019c2 <convertADC3data+0x1a2>
		case ADC3_Thermistor2:
			result = 0;
 800198a:	f04f 0300 	mov.w	r3, #0
 800198e:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_Thermistor2";
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	4a26      	ldr	r2, [pc, #152]	@ (8001a2c <convertADC3data+0x20c>)
 8001994:	601a      	str	r2, [r3, #0]
			break;
 8001996:	e014      	b.n	80019c2 <convertADC3data+0x1a2>
		case ADC3_Thermistor3:
			result = 0;
 8001998:	f04f 0300 	mov.w	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_Thermistor3";
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	4a23      	ldr	r2, [pc, #140]	@ (8001a30 <convertADC3data+0x210>)
 80019a2:	601a      	str	r2, [r3, #0]
			break;
 80019a4:	e00d      	b.n	80019c2 <convertADC3data+0x1a2>
		case ADC3_Thermistor4:
			result = 0;
 80019a6:	f04f 0300 	mov.w	r3, #0
 80019aa:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_Thermistor4";
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	4a21      	ldr	r2, [pc, #132]	@ (8001a34 <convertADC3data+0x214>)
 80019b0:	601a      	str	r2, [r3, #0]
			break;
 80019b2:	e006      	b.n	80019c2 <convertADC3data+0x1a2>
		case ADC3_NC10:
			result = 0;
 80019b4:	f04f 0300 	mov.w	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_NC10";
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	4a1e      	ldr	r2, [pc, #120]	@ (8001a38 <convertADC3data+0x218>)
 80019be:	601a      	str	r2, [r3, #0]
			break;
 80019c0:	bf00      	nop
	}

	return(result);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	ee07 3a90 	vmov	s15, r3
}
 80019c8:	eeb0 0a67 	vmov.f32	s0, s15
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	00000000 	.word	0x00000000
 80019dc:	40b00000 	.word	0x40b00000
 80019e0:	9714fbcd 	.word	0x9714fbcd
 80019e4:	40ed832c 	.word	0x40ed832c
 80019e8:	00000000 	.word	0x00000000
 80019ec:	40d01d00 	.word	0x40d01d00
 80019f0:	00000000 	.word	0x00000000
 80019f4:	40ac5c00 	.word	0x40ac5c00
 80019f8:	66666666 	.word	0x66666666
 80019fc:	400a6666 	.word	0x400a6666
 8001a00:	ffffffff 	.word	0xffffffff
 8001a04:	4120e2a7 	.word	0x4120e2a7
 8001a08:	2400032c 	.word	0x2400032c
 8001a0c:	080142e4 	.word	0x080142e4
 8001a10:	080142f4 	.word	0x080142f4
 8001a14:	08014304 	.word	0x08014304
 8001a18:	08014314 	.word	0x08014314
 8001a1c:	447a0000 	.word	0x447a0000
 8001a20:	08014320 	.word	0x08014320
 8001a24:	08014338 	.word	0x08014338
 8001a28:	0801434c 	.word	0x0801434c
 8001a2c:	08014360 	.word	0x08014360
 8001a30:	08014374 	.word	0x08014374
 8001a34:	08014388 	.word	0x08014388
 8001a38:	0801439c 	.word	0x0801439c

08001a3c <printADC3data>:

//Print measured ADC3 data on UART3
void printADC3data(void)
{
 8001a3c:	b590      	push	{r4, r7, lr}
 8001a3e:	b09f      	sub	sp, #124	@ 0x7c
 8001a40:	af02      	add	r7, sp, #8
	if (debug == 1)
 8001a42:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab8 <printADC3data+0x7c>)
 8001a44:	881b      	ldrh	r3, [r3, #0]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d131      	bne.n	8001aae <printADC3data+0x72>
	{
		printCR();
 8001a4a:	f7fe fe7b 	bl	8000744 <printCR>
		printNumber("No data: ", ADC3_DMA_REQUESTS, 1);
 8001a4e:	2201      	movs	r2, #1
 8001a50:	210b      	movs	r1, #11
 8001a52:	481a      	ldr	r0, [pc, #104]	@ (8001abc <printADC3data+0x80>)
 8001a54:	f7fe fec8 	bl	80007e8 <printNumber>
		for (int i=0; i<ADC3_DMA_REQUESTS; i++)
 8001a58:	2300      	movs	r3, #0
 8001a5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001a5c:	e024      	b.n	8001aa8 <printADC3data+0x6c>
		{
			char text[100];
			char *p_text;
			float result = convertADC3data(i, &p_text);
 8001a5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001a60:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8001a64:	4611      	mov	r1, r2
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff feda 	bl	8001820 <convertADC3data>
 8001a6c:	ed87 0a1a 	vstr	s0, [r7, #104]	@ 0x68
			sprintf(text, "%2u %20s: %7u    (%6u)\n\r", i, p_text, (int) result, sADC.adc3_data[i]);
 8001a70:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001a72:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001a76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a7a:	ee17 4a90 	vmov	r4, s15
 8001a7e:	4910      	ldr	r1, [pc, #64]	@ (8001ac0 <printADC3data+0x84>)
 8001a80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001a82:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001a86:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001a8a:	4638      	mov	r0, r7
 8001a8c:	9301      	str	r3, [sp, #4]
 8001a8e:	9400      	str	r4, [sp, #0]
 8001a90:	4613      	mov	r3, r2
 8001a92:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001a94:	490b      	ldr	r1, [pc, #44]	@ (8001ac4 <printADC3data+0x88>)
 8001a96:	f010 fa21 	bl	8011edc <siprintf>
			printString(text);
 8001a9a:	463b      	mov	r3, r7
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7fe fe61 	bl	8000764 <printString>
		for (int i=0; i<ADC3_DMA_REQUESTS; i++)
 8001aa2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001aa8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001aaa:	2b0a      	cmp	r3, #10
 8001aac:	ddd7      	ble.n	8001a5e <printADC3data+0x22>
		}
	}
}
 8001aae:	bf00      	nop
 8001ab0:	3774      	adds	r7, #116	@ 0x74
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd90      	pop	{r4, r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	24000000 	.word	0x24000000
 8001abc:	080141bc 	.word	0x080141bc
 8001ac0:	2400032c 	.word	0x2400032c
 8001ac4:	080143a8 	.word	0x080143a8

08001ac8 <measureVoltagesTemperaturesADC3>:

// Measure voltages and temperatures using ADC3
// After the measurement is done the function doneMeasuringVoltagesTemperaturesADC3 is called
void measureVoltagesTemperaturesADC3(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_SET);

	// This will start the measurement of voltages and temperatures using ADC3
	sADC.adc3_reading = 1; //Started to read ADC3
 8001acc:	4b05      	ldr	r3, [pc, #20]	@ (8001ae4 <measureVoltagesTemperaturesADC3+0x1c>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f8a3 270c 	strh.w	r2, [r3, #1804]	@ 0x70c
	HAL_ADC_Start_DMA(&hadc3, (uint32_t *) sADC.adc3_data, ADC3_DMA_REQUESTS);
 8001ad4:	220b      	movs	r2, #11
 8001ad6:	4904      	ldr	r1, [pc, #16]	@ (8001ae8 <measureVoltagesTemperaturesADC3+0x20>)
 8001ad8:	4804      	ldr	r0, [pc, #16]	@ (8001aec <measureVoltagesTemperaturesADC3+0x24>)
 8001ada:	f003 fb9b 	bl	8005214 <HAL_ADC_Start_DMA>

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	2400032c 	.word	0x2400032c
 8001ae8:	240007dc 	.word	0x240007dc
 8001aec:	24000b60 	.word	0x24000b60

08001af0 <doneMeasuringVoltagesTemperaturesADC3>:


// Done measuring voltages and temperatures
void doneMeasuringVoltagesTemperaturesADC3(uint32_t errorCode)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_SET);

	sADC.adc3_reading = 0; //Done reading ADC3
 8001af8:	4b0b      	ldr	r3, [pc, #44]	@ (8001b28 <doneMeasuringVoltagesTemperaturesADC3+0x38>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	f8a3 270c 	strh.w	r2, [r3, #1804]	@ 0x70c

	if (errorCode == HAL_ADC_ERROR_NONE)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d006      	beq.n	8001b14 <doneMeasuringVoltagesTemperaturesADC3+0x24>
		// TODO Check temperatures

	}
	else
	{
		printNumber("ADC12 Error Code: ", errorCode, 1);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4807      	ldr	r0, [pc, #28]	@ (8001b2c <doneMeasuringVoltagesTemperaturesADC3+0x3c>)
 8001b10:	f7fe fe6a 	bl	80007e8 <printNumber>
	}


	//Start ADC1 and ADC2 measurements
	if (sFlashConfig.mode == RUN_MODE)
 8001b14:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <doneMeasuringVoltagesTemperaturesADC3+0x40>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d101      	bne.n	8001b20 <doneMeasuringVoltagesTemperaturesADC3+0x30>
		measureBridgePlasmaADC12();
 8001b1c:	f7ff fc88 	bl	8001430 <measureBridgePlasmaADC12>

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
}
 8001b20:	bf00      	nop
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	2400032c 	.word	0x2400032c
 8001b2c:	08014268 	.word	0x08014268
 8001b30:	24000a40 	.word	0x24000a40

08001b34 <GetNumber>:

// Get an integer number from UART3. If the number is valid, the function returns 1, otherwise 0.
static uint8_t GetNumber(int *number)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08a      	sub	sp, #40	@ 0x28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
	char input;
	char s_input[MAX_INPUT];
	int pos = 0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	627b      	str	r3, [r7, #36]	@ 0x24
	//Wait for user input
	HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 100000);
 8001b40:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 8001b44:	4b2f      	ldr	r3, [pc, #188]	@ (8001c04 <GetNumber+0xd0>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	482f      	ldr	r0, [pc, #188]	@ (8001c08 <GetNumber+0xd4>)
 8001b4a:	f00e f998 	bl	800fe7e <HAL_UART_Receive>
	while (input != 13)
 8001b4e:	e039      	b.n	8001bc4 <GetNumber+0x90>
	{
		// Backspace?
		if ((input == 127) && (pos > 0))
 8001b50:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001b54:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b56:	d10e      	bne.n	8001b76 <GetNumber+0x42>
 8001b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	dd0b      	ble.n	8001b76 <GetNumber+0x42>
		{
			// Delete digit
			HAL_UART_Transmit(&huart3, (uint8_t *) &input, 1, 1000);
 8001b5e:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 8001b62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b66:	2201      	movs	r2, #1
 8001b68:	4827      	ldr	r0, [pc, #156]	@ (8001c08 <GetNumber+0xd4>)
 8001b6a:	f00e f8fa 	bl	800fd62 <HAL_UART_Transmit>
			pos--;
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b70:	3b01      	subs	r3, #1
 8001b72:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b74:	e018      	b.n	8001ba8 <GetNumber+0x74>
		}
		// A digit?
		else if ((input >= 48) && (input <=57))
 8001b76:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001b7a:	2b2f      	cmp	r3, #47	@ 0x2f
 8001b7c:	d914      	bls.n	8001ba8 <GetNumber+0x74>
 8001b7e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001b82:	2b39      	cmp	r3, #57	@ 0x39
 8001b84:	d810      	bhi.n	8001ba8 <GetNumber+0x74>
		{
			// Echo digit and store it
			HAL_UART_Transmit(&huart3, (uint8_t *) &input, 1, 1000);
 8001b86:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 8001b8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b8e:	2201      	movs	r2, #1
 8001b90:	481d      	ldr	r0, [pc, #116]	@ (8001c08 <GetNumber+0xd4>)
 8001b92:	f00e f8e6 	bl	800fd62 <HAL_UART_Transmit>
			s_input[pos++] = input;
 8001b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b98:	1c5a      	adds	r2, r3, #1
 8001b9a:	627a      	str	r2, [r7, #36]	@ 0x24
 8001b9c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001ba0:	3328      	adds	r3, #40	@ 0x28
 8001ba2:	443b      	add	r3, r7
 8001ba4:	f803 2c1c 	strb.w	r2, [r3, #-28]
		}

		// Get next character
		if (pos < MAX_INPUT-1)
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001baa:	2b12      	cmp	r3, #18
 8001bac:	dc07      	bgt.n	8001bbe <GetNumber+0x8a>
		{
			HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 100000);
 8001bae:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 8001bb2:	4b14      	ldr	r3, [pc, #80]	@ (8001c04 <GetNumber+0xd0>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	4814      	ldr	r0, [pc, #80]	@ (8001c08 <GetNumber+0xd4>)
 8001bb8:	f00e f961 	bl	800fe7e <HAL_UART_Receive>
 8001bbc:	e002      	b.n	8001bc4 <GetNumber+0x90>
		}
		else
		{
			input = 13; // Terminate while loop
 8001bbe:	230d      	movs	r3, #13
 8001bc0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	while (input != 13)
 8001bc4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001bc8:	2b0d      	cmp	r3, #13
 8001bca:	d1c1      	bne.n	8001b50 <GetNumber+0x1c>
		}
	}
	s_input[pos] = 0;
 8001bcc:	f107 020c 	add.w	r2, r7, #12
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd2:	4413      	add	r3, r2
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	701a      	strb	r2, [r3, #0]
	if (pos > 0)
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	dd07      	ble.n	8001bee <GetNumber+0xba>
		*number = atoi(s_input);
 8001bde:	f107 030c 	add.w	r3, r7, #12
 8001be2:	4618      	mov	r0, r3
 8001be4:	f00f fb9e 	bl	8011324 <atoi>
 8001be8:	4602      	mov	r2, r0
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	601a      	str	r2, [r3, #0]
	return(pos > 0);
 8001bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	bfcc      	ite	gt
 8001bf4:	2301      	movgt	r3, #1
 8001bf6:	2300      	movle	r3, #0
 8001bf8:	b2db      	uxtb	r3, r3
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3728      	adds	r7, #40	@ 0x28
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	000186a0 	.word	0x000186a0
 8001c08:	24000e30 	.word	0x24000e30

08001c0c <GetUint16Input>:

// Get an 16bit unsigned number from UAR3 and validate the input againts min and max values
static uint8_t GetUint16Input(uint16_t *input, uint8_t bValidate, uint16_t min, uint16_t max)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b0a0      	sub	sp, #128	@ 0x80
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	4608      	mov	r0, r1
 8001c16:	4611      	mov	r1, r2
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	72fb      	strb	r3, [r7, #11]
 8001c1e:	460b      	mov	r3, r1
 8001c20:	813b      	strh	r3, [r7, #8]
 8001c22:	4613      	mov	r3, r2
 8001c24:	80fb      	strh	r3, [r7, #6]
	int number;
	char s_output[100];
	uint8_t result;

	result = GetNumber(&number);
 8001c26:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff ff82 	bl	8001b34 <GetNumber>
 8001c30:	4603      	mov	r3, r0
 8001c32:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (bValidate)
 8001c36:	7afb      	ldrb	r3, [r7, #11]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d02f      	beq.n	8001c9c <GetUint16Input+0x90>
	{
		if (result && (number >= min) && (number <= max))
 8001c3c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d013      	beq.n	8001c6c <GetUint16Input+0x60>
 8001c44:	893a      	ldrh	r2, [r7, #8]
 8001c46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	dc0f      	bgt.n	8001c6c <GetUint16Input+0x60>
 8001c4c:	88fa      	ldrh	r2, [r7, #6]
 8001c4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001c50:	429a      	cmp	r2, r3
 8001c52:	db0b      	blt.n	8001c6c <GetUint16Input+0x60>
		{
			*input =  number;
 8001c54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, (uint8_t *) " - Ok\n\r", 7, 1000);
 8001c5c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c60:	2207      	movs	r2, #7
 8001c62:	4911      	ldr	r1, [pc, #68]	@ (8001ca8 <GetUint16Input+0x9c>)
 8001c64:	4811      	ldr	r0, [pc, #68]	@ (8001cac <GetUint16Input+0xa0>)
 8001c66:	f00e f87c 	bl	800fd62 <HAL_UART_Transmit>
 8001c6a:	e017      	b.n	8001c9c <GetUint16Input+0x90>
		}
		else
		{
			result = 0; //Indicate failure
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			sprintf(s_output, " - Invalid number, valid range %u - %u\n\r", min, max);
 8001c72:	893a      	ldrh	r2, [r7, #8]
 8001c74:	88fb      	ldrh	r3, [r7, #6]
 8001c76:	f107 0014 	add.w	r0, r7, #20
 8001c7a:	490d      	ldr	r1, [pc, #52]	@ (8001cb0 <GetUint16Input+0xa4>)
 8001c7c:	f010 f92e 	bl	8011edc <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t *) s_output, strlen(s_output), 1000);
 8001c80:	f107 0314 	add.w	r3, r7, #20
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7fe fb93 	bl	80003b0 <strlen>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	f107 0114 	add.w	r1, r7, #20
 8001c92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c96:	4805      	ldr	r0, [pc, #20]	@ (8001cac <GetUint16Input+0xa0>)
 8001c98:	f00e f863 	bl	800fd62 <HAL_UART_Transmit>
		}
	}
	return(result);
 8001c9c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3780      	adds	r7, #128	@ 0x80
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	080143c4 	.word	0x080143c4
 8001cac:	24000e30 	.word	0x24000e30
 8001cb0:	080143cc 	.word	0x080143cc

08001cb4 <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef* hadc)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
	// ADC1 is master and ADC2 is slave
	if (hadc->Instance == ADC1)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a0e      	ldr	r2, [pc, #56]	@ (8001cfc <HAL_ADC_ErrorCallback+0x48>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d108      	bne.n	8001cd8 <HAL_ADC_ErrorCallback+0x24>
	{
		printNumber("** ERROR ** ADC12 Error Code: ", hadc->ErrorCode, 1);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	2201      	movs	r2, #1
 8001cce:	4619      	mov	r1, r3
 8001cd0:	480b      	ldr	r0, [pc, #44]	@ (8001d00 <HAL_ADC_ErrorCallback+0x4c>)
 8001cd2:	f7fe fd89 	bl	80007e8 <printNumber>
	}
	else if ((hadc->Instance == ADC3))
	{
		printNumber("** ERROR ** ADC3 Error Code: ", hadc->ErrorCode, 1);
	}
}
 8001cd6:	e00c      	b.n	8001cf2 <HAL_ADC_ErrorCallback+0x3e>
	else if ((hadc->Instance == ADC3))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a09      	ldr	r2, [pc, #36]	@ (8001d04 <HAL_ADC_ErrorCallback+0x50>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d107      	bne.n	8001cf2 <HAL_ADC_ErrorCallback+0x3e>
		printNumber("** ERROR ** ADC3 Error Code: ", hadc->ErrorCode, 1);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	2201      	movs	r2, #1
 8001cea:	4619      	mov	r1, r3
 8001cec:	4806      	ldr	r0, [pc, #24]	@ (8001d08 <HAL_ADC_ErrorCallback+0x54>)
 8001cee:	f7fe fd7b 	bl	80007e8 <printNumber>
}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40022000 	.word	0x40022000
 8001d00:	080143f8 	.word	0x080143f8
 8001d04:	58026000 	.word	0x58026000
 8001d08:	08014418 	.word	0x08014418

08001d0c <HAL_ADC_ConvCpltCallback>:

// ADC conversion and DMA transfer complete
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]

	// ADC1 is master and ADC2 is slave
	if (hadc->Instance == ADC1)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a10      	ldr	r2, [pc, #64]	@ (8001d5c <HAL_ADC_ConvCpltCallback+0x50>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d105      	bne.n	8001d2a <HAL_ADC_ConvCpltCallback+0x1e>
	{
		//HAL_ADCEx_MultiModeStop_DMA(&hadc1);
		doneMeasuringBridgePlasmaADC12(hadc->ErrorCode);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff fbde 	bl	80014e4 <doneMeasuringBridgePlasmaADC12>
	else
	{
		HAL_UART_Transmit(&huart3, (uint8_t *) "** ERROR ** Unknown ADC\n\r", 25, 1000);
		printCR();
	}
}
 8001d28:	e013      	b.n	8001d52 <HAL_ADC_ConvCpltCallback+0x46>
	else if (hadc->Instance == ADC3)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a0c      	ldr	r2, [pc, #48]	@ (8001d60 <HAL_ADC_ConvCpltCallback+0x54>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d105      	bne.n	8001d40 <HAL_ADC_ConvCpltCallback+0x34>
		doneMeasuringVoltagesTemperaturesADC3(hadc->ErrorCode);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff fed9 	bl	8001af0 <doneMeasuringVoltagesTemperaturesADC3>
}
 8001d3e:	e008      	b.n	8001d52 <HAL_ADC_ConvCpltCallback+0x46>
		HAL_UART_Transmit(&huart3, (uint8_t *) "** ERROR ** Unknown ADC\n\r", 25, 1000);
 8001d40:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d44:	2219      	movs	r2, #25
 8001d46:	4907      	ldr	r1, [pc, #28]	@ (8001d64 <HAL_ADC_ConvCpltCallback+0x58>)
 8001d48:	4807      	ldr	r0, [pc, #28]	@ (8001d68 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001d4a:	f00e f80a 	bl	800fd62 <HAL_UART_Transmit>
		printCR();
 8001d4e:	f7fe fcf9 	bl	8000744 <printCR>
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40022000 	.word	0x40022000
 8001d60:	58026000 	.word	0x58026000
 8001d64:	08014438 	.word	0x08014438
 8001d68:	24000e30 	.word	0x24000e30

08001d6c <PowerOffLowSupplies>:

//Power Off Supplies in order3.3V switch and 15V
void PowerOffLowSupplies(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
	if (powerStatus == V500_OFF)
 8001d70:	4b0d      	ldr	r3, [pc, #52]	@ (8001da8 <PowerOffLowSupplies+0x3c>)
 8001d72:	881b      	ldrh	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d110      	bne.n	8001d9a <PowerOffLowSupplies+0x2e>
	{
		//Power off 3.3V switch voltage
		HAL_GPIO_WritePin(OUT_3V3_SWITCH_GPIO_Port, OUT_3V3_SWITCH_Pin, GPIO_PIN_SET);
 8001d78:	2201      	movs	r2, #1
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	480b      	ldr	r0, [pc, #44]	@ (8001dac <PowerOffLowSupplies+0x40>)
 8001d7e:	f008 fe01 	bl	800a984 <HAL_GPIO_WritePin>
		HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001d82:	2001      	movs	r0, #1
 8001d84:	f002 fbc8 	bl	8004518 <HAL_Delay>

		//Power off 15V
		HAL_GPIO_WritePin(OUT_15V_ENABLE_GPIO_Port, OUT_15V_ENABLE_Pin, GPIO_PIN_SET);		//There is an inverter between MCU and the output, thus SET
 8001d88:	2201      	movs	r2, #1
 8001d8a:	2102      	movs	r1, #2
 8001d8c:	4807      	ldr	r0, [pc, #28]	@ (8001dac <PowerOffLowSupplies+0x40>)
 8001d8e:	f008 fdf9 	bl	800a984 <HAL_GPIO_WritePin>
		HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001d92:	2001      	movs	r0, #1
 8001d94:	f002 fbc0 	bl	8004518 <HAL_Delay>
	else
	{
		printString("** ERROR ** PowerOffLowSupplies: 500V is On\n\r");
		printCR();
	}
}
 8001d98:	e004      	b.n	8001da4 <PowerOffLowSupplies+0x38>
		printString("** ERROR ** PowerOffLowSupplies: 500V is On\n\r");
 8001d9a:	4805      	ldr	r0, [pc, #20]	@ (8001db0 <PowerOffLowSupplies+0x44>)
 8001d9c:	f7fe fce2 	bl	8000764 <printString>
		printCR();
 8001da0:	f7fe fcd0 	bl	8000744 <printCR>
}
 8001da4:	bf00      	nop
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	24000a3c 	.word	0x24000a3c
 8001dac:	58020c00 	.word	0x58020c00
 8001db0:	08014454 	.word	0x08014454

08001db4 <PowerOffHighSupplies>:


//Power Off Supply 500V
void PowerOffHighSupplies(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
	//Make sure the H-bridge outputs are zero before turning off power
	stopHbridge();
 8001db8:	f7fe fda4 	bl	8000904 <stopHbridge>

	//Power off 500V
	HAL_GPIO_WritePin(OUT_500V_ENABLE_GPIO_Port, OUT_500V_ENABLE_Pin, GPIO_PIN_SET);	//There is an inverter between MCU and the output, thus SET
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	480b      	ldr	r0, [pc, #44]	@ (8001df0 <PowerOffHighSupplies+0x3c>)
 8001dc2:	f008 fddf 	bl	800a984 <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001dc6:	2001      	movs	r0, #1
 8001dc8:	f002 fba6 	bl	8004518 <HAL_Delay>

	//Disable Line Drive 1
	HAL_GPIO_WritePin(LINE_DRIVER1_ENABLE_GPIO_Port, LINE_DRIVER1_ENABLE_Pin, GPIO_PIN_SET);
 8001dcc:	2201      	movs	r2, #1
 8001dce:	2104      	movs	r1, #4
 8001dd0:	4808      	ldr	r0, [pc, #32]	@ (8001df4 <PowerOffHighSupplies+0x40>)
 8001dd2:	f008 fdd7 	bl	800a984 <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001dd6:	2001      	movs	r0, #1
 8001dd8:	f002 fb9e 	bl	8004518 <HAL_Delay>

	//Signal to robot controller all power supplies are inactive.
	HAL_GPIO_WritePin(LED_ACTIVE_GPIO_Port, LED_ACTIVE_Pin, GPIO_PIN_SET);			//There is an inverter between MCU and the output, thus SET
 8001ddc:	2201      	movs	r2, #1
 8001dde:	2101      	movs	r1, #1
 8001de0:	4805      	ldr	r0, [pc, #20]	@ (8001df8 <PowerOffHighSupplies+0x44>)
 8001de2:	f008 fdcf 	bl	800a984 <HAL_GPIO_WritePin>

	powerStatus = V500_OFF;
 8001de6:	4b05      	ldr	r3, [pc, #20]	@ (8001dfc <PowerOffHighSupplies+0x48>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	801a      	strh	r2, [r3, #0]
}
 8001dec:	bf00      	nop
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	58021800 	.word	0x58021800
 8001df4:	58020400 	.word	0x58020400
 8001df8:	58021000 	.word	0x58021000
 8001dfc:	24000a3c 	.word	0x24000a3c

08001e00 <PowerOffSupplies>:

void PowerOffSupplies(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
	PowerOffHighSupplies();
 8001e04:	f7ff ffd6 	bl	8001db4 <PowerOffHighSupplies>
	PowerOffLowSupplies();
 8001e08:	f7ff ffb0 	bl	8001d6c <PowerOffLowSupplies>
}
 8001e0c:	bf00      	nop
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <PowerOnLowSupplies>:

//Power On Supplies in order 15V, 3.3V switch
//Returns 1 if the power up sequence was successful, and 0 if it failed
int PowerOnLowSupplies(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
	//Power on 15V
	//printString("\n\rPower on 15V - ");
	HAL_GPIO_WritePin(OUT_15V_ENABLE_GPIO_Port, OUT_15V_ENABLE_Pin, GPIO_PIN_RESET);	//There is an inverter between MCU and the output, thus RESET
 8001e14:	2200      	movs	r2, #0
 8001e16:	2102      	movs	r1, #2
 8001e18:	4818      	ldr	r0, [pc, #96]	@ (8001e7c <PowerOnLowSupplies+0x6c>)
 8001e1a:	f008 fdb3 	bl	800a984 <HAL_GPIO_WritePin>
	printString("\n\rPower on 15V - ");
 8001e1e:	4818      	ldr	r0, [pc, #96]	@ (8001e80 <PowerOnLowSupplies+0x70>)
 8001e20:	f7fe fca0 	bl	8000764 <printString>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001e24:	2001      	movs	r0, #1
 8001e26:	f002 fb77 	bl	8004518 <HAL_Delay>

	//Start reading ADC3 channels
	measureVoltagesTemperaturesADC3();
 8001e2a:	f7ff fe4d 	bl	8001ac8 <measureVoltagesTemperaturesADC3>
	//Wait until ADC3 reading is done
	while (sADC.adc3_reading) ;
 8001e2e:	bf00      	nop
 8001e30:	4b14      	ldr	r3, [pc, #80]	@ (8001e84 <PowerOnLowSupplies+0x74>)
 8001e32:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	@ 0x70c
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1f9      	bne.n	8001e30 <PowerOnLowSupplies+0x20>

	//Check 15V voltage
	if (sADC.adc3_data[ADC3_15V] >= sADC3threshold[ADC3_15V])
 8001e3c:	4b11      	ldr	r3, [pc, #68]	@ (8001e84 <PowerOnLowSupplies+0x74>)
 8001e3e:	f8b3 24b2 	ldrh.w	r2, [r3, #1202]	@ 0x4b2
 8001e42:	4b11      	ldr	r3, [pc, #68]	@ (8001e88 <PowerOnLowSupplies+0x78>)
 8001e44:	885b      	ldrh	r3, [r3, #2]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d30f      	bcc.n	8001e6a <PowerOnLowSupplies+0x5a>
		printString("Ok");
 8001e4a:	4810      	ldr	r0, [pc, #64]	@ (8001e8c <PowerOnLowSupplies+0x7c>)
 8001e4c:	f7fe fc8a 	bl	8000764 <printString>
		PowerOffLowSupplies();
		return(0);
	}

	//Power on 3.3V switch voltage
	printString("\n\rPower on 3.3V switch");
 8001e50:	480f      	ldr	r0, [pc, #60]	@ (8001e90 <PowerOnLowSupplies+0x80>)
 8001e52:	f7fe fc87 	bl	8000764 <printString>
	HAL_GPIO_WritePin(OUT_3V3_SWITCH_GPIO_Port, OUT_3V3_SWITCH_Pin, GPIO_PIN_RESET);
 8001e56:	2200      	movs	r2, #0
 8001e58:	2101      	movs	r1, #1
 8001e5a:	4808      	ldr	r0, [pc, #32]	@ (8001e7c <PowerOnLowSupplies+0x6c>)
 8001e5c:	f008 fd92 	bl	800a984 <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001e60:	2001      	movs	r0, #1
 8001e62:	f002 fb59 	bl	8004518 <HAL_Delay>

	return(1);
 8001e66:	2301      	movs	r3, #1
 8001e68:	e005      	b.n	8001e76 <PowerOnLowSupplies+0x66>
		printString("Fail");
 8001e6a:	480a      	ldr	r0, [pc, #40]	@ (8001e94 <PowerOnLowSupplies+0x84>)
 8001e6c:	f7fe fc7a 	bl	8000764 <printString>
		PowerOffLowSupplies();
 8001e70:	f7ff ff7c 	bl	8001d6c <PowerOffLowSupplies>
		return(0);
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	58020c00 	.word	0x58020c00
 8001e80:	08014484 	.word	0x08014484
 8001e84:	2400032c 	.word	0x2400032c
 8001e88:	24000004 	.word	0x24000004
 8001e8c:	08014498 	.word	0x08014498
 8001e90:	080144a4 	.word	0x080144a4
 8001e94:	0801449c 	.word	0x0801449c

08001e98 <PowerOnHighSupplies>:

//Power On Supply 500V
//Returns 1 if the power up was successful, and 0 if it failed
int PowerOnHighSupplies(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
	stopHbridge(); 	//Make sure the H-bridge outputs are zero before enabling the line driver
 8001e9c:	f7fe fd32 	bl	8000904 <stopHbridge>

	//Enable Line Drive 1
	printString("\n\rEnable Line Drive 1");
 8001ea0:	481b      	ldr	r0, [pc, #108]	@ (8001f10 <PowerOnHighSupplies+0x78>)
 8001ea2:	f7fe fc5f 	bl	8000764 <printString>
	HAL_GPIO_WritePin(LINE_DRIVER1_ENABLE_GPIO_Port, LINE_DRIVER1_ENABLE_Pin, GPIO_PIN_RESET);
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	2104      	movs	r1, #4
 8001eaa:	481a      	ldr	r0, [pc, #104]	@ (8001f14 <PowerOnHighSupplies+0x7c>)
 8001eac:	f008 fd6a 	bl	800a984 <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001eb0:	2001      	movs	r0, #1
 8001eb2:	f002 fb31 	bl	8004518 <HAL_Delay>

	//Power on 500V
	printString("\n\rPower on 500V - ");
 8001eb6:	4818      	ldr	r0, [pc, #96]	@ (8001f18 <PowerOnHighSupplies+0x80>)
 8001eb8:	f7fe fc54 	bl	8000764 <printString>
	HAL_GPIO_WritePin(OUT_500V_ENABLE_GPIO_Port, OUT_500V_ENABLE_Pin, GPIO_PIN_RESET);	//There is an inverter between MCU and the output, thus RESET
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	4816      	ldr	r0, [pc, #88]	@ (8001f1c <PowerOnHighSupplies+0x84>)
 8001ec2:	f008 fd5f 	bl	800a984 <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001ec6:	2001      	movs	r0, #1
 8001ec8:	f002 fb26 	bl	8004518 <HAL_Delay>

	//Start reading ADC3 channels
	measureVoltagesTemperaturesADC3();
 8001ecc:	f7ff fdfc 	bl	8001ac8 <measureVoltagesTemperaturesADC3>
	//Wait until ADC reading is done
	while (sADC.adc3_reading) ;
 8001ed0:	bf00      	nop
 8001ed2:	4b13      	ldr	r3, [pc, #76]	@ (8001f20 <PowerOnHighSupplies+0x88>)
 8001ed4:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	@ 0x70c
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f9      	bne.n	8001ed2 <PowerOnHighSupplies+0x3a>

	//Check 500V voltage
	if (sADC.adc3_data[ADC3_500VDC] >= sADC3threshold[ADC3_500VDC])
 8001ede:	4b10      	ldr	r3, [pc, #64]	@ (8001f20 <PowerOnHighSupplies+0x88>)
 8001ee0:	f8b3 24ba 	ldrh.w	r2, [r3, #1210]	@ 0x4ba
 8001ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8001f24 <PowerOnHighSupplies+0x8c>)
 8001ee6:	895b      	ldrh	r3, [r3, #10]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d303      	bcc.n	8001ef4 <PowerOnHighSupplies+0x5c>
		printString("Ok");
 8001eec:	480e      	ldr	r0, [pc, #56]	@ (8001f28 <PowerOnHighSupplies+0x90>)
 8001eee:	f7fe fc39 	bl	8000764 <printString>
 8001ef2:	e002      	b.n	8001efa <PowerOnHighSupplies+0x62>
	else
	{
		//printString("Fail");
		printString("debug");
 8001ef4:	480d      	ldr	r0, [pc, #52]	@ (8001f2c <PowerOnHighSupplies+0x94>)
 8001ef6:	f7fe fc35 	bl	8000764 <printString>
		//PowerOffHighSupplies();
		//return(0);
	}

	//Signal to robot controller all power supplies are active
	HAL_GPIO_WritePin(LED_ACTIVE_GPIO_Port, LED_ACTIVE_Pin, GPIO_PIN_RESET);	//There is an inverter between MCU and the output, thus RESET
 8001efa:	2200      	movs	r2, #0
 8001efc:	2101      	movs	r1, #1
 8001efe:	480c      	ldr	r0, [pc, #48]	@ (8001f30 <PowerOnHighSupplies+0x98>)
 8001f00:	f008 fd40 	bl	800a984 <HAL_GPIO_WritePin>

	powerStatus = V500_ON;
 8001f04:	4b0b      	ldr	r3, [pc, #44]	@ (8001f34 <PowerOnHighSupplies+0x9c>)
 8001f06:	2201      	movs	r2, #1
 8001f08:	801a      	strh	r2, [r3, #0]

	return(1);
 8001f0a:	2301      	movs	r3, #1
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	080144bc 	.word	0x080144bc
 8001f14:	58020400 	.word	0x58020400
 8001f18:	080144d4 	.word	0x080144d4
 8001f1c:	58021800 	.word	0x58021800
 8001f20:	2400032c 	.word	0x2400032c
 8001f24:	24000004 	.word	0x24000004
 8001f28:	08014498 	.word	0x08014498
 8001f2c:	080144e8 	.word	0x080144e8
 8001f30:	58021000 	.word	0x58021000
 8001f34:	24000a3c 	.word	0x24000a3c

08001f38 <HAL_GPIO_EXTI_Callback>:

// GPIO interrupt handler
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	80fb      	strh	r3, [r7, #6]
	if (sFlashConfig.mode == RUN_MODE)
 8001f42:	4b07      	ldr	r3, [pc, #28]	@ (8001f60 <HAL_GPIO_EXTI_Callback+0x28>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d105      	bne.n	8001f56 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		// Power off request received
		if(GPIO_Pin == POWER_OFF_IRQ_Pin)
 8001f4a:	88fb      	ldrh	r3, [r7, #6]
 8001f4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f50:	d101      	bne.n	8001f56 <HAL_GPIO_EXTI_Callback+0x1e>
			PowerOffSupplies();
 8001f52:	f7ff ff55 	bl	8001e00 <PowerOffSupplies>
	}
}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	24000a40 	.word	0x24000a40

08001f64 <InitializeConfigMenu>:

// Initialize the UART3 configuration menu
static void InitializeConfigMenu(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
	int item = 0;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	607b      	str	r3, [r7, #4]

	config_menu[item++] = "\n\rPlasma Driver Configuration Menu";
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	1c5a      	adds	r2, r3, #1
 8001f72:	607a      	str	r2, [r7, #4]
 8001f74:	4a0c      	ldr	r2, [pc, #48]	@ (8001fa8 <InitializeConfigMenu+0x44>)
 8001f76:	490d      	ldr	r1, [pc, #52]	@ (8001fac <InitializeConfigMenu+0x48>)
 8001f78:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	config_menu[item++] = "   m: Change mode (Test/Run)";
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	1c5a      	adds	r2, r3, #1
 8001f80:	607a      	str	r2, [r7, #4]
 8001f82:	4a09      	ldr	r2, [pc, #36]	@ (8001fa8 <InitializeConfigMenu+0x44>)
 8001f84:	490a      	ldr	r1, [pc, #40]	@ (8001fb0 <InitializeConfigMenu+0x4c>)
 8001f86:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if (item > CONFIG_MENU_SIZE)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	dd06      	ble.n	8001f9e <InitializeConfigMenu+0x3a>
		HAL_UART_Transmit(&huart3, (uint8_t *) "\n\rIncrease CONFIG_MENU_SIZE", 20, 1000);
 8001f90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f94:	2214      	movs	r2, #20
 8001f96:	4907      	ldr	r1, [pc, #28]	@ (8001fb4 <InitializeConfigMenu+0x50>)
 8001f98:	4807      	ldr	r0, [pc, #28]	@ (8001fb8 <InitializeConfigMenu+0x54>)
 8001f9a:	f00d fee2 	bl	800fd62 <HAL_UART_Transmit>

}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	24000324 	.word	0x24000324
 8001fac:	080144f0 	.word	0x080144f0
 8001fb0:	08014514 	.word	0x08014514
 8001fb4:	08014534 	.word	0x08014534
 8001fb8:	24000e30 	.word	0x24000e30

08001fbc <InitializeMenu>:

// Initialize the UART3 menu
static void InitializeMenu(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
	int item = 0;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	607b      	str	r3, [r7, #4]

	//Clear previous menu
	for (int i=0; i < MAX_MENU_SIZE; ++i)
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	603b      	str	r3, [r7, #0]
 8001fca:	e007      	b.n	8001fdc <InitializeMenu+0x20>
	{
		menu[i] = "";
 8001fcc:	4a4b      	ldr	r2, [pc, #300]	@ (80020fc <InitializeMenu+0x140>)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	494b      	ldr	r1, [pc, #300]	@ (8002100 <InitializeMenu+0x144>)
 8001fd2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i=0; i < MAX_MENU_SIZE; ++i)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	603b      	str	r3, [r7, #0]
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	2b0c      	cmp	r3, #12
 8001fe0:	ddf4      	ble.n	8001fcc <InitializeMenu+0x10>
	}

	if (sFlashConfig.mode == TEST_MODE)
 8001fe2:	4b48      	ldr	r3, [pc, #288]	@ (8002104 <InitializeMenu+0x148>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d15b      	bne.n	80020a2 <InitializeMenu+0xe6>
	{
		menu[item++] = "\n\rPlasma Driver TEST Menu";
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	1c5a      	adds	r2, r3, #1
 8001fee:	607a      	str	r2, [r7, #4]
 8001ff0:	4a42      	ldr	r2, [pc, #264]	@ (80020fc <InitializeMenu+0x140>)
 8001ff2:	4945      	ldr	r1, [pc, #276]	@ (8002108 <InitializeMenu+0x14c>)
 8001ff4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   p: Power on supplies";
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	1c5a      	adds	r2, r3, #1
 8001ffc:	607a      	str	r2, [r7, #4]
 8001ffe:	4a3f      	ldr	r2, [pc, #252]	@ (80020fc <InitializeMenu+0x140>)
 8002000:	4942      	ldr	r1, [pc, #264]	@ (800210c <InitializeMenu+0x150>)
 8002002:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   o: Power off supplies";
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	1c5a      	adds	r2, r3, #1
 800200a:	607a      	str	r2, [r7, #4]
 800200c:	4a3b      	ldr	r2, [pc, #236]	@ (80020fc <InitializeMenu+0x140>)
 800200e:	4940      	ldr	r1, [pc, #256]	@ (8002110 <InitializeMenu+0x154>)
 8002010:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   s: Start/stop driving H-Bridge";
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	1c5a      	adds	r2, r3, #1
 8002018:	607a      	str	r2, [r7, #4]
 800201a:	4a38      	ldr	r2, [pc, #224]	@ (80020fc <InitializeMenu+0x140>)
 800201c:	493d      	ldr	r1, [pc, #244]	@ (8002114 <InitializeMenu+0x158>)
 800201e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   f: Set H-bridge frequency (Hz)";
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	1c5a      	adds	r2, r3, #1
 8002026:	607a      	str	r2, [r7, #4]
 8002028:	4a34      	ldr	r2, [pc, #208]	@ (80020fc <InitializeMenu+0x140>)
 800202a:	493b      	ldr	r1, [pc, #236]	@ (8002118 <InitializeMenu+0x15c>)
 800202c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   d: Set H-bridge dead time (%)";
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	1c5a      	adds	r2, r3, #1
 8002034:	607a      	str	r2, [r7, #4]
 8002036:	4a31      	ldr	r2, [pc, #196]	@ (80020fc <InitializeMenu+0x140>)
 8002038:	4938      	ldr	r1, [pc, #224]	@ (800211c <InitializeMenu+0x160>)
 800203a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   a: Start ADC1 and ADC2 measurement";
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	1c5a      	adds	r2, r3, #1
 8002042:	607a      	str	r2, [r7, #4]
 8002044:	4a2d      	ldr	r2, [pc, #180]	@ (80020fc <InitializeMenu+0x140>)
 8002046:	4936      	ldr	r1, [pc, #216]	@ (8002120 <InitializeMenu+0x164>)
 8002048:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   b: Start ADC3 measurement";
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	1c5a      	adds	r2, r3, #1
 8002050:	607a      	str	r2, [r7, #4]
 8002052:	4a2a      	ldr	r2, [pc, #168]	@ (80020fc <InitializeMenu+0x140>)
 8002054:	4933      	ldr	r1, [pc, #204]	@ (8002124 <InitializeMenu+0x168>)
 8002056:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   q: Frequency correction";
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	1c5a      	adds	r2, r3, #1
 800205e:	607a      	str	r2, [r7, #4]
 8002060:	4a26      	ldr	r2, [pc, #152]	@ (80020fc <InitializeMenu+0x140>)
 8002062:	4931      	ldr	r1, [pc, #196]	@ (8002128 <InitializeMenu+0x16c>)
 8002064:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   z: Debug output (On/Off)";
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	1c5a      	adds	r2, r3, #1
 800206c:	607a      	str	r2, [r7, #4]
 800206e:	4a23      	ldr	r2, [pc, #140]	@ (80020fc <InitializeMenu+0x140>)
 8002070:	492e      	ldr	r1, [pc, #184]	@ (800212c <InitializeMenu+0x170>)
 8002072:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   c: Show/Change configuration";
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	1c5a      	adds	r2, r3, #1
 800207a:	607a      	str	r2, [r7, #4]
 800207c:	4a1f      	ldr	r2, [pc, #124]	@ (80020fc <InitializeMenu+0x140>)
 800207e:	492c      	ldr	r1, [pc, #176]	@ (8002130 <InitializeMenu+0x174>)
 8002080:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   t: Test GPIO";
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	1c5a      	adds	r2, r3, #1
 8002088:	607a      	str	r2, [r7, #4]
 800208a:	4a1c      	ldr	r2, [pc, #112]	@ (80020fc <InitializeMenu+0x140>)
 800208c:	4929      	ldr	r1, [pc, #164]	@ (8002134 <InitializeMenu+0x178>)
 800208e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   y: Auto Frequency Adjustment";
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	1c5a      	adds	r2, r3, #1
 8002096:	607a      	str	r2, [r7, #4]
 8002098:	4a18      	ldr	r2, [pc, #96]	@ (80020fc <InitializeMenu+0x140>)
 800209a:	4927      	ldr	r1, [pc, #156]	@ (8002138 <InitializeMenu+0x17c>)
 800209c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80020a0:	e019      	b.n	80020d6 <InitializeMenu+0x11a>
	}
	else if ((sFlashConfig.mode == RUN_MODE))
 80020a2:	4b18      	ldr	r3, [pc, #96]	@ (8002104 <InitializeMenu+0x148>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d10e      	bne.n	80020c8 <InitializeMenu+0x10c>
	{
		menu[item++] = "\n\rPlasma Driver RUN Menu";
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	1c5a      	adds	r2, r3, #1
 80020ae:	607a      	str	r2, [r7, #4]
 80020b0:	4a12      	ldr	r2, [pc, #72]	@ (80020fc <InitializeMenu+0x140>)
 80020b2:	4922      	ldr	r1, [pc, #136]	@ (800213c <InitializeMenu+0x180>)
 80020b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   c: Show/Change current configuration";
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	1c5a      	adds	r2, r3, #1
 80020bc:	607a      	str	r2, [r7, #4]
 80020be:	4a0f      	ldr	r2, [pc, #60]	@ (80020fc <InitializeMenu+0x140>)
 80020c0:	491f      	ldr	r1, [pc, #124]	@ (8002140 <InitializeMenu+0x184>)
 80020c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80020c6:	e006      	b.n	80020d6 <InitializeMenu+0x11a>
	}
	else
	{
		menu[item++] = "\n\rERROR SETTING UP MENU";
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	1c5a      	adds	r2, r3, #1
 80020cc:	607a      	str	r2, [r7, #4]
 80020ce:	4a0b      	ldr	r2, [pc, #44]	@ (80020fc <InitializeMenu+0x140>)
 80020d0:	491c      	ldr	r1, [pc, #112]	@ (8002144 <InitializeMenu+0x188>)
 80020d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	menu_size = item;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	b29a      	uxth	r2, r3
 80020da:	4b1b      	ldr	r3, [pc, #108]	@ (8002148 <InitializeMenu+0x18c>)
 80020dc:	801a      	strh	r2, [r3, #0]

	if (menu_size> MAX_MENU_SIZE)
 80020de:	4b1a      	ldr	r3, [pc, #104]	@ (8002148 <InitializeMenu+0x18c>)
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	2b0d      	cmp	r3, #13
 80020e4:	d906      	bls.n	80020f4 <InitializeMenu+0x138>
		HAL_UART_Transmit(&huart3, (uint8_t *) "\n\rIncrease MENU_SIZE", 20, 1000);
 80020e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020ea:	2214      	movs	r2, #20
 80020ec:	4917      	ldr	r1, [pc, #92]	@ (800214c <InitializeMenu+0x190>)
 80020ee:	4818      	ldr	r0, [pc, #96]	@ (8002150 <InitializeMenu+0x194>)
 80020f0:	f00d fe37 	bl	800fd62 <HAL_UART_Transmit>

}
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	240002ec 	.word	0x240002ec
 8002100:	08014550 	.word	0x08014550
 8002104:	24000a40 	.word	0x24000a40
 8002108:	08014554 	.word	0x08014554
 800210c:	08014570 	.word	0x08014570
 8002110:	08014588 	.word	0x08014588
 8002114:	080145a4 	.word	0x080145a4
 8002118:	080145c8 	.word	0x080145c8
 800211c:	080145ec 	.word	0x080145ec
 8002120:	08014610 	.word	0x08014610
 8002124:	08014638 	.word	0x08014638
 8002128:	08014658 	.word	0x08014658
 800212c:	08014674 	.word	0x08014674
 8002130:	08014690 	.word	0x08014690
 8002134:	080146b0 	.word	0x080146b0
 8002138:	080146c0 	.word	0x080146c0
 800213c:	080146e0 	.word	0x080146e0
 8002140:	080146fc 	.word	0x080146fc
 8002144:	08014724 	.word	0x08014724
 8002148:	24000320 	.word	0x24000320
 800214c:	0801473c 	.word	0x0801473c
 8002150:	24000e30 	.word	0x24000e30

08002154 <ShowChangeConfigFlash>:

// Show configuration. Add option to change configuration
void ShowChangeConfigFlash(void)
{
 8002154:	b590      	push	{r4, r7, lr}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
	uint16_t aYes;
	uint16_t mode;
	char input;

	printConfigFlash();
 800215a:	f7fe fb19 	bl	8000790 <printConfigFlash>
	printString("\n\rChange configuration (0:No 1:Yes)? ");
 800215e:	482e      	ldr	r0, [pc, #184]	@ (8002218 <ShowChangeConfigFlash+0xc4>)
 8002160:	f7fe fb00 	bl	8000764 <printString>
	if (GetUint16Input(&aYes, 1, 0, 1))
 8002164:	f107 000a 	add.w	r0, r7, #10
 8002168:	2301      	movs	r3, #1
 800216a:	2200      	movs	r2, #0
 800216c:	2101      	movs	r1, #1
 800216e:	f7ff fd4d 	bl	8001c0c <GetUint16Input>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d04b      	beq.n	8002210 <ShowChangeConfigFlash+0xbc>
	{
		if (aYes)
 8002178:	897b      	ldrh	r3, [r7, #10]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d048      	beq.n	8002210 <ShowChangeConfigFlash+0xbc>
		{
			for (int i=0; i<CONFIG_MENU_SIZE; i++)
 800217e:	2300      	movs	r3, #0
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	e017      	b.n	80021b4 <ShowChangeConfigFlash+0x60>
			{
				HAL_UART_Transmit(&huart3, (uint8_t *) config_menu[i], strlen(config_menu[i]), 1000);
 8002184:	4a25      	ldr	r2, [pc, #148]	@ (800221c <ShowChangeConfigFlash+0xc8>)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800218c:	4a23      	ldr	r2, [pc, #140]	@ (800221c <ShowChangeConfigFlash+0xc8>)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002194:	4618      	mov	r0, r3
 8002196:	f7fe f90b 	bl	80003b0 <strlen>
 800219a:	4603      	mov	r3, r0
 800219c:	b29a      	uxth	r2, r3
 800219e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021a2:	4621      	mov	r1, r4
 80021a4:	481e      	ldr	r0, [pc, #120]	@ (8002220 <ShowChangeConfigFlash+0xcc>)
 80021a6:	f00d fddc 	bl	800fd62 <HAL_UART_Transmit>
				printCR();
 80021aa:	f7fe facb 	bl	8000744 <printCR>
			for (int i=0; i<CONFIG_MENU_SIZE; i++)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	3301      	adds	r3, #1
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	dde4      	ble.n	8002184 <ShowChangeConfigFlash+0x30>
			}
			printCR();
 80021ba:	f7fe fac3 	bl	8000744 <printCR>

			//Wait for user input
			if (HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 60000) == HAL_OK)
 80021be:	1df9      	adds	r1, r7, #7
 80021c0:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80021c4:	2201      	movs	r2, #1
 80021c6:	4816      	ldr	r0, [pc, #88]	@ (8002220 <ShowChangeConfigFlash+0xcc>)
 80021c8:	f00d fe59 	bl	800fe7e <HAL_UART_Receive>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d11e      	bne.n	8002210 <ShowChangeConfigFlash+0xbc>
			{
				switch (input)
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	2b6d      	cmp	r3, #109	@ 0x6d
 80021d6:	d11b      	bne.n	8002210 <ShowChangeConfigFlash+0xbc>
				{
					case 'm': //Change mode
						printString("\n\rChange mode (0:Test 1:Run)? ");
 80021d8:	4812      	ldr	r0, [pc, #72]	@ (8002224 <ShowChangeConfigFlash+0xd0>)
 80021da:	f7fe fac3 	bl	8000764 <printString>
						if (GetUint16Input(&mode, 1, 0, 1))
 80021de:	f107 0008 	add.w	r0, r7, #8
 80021e2:	2301      	movs	r3, #1
 80021e4:	2200      	movs	r2, #0
 80021e6:	2101      	movs	r1, #1
 80021e8:	f7ff fd10 	bl	8001c0c <GetUint16Input>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00d      	beq.n	800220e <ShowChangeConfigFlash+0xba>
						{   // Data entry valid
							if (sFlashConfig.mode != mode)
 80021f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002228 <ShowChangeConfigFlash+0xd4>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	461a      	mov	r2, r3
 80021f8:	893b      	ldrh	r3, [r7, #8]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d007      	beq.n	800220e <ShowChangeConfigFlash+0xba>
							{
								sFlashConfig.mode = mode;
 80021fe:	893b      	ldrh	r3, [r7, #8]
 8002200:	b2da      	uxtb	r2, r3
 8002202:	4b09      	ldr	r3, [pc, #36]	@ (8002228 <ShowChangeConfigFlash+0xd4>)
 8002204:	701a      	strb	r2, [r3, #0]
								InitializeMenu();
 8002206:	f7ff fed9 	bl	8001fbc <InitializeMenu>
								writeConfigFlash();
 800220a:	f7fe fa51 	bl	80006b0 <writeConfigFlash>
							}
						}
					break;
 800220e:	bf00      	nop
				}
			}
		}
	}
}
 8002210:	bf00      	nop
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	bd90      	pop	{r4, r7, pc}
 8002218:	08014754 	.word	0x08014754
 800221c:	24000324 	.word	0x24000324
 8002220:	24000e30 	.word	0x24000e30
 8002224:	0801477c 	.word	0x0801477c
 8002228:	24000a40 	.word	0x24000a40

0800222c <testGPIO>:

//Test GPIO settings
void testGPIO(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0

		printString("\n\rClear LED_GREEN");
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
		GetUint16Input(&aYes, 1, 0, 1);
*/
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <RunModeAction>:

// Action table for the run mode menu
static void RunModeAction(char input)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b082      	sub	sp, #8
 800223e:	af00      	add	r7, sp, #0
 8002240:	4603      	mov	r3, r0
 8002242:	71fb      	strb	r3, [r7, #7]
	switch (input)
 8002244:	79fb      	ldrb	r3, [r7, #7]
 8002246:	2b63      	cmp	r3, #99	@ 0x63
 8002248:	d102      	bne.n	8002250 <RunModeAction+0x16>
	{
		case 'c': //Show/Change current configuration
			ShowChangeConfigFlash();
 800224a:	f7ff ff83 	bl	8002154 <ShowChangeConfigFlash>
			break;
 800224e:	bf00      	nop
	}
}
 8002250:	bf00      	nop
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <TestModeAction>:

// Action table for the test mode menu
static void TestModeAction(char input)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b09c      	sub	sp, #112	@ 0x70
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	71fb      	strb	r3, [r7, #7]
	switch (input)
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	3b61      	subs	r3, #97	@ 0x61
 8002266:	2b19      	cmp	r3, #25
 8002268:	f200 80e6 	bhi.w	8002438 <TestModeAction+0x1e0>
 800226c:	a201      	add	r2, pc, #4	@ (adr r2, 8002274 <TestModeAction+0x1c>)
 800226e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002272:	bf00      	nop
 8002274:	08002313 	.word	0x08002313
 8002278:	0800233b 	.word	0x0800233b
 800227c:	08002419 	.word	0x08002419
 8002280:	0800237d 	.word	0x0800237d
 8002284:	08002439 	.word	0x08002439
 8002288:	08002353 	.word	0x08002353
 800228c:	08002439 	.word	0x08002439
 8002290:	08002439 	.word	0x08002439
 8002294:	08002439 	.word	0x08002439
 8002298:	08002439 	.word	0x08002439
 800229c:	08002439 	.word	0x08002439
 80022a0:	08002439 	.word	0x08002439
 80022a4:	08002439 	.word	0x08002439
 80022a8:	08002439 	.word	0x08002439
 80022ac:	08002307 	.word	0x08002307
 80022b0:	080022dd 	.word	0x080022dd
 80022b4:	080023c9 	.word	0x080023c9
 80022b8:	08002439 	.word	0x08002439
 80022bc:	080023a3 	.word	0x080023a3
 80022c0:	0800241f 	.word	0x0800241f
 80022c4:	08002439 	.word	0x08002439
 80022c8:	08002439 	.word	0x08002439
 80022cc:	08002439 	.word	0x08002439
 80022d0:	08002439 	.word	0x08002439
 80022d4:	08002425 	.word	0x08002425
 80022d8:	080023f7 	.word	0x080023f7
	{
		case 'p': //Power supplies on
			if (powerStatus == V500_OFF)
 80022dc:	4b58      	ldr	r3, [pc, #352]	@ (8002440 <TestModeAction+0x1e8>)
 80022de:	881b      	ldrh	r3, [r3, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d10c      	bne.n	80022fe <TestModeAction+0xa6>
			{
				if (PowerOnHighSupplies() == POWERON_FAILED)
 80022e4:	f7ff fdd8 	bl	8001e98 <PowerOnHighSupplies>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d103      	bne.n	80022f6 <TestModeAction+0x9e>
				{
					printString("\n\rPower on failed\n\r");
 80022ee:	4855      	ldr	r0, [pc, #340]	@ (8002444 <TestModeAction+0x1ec>)
 80022f0:	f7fe fa38 	bl	8000764 <printString>
			}
			else
			{
				printString("\n\rPower supplies are on\n\r");
			}
			break;
 80022f4:	e0a0      	b.n	8002438 <TestModeAction+0x1e0>
					printString("\n\rPower on succeeded\n\r");
 80022f6:	4854      	ldr	r0, [pc, #336]	@ (8002448 <TestModeAction+0x1f0>)
 80022f8:	f7fe fa34 	bl	8000764 <printString>
			break;
 80022fc:	e09c      	b.n	8002438 <TestModeAction+0x1e0>
				printString("\n\rPower supplies are on\n\r");
 80022fe:	4853      	ldr	r0, [pc, #332]	@ (800244c <TestModeAction+0x1f4>)
 8002300:	f7fe fa30 	bl	8000764 <printString>
			break;
 8002304:	e098      	b.n	8002438 <TestModeAction+0x1e0>

		case 'o': //Power supplies off
			printString("\n\rPower off supplies\n\r");
 8002306:	4852      	ldr	r0, [pc, #328]	@ (8002450 <TestModeAction+0x1f8>)
 8002308:	f7fe fa2c 	bl	8000764 <printString>
			PowerOffHighSupplies();
 800230c:	f7ff fd52 	bl	8001db4 <PowerOffHighSupplies>
			break;
 8002310:	e092      	b.n	8002438 <TestModeAction+0x1e0>

		case 'a': //Start ADC1 and ADC2 analog voltage measurement
			if (sHbridge.on)
 8002312:	4b50      	ldr	r3, [pc, #320]	@ (8002454 <TestModeAction+0x1fc>)
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d00b      	beq.n	8002332 <TestModeAction+0xda>
			{
				//Setup to read ADC1 and ADC2 channels
				//Reading will start at TIM1 CH1 0->1 interrupt
				measureBridgePlasmaADC12();
 800231a:	f7ff f889 	bl	8001430 <measureBridgePlasmaADC12>
				//Wait until ADC3 reading is done
				while (sADC.adc12_reading) ;
 800231e:	bf00      	nop
 8002320:	4b4d      	ldr	r3, [pc, #308]	@ (8002458 <TestModeAction+0x200>)
 8002322:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	@ 0x70e
 8002326:	b29b      	uxth	r3, r3
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1f9      	bne.n	8002320 <TestModeAction+0xc8>
				//Print ADC3 data on UART3
				printADC12data();
 800232c:	f7fe fe70 	bl	8001010 <printADC12data>
			}
			else
			{
				printString("\n\r ---- H-Bridge needs to be on");
			}
			break;
 8002330:	e082      	b.n	8002438 <TestModeAction+0x1e0>
				printString("\n\r ---- H-Bridge needs to be on");
 8002332:	484a      	ldr	r0, [pc, #296]	@ (800245c <TestModeAction+0x204>)
 8002334:	f7fe fa16 	bl	8000764 <printString>
			break;
 8002338:	e07e      	b.n	8002438 <TestModeAction+0x1e0>

		case 'b': //Start ADC3 analog voltage measurement
				//Start reading ADC3 channels
				measureVoltagesTemperaturesADC3();
 800233a:	f7ff fbc5 	bl	8001ac8 <measureVoltagesTemperaturesADC3>
				//Wait until ADC3 reading is done
				while (sADC.adc3_reading) ;
 800233e:	bf00      	nop
 8002340:	4b45      	ldr	r3, [pc, #276]	@ (8002458 <TestModeAction+0x200>)
 8002342:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	@ 0x70c
 8002346:	b29b      	uxth	r3, r3
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1f9      	bne.n	8002340 <TestModeAction+0xe8>
				//Print ADC3 data on UART3
				printADC3data();
 800234c:	f7ff fb76 	bl	8001a3c <printADC3data>
			break;
 8002350:	e072      	b.n	8002438 <TestModeAction+0x1e0>

		case 'f': //Enter frequency (Hz)
			printHbridgeData();
 8002352:	f7fe fb05 	bl	8000960 <printHbridgeData>
			printString("\n\rEnter frequency (Hz): ");
 8002356:	4842      	ldr	r0, [pc, #264]	@ (8002460 <TestModeAction+0x208>)
 8002358:	f7fe fa04 	bl	8000764 <printString>
			if (GetUint16Input(&sHbridge.frequency, 1, MIN_FREQUENCY, MAX_FREQUENCY))
 800235c:	f64f 53e8 	movw	r3, #65000	@ 0xfde8
 8002360:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8002364:	2101      	movs	r1, #1
 8002366:	483f      	ldr	r0, [pc, #252]	@ (8002464 <TestModeAction+0x20c>)
 8002368:	f7ff fc50 	bl	8001c0c <GetUint16Input>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d05b      	beq.n	800242a <TestModeAction+0x1d2>
			{   // Data entry valid
				programHbridge();
 8002372:	f7fe fb1d 	bl	80009b0 <programHbridge>
				printHbridgeData();
 8002376:	f7fe faf3 	bl	8000960 <printHbridgeData>
			}
			break;
 800237a:	e056      	b.n	800242a <TestModeAction+0x1d2>

		case 'd': //Enter dead time (%)
			printHbridgeData();
 800237c:	f7fe faf0 	bl	8000960 <printHbridgeData>
			printString("\n\rEnter dead time (%): ");
 8002380:	4839      	ldr	r0, [pc, #228]	@ (8002468 <TestModeAction+0x210>)
 8002382:	f7fe f9ef 	bl	8000764 <printString>
			if (GetUint16Input(&sHbridge.deadtime, 1, MIN_DEADTIME, MAX_DEADTIME))
 8002386:	2328      	movs	r3, #40	@ 0x28
 8002388:	2201      	movs	r2, #1
 800238a:	2101      	movs	r1, #1
 800238c:	4837      	ldr	r0, [pc, #220]	@ (800246c <TestModeAction+0x214>)
 800238e:	f7ff fc3d 	bl	8001c0c <GetUint16Input>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d04a      	beq.n	800242e <TestModeAction+0x1d6>
			{   // Data entry valid
				programHbridge();
 8002398:	f7fe fb0a 	bl	80009b0 <programHbridge>
				printHbridgeData();
 800239c:	f7fe fae0 	bl	8000960 <printHbridgeData>
			}
			break;
 80023a0:	e045      	b.n	800242e <TestModeAction+0x1d6>

		case 's': //Start/stop driving H-bridge
			printHbridgeData();
 80023a2:	f7fe fadd 	bl	8000960 <printHbridgeData>
			printString("\n\rDrive H-bridge 1:Yes 0:No : ");
 80023a6:	4832      	ldr	r0, [pc, #200]	@ (8002470 <TestModeAction+0x218>)
 80023a8:	f7fe f9dc 	bl	8000764 <printString>
			if (GetUint16Input(&sHbridge.on, 1, 0, 1))
 80023ac:	2301      	movs	r3, #1
 80023ae:	2200      	movs	r2, #0
 80023b0:	2101      	movs	r1, #1
 80023b2:	4828      	ldr	r0, [pc, #160]	@ (8002454 <TestModeAction+0x1fc>)
 80023b4:	f7ff fc2a 	bl	8001c0c <GetUint16Input>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d039      	beq.n	8002432 <TestModeAction+0x1da>
			{   // Data entry valid
				programHbridge();
 80023be:	f7fe faf7 	bl	80009b0 <programHbridge>
				printHbridgeData();
 80023c2:	f7fe facd 	bl	8000960 <printHbridgeData>
			}
			break;
 80023c6:	e034      	b.n	8002432 <TestModeAction+0x1da>

		case 'q': //Frequency correction
			int16_t freqCorr;
			if (freqCorrection(&freqCorr))
 80023c8:	f107 036e 	add.w	r3, r7, #110	@ 0x6e
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7fe ff6d 	bl	80012ac <freqCorrection>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d02e      	beq.n	8002436 <TestModeAction+0x1de>
			{
				char text[100];
				sprintf(text, "\n\rFrequency correction: %i", (int) freqCorr);
 80023d8:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 80023dc:	461a      	mov	r2, r3
 80023de:	f107 0308 	add.w	r3, r7, #8
 80023e2:	4924      	ldr	r1, [pc, #144]	@ (8002474 <TestModeAction+0x21c>)
 80023e4:	4618      	mov	r0, r3
 80023e6:	f00f fd79 	bl	8011edc <siprintf>
				printString(text);
 80023ea:	f107 0308 	add.w	r3, r7, #8
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fe f9b8 	bl	8000764 <printString>
			}
			break;
 80023f4:	e01f      	b.n	8002436 <TestModeAction+0x1de>

		case 'z': //Debug output
			printNumber("\n\rCurrent Debug output: ", debug, 0);
 80023f6:	4b20      	ldr	r3, [pc, #128]	@ (8002478 <TestModeAction+0x220>)
 80023f8:	881b      	ldrh	r3, [r3, #0]
 80023fa:	2200      	movs	r2, #0
 80023fc:	4619      	mov	r1, r3
 80023fe:	481f      	ldr	r0, [pc, #124]	@ (800247c <TestModeAction+0x224>)
 8002400:	f7fe f9f2 	bl	80007e8 <printNumber>
			printString("\n\rSet Debug output 1:On 0:Off : ");
 8002404:	481e      	ldr	r0, [pc, #120]	@ (8002480 <TestModeAction+0x228>)
 8002406:	f7fe f9ad 	bl	8000764 <printString>
			GetUint16Input(&debug, 1, 0, 1);
 800240a:	2301      	movs	r3, #1
 800240c:	2200      	movs	r2, #0
 800240e:	2101      	movs	r1, #1
 8002410:	4819      	ldr	r0, [pc, #100]	@ (8002478 <TestModeAction+0x220>)
 8002412:	f7ff fbfb 	bl	8001c0c <GetUint16Input>
			break;
 8002416:	e00f      	b.n	8002438 <TestModeAction+0x1e0>

		case 'c': //Show/Change current configuration
			ShowChangeConfigFlash();
 8002418:	f7ff fe9c 	bl	8002154 <ShowChangeConfigFlash>
			break;
 800241c:	e00c      	b.n	8002438 <TestModeAction+0x1e0>

		case 't': //Test GPIO
			testGPIO();
 800241e:	f7ff ff05 	bl	800222c <testGPIO>
			break;
 8002422:	e009      	b.n	8002438 <TestModeAction+0x1e0>

		case 'y': //Auto Freq Adjust
			autoFreqAdj();
 8002424:	f7ff f994 	bl	8001750 <autoFreqAdj>
			break;
 8002428:	e006      	b.n	8002438 <TestModeAction+0x1e0>
			break;
 800242a:	bf00      	nop
 800242c:	e004      	b.n	8002438 <TestModeAction+0x1e0>
			break;
 800242e:	bf00      	nop
 8002430:	e002      	b.n	8002438 <TestModeAction+0x1e0>
			break;
 8002432:	bf00      	nop
 8002434:	e000      	b.n	8002438 <TestModeAction+0x1e0>
			break;
 8002436:	bf00      	nop
	}
}
 8002438:	bf00      	nop
 800243a:	3770      	adds	r7, #112	@ 0x70
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	24000a3c 	.word	0x24000a3c
 8002444:	0801479c 	.word	0x0801479c
 8002448:	080147b0 	.word	0x080147b0
 800244c:	080147c8 	.word	0x080147c8
 8002450:	080147e4 	.word	0x080147e4
 8002454:	2400001c 	.word	0x2400001c
 8002458:	2400032c 	.word	0x2400032c
 800245c:	080147fc 	.word	0x080147fc
 8002460:	0801481c 	.word	0x0801481c
 8002464:	2400001e 	.word	0x2400001e
 8002468:	08014838 	.word	0x08014838
 800246c:	24000020 	.word	0x24000020
 8002470:	08014850 	.word	0x08014850
 8002474:	08014870 	.word	0x08014870
 8002478:	24000000 	.word	0x24000000
 800247c:	0801488c 	.word	0x0801488c
 8002480:	080148a8 	.word	0x080148a8

08002484 <PlasmaDriverMenu>:

// Print the plasma driver menu on UART3, and execute entered command.
static void PlasmaDriverMenu(void)
{
 8002484:	b590      	push	{r4, r7, lr}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
	char input;

	//Wait for user input
	if (HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 1) == HAL_OK)
 800248a:	1cf9      	adds	r1, r7, #3
 800248c:	2301      	movs	r3, #1
 800248e:	2201      	movs	r2, #1
 8002490:	4822      	ldr	r0, [pc, #136]	@ (800251c <PlasmaDriverMenu+0x98>)
 8002492:	f00d fcf4 	bl	800fe7e <HAL_UART_Receive>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d13b      	bne.n	8002514 <PlasmaDriverMenu+0x90>
	{
		// Return pressed -- Display Menu
		if (input == 13)
 800249c:	78fb      	ldrb	r3, [r7, #3]
 800249e:	2b0d      	cmp	r3, #13
 80024a0:	d123      	bne.n	80024ea <PlasmaDriverMenu+0x66>
		{
			for (int i=0; i<menu_size; i++)
 80024a2:	2300      	movs	r3, #0
 80024a4:	607b      	str	r3, [r7, #4]
 80024a6:	e017      	b.n	80024d8 <PlasmaDriverMenu+0x54>
			{
				HAL_UART_Transmit(&huart3, (uint8_t *) menu[i], strlen(menu[i]), 1000);
 80024a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002520 <PlasmaDriverMenu+0x9c>)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80024b0:	4a1b      	ldr	r2, [pc, #108]	@ (8002520 <PlasmaDriverMenu+0x9c>)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7fd ff79 	bl	80003b0 <strlen>
 80024be:	4603      	mov	r3, r0
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024c6:	4621      	mov	r1, r4
 80024c8:	4814      	ldr	r0, [pc, #80]	@ (800251c <PlasmaDriverMenu+0x98>)
 80024ca:	f00d fc4a 	bl	800fd62 <HAL_UART_Transmit>
				printCR();
 80024ce:	f7fe f939 	bl	8000744 <printCR>
			for (int i=0; i<menu_size; i++)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	3301      	adds	r3, #1
 80024d6:	607b      	str	r3, [r7, #4]
 80024d8:	4b12      	ldr	r3, [pc, #72]	@ (8002524 <PlasmaDriverMenu+0xa0>)
 80024da:	881b      	ldrh	r3, [r3, #0]
 80024dc:	461a      	mov	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4293      	cmp	r3, r2
 80024e2:	dbe1      	blt.n	80024a8 <PlasmaDriverMenu+0x24>
			}
			printCR();
 80024e4:	f7fe f92e 	bl	8000744 <printCR>
				RunModeAction(input);
			else
				printString("\n\r*** ERROR *** Invalid mode");
		}
	}
}
 80024e8:	e014      	b.n	8002514 <PlasmaDriverMenu+0x90>
			if (sFlashConfig.mode == TEST_MODE)
 80024ea:	4b0f      	ldr	r3, [pc, #60]	@ (8002528 <PlasmaDriverMenu+0xa4>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d104      	bne.n	80024fc <PlasmaDriverMenu+0x78>
				TestModeAction(input);
 80024f2:	78fb      	ldrb	r3, [r7, #3]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff feaf 	bl	8002258 <TestModeAction>
}
 80024fa:	e00b      	b.n	8002514 <PlasmaDriverMenu+0x90>
			else if (sFlashConfig.mode == RUN_MODE)
 80024fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002528 <PlasmaDriverMenu+0xa4>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d104      	bne.n	800250e <PlasmaDriverMenu+0x8a>
				RunModeAction(input);
 8002504:	78fb      	ldrb	r3, [r7, #3]
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff fe97 	bl	800223a <RunModeAction>
}
 800250c:	e002      	b.n	8002514 <PlasmaDriverMenu+0x90>
				printString("\n\r*** ERROR *** Invalid mode");
 800250e:	4807      	ldr	r0, [pc, #28]	@ (800252c <PlasmaDriverMenu+0xa8>)
 8002510:	f7fe f928 	bl	8000764 <printString>
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	bd90      	pop	{r4, r7, pc}
 800251c:	24000e30 	.word	0x24000e30
 8002520:	240002ec 	.word	0x240002ec
 8002524:	24000320 	.word	0x24000320
 8002528:	24000a40 	.word	0x24000a40
 800252c:	080148cc 	.word	0x080148cc

08002530 <PlasmaDriverInit>:

// Initialize the plasma driver
void PlasmaDriverInit(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
	//Enable line driver 2 (HAL has initialized all GPIO)
	HAL_GPIO_WritePin(LINE_DRIVER2_ENABLE_GPIO_Port, LINE_DRIVER2_ENABLE_Pin, GPIO_PIN_RESET);  //Enable = Low
 8002534:	2200      	movs	r2, #0
 8002536:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800253a:	4821      	ldr	r0, [pc, #132]	@ (80025c0 <PlasmaDriverInit+0x90>)
 800253c:	f008 fa22 	bl	800a984 <HAL_GPIO_WritePin>
	printString("\n\rEnable Line Drive 2");
 8002540:	4820      	ldr	r0, [pc, #128]	@ (80025c4 <PlasmaDriverInit+0x94>)
 8002542:	f7fe f90f 	bl	8000764 <printString>

	//Power On Supplies in order 15V, 3.3V switch
	PowerOnLowSupplies();
 8002546:	f7ff fc63 	bl	8001e10 <PowerOnLowSupplies>

	//Read configuration from flash
	readConfigFlash();
 800254a:	f7fe f8eb 	bl	8000724 <readConfigFlash>

	//Has the flash configuration been initialized?
	if (sFlashConfig.mode == 0xFF)
 800254e:	4b1e      	ldr	r3, [pc, #120]	@ (80025c8 <PlasmaDriverInit+0x98>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2bff      	cmp	r3, #255	@ 0xff
 8002554:	d107      	bne.n	8002566 <PlasmaDriverInit+0x36>
	{
		// write default configuration to flash
		if (writeConfigFlash() != 0)
 8002556:	f7fe f8ab 	bl	80006b0 <writeConfigFlash>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d002      	beq.n	8002566 <PlasmaDriverInit+0x36>
			printString("\n\r*** ERROR FLASH");
 8002560:	481a      	ldr	r0, [pc, #104]	@ (80025cc <PlasmaDriverInit+0x9c>)
 8002562:	f7fe f8ff 	bl	8000764 <printString>
	}

	//Initialize menu and configuration menu
	InitializeMenu();
 8002566:	f7ff fd29 	bl	8001fbc <InitializeMenu>
	InitializeConfigMenu();
 800256a:	f7ff fcfb 	bl	8001f64 <InitializeConfigMenu>

	//Calibrate ADC1, ADC2 and ADC3
	printString("\n\rCalibrate ADC1, ADC2 and ADC3");
 800256e:	4818      	ldr	r0, [pc, #96]	@ (80025d0 <PlasmaDriverInit+0xa0>)
 8002570:	f7fe f8f8 	bl	8000764 <printString>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8002574:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8002578:	2100      	movs	r1, #0
 800257a:	4816      	ldr	r0, [pc, #88]	@ (80025d4 <PlasmaDriverInit+0xa4>)
 800257c:	f004 fd08 	bl	8006f90 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8002580:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8002584:	2100      	movs	r1, #0
 8002586:	4814      	ldr	r0, [pc, #80]	@ (80025d8 <PlasmaDriverInit+0xa8>)
 8002588:	f004 fd02 	bl	8006f90 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 800258c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8002590:	2100      	movs	r1, #0
 8002592:	4812      	ldr	r0, [pc, #72]	@ (80025dc <PlasmaDriverInit+0xac>)
 8002594:	f004 fcfc 	bl	8006f90 <HAL_ADCEx_Calibration_Start>

	//Power On Supply 500V
	if (sFlashConfig.mode == RUN_MODE)
 8002598:	4b0b      	ldr	r3, [pc, #44]	@ (80025c8 <PlasmaDriverInit+0x98>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d10d      	bne.n	80025bc <PlasmaDriverInit+0x8c>
	{
		//POWER_OFF_IRQ needs to be high before powering On
		if (HAL_GPIO_ReadPin(POWER_OFF_IRQ_GPIO_Port, POWER_OFF_IRQ_Pin) == GPIO_PIN_RESET)		//There is an inverter between MCU and the input, thus check RESET
 80025a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80025a4:	480e      	ldr	r0, [pc, #56]	@ (80025e0 <PlasmaDriverInit+0xb0>)
 80025a6:	f008 f9d5 	bl	800a954 <HAL_GPIO_ReadPin>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d102      	bne.n	80025b6 <PlasmaDriverInit+0x86>
			PowerOnHighSupplies();
 80025b0:	f7ff fc72 	bl	8001e98 <PowerOnHighSupplies>
		else
		printString("\n\rPOWER_OFF_IRQ line is not high - 500V is not powered on");
	}
}
 80025b4:	e002      	b.n	80025bc <PlasmaDriverInit+0x8c>
		printString("\n\rPOWER_OFF_IRQ line is not high - 500V is not powered on");
 80025b6:	480b      	ldr	r0, [pc, #44]	@ (80025e4 <PlasmaDriverInit+0xb4>)
 80025b8:	f7fe f8d4 	bl	8000764 <printString>
}
 80025bc:	bf00      	nop
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	58020400 	.word	0x58020400
 80025c4:	080148ec 	.word	0x080148ec
 80025c8:	24000a40 	.word	0x24000a40
 80025cc:	08014904 	.word	0x08014904
 80025d0:	08014918 	.word	0x08014918
 80025d4:	24000a80 	.word	0x24000a80
 80025d8:	24000af0 	.word	0x24000af0
 80025dc:	24000b60 	.word	0x24000b60
 80025e0:	58021000 	.word	0x58021000
 80025e4:	08014938 	.word	0x08014938

080025e8 <PlasmaDoTask>:

// This command is called from a while loop, and will execute any needed task.
void PlasmaDoTask(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
	PlasmaDriverMenu(); //Check UART3 and execute command
 80025ec:	f7ff ff4a 	bl	8002484 <PlasmaDriverMenu>

	if (sFlashConfig.mode == RUN_MODE)
 80025f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002628 <PlasmaDoTask+0x40>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d114      	bne.n	8002622 <PlasmaDoTask+0x3a>
	{
		//Check if robot controller requested the plasma On or Off
		if (HAL_GPIO_ReadPin(TURN_PLASMA_ON_GPIO_Port, TURN_PLASMA_ON_Pin) == GPIO_PIN_RESET)		//There is an inverter between MCU and the input, thus check RESET
 80025f8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80025fc:	480b      	ldr	r0, [pc, #44]	@ (800262c <PlasmaDoTask+0x44>)
 80025fe:	f008 f9a9 	bl	800a954 <HAL_GPIO_ReadPin>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10c      	bne.n	8002622 <PlasmaDoTask+0x3a>
		{
			if (powerStatus == V500_ON)
 8002608:	4b09      	ldr	r3, [pc, #36]	@ (8002630 <PlasmaDoTask+0x48>)
 800260a:	881b      	ldrh	r3, [r3, #0]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d105      	bne.n	800261c <PlasmaDoTask+0x34>
			{
				sHbridge.on = 1; // Turn Hbridge on
 8002610:	4b08      	ldr	r3, [pc, #32]	@ (8002634 <PlasmaDoTask+0x4c>)
 8002612:	2201      	movs	r2, #1
 8002614:	801a      	strh	r2, [r3, #0]
				programHbridge();
 8002616:	f7fe f9cb 	bl	80009b0 <programHbridge>
			}
			else
				printString("\n\rUnable to turn H-bridge on, since 500V is not powered on");
		}
	}
}
 800261a:	e002      	b.n	8002622 <PlasmaDoTask+0x3a>
				printString("\n\rUnable to turn H-bridge on, since 500V is not powered on");
 800261c:	4806      	ldr	r0, [pc, #24]	@ (8002638 <PlasmaDoTask+0x50>)
 800261e:	f7fe f8a1 	bl	8000764 <printString>
}
 8002622:	bf00      	nop
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	24000a40 	.word	0x24000a40
 800262c:	58021000 	.word	0x58021000
 8002630:	24000a3c 	.word	0x24000a3c
 8002634:	2400001c 	.word	0x2400001c
 8002638:	08014974 	.word	0x08014974

0800263c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002640:	f001 fed8 	bl	80043f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002644:	f000 f828 	bl	8002698 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002648:	f000 f896 	bl	8002778 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800264c:	f000 fe9e 	bl	800338c <MX_GPIO_Init>
  MX_DMA_Init();
 8002650:	f000 fe74 	bl	800333c <MX_DMA_Init>
  MX_TIM1_Init();
 8002654:	f000 fc28 	bl	8002ea8 <MX_TIM1_Init>
  MX_ETH_Init();
 8002658:	f000 fb40 	bl	8002cdc <MX_ETH_Init>
  MX_ADC2_Init();
 800265c:	f000 f95a 	bl	8002914 <MX_ADC2_Init>
  MX_USB_OTG_HS_USB_Init();
 8002660:	f000 fe64 	bl	800332c <MX_USB_OTG_HS_USB_Init>
  MX_ADC3_Init();
 8002664:	f000 f9fa 	bl	8002a5c <MX_ADC3_Init>
  MX_USART3_UART_Init();
 8002668:	f000 fbd2 	bl	8002e10 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800266c:	f000 f8b4 	bl	80027d8 <MX_ADC1_Init>
  MX_COMP2_Init();
 8002670:	f000 fb06 	bl	8002c80 <MX_COMP2_Init>
  MX_TIM2_Init();
 8002674:	f000 fcaa 	bl	8002fcc <MX_TIM2_Init>
  MX_LPUART1_UART_Init();
 8002678:	f000 fb7c 	bl	8002d74 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 800267c:	f000 fd00 	bl	8003080 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002680:	f000 fd52 	bl	8003128 <MX_TIM4_Init>
  MX_TIM15_Init();
 8002684:	f000 fdaa 	bl	80031dc <MX_TIM15_Init>
  MX_TIM24_Init();
 8002688:	f000 fe00 	bl	800328c <MX_TIM24_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  PlasmaDriverInit();  			//Initialize plasma driver
 800268c:	f7ff ff50 	bl	8002530 <PlasmaDriverInit>

  while (1)
  {
	PlasmaDoTask();     	    //Handle plasma driver task
 8002690:	f7ff ffaa 	bl	80025e8 <PlasmaDoTask>
 8002694:	e7fc      	b.n	8002690 <main+0x54>
	...

08002698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b09c      	sub	sp, #112	@ 0x70
 800269c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800269e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026a2:	224c      	movs	r2, #76	@ 0x4c
 80026a4:	2100      	movs	r1, #0
 80026a6:	4618      	mov	r0, r3
 80026a8:	f00f fc7b 	bl	8011fa2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026ac:	1d3b      	adds	r3, r7, #4
 80026ae:	2220      	movs	r2, #32
 80026b0:	2100      	movs	r1, #0
 80026b2:	4618      	mov	r0, r3
 80026b4:	f00f fc75 	bl	8011fa2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80026b8:	2002      	movs	r0, #2
 80026ba:	f008 f997 	bl	800a9ec <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80026be:	2300      	movs	r3, #0
 80026c0:	603b      	str	r3, [r7, #0]
 80026c2:	4b2c      	ldr	r3, [pc, #176]	@ (8002774 <SystemClock_Config+0xdc>)
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	4a2b      	ldr	r2, [pc, #172]	@ (8002774 <SystemClock_Config+0xdc>)
 80026c8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80026cc:	6193      	str	r3, [r2, #24]
 80026ce:	4b29      	ldr	r3, [pc, #164]	@ (8002774 <SystemClock_Config+0xdc>)
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80026d6:	603b      	str	r3, [r7, #0]
 80026d8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80026da:	bf00      	nop
 80026dc:	4b25      	ldr	r3, [pc, #148]	@ (8002774 <SystemClock_Config+0xdc>)
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026e8:	d1f8      	bne.n	80026dc <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80026ea:	2321      	movs	r3, #33	@ 0x21
 80026ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80026ee:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80026f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80026f4:	2301      	movs	r3, #1
 80026f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026f8:	2302      	movs	r3, #2
 80026fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026fc:	2302      	movs	r3, #2
 80026fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002700:	2304      	movs	r3, #4
 8002702:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8002704:	f240 1313 	movw	r3, #275	@ 0x113
 8002708:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800270a:	2301      	movs	r3, #1
 800270c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800270e:	2304      	movs	r3, #4
 8002710:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002712:	2302      	movs	r3, #2
 8002714:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8002716:	2304      	movs	r3, #4
 8002718:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800271a:	2300      	movs	r3, #0
 800271c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800271e:	2300      	movs	r3, #0
 8002720:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002722:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002726:	4618      	mov	r0, r3
 8002728:	f008 f99a 	bl	800aa60 <HAL_RCC_OscConfig>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002732:	f000 ff9b 	bl	800366c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002736:	233f      	movs	r3, #63	@ 0x3f
 8002738:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800273a:	2303      	movs	r3, #3
 800273c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800273e:	2300      	movs	r3, #0
 8002740:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002742:	2308      	movs	r3, #8
 8002744:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002746:	2340      	movs	r3, #64	@ 0x40
 8002748:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800274a:	2340      	movs	r3, #64	@ 0x40
 800274c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV16;
 800274e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002752:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002754:	2340      	movs	r3, #64	@ 0x40
 8002756:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002758:	1d3b      	adds	r3, r7, #4
 800275a:	2103      	movs	r1, #3
 800275c:	4618      	mov	r0, r3
 800275e:	f008 fd59 	bl	800b214 <HAL_RCC_ClockConfig>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002768:	f000 ff80 	bl	800366c <Error_Handler>
  }
}
 800276c:	bf00      	nop
 800276e:	3770      	adds	r7, #112	@ 0x70
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	58024800 	.word	0x58024800

08002778 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b0ae      	sub	sp, #184	@ 0xb8
 800277c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800277e:	463b      	mov	r3, r7
 8002780:	22b8      	movs	r2, #184	@ 0xb8
 8002782:	2100      	movs	r1, #0
 8002784:	4618      	mov	r0, r3
 8002786:	f00f fc0c 	bl	8011fa2 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800278a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800278e:	f04f 0300 	mov.w	r3, #0
 8002792:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8002796:	2301      	movs	r3, #1
 8002798:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 800279a:	2318      	movs	r3, #24
 800279c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800279e:	2302      	movs	r3, #2
 80027a0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80027a2:	2302      	movs	r3, #2
 80027a4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80027a6:	2302      	movs	r3, #2
 80027a8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80027aa:	23c0      	movs	r3, #192	@ 0xc0
 80027ac:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80027ae:	2300      	movs	r3, #0
 80027b0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80027b2:	2300      	movs	r3, #0
 80027b4:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80027b6:	2300      	movs	r3, #0
 80027b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027bc:	463b      	mov	r3, r7
 80027be:	4618      	mov	r0, r3
 80027c0:	f009 f8b4 	bl	800b92c <HAL_RCCEx_PeriphCLKConfig>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80027ca:	f000 ff4f 	bl	800366c <Error_Handler>
  }
}
 80027ce:	bf00      	nop
 80027d0:	37b8      	adds	r7, #184	@ 0xb8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08c      	sub	sp, #48	@ 0x30
 80027dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80027de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	605a      	str	r2, [r3, #4]
 80027e8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80027ea:	463b      	mov	r3, r7
 80027ec:	2224      	movs	r2, #36	@ 0x24
 80027ee:	2100      	movs	r1, #0
 80027f0:	4618      	mov	r0, r3
 80027f2:	f00f fbd6 	bl	8011fa2 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80027f6:	4b42      	ldr	r3, [pc, #264]	@ (8002900 <MX_ADC1_Init+0x128>)
 80027f8:	4a42      	ldr	r2, [pc, #264]	@ (8002904 <MX_ADC1_Init+0x12c>)
 80027fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80027fc:	4b40      	ldr	r3, [pc, #256]	@ (8002900 <MX_ADC1_Init+0x128>)
 80027fe:	2200      	movs	r2, #0
 8002800:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8002802:	4b3f      	ldr	r3, [pc, #252]	@ (8002900 <MX_ADC1_Init+0x128>)
 8002804:	2200      	movs	r2, #0
 8002806:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002808:	4b3d      	ldr	r3, [pc, #244]	@ (8002900 <MX_ADC1_Init+0x128>)
 800280a:	2201      	movs	r2, #1
 800280c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800280e:	4b3c      	ldr	r3, [pc, #240]	@ (8002900 <MX_ADC1_Init+0x128>)
 8002810:	2208      	movs	r2, #8
 8002812:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002814:	4b3a      	ldr	r3, [pc, #232]	@ (8002900 <MX_ADC1_Init+0x128>)
 8002816:	2200      	movs	r2, #0
 8002818:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800281a:	4b39      	ldr	r3, [pc, #228]	@ (8002900 <MX_ADC1_Init+0x128>)
 800281c:	2201      	movs	r2, #1
 800281e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8002820:	4b37      	ldr	r3, [pc, #220]	@ (8002900 <MX_ADC1_Init+0x128>)
 8002822:	2203      	movs	r2, #3
 8002824:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002826:	4b36      	ldr	r3, [pc, #216]	@ (8002900 <MX_ADC1_Init+0x128>)
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC1;
 800282e:	4b34      	ldr	r3, [pc, #208]	@ (8002900 <MX_ADC1_Init+0x128>)
 8002830:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002834:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002836:	4b32      	ldr	r3, [pc, #200]	@ (8002900 <MX_ADC1_Init+0x128>)
 8002838:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800283c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 800283e:	4b30      	ldr	r3, [pc, #192]	@ (8002900 <MX_ADC1_Init+0x128>)
 8002840:	2201      	movs	r2, #1
 8002842:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002844:	4b2e      	ldr	r3, [pc, #184]	@ (8002900 <MX_ADC1_Init+0x128>)
 8002846:	2200      	movs	r2, #0
 8002848:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800284a:	4b2d      	ldr	r3, [pc, #180]	@ (8002900 <MX_ADC1_Init+0x128>)
 800284c:	2200      	movs	r2, #0
 800284e:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8002850:	4b2b      	ldr	r3, [pc, #172]	@ (8002900 <MX_ADC1_Init+0x128>)
 8002852:	2200      	movs	r2, #0
 8002854:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002858:	4829      	ldr	r0, [pc, #164]	@ (8002900 <MX_ADC1_Init+0x128>)
 800285a:	f002 fad3 	bl	8004e04 <HAL_ADC_Init>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002864:	f000 ff02 	bl	800366c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8002868:	2306      	movs	r3, #6
 800286a:	627b      	str	r3, [r7, #36]	@ 0x24
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 800286c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002870:	62bb      	str	r3, [r7, #40]	@ 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8002872:	2300      	movs	r3, #0
 8002874:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002876:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800287a:	4619      	mov	r1, r3
 800287c:	4820      	ldr	r0, [pc, #128]	@ (8002900 <MX_ADC1_Init+0x128>)
 800287e:	f004 fccf 	bl	8007220 <HAL_ADCEx_MultiModeConfigChannel>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8002888:	f000 fef0 	bl	800366c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800288c:	4b1e      	ldr	r3, [pc, #120]	@ (8002908 <MX_ADC1_Init+0x130>)
 800288e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002890:	2306      	movs	r3, #6
 8002892:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 8002894:	2302      	movs	r3, #2
 8002896:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002898:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800289c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800289e:	2304      	movs	r3, #4
 80028a0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80028a2:	2300      	movs	r3, #0
 80028a4:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80028a6:	2300      	movs	r3, #0
 80028a8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028ac:	463b      	mov	r3, r7
 80028ae:	4619      	mov	r1, r3
 80028b0:	4813      	ldr	r0, [pc, #76]	@ (8002900 <MX_ADC1_Init+0x128>)
 80028b2:	f002 ffd9 	bl	8005868 <HAL_ADC_ConfigChannel>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 80028bc:	f000 fed6 	bl	800366c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 80028c0:	4b12      	ldr	r3, [pc, #72]	@ (800290c <MX_ADC1_Init+0x134>)
 80028c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80028c4:	230c      	movs	r3, #12
 80028c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028c8:	463b      	mov	r3, r7
 80028ca:	4619      	mov	r1, r3
 80028cc:	480c      	ldr	r0, [pc, #48]	@ (8002900 <MX_ADC1_Init+0x128>)
 80028ce:	f002 ffcb 	bl	8005868 <HAL_ADC_ConfigChannel>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 80028d8:	f000 fec8 	bl	800366c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 80028dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002910 <MX_ADC1_Init+0x138>)
 80028de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80028e0:	2312      	movs	r3, #18
 80028e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80028e4:	463b      	mov	r3, r7
 80028e6:	4619      	mov	r1, r3
 80028e8:	4805      	ldr	r0, [pc, #20]	@ (8002900 <MX_ADC1_Init+0x128>)
 80028ea:	f002 ffbd 	bl	8005868 <HAL_ADC_ConfigChannel>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 80028f4:	f000 feba 	bl	800366c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80028f8:	bf00      	nop
 80028fa:	3730      	adds	r7, #48	@ 0x30
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	24000a80 	.word	0x24000a80
 8002904:	40022000 	.word	0x40022000
 8002908:	3ef08000 	.word	0x3ef08000
 800290c:	4b840000 	.word	0x4b840000
 8002910:	43210000 	.word	0x43210000

08002914 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b090      	sub	sp, #64	@ 0x40
 8002918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800291a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	605a      	str	r2, [r3, #4]
 8002924:	609a      	str	r2, [r3, #8]
 8002926:	60da      	str	r2, [r3, #12]
 8002928:	611a      	str	r2, [r3, #16]
 800292a:	615a      	str	r2, [r3, #20]
 800292c:	619a      	str	r2, [r3, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 800292e:	463b      	mov	r3, r7
 8002930:	2224      	movs	r2, #36	@ 0x24
 8002932:	2100      	movs	r1, #0
 8002934:	4618      	mov	r0, r3
 8002936:	f00f fb34 	bl	8011fa2 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800293a:	4b42      	ldr	r3, [pc, #264]	@ (8002a44 <MX_ADC2_Init+0x130>)
 800293c:	4a42      	ldr	r2, [pc, #264]	@ (8002a48 <MX_ADC2_Init+0x134>)
 800293e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002940:	4b40      	ldr	r3, [pc, #256]	@ (8002a44 <MX_ADC2_Init+0x130>)
 8002942:	2200      	movs	r2, #0
 8002944:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8002946:	4b3f      	ldr	r3, [pc, #252]	@ (8002a44 <MX_ADC2_Init+0x130>)
 8002948:	2200      	movs	r2, #0
 800294a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800294c:	4b3d      	ldr	r3, [pc, #244]	@ (8002a44 <MX_ADC2_Init+0x130>)
 800294e:	2201      	movs	r2, #1
 8002950:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002952:	4b3c      	ldr	r3, [pc, #240]	@ (8002a44 <MX_ADC2_Init+0x130>)
 8002954:	2208      	movs	r2, #8
 8002956:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002958:	4b3a      	ldr	r3, [pc, #232]	@ (8002a44 <MX_ADC2_Init+0x130>)
 800295a:	2200      	movs	r2, #0
 800295c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800295e:	4b39      	ldr	r3, [pc, #228]	@ (8002a44 <MX_ADC2_Init+0x130>)
 8002960:	2201      	movs	r2, #1
 8002962:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 3;
 8002964:	4b37      	ldr	r3, [pc, #220]	@ (8002a44 <MX_ADC2_Init+0x130>)
 8002966:	2203      	movs	r2, #3
 8002968:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800296a:	4b36      	ldr	r3, [pc, #216]	@ (8002a44 <MX_ADC2_Init+0x130>)
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8002972:	4b34      	ldr	r3, [pc, #208]	@ (8002a44 <MX_ADC2_Init+0x130>)
 8002974:	2200      	movs	r2, #0
 8002976:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002978:	4b32      	ldr	r3, [pc, #200]	@ (8002a44 <MX_ADC2_Init+0x130>)
 800297a:	2200      	movs	r2, #0
 800297c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800297e:	4b31      	ldr	r3, [pc, #196]	@ (8002a44 <MX_ADC2_Init+0x130>)
 8002980:	2200      	movs	r2, #0
 8002982:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8002984:	4b2f      	ldr	r3, [pc, #188]	@ (8002a44 <MX_ADC2_Init+0x130>)
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800298c:	482d      	ldr	r0, [pc, #180]	@ (8002a44 <MX_ADC2_Init+0x130>)
 800298e:	f002 fa39 	bl	8004e04 <HAL_ADC_Init>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8002998:	f000 fe68 	bl	800366c <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 800299c:	4b2b      	ldr	r3, [pc, #172]	@ (8002a4c <MX_ADC2_Init+0x138>)
 800299e:	627b      	str	r3, [r7, #36]	@ 0x24
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80029a0:	f44f 0340 	mov.w	r3, #12582912	@ 0xc00000
 80029a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  AnalogWDGConfig.Channel = ADC_CHANNEL_3;
 80029a6:	4b2a      	ldr	r3, [pc, #168]	@ (8002a50 <MX_ADC2_Init+0x13c>)
 80029a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  AnalogWDGConfig.ITMode = DISABLE;
 80029aa:	2300      	movs	r3, #0
 80029ac:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  AnalogWDGConfig.HighThreshold = 0;
 80029b0:	2300      	movs	r3, #0
 80029b2:	637b      	str	r3, [r7, #52]	@ 0x34
  AnalogWDGConfig.LowThreshold = 0;
 80029b4:	2300      	movs	r3, #0
 80029b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 80029b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029bc:	4619      	mov	r1, r3
 80029be:	4821      	ldr	r0, [pc, #132]	@ (8002a44 <MX_ADC2_Init+0x130>)
 80029c0:	f003 fc7e 	bl	80062c0 <HAL_ADC_AnalogWDGConfig>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80029ca:	f000 fe4f 	bl	800366c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80029ce:	4b20      	ldr	r3, [pc, #128]	@ (8002a50 <MX_ADC2_Init+0x13c>)
 80029d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80029d2:	2306      	movs	r3, #6
 80029d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 80029d6:	2302      	movs	r3, #2
 80029d8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80029da:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80029de:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80029e0:	2304      	movs	r3, #4
 80029e2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80029e4:	2300      	movs	r3, #0
 80029e6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80029e8:	2300      	movs	r3, #0
 80029ea:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80029ee:	463b      	mov	r3, r7
 80029f0:	4619      	mov	r1, r3
 80029f2:	4814      	ldr	r0, [pc, #80]	@ (8002a44 <MX_ADC2_Init+0x130>)
 80029f4:	f002 ff38 	bl	8005868 <HAL_ADC_ConfigChannel>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <MX_ADC2_Init+0xee>
  {
    Error_Handler();
 80029fe:	f000 fe35 	bl	800366c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 8002a02:	4b14      	ldr	r3, [pc, #80]	@ (8002a54 <MX_ADC2_Init+0x140>)
 8002a04:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002a06:	230c      	movs	r3, #12
 8002a08:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002a0a:	463b      	mov	r3, r7
 8002a0c:	4619      	mov	r1, r3
 8002a0e:	480d      	ldr	r0, [pc, #52]	@ (8002a44 <MX_ADC2_Init+0x130>)
 8002a10:	f002 ff2a 	bl	8005868 <HAL_ADC_ConfigChannel>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <MX_ADC2_Init+0x10a>
  {
    Error_Handler();
 8002a1a:	f000 fe27 	bl	800366c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a58 <MX_ADC2_Init+0x144>)
 8002a20:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002a22:	2312      	movs	r3, #18
 8002a24:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002a26:	463b      	mov	r3, r7
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4806      	ldr	r0, [pc, #24]	@ (8002a44 <MX_ADC2_Init+0x130>)
 8002a2c:	f002 ff1c 	bl	8005868 <HAL_ADC_ConfigChannel>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <MX_ADC2_Init+0x126>
  {
    Error_Handler();
 8002a36:	f000 fe19 	bl	800366c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002a3a:	bf00      	nop
 8002a3c:	3740      	adds	r7, #64	@ 0x40
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	24000af0 	.word	0x24000af0
 8002a48:	40022100 	.word	0x40022100
 8002a4c:	7dc00000 	.word	0x7dc00000
 8002a50:	0c900008 	.word	0x0c900008
 8002a54:	4fb80000 	.word	0x4fb80000
 8002a58:	14f00020 	.word	0x14f00020

08002a5c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b08a      	sub	sp, #40	@ 0x28
 8002a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002a62:	1d3b      	adds	r3, r7, #4
 8002a64:	2224      	movs	r2, #36	@ 0x24
 8002a66:	2100      	movs	r1, #0
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f00f fa9a 	bl	8011fa2 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8002a6e:	4b78      	ldr	r3, [pc, #480]	@ (8002c50 <MX_ADC3_Init+0x1f4>)
 8002a70:	4a78      	ldr	r2, [pc, #480]	@ (8002c54 <MX_ADC3_Init+0x1f8>)
 8002a72:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002a74:	4b76      	ldr	r3, [pc, #472]	@ (8002c50 <MX_ADC3_Init+0x1f4>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002a7a:	4b75      	ldr	r3, [pc, #468]	@ (8002c50 <MX_ADC3_Init+0x1f4>)
 8002a7c:	2208      	movs	r2, #8
 8002a7e:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8002a80:	4b73      	ldr	r3, [pc, #460]	@ (8002c50 <MX_ADC3_Init+0x1f4>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002a86:	4b72      	ldr	r3, [pc, #456]	@ (8002c50 <MX_ADC3_Init+0x1f4>)
 8002a88:	2201      	movs	r2, #1
 8002a8a:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002a8c:	4b70      	ldr	r3, [pc, #448]	@ (8002c50 <MX_ADC3_Init+0x1f4>)
 8002a8e:	2208      	movs	r2, #8
 8002a90:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8002a92:	4b6f      	ldr	r3, [pc, #444]	@ (8002c50 <MX_ADC3_Init+0x1f4>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8002a98:	4b6d      	ldr	r3, [pc, #436]	@ (8002c50 <MX_ADC3_Init+0x1f4>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 11;
 8002a9e:	4b6c      	ldr	r3, [pc, #432]	@ (8002c50 <MX_ADC3_Init+0x1f4>)
 8002aa0:	220b      	movs	r2, #11
 8002aa2:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002aa4:	4b6a      	ldr	r3, [pc, #424]	@ (8002c50 <MX_ADC3_Init+0x1f4>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002aac:	4b68      	ldr	r3, [pc, #416]	@ (8002c50 <MX_ADC3_Init+0x1f4>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002ab2:	4b67      	ldr	r3, [pc, #412]	@ (8002c50 <MX_ADC3_Init+0x1f4>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8002ab8:	4b65      	ldr	r3, [pc, #404]	@ (8002c50 <MX_ADC3_Init+0x1f4>)
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8002ac0:	4b63      	ldr	r3, [pc, #396]	@ (8002c50 <MX_ADC3_Init+0x1f4>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 8002ac6:	4b62      	ldr	r3, [pc, #392]	@ (8002c50 <MX_ADC3_Init+0x1f4>)
 8002ac8:	2201      	movs	r2, #1
 8002aca:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002acc:	4b60      	ldr	r3, [pc, #384]	@ (8002c50 <MX_ADC3_Init+0x1f4>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002ad2:	4b5f      	ldr	r3, [pc, #380]	@ (8002c50 <MX_ADC3_Init+0x1f4>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8002ad8:	4b5d      	ldr	r3, [pc, #372]	@ (8002c50 <MX_ADC3_Init+0x1f4>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002ae0:	485b      	ldr	r0, [pc, #364]	@ (8002c50 <MX_ADC3_Init+0x1f4>)
 8002ae2:	f002 f98f 	bl	8004e04 <HAL_ADC_Init>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8002aec:	f000 fdbe 	bl	800366c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002af0:	2301      	movs	r3, #1
 8002af2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002af4:	2306      	movs	r3, #6
 8002af6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_6CYCLES_5;
 8002af8:	2301      	movs	r3, #1
 8002afa:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002afc:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8002b00:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002b02:	2304      	movs	r3, #4
 8002b04:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002b06:	2300      	movs	r3, #0
 8002b08:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002b0e:	1d3b      	adds	r3, r7, #4
 8002b10:	4619      	mov	r1, r3
 8002b12:	484f      	ldr	r0, [pc, #316]	@ (8002c50 <MX_ADC3_Init+0x1f4>)
 8002b14:	f002 fea8 	bl	8005868 <HAL_ADC_ConfigChannel>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <MX_ADC3_Init+0xc6>
  {
    Error_Handler();
 8002b1e:	f000 fda5 	bl	800366c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002b22:	4b4d      	ldr	r3, [pc, #308]	@ (8002c58 <MX_ADC3_Init+0x1fc>)
 8002b24:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002b26:	230c      	movs	r3, #12
 8002b28:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002b2a:	1d3b      	adds	r3, r7, #4
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4848      	ldr	r0, [pc, #288]	@ (8002c50 <MX_ADC3_Init+0x1f4>)
 8002b30:	f002 fe9a 	bl	8005868 <HAL_ADC_ConfigChannel>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <MX_ADC3_Init+0xe2>
  {
    Error_Handler();
 8002b3a:	f000 fd97 	bl	800366c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002b3e:	4b47      	ldr	r3, [pc, #284]	@ (8002c5c <MX_ADC3_Init+0x200>)
 8002b40:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002b42:	2312      	movs	r3, #18
 8002b44:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002b46:	1d3b      	adds	r3, r7, #4
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4841      	ldr	r0, [pc, #260]	@ (8002c50 <MX_ADC3_Init+0x1f4>)
 8002b4c:	f002 fe8c 	bl	8005868 <HAL_ADC_ConfigChannel>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <MX_ADC3_Init+0xfe>
  {
    Error_Handler();
 8002b56:	f000 fd89 	bl	800366c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002b5a:	4b41      	ldr	r3, [pc, #260]	@ (8002c60 <MX_ADC3_Init+0x204>)
 8002b5c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002b5e:	2318      	movs	r3, #24
 8002b60:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002b62:	1d3b      	adds	r3, r7, #4
 8002b64:	4619      	mov	r1, r3
 8002b66:	483a      	ldr	r0, [pc, #232]	@ (8002c50 <MX_ADC3_Init+0x1f4>)
 8002b68:	f002 fe7e 	bl	8005868 <HAL_ADC_ConfigChannel>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <MX_ADC3_Init+0x11a>
  {
    Error_Handler();
 8002b72:	f000 fd7b 	bl	800366c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002b76:	4b3b      	ldr	r3, [pc, #236]	@ (8002c64 <MX_ADC3_Init+0x208>)
 8002b78:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002b7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b7e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002b80:	1d3b      	adds	r3, r7, #4
 8002b82:	4619      	mov	r1, r3
 8002b84:	4832      	ldr	r0, [pc, #200]	@ (8002c50 <MX_ADC3_Init+0x1f4>)
 8002b86:	f002 fe6f 	bl	8005868 <HAL_ADC_ConfigChannel>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <MX_ADC3_Init+0x138>
  {
    Error_Handler();
 8002b90:	f000 fd6c 	bl	800366c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002b94:	4b34      	ldr	r3, [pc, #208]	@ (8002c68 <MX_ADC3_Init+0x20c>)
 8002b96:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8002b98:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8002b9c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002b9e:	1d3b      	adds	r3, r7, #4
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	482b      	ldr	r0, [pc, #172]	@ (8002c50 <MX_ADC3_Init+0x1f4>)
 8002ba4:	f002 fe60 	bl	8005868 <HAL_ADC_ConfigChannel>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <MX_ADC3_Init+0x156>
  {
    Error_Handler();
 8002bae:	f000 fd5d 	bl	800366c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002bb2:	4b2e      	ldr	r3, [pc, #184]	@ (8002c6c <MX_ADC3_Init+0x210>)
 8002bb4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8002bb6:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8002bba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002bbc:	1d3b      	adds	r3, r7, #4
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4823      	ldr	r0, [pc, #140]	@ (8002c50 <MX_ADC3_Init+0x1f4>)
 8002bc2:	f002 fe51 	bl	8005868 <HAL_ADC_ConfigChannel>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <MX_ADC3_Init+0x174>
  {
    Error_Handler();
 8002bcc:	f000 fd4e 	bl	800366c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002bd0:	4b27      	ldr	r3, [pc, #156]	@ (8002c70 <MX_ADC3_Init+0x214>)
 8002bd2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8002bd4:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8002bd8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002bda:	1d3b      	adds	r3, r7, #4
 8002bdc:	4619      	mov	r1, r3
 8002bde:	481c      	ldr	r0, [pc, #112]	@ (8002c50 <MX_ADC3_Init+0x1f4>)
 8002be0:	f002 fe42 	bl	8005868 <HAL_ADC_ConfigChannel>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <MX_ADC3_Init+0x192>
  {
    Error_Handler();
 8002bea:	f000 fd3f 	bl	800366c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002bee:	4b21      	ldr	r3, [pc, #132]	@ (8002c74 <MX_ADC3_Init+0x218>)
 8002bf0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8002bf2:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8002bf6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002bf8:	1d3b      	adds	r3, r7, #4
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	4814      	ldr	r0, [pc, #80]	@ (8002c50 <MX_ADC3_Init+0x1f4>)
 8002bfe:	f002 fe33 	bl	8005868 <HAL_ADC_ConfigChannel>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <MX_ADC3_Init+0x1b0>
  {
    Error_Handler();
 8002c08:	f000 fd30 	bl	800366c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8002c78 <MX_ADC3_Init+0x21c>)
 8002c0e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8002c10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c14:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002c16:	1d3b      	adds	r3, r7, #4
 8002c18:	4619      	mov	r1, r3
 8002c1a:	480d      	ldr	r0, [pc, #52]	@ (8002c50 <MX_ADC3_Init+0x1f4>)
 8002c1c:	f002 fe24 	bl	8005868 <HAL_ADC_ConfigChannel>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <MX_ADC3_Init+0x1ce>
  {
    Error_Handler();
 8002c26:	f000 fd21 	bl	800366c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002c2a:	4b14      	ldr	r3, [pc, #80]	@ (8002c7c <MX_ADC3_Init+0x220>)
 8002c2c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8002c2e:	f240 2306 	movw	r3, #518	@ 0x206
 8002c32:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002c34:	1d3b      	adds	r3, r7, #4
 8002c36:	4619      	mov	r1, r3
 8002c38:	4805      	ldr	r0, [pc, #20]	@ (8002c50 <MX_ADC3_Init+0x1f4>)
 8002c3a:	f002 fe15 	bl	8005868 <HAL_ADC_ConfigChannel>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <MX_ADC3_Init+0x1ec>
  {
    Error_Handler();
 8002c44:	f000 fd12 	bl	800366c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002c48:	bf00      	nop
 8002c4a:	3728      	adds	r7, #40	@ 0x28
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	24000b60 	.word	0x24000b60
 8002c54:	58026000 	.word	0x58026000
 8002c58:	04300002 	.word	0x04300002
 8002c5c:	08600004 	.word	0x08600004
 8002c60:	0c900008 	.word	0x0c900008
 8002c64:	10c00010 	.word	0x10c00010
 8002c68:	14f00020 	.word	0x14f00020
 8002c6c:	19200040 	.word	0x19200040
 8002c70:	1d500080 	.word	0x1d500080
 8002c74:	21800100 	.word	0x21800100
 8002c78:	25b00200 	.word	0x25b00200
 8002c7c:	2a000400 	.word	0x2a000400

08002c80 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8002c84:	4b13      	ldr	r3, [pc, #76]	@ (8002cd4 <MX_COMP2_Init+0x54>)
 8002c86:	4a14      	ldr	r2, [pc, #80]	@ (8002cd8 <MX_COMP2_Init+0x58>)
 8002c88:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 8002c8a:	4b12      	ldr	r3, [pc, #72]	@ (8002cd4 <MX_COMP2_Init+0x54>)
 8002c8c:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8002c90:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8002c92:	4b10      	ldr	r3, [pc, #64]	@ (8002cd4 <MX_COMP2_Init+0x54>)
 8002c94:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002c98:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8002c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8002cd4 <MX_COMP2_Init+0x54>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8002ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8002cd4 <MX_COMP2_Init+0x54>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8002ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd4 <MX_COMP2_Init+0x54>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8002cac:	4b09      	ldr	r3, [pc, #36]	@ (8002cd4 <MX_COMP2_Init+0x54>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8002cb2:	4b08      	ldr	r3, [pc, #32]	@ (8002cd4 <MX_COMP2_Init+0x54>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8002cb8:	4b06      	ldr	r3, [pc, #24]	@ (8002cd4 <MX_COMP2_Init+0x54>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8002cbe:	4805      	ldr	r0, [pc, #20]	@ (8002cd4 <MX_COMP2_Init+0x54>)
 8002cc0:	f004 fb90 	bl	80073e4 <HAL_COMP_Init>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <MX_COMP2_Init+0x4e>
  {
    Error_Handler();
 8002cca:	f000 fccf 	bl	800366c <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8002cce:	bf00      	nop
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	24000cc0 	.word	0x24000cc0
 8002cd8:	58003810 	.word	0x58003810

08002cdc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8002ce0:	4b1e      	ldr	r3, [pc, #120]	@ (8002d5c <MX_ETH_Init+0x80>)
 8002ce2:	4a1f      	ldr	r2, [pc, #124]	@ (8002d60 <MX_ETH_Init+0x84>)
 8002ce4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8002ce6:	4b1f      	ldr	r3, [pc, #124]	@ (8002d64 <MX_ETH_Init+0x88>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8002cec:	4b1d      	ldr	r3, [pc, #116]	@ (8002d64 <MX_ETH_Init+0x88>)
 8002cee:	2280      	movs	r2, #128	@ 0x80
 8002cf0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8002cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8002d64 <MX_ETH_Init+0x88>)
 8002cf4:	22e1      	movs	r2, #225	@ 0xe1
 8002cf6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8002cf8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d64 <MX_ETH_Init+0x88>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8002cfe:	4b19      	ldr	r3, [pc, #100]	@ (8002d64 <MX_ETH_Init+0x88>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8002d04:	4b17      	ldr	r3, [pc, #92]	@ (8002d64 <MX_ETH_Init+0x88>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8002d0a:	4b14      	ldr	r3, [pc, #80]	@ (8002d5c <MX_ETH_Init+0x80>)
 8002d0c:	4a15      	ldr	r2, [pc, #84]	@ (8002d64 <MX_ETH_Init+0x88>)
 8002d0e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8002d10:	4b12      	ldr	r3, [pc, #72]	@ (8002d5c <MX_ETH_Init+0x80>)
 8002d12:	2201      	movs	r2, #1
 8002d14:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8002d16:	4b11      	ldr	r3, [pc, #68]	@ (8002d5c <MX_ETH_Init+0x80>)
 8002d18:	4a13      	ldr	r2, [pc, #76]	@ (8002d68 <MX_ETH_Init+0x8c>)
 8002d1a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8002d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8002d5c <MX_ETH_Init+0x80>)
 8002d1e:	4a13      	ldr	r2, [pc, #76]	@ (8002d6c <MX_ETH_Init+0x90>)
 8002d20:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8002d22:	4b0e      	ldr	r3, [pc, #56]	@ (8002d5c <MX_ETH_Init+0x80>)
 8002d24:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8002d28:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8002d2a:	480c      	ldr	r0, [pc, #48]	@ (8002d5c <MX_ETH_Init+0x80>)
 8002d2c:	f006 fe68 	bl	8009a00 <HAL_ETH_Init>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8002d36:	f000 fc99 	bl	800366c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8002d3a:	2238      	movs	r2, #56	@ 0x38
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	480c      	ldr	r0, [pc, #48]	@ (8002d70 <MX_ETH_Init+0x94>)
 8002d40:	f00f f92f 	bl	8011fa2 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8002d44:	4b0a      	ldr	r3, [pc, #40]	@ (8002d70 <MX_ETH_Init+0x94>)
 8002d46:	2221      	movs	r2, #33	@ 0x21
 8002d48:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8002d4a:	4b09      	ldr	r3, [pc, #36]	@ (8002d70 <MX_ETH_Init+0x94>)
 8002d4c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002d50:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8002d52:	4b07      	ldr	r3, [pc, #28]	@ (8002d70 <MX_ETH_Init+0x94>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8002d58:	bf00      	nop
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	24000cec 	.word	0x24000cec
 8002d60:	40028000 	.word	0x40028000
 8002d64:	2400108c 	.word	0x2400108c
 8002d68:	24000270 	.word	0x24000270
 8002d6c:	24000210 	.word	0x24000210
 8002d70:	24000a48 	.word	0x24000a48

08002d74 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002d78:	4b22      	ldr	r3, [pc, #136]	@ (8002e04 <MX_LPUART1_UART_Init+0x90>)
 8002d7a:	4a23      	ldr	r2, [pc, #140]	@ (8002e08 <MX_LPUART1_UART_Init+0x94>)
 8002d7c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8002d7e:	4b21      	ldr	r3, [pc, #132]	@ (8002e04 <MX_LPUART1_UART_Init+0x90>)
 8002d80:	4a22      	ldr	r2, [pc, #136]	@ (8002e0c <MX_LPUART1_UART_Init+0x98>)
 8002d82:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d84:	4b1f      	ldr	r3, [pc, #124]	@ (8002e04 <MX_LPUART1_UART_Init+0x90>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002d8a:	4b1e      	ldr	r3, [pc, #120]	@ (8002e04 <MX_LPUART1_UART_Init+0x90>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002d90:	4b1c      	ldr	r3, [pc, #112]	@ (8002e04 <MX_LPUART1_UART_Init+0x90>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002d96:	4b1b      	ldr	r3, [pc, #108]	@ (8002e04 <MX_LPUART1_UART_Init+0x90>)
 8002d98:	220c      	movs	r2, #12
 8002d9a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d9c:	4b19      	ldr	r3, [pc, #100]	@ (8002e04 <MX_LPUART1_UART_Init+0x90>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002da2:	4b18      	ldr	r3, [pc, #96]	@ (8002e04 <MX_LPUART1_UART_Init+0x90>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002da8:	4b16      	ldr	r3, [pc, #88]	@ (8002e04 <MX_LPUART1_UART_Init+0x90>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002dae:	4b15      	ldr	r3, [pc, #84]	@ (8002e04 <MX_LPUART1_UART_Init+0x90>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002db4:	4b13      	ldr	r3, [pc, #76]	@ (8002e04 <MX_LPUART1_UART_Init+0x90>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002dba:	4812      	ldr	r0, [pc, #72]	@ (8002e04 <MX_LPUART1_UART_Init+0x90>)
 8002dbc:	f00c ff81 	bl	800fcc2 <HAL_UART_Init>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8002dc6:	f000 fc51 	bl	800366c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002dca:	2100      	movs	r1, #0
 8002dcc:	480d      	ldr	r0, [pc, #52]	@ (8002e04 <MX_LPUART1_UART_Init+0x90>)
 8002dce:	f00e f9de 	bl	801118e <HAL_UARTEx_SetTxFifoThreshold>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8002dd8:	f000 fc48 	bl	800366c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ddc:	2100      	movs	r1, #0
 8002dde:	4809      	ldr	r0, [pc, #36]	@ (8002e04 <MX_LPUART1_UART_Init+0x90>)
 8002de0:	f00e fa13 	bl	801120a <HAL_UARTEx_SetRxFifoThreshold>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8002dea:	f000 fc3f 	bl	800366c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002dee:	4805      	ldr	r0, [pc, #20]	@ (8002e04 <MX_LPUART1_UART_Init+0x90>)
 8002df0:	f00e f994 	bl	801111c <HAL_UARTEx_DisableFifoMode>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8002dfa:	f000 fc37 	bl	800366c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002dfe:	bf00      	nop
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	24000d9c 	.word	0x24000d9c
 8002e08:	58000c00 	.word	0x58000c00
 8002e0c:	00033324 	.word	0x00033324

08002e10 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002e14:	4b22      	ldr	r3, [pc, #136]	@ (8002ea0 <MX_USART3_UART_Init+0x90>)
 8002e16:	4a23      	ldr	r2, [pc, #140]	@ (8002ea4 <MX_USART3_UART_Init+0x94>)
 8002e18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002e1a:	4b21      	ldr	r3, [pc, #132]	@ (8002ea0 <MX_USART3_UART_Init+0x90>)
 8002e1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e22:	4b1f      	ldr	r3, [pc, #124]	@ (8002ea0 <MX_USART3_UART_Init+0x90>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e28:	4b1d      	ldr	r3, [pc, #116]	@ (8002ea0 <MX_USART3_UART_Init+0x90>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002e2e:	4b1c      	ldr	r3, [pc, #112]	@ (8002ea0 <MX_USART3_UART_Init+0x90>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002e34:	4b1a      	ldr	r3, [pc, #104]	@ (8002ea0 <MX_USART3_UART_Init+0x90>)
 8002e36:	220c      	movs	r2, #12
 8002e38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e3a:	4b19      	ldr	r3, [pc, #100]	@ (8002ea0 <MX_USART3_UART_Init+0x90>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e40:	4b17      	ldr	r3, [pc, #92]	@ (8002ea0 <MX_USART3_UART_Init+0x90>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e46:	4b16      	ldr	r3, [pc, #88]	@ (8002ea0 <MX_USART3_UART_Init+0x90>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e4c:	4b14      	ldr	r3, [pc, #80]	@ (8002ea0 <MX_USART3_UART_Init+0x90>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e52:	4b13      	ldr	r3, [pc, #76]	@ (8002ea0 <MX_USART3_UART_Init+0x90>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e58:	4811      	ldr	r0, [pc, #68]	@ (8002ea0 <MX_USART3_UART_Init+0x90>)
 8002e5a:	f00c ff32 	bl	800fcc2 <HAL_UART_Init>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002e64:	f000 fc02 	bl	800366c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e68:	2100      	movs	r1, #0
 8002e6a:	480d      	ldr	r0, [pc, #52]	@ (8002ea0 <MX_USART3_UART_Init+0x90>)
 8002e6c:	f00e f98f 	bl	801118e <HAL_UARTEx_SetTxFifoThreshold>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002e76:	f000 fbf9 	bl	800366c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	4808      	ldr	r0, [pc, #32]	@ (8002ea0 <MX_USART3_UART_Init+0x90>)
 8002e7e:	f00e f9c4 	bl	801120a <HAL_UARTEx_SetRxFifoThreshold>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002e88:	f000 fbf0 	bl	800366c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002e8c:	4804      	ldr	r0, [pc, #16]	@ (8002ea0 <MX_USART3_UART_Init+0x90>)
 8002e8e:	f00e f945 	bl	801111c <HAL_UARTEx_DisableFifoMode>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002e98:	f000 fbe8 	bl	800366c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002e9c:	bf00      	nop
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	24000e30 	.word	0x24000e30
 8002ea4:	40004800 	.word	0x40004800

08002ea8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b098      	sub	sp, #96	@ 0x60
 8002eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eae:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	605a      	str	r2, [r3, #4]
 8002eb8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002eba:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	601a      	str	r2, [r3, #0]
 8002ec2:	605a      	str	r2, [r3, #4]
 8002ec4:	609a      	str	r2, [r3, #8]
 8002ec6:	60da      	str	r2, [r3, #12]
 8002ec8:	611a      	str	r2, [r3, #16]
 8002eca:	615a      	str	r2, [r3, #20]
 8002ecc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ece:	1d3b      	adds	r3, r7, #4
 8002ed0:	2234      	movs	r2, #52	@ 0x34
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f00f f864 	bl	8011fa2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002eda:	4b3a      	ldr	r3, [pc, #232]	@ (8002fc4 <MX_TIM1_Init+0x11c>)
 8002edc:	4a3a      	ldr	r2, [pc, #232]	@ (8002fc8 <MX_TIM1_Init+0x120>)
 8002ede:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002ee0:	4b38      	ldr	r3, [pc, #224]	@ (8002fc4 <MX_TIM1_Init+0x11c>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ee6:	4b37      	ldr	r3, [pc, #220]	@ (8002fc4 <MX_TIM1_Init+0x11c>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3240;
 8002eec:	4b35      	ldr	r3, [pc, #212]	@ (8002fc4 <MX_TIM1_Init+0x11c>)
 8002eee:	f640 42a8 	movw	r2, #3240	@ 0xca8
 8002ef2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ef4:	4b33      	ldr	r3, [pc, #204]	@ (8002fc4 <MX_TIM1_Init+0x11c>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002efa:	4b32      	ldr	r3, [pc, #200]	@ (8002fc4 <MX_TIM1_Init+0x11c>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f00:	4b30      	ldr	r3, [pc, #192]	@ (8002fc4 <MX_TIM1_Init+0x11c>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002f06:	482f      	ldr	r0, [pc, #188]	@ (8002fc4 <MX_TIM1_Init+0x11c>)
 8002f08:	f00b f9cc 	bl	800e2a4 <HAL_TIM_PWM_Init>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002f12:	f000 fbab 	bl	800366c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f16:	2300      	movs	r3, #0
 8002f18:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002f22:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002f26:	4619      	mov	r1, r3
 8002f28:	4826      	ldr	r0, [pc, #152]	@ (8002fc4 <MX_TIM1_Init+0x11c>)
 8002f2a:	f00c fd69 	bl	800fa00 <HAL_TIMEx_MasterConfigSynchronization>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002f34:	f000 fb9a 	bl	800366c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f38:	2360      	movs	r3, #96	@ 0x60
 8002f3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 1620;
 8002f3c:	f240 6354 	movw	r3, #1620	@ 0x654
 8002f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002f42:	2302      	movs	r3, #2
 8002f44:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8002f46:	2308      	movs	r3, #8
 8002f48:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8002f4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8002f54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f58:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f5a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002f5e:	2200      	movs	r2, #0
 8002f60:	4619      	mov	r1, r3
 8002f62:	4818      	ldr	r0, [pc, #96]	@ (8002fc4 <MX_TIM1_Init+0x11c>)
 8002f64:	f00b fc9c 	bl	800e8a0 <HAL_TIM_PWM_ConfigChannel>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002f6e:	f000 fb7d 	bl	800366c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f72:	2300      	movs	r3, #0
 8002f74:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002f76:	2300      	movs	r3, #0
 8002f78:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0xFF;
 8002f7e:	23ff      	movs	r3, #255	@ 0xff
 8002f80:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002f82:	2300      	movs	r3, #0
 8002f84:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002f86:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f8a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002f90:	2300      	movs	r3, #0
 8002f92:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002f94:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f98:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002fa2:	1d3b      	adds	r3, r7, #4
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4807      	ldr	r0, [pc, #28]	@ (8002fc4 <MX_TIM1_Init+0x11c>)
 8002fa8:	f00c fdc6 	bl	800fb38 <HAL_TIMEx_ConfigBreakDeadTime>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8002fb2:	f000 fb5b 	bl	800366c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002fb6:	4803      	ldr	r0, [pc, #12]	@ (8002fc4 <MX_TIM1_Init+0x11c>)
 8002fb8:	f000 ffc8 	bl	8003f4c <HAL_TIM_MspPostInit>

}
 8002fbc:	bf00      	nop
 8002fbe:	3760      	adds	r7, #96	@ 0x60
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	24000ec4 	.word	0x24000ec4
 8002fc8:	40010000 	.word	0x40010000

08002fcc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08a      	sub	sp, #40	@ 0x28
 8002fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fd2:	f107 031c 	add.w	r3, r7, #28
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	605a      	str	r2, [r3, #4]
 8002fdc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fde:	463b      	mov	r3, r7
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	605a      	str	r2, [r3, #4]
 8002fe6:	609a      	str	r2, [r3, #8]
 8002fe8:	60da      	str	r2, [r3, #12]
 8002fea:	611a      	str	r2, [r3, #16]
 8002fec:	615a      	str	r2, [r3, #20]
 8002fee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002ff0:	4b22      	ldr	r3, [pc, #136]	@ (800307c <MX_TIM2_Init+0xb0>)
 8002ff2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002ff6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002ff8:	4b20      	ldr	r3, [pc, #128]	@ (800307c <MX_TIM2_Init+0xb0>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ffe:	4b1f      	ldr	r3, [pc, #124]	@ (800307c <MX_TIM2_Init+0xb0>)
 8003000:	2200      	movs	r2, #0
 8003002:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003004:	4b1d      	ldr	r3, [pc, #116]	@ (800307c <MX_TIM2_Init+0xb0>)
 8003006:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800300a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800300c:	4b1b      	ldr	r3, [pc, #108]	@ (800307c <MX_TIM2_Init+0xb0>)
 800300e:	2200      	movs	r2, #0
 8003010:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003012:	4b1a      	ldr	r3, [pc, #104]	@ (800307c <MX_TIM2_Init+0xb0>)
 8003014:	2200      	movs	r2, #0
 8003016:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003018:	4818      	ldr	r0, [pc, #96]	@ (800307c <MX_TIM2_Init+0xb0>)
 800301a:	f00b f943 	bl	800e2a4 <HAL_TIM_PWM_Init>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8003024:	f000 fb22 	bl	800366c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003028:	2300      	movs	r3, #0
 800302a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800302c:	2300      	movs	r3, #0
 800302e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003030:	f107 031c 	add.w	r3, r7, #28
 8003034:	4619      	mov	r1, r3
 8003036:	4811      	ldr	r0, [pc, #68]	@ (800307c <MX_TIM2_Init+0xb0>)
 8003038:	f00c fce2 	bl	800fa00 <HAL_TIMEx_MasterConfigSynchronization>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8003042:	f000 fb13 	bl	800366c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003046:	2360      	movs	r3, #96	@ 0x60
 8003048:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800304a:	2300      	movs	r3, #0
 800304c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800304e:	2300      	movs	r3, #0
 8003050:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003052:	2300      	movs	r3, #0
 8003054:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003056:	463b      	mov	r3, r7
 8003058:	2200      	movs	r2, #0
 800305a:	4619      	mov	r1, r3
 800305c:	4807      	ldr	r0, [pc, #28]	@ (800307c <MX_TIM2_Init+0xb0>)
 800305e:	f00b fc1f 	bl	800e8a0 <HAL_TIM_PWM_ConfigChannel>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8003068:	f000 fb00 	bl	800366c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800306c:	4803      	ldr	r0, [pc, #12]	@ (800307c <MX_TIM2_Init+0xb0>)
 800306e:	f000 ff6d 	bl	8003f4c <HAL_TIM_MspPostInit>

}
 8003072:	bf00      	nop
 8003074:	3728      	adds	r7, #40	@ 0x28
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	24000f10 	.word	0x24000f10

08003080 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b088      	sub	sp, #32
 8003084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003086:	f107 0314 	add.w	r3, r7, #20
 800308a:	2200      	movs	r2, #0
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	605a      	str	r2, [r3, #4]
 8003090:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003092:	1d3b      	adds	r3, r7, #4
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	605a      	str	r2, [r3, #4]
 800309a:	609a      	str	r2, [r3, #8]
 800309c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800309e:	4b20      	ldr	r3, [pc, #128]	@ (8003120 <MX_TIM3_Init+0xa0>)
 80030a0:	4a20      	ldr	r2, [pc, #128]	@ (8003124 <MX_TIM3_Init+0xa4>)
 80030a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80030a4:	4b1e      	ldr	r3, [pc, #120]	@ (8003120 <MX_TIM3_Init+0xa0>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030aa:	4b1d      	ldr	r3, [pc, #116]	@ (8003120 <MX_TIM3_Init+0xa0>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80030b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003120 <MX_TIM3_Init+0xa0>)
 80030b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80030b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030b8:	4b19      	ldr	r3, [pc, #100]	@ (8003120 <MX_TIM3_Init+0xa0>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030be:	4b18      	ldr	r3, [pc, #96]	@ (8003120 <MX_TIM3_Init+0xa0>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80030c4:	4816      	ldr	r0, [pc, #88]	@ (8003120 <MX_TIM3_Init+0xa0>)
 80030c6:	f00b faf7 	bl	800e6b8 <HAL_TIM_IC_Init>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80030d0:	f000 facc 	bl	800366c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030d4:	2300      	movs	r3, #0
 80030d6:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030d8:	2300      	movs	r3, #0
 80030da:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80030dc:	f107 0314 	add.w	r3, r7, #20
 80030e0:	4619      	mov	r1, r3
 80030e2:	480f      	ldr	r0, [pc, #60]	@ (8003120 <MX_TIM3_Init+0xa0>)
 80030e4:	f00c fc8c 	bl	800fa00 <HAL_TIMEx_MasterConfigSynchronization>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80030ee:	f000 fabd 	bl	800366c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80030f2:	2300      	movs	r3, #0
 80030f4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80030f6:	2301      	movs	r3, #1
 80030f8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80030fa:	2300      	movs	r3, #0
 80030fc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80030fe:	2300      	movs	r3, #0
 8003100:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003102:	1d3b      	adds	r3, r7, #4
 8003104:	2200      	movs	r2, #0
 8003106:	4619      	mov	r1, r3
 8003108:	4805      	ldr	r0, [pc, #20]	@ (8003120 <MX_TIM3_Init+0xa0>)
 800310a:	f00b fb2c 	bl	800e766 <HAL_TIM_IC_ConfigChannel>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003114:	f000 faaa 	bl	800366c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003118:	bf00      	nop
 800311a:	3720      	adds	r7, #32
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	24000f5c 	.word	0x24000f5c
 8003124:	40000400 	.word	0x40000400

08003128 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b08a      	sub	sp, #40	@ 0x28
 800312c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800312e:	f107 031c 	add.w	r3, r7, #28
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	605a      	str	r2, [r3, #4]
 8003138:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800313a:	463b      	mov	r3, r7
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	605a      	str	r2, [r3, #4]
 8003142:	609a      	str	r2, [r3, #8]
 8003144:	60da      	str	r2, [r3, #12]
 8003146:	611a      	str	r2, [r3, #16]
 8003148:	615a      	str	r2, [r3, #20]
 800314a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800314c:	4b21      	ldr	r3, [pc, #132]	@ (80031d4 <MX_TIM4_Init+0xac>)
 800314e:	4a22      	ldr	r2, [pc, #136]	@ (80031d8 <MX_TIM4_Init+0xb0>)
 8003150:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003152:	4b20      	ldr	r3, [pc, #128]	@ (80031d4 <MX_TIM4_Init+0xac>)
 8003154:	2200      	movs	r2, #0
 8003156:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003158:	4b1e      	ldr	r3, [pc, #120]	@ (80031d4 <MX_TIM4_Init+0xac>)
 800315a:	2200      	movs	r2, #0
 800315c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800315e:	4b1d      	ldr	r3, [pc, #116]	@ (80031d4 <MX_TIM4_Init+0xac>)
 8003160:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003164:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003166:	4b1b      	ldr	r3, [pc, #108]	@ (80031d4 <MX_TIM4_Init+0xac>)
 8003168:	2200      	movs	r2, #0
 800316a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800316c:	4b19      	ldr	r3, [pc, #100]	@ (80031d4 <MX_TIM4_Init+0xac>)
 800316e:	2200      	movs	r2, #0
 8003170:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003172:	4818      	ldr	r0, [pc, #96]	@ (80031d4 <MX_TIM4_Init+0xac>)
 8003174:	f00b f896 	bl	800e2a4 <HAL_TIM_PWM_Init>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800317e:	f000 fa75 	bl	800366c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003182:	2300      	movs	r3, #0
 8003184:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003186:	2300      	movs	r3, #0
 8003188:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800318a:	f107 031c 	add.w	r3, r7, #28
 800318e:	4619      	mov	r1, r3
 8003190:	4810      	ldr	r0, [pc, #64]	@ (80031d4 <MX_TIM4_Init+0xac>)
 8003192:	f00c fc35 	bl	800fa00 <HAL_TIMEx_MasterConfigSynchronization>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 800319c:	f000 fa66 	bl	800366c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80031a0:	2360      	movs	r3, #96	@ 0x60
 80031a2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80031a4:	2300      	movs	r3, #0
 80031a6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031a8:	2300      	movs	r3, #0
 80031aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031ac:	2300      	movs	r3, #0
 80031ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80031b0:	463b      	mov	r3, r7
 80031b2:	2200      	movs	r2, #0
 80031b4:	4619      	mov	r1, r3
 80031b6:	4807      	ldr	r0, [pc, #28]	@ (80031d4 <MX_TIM4_Init+0xac>)
 80031b8:	f00b fb72 	bl	800e8a0 <HAL_TIM_PWM_ConfigChannel>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80031c2:	f000 fa53 	bl	800366c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80031c6:	4803      	ldr	r0, [pc, #12]	@ (80031d4 <MX_TIM4_Init+0xac>)
 80031c8:	f000 fec0 	bl	8003f4c <HAL_TIM_MspPostInit>

}
 80031cc:	bf00      	nop
 80031ce:	3728      	adds	r7, #40	@ 0x28
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	24000fa8 	.word	0x24000fa8
 80031d8:	40000800 	.word	0x40000800

080031dc <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b088      	sub	sp, #32
 80031e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031e2:	f107 0314 	add.w	r3, r7, #20
 80031e6:	2200      	movs	r2, #0
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	605a      	str	r2, [r3, #4]
 80031ec:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80031ee:	1d3b      	adds	r3, r7, #4
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	605a      	str	r2, [r3, #4]
 80031f6:	609a      	str	r2, [r3, #8]
 80031f8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80031fa:	4b22      	ldr	r3, [pc, #136]	@ (8003284 <MX_TIM15_Init+0xa8>)
 80031fc:	4a22      	ldr	r2, [pc, #136]	@ (8003288 <MX_TIM15_Init+0xac>)
 80031fe:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8003200:	4b20      	ldr	r3, [pc, #128]	@ (8003284 <MX_TIM15_Init+0xa8>)
 8003202:	2200      	movs	r2, #0
 8003204:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003206:	4b1f      	ldr	r3, [pc, #124]	@ (8003284 <MX_TIM15_Init+0xa8>)
 8003208:	2200      	movs	r2, #0
 800320a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 800320c:	4b1d      	ldr	r3, [pc, #116]	@ (8003284 <MX_TIM15_Init+0xa8>)
 800320e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003212:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003214:	4b1b      	ldr	r3, [pc, #108]	@ (8003284 <MX_TIM15_Init+0xa8>)
 8003216:	2200      	movs	r2, #0
 8003218:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800321a:	4b1a      	ldr	r3, [pc, #104]	@ (8003284 <MX_TIM15_Init+0xa8>)
 800321c:	2200      	movs	r2, #0
 800321e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003220:	4b18      	ldr	r3, [pc, #96]	@ (8003284 <MX_TIM15_Init+0xa8>)
 8003222:	2200      	movs	r2, #0
 8003224:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8003226:	4817      	ldr	r0, [pc, #92]	@ (8003284 <MX_TIM15_Init+0xa8>)
 8003228:	f00b fa46 	bl	800e6b8 <HAL_TIM_IC_Init>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8003232:	f000 fa1b 	bl	800366c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003236:	2300      	movs	r3, #0
 8003238:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800323a:	2300      	movs	r3, #0
 800323c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800323e:	f107 0314 	add.w	r3, r7, #20
 8003242:	4619      	mov	r1, r3
 8003244:	480f      	ldr	r0, [pc, #60]	@ (8003284 <MX_TIM15_Init+0xa8>)
 8003246:	f00c fbdb 	bl	800fa00 <HAL_TIMEx_MasterConfigSynchronization>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8003250:	f000 fa0c 	bl	800366c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003254:	2300      	movs	r3, #0
 8003256:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003258:	2301      	movs	r3, #1
 800325a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800325c:	2300      	movs	r3, #0
 800325e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003260:	2300      	movs	r3, #0
 8003262:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003264:	1d3b      	adds	r3, r7, #4
 8003266:	2200      	movs	r2, #0
 8003268:	4619      	mov	r1, r3
 800326a:	4806      	ldr	r0, [pc, #24]	@ (8003284 <MX_TIM15_Init+0xa8>)
 800326c:	f00b fa7b 	bl	800e766 <HAL_TIM_IC_ConfigChannel>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <MX_TIM15_Init+0x9e>
  {
    Error_Handler();
 8003276:	f000 f9f9 	bl	800366c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800327a:	bf00      	nop
 800327c:	3720      	adds	r7, #32
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	24000ff4 	.word	0x24000ff4
 8003288:	40014000 	.word	0x40014000

0800328c <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b088      	sub	sp, #32
 8003290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003292:	f107 0310 	add.w	r3, r7, #16
 8003296:	2200      	movs	r2, #0
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	605a      	str	r2, [r3, #4]
 800329c:	609a      	str	r2, [r3, #8]
 800329e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032a0:	1d3b      	adds	r3, r7, #4
 80032a2:	2200      	movs	r2, #0
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	605a      	str	r2, [r3, #4]
 80032a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 80032aa:	4b1e      	ldr	r3, [pc, #120]	@ (8003324 <MX_TIM24_Init+0x98>)
 80032ac:	4a1e      	ldr	r2, [pc, #120]	@ (8003328 <MX_TIM24_Init+0x9c>)
 80032ae:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 275 - 1;
 80032b0:	4b1c      	ldr	r3, [pc, #112]	@ (8003324 <MX_TIM24_Init+0x98>)
 80032b2:	f44f 7289 	mov.w	r2, #274	@ 0x112
 80032b6:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032b8:	4b1a      	ldr	r3, [pc, #104]	@ (8003324 <MX_TIM24_Init+0x98>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 80032be:	4b19      	ldr	r3, [pc, #100]	@ (8003324 <MX_TIM24_Init+0x98>)
 80032c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80032c4:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032c6:	4b17      	ldr	r3, [pc, #92]	@ (8003324 <MX_TIM24_Init+0x98>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80032cc:	4b15      	ldr	r3, [pc, #84]	@ (8003324 <MX_TIM24_Init+0x98>)
 80032ce:	2280      	movs	r2, #128	@ 0x80
 80032d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 80032d2:	4814      	ldr	r0, [pc, #80]	@ (8003324 <MX_TIM24_Init+0x98>)
 80032d4:	f00a ff10 	bl	800e0f8 <HAL_TIM_Base_Init>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <MX_TIM24_Init+0x56>
  {
    Error_Handler();
 80032de:	f000 f9c5 	bl	800366c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 80032e8:	f107 0310 	add.w	r3, r7, #16
 80032ec:	4619      	mov	r1, r3
 80032ee:	480d      	ldr	r0, [pc, #52]	@ (8003324 <MX_TIM24_Init+0x98>)
 80032f0:	f00b fbea 	bl	800eac8 <HAL_TIM_ConfigClockSource>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <MX_TIM24_Init+0x72>
  {
    Error_Handler();
 80032fa:	f000 f9b7 	bl	800366c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032fe:	2300      	movs	r3, #0
 8003300:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003302:	2300      	movs	r3, #0
 8003304:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 8003306:	1d3b      	adds	r3, r7, #4
 8003308:	4619      	mov	r1, r3
 800330a:	4806      	ldr	r0, [pc, #24]	@ (8003324 <MX_TIM24_Init+0x98>)
 800330c:	f00c fb78 	bl	800fa00 <HAL_TIMEx_MasterConfigSynchronization>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <MX_TIM24_Init+0x8e>
  {
    Error_Handler();
 8003316:	f000 f9a9 	bl	800366c <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 800331a:	bf00      	nop
 800331c:	3720      	adds	r7, #32
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	24001040 	.word	0x24001040
 8003328:	4000e400 	.word	0x4000e400

0800332c <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8003330:	bf00      	nop
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
	...

0800333c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003342:	4b11      	ldr	r3, [pc, #68]	@ (8003388 <MX_DMA_Init+0x4c>)
 8003344:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003348:	4a0f      	ldr	r2, [pc, #60]	@ (8003388 <MX_DMA_Init+0x4c>)
 800334a:	f043 0301 	orr.w	r3, r3, #1
 800334e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003352:	4b0d      	ldr	r3, [pc, #52]	@ (8003388 <MX_DMA_Init+0x4c>)
 8003354:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	607b      	str	r3, [r7, #4]
 800335e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8003360:	2200      	movs	r2, #0
 8003362:	2100      	movs	r1, #0
 8003364:	200c      	movs	r0, #12
 8003366:	f004 fa42 	bl	80077ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800336a:	200c      	movs	r0, #12
 800336c:	f004 fa59 	bl	8007822 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8003370:	2200      	movs	r2, #0
 8003372:	2100      	movs	r1, #0
 8003374:	200d      	movs	r0, #13
 8003376:	f004 fa3a 	bl	80077ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800337a:	200d      	movs	r0, #13
 800337c:	f004 fa51 	bl	8007822 <HAL_NVIC_EnableIRQ>

}
 8003380:	bf00      	nop
 8003382:	3708      	adds	r7, #8
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	58024400 	.word	0x58024400

0800338c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b08e      	sub	sp, #56	@ 0x38
 8003390:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003392:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003396:	2200      	movs	r2, #0
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	605a      	str	r2, [r3, #4]
 800339c:	609a      	str	r2, [r3, #8]
 800339e:	60da      	str	r2, [r3, #12]
 80033a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80033a2:	4bab      	ldr	r3, [pc, #684]	@ (8003650 <MX_GPIO_Init+0x2c4>)
 80033a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033a8:	4aa9      	ldr	r2, [pc, #676]	@ (8003650 <MX_GPIO_Init+0x2c4>)
 80033aa:	f043 0310 	orr.w	r3, r3, #16
 80033ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80033b2:	4ba7      	ldr	r3, [pc, #668]	@ (8003650 <MX_GPIO_Init+0x2c4>)
 80033b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033b8:	f003 0310 	and.w	r3, r3, #16
 80033bc:	623b      	str	r3, [r7, #32]
 80033be:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033c0:	4ba3      	ldr	r3, [pc, #652]	@ (8003650 <MX_GPIO_Init+0x2c4>)
 80033c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033c6:	4aa2      	ldr	r2, [pc, #648]	@ (8003650 <MX_GPIO_Init+0x2c4>)
 80033c8:	f043 0304 	orr.w	r3, r3, #4
 80033cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80033d0:	4b9f      	ldr	r3, [pc, #636]	@ (8003650 <MX_GPIO_Init+0x2c4>)
 80033d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033d6:	f003 0304 	and.w	r3, r3, #4
 80033da:	61fb      	str	r3, [r7, #28]
 80033dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80033de:	4b9c      	ldr	r3, [pc, #624]	@ (8003650 <MX_GPIO_Init+0x2c4>)
 80033e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033e4:	4a9a      	ldr	r2, [pc, #616]	@ (8003650 <MX_GPIO_Init+0x2c4>)
 80033e6:	f043 0320 	orr.w	r3, r3, #32
 80033ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80033ee:	4b98      	ldr	r3, [pc, #608]	@ (8003650 <MX_GPIO_Init+0x2c4>)
 80033f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033f4:	f003 0320 	and.w	r3, r3, #32
 80033f8:	61bb      	str	r3, [r7, #24]
 80033fa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80033fc:	4b94      	ldr	r3, [pc, #592]	@ (8003650 <MX_GPIO_Init+0x2c4>)
 80033fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003402:	4a93      	ldr	r2, [pc, #588]	@ (8003650 <MX_GPIO_Init+0x2c4>)
 8003404:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003408:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800340c:	4b90      	ldr	r3, [pc, #576]	@ (8003650 <MX_GPIO_Init+0x2c4>)
 800340e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003412:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003416:	617b      	str	r3, [r7, #20]
 8003418:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800341a:	4b8d      	ldr	r3, [pc, #564]	@ (8003650 <MX_GPIO_Init+0x2c4>)
 800341c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003420:	4a8b      	ldr	r2, [pc, #556]	@ (8003650 <MX_GPIO_Init+0x2c4>)
 8003422:	f043 0301 	orr.w	r3, r3, #1
 8003426:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800342a:	4b89      	ldr	r3, [pc, #548]	@ (8003650 <MX_GPIO_Init+0x2c4>)
 800342c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	613b      	str	r3, [r7, #16]
 8003436:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003438:	4b85      	ldr	r3, [pc, #532]	@ (8003650 <MX_GPIO_Init+0x2c4>)
 800343a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800343e:	4a84      	ldr	r2, [pc, #528]	@ (8003650 <MX_GPIO_Init+0x2c4>)
 8003440:	f043 0302 	orr.w	r3, r3, #2
 8003444:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003448:	4b81      	ldr	r3, [pc, #516]	@ (8003650 <MX_GPIO_Init+0x2c4>)
 800344a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003456:	4b7e      	ldr	r3, [pc, #504]	@ (8003650 <MX_GPIO_Init+0x2c4>)
 8003458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800345c:	4a7c      	ldr	r2, [pc, #496]	@ (8003650 <MX_GPIO_Init+0x2c4>)
 800345e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003462:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003466:	4b7a      	ldr	r3, [pc, #488]	@ (8003650 <MX_GPIO_Init+0x2c4>)
 8003468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800346c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003470:	60bb      	str	r3, [r7, #8]
 8003472:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003474:	4b76      	ldr	r3, [pc, #472]	@ (8003650 <MX_GPIO_Init+0x2c4>)
 8003476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800347a:	4a75      	ldr	r2, [pc, #468]	@ (8003650 <MX_GPIO_Init+0x2c4>)
 800347c:	f043 0308 	orr.w	r3, r3, #8
 8003480:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003484:	4b72      	ldr	r3, [pc, #456]	@ (8003650 <MX_GPIO_Init+0x2c4>)
 8003486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800348a:	f003 0308 	and.w	r3, r3, #8
 800348e:	607b      	str	r3, [r7, #4]
 8003490:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LINE_DRIVER1_ENABLE_Pin|LINE_DRIVER2_ENABLE_Pin, GPIO_PIN_SET);
 8003492:	2201      	movs	r2, #1
 8003494:	f640 0105 	movw	r1, #2053	@ 0x805
 8003498:	486e      	ldr	r0, [pc, #440]	@ (8003654 <MX_GPIO_Init+0x2c8>)
 800349a:	f007 fa73 	bl	800a984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
 800349e:	2200      	movs	r2, #0
 80034a0:	2102      	movs	r1, #2
 80034a2:	486d      	ldr	r0, [pc, #436]	@ (8003658 <MX_GPIO_Init+0x2cc>)
 80034a4:	f007 fa6e 	bl	800a984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80034a8:	2200      	movs	r2, #0
 80034aa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80034ae:	4869      	ldr	r0, [pc, #420]	@ (8003654 <MX_GPIO_Init+0x2c8>)
 80034b0:	f007 fa68 	bl	800a984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_3V3_SWITCH_GPIO_Port, OUT_3V3_SWITCH_Pin, GPIO_PIN_SET);
 80034b4:	2201      	movs	r2, #1
 80034b6:	2101      	movs	r1, #1
 80034b8:	4868      	ldr	r0, [pc, #416]	@ (800365c <MX_GPIO_Init+0x2d0>)
 80034ba:	f007 fa63 	bl	800a984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ACTIVE_GPIO_Port, LED_ACTIVE_Pin, GPIO_PIN_SET);
 80034be:	2201      	movs	r2, #1
 80034c0:	2101      	movs	r1, #1
 80034c2:	4867      	ldr	r0, [pc, #412]	@ (8003660 <MX_GPIO_Init+0x2d4>)
 80034c4:	f007 fa5e 	bl	800a984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80034c8:	2200      	movs	r2, #0
 80034ca:	2102      	movs	r1, #2
 80034cc:	4864      	ldr	r0, [pc, #400]	@ (8003660 <MX_GPIO_Init+0x2d4>)
 80034ce:	f007 fa59 	bl	800a984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80034d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80034d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034d8:	2300      	movs	r3, #0
 80034da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034dc:	2300      	movs	r3, #0
 80034de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80034e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034e4:	4619      	mov	r1, r3
 80034e6:	485f      	ldr	r0, [pc, #380]	@ (8003664 <MX_GPIO_Init+0x2d8>)
 80034e8:	f007 f88c 	bl	800a604 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LINE_DRIVER1_ENABLE_Pin LINE_DRIVER2_ENABLE_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LINE_DRIVER1_ENABLE_Pin|LINE_DRIVER2_ENABLE_Pin|LED_RED_Pin;
 80034ec:	f644 0305 	movw	r3, #18437	@ 0x4805
 80034f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034f2:	2301      	movs	r3, #1
 80034f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f6:	2300      	movs	r3, #0
 80034f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034fa:	2300      	movs	r3, #0
 80034fc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003502:	4619      	mov	r1, r3
 8003504:	4853      	ldr	r0, [pc, #332]	@ (8003654 <MX_GPIO_Init+0x2c8>)
 8003506:	f007 f87d 	bl	800a604 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_500V_ENABLE_Pin */
  GPIO_InitStruct.Pin = OUT_500V_ENABLE_Pin;
 800350a:	2301      	movs	r3, #1
 800350c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800350e:	2300      	movs	r3, #0
 8003510:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003512:	2300      	movs	r3, #0
 8003514:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OUT_500V_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003516:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800351a:	4619      	mov	r1, r3
 800351c:	484e      	ldr	r0, [pc, #312]	@ (8003658 <MX_GPIO_Init+0x2cc>)
 800351e:	f007 f871 	bl	800a604 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_OUTPUT_Pin */
  GPIO_InitStruct.Pin = TEST_OUTPUT_Pin;
 8003522:	2302      	movs	r3, #2
 8003524:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003526:	2301      	movs	r3, #1
 8003528:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352a:	2300      	movs	r3, #0
 800352c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800352e:	2300      	movs	r3, #0
 8003530:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(TEST_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 8003532:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003536:	4619      	mov	r1, r3
 8003538:	4847      	ldr	r0, [pc, #284]	@ (8003658 <MX_GPIO_Init+0x2cc>)
 800353a:	f007 f863 	bl	800a604 <HAL_GPIO_Init>

  /*Configure GPIO pin : TURN_PLASMA_ON_Pin */
  GPIO_InitStruct.Pin = TURN_PLASMA_ON_Pin;
 800353e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003542:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003544:	2300      	movs	r3, #0
 8003546:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003548:	2300      	movs	r3, #0
 800354a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TURN_PLASMA_ON_GPIO_Port, &GPIO_InitStruct);
 800354c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003550:	4619      	mov	r1, r3
 8003552:	4843      	ldr	r0, [pc, #268]	@ (8003660 <MX_GPIO_Init+0x2d4>)
 8003554:	f007 f856 	bl	800a604 <HAL_GPIO_Init>

  /*Configure GPIO pin : INP_COMP_IRQ_Pin */
  GPIO_InitStruct.Pin = INP_COMP_IRQ_Pin;
 8003558:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800355c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800355e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003562:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003564:	2300      	movs	r3, #0
 8003566:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(INP_COMP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003568:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800356c:	4619      	mov	r1, r3
 800356e:	483c      	ldr	r0, [pc, #240]	@ (8003660 <MX_GPIO_Init+0x2d4>)
 8003570:	f007 f848 	bl	800a604 <HAL_GPIO_Init>

  /*Configure GPIO pin : POWER_OFF_IRQ_Pin */
  GPIO_InitStruct.Pin = POWER_OFF_IRQ_Pin;
 8003574:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003578:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800357a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800357e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003580:	2300      	movs	r3, #0
 8003582:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(POWER_OFF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003584:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003588:	4619      	mov	r1, r3
 800358a:	4835      	ldr	r0, [pc, #212]	@ (8003660 <MX_GPIO_Init+0x2d4>)
 800358c:	f007 f83a 	bl	800a604 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8003590:	2380      	movs	r3, #128	@ 0x80
 8003592:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003594:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003598:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359a:	2300      	movs	r3, #0
 800359c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800359e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035a2:	4619      	mov	r1, r3
 80035a4:	482c      	ldr	r0, [pc, #176]	@ (8003658 <MX_GPIO_Init+0x2cc>)
 80035a6:	f007 f82d 	bl	800a604 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80035aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80035ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035b0:	2300      	movs	r3, #0
 80035b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b4:	2300      	movs	r3, #0
 80035b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80035b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035bc:	4619      	mov	r1, r3
 80035be:	482a      	ldr	r0, [pc, #168]	@ (8003668 <MX_GPIO_Init+0x2dc>)
 80035c0:	f007 f820 	bl	800a604 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80035c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80035c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ca:	2302      	movs	r3, #2
 80035cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ce:	2300      	movs	r3, #0
 80035d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d2:	2300      	movs	r3, #0
 80035d4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80035d6:	230a      	movs	r3, #10
 80035d8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80035da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035de:	4619      	mov	r1, r3
 80035e0:	4821      	ldr	r0, [pc, #132]	@ (8003668 <MX_GPIO_Init+0x2dc>)
 80035e2:	f007 f80f 	bl	800a604 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_3V3_SWITCH_Pin */
  GPIO_InitStruct.Pin = OUT_3V3_SWITCH_Pin;
 80035e6:	2301      	movs	r3, #1
 80035e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035ea:	2301      	movs	r3, #1
 80035ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ee:	2300      	movs	r3, #0
 80035f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f2:	2300      	movs	r3, #0
 80035f4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(OUT_3V3_SWITCH_GPIO_Port, &GPIO_InitStruct);
 80035f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035fa:	4619      	mov	r1, r3
 80035fc:	4817      	ldr	r0, [pc, #92]	@ (800365c <MX_GPIO_Init+0x2d0>)
 80035fe:	f007 f801 	bl	800a604 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_15V_ENABLE_Pin */
  GPIO_InitStruct.Pin = OUT_15V_ENABLE_Pin;
 8003602:	2302      	movs	r3, #2
 8003604:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003606:	2300      	movs	r3, #0
 8003608:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800360a:	2300      	movs	r3, #0
 800360c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OUT_15V_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800360e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003612:	4619      	mov	r1, r3
 8003614:	4811      	ldr	r0, [pc, #68]	@ (800365c <MX_GPIO_Init+0x2d0>)
 8003616:	f006 fff5 	bl	800a604 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_ACTIVE_Pin LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_ACTIVE_Pin|LED_YELLOW_Pin;
 800361a:	2303      	movs	r3, #3
 800361c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800361e:	2301      	movs	r3, #1
 8003620:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003622:	2300      	movs	r3, #0
 8003624:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003626:	2300      	movs	r3, #0
 8003628:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800362a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800362e:	4619      	mov	r1, r3
 8003630:	480b      	ldr	r0, [pc, #44]	@ (8003660 <MX_GPIO_Init+0x2d4>)
 8003632:	f006 ffe7 	bl	800a604 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003636:	2200      	movs	r2, #0
 8003638:	2100      	movs	r1, #0
 800363a:	2028      	movs	r0, #40	@ 0x28
 800363c:	f004 f8d7 	bl	80077ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003640:	2028      	movs	r0, #40	@ 0x28
 8003642:	f004 f8ee 	bl	8007822 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003646:	bf00      	nop
 8003648:	3738      	adds	r7, #56	@ 0x38
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	58024400 	.word	0x58024400
 8003654:	58020400 	.word	0x58020400
 8003658:	58021800 	.word	0x58021800
 800365c:	58020c00 	.word	0x58020c00
 8003660:	58021000 	.word	0x58021000
 8003664:	58020800 	.word	0x58020800
 8003668:	58020000 	.word	0x58020000

0800366c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003670:	b672      	cpsid	i
}
 8003672:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003674:	bf00      	nop
 8003676:	e7fd      	b.n	8003674 <Error_Handler+0x8>

08003678 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800367e:	4b0a      	ldr	r3, [pc, #40]	@ (80036a8 <HAL_MspInit+0x30>)
 8003680:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003684:	4a08      	ldr	r2, [pc, #32]	@ (80036a8 <HAL_MspInit+0x30>)
 8003686:	f043 0302 	orr.w	r3, r3, #2
 800368a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800368e:	4b06      	ldr	r3, [pc, #24]	@ (80036a8 <HAL_MspInit+0x30>)
 8003690:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	607b      	str	r3, [r7, #4]
 800369a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	58024400 	.word	0x58024400

080036ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b090      	sub	sp, #64	@ 0x40
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036b8:	2200      	movs	r2, #0
 80036ba:	601a      	str	r2, [r3, #0]
 80036bc:	605a      	str	r2, [r3, #4]
 80036be:	609a      	str	r2, [r3, #8]
 80036c0:	60da      	str	r2, [r3, #12]
 80036c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4aaa      	ldr	r2, [pc, #680]	@ (8003974 <HAL_ADC_MspInit+0x2c8>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d16b      	bne.n	80037a6 <HAL_ADC_MspInit+0xfa>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80036ce:	4baa      	ldr	r3, [pc, #680]	@ (8003978 <HAL_ADC_MspInit+0x2cc>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	3301      	adds	r3, #1
 80036d4:	4aa8      	ldr	r2, [pc, #672]	@ (8003978 <HAL_ADC_MspInit+0x2cc>)
 80036d6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80036d8:	4ba7      	ldr	r3, [pc, #668]	@ (8003978 <HAL_ADC_MspInit+0x2cc>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d10e      	bne.n	80036fe <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80036e0:	4ba6      	ldr	r3, [pc, #664]	@ (800397c <HAL_ADC_MspInit+0x2d0>)
 80036e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80036e6:	4aa5      	ldr	r2, [pc, #660]	@ (800397c <HAL_ADC_MspInit+0x2d0>)
 80036e8:	f043 0320 	orr.w	r3, r3, #32
 80036ec:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80036f0:	4ba2      	ldr	r3, [pc, #648]	@ (800397c <HAL_ADC_MspInit+0x2d0>)
 80036f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80036f6:	f003 0320 	and.w	r3, r3, #32
 80036fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036fe:	4b9f      	ldr	r3, [pc, #636]	@ (800397c <HAL_ADC_MspInit+0x2d0>)
 8003700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003704:	4a9d      	ldr	r2, [pc, #628]	@ (800397c <HAL_ADC_MspInit+0x2d0>)
 8003706:	f043 0301 	orr.w	r3, r3, #1
 800370a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800370e:	4b9b      	ldr	r3, [pc, #620]	@ (800397c <HAL_ADC_MspInit+0x2d0>)
 8003710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	627b      	str	r3, [r7, #36]	@ 0x24
 800371a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP16
    PA3     ------> ADC1_INP15
    PA4     ------> ADC1_INP18
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 800371c:	2319      	movs	r3, #25
 800371e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003720:	2303      	movs	r3, #3
 8003722:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003724:	2300      	movs	r3, #0
 8003726:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003728:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800372c:	4619      	mov	r1, r3
 800372e:	4894      	ldr	r0, [pc, #592]	@ (8003980 <HAL_ADC_MspInit+0x2d4>)
 8003730:	f006 ff68 	bl	800a604 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream2;
 8003734:	4b93      	ldr	r3, [pc, #588]	@ (8003984 <HAL_ADC_MspInit+0x2d8>)
 8003736:	4a94      	ldr	r2, [pc, #592]	@ (8003988 <HAL_ADC_MspInit+0x2dc>)
 8003738:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800373a:	4b92      	ldr	r3, [pc, #584]	@ (8003984 <HAL_ADC_MspInit+0x2d8>)
 800373c:	2209      	movs	r2, #9
 800373e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003740:	4b90      	ldr	r3, [pc, #576]	@ (8003984 <HAL_ADC_MspInit+0x2d8>)
 8003742:	2200      	movs	r2, #0
 8003744:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003746:	4b8f      	ldr	r3, [pc, #572]	@ (8003984 <HAL_ADC_MspInit+0x2d8>)
 8003748:	2200      	movs	r2, #0
 800374a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800374c:	4b8d      	ldr	r3, [pc, #564]	@ (8003984 <HAL_ADC_MspInit+0x2d8>)
 800374e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003752:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003754:	4b8b      	ldr	r3, [pc, #556]	@ (8003984 <HAL_ADC_MspInit+0x2d8>)
 8003756:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800375a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800375c:	4b89      	ldr	r3, [pc, #548]	@ (8003984 <HAL_ADC_MspInit+0x2d8>)
 800375e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003762:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003764:	4b87      	ldr	r3, [pc, #540]	@ (8003984 <HAL_ADC_MspInit+0x2d8>)
 8003766:	2200      	movs	r2, #0
 8003768:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800376a:	4b86      	ldr	r3, [pc, #536]	@ (8003984 <HAL_ADC_MspInit+0x2d8>)
 800376c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003770:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003772:	4b84      	ldr	r3, [pc, #528]	@ (8003984 <HAL_ADC_MspInit+0x2d8>)
 8003774:	2200      	movs	r2, #0
 8003776:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003778:	4882      	ldr	r0, [pc, #520]	@ (8003984 <HAL_ADC_MspInit+0x2d8>)
 800377a:	f004 f86d 	bl	8007858 <HAL_DMA_Init>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <HAL_ADC_MspInit+0xdc>
    {
      Error_Handler();
 8003784:	f7ff ff72 	bl	800366c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a7e      	ldr	r2, [pc, #504]	@ (8003984 <HAL_ADC_MspInit+0x2d8>)
 800378c:	659a      	str	r2, [r3, #88]	@ 0x58
 800378e:	4a7d      	ldr	r2, [pc, #500]	@ (8003984 <HAL_ADC_MspInit+0x2d8>)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003794:	2200      	movs	r2, #0
 8003796:	2100      	movs	r1, #0
 8003798:	2012      	movs	r0, #18
 800379a:	f004 f828 	bl	80077ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800379e:	2012      	movs	r0, #18
 80037a0:	f004 f83f 	bl	8007822 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80037a4:	e0e2      	b.n	800396c <HAL_ADC_MspInit+0x2c0>
  else if(hadc->Instance==ADC2)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a78      	ldr	r2, [pc, #480]	@ (800398c <HAL_ADC_MspInit+0x2e0>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d156      	bne.n	800385e <HAL_ADC_MspInit+0x1b2>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80037b0:	4b71      	ldr	r3, [pc, #452]	@ (8003978 <HAL_ADC_MspInit+0x2cc>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	3301      	adds	r3, #1
 80037b6:	4a70      	ldr	r2, [pc, #448]	@ (8003978 <HAL_ADC_MspInit+0x2cc>)
 80037b8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80037ba:	4b6f      	ldr	r3, [pc, #444]	@ (8003978 <HAL_ADC_MspInit+0x2cc>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d10e      	bne.n	80037e0 <HAL_ADC_MspInit+0x134>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80037c2:	4b6e      	ldr	r3, [pc, #440]	@ (800397c <HAL_ADC_MspInit+0x2d0>)
 80037c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80037c8:	4a6c      	ldr	r2, [pc, #432]	@ (800397c <HAL_ADC_MspInit+0x2d0>)
 80037ca:	f043 0320 	orr.w	r3, r3, #32
 80037ce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80037d2:	4b6a      	ldr	r3, [pc, #424]	@ (800397c <HAL_ADC_MspInit+0x2d0>)
 80037d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80037d8:	f003 0320 	and.w	r3, r3, #32
 80037dc:	623b      	str	r3, [r7, #32]
 80037de:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037e0:	4b66      	ldr	r3, [pc, #408]	@ (800397c <HAL_ADC_MspInit+0x2d0>)
 80037e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80037e6:	4a65      	ldr	r2, [pc, #404]	@ (800397c <HAL_ADC_MspInit+0x2d0>)
 80037e8:	f043 0301 	orr.w	r3, r3, #1
 80037ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80037f0:	4b62      	ldr	r3, [pc, #392]	@ (800397c <HAL_ADC_MspInit+0x2d0>)
 80037f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	61fb      	str	r3, [r7, #28]
 80037fc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037fe:	4b5f      	ldr	r3, [pc, #380]	@ (800397c <HAL_ADC_MspInit+0x2d0>)
 8003800:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003804:	4a5d      	ldr	r2, [pc, #372]	@ (800397c <HAL_ADC_MspInit+0x2d0>)
 8003806:	f043 0302 	orr.w	r3, r3, #2
 800380a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800380e:	4b5b      	ldr	r3, [pc, #364]	@ (800397c <HAL_ADC_MspInit+0x2d0>)
 8003810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	61bb      	str	r3, [r7, #24]
 800381a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800381c:	2360      	movs	r3, #96	@ 0x60
 800381e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003820:	2303      	movs	r3, #3
 8003822:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003824:	2300      	movs	r3, #0
 8003826:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003828:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800382c:	4619      	mov	r1, r3
 800382e:	4854      	ldr	r0, [pc, #336]	@ (8003980 <HAL_ADC_MspInit+0x2d4>)
 8003830:	f006 fee8 	bl	800a604 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003834:	2302      	movs	r3, #2
 8003836:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003838:	2303      	movs	r3, #3
 800383a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800383c:	2300      	movs	r3, #0
 800383e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003840:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003844:	4619      	mov	r1, r3
 8003846:	4852      	ldr	r0, [pc, #328]	@ (8003990 <HAL_ADC_MspInit+0x2e4>)
 8003848:	f006 fedc 	bl	800a604 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800384c:	2200      	movs	r2, #0
 800384e:	2100      	movs	r1, #0
 8003850:	2012      	movs	r0, #18
 8003852:	f003 ffcc 	bl	80077ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003856:	2012      	movs	r0, #18
 8003858:	f003 ffe3 	bl	8007822 <HAL_NVIC_EnableIRQ>
}
 800385c:	e086      	b.n	800396c <HAL_ADC_MspInit+0x2c0>
  else if(hadc->Instance==ADC3)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a4c      	ldr	r2, [pc, #304]	@ (8003994 <HAL_ADC_MspInit+0x2e8>)
 8003864:	4293      	cmp	r3, r2
 8003866:	f040 8081 	bne.w	800396c <HAL_ADC_MspInit+0x2c0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800386a:	4b44      	ldr	r3, [pc, #272]	@ (800397c <HAL_ADC_MspInit+0x2d0>)
 800386c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003870:	4a42      	ldr	r2, [pc, #264]	@ (800397c <HAL_ADC_MspInit+0x2d0>)
 8003872:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003876:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800387a:	4b40      	ldr	r3, [pc, #256]	@ (800397c <HAL_ADC_MspInit+0x2d0>)
 800387c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003880:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003884:	617b      	str	r3, [r7, #20]
 8003886:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003888:	4b3c      	ldr	r3, [pc, #240]	@ (800397c <HAL_ADC_MspInit+0x2d0>)
 800388a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800388e:	4a3b      	ldr	r2, [pc, #236]	@ (800397c <HAL_ADC_MspInit+0x2d0>)
 8003890:	f043 0320 	orr.w	r3, r3, #32
 8003894:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003898:	4b38      	ldr	r3, [pc, #224]	@ (800397c <HAL_ADC_MspInit+0x2d0>)
 800389a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800389e:	f003 0320 	and.w	r3, r3, #32
 80038a2:	613b      	str	r3, [r7, #16]
 80038a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038a6:	4b35      	ldr	r3, [pc, #212]	@ (800397c <HAL_ADC_MspInit+0x2d0>)
 80038a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038ac:	4a33      	ldr	r2, [pc, #204]	@ (800397c <HAL_ADC_MspInit+0x2d0>)
 80038ae:	f043 0304 	orr.w	r3, r3, #4
 80038b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80038b6:	4b31      	ldr	r3, [pc, #196]	@ (800397c <HAL_ADC_MspInit+0x2d0>)
 80038b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	60fb      	str	r3, [r7, #12]
 80038c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80038c4:	f44f 63ff 	mov.w	r3, #2040	@ 0x7f8
 80038c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038ca:	2303      	movs	r3, #3
 80038cc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ce:	2300      	movs	r3, #0
 80038d0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80038d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80038d6:	4619      	mov	r1, r3
 80038d8:	482f      	ldr	r0, [pc, #188]	@ (8003998 <HAL_ADC_MspInit+0x2ec>)
 80038da:	f006 fe93 	bl	800a604 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80038de:	2301      	movs	r3, #1
 80038e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038e2:	2303      	movs	r3, #3
 80038e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e6:	2300      	movs	r3, #0
 80038e8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80038ee:	4619      	mov	r1, r3
 80038f0:	482a      	ldr	r0, [pc, #168]	@ (800399c <HAL_ADC_MspInit+0x2f0>)
 80038f2:	f006 fe87 	bl	800a604 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80038f6:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 80038fa:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80038fe:	f000 fe43 	bl	8004588 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8003902:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 8003906:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 800390a:	f000 fe3d 	bl	8004588 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 800390e:	4b24      	ldr	r3, [pc, #144]	@ (80039a0 <HAL_ADC_MspInit+0x2f4>)
 8003910:	4a24      	ldr	r2, [pc, #144]	@ (80039a4 <HAL_ADC_MspInit+0x2f8>)
 8003912:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8003914:	4b22      	ldr	r3, [pc, #136]	@ (80039a0 <HAL_ADC_MspInit+0x2f4>)
 8003916:	2273      	movs	r2, #115	@ 0x73
 8003918:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800391a:	4b21      	ldr	r3, [pc, #132]	@ (80039a0 <HAL_ADC_MspInit+0x2f4>)
 800391c:	2200      	movs	r2, #0
 800391e:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003920:	4b1f      	ldr	r3, [pc, #124]	@ (80039a0 <HAL_ADC_MspInit+0x2f4>)
 8003922:	2200      	movs	r2, #0
 8003924:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8003926:	4b1e      	ldr	r3, [pc, #120]	@ (80039a0 <HAL_ADC_MspInit+0x2f4>)
 8003928:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800392c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800392e:	4b1c      	ldr	r3, [pc, #112]	@ (80039a0 <HAL_ADC_MspInit+0x2f4>)
 8003930:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003934:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003936:	4b1a      	ldr	r3, [pc, #104]	@ (80039a0 <HAL_ADC_MspInit+0x2f4>)
 8003938:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800393c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 800393e:	4b18      	ldr	r3, [pc, #96]	@ (80039a0 <HAL_ADC_MspInit+0x2f4>)
 8003940:	2200      	movs	r2, #0
 8003942:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8003944:	4b16      	ldr	r3, [pc, #88]	@ (80039a0 <HAL_ADC_MspInit+0x2f4>)
 8003946:	2200      	movs	r2, #0
 8003948:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800394a:	4b15      	ldr	r3, [pc, #84]	@ (80039a0 <HAL_ADC_MspInit+0x2f4>)
 800394c:	2200      	movs	r2, #0
 800394e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8003950:	4813      	ldr	r0, [pc, #76]	@ (80039a0 <HAL_ADC_MspInit+0x2f4>)
 8003952:	f003 ff81 	bl	8007858 <HAL_DMA_Init>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d001      	beq.n	8003960 <HAL_ADC_MspInit+0x2b4>
      Error_Handler();
 800395c:	f7ff fe86 	bl	800366c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a0f      	ldr	r2, [pc, #60]	@ (80039a0 <HAL_ADC_MspInit+0x2f4>)
 8003964:	659a      	str	r2, [r3, #88]	@ 0x58
 8003966:	4a0e      	ldr	r2, [pc, #56]	@ (80039a0 <HAL_ADC_MspInit+0x2f4>)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800396c:	bf00      	nop
 800396e:	3740      	adds	r7, #64	@ 0x40
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40022000 	.word	0x40022000
 8003978:	24001094 	.word	0x24001094
 800397c:	58024400 	.word	0x58024400
 8003980:	58020000 	.word	0x58020000
 8003984:	24000bd0 	.word	0x24000bd0
 8003988:	40020040 	.word	0x40020040
 800398c:	40022100 	.word	0x40022100
 8003990:	58020400 	.word	0x58020400
 8003994:	58026000 	.word	0x58026000
 8003998:	58021400 	.word	0x58021400
 800399c:	58020800 	.word	0x58020800
 80039a0:	24000c48 	.word	0x24000c48
 80039a4:	40020028 	.word	0x40020028

080039a8 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b08a      	sub	sp, #40	@ 0x28
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039b0:	f107 0314 	add.w	r3, r7, #20
 80039b4:	2200      	movs	r2, #0
 80039b6:	601a      	str	r2, [r3, #0]
 80039b8:	605a      	str	r2, [r3, #4]
 80039ba:	609a      	str	r2, [r3, #8]
 80039bc:	60da      	str	r2, [r3, #12]
 80039be:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a21      	ldr	r2, [pc, #132]	@ (8003a4c <HAL_COMP_MspInit+0xa4>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d13b      	bne.n	8003a42 <HAL_COMP_MspInit+0x9a>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_COMP12_CLK_ENABLE();
 80039ca:	4b21      	ldr	r3, [pc, #132]	@ (8003a50 <HAL_COMP_MspInit+0xa8>)
 80039cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80039d0:	4a1f      	ldr	r2, [pc, #124]	@ (8003a50 <HAL_COMP_MspInit+0xa8>)
 80039d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039d6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80039da:	4b1d      	ldr	r3, [pc, #116]	@ (8003a50 <HAL_COMP_MspInit+0xa8>)
 80039dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80039e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039e4:	613b      	str	r3, [r7, #16]
 80039e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80039e8:	4b19      	ldr	r3, [pc, #100]	@ (8003a50 <HAL_COMP_MspInit+0xa8>)
 80039ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039ee:	4a18      	ldr	r2, [pc, #96]	@ (8003a50 <HAL_COMP_MspInit+0xa8>)
 80039f0:	f043 0310 	orr.w	r3, r3, #16
 80039f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80039f8:	4b15      	ldr	r3, [pc, #84]	@ (8003a50 <HAL_COMP_MspInit+0xa8>)
 80039fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039fe:	f003 0310 	and.w	r3, r3, #16
 8003a02:	60fb      	str	r3, [r7, #12]
 8003a04:	68fb      	ldr	r3, [r7, #12]
    /**COMP2 GPIO Configuration
    PE7     ------> COMP2_INM
    PE11     ------> COMP2_INP
    PE13     ------> COMP2_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_11;
 8003a06:	f44f 6308 	mov.w	r3, #2176	@ 0x880
 8003a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a10:	2300      	movs	r3, #0
 8003a12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a14:	f107 0314 	add.w	r3, r7, #20
 8003a18:	4619      	mov	r1, r3
 8003a1a:	480e      	ldr	r0, [pc, #56]	@ (8003a54 <HAL_COMP_MspInit+0xac>)
 8003a1c:	f006 fdf2 	bl	800a604 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003a20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a26:	2302      	movs	r3, #2
 8003a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_COMP2;
 8003a32:	230d      	movs	r3, #13
 8003a34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a36:	f107 0314 	add.w	r3, r7, #20
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	4805      	ldr	r0, [pc, #20]	@ (8003a54 <HAL_COMP_MspInit+0xac>)
 8003a3e:	f006 fde1 	bl	800a604 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 8003a42:	bf00      	nop
 8003a44:	3728      	adds	r7, #40	@ 0x28
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	58003810 	.word	0x58003810
 8003a50:	58024400 	.word	0x58024400
 8003a54:	58021000 	.word	0x58021000

08003a58 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b08e      	sub	sp, #56	@ 0x38
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a64:	2200      	movs	r2, #0
 8003a66:	601a      	str	r2, [r3, #0]
 8003a68:	605a      	str	r2, [r3, #4]
 8003a6a:	609a      	str	r2, [r3, #8]
 8003a6c:	60da      	str	r2, [r3, #12]
 8003a6e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a59      	ldr	r2, [pc, #356]	@ (8003bdc <HAL_ETH_MspInit+0x184>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	f040 80ab 	bne.w	8003bd2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8003a7c:	4b58      	ldr	r3, [pc, #352]	@ (8003be0 <HAL_ETH_MspInit+0x188>)
 8003a7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003a82:	4a57      	ldr	r2, [pc, #348]	@ (8003be0 <HAL_ETH_MspInit+0x188>)
 8003a84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a88:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003a8c:	4b54      	ldr	r3, [pc, #336]	@ (8003be0 <HAL_ETH_MspInit+0x188>)
 8003a8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003a92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a96:	623b      	str	r3, [r7, #32]
 8003a98:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8003a9a:	4b51      	ldr	r3, [pc, #324]	@ (8003be0 <HAL_ETH_MspInit+0x188>)
 8003a9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003aa0:	4a4f      	ldr	r2, [pc, #316]	@ (8003be0 <HAL_ETH_MspInit+0x188>)
 8003aa2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aa6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003aaa:	4b4d      	ldr	r3, [pc, #308]	@ (8003be0 <HAL_ETH_MspInit+0x188>)
 8003aac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003ab0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ab4:	61fb      	str	r3, [r7, #28]
 8003ab6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8003ab8:	4b49      	ldr	r3, [pc, #292]	@ (8003be0 <HAL_ETH_MspInit+0x188>)
 8003aba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003abe:	4a48      	ldr	r2, [pc, #288]	@ (8003be0 <HAL_ETH_MspInit+0x188>)
 8003ac0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ac4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003ac8:	4b45      	ldr	r3, [pc, #276]	@ (8003be0 <HAL_ETH_MspInit+0x188>)
 8003aca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ad2:	61bb      	str	r3, [r7, #24]
 8003ad4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ad6:	4b42      	ldr	r3, [pc, #264]	@ (8003be0 <HAL_ETH_MspInit+0x188>)
 8003ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003adc:	4a40      	ldr	r2, [pc, #256]	@ (8003be0 <HAL_ETH_MspInit+0x188>)
 8003ade:	f043 0304 	orr.w	r3, r3, #4
 8003ae2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003ae6:	4b3e      	ldr	r3, [pc, #248]	@ (8003be0 <HAL_ETH_MspInit+0x188>)
 8003ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	617b      	str	r3, [r7, #20]
 8003af2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003af4:	4b3a      	ldr	r3, [pc, #232]	@ (8003be0 <HAL_ETH_MspInit+0x188>)
 8003af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003afa:	4a39      	ldr	r2, [pc, #228]	@ (8003be0 <HAL_ETH_MspInit+0x188>)
 8003afc:	f043 0301 	orr.w	r3, r3, #1
 8003b00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003b04:	4b36      	ldr	r3, [pc, #216]	@ (8003be0 <HAL_ETH_MspInit+0x188>)
 8003b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	613b      	str	r3, [r7, #16]
 8003b10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b12:	4b33      	ldr	r3, [pc, #204]	@ (8003be0 <HAL_ETH_MspInit+0x188>)
 8003b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b18:	4a31      	ldr	r2, [pc, #196]	@ (8003be0 <HAL_ETH_MspInit+0x188>)
 8003b1a:	f043 0302 	orr.w	r3, r3, #2
 8003b1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003b22:	4b2f      	ldr	r3, [pc, #188]	@ (8003be0 <HAL_ETH_MspInit+0x188>)
 8003b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	60fb      	str	r3, [r7, #12]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003b30:	4b2b      	ldr	r3, [pc, #172]	@ (8003be0 <HAL_ETH_MspInit+0x188>)
 8003b32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b36:	4a2a      	ldr	r2, [pc, #168]	@ (8003be0 <HAL_ETH_MspInit+0x188>)
 8003b38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003b40:	4b27      	ldr	r3, [pc, #156]	@ (8003be0 <HAL_ETH_MspInit+0x188>)
 8003b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b4a:	60bb      	str	r3, [r7, #8]
 8003b4c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003b4e:	2332      	movs	r3, #50	@ 0x32
 8003b50:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b52:	2302      	movs	r3, #2
 8003b54:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b56:	2300      	movs	r3, #0
 8003b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003b5e:	230b      	movs	r3, #11
 8003b60:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b66:	4619      	mov	r1, r3
 8003b68:	481e      	ldr	r0, [pc, #120]	@ (8003be4 <HAL_ETH_MspInit+0x18c>)
 8003b6a:	f006 fd4b 	bl	800a604 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003b6e:	2386      	movs	r3, #134	@ 0x86
 8003b70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b72:	2302      	movs	r3, #2
 8003b74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b76:	2300      	movs	r3, #0
 8003b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003b7e:	230b      	movs	r3, #11
 8003b80:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b86:	4619      	mov	r1, r3
 8003b88:	4817      	ldr	r0, [pc, #92]	@ (8003be8 <HAL_ETH_MspInit+0x190>)
 8003b8a:	f006 fd3b 	bl	800a604 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003b8e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003b92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b94:	2302      	movs	r3, #2
 8003b96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003ba0:	230b      	movs	r3, #11
 8003ba2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003ba4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ba8:	4619      	mov	r1, r3
 8003baa:	4810      	ldr	r0, [pc, #64]	@ (8003bec <HAL_ETH_MspInit+0x194>)
 8003bac:	f006 fd2a 	bl	800a604 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003bb0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8003bb4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003bc2:	230b      	movs	r3, #11
 8003bc4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003bc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003bca:	4619      	mov	r1, r3
 8003bcc:	4808      	ldr	r0, [pc, #32]	@ (8003bf0 <HAL_ETH_MspInit+0x198>)
 8003bce:	f006 fd19 	bl	800a604 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8003bd2:	bf00      	nop
 8003bd4:	3738      	adds	r7, #56	@ 0x38
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	40028000 	.word	0x40028000
 8003be0:	58024400 	.word	0x58024400
 8003be4:	58020800 	.word	0x58020800
 8003be8:	58020000 	.word	0x58020000
 8003bec:	58020400 	.word	0x58020400
 8003bf0:	58021800 	.word	0x58021800

08003bf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b0ba      	sub	sp, #232	@ 0xe8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bfc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003c00:	2200      	movs	r2, #0
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	605a      	str	r2, [r3, #4]
 8003c06:	609a      	str	r2, [r3, #8]
 8003c08:	60da      	str	r2, [r3, #12]
 8003c0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003c0c:	f107 0318 	add.w	r3, r7, #24
 8003c10:	22b8      	movs	r2, #184	@ 0xb8
 8003c12:	2100      	movs	r1, #0
 8003c14:	4618      	mov	r0, r3
 8003c16:	f00e f9c4 	bl	8011fa2 <memset>
  if(huart->Instance==LPUART1)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a4d      	ldr	r2, [pc, #308]	@ (8003d54 <HAL_UART_MspInit+0x160>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d146      	bne.n	8003cb2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003c24:	f04f 0204 	mov.w	r2, #4
 8003c28:	f04f 0300 	mov.w	r3, #0
 8003c2c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 8003c30:	2300      	movs	r3, #0
 8003c32:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c36:	f107 0318 	add.w	r3, r7, #24
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f007 fe76 	bl	800b92c <HAL_RCCEx_PeriphCLKConfig>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003c46:	f7ff fd11 	bl	800366c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003c4a:	4b43      	ldr	r3, [pc, #268]	@ (8003d58 <HAL_UART_MspInit+0x164>)
 8003c4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003c50:	4a41      	ldr	r2, [pc, #260]	@ (8003d58 <HAL_UART_MspInit+0x164>)
 8003c52:	f043 0308 	orr.w	r3, r3, #8
 8003c56:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003c5a:	4b3f      	ldr	r3, [pc, #252]	@ (8003d58 <HAL_UART_MspInit+0x164>)
 8003c5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003c60:	f003 0308 	and.w	r3, r3, #8
 8003c64:	617b      	str	r3, [r7, #20]
 8003c66:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c68:	4b3b      	ldr	r3, [pc, #236]	@ (8003d58 <HAL_UART_MspInit+0x164>)
 8003c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c6e:	4a3a      	ldr	r2, [pc, #232]	@ (8003d58 <HAL_UART_MspInit+0x164>)
 8003c70:	f043 0302 	orr.w	r3, r3, #2
 8003c74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003c78:	4b37      	ldr	r3, [pc, #220]	@ (8003d58 <HAL_UART_MspInit+0x164>)
 8003c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	613b      	str	r3, [r7, #16]
 8003c84:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB6     ------> LPUART1_TX
    PB7     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c86:	23c0      	movs	r3, #192	@ 0xc0
 8003c88:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c8c:	2302      	movs	r3, #2
 8003c8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c92:	2300      	movs	r3, #0
 8003c94:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART;
 8003c9e:	2308      	movs	r3, #8
 8003ca0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ca4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003ca8:	4619      	mov	r1, r3
 8003caa:	482c      	ldr	r0, [pc, #176]	@ (8003d5c <HAL_UART_MspInit+0x168>)
 8003cac:	f006 fcaa 	bl	800a604 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003cb0:	e04b      	b.n	8003d4a <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART3)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a2a      	ldr	r2, [pc, #168]	@ (8003d60 <HAL_UART_MspInit+0x16c>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d146      	bne.n	8003d4a <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003cbc:	f04f 0202 	mov.w	r2, #2
 8003cc0:	f04f 0300 	mov.w	r3, #0
 8003cc4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003cce:	f107 0318 	add.w	r3, r7, #24
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f007 fe2a 	bl	800b92c <HAL_RCCEx_PeriphCLKConfig>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <HAL_UART_MspInit+0xee>
      Error_Handler();
 8003cde:	f7ff fcc5 	bl	800366c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8003d58 <HAL_UART_MspInit+0x164>)
 8003ce4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003ce8:	4a1b      	ldr	r2, [pc, #108]	@ (8003d58 <HAL_UART_MspInit+0x164>)
 8003cea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cee:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003cf2:	4b19      	ldr	r3, [pc, #100]	@ (8003d58 <HAL_UART_MspInit+0x164>)
 8003cf4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003cf8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cfc:	60fb      	str	r3, [r7, #12]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d00:	4b15      	ldr	r3, [pc, #84]	@ (8003d58 <HAL_UART_MspInit+0x164>)
 8003d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d06:	4a14      	ldr	r2, [pc, #80]	@ (8003d58 <HAL_UART_MspInit+0x164>)
 8003d08:	f043 0308 	orr.w	r3, r3, #8
 8003d0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003d10:	4b11      	ldr	r3, [pc, #68]	@ (8003d58 <HAL_UART_MspInit+0x164>)
 8003d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d16:	f003 0308 	and.w	r3, r3, #8
 8003d1a:	60bb      	str	r3, [r7, #8]
 8003d1c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8003d1e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003d22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d26:	2302      	movs	r3, #2
 8003d28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d32:	2300      	movs	r3, #0
 8003d34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003d38:	2307      	movs	r3, #7
 8003d3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d3e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003d42:	4619      	mov	r1, r3
 8003d44:	4807      	ldr	r0, [pc, #28]	@ (8003d64 <HAL_UART_MspInit+0x170>)
 8003d46:	f006 fc5d 	bl	800a604 <HAL_GPIO_Init>
}
 8003d4a:	bf00      	nop
 8003d4c:	37e8      	adds	r7, #232	@ 0xe8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	58000c00 	.word	0x58000c00
 8003d58:	58024400 	.word	0x58024400
 8003d5c:	58020400 	.word	0x58020400
 8003d60:	40004800 	.word	0x40004800
 8003d64:	58020c00 	.word	0x58020c00

08003d68 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b087      	sub	sp, #28
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a20      	ldr	r2, [pc, #128]	@ (8003df8 <HAL_TIM_PWM_MspInit+0x90>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d10f      	bne.n	8003d9a <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003d7a:	4b20      	ldr	r3, [pc, #128]	@ (8003dfc <HAL_TIM_PWM_MspInit+0x94>)
 8003d7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d80:	4a1e      	ldr	r2, [pc, #120]	@ (8003dfc <HAL_TIM_PWM_MspInit+0x94>)
 8003d82:	f043 0301 	orr.w	r3, r3, #1
 8003d86:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003d8a:	4b1c      	ldr	r3, [pc, #112]	@ (8003dfc <HAL_TIM_PWM_MspInit+0x94>)
 8003d8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	617b      	str	r3, [r7, #20]
 8003d96:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003d98:	e028      	b.n	8003dec <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM2)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003da2:	d10f      	bne.n	8003dc4 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003da4:	4b15      	ldr	r3, [pc, #84]	@ (8003dfc <HAL_TIM_PWM_MspInit+0x94>)
 8003da6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003daa:	4a14      	ldr	r2, [pc, #80]	@ (8003dfc <HAL_TIM_PWM_MspInit+0x94>)
 8003dac:	f043 0301 	orr.w	r3, r3, #1
 8003db0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003db4:	4b11      	ldr	r3, [pc, #68]	@ (8003dfc <HAL_TIM_PWM_MspInit+0x94>)
 8003db6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	613b      	str	r3, [r7, #16]
 8003dc0:	693b      	ldr	r3, [r7, #16]
}
 8003dc2:	e013      	b.n	8003dec <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM4)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8003e00 <HAL_TIM_PWM_MspInit+0x98>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d10e      	bne.n	8003dec <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003dce:	4b0b      	ldr	r3, [pc, #44]	@ (8003dfc <HAL_TIM_PWM_MspInit+0x94>)
 8003dd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003dd4:	4a09      	ldr	r2, [pc, #36]	@ (8003dfc <HAL_TIM_PWM_MspInit+0x94>)
 8003dd6:	f043 0304 	orr.w	r3, r3, #4
 8003dda:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003dde:	4b07      	ldr	r3, [pc, #28]	@ (8003dfc <HAL_TIM_PWM_MspInit+0x94>)
 8003de0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	60fb      	str	r3, [r7, #12]
 8003dea:	68fb      	ldr	r3, [r7, #12]
}
 8003dec:	bf00      	nop
 8003dee:	371c      	adds	r7, #28
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	40010000 	.word	0x40010000
 8003dfc:	58024400 	.word	0x58024400
 8003e00:	40000800 	.word	0x40000800

08003e04 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b08c      	sub	sp, #48	@ 0x30
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e0c:	f107 031c 	add.w	r3, r7, #28
 8003e10:	2200      	movs	r2, #0
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	605a      	str	r2, [r3, #4]
 8003e16:	609a      	str	r2, [r3, #8]
 8003e18:	60da      	str	r2, [r3, #12]
 8003e1a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a34      	ldr	r2, [pc, #208]	@ (8003ef4 <HAL_TIM_IC_MspInit+0xf0>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d12e      	bne.n	8003e84 <HAL_TIM_IC_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e26:	4b34      	ldr	r3, [pc, #208]	@ (8003ef8 <HAL_TIM_IC_MspInit+0xf4>)
 8003e28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003e2c:	4a32      	ldr	r2, [pc, #200]	@ (8003ef8 <HAL_TIM_IC_MspInit+0xf4>)
 8003e2e:	f043 0302 	orr.w	r3, r3, #2
 8003e32:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003e36:	4b30      	ldr	r3, [pc, #192]	@ (8003ef8 <HAL_TIM_IC_MspInit+0xf4>)
 8003e38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	61bb      	str	r3, [r7, #24]
 8003e42:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e44:	4b2c      	ldr	r3, [pc, #176]	@ (8003ef8 <HAL_TIM_IC_MspInit+0xf4>)
 8003e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e4a:	4a2b      	ldr	r2, [pc, #172]	@ (8003ef8 <HAL_TIM_IC_MspInit+0xf4>)
 8003e4c:	f043 0304 	orr.w	r3, r3, #4
 8003e50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003e54:	4b28      	ldr	r3, [pc, #160]	@ (8003ef8 <HAL_TIM_IC_MspInit+0xf4>)
 8003e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e5a:	f003 0304 	and.w	r3, r3, #4
 8003e5e:	617b      	str	r3, [r7, #20]
 8003e60:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003e62:	2340      	movs	r3, #64	@ 0x40
 8003e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e66:	2302      	movs	r3, #2
 8003e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003e72:	2302      	movs	r3, #2
 8003e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e76:	f107 031c 	add.w	r3, r7, #28
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	481f      	ldr	r0, [pc, #124]	@ (8003efc <HAL_TIM_IC_MspInit+0xf8>)
 8003e7e:	f006 fbc1 	bl	800a604 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8003e82:	e032      	b.n	8003eea <HAL_TIM_IC_MspInit+0xe6>
  else if(htim_ic->Instance==TIM15)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a1d      	ldr	r2, [pc, #116]	@ (8003f00 <HAL_TIM_IC_MspInit+0xfc>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d12d      	bne.n	8003eea <HAL_TIM_IC_MspInit+0xe6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003e8e:	4b1a      	ldr	r3, [pc, #104]	@ (8003ef8 <HAL_TIM_IC_MspInit+0xf4>)
 8003e90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003e94:	4a18      	ldr	r2, [pc, #96]	@ (8003ef8 <HAL_TIM_IC_MspInit+0xf4>)
 8003e96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e9a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003e9e:	4b16      	ldr	r3, [pc, #88]	@ (8003ef8 <HAL_TIM_IC_MspInit+0xf4>)
 8003ea0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ea4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ea8:	613b      	str	r3, [r7, #16]
 8003eaa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003eac:	4b12      	ldr	r3, [pc, #72]	@ (8003ef8 <HAL_TIM_IC_MspInit+0xf4>)
 8003eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003eb2:	4a11      	ldr	r2, [pc, #68]	@ (8003ef8 <HAL_TIM_IC_MspInit+0xf4>)
 8003eb4:	f043 0310 	orr.w	r3, r3, #16
 8003eb8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8003ef8 <HAL_TIM_IC_MspInit+0xf4>)
 8003ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ec2:	f003 0310 	and.w	r3, r3, #16
 8003ec6:	60fb      	str	r3, [r7, #12]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003eca:	2320      	movs	r3, #32
 8003ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ece:	2302      	movs	r3, #2
 8003ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8003eda:	2304      	movs	r3, #4
 8003edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003ede:	f107 031c 	add.w	r3, r7, #28
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	4807      	ldr	r0, [pc, #28]	@ (8003f04 <HAL_TIM_IC_MspInit+0x100>)
 8003ee6:	f006 fb8d 	bl	800a604 <HAL_GPIO_Init>
}
 8003eea:	bf00      	nop
 8003eec:	3730      	adds	r7, #48	@ 0x30
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	40000400 	.word	0x40000400
 8003ef8:	58024400 	.word	0x58024400
 8003efc:	58020800 	.word	0x58020800
 8003f00:	40014000 	.word	0x40014000
 8003f04:	58021000 	.word	0x58021000

08003f08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM24)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a0b      	ldr	r2, [pc, #44]	@ (8003f44 <HAL_TIM_Base_MspInit+0x3c>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d10e      	bne.n	8003f38 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM24_MspInit 0 */

  /* USER CODE END TIM24_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM24_CLK_ENABLE();
 8003f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8003f48 <HAL_TIM_Base_MspInit+0x40>)
 8003f1c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8003f20:	4a09      	ldr	r2, [pc, #36]	@ (8003f48 <HAL_TIM_Base_MspInit+0x40>)
 8003f22:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003f26:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8003f2a:	4b07      	ldr	r3, [pc, #28]	@ (8003f48 <HAL_TIM_Base_MspInit+0x40>)
 8003f2c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8003f30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f34:	60fb      	str	r3, [r7, #12]
 8003f36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 8003f38:	bf00      	nop
 8003f3a:	3714      	adds	r7, #20
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr
 8003f44:	4000e400 	.word	0x4000e400
 8003f48:	58024400 	.word	0x58024400

08003f4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b08a      	sub	sp, #40	@ 0x28
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f54:	f107 0314 	add.w	r3, r7, #20
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	605a      	str	r2, [r3, #4]
 8003f5e:	609a      	str	r2, [r3, #8]
 8003f60:	60da      	str	r2, [r3, #12]
 8003f62:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a39      	ldr	r2, [pc, #228]	@ (8004050 <HAL_TIM_MspPostInit+0x104>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d120      	bne.n	8003fb0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f6e:	4b39      	ldr	r3, [pc, #228]	@ (8004054 <HAL_TIM_MspPostInit+0x108>)
 8003f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f74:	4a37      	ldr	r2, [pc, #220]	@ (8004054 <HAL_TIM_MspPostInit+0x108>)
 8003f76:	f043 0310 	orr.w	r3, r3, #16
 8003f7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003f7e:	4b35      	ldr	r3, [pc, #212]	@ (8004054 <HAL_TIM_MspPostInit+0x108>)
 8003f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003f84:	f003 0310 	and.w	r3, r3, #16
 8003f88:	613b      	str	r3, [r7, #16]
 8003f8a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE8     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = TIM1_CH1N_Pin|TIM1_CH1_Pin;
 8003f8c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f92:	2302      	movs	r3, #2
 8003f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f96:	2300      	movs	r3, #0
 8003f98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003fa2:	f107 0314 	add.w	r3, r7, #20
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	482b      	ldr	r0, [pc, #172]	@ (8004058 <HAL_TIM_MspPostInit+0x10c>)
 8003faa:	f006 fb2b 	bl	800a604 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003fae:	e04a      	b.n	8004046 <HAL_TIM_MspPostInit+0xfa>
  else if(htim->Instance==TIM2)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fb8:	d120      	bne.n	8003ffc <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fba:	4b26      	ldr	r3, [pc, #152]	@ (8004054 <HAL_TIM_MspPostInit+0x108>)
 8003fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003fc0:	4a24      	ldr	r2, [pc, #144]	@ (8004054 <HAL_TIM_MspPostInit+0x108>)
 8003fc2:	f043 0301 	orr.w	r3, r3, #1
 8003fc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003fca:	4b22      	ldr	r3, [pc, #136]	@ (8004054 <HAL_TIM_MspPostInit+0x108>)
 8003fcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003fd8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003fde:	2312      	movs	r3, #18
 8003fe0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003fea:	2301      	movs	r3, #1
 8003fec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fee:	f107 0314 	add.w	r3, r7, #20
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	4819      	ldr	r0, [pc, #100]	@ (800405c <HAL_TIM_MspPostInit+0x110>)
 8003ff6:	f006 fb05 	bl	800a604 <HAL_GPIO_Init>
}
 8003ffa:	e024      	b.n	8004046 <HAL_TIM_MspPostInit+0xfa>
  else if(htim->Instance==TIM4)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a17      	ldr	r2, [pc, #92]	@ (8004060 <HAL_TIM_MspPostInit+0x114>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d11f      	bne.n	8004046 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004006:	4b13      	ldr	r3, [pc, #76]	@ (8004054 <HAL_TIM_MspPostInit+0x108>)
 8004008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800400c:	4a11      	ldr	r2, [pc, #68]	@ (8004054 <HAL_TIM_MspPostInit+0x108>)
 800400e:	f043 0308 	orr.w	r3, r3, #8
 8004012:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004016:	4b0f      	ldr	r3, [pc, #60]	@ (8004054 <HAL_TIM_MspPostInit+0x108>)
 8004018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800401c:	f003 0308 	and.w	r3, r3, #8
 8004020:	60bb      	str	r3, [r7, #8]
 8004022:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004024:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800402a:	2312      	movs	r3, #18
 800402c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800402e:	2300      	movs	r3, #0
 8004030:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004032:	2300      	movs	r3, #0
 8004034:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004036:	2302      	movs	r3, #2
 8004038:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800403a:	f107 0314 	add.w	r3, r7, #20
 800403e:	4619      	mov	r1, r3
 8004040:	4808      	ldr	r0, [pc, #32]	@ (8004064 <HAL_TIM_MspPostInit+0x118>)
 8004042:	f006 fadf 	bl	800a604 <HAL_GPIO_Init>
}
 8004046:	bf00      	nop
 8004048:	3728      	adds	r7, #40	@ 0x28
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	40010000 	.word	0x40010000
 8004054:	58024400 	.word	0x58024400
 8004058:	58021000 	.word	0x58021000
 800405c:	58020000 	.word	0x58020000
 8004060:	40000800 	.word	0x40000800
 8004064:	58020c00 	.word	0x58020c00

08004068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004068:	b480      	push	{r7}
 800406a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800406c:	bf00      	nop
 800406e:	e7fd      	b.n	800406c <NMI_Handler+0x4>

08004070 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004070:	b480      	push	{r7}
 8004072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004074:	bf00      	nop
 8004076:	e7fd      	b.n	8004074 <HardFault_Handler+0x4>

08004078 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004078:	b480      	push	{r7}
 800407a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800407c:	bf00      	nop
 800407e:	e7fd      	b.n	800407c <MemManage_Handler+0x4>

08004080 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004080:	b480      	push	{r7}
 8004082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004084:	bf00      	nop
 8004086:	e7fd      	b.n	8004084 <BusFault_Handler+0x4>

08004088 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800408c:	bf00      	nop
 800408e:	e7fd      	b.n	800408c <UsageFault_Handler+0x4>

08004090 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004094:	bf00      	nop
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800409e:	b480      	push	{r7}
 80040a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040a2:	bf00      	nop
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040b0:	bf00      	nop
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr

080040ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040be:	f000 fa0b 	bl	80044d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040c2:	bf00      	nop
 80040c4:	bd80      	pop	{r7, pc}
	...

080040c8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80040cc:	4802      	ldr	r0, [pc, #8]	@ (80040d8 <DMA1_Stream1_IRQHandler+0x10>)
 80040ce:	f004 f985 	bl	80083dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80040d2:	bf00      	nop
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	24000c48 	.word	0x24000c48

080040dc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80040e0:	4802      	ldr	r0, [pc, #8]	@ (80040ec <DMA1_Stream2_IRQHandler+0x10>)
 80040e2:	f004 f97b 	bl	80083dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80040e6:	bf00      	nop
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	24000bd0 	.word	0x24000bd0

080040f0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80040f4:	4803      	ldr	r0, [pc, #12]	@ (8004104 <ADC_IRQHandler+0x14>)
 80040f6:	f001 f969 	bl	80053cc <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80040fa:	4803      	ldr	r0, [pc, #12]	@ (8004108 <ADC_IRQHandler+0x18>)
 80040fc:	f001 f966 	bl	80053cc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8004100:	bf00      	nop
 8004102:	bd80      	pop	{r7, pc}
 8004104:	24000a80 	.word	0x24000a80
 8004108:	24000af0 	.word	0x24000af0

0800410c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INP_COMP_IRQ_Pin);
 8004110:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8004114:	f006 fc4f 	bl	800a9b6 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(POWER_OFF_IRQ_Pin);
 8004118:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800411c:	f006 fc4b 	bl	800a9b6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004120:	bf00      	nop
 8004122:	bd80      	pop	{r7, pc}

08004124 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0
  return 1;
 8004128:	2301      	movs	r3, #1
}
 800412a:	4618      	mov	r0, r3
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <_kill>:

int _kill(int pid, int sig)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800413e:	f00d ff91 	bl	8012064 <__errno>
 8004142:	4603      	mov	r3, r0
 8004144:	2216      	movs	r2, #22
 8004146:	601a      	str	r2, [r3, #0]
  return -1;
 8004148:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800414c:	4618      	mov	r0, r3
 800414e:	3708      	adds	r7, #8
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <_exit>:

void _exit (int status)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800415c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f7ff ffe7 	bl	8004134 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004166:	bf00      	nop
 8004168:	e7fd      	b.n	8004166 <_exit+0x12>

0800416a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b086      	sub	sp, #24
 800416e:	af00      	add	r7, sp, #0
 8004170:	60f8      	str	r0, [r7, #12]
 8004172:	60b9      	str	r1, [r7, #8]
 8004174:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004176:	2300      	movs	r3, #0
 8004178:	617b      	str	r3, [r7, #20]
 800417a:	e00a      	b.n	8004192 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800417c:	f3af 8000 	nop.w
 8004180:	4601      	mov	r1, r0
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	1c5a      	adds	r2, r3, #1
 8004186:	60ba      	str	r2, [r7, #8]
 8004188:	b2ca      	uxtb	r2, r1
 800418a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	3301      	adds	r3, #1
 8004190:	617b      	str	r3, [r7, #20]
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	429a      	cmp	r2, r3
 8004198:	dbf0      	blt.n	800417c <_read+0x12>
  }

  return len;
 800419a:	687b      	ldr	r3, [r7, #4]
}
 800419c:	4618      	mov	r0, r3
 800419e:	3718      	adds	r7, #24
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b086      	sub	sp, #24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041b0:	2300      	movs	r3, #0
 80041b2:	617b      	str	r3, [r7, #20]
 80041b4:	e009      	b.n	80041ca <_write+0x26>
  {
    __io_putchar(*ptr++);
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	1c5a      	adds	r2, r3, #1
 80041ba:	60ba      	str	r2, [r7, #8]
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	4618      	mov	r0, r3
 80041c0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	3301      	adds	r3, #1
 80041c8:	617b      	str	r3, [r7, #20]
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	dbf1      	blt.n	80041b6 <_write+0x12>
  }
  return len;
 80041d2:	687b      	ldr	r3, [r7, #4]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3718      	adds	r7, #24
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <_close>:

int _close(int file)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80041e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004204:	605a      	str	r2, [r3, #4]
  return 0;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <_isatty>:

int _isatty(int file)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800421c:	2301      	movs	r3, #1
}
 800421e:	4618      	mov	r0, r3
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800422a:	b480      	push	{r7}
 800422c:	b085      	sub	sp, #20
 800422e:	af00      	add	r7, sp, #0
 8004230:	60f8      	str	r0, [r7, #12]
 8004232:	60b9      	str	r1, [r7, #8]
 8004234:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800424c:	4a14      	ldr	r2, [pc, #80]	@ (80042a0 <_sbrk+0x5c>)
 800424e:	4b15      	ldr	r3, [pc, #84]	@ (80042a4 <_sbrk+0x60>)
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004258:	4b13      	ldr	r3, [pc, #76]	@ (80042a8 <_sbrk+0x64>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d102      	bne.n	8004266 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004260:	4b11      	ldr	r3, [pc, #68]	@ (80042a8 <_sbrk+0x64>)
 8004262:	4a12      	ldr	r2, [pc, #72]	@ (80042ac <_sbrk+0x68>)
 8004264:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004266:	4b10      	ldr	r3, [pc, #64]	@ (80042a8 <_sbrk+0x64>)
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4413      	add	r3, r2
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	429a      	cmp	r2, r3
 8004272:	d207      	bcs.n	8004284 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004274:	f00d fef6 	bl	8012064 <__errno>
 8004278:	4603      	mov	r3, r0
 800427a:	220c      	movs	r2, #12
 800427c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800427e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004282:	e009      	b.n	8004298 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004284:	4b08      	ldr	r3, [pc, #32]	@ (80042a8 <_sbrk+0x64>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800428a:	4b07      	ldr	r3, [pc, #28]	@ (80042a8 <_sbrk+0x64>)
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4413      	add	r3, r2
 8004292:	4a05      	ldr	r2, [pc, #20]	@ (80042a8 <_sbrk+0x64>)
 8004294:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004296:	68fb      	ldr	r3, [r7, #12]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3718      	adds	r7, #24
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	24050000 	.word	0x24050000
 80042a4:	00000400 	.word	0x00000400
 80042a8:	24001098 	.word	0x24001098
 80042ac:	24001208 	.word	0x24001208

080042b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80042b0:	b480      	push	{r7}
 80042b2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80042b4:	4b32      	ldr	r3, [pc, #200]	@ (8004380 <SystemInit+0xd0>)
 80042b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ba:	4a31      	ldr	r2, [pc, #196]	@ (8004380 <SystemInit+0xd0>)
 80042bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80042c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80042c4:	4b2f      	ldr	r3, [pc, #188]	@ (8004384 <SystemInit+0xd4>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 030f 	and.w	r3, r3, #15
 80042cc:	2b06      	cmp	r3, #6
 80042ce:	d807      	bhi.n	80042e0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80042d0:	4b2c      	ldr	r3, [pc, #176]	@ (8004384 <SystemInit+0xd4>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f023 030f 	bic.w	r3, r3, #15
 80042d8:	4a2a      	ldr	r2, [pc, #168]	@ (8004384 <SystemInit+0xd4>)
 80042da:	f043 0307 	orr.w	r3, r3, #7
 80042de:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80042e0:	4b29      	ldr	r3, [pc, #164]	@ (8004388 <SystemInit+0xd8>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a28      	ldr	r2, [pc, #160]	@ (8004388 <SystemInit+0xd8>)
 80042e6:	f043 0301 	orr.w	r3, r3, #1
 80042ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80042ec:	4b26      	ldr	r3, [pc, #152]	@ (8004388 <SystemInit+0xd8>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80042f2:	4b25      	ldr	r3, [pc, #148]	@ (8004388 <SystemInit+0xd8>)
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	4924      	ldr	r1, [pc, #144]	@ (8004388 <SystemInit+0xd8>)
 80042f8:	4b24      	ldr	r3, [pc, #144]	@ (800438c <SystemInit+0xdc>)
 80042fa:	4013      	ands	r3, r2
 80042fc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80042fe:	4b21      	ldr	r3, [pc, #132]	@ (8004384 <SystemInit+0xd4>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0308 	and.w	r3, r3, #8
 8004306:	2b00      	cmp	r3, #0
 8004308:	d007      	beq.n	800431a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800430a:	4b1e      	ldr	r3, [pc, #120]	@ (8004384 <SystemInit+0xd4>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f023 030f 	bic.w	r3, r3, #15
 8004312:	4a1c      	ldr	r2, [pc, #112]	@ (8004384 <SystemInit+0xd4>)
 8004314:	f043 0307 	orr.w	r3, r3, #7
 8004318:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800431a:	4b1b      	ldr	r3, [pc, #108]	@ (8004388 <SystemInit+0xd8>)
 800431c:	2200      	movs	r2, #0
 800431e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004320:	4b19      	ldr	r3, [pc, #100]	@ (8004388 <SystemInit+0xd8>)
 8004322:	2200      	movs	r2, #0
 8004324:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004326:	4b18      	ldr	r3, [pc, #96]	@ (8004388 <SystemInit+0xd8>)
 8004328:	2200      	movs	r2, #0
 800432a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800432c:	4b16      	ldr	r3, [pc, #88]	@ (8004388 <SystemInit+0xd8>)
 800432e:	4a18      	ldr	r2, [pc, #96]	@ (8004390 <SystemInit+0xe0>)
 8004330:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004332:	4b15      	ldr	r3, [pc, #84]	@ (8004388 <SystemInit+0xd8>)
 8004334:	4a17      	ldr	r2, [pc, #92]	@ (8004394 <SystemInit+0xe4>)
 8004336:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004338:	4b13      	ldr	r3, [pc, #76]	@ (8004388 <SystemInit+0xd8>)
 800433a:	4a17      	ldr	r2, [pc, #92]	@ (8004398 <SystemInit+0xe8>)
 800433c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800433e:	4b12      	ldr	r3, [pc, #72]	@ (8004388 <SystemInit+0xd8>)
 8004340:	2200      	movs	r2, #0
 8004342:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004344:	4b10      	ldr	r3, [pc, #64]	@ (8004388 <SystemInit+0xd8>)
 8004346:	4a14      	ldr	r2, [pc, #80]	@ (8004398 <SystemInit+0xe8>)
 8004348:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800434a:	4b0f      	ldr	r3, [pc, #60]	@ (8004388 <SystemInit+0xd8>)
 800434c:	2200      	movs	r2, #0
 800434e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004350:	4b0d      	ldr	r3, [pc, #52]	@ (8004388 <SystemInit+0xd8>)
 8004352:	4a11      	ldr	r2, [pc, #68]	@ (8004398 <SystemInit+0xe8>)
 8004354:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004356:	4b0c      	ldr	r3, [pc, #48]	@ (8004388 <SystemInit+0xd8>)
 8004358:	2200      	movs	r2, #0
 800435a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800435c:	4b0a      	ldr	r3, [pc, #40]	@ (8004388 <SystemInit+0xd8>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a09      	ldr	r2, [pc, #36]	@ (8004388 <SystemInit+0xd8>)
 8004362:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004366:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004368:	4b07      	ldr	r3, [pc, #28]	@ (8004388 <SystemInit+0xd8>)
 800436a:	2200      	movs	r2, #0
 800436c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800436e:	4b0b      	ldr	r3, [pc, #44]	@ (800439c <SystemInit+0xec>)
 8004370:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8004374:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004376:	bf00      	nop
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr
 8004380:	e000ed00 	.word	0xe000ed00
 8004384:	52002000 	.word	0x52002000
 8004388:	58024400 	.word	0x58024400
 800438c:	eaf6ed7f 	.word	0xeaf6ed7f
 8004390:	02020200 	.word	0x02020200
 8004394:	01ff0000 	.word	0x01ff0000
 8004398:	01010280 	.word	0x01010280
 800439c:	52004000 	.word	0x52004000

080043a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80043a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80043d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80043a4:	f7ff ff84 	bl	80042b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80043a8:	480c      	ldr	r0, [pc, #48]	@ (80043dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80043aa:	490d      	ldr	r1, [pc, #52]	@ (80043e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80043ac:	4a0d      	ldr	r2, [pc, #52]	@ (80043e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80043ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043b0:	e002      	b.n	80043b8 <LoopCopyDataInit>

080043b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043b6:	3304      	adds	r3, #4

080043b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043bc:	d3f9      	bcc.n	80043b2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043be:	4a0a      	ldr	r2, [pc, #40]	@ (80043e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80043c0:	4c0a      	ldr	r4, [pc, #40]	@ (80043ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80043c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043c4:	e001      	b.n	80043ca <LoopFillZerobss>

080043c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043c8:	3204      	adds	r2, #4

080043ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043cc:	d3fb      	bcc.n	80043c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80043ce:	f00d fe4f 	bl	8012070 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80043d2:	f7fe f933 	bl	800263c <main>
  bx  lr
 80043d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80043d8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80043dc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80043e0:	24000210 	.word	0x24000210
  ldr r2, =_sidata
 80043e4:	08014d98 	.word	0x08014d98
  ldr r2, =_sbss
 80043e8:	240002d0 	.word	0x240002d0
  ldr r4, =_ebss
 80043ec:	24001208 	.word	0x24001208

080043f0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043f0:	e7fe      	b.n	80043f0 <ADC3_IRQHandler>
	...

080043f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043fa:	2003      	movs	r0, #3
 80043fc:	f003 f9ec 	bl	80077d8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004400:	f007 f8be 	bl	800b580 <HAL_RCC_GetSysClockFreq>
 8004404:	4602      	mov	r2, r0
 8004406:	4b15      	ldr	r3, [pc, #84]	@ (800445c <HAL_Init+0x68>)
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	0a1b      	lsrs	r3, r3, #8
 800440c:	f003 030f 	and.w	r3, r3, #15
 8004410:	4913      	ldr	r1, [pc, #76]	@ (8004460 <HAL_Init+0x6c>)
 8004412:	5ccb      	ldrb	r3, [r1, r3]
 8004414:	f003 031f 	and.w	r3, r3, #31
 8004418:	fa22 f303 	lsr.w	r3, r2, r3
 800441c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800441e:	4b0f      	ldr	r3, [pc, #60]	@ (800445c <HAL_Init+0x68>)
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	f003 030f 	and.w	r3, r3, #15
 8004426:	4a0e      	ldr	r2, [pc, #56]	@ (8004460 <HAL_Init+0x6c>)
 8004428:	5cd3      	ldrb	r3, [r2, r3]
 800442a:	f003 031f 	and.w	r3, r3, #31
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	fa22 f303 	lsr.w	r3, r2, r3
 8004434:	4a0b      	ldr	r2, [pc, #44]	@ (8004464 <HAL_Init+0x70>)
 8004436:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004438:	4a0b      	ldr	r2, [pc, #44]	@ (8004468 <HAL_Init+0x74>)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800443e:	2000      	movs	r0, #0
 8004440:	f000 f814 	bl	800446c <HAL_InitTick>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e002      	b.n	8004454 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800444e:	f7ff f913 	bl	8003678 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3708      	adds	r7, #8
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	58024400 	.word	0x58024400
 8004460:	080149b0 	.word	0x080149b0
 8004464:	2400003c 	.word	0x2400003c
 8004468:	24000038 	.word	0x24000038

0800446c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004474:	4b15      	ldr	r3, [pc, #84]	@ (80044cc <HAL_InitTick+0x60>)
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d101      	bne.n	8004480 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e021      	b.n	80044c4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004480:	4b13      	ldr	r3, [pc, #76]	@ (80044d0 <HAL_InitTick+0x64>)
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	4b11      	ldr	r3, [pc, #68]	@ (80044cc <HAL_InitTick+0x60>)
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	4619      	mov	r1, r3
 800448a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800448e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004492:	fbb2 f3f3 	udiv	r3, r2, r3
 8004496:	4618      	mov	r0, r3
 8004498:	f003 f9d1 	bl	800783e <HAL_SYSTICK_Config>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d001      	beq.n	80044a6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e00e      	b.n	80044c4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2b0f      	cmp	r3, #15
 80044aa:	d80a      	bhi.n	80044c2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80044ac:	2200      	movs	r2, #0
 80044ae:	6879      	ldr	r1, [r7, #4]
 80044b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80044b4:	f003 f99b 	bl	80077ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80044b8:	4a06      	ldr	r2, [pc, #24]	@ (80044d4 <HAL_InitTick+0x68>)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80044be:	2300      	movs	r3, #0
 80044c0:	e000      	b.n	80044c4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3708      	adds	r7, #8
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	24000044 	.word	0x24000044
 80044d0:	24000038 	.word	0x24000038
 80044d4:	24000040 	.word	0x24000040

080044d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044d8:	b480      	push	{r7}
 80044da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80044dc:	4b06      	ldr	r3, [pc, #24]	@ (80044f8 <HAL_IncTick+0x20>)
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	461a      	mov	r2, r3
 80044e2:	4b06      	ldr	r3, [pc, #24]	@ (80044fc <HAL_IncTick+0x24>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4413      	add	r3, r2
 80044e8:	4a04      	ldr	r2, [pc, #16]	@ (80044fc <HAL_IncTick+0x24>)
 80044ea:	6013      	str	r3, [r2, #0]
}
 80044ec:	bf00      	nop
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	24000044 	.word	0x24000044
 80044fc:	2400109c 	.word	0x2400109c

08004500 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004500:	b480      	push	{r7}
 8004502:	af00      	add	r7, sp, #0
  return uwTick;
 8004504:	4b03      	ldr	r3, [pc, #12]	@ (8004514 <HAL_GetTick+0x14>)
 8004506:	681b      	ldr	r3, [r3, #0]
}
 8004508:	4618      	mov	r0, r3
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	2400109c 	.word	0x2400109c

08004518 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004520:	f7ff ffee 	bl	8004500 <HAL_GetTick>
 8004524:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004530:	d005      	beq.n	800453e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004532:	4b0a      	ldr	r3, [pc, #40]	@ (800455c <HAL_Delay+0x44>)
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	461a      	mov	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4413      	add	r3, r2
 800453c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800453e:	bf00      	nop
 8004540:	f7ff ffde 	bl	8004500 <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	429a      	cmp	r2, r3
 800454e:	d8f7      	bhi.n	8004540 <HAL_Delay+0x28>
  {
  }
}
 8004550:	bf00      	nop
 8004552:	bf00      	nop
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	24000044 	.word	0x24000044

08004560 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8004568:	4b06      	ldr	r3, [pc, #24]	@ (8004584 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8004570:	4904      	ldr	r1, [pc, #16]	@ (8004584 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4313      	orrs	r3, r2
 8004576:	604b      	str	r3, [r1, #4]
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr
 8004584:	58000400 	.word	0x58000400

08004588 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8004592:	4b07      	ldr	r3, [pc, #28]	@ (80045b0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	43db      	mvns	r3, r3
 800459a:	401a      	ands	r2, r3
 800459c:	4904      	ldr	r1, [pc, #16]	@ (80045b0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	604b      	str	r3, [r1, #4]
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr
 80045b0:	58000400 	.word	0x58000400

080045b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	431a      	orrs	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	609a      	str	r2, [r3, #8]
}
 80045ce:	bf00      	nop
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr

080045da <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80045da:	b480      	push	{r7}
 80045dc:	b083      	sub	sp, #12
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6078      	str	r0, [r7, #4]
 80045e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	431a      	orrs	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	609a      	str	r2, [r3, #8]
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004610:	4618      	mov	r0, r3
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800461c:	b480      	push	{r7}
 800461e:	b087      	sub	sp, #28
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
 8004628:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	3360      	adds	r3, #96	@ 0x60
 800462e:	461a      	mov	r2, r3
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4413      	add	r3, r2
 8004636:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4a10      	ldr	r2, [pc, #64]	@ (800467c <LL_ADC_SetOffset+0x60>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d10b      	bne.n	8004658 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	4313      	orrs	r3, r2
 800464e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004656:	e00b      	b.n	8004670 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	430b      	orrs	r3, r1
 800466a:	431a      	orrs	r2, r3
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	601a      	str	r2, [r3, #0]
}
 8004670:	bf00      	nop
 8004672:	371c      	adds	r7, #28
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	58026000 	.word	0x58026000

08004680 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	3360      	adds	r3, #96	@ 0x60
 800468e:	461a      	mov	r2, r3
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	4413      	add	r3, r2
 8004696:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3714      	adds	r7, #20
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	f003 031f 	and.w	r3, r3, #31
 80046c6:	6879      	ldr	r1, [r7, #4]
 80046c8:	fa01 f303 	lsl.w	r3, r1, r3
 80046cc:	431a      	orrs	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	611a      	str	r2, [r3, #16]
}
 80046d2:	bf00      	nop
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
	...

080046e0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b087      	sub	sp, #28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	4a0c      	ldr	r2, [pc, #48]	@ (8004720 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d00e      	beq.n	8004712 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	3360      	adds	r3, #96	@ 0x60
 80046f8:	461a      	mov	r2, r3
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	4413      	add	r3, r2
 8004700:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	431a      	orrs	r2, r3
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	601a      	str	r2, [r3, #0]
  }
}
 8004712:	bf00      	nop
 8004714:	371c      	adds	r7, #28
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	58026000 	.word	0x58026000

08004724 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004724:	b480      	push	{r7}
 8004726:	b087      	sub	sp, #28
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	4a0c      	ldr	r2, [pc, #48]	@ (8004764 <LL_ADC_SetOffsetSaturation+0x40>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d10e      	bne.n	8004756 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	3360      	adds	r3, #96	@ 0x60
 800473c:	461a      	mov	r2, r3
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	4413      	add	r3, r2
 8004744:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	431a      	orrs	r2, r3
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8004756:	bf00      	nop
 8004758:	371c      	adds	r7, #28
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	58026000 	.word	0x58026000

08004768 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004768:	b480      	push	{r7}
 800476a:	b087      	sub	sp, #28
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	4a0c      	ldr	r2, [pc, #48]	@ (80047a8 <LL_ADC_SetOffsetSign+0x40>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d10e      	bne.n	800479a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	3360      	adds	r3, #96	@ 0x60
 8004780:	461a      	mov	r2, r3
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4413      	add	r3, r2
 8004788:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	431a      	orrs	r2, r3
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800479a:	bf00      	nop
 800479c:	371c      	adds	r7, #28
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	58026000 	.word	0x58026000

080047ac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b087      	sub	sp, #28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	3360      	adds	r3, #96	@ 0x60
 80047bc:	461a      	mov	r2, r3
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4413      	add	r3, r2
 80047c4:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	4a0c      	ldr	r2, [pc, #48]	@ (80047fc <LL_ADC_SetOffsetState+0x50>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d108      	bne.n	80047e0 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	431a      	orrs	r2, r3
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80047de:	e007      	b.n	80047f0 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	431a      	orrs	r2, r3
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	601a      	str	r2, [r3, #0]
}
 80047f0:	bf00      	nop
 80047f2:	371c      	adds	r7, #28
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr
 80047fc:	58026000 	.word	0x58026000

08004800 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004810:	2b00      	cmp	r3, #0
 8004812:	d101      	bne.n	8004818 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004814:	2301      	movs	r3, #1
 8004816:	e000      	b.n	800481a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	370c      	adds	r7, #12
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr

08004826 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004826:	b480      	push	{r7}
 8004828:	b087      	sub	sp, #28
 800482a:	af00      	add	r7, sp, #0
 800482c:	60f8      	str	r0, [r7, #12]
 800482e:	60b9      	str	r1, [r7, #8]
 8004830:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	3330      	adds	r3, #48	@ 0x30
 8004836:	461a      	mov	r2, r3
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	0a1b      	lsrs	r3, r3, #8
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	f003 030c 	and.w	r3, r3, #12
 8004842:	4413      	add	r3, r2
 8004844:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	f003 031f 	and.w	r3, r3, #31
 8004850:	211f      	movs	r1, #31
 8004852:	fa01 f303 	lsl.w	r3, r1, r3
 8004856:	43db      	mvns	r3, r3
 8004858:	401a      	ands	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	0e9b      	lsrs	r3, r3, #26
 800485e:	f003 011f 	and.w	r1, r3, #31
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	f003 031f 	and.w	r3, r3, #31
 8004868:	fa01 f303 	lsl.w	r3, r1, r3
 800486c:	431a      	orrs	r2, r3
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004872:	bf00      	nop
 8004874:	371c      	adds	r7, #28
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800487e:	b480      	push	{r7}
 8004880:	b083      	sub	sp, #12
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
 8004886:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	f023 0203 	bic.w	r2, r3, #3
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	431a      	orrs	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	60da      	str	r2, [r3, #12]
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	f043 0201 	orr.w	r2, r3, #1
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	60da      	str	r2, [r3, #12]
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a08      	ldr	r2, [pc, #32]	@ (80048f4 <LL_ADC_REG_SetDMATransferMode+0x30>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d107      	bne.n	80048e6 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	f023 0203 	bic.w	r2, r3, #3
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	431a      	orrs	r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	60da      	str	r2, [r3, #12]
  }
}
 80048e6:	bf00      	nop
 80048e8:	370c      	adds	r7, #12
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	58026000 	.word	0x58026000

080048f8 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004904:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8004908:	2b00      	cmp	r3, #0
 800490a:	d101      	bne.n	8004910 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800490c:	2301      	movs	r3, #1
 800490e:	e000      	b.n	8004912 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800491e:	b480      	push	{r7}
 8004920:	b087      	sub	sp, #28
 8004922:	af00      	add	r7, sp, #0
 8004924:	60f8      	str	r0, [r7, #12]
 8004926:	60b9      	str	r1, [r7, #8]
 8004928:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	3314      	adds	r3, #20
 800492e:	461a      	mov	r2, r3
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	0e5b      	lsrs	r3, r3, #25
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	f003 0304 	and.w	r3, r3, #4
 800493a:	4413      	add	r3, r2
 800493c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	0d1b      	lsrs	r3, r3, #20
 8004946:	f003 031f 	and.w	r3, r3, #31
 800494a:	2107      	movs	r1, #7
 800494c:	fa01 f303 	lsl.w	r3, r1, r3
 8004950:	43db      	mvns	r3, r3
 8004952:	401a      	ands	r2, r3
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	0d1b      	lsrs	r3, r3, #20
 8004958:	f003 031f 	and.w	r3, r3, #31
 800495c:	6879      	ldr	r1, [r7, #4]
 800495e:	fa01 f303 	lsl.w	r3, r1, r3
 8004962:	431a      	orrs	r2, r3
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004968:	bf00      	nop
 800496a:	371c      	adds	r7, #28
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	4a1a      	ldr	r2, [pc, #104]	@ (80049ec <LL_ADC_SetChannelSingleDiff+0x78>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d115      	bne.n	80049b4 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004994:	43db      	mvns	r3, r3
 8004996:	401a      	ands	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f003 0318 	and.w	r3, r3, #24
 800499e:	4914      	ldr	r1, [pc, #80]	@ (80049f0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80049a0:	40d9      	lsrs	r1, r3
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	400b      	ands	r3, r1
 80049a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049aa:	431a      	orrs	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80049b2:	e014      	b.n	80049de <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049c0:	43db      	mvns	r3, r3
 80049c2:	401a      	ands	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f003 0318 	and.w	r3, r3, #24
 80049ca:	4909      	ldr	r1, [pc, #36]	@ (80049f0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80049cc:	40d9      	lsrs	r1, r3
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	400b      	ands	r3, r1
 80049d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049d6:	431a      	orrs	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 80049de:	bf00      	nop
 80049e0:	3714      	adds	r7, #20
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	58026000 	.word	0x58026000
 80049f0:	000fffff 	.word	0x000fffff

080049f4 <LL_ADC_SetAnalogWDMonitChannels>:
  *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
  *         (2) On STM32H7, parameter available only on ADC instance: ADC2.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b087      	sub	sp, #28
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	330c      	adds	r3, #12
 8004a04:	4618      	mov	r0, r3
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	0d1b      	lsrs	r3, r3, #20
 8004a0a:	f003 0103 	and.w	r1, r3, #3
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	f003 0201 	and.w	r2, r3, #1
 8004a14:	4613      	mov	r3, r2
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	4413      	add	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	440b      	add	r3, r1
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4403      	add	r3, r0
 8004a22:	617b      	str	r3, [r7, #20]
                                                      + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	68b9      	ldr	r1, [r7, #8]
 8004a2a:	4b08      	ldr	r3, [pc, #32]	@ (8004a4c <LL_ADC_SetAnalogWDMonitChannels+0x58>)
 8004a2c:	400b      	ands	r3, r1
 8004a2e:	43db      	mvns	r3, r3
 8004a30:	401a      	ands	r2, r3
 8004a32:	6879      	ldr	r1, [r7, #4]
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	400b      	ands	r3, r1
 8004a38:	431a      	orrs	r2, r3
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 8004a3e:	bf00      	nop
 8004a40:	371c      	adds	r7, #28
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	7dcfffff 	.word	0x7dcfffff

08004a50 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdHighValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue, uint32_t AWDThresholdLowValue)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b089      	sub	sp, #36	@ 0x24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
 8004a5c:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  if (ADCx == ADC3)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	4a29      	ldr	r2, [pc, #164]	@ (8004b08 <LL_ADC_ConfigAnalogWDThresholds+0xb8>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d115      	bne.n	8004a92 <LL_ADC_ConfigAnalogWDThresholds+0x42>
  {
    uint32_t __IO *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	3320      	adds	r3, #32
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	0d1b      	lsrs	r3, r3, #20
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	f003 030c 	and.w	r3, r3, #12
 8004a76:	4413      	add	r3, r2
 8004a78:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 22f0 	and.w	r2, r3, #4026593280	@ 0xf000f000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	0419      	lsls	r1, r3, #16
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	430b      	orrs	r3, r1
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	601a      	str	r2, [r3, #0]
                                                         + (LL_ADC_AWD_THRESHOLD_HIGH));

    MODIFY_REG(*preg, ADC_LTR_LT, AWDThresholdLowValue);
    MODIFY_REG(*preg2, ADC_HTR_HT, AWDThresholdHighValue);
  }
}
 8004a90:	e034      	b.n	8004afc <LL_ADC_ConfigAnalogWDThresholds+0xac>
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS) * 2UL)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	3320      	adds	r3, #32
 8004a96:	4618      	mov	r0, r3
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	0d1b      	lsrs	r3, r3, #20
 8004a9c:	f003 0103 	and.w	r1, r3, #3
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	f003 0201 	and.w	r2, r3, #1
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	011b      	lsls	r3, r3, #4
 8004aaa:	4413      	add	r3, r2
 8004aac:	440b      	add	r3, r1
 8004aae:	005b      	lsls	r3, r3, #1
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4403      	add	r3, r0
 8004ab4:	61fb      	str	r3, [r7, #28]
    __IO uint32_t *preg2 = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS) * 2UL)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	3320      	adds	r3, #32
 8004aba:	4618      	mov	r0, r3
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	0d1b      	lsrs	r3, r3, #20
 8004ac0:	f003 0103 	and.w	r1, r3, #3
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	f003 0201 	and.w	r2, r3, #1
 8004aca:	4613      	mov	r3, r2
 8004acc:	011b      	lsls	r3, r3, #4
 8004ace:	4413      	add	r3, r2
 8004ad0:	440b      	add	r3, r1
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4403      	add	r3, r0
 8004ada:	61bb      	str	r3, [r7, #24]
    MODIFY_REG(*preg, ADC_LTR_LT, AWDThresholdLowValue);
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 427c 	and.w	r2, r3, #4227858432	@ 0xfc000000
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	601a      	str	r2, [r3, #0]
    MODIFY_REG(*preg2, ADC_HTR_HT, AWDThresholdHighValue);
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 427c 	and.w	r2, r3, #4227858432	@ 0xfc000000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	431a      	orrs	r2, r3
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	601a      	str	r2, [r3, #0]
}
 8004afc:	bf00      	nop
 8004afe:	3724      	adds	r7, #36	@ 0x24
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr
 8004b08:	58026000 	.word	0x58026000

08004b0c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f003 031f 	and.w	r3, r3, #31
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	689a      	ldr	r2, [r3, #8]
 8004b50:	4b04      	ldr	r3, [pc, #16]	@ (8004b64 <LL_ADC_DisableDeepPowerDown+0x20>)
 8004b52:	4013      	ands	r3, r2
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	6093      	str	r3, [r2, #8]
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr
 8004b64:	5fffffc0 	.word	0x5fffffc0

08004b68 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b7c:	d101      	bne.n	8004b82 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e000      	b.n	8004b84 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689a      	ldr	r2, [r3, #8]
 8004b9c:	4b05      	ldr	r3, [pc, #20]	@ (8004bb4 <LL_ADC_EnableInternalRegulator+0x24>)
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004ba8:	bf00      	nop
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	6fffffc0 	.word	0x6fffffc0

08004bb8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bc8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004bcc:	d101      	bne.n	8004bd2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e000      	b.n	8004bd4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	689a      	ldr	r2, [r3, #8]
 8004bec:	4b05      	ldr	r3, [pc, #20]	@ (8004c04 <LL_ADC_Enable+0x24>)
 8004bee:	4013      	ands	r3, r2
 8004bf0:	f043 0201 	orr.w	r2, r3, #1
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	7fffffc0 	.word	0x7fffffc0

08004c08 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	4b05      	ldr	r3, [pc, #20]	@ (8004c2c <LL_ADC_Disable+0x24>)
 8004c16:	4013      	ands	r3, r2
 8004c18:	f043 0202 	orr.w	r2, r3, #2
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr
 8004c2c:	7fffffc0 	.word	0x7fffffc0

08004c30 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f003 0301 	and.w	r3, r3, #1
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d101      	bne.n	8004c48 <LL_ADC_IsEnabled+0x18>
 8004c44:	2301      	movs	r3, #1
 8004c46:	e000      	b.n	8004c4a <LL_ADC_IsEnabled+0x1a>
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b083      	sub	sp, #12
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d101      	bne.n	8004c6e <LL_ADC_IsDisableOngoing+0x18>
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e000      	b.n	8004c70 <LL_ADC_IsDisableOngoing+0x1a>
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689a      	ldr	r2, [r3, #8]
 8004c88:	4b05      	ldr	r3, [pc, #20]	@ (8004ca0 <LL_ADC_REG_StartConversion+0x24>)
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	f043 0204 	orr.w	r2, r3, #4
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr
 8004ca0:	7fffffc0 	.word	0x7fffffc0

08004ca4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f003 0304 	and.w	r3, r3, #4
 8004cb4:	2b04      	cmp	r3, #4
 8004cb6:	d101      	bne.n	8004cbc <LL_ADC_REG_IsConversionOngoing+0x18>
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e000      	b.n	8004cbe <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b083      	sub	sp, #12
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f003 0308 	and.w	r3, r3, #8
 8004cda:	2b08      	cmp	r3, #8
 8004cdc:	d101      	bne.n	8004ce2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e000      	b.n	8004ce4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2280      	movs	r2, #128	@ 0x80
 8004cfc:	601a      	str	r2, [r3, #0]
}
 8004cfe:	bf00      	nop
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b083      	sub	sp, #12
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004d18:	601a      	str	r2, [r3, #0]
}
 8004d1a:	bf00      	nop
 8004d1c:	370c      	adds	r7, #12
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b083      	sub	sp, #12
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d34:	601a      	str	r2, [r3, #0]
}
 8004d36:	bf00      	nop
 8004d38:	370c      	adds	r7, #12
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b083      	sub	sp, #12
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	605a      	str	r2, [r3, #4]
}
 8004d56:	bf00      	nop
 8004d58:	370c      	adds	r7, #12
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr

08004d62 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8004d62:	b480      	push	{r7}
 8004d64:	b083      	sub	sp, #12
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	605a      	str	r2, [r3, #4]
}
 8004d76:	bf00      	nop
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b083      	sub	sp, #12
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	605a      	str	r2, [r3, #4]
}
 8004d96:	bf00      	nop
 8004d98:	370c      	adds	r7, #12
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr

08004da2 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8004da2:	b480      	push	{r7}
 8004da4:	b083      	sub	sp, #12
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	605a      	str	r2, [r3, #4]
}
 8004db6:	bf00      	nop
 8004db8:	370c      	adds	r7, #12
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr

08004dc2 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	b083      	sub	sp, #12
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	605a      	str	r2, [r3, #4]
}
 8004dd6:	bf00      	nop
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	605a      	str	r2, [r3, #4]
}
 8004df6:	bf00      	nop
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
	...

08004e04 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004e04:	b590      	push	{r4, r7, lr}
 8004e06:	b089      	sub	sp, #36	@ 0x24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004e10:	2300      	movs	r3, #0
 8004e12:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d101      	bne.n	8004e1e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e1ee      	b.n	80051fc <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d109      	bne.n	8004e40 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f7fe fc3d 	bl	80036ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7ff fe8f 	bl	8004b68 <LL_ADC_IsDeepPowerDownEnabled>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d004      	beq.n	8004e5a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7ff fe75 	bl	8004b44 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7ff feaa 	bl	8004bb8 <LL_ADC_IsInternalRegulatorEnabled>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d114      	bne.n	8004e94 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7ff fe8e 	bl	8004b90 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004e74:	4b8e      	ldr	r3, [pc, #568]	@ (80050b0 <HAL_ADC_Init+0x2ac>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	099b      	lsrs	r3, r3, #6
 8004e7a:	4a8e      	ldr	r2, [pc, #568]	@ (80050b4 <HAL_ADC_Init+0x2b0>)
 8004e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e80:	099b      	lsrs	r3, r3, #6
 8004e82:	3301      	adds	r3, #1
 8004e84:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004e86:	e002      	b.n	8004e8e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1f9      	bne.n	8004e88 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7ff fe8d 	bl	8004bb8 <LL_ADC_IsInternalRegulatorEnabled>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10d      	bne.n	8004ec0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ea8:	f043 0210 	orr.w	r2, r3, #16
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004eb4:	f043 0201 	orr.w	r2, r3, #1
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7ff feed 	bl	8004ca4 <LL_ADC_REG_IsConversionOngoing>
 8004eca:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ed0:	f003 0310 	and.w	r3, r3, #16
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f040 8188 	bne.w	80051ea <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f040 8184 	bne.w	80051ea <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ee6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004eea:	f043 0202 	orr.w	r2, r3, #2
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f7ff fe9a 	bl	8004c30 <LL_ADC_IsEnabled>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d136      	bne.n	8004f70 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a6c      	ldr	r2, [pc, #432]	@ (80050b8 <HAL_ADC_Init+0x2b4>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d004      	beq.n	8004f16 <HAL_ADC_Init+0x112>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a6a      	ldr	r2, [pc, #424]	@ (80050bc <HAL_ADC_Init+0x2b8>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d10e      	bne.n	8004f34 <HAL_ADC_Init+0x130>
 8004f16:	4868      	ldr	r0, [pc, #416]	@ (80050b8 <HAL_ADC_Init+0x2b4>)
 8004f18:	f7ff fe8a 	bl	8004c30 <LL_ADC_IsEnabled>
 8004f1c:	4604      	mov	r4, r0
 8004f1e:	4867      	ldr	r0, [pc, #412]	@ (80050bc <HAL_ADC_Init+0x2b8>)
 8004f20:	f7ff fe86 	bl	8004c30 <LL_ADC_IsEnabled>
 8004f24:	4603      	mov	r3, r0
 8004f26:	4323      	orrs	r3, r4
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	bf0c      	ite	eq
 8004f2c:	2301      	moveq	r3, #1
 8004f2e:	2300      	movne	r3, #0
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	e008      	b.n	8004f46 <HAL_ADC_Init+0x142>
 8004f34:	4862      	ldr	r0, [pc, #392]	@ (80050c0 <HAL_ADC_Init+0x2bc>)
 8004f36:	f7ff fe7b 	bl	8004c30 <LL_ADC_IsEnabled>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	bf0c      	ite	eq
 8004f40:	2301      	moveq	r3, #1
 8004f42:	2300      	movne	r3, #0
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d012      	beq.n	8004f70 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a5a      	ldr	r2, [pc, #360]	@ (80050b8 <HAL_ADC_Init+0x2b4>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d004      	beq.n	8004f5e <HAL_ADC_Init+0x15a>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a58      	ldr	r2, [pc, #352]	@ (80050bc <HAL_ADC_Init+0x2b8>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d101      	bne.n	8004f62 <HAL_ADC_Init+0x15e>
 8004f5e:	4a59      	ldr	r2, [pc, #356]	@ (80050c4 <HAL_ADC_Init+0x2c0>)
 8004f60:	e000      	b.n	8004f64 <HAL_ADC_Init+0x160>
 8004f62:	4a59      	ldr	r2, [pc, #356]	@ (80050c8 <HAL_ADC_Init+0x2c4>)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	4619      	mov	r1, r3
 8004f6a:	4610      	mov	r0, r2
 8004f6c:	f7ff fb22 	bl	80045b4 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a52      	ldr	r2, [pc, #328]	@ (80050c0 <HAL_ADC_Init+0x2bc>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d129      	bne.n	8004fce <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	7e5b      	ldrb	r3, [r3, #25]
 8004f7e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004f84:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8004f8a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	2b08      	cmp	r3, #8
 8004f92:	d013      	beq.n	8004fbc <HAL_ADC_Init+0x1b8>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	2b0c      	cmp	r3, #12
 8004f9a:	d00d      	beq.n	8004fb8 <HAL_ADC_Init+0x1b4>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	2b1c      	cmp	r3, #28
 8004fa2:	d007      	beq.n	8004fb4 <HAL_ADC_Init+0x1b0>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	2b18      	cmp	r3, #24
 8004faa:	d101      	bne.n	8004fb0 <HAL_ADC_Init+0x1ac>
 8004fac:	2318      	movs	r3, #24
 8004fae:	e006      	b.n	8004fbe <HAL_ADC_Init+0x1ba>
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	e004      	b.n	8004fbe <HAL_ADC_Init+0x1ba>
 8004fb4:	2310      	movs	r3, #16
 8004fb6:	e002      	b.n	8004fbe <HAL_ADC_Init+0x1ba>
 8004fb8:	2308      	movs	r3, #8
 8004fba:	e000      	b.n	8004fbe <HAL_ADC_Init+0x1ba>
 8004fbc:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8004fbe:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fc6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	61bb      	str	r3, [r7, #24]
 8004fcc:	e00e      	b.n	8004fec <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	7e5b      	ldrb	r3, [r3, #25]
 8004fd2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004fd8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004fde:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fe6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d106      	bne.n	8005004 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	045b      	lsls	r3, r3, #17
 8004ffe:	69ba      	ldr	r2, [r7, #24]
 8005000:	4313      	orrs	r3, r2
 8005002:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005008:	2b00      	cmp	r3, #0
 800500a:	d009      	beq.n	8005020 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005010:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005018:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800501a:	69ba      	ldr	r2, [r7, #24]
 800501c:	4313      	orrs	r3, r2
 800501e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a26      	ldr	r2, [pc, #152]	@ (80050c0 <HAL_ADC_Init+0x2bc>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d115      	bne.n	8005056 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68da      	ldr	r2, [r3, #12]
 8005030:	4b26      	ldr	r3, [pc, #152]	@ (80050cc <HAL_ADC_Init+0x2c8>)
 8005032:	4013      	ands	r3, r2
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	6812      	ldr	r2, [r2, #0]
 8005038:	69b9      	ldr	r1, [r7, #24]
 800503a:	430b      	orrs	r3, r1
 800503c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	430a      	orrs	r2, r1
 8005052:	611a      	str	r2, [r3, #16]
 8005054:	e009      	b.n	800506a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68da      	ldr	r2, [r3, #12]
 800505c:	4b1c      	ldr	r3, [pc, #112]	@ (80050d0 <HAL_ADC_Init+0x2cc>)
 800505e:	4013      	ands	r3, r2
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	6812      	ldr	r2, [r2, #0]
 8005064:	69b9      	ldr	r1, [r7, #24]
 8005066:	430b      	orrs	r3, r1
 8005068:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4618      	mov	r0, r3
 8005070:	f7ff fe18 	bl	8004ca4 <LL_ADC_REG_IsConversionOngoing>
 8005074:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4618      	mov	r0, r3
 800507c:	f7ff fe25 	bl	8004cca <LL_ADC_INJ_IsConversionOngoing>
 8005080:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	2b00      	cmp	r3, #0
 8005086:	f040 808e 	bne.w	80051a6 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2b00      	cmp	r3, #0
 800508e:	f040 808a 	bne.w	80051a6 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a0a      	ldr	r2, [pc, #40]	@ (80050c0 <HAL_ADC_Init+0x2bc>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d11b      	bne.n	80050d4 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	7e1b      	ldrb	r3, [r3, #24]
 80050a0:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80050a8:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80050aa:	4313      	orrs	r3, r2
 80050ac:	61bb      	str	r3, [r7, #24]
 80050ae:	e018      	b.n	80050e2 <HAL_ADC_Init+0x2de>
 80050b0:	24000038 	.word	0x24000038
 80050b4:	053e2d63 	.word	0x053e2d63
 80050b8:	40022000 	.word	0x40022000
 80050bc:	40022100 	.word	0x40022100
 80050c0:	58026000 	.word	0x58026000
 80050c4:	40022300 	.word	0x40022300
 80050c8:	58026300 	.word	0x58026300
 80050cc:	fff04007 	.word	0xfff04007
 80050d0:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	7e1b      	ldrb	r3, [r3, #24]
 80050d8:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 80050de:	4313      	orrs	r3, r2
 80050e0:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	68da      	ldr	r2, [r3, #12]
 80050e8:	4b46      	ldr	r3, [pc, #280]	@ (8005204 <HAL_ADC_Init+0x400>)
 80050ea:	4013      	ands	r3, r2
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	6812      	ldr	r2, [r2, #0]
 80050f0:	69b9      	ldr	r1, [r7, #24]
 80050f2:	430b      	orrs	r3, r1
 80050f4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d137      	bne.n	8005170 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005104:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a3f      	ldr	r2, [pc, #252]	@ (8005208 <HAL_ADC_Init+0x404>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d116      	bne.n	800513e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	691a      	ldr	r2, [r3, #16]
 8005116:	4b3d      	ldr	r3, [pc, #244]	@ (800520c <HAL_ADC_Init+0x408>)
 8005118:	4013      	ands	r3, r2
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005122:	4311      	orrs	r1, r2
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005128:	4311      	orrs	r1, r2
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800512e:	430a      	orrs	r2, r1
 8005130:	431a      	orrs	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f042 0201 	orr.w	r2, r2, #1
 800513a:	611a      	str	r2, [r3, #16]
 800513c:	e020      	b.n	8005180 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	691a      	ldr	r2, [r3, #16]
 8005144:	4b32      	ldr	r3, [pc, #200]	@ (8005210 <HAL_ADC_Init+0x40c>)
 8005146:	4013      	ands	r3, r2
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800514c:	3a01      	subs	r2, #1
 800514e:	0411      	lsls	r1, r2, #16
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005154:	4311      	orrs	r1, r2
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800515a:	4311      	orrs	r1, r2
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005160:	430a      	orrs	r2, r1
 8005162:	431a      	orrs	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f042 0201 	orr.w	r2, r2, #1
 800516c:	611a      	str	r2, [r3, #16]
 800516e:	e007      	b.n	8005180 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	691a      	ldr	r2, [r3, #16]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f022 0201 	bic.w	r2, r2, #1
 800517e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	430a      	orrs	r2, r1
 8005194:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a1b      	ldr	r2, [pc, #108]	@ (8005208 <HAL_ADC_Init+0x404>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d002      	beq.n	80051a6 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f001 fd99 	bl	8006cd8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d10c      	bne.n	80051c8 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051b4:	f023 010f 	bic.w	r1, r3, #15
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	69db      	ldr	r3, [r3, #28]
 80051bc:	1e5a      	subs	r2, r3, #1
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80051c6:	e007      	b.n	80051d8 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f022 020f 	bic.w	r2, r2, #15
 80051d6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051dc:	f023 0303 	bic.w	r3, r3, #3
 80051e0:	f043 0201 	orr.w	r2, r3, #1
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	661a      	str	r2, [r3, #96]	@ 0x60
 80051e8:	e007      	b.n	80051fa <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051ee:	f043 0210 	orr.w	r2, r3, #16
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80051fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3724      	adds	r7, #36	@ 0x24
 8005200:	46bd      	mov	sp, r7
 8005202:	bd90      	pop	{r4, r7, pc}
 8005204:	ffffbffc 	.word	0xffffbffc
 8005208:	58026000 	.word	0x58026000
 800520c:	fc00f81f 	.word	0xfc00f81f
 8005210:	fc00f81e 	.word	0xfc00f81e

08005214 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b086      	sub	sp, #24
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a60      	ldr	r2, [pc, #384]	@ (80053a8 <HAL_ADC_Start_DMA+0x194>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d004      	beq.n	8005234 <HAL_ADC_Start_DMA+0x20>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a5f      	ldr	r2, [pc, #380]	@ (80053ac <HAL_ADC_Start_DMA+0x198>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d101      	bne.n	8005238 <HAL_ADC_Start_DMA+0x24>
 8005234:	4b5e      	ldr	r3, [pc, #376]	@ (80053b0 <HAL_ADC_Start_DMA+0x19c>)
 8005236:	e000      	b.n	800523a <HAL_ADC_Start_DMA+0x26>
 8005238:	4b5e      	ldr	r3, [pc, #376]	@ (80053b4 <HAL_ADC_Start_DMA+0x1a0>)
 800523a:	4618      	mov	r0, r3
 800523c:	f7ff fc66 	bl	8004b0c <LL_ADC_GetMultimode>
 8005240:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4618      	mov	r0, r3
 8005248:	f7ff fd2c 	bl	8004ca4 <LL_ADC_REG_IsConversionOngoing>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	f040 80a2 	bne.w	8005398 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800525a:	2b01      	cmp	r3, #1
 800525c:	d101      	bne.n	8005262 <HAL_ADC_Start_DMA+0x4e>
 800525e:	2302      	movs	r3, #2
 8005260:	e09d      	b.n	800539e <HAL_ADC_Start_DMA+0x18a>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d006      	beq.n	800527e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	2b05      	cmp	r3, #5
 8005274:	d003      	beq.n	800527e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	2b09      	cmp	r3, #9
 800527a:	f040 8086 	bne.w	800538a <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	f001 fbac 	bl	80069dc <ADC_Enable>
 8005284:	4603      	mov	r3, r0
 8005286:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005288:	7dfb      	ldrb	r3, [r7, #23]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d178      	bne.n	8005380 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005292:	4b49      	ldr	r3, [pc, #292]	@ (80053b8 <HAL_ADC_Start_DMA+0x1a4>)
 8005294:	4013      	ands	r3, r2
 8005296:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a42      	ldr	r2, [pc, #264]	@ (80053ac <HAL_ADC_Start_DMA+0x198>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d002      	beq.n	80052ae <HAL_ADC_Start_DMA+0x9a>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	e000      	b.n	80052b0 <HAL_ADC_Start_DMA+0x9c>
 80052ae:	4b3e      	ldr	r3, [pc, #248]	@ (80053a8 <HAL_ADC_Start_DMA+0x194>)
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	6812      	ldr	r2, [r2, #0]
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d002      	beq.n	80052be <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d105      	bne.n	80052ca <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052c2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d006      	beq.n	80052e4 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052da:	f023 0206 	bic.w	r2, r3, #6
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	665a      	str	r2, [r3, #100]	@ 0x64
 80052e2:	e002      	b.n	80052ea <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052ee:	4a33      	ldr	r2, [pc, #204]	@ (80053bc <HAL_ADC_Start_DMA+0x1a8>)
 80052f0:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052f6:	4a32      	ldr	r2, [pc, #200]	@ (80053c0 <HAL_ADC_Start_DMA+0x1ac>)
 80052f8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052fe:	4a31      	ldr	r2, [pc, #196]	@ (80053c4 <HAL_ADC_Start_DMA+0x1b0>)
 8005300:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	221c      	movs	r2, #28
 8005308:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	685a      	ldr	r2, [r3, #4]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f042 0210 	orr.w	r2, r2, #16
 8005320:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a28      	ldr	r2, [pc, #160]	@ (80053c8 <HAL_ADC_Start_DMA+0x1b4>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d10f      	bne.n	800534c <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005336:	005b      	lsls	r3, r3, #1
 8005338:	4619      	mov	r1, r3
 800533a:	4610      	mov	r0, r2
 800533c:	f7ff fac2 	bl	80048c4 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4618      	mov	r0, r3
 8005346:	f7ff faad 	bl	80048a4 <LL_ADC_EnableDMAReq>
 800534a:	e007      	b.n	800535c <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005354:	4619      	mov	r1, r3
 8005356:	4610      	mov	r0, r2
 8005358:	f7ff fa91 	bl	800487e <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	3340      	adds	r3, #64	@ 0x40
 8005366:	4619      	mov	r1, r3
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f002 fdcc 	bl	8007f08 <HAL_DMA_Start_IT>
 8005370:	4603      	mov	r3, r0
 8005372:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4618      	mov	r0, r3
 800537a:	f7ff fc7f 	bl	8004c7c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800537e:	e00d      	b.n	800539c <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 8005388:	e008      	b.n	800539c <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8005396:	e001      	b.n	800539c <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005398:	2302      	movs	r3, #2
 800539a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800539c:	7dfb      	ldrb	r3, [r7, #23]
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3718      	adds	r7, #24
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	40022000 	.word	0x40022000
 80053ac:	40022100 	.word	0x40022100
 80053b0:	40022300 	.word	0x40022300
 80053b4:	58026300 	.word	0x58026300
 80053b8:	fffff0fe 	.word	0xfffff0fe
 80053bc:	08006baf 	.word	0x08006baf
 80053c0:	08006c87 	.word	0x08006c87
 80053c4:	08006ca3 	.word	0x08006ca3
 80053c8:	58026000 	.word	0x58026000

080053cc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b08a      	sub	sp, #40	@ 0x28
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80053d4:	2300      	movs	r3, #0
 80053d6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a87      	ldr	r2, [pc, #540]	@ (800560c <HAL_ADC_IRQHandler+0x240>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d004      	beq.n	80053fc <HAL_ADC_IRQHandler+0x30>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a86      	ldr	r2, [pc, #536]	@ (8005610 <HAL_ADC_IRQHandler+0x244>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d101      	bne.n	8005400 <HAL_ADC_IRQHandler+0x34>
 80053fc:	4b85      	ldr	r3, [pc, #532]	@ (8005614 <HAL_ADC_IRQHandler+0x248>)
 80053fe:	e000      	b.n	8005402 <HAL_ADC_IRQHandler+0x36>
 8005400:	4b85      	ldr	r3, [pc, #532]	@ (8005618 <HAL_ADC_IRQHandler+0x24c>)
 8005402:	4618      	mov	r0, r3
 8005404:	f7ff fb82 	bl	8004b0c <LL_ADC_GetMultimode>
 8005408:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b00      	cmp	r3, #0
 8005412:	d017      	beq.n	8005444 <HAL_ADC_IRQHandler+0x78>
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	2b00      	cmp	r3, #0
 800541c:	d012      	beq.n	8005444 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005422:	f003 0310 	and.w	r3, r3, #16
 8005426:	2b00      	cmp	r3, #0
 8005428:	d105      	bne.n	8005436 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800542e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f001 fee8 	bl	800720c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2202      	movs	r2, #2
 8005442:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	f003 0304 	and.w	r3, r3, #4
 800544a:	2b00      	cmp	r3, #0
 800544c:	d004      	beq.n	8005458 <HAL_ADC_IRQHandler+0x8c>
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	f003 0304 	and.w	r3, r3, #4
 8005454:	2b00      	cmp	r3, #0
 8005456:	d10a      	bne.n	800546e <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800545e:	2b00      	cmp	r3, #0
 8005460:	f000 8083 	beq.w	800556a <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	f003 0308 	and.w	r3, r3, #8
 800546a:	2b00      	cmp	r3, #0
 800546c:	d07d      	beq.n	800556a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005472:	f003 0310 	and.w	r3, r3, #16
 8005476:	2b00      	cmp	r3, #0
 8005478:	d105      	bne.n	8005486 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800547e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4618      	mov	r0, r3
 800548c:	f7ff f9b8 	bl	8004800 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d062      	beq.n	800555c <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a5d      	ldr	r2, [pc, #372]	@ (8005610 <HAL_ADC_IRQHandler+0x244>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d002      	beq.n	80054a6 <HAL_ADC_IRQHandler+0xda>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	e000      	b.n	80054a8 <HAL_ADC_IRQHandler+0xdc>
 80054a6:	4b59      	ldr	r3, [pc, #356]	@ (800560c <HAL_ADC_IRQHandler+0x240>)
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	6812      	ldr	r2, [r2, #0]
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d008      	beq.n	80054c2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d005      	beq.n	80054c2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	2b05      	cmp	r3, #5
 80054ba:	d002      	beq.n	80054c2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	2b09      	cmp	r3, #9
 80054c0:	d104      	bne.n	80054cc <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	623b      	str	r3, [r7, #32]
 80054ca:	e00c      	b.n	80054e6 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a4f      	ldr	r2, [pc, #316]	@ (8005610 <HAL_ADC_IRQHandler+0x244>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d002      	beq.n	80054dc <HAL_ADC_IRQHandler+0x110>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	e000      	b.n	80054de <HAL_ADC_IRQHandler+0x112>
 80054dc:	4b4b      	ldr	r3, [pc, #300]	@ (800560c <HAL_ADC_IRQHandler+0x240>)
 80054de:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80054e6:	6a3b      	ldr	r3, [r7, #32]
 80054e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d135      	bne.n	800555c <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0308 	and.w	r3, r3, #8
 80054fa:	2b08      	cmp	r3, #8
 80054fc:	d12e      	bne.n	800555c <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4618      	mov	r0, r3
 8005504:	f7ff fbce 	bl	8004ca4 <LL_ADC_REG_IsConversionOngoing>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d11a      	bne.n	8005544 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	685a      	ldr	r2, [r3, #4]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f022 020c 	bic.w	r2, r2, #12
 800551c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005522:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800552e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005532:	2b00      	cmp	r3, #0
 8005534:	d112      	bne.n	800555c <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800553a:	f043 0201 	orr.w	r2, r3, #1
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	661a      	str	r2, [r3, #96]	@ 0x60
 8005542:	e00b      	b.n	800555c <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005548:	f043 0210 	orr.w	r2, r3, #16
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005554:	f043 0201 	orr.w	r2, r3, #1
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f7fc fbd5 	bl	8001d0c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	220c      	movs	r2, #12
 8005568:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	f003 0320 	and.w	r3, r3, #32
 8005570:	2b00      	cmp	r3, #0
 8005572:	d004      	beq.n	800557e <HAL_ADC_IRQHandler+0x1b2>
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	f003 0320 	and.w	r3, r3, #32
 800557a:	2b00      	cmp	r3, #0
 800557c:	d10b      	bne.n	8005596 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005584:	2b00      	cmp	r3, #0
 8005586:	f000 80a0 	beq.w	80056ca <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005590:	2b00      	cmp	r3, #0
 8005592:	f000 809a 	beq.w	80056ca <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800559a:	f003 0310 	and.w	r3, r3, #16
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d105      	bne.n	80055ae <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055a6:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7ff f9a0 	bl	80048f8 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80055b8:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4618      	mov	r0, r3
 80055c0:	f7ff f91e 	bl	8004800 <LL_ADC_REG_IsTriggerSourceSWStart>
 80055c4:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a11      	ldr	r2, [pc, #68]	@ (8005610 <HAL_ADC_IRQHandler+0x244>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d002      	beq.n	80055d6 <HAL_ADC_IRQHandler+0x20a>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	e000      	b.n	80055d8 <HAL_ADC_IRQHandler+0x20c>
 80055d6:	4b0d      	ldr	r3, [pc, #52]	@ (800560c <HAL_ADC_IRQHandler+0x240>)
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	6812      	ldr	r2, [r2, #0]
 80055dc:	4293      	cmp	r3, r2
 80055de:	d008      	beq.n	80055f2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d005      	beq.n	80055f2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	2b06      	cmp	r3, #6
 80055ea:	d002      	beq.n	80055f2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	2b07      	cmp	r3, #7
 80055f0:	d104      	bne.n	80055fc <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	623b      	str	r3, [r7, #32]
 80055fa:	e014      	b.n	8005626 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a03      	ldr	r2, [pc, #12]	@ (8005610 <HAL_ADC_IRQHandler+0x244>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d00a      	beq.n	800561c <HAL_ADC_IRQHandler+0x250>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	e008      	b.n	800561e <HAL_ADC_IRQHandler+0x252>
 800560c:	40022000 	.word	0x40022000
 8005610:	40022100 	.word	0x40022100
 8005614:	40022300 	.word	0x40022300
 8005618:	58026300 	.word	0x58026300
 800561c:	4b84      	ldr	r3, [pc, #528]	@ (8005830 <HAL_ADC_IRQHandler+0x464>)
 800561e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d047      	beq.n	80056bc <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800562c:	6a3b      	ldr	r3, [r7, #32]
 800562e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d007      	beq.n	8005646 <HAL_ADC_IRQHandler+0x27a>
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d03f      	beq.n	80056bc <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800563c:	6a3b      	ldr	r3, [r7, #32]
 800563e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005642:	2b00      	cmp	r3, #0
 8005644:	d13a      	bne.n	80056bc <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005650:	2b40      	cmp	r3, #64	@ 0x40
 8005652:	d133      	bne.n	80056bc <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005654:	6a3b      	ldr	r3, [r7, #32]
 8005656:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800565a:	2b00      	cmp	r3, #0
 800565c:	d12e      	bne.n	80056bc <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4618      	mov	r0, r3
 8005664:	f7ff fb31 	bl	8004cca <LL_ADC_INJ_IsConversionOngoing>
 8005668:	4603      	mov	r3, r0
 800566a:	2b00      	cmp	r3, #0
 800566c:	d11a      	bne.n	80056a4 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	685a      	ldr	r2, [r3, #4]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800567c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005682:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800568e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005692:	2b00      	cmp	r3, #0
 8005694:	d112      	bne.n	80056bc <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800569a:	f043 0201 	orr.w	r2, r3, #1
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	661a      	str	r2, [r3, #96]	@ 0x60
 80056a2:	e00b      	b.n	80056bc <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056a8:	f043 0210 	orr.w	r2, r3, #16
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80056b4:	f043 0201 	orr.w	r2, r3, #1
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f001 fd7d 	bl	80071bc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2260      	movs	r2, #96	@ 0x60
 80056c8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d011      	beq.n	80056f8 <HAL_ADC_IRQHandler+0x32c>
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00c      	beq.n	80056f8 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056e2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f8b2 	bl	8005854 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2280      	movs	r2, #128	@ 0x80
 80056f6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d012      	beq.n	8005728 <HAL_ADC_IRQHandler+0x35c>
 8005702:	69bb      	ldr	r3, [r7, #24]
 8005704:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00d      	beq.n	8005728 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005710:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f001 fd63 	bl	80071e4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005726:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005728:	69fb      	ldr	r3, [r7, #28]
 800572a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800572e:	2b00      	cmp	r3, #0
 8005730:	d012      	beq.n	8005758 <HAL_ADC_IRQHandler+0x38c>
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00d      	beq.n	8005758 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005740:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f001 fd55 	bl	80071f8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005756:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	f003 0310 	and.w	r3, r3, #16
 800575e:	2b00      	cmp	r3, #0
 8005760:	d043      	beq.n	80057ea <HAL_ADC_IRQHandler+0x41e>
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	f003 0310 	and.w	r3, r3, #16
 8005768:	2b00      	cmp	r3, #0
 800576a:	d03e      	beq.n	80057ea <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005770:	2b00      	cmp	r3, #0
 8005772:	d102      	bne.n	800577a <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8005774:	2301      	movs	r3, #1
 8005776:	627b      	str	r3, [r7, #36]	@ 0x24
 8005778:	e021      	b.n	80057be <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d015      	beq.n	80057ac <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a2a      	ldr	r2, [pc, #168]	@ (8005830 <HAL_ADC_IRQHandler+0x464>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d004      	beq.n	8005794 <HAL_ADC_IRQHandler+0x3c8>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a29      	ldr	r2, [pc, #164]	@ (8005834 <HAL_ADC_IRQHandler+0x468>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d101      	bne.n	8005798 <HAL_ADC_IRQHandler+0x3cc>
 8005794:	4b28      	ldr	r3, [pc, #160]	@ (8005838 <HAL_ADC_IRQHandler+0x46c>)
 8005796:	e000      	b.n	800579a <HAL_ADC_IRQHandler+0x3ce>
 8005798:	4b28      	ldr	r3, [pc, #160]	@ (800583c <HAL_ADC_IRQHandler+0x470>)
 800579a:	4618      	mov	r0, r3
 800579c:	f7ff f9c4 	bl	8004b28 <LL_ADC_GetMultiDMATransfer>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00b      	beq.n	80057be <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80057a6:	2301      	movs	r3, #1
 80057a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80057aa:	e008      	b.n	80057be <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	f003 0303 	and.w	r3, r3, #3
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d001      	beq.n	80057be <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80057ba:	2301      	movs	r3, #1
 80057bc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80057be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d10e      	bne.n	80057e2 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057c8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057d4:	f043 0202 	orr.w	r2, r3, #2
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f7fc fa69 	bl	8001cb4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2210      	movs	r2, #16
 80057e8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d018      	beq.n	8005826 <HAL_ADC_IRQHandler+0x45a>
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d013      	beq.n	8005826 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005802:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800580e:	f043 0208 	orr.w	r2, r3, #8
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800581e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f001 fcd5 	bl	80071d0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8005826:	bf00      	nop
 8005828:	3728      	adds	r7, #40	@ 0x28
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	40022000 	.word	0x40022000
 8005834:	40022100 	.word	0x40022100
 8005838:	40022300 	.word	0x40022300
 800583c:	58026300 	.word	0x58026300

08005840 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005848:	bf00      	nop
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800585c:	bf00      	nop
 800585e:	370c      	adds	r7, #12
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005868:	b590      	push	{r4, r7, lr}
 800586a:	b0b9      	sub	sp, #228	@ 0xe4
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005872:	2300      	movs	r3, #0
 8005874:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005878:	2300      	movs	r3, #0
 800587a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005882:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	4aa9      	ldr	r2, [pc, #676]	@ (8005b30 <HAL_ADC_ConfigChannel+0x2c8>)
 800588a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005892:	2b01      	cmp	r3, #1
 8005894:	d102      	bne.n	800589c <HAL_ADC_ConfigChannel+0x34>
 8005896:	2302      	movs	r3, #2
 8005898:	f000 bcfa 	b.w	8006290 <HAL_ADC_ConfigChannel+0xa28>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4618      	mov	r0, r3
 80058aa:	f7ff f9fb 	bl	8004ca4 <LL_ADC_REG_IsConversionOngoing>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f040 84de 	bne.w	8006272 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a9e      	ldr	r2, [pc, #632]	@ (8005b34 <HAL_ADC_ConfigChannel+0x2cc>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d033      	beq.n	8005928 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d108      	bne.n	80058de <HAL_ADC_ConfigChannel+0x76>
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	0e9b      	lsrs	r3, r3, #26
 80058d2:	f003 031f 	and.w	r3, r3, #31
 80058d6:	2201      	movs	r2, #1
 80058d8:	fa02 f303 	lsl.w	r3, r2, r3
 80058dc:	e01d      	b.n	800591a <HAL_ADC_ConfigChannel+0xb2>
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80058ea:	fa93 f3a3 	rbit	r3, r3
 80058ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80058f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80058f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80058fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d101      	bne.n	8005906 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8005902:	2320      	movs	r3, #32
 8005904:	e004      	b.n	8005910 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8005906:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800590a:	fab3 f383 	clz	r3, r3
 800590e:	b2db      	uxtb	r3, r3
 8005910:	f003 031f 	and.w	r3, r3, #31
 8005914:	2201      	movs	r2, #1
 8005916:	fa02 f303 	lsl.w	r3, r2, r3
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	6812      	ldr	r2, [r2, #0]
 800591e:	69d1      	ldr	r1, [r2, #28]
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	6812      	ldr	r2, [r2, #0]
 8005924:	430b      	orrs	r3, r1
 8005926:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6818      	ldr	r0, [r3, #0]
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	6859      	ldr	r1, [r3, #4]
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	461a      	mov	r2, r3
 8005936:	f7fe ff76 	bl	8004826 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4618      	mov	r0, r3
 8005940:	f7ff f9b0 	bl	8004ca4 <LL_ADC_REG_IsConversionOngoing>
 8005944:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4618      	mov	r0, r3
 800594e:	f7ff f9bc 	bl	8004cca <LL_ADC_INJ_IsConversionOngoing>
 8005952:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005956:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800595a:	2b00      	cmp	r3, #0
 800595c:	f040 8270 	bne.w	8005e40 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005960:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005964:	2b00      	cmp	r3, #0
 8005966:	f040 826b 	bne.w	8005e40 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6818      	ldr	r0, [r3, #0]
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	6819      	ldr	r1, [r3, #0]
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	461a      	mov	r2, r3
 8005978:	f7fe ffd1 	bl	800491e <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a6c      	ldr	r2, [pc, #432]	@ (8005b34 <HAL_ADC_ConfigChannel+0x2cc>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d10d      	bne.n	80059a2 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	695a      	ldr	r2, [r3, #20]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	08db      	lsrs	r3, r3, #3
 8005992:	f003 0303 	and.w	r3, r3, #3
 8005996:	005b      	lsls	r3, r3, #1
 8005998:	fa02 f303 	lsl.w	r3, r2, r3
 800599c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80059a0:	e032      	b.n	8005a08 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80059a2:	4b65      	ldr	r3, [pc, #404]	@ (8005b38 <HAL_ADC_ConfigChannel+0x2d0>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80059aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059ae:	d10b      	bne.n	80059c8 <HAL_ADC_ConfigChannel+0x160>
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	695a      	ldr	r2, [r3, #20]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	089b      	lsrs	r3, r3, #2
 80059bc:	f003 0307 	and.w	r3, r3, #7
 80059c0:	005b      	lsls	r3, r3, #1
 80059c2:	fa02 f303 	lsl.w	r3, r2, r3
 80059c6:	e01d      	b.n	8005a04 <HAL_ADC_ConfigChannel+0x19c>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	f003 0310 	and.w	r3, r3, #16
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d10b      	bne.n	80059ee <HAL_ADC_ConfigChannel+0x186>
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	695a      	ldr	r2, [r3, #20]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	089b      	lsrs	r3, r3, #2
 80059e2:	f003 0307 	and.w	r3, r3, #7
 80059e6:	005b      	lsls	r3, r3, #1
 80059e8:	fa02 f303 	lsl.w	r3, r2, r3
 80059ec:	e00a      	b.n	8005a04 <HAL_ADC_ConfigChannel+0x19c>
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	695a      	ldr	r2, [r3, #20]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	089b      	lsrs	r3, r3, #2
 80059fa:	f003 0304 	and.w	r3, r3, #4
 80059fe:	005b      	lsls	r3, r3, #1
 8005a00:	fa02 f303 	lsl.w	r3, r2, r3
 8005a04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	2b04      	cmp	r3, #4
 8005a0e:	d048      	beq.n	8005aa2 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6818      	ldr	r0, [r3, #0]
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	6919      	ldr	r1, [r3, #16]
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005a20:	f7fe fdfc 	bl	800461c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a42      	ldr	r2, [pc, #264]	@ (8005b34 <HAL_ADC_ConfigChannel+0x2cc>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d119      	bne.n	8005a62 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6818      	ldr	r0, [r3, #0]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	6919      	ldr	r1, [r3, #16]
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	69db      	ldr	r3, [r3, #28]
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	f7fe fe94 	bl	8004768 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6818      	ldr	r0, [r3, #0]
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	6919      	ldr	r1, [r3, #16]
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d102      	bne.n	8005a58 <HAL_ADC_ConfigChannel+0x1f0>
 8005a52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005a56:	e000      	b.n	8005a5a <HAL_ADC_ConfigChannel+0x1f2>
 8005a58:	2300      	movs	r3, #0
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	f7fe fe62 	bl	8004724 <LL_ADC_SetOffsetSaturation>
 8005a60:	e1ee      	b.n	8005e40 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6818      	ldr	r0, [r3, #0]
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	6919      	ldr	r1, [r3, #16]
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d102      	bne.n	8005a7a <HAL_ADC_ConfigChannel+0x212>
 8005a74:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005a78:	e000      	b.n	8005a7c <HAL_ADC_ConfigChannel+0x214>
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	f7fe fe2f 	bl	80046e0 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6818      	ldr	r0, [r3, #0]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	6919      	ldr	r1, [r3, #16]
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	7e1b      	ldrb	r3, [r3, #24]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d102      	bne.n	8005a98 <HAL_ADC_ConfigChannel+0x230>
 8005a92:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005a96:	e000      	b.n	8005a9a <HAL_ADC_ConfigChannel+0x232>
 8005a98:	2300      	movs	r3, #0
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	f7fe fe06 	bl	80046ac <LL_ADC_SetDataRightShift>
 8005aa0:	e1ce      	b.n	8005e40 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a23      	ldr	r2, [pc, #140]	@ (8005b34 <HAL_ADC_ConfigChannel+0x2cc>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	f040 8181 	bne.w	8005db0 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7fe fde3 	bl	8004680 <LL_ADC_GetOffsetChannel>
 8005aba:	4603      	mov	r3, r0
 8005abc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10a      	bne.n	8005ada <HAL_ADC_ConfigChannel+0x272>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2100      	movs	r1, #0
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7fe fdd8 	bl	8004680 <LL_ADC_GetOffsetChannel>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	0e9b      	lsrs	r3, r3, #26
 8005ad4:	f003 021f 	and.w	r2, r3, #31
 8005ad8:	e01e      	b.n	8005b18 <HAL_ADC_ConfigChannel+0x2b0>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2100      	movs	r1, #0
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f7fe fdcd 	bl	8004680 <LL_ADC_GetOffsetChannel>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005af0:	fa93 f3a3 	rbit	r3, r3
 8005af4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8005af8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005afc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8005b00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d101      	bne.n	8005b0c <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8005b08:	2320      	movs	r3, #32
 8005b0a:	e004      	b.n	8005b16 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8005b0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005b10:	fab3 f383 	clz	r3, r3
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	461a      	mov	r2, r3
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d10b      	bne.n	8005b3c <HAL_ADC_ConfigChannel+0x2d4>
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	0e9b      	lsrs	r3, r3, #26
 8005b2a:	f003 031f 	and.w	r3, r3, #31
 8005b2e:	e01e      	b.n	8005b6e <HAL_ADC_ConfigChannel+0x306>
 8005b30:	47ff0000 	.word	0x47ff0000
 8005b34:	58026000 	.word	0x58026000
 8005b38:	5c001000 	.word	0x5c001000
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005b48:	fa93 f3a3 	rbit	r3, r3
 8005b4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8005b50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005b54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8005b58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d101      	bne.n	8005b64 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8005b60:	2320      	movs	r3, #32
 8005b62:	e004      	b.n	8005b6e <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8005b64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005b68:	fab3 f383 	clz	r3, r3
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d106      	bne.n	8005b80 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2200      	movs	r2, #0
 8005b78:	2100      	movs	r1, #0
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7fe fe16 	bl	80047ac <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2101      	movs	r1, #1
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7fe fd7a 	bl	8004680 <LL_ADC_GetOffsetChannel>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d10a      	bne.n	8005bac <HAL_ADC_ConfigChannel+0x344>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2101      	movs	r1, #1
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7fe fd6f 	bl	8004680 <LL_ADC_GetOffsetChannel>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	0e9b      	lsrs	r3, r3, #26
 8005ba6:	f003 021f 	and.w	r2, r3, #31
 8005baa:	e01e      	b.n	8005bea <HAL_ADC_ConfigChannel+0x382>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2101      	movs	r1, #1
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f7fe fd64 	bl	8004680 <LL_ADC_GetOffsetChannel>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005bc2:	fa93 f3a3 	rbit	r3, r3
 8005bc6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8005bca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005bce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8005bd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d101      	bne.n	8005bde <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8005bda:	2320      	movs	r3, #32
 8005bdc:	e004      	b.n	8005be8 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8005bde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005be2:	fab3 f383 	clz	r3, r3
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	461a      	mov	r2, r3
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d105      	bne.n	8005c02 <HAL_ADC_ConfigChannel+0x39a>
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	0e9b      	lsrs	r3, r3, #26
 8005bfc:	f003 031f 	and.w	r3, r3, #31
 8005c00:	e018      	b.n	8005c34 <HAL_ADC_ConfigChannel+0x3cc>
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005c0e:	fa93 f3a3 	rbit	r3, r3
 8005c12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8005c16:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005c1a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8005c1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d101      	bne.n	8005c2a <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8005c26:	2320      	movs	r3, #32
 8005c28:	e004      	b.n	8005c34 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8005c2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005c2e:	fab3 f383 	clz	r3, r3
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d106      	bne.n	8005c46 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	2101      	movs	r1, #1
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7fe fdb3 	bl	80047ac <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2102      	movs	r1, #2
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f7fe fd17 	bl	8004680 <LL_ADC_GetOffsetChannel>
 8005c52:	4603      	mov	r3, r0
 8005c54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d10a      	bne.n	8005c72 <HAL_ADC_ConfigChannel+0x40a>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2102      	movs	r1, #2
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7fe fd0c 	bl	8004680 <LL_ADC_GetOffsetChannel>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	0e9b      	lsrs	r3, r3, #26
 8005c6c:	f003 021f 	and.w	r2, r3, #31
 8005c70:	e01e      	b.n	8005cb0 <HAL_ADC_ConfigChannel+0x448>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2102      	movs	r1, #2
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f7fe fd01 	bl	8004680 <LL_ADC_GetOffsetChannel>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005c88:	fa93 f3a3 	rbit	r3, r3
 8005c8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8005c90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005c94:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8005c98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d101      	bne.n	8005ca4 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8005ca0:	2320      	movs	r3, #32
 8005ca2:	e004      	b.n	8005cae <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8005ca4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ca8:	fab3 f383 	clz	r3, r3
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	461a      	mov	r2, r3
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d105      	bne.n	8005cc8 <HAL_ADC_ConfigChannel+0x460>
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	0e9b      	lsrs	r3, r3, #26
 8005cc2:	f003 031f 	and.w	r3, r3, #31
 8005cc6:	e014      	b.n	8005cf2 <HAL_ADC_ConfigChannel+0x48a>
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005cd0:	fa93 f3a3 	rbit	r3, r3
 8005cd4:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8005cd6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005cd8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8005cdc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d101      	bne.n	8005ce8 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8005ce4:	2320      	movs	r3, #32
 8005ce6:	e004      	b.n	8005cf2 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8005ce8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005cec:	fab3 f383 	clz	r3, r3
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d106      	bne.n	8005d04 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	2102      	movs	r1, #2
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7fe fd54 	bl	80047ac <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2103      	movs	r1, #3
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7fe fcb8 	bl	8004680 <LL_ADC_GetOffsetChannel>
 8005d10:	4603      	mov	r3, r0
 8005d12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10a      	bne.n	8005d30 <HAL_ADC_ConfigChannel+0x4c8>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	2103      	movs	r1, #3
 8005d20:	4618      	mov	r0, r3
 8005d22:	f7fe fcad 	bl	8004680 <LL_ADC_GetOffsetChannel>
 8005d26:	4603      	mov	r3, r0
 8005d28:	0e9b      	lsrs	r3, r3, #26
 8005d2a:	f003 021f 	and.w	r2, r3, #31
 8005d2e:	e017      	b.n	8005d60 <HAL_ADC_ConfigChannel+0x4f8>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2103      	movs	r1, #3
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7fe fca2 	bl	8004680 <LL_ADC_GetOffsetChannel>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d40:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d42:	fa93 f3a3 	rbit	r3, r3
 8005d46:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8005d48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d4a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8005d4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d101      	bne.n	8005d56 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8005d52:	2320      	movs	r3, #32
 8005d54:	e003      	b.n	8005d5e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8005d56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d58:	fab3 f383 	clz	r3, r3
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	461a      	mov	r2, r3
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d105      	bne.n	8005d78 <HAL_ADC_ConfigChannel+0x510>
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	0e9b      	lsrs	r3, r3, #26
 8005d72:	f003 031f 	and.w	r3, r3, #31
 8005d76:	e011      	b.n	8005d9c <HAL_ADC_ConfigChannel+0x534>
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d80:	fa93 f3a3 	rbit	r3, r3
 8005d84:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8005d86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d88:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8005d8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d101      	bne.n	8005d94 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8005d90:	2320      	movs	r3, #32
 8005d92:	e003      	b.n	8005d9c <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8005d94:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d96:	fab3 f383 	clz	r3, r3
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d14f      	bne.n	8005e40 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2200      	movs	r2, #0
 8005da6:	2103      	movs	r1, #3
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7fe fcff 	bl	80047ac <LL_ADC_SetOffsetState>
 8005dae:	e047      	b.n	8005e40 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005db6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	069b      	lsls	r3, r3, #26
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d107      	bne.n	8005dd4 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005dd2:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005dda:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	069b      	lsls	r3, r3, #26
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d107      	bne.n	8005df8 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005df6:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005dfe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	069b      	lsls	r3, r3, #26
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d107      	bne.n	8005e1c <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005e1a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e22:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	069b      	lsls	r3, r3, #26
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d107      	bne.n	8005e40 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005e3e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4618      	mov	r0, r3
 8005e46:	f7fe fef3 	bl	8004c30 <LL_ADC_IsEnabled>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f040 8219 	bne.w	8006284 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6818      	ldr	r0, [r3, #0]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	6819      	ldr	r1, [r3, #0]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	461a      	mov	r2, r3
 8005e60:	f7fe fd88 	bl	8004974 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	4aa1      	ldr	r2, [pc, #644]	@ (80060f0 <HAL_ADC_ConfigChannel+0x888>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	f040 812e 	bne.w	80060cc <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10b      	bne.n	8005e98 <HAL_ADC_ConfigChannel+0x630>
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	0e9b      	lsrs	r3, r3, #26
 8005e86:	3301      	adds	r3, #1
 8005e88:	f003 031f 	and.w	r3, r3, #31
 8005e8c:	2b09      	cmp	r3, #9
 8005e8e:	bf94      	ite	ls
 8005e90:	2301      	movls	r3, #1
 8005e92:	2300      	movhi	r3, #0
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	e019      	b.n	8005ecc <HAL_ADC_ConfigChannel+0x664>
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ea0:	fa93 f3a3 	rbit	r3, r3
 8005ea4:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8005ea6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ea8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8005eaa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d101      	bne.n	8005eb4 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8005eb0:	2320      	movs	r3, #32
 8005eb2:	e003      	b.n	8005ebc <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8005eb4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005eb6:	fab3 f383 	clz	r3, r3
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	f003 031f 	and.w	r3, r3, #31
 8005ec2:	2b09      	cmp	r3, #9
 8005ec4:	bf94      	ite	ls
 8005ec6:	2301      	movls	r3, #1
 8005ec8:	2300      	movhi	r3, #0
 8005eca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d079      	beq.n	8005fc4 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d107      	bne.n	8005eec <HAL_ADC_ConfigChannel+0x684>
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	0e9b      	lsrs	r3, r3, #26
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	069b      	lsls	r3, r3, #26
 8005ee6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005eea:	e015      	b.n	8005f18 <HAL_ADC_ConfigChannel+0x6b0>
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ef2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ef4:	fa93 f3a3 	rbit	r3, r3
 8005ef8:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8005efa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005efc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8005efe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d101      	bne.n	8005f08 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8005f04:	2320      	movs	r3, #32
 8005f06:	e003      	b.n	8005f10 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8005f08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f0a:	fab3 f383 	clz	r3, r3
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	3301      	adds	r3, #1
 8005f12:	069b      	lsls	r3, r3, #26
 8005f14:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d109      	bne.n	8005f38 <HAL_ADC_ConfigChannel+0x6d0>
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	0e9b      	lsrs	r3, r3, #26
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	f003 031f 	and.w	r3, r3, #31
 8005f30:	2101      	movs	r1, #1
 8005f32:	fa01 f303 	lsl.w	r3, r1, r3
 8005f36:	e017      	b.n	8005f68 <HAL_ADC_ConfigChannel+0x700>
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f40:	fa93 f3a3 	rbit	r3, r3
 8005f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8005f46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f48:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8005f4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d101      	bne.n	8005f54 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8005f50:	2320      	movs	r3, #32
 8005f52:	e003      	b.n	8005f5c <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8005f54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f56:	fab3 f383 	clz	r3, r3
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	f003 031f 	and.w	r3, r3, #31
 8005f62:	2101      	movs	r1, #1
 8005f64:	fa01 f303 	lsl.w	r3, r1, r3
 8005f68:	ea42 0103 	orr.w	r1, r2, r3
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d10a      	bne.n	8005f8e <HAL_ADC_ConfigChannel+0x726>
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	0e9b      	lsrs	r3, r3, #26
 8005f7e:	3301      	adds	r3, #1
 8005f80:	f003 021f 	and.w	r2, r3, #31
 8005f84:	4613      	mov	r3, r2
 8005f86:	005b      	lsls	r3, r3, #1
 8005f88:	4413      	add	r3, r2
 8005f8a:	051b      	lsls	r3, r3, #20
 8005f8c:	e018      	b.n	8005fc0 <HAL_ADC_ConfigChannel+0x758>
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f96:	fa93 f3a3 	rbit	r3, r3
 8005f9a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8005f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8005fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d101      	bne.n	8005faa <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8005fa6:	2320      	movs	r3, #32
 8005fa8:	e003      	b.n	8005fb2 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8005faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fac:	fab3 f383 	clz	r3, r3
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	f003 021f 	and.w	r2, r3, #31
 8005fb8:	4613      	mov	r3, r2
 8005fba:	005b      	lsls	r3, r3, #1
 8005fbc:	4413      	add	r3, r2
 8005fbe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005fc0:	430b      	orrs	r3, r1
 8005fc2:	e07e      	b.n	80060c2 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d107      	bne.n	8005fe0 <HAL_ADC_ConfigChannel+0x778>
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	0e9b      	lsrs	r3, r3, #26
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	069b      	lsls	r3, r3, #26
 8005fda:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005fde:	e015      	b.n	800600c <HAL_ADC_ConfigChannel+0x7a4>
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fe8:	fa93 f3a3 	rbit	r3, r3
 8005fec:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8005fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8005ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d101      	bne.n	8005ffc <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8005ff8:	2320      	movs	r3, #32
 8005ffa:	e003      	b.n	8006004 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8005ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ffe:	fab3 f383 	clz	r3, r3
 8006002:	b2db      	uxtb	r3, r3
 8006004:	3301      	adds	r3, #1
 8006006:	069b      	lsls	r3, r3, #26
 8006008:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006014:	2b00      	cmp	r3, #0
 8006016:	d109      	bne.n	800602c <HAL_ADC_ConfigChannel+0x7c4>
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	0e9b      	lsrs	r3, r3, #26
 800601e:	3301      	adds	r3, #1
 8006020:	f003 031f 	and.w	r3, r3, #31
 8006024:	2101      	movs	r1, #1
 8006026:	fa01 f303 	lsl.w	r3, r1, r3
 800602a:	e017      	b.n	800605c <HAL_ADC_ConfigChannel+0x7f4>
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	fa93 f3a3 	rbit	r3, r3
 8006038:	61bb      	str	r3, [r7, #24]
  return result;
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800603e:	6a3b      	ldr	r3, [r7, #32]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d101      	bne.n	8006048 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8006044:	2320      	movs	r3, #32
 8006046:	e003      	b.n	8006050 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8006048:	6a3b      	ldr	r3, [r7, #32]
 800604a:	fab3 f383 	clz	r3, r3
 800604e:	b2db      	uxtb	r3, r3
 8006050:	3301      	adds	r3, #1
 8006052:	f003 031f 	and.w	r3, r3, #31
 8006056:	2101      	movs	r1, #1
 8006058:	fa01 f303 	lsl.w	r3, r1, r3
 800605c:	ea42 0103 	orr.w	r1, r2, r3
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006068:	2b00      	cmp	r3, #0
 800606a:	d10d      	bne.n	8006088 <HAL_ADC_ConfigChannel+0x820>
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	0e9b      	lsrs	r3, r3, #26
 8006072:	3301      	adds	r3, #1
 8006074:	f003 021f 	and.w	r2, r3, #31
 8006078:	4613      	mov	r3, r2
 800607a:	005b      	lsls	r3, r3, #1
 800607c:	4413      	add	r3, r2
 800607e:	3b1e      	subs	r3, #30
 8006080:	051b      	lsls	r3, r3, #20
 8006082:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006086:	e01b      	b.n	80060c0 <HAL_ADC_ConfigChannel+0x858>
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	fa93 f3a3 	rbit	r3, r3
 8006094:	60fb      	str	r3, [r7, #12]
  return result;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d101      	bne.n	80060a4 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 80060a0:	2320      	movs	r3, #32
 80060a2:	e003      	b.n	80060ac <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	fab3 f383 	clz	r3, r3
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	3301      	adds	r3, #1
 80060ae:	f003 021f 	and.w	r2, r3, #31
 80060b2:	4613      	mov	r3, r2
 80060b4:	005b      	lsls	r3, r3, #1
 80060b6:	4413      	add	r3, r2
 80060b8:	3b1e      	subs	r3, #30
 80060ba:	051b      	lsls	r3, r3, #20
 80060bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80060c0:	430b      	orrs	r3, r1
 80060c2:	683a      	ldr	r2, [r7, #0]
 80060c4:	6892      	ldr	r2, [r2, #8]
 80060c6:	4619      	mov	r1, r3
 80060c8:	f7fe fc29 	bl	800491e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f280 80d7 	bge.w	8006284 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a06      	ldr	r2, [pc, #24]	@ (80060f4 <HAL_ADC_ConfigChannel+0x88c>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d004      	beq.n	80060ea <HAL_ADC_ConfigChannel+0x882>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a04      	ldr	r2, [pc, #16]	@ (80060f8 <HAL_ADC_ConfigChannel+0x890>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d10a      	bne.n	8006100 <HAL_ADC_ConfigChannel+0x898>
 80060ea:	4b04      	ldr	r3, [pc, #16]	@ (80060fc <HAL_ADC_ConfigChannel+0x894>)
 80060ec:	e009      	b.n	8006102 <HAL_ADC_ConfigChannel+0x89a>
 80060ee:	bf00      	nop
 80060f0:	47ff0000 	.word	0x47ff0000
 80060f4:	40022000 	.word	0x40022000
 80060f8:	40022100 	.word	0x40022100
 80060fc:	40022300 	.word	0x40022300
 8006100:	4b65      	ldr	r3, [pc, #404]	@ (8006298 <HAL_ADC_ConfigChannel+0xa30>)
 8006102:	4618      	mov	r0, r3
 8006104:	f7fe fa7c 	bl	8004600 <LL_ADC_GetCommonPathInternalCh>
 8006108:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a62      	ldr	r2, [pc, #392]	@ (800629c <HAL_ADC_ConfigChannel+0xa34>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d004      	beq.n	8006120 <HAL_ADC_ConfigChannel+0x8b8>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a61      	ldr	r2, [pc, #388]	@ (80062a0 <HAL_ADC_ConfigChannel+0xa38>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d10e      	bne.n	800613e <HAL_ADC_ConfigChannel+0x8d6>
 8006120:	485e      	ldr	r0, [pc, #376]	@ (800629c <HAL_ADC_ConfigChannel+0xa34>)
 8006122:	f7fe fd85 	bl	8004c30 <LL_ADC_IsEnabled>
 8006126:	4604      	mov	r4, r0
 8006128:	485d      	ldr	r0, [pc, #372]	@ (80062a0 <HAL_ADC_ConfigChannel+0xa38>)
 800612a:	f7fe fd81 	bl	8004c30 <LL_ADC_IsEnabled>
 800612e:	4603      	mov	r3, r0
 8006130:	4323      	orrs	r3, r4
 8006132:	2b00      	cmp	r3, #0
 8006134:	bf0c      	ite	eq
 8006136:	2301      	moveq	r3, #1
 8006138:	2300      	movne	r3, #0
 800613a:	b2db      	uxtb	r3, r3
 800613c:	e008      	b.n	8006150 <HAL_ADC_ConfigChannel+0x8e8>
 800613e:	4859      	ldr	r0, [pc, #356]	@ (80062a4 <HAL_ADC_ConfigChannel+0xa3c>)
 8006140:	f7fe fd76 	bl	8004c30 <LL_ADC_IsEnabled>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	bf0c      	ite	eq
 800614a:	2301      	moveq	r3, #1
 800614c:	2300      	movne	r3, #0
 800614e:	b2db      	uxtb	r3, r3
 8006150:	2b00      	cmp	r3, #0
 8006152:	f000 8084 	beq.w	800625e <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a53      	ldr	r2, [pc, #332]	@ (80062a8 <HAL_ADC_ConfigChannel+0xa40>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d132      	bne.n	80061c6 <HAL_ADC_ConfigChannel+0x95e>
 8006160:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006164:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d12c      	bne.n	80061c6 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a4c      	ldr	r2, [pc, #304]	@ (80062a4 <HAL_ADC_ConfigChannel+0xa3c>)
 8006172:	4293      	cmp	r3, r2
 8006174:	f040 8086 	bne.w	8006284 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a47      	ldr	r2, [pc, #284]	@ (800629c <HAL_ADC_ConfigChannel+0xa34>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d004      	beq.n	800618c <HAL_ADC_ConfigChannel+0x924>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a46      	ldr	r2, [pc, #280]	@ (80062a0 <HAL_ADC_ConfigChannel+0xa38>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d101      	bne.n	8006190 <HAL_ADC_ConfigChannel+0x928>
 800618c:	4a47      	ldr	r2, [pc, #284]	@ (80062ac <HAL_ADC_ConfigChannel+0xa44>)
 800618e:	e000      	b.n	8006192 <HAL_ADC_ConfigChannel+0x92a>
 8006190:	4a41      	ldr	r2, [pc, #260]	@ (8006298 <HAL_ADC_ConfigChannel+0xa30>)
 8006192:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006196:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800619a:	4619      	mov	r1, r3
 800619c:	4610      	mov	r0, r2
 800619e:	f7fe fa1c 	bl	80045da <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80061a2:	4b43      	ldr	r3, [pc, #268]	@ (80062b0 <HAL_ADC_ConfigChannel+0xa48>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	099b      	lsrs	r3, r3, #6
 80061a8:	4a42      	ldr	r2, [pc, #264]	@ (80062b4 <HAL_ADC_ConfigChannel+0xa4c>)
 80061aa:	fba2 2303 	umull	r2, r3, r2, r3
 80061ae:	099b      	lsrs	r3, r3, #6
 80061b0:	3301      	adds	r3, #1
 80061b2:	005b      	lsls	r3, r3, #1
 80061b4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80061b6:	e002      	b.n	80061be <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	3b01      	subs	r3, #1
 80061bc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d1f9      	bne.n	80061b8 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80061c4:	e05e      	b.n	8006284 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a3b      	ldr	r2, [pc, #236]	@ (80062b8 <HAL_ADC_ConfigChannel+0xa50>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d120      	bne.n	8006212 <HAL_ADC_ConfigChannel+0x9aa>
 80061d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80061d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d11a      	bne.n	8006212 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a30      	ldr	r2, [pc, #192]	@ (80062a4 <HAL_ADC_ConfigChannel+0xa3c>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d14e      	bne.n	8006284 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a2c      	ldr	r2, [pc, #176]	@ (800629c <HAL_ADC_ConfigChannel+0xa34>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d004      	beq.n	80061fa <HAL_ADC_ConfigChannel+0x992>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a2a      	ldr	r2, [pc, #168]	@ (80062a0 <HAL_ADC_ConfigChannel+0xa38>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d101      	bne.n	80061fe <HAL_ADC_ConfigChannel+0x996>
 80061fa:	4a2c      	ldr	r2, [pc, #176]	@ (80062ac <HAL_ADC_ConfigChannel+0xa44>)
 80061fc:	e000      	b.n	8006200 <HAL_ADC_ConfigChannel+0x998>
 80061fe:	4a26      	ldr	r2, [pc, #152]	@ (8006298 <HAL_ADC_ConfigChannel+0xa30>)
 8006200:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006204:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006208:	4619      	mov	r1, r3
 800620a:	4610      	mov	r0, r2
 800620c:	f7fe f9e5 	bl	80045da <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006210:	e038      	b.n	8006284 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a29      	ldr	r2, [pc, #164]	@ (80062bc <HAL_ADC_ConfigChannel+0xa54>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d133      	bne.n	8006284 <HAL_ADC_ConfigChannel+0xa1c>
 800621c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006220:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006224:	2b00      	cmp	r3, #0
 8006226:	d12d      	bne.n	8006284 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a1d      	ldr	r2, [pc, #116]	@ (80062a4 <HAL_ADC_ConfigChannel+0xa3c>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d128      	bne.n	8006284 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a19      	ldr	r2, [pc, #100]	@ (800629c <HAL_ADC_ConfigChannel+0xa34>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d004      	beq.n	8006246 <HAL_ADC_ConfigChannel+0x9de>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a17      	ldr	r2, [pc, #92]	@ (80062a0 <HAL_ADC_ConfigChannel+0xa38>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d101      	bne.n	800624a <HAL_ADC_ConfigChannel+0x9e2>
 8006246:	4a19      	ldr	r2, [pc, #100]	@ (80062ac <HAL_ADC_ConfigChannel+0xa44>)
 8006248:	e000      	b.n	800624c <HAL_ADC_ConfigChannel+0x9e4>
 800624a:	4a13      	ldr	r2, [pc, #76]	@ (8006298 <HAL_ADC_ConfigChannel+0xa30>)
 800624c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006250:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006254:	4619      	mov	r1, r3
 8006256:	4610      	mov	r0, r2
 8006258:	f7fe f9bf 	bl	80045da <LL_ADC_SetCommonPathInternalCh>
 800625c:	e012      	b.n	8006284 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006262:	f043 0220 	orr.w	r2, r3, #32
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8006270:	e008      	b.n	8006284 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006276:	f043 0220 	orr.w	r2, r3, #32
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800628c:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8006290:	4618      	mov	r0, r3
 8006292:	37e4      	adds	r7, #228	@ 0xe4
 8006294:	46bd      	mov	sp, r7
 8006296:	bd90      	pop	{r4, r7, pc}
 8006298:	58026300 	.word	0x58026300
 800629c:	40022000 	.word	0x40022000
 80062a0:	40022100 	.word	0x40022100
 80062a4:	58026000 	.word	0x58026000
 80062a8:	c7520000 	.word	0xc7520000
 80062ac:	40022300 	.word	0x40022300
 80062b0:	24000038 	.word	0x24000038
 80062b4:	053e2d63 	.word	0x053e2d63
 80062b8:	c3210000 	.word	0xc3210000
 80062bc:	cb840000 	.word	0xcb840000

080062c0 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b094      	sub	sp, #80	@ 0x50
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80062ca:	2300      	movs	r3, #0
 80062cc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));

  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80062d8:	d003      	beq.n	80062e2 <HAL_ADC_AnalogWDGConfig+0x22>
      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	685b      	ldr	r3, [r3, #4]
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80062de:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
  }

#if defined(ADC_VER_V5_V90)

  if (hadc->Instance == ADC3)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a8c      	ldr	r2, [pc, #560]	@ (8006518 <HAL_ADC_AnalogWDGConfig+0x258>)
 80062e8:	4293      	cmp	r3, r2
      assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
    }
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d101      	bne.n	80062f8 <HAL_ADC_AnalogWDGConfig+0x38>
 80062f4:	2302      	movs	r3, #2
 80062f6:	e36b      	b.n	80069d0 <HAL_ADC_AnalogWDGConfig+0x710>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  /*  - Analog watchdog thresholds                                            */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4618      	mov	r0, r3
 8006306:	f7fe fccd 	bl	8004ca4 <LL_ADC_REG_IsConversionOngoing>
 800630a:	6438      	str	r0, [r7, #64]	@ 0x40
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4618      	mov	r0, r3
 8006312:	f7fe fcda 	bl	8004cca <LL_ADC_INJ_IsConversionOngoing>
 8006316:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006318:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800631a:	2b00      	cmp	r3, #0
 800631c:	f040 8349 	bne.w	80069b2 <HAL_ADC_AnalogWDGConfig+0x6f2>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006320:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006322:	2b00      	cmp	r3, #0
 8006324:	f040 8345 	bne.w	80069b2 <HAL_ADC_AnalogWDGConfig+0x6f2>
     )
  {
    /* Analog watchdog configuration */
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a7b      	ldr	r2, [pc, #492]	@ (800651c <HAL_ADC_AnalogWDGConfig+0x25c>)
 800632e:	4293      	cmp	r3, r2
 8006330:	f040 8131 	bne.w	8006596 <HAL_ADC_AnalogWDGConfig+0x2d6>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (AnalogWDGConfig->WatchdogMode)
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 800633c:	d034      	beq.n	80063a8 <HAL_ADC_AnalogWDGConfig+0xe8>
 800633e:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 8006342:	d856      	bhi.n	80063f2 <HAL_ADC_AnalogWDGConfig+0x132>
 8006344:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006348:	d04b      	beq.n	80063e2 <HAL_ADC_AnalogWDGConfig+0x122>
 800634a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800634e:	d850      	bhi.n	80063f2 <HAL_ADC_AnalogWDGConfig+0x132>
 8006350:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006354:	d01b      	beq.n	800638e <HAL_ADC_AnalogWDGConfig+0xce>
 8006356:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800635a:	d84a      	bhi.n	80063f2 <HAL_ADC_AnalogWDGConfig+0x132>
 800635c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006360:	d037      	beq.n	80063d2 <HAL_ADC_AnalogWDGConfig+0x112>
 8006362:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006366:	d844      	bhi.n	80063f2 <HAL_ADC_AnalogWDGConfig+0x132>
 8006368:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800636c:	d029      	beq.n	80063c2 <HAL_ADC_AnalogWDGConfig+0x102>
 800636e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006372:	d13e      	bne.n	80063f2 <HAL_ADC_AnalogWDGConfig+0x132>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6818      	ldr	r0, [r3, #0]
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8006380:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 8006384:	461a      	mov	r2, r3
 8006386:	4965      	ldr	r1, [pc, #404]	@ (800651c <HAL_ADC_AnalogWDGConfig+0x25c>)
 8006388:	f7fe fb34 	bl	80049f4 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR));
          break;
 800638c:	e039      	b.n	8006402 <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6818      	ldr	r0, [r3, #0]
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 800639a:	f043 73a0 	orr.w	r3, r3, #20971520	@ 0x1400000
 800639e:	461a      	mov	r2, r3
 80063a0:	495e      	ldr	r1, [pc, #376]	@ (800651c <HAL_ADC_AnalogWDGConfig+0x25c>)
 80063a2:	f7fe fb27 	bl	80049f4 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_INJECTED));
          break;
 80063a6:	e02c      	b.n	8006402 <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6818      	ldr	r0, [r3, #0]
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 80063b4:	f043 73e0 	orr.w	r3, r3, #29360128	@ 0x1c00000
 80063b8:	461a      	mov	r2, r3
 80063ba:	4958      	ldr	r1, [pc, #352]	@ (800651c <HAL_ADC_AnalogWDGConfig+0x25c>)
 80063bc:	f7fe fb1a 	bl	80049f4 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 80063c0:	e01f      	b.n	8006402 <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a56      	ldr	r2, [pc, #344]	@ (8006520 <HAL_ADC_AnalogWDGConfig+0x260>)
 80063c8:	4954      	ldr	r1, [pc, #336]	@ (800651c <HAL_ADC_AnalogWDGConfig+0x25c>)
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7fe fb12 	bl	80049f4 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80063d0:	e017      	b.n	8006402 <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a53      	ldr	r2, [pc, #332]	@ (8006524 <HAL_ADC_AnalogWDGConfig+0x264>)
 80063d8:	4950      	ldr	r1, [pc, #320]	@ (800651c <HAL_ADC_AnalogWDGConfig+0x25c>)
 80063da:	4618      	mov	r0, r3
 80063dc:	f7fe fb0a 	bl	80049f4 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80063e0:	e00f      	b.n	8006402 <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a50      	ldr	r2, [pc, #320]	@ (8006528 <HAL_ADC_AnalogWDGConfig+0x268>)
 80063e8:	494c      	ldr	r1, [pc, #304]	@ (800651c <HAL_ADC_AnalogWDGConfig+0x25c>)
 80063ea:	4618      	mov	r0, r3
 80063ec:	f7fe fb02 	bl	80049f4 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80063f0:	e007      	b.n	8006402 <HAL_ADC_AnalogWDGConfig+0x142>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	2200      	movs	r2, #0
 80063f8:	4948      	ldr	r1, [pc, #288]	@ (800651c <HAL_ADC_AnalogWDGConfig+0x25c>)
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7fe fafa 	bl	80049f4 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006400:	bf00      	nop
      }

      /* Shift the offset in function of the selected ADC resolution:         */
      /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
      /* are set to 0                                                         */
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8006402:	4b4a      	ldr	r3, [pc, #296]	@ (800652c <HAL_ADC_AnalogWDGConfig+0x26c>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800640a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800640e:	d10b      	bne.n	8006428 <HAL_ADC_AnalogWDGConfig+0x168>
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	691a      	ldr	r2, [r3, #16]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	089b      	lsrs	r3, r3, #2
 800641c:	f003 0307 	and.w	r3, r3, #7
 8006420:	005b      	lsls	r3, r3, #1
 8006422:	fa02 f303 	lsl.w	r3, r2, r3
 8006426:	e01d      	b.n	8006464 <HAL_ADC_AnalogWDGConfig+0x1a4>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	f003 0310 	and.w	r3, r3, #16
 8006432:	2b00      	cmp	r3, #0
 8006434:	d10b      	bne.n	800644e <HAL_ADC_AnalogWDGConfig+0x18e>
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	691a      	ldr	r2, [r3, #16]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	089b      	lsrs	r3, r3, #2
 8006442:	f003 0307 	and.w	r3, r3, #7
 8006446:	005b      	lsls	r3, r3, #1
 8006448:	fa02 f303 	lsl.w	r3, r2, r3
 800644c:	e00a      	b.n	8006464 <HAL_ADC_AnalogWDGConfig+0x1a4>
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	691a      	ldr	r2, [r3, #16]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	089b      	lsrs	r3, r3, #2
 800645a:	f003 0304 	and.w	r3, r3, #4
 800645e:	005b      	lsls	r3, r3, #1
 8006460:	fa02 f303 	lsl.w	r3, r2, r3
 8006464:	64bb      	str	r3, [r7, #72]	@ 0x48
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8006466:	4b31      	ldr	r3, [pc, #196]	@ (800652c <HAL_ADC_AnalogWDGConfig+0x26c>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800646e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006472:	d10b      	bne.n	800648c <HAL_ADC_AnalogWDGConfig+0x1cc>
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	695a      	ldr	r2, [r3, #20]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	089b      	lsrs	r3, r3, #2
 8006480:	f003 0307 	and.w	r3, r3, #7
 8006484:	005b      	lsls	r3, r3, #1
 8006486:	fa02 f303 	lsl.w	r3, r2, r3
 800648a:	e01d      	b.n	80064c8 <HAL_ADC_AnalogWDGConfig+0x208>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	f003 0310 	and.w	r3, r3, #16
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10b      	bne.n	80064b2 <HAL_ADC_AnalogWDGConfig+0x1f2>
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	695a      	ldr	r2, [r3, #20]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	089b      	lsrs	r3, r3, #2
 80064a6:	f003 0307 	and.w	r3, r3, #7
 80064aa:	005b      	lsls	r3, r3, #1
 80064ac:	fa02 f303 	lsl.w	r3, r2, r3
 80064b0:	e00a      	b.n	80064c8 <HAL_ADC_AnalogWDGConfig+0x208>
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	695a      	ldr	r2, [r3, #20]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	089b      	lsrs	r3, r3, #2
 80064be:	f003 0304 	and.w	r3, r3, #4
 80064c2:	005b      	lsls	r3, r3, #1
 80064c4:	fa02 f303 	lsl.w	r3, r2, r3
 80064c8:	647b      	str	r3, [r7, #68]	@ 0x44

      /* Set the high and low thresholds */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a12      	ldr	r2, [pc, #72]	@ (8006518 <HAL_ADC_AnalogWDGConfig+0x258>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d131      	bne.n	8006538 <HAL_ADC_AnalogWDGConfig+0x278>
      {
        MODIFY_REG(hadc->Instance->LTR1_TR1,
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6a1b      	ldr	r3, [r3, #32]
 80064da:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	699a      	ldr	r2, [r3, #24]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	430a      	orrs	r2, r1
 80064e8:	621a      	str	r2, [r3, #32]
                   ADC3_TR1_AWDFILT,
                   AnalogWDGConfig->FilteringConfig);
        MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC3_TR1_LT1, tmpAWDLowThresholdShifted);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	6a1a      	ldr	r2, [r3, #32]
 80064f0:	4b0f      	ldr	r3, [pc, #60]	@ (8006530 <HAL_ADC_AnalogWDGConfig+0x270>)
 80064f2:	4013      	ands	r3, r2
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	6812      	ldr	r2, [r2, #0]
 80064f8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80064fa:	430b      	orrs	r3, r1
 80064fc:	6213      	str	r3, [r2, #32]
        MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC3_TR1_HT1, (tmpAWDHighThresholdShifted << ADC3_TR1_HT1_Pos));
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	6a1a      	ldr	r2, [r3, #32]
 8006504:	4b0b      	ldr	r3, [pc, #44]	@ (8006534 <HAL_ADC_AnalogWDGConfig+0x274>)
 8006506:	4013      	ands	r3, r2
 8006508:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800650a:	0411      	lsls	r1, r2, #16
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	6812      	ldr	r2, [r2, #0]
 8006510:	430b      	orrs	r3, r1
 8006512:	6213      	str	r3, [r2, #32]
 8006514:	e024      	b.n	8006560 <HAL_ADC_AnalogWDGConfig+0x2a0>
 8006516:	bf00      	nop
 8006518:	58026000 	.word	0x58026000
 800651c:	7dc00000 	.word	0x7dc00000
 8006520:	008fffff 	.word	0x008fffff
 8006524:	010fffff 	.word	0x010fffff
 8006528:	018fffff 	.word	0x018fffff
 800652c:	5c001000 	.word	0x5c001000
 8006530:	fffff000 	.word	0xfffff000
 8006534:	f000ffff 	.word	0xf000ffff
      }
      else
      {

        MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	6a1b      	ldr	r3, [r3, #32]
 800653e:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006548:	430a      	orrs	r2, r1
 800654a:	621a      	str	r2, [r3, #32]
        MODIFY_REG(hadc->Instance->HTR1_TR2,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006552:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800655c:	430a      	orrs	r2, r1
 800655e:	625a      	str	r2, [r3, #36]	@ 0x24
      MODIFY_REG(hadc->Instance->LTR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
      MODIFY_REG(hadc->Instance->HTR1,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
#endif

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006564:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4618      	mov	r0, r3
 8006572:	f7fe fbbd 	bl	8004cf0 <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (AnalogWDGConfig->ITMode == ENABLE)
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	7b1b      	ldrb	r3, [r3, #12]
 800657a:	2b01      	cmp	r3, #1
 800657c:	d105      	bne.n	800658a <HAL_ADC_AnalogWDGConfig+0x2ca>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4618      	mov	r0, r3
 8006584:	f7fe fbdd 	bl	8004d42 <LL_ADC_EnableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006588:	e21c      	b.n	80069c4 <HAL_ADC_AnalogWDGConfig+0x704>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4618      	mov	r0, r3
 8006590:	f7fe fc07 	bl	8004da2 <LL_ADC_DisableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006594:	e216      	b.n	80069c4 <HAL_ADC_AnalogWDGConfig+0x704>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (AnalogWDGConfig->WatchdogMode)
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 800659e:	d01f      	beq.n	80065e0 <HAL_ADC_AnalogWDGConfig+0x320>
 80065a0:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 80065a4:	f200 80f4 	bhi.w	8006790 <HAL_ADC_AnalogWDGConfig+0x4d0>
 80065a8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80065ac:	d07d      	beq.n	80066aa <HAL_ADC_AnalogWDGConfig+0x3ea>
 80065ae:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80065b2:	f200 80ed 	bhi.w	8006790 <HAL_ADC_AnalogWDGConfig+0x4d0>
 80065b6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80065ba:	d011      	beq.n	80065e0 <HAL_ADC_AnalogWDGConfig+0x320>
 80065bc:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80065c0:	f200 80e6 	bhi.w	8006790 <HAL_ADC_AnalogWDGConfig+0x4d0>
 80065c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80065c8:	d06f      	beq.n	80066aa <HAL_ADC_AnalogWDGConfig+0x3ea>
 80065ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80065ce:	f200 80df 	bhi.w	8006790 <HAL_ADC_AnalogWDGConfig+0x4d0>
 80065d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80065d6:	d068      	beq.n	80066aa <HAL_ADC_AnalogWDGConfig+0x3ea>
 80065d8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80065dc:	f040 80d8 	bne.w	8006790 <HAL_ADC_AnalogWDGConfig+0x4d0>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a9c      	ldr	r2, [pc, #624]	@ (8006858 <HAL_ADC_AnalogWDGConfig+0x598>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d12f      	bne.n	800664a <HAL_ADC_AnalogWDGConfig+0x38a>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d108      	bne.n	8006608 <HAL_ADC_AnalogWDGConfig+0x348>
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	0e9b      	lsrs	r3, r3, #26
 80065fc:	f003 031f 	and.w	r3, r3, #31
 8006600:	2201      	movs	r2, #1
 8006602:	fa02 f303 	lsl.w	r3, r2, r3
 8006606:	e016      	b.n	8006636 <HAL_ADC_AnalogWDGConfig+0x376>
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800660e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006610:	fa93 f3a3 	rbit	r3, r3
 8006614:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8006616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006618:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800661a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800661c:	2b00      	cmp	r3, #0
 800661e:	d101      	bne.n	8006624 <HAL_ADC_AnalogWDGConfig+0x364>
    return 32U;
 8006620:	2320      	movs	r3, #32
 8006622:	e003      	b.n	800662c <HAL_ADC_AnalogWDGConfig+0x36c>
  return __builtin_clz(value);
 8006624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006626:	fab3 f383 	clz	r3, r3
 800662a:	b2db      	uxtb	r3, r3
 800662c:	f003 031f 	and.w	r3, r3, #31
 8006630:	2201      	movs	r2, #1
 8006632:	fa02 f303 	lsl.w	r3, r2, r3
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	6812      	ldr	r2, [r2, #0]
 800663a:	f8d2 10a0 	ldr.w	r1, [r2, #160]	@ 0xa0
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	6812      	ldr	r2, [r2, #0]
 8006642:	430b      	orrs	r3, r1
 8006644:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 8006648:	e0ab      	b.n	80067a2 <HAL_ADC_AnalogWDGConfig+0x4e2>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006652:	2b00      	cmp	r3, #0
 8006654:	d108      	bne.n	8006668 <HAL_ADC_AnalogWDGConfig+0x3a8>
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	0e9b      	lsrs	r3, r3, #26
 800665c:	f003 031f 	and.w	r3, r3, #31
 8006660:	2201      	movs	r2, #1
 8006662:	fa02 f303 	lsl.w	r3, r2, r3
 8006666:	e016      	b.n	8006696 <HAL_ADC_AnalogWDGConfig+0x3d6>
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800666e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006670:	fa93 f3a3 	rbit	r3, r3
 8006674:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8006676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006678:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800667a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800667c:	2b00      	cmp	r3, #0
 800667e:	d101      	bne.n	8006684 <HAL_ADC_AnalogWDGConfig+0x3c4>
    return 32U;
 8006680:	2320      	movs	r3, #32
 8006682:	e003      	b.n	800668c <HAL_ADC_AnalogWDGConfig+0x3cc>
  return __builtin_clz(value);
 8006684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006686:	fab3 f383 	clz	r3, r3
 800668a:	b2db      	uxtb	r3, r3
 800668c:	f003 031f 	and.w	r3, r3, #31
 8006690:	2201      	movs	r2, #1
 8006692:	fa02 f303 	lsl.w	r3, r2, r3
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	6812      	ldr	r2, [r2, #0]
 800669a:	f8d2 10a4 	ldr.w	r1, [r2, #164]	@ 0xa4
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	6812      	ldr	r2, [r2, #0]
 80066a2:	430b      	orrs	r3, r1
 80066a4:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
          break;
 80066a8:	e07b      	b.n	80067a2 <HAL_ADC_AnalogWDGConfig+0x4e2>
        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:

#if defined(ADC_VER_V5_V90)
          if (hadc->Instance == ADC3)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a6b      	ldr	r2, [pc, #428]	@ (800685c <HAL_ADC_AnalogWDGConfig+0x59c>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d108      	bne.n	80066c6 <HAL_ADC_AnalogWDGConfig+0x406>
          {

            LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6818      	ldr	r0, [r3, #0]
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a68      	ldr	r2, [pc, #416]	@ (8006860 <HAL_ADC_AnalogWDGConfig+0x5a0>)
 80066be:	4619      	mov	r1, r3
 80066c0:	f7fe f998 	bl	80049f4 <LL_ADC_SetAnalogWDMonitChannels>
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
            }
#if defined(ADC_VER_V5_V90)
          }
#endif  /*ADC_VER_V5_V90*/
          break;
 80066c4:	e06d      	b.n	80067a2 <HAL_ADC_AnalogWDGConfig+0x4e2>
            if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a63      	ldr	r2, [pc, #396]	@ (8006858 <HAL_ADC_AnalogWDGConfig+0x598>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d12f      	bne.n	8006730 <HAL_ADC_AnalogWDGConfig+0x470>
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d108      	bne.n	80066ee <HAL_ADC_AnalogWDGConfig+0x42e>
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	0e9b      	lsrs	r3, r3, #26
 80066e2:	f003 031f 	and.w	r3, r3, #31
 80066e6:	2201      	movs	r2, #1
 80066e8:	fa02 f303 	lsl.w	r3, r2, r3
 80066ec:	e016      	b.n	800671c <HAL_ADC_AnalogWDGConfig+0x45c>
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	fa93 f3a3 	rbit	r3, r3
 80066fa:	61bb      	str	r3, [r7, #24]
  return result;
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006700:	6a3b      	ldr	r3, [r7, #32]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d101      	bne.n	800670a <HAL_ADC_AnalogWDGConfig+0x44a>
    return 32U;
 8006706:	2320      	movs	r3, #32
 8006708:	e003      	b.n	8006712 <HAL_ADC_AnalogWDGConfig+0x452>
  return __builtin_clz(value);
 800670a:	6a3b      	ldr	r3, [r7, #32]
 800670c:	fab3 f383 	clz	r3, r3
 8006710:	b2db      	uxtb	r3, r3
 8006712:	f003 031f 	and.w	r3, r3, #31
 8006716:	2201      	movs	r2, #1
 8006718:	fa02 f303 	lsl.w	r3, r2, r3
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	6812      	ldr	r2, [r2, #0]
 8006720:	f8d2 10a0 	ldr.w	r1, [r2, #160]	@ 0xa0
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	6812      	ldr	r2, [r2, #0]
 8006728:	430b      	orrs	r3, r1
 800672a:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
          break;
 800672e:	e038      	b.n	80067a2 <HAL_ADC_AnalogWDGConfig+0x4e2>
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006738:	2b00      	cmp	r3, #0
 800673a:	d108      	bne.n	800674e <HAL_ADC_AnalogWDGConfig+0x48e>
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	0e9b      	lsrs	r3, r3, #26
 8006742:	f003 031f 	and.w	r3, r3, #31
 8006746:	2201      	movs	r2, #1
 8006748:	fa02 f303 	lsl.w	r3, r2, r3
 800674c:	e016      	b.n	800677c <HAL_ADC_AnalogWDGConfig+0x4bc>
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	fa93 f3a3 	rbit	r3, r3
 800675a:	60fb      	str	r3, [r7, #12]
  return result;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d101      	bne.n	800676a <HAL_ADC_AnalogWDGConfig+0x4aa>
    return 32U;
 8006766:	2320      	movs	r3, #32
 8006768:	e003      	b.n	8006772 <HAL_ADC_AnalogWDGConfig+0x4b2>
  return __builtin_clz(value);
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	fab3 f383 	clz	r3, r3
 8006770:	b2db      	uxtb	r3, r3
 8006772:	f003 031f 	and.w	r3, r3, #31
 8006776:	2201      	movs	r2, #1
 8006778:	fa02 f303 	lsl.w	r3, r2, r3
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	6812      	ldr	r2, [r2, #0]
 8006780:	f8d2 10a4 	ldr.w	r1, [r2, #164]	@ 0xa4
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	6812      	ldr	r2, [r2, #0]
 8006788:	430b      	orrs	r3, r1
 800678a:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
          break;
 800678e:	e008      	b.n	80067a2 <HAL_ADC_AnalogWDGConfig+0x4e2>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6818      	ldr	r0, [r3, #0]
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2200      	movs	r2, #0
 800679a:	4619      	mov	r1, r3
 800679c:	f7fe f92a 	bl	80049f4 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80067a0:	bf00      	nop
      }

      /* Shift the thresholds in function of the selected ADC resolution      */
      /* have to be left-aligned on bit 15, the LSB (right bits) are set to 0 */
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	f003 0310 	and.w	r3, r3, #16
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d10b      	bne.n	80067c8 <HAL_ADC_AnalogWDGConfig+0x508>
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	691a      	ldr	r2, [r3, #16]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	089b      	lsrs	r3, r3, #2
 80067bc:	f003 0307 	and.w	r3, r3, #7
 80067c0:	005b      	lsls	r3, r3, #1
 80067c2:	fa02 f303 	lsl.w	r3, r2, r3
 80067c6:	e00a      	b.n	80067de <HAL_ADC_AnalogWDGConfig+0x51e>
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	691a      	ldr	r2, [r3, #16]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	089b      	lsrs	r3, r3, #2
 80067d4:	f003 0304 	and.w	r3, r3, #4
 80067d8:	005b      	lsls	r3, r3, #1
 80067da:	fa02 f303 	lsl.w	r3, r2, r3
 80067de:	64bb      	str	r3, [r7, #72]	@ 0x48
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	f003 0310 	and.w	r3, r3, #16
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d10b      	bne.n	8006806 <HAL_ADC_AnalogWDGConfig+0x546>
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	695a      	ldr	r2, [r3, #20]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	089b      	lsrs	r3, r3, #2
 80067fa:	f003 0307 	and.w	r3, r3, #7
 80067fe:	005b      	lsls	r3, r3, #1
 8006800:	fa02 f303 	lsl.w	r3, r2, r3
 8006804:	e00a      	b.n	800681c <HAL_ADC_AnalogWDGConfig+0x55c>
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	695a      	ldr	r2, [r3, #20]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	089b      	lsrs	r3, r3, #2
 8006812:	f003 0304 	and.w	r3, r3, #4
 8006816:	005b      	lsls	r3, r3, #1
 8006818:	fa02 f303 	lsl.w	r3, r2, r3
 800681c:	647b      	str	r3, [r7, #68]	@ 0x44

#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a0e      	ldr	r2, [pc, #56]	@ (800685c <HAL_ADC_AnalogWDGConfig+0x59c>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d153      	bne.n	80068d0 <HAL_ADC_AnalogWDGConfig+0x610>
      {

        /* Analog watchdog thresholds configuration */
        if (AnalogWDGConfig->WatchdogNumber != ADC_ANALOGWATCHDOG_1)
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a0d      	ldr	r2, [pc, #52]	@ (8006864 <HAL_ADC_AnalogWDGConfig+0x5a4>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d045      	beq.n	80068be <HAL_ADC_AnalogWDGConfig+0x5fe>
        {
          /* Shift the offset with respect to the selected ADC resolution:        */
          /* Thresholds have to be left-aligned on bit 7, the LSB (right bits)    */
          /* are set to 0.                                                        */
          tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	f003 0310 	and.w	r3, r3, #16
 800683c:	2b00      	cmp	r3, #0
 800683e:	d113      	bne.n	8006868 <HAL_ADC_AnalogWDGConfig+0x5a8>
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	691a      	ldr	r2, [r3, #16]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	089b      	lsrs	r3, r3, #2
 800684c:	f003 0307 	and.w	r3, r3, #7
 8006850:	005b      	lsls	r3, r3, #1
 8006852:	fa02 f303 	lsl.w	r3, r2, r3
 8006856:	e012      	b.n	800687e <HAL_ADC_AnalogWDGConfig+0x5be>
 8006858:	001fffff 	.word	0x001fffff
 800685c:	58026000 	.word	0x58026000
 8006860:	018fffff 	.word	0x018fffff
 8006864:	7dc00000 	.word	0x7dc00000
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	691a      	ldr	r2, [r3, #16]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	089b      	lsrs	r3, r3, #2
 8006874:	f003 0304 	and.w	r3, r3, #4
 8006878:	005b      	lsls	r3, r3, #1
 800687a:	fa02 f303 	lsl.w	r3, r2, r3
 800687e:	64bb      	str	r3, [r7, #72]	@ 0x48
          tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	f003 0310 	and.w	r3, r3, #16
 800688a:	2b00      	cmp	r3, #0
 800688c:	d10b      	bne.n	80068a6 <HAL_ADC_AnalogWDGConfig+0x5e6>
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	695a      	ldr	r2, [r3, #20]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	68db      	ldr	r3, [r3, #12]
 8006898:	089b      	lsrs	r3, r3, #2
 800689a:	f003 0307 	and.w	r3, r3, #7
 800689e:	005b      	lsls	r3, r3, #1
 80068a0:	fa02 f303 	lsl.w	r3, r2, r3
 80068a4:	e00a      	b.n	80068bc <HAL_ADC_AnalogWDGConfig+0x5fc>
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	695a      	ldr	r2, [r3, #20]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	089b      	lsrs	r3, r3, #2
 80068b2:	f003 0304 	and.w	r3, r3, #4
 80068b6:	005b      	lsls	r3, r3, #1
 80068b8:	fa02 f303 	lsl.w	r3, r2, r3
 80068bc:	647b      	str	r3, [r7, #68]	@ 0x44
        }

        /* Set ADC analog watchdog thresholds value of both thresholds high and low */
        LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted, tmpAWDLowThresholdShifted);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6818      	ldr	r0, [r3, #0]
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	6819      	ldr	r1, [r3, #0]
 80068c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068ca:	f7fe f8c1 	bl	8004a50 <LL_ADC_ConfigAnalogWDThresholds>
 80068ce:	e035      	b.n	800693c <HAL_ADC_AnalogWDGConfig+0x67c>

      }
      else
      {

        if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a40      	ldr	r2, [pc, #256]	@ (80069d8 <HAL_ADC_AnalogWDGConfig+0x718>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d118      	bne.n	800690c <HAL_ADC_AnalogWDGConfig+0x64c>
        {
          /* Set ADC analog watchdog thresholds value of both thresholds high and low */
          MODIFY_REG(hadc->Instance->LTR2_DIFSEL,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80068e2:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068ec:	430a      	orrs	r2, r1
 80068ee:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
          MODIFY_REG(hadc->Instance->HTR2_CALFACT,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80068fa:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006904:	430a      	orrs	r2, r1
 8006906:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
 800690a:	e017      	b.n	800693c <HAL_ADC_AnalogWDGConfig+0x67c>
        }
        else
        {
          /* Set ADC analog watchdog thresholds value of both thresholds high and low */
          MODIFY_REG(hadc->Instance->LTR3_RES10,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006914:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800691e:	430a      	orrs	r2, r1
 8006920:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
          MODIFY_REG(hadc->Instance->HTR3_RES11,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800692c:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006936:	430a      	orrs	r2, r1
 8006938:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        MODIFY_REG(hadc->Instance->LTR3,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
        MODIFY_REG(hadc->Instance->HTR3,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
      }

#endif
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a25      	ldr	r2, [pc, #148]	@ (80069d8 <HAL_ADC_AnalogWDGConfig+0x718>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d11a      	bne.n	800697c <HAL_ADC_AnalogWDGConfig+0x6bc>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800694a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4618      	mov	r0, r3
 8006958:	f7fe f9d7 	bl	8004d0a <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	7b1b      	ldrb	r3, [r3, #12]
 8006960:	2b01      	cmp	r3, #1
 8006962:	d105      	bne.n	8006970 <HAL_ADC_AnalogWDGConfig+0x6b0>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4618      	mov	r0, r3
 800696a:	f7fe f9fa 	bl	8004d62 <LL_ADC_EnableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800696e:	e029      	b.n	80069c4 <HAL_ADC_AnalogWDGConfig+0x704>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4618      	mov	r0, r3
 8006976:	f7fe fa24 	bl	8004dc2 <LL_ADC_DisableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800697a:	e023      	b.n	80069c4 <HAL_ADC_AnalogWDGConfig+0x704>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006980:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4618      	mov	r0, r3
 800698e:	f7fe f9ca 	bl	8004d26 <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	7b1b      	ldrb	r3, [r3, #12]
 8006996:	2b01      	cmp	r3, #1
 8006998:	d105      	bne.n	80069a6 <HAL_ADC_AnalogWDGConfig+0x6e6>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4618      	mov	r0, r3
 80069a0:	f7fe f9ef 	bl	8004d82 <LL_ADC_EnableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80069a4:	e00e      	b.n	80069c4 <HAL_ADC_AnalogWDGConfig+0x704>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7fe fa19 	bl	8004de2 <LL_ADC_DisableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80069b0:	e008      	b.n	80069c4 <HAL_ADC_AnalogWDGConfig+0x704>
  /* If a conversion is on going on ADC group regular or injected, no update  */
  /* could be done on neither of the AWD configuration structure parameters.  */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069b6:	f043 0220 	orr.w	r2, r3, #32
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80069cc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3750      	adds	r7, #80	@ 0x50
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	001fffff 	.word	0x001fffff

080069dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4618      	mov	r0, r3
 80069ea:	f7fe f921 	bl	8004c30 <LL_ADC_IsEnabled>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d16e      	bne.n	8006ad2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	689a      	ldr	r2, [r3, #8]
 80069fa:	4b38      	ldr	r3, [pc, #224]	@ (8006adc <ADC_Enable+0x100>)
 80069fc:	4013      	ands	r3, r2
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00d      	beq.n	8006a1e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a06:	f043 0210 	orr.w	r2, r3, #16
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a12:	f043 0201 	orr.w	r2, r3, #1
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e05a      	b.n	8006ad4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7fe f8dc 	bl	8004be0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006a28:	f7fd fd6a 	bl	8004500 <HAL_GetTick>
 8006a2c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a2b      	ldr	r2, [pc, #172]	@ (8006ae0 <ADC_Enable+0x104>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d004      	beq.n	8006a42 <ADC_Enable+0x66>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a29      	ldr	r2, [pc, #164]	@ (8006ae4 <ADC_Enable+0x108>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d101      	bne.n	8006a46 <ADC_Enable+0x6a>
 8006a42:	4b29      	ldr	r3, [pc, #164]	@ (8006ae8 <ADC_Enable+0x10c>)
 8006a44:	e000      	b.n	8006a48 <ADC_Enable+0x6c>
 8006a46:	4b29      	ldr	r3, [pc, #164]	@ (8006aec <ADC_Enable+0x110>)
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7fe f85f 	bl	8004b0c <LL_ADC_GetMultimode>
 8006a4e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a23      	ldr	r2, [pc, #140]	@ (8006ae4 <ADC_Enable+0x108>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d002      	beq.n	8006a60 <ADC_Enable+0x84>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	e000      	b.n	8006a62 <ADC_Enable+0x86>
 8006a60:	4b1f      	ldr	r3, [pc, #124]	@ (8006ae0 <ADC_Enable+0x104>)
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	6812      	ldr	r2, [r2, #0]
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d02c      	beq.n	8006ac4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d130      	bne.n	8006ad2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006a70:	e028      	b.n	8006ac4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4618      	mov	r0, r3
 8006a78:	f7fe f8da 	bl	8004c30 <LL_ADC_IsEnabled>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d104      	bne.n	8006a8c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4618      	mov	r0, r3
 8006a88:	f7fe f8aa 	bl	8004be0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006a8c:	f7fd fd38 	bl	8004500 <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d914      	bls.n	8006ac4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 0301 	and.w	r3, r3, #1
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d00d      	beq.n	8006ac4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006aac:	f043 0210 	orr.w	r2, r3, #16
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ab8:	f043 0201 	orr.w	r2, r3, #1
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e007      	b.n	8006ad4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 0301 	and.w	r3, r3, #1
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d1cf      	bne.n	8006a72 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	8000003f 	.word	0x8000003f
 8006ae0:	40022000 	.word	0x40022000
 8006ae4:	40022100 	.word	0x40022100
 8006ae8:	40022300 	.word	0x40022300
 8006aec:	58026300 	.word	0x58026300

08006af0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4618      	mov	r0, r3
 8006afe:	f7fe f8aa 	bl	8004c56 <LL_ADC_IsDisableOngoing>
 8006b02:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f7fe f891 	bl	8004c30 <LL_ADC_IsEnabled>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d047      	beq.n	8006ba4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d144      	bne.n	8006ba4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	f003 030d 	and.w	r3, r3, #13
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d10c      	bne.n	8006b42 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f7fe f86b 	bl	8004c08 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2203      	movs	r2, #3
 8006b38:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006b3a:	f7fd fce1 	bl	8004500 <HAL_GetTick>
 8006b3e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006b40:	e029      	b.n	8006b96 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b46:	f043 0210 	orr.w	r2, r3, #16
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b52:	f043 0201 	orr.w	r2, r3, #1
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e023      	b.n	8006ba6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006b5e:	f7fd fccf 	bl	8004500 <HAL_GetTick>
 8006b62:	4602      	mov	r2, r0
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	1ad3      	subs	r3, r2, r3
 8006b68:	2b02      	cmp	r3, #2
 8006b6a:	d914      	bls.n	8006b96 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	f003 0301 	and.w	r3, r3, #1
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00d      	beq.n	8006b96 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b7e:	f043 0210 	orr.w	r2, r3, #16
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b8a:	f043 0201 	orr.w	r2, r3, #1
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e007      	b.n	8006ba6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	f003 0301 	and.w	r3, r3, #1
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d1dc      	bne.n	8006b5e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3710      	adds	r7, #16
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b084      	sub	sp, #16
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bba:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bc0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d14b      	bne.n	8006c60 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bcc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 0308 	and.w	r3, r3, #8
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d021      	beq.n	8006c26 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7fd fe0a 	bl	8004800 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d032      	beq.n	8006c58 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d12b      	bne.n	8006c58 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c04:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d11f      	bne.n	8006c58 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c1c:	f043 0201 	orr.w	r2, r3, #1
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	661a      	str	r2, [r3, #96]	@ 0x60
 8006c24:	e018      	b.n	8006c58 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	f003 0303 	and.w	r3, r3, #3
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d111      	bne.n	8006c58 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c38:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d105      	bne.n	8006c58 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c50:	f043 0201 	orr.w	r2, r3, #1
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006c58:	68f8      	ldr	r0, [r7, #12]
 8006c5a:	f7fb f857 	bl	8001d0c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006c5e:	e00e      	b.n	8006c7e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c64:	f003 0310 	and.w	r3, r3, #16
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d003      	beq.n	8006c74 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	f7fb f821 	bl	8001cb4 <HAL_ADC_ErrorCallback>
}
 8006c72:	e004      	b.n	8006c7e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	4798      	blx	r3
}
 8006c7e:	bf00      	nop
 8006c80:	3710      	adds	r7, #16
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}

08006c86 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b084      	sub	sp, #16
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c92:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006c94:	68f8      	ldr	r0, [r7, #12]
 8006c96:	f7fe fdd3 	bl	8005840 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006c9a:	bf00      	nop
 8006c9c:	3710      	adds	r7, #16
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b084      	sub	sp, #16
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cae:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cb4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006cc0:	f043 0204 	orr.w	r2, r3, #4
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f7fa fff3 	bl	8001cb4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006cce:	bf00      	nop
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
	...

08006cd8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a6c      	ldr	r2, [pc, #432]	@ (8006e98 <ADC_ConfigureBoostMode+0x1c0>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d004      	beq.n	8006cf4 <ADC_ConfigureBoostMode+0x1c>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a6b      	ldr	r2, [pc, #428]	@ (8006e9c <ADC_ConfigureBoostMode+0x1c4>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d109      	bne.n	8006d08 <ADC_ConfigureBoostMode+0x30>
 8006cf4:	4b6a      	ldr	r3, [pc, #424]	@ (8006ea0 <ADC_ConfigureBoostMode+0x1c8>)
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	bf14      	ite	ne
 8006d00:	2301      	movne	r3, #1
 8006d02:	2300      	moveq	r3, #0
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	e008      	b.n	8006d1a <ADC_ConfigureBoostMode+0x42>
 8006d08:	4b66      	ldr	r3, [pc, #408]	@ (8006ea4 <ADC_ConfigureBoostMode+0x1cc>)
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	bf14      	ite	ne
 8006d14:	2301      	movne	r3, #1
 8006d16:	2300      	moveq	r3, #0
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d01c      	beq.n	8006d58 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8006d1e:	f004 fda9 	bl	800b874 <HAL_RCC_GetHCLKFreq>
 8006d22:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006d2c:	d010      	beq.n	8006d50 <ADC_ConfigureBoostMode+0x78>
 8006d2e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006d32:	d873      	bhi.n	8006e1c <ADC_ConfigureBoostMode+0x144>
 8006d34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d38:	d002      	beq.n	8006d40 <ADC_ConfigureBoostMode+0x68>
 8006d3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006d3e:	d16d      	bne.n	8006e1c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	0c1b      	lsrs	r3, r3, #16
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d4c:	60fb      	str	r3, [r7, #12]
        break;
 8006d4e:	e068      	b.n	8006e22 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	089b      	lsrs	r3, r3, #2
 8006d54:	60fb      	str	r3, [r7, #12]
        break;
 8006d56:	e064      	b.n	8006e22 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006d58:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8006d5c:	f04f 0100 	mov.w	r1, #0
 8006d60:	f005 ff84 	bl	800cc6c <HAL_RCCEx_GetPeriphCLKFreq>
 8006d64:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8006d6e:	d051      	beq.n	8006e14 <ADC_ConfigureBoostMode+0x13c>
 8006d70:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8006d74:	d854      	bhi.n	8006e20 <ADC_ConfigureBoostMode+0x148>
 8006d76:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8006d7a:	d047      	beq.n	8006e0c <ADC_ConfigureBoostMode+0x134>
 8006d7c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8006d80:	d84e      	bhi.n	8006e20 <ADC_ConfigureBoostMode+0x148>
 8006d82:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8006d86:	d03d      	beq.n	8006e04 <ADC_ConfigureBoostMode+0x12c>
 8006d88:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8006d8c:	d848      	bhi.n	8006e20 <ADC_ConfigureBoostMode+0x148>
 8006d8e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d92:	d033      	beq.n	8006dfc <ADC_ConfigureBoostMode+0x124>
 8006d94:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d98:	d842      	bhi.n	8006e20 <ADC_ConfigureBoostMode+0x148>
 8006d9a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8006d9e:	d029      	beq.n	8006df4 <ADC_ConfigureBoostMode+0x11c>
 8006da0:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8006da4:	d83c      	bhi.n	8006e20 <ADC_ConfigureBoostMode+0x148>
 8006da6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006daa:	d01a      	beq.n	8006de2 <ADC_ConfigureBoostMode+0x10a>
 8006dac:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006db0:	d836      	bhi.n	8006e20 <ADC_ConfigureBoostMode+0x148>
 8006db2:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006db6:	d014      	beq.n	8006de2 <ADC_ConfigureBoostMode+0x10a>
 8006db8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006dbc:	d830      	bhi.n	8006e20 <ADC_ConfigureBoostMode+0x148>
 8006dbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006dc2:	d00e      	beq.n	8006de2 <ADC_ConfigureBoostMode+0x10a>
 8006dc4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006dc8:	d82a      	bhi.n	8006e20 <ADC_ConfigureBoostMode+0x148>
 8006dca:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006dce:	d008      	beq.n	8006de2 <ADC_ConfigureBoostMode+0x10a>
 8006dd0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006dd4:	d824      	bhi.n	8006e20 <ADC_ConfigureBoostMode+0x148>
 8006dd6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006dda:	d002      	beq.n	8006de2 <ADC_ConfigureBoostMode+0x10a>
 8006ddc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006de0:	d11e      	bne.n	8006e20 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	0c9b      	lsrs	r3, r3, #18
 8006de8:	005b      	lsls	r3, r3, #1
 8006dea:	68fa      	ldr	r2, [r7, #12]
 8006dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8006df0:	60fb      	str	r3, [r7, #12]
        break;
 8006df2:	e016      	b.n	8006e22 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	091b      	lsrs	r3, r3, #4
 8006df8:	60fb      	str	r3, [r7, #12]
        break;
 8006dfa:	e012      	b.n	8006e22 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	095b      	lsrs	r3, r3, #5
 8006e00:	60fb      	str	r3, [r7, #12]
        break;
 8006e02:	e00e      	b.n	8006e22 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	099b      	lsrs	r3, r3, #6
 8006e08:	60fb      	str	r3, [r7, #12]
        break;
 8006e0a:	e00a      	b.n	8006e22 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	09db      	lsrs	r3, r3, #7
 8006e10:	60fb      	str	r3, [r7, #12]
        break;
 8006e12:	e006      	b.n	8006e22 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	0a1b      	lsrs	r3, r3, #8
 8006e18:	60fb      	str	r3, [r7, #12]
        break;
 8006e1a:	e002      	b.n	8006e22 <ADC_ConfigureBoostMode+0x14a>
        break;
 8006e1c:	bf00      	nop
 8006e1e:	e000      	b.n	8006e22 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8006e20:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	085b      	lsrs	r3, r3, #1
 8006e26:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	4a1f      	ldr	r2, [pc, #124]	@ (8006ea8 <ADC_ConfigureBoostMode+0x1d0>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d808      	bhi.n	8006e42 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	689a      	ldr	r2, [r3, #8]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006e3e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006e40:	e025      	b.n	8006e8e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	4a19      	ldr	r2, [pc, #100]	@ (8006eac <ADC_ConfigureBoostMode+0x1d4>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d80a      	bhi.n	8006e60 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e5c:	609a      	str	r2, [r3, #8]
}
 8006e5e:	e016      	b.n	8006e8e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	4a13      	ldr	r2, [pc, #76]	@ (8006eb0 <ADC_ConfigureBoostMode+0x1d8>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d80a      	bhi.n	8006e7e <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e7a:	609a      	str	r2, [r3, #8]
}
 8006e7c:	e007      	b.n	8006e8e <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	689a      	ldr	r2, [r3, #8]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8006e8c:	609a      	str	r2, [r3, #8]
}
 8006e8e:	bf00      	nop
 8006e90:	3710      	adds	r7, #16
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	40022000 	.word	0x40022000
 8006e9c:	40022100 	.word	0x40022100
 8006ea0:	40022300 	.word	0x40022300
 8006ea4:	58026300 	.word	0x58026300
 8006ea8:	005f5e10 	.word	0x005f5e10
 8006eac:	00bebc20 	.word	0x00bebc20
 8006eb0:	017d7840 	.word	0x017d7840

08006eb4 <LL_ADC_IsEnabled>:
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	f003 0301 	and.w	r3, r3, #1
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d101      	bne.n	8006ecc <LL_ADC_IsEnabled+0x18>
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e000      	b.n	8006ece <LL_ADC_IsEnabled+0x1a>
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	370c      	adds	r7, #12
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr
	...

08006edc <LL_ADC_StartCalibration>:
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	689a      	ldr	r2, [r3, #8]
 8006eec:	4b09      	ldr	r3, [pc, #36]	@ (8006f14 <LL_ADC_StartCalibration+0x38>)
 8006eee:	4013      	ands	r3, r2
 8006ef0:	68ba      	ldr	r2, [r7, #8]
 8006ef2:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006efc:	430a      	orrs	r2, r1
 8006efe:	4313      	orrs	r3, r2
 8006f00:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	609a      	str	r2, [r3, #8]
}
 8006f08:	bf00      	nop
 8006f0a:	3714      	adds	r7, #20
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr
 8006f14:	3ffeffc0 	.word	0x3ffeffc0

08006f18 <LL_ADC_IsCalibrationOnGoing>:
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006f28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006f2c:	d101      	bne.n	8006f32 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e000      	b.n	8006f34 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <LL_ADC_REG_StartConversion>:
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	689a      	ldr	r2, [r3, #8]
 8006f4c:	4b05      	ldr	r3, [pc, #20]	@ (8006f64 <LL_ADC_REG_StartConversion+0x24>)
 8006f4e:	4013      	ands	r3, r2
 8006f50:	f043 0204 	orr.w	r2, r3, #4
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	609a      	str	r2, [r3, #8]
}
 8006f58:	bf00      	nop
 8006f5a:	370c      	adds	r7, #12
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr
 8006f64:	7fffffc0 	.word	0x7fffffc0

08006f68 <LL_ADC_REG_IsConversionOngoing>:
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	f003 0304 	and.w	r3, r3, #4
 8006f78:	2b04      	cmp	r3, #4
 8006f7a:	d101      	bne.n	8006f80 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e000      	b.n	8006f82 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	370c      	adds	r7, #12
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
	...

08006f90 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b086      	sub	sp, #24
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	60b9      	str	r1, [r7, #8]
 8006f9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d101      	bne.n	8006fae <HAL_ADCEx_Calibration_Start+0x1e>
 8006faa:	2302      	movs	r3, #2
 8006fac:	e04c      	b.n	8007048 <HAL_ADCEx_Calibration_Start+0xb8>
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006fb6:	68f8      	ldr	r0, [r7, #12]
 8006fb8:	f7ff fd9a 	bl	8006af0 <ADC_Disable>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006fc0:	7dfb      	ldrb	r3, [r7, #23]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d135      	bne.n	8007032 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006fca:	4b21      	ldr	r3, [pc, #132]	@ (8007050 <HAL_ADCEx_Calibration_Start+0xc0>)
 8006fcc:	4013      	ands	r3, r2
 8006fce:	f043 0202 	orr.w	r2, r3, #2
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	661a      	str	r2, [r3, #96]	@ 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	68b9      	ldr	r1, [r7, #8]
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f7ff ff7c 	bl	8006edc <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006fe4:	e014      	b.n	8007010 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	4a19      	ldr	r2, [pc, #100]	@ (8007054 <HAL_ADCEx_Calibration_Start+0xc4>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d30d      	bcc.n	8007010 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ff8:	f023 0312 	bic.w	r3, r3, #18
 8006ffc:	f043 0210 	orr.w	r2, r3, #16
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2200      	movs	r2, #0
 8007008:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	e01b      	b.n	8007048 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4618      	mov	r0, r3
 8007016:	f7ff ff7f 	bl	8006f18 <LL_ADC_IsCalibrationOnGoing>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d1e2      	bne.n	8006fe6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007024:	f023 0303 	bic.w	r3, r3, #3
 8007028:	f043 0201 	orr.w	r2, r3, #1
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	661a      	str	r2, [r3, #96]	@ 0x60
 8007030:	e005      	b.n	800703e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007036:	f043 0210 	orr.w	r2, r3, #16
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2200      	movs	r2, #0
 8007042:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8007046:	7dfb      	ldrb	r3, [r7, #23]
}
 8007048:	4618      	mov	r0, r3
 800704a:	3718      	adds	r7, #24
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}
 8007050:	ffffeefd 	.word	0xffffeefd
 8007054:	25c3f800 	.word	0x25c3f800

08007058 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b0a2      	sub	sp, #136	@ 0x88
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4618      	mov	r0, r3
 800706a:	f7ff ff7d 	bl	8006f68 <LL_ADC_REG_IsConversionOngoing>
 800706e:	4603      	mov	r3, r0
 8007070:	2b00      	cmp	r3, #0
 8007072:	d001      	beq.n	8007078 <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 8007074:	2302      	movs	r3, #2
 8007076:	e08c      	b.n	8007192 <HAL_ADCEx_MultiModeStart_DMA+0x13a>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800707e:	2b01      	cmp	r3, #1
 8007080:	d101      	bne.n	8007086 <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 8007082:	2302      	movs	r3, #2
 8007084:	e085      	b.n	8007192 <HAL_ADCEx_MultiModeStart_DMA+0x13a>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2201      	movs	r2, #1
 800708a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800708e:	2300      	movs	r3, #0
 8007090:	673b      	str	r3, [r7, #112]	@ 0x70
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8007092:	2300      	movs	r3, #0
 8007094:	677b      	str	r3, [r7, #116]	@ 0x74
    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a40      	ldr	r2, [pc, #256]	@ (800719c <HAL_ADCEx_MultiModeStart_DMA+0x144>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d102      	bne.n	80070a6 <HAL_ADCEx_MultiModeStart_DMA+0x4e>
 80070a0:	4b3f      	ldr	r3, [pc, #252]	@ (80071a0 <HAL_ADCEx_MultiModeStart_DMA+0x148>)
 80070a2:	613b      	str	r3, [r7, #16]
 80070a4:	e001      	b.n	80070aa <HAL_ADCEx_MultiModeStart_DMA+0x52>
 80070a6:	2300      	movs	r3, #0
 80070a8:	613b      	str	r3, [r7, #16]

    if (tmphadcSlave.Instance == NULL)
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d10b      	bne.n	80070c8 <HAL_ADCEx_MultiModeStart_DMA+0x70>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070b4:	f043 0220 	orr.w	r2, r3, #32
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2200      	movs	r2, #0
 80070c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	e064      	b.n	8007192 <HAL_ADCEx_MultiModeStart_DMA+0x13a>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 80070c8:	68f8      	ldr	r0, [r7, #12]
 80070ca:	f7ff fc87 	bl	80069dc <ADC_Enable>
 80070ce:	4603      	mov	r3, r0
 80070d0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    if (tmp_hal_status == HAL_OK)
 80070d4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d107      	bne.n	80070ec <HAL_ADCEx_MultiModeStart_DMA+0x94>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 80070dc:	f107 0310 	add.w	r3, r7, #16
 80070e0:	4618      	mov	r0, r3
 80070e2:	f7ff fc7b 	bl	80069dc <ADC_Enable>
 80070e6:	4603      	mov	r3, r0
 80070e8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 80070ec:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d148      	bne.n	8007186 <HAL_ADCEx_MultiModeStart_DMA+0x12e>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80070f8:	4b2a      	ldr	r3, [pc, #168]	@ (80071a4 <HAL_ADCEx_MultiModeStart_DMA+0x14c>)
 80070fa:	4013      	ands	r3, r2
 80070fc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	661a      	str	r2, [r3, #96]	@ 0x60
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2200      	movs	r2, #0
 8007108:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800710e:	4a26      	ldr	r2, [pc, #152]	@ (80071a8 <HAL_ADCEx_MultiModeStart_DMA+0x150>)
 8007110:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007116:	4a25      	ldr	r2, [pc, #148]	@ (80071ac <HAL_ADCEx_MultiModeStart_DMA+0x154>)
 8007118:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800711e:	4a24      	ldr	r2, [pc, #144]	@ (80071b0 <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 8007120:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a1d      	ldr	r2, [pc, #116]	@ (800719c <HAL_ADCEx_MultiModeStart_DMA+0x144>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d004      	beq.n	8007136 <HAL_ADCEx_MultiModeStart_DMA+0xde>
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a1b      	ldr	r2, [pc, #108]	@ (80071a0 <HAL_ADCEx_MultiModeStart_DMA+0x148>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d101      	bne.n	800713a <HAL_ADCEx_MultiModeStart_DMA+0xe2>
 8007136:	4b1f      	ldr	r3, [pc, #124]	@ (80071b4 <HAL_ADCEx_MultiModeStart_DMA+0x15c>)
 8007138:	e000      	b.n	800713c <HAL_ADCEx_MultiModeStart_DMA+0xe4>
 800713a:	4b1f      	ldr	r3, [pc, #124]	@ (80071b8 <HAL_ADCEx_MultiModeStart_DMA+0x160>)
 800713c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	221c      	movs	r2, #28
 8007146:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2200      	movs	r2, #0
 800714c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	685a      	ldr	r2, [r3, #4]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f042 0210 	orr.w	r2, r2, #16
 800715e:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8007164:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007168:	330c      	adds	r3, #12
 800716a:	4619      	mov	r1, r3
 800716c:	68ba      	ldr	r2, [r7, #8]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f000 feca 	bl	8007f08 <HAL_DMA_Start_IT>
 8007174:	4603      	mov	r3, r0
 8007176:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4618      	mov	r0, r3
 8007180:	f7ff fede 	bl	8006f40 <LL_ADC_REG_StartConversion>
 8007184:	e003      	b.n	800718e <HAL_ADCEx_MultiModeStart_DMA+0x136>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2200      	movs	r2, #0
 800718a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    }

    /* Return function status */
    return tmp_hal_status;
 800718e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
  }
}
 8007192:	4618      	mov	r0, r3
 8007194:	3788      	adds	r7, #136	@ 0x88
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	40022000 	.word	0x40022000
 80071a0:	40022100 	.word	0x40022100
 80071a4:	fffff0fe 	.word	0xfffff0fe
 80071a8:	08006baf 	.word	0x08006baf
 80071ac:	08006c87 	.word	0x08006c87
 80071b0:	08006ca3 	.word	0x08006ca3
 80071b4:	40022300 	.word	0x40022300
 80071b8:	58026300 	.word	0x58026300

080071bc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80071c4:	bf00      	nop
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80071d8:	bf00      	nop
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80071ec:	bf00      	nop
 80071ee:	370c      	adds	r7, #12
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8007200:	bf00      	nop
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8007214:	bf00      	nop
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8007220:	b590      	push	{r4, r7, lr}
 8007222:	b0a3      	sub	sp, #140	@ 0x8c
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800722a:	2300      	movs	r3, #0
 800722c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007236:	2b01      	cmp	r3, #1
 8007238:	d101      	bne.n	800723e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800723a:	2302      	movs	r3, #2
 800723c:	e0c1      	b.n	80073c2 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2201      	movs	r2, #1
 8007242:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8007246:	2300      	movs	r3, #0
 8007248:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800724a:	2300      	movs	r3, #0
 800724c:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a5e      	ldr	r2, [pc, #376]	@ (80073cc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d102      	bne.n	800725e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007258:	4b5d      	ldr	r3, [pc, #372]	@ (80073d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800725a:	60fb      	str	r3, [r7, #12]
 800725c:	e001      	b.n	8007262 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800725e:	2300      	movs	r3, #0
 8007260:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d10b      	bne.n	8007280 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800726c:	f043 0220 	orr.w	r2, r3, #32
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	e0a0      	b.n	80073c2 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	4618      	mov	r0, r3
 8007284:	f7ff fe70 	bl	8006f68 <LL_ADC_REG_IsConversionOngoing>
 8007288:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4618      	mov	r0, r3
 8007292:	f7ff fe69 	bl	8006f68 <LL_ADC_REG_IsConversionOngoing>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	f040 8081 	bne.w	80073a0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800729e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d17c      	bne.n	80073a0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a48      	ldr	r2, [pc, #288]	@ (80073cc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d004      	beq.n	80072ba <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a46      	ldr	r2, [pc, #280]	@ (80073d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d101      	bne.n	80072be <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80072ba:	4b46      	ldr	r3, [pc, #280]	@ (80073d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80072bc:	e000      	b.n	80072c0 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80072be:	4b46      	ldr	r3, [pc, #280]	@ (80073d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80072c0:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d039      	beq.n	800733e <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80072ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	431a      	orrs	r2, r3
 80072d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80072da:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a3a      	ldr	r2, [pc, #232]	@ (80073cc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d004      	beq.n	80072f0 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a39      	ldr	r2, [pc, #228]	@ (80073d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d10e      	bne.n	800730e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80072f0:	4836      	ldr	r0, [pc, #216]	@ (80073cc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80072f2:	f7ff fddf 	bl	8006eb4 <LL_ADC_IsEnabled>
 80072f6:	4604      	mov	r4, r0
 80072f8:	4835      	ldr	r0, [pc, #212]	@ (80073d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80072fa:	f7ff fddb 	bl	8006eb4 <LL_ADC_IsEnabled>
 80072fe:	4603      	mov	r3, r0
 8007300:	4323      	orrs	r3, r4
 8007302:	2b00      	cmp	r3, #0
 8007304:	bf0c      	ite	eq
 8007306:	2301      	moveq	r3, #1
 8007308:	2300      	movne	r3, #0
 800730a:	b2db      	uxtb	r3, r3
 800730c:	e008      	b.n	8007320 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800730e:	4833      	ldr	r0, [pc, #204]	@ (80073dc <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8007310:	f7ff fdd0 	bl	8006eb4 <LL_ADC_IsEnabled>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	bf0c      	ite	eq
 800731a:	2301      	moveq	r3, #1
 800731c:	2300      	movne	r3, #0
 800731e:	b2db      	uxtb	r3, r3
 8007320:	2b00      	cmp	r3, #0
 8007322:	d047      	beq.n	80073b4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007324:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007326:	689a      	ldr	r2, [r3, #8]
 8007328:	4b2d      	ldr	r3, [pc, #180]	@ (80073e0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800732a:	4013      	ands	r3, r2
 800732c:	683a      	ldr	r2, [r7, #0]
 800732e:	6811      	ldr	r1, [r2, #0]
 8007330:	683a      	ldr	r2, [r7, #0]
 8007332:	6892      	ldr	r2, [r2, #8]
 8007334:	430a      	orrs	r2, r1
 8007336:	431a      	orrs	r2, r3
 8007338:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800733a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800733c:	e03a      	b.n	80073b4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800733e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007346:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007348:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a1f      	ldr	r2, [pc, #124]	@ (80073cc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d004      	beq.n	800735e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a1d      	ldr	r2, [pc, #116]	@ (80073d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d10e      	bne.n	800737c <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800735e:	481b      	ldr	r0, [pc, #108]	@ (80073cc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007360:	f7ff fda8 	bl	8006eb4 <LL_ADC_IsEnabled>
 8007364:	4604      	mov	r4, r0
 8007366:	481a      	ldr	r0, [pc, #104]	@ (80073d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007368:	f7ff fda4 	bl	8006eb4 <LL_ADC_IsEnabled>
 800736c:	4603      	mov	r3, r0
 800736e:	4323      	orrs	r3, r4
 8007370:	2b00      	cmp	r3, #0
 8007372:	bf0c      	ite	eq
 8007374:	2301      	moveq	r3, #1
 8007376:	2300      	movne	r3, #0
 8007378:	b2db      	uxtb	r3, r3
 800737a:	e008      	b.n	800738e <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 800737c:	4817      	ldr	r0, [pc, #92]	@ (80073dc <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800737e:	f7ff fd99 	bl	8006eb4 <LL_ADC_IsEnabled>
 8007382:	4603      	mov	r3, r0
 8007384:	2b00      	cmp	r3, #0
 8007386:	bf0c      	ite	eq
 8007388:	2301      	moveq	r3, #1
 800738a:	2300      	movne	r3, #0
 800738c:	b2db      	uxtb	r3, r3
 800738e:	2b00      	cmp	r3, #0
 8007390:	d010      	beq.n	80073b4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007392:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007394:	689a      	ldr	r2, [r3, #8]
 8007396:	4b12      	ldr	r3, [pc, #72]	@ (80073e0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8007398:	4013      	ands	r3, r2
 800739a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800739c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800739e:	e009      	b.n	80073b4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073a4:	f043 0220 	orr.w	r2, r3, #32
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 80073b2:	e000      	b.n	80073b6 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80073b4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80073be:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	378c      	adds	r7, #140	@ 0x8c
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd90      	pop	{r4, r7, pc}
 80073ca:	bf00      	nop
 80073cc:	40022000 	.word	0x40022000
 80073d0:	40022100 	.word	0x40022100
 80073d4:	40022300 	.word	0x40022300
 80073d8:	58026300 	.word	0x58026300
 80073dc:	58026000 	.word	0x58026000
 80073e0:	fffff0e0 	.word	0xfffff0e0

080073e4 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b088      	sub	sp, #32
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80073ec:	2300      	movs	r3, #0
 80073ee:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 80073f0:	2300      	movs	r3, #0
 80073f2:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d102      	bne.n	8007400 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	77fb      	strb	r3, [r7, #31]
 80073fe:	e10e      	b.n	800761e <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800740a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800740e:	d102      	bne.n	8007416 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	77fb      	strb	r3, [r7, #31]
 8007414:	e103      	b.n	800761e <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800741c:	b2db      	uxtb	r3, r3
 800741e:	2b00      	cmp	r3, #0
 8007420:	d109      	bne.n	8007436 <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f7fc fab9 	bl	80039a8 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 0304 	and.w	r3, r3, #4
 8007440:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 800744a:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 8007450:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 8007456:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 800745c:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8007462:	4313      	orrs	r3, r2
 8007464:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	4b6e      	ldr	r3, [pc, #440]	@ (8007628 <HAL_COMP_Init+0x244>)
 800746e:	4013      	ands	r3, r2
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	6812      	ldr	r2, [r2, #0]
 8007474:	6979      	ldr	r1, [r7, #20]
 8007476:	430b      	orrs	r3, r1
 8007478:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	2b10      	cmp	r3, #16
 8007480:	d108      	bne.n	8007494 <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f042 0210 	orr.w	r2, r2, #16
 8007490:	601a      	str	r2, [r3, #0]
 8007492:	e007      	b.n	80074a4 <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f022 0210 	bic.w	r2, r2, #16
 80074a2:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f003 0304 	and.w	r3, r3, #4
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d016      	beq.n	80074e0 <HAL_COMP_Init+0xfc>
 80074b2:	69bb      	ldr	r3, [r7, #24]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d013      	beq.n	80074e0 <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80074b8:	4b5c      	ldr	r3, [pc, #368]	@ (800762c <HAL_COMP_Init+0x248>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	099b      	lsrs	r3, r3, #6
 80074be:	4a5c      	ldr	r2, [pc, #368]	@ (8007630 <HAL_COMP_Init+0x24c>)
 80074c0:	fba2 2303 	umull	r2, r3, r2, r3
 80074c4:	099b      	lsrs	r3, r3, #6
 80074c6:	1c5a      	adds	r2, r3, #1
 80074c8:	4613      	mov	r3, r2
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	4413      	add	r3, r2
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 80074d2:	e002      	b.n	80074da <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	3b01      	subs	r3, #1
 80074d8:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d1f9      	bne.n	80074d4 <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a53      	ldr	r2, [pc, #332]	@ (8007634 <HAL_COMP_Init+0x250>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d102      	bne.n	80074f0 <HAL_COMP_Init+0x10c>
 80074ea:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80074ee:	e001      	b.n	80074f4 <HAL_COMP_Init+0x110>
 80074f0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80074f4:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a1b      	ldr	r3, [r3, #32]
 80074fa:	f003 0303 	and.w	r3, r3, #3
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d06d      	beq.n	80075de <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6a1b      	ldr	r3, [r3, #32]
 8007506:	f003 0310 	and.w	r3, r3, #16
 800750a:	2b00      	cmp	r3, #0
 800750c:	d008      	beq.n	8007520 <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 800750e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	4313      	orrs	r3, r2
 800751c:	600b      	str	r3, [r1, #0]
 800751e:	e008      	b.n	8007532 <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 8007520:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	43db      	mvns	r3, r3
 800752a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800752e:	4013      	ands	r3, r2
 8007530:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a1b      	ldr	r3, [r3, #32]
 8007536:	f003 0320 	and.w	r3, r3, #32
 800753a:	2b00      	cmp	r3, #0
 800753c:	d008      	beq.n	8007550 <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 800753e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007542:	685a      	ldr	r2, [r3, #4]
 8007544:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	4313      	orrs	r3, r2
 800754c:	604b      	str	r3, [r1, #4]
 800754e:	e008      	b.n	8007562 <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 8007550:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007554:	685a      	ldr	r2, [r3, #4]
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	43db      	mvns	r3, r3
 800755a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800755e:	4013      	ands	r3, r2
 8007560:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 8007562:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6a1b      	ldr	r3, [r3, #32]
 8007570:	f003 0302 	and.w	r3, r3, #2
 8007574:	2b00      	cmp	r3, #0
 8007576:	d00a      	beq.n	800758e <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 8007578:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800757c:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8007580:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	4313      	orrs	r3, r2
 8007588:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 800758c:	e00a      	b.n	80075a4 <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 800758e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007592:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	43db      	mvns	r3, r3
 800759a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800759e:	4013      	ands	r3, r2
 80075a0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6a1b      	ldr	r3, [r3, #32]
 80075a8:	f003 0301 	and.w	r3, r3, #1
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d00a      	beq.n	80075c6 <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 80075b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075b4:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80075b8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	4313      	orrs	r3, r2
 80075c0:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 80075c4:	e021      	b.n	800760a <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 80075c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075ca:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	43db      	mvns	r3, r3
 80075d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80075d6:	4013      	ands	r3, r2
 80075d8:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 80075dc:	e015      	b.n	800760a <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 80075de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075e2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	43db      	mvns	r3, r3
 80075ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80075ee:	4013      	ands	r3, r2
 80075f0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 80075f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075f8:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	43db      	mvns	r3, r3
 8007600:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007604:	4013      	ands	r3, r2
 8007606:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007610:	b2db      	uxtb	r3, r3
 8007612:	2b00      	cmp	r3, #0
 8007614:	d103      	bne.n	800761e <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2201      	movs	r2, #1
 800761a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
   
  }
  
  return status;
 800761e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007620:	4618      	mov	r0, r3
 8007622:	3720      	adds	r7, #32
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	f0e8cce1 	.word	0xf0e8cce1
 800762c:	24000038 	.word	0x24000038
 8007630:	053e2d63 	.word	0x053e2d63
 8007634:	5800380c 	.word	0x5800380c

08007638 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007638:	b480      	push	{r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f003 0307 	and.w	r3, r3, #7
 8007646:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007648:	4b0b      	ldr	r3, [pc, #44]	@ (8007678 <__NVIC_SetPriorityGrouping+0x40>)
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800764e:	68ba      	ldr	r2, [r7, #8]
 8007650:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007654:	4013      	ands	r3, r2
 8007656:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007660:	4b06      	ldr	r3, [pc, #24]	@ (800767c <__NVIC_SetPriorityGrouping+0x44>)
 8007662:	4313      	orrs	r3, r2
 8007664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007666:	4a04      	ldr	r2, [pc, #16]	@ (8007678 <__NVIC_SetPriorityGrouping+0x40>)
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	60d3      	str	r3, [r2, #12]
}
 800766c:	bf00      	nop
 800766e:	3714      	adds	r7, #20
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr
 8007678:	e000ed00 	.word	0xe000ed00
 800767c:	05fa0000 	.word	0x05fa0000

08007680 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007680:	b480      	push	{r7}
 8007682:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007684:	4b04      	ldr	r3, [pc, #16]	@ (8007698 <__NVIC_GetPriorityGrouping+0x18>)
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	0a1b      	lsrs	r3, r3, #8
 800768a:	f003 0307 	and.w	r3, r3, #7
}
 800768e:	4618      	mov	r0, r3
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr
 8007698:	e000ed00 	.word	0xe000ed00

0800769c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	4603      	mov	r3, r0
 80076a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80076a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	db0b      	blt.n	80076c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80076ae:	88fb      	ldrh	r3, [r7, #6]
 80076b0:	f003 021f 	and.w	r2, r3, #31
 80076b4:	4907      	ldr	r1, [pc, #28]	@ (80076d4 <__NVIC_EnableIRQ+0x38>)
 80076b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80076ba:	095b      	lsrs	r3, r3, #5
 80076bc:	2001      	movs	r0, #1
 80076be:	fa00 f202 	lsl.w	r2, r0, r2
 80076c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80076c6:	bf00      	nop
 80076c8:	370c      	adds	r7, #12
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr
 80076d2:	bf00      	nop
 80076d4:	e000e100 	.word	0xe000e100

080076d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	4603      	mov	r3, r0
 80076e0:	6039      	str	r1, [r7, #0]
 80076e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80076e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	db0a      	blt.n	8007702 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	b2da      	uxtb	r2, r3
 80076f0:	490c      	ldr	r1, [pc, #48]	@ (8007724 <__NVIC_SetPriority+0x4c>)
 80076f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80076f6:	0112      	lsls	r2, r2, #4
 80076f8:	b2d2      	uxtb	r2, r2
 80076fa:	440b      	add	r3, r1
 80076fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007700:	e00a      	b.n	8007718 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	b2da      	uxtb	r2, r3
 8007706:	4908      	ldr	r1, [pc, #32]	@ (8007728 <__NVIC_SetPriority+0x50>)
 8007708:	88fb      	ldrh	r3, [r7, #6]
 800770a:	f003 030f 	and.w	r3, r3, #15
 800770e:	3b04      	subs	r3, #4
 8007710:	0112      	lsls	r2, r2, #4
 8007712:	b2d2      	uxtb	r2, r2
 8007714:	440b      	add	r3, r1
 8007716:	761a      	strb	r2, [r3, #24]
}
 8007718:	bf00      	nop
 800771a:	370c      	adds	r7, #12
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr
 8007724:	e000e100 	.word	0xe000e100
 8007728:	e000ed00 	.word	0xe000ed00

0800772c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800772c:	b480      	push	{r7}
 800772e:	b089      	sub	sp, #36	@ 0x24
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f003 0307 	and.w	r3, r3, #7
 800773e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	f1c3 0307 	rsb	r3, r3, #7
 8007746:	2b04      	cmp	r3, #4
 8007748:	bf28      	it	cs
 800774a:	2304      	movcs	r3, #4
 800774c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	3304      	adds	r3, #4
 8007752:	2b06      	cmp	r3, #6
 8007754:	d902      	bls.n	800775c <NVIC_EncodePriority+0x30>
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	3b03      	subs	r3, #3
 800775a:	e000      	b.n	800775e <NVIC_EncodePriority+0x32>
 800775c:	2300      	movs	r3, #0
 800775e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007760:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007764:	69bb      	ldr	r3, [r7, #24]
 8007766:	fa02 f303 	lsl.w	r3, r2, r3
 800776a:	43da      	mvns	r2, r3
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	401a      	ands	r2, r3
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007774:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	fa01 f303 	lsl.w	r3, r1, r3
 800777e:	43d9      	mvns	r1, r3
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007784:	4313      	orrs	r3, r2
         );
}
 8007786:	4618      	mov	r0, r3
 8007788:	3724      	adds	r7, #36	@ 0x24
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
	...

08007794 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	3b01      	subs	r3, #1
 80077a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80077a4:	d301      	bcc.n	80077aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80077a6:	2301      	movs	r3, #1
 80077a8:	e00f      	b.n	80077ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80077aa:	4a0a      	ldr	r2, [pc, #40]	@ (80077d4 <SysTick_Config+0x40>)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	3b01      	subs	r3, #1
 80077b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80077b2:	210f      	movs	r1, #15
 80077b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80077b8:	f7ff ff8e 	bl	80076d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80077bc:	4b05      	ldr	r3, [pc, #20]	@ (80077d4 <SysTick_Config+0x40>)
 80077be:	2200      	movs	r2, #0
 80077c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80077c2:	4b04      	ldr	r3, [pc, #16]	@ (80077d4 <SysTick_Config+0x40>)
 80077c4:	2207      	movs	r2, #7
 80077c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3708      	adds	r7, #8
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	e000e010 	.word	0xe000e010

080077d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f7ff ff29 	bl	8007638 <__NVIC_SetPriorityGrouping>
}
 80077e6:	bf00      	nop
 80077e8:	3708      	adds	r7, #8
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}

080077ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80077ee:	b580      	push	{r7, lr}
 80077f0:	b086      	sub	sp, #24
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	4603      	mov	r3, r0
 80077f6:	60b9      	str	r1, [r7, #8]
 80077f8:	607a      	str	r2, [r7, #4]
 80077fa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80077fc:	f7ff ff40 	bl	8007680 <__NVIC_GetPriorityGrouping>
 8007800:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	68b9      	ldr	r1, [r7, #8]
 8007806:	6978      	ldr	r0, [r7, #20]
 8007808:	f7ff ff90 	bl	800772c <NVIC_EncodePriority>
 800780c:	4602      	mov	r2, r0
 800780e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007812:	4611      	mov	r1, r2
 8007814:	4618      	mov	r0, r3
 8007816:	f7ff ff5f 	bl	80076d8 <__NVIC_SetPriority>
}
 800781a:	bf00      	nop
 800781c:	3718      	adds	r7, #24
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}

08007822 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007822:	b580      	push	{r7, lr}
 8007824:	b082      	sub	sp, #8
 8007826:	af00      	add	r7, sp, #0
 8007828:	4603      	mov	r3, r0
 800782a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800782c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007830:	4618      	mov	r0, r3
 8007832:	f7ff ff33 	bl	800769c <__NVIC_EnableIRQ>
}
 8007836:	bf00      	nop
 8007838:	3708      	adds	r7, #8
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}

0800783e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800783e:	b580      	push	{r7, lr}
 8007840:	b082      	sub	sp, #8
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f7ff ffa4 	bl	8007794 <SysTick_Config>
 800784c:	4603      	mov	r3, r0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3708      	adds	r7, #8
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
	...

08007858 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b086      	sub	sp, #24
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8007860:	f7fc fe4e 	bl	8004500 <HAL_GetTick>
 8007864:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d101      	bne.n	8007870 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	e312      	b.n	8007e96 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a66      	ldr	r2, [pc, #408]	@ (8007a10 <HAL_DMA_Init+0x1b8>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d04a      	beq.n	8007910 <HAL_DMA_Init+0xb8>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a65      	ldr	r2, [pc, #404]	@ (8007a14 <HAL_DMA_Init+0x1bc>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d045      	beq.n	8007910 <HAL_DMA_Init+0xb8>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a63      	ldr	r2, [pc, #396]	@ (8007a18 <HAL_DMA_Init+0x1c0>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d040      	beq.n	8007910 <HAL_DMA_Init+0xb8>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a62      	ldr	r2, [pc, #392]	@ (8007a1c <HAL_DMA_Init+0x1c4>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d03b      	beq.n	8007910 <HAL_DMA_Init+0xb8>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a60      	ldr	r2, [pc, #384]	@ (8007a20 <HAL_DMA_Init+0x1c8>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d036      	beq.n	8007910 <HAL_DMA_Init+0xb8>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a5f      	ldr	r2, [pc, #380]	@ (8007a24 <HAL_DMA_Init+0x1cc>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d031      	beq.n	8007910 <HAL_DMA_Init+0xb8>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a5d      	ldr	r2, [pc, #372]	@ (8007a28 <HAL_DMA_Init+0x1d0>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d02c      	beq.n	8007910 <HAL_DMA_Init+0xb8>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a5c      	ldr	r2, [pc, #368]	@ (8007a2c <HAL_DMA_Init+0x1d4>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d027      	beq.n	8007910 <HAL_DMA_Init+0xb8>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a5a      	ldr	r2, [pc, #360]	@ (8007a30 <HAL_DMA_Init+0x1d8>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d022      	beq.n	8007910 <HAL_DMA_Init+0xb8>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a59      	ldr	r2, [pc, #356]	@ (8007a34 <HAL_DMA_Init+0x1dc>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d01d      	beq.n	8007910 <HAL_DMA_Init+0xb8>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a57      	ldr	r2, [pc, #348]	@ (8007a38 <HAL_DMA_Init+0x1e0>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d018      	beq.n	8007910 <HAL_DMA_Init+0xb8>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a56      	ldr	r2, [pc, #344]	@ (8007a3c <HAL_DMA_Init+0x1e4>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d013      	beq.n	8007910 <HAL_DMA_Init+0xb8>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a54      	ldr	r2, [pc, #336]	@ (8007a40 <HAL_DMA_Init+0x1e8>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d00e      	beq.n	8007910 <HAL_DMA_Init+0xb8>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a53      	ldr	r2, [pc, #332]	@ (8007a44 <HAL_DMA_Init+0x1ec>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d009      	beq.n	8007910 <HAL_DMA_Init+0xb8>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a51      	ldr	r2, [pc, #324]	@ (8007a48 <HAL_DMA_Init+0x1f0>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d004      	beq.n	8007910 <HAL_DMA_Init+0xb8>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a50      	ldr	r2, [pc, #320]	@ (8007a4c <HAL_DMA_Init+0x1f4>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d101      	bne.n	8007914 <HAL_DMA_Init+0xbc>
 8007910:	2301      	movs	r3, #1
 8007912:	e000      	b.n	8007916 <HAL_DMA_Init+0xbe>
 8007914:	2300      	movs	r3, #0
 8007916:	2b00      	cmp	r3, #0
 8007918:	f000 813c 	beq.w	8007b94 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2202      	movs	r2, #2
 8007920:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a37      	ldr	r2, [pc, #220]	@ (8007a10 <HAL_DMA_Init+0x1b8>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d04a      	beq.n	80079cc <HAL_DMA_Init+0x174>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a36      	ldr	r2, [pc, #216]	@ (8007a14 <HAL_DMA_Init+0x1bc>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d045      	beq.n	80079cc <HAL_DMA_Init+0x174>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a34      	ldr	r2, [pc, #208]	@ (8007a18 <HAL_DMA_Init+0x1c0>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d040      	beq.n	80079cc <HAL_DMA_Init+0x174>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a33      	ldr	r2, [pc, #204]	@ (8007a1c <HAL_DMA_Init+0x1c4>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d03b      	beq.n	80079cc <HAL_DMA_Init+0x174>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a31      	ldr	r2, [pc, #196]	@ (8007a20 <HAL_DMA_Init+0x1c8>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d036      	beq.n	80079cc <HAL_DMA_Init+0x174>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a30      	ldr	r2, [pc, #192]	@ (8007a24 <HAL_DMA_Init+0x1cc>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d031      	beq.n	80079cc <HAL_DMA_Init+0x174>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a2e      	ldr	r2, [pc, #184]	@ (8007a28 <HAL_DMA_Init+0x1d0>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d02c      	beq.n	80079cc <HAL_DMA_Init+0x174>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a2d      	ldr	r2, [pc, #180]	@ (8007a2c <HAL_DMA_Init+0x1d4>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d027      	beq.n	80079cc <HAL_DMA_Init+0x174>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a2b      	ldr	r2, [pc, #172]	@ (8007a30 <HAL_DMA_Init+0x1d8>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d022      	beq.n	80079cc <HAL_DMA_Init+0x174>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a2a      	ldr	r2, [pc, #168]	@ (8007a34 <HAL_DMA_Init+0x1dc>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d01d      	beq.n	80079cc <HAL_DMA_Init+0x174>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a28      	ldr	r2, [pc, #160]	@ (8007a38 <HAL_DMA_Init+0x1e0>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d018      	beq.n	80079cc <HAL_DMA_Init+0x174>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a27      	ldr	r2, [pc, #156]	@ (8007a3c <HAL_DMA_Init+0x1e4>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d013      	beq.n	80079cc <HAL_DMA_Init+0x174>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a25      	ldr	r2, [pc, #148]	@ (8007a40 <HAL_DMA_Init+0x1e8>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d00e      	beq.n	80079cc <HAL_DMA_Init+0x174>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a24      	ldr	r2, [pc, #144]	@ (8007a44 <HAL_DMA_Init+0x1ec>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d009      	beq.n	80079cc <HAL_DMA_Init+0x174>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a22      	ldr	r2, [pc, #136]	@ (8007a48 <HAL_DMA_Init+0x1f0>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d004      	beq.n	80079cc <HAL_DMA_Init+0x174>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a21      	ldr	r2, [pc, #132]	@ (8007a4c <HAL_DMA_Init+0x1f4>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d108      	bne.n	80079de <HAL_DMA_Init+0x186>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f022 0201 	bic.w	r2, r2, #1
 80079da:	601a      	str	r2, [r3, #0]
 80079dc:	e007      	b.n	80079ee <HAL_DMA_Init+0x196>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f022 0201 	bic.w	r2, r2, #1
 80079ec:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80079ee:	e02f      	b.n	8007a50 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80079f0:	f7fc fd86 	bl	8004500 <HAL_GetTick>
 80079f4:	4602      	mov	r2, r0
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	1ad3      	subs	r3, r2, r3
 80079fa:	2b05      	cmp	r3, #5
 80079fc:	d928      	bls.n	8007a50 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2220      	movs	r2, #32
 8007a02:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2203      	movs	r2, #3
 8007a08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e242      	b.n	8007e96 <HAL_DMA_Init+0x63e>
 8007a10:	40020010 	.word	0x40020010
 8007a14:	40020028 	.word	0x40020028
 8007a18:	40020040 	.word	0x40020040
 8007a1c:	40020058 	.word	0x40020058
 8007a20:	40020070 	.word	0x40020070
 8007a24:	40020088 	.word	0x40020088
 8007a28:	400200a0 	.word	0x400200a0
 8007a2c:	400200b8 	.word	0x400200b8
 8007a30:	40020410 	.word	0x40020410
 8007a34:	40020428 	.word	0x40020428
 8007a38:	40020440 	.word	0x40020440
 8007a3c:	40020458 	.word	0x40020458
 8007a40:	40020470 	.word	0x40020470
 8007a44:	40020488 	.word	0x40020488
 8007a48:	400204a0 	.word	0x400204a0
 8007a4c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f003 0301 	and.w	r3, r3, #1
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d1c8      	bne.n	80079f0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	4b83      	ldr	r3, [pc, #524]	@ (8007c78 <HAL_DMA_Init+0x420>)
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8007a76:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a82:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	699b      	ldr	r3, [r3, #24]
 8007a88:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a8e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6a1b      	ldr	r3, [r3, #32]
 8007a94:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8007a96:	697a      	ldr	r2, [r7, #20]
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aa0:	2b04      	cmp	r3, #4
 8007aa2:	d107      	bne.n	8007ab4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aac:	4313      	orrs	r3, r2
 8007aae:	697a      	ldr	r2, [r7, #20]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	2b28      	cmp	r3, #40	@ 0x28
 8007aba:	d903      	bls.n	8007ac4 <HAL_DMA_Init+0x26c>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ac2:	d91f      	bls.n	8007b04 <HAL_DMA_Init+0x2ac>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	2b3e      	cmp	r3, #62	@ 0x3e
 8007aca:	d903      	bls.n	8007ad4 <HAL_DMA_Init+0x27c>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	2b42      	cmp	r3, #66	@ 0x42
 8007ad2:	d917      	bls.n	8007b04 <HAL_DMA_Init+0x2ac>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	2b46      	cmp	r3, #70	@ 0x46
 8007ada:	d903      	bls.n	8007ae4 <HAL_DMA_Init+0x28c>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	2b48      	cmp	r3, #72	@ 0x48
 8007ae2:	d90f      	bls.n	8007b04 <HAL_DMA_Init+0x2ac>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	2b4e      	cmp	r3, #78	@ 0x4e
 8007aea:	d903      	bls.n	8007af4 <HAL_DMA_Init+0x29c>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	2b52      	cmp	r3, #82	@ 0x52
 8007af2:	d907      	bls.n	8007b04 <HAL_DMA_Init+0x2ac>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	2b73      	cmp	r3, #115	@ 0x73
 8007afa:	d905      	bls.n	8007b08 <HAL_DMA_Init+0x2b0>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	2b77      	cmp	r3, #119	@ 0x77
 8007b02:	d801      	bhi.n	8007b08 <HAL_DMA_Init+0x2b0>
 8007b04:	2301      	movs	r3, #1
 8007b06:	e000      	b.n	8007b0a <HAL_DMA_Init+0x2b2>
 8007b08:	2300      	movs	r3, #0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d003      	beq.n	8007b16 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b14:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	697a      	ldr	r2, [r7, #20]
 8007b1c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	695b      	ldr	r3, [r3, #20]
 8007b24:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	f023 0307 	bic.w	r3, r3, #7
 8007b2c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b32:	697a      	ldr	r2, [r7, #20]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b3c:	2b04      	cmp	r3, #4
 8007b3e:	d117      	bne.n	8007b70 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b44:	697a      	ldr	r2, [r7, #20]
 8007b46:	4313      	orrs	r3, r2
 8007b48:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00e      	beq.n	8007b70 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f001 fdca 	bl	80096ec <DMA_CheckFifoParam>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d008      	beq.n	8007b70 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2240      	movs	r2, #64	@ 0x40
 8007b62:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2201      	movs	r2, #1
 8007b68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e192      	b.n	8007e96 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	697a      	ldr	r2, [r7, #20]
 8007b76:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f001 fd05 	bl	8009588 <DMA_CalcBaseAndBitshift>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b86:	f003 031f 	and.w	r3, r3, #31
 8007b8a:	223f      	movs	r2, #63	@ 0x3f
 8007b8c:	409a      	lsls	r2, r3
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	609a      	str	r2, [r3, #8]
 8007b92:	e0c8      	b.n	8007d26 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a38      	ldr	r2, [pc, #224]	@ (8007c7c <HAL_DMA_Init+0x424>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d022      	beq.n	8007be4 <HAL_DMA_Init+0x38c>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a37      	ldr	r2, [pc, #220]	@ (8007c80 <HAL_DMA_Init+0x428>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d01d      	beq.n	8007be4 <HAL_DMA_Init+0x38c>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a35      	ldr	r2, [pc, #212]	@ (8007c84 <HAL_DMA_Init+0x42c>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d018      	beq.n	8007be4 <HAL_DMA_Init+0x38c>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a34      	ldr	r2, [pc, #208]	@ (8007c88 <HAL_DMA_Init+0x430>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d013      	beq.n	8007be4 <HAL_DMA_Init+0x38c>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a32      	ldr	r2, [pc, #200]	@ (8007c8c <HAL_DMA_Init+0x434>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d00e      	beq.n	8007be4 <HAL_DMA_Init+0x38c>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a31      	ldr	r2, [pc, #196]	@ (8007c90 <HAL_DMA_Init+0x438>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d009      	beq.n	8007be4 <HAL_DMA_Init+0x38c>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a2f      	ldr	r2, [pc, #188]	@ (8007c94 <HAL_DMA_Init+0x43c>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d004      	beq.n	8007be4 <HAL_DMA_Init+0x38c>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a2e      	ldr	r2, [pc, #184]	@ (8007c98 <HAL_DMA_Init+0x440>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d101      	bne.n	8007be8 <HAL_DMA_Init+0x390>
 8007be4:	2301      	movs	r3, #1
 8007be6:	e000      	b.n	8007bea <HAL_DMA_Init+0x392>
 8007be8:	2300      	movs	r3, #0
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	f000 8092 	beq.w	8007d14 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a21      	ldr	r2, [pc, #132]	@ (8007c7c <HAL_DMA_Init+0x424>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d021      	beq.n	8007c3e <HAL_DMA_Init+0x3e6>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a20      	ldr	r2, [pc, #128]	@ (8007c80 <HAL_DMA_Init+0x428>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d01c      	beq.n	8007c3e <HAL_DMA_Init+0x3e6>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a1e      	ldr	r2, [pc, #120]	@ (8007c84 <HAL_DMA_Init+0x42c>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d017      	beq.n	8007c3e <HAL_DMA_Init+0x3e6>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a1d      	ldr	r2, [pc, #116]	@ (8007c88 <HAL_DMA_Init+0x430>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d012      	beq.n	8007c3e <HAL_DMA_Init+0x3e6>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a1b      	ldr	r2, [pc, #108]	@ (8007c8c <HAL_DMA_Init+0x434>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d00d      	beq.n	8007c3e <HAL_DMA_Init+0x3e6>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a1a      	ldr	r2, [pc, #104]	@ (8007c90 <HAL_DMA_Init+0x438>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d008      	beq.n	8007c3e <HAL_DMA_Init+0x3e6>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a18      	ldr	r2, [pc, #96]	@ (8007c94 <HAL_DMA_Init+0x43c>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d003      	beq.n	8007c3e <HAL_DMA_Init+0x3e6>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a17      	ldr	r2, [pc, #92]	@ (8007c98 <HAL_DMA_Init+0x440>)
 8007c3c:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2202      	movs	r2, #2
 8007c42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007c56:	697a      	ldr	r2, [r7, #20]
 8007c58:	4b10      	ldr	r3, [pc, #64]	@ (8007c9c <HAL_DMA_Init+0x444>)
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	2b40      	cmp	r3, #64	@ 0x40
 8007c64:	d01c      	beq.n	8007ca0 <HAL_DMA_Init+0x448>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	2b80      	cmp	r3, #128	@ 0x80
 8007c6c:	d102      	bne.n	8007c74 <HAL_DMA_Init+0x41c>
 8007c6e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007c72:	e016      	b.n	8007ca2 <HAL_DMA_Init+0x44a>
 8007c74:	2300      	movs	r3, #0
 8007c76:	e014      	b.n	8007ca2 <HAL_DMA_Init+0x44a>
 8007c78:	fe10803f 	.word	0xfe10803f
 8007c7c:	58025408 	.word	0x58025408
 8007c80:	5802541c 	.word	0x5802541c
 8007c84:	58025430 	.word	0x58025430
 8007c88:	58025444 	.word	0x58025444
 8007c8c:	58025458 	.word	0x58025458
 8007c90:	5802546c 	.word	0x5802546c
 8007c94:	58025480 	.word	0x58025480
 8007c98:	58025494 	.word	0x58025494
 8007c9c:	fffe000f 	.word	0xfffe000f
 8007ca0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	68d2      	ldr	r2, [r2, #12]
 8007ca6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007ca8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007cb0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	695b      	ldr	r3, [r3, #20]
 8007cb6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007cb8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	699b      	ldr	r3, [r3, #24]
 8007cbe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007cc0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	69db      	ldr	r3, [r3, #28]
 8007cc6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007cc8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a1b      	ldr	r3, [r3, #32]
 8007cce:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007cd0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007cd2:	697a      	ldr	r2, [r7, #20]
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	697a      	ldr	r2, [r7, #20]
 8007cde:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	4b6e      	ldr	r3, [pc, #440]	@ (8007ea0 <HAL_DMA_Init+0x648>)
 8007ce8:	4413      	add	r3, r2
 8007cea:	4a6e      	ldr	r2, [pc, #440]	@ (8007ea4 <HAL_DMA_Init+0x64c>)
 8007cec:	fba2 2303 	umull	r2, r3, r2, r3
 8007cf0:	091b      	lsrs	r3, r3, #4
 8007cf2:	009a      	lsls	r2, r3, #2
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f001 fc45 	bl	8009588 <DMA_CalcBaseAndBitshift>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d06:	f003 031f 	and.w	r3, r3, #31
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	409a      	lsls	r2, r3
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	605a      	str	r2, [r3, #4]
 8007d12:	e008      	b.n	8007d26 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2240      	movs	r2, #64	@ 0x40
 8007d18:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2203      	movs	r2, #3
 8007d1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	e0b7      	b.n	8007e96 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a5f      	ldr	r2, [pc, #380]	@ (8007ea8 <HAL_DMA_Init+0x650>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d072      	beq.n	8007e16 <HAL_DMA_Init+0x5be>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a5d      	ldr	r2, [pc, #372]	@ (8007eac <HAL_DMA_Init+0x654>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d06d      	beq.n	8007e16 <HAL_DMA_Init+0x5be>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a5c      	ldr	r2, [pc, #368]	@ (8007eb0 <HAL_DMA_Init+0x658>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d068      	beq.n	8007e16 <HAL_DMA_Init+0x5be>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a5a      	ldr	r2, [pc, #360]	@ (8007eb4 <HAL_DMA_Init+0x65c>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d063      	beq.n	8007e16 <HAL_DMA_Init+0x5be>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a59      	ldr	r2, [pc, #356]	@ (8007eb8 <HAL_DMA_Init+0x660>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d05e      	beq.n	8007e16 <HAL_DMA_Init+0x5be>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a57      	ldr	r2, [pc, #348]	@ (8007ebc <HAL_DMA_Init+0x664>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d059      	beq.n	8007e16 <HAL_DMA_Init+0x5be>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a56      	ldr	r2, [pc, #344]	@ (8007ec0 <HAL_DMA_Init+0x668>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d054      	beq.n	8007e16 <HAL_DMA_Init+0x5be>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a54      	ldr	r2, [pc, #336]	@ (8007ec4 <HAL_DMA_Init+0x66c>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d04f      	beq.n	8007e16 <HAL_DMA_Init+0x5be>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a53      	ldr	r2, [pc, #332]	@ (8007ec8 <HAL_DMA_Init+0x670>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d04a      	beq.n	8007e16 <HAL_DMA_Init+0x5be>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a51      	ldr	r2, [pc, #324]	@ (8007ecc <HAL_DMA_Init+0x674>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d045      	beq.n	8007e16 <HAL_DMA_Init+0x5be>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a50      	ldr	r2, [pc, #320]	@ (8007ed0 <HAL_DMA_Init+0x678>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d040      	beq.n	8007e16 <HAL_DMA_Init+0x5be>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a4e      	ldr	r2, [pc, #312]	@ (8007ed4 <HAL_DMA_Init+0x67c>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d03b      	beq.n	8007e16 <HAL_DMA_Init+0x5be>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a4d      	ldr	r2, [pc, #308]	@ (8007ed8 <HAL_DMA_Init+0x680>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d036      	beq.n	8007e16 <HAL_DMA_Init+0x5be>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a4b      	ldr	r2, [pc, #300]	@ (8007edc <HAL_DMA_Init+0x684>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d031      	beq.n	8007e16 <HAL_DMA_Init+0x5be>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a4a      	ldr	r2, [pc, #296]	@ (8007ee0 <HAL_DMA_Init+0x688>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d02c      	beq.n	8007e16 <HAL_DMA_Init+0x5be>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a48      	ldr	r2, [pc, #288]	@ (8007ee4 <HAL_DMA_Init+0x68c>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d027      	beq.n	8007e16 <HAL_DMA_Init+0x5be>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a47      	ldr	r2, [pc, #284]	@ (8007ee8 <HAL_DMA_Init+0x690>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d022      	beq.n	8007e16 <HAL_DMA_Init+0x5be>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a45      	ldr	r2, [pc, #276]	@ (8007eec <HAL_DMA_Init+0x694>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d01d      	beq.n	8007e16 <HAL_DMA_Init+0x5be>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a44      	ldr	r2, [pc, #272]	@ (8007ef0 <HAL_DMA_Init+0x698>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d018      	beq.n	8007e16 <HAL_DMA_Init+0x5be>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a42      	ldr	r2, [pc, #264]	@ (8007ef4 <HAL_DMA_Init+0x69c>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d013      	beq.n	8007e16 <HAL_DMA_Init+0x5be>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a41      	ldr	r2, [pc, #260]	@ (8007ef8 <HAL_DMA_Init+0x6a0>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d00e      	beq.n	8007e16 <HAL_DMA_Init+0x5be>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a3f      	ldr	r2, [pc, #252]	@ (8007efc <HAL_DMA_Init+0x6a4>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d009      	beq.n	8007e16 <HAL_DMA_Init+0x5be>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a3e      	ldr	r2, [pc, #248]	@ (8007f00 <HAL_DMA_Init+0x6a8>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d004      	beq.n	8007e16 <HAL_DMA_Init+0x5be>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a3c      	ldr	r2, [pc, #240]	@ (8007f04 <HAL_DMA_Init+0x6ac>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d101      	bne.n	8007e1a <HAL_DMA_Init+0x5c2>
 8007e16:	2301      	movs	r3, #1
 8007e18:	e000      	b.n	8007e1c <HAL_DMA_Init+0x5c4>
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d032      	beq.n	8007e86 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f001 fcdf 	bl	80097e4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	2b80      	cmp	r3, #128	@ 0x80
 8007e2c:	d102      	bne.n	8007e34 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	685a      	ldr	r2, [r3, #4]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e3c:	b2d2      	uxtb	r2, r2
 8007e3e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007e48:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d010      	beq.n	8007e74 <HAL_DMA_Init+0x61c>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	2b08      	cmp	r3, #8
 8007e58:	d80c      	bhi.n	8007e74 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f001 fd5c 	bl	8009918 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e64:	2200      	movs	r2, #0
 8007e66:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007e70:	605a      	str	r2, [r3, #4]
 8007e72:	e008      	b.n	8007e86 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3718      	adds	r7, #24
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	a7fdabf8 	.word	0xa7fdabf8
 8007ea4:	cccccccd 	.word	0xcccccccd
 8007ea8:	40020010 	.word	0x40020010
 8007eac:	40020028 	.word	0x40020028
 8007eb0:	40020040 	.word	0x40020040
 8007eb4:	40020058 	.word	0x40020058
 8007eb8:	40020070 	.word	0x40020070
 8007ebc:	40020088 	.word	0x40020088
 8007ec0:	400200a0 	.word	0x400200a0
 8007ec4:	400200b8 	.word	0x400200b8
 8007ec8:	40020410 	.word	0x40020410
 8007ecc:	40020428 	.word	0x40020428
 8007ed0:	40020440 	.word	0x40020440
 8007ed4:	40020458 	.word	0x40020458
 8007ed8:	40020470 	.word	0x40020470
 8007edc:	40020488 	.word	0x40020488
 8007ee0:	400204a0 	.word	0x400204a0
 8007ee4:	400204b8 	.word	0x400204b8
 8007ee8:	58025408 	.word	0x58025408
 8007eec:	5802541c 	.word	0x5802541c
 8007ef0:	58025430 	.word	0x58025430
 8007ef4:	58025444 	.word	0x58025444
 8007ef8:	58025458 	.word	0x58025458
 8007efc:	5802546c 	.word	0x5802546c
 8007f00:	58025480 	.word	0x58025480
 8007f04:	58025494 	.word	0x58025494

08007f08 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b086      	sub	sp, #24
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	60b9      	str	r1, [r7, #8]
 8007f12:	607a      	str	r2, [r7, #4]
 8007f14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f16:	2300      	movs	r3, #0
 8007f18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d101      	bne.n	8007f24 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8007f20:	2301      	movs	r3, #1
 8007f22:	e226      	b.n	8008372 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	d101      	bne.n	8007f32 <HAL_DMA_Start_IT+0x2a>
 8007f2e:	2302      	movs	r3, #2
 8007f30:	e21f      	b.n	8008372 <HAL_DMA_Start_IT+0x46a>
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2201      	movs	r2, #1
 8007f36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	f040 820a 	bne.w	800835c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2202      	movs	r2, #2
 8007f4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2200      	movs	r2, #0
 8007f54:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a68      	ldr	r2, [pc, #416]	@ (80080fc <HAL_DMA_Start_IT+0x1f4>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d04a      	beq.n	8007ff6 <HAL_DMA_Start_IT+0xee>
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a66      	ldr	r2, [pc, #408]	@ (8008100 <HAL_DMA_Start_IT+0x1f8>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d045      	beq.n	8007ff6 <HAL_DMA_Start_IT+0xee>
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a65      	ldr	r2, [pc, #404]	@ (8008104 <HAL_DMA_Start_IT+0x1fc>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d040      	beq.n	8007ff6 <HAL_DMA_Start_IT+0xee>
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a63      	ldr	r2, [pc, #396]	@ (8008108 <HAL_DMA_Start_IT+0x200>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d03b      	beq.n	8007ff6 <HAL_DMA_Start_IT+0xee>
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a62      	ldr	r2, [pc, #392]	@ (800810c <HAL_DMA_Start_IT+0x204>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d036      	beq.n	8007ff6 <HAL_DMA_Start_IT+0xee>
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a60      	ldr	r2, [pc, #384]	@ (8008110 <HAL_DMA_Start_IT+0x208>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d031      	beq.n	8007ff6 <HAL_DMA_Start_IT+0xee>
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a5f      	ldr	r2, [pc, #380]	@ (8008114 <HAL_DMA_Start_IT+0x20c>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d02c      	beq.n	8007ff6 <HAL_DMA_Start_IT+0xee>
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a5d      	ldr	r2, [pc, #372]	@ (8008118 <HAL_DMA_Start_IT+0x210>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d027      	beq.n	8007ff6 <HAL_DMA_Start_IT+0xee>
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a5c      	ldr	r2, [pc, #368]	@ (800811c <HAL_DMA_Start_IT+0x214>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d022      	beq.n	8007ff6 <HAL_DMA_Start_IT+0xee>
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a5a      	ldr	r2, [pc, #360]	@ (8008120 <HAL_DMA_Start_IT+0x218>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d01d      	beq.n	8007ff6 <HAL_DMA_Start_IT+0xee>
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a59      	ldr	r2, [pc, #356]	@ (8008124 <HAL_DMA_Start_IT+0x21c>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d018      	beq.n	8007ff6 <HAL_DMA_Start_IT+0xee>
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a57      	ldr	r2, [pc, #348]	@ (8008128 <HAL_DMA_Start_IT+0x220>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d013      	beq.n	8007ff6 <HAL_DMA_Start_IT+0xee>
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a56      	ldr	r2, [pc, #344]	@ (800812c <HAL_DMA_Start_IT+0x224>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d00e      	beq.n	8007ff6 <HAL_DMA_Start_IT+0xee>
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a54      	ldr	r2, [pc, #336]	@ (8008130 <HAL_DMA_Start_IT+0x228>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d009      	beq.n	8007ff6 <HAL_DMA_Start_IT+0xee>
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a53      	ldr	r2, [pc, #332]	@ (8008134 <HAL_DMA_Start_IT+0x22c>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d004      	beq.n	8007ff6 <HAL_DMA_Start_IT+0xee>
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a51      	ldr	r2, [pc, #324]	@ (8008138 <HAL_DMA_Start_IT+0x230>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d108      	bne.n	8008008 <HAL_DMA_Start_IT+0x100>
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f022 0201 	bic.w	r2, r2, #1
 8008004:	601a      	str	r2, [r3, #0]
 8008006:	e007      	b.n	8008018 <HAL_DMA_Start_IT+0x110>
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f022 0201 	bic.w	r2, r2, #1
 8008016:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	68b9      	ldr	r1, [r7, #8]
 800801e:	68f8      	ldr	r0, [r7, #12]
 8008020:	f001 f906 	bl	8009230 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a34      	ldr	r2, [pc, #208]	@ (80080fc <HAL_DMA_Start_IT+0x1f4>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d04a      	beq.n	80080c4 <HAL_DMA_Start_IT+0x1bc>
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a33      	ldr	r2, [pc, #204]	@ (8008100 <HAL_DMA_Start_IT+0x1f8>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d045      	beq.n	80080c4 <HAL_DMA_Start_IT+0x1bc>
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a31      	ldr	r2, [pc, #196]	@ (8008104 <HAL_DMA_Start_IT+0x1fc>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d040      	beq.n	80080c4 <HAL_DMA_Start_IT+0x1bc>
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a30      	ldr	r2, [pc, #192]	@ (8008108 <HAL_DMA_Start_IT+0x200>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d03b      	beq.n	80080c4 <HAL_DMA_Start_IT+0x1bc>
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a2e      	ldr	r2, [pc, #184]	@ (800810c <HAL_DMA_Start_IT+0x204>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d036      	beq.n	80080c4 <HAL_DMA_Start_IT+0x1bc>
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a2d      	ldr	r2, [pc, #180]	@ (8008110 <HAL_DMA_Start_IT+0x208>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d031      	beq.n	80080c4 <HAL_DMA_Start_IT+0x1bc>
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a2b      	ldr	r2, [pc, #172]	@ (8008114 <HAL_DMA_Start_IT+0x20c>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d02c      	beq.n	80080c4 <HAL_DMA_Start_IT+0x1bc>
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a2a      	ldr	r2, [pc, #168]	@ (8008118 <HAL_DMA_Start_IT+0x210>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d027      	beq.n	80080c4 <HAL_DMA_Start_IT+0x1bc>
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a28      	ldr	r2, [pc, #160]	@ (800811c <HAL_DMA_Start_IT+0x214>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d022      	beq.n	80080c4 <HAL_DMA_Start_IT+0x1bc>
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a27      	ldr	r2, [pc, #156]	@ (8008120 <HAL_DMA_Start_IT+0x218>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d01d      	beq.n	80080c4 <HAL_DMA_Start_IT+0x1bc>
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a25      	ldr	r2, [pc, #148]	@ (8008124 <HAL_DMA_Start_IT+0x21c>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d018      	beq.n	80080c4 <HAL_DMA_Start_IT+0x1bc>
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a24      	ldr	r2, [pc, #144]	@ (8008128 <HAL_DMA_Start_IT+0x220>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d013      	beq.n	80080c4 <HAL_DMA_Start_IT+0x1bc>
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a22      	ldr	r2, [pc, #136]	@ (800812c <HAL_DMA_Start_IT+0x224>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d00e      	beq.n	80080c4 <HAL_DMA_Start_IT+0x1bc>
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a21      	ldr	r2, [pc, #132]	@ (8008130 <HAL_DMA_Start_IT+0x228>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d009      	beq.n	80080c4 <HAL_DMA_Start_IT+0x1bc>
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a1f      	ldr	r2, [pc, #124]	@ (8008134 <HAL_DMA_Start_IT+0x22c>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d004      	beq.n	80080c4 <HAL_DMA_Start_IT+0x1bc>
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a1e      	ldr	r2, [pc, #120]	@ (8008138 <HAL_DMA_Start_IT+0x230>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d101      	bne.n	80080c8 <HAL_DMA_Start_IT+0x1c0>
 80080c4:	2301      	movs	r3, #1
 80080c6:	e000      	b.n	80080ca <HAL_DMA_Start_IT+0x1c2>
 80080c8:	2300      	movs	r3, #0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d036      	beq.n	800813c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f023 021e 	bic.w	r2, r3, #30
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f042 0216 	orr.w	r2, r2, #22
 80080e0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d03e      	beq.n	8008168 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f042 0208 	orr.w	r2, r2, #8
 80080f8:	601a      	str	r2, [r3, #0]
 80080fa:	e035      	b.n	8008168 <HAL_DMA_Start_IT+0x260>
 80080fc:	40020010 	.word	0x40020010
 8008100:	40020028 	.word	0x40020028
 8008104:	40020040 	.word	0x40020040
 8008108:	40020058 	.word	0x40020058
 800810c:	40020070 	.word	0x40020070
 8008110:	40020088 	.word	0x40020088
 8008114:	400200a0 	.word	0x400200a0
 8008118:	400200b8 	.word	0x400200b8
 800811c:	40020410 	.word	0x40020410
 8008120:	40020428 	.word	0x40020428
 8008124:	40020440 	.word	0x40020440
 8008128:	40020458 	.word	0x40020458
 800812c:	40020470 	.word	0x40020470
 8008130:	40020488 	.word	0x40020488
 8008134:	400204a0 	.word	0x400204a0
 8008138:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f023 020e 	bic.w	r2, r3, #14
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f042 020a 	orr.w	r2, r2, #10
 800814e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008154:	2b00      	cmp	r3, #0
 8008156:	d007      	beq.n	8008168 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f042 0204 	orr.w	r2, r2, #4
 8008166:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a83      	ldr	r2, [pc, #524]	@ (800837c <HAL_DMA_Start_IT+0x474>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d072      	beq.n	8008258 <HAL_DMA_Start_IT+0x350>
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a82      	ldr	r2, [pc, #520]	@ (8008380 <HAL_DMA_Start_IT+0x478>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d06d      	beq.n	8008258 <HAL_DMA_Start_IT+0x350>
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a80      	ldr	r2, [pc, #512]	@ (8008384 <HAL_DMA_Start_IT+0x47c>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d068      	beq.n	8008258 <HAL_DMA_Start_IT+0x350>
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a7f      	ldr	r2, [pc, #508]	@ (8008388 <HAL_DMA_Start_IT+0x480>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d063      	beq.n	8008258 <HAL_DMA_Start_IT+0x350>
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a7d      	ldr	r2, [pc, #500]	@ (800838c <HAL_DMA_Start_IT+0x484>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d05e      	beq.n	8008258 <HAL_DMA_Start_IT+0x350>
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a7c      	ldr	r2, [pc, #496]	@ (8008390 <HAL_DMA_Start_IT+0x488>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d059      	beq.n	8008258 <HAL_DMA_Start_IT+0x350>
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a7a      	ldr	r2, [pc, #488]	@ (8008394 <HAL_DMA_Start_IT+0x48c>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d054      	beq.n	8008258 <HAL_DMA_Start_IT+0x350>
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a79      	ldr	r2, [pc, #484]	@ (8008398 <HAL_DMA_Start_IT+0x490>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d04f      	beq.n	8008258 <HAL_DMA_Start_IT+0x350>
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a77      	ldr	r2, [pc, #476]	@ (800839c <HAL_DMA_Start_IT+0x494>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d04a      	beq.n	8008258 <HAL_DMA_Start_IT+0x350>
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a76      	ldr	r2, [pc, #472]	@ (80083a0 <HAL_DMA_Start_IT+0x498>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d045      	beq.n	8008258 <HAL_DMA_Start_IT+0x350>
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a74      	ldr	r2, [pc, #464]	@ (80083a4 <HAL_DMA_Start_IT+0x49c>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d040      	beq.n	8008258 <HAL_DMA_Start_IT+0x350>
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a73      	ldr	r2, [pc, #460]	@ (80083a8 <HAL_DMA_Start_IT+0x4a0>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d03b      	beq.n	8008258 <HAL_DMA_Start_IT+0x350>
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a71      	ldr	r2, [pc, #452]	@ (80083ac <HAL_DMA_Start_IT+0x4a4>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d036      	beq.n	8008258 <HAL_DMA_Start_IT+0x350>
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a70      	ldr	r2, [pc, #448]	@ (80083b0 <HAL_DMA_Start_IT+0x4a8>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d031      	beq.n	8008258 <HAL_DMA_Start_IT+0x350>
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a6e      	ldr	r2, [pc, #440]	@ (80083b4 <HAL_DMA_Start_IT+0x4ac>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d02c      	beq.n	8008258 <HAL_DMA_Start_IT+0x350>
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a6d      	ldr	r2, [pc, #436]	@ (80083b8 <HAL_DMA_Start_IT+0x4b0>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d027      	beq.n	8008258 <HAL_DMA_Start_IT+0x350>
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a6b      	ldr	r2, [pc, #428]	@ (80083bc <HAL_DMA_Start_IT+0x4b4>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d022      	beq.n	8008258 <HAL_DMA_Start_IT+0x350>
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a6a      	ldr	r2, [pc, #424]	@ (80083c0 <HAL_DMA_Start_IT+0x4b8>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d01d      	beq.n	8008258 <HAL_DMA_Start_IT+0x350>
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a68      	ldr	r2, [pc, #416]	@ (80083c4 <HAL_DMA_Start_IT+0x4bc>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d018      	beq.n	8008258 <HAL_DMA_Start_IT+0x350>
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a67      	ldr	r2, [pc, #412]	@ (80083c8 <HAL_DMA_Start_IT+0x4c0>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d013      	beq.n	8008258 <HAL_DMA_Start_IT+0x350>
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a65      	ldr	r2, [pc, #404]	@ (80083cc <HAL_DMA_Start_IT+0x4c4>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d00e      	beq.n	8008258 <HAL_DMA_Start_IT+0x350>
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a64      	ldr	r2, [pc, #400]	@ (80083d0 <HAL_DMA_Start_IT+0x4c8>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d009      	beq.n	8008258 <HAL_DMA_Start_IT+0x350>
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a62      	ldr	r2, [pc, #392]	@ (80083d4 <HAL_DMA_Start_IT+0x4cc>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d004      	beq.n	8008258 <HAL_DMA_Start_IT+0x350>
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a61      	ldr	r2, [pc, #388]	@ (80083d8 <HAL_DMA_Start_IT+0x4d0>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d101      	bne.n	800825c <HAL_DMA_Start_IT+0x354>
 8008258:	2301      	movs	r3, #1
 800825a:	e000      	b.n	800825e <HAL_DMA_Start_IT+0x356>
 800825c:	2300      	movs	r3, #0
 800825e:	2b00      	cmp	r3, #0
 8008260:	d01a      	beq.n	8008298 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800826c:	2b00      	cmp	r3, #0
 800826e:	d007      	beq.n	8008280 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008274:	681a      	ldr	r2, [r3, #0]
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800827a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800827e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008284:	2b00      	cmp	r3, #0
 8008286:	d007      	beq.n	8008298 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008292:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008296:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a37      	ldr	r2, [pc, #220]	@ (800837c <HAL_DMA_Start_IT+0x474>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d04a      	beq.n	8008338 <HAL_DMA_Start_IT+0x430>
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a36      	ldr	r2, [pc, #216]	@ (8008380 <HAL_DMA_Start_IT+0x478>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d045      	beq.n	8008338 <HAL_DMA_Start_IT+0x430>
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a34      	ldr	r2, [pc, #208]	@ (8008384 <HAL_DMA_Start_IT+0x47c>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d040      	beq.n	8008338 <HAL_DMA_Start_IT+0x430>
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a33      	ldr	r2, [pc, #204]	@ (8008388 <HAL_DMA_Start_IT+0x480>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d03b      	beq.n	8008338 <HAL_DMA_Start_IT+0x430>
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a31      	ldr	r2, [pc, #196]	@ (800838c <HAL_DMA_Start_IT+0x484>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d036      	beq.n	8008338 <HAL_DMA_Start_IT+0x430>
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a30      	ldr	r2, [pc, #192]	@ (8008390 <HAL_DMA_Start_IT+0x488>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d031      	beq.n	8008338 <HAL_DMA_Start_IT+0x430>
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a2e      	ldr	r2, [pc, #184]	@ (8008394 <HAL_DMA_Start_IT+0x48c>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d02c      	beq.n	8008338 <HAL_DMA_Start_IT+0x430>
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a2d      	ldr	r2, [pc, #180]	@ (8008398 <HAL_DMA_Start_IT+0x490>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d027      	beq.n	8008338 <HAL_DMA_Start_IT+0x430>
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a2b      	ldr	r2, [pc, #172]	@ (800839c <HAL_DMA_Start_IT+0x494>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d022      	beq.n	8008338 <HAL_DMA_Start_IT+0x430>
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a2a      	ldr	r2, [pc, #168]	@ (80083a0 <HAL_DMA_Start_IT+0x498>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d01d      	beq.n	8008338 <HAL_DMA_Start_IT+0x430>
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a28      	ldr	r2, [pc, #160]	@ (80083a4 <HAL_DMA_Start_IT+0x49c>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d018      	beq.n	8008338 <HAL_DMA_Start_IT+0x430>
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a27      	ldr	r2, [pc, #156]	@ (80083a8 <HAL_DMA_Start_IT+0x4a0>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d013      	beq.n	8008338 <HAL_DMA_Start_IT+0x430>
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a25      	ldr	r2, [pc, #148]	@ (80083ac <HAL_DMA_Start_IT+0x4a4>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d00e      	beq.n	8008338 <HAL_DMA_Start_IT+0x430>
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a24      	ldr	r2, [pc, #144]	@ (80083b0 <HAL_DMA_Start_IT+0x4a8>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d009      	beq.n	8008338 <HAL_DMA_Start_IT+0x430>
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a22      	ldr	r2, [pc, #136]	@ (80083b4 <HAL_DMA_Start_IT+0x4ac>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d004      	beq.n	8008338 <HAL_DMA_Start_IT+0x430>
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a21      	ldr	r2, [pc, #132]	@ (80083b8 <HAL_DMA_Start_IT+0x4b0>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d108      	bne.n	800834a <HAL_DMA_Start_IT+0x442>
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f042 0201 	orr.w	r2, r2, #1
 8008346:	601a      	str	r2, [r3, #0]
 8008348:	e012      	b.n	8008370 <HAL_DMA_Start_IT+0x468>
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f042 0201 	orr.w	r2, r2, #1
 8008358:	601a      	str	r2, [r3, #0]
 800835a:	e009      	b.n	8008370 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008362:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2200      	movs	r2, #0
 8008368:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008370:	7dfb      	ldrb	r3, [r7, #23]
}
 8008372:	4618      	mov	r0, r3
 8008374:	3718      	adds	r7, #24
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	40020010 	.word	0x40020010
 8008380:	40020028 	.word	0x40020028
 8008384:	40020040 	.word	0x40020040
 8008388:	40020058 	.word	0x40020058
 800838c:	40020070 	.word	0x40020070
 8008390:	40020088 	.word	0x40020088
 8008394:	400200a0 	.word	0x400200a0
 8008398:	400200b8 	.word	0x400200b8
 800839c:	40020410 	.word	0x40020410
 80083a0:	40020428 	.word	0x40020428
 80083a4:	40020440 	.word	0x40020440
 80083a8:	40020458 	.word	0x40020458
 80083ac:	40020470 	.word	0x40020470
 80083b0:	40020488 	.word	0x40020488
 80083b4:	400204a0 	.word	0x400204a0
 80083b8:	400204b8 	.word	0x400204b8
 80083bc:	58025408 	.word	0x58025408
 80083c0:	5802541c 	.word	0x5802541c
 80083c4:	58025430 	.word	0x58025430
 80083c8:	58025444 	.word	0x58025444
 80083cc:	58025458 	.word	0x58025458
 80083d0:	5802546c 	.word	0x5802546c
 80083d4:	58025480 	.word	0x58025480
 80083d8:	58025494 	.word	0x58025494

080083dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b08a      	sub	sp, #40	@ 0x28
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80083e4:	2300      	movs	r3, #0
 80083e6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80083e8:	4b67      	ldr	r3, [pc, #412]	@ (8008588 <HAL_DMA_IRQHandler+0x1ac>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a67      	ldr	r2, [pc, #412]	@ (800858c <HAL_DMA_IRQHandler+0x1b0>)
 80083ee:	fba2 2303 	umull	r2, r3, r2, r3
 80083f2:	0a9b      	lsrs	r3, r3, #10
 80083f4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083fa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008400:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8008402:	6a3b      	ldr	r3, [r7, #32]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8008408:	69fb      	ldr	r3, [r7, #28]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a5f      	ldr	r2, [pc, #380]	@ (8008590 <HAL_DMA_IRQHandler+0x1b4>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d04a      	beq.n	80084ae <HAL_DMA_IRQHandler+0xd2>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a5d      	ldr	r2, [pc, #372]	@ (8008594 <HAL_DMA_IRQHandler+0x1b8>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d045      	beq.n	80084ae <HAL_DMA_IRQHandler+0xd2>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a5c      	ldr	r2, [pc, #368]	@ (8008598 <HAL_DMA_IRQHandler+0x1bc>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d040      	beq.n	80084ae <HAL_DMA_IRQHandler+0xd2>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a5a      	ldr	r2, [pc, #360]	@ (800859c <HAL_DMA_IRQHandler+0x1c0>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d03b      	beq.n	80084ae <HAL_DMA_IRQHandler+0xd2>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a59      	ldr	r2, [pc, #356]	@ (80085a0 <HAL_DMA_IRQHandler+0x1c4>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d036      	beq.n	80084ae <HAL_DMA_IRQHandler+0xd2>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a57      	ldr	r2, [pc, #348]	@ (80085a4 <HAL_DMA_IRQHandler+0x1c8>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d031      	beq.n	80084ae <HAL_DMA_IRQHandler+0xd2>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a56      	ldr	r2, [pc, #344]	@ (80085a8 <HAL_DMA_IRQHandler+0x1cc>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d02c      	beq.n	80084ae <HAL_DMA_IRQHandler+0xd2>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a54      	ldr	r2, [pc, #336]	@ (80085ac <HAL_DMA_IRQHandler+0x1d0>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d027      	beq.n	80084ae <HAL_DMA_IRQHandler+0xd2>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a53      	ldr	r2, [pc, #332]	@ (80085b0 <HAL_DMA_IRQHandler+0x1d4>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d022      	beq.n	80084ae <HAL_DMA_IRQHandler+0xd2>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a51      	ldr	r2, [pc, #324]	@ (80085b4 <HAL_DMA_IRQHandler+0x1d8>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d01d      	beq.n	80084ae <HAL_DMA_IRQHandler+0xd2>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a50      	ldr	r2, [pc, #320]	@ (80085b8 <HAL_DMA_IRQHandler+0x1dc>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d018      	beq.n	80084ae <HAL_DMA_IRQHandler+0xd2>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a4e      	ldr	r2, [pc, #312]	@ (80085bc <HAL_DMA_IRQHandler+0x1e0>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d013      	beq.n	80084ae <HAL_DMA_IRQHandler+0xd2>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a4d      	ldr	r2, [pc, #308]	@ (80085c0 <HAL_DMA_IRQHandler+0x1e4>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d00e      	beq.n	80084ae <HAL_DMA_IRQHandler+0xd2>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a4b      	ldr	r2, [pc, #300]	@ (80085c4 <HAL_DMA_IRQHandler+0x1e8>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d009      	beq.n	80084ae <HAL_DMA_IRQHandler+0xd2>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a4a      	ldr	r2, [pc, #296]	@ (80085c8 <HAL_DMA_IRQHandler+0x1ec>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d004      	beq.n	80084ae <HAL_DMA_IRQHandler+0xd2>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a48      	ldr	r2, [pc, #288]	@ (80085cc <HAL_DMA_IRQHandler+0x1f0>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d101      	bne.n	80084b2 <HAL_DMA_IRQHandler+0xd6>
 80084ae:	2301      	movs	r3, #1
 80084b0:	e000      	b.n	80084b4 <HAL_DMA_IRQHandler+0xd8>
 80084b2:	2300      	movs	r3, #0
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	f000 842b 	beq.w	8008d10 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084be:	f003 031f 	and.w	r3, r3, #31
 80084c2:	2208      	movs	r2, #8
 80084c4:	409a      	lsls	r2, r3
 80084c6:	69bb      	ldr	r3, [r7, #24]
 80084c8:	4013      	ands	r3, r2
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	f000 80a2 	beq.w	8008614 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a2e      	ldr	r2, [pc, #184]	@ (8008590 <HAL_DMA_IRQHandler+0x1b4>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d04a      	beq.n	8008570 <HAL_DMA_IRQHandler+0x194>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a2d      	ldr	r2, [pc, #180]	@ (8008594 <HAL_DMA_IRQHandler+0x1b8>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d045      	beq.n	8008570 <HAL_DMA_IRQHandler+0x194>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a2b      	ldr	r2, [pc, #172]	@ (8008598 <HAL_DMA_IRQHandler+0x1bc>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d040      	beq.n	8008570 <HAL_DMA_IRQHandler+0x194>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a2a      	ldr	r2, [pc, #168]	@ (800859c <HAL_DMA_IRQHandler+0x1c0>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d03b      	beq.n	8008570 <HAL_DMA_IRQHandler+0x194>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a28      	ldr	r2, [pc, #160]	@ (80085a0 <HAL_DMA_IRQHandler+0x1c4>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d036      	beq.n	8008570 <HAL_DMA_IRQHandler+0x194>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a27      	ldr	r2, [pc, #156]	@ (80085a4 <HAL_DMA_IRQHandler+0x1c8>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d031      	beq.n	8008570 <HAL_DMA_IRQHandler+0x194>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a25      	ldr	r2, [pc, #148]	@ (80085a8 <HAL_DMA_IRQHandler+0x1cc>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d02c      	beq.n	8008570 <HAL_DMA_IRQHandler+0x194>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a24      	ldr	r2, [pc, #144]	@ (80085ac <HAL_DMA_IRQHandler+0x1d0>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d027      	beq.n	8008570 <HAL_DMA_IRQHandler+0x194>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a22      	ldr	r2, [pc, #136]	@ (80085b0 <HAL_DMA_IRQHandler+0x1d4>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d022      	beq.n	8008570 <HAL_DMA_IRQHandler+0x194>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a21      	ldr	r2, [pc, #132]	@ (80085b4 <HAL_DMA_IRQHandler+0x1d8>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d01d      	beq.n	8008570 <HAL_DMA_IRQHandler+0x194>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a1f      	ldr	r2, [pc, #124]	@ (80085b8 <HAL_DMA_IRQHandler+0x1dc>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d018      	beq.n	8008570 <HAL_DMA_IRQHandler+0x194>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a1e      	ldr	r2, [pc, #120]	@ (80085bc <HAL_DMA_IRQHandler+0x1e0>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d013      	beq.n	8008570 <HAL_DMA_IRQHandler+0x194>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a1c      	ldr	r2, [pc, #112]	@ (80085c0 <HAL_DMA_IRQHandler+0x1e4>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d00e      	beq.n	8008570 <HAL_DMA_IRQHandler+0x194>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a1b      	ldr	r2, [pc, #108]	@ (80085c4 <HAL_DMA_IRQHandler+0x1e8>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d009      	beq.n	8008570 <HAL_DMA_IRQHandler+0x194>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a19      	ldr	r2, [pc, #100]	@ (80085c8 <HAL_DMA_IRQHandler+0x1ec>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d004      	beq.n	8008570 <HAL_DMA_IRQHandler+0x194>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a18      	ldr	r2, [pc, #96]	@ (80085cc <HAL_DMA_IRQHandler+0x1f0>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d12f      	bne.n	80085d0 <HAL_DMA_IRQHandler+0x1f4>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f003 0304 	and.w	r3, r3, #4
 800857a:	2b00      	cmp	r3, #0
 800857c:	bf14      	ite	ne
 800857e:	2301      	movne	r3, #1
 8008580:	2300      	moveq	r3, #0
 8008582:	b2db      	uxtb	r3, r3
 8008584:	e02e      	b.n	80085e4 <HAL_DMA_IRQHandler+0x208>
 8008586:	bf00      	nop
 8008588:	24000038 	.word	0x24000038
 800858c:	1b4e81b5 	.word	0x1b4e81b5
 8008590:	40020010 	.word	0x40020010
 8008594:	40020028 	.word	0x40020028
 8008598:	40020040 	.word	0x40020040
 800859c:	40020058 	.word	0x40020058
 80085a0:	40020070 	.word	0x40020070
 80085a4:	40020088 	.word	0x40020088
 80085a8:	400200a0 	.word	0x400200a0
 80085ac:	400200b8 	.word	0x400200b8
 80085b0:	40020410 	.word	0x40020410
 80085b4:	40020428 	.word	0x40020428
 80085b8:	40020440 	.word	0x40020440
 80085bc:	40020458 	.word	0x40020458
 80085c0:	40020470 	.word	0x40020470
 80085c4:	40020488 	.word	0x40020488
 80085c8:	400204a0 	.word	0x400204a0
 80085cc:	400204b8 	.word	0x400204b8
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f003 0308 	and.w	r3, r3, #8
 80085da:	2b00      	cmp	r3, #0
 80085dc:	bf14      	ite	ne
 80085de:	2301      	movne	r3, #1
 80085e0:	2300      	moveq	r3, #0
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d015      	beq.n	8008614 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f022 0204 	bic.w	r2, r2, #4
 80085f6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085fc:	f003 031f 	and.w	r3, r3, #31
 8008600:	2208      	movs	r2, #8
 8008602:	409a      	lsls	r2, r3
 8008604:	6a3b      	ldr	r3, [r7, #32]
 8008606:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800860c:	f043 0201 	orr.w	r2, r3, #1
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008618:	f003 031f 	and.w	r3, r3, #31
 800861c:	69ba      	ldr	r2, [r7, #24]
 800861e:	fa22 f303 	lsr.w	r3, r2, r3
 8008622:	f003 0301 	and.w	r3, r3, #1
 8008626:	2b00      	cmp	r3, #0
 8008628:	d06e      	beq.n	8008708 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a69      	ldr	r2, [pc, #420]	@ (80087d4 <HAL_DMA_IRQHandler+0x3f8>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d04a      	beq.n	80086ca <HAL_DMA_IRQHandler+0x2ee>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a67      	ldr	r2, [pc, #412]	@ (80087d8 <HAL_DMA_IRQHandler+0x3fc>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d045      	beq.n	80086ca <HAL_DMA_IRQHandler+0x2ee>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a66      	ldr	r2, [pc, #408]	@ (80087dc <HAL_DMA_IRQHandler+0x400>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d040      	beq.n	80086ca <HAL_DMA_IRQHandler+0x2ee>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a64      	ldr	r2, [pc, #400]	@ (80087e0 <HAL_DMA_IRQHandler+0x404>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d03b      	beq.n	80086ca <HAL_DMA_IRQHandler+0x2ee>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a63      	ldr	r2, [pc, #396]	@ (80087e4 <HAL_DMA_IRQHandler+0x408>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d036      	beq.n	80086ca <HAL_DMA_IRQHandler+0x2ee>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a61      	ldr	r2, [pc, #388]	@ (80087e8 <HAL_DMA_IRQHandler+0x40c>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d031      	beq.n	80086ca <HAL_DMA_IRQHandler+0x2ee>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a60      	ldr	r2, [pc, #384]	@ (80087ec <HAL_DMA_IRQHandler+0x410>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d02c      	beq.n	80086ca <HAL_DMA_IRQHandler+0x2ee>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a5e      	ldr	r2, [pc, #376]	@ (80087f0 <HAL_DMA_IRQHandler+0x414>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d027      	beq.n	80086ca <HAL_DMA_IRQHandler+0x2ee>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a5d      	ldr	r2, [pc, #372]	@ (80087f4 <HAL_DMA_IRQHandler+0x418>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d022      	beq.n	80086ca <HAL_DMA_IRQHandler+0x2ee>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a5b      	ldr	r2, [pc, #364]	@ (80087f8 <HAL_DMA_IRQHandler+0x41c>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d01d      	beq.n	80086ca <HAL_DMA_IRQHandler+0x2ee>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4a5a      	ldr	r2, [pc, #360]	@ (80087fc <HAL_DMA_IRQHandler+0x420>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d018      	beq.n	80086ca <HAL_DMA_IRQHandler+0x2ee>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a58      	ldr	r2, [pc, #352]	@ (8008800 <HAL_DMA_IRQHandler+0x424>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d013      	beq.n	80086ca <HAL_DMA_IRQHandler+0x2ee>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a57      	ldr	r2, [pc, #348]	@ (8008804 <HAL_DMA_IRQHandler+0x428>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d00e      	beq.n	80086ca <HAL_DMA_IRQHandler+0x2ee>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a55      	ldr	r2, [pc, #340]	@ (8008808 <HAL_DMA_IRQHandler+0x42c>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d009      	beq.n	80086ca <HAL_DMA_IRQHandler+0x2ee>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a54      	ldr	r2, [pc, #336]	@ (800880c <HAL_DMA_IRQHandler+0x430>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d004      	beq.n	80086ca <HAL_DMA_IRQHandler+0x2ee>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a52      	ldr	r2, [pc, #328]	@ (8008810 <HAL_DMA_IRQHandler+0x434>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d10a      	bne.n	80086e0 <HAL_DMA_IRQHandler+0x304>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	695b      	ldr	r3, [r3, #20]
 80086d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	bf14      	ite	ne
 80086d8:	2301      	movne	r3, #1
 80086da:	2300      	moveq	r3, #0
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	e003      	b.n	80086e8 <HAL_DMA_IRQHandler+0x30c>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	2300      	movs	r3, #0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d00d      	beq.n	8008708 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086f0:	f003 031f 	and.w	r3, r3, #31
 80086f4:	2201      	movs	r2, #1
 80086f6:	409a      	lsls	r2, r3
 80086f8:	6a3b      	ldr	r3, [r7, #32]
 80086fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008700:	f043 0202 	orr.w	r2, r3, #2
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800870c:	f003 031f 	and.w	r3, r3, #31
 8008710:	2204      	movs	r2, #4
 8008712:	409a      	lsls	r2, r3
 8008714:	69bb      	ldr	r3, [r7, #24]
 8008716:	4013      	ands	r3, r2
 8008718:	2b00      	cmp	r3, #0
 800871a:	f000 808f 	beq.w	800883c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a2c      	ldr	r2, [pc, #176]	@ (80087d4 <HAL_DMA_IRQHandler+0x3f8>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d04a      	beq.n	80087be <HAL_DMA_IRQHandler+0x3e2>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a2a      	ldr	r2, [pc, #168]	@ (80087d8 <HAL_DMA_IRQHandler+0x3fc>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d045      	beq.n	80087be <HAL_DMA_IRQHandler+0x3e2>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a29      	ldr	r2, [pc, #164]	@ (80087dc <HAL_DMA_IRQHandler+0x400>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d040      	beq.n	80087be <HAL_DMA_IRQHandler+0x3e2>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a27      	ldr	r2, [pc, #156]	@ (80087e0 <HAL_DMA_IRQHandler+0x404>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d03b      	beq.n	80087be <HAL_DMA_IRQHandler+0x3e2>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a26      	ldr	r2, [pc, #152]	@ (80087e4 <HAL_DMA_IRQHandler+0x408>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d036      	beq.n	80087be <HAL_DMA_IRQHandler+0x3e2>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a24      	ldr	r2, [pc, #144]	@ (80087e8 <HAL_DMA_IRQHandler+0x40c>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d031      	beq.n	80087be <HAL_DMA_IRQHandler+0x3e2>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a23      	ldr	r2, [pc, #140]	@ (80087ec <HAL_DMA_IRQHandler+0x410>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d02c      	beq.n	80087be <HAL_DMA_IRQHandler+0x3e2>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4a21      	ldr	r2, [pc, #132]	@ (80087f0 <HAL_DMA_IRQHandler+0x414>)
 800876a:	4293      	cmp	r3, r2
 800876c:	d027      	beq.n	80087be <HAL_DMA_IRQHandler+0x3e2>
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a20      	ldr	r2, [pc, #128]	@ (80087f4 <HAL_DMA_IRQHandler+0x418>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d022      	beq.n	80087be <HAL_DMA_IRQHandler+0x3e2>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a1e      	ldr	r2, [pc, #120]	@ (80087f8 <HAL_DMA_IRQHandler+0x41c>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d01d      	beq.n	80087be <HAL_DMA_IRQHandler+0x3e2>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a1d      	ldr	r2, [pc, #116]	@ (80087fc <HAL_DMA_IRQHandler+0x420>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d018      	beq.n	80087be <HAL_DMA_IRQHandler+0x3e2>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a1b      	ldr	r2, [pc, #108]	@ (8008800 <HAL_DMA_IRQHandler+0x424>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d013      	beq.n	80087be <HAL_DMA_IRQHandler+0x3e2>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a1a      	ldr	r2, [pc, #104]	@ (8008804 <HAL_DMA_IRQHandler+0x428>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d00e      	beq.n	80087be <HAL_DMA_IRQHandler+0x3e2>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a18      	ldr	r2, [pc, #96]	@ (8008808 <HAL_DMA_IRQHandler+0x42c>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d009      	beq.n	80087be <HAL_DMA_IRQHandler+0x3e2>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a17      	ldr	r2, [pc, #92]	@ (800880c <HAL_DMA_IRQHandler+0x430>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d004      	beq.n	80087be <HAL_DMA_IRQHandler+0x3e2>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a15      	ldr	r2, [pc, #84]	@ (8008810 <HAL_DMA_IRQHandler+0x434>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d12a      	bne.n	8008814 <HAL_DMA_IRQHandler+0x438>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f003 0302 	and.w	r3, r3, #2
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	bf14      	ite	ne
 80087cc:	2301      	movne	r3, #1
 80087ce:	2300      	moveq	r3, #0
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	e023      	b.n	800881c <HAL_DMA_IRQHandler+0x440>
 80087d4:	40020010 	.word	0x40020010
 80087d8:	40020028 	.word	0x40020028
 80087dc:	40020040 	.word	0x40020040
 80087e0:	40020058 	.word	0x40020058
 80087e4:	40020070 	.word	0x40020070
 80087e8:	40020088 	.word	0x40020088
 80087ec:	400200a0 	.word	0x400200a0
 80087f0:	400200b8 	.word	0x400200b8
 80087f4:	40020410 	.word	0x40020410
 80087f8:	40020428 	.word	0x40020428
 80087fc:	40020440 	.word	0x40020440
 8008800:	40020458 	.word	0x40020458
 8008804:	40020470 	.word	0x40020470
 8008808:	40020488 	.word	0x40020488
 800880c:	400204a0 	.word	0x400204a0
 8008810:	400204b8 	.word	0x400204b8
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	2300      	movs	r3, #0
 800881c:	2b00      	cmp	r3, #0
 800881e:	d00d      	beq.n	800883c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008824:	f003 031f 	and.w	r3, r3, #31
 8008828:	2204      	movs	r2, #4
 800882a:	409a      	lsls	r2, r3
 800882c:	6a3b      	ldr	r3, [r7, #32]
 800882e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008834:	f043 0204 	orr.w	r2, r3, #4
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008840:	f003 031f 	and.w	r3, r3, #31
 8008844:	2210      	movs	r2, #16
 8008846:	409a      	lsls	r2, r3
 8008848:	69bb      	ldr	r3, [r7, #24]
 800884a:	4013      	ands	r3, r2
 800884c:	2b00      	cmp	r3, #0
 800884e:	f000 80a6 	beq.w	800899e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a85      	ldr	r2, [pc, #532]	@ (8008a6c <HAL_DMA_IRQHandler+0x690>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d04a      	beq.n	80088f2 <HAL_DMA_IRQHandler+0x516>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a83      	ldr	r2, [pc, #524]	@ (8008a70 <HAL_DMA_IRQHandler+0x694>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d045      	beq.n	80088f2 <HAL_DMA_IRQHandler+0x516>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a82      	ldr	r2, [pc, #520]	@ (8008a74 <HAL_DMA_IRQHandler+0x698>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d040      	beq.n	80088f2 <HAL_DMA_IRQHandler+0x516>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a80      	ldr	r2, [pc, #512]	@ (8008a78 <HAL_DMA_IRQHandler+0x69c>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d03b      	beq.n	80088f2 <HAL_DMA_IRQHandler+0x516>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a7f      	ldr	r2, [pc, #508]	@ (8008a7c <HAL_DMA_IRQHandler+0x6a0>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d036      	beq.n	80088f2 <HAL_DMA_IRQHandler+0x516>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a7d      	ldr	r2, [pc, #500]	@ (8008a80 <HAL_DMA_IRQHandler+0x6a4>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d031      	beq.n	80088f2 <HAL_DMA_IRQHandler+0x516>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a7c      	ldr	r2, [pc, #496]	@ (8008a84 <HAL_DMA_IRQHandler+0x6a8>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d02c      	beq.n	80088f2 <HAL_DMA_IRQHandler+0x516>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a7a      	ldr	r2, [pc, #488]	@ (8008a88 <HAL_DMA_IRQHandler+0x6ac>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d027      	beq.n	80088f2 <HAL_DMA_IRQHandler+0x516>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a79      	ldr	r2, [pc, #484]	@ (8008a8c <HAL_DMA_IRQHandler+0x6b0>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d022      	beq.n	80088f2 <HAL_DMA_IRQHandler+0x516>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a77      	ldr	r2, [pc, #476]	@ (8008a90 <HAL_DMA_IRQHandler+0x6b4>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d01d      	beq.n	80088f2 <HAL_DMA_IRQHandler+0x516>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a76      	ldr	r2, [pc, #472]	@ (8008a94 <HAL_DMA_IRQHandler+0x6b8>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d018      	beq.n	80088f2 <HAL_DMA_IRQHandler+0x516>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a74      	ldr	r2, [pc, #464]	@ (8008a98 <HAL_DMA_IRQHandler+0x6bc>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d013      	beq.n	80088f2 <HAL_DMA_IRQHandler+0x516>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a73      	ldr	r2, [pc, #460]	@ (8008a9c <HAL_DMA_IRQHandler+0x6c0>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d00e      	beq.n	80088f2 <HAL_DMA_IRQHandler+0x516>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a71      	ldr	r2, [pc, #452]	@ (8008aa0 <HAL_DMA_IRQHandler+0x6c4>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d009      	beq.n	80088f2 <HAL_DMA_IRQHandler+0x516>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a70      	ldr	r2, [pc, #448]	@ (8008aa4 <HAL_DMA_IRQHandler+0x6c8>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d004      	beq.n	80088f2 <HAL_DMA_IRQHandler+0x516>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a6e      	ldr	r2, [pc, #440]	@ (8008aa8 <HAL_DMA_IRQHandler+0x6cc>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d10a      	bne.n	8008908 <HAL_DMA_IRQHandler+0x52c>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f003 0308 	and.w	r3, r3, #8
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	bf14      	ite	ne
 8008900:	2301      	movne	r3, #1
 8008902:	2300      	moveq	r3, #0
 8008904:	b2db      	uxtb	r3, r3
 8008906:	e009      	b.n	800891c <HAL_DMA_IRQHandler+0x540>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f003 0304 	and.w	r3, r3, #4
 8008912:	2b00      	cmp	r3, #0
 8008914:	bf14      	ite	ne
 8008916:	2301      	movne	r3, #1
 8008918:	2300      	moveq	r3, #0
 800891a:	b2db      	uxtb	r3, r3
 800891c:	2b00      	cmp	r3, #0
 800891e:	d03e      	beq.n	800899e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008924:	f003 031f 	and.w	r3, r3, #31
 8008928:	2210      	movs	r2, #16
 800892a:	409a      	lsls	r2, r3
 800892c:	6a3b      	ldr	r3, [r7, #32]
 800892e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800893a:	2b00      	cmp	r3, #0
 800893c:	d018      	beq.n	8008970 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008948:	2b00      	cmp	r3, #0
 800894a:	d108      	bne.n	800895e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008950:	2b00      	cmp	r3, #0
 8008952:	d024      	beq.n	800899e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	4798      	blx	r3
 800895c:	e01f      	b.n	800899e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008962:	2b00      	cmp	r3, #0
 8008964:	d01b      	beq.n	800899e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	4798      	blx	r3
 800896e:	e016      	b.n	800899e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800897a:	2b00      	cmp	r3, #0
 800897c:	d107      	bne.n	800898e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f022 0208 	bic.w	r2, r2, #8
 800898c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008992:	2b00      	cmp	r3, #0
 8008994:	d003      	beq.n	800899e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80089a2:	f003 031f 	and.w	r3, r3, #31
 80089a6:	2220      	movs	r2, #32
 80089a8:	409a      	lsls	r2, r3
 80089aa:	69bb      	ldr	r3, [r7, #24]
 80089ac:	4013      	ands	r3, r2
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	f000 8110 	beq.w	8008bd4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a2c      	ldr	r2, [pc, #176]	@ (8008a6c <HAL_DMA_IRQHandler+0x690>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d04a      	beq.n	8008a54 <HAL_DMA_IRQHandler+0x678>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a2b      	ldr	r2, [pc, #172]	@ (8008a70 <HAL_DMA_IRQHandler+0x694>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d045      	beq.n	8008a54 <HAL_DMA_IRQHandler+0x678>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a29      	ldr	r2, [pc, #164]	@ (8008a74 <HAL_DMA_IRQHandler+0x698>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d040      	beq.n	8008a54 <HAL_DMA_IRQHandler+0x678>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a28      	ldr	r2, [pc, #160]	@ (8008a78 <HAL_DMA_IRQHandler+0x69c>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d03b      	beq.n	8008a54 <HAL_DMA_IRQHandler+0x678>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a26      	ldr	r2, [pc, #152]	@ (8008a7c <HAL_DMA_IRQHandler+0x6a0>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d036      	beq.n	8008a54 <HAL_DMA_IRQHandler+0x678>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a25      	ldr	r2, [pc, #148]	@ (8008a80 <HAL_DMA_IRQHandler+0x6a4>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d031      	beq.n	8008a54 <HAL_DMA_IRQHandler+0x678>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a23      	ldr	r2, [pc, #140]	@ (8008a84 <HAL_DMA_IRQHandler+0x6a8>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d02c      	beq.n	8008a54 <HAL_DMA_IRQHandler+0x678>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a22      	ldr	r2, [pc, #136]	@ (8008a88 <HAL_DMA_IRQHandler+0x6ac>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d027      	beq.n	8008a54 <HAL_DMA_IRQHandler+0x678>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a20      	ldr	r2, [pc, #128]	@ (8008a8c <HAL_DMA_IRQHandler+0x6b0>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d022      	beq.n	8008a54 <HAL_DMA_IRQHandler+0x678>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a1f      	ldr	r2, [pc, #124]	@ (8008a90 <HAL_DMA_IRQHandler+0x6b4>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d01d      	beq.n	8008a54 <HAL_DMA_IRQHandler+0x678>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a1d      	ldr	r2, [pc, #116]	@ (8008a94 <HAL_DMA_IRQHandler+0x6b8>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d018      	beq.n	8008a54 <HAL_DMA_IRQHandler+0x678>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a1c      	ldr	r2, [pc, #112]	@ (8008a98 <HAL_DMA_IRQHandler+0x6bc>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d013      	beq.n	8008a54 <HAL_DMA_IRQHandler+0x678>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a1a      	ldr	r2, [pc, #104]	@ (8008a9c <HAL_DMA_IRQHandler+0x6c0>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d00e      	beq.n	8008a54 <HAL_DMA_IRQHandler+0x678>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a19      	ldr	r2, [pc, #100]	@ (8008aa0 <HAL_DMA_IRQHandler+0x6c4>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d009      	beq.n	8008a54 <HAL_DMA_IRQHandler+0x678>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a17      	ldr	r2, [pc, #92]	@ (8008aa4 <HAL_DMA_IRQHandler+0x6c8>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d004      	beq.n	8008a54 <HAL_DMA_IRQHandler+0x678>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a16      	ldr	r2, [pc, #88]	@ (8008aa8 <HAL_DMA_IRQHandler+0x6cc>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d12b      	bne.n	8008aac <HAL_DMA_IRQHandler+0x6d0>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f003 0310 	and.w	r3, r3, #16
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	bf14      	ite	ne
 8008a62:	2301      	movne	r3, #1
 8008a64:	2300      	moveq	r3, #0
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	e02a      	b.n	8008ac0 <HAL_DMA_IRQHandler+0x6e4>
 8008a6a:	bf00      	nop
 8008a6c:	40020010 	.word	0x40020010
 8008a70:	40020028 	.word	0x40020028
 8008a74:	40020040 	.word	0x40020040
 8008a78:	40020058 	.word	0x40020058
 8008a7c:	40020070 	.word	0x40020070
 8008a80:	40020088 	.word	0x40020088
 8008a84:	400200a0 	.word	0x400200a0
 8008a88:	400200b8 	.word	0x400200b8
 8008a8c:	40020410 	.word	0x40020410
 8008a90:	40020428 	.word	0x40020428
 8008a94:	40020440 	.word	0x40020440
 8008a98:	40020458 	.word	0x40020458
 8008a9c:	40020470 	.word	0x40020470
 8008aa0:	40020488 	.word	0x40020488
 8008aa4:	400204a0 	.word	0x400204a0
 8008aa8:	400204b8 	.word	0x400204b8
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f003 0302 	and.w	r3, r3, #2
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	bf14      	ite	ne
 8008aba:	2301      	movne	r3, #1
 8008abc:	2300      	moveq	r3, #0
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	f000 8087 	beq.w	8008bd4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008aca:	f003 031f 	and.w	r3, r3, #31
 8008ace:	2220      	movs	r2, #32
 8008ad0:	409a      	lsls	r2, r3
 8008ad2:	6a3b      	ldr	r3, [r7, #32]
 8008ad4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	2b04      	cmp	r3, #4
 8008ae0:	d139      	bne.n	8008b56 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	681a      	ldr	r2, [r3, #0]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f022 0216 	bic.w	r2, r2, #22
 8008af0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	695a      	ldr	r2, [r3, #20]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008b00:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d103      	bne.n	8008b12 <HAL_DMA_IRQHandler+0x736>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d007      	beq.n	8008b22 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f022 0208 	bic.w	r2, r2, #8
 8008b20:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b26:	f003 031f 	and.w	r3, r3, #31
 8008b2a:	223f      	movs	r2, #63	@ 0x3f
 8008b2c:	409a      	lsls	r2, r3
 8008b2e:	6a3b      	ldr	r3, [r7, #32]
 8008b30:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2201      	movs	r2, #1
 8008b36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	f000 834a 	beq.w	80091e0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	4798      	blx	r3
          }
          return;
 8008b54:	e344      	b.n	80091e0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d018      	beq.n	8008b96 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d108      	bne.n	8008b84 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d02c      	beq.n	8008bd4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	4798      	blx	r3
 8008b82:	e027      	b.n	8008bd4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d023      	beq.n	8008bd4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	4798      	blx	r3
 8008b94:	e01e      	b.n	8008bd4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d10f      	bne.n	8008bc4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f022 0210 	bic.w	r2, r2, #16
 8008bb2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d003      	beq.n	8008bd4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	f000 8306 	beq.w	80091ea <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008be2:	f003 0301 	and.w	r3, r3, #1
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	f000 8088 	beq.w	8008cfc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2204      	movs	r2, #4
 8008bf0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a7a      	ldr	r2, [pc, #488]	@ (8008de4 <HAL_DMA_IRQHandler+0xa08>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d04a      	beq.n	8008c94 <HAL_DMA_IRQHandler+0x8b8>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a79      	ldr	r2, [pc, #484]	@ (8008de8 <HAL_DMA_IRQHandler+0xa0c>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d045      	beq.n	8008c94 <HAL_DMA_IRQHandler+0x8b8>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a77      	ldr	r2, [pc, #476]	@ (8008dec <HAL_DMA_IRQHandler+0xa10>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d040      	beq.n	8008c94 <HAL_DMA_IRQHandler+0x8b8>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a76      	ldr	r2, [pc, #472]	@ (8008df0 <HAL_DMA_IRQHandler+0xa14>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d03b      	beq.n	8008c94 <HAL_DMA_IRQHandler+0x8b8>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a74      	ldr	r2, [pc, #464]	@ (8008df4 <HAL_DMA_IRQHandler+0xa18>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d036      	beq.n	8008c94 <HAL_DMA_IRQHandler+0x8b8>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a73      	ldr	r2, [pc, #460]	@ (8008df8 <HAL_DMA_IRQHandler+0xa1c>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d031      	beq.n	8008c94 <HAL_DMA_IRQHandler+0x8b8>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a71      	ldr	r2, [pc, #452]	@ (8008dfc <HAL_DMA_IRQHandler+0xa20>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d02c      	beq.n	8008c94 <HAL_DMA_IRQHandler+0x8b8>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a70      	ldr	r2, [pc, #448]	@ (8008e00 <HAL_DMA_IRQHandler+0xa24>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d027      	beq.n	8008c94 <HAL_DMA_IRQHandler+0x8b8>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a6e      	ldr	r2, [pc, #440]	@ (8008e04 <HAL_DMA_IRQHandler+0xa28>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d022      	beq.n	8008c94 <HAL_DMA_IRQHandler+0x8b8>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a6d      	ldr	r2, [pc, #436]	@ (8008e08 <HAL_DMA_IRQHandler+0xa2c>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d01d      	beq.n	8008c94 <HAL_DMA_IRQHandler+0x8b8>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a6b      	ldr	r2, [pc, #428]	@ (8008e0c <HAL_DMA_IRQHandler+0xa30>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d018      	beq.n	8008c94 <HAL_DMA_IRQHandler+0x8b8>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a6a      	ldr	r2, [pc, #424]	@ (8008e10 <HAL_DMA_IRQHandler+0xa34>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d013      	beq.n	8008c94 <HAL_DMA_IRQHandler+0x8b8>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a68      	ldr	r2, [pc, #416]	@ (8008e14 <HAL_DMA_IRQHandler+0xa38>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d00e      	beq.n	8008c94 <HAL_DMA_IRQHandler+0x8b8>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a67      	ldr	r2, [pc, #412]	@ (8008e18 <HAL_DMA_IRQHandler+0xa3c>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d009      	beq.n	8008c94 <HAL_DMA_IRQHandler+0x8b8>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a65      	ldr	r2, [pc, #404]	@ (8008e1c <HAL_DMA_IRQHandler+0xa40>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d004      	beq.n	8008c94 <HAL_DMA_IRQHandler+0x8b8>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4a64      	ldr	r2, [pc, #400]	@ (8008e20 <HAL_DMA_IRQHandler+0xa44>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d108      	bne.n	8008ca6 <HAL_DMA_IRQHandler+0x8ca>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f022 0201 	bic.w	r2, r2, #1
 8008ca2:	601a      	str	r2, [r3, #0]
 8008ca4:	e007      	b.n	8008cb6 <HAL_DMA_IRQHandler+0x8da>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f022 0201 	bic.w	r2, r2, #1
 8008cb4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	3301      	adds	r3, #1
 8008cba:	60fb      	str	r3, [r7, #12]
 8008cbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d307      	bcc.n	8008cd2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f003 0301 	and.w	r3, r3, #1
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d1f2      	bne.n	8008cb6 <HAL_DMA_IRQHandler+0x8da>
 8008cd0:	e000      	b.n	8008cd4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8008cd2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f003 0301 	and.w	r3, r3, #1
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d004      	beq.n	8008cec <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2203      	movs	r2, #3
 8008ce6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8008cea:	e003      	b.n	8008cf4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	f000 8272 	beq.w	80091ea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	4798      	blx	r3
 8008d0e:	e26c      	b.n	80091ea <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a43      	ldr	r2, [pc, #268]	@ (8008e24 <HAL_DMA_IRQHandler+0xa48>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d022      	beq.n	8008d60 <HAL_DMA_IRQHandler+0x984>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4a42      	ldr	r2, [pc, #264]	@ (8008e28 <HAL_DMA_IRQHandler+0xa4c>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d01d      	beq.n	8008d60 <HAL_DMA_IRQHandler+0x984>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a40      	ldr	r2, [pc, #256]	@ (8008e2c <HAL_DMA_IRQHandler+0xa50>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d018      	beq.n	8008d60 <HAL_DMA_IRQHandler+0x984>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a3f      	ldr	r2, [pc, #252]	@ (8008e30 <HAL_DMA_IRQHandler+0xa54>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d013      	beq.n	8008d60 <HAL_DMA_IRQHandler+0x984>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a3d      	ldr	r2, [pc, #244]	@ (8008e34 <HAL_DMA_IRQHandler+0xa58>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d00e      	beq.n	8008d60 <HAL_DMA_IRQHandler+0x984>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a3c      	ldr	r2, [pc, #240]	@ (8008e38 <HAL_DMA_IRQHandler+0xa5c>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d009      	beq.n	8008d60 <HAL_DMA_IRQHandler+0x984>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a3a      	ldr	r2, [pc, #232]	@ (8008e3c <HAL_DMA_IRQHandler+0xa60>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d004      	beq.n	8008d60 <HAL_DMA_IRQHandler+0x984>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a39      	ldr	r2, [pc, #228]	@ (8008e40 <HAL_DMA_IRQHandler+0xa64>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d101      	bne.n	8008d64 <HAL_DMA_IRQHandler+0x988>
 8008d60:	2301      	movs	r3, #1
 8008d62:	e000      	b.n	8008d66 <HAL_DMA_IRQHandler+0x98a>
 8008d64:	2300      	movs	r3, #0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	f000 823f 	beq.w	80091ea <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d78:	f003 031f 	and.w	r3, r3, #31
 8008d7c:	2204      	movs	r2, #4
 8008d7e:	409a      	lsls	r2, r3
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	4013      	ands	r3, r2
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	f000 80cd 	beq.w	8008f24 <HAL_DMA_IRQHandler+0xb48>
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	f003 0304 	and.w	r3, r3, #4
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	f000 80c7 	beq.w	8008f24 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d9a:	f003 031f 	and.w	r3, r3, #31
 8008d9e:	2204      	movs	r2, #4
 8008da0:	409a      	lsls	r2, r3
 8008da2:	69fb      	ldr	r3, [r7, #28]
 8008da4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d049      	beq.n	8008e44 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d109      	bne.n	8008dce <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	f000 8210 	beq.w	80091e4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008dcc:	e20a      	b.n	80091e4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	f000 8206 	beq.w	80091e4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008de0:	e200      	b.n	80091e4 <HAL_DMA_IRQHandler+0xe08>
 8008de2:	bf00      	nop
 8008de4:	40020010 	.word	0x40020010
 8008de8:	40020028 	.word	0x40020028
 8008dec:	40020040 	.word	0x40020040
 8008df0:	40020058 	.word	0x40020058
 8008df4:	40020070 	.word	0x40020070
 8008df8:	40020088 	.word	0x40020088
 8008dfc:	400200a0 	.word	0x400200a0
 8008e00:	400200b8 	.word	0x400200b8
 8008e04:	40020410 	.word	0x40020410
 8008e08:	40020428 	.word	0x40020428
 8008e0c:	40020440 	.word	0x40020440
 8008e10:	40020458 	.word	0x40020458
 8008e14:	40020470 	.word	0x40020470
 8008e18:	40020488 	.word	0x40020488
 8008e1c:	400204a0 	.word	0x400204a0
 8008e20:	400204b8 	.word	0x400204b8
 8008e24:	58025408 	.word	0x58025408
 8008e28:	5802541c 	.word	0x5802541c
 8008e2c:	58025430 	.word	0x58025430
 8008e30:	58025444 	.word	0x58025444
 8008e34:	58025458 	.word	0x58025458
 8008e38:	5802546c 	.word	0x5802546c
 8008e3c:	58025480 	.word	0x58025480
 8008e40:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	f003 0320 	and.w	r3, r3, #32
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d160      	bne.n	8008f10 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a7f      	ldr	r2, [pc, #508]	@ (8009050 <HAL_DMA_IRQHandler+0xc74>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d04a      	beq.n	8008eee <HAL_DMA_IRQHandler+0xb12>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a7d      	ldr	r2, [pc, #500]	@ (8009054 <HAL_DMA_IRQHandler+0xc78>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d045      	beq.n	8008eee <HAL_DMA_IRQHandler+0xb12>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a7c      	ldr	r2, [pc, #496]	@ (8009058 <HAL_DMA_IRQHandler+0xc7c>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d040      	beq.n	8008eee <HAL_DMA_IRQHandler+0xb12>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a7a      	ldr	r2, [pc, #488]	@ (800905c <HAL_DMA_IRQHandler+0xc80>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d03b      	beq.n	8008eee <HAL_DMA_IRQHandler+0xb12>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a79      	ldr	r2, [pc, #484]	@ (8009060 <HAL_DMA_IRQHandler+0xc84>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d036      	beq.n	8008eee <HAL_DMA_IRQHandler+0xb12>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a77      	ldr	r2, [pc, #476]	@ (8009064 <HAL_DMA_IRQHandler+0xc88>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d031      	beq.n	8008eee <HAL_DMA_IRQHandler+0xb12>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a76      	ldr	r2, [pc, #472]	@ (8009068 <HAL_DMA_IRQHandler+0xc8c>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d02c      	beq.n	8008eee <HAL_DMA_IRQHandler+0xb12>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a74      	ldr	r2, [pc, #464]	@ (800906c <HAL_DMA_IRQHandler+0xc90>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d027      	beq.n	8008eee <HAL_DMA_IRQHandler+0xb12>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a73      	ldr	r2, [pc, #460]	@ (8009070 <HAL_DMA_IRQHandler+0xc94>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d022      	beq.n	8008eee <HAL_DMA_IRQHandler+0xb12>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a71      	ldr	r2, [pc, #452]	@ (8009074 <HAL_DMA_IRQHandler+0xc98>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d01d      	beq.n	8008eee <HAL_DMA_IRQHandler+0xb12>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a70      	ldr	r2, [pc, #448]	@ (8009078 <HAL_DMA_IRQHandler+0xc9c>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d018      	beq.n	8008eee <HAL_DMA_IRQHandler+0xb12>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a6e      	ldr	r2, [pc, #440]	@ (800907c <HAL_DMA_IRQHandler+0xca0>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d013      	beq.n	8008eee <HAL_DMA_IRQHandler+0xb12>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a6d      	ldr	r2, [pc, #436]	@ (8009080 <HAL_DMA_IRQHandler+0xca4>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d00e      	beq.n	8008eee <HAL_DMA_IRQHandler+0xb12>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4a6b      	ldr	r2, [pc, #428]	@ (8009084 <HAL_DMA_IRQHandler+0xca8>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d009      	beq.n	8008eee <HAL_DMA_IRQHandler+0xb12>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4a6a      	ldr	r2, [pc, #424]	@ (8009088 <HAL_DMA_IRQHandler+0xcac>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d004      	beq.n	8008eee <HAL_DMA_IRQHandler+0xb12>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a68      	ldr	r2, [pc, #416]	@ (800908c <HAL_DMA_IRQHandler+0xcb0>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d108      	bne.n	8008f00 <HAL_DMA_IRQHandler+0xb24>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	681a      	ldr	r2, [r3, #0]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f022 0208 	bic.w	r2, r2, #8
 8008efc:	601a      	str	r2, [r3, #0]
 8008efe:	e007      	b.n	8008f10 <HAL_DMA_IRQHandler+0xb34>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f022 0204 	bic.w	r2, r2, #4
 8008f0e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	f000 8165 	beq.w	80091e4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008f22:	e15f      	b.n	80091e4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f28:	f003 031f 	and.w	r3, r3, #31
 8008f2c:	2202      	movs	r2, #2
 8008f2e:	409a      	lsls	r2, r3
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	4013      	ands	r3, r2
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	f000 80c5 	beq.w	80090c4 <HAL_DMA_IRQHandler+0xce8>
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	f003 0302 	and.w	r3, r3, #2
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f000 80bf 	beq.w	80090c4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f4a:	f003 031f 	and.w	r3, r3, #31
 8008f4e:	2202      	movs	r2, #2
 8008f50:	409a      	lsls	r2, r3
 8008f52:	69fb      	ldr	r3, [r7, #28]
 8008f54:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d018      	beq.n	8008f92 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d109      	bne.n	8008f7e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	f000 813a 	beq.w	80091e8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008f7c:	e134      	b.n	80091e8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	f000 8130 	beq.w	80091e8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008f90:	e12a      	b.n	80091e8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	f003 0320 	and.w	r3, r3, #32
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	f040 8089 	bne.w	80090b0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a2b      	ldr	r2, [pc, #172]	@ (8009050 <HAL_DMA_IRQHandler+0xc74>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d04a      	beq.n	800903e <HAL_DMA_IRQHandler+0xc62>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a29      	ldr	r2, [pc, #164]	@ (8009054 <HAL_DMA_IRQHandler+0xc78>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d045      	beq.n	800903e <HAL_DMA_IRQHandler+0xc62>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4a28      	ldr	r2, [pc, #160]	@ (8009058 <HAL_DMA_IRQHandler+0xc7c>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d040      	beq.n	800903e <HAL_DMA_IRQHandler+0xc62>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a26      	ldr	r2, [pc, #152]	@ (800905c <HAL_DMA_IRQHandler+0xc80>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d03b      	beq.n	800903e <HAL_DMA_IRQHandler+0xc62>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a25      	ldr	r2, [pc, #148]	@ (8009060 <HAL_DMA_IRQHandler+0xc84>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d036      	beq.n	800903e <HAL_DMA_IRQHandler+0xc62>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a23      	ldr	r2, [pc, #140]	@ (8009064 <HAL_DMA_IRQHandler+0xc88>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d031      	beq.n	800903e <HAL_DMA_IRQHandler+0xc62>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a22      	ldr	r2, [pc, #136]	@ (8009068 <HAL_DMA_IRQHandler+0xc8c>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d02c      	beq.n	800903e <HAL_DMA_IRQHandler+0xc62>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a20      	ldr	r2, [pc, #128]	@ (800906c <HAL_DMA_IRQHandler+0xc90>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d027      	beq.n	800903e <HAL_DMA_IRQHandler+0xc62>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a1f      	ldr	r2, [pc, #124]	@ (8009070 <HAL_DMA_IRQHandler+0xc94>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d022      	beq.n	800903e <HAL_DMA_IRQHandler+0xc62>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a1d      	ldr	r2, [pc, #116]	@ (8009074 <HAL_DMA_IRQHandler+0xc98>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d01d      	beq.n	800903e <HAL_DMA_IRQHandler+0xc62>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a1c      	ldr	r2, [pc, #112]	@ (8009078 <HAL_DMA_IRQHandler+0xc9c>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d018      	beq.n	800903e <HAL_DMA_IRQHandler+0xc62>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a1a      	ldr	r2, [pc, #104]	@ (800907c <HAL_DMA_IRQHandler+0xca0>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d013      	beq.n	800903e <HAL_DMA_IRQHandler+0xc62>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a19      	ldr	r2, [pc, #100]	@ (8009080 <HAL_DMA_IRQHandler+0xca4>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d00e      	beq.n	800903e <HAL_DMA_IRQHandler+0xc62>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a17      	ldr	r2, [pc, #92]	@ (8009084 <HAL_DMA_IRQHandler+0xca8>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d009      	beq.n	800903e <HAL_DMA_IRQHandler+0xc62>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a16      	ldr	r2, [pc, #88]	@ (8009088 <HAL_DMA_IRQHandler+0xcac>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d004      	beq.n	800903e <HAL_DMA_IRQHandler+0xc62>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a14      	ldr	r2, [pc, #80]	@ (800908c <HAL_DMA_IRQHandler+0xcb0>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d128      	bne.n	8009090 <HAL_DMA_IRQHandler+0xcb4>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	681a      	ldr	r2, [r3, #0]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f022 0214 	bic.w	r2, r2, #20
 800904c:	601a      	str	r2, [r3, #0]
 800904e:	e027      	b.n	80090a0 <HAL_DMA_IRQHandler+0xcc4>
 8009050:	40020010 	.word	0x40020010
 8009054:	40020028 	.word	0x40020028
 8009058:	40020040 	.word	0x40020040
 800905c:	40020058 	.word	0x40020058
 8009060:	40020070 	.word	0x40020070
 8009064:	40020088 	.word	0x40020088
 8009068:	400200a0 	.word	0x400200a0
 800906c:	400200b8 	.word	0x400200b8
 8009070:	40020410 	.word	0x40020410
 8009074:	40020428 	.word	0x40020428
 8009078:	40020440 	.word	0x40020440
 800907c:	40020458 	.word	0x40020458
 8009080:	40020470 	.word	0x40020470
 8009084:	40020488 	.word	0x40020488
 8009088:	400204a0 	.word	0x400204a0
 800908c:	400204b8 	.word	0x400204b8
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	681a      	ldr	r2, [r3, #0]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f022 020a 	bic.w	r2, r2, #10
 800909e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2201      	movs	r2, #1
 80090a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2200      	movs	r2, #0
 80090ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	f000 8097 	beq.w	80091e8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80090c2:	e091      	b.n	80091e8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090c8:	f003 031f 	and.w	r3, r3, #31
 80090cc:	2208      	movs	r2, #8
 80090ce:	409a      	lsls	r2, r3
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	4013      	ands	r3, r2
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	f000 8088 	beq.w	80091ea <HAL_DMA_IRQHandler+0xe0e>
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	f003 0308 	and.w	r3, r3, #8
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	f000 8082 	beq.w	80091ea <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a41      	ldr	r2, [pc, #260]	@ (80091f0 <HAL_DMA_IRQHandler+0xe14>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d04a      	beq.n	8009186 <HAL_DMA_IRQHandler+0xdaa>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a3f      	ldr	r2, [pc, #252]	@ (80091f4 <HAL_DMA_IRQHandler+0xe18>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d045      	beq.n	8009186 <HAL_DMA_IRQHandler+0xdaa>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a3e      	ldr	r2, [pc, #248]	@ (80091f8 <HAL_DMA_IRQHandler+0xe1c>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d040      	beq.n	8009186 <HAL_DMA_IRQHandler+0xdaa>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a3c      	ldr	r2, [pc, #240]	@ (80091fc <HAL_DMA_IRQHandler+0xe20>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d03b      	beq.n	8009186 <HAL_DMA_IRQHandler+0xdaa>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a3b      	ldr	r2, [pc, #236]	@ (8009200 <HAL_DMA_IRQHandler+0xe24>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d036      	beq.n	8009186 <HAL_DMA_IRQHandler+0xdaa>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a39      	ldr	r2, [pc, #228]	@ (8009204 <HAL_DMA_IRQHandler+0xe28>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d031      	beq.n	8009186 <HAL_DMA_IRQHandler+0xdaa>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a38      	ldr	r2, [pc, #224]	@ (8009208 <HAL_DMA_IRQHandler+0xe2c>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d02c      	beq.n	8009186 <HAL_DMA_IRQHandler+0xdaa>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a36      	ldr	r2, [pc, #216]	@ (800920c <HAL_DMA_IRQHandler+0xe30>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d027      	beq.n	8009186 <HAL_DMA_IRQHandler+0xdaa>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a35      	ldr	r2, [pc, #212]	@ (8009210 <HAL_DMA_IRQHandler+0xe34>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d022      	beq.n	8009186 <HAL_DMA_IRQHandler+0xdaa>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a33      	ldr	r2, [pc, #204]	@ (8009214 <HAL_DMA_IRQHandler+0xe38>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d01d      	beq.n	8009186 <HAL_DMA_IRQHandler+0xdaa>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4a32      	ldr	r2, [pc, #200]	@ (8009218 <HAL_DMA_IRQHandler+0xe3c>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d018      	beq.n	8009186 <HAL_DMA_IRQHandler+0xdaa>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a30      	ldr	r2, [pc, #192]	@ (800921c <HAL_DMA_IRQHandler+0xe40>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d013      	beq.n	8009186 <HAL_DMA_IRQHandler+0xdaa>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4a2f      	ldr	r2, [pc, #188]	@ (8009220 <HAL_DMA_IRQHandler+0xe44>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d00e      	beq.n	8009186 <HAL_DMA_IRQHandler+0xdaa>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a2d      	ldr	r2, [pc, #180]	@ (8009224 <HAL_DMA_IRQHandler+0xe48>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d009      	beq.n	8009186 <HAL_DMA_IRQHandler+0xdaa>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a2c      	ldr	r2, [pc, #176]	@ (8009228 <HAL_DMA_IRQHandler+0xe4c>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d004      	beq.n	8009186 <HAL_DMA_IRQHandler+0xdaa>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a2a      	ldr	r2, [pc, #168]	@ (800922c <HAL_DMA_IRQHandler+0xe50>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d108      	bne.n	8009198 <HAL_DMA_IRQHandler+0xdbc>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f022 021c 	bic.w	r2, r2, #28
 8009194:	601a      	str	r2, [r3, #0]
 8009196:	e007      	b.n	80091a8 <HAL_DMA_IRQHandler+0xdcc>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f022 020e 	bic.w	r2, r2, #14
 80091a6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80091ac:	f003 031f 	and.w	r3, r3, #31
 80091b0:	2201      	movs	r2, #1
 80091b2:	409a      	lsls	r2, r3
 80091b4:	69fb      	ldr	r3, [r7, #28]
 80091b6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2201      	movs	r2, #1
 80091bc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2201      	movs	r2, #1
 80091c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2200      	movs	r2, #0
 80091ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d009      	beq.n	80091ea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	4798      	blx	r3
 80091de:	e004      	b.n	80091ea <HAL_DMA_IRQHandler+0xe0e>
          return;
 80091e0:	bf00      	nop
 80091e2:	e002      	b.n	80091ea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80091e4:	bf00      	nop
 80091e6:	e000      	b.n	80091ea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80091e8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80091ea:	3728      	adds	r7, #40	@ 0x28
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}
 80091f0:	40020010 	.word	0x40020010
 80091f4:	40020028 	.word	0x40020028
 80091f8:	40020040 	.word	0x40020040
 80091fc:	40020058 	.word	0x40020058
 8009200:	40020070 	.word	0x40020070
 8009204:	40020088 	.word	0x40020088
 8009208:	400200a0 	.word	0x400200a0
 800920c:	400200b8 	.word	0x400200b8
 8009210:	40020410 	.word	0x40020410
 8009214:	40020428 	.word	0x40020428
 8009218:	40020440 	.word	0x40020440
 800921c:	40020458 	.word	0x40020458
 8009220:	40020470 	.word	0x40020470
 8009224:	40020488 	.word	0x40020488
 8009228:	400204a0 	.word	0x400204a0
 800922c:	400204b8 	.word	0x400204b8

08009230 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009230:	b480      	push	{r7}
 8009232:	b087      	sub	sp, #28
 8009234:	af00      	add	r7, sp, #0
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	60b9      	str	r1, [r7, #8]
 800923a:	607a      	str	r2, [r7, #4]
 800923c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009242:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009248:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4a7f      	ldr	r2, [pc, #508]	@ (800944c <DMA_SetConfig+0x21c>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d072      	beq.n	800933a <DMA_SetConfig+0x10a>
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a7d      	ldr	r2, [pc, #500]	@ (8009450 <DMA_SetConfig+0x220>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d06d      	beq.n	800933a <DMA_SetConfig+0x10a>
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a7c      	ldr	r2, [pc, #496]	@ (8009454 <DMA_SetConfig+0x224>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d068      	beq.n	800933a <DMA_SetConfig+0x10a>
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a7a      	ldr	r2, [pc, #488]	@ (8009458 <DMA_SetConfig+0x228>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d063      	beq.n	800933a <DMA_SetConfig+0x10a>
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a79      	ldr	r2, [pc, #484]	@ (800945c <DMA_SetConfig+0x22c>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d05e      	beq.n	800933a <DMA_SetConfig+0x10a>
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	4a77      	ldr	r2, [pc, #476]	@ (8009460 <DMA_SetConfig+0x230>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d059      	beq.n	800933a <DMA_SetConfig+0x10a>
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4a76      	ldr	r2, [pc, #472]	@ (8009464 <DMA_SetConfig+0x234>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d054      	beq.n	800933a <DMA_SetConfig+0x10a>
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	4a74      	ldr	r2, [pc, #464]	@ (8009468 <DMA_SetConfig+0x238>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d04f      	beq.n	800933a <DMA_SetConfig+0x10a>
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4a73      	ldr	r2, [pc, #460]	@ (800946c <DMA_SetConfig+0x23c>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d04a      	beq.n	800933a <DMA_SetConfig+0x10a>
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4a71      	ldr	r2, [pc, #452]	@ (8009470 <DMA_SetConfig+0x240>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d045      	beq.n	800933a <DMA_SetConfig+0x10a>
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4a70      	ldr	r2, [pc, #448]	@ (8009474 <DMA_SetConfig+0x244>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d040      	beq.n	800933a <DMA_SetConfig+0x10a>
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4a6e      	ldr	r2, [pc, #440]	@ (8009478 <DMA_SetConfig+0x248>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d03b      	beq.n	800933a <DMA_SetConfig+0x10a>
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4a6d      	ldr	r2, [pc, #436]	@ (800947c <DMA_SetConfig+0x24c>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d036      	beq.n	800933a <DMA_SetConfig+0x10a>
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4a6b      	ldr	r2, [pc, #428]	@ (8009480 <DMA_SetConfig+0x250>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d031      	beq.n	800933a <DMA_SetConfig+0x10a>
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	4a6a      	ldr	r2, [pc, #424]	@ (8009484 <DMA_SetConfig+0x254>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d02c      	beq.n	800933a <DMA_SetConfig+0x10a>
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4a68      	ldr	r2, [pc, #416]	@ (8009488 <DMA_SetConfig+0x258>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d027      	beq.n	800933a <DMA_SetConfig+0x10a>
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a67      	ldr	r2, [pc, #412]	@ (800948c <DMA_SetConfig+0x25c>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d022      	beq.n	800933a <DMA_SetConfig+0x10a>
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a65      	ldr	r2, [pc, #404]	@ (8009490 <DMA_SetConfig+0x260>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d01d      	beq.n	800933a <DMA_SetConfig+0x10a>
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a64      	ldr	r2, [pc, #400]	@ (8009494 <DMA_SetConfig+0x264>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d018      	beq.n	800933a <DMA_SetConfig+0x10a>
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a62      	ldr	r2, [pc, #392]	@ (8009498 <DMA_SetConfig+0x268>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d013      	beq.n	800933a <DMA_SetConfig+0x10a>
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a61      	ldr	r2, [pc, #388]	@ (800949c <DMA_SetConfig+0x26c>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d00e      	beq.n	800933a <DMA_SetConfig+0x10a>
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a5f      	ldr	r2, [pc, #380]	@ (80094a0 <DMA_SetConfig+0x270>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d009      	beq.n	800933a <DMA_SetConfig+0x10a>
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a5e      	ldr	r2, [pc, #376]	@ (80094a4 <DMA_SetConfig+0x274>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d004      	beq.n	800933a <DMA_SetConfig+0x10a>
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a5c      	ldr	r2, [pc, #368]	@ (80094a8 <DMA_SetConfig+0x278>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d101      	bne.n	800933e <DMA_SetConfig+0x10e>
 800933a:	2301      	movs	r3, #1
 800933c:	e000      	b.n	8009340 <DMA_SetConfig+0x110>
 800933e:	2300      	movs	r3, #0
 8009340:	2b00      	cmp	r3, #0
 8009342:	d00d      	beq.n	8009360 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009348:	68fa      	ldr	r2, [r7, #12]
 800934a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800934c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009352:	2b00      	cmp	r3, #0
 8009354:	d004      	beq.n	8009360 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800935a:	68fa      	ldr	r2, [r7, #12]
 800935c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800935e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4a39      	ldr	r2, [pc, #228]	@ (800944c <DMA_SetConfig+0x21c>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d04a      	beq.n	8009400 <DMA_SetConfig+0x1d0>
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4a38      	ldr	r2, [pc, #224]	@ (8009450 <DMA_SetConfig+0x220>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d045      	beq.n	8009400 <DMA_SetConfig+0x1d0>
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	4a36      	ldr	r2, [pc, #216]	@ (8009454 <DMA_SetConfig+0x224>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d040      	beq.n	8009400 <DMA_SetConfig+0x1d0>
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	4a35      	ldr	r2, [pc, #212]	@ (8009458 <DMA_SetConfig+0x228>)
 8009384:	4293      	cmp	r3, r2
 8009386:	d03b      	beq.n	8009400 <DMA_SetConfig+0x1d0>
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	4a33      	ldr	r2, [pc, #204]	@ (800945c <DMA_SetConfig+0x22c>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d036      	beq.n	8009400 <DMA_SetConfig+0x1d0>
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4a32      	ldr	r2, [pc, #200]	@ (8009460 <DMA_SetConfig+0x230>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d031      	beq.n	8009400 <DMA_SetConfig+0x1d0>
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a30      	ldr	r2, [pc, #192]	@ (8009464 <DMA_SetConfig+0x234>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d02c      	beq.n	8009400 <DMA_SetConfig+0x1d0>
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4a2f      	ldr	r2, [pc, #188]	@ (8009468 <DMA_SetConfig+0x238>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d027      	beq.n	8009400 <DMA_SetConfig+0x1d0>
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a2d      	ldr	r2, [pc, #180]	@ (800946c <DMA_SetConfig+0x23c>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d022      	beq.n	8009400 <DMA_SetConfig+0x1d0>
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4a2c      	ldr	r2, [pc, #176]	@ (8009470 <DMA_SetConfig+0x240>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d01d      	beq.n	8009400 <DMA_SetConfig+0x1d0>
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a2a      	ldr	r2, [pc, #168]	@ (8009474 <DMA_SetConfig+0x244>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d018      	beq.n	8009400 <DMA_SetConfig+0x1d0>
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a29      	ldr	r2, [pc, #164]	@ (8009478 <DMA_SetConfig+0x248>)
 80093d4:	4293      	cmp	r3, r2
 80093d6:	d013      	beq.n	8009400 <DMA_SetConfig+0x1d0>
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a27      	ldr	r2, [pc, #156]	@ (800947c <DMA_SetConfig+0x24c>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d00e      	beq.n	8009400 <DMA_SetConfig+0x1d0>
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a26      	ldr	r2, [pc, #152]	@ (8009480 <DMA_SetConfig+0x250>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d009      	beq.n	8009400 <DMA_SetConfig+0x1d0>
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a24      	ldr	r2, [pc, #144]	@ (8009484 <DMA_SetConfig+0x254>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d004      	beq.n	8009400 <DMA_SetConfig+0x1d0>
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4a23      	ldr	r2, [pc, #140]	@ (8009488 <DMA_SetConfig+0x258>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d101      	bne.n	8009404 <DMA_SetConfig+0x1d4>
 8009400:	2301      	movs	r3, #1
 8009402:	e000      	b.n	8009406 <DMA_SetConfig+0x1d6>
 8009404:	2300      	movs	r3, #0
 8009406:	2b00      	cmp	r3, #0
 8009408:	d059      	beq.n	80094be <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800940e:	f003 031f 	and.w	r3, r3, #31
 8009412:	223f      	movs	r2, #63	@ 0x3f
 8009414:	409a      	lsls	r2, r3
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	681a      	ldr	r2, [r3, #0]
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009428:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	683a      	ldr	r2, [r7, #0]
 8009430:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	689b      	ldr	r3, [r3, #8]
 8009436:	2b40      	cmp	r3, #64	@ 0x40
 8009438:	d138      	bne.n	80094ac <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	68ba      	ldr	r2, [r7, #8]
 8009448:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800944a:	e086      	b.n	800955a <DMA_SetConfig+0x32a>
 800944c:	40020010 	.word	0x40020010
 8009450:	40020028 	.word	0x40020028
 8009454:	40020040 	.word	0x40020040
 8009458:	40020058 	.word	0x40020058
 800945c:	40020070 	.word	0x40020070
 8009460:	40020088 	.word	0x40020088
 8009464:	400200a0 	.word	0x400200a0
 8009468:	400200b8 	.word	0x400200b8
 800946c:	40020410 	.word	0x40020410
 8009470:	40020428 	.word	0x40020428
 8009474:	40020440 	.word	0x40020440
 8009478:	40020458 	.word	0x40020458
 800947c:	40020470 	.word	0x40020470
 8009480:	40020488 	.word	0x40020488
 8009484:	400204a0 	.word	0x400204a0
 8009488:	400204b8 	.word	0x400204b8
 800948c:	58025408 	.word	0x58025408
 8009490:	5802541c 	.word	0x5802541c
 8009494:	58025430 	.word	0x58025430
 8009498:	58025444 	.word	0x58025444
 800949c:	58025458 	.word	0x58025458
 80094a0:	5802546c 	.word	0x5802546c
 80094a4:	58025480 	.word	0x58025480
 80094a8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	68ba      	ldr	r2, [r7, #8]
 80094b2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	687a      	ldr	r2, [r7, #4]
 80094ba:	60da      	str	r2, [r3, #12]
}
 80094bc:	e04d      	b.n	800955a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4a29      	ldr	r2, [pc, #164]	@ (8009568 <DMA_SetConfig+0x338>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d022      	beq.n	800950e <DMA_SetConfig+0x2de>
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a27      	ldr	r2, [pc, #156]	@ (800956c <DMA_SetConfig+0x33c>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d01d      	beq.n	800950e <DMA_SetConfig+0x2de>
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a26      	ldr	r2, [pc, #152]	@ (8009570 <DMA_SetConfig+0x340>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d018      	beq.n	800950e <DMA_SetConfig+0x2de>
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a24      	ldr	r2, [pc, #144]	@ (8009574 <DMA_SetConfig+0x344>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d013      	beq.n	800950e <DMA_SetConfig+0x2de>
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a23      	ldr	r2, [pc, #140]	@ (8009578 <DMA_SetConfig+0x348>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d00e      	beq.n	800950e <DMA_SetConfig+0x2de>
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4a21      	ldr	r2, [pc, #132]	@ (800957c <DMA_SetConfig+0x34c>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d009      	beq.n	800950e <DMA_SetConfig+0x2de>
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4a20      	ldr	r2, [pc, #128]	@ (8009580 <DMA_SetConfig+0x350>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d004      	beq.n	800950e <DMA_SetConfig+0x2de>
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	4a1e      	ldr	r2, [pc, #120]	@ (8009584 <DMA_SetConfig+0x354>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d101      	bne.n	8009512 <DMA_SetConfig+0x2e2>
 800950e:	2301      	movs	r3, #1
 8009510:	e000      	b.n	8009514 <DMA_SetConfig+0x2e4>
 8009512:	2300      	movs	r3, #0
 8009514:	2b00      	cmp	r3, #0
 8009516:	d020      	beq.n	800955a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800951c:	f003 031f 	and.w	r3, r3, #31
 8009520:	2201      	movs	r2, #1
 8009522:	409a      	lsls	r2, r3
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	683a      	ldr	r2, [r7, #0]
 800952e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	2b40      	cmp	r3, #64	@ 0x40
 8009536:	d108      	bne.n	800954a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	687a      	ldr	r2, [r7, #4]
 800953e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	68ba      	ldr	r2, [r7, #8]
 8009546:	60da      	str	r2, [r3, #12]
}
 8009548:	e007      	b.n	800955a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	68ba      	ldr	r2, [r7, #8]
 8009550:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	60da      	str	r2, [r3, #12]
}
 800955a:	bf00      	nop
 800955c:	371c      	adds	r7, #28
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr
 8009566:	bf00      	nop
 8009568:	58025408 	.word	0x58025408
 800956c:	5802541c 	.word	0x5802541c
 8009570:	58025430 	.word	0x58025430
 8009574:	58025444 	.word	0x58025444
 8009578:	58025458 	.word	0x58025458
 800957c:	5802546c 	.word	0x5802546c
 8009580:	58025480 	.word	0x58025480
 8009584:	58025494 	.word	0x58025494

08009588 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009588:	b480      	push	{r7}
 800958a:	b085      	sub	sp, #20
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4a42      	ldr	r2, [pc, #264]	@ (80096a0 <DMA_CalcBaseAndBitshift+0x118>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d04a      	beq.n	8009630 <DMA_CalcBaseAndBitshift+0xa8>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4a41      	ldr	r2, [pc, #260]	@ (80096a4 <DMA_CalcBaseAndBitshift+0x11c>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d045      	beq.n	8009630 <DMA_CalcBaseAndBitshift+0xa8>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a3f      	ldr	r2, [pc, #252]	@ (80096a8 <DMA_CalcBaseAndBitshift+0x120>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d040      	beq.n	8009630 <DMA_CalcBaseAndBitshift+0xa8>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a3e      	ldr	r2, [pc, #248]	@ (80096ac <DMA_CalcBaseAndBitshift+0x124>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d03b      	beq.n	8009630 <DMA_CalcBaseAndBitshift+0xa8>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a3c      	ldr	r2, [pc, #240]	@ (80096b0 <DMA_CalcBaseAndBitshift+0x128>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d036      	beq.n	8009630 <DMA_CalcBaseAndBitshift+0xa8>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4a3b      	ldr	r2, [pc, #236]	@ (80096b4 <DMA_CalcBaseAndBitshift+0x12c>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d031      	beq.n	8009630 <DMA_CalcBaseAndBitshift+0xa8>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a39      	ldr	r2, [pc, #228]	@ (80096b8 <DMA_CalcBaseAndBitshift+0x130>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d02c      	beq.n	8009630 <DMA_CalcBaseAndBitshift+0xa8>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a38      	ldr	r2, [pc, #224]	@ (80096bc <DMA_CalcBaseAndBitshift+0x134>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d027      	beq.n	8009630 <DMA_CalcBaseAndBitshift+0xa8>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a36      	ldr	r2, [pc, #216]	@ (80096c0 <DMA_CalcBaseAndBitshift+0x138>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d022      	beq.n	8009630 <DMA_CalcBaseAndBitshift+0xa8>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4a35      	ldr	r2, [pc, #212]	@ (80096c4 <DMA_CalcBaseAndBitshift+0x13c>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d01d      	beq.n	8009630 <DMA_CalcBaseAndBitshift+0xa8>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a33      	ldr	r2, [pc, #204]	@ (80096c8 <DMA_CalcBaseAndBitshift+0x140>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d018      	beq.n	8009630 <DMA_CalcBaseAndBitshift+0xa8>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a32      	ldr	r2, [pc, #200]	@ (80096cc <DMA_CalcBaseAndBitshift+0x144>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d013      	beq.n	8009630 <DMA_CalcBaseAndBitshift+0xa8>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4a30      	ldr	r2, [pc, #192]	@ (80096d0 <DMA_CalcBaseAndBitshift+0x148>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d00e      	beq.n	8009630 <DMA_CalcBaseAndBitshift+0xa8>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a2f      	ldr	r2, [pc, #188]	@ (80096d4 <DMA_CalcBaseAndBitshift+0x14c>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d009      	beq.n	8009630 <DMA_CalcBaseAndBitshift+0xa8>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a2d      	ldr	r2, [pc, #180]	@ (80096d8 <DMA_CalcBaseAndBitshift+0x150>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d004      	beq.n	8009630 <DMA_CalcBaseAndBitshift+0xa8>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a2c      	ldr	r2, [pc, #176]	@ (80096dc <DMA_CalcBaseAndBitshift+0x154>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d101      	bne.n	8009634 <DMA_CalcBaseAndBitshift+0xac>
 8009630:	2301      	movs	r3, #1
 8009632:	e000      	b.n	8009636 <DMA_CalcBaseAndBitshift+0xae>
 8009634:	2300      	movs	r3, #0
 8009636:	2b00      	cmp	r3, #0
 8009638:	d024      	beq.n	8009684 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	b2db      	uxtb	r3, r3
 8009640:	3b10      	subs	r3, #16
 8009642:	4a27      	ldr	r2, [pc, #156]	@ (80096e0 <DMA_CalcBaseAndBitshift+0x158>)
 8009644:	fba2 2303 	umull	r2, r3, r2, r3
 8009648:	091b      	lsrs	r3, r3, #4
 800964a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	f003 0307 	and.w	r3, r3, #7
 8009652:	4a24      	ldr	r2, [pc, #144]	@ (80096e4 <DMA_CalcBaseAndBitshift+0x15c>)
 8009654:	5cd3      	ldrb	r3, [r2, r3]
 8009656:	461a      	mov	r2, r3
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2b03      	cmp	r3, #3
 8009660:	d908      	bls.n	8009674 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	461a      	mov	r2, r3
 8009668:	4b1f      	ldr	r3, [pc, #124]	@ (80096e8 <DMA_CalcBaseAndBitshift+0x160>)
 800966a:	4013      	ands	r3, r2
 800966c:	1d1a      	adds	r2, r3, #4
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	659a      	str	r2, [r3, #88]	@ 0x58
 8009672:	e00d      	b.n	8009690 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	461a      	mov	r2, r3
 800967a:	4b1b      	ldr	r3, [pc, #108]	@ (80096e8 <DMA_CalcBaseAndBitshift+0x160>)
 800967c:	4013      	ands	r3, r2
 800967e:	687a      	ldr	r2, [r7, #4]
 8009680:	6593      	str	r3, [r2, #88]	@ 0x58
 8009682:	e005      	b.n	8009690 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8009694:	4618      	mov	r0, r3
 8009696:	3714      	adds	r7, #20
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr
 80096a0:	40020010 	.word	0x40020010
 80096a4:	40020028 	.word	0x40020028
 80096a8:	40020040 	.word	0x40020040
 80096ac:	40020058 	.word	0x40020058
 80096b0:	40020070 	.word	0x40020070
 80096b4:	40020088 	.word	0x40020088
 80096b8:	400200a0 	.word	0x400200a0
 80096bc:	400200b8 	.word	0x400200b8
 80096c0:	40020410 	.word	0x40020410
 80096c4:	40020428 	.word	0x40020428
 80096c8:	40020440 	.word	0x40020440
 80096cc:	40020458 	.word	0x40020458
 80096d0:	40020470 	.word	0x40020470
 80096d4:	40020488 	.word	0x40020488
 80096d8:	400204a0 	.word	0x400204a0
 80096dc:	400204b8 	.word	0x400204b8
 80096e0:	aaaaaaab 	.word	0xaaaaaaab
 80096e4:	080149c0 	.word	0x080149c0
 80096e8:	fffffc00 	.word	0xfffffc00

080096ec <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b085      	sub	sp, #20
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80096f4:	2300      	movs	r3, #0
 80096f6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	699b      	ldr	r3, [r3, #24]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d120      	bne.n	8009742 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009704:	2b03      	cmp	r3, #3
 8009706:	d858      	bhi.n	80097ba <DMA_CheckFifoParam+0xce>
 8009708:	a201      	add	r2, pc, #4	@ (adr r2, 8009710 <DMA_CheckFifoParam+0x24>)
 800970a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800970e:	bf00      	nop
 8009710:	08009721 	.word	0x08009721
 8009714:	08009733 	.word	0x08009733
 8009718:	08009721 	.word	0x08009721
 800971c:	080097bb 	.word	0x080097bb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009724:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009728:	2b00      	cmp	r3, #0
 800972a:	d048      	beq.n	80097be <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800972c:	2301      	movs	r3, #1
 800972e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009730:	e045      	b.n	80097be <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009736:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800973a:	d142      	bne.n	80097c2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800973c:	2301      	movs	r3, #1
 800973e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009740:	e03f      	b.n	80097c2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	699b      	ldr	r3, [r3, #24]
 8009746:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800974a:	d123      	bne.n	8009794 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009750:	2b03      	cmp	r3, #3
 8009752:	d838      	bhi.n	80097c6 <DMA_CheckFifoParam+0xda>
 8009754:	a201      	add	r2, pc, #4	@ (adr r2, 800975c <DMA_CheckFifoParam+0x70>)
 8009756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800975a:	bf00      	nop
 800975c:	0800976d 	.word	0x0800976d
 8009760:	08009773 	.word	0x08009773
 8009764:	0800976d 	.word	0x0800976d
 8009768:	08009785 	.word	0x08009785
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800976c:	2301      	movs	r3, #1
 800976e:	73fb      	strb	r3, [r7, #15]
        break;
 8009770:	e030      	b.n	80097d4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009776:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800977a:	2b00      	cmp	r3, #0
 800977c:	d025      	beq.n	80097ca <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800977e:	2301      	movs	r3, #1
 8009780:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009782:	e022      	b.n	80097ca <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009788:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800978c:	d11f      	bne.n	80097ce <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800978e:	2301      	movs	r3, #1
 8009790:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009792:	e01c      	b.n	80097ce <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009798:	2b02      	cmp	r3, #2
 800979a:	d902      	bls.n	80097a2 <DMA_CheckFifoParam+0xb6>
 800979c:	2b03      	cmp	r3, #3
 800979e:	d003      	beq.n	80097a8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80097a0:	e018      	b.n	80097d4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80097a2:	2301      	movs	r3, #1
 80097a4:	73fb      	strb	r3, [r7, #15]
        break;
 80097a6:	e015      	b.n	80097d4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d00e      	beq.n	80097d2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80097b4:	2301      	movs	r3, #1
 80097b6:	73fb      	strb	r3, [r7, #15]
    break;
 80097b8:	e00b      	b.n	80097d2 <DMA_CheckFifoParam+0xe6>
        break;
 80097ba:	bf00      	nop
 80097bc:	e00a      	b.n	80097d4 <DMA_CheckFifoParam+0xe8>
        break;
 80097be:	bf00      	nop
 80097c0:	e008      	b.n	80097d4 <DMA_CheckFifoParam+0xe8>
        break;
 80097c2:	bf00      	nop
 80097c4:	e006      	b.n	80097d4 <DMA_CheckFifoParam+0xe8>
        break;
 80097c6:	bf00      	nop
 80097c8:	e004      	b.n	80097d4 <DMA_CheckFifoParam+0xe8>
        break;
 80097ca:	bf00      	nop
 80097cc:	e002      	b.n	80097d4 <DMA_CheckFifoParam+0xe8>
        break;
 80097ce:	bf00      	nop
 80097d0:	e000      	b.n	80097d4 <DMA_CheckFifoParam+0xe8>
    break;
 80097d2:	bf00      	nop
    }
  }

  return status;
 80097d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3714      	adds	r7, #20
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr
 80097e2:	bf00      	nop

080097e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b085      	sub	sp, #20
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a38      	ldr	r2, [pc, #224]	@ (80098d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d022      	beq.n	8009842 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a36      	ldr	r2, [pc, #216]	@ (80098dc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d01d      	beq.n	8009842 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4a35      	ldr	r2, [pc, #212]	@ (80098e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d018      	beq.n	8009842 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4a33      	ldr	r2, [pc, #204]	@ (80098e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d013      	beq.n	8009842 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	4a32      	ldr	r2, [pc, #200]	@ (80098e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d00e      	beq.n	8009842 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a30      	ldr	r2, [pc, #192]	@ (80098ec <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d009      	beq.n	8009842 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4a2f      	ldr	r2, [pc, #188]	@ (80098f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d004      	beq.n	8009842 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4a2d      	ldr	r2, [pc, #180]	@ (80098f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d101      	bne.n	8009846 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8009842:	2301      	movs	r3, #1
 8009844:	e000      	b.n	8009848 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009846:	2300      	movs	r3, #0
 8009848:	2b00      	cmp	r3, #0
 800984a:	d01a      	beq.n	8009882 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	b2db      	uxtb	r3, r3
 8009852:	3b08      	subs	r3, #8
 8009854:	4a28      	ldr	r2, [pc, #160]	@ (80098f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009856:	fba2 2303 	umull	r2, r3, r2, r3
 800985a:	091b      	lsrs	r3, r3, #4
 800985c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800985e:	68fa      	ldr	r2, [r7, #12]
 8009860:	4b26      	ldr	r3, [pc, #152]	@ (80098fc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8009862:	4413      	add	r3, r2
 8009864:	009b      	lsls	r3, r3, #2
 8009866:	461a      	mov	r2, r3
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	4a24      	ldr	r2, [pc, #144]	@ (8009900 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009870:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	f003 031f 	and.w	r3, r3, #31
 8009878:	2201      	movs	r2, #1
 800987a:	409a      	lsls	r2, r3
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009880:	e024      	b.n	80098cc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	b2db      	uxtb	r3, r3
 8009888:	3b10      	subs	r3, #16
 800988a:	4a1e      	ldr	r2, [pc, #120]	@ (8009904 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800988c:	fba2 2303 	umull	r2, r3, r2, r3
 8009890:	091b      	lsrs	r3, r3, #4
 8009892:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009894:	68bb      	ldr	r3, [r7, #8]
 8009896:	4a1c      	ldr	r2, [pc, #112]	@ (8009908 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d806      	bhi.n	80098aa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	4a1b      	ldr	r2, [pc, #108]	@ (800990c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d902      	bls.n	80098aa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	3308      	adds	r3, #8
 80098a8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80098aa:	68fa      	ldr	r2, [r7, #12]
 80098ac:	4b18      	ldr	r3, [pc, #96]	@ (8009910 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80098ae:	4413      	add	r3, r2
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	461a      	mov	r2, r3
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	4a16      	ldr	r2, [pc, #88]	@ (8009914 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80098bc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	f003 031f 	and.w	r3, r3, #31
 80098c4:	2201      	movs	r2, #1
 80098c6:	409a      	lsls	r2, r3
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80098cc:	bf00      	nop
 80098ce:	3714      	adds	r7, #20
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr
 80098d8:	58025408 	.word	0x58025408
 80098dc:	5802541c 	.word	0x5802541c
 80098e0:	58025430 	.word	0x58025430
 80098e4:	58025444 	.word	0x58025444
 80098e8:	58025458 	.word	0x58025458
 80098ec:	5802546c 	.word	0x5802546c
 80098f0:	58025480 	.word	0x58025480
 80098f4:	58025494 	.word	0x58025494
 80098f8:	cccccccd 	.word	0xcccccccd
 80098fc:	16009600 	.word	0x16009600
 8009900:	58025880 	.word	0x58025880
 8009904:	aaaaaaab 	.word	0xaaaaaaab
 8009908:	400204b8 	.word	0x400204b8
 800990c:	4002040f 	.word	0x4002040f
 8009910:	10008200 	.word	0x10008200
 8009914:	40020880 	.word	0x40020880

08009918 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009918:	b480      	push	{r7}
 800991a:	b085      	sub	sp, #20
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	b2db      	uxtb	r3, r3
 8009926:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d04a      	beq.n	80099c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2b08      	cmp	r3, #8
 8009932:	d847      	bhi.n	80099c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4a25      	ldr	r2, [pc, #148]	@ (80099d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d022      	beq.n	8009984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4a24      	ldr	r2, [pc, #144]	@ (80099d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d01d      	beq.n	8009984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a22      	ldr	r2, [pc, #136]	@ (80099d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d018      	beq.n	8009984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4a21      	ldr	r2, [pc, #132]	@ (80099dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d013      	beq.n	8009984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a1f      	ldr	r2, [pc, #124]	@ (80099e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d00e      	beq.n	8009984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a1e      	ldr	r2, [pc, #120]	@ (80099e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d009      	beq.n	8009984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a1c      	ldr	r2, [pc, #112]	@ (80099e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d004      	beq.n	8009984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4a1b      	ldr	r2, [pc, #108]	@ (80099ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d101      	bne.n	8009988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009984:	2301      	movs	r3, #1
 8009986:	e000      	b.n	800998a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009988:	2300      	movs	r3, #0
 800998a:	2b00      	cmp	r3, #0
 800998c:	d00a      	beq.n	80099a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800998e:	68fa      	ldr	r2, [r7, #12]
 8009990:	4b17      	ldr	r3, [pc, #92]	@ (80099f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009992:	4413      	add	r3, r2
 8009994:	009b      	lsls	r3, r3, #2
 8009996:	461a      	mov	r2, r3
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	4a15      	ldr	r2, [pc, #84]	@ (80099f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80099a0:	671a      	str	r2, [r3, #112]	@ 0x70
 80099a2:	e009      	b.n	80099b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80099a4:	68fa      	ldr	r2, [r7, #12]
 80099a6:	4b14      	ldr	r3, [pc, #80]	@ (80099f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80099a8:	4413      	add	r3, r2
 80099aa:	009b      	lsls	r3, r3, #2
 80099ac:	461a      	mov	r2, r3
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	4a11      	ldr	r2, [pc, #68]	@ (80099fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80099b6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	3b01      	subs	r3, #1
 80099bc:	2201      	movs	r2, #1
 80099be:	409a      	lsls	r2, r3
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80099c4:	bf00      	nop
 80099c6:	3714      	adds	r7, #20
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr
 80099d0:	58025408 	.word	0x58025408
 80099d4:	5802541c 	.word	0x5802541c
 80099d8:	58025430 	.word	0x58025430
 80099dc:	58025444 	.word	0x58025444
 80099e0:	58025458 	.word	0x58025458
 80099e4:	5802546c 	.word	0x5802546c
 80099e8:	58025480 	.word	0x58025480
 80099ec:	58025494 	.word	0x58025494
 80099f0:	1600963f 	.word	0x1600963f
 80099f4:	58025940 	.word	0x58025940
 80099f8:	1000823f 	.word	0x1000823f
 80099fc:	40020940 	.word	0x40020940

08009a00 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b084      	sub	sp, #16
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d101      	bne.n	8009a12 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	e0cf      	b.n	8009bb2 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d106      	bne.n	8009a2a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2223      	movs	r2, #35	@ 0x23
 8009a20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f7fa f817 	bl	8003a58 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009a2a:	4b64      	ldr	r3, [pc, #400]	@ (8009bbc <HAL_ETH_Init+0x1bc>)
 8009a2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009a30:	4a62      	ldr	r2, [pc, #392]	@ (8009bbc <HAL_ETH_Init+0x1bc>)
 8009a32:	f043 0302 	orr.w	r3, r3, #2
 8009a36:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8009a3a:	4b60      	ldr	r3, [pc, #384]	@ (8009bbc <HAL_ETH_Init+0x1bc>)
 8009a3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009a40:	f003 0302 	and.w	r3, r3, #2
 8009a44:	60bb      	str	r3, [r7, #8]
 8009a46:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	7a1b      	ldrb	r3, [r3, #8]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d103      	bne.n	8009a58 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8009a50:	2000      	movs	r0, #0
 8009a52:	f7fa fd85 	bl	8004560 <HAL_SYSCFG_ETHInterfaceSelect>
 8009a56:	e003      	b.n	8009a60 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8009a58:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8009a5c:	f7fa fd80 	bl	8004560 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8009a60:	4b57      	ldr	r3, [pc, #348]	@ (8009bc0 <HAL_ETH_Init+0x1c0>)
 8009a62:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	687a      	ldr	r2, [r7, #4]
 8009a70:	6812      	ldr	r2, [r2, #0]
 8009a72:	f043 0301 	orr.w	r3, r3, #1
 8009a76:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009a7a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009a7c:	f7fa fd40 	bl	8004500 <HAL_GetTick>
 8009a80:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8009a82:	e011      	b.n	8009aa8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8009a84:	f7fa fd3c 	bl	8004500 <HAL_GetTick>
 8009a88:	4602      	mov	r2, r0
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	1ad3      	subs	r3, r2, r3
 8009a8e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8009a92:	d909      	bls.n	8009aa8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2204      	movs	r2, #4
 8009a98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	22e0      	movs	r2, #224	@ 0xe0
 8009aa0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	e084      	b.n	8009bb2 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f003 0301 	and.w	r3, r3, #1
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d1e4      	bne.n	8009a84 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f000 f886 	bl	8009bcc <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8009ac0:	f001 fed8 	bl	800b874 <HAL_RCC_GetHCLKFreq>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	4a3f      	ldr	r2, [pc, #252]	@ (8009bc4 <HAL_ETH_Init+0x1c4>)
 8009ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8009acc:	0c9a      	lsrs	r2, r3, #18
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	3a01      	subs	r2, #1
 8009ad4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 fa71 	bl	8009fc0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ae6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8009aea:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8009aee:	687a      	ldr	r2, [r7, #4]
 8009af0:	6812      	ldr	r2, [r2, #0]
 8009af2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009af6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009afa:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	695b      	ldr	r3, [r3, #20]
 8009b02:	f003 0303 	and.w	r3, r3, #3
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d009      	beq.n	8009b1e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	22e0      	movs	r2, #224	@ 0xe0
 8009b16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	e049      	b.n	8009bb2 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b26:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8009b2a:	4b27      	ldr	r3, [pc, #156]	@ (8009bc8 <HAL_ETH_Init+0x1c8>)
 8009b2c:	4013      	ands	r3, r2
 8009b2e:	687a      	ldr	r2, [r7, #4]
 8009b30:	6952      	ldr	r2, [r2, #20]
 8009b32:	0051      	lsls	r1, r2, #1
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	6812      	ldr	r2, [r2, #0]
 8009b38:	430b      	orrs	r3, r1
 8009b3a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009b3e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f000 fad9 	bl	800a0fa <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f000 fb1f 	bl	800a18c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	685b      	ldr	r3, [r3, #4]
 8009b52:	3305      	adds	r3, #5
 8009b54:	781b      	ldrb	r3, [r3, #0]
 8009b56:	021a      	lsls	r2, r3, #8
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	3304      	adds	r3, #4
 8009b5e:	781b      	ldrb	r3, [r3, #0]
 8009b60:	4619      	mov	r1, r3
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	430a      	orrs	r2, r1
 8009b68:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	3303      	adds	r3, #3
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	061a      	lsls	r2, r3, #24
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	3302      	adds	r3, #2
 8009b7c:	781b      	ldrb	r3, [r3, #0]
 8009b7e:	041b      	lsls	r3, r3, #16
 8009b80:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	3301      	adds	r3, #1
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009b8c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8009b9a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009b9c:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2210      	movs	r2, #16
 8009bac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009bb0:	2300      	movs	r3, #0
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3710      	adds	r7, #16
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	bf00      	nop
 8009bbc:	58024400 	.word	0x58024400
 8009bc0:	58000400 	.word	0x58000400
 8009bc4:	431bde83 	.word	0x431bde83
 8009bc8:	ffff8001 	.word	0xffff8001

08009bcc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b084      	sub	sp, #16
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8009bdc:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009be4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8009be6:	f001 fe45 	bl	800b874 <HAL_RCC_GetHCLKFreq>
 8009bea:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	4a1e      	ldr	r2, [pc, #120]	@ (8009c68 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d908      	bls.n	8009c06 <HAL_ETH_SetMDIOClockRange+0x3a>
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	4a1d      	ldr	r2, [pc, #116]	@ (8009c6c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d804      	bhi.n	8009c06 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009c02:	60fb      	str	r3, [r7, #12]
 8009c04:	e027      	b.n	8009c56 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	4a18      	ldr	r2, [pc, #96]	@ (8009c6c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d908      	bls.n	8009c20 <HAL_ETH_SetMDIOClockRange+0x54>
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	4a17      	ldr	r2, [pc, #92]	@ (8009c70 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d204      	bcs.n	8009c20 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8009c1c:	60fb      	str	r3, [r7, #12]
 8009c1e:	e01a      	b.n	8009c56 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	4a13      	ldr	r2, [pc, #76]	@ (8009c70 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d303      	bcc.n	8009c30 <HAL_ETH_SetMDIOClockRange+0x64>
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	4a12      	ldr	r2, [pc, #72]	@ (8009c74 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d911      	bls.n	8009c54 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	4a10      	ldr	r2, [pc, #64]	@ (8009c74 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d908      	bls.n	8009c4a <HAL_ETH_SetMDIOClockRange+0x7e>
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	4a0f      	ldr	r2, [pc, #60]	@ (8009c78 <HAL_ETH_SetMDIOClockRange+0xac>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d804      	bhi.n	8009c4a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009c46:	60fb      	str	r3, [r7, #12]
 8009c48:	e005      	b.n	8009c56 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009c50:	60fb      	str	r3, [r7, #12]
 8009c52:	e000      	b.n	8009c56 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8009c54:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	68fa      	ldr	r2, [r7, #12]
 8009c5c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8009c60:	bf00      	nop
 8009c62:	3710      	adds	r7, #16
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}
 8009c68:	01312cff 	.word	0x01312cff
 8009c6c:	02160ebf 	.word	0x02160ebf
 8009c70:	03938700 	.word	0x03938700
 8009c74:	05f5e0ff 	.word	0x05f5e0ff
 8009c78:	08f0d17f 	.word	0x08f0d17f

08009c7c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b085      	sub	sp, #20
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8009c8e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	791b      	ldrb	r3, [r3, #4]
 8009c94:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8009c96:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	7b1b      	ldrb	r3, [r3, #12]
 8009c9c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8009c9e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	7b5b      	ldrb	r3, [r3, #13]
 8009ca4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8009ca6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	7b9b      	ldrb	r3, [r3, #14]
 8009cac:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8009cae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	7bdb      	ldrb	r3, [r3, #15]
 8009cb4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8009cb6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8009cb8:	683a      	ldr	r2, [r7, #0]
 8009cba:	7c12      	ldrb	r2, [r2, #16]
 8009cbc:	2a00      	cmp	r2, #0
 8009cbe:	d102      	bne.n	8009cc6 <ETH_SetMACConfig+0x4a>
 8009cc0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8009cc4:	e000      	b.n	8009cc8 <ETH_SetMACConfig+0x4c>
 8009cc6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8009cc8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8009cca:	683a      	ldr	r2, [r7, #0]
 8009ccc:	7c52      	ldrb	r2, [r2, #17]
 8009cce:	2a00      	cmp	r2, #0
 8009cd0:	d102      	bne.n	8009cd8 <ETH_SetMACConfig+0x5c>
 8009cd2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8009cd6:	e000      	b.n	8009cda <ETH_SetMACConfig+0x5e>
 8009cd8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8009cda:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	7c9b      	ldrb	r3, [r3, #18]
 8009ce0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8009ce2:	431a      	orrs	r2, r3
               macconf->Speed |
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8009ce8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8009cee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	7f1b      	ldrb	r3, [r3, #28]
 8009cf4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8009cf6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	7f5b      	ldrb	r3, [r3, #29]
 8009cfc:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8009cfe:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8009d00:	683a      	ldr	r2, [r7, #0]
 8009d02:	7f92      	ldrb	r2, [r2, #30]
 8009d04:	2a00      	cmp	r2, #0
 8009d06:	d102      	bne.n	8009d0e <ETH_SetMACConfig+0x92>
 8009d08:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009d0c:	e000      	b.n	8009d10 <ETH_SetMACConfig+0x94>
 8009d0e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8009d10:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	7fdb      	ldrb	r3, [r3, #31]
 8009d16:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8009d18:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8009d1a:	683a      	ldr	r2, [r7, #0]
 8009d1c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8009d20:	2a00      	cmp	r2, #0
 8009d22:	d102      	bne.n	8009d2a <ETH_SetMACConfig+0xae>
 8009d24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009d28:	e000      	b.n	8009d2c <ETH_SetMACConfig+0xb0>
 8009d2a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8009d2c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8009d32:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d3a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8009d3c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8009d42:	4313      	orrs	r3, r2
 8009d44:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	681a      	ldr	r2, [r3, #0]
 8009d4c:	4b56      	ldr	r3, [pc, #344]	@ (8009ea8 <ETH_SetMACConfig+0x22c>)
 8009d4e:	4013      	ands	r3, r2
 8009d50:	687a      	ldr	r2, [r7, #4]
 8009d52:	6812      	ldr	r2, [r2, #0]
 8009d54:	68f9      	ldr	r1, [r7, #12]
 8009d56:	430b      	orrs	r3, r1
 8009d58:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d5e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009d66:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8009d68:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009d70:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8009d72:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009d7a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8009d7c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8009d7e:	683a      	ldr	r2, [r7, #0]
 8009d80:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8009d84:	2a00      	cmp	r2, #0
 8009d86:	d102      	bne.n	8009d8e <ETH_SetMACConfig+0x112>
 8009d88:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8009d8c:	e000      	b.n	8009d90 <ETH_SetMACConfig+0x114>
 8009d8e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8009d90:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8009d96:	4313      	orrs	r3, r2
 8009d98:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	685a      	ldr	r2, [r3, #4]
 8009da0:	4b42      	ldr	r3, [pc, #264]	@ (8009eac <ETH_SetMACConfig+0x230>)
 8009da2:	4013      	ands	r3, r2
 8009da4:	687a      	ldr	r2, [r7, #4]
 8009da6:	6812      	ldr	r2, [r2, #0]
 8009da8:	68f9      	ldr	r1, [r7, #12]
 8009daa:	430b      	orrs	r3, r1
 8009dac:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009db4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	68da      	ldr	r2, [r3, #12]
 8009dc4:	4b3a      	ldr	r3, [pc, #232]	@ (8009eb0 <ETH_SetMACConfig+0x234>)
 8009dc6:	4013      	ands	r3, r2
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	6812      	ldr	r2, [r2, #0]
 8009dcc:	68f9      	ldr	r1, [r7, #12]
 8009dce:	430b      	orrs	r3, r1
 8009dd0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8009dd8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8009dde:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8009de0:	683a      	ldr	r2, [r7, #0]
 8009de2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8009de6:	2a00      	cmp	r2, #0
 8009de8:	d101      	bne.n	8009dee <ETH_SetMACConfig+0x172>
 8009dea:	2280      	movs	r2, #128	@ 0x80
 8009dec:	e000      	b.n	8009df0 <ETH_SetMACConfig+0x174>
 8009dee:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8009df0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009df6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8009df8:	4313      	orrs	r3, r2
 8009dfa:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009e02:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8009e06:	4013      	ands	r3, r2
 8009e08:	687a      	ldr	r2, [r7, #4]
 8009e0a:	6812      	ldr	r2, [r2, #0]
 8009e0c:	68f9      	ldr	r1, [r7, #12]
 8009e0e:	430b      	orrs	r3, r1
 8009e10:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8009e18:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8009e20:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8009e22:	4313      	orrs	r3, r2
 8009e24:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e2e:	f023 0103 	bic.w	r1, r3, #3
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	68fa      	ldr	r2, [r7, #12]
 8009e38:	430a      	orrs	r2, r1
 8009e3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8009e46:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	430a      	orrs	r2, r1
 8009e54:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8009e5c:	683a      	ldr	r2, [r7, #0]
 8009e5e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8009e62:	2a00      	cmp	r2, #0
 8009e64:	d101      	bne.n	8009e6a <ETH_SetMACConfig+0x1ee>
 8009e66:	2240      	movs	r2, #64	@ 0x40
 8009e68:	e000      	b.n	8009e6c <ETH_SetMACConfig+0x1f0>
 8009e6a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8009e6c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8009e74:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8009e76:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8009e7e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8009e80:	4313      	orrs	r3, r2
 8009e82:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8009e8c:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	68fa      	ldr	r2, [r7, #12]
 8009e96:	430a      	orrs	r2, r1
 8009e98:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8009e9c:	bf00      	nop
 8009e9e:	3714      	adds	r7, #20
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea6:	4770      	bx	lr
 8009ea8:	00048083 	.word	0x00048083
 8009eac:	c0f88000 	.word	0xc0f88000
 8009eb0:	fffffef0 	.word	0xfffffef0

08009eb4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b085      	sub	sp, #20
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ec6:	681a      	ldr	r2, [r3, #0]
 8009ec8:	4b38      	ldr	r3, [pc, #224]	@ (8009fac <ETH_SetDMAConfig+0xf8>)
 8009eca:	4013      	ands	r3, r2
 8009ecc:	683a      	ldr	r2, [r7, #0]
 8009ece:	6811      	ldr	r1, [r2, #0]
 8009ed0:	687a      	ldr	r2, [r7, #4]
 8009ed2:	6812      	ldr	r2, [r2, #0]
 8009ed4:	430b      	orrs	r3, r1
 8009ed6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009eda:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	791b      	ldrb	r3, [r3, #4]
 8009ee0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8009ee6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	7b1b      	ldrb	r3, [r3, #12]
 8009eec:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009efa:	685a      	ldr	r2, [r3, #4]
 8009efc:	4b2c      	ldr	r3, [pc, #176]	@ (8009fb0 <ETH_SetDMAConfig+0xfc>)
 8009efe:	4013      	ands	r3, r2
 8009f00:	687a      	ldr	r2, [r7, #4]
 8009f02:	6812      	ldr	r2, [r2, #0]
 8009f04:	68f9      	ldr	r1, [r7, #12]
 8009f06:	430b      	orrs	r3, r1
 8009f08:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009f0c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	7b5b      	ldrb	r3, [r3, #13]
 8009f12:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f24:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8009f28:	4b22      	ldr	r3, [pc, #136]	@ (8009fb4 <ETH_SetDMAConfig+0x100>)
 8009f2a:	4013      	ands	r3, r2
 8009f2c:	687a      	ldr	r2, [r7, #4]
 8009f2e:	6812      	ldr	r2, [r2, #0]
 8009f30:	68f9      	ldr	r1, [r7, #12]
 8009f32:	430b      	orrs	r3, r1
 8009f34:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009f38:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	7d1b      	ldrb	r3, [r3, #20]
 8009f44:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8009f46:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	7f5b      	ldrb	r3, [r3, #29]
 8009f4c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f5a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8009f5e:	4b16      	ldr	r3, [pc, #88]	@ (8009fb8 <ETH_SetDMAConfig+0x104>)
 8009f60:	4013      	ands	r3, r2
 8009f62:	687a      	ldr	r2, [r7, #4]
 8009f64:	6812      	ldr	r2, [r2, #0]
 8009f66:	68f9      	ldr	r1, [r7, #12]
 8009f68:	430b      	orrs	r3, r1
 8009f6a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009f6e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	7f1b      	ldrb	r3, [r3, #28]
 8009f76:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f88:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8009f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8009fbc <ETH_SetDMAConfig+0x108>)
 8009f8e:	4013      	ands	r3, r2
 8009f90:	687a      	ldr	r2, [r7, #4]
 8009f92:	6812      	ldr	r2, [r2, #0]
 8009f94:	68f9      	ldr	r1, [r7, #12]
 8009f96:	430b      	orrs	r3, r1
 8009f98:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009f9c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8009fa0:	bf00      	nop
 8009fa2:	3714      	adds	r7, #20
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr
 8009fac:	ffff87fd 	.word	0xffff87fd
 8009fb0:	ffff2ffe 	.word	0xffff2ffe
 8009fb4:	fffec000 	.word	0xfffec000
 8009fb8:	ffc0efef 	.word	0xffc0efef
 8009fbc:	7fc0ffff 	.word	0x7fc0ffff

08009fc0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b0a4      	sub	sp, #144	@ 0x90
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8009fc8:	2301      	movs	r3, #1
 8009fca:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8009fde:	2301      	movs	r3, #1
 8009fe0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8009fea:	2301      	movs	r3, #1
 8009fec:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8009ffc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a000:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800a002:	2300      	movs	r3, #0
 800a004:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800a008:	2300      	movs	r3, #0
 800a00a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800a00c:	2300      	movs	r3, #0
 800a00e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800a012:	2300      	movs	r3, #0
 800a014:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800a018:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 800a01c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800a01e:	2300      	movs	r3, #0
 800a020:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800a024:	2300      	movs	r3, #0
 800a026:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 800a028:	2301      	movs	r3, #1
 800a02a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800a02e:	2300      	movs	r3, #0
 800a030:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800a034:	2300      	movs	r3, #0
 800a036:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800a03a:	2300      	movs	r3, #0
 800a03c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0;
 800a03e:	2300      	movs	r3, #0
 800a040:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800a042:	2300      	movs	r3, #0
 800a044:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800a046:	2300      	movs	r3, #0
 800a048:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800a04c:	2300      	movs	r3, #0
 800a04e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800a052:	2301      	movs	r3, #1
 800a054:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800a058:	2320      	movs	r3, #32
 800a05a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800a05e:	2301      	movs	r3, #1
 800a060:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800a064:	2300      	movs	r3, #0
 800a066:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800a06a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800a06e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800a070:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a074:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800a076:	2300      	movs	r3, #0
 800a078:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800a07c:	2302      	movs	r3, #2
 800a07e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800a082:	2300      	movs	r3, #0
 800a084:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800a088:	2300      	movs	r3, #0
 800a08a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800a08e:	2300      	movs	r3, #0
 800a090:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800a094:	2301      	movs	r3, #1
 800a096:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800a09a:	2300      	movs	r3, #0
 800a09c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800a09e:	2301      	movs	r3, #1
 800a0a0:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800a0a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f7ff fde6 	bl	8009c7c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800a0ca:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a0ce:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800a0d4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a0d8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800a0e0:	f44f 7306 	mov.w	r3, #536	@ 0x218
 800a0e4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800a0e6:	f107 0308 	add.w	r3, r7, #8
 800a0ea:	4619      	mov	r1, r3
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f7ff fee1 	bl	8009eb4 <ETH_SetDMAConfig>
}
 800a0f2:	bf00      	nop
 800a0f4:	3790      	adds	r7, #144	@ 0x90
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}

0800a0fa <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800a0fa:	b480      	push	{r7}
 800a0fc:	b085      	sub	sp, #20
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800a102:	2300      	movs	r3, #0
 800a104:	60fb      	str	r3, [r7, #12]
 800a106:	e01d      	b.n	800a144 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	68d9      	ldr	r1, [r3, #12]
 800a10c:	68fa      	ldr	r2, [r7, #12]
 800a10e:	4613      	mov	r3, r2
 800a110:	005b      	lsls	r3, r3, #1
 800a112:	4413      	add	r3, r2
 800a114:	00db      	lsls	r3, r3, #3
 800a116:	440b      	add	r3, r1
 800a118:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	2200      	movs	r2, #0
 800a11e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	2200      	movs	r2, #0
 800a124:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	2200      	movs	r2, #0
 800a12a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	2200      	movs	r2, #0
 800a130:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800a132:	68b9      	ldr	r1, [r7, #8]
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	68fa      	ldr	r2, [r7, #12]
 800a138:	3206      	adds	r2, #6
 800a13a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	3301      	adds	r3, #1
 800a142:	60fb      	str	r3, [r7, #12]
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2b03      	cmp	r3, #3
 800a148:	d9de      	bls.n	800a108 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2200      	movs	r2, #0
 800a14e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a158:	461a      	mov	r2, r3
 800a15a:	2303      	movs	r3, #3
 800a15c:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	68da      	ldr	r2, [r3, #12]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a16c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	68da      	ldr	r2, [r3, #12]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a17c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 800a180:	bf00      	nop
 800a182:	3714      	adds	r7, #20
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr

0800a18c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b085      	sub	sp, #20
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800a194:	2300      	movs	r3, #0
 800a196:	60fb      	str	r3, [r7, #12]
 800a198:	e023      	b.n	800a1e2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6919      	ldr	r1, [r3, #16]
 800a19e:	68fa      	ldr	r2, [r7, #12]
 800a1a0:	4613      	mov	r3, r2
 800a1a2:	005b      	lsls	r3, r3, #1
 800a1a4:	4413      	add	r3, r2
 800a1a6:	00db      	lsls	r3, r3, #3
 800a1a8:	440b      	add	r3, r1
 800a1aa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800a1d0:	68b9      	ldr	r1, [r7, #8]
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	68fa      	ldr	r2, [r7, #12]
 800a1d6:	3212      	adds	r2, #18
 800a1d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	3301      	adds	r3, #1
 800a1e0:	60fb      	str	r3, [r7, #12]
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2b03      	cmp	r3, #3
 800a1e6:	d9d8      	bls.n	800a19a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2200      	movs	r2, #0
 800a204:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a20e:	461a      	mov	r2, r3
 800a210:	2303      	movs	r3, #3
 800a212:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	691a      	ldr	r2, [r3, #16]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a222:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	691b      	ldr	r3, [r3, #16]
 800a22a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a236:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 800a23a:	bf00      	nop
 800a23c:	3714      	adds	r7, #20
 800a23e:	46bd      	mov	sp, r7
 800a240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a244:	4770      	bx	lr
	...

0800a248 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b08a      	sub	sp, #40	@ 0x28
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	60f8      	str	r0, [r7, #12]
 800a250:	60b9      	str	r1, [r7, #8]
 800a252:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 800a25c:	2308      	movs	r3, #8
 800a25e:	76fb      	strb	r3, [r7, #27]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a260:	4b2e      	ldr	r3, [pc, #184]	@ (800a31c <HAL_FLASH_Program+0xd4>)
 800a262:	7d1b      	ldrb	r3, [r3, #20]
 800a264:	2b01      	cmp	r3, #1
 800a266:	d101      	bne.n	800a26c <HAL_FLASH_Program+0x24>
 800a268:	2302      	movs	r3, #2
 800a26a:	e053      	b.n	800a314 <HAL_FLASH_Program+0xcc>
 800a26c:	4b2b      	ldr	r3, [pc, #172]	@ (800a31c <HAL_FLASH_Program+0xd4>)
 800a26e:	2201      	movs	r2, #1
 800a270:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a278:	d315      	bcc.n	800a2a6 <HAL_FLASH_Program+0x5e>
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 800a280:	d211      	bcs.n	800a2a6 <HAL_FLASH_Program+0x5e>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 800a282:	2301      	movs	r3, #1
 800a284:	617b      	str	r3, [r7, #20]
  {
    return HAL_ERROR;
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a286:	4b25      	ldr	r3, [pc, #148]	@ (800a31c <HAL_FLASH_Program+0xd4>)
 800a288:	2200      	movs	r2, #0
 800a28a:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800a28c:	6979      	ldr	r1, [r7, #20]
 800a28e:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800a292:	f000 f88d 	bl	800a3b0 <FLASH_WaitForLastOperation>
 800a296:	4603      	mov	r3, r0
 800a298:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if(status == HAL_OK)
 800a29c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d002      	beq.n	800a2aa <HAL_FLASH_Program+0x62>
 800a2a4:	e031      	b.n	800a30a <HAL_FLASH_Program+0xc2>
    return HAL_ERROR;
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	e034      	b.n	800a314 <HAL_FLASH_Program+0xcc>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 800a2aa:	4b1d      	ldr	r3, [pc, #116]	@ (800a320 <HAL_FLASH_Program+0xd8>)
 800a2ac:	68db      	ldr	r3, [r3, #12]
 800a2ae:	4a1c      	ldr	r2, [pc, #112]	@ (800a320 <HAL_FLASH_Program+0xd8>)
 800a2b0:	f043 0302 	orr.w	r3, r3, #2
 800a2b4:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("isb 0xF":::"memory");
 800a2b6:	f3bf 8f6f 	isb	sy
}
 800a2ba:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a2bc:	f3bf 8f4f 	dsb	sy
}
 800a2c0:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 800a2c2:	69fb      	ldr	r3, [r7, #28]
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	6a3b      	ldr	r3, [r7, #32]
 800a2c8:	601a      	str	r2, [r3, #0]
        dest_addr++;
 800a2ca:	6a3b      	ldr	r3, [r7, #32]
 800a2cc:	3304      	adds	r3, #4
 800a2ce:	623b      	str	r3, [r7, #32]
        src_addr++;
 800a2d0:	69fb      	ldr	r3, [r7, #28]
 800a2d2:	3304      	adds	r3, #4
 800a2d4:	61fb      	str	r3, [r7, #28]
        row_index--;
 800a2d6:	7efb      	ldrb	r3, [r7, #27]
 800a2d8:	3b01      	subs	r3, #1
 800a2da:	76fb      	strb	r3, [r7, #27]
     } while (row_index != 0U);
 800a2dc:	7efb      	ldrb	r3, [r7, #27]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d1ef      	bne.n	800a2c2 <HAL_FLASH_Program+0x7a>
  __ASM volatile ("isb 0xF":::"memory");
 800a2e2:	f3bf 8f6f 	isb	sy
}
 800a2e6:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a2e8:	f3bf 8f4f 	dsb	sy
}
 800a2ec:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800a2ee:	6979      	ldr	r1, [r7, #20]
 800a2f0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800a2f4:	f000 f85c 	bl	800a3b0 <FLASH_WaitForLastOperation>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* If the program operation is completed, disable the PG */
      CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 800a2fe:	4b08      	ldr	r3, [pc, #32]	@ (800a320 <HAL_FLASH_Program+0xd8>)
 800a300:	68db      	ldr	r3, [r3, #12]
 800a302:	4a07      	ldr	r2, [pc, #28]	@ (800a320 <HAL_FLASH_Program+0xd8>)
 800a304:	f023 0302 	bic.w	r3, r3, #2
 800a308:	60d3      	str	r3, [r2, #12]
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a30a:	4b04      	ldr	r3, [pc, #16]	@ (800a31c <HAL_FLASH_Program+0xd4>)
 800a30c:	2200      	movs	r2, #0
 800a30e:	751a      	strb	r2, [r3, #20]

  return status;
 800a310:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a314:	4618      	mov	r0, r3
 800a316:	3728      	adds	r7, #40	@ 0x28
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}
 800a31c:	240010a0 	.word	0x240010a0
 800a320:	52002000 	.word	0x52002000

0800a324 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800a324:	b480      	push	{r7}
 800a326:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800a328:	4b0c      	ldr	r3, [pc, #48]	@ (800a35c <HAL_FLASH_Unlock+0x38>)
 800a32a:	68db      	ldr	r3, [r3, #12]
 800a32c:	f003 0301 	and.w	r3, r3, #1
 800a330:	2b00      	cmp	r3, #0
 800a332:	d00d      	beq.n	800a350 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 800a334:	4b09      	ldr	r3, [pc, #36]	@ (800a35c <HAL_FLASH_Unlock+0x38>)
 800a336:	4a0a      	ldr	r2, [pc, #40]	@ (800a360 <HAL_FLASH_Unlock+0x3c>)
 800a338:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 800a33a:	4b08      	ldr	r3, [pc, #32]	@ (800a35c <HAL_FLASH_Unlock+0x38>)
 800a33c:	4a09      	ldr	r2, [pc, #36]	@ (800a364 <HAL_FLASH_Unlock+0x40>)
 800a33e:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800a340:	4b06      	ldr	r3, [pc, #24]	@ (800a35c <HAL_FLASH_Unlock+0x38>)
 800a342:	68db      	ldr	r3, [r3, #12]
 800a344:	f003 0301 	and.w	r3, r3, #1
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d001      	beq.n	800a350 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 800a34c:	2301      	movs	r3, #1
 800a34e:	e000      	b.n	800a352 <HAL_FLASH_Unlock+0x2e>
      return HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800a350:	2300      	movs	r3, #0
}
 800a352:	4618      	mov	r0, r3
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr
 800a35c:	52002000 	.word	0x52002000
 800a360:	45670123 	.word	0x45670123
 800a364:	cdef89ab 	.word	0xcdef89ab

0800a368 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800a368:	b480      	push	{r7}
 800a36a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 800a36c:	4b09      	ldr	r3, [pc, #36]	@ (800a394 <HAL_FLASH_Lock+0x2c>)
 800a36e:	68db      	ldr	r3, [r3, #12]
 800a370:	4a08      	ldr	r2, [pc, #32]	@ (800a394 <HAL_FLASH_Lock+0x2c>)
 800a372:	f043 0301 	orr.w	r3, r3, #1
 800a376:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 800a378:	4b06      	ldr	r3, [pc, #24]	@ (800a394 <HAL_FLASH_Lock+0x2c>)
 800a37a:	68db      	ldr	r3, [r3, #12]
 800a37c:	f003 0301 	and.w	r3, r3, #1
 800a380:	2b00      	cmp	r3, #0
 800a382:	d101      	bne.n	800a388 <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 800a384:	2301      	movs	r3, #1
 800a386:	e000      	b.n	800a38a <HAL_FLASH_Lock+0x22>
  {
    return HAL_ERROR;
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800a388:	2300      	movs	r3, #0
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr
 800a394:	52002000 	.word	0x52002000

0800a398 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_DBECC_BANK2: Double Detection ECC on Bank 2
  *            @arg HAL_FLASH_ERROR_CRCRD_BANK2: CRC Read Error on Bank 2
*/

uint32_t HAL_FLASH_GetError(void)
{
 800a398:	b480      	push	{r7}
 800a39a:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 800a39c:	4b03      	ldr	r3, [pc, #12]	@ (800a3ac <HAL_FLASH_GetError+0x14>)
 800a39e:	699b      	ldr	r3, [r3, #24]
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr
 800a3aa:	bf00      	nop
 800a3ac:	240010a0 	.word	0x240010a0

0800a3b0 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b086      	sub	sp, #24
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 800a3ba:	2304      	movs	r3, #4
 800a3bc:	613b      	str	r3, [r7, #16]
  uint32_t errorflag = 0;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a3c2:	f7fa f89d 	bl	8004500 <HAL_GetTick>
 800a3c6:	60f8      	str	r0, [r7, #12]
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800a3c8:	e010      	b.n	800a3ec <FLASH_WaitForLastOperation+0x3c>
  {
    if(Timeout != HAL_MAX_DELAY)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a3d0:	d00c      	beq.n	800a3ec <FLASH_WaitForLastOperation+0x3c>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a3d2:	f7fa f895 	bl	8004500 <HAL_GetTick>
 800a3d6:	4602      	mov	r2, r0
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	1ad3      	subs	r3, r2, r3
 800a3dc:	687a      	ldr	r2, [r7, #4]
 800a3de:	429a      	cmp	r2, r3
 800a3e0:	d302      	bcc.n	800a3e8 <FLASH_WaitForLastOperation+0x38>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d101      	bne.n	800a3ec <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800a3e8:	2303      	movs	r3, #3
 800a3ea:	e02d      	b.n	800a448 <FLASH_WaitForLastOperation+0x98>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800a3ec:	4b18      	ldr	r3, [pc, #96]	@ (800a450 <FLASH_WaitForLastOperation+0xa0>)
 800a3ee:	691a      	ldr	r2, [r3, #16]
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	4013      	ands	r3, r2
 800a3f4:	693a      	ldr	r2, [r7, #16]
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	d0e7      	beq.n	800a3ca <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	d104      	bne.n	800a40a <FLASH_WaitForLastOperation+0x5a>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 800a400:	4b13      	ldr	r3, [pc, #76]	@ (800a450 <FLASH_WaitForLastOperation+0xa0>)
 800a402:	691a      	ldr	r2, [r3, #16]
 800a404:	4b13      	ldr	r3, [pc, #76]	@ (800a454 <FLASH_WaitForLastOperation+0xa4>)
 800a406:	4013      	ands	r3, r2
 800a408:	617b      	str	r3, [r7, #20]
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a410:	2b00      	cmp	r3, #0
 800a412:	d00a      	beq.n	800a42a <FLASH_WaitForLastOperation+0x7a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 800a414:	4b10      	ldr	r3, [pc, #64]	@ (800a458 <FLASH_WaitForLastOperation+0xa8>)
 800a416:	699a      	ldr	r2, [r3, #24]
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	4313      	orrs	r3, r2
 800a41c:	4a0e      	ldr	r2, [pc, #56]	@ (800a458 <FLASH_WaitForLastOperation+0xa8>)
 800a41e:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 800a420:	4a0b      	ldr	r2, [pc, #44]	@ (800a450 <FLASH_WaitForLastOperation+0xa0>)
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	6153      	str	r3, [r2, #20]

    return HAL_ERROR;
 800a426:	2301      	movs	r3, #1
 800a428:	e00e      	b.n	800a448 <FLASH_WaitForLastOperation+0x98>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	2b01      	cmp	r3, #1
 800a42e:	d10a      	bne.n	800a446 <FLASH_WaitForLastOperation+0x96>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 800a430:	4b07      	ldr	r3, [pc, #28]	@ (800a450 <FLASH_WaitForLastOperation+0xa0>)
 800a432:	691b      	ldr	r3, [r3, #16]
 800a434:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a438:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a43c:	d103      	bne.n	800a446 <FLASH_WaitForLastOperation+0x96>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800a43e:	4b04      	ldr	r3, [pc, #16]	@ (800a450 <FLASH_WaitForLastOperation+0xa0>)
 800a440:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800a444:	615a      	str	r2, [r3, #20]
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800a446:	2300      	movs	r3, #0
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3718      	adds	r7, #24
 800a44c:	46bd      	mov	sp, r7
 800a44e:	bd80      	pop	{r7, pc}
 800a450:	52002000 	.word	0x52002000
 800a454:	17ee0000 	.word	0x17ee0000
 800a458:	240010a0 	.word	0x240010a0

0800a45c <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b084      	sub	sp, #16
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a466:	2300      	movs	r3, #0
 800a468:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a46a:	4b3f      	ldr	r3, [pc, #252]	@ (800a568 <HAL_FLASHEx_Erase+0x10c>)
 800a46c:	7d1b      	ldrb	r3, [r3, #20]
 800a46e:	2b01      	cmp	r3, #1
 800a470:	d101      	bne.n	800a476 <HAL_FLASHEx_Erase+0x1a>
 800a472:	2302      	movs	r3, #2
 800a474:	e074      	b.n	800a560 <HAL_FLASHEx_Erase+0x104>
 800a476:	4b3c      	ldr	r3, [pc, #240]	@ (800a568 <HAL_FLASHEx_Erase+0x10c>)
 800a478:	2201      	movs	r2, #1
 800a47a:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a47c:	4b3a      	ldr	r3, [pc, #232]	@ (800a568 <HAL_FLASHEx_Erase+0x10c>)
 800a47e:	2200      	movs	r2, #0
 800a480:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	685b      	ldr	r3, [r3, #4]
 800a486:	f003 0301 	and.w	r3, r3, #1
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d009      	beq.n	800a4a2 <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800a48e:	2101      	movs	r1, #1
 800a490:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800a494:	f7ff ff8c 	bl	800a3b0 <FLASH_WaitForLastOperation>
 800a498:	4603      	mov	r3, r0
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d001      	beq.n	800a4a2 <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 800a49e:	2301      	movs	r3, #1
 800a4a0:	73fb      	strb	r3, [r7, #15]
      status = HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 800a4a2:	7bfb      	ldrb	r3, [r7, #15]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d157      	bne.n	800a558 <HAL_FLASHEx_Erase+0xfc>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	2b01      	cmp	r3, #1
 800a4ae:	d11e      	bne.n	800a4ee <HAL_FLASHEx_Erase+0x92>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	691a      	ldr	r2, [r3, #16]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	685b      	ldr	r3, [r3, #4]
 800a4b8:	4619      	mov	r1, r3
 800a4ba:	4610      	mov	r0, r2
 800a4bc:	f000 f85a 	bl	800a574 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	f003 0301 	and.w	r3, r3, #1
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d045      	beq.n	800a558 <HAL_FLASHEx_Erase+0xfc>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800a4cc:	2101      	movs	r1, #1
 800a4ce:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800a4d2:	f7ff ff6d 	bl	800a3b0 <FLASH_WaitForLastOperation>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d001      	beq.n	800a4e0 <HAL_FLASHEx_Erase+0x84>
        {
          status = HAL_ERROR;
 800a4dc:	2301      	movs	r3, #1
 800a4de:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 800a4e0:	4b22      	ldr	r3, [pc, #136]	@ (800a56c <HAL_FLASHEx_Erase+0x110>)
 800a4e2:	68db      	ldr	r3, [r3, #12]
 800a4e4:	4a21      	ldr	r2, [pc, #132]	@ (800a56c <HAL_FLASHEx_Erase+0x110>)
 800a4e6:	f023 0308 	bic.w	r3, r3, #8
 800a4ea:	60d3      	str	r3, [r2, #12]
 800a4ec:	e034      	b.n	800a558 <HAL_FLASHEx_Erase+0xfc>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a4f4:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	689b      	ldr	r3, [r3, #8]
 800a4fa:	60bb      	str	r3, [r7, #8]
 800a4fc:	e024      	b.n	800a548 <HAL_FLASHEx_Erase+0xec>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6859      	ldr	r1, [r3, #4]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	691b      	ldr	r3, [r3, #16]
 800a506:	461a      	mov	r2, r3
 800a508:	68b8      	ldr	r0, [r7, #8]
 800a50a:	f000 f857 	bl	800a5bc <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	685b      	ldr	r3, [r3, #4]
 800a512:	f003 0301 	and.w	r3, r3, #1
 800a516:	2b00      	cmp	r3, #0
 800a518:	d00c      	beq.n	800a534 <HAL_FLASHEx_Erase+0xd8>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 800a51a:	2101      	movs	r1, #1
 800a51c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800a520:	f7ff ff46 	bl	800a3b0 <FLASH_WaitForLastOperation>
 800a524:	4603      	mov	r3, r0
 800a526:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800a528:	4b10      	ldr	r3, [pc, #64]	@ (800a56c <HAL_FLASHEx_Erase+0x110>)
 800a52a:	68da      	ldr	r2, [r3, #12]
 800a52c:	490f      	ldr	r1, [pc, #60]	@ (800a56c <HAL_FLASHEx_Erase+0x110>)
 800a52e:	4b10      	ldr	r3, [pc, #64]	@ (800a570 <HAL_FLASHEx_Erase+0x114>)
 800a530:	4013      	ands	r3, r2
 800a532:	60cb      	str	r3, [r1, #12]
          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 800a534:	7bfb      	ldrb	r3, [r7, #15]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d003      	beq.n	800a542 <HAL_FLASHEx_Erase+0xe6>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	68ba      	ldr	r2, [r7, #8]
 800a53e:	601a      	str	r2, [r3, #0]
          break;
 800a540:	e00a      	b.n	800a558 <HAL_FLASHEx_Erase+0xfc>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	3301      	adds	r3, #1
 800a546:	60bb      	str	r3, [r7, #8]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	68da      	ldr	r2, [r3, #12]
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	689b      	ldr	r3, [r3, #8]
 800a550:	4413      	add	r3, r2
 800a552:	68ba      	ldr	r2, [r7, #8]
 800a554:	429a      	cmp	r2, r3
 800a556:	d3d2      	bcc.n	800a4fe <HAL_FLASHEx_Erase+0xa2>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a558:	4b03      	ldr	r3, [pc, #12]	@ (800a568 <HAL_FLASHEx_Erase+0x10c>)
 800a55a:	2200      	movs	r2, #0
 800a55c:	751a      	strb	r2, [r3, #20]

  return status;
 800a55e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a560:	4618      	mov	r0, r3
 800a562:	3710      	adds	r7, #16
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}
 800a568:	240010a0 	.word	0x240010a0
 800a56c:	52002000 	.word	0x52002000
 800a570:	fffff8fb 	.word	0xfffff8fb

0800a574 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 800a574:	b480      	push	{r7}
 800a576:	b083      	sub	sp, #12
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	6039      	str	r1, [r7, #0]
  }
  else
#endif /* DUAL_BANK */
  {
    /* Proceed to erase Flash Bank  */
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	f003 0301 	and.w	r3, r3, #1
 800a584:	2b00      	cmp	r3, #0
 800a586:	d011      	beq.n	800a5ac <FLASH_MassErase+0x38>
    {
#if defined (FLASH_CR_PSIZE)
      /* Set Program/erase VoltageRange for Bank1 */
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800a588:	4b0b      	ldr	r3, [pc, #44]	@ (800a5b8 <FLASH_MassErase+0x44>)
 800a58a:	68db      	ldr	r3, [r3, #12]
 800a58c:	4a0a      	ldr	r2, [pc, #40]	@ (800a5b8 <FLASH_MassErase+0x44>)
 800a58e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800a592:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 800a594:	4b08      	ldr	r3, [pc, #32]	@ (800a5b8 <FLASH_MassErase+0x44>)
 800a596:	68da      	ldr	r2, [r3, #12]
 800a598:	4907      	ldr	r1, [pc, #28]	@ (800a5b8 <FLASH_MassErase+0x44>)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	4313      	orrs	r3, r2
 800a59e:	60cb      	str	r3, [r1, #12]
#endif /* FLASH_CR_PSIZE */

      /* Erase Bank1 */
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 800a5a0:	4b05      	ldr	r3, [pc, #20]	@ (800a5b8 <FLASH_MassErase+0x44>)
 800a5a2:	68db      	ldr	r3, [r3, #12]
 800a5a4:	4a04      	ldr	r2, [pc, #16]	@ (800a5b8 <FLASH_MassErase+0x44>)
 800a5a6:	f043 0388 	orr.w	r3, r3, #136	@ 0x88
 800a5aa:	60d3      	str	r3, [r2, #12]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 800a5ac:	bf00      	nop
 800a5ae:	370c      	adds	r7, #12
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr
 800a5b8:	52002000 	.word	0x52002000

0800a5bc <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b085      	sub	sp, #20
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	60f8      	str	r0, [r7, #12]
 800a5c4:	60b9      	str	r1, [r7, #8]
 800a5c6:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	f003 0301 	and.w	r3, r3, #1
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d010      	beq.n	800a5f4 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800a5d2:	4b0b      	ldr	r3, [pc, #44]	@ (800a600 <FLASH_Erase_Sector+0x44>)
 800a5d4:	68db      	ldr	r3, [r3, #12]
 800a5d6:	4a0a      	ldr	r2, [pc, #40]	@ (800a600 <FLASH_Erase_Sector+0x44>)
 800a5d8:	f423 63e6 	bic.w	r3, r3, #1840	@ 0x730
 800a5dc:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800a5de:	4b08      	ldr	r3, [pc, #32]	@ (800a600 <FLASH_Erase_Sector+0x44>)
 800a5e0:	68da      	ldr	r2, [r3, #12]
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	0219      	lsls	r1, r3, #8
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	430b      	orrs	r3, r1
 800a5ea:	4313      	orrs	r3, r2
 800a5ec:	4a04      	ldr	r2, [pc, #16]	@ (800a600 <FLASH_Erase_Sector+0x44>)
 800a5ee:	f043 0384 	orr.w	r3, r3, #132	@ 0x84
 800a5f2:	60d3      	str	r3, [r2, #12]

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 800a5f4:	bf00      	nop
 800a5f6:	3714      	adds	r7, #20
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr
 800a600:	52002000 	.word	0x52002000

0800a604 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a604:	b480      	push	{r7}
 800a606:	b089      	sub	sp, #36	@ 0x24
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
 800a60c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a60e:	2300      	movs	r3, #0
 800a610:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a612:	4b86      	ldr	r3, [pc, #536]	@ (800a82c <HAL_GPIO_Init+0x228>)
 800a614:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a616:	e18c      	b.n	800a932 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	681a      	ldr	r2, [r3, #0]
 800a61c:	2101      	movs	r1, #1
 800a61e:	69fb      	ldr	r3, [r7, #28]
 800a620:	fa01 f303 	lsl.w	r3, r1, r3
 800a624:	4013      	ands	r3, r2
 800a626:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	f000 817e 	beq.w	800a92c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	f003 0303 	and.w	r3, r3, #3
 800a638:	2b01      	cmp	r3, #1
 800a63a:	d005      	beq.n	800a648 <HAL_GPIO_Init+0x44>
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	f003 0303 	and.w	r3, r3, #3
 800a644:	2b02      	cmp	r3, #2
 800a646:	d130      	bne.n	800a6aa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	689b      	ldr	r3, [r3, #8]
 800a64c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a64e:	69fb      	ldr	r3, [r7, #28]
 800a650:	005b      	lsls	r3, r3, #1
 800a652:	2203      	movs	r2, #3
 800a654:	fa02 f303 	lsl.w	r3, r2, r3
 800a658:	43db      	mvns	r3, r3
 800a65a:	69ba      	ldr	r2, [r7, #24]
 800a65c:	4013      	ands	r3, r2
 800a65e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	68da      	ldr	r2, [r3, #12]
 800a664:	69fb      	ldr	r3, [r7, #28]
 800a666:	005b      	lsls	r3, r3, #1
 800a668:	fa02 f303 	lsl.w	r3, r2, r3
 800a66c:	69ba      	ldr	r2, [r7, #24]
 800a66e:	4313      	orrs	r3, r2
 800a670:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	69ba      	ldr	r2, [r7, #24]
 800a676:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	685b      	ldr	r3, [r3, #4]
 800a67c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a67e:	2201      	movs	r2, #1
 800a680:	69fb      	ldr	r3, [r7, #28]
 800a682:	fa02 f303 	lsl.w	r3, r2, r3
 800a686:	43db      	mvns	r3, r3
 800a688:	69ba      	ldr	r2, [r7, #24]
 800a68a:	4013      	ands	r3, r2
 800a68c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	091b      	lsrs	r3, r3, #4
 800a694:	f003 0201 	and.w	r2, r3, #1
 800a698:	69fb      	ldr	r3, [r7, #28]
 800a69a:	fa02 f303 	lsl.w	r3, r2, r3
 800a69e:	69ba      	ldr	r2, [r7, #24]
 800a6a0:	4313      	orrs	r3, r2
 800a6a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	69ba      	ldr	r2, [r7, #24]
 800a6a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	f003 0303 	and.w	r3, r3, #3
 800a6b2:	2b03      	cmp	r3, #3
 800a6b4:	d017      	beq.n	800a6e6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	68db      	ldr	r3, [r3, #12]
 800a6ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a6bc:	69fb      	ldr	r3, [r7, #28]
 800a6be:	005b      	lsls	r3, r3, #1
 800a6c0:	2203      	movs	r2, #3
 800a6c2:	fa02 f303 	lsl.w	r3, r2, r3
 800a6c6:	43db      	mvns	r3, r3
 800a6c8:	69ba      	ldr	r2, [r7, #24]
 800a6ca:	4013      	ands	r3, r2
 800a6cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	689a      	ldr	r2, [r3, #8]
 800a6d2:	69fb      	ldr	r3, [r7, #28]
 800a6d4:	005b      	lsls	r3, r3, #1
 800a6d6:	fa02 f303 	lsl.w	r3, r2, r3
 800a6da:	69ba      	ldr	r2, [r7, #24]
 800a6dc:	4313      	orrs	r3, r2
 800a6de:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	69ba      	ldr	r2, [r7, #24]
 800a6e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	685b      	ldr	r3, [r3, #4]
 800a6ea:	f003 0303 	and.w	r3, r3, #3
 800a6ee:	2b02      	cmp	r3, #2
 800a6f0:	d123      	bne.n	800a73a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a6f2:	69fb      	ldr	r3, [r7, #28]
 800a6f4:	08da      	lsrs	r2, r3, #3
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	3208      	adds	r2, #8
 800a6fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a700:	69fb      	ldr	r3, [r7, #28]
 800a702:	f003 0307 	and.w	r3, r3, #7
 800a706:	009b      	lsls	r3, r3, #2
 800a708:	220f      	movs	r2, #15
 800a70a:	fa02 f303 	lsl.w	r3, r2, r3
 800a70e:	43db      	mvns	r3, r3
 800a710:	69ba      	ldr	r2, [r7, #24]
 800a712:	4013      	ands	r3, r2
 800a714:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	691a      	ldr	r2, [r3, #16]
 800a71a:	69fb      	ldr	r3, [r7, #28]
 800a71c:	f003 0307 	and.w	r3, r3, #7
 800a720:	009b      	lsls	r3, r3, #2
 800a722:	fa02 f303 	lsl.w	r3, r2, r3
 800a726:	69ba      	ldr	r2, [r7, #24]
 800a728:	4313      	orrs	r3, r2
 800a72a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a72c:	69fb      	ldr	r3, [r7, #28]
 800a72e:	08da      	lsrs	r2, r3, #3
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	3208      	adds	r2, #8
 800a734:	69b9      	ldr	r1, [r7, #24]
 800a736:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a740:	69fb      	ldr	r3, [r7, #28]
 800a742:	005b      	lsls	r3, r3, #1
 800a744:	2203      	movs	r2, #3
 800a746:	fa02 f303 	lsl.w	r3, r2, r3
 800a74a:	43db      	mvns	r3, r3
 800a74c:	69ba      	ldr	r2, [r7, #24]
 800a74e:	4013      	ands	r3, r2
 800a750:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	f003 0203 	and.w	r2, r3, #3
 800a75a:	69fb      	ldr	r3, [r7, #28]
 800a75c:	005b      	lsls	r3, r3, #1
 800a75e:	fa02 f303 	lsl.w	r3, r2, r3
 800a762:	69ba      	ldr	r2, [r7, #24]
 800a764:	4313      	orrs	r3, r2
 800a766:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	69ba      	ldr	r2, [r7, #24]
 800a76c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	685b      	ldr	r3, [r3, #4]
 800a772:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a776:	2b00      	cmp	r3, #0
 800a778:	f000 80d8 	beq.w	800a92c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a77c:	4b2c      	ldr	r3, [pc, #176]	@ (800a830 <HAL_GPIO_Init+0x22c>)
 800a77e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a782:	4a2b      	ldr	r2, [pc, #172]	@ (800a830 <HAL_GPIO_Init+0x22c>)
 800a784:	f043 0302 	orr.w	r3, r3, #2
 800a788:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800a78c:	4b28      	ldr	r3, [pc, #160]	@ (800a830 <HAL_GPIO_Init+0x22c>)
 800a78e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a792:	f003 0302 	and.w	r3, r3, #2
 800a796:	60fb      	str	r3, [r7, #12]
 800a798:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a79a:	4a26      	ldr	r2, [pc, #152]	@ (800a834 <HAL_GPIO_Init+0x230>)
 800a79c:	69fb      	ldr	r3, [r7, #28]
 800a79e:	089b      	lsrs	r3, r3, #2
 800a7a0:	3302      	adds	r3, #2
 800a7a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a7a8:	69fb      	ldr	r3, [r7, #28]
 800a7aa:	f003 0303 	and.w	r3, r3, #3
 800a7ae:	009b      	lsls	r3, r3, #2
 800a7b0:	220f      	movs	r2, #15
 800a7b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a7b6:	43db      	mvns	r3, r3
 800a7b8:	69ba      	ldr	r2, [r7, #24]
 800a7ba:	4013      	ands	r3, r2
 800a7bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	4a1d      	ldr	r2, [pc, #116]	@ (800a838 <HAL_GPIO_Init+0x234>)
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	d04a      	beq.n	800a85c <HAL_GPIO_Init+0x258>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	4a1c      	ldr	r2, [pc, #112]	@ (800a83c <HAL_GPIO_Init+0x238>)
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d02b      	beq.n	800a826 <HAL_GPIO_Init+0x222>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	4a1b      	ldr	r2, [pc, #108]	@ (800a840 <HAL_GPIO_Init+0x23c>)
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d025      	beq.n	800a822 <HAL_GPIO_Init+0x21e>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	4a1a      	ldr	r2, [pc, #104]	@ (800a844 <HAL_GPIO_Init+0x240>)
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d01f      	beq.n	800a81e <HAL_GPIO_Init+0x21a>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	4a19      	ldr	r2, [pc, #100]	@ (800a848 <HAL_GPIO_Init+0x244>)
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d019      	beq.n	800a81a <HAL_GPIO_Init+0x216>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	4a18      	ldr	r2, [pc, #96]	@ (800a84c <HAL_GPIO_Init+0x248>)
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d013      	beq.n	800a816 <HAL_GPIO_Init+0x212>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	4a17      	ldr	r2, [pc, #92]	@ (800a850 <HAL_GPIO_Init+0x24c>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d00d      	beq.n	800a812 <HAL_GPIO_Init+0x20e>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	4a16      	ldr	r2, [pc, #88]	@ (800a854 <HAL_GPIO_Init+0x250>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d007      	beq.n	800a80e <HAL_GPIO_Init+0x20a>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	4a15      	ldr	r2, [pc, #84]	@ (800a858 <HAL_GPIO_Init+0x254>)
 800a802:	4293      	cmp	r3, r2
 800a804:	d101      	bne.n	800a80a <HAL_GPIO_Init+0x206>
 800a806:	2309      	movs	r3, #9
 800a808:	e029      	b.n	800a85e <HAL_GPIO_Init+0x25a>
 800a80a:	230a      	movs	r3, #10
 800a80c:	e027      	b.n	800a85e <HAL_GPIO_Init+0x25a>
 800a80e:	2307      	movs	r3, #7
 800a810:	e025      	b.n	800a85e <HAL_GPIO_Init+0x25a>
 800a812:	2306      	movs	r3, #6
 800a814:	e023      	b.n	800a85e <HAL_GPIO_Init+0x25a>
 800a816:	2305      	movs	r3, #5
 800a818:	e021      	b.n	800a85e <HAL_GPIO_Init+0x25a>
 800a81a:	2304      	movs	r3, #4
 800a81c:	e01f      	b.n	800a85e <HAL_GPIO_Init+0x25a>
 800a81e:	2303      	movs	r3, #3
 800a820:	e01d      	b.n	800a85e <HAL_GPIO_Init+0x25a>
 800a822:	2302      	movs	r3, #2
 800a824:	e01b      	b.n	800a85e <HAL_GPIO_Init+0x25a>
 800a826:	2301      	movs	r3, #1
 800a828:	e019      	b.n	800a85e <HAL_GPIO_Init+0x25a>
 800a82a:	bf00      	nop
 800a82c:	58000080 	.word	0x58000080
 800a830:	58024400 	.word	0x58024400
 800a834:	58000400 	.word	0x58000400
 800a838:	58020000 	.word	0x58020000
 800a83c:	58020400 	.word	0x58020400
 800a840:	58020800 	.word	0x58020800
 800a844:	58020c00 	.word	0x58020c00
 800a848:	58021000 	.word	0x58021000
 800a84c:	58021400 	.word	0x58021400
 800a850:	58021800 	.word	0x58021800
 800a854:	58021c00 	.word	0x58021c00
 800a858:	58022400 	.word	0x58022400
 800a85c:	2300      	movs	r3, #0
 800a85e:	69fa      	ldr	r2, [r7, #28]
 800a860:	f002 0203 	and.w	r2, r2, #3
 800a864:	0092      	lsls	r2, r2, #2
 800a866:	4093      	lsls	r3, r2
 800a868:	69ba      	ldr	r2, [r7, #24]
 800a86a:	4313      	orrs	r3, r2
 800a86c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a86e:	4938      	ldr	r1, [pc, #224]	@ (800a950 <HAL_GPIO_Init+0x34c>)
 800a870:	69fb      	ldr	r3, [r7, #28]
 800a872:	089b      	lsrs	r3, r3, #2
 800a874:	3302      	adds	r3, #2
 800a876:	69ba      	ldr	r2, [r7, #24]
 800a878:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a87c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	43db      	mvns	r3, r3
 800a888:	69ba      	ldr	r2, [r7, #24]
 800a88a:	4013      	ands	r3, r2
 800a88c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a896:	2b00      	cmp	r3, #0
 800a898:	d003      	beq.n	800a8a2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800a89a:	69ba      	ldr	r2, [r7, #24]
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800a8a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a8a6:	69bb      	ldr	r3, [r7, #24]
 800a8a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a8aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	43db      	mvns	r3, r3
 800a8b6:	69ba      	ldr	r2, [r7, #24]
 800a8b8:	4013      	ands	r3, r2
 800a8ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d003      	beq.n	800a8d0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800a8c8:	69ba      	ldr	r2, [r7, #24]
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800a8d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a8d4:	69bb      	ldr	r3, [r7, #24]
 800a8d6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	43db      	mvns	r3, r3
 800a8e2:	69ba      	ldr	r2, [r7, #24]
 800a8e4:	4013      	ands	r3, r2
 800a8e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d003      	beq.n	800a8fc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800a8f4:	69ba      	ldr	r2, [r7, #24]
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	4313      	orrs	r3, r2
 800a8fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	69ba      	ldr	r2, [r7, #24]
 800a900:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	43db      	mvns	r3, r3
 800a90c:	69ba      	ldr	r2, [r7, #24]
 800a90e:	4013      	ands	r3, r2
 800a910:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	685b      	ldr	r3, [r3, #4]
 800a916:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d003      	beq.n	800a926 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800a91e:	69ba      	ldr	r2, [r7, #24]
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	4313      	orrs	r3, r2
 800a924:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	69ba      	ldr	r2, [r7, #24]
 800a92a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800a92c:	69fb      	ldr	r3, [r7, #28]
 800a92e:	3301      	adds	r3, #1
 800a930:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	69fb      	ldr	r3, [r7, #28]
 800a938:	fa22 f303 	lsr.w	r3, r2, r3
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	f47f ae6b 	bne.w	800a618 <HAL_GPIO_Init+0x14>
  }
}
 800a942:	bf00      	nop
 800a944:	bf00      	nop
 800a946:	3724      	adds	r7, #36	@ 0x24
 800a948:	46bd      	mov	sp, r7
 800a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94e:	4770      	bx	lr
 800a950:	58000400 	.word	0x58000400

0800a954 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a954:	b480      	push	{r7}
 800a956:	b085      	sub	sp, #20
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
 800a95c:	460b      	mov	r3, r1
 800a95e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	691a      	ldr	r2, [r3, #16]
 800a964:	887b      	ldrh	r3, [r7, #2]
 800a966:	4013      	ands	r3, r2
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d002      	beq.n	800a972 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a96c:	2301      	movs	r3, #1
 800a96e:	73fb      	strb	r3, [r7, #15]
 800a970:	e001      	b.n	800a976 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a972:	2300      	movs	r3, #0
 800a974:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a976:	7bfb      	ldrb	r3, [r7, #15]
}
 800a978:	4618      	mov	r0, r3
 800a97a:	3714      	adds	r7, #20
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr

0800a984 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a984:	b480      	push	{r7}
 800a986:	b083      	sub	sp, #12
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	460b      	mov	r3, r1
 800a98e:	807b      	strh	r3, [r7, #2]
 800a990:	4613      	mov	r3, r2
 800a992:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a994:	787b      	ldrb	r3, [r7, #1]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d003      	beq.n	800a9a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a99a:	887a      	ldrh	r2, [r7, #2]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800a9a0:	e003      	b.n	800a9aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a9a2:	887b      	ldrh	r3, [r7, #2]
 800a9a4:	041a      	lsls	r2, r3, #16
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	619a      	str	r2, [r3, #24]
}
 800a9aa:	bf00      	nop
 800a9ac:	370c      	adds	r7, #12
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b4:	4770      	bx	lr

0800a9b6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a9b6:	b580      	push	{r7, lr}
 800a9b8:	b082      	sub	sp, #8
 800a9ba:	af00      	add	r7, sp, #0
 800a9bc:	4603      	mov	r3, r0
 800a9be:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800a9c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a9c4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800a9c8:	88fb      	ldrh	r3, [r7, #6]
 800a9ca:	4013      	ands	r3, r2
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d008      	beq.n	800a9e2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a9d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a9d4:	88fb      	ldrh	r3, [r7, #6]
 800a9d6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a9da:	88fb      	ldrh	r3, [r7, #6]
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f7f7 faab 	bl	8001f38 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800a9e2:	bf00      	nop
 800a9e4:	3708      	adds	r7, #8
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}
	...

0800a9ec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b084      	sub	sp, #16
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a9f4:	4b19      	ldr	r3, [pc, #100]	@ (800aa5c <HAL_PWREx_ConfigSupply+0x70>)
 800a9f6:	68db      	ldr	r3, [r3, #12]
 800a9f8:	f003 0304 	and.w	r3, r3, #4
 800a9fc:	2b04      	cmp	r3, #4
 800a9fe:	d00a      	beq.n	800aa16 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800aa00:	4b16      	ldr	r3, [pc, #88]	@ (800aa5c <HAL_PWREx_ConfigSupply+0x70>)
 800aa02:	68db      	ldr	r3, [r3, #12]
 800aa04:	f003 0307 	and.w	r3, r3, #7
 800aa08:	687a      	ldr	r2, [r7, #4]
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d001      	beq.n	800aa12 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800aa0e:	2301      	movs	r3, #1
 800aa10:	e01f      	b.n	800aa52 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800aa12:	2300      	movs	r3, #0
 800aa14:	e01d      	b.n	800aa52 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800aa16:	4b11      	ldr	r3, [pc, #68]	@ (800aa5c <HAL_PWREx_ConfigSupply+0x70>)
 800aa18:	68db      	ldr	r3, [r3, #12]
 800aa1a:	f023 0207 	bic.w	r2, r3, #7
 800aa1e:	490f      	ldr	r1, [pc, #60]	@ (800aa5c <HAL_PWREx_ConfigSupply+0x70>)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	4313      	orrs	r3, r2
 800aa24:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800aa26:	f7f9 fd6b 	bl	8004500 <HAL_GetTick>
 800aa2a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800aa2c:	e009      	b.n	800aa42 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800aa2e:	f7f9 fd67 	bl	8004500 <HAL_GetTick>
 800aa32:	4602      	mov	r2, r0
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	1ad3      	subs	r3, r2, r3
 800aa38:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800aa3c:	d901      	bls.n	800aa42 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800aa3e:	2301      	movs	r3, #1
 800aa40:	e007      	b.n	800aa52 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800aa42:	4b06      	ldr	r3, [pc, #24]	@ (800aa5c <HAL_PWREx_ConfigSupply+0x70>)
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800aa4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa4e:	d1ee      	bne.n	800aa2e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800aa50:	2300      	movs	r3, #0
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3710      	adds	r7, #16
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}
 800aa5a:	bf00      	nop
 800aa5c:	58024800 	.word	0x58024800

0800aa60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b08c      	sub	sp, #48	@ 0x30
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d101      	bne.n	800aa72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800aa6e:	2301      	movs	r3, #1
 800aa70:	e3c8      	b.n	800b204 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f003 0301 	and.w	r3, r3, #1
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	f000 8087 	beq.w	800ab8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aa80:	4b88      	ldr	r3, [pc, #544]	@ (800aca4 <HAL_RCC_OscConfig+0x244>)
 800aa82:	691b      	ldr	r3, [r3, #16]
 800aa84:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aa88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800aa8a:	4b86      	ldr	r3, [pc, #536]	@ (800aca4 <HAL_RCC_OscConfig+0x244>)
 800aa8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800aa90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa92:	2b10      	cmp	r3, #16
 800aa94:	d007      	beq.n	800aaa6 <HAL_RCC_OscConfig+0x46>
 800aa96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa98:	2b18      	cmp	r3, #24
 800aa9a:	d110      	bne.n	800aabe <HAL_RCC_OscConfig+0x5e>
 800aa9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa9e:	f003 0303 	and.w	r3, r3, #3
 800aaa2:	2b02      	cmp	r3, #2
 800aaa4:	d10b      	bne.n	800aabe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aaa6:	4b7f      	ldr	r3, [pc, #508]	@ (800aca4 <HAL_RCC_OscConfig+0x244>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d06c      	beq.n	800ab8c <HAL_RCC_OscConfig+0x12c>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	685b      	ldr	r3, [r3, #4]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d168      	bne.n	800ab8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800aaba:	2301      	movs	r3, #1
 800aabc:	e3a2      	b.n	800b204 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	685b      	ldr	r3, [r3, #4]
 800aac2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aac6:	d106      	bne.n	800aad6 <HAL_RCC_OscConfig+0x76>
 800aac8:	4b76      	ldr	r3, [pc, #472]	@ (800aca4 <HAL_RCC_OscConfig+0x244>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	4a75      	ldr	r2, [pc, #468]	@ (800aca4 <HAL_RCC_OscConfig+0x244>)
 800aace:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800aad2:	6013      	str	r3, [r2, #0]
 800aad4:	e02e      	b.n	800ab34 <HAL_RCC_OscConfig+0xd4>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d10c      	bne.n	800aaf8 <HAL_RCC_OscConfig+0x98>
 800aade:	4b71      	ldr	r3, [pc, #452]	@ (800aca4 <HAL_RCC_OscConfig+0x244>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	4a70      	ldr	r2, [pc, #448]	@ (800aca4 <HAL_RCC_OscConfig+0x244>)
 800aae4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aae8:	6013      	str	r3, [r2, #0]
 800aaea:	4b6e      	ldr	r3, [pc, #440]	@ (800aca4 <HAL_RCC_OscConfig+0x244>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	4a6d      	ldr	r2, [pc, #436]	@ (800aca4 <HAL_RCC_OscConfig+0x244>)
 800aaf0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800aaf4:	6013      	str	r3, [r2, #0]
 800aaf6:	e01d      	b.n	800ab34 <HAL_RCC_OscConfig+0xd4>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	685b      	ldr	r3, [r3, #4]
 800aafc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ab00:	d10c      	bne.n	800ab1c <HAL_RCC_OscConfig+0xbc>
 800ab02:	4b68      	ldr	r3, [pc, #416]	@ (800aca4 <HAL_RCC_OscConfig+0x244>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	4a67      	ldr	r2, [pc, #412]	@ (800aca4 <HAL_RCC_OscConfig+0x244>)
 800ab08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ab0c:	6013      	str	r3, [r2, #0]
 800ab0e:	4b65      	ldr	r3, [pc, #404]	@ (800aca4 <HAL_RCC_OscConfig+0x244>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	4a64      	ldr	r2, [pc, #400]	@ (800aca4 <HAL_RCC_OscConfig+0x244>)
 800ab14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ab18:	6013      	str	r3, [r2, #0]
 800ab1a:	e00b      	b.n	800ab34 <HAL_RCC_OscConfig+0xd4>
 800ab1c:	4b61      	ldr	r3, [pc, #388]	@ (800aca4 <HAL_RCC_OscConfig+0x244>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4a60      	ldr	r2, [pc, #384]	@ (800aca4 <HAL_RCC_OscConfig+0x244>)
 800ab22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ab26:	6013      	str	r3, [r2, #0]
 800ab28:	4b5e      	ldr	r3, [pc, #376]	@ (800aca4 <HAL_RCC_OscConfig+0x244>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4a5d      	ldr	r2, [pc, #372]	@ (800aca4 <HAL_RCC_OscConfig+0x244>)
 800ab2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ab32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	685b      	ldr	r3, [r3, #4]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d013      	beq.n	800ab64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab3c:	f7f9 fce0 	bl	8004500 <HAL_GetTick>
 800ab40:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ab42:	e008      	b.n	800ab56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ab44:	f7f9 fcdc 	bl	8004500 <HAL_GetTick>
 800ab48:	4602      	mov	r2, r0
 800ab4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab4c:	1ad3      	subs	r3, r2, r3
 800ab4e:	2b64      	cmp	r3, #100	@ 0x64
 800ab50:	d901      	bls.n	800ab56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800ab52:	2303      	movs	r3, #3
 800ab54:	e356      	b.n	800b204 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ab56:	4b53      	ldr	r3, [pc, #332]	@ (800aca4 <HAL_RCC_OscConfig+0x244>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d0f0      	beq.n	800ab44 <HAL_RCC_OscConfig+0xe4>
 800ab62:	e014      	b.n	800ab8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab64:	f7f9 fccc 	bl	8004500 <HAL_GetTick>
 800ab68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ab6a:	e008      	b.n	800ab7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ab6c:	f7f9 fcc8 	bl	8004500 <HAL_GetTick>
 800ab70:	4602      	mov	r2, r0
 800ab72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab74:	1ad3      	subs	r3, r2, r3
 800ab76:	2b64      	cmp	r3, #100	@ 0x64
 800ab78:	d901      	bls.n	800ab7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800ab7a:	2303      	movs	r3, #3
 800ab7c:	e342      	b.n	800b204 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ab7e:	4b49      	ldr	r3, [pc, #292]	@ (800aca4 <HAL_RCC_OscConfig+0x244>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d1f0      	bne.n	800ab6c <HAL_RCC_OscConfig+0x10c>
 800ab8a:	e000      	b.n	800ab8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ab8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f003 0302 	and.w	r3, r3, #2
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	f000 808c 	beq.w	800acb4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ab9c:	4b41      	ldr	r3, [pc, #260]	@ (800aca4 <HAL_RCC_OscConfig+0x244>)
 800ab9e:	691b      	ldr	r3, [r3, #16]
 800aba0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aba4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800aba6:	4b3f      	ldr	r3, [pc, #252]	@ (800aca4 <HAL_RCC_OscConfig+0x244>)
 800aba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abaa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800abac:	6a3b      	ldr	r3, [r7, #32]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d007      	beq.n	800abc2 <HAL_RCC_OscConfig+0x162>
 800abb2:	6a3b      	ldr	r3, [r7, #32]
 800abb4:	2b18      	cmp	r3, #24
 800abb6:	d137      	bne.n	800ac28 <HAL_RCC_OscConfig+0x1c8>
 800abb8:	69fb      	ldr	r3, [r7, #28]
 800abba:	f003 0303 	and.w	r3, r3, #3
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d132      	bne.n	800ac28 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800abc2:	4b38      	ldr	r3, [pc, #224]	@ (800aca4 <HAL_RCC_OscConfig+0x244>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f003 0304 	and.w	r3, r3, #4
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d005      	beq.n	800abda <HAL_RCC_OscConfig+0x17a>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	68db      	ldr	r3, [r3, #12]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d101      	bne.n	800abda <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800abd6:	2301      	movs	r3, #1
 800abd8:	e314      	b.n	800b204 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800abda:	4b32      	ldr	r3, [pc, #200]	@ (800aca4 <HAL_RCC_OscConfig+0x244>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f023 0219 	bic.w	r2, r3, #25
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	68db      	ldr	r3, [r3, #12]
 800abe6:	492f      	ldr	r1, [pc, #188]	@ (800aca4 <HAL_RCC_OscConfig+0x244>)
 800abe8:	4313      	orrs	r3, r2
 800abea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abec:	f7f9 fc88 	bl	8004500 <HAL_GetTick>
 800abf0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800abf2:	e008      	b.n	800ac06 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800abf4:	f7f9 fc84 	bl	8004500 <HAL_GetTick>
 800abf8:	4602      	mov	r2, r0
 800abfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abfc:	1ad3      	subs	r3, r2, r3
 800abfe:	2b02      	cmp	r3, #2
 800ac00:	d901      	bls.n	800ac06 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800ac02:	2303      	movs	r3, #3
 800ac04:	e2fe      	b.n	800b204 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ac06:	4b27      	ldr	r3, [pc, #156]	@ (800aca4 <HAL_RCC_OscConfig+0x244>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f003 0304 	and.w	r3, r3, #4
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d0f0      	beq.n	800abf4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac12:	4b24      	ldr	r3, [pc, #144]	@ (800aca4 <HAL_RCC_OscConfig+0x244>)
 800ac14:	685b      	ldr	r3, [r3, #4]
 800ac16:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	691b      	ldr	r3, [r3, #16]
 800ac1e:	061b      	lsls	r3, r3, #24
 800ac20:	4920      	ldr	r1, [pc, #128]	@ (800aca4 <HAL_RCC_OscConfig+0x244>)
 800ac22:	4313      	orrs	r3, r2
 800ac24:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ac26:	e045      	b.n	800acb4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	68db      	ldr	r3, [r3, #12]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d026      	beq.n	800ac7e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ac30:	4b1c      	ldr	r3, [pc, #112]	@ (800aca4 <HAL_RCC_OscConfig+0x244>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f023 0219 	bic.w	r2, r3, #25
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	68db      	ldr	r3, [r3, #12]
 800ac3c:	4919      	ldr	r1, [pc, #100]	@ (800aca4 <HAL_RCC_OscConfig+0x244>)
 800ac3e:	4313      	orrs	r3, r2
 800ac40:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac42:	f7f9 fc5d 	bl	8004500 <HAL_GetTick>
 800ac46:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ac48:	e008      	b.n	800ac5c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ac4a:	f7f9 fc59 	bl	8004500 <HAL_GetTick>
 800ac4e:	4602      	mov	r2, r0
 800ac50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac52:	1ad3      	subs	r3, r2, r3
 800ac54:	2b02      	cmp	r3, #2
 800ac56:	d901      	bls.n	800ac5c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800ac58:	2303      	movs	r3, #3
 800ac5a:	e2d3      	b.n	800b204 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ac5c:	4b11      	ldr	r3, [pc, #68]	@ (800aca4 <HAL_RCC_OscConfig+0x244>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f003 0304 	and.w	r3, r3, #4
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d0f0      	beq.n	800ac4a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac68:	4b0e      	ldr	r3, [pc, #56]	@ (800aca4 <HAL_RCC_OscConfig+0x244>)
 800ac6a:	685b      	ldr	r3, [r3, #4]
 800ac6c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	691b      	ldr	r3, [r3, #16]
 800ac74:	061b      	lsls	r3, r3, #24
 800ac76:	490b      	ldr	r1, [pc, #44]	@ (800aca4 <HAL_RCC_OscConfig+0x244>)
 800ac78:	4313      	orrs	r3, r2
 800ac7a:	604b      	str	r3, [r1, #4]
 800ac7c:	e01a      	b.n	800acb4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ac7e:	4b09      	ldr	r3, [pc, #36]	@ (800aca4 <HAL_RCC_OscConfig+0x244>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	4a08      	ldr	r2, [pc, #32]	@ (800aca4 <HAL_RCC_OscConfig+0x244>)
 800ac84:	f023 0301 	bic.w	r3, r3, #1
 800ac88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac8a:	f7f9 fc39 	bl	8004500 <HAL_GetTick>
 800ac8e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ac90:	e00a      	b.n	800aca8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ac92:	f7f9 fc35 	bl	8004500 <HAL_GetTick>
 800ac96:	4602      	mov	r2, r0
 800ac98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac9a:	1ad3      	subs	r3, r2, r3
 800ac9c:	2b02      	cmp	r3, #2
 800ac9e:	d903      	bls.n	800aca8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800aca0:	2303      	movs	r3, #3
 800aca2:	e2af      	b.n	800b204 <HAL_RCC_OscConfig+0x7a4>
 800aca4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800aca8:	4b96      	ldr	r3, [pc, #600]	@ (800af04 <HAL_RCC_OscConfig+0x4a4>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f003 0304 	and.w	r3, r3, #4
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d1ee      	bne.n	800ac92 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f003 0310 	and.w	r3, r3, #16
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d06a      	beq.n	800ad96 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800acc0:	4b90      	ldr	r3, [pc, #576]	@ (800af04 <HAL_RCC_OscConfig+0x4a4>)
 800acc2:	691b      	ldr	r3, [r3, #16]
 800acc4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800acc8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800acca:	4b8e      	ldr	r3, [pc, #568]	@ (800af04 <HAL_RCC_OscConfig+0x4a4>)
 800accc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acce:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800acd0:	69bb      	ldr	r3, [r7, #24]
 800acd2:	2b08      	cmp	r3, #8
 800acd4:	d007      	beq.n	800ace6 <HAL_RCC_OscConfig+0x286>
 800acd6:	69bb      	ldr	r3, [r7, #24]
 800acd8:	2b18      	cmp	r3, #24
 800acda:	d11b      	bne.n	800ad14 <HAL_RCC_OscConfig+0x2b4>
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	f003 0303 	and.w	r3, r3, #3
 800ace2:	2b01      	cmp	r3, #1
 800ace4:	d116      	bne.n	800ad14 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ace6:	4b87      	ldr	r3, [pc, #540]	@ (800af04 <HAL_RCC_OscConfig+0x4a4>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d005      	beq.n	800acfe <HAL_RCC_OscConfig+0x29e>
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	69db      	ldr	r3, [r3, #28]
 800acf6:	2b80      	cmp	r3, #128	@ 0x80
 800acf8:	d001      	beq.n	800acfe <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800acfa:	2301      	movs	r3, #1
 800acfc:	e282      	b.n	800b204 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800acfe:	4b81      	ldr	r3, [pc, #516]	@ (800af04 <HAL_RCC_OscConfig+0x4a4>)
 800ad00:	68db      	ldr	r3, [r3, #12]
 800ad02:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6a1b      	ldr	r3, [r3, #32]
 800ad0a:	061b      	lsls	r3, r3, #24
 800ad0c:	497d      	ldr	r1, [pc, #500]	@ (800af04 <HAL_RCC_OscConfig+0x4a4>)
 800ad0e:	4313      	orrs	r3, r2
 800ad10:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ad12:	e040      	b.n	800ad96 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	69db      	ldr	r3, [r3, #28]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d023      	beq.n	800ad64 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800ad1c:	4b79      	ldr	r3, [pc, #484]	@ (800af04 <HAL_RCC_OscConfig+0x4a4>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4a78      	ldr	r2, [pc, #480]	@ (800af04 <HAL_RCC_OscConfig+0x4a4>)
 800ad22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad28:	f7f9 fbea 	bl	8004500 <HAL_GetTick>
 800ad2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ad2e:	e008      	b.n	800ad42 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ad30:	f7f9 fbe6 	bl	8004500 <HAL_GetTick>
 800ad34:	4602      	mov	r2, r0
 800ad36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad38:	1ad3      	subs	r3, r2, r3
 800ad3a:	2b02      	cmp	r3, #2
 800ad3c:	d901      	bls.n	800ad42 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800ad3e:	2303      	movs	r3, #3
 800ad40:	e260      	b.n	800b204 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ad42:	4b70      	ldr	r3, [pc, #448]	@ (800af04 <HAL_RCC_OscConfig+0x4a4>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d0f0      	beq.n	800ad30 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ad4e:	4b6d      	ldr	r3, [pc, #436]	@ (800af04 <HAL_RCC_OscConfig+0x4a4>)
 800ad50:	68db      	ldr	r3, [r3, #12]
 800ad52:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6a1b      	ldr	r3, [r3, #32]
 800ad5a:	061b      	lsls	r3, r3, #24
 800ad5c:	4969      	ldr	r1, [pc, #420]	@ (800af04 <HAL_RCC_OscConfig+0x4a4>)
 800ad5e:	4313      	orrs	r3, r2
 800ad60:	60cb      	str	r3, [r1, #12]
 800ad62:	e018      	b.n	800ad96 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800ad64:	4b67      	ldr	r3, [pc, #412]	@ (800af04 <HAL_RCC_OscConfig+0x4a4>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	4a66      	ldr	r2, [pc, #408]	@ (800af04 <HAL_RCC_OscConfig+0x4a4>)
 800ad6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ad6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad70:	f7f9 fbc6 	bl	8004500 <HAL_GetTick>
 800ad74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ad76:	e008      	b.n	800ad8a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ad78:	f7f9 fbc2 	bl	8004500 <HAL_GetTick>
 800ad7c:	4602      	mov	r2, r0
 800ad7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad80:	1ad3      	subs	r3, r2, r3
 800ad82:	2b02      	cmp	r3, #2
 800ad84:	d901      	bls.n	800ad8a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800ad86:	2303      	movs	r3, #3
 800ad88:	e23c      	b.n	800b204 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ad8a:	4b5e      	ldr	r3, [pc, #376]	@ (800af04 <HAL_RCC_OscConfig+0x4a4>)
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d1f0      	bne.n	800ad78 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f003 0308 	and.w	r3, r3, #8
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d036      	beq.n	800ae10 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	695b      	ldr	r3, [r3, #20]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d019      	beq.n	800adde <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800adaa:	4b56      	ldr	r3, [pc, #344]	@ (800af04 <HAL_RCC_OscConfig+0x4a4>)
 800adac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800adae:	4a55      	ldr	r2, [pc, #340]	@ (800af04 <HAL_RCC_OscConfig+0x4a4>)
 800adb0:	f043 0301 	orr.w	r3, r3, #1
 800adb4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800adb6:	f7f9 fba3 	bl	8004500 <HAL_GetTick>
 800adba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800adbc:	e008      	b.n	800add0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800adbe:	f7f9 fb9f 	bl	8004500 <HAL_GetTick>
 800adc2:	4602      	mov	r2, r0
 800adc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adc6:	1ad3      	subs	r3, r2, r3
 800adc8:	2b02      	cmp	r3, #2
 800adca:	d901      	bls.n	800add0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800adcc:	2303      	movs	r3, #3
 800adce:	e219      	b.n	800b204 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800add0:	4b4c      	ldr	r3, [pc, #304]	@ (800af04 <HAL_RCC_OscConfig+0x4a4>)
 800add2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800add4:	f003 0302 	and.w	r3, r3, #2
 800add8:	2b00      	cmp	r3, #0
 800adda:	d0f0      	beq.n	800adbe <HAL_RCC_OscConfig+0x35e>
 800addc:	e018      	b.n	800ae10 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800adde:	4b49      	ldr	r3, [pc, #292]	@ (800af04 <HAL_RCC_OscConfig+0x4a4>)
 800ade0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ade2:	4a48      	ldr	r2, [pc, #288]	@ (800af04 <HAL_RCC_OscConfig+0x4a4>)
 800ade4:	f023 0301 	bic.w	r3, r3, #1
 800ade8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800adea:	f7f9 fb89 	bl	8004500 <HAL_GetTick>
 800adee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800adf0:	e008      	b.n	800ae04 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800adf2:	f7f9 fb85 	bl	8004500 <HAL_GetTick>
 800adf6:	4602      	mov	r2, r0
 800adf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adfa:	1ad3      	subs	r3, r2, r3
 800adfc:	2b02      	cmp	r3, #2
 800adfe:	d901      	bls.n	800ae04 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800ae00:	2303      	movs	r3, #3
 800ae02:	e1ff      	b.n	800b204 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ae04:	4b3f      	ldr	r3, [pc, #252]	@ (800af04 <HAL_RCC_OscConfig+0x4a4>)
 800ae06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae08:	f003 0302 	and.w	r3, r3, #2
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d1f0      	bne.n	800adf2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f003 0320 	and.w	r3, r3, #32
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d036      	beq.n	800ae8a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	699b      	ldr	r3, [r3, #24]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d019      	beq.n	800ae58 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ae24:	4b37      	ldr	r3, [pc, #220]	@ (800af04 <HAL_RCC_OscConfig+0x4a4>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	4a36      	ldr	r2, [pc, #216]	@ (800af04 <HAL_RCC_OscConfig+0x4a4>)
 800ae2a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ae2e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ae30:	f7f9 fb66 	bl	8004500 <HAL_GetTick>
 800ae34:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ae36:	e008      	b.n	800ae4a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ae38:	f7f9 fb62 	bl	8004500 <HAL_GetTick>
 800ae3c:	4602      	mov	r2, r0
 800ae3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae40:	1ad3      	subs	r3, r2, r3
 800ae42:	2b02      	cmp	r3, #2
 800ae44:	d901      	bls.n	800ae4a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800ae46:	2303      	movs	r3, #3
 800ae48:	e1dc      	b.n	800b204 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ae4a:	4b2e      	ldr	r3, [pc, #184]	@ (800af04 <HAL_RCC_OscConfig+0x4a4>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d0f0      	beq.n	800ae38 <HAL_RCC_OscConfig+0x3d8>
 800ae56:	e018      	b.n	800ae8a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ae58:	4b2a      	ldr	r3, [pc, #168]	@ (800af04 <HAL_RCC_OscConfig+0x4a4>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	4a29      	ldr	r2, [pc, #164]	@ (800af04 <HAL_RCC_OscConfig+0x4a4>)
 800ae5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ae62:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ae64:	f7f9 fb4c 	bl	8004500 <HAL_GetTick>
 800ae68:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ae6a:	e008      	b.n	800ae7e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ae6c:	f7f9 fb48 	bl	8004500 <HAL_GetTick>
 800ae70:	4602      	mov	r2, r0
 800ae72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae74:	1ad3      	subs	r3, r2, r3
 800ae76:	2b02      	cmp	r3, #2
 800ae78:	d901      	bls.n	800ae7e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800ae7a:	2303      	movs	r3, #3
 800ae7c:	e1c2      	b.n	800b204 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ae7e:	4b21      	ldr	r3, [pc, #132]	@ (800af04 <HAL_RCC_OscConfig+0x4a4>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d1f0      	bne.n	800ae6c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f003 0304 	and.w	r3, r3, #4
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	f000 8086 	beq.w	800afa4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ae98:	4b1b      	ldr	r3, [pc, #108]	@ (800af08 <HAL_RCC_OscConfig+0x4a8>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	4a1a      	ldr	r2, [pc, #104]	@ (800af08 <HAL_RCC_OscConfig+0x4a8>)
 800ae9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aea2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aea4:	f7f9 fb2c 	bl	8004500 <HAL_GetTick>
 800aea8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aeaa:	e008      	b.n	800aebe <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aeac:	f7f9 fb28 	bl	8004500 <HAL_GetTick>
 800aeb0:	4602      	mov	r2, r0
 800aeb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeb4:	1ad3      	subs	r3, r2, r3
 800aeb6:	2b64      	cmp	r3, #100	@ 0x64
 800aeb8:	d901      	bls.n	800aebe <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800aeba:	2303      	movs	r3, #3
 800aebc:	e1a2      	b.n	800b204 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aebe:	4b12      	ldr	r3, [pc, #72]	@ (800af08 <HAL_RCC_OscConfig+0x4a8>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d0f0      	beq.n	800aeac <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	689b      	ldr	r3, [r3, #8]
 800aece:	2b01      	cmp	r3, #1
 800aed0:	d106      	bne.n	800aee0 <HAL_RCC_OscConfig+0x480>
 800aed2:	4b0c      	ldr	r3, [pc, #48]	@ (800af04 <HAL_RCC_OscConfig+0x4a4>)
 800aed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aed6:	4a0b      	ldr	r2, [pc, #44]	@ (800af04 <HAL_RCC_OscConfig+0x4a4>)
 800aed8:	f043 0301 	orr.w	r3, r3, #1
 800aedc:	6713      	str	r3, [r2, #112]	@ 0x70
 800aede:	e032      	b.n	800af46 <HAL_RCC_OscConfig+0x4e6>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	689b      	ldr	r3, [r3, #8]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d111      	bne.n	800af0c <HAL_RCC_OscConfig+0x4ac>
 800aee8:	4b06      	ldr	r3, [pc, #24]	@ (800af04 <HAL_RCC_OscConfig+0x4a4>)
 800aeea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aeec:	4a05      	ldr	r2, [pc, #20]	@ (800af04 <HAL_RCC_OscConfig+0x4a4>)
 800aeee:	f023 0301 	bic.w	r3, r3, #1
 800aef2:	6713      	str	r3, [r2, #112]	@ 0x70
 800aef4:	4b03      	ldr	r3, [pc, #12]	@ (800af04 <HAL_RCC_OscConfig+0x4a4>)
 800aef6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aef8:	4a02      	ldr	r2, [pc, #8]	@ (800af04 <HAL_RCC_OscConfig+0x4a4>)
 800aefa:	f023 0304 	bic.w	r3, r3, #4
 800aefe:	6713      	str	r3, [r2, #112]	@ 0x70
 800af00:	e021      	b.n	800af46 <HAL_RCC_OscConfig+0x4e6>
 800af02:	bf00      	nop
 800af04:	58024400 	.word	0x58024400
 800af08:	58024800 	.word	0x58024800
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	689b      	ldr	r3, [r3, #8]
 800af10:	2b05      	cmp	r3, #5
 800af12:	d10c      	bne.n	800af2e <HAL_RCC_OscConfig+0x4ce>
 800af14:	4b83      	ldr	r3, [pc, #524]	@ (800b124 <HAL_RCC_OscConfig+0x6c4>)
 800af16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af18:	4a82      	ldr	r2, [pc, #520]	@ (800b124 <HAL_RCC_OscConfig+0x6c4>)
 800af1a:	f043 0304 	orr.w	r3, r3, #4
 800af1e:	6713      	str	r3, [r2, #112]	@ 0x70
 800af20:	4b80      	ldr	r3, [pc, #512]	@ (800b124 <HAL_RCC_OscConfig+0x6c4>)
 800af22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af24:	4a7f      	ldr	r2, [pc, #508]	@ (800b124 <HAL_RCC_OscConfig+0x6c4>)
 800af26:	f043 0301 	orr.w	r3, r3, #1
 800af2a:	6713      	str	r3, [r2, #112]	@ 0x70
 800af2c:	e00b      	b.n	800af46 <HAL_RCC_OscConfig+0x4e6>
 800af2e:	4b7d      	ldr	r3, [pc, #500]	@ (800b124 <HAL_RCC_OscConfig+0x6c4>)
 800af30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af32:	4a7c      	ldr	r2, [pc, #496]	@ (800b124 <HAL_RCC_OscConfig+0x6c4>)
 800af34:	f023 0301 	bic.w	r3, r3, #1
 800af38:	6713      	str	r3, [r2, #112]	@ 0x70
 800af3a:	4b7a      	ldr	r3, [pc, #488]	@ (800b124 <HAL_RCC_OscConfig+0x6c4>)
 800af3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af3e:	4a79      	ldr	r2, [pc, #484]	@ (800b124 <HAL_RCC_OscConfig+0x6c4>)
 800af40:	f023 0304 	bic.w	r3, r3, #4
 800af44:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	689b      	ldr	r3, [r3, #8]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d015      	beq.n	800af7a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af4e:	f7f9 fad7 	bl	8004500 <HAL_GetTick>
 800af52:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800af54:	e00a      	b.n	800af6c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af56:	f7f9 fad3 	bl	8004500 <HAL_GetTick>
 800af5a:	4602      	mov	r2, r0
 800af5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af5e:	1ad3      	subs	r3, r2, r3
 800af60:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af64:	4293      	cmp	r3, r2
 800af66:	d901      	bls.n	800af6c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800af68:	2303      	movs	r3, #3
 800af6a:	e14b      	b.n	800b204 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800af6c:	4b6d      	ldr	r3, [pc, #436]	@ (800b124 <HAL_RCC_OscConfig+0x6c4>)
 800af6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af70:	f003 0302 	and.w	r3, r3, #2
 800af74:	2b00      	cmp	r3, #0
 800af76:	d0ee      	beq.n	800af56 <HAL_RCC_OscConfig+0x4f6>
 800af78:	e014      	b.n	800afa4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af7a:	f7f9 fac1 	bl	8004500 <HAL_GetTick>
 800af7e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800af80:	e00a      	b.n	800af98 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af82:	f7f9 fabd 	bl	8004500 <HAL_GetTick>
 800af86:	4602      	mov	r2, r0
 800af88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af8a:	1ad3      	subs	r3, r2, r3
 800af8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800af90:	4293      	cmp	r3, r2
 800af92:	d901      	bls.n	800af98 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800af94:	2303      	movs	r3, #3
 800af96:	e135      	b.n	800b204 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800af98:	4b62      	ldr	r3, [pc, #392]	@ (800b124 <HAL_RCC_OscConfig+0x6c4>)
 800af9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800af9c:	f003 0302 	and.w	r3, r3, #2
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d1ee      	bne.n	800af82 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	f000 812a 	beq.w	800b202 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800afae:	4b5d      	ldr	r3, [pc, #372]	@ (800b124 <HAL_RCC_OscConfig+0x6c4>)
 800afb0:	691b      	ldr	r3, [r3, #16]
 800afb2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800afb6:	2b18      	cmp	r3, #24
 800afb8:	f000 80ba 	beq.w	800b130 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afc0:	2b02      	cmp	r3, #2
 800afc2:	f040 8095 	bne.w	800b0f0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800afc6:	4b57      	ldr	r3, [pc, #348]	@ (800b124 <HAL_RCC_OscConfig+0x6c4>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	4a56      	ldr	r2, [pc, #344]	@ (800b124 <HAL_RCC_OscConfig+0x6c4>)
 800afcc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800afd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afd2:	f7f9 fa95 	bl	8004500 <HAL_GetTick>
 800afd6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800afd8:	e008      	b.n	800afec <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800afda:	f7f9 fa91 	bl	8004500 <HAL_GetTick>
 800afde:	4602      	mov	r2, r0
 800afe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afe2:	1ad3      	subs	r3, r2, r3
 800afe4:	2b02      	cmp	r3, #2
 800afe6:	d901      	bls.n	800afec <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800afe8:	2303      	movs	r3, #3
 800afea:	e10b      	b.n	800b204 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800afec:	4b4d      	ldr	r3, [pc, #308]	@ (800b124 <HAL_RCC_OscConfig+0x6c4>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d1f0      	bne.n	800afda <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800aff8:	4b4a      	ldr	r3, [pc, #296]	@ (800b124 <HAL_RCC_OscConfig+0x6c4>)
 800affa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800affc:	4b4a      	ldr	r3, [pc, #296]	@ (800b128 <HAL_RCC_OscConfig+0x6c8>)
 800affe:	4013      	ands	r3, r2
 800b000:	687a      	ldr	r2, [r7, #4]
 800b002:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800b004:	687a      	ldr	r2, [r7, #4]
 800b006:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800b008:	0112      	lsls	r2, r2, #4
 800b00a:	430a      	orrs	r2, r1
 800b00c:	4945      	ldr	r1, [pc, #276]	@ (800b124 <HAL_RCC_OscConfig+0x6c4>)
 800b00e:	4313      	orrs	r3, r2
 800b010:	628b      	str	r3, [r1, #40]	@ 0x28
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b016:	3b01      	subs	r3, #1
 800b018:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b020:	3b01      	subs	r3, #1
 800b022:	025b      	lsls	r3, r3, #9
 800b024:	b29b      	uxth	r3, r3
 800b026:	431a      	orrs	r2, r3
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b02c:	3b01      	subs	r3, #1
 800b02e:	041b      	lsls	r3, r3, #16
 800b030:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b034:	431a      	orrs	r2, r3
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b03a:	3b01      	subs	r3, #1
 800b03c:	061b      	lsls	r3, r3, #24
 800b03e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b042:	4938      	ldr	r1, [pc, #224]	@ (800b124 <HAL_RCC_OscConfig+0x6c4>)
 800b044:	4313      	orrs	r3, r2
 800b046:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800b048:	4b36      	ldr	r3, [pc, #216]	@ (800b124 <HAL_RCC_OscConfig+0x6c4>)
 800b04a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b04c:	4a35      	ldr	r2, [pc, #212]	@ (800b124 <HAL_RCC_OscConfig+0x6c4>)
 800b04e:	f023 0301 	bic.w	r3, r3, #1
 800b052:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b054:	4b33      	ldr	r3, [pc, #204]	@ (800b124 <HAL_RCC_OscConfig+0x6c4>)
 800b056:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b058:	4b34      	ldr	r3, [pc, #208]	@ (800b12c <HAL_RCC_OscConfig+0x6cc>)
 800b05a:	4013      	ands	r3, r2
 800b05c:	687a      	ldr	r2, [r7, #4]
 800b05e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b060:	00d2      	lsls	r2, r2, #3
 800b062:	4930      	ldr	r1, [pc, #192]	@ (800b124 <HAL_RCC_OscConfig+0x6c4>)
 800b064:	4313      	orrs	r3, r2
 800b066:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b068:	4b2e      	ldr	r3, [pc, #184]	@ (800b124 <HAL_RCC_OscConfig+0x6c4>)
 800b06a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b06c:	f023 020c 	bic.w	r2, r3, #12
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b074:	492b      	ldr	r1, [pc, #172]	@ (800b124 <HAL_RCC_OscConfig+0x6c4>)
 800b076:	4313      	orrs	r3, r2
 800b078:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b07a:	4b2a      	ldr	r3, [pc, #168]	@ (800b124 <HAL_RCC_OscConfig+0x6c4>)
 800b07c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b07e:	f023 0202 	bic.w	r2, r3, #2
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b086:	4927      	ldr	r1, [pc, #156]	@ (800b124 <HAL_RCC_OscConfig+0x6c4>)
 800b088:	4313      	orrs	r3, r2
 800b08a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b08c:	4b25      	ldr	r3, [pc, #148]	@ (800b124 <HAL_RCC_OscConfig+0x6c4>)
 800b08e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b090:	4a24      	ldr	r2, [pc, #144]	@ (800b124 <HAL_RCC_OscConfig+0x6c4>)
 800b092:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b096:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b098:	4b22      	ldr	r3, [pc, #136]	@ (800b124 <HAL_RCC_OscConfig+0x6c4>)
 800b09a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b09c:	4a21      	ldr	r2, [pc, #132]	@ (800b124 <HAL_RCC_OscConfig+0x6c4>)
 800b09e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b0a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b0a4:	4b1f      	ldr	r3, [pc, #124]	@ (800b124 <HAL_RCC_OscConfig+0x6c4>)
 800b0a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0a8:	4a1e      	ldr	r2, [pc, #120]	@ (800b124 <HAL_RCC_OscConfig+0x6c4>)
 800b0aa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b0ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800b0b0:	4b1c      	ldr	r3, [pc, #112]	@ (800b124 <HAL_RCC_OscConfig+0x6c4>)
 800b0b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0b4:	4a1b      	ldr	r2, [pc, #108]	@ (800b124 <HAL_RCC_OscConfig+0x6c4>)
 800b0b6:	f043 0301 	orr.w	r3, r3, #1
 800b0ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b0bc:	4b19      	ldr	r3, [pc, #100]	@ (800b124 <HAL_RCC_OscConfig+0x6c4>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	4a18      	ldr	r2, [pc, #96]	@ (800b124 <HAL_RCC_OscConfig+0x6c4>)
 800b0c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b0c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0c8:	f7f9 fa1a 	bl	8004500 <HAL_GetTick>
 800b0cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b0ce:	e008      	b.n	800b0e2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b0d0:	f7f9 fa16 	bl	8004500 <HAL_GetTick>
 800b0d4:	4602      	mov	r2, r0
 800b0d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0d8:	1ad3      	subs	r3, r2, r3
 800b0da:	2b02      	cmp	r3, #2
 800b0dc:	d901      	bls.n	800b0e2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800b0de:	2303      	movs	r3, #3
 800b0e0:	e090      	b.n	800b204 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b0e2:	4b10      	ldr	r3, [pc, #64]	@ (800b124 <HAL_RCC_OscConfig+0x6c4>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d0f0      	beq.n	800b0d0 <HAL_RCC_OscConfig+0x670>
 800b0ee:	e088      	b.n	800b202 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b0f0:	4b0c      	ldr	r3, [pc, #48]	@ (800b124 <HAL_RCC_OscConfig+0x6c4>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	4a0b      	ldr	r2, [pc, #44]	@ (800b124 <HAL_RCC_OscConfig+0x6c4>)
 800b0f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b0fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0fc:	f7f9 fa00 	bl	8004500 <HAL_GetTick>
 800b100:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b102:	e008      	b.n	800b116 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b104:	f7f9 f9fc 	bl	8004500 <HAL_GetTick>
 800b108:	4602      	mov	r2, r0
 800b10a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b10c:	1ad3      	subs	r3, r2, r3
 800b10e:	2b02      	cmp	r3, #2
 800b110:	d901      	bls.n	800b116 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800b112:	2303      	movs	r3, #3
 800b114:	e076      	b.n	800b204 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b116:	4b03      	ldr	r3, [pc, #12]	@ (800b124 <HAL_RCC_OscConfig+0x6c4>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d1f0      	bne.n	800b104 <HAL_RCC_OscConfig+0x6a4>
 800b122:	e06e      	b.n	800b202 <HAL_RCC_OscConfig+0x7a2>
 800b124:	58024400 	.word	0x58024400
 800b128:	fffffc0c 	.word	0xfffffc0c
 800b12c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b130:	4b36      	ldr	r3, [pc, #216]	@ (800b20c <HAL_RCC_OscConfig+0x7ac>)
 800b132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b134:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b136:	4b35      	ldr	r3, [pc, #212]	@ (800b20c <HAL_RCC_OscConfig+0x7ac>)
 800b138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b13a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b140:	2b01      	cmp	r3, #1
 800b142:	d031      	beq.n	800b1a8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	f003 0203 	and.w	r2, r3, #3
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b14e:	429a      	cmp	r2, r3
 800b150:	d12a      	bne.n	800b1a8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	091b      	lsrs	r3, r3, #4
 800b156:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b15e:	429a      	cmp	r2, r3
 800b160:	d122      	bne.n	800b1a8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b16c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b16e:	429a      	cmp	r2, r3
 800b170:	d11a      	bne.n	800b1a8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	0a5b      	lsrs	r3, r3, #9
 800b176:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b17e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b180:	429a      	cmp	r2, r3
 800b182:	d111      	bne.n	800b1a8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	0c1b      	lsrs	r3, r3, #16
 800b188:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b190:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b192:	429a      	cmp	r2, r3
 800b194:	d108      	bne.n	800b1a8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	0e1b      	lsrs	r3, r3, #24
 800b19a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1a2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	d001      	beq.n	800b1ac <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	e02b      	b.n	800b204 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800b1ac:	4b17      	ldr	r3, [pc, #92]	@ (800b20c <HAL_RCC_OscConfig+0x7ac>)
 800b1ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1b0:	08db      	lsrs	r3, r3, #3
 800b1b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b1b6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b1bc:	693a      	ldr	r2, [r7, #16]
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	d01f      	beq.n	800b202 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800b1c2:	4b12      	ldr	r3, [pc, #72]	@ (800b20c <HAL_RCC_OscConfig+0x7ac>)
 800b1c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1c6:	4a11      	ldr	r2, [pc, #68]	@ (800b20c <HAL_RCC_OscConfig+0x7ac>)
 800b1c8:	f023 0301 	bic.w	r3, r3, #1
 800b1cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b1ce:	f7f9 f997 	bl	8004500 <HAL_GetTick>
 800b1d2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800b1d4:	bf00      	nop
 800b1d6:	f7f9 f993 	bl	8004500 <HAL_GetTick>
 800b1da:	4602      	mov	r2, r0
 800b1dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	d0f9      	beq.n	800b1d6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b1e2:	4b0a      	ldr	r3, [pc, #40]	@ (800b20c <HAL_RCC_OscConfig+0x7ac>)
 800b1e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b1e6:	4b0a      	ldr	r3, [pc, #40]	@ (800b210 <HAL_RCC_OscConfig+0x7b0>)
 800b1e8:	4013      	ands	r3, r2
 800b1ea:	687a      	ldr	r2, [r7, #4]
 800b1ec:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b1ee:	00d2      	lsls	r2, r2, #3
 800b1f0:	4906      	ldr	r1, [pc, #24]	@ (800b20c <HAL_RCC_OscConfig+0x7ac>)
 800b1f2:	4313      	orrs	r3, r2
 800b1f4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800b1f6:	4b05      	ldr	r3, [pc, #20]	@ (800b20c <HAL_RCC_OscConfig+0x7ac>)
 800b1f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1fa:	4a04      	ldr	r2, [pc, #16]	@ (800b20c <HAL_RCC_OscConfig+0x7ac>)
 800b1fc:	f043 0301 	orr.w	r3, r3, #1
 800b200:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800b202:	2300      	movs	r3, #0
}
 800b204:	4618      	mov	r0, r3
 800b206:	3730      	adds	r7, #48	@ 0x30
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}
 800b20c:	58024400 	.word	0x58024400
 800b210:	ffff0007 	.word	0xffff0007

0800b214 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b086      	sub	sp, #24
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
 800b21c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d101      	bne.n	800b228 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b224:	2301      	movs	r3, #1
 800b226:	e19c      	b.n	800b562 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b228:	4b8a      	ldr	r3, [pc, #552]	@ (800b454 <HAL_RCC_ClockConfig+0x240>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f003 030f 	and.w	r3, r3, #15
 800b230:	683a      	ldr	r2, [r7, #0]
 800b232:	429a      	cmp	r2, r3
 800b234:	d910      	bls.n	800b258 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b236:	4b87      	ldr	r3, [pc, #540]	@ (800b454 <HAL_RCC_ClockConfig+0x240>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f023 020f 	bic.w	r2, r3, #15
 800b23e:	4985      	ldr	r1, [pc, #532]	@ (800b454 <HAL_RCC_ClockConfig+0x240>)
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	4313      	orrs	r3, r2
 800b244:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b246:	4b83      	ldr	r3, [pc, #524]	@ (800b454 <HAL_RCC_ClockConfig+0x240>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f003 030f 	and.w	r3, r3, #15
 800b24e:	683a      	ldr	r2, [r7, #0]
 800b250:	429a      	cmp	r2, r3
 800b252:	d001      	beq.n	800b258 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b254:	2301      	movs	r3, #1
 800b256:	e184      	b.n	800b562 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f003 0304 	and.w	r3, r3, #4
 800b260:	2b00      	cmp	r3, #0
 800b262:	d010      	beq.n	800b286 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	691a      	ldr	r2, [r3, #16]
 800b268:	4b7b      	ldr	r3, [pc, #492]	@ (800b458 <HAL_RCC_ClockConfig+0x244>)
 800b26a:	699b      	ldr	r3, [r3, #24]
 800b26c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b270:	429a      	cmp	r2, r3
 800b272:	d908      	bls.n	800b286 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b274:	4b78      	ldr	r3, [pc, #480]	@ (800b458 <HAL_RCC_ClockConfig+0x244>)
 800b276:	699b      	ldr	r3, [r3, #24]
 800b278:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	691b      	ldr	r3, [r3, #16]
 800b280:	4975      	ldr	r1, [pc, #468]	@ (800b458 <HAL_RCC_ClockConfig+0x244>)
 800b282:	4313      	orrs	r3, r2
 800b284:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f003 0308 	and.w	r3, r3, #8
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d010      	beq.n	800b2b4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	695a      	ldr	r2, [r3, #20]
 800b296:	4b70      	ldr	r3, [pc, #448]	@ (800b458 <HAL_RCC_ClockConfig+0x244>)
 800b298:	69db      	ldr	r3, [r3, #28]
 800b29a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d908      	bls.n	800b2b4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b2a2:	4b6d      	ldr	r3, [pc, #436]	@ (800b458 <HAL_RCC_ClockConfig+0x244>)
 800b2a4:	69db      	ldr	r3, [r3, #28]
 800b2a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	695b      	ldr	r3, [r3, #20]
 800b2ae:	496a      	ldr	r1, [pc, #424]	@ (800b458 <HAL_RCC_ClockConfig+0x244>)
 800b2b0:	4313      	orrs	r3, r2
 800b2b2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f003 0310 	and.w	r3, r3, #16
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d010      	beq.n	800b2e2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	699a      	ldr	r2, [r3, #24]
 800b2c4:	4b64      	ldr	r3, [pc, #400]	@ (800b458 <HAL_RCC_ClockConfig+0x244>)
 800b2c6:	69db      	ldr	r3, [r3, #28]
 800b2c8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	d908      	bls.n	800b2e2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b2d0:	4b61      	ldr	r3, [pc, #388]	@ (800b458 <HAL_RCC_ClockConfig+0x244>)
 800b2d2:	69db      	ldr	r3, [r3, #28]
 800b2d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	699b      	ldr	r3, [r3, #24]
 800b2dc:	495e      	ldr	r1, [pc, #376]	@ (800b458 <HAL_RCC_ClockConfig+0x244>)
 800b2de:	4313      	orrs	r3, r2
 800b2e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f003 0320 	and.w	r3, r3, #32
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d010      	beq.n	800b310 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	69da      	ldr	r2, [r3, #28]
 800b2f2:	4b59      	ldr	r3, [pc, #356]	@ (800b458 <HAL_RCC_ClockConfig+0x244>)
 800b2f4:	6a1b      	ldr	r3, [r3, #32]
 800b2f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b2fa:	429a      	cmp	r2, r3
 800b2fc:	d908      	bls.n	800b310 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b2fe:	4b56      	ldr	r3, [pc, #344]	@ (800b458 <HAL_RCC_ClockConfig+0x244>)
 800b300:	6a1b      	ldr	r3, [r3, #32]
 800b302:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	69db      	ldr	r3, [r3, #28]
 800b30a:	4953      	ldr	r1, [pc, #332]	@ (800b458 <HAL_RCC_ClockConfig+0x244>)
 800b30c:	4313      	orrs	r3, r2
 800b30e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f003 0302 	and.w	r3, r3, #2
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d010      	beq.n	800b33e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	68da      	ldr	r2, [r3, #12]
 800b320:	4b4d      	ldr	r3, [pc, #308]	@ (800b458 <HAL_RCC_ClockConfig+0x244>)
 800b322:	699b      	ldr	r3, [r3, #24]
 800b324:	f003 030f 	and.w	r3, r3, #15
 800b328:	429a      	cmp	r2, r3
 800b32a:	d908      	bls.n	800b33e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b32c:	4b4a      	ldr	r3, [pc, #296]	@ (800b458 <HAL_RCC_ClockConfig+0x244>)
 800b32e:	699b      	ldr	r3, [r3, #24]
 800b330:	f023 020f 	bic.w	r2, r3, #15
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	68db      	ldr	r3, [r3, #12]
 800b338:	4947      	ldr	r1, [pc, #284]	@ (800b458 <HAL_RCC_ClockConfig+0x244>)
 800b33a:	4313      	orrs	r3, r2
 800b33c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f003 0301 	and.w	r3, r3, #1
 800b346:	2b00      	cmp	r3, #0
 800b348:	d055      	beq.n	800b3f6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b34a:	4b43      	ldr	r3, [pc, #268]	@ (800b458 <HAL_RCC_ClockConfig+0x244>)
 800b34c:	699b      	ldr	r3, [r3, #24]
 800b34e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	689b      	ldr	r3, [r3, #8]
 800b356:	4940      	ldr	r1, [pc, #256]	@ (800b458 <HAL_RCC_ClockConfig+0x244>)
 800b358:	4313      	orrs	r3, r2
 800b35a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	2b02      	cmp	r3, #2
 800b362:	d107      	bne.n	800b374 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b364:	4b3c      	ldr	r3, [pc, #240]	@ (800b458 <HAL_RCC_ClockConfig+0x244>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d121      	bne.n	800b3b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b370:	2301      	movs	r3, #1
 800b372:	e0f6      	b.n	800b562 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	685b      	ldr	r3, [r3, #4]
 800b378:	2b03      	cmp	r3, #3
 800b37a:	d107      	bne.n	800b38c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b37c:	4b36      	ldr	r3, [pc, #216]	@ (800b458 <HAL_RCC_ClockConfig+0x244>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b384:	2b00      	cmp	r3, #0
 800b386:	d115      	bne.n	800b3b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b388:	2301      	movs	r3, #1
 800b38a:	e0ea      	b.n	800b562 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	685b      	ldr	r3, [r3, #4]
 800b390:	2b01      	cmp	r3, #1
 800b392:	d107      	bne.n	800b3a4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b394:	4b30      	ldr	r3, [pc, #192]	@ (800b458 <HAL_RCC_ClockConfig+0x244>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d109      	bne.n	800b3b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	e0de      	b.n	800b562 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b3a4:	4b2c      	ldr	r3, [pc, #176]	@ (800b458 <HAL_RCC_ClockConfig+0x244>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f003 0304 	and.w	r3, r3, #4
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d101      	bne.n	800b3b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	e0d6      	b.n	800b562 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b3b4:	4b28      	ldr	r3, [pc, #160]	@ (800b458 <HAL_RCC_ClockConfig+0x244>)
 800b3b6:	691b      	ldr	r3, [r3, #16]
 800b3b8:	f023 0207 	bic.w	r2, r3, #7
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	4925      	ldr	r1, [pc, #148]	@ (800b458 <HAL_RCC_ClockConfig+0x244>)
 800b3c2:	4313      	orrs	r3, r2
 800b3c4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b3c6:	f7f9 f89b 	bl	8004500 <HAL_GetTick>
 800b3ca:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b3cc:	e00a      	b.n	800b3e4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b3ce:	f7f9 f897 	bl	8004500 <HAL_GetTick>
 800b3d2:	4602      	mov	r2, r0
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	1ad3      	subs	r3, r2, r3
 800b3d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d901      	bls.n	800b3e4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b3e0:	2303      	movs	r3, #3
 800b3e2:	e0be      	b.n	800b562 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b3e4:	4b1c      	ldr	r3, [pc, #112]	@ (800b458 <HAL_RCC_ClockConfig+0x244>)
 800b3e6:	691b      	ldr	r3, [r3, #16]
 800b3e8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	685b      	ldr	r3, [r3, #4]
 800b3f0:	00db      	lsls	r3, r3, #3
 800b3f2:	429a      	cmp	r2, r3
 800b3f4:	d1eb      	bne.n	800b3ce <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	f003 0302 	and.w	r3, r3, #2
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d010      	beq.n	800b424 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	68da      	ldr	r2, [r3, #12]
 800b406:	4b14      	ldr	r3, [pc, #80]	@ (800b458 <HAL_RCC_ClockConfig+0x244>)
 800b408:	699b      	ldr	r3, [r3, #24]
 800b40a:	f003 030f 	and.w	r3, r3, #15
 800b40e:	429a      	cmp	r2, r3
 800b410:	d208      	bcs.n	800b424 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b412:	4b11      	ldr	r3, [pc, #68]	@ (800b458 <HAL_RCC_ClockConfig+0x244>)
 800b414:	699b      	ldr	r3, [r3, #24]
 800b416:	f023 020f 	bic.w	r2, r3, #15
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	68db      	ldr	r3, [r3, #12]
 800b41e:	490e      	ldr	r1, [pc, #56]	@ (800b458 <HAL_RCC_ClockConfig+0x244>)
 800b420:	4313      	orrs	r3, r2
 800b422:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b424:	4b0b      	ldr	r3, [pc, #44]	@ (800b454 <HAL_RCC_ClockConfig+0x240>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f003 030f 	and.w	r3, r3, #15
 800b42c:	683a      	ldr	r2, [r7, #0]
 800b42e:	429a      	cmp	r2, r3
 800b430:	d214      	bcs.n	800b45c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b432:	4b08      	ldr	r3, [pc, #32]	@ (800b454 <HAL_RCC_ClockConfig+0x240>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f023 020f 	bic.w	r2, r3, #15
 800b43a:	4906      	ldr	r1, [pc, #24]	@ (800b454 <HAL_RCC_ClockConfig+0x240>)
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	4313      	orrs	r3, r2
 800b440:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b442:	4b04      	ldr	r3, [pc, #16]	@ (800b454 <HAL_RCC_ClockConfig+0x240>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	f003 030f 	and.w	r3, r3, #15
 800b44a:	683a      	ldr	r2, [r7, #0]
 800b44c:	429a      	cmp	r2, r3
 800b44e:	d005      	beq.n	800b45c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b450:	2301      	movs	r3, #1
 800b452:	e086      	b.n	800b562 <HAL_RCC_ClockConfig+0x34e>
 800b454:	52002000 	.word	0x52002000
 800b458:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f003 0304 	and.w	r3, r3, #4
 800b464:	2b00      	cmp	r3, #0
 800b466:	d010      	beq.n	800b48a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	691a      	ldr	r2, [r3, #16]
 800b46c:	4b3f      	ldr	r3, [pc, #252]	@ (800b56c <HAL_RCC_ClockConfig+0x358>)
 800b46e:	699b      	ldr	r3, [r3, #24]
 800b470:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b474:	429a      	cmp	r2, r3
 800b476:	d208      	bcs.n	800b48a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b478:	4b3c      	ldr	r3, [pc, #240]	@ (800b56c <HAL_RCC_ClockConfig+0x358>)
 800b47a:	699b      	ldr	r3, [r3, #24]
 800b47c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	691b      	ldr	r3, [r3, #16]
 800b484:	4939      	ldr	r1, [pc, #228]	@ (800b56c <HAL_RCC_ClockConfig+0x358>)
 800b486:	4313      	orrs	r3, r2
 800b488:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f003 0308 	and.w	r3, r3, #8
 800b492:	2b00      	cmp	r3, #0
 800b494:	d010      	beq.n	800b4b8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	695a      	ldr	r2, [r3, #20]
 800b49a:	4b34      	ldr	r3, [pc, #208]	@ (800b56c <HAL_RCC_ClockConfig+0x358>)
 800b49c:	69db      	ldr	r3, [r3, #28]
 800b49e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b4a2:	429a      	cmp	r2, r3
 800b4a4:	d208      	bcs.n	800b4b8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b4a6:	4b31      	ldr	r3, [pc, #196]	@ (800b56c <HAL_RCC_ClockConfig+0x358>)
 800b4a8:	69db      	ldr	r3, [r3, #28]
 800b4aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	695b      	ldr	r3, [r3, #20]
 800b4b2:	492e      	ldr	r1, [pc, #184]	@ (800b56c <HAL_RCC_ClockConfig+0x358>)
 800b4b4:	4313      	orrs	r3, r2
 800b4b6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f003 0310 	and.w	r3, r3, #16
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d010      	beq.n	800b4e6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	699a      	ldr	r2, [r3, #24]
 800b4c8:	4b28      	ldr	r3, [pc, #160]	@ (800b56c <HAL_RCC_ClockConfig+0x358>)
 800b4ca:	69db      	ldr	r3, [r3, #28]
 800b4cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b4d0:	429a      	cmp	r2, r3
 800b4d2:	d208      	bcs.n	800b4e6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b4d4:	4b25      	ldr	r3, [pc, #148]	@ (800b56c <HAL_RCC_ClockConfig+0x358>)
 800b4d6:	69db      	ldr	r3, [r3, #28]
 800b4d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	699b      	ldr	r3, [r3, #24]
 800b4e0:	4922      	ldr	r1, [pc, #136]	@ (800b56c <HAL_RCC_ClockConfig+0x358>)
 800b4e2:	4313      	orrs	r3, r2
 800b4e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	f003 0320 	and.w	r3, r3, #32
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d010      	beq.n	800b514 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	69da      	ldr	r2, [r3, #28]
 800b4f6:	4b1d      	ldr	r3, [pc, #116]	@ (800b56c <HAL_RCC_ClockConfig+0x358>)
 800b4f8:	6a1b      	ldr	r3, [r3, #32]
 800b4fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b4fe:	429a      	cmp	r2, r3
 800b500:	d208      	bcs.n	800b514 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b502:	4b1a      	ldr	r3, [pc, #104]	@ (800b56c <HAL_RCC_ClockConfig+0x358>)
 800b504:	6a1b      	ldr	r3, [r3, #32]
 800b506:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	69db      	ldr	r3, [r3, #28]
 800b50e:	4917      	ldr	r1, [pc, #92]	@ (800b56c <HAL_RCC_ClockConfig+0x358>)
 800b510:	4313      	orrs	r3, r2
 800b512:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b514:	f000 f834 	bl	800b580 <HAL_RCC_GetSysClockFreq>
 800b518:	4602      	mov	r2, r0
 800b51a:	4b14      	ldr	r3, [pc, #80]	@ (800b56c <HAL_RCC_ClockConfig+0x358>)
 800b51c:	699b      	ldr	r3, [r3, #24]
 800b51e:	0a1b      	lsrs	r3, r3, #8
 800b520:	f003 030f 	and.w	r3, r3, #15
 800b524:	4912      	ldr	r1, [pc, #72]	@ (800b570 <HAL_RCC_ClockConfig+0x35c>)
 800b526:	5ccb      	ldrb	r3, [r1, r3]
 800b528:	f003 031f 	and.w	r3, r3, #31
 800b52c:	fa22 f303 	lsr.w	r3, r2, r3
 800b530:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b532:	4b0e      	ldr	r3, [pc, #56]	@ (800b56c <HAL_RCC_ClockConfig+0x358>)
 800b534:	699b      	ldr	r3, [r3, #24]
 800b536:	f003 030f 	and.w	r3, r3, #15
 800b53a:	4a0d      	ldr	r2, [pc, #52]	@ (800b570 <HAL_RCC_ClockConfig+0x35c>)
 800b53c:	5cd3      	ldrb	r3, [r2, r3]
 800b53e:	f003 031f 	and.w	r3, r3, #31
 800b542:	693a      	ldr	r2, [r7, #16]
 800b544:	fa22 f303 	lsr.w	r3, r2, r3
 800b548:	4a0a      	ldr	r2, [pc, #40]	@ (800b574 <HAL_RCC_ClockConfig+0x360>)
 800b54a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b54c:	4a0a      	ldr	r2, [pc, #40]	@ (800b578 <HAL_RCC_ClockConfig+0x364>)
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b552:	4b0a      	ldr	r3, [pc, #40]	@ (800b57c <HAL_RCC_ClockConfig+0x368>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	4618      	mov	r0, r3
 800b558:	f7f8 ff88 	bl	800446c <HAL_InitTick>
 800b55c:	4603      	mov	r3, r0
 800b55e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b560:	7bfb      	ldrb	r3, [r7, #15]
}
 800b562:	4618      	mov	r0, r3
 800b564:	3718      	adds	r7, #24
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}
 800b56a:	bf00      	nop
 800b56c:	58024400 	.word	0x58024400
 800b570:	080149b0 	.word	0x080149b0
 800b574:	2400003c 	.word	0x2400003c
 800b578:	24000038 	.word	0x24000038
 800b57c:	24000040 	.word	0x24000040

0800b580 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b580:	b480      	push	{r7}
 800b582:	b089      	sub	sp, #36	@ 0x24
 800b584:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b586:	4bb3      	ldr	r3, [pc, #716]	@ (800b854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b588:	691b      	ldr	r3, [r3, #16]
 800b58a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b58e:	2b18      	cmp	r3, #24
 800b590:	f200 8155 	bhi.w	800b83e <HAL_RCC_GetSysClockFreq+0x2be>
 800b594:	a201      	add	r2, pc, #4	@ (adr r2, 800b59c <HAL_RCC_GetSysClockFreq+0x1c>)
 800b596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b59a:	bf00      	nop
 800b59c:	0800b601 	.word	0x0800b601
 800b5a0:	0800b83f 	.word	0x0800b83f
 800b5a4:	0800b83f 	.word	0x0800b83f
 800b5a8:	0800b83f 	.word	0x0800b83f
 800b5ac:	0800b83f 	.word	0x0800b83f
 800b5b0:	0800b83f 	.word	0x0800b83f
 800b5b4:	0800b83f 	.word	0x0800b83f
 800b5b8:	0800b83f 	.word	0x0800b83f
 800b5bc:	0800b627 	.word	0x0800b627
 800b5c0:	0800b83f 	.word	0x0800b83f
 800b5c4:	0800b83f 	.word	0x0800b83f
 800b5c8:	0800b83f 	.word	0x0800b83f
 800b5cc:	0800b83f 	.word	0x0800b83f
 800b5d0:	0800b83f 	.word	0x0800b83f
 800b5d4:	0800b83f 	.word	0x0800b83f
 800b5d8:	0800b83f 	.word	0x0800b83f
 800b5dc:	0800b62d 	.word	0x0800b62d
 800b5e0:	0800b83f 	.word	0x0800b83f
 800b5e4:	0800b83f 	.word	0x0800b83f
 800b5e8:	0800b83f 	.word	0x0800b83f
 800b5ec:	0800b83f 	.word	0x0800b83f
 800b5f0:	0800b83f 	.word	0x0800b83f
 800b5f4:	0800b83f 	.word	0x0800b83f
 800b5f8:	0800b83f 	.word	0x0800b83f
 800b5fc:	0800b633 	.word	0x0800b633
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b600:	4b94      	ldr	r3, [pc, #592]	@ (800b854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f003 0320 	and.w	r3, r3, #32
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d009      	beq.n	800b620 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b60c:	4b91      	ldr	r3, [pc, #580]	@ (800b854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	08db      	lsrs	r3, r3, #3
 800b612:	f003 0303 	and.w	r3, r3, #3
 800b616:	4a90      	ldr	r2, [pc, #576]	@ (800b858 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b618:	fa22 f303 	lsr.w	r3, r2, r3
 800b61c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b61e:	e111      	b.n	800b844 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b620:	4b8d      	ldr	r3, [pc, #564]	@ (800b858 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b622:	61bb      	str	r3, [r7, #24]
      break;
 800b624:	e10e      	b.n	800b844 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b626:	4b8d      	ldr	r3, [pc, #564]	@ (800b85c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b628:	61bb      	str	r3, [r7, #24]
      break;
 800b62a:	e10b      	b.n	800b844 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b62c:	4b8c      	ldr	r3, [pc, #560]	@ (800b860 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b62e:	61bb      	str	r3, [r7, #24]
      break;
 800b630:	e108      	b.n	800b844 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b632:	4b88      	ldr	r3, [pc, #544]	@ (800b854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b636:	f003 0303 	and.w	r3, r3, #3
 800b63a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b63c:	4b85      	ldr	r3, [pc, #532]	@ (800b854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b63e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b640:	091b      	lsrs	r3, r3, #4
 800b642:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b646:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b648:	4b82      	ldr	r3, [pc, #520]	@ (800b854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b64a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b64c:	f003 0301 	and.w	r3, r3, #1
 800b650:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b652:	4b80      	ldr	r3, [pc, #512]	@ (800b854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b656:	08db      	lsrs	r3, r3, #3
 800b658:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b65c:	68fa      	ldr	r2, [r7, #12]
 800b65e:	fb02 f303 	mul.w	r3, r2, r3
 800b662:	ee07 3a90 	vmov	s15, r3
 800b666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b66a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b66e:	693b      	ldr	r3, [r7, #16]
 800b670:	2b00      	cmp	r3, #0
 800b672:	f000 80e1 	beq.w	800b838 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	2b02      	cmp	r3, #2
 800b67a:	f000 8083 	beq.w	800b784 <HAL_RCC_GetSysClockFreq+0x204>
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	2b02      	cmp	r3, #2
 800b682:	f200 80a1 	bhi.w	800b7c8 <HAL_RCC_GetSysClockFreq+0x248>
 800b686:	697b      	ldr	r3, [r7, #20]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d003      	beq.n	800b694 <HAL_RCC_GetSysClockFreq+0x114>
 800b68c:	697b      	ldr	r3, [r7, #20]
 800b68e:	2b01      	cmp	r3, #1
 800b690:	d056      	beq.n	800b740 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b692:	e099      	b.n	800b7c8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b694:	4b6f      	ldr	r3, [pc, #444]	@ (800b854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f003 0320 	and.w	r3, r3, #32
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d02d      	beq.n	800b6fc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b6a0:	4b6c      	ldr	r3, [pc, #432]	@ (800b854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	08db      	lsrs	r3, r3, #3
 800b6a6:	f003 0303 	and.w	r3, r3, #3
 800b6aa:	4a6b      	ldr	r2, [pc, #428]	@ (800b858 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b6ac:	fa22 f303 	lsr.w	r3, r2, r3
 800b6b0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	ee07 3a90 	vmov	s15, r3
 800b6b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	ee07 3a90 	vmov	s15, r3
 800b6c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6ca:	4b62      	ldr	r3, [pc, #392]	@ (800b854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b6cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6d2:	ee07 3a90 	vmov	s15, r3
 800b6d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6da:	ed97 6a02 	vldr	s12, [r7, #8]
 800b6de:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800b864 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b6e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b6ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6f6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b6fa:	e087      	b.n	800b80c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	ee07 3a90 	vmov	s15, r3
 800b702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b706:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800b868 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b70a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b70e:	4b51      	ldr	r3, [pc, #324]	@ (800b854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b716:	ee07 3a90 	vmov	s15, r3
 800b71a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b71e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b722:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800b864 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b72a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b72e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b73a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b73e:	e065      	b.n	800b80c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	ee07 3a90 	vmov	s15, r3
 800b746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b74a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800b86c <HAL_RCC_GetSysClockFreq+0x2ec>
 800b74e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b752:	4b40      	ldr	r3, [pc, #256]	@ (800b854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b75a:	ee07 3a90 	vmov	s15, r3
 800b75e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b762:	ed97 6a02 	vldr	s12, [r7, #8]
 800b766:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800b864 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b76a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b76e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b772:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b77a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b77e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b782:	e043      	b.n	800b80c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	ee07 3a90 	vmov	s15, r3
 800b78a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b78e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800b870 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b796:	4b2f      	ldr	r3, [pc, #188]	@ (800b854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b79a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b79e:	ee07 3a90 	vmov	s15, r3
 800b7a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7a6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b7aa:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800b864 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b7ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b7ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b7c6:	e021      	b.n	800b80c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	ee07 3a90 	vmov	s15, r3
 800b7ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7d2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800b86c <HAL_RCC_GetSysClockFreq+0x2ec>
 800b7d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7da:	4b1e      	ldr	r3, [pc, #120]	@ (800b854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7e2:	ee07 3a90 	vmov	s15, r3
 800b7e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7ea:	ed97 6a02 	vldr	s12, [r7, #8]
 800b7ee:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800b864 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b7f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b7fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b802:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b806:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b80a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b80c:	4b11      	ldr	r3, [pc, #68]	@ (800b854 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b80e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b810:	0a5b      	lsrs	r3, r3, #9
 800b812:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b816:	3301      	adds	r3, #1
 800b818:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	ee07 3a90 	vmov	s15, r3
 800b820:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b824:	edd7 6a07 	vldr	s13, [r7, #28]
 800b828:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b82c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b830:	ee17 3a90 	vmov	r3, s15
 800b834:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b836:	e005      	b.n	800b844 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b838:	2300      	movs	r3, #0
 800b83a:	61bb      	str	r3, [r7, #24]
      break;
 800b83c:	e002      	b.n	800b844 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b83e:	4b07      	ldr	r3, [pc, #28]	@ (800b85c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b840:	61bb      	str	r3, [r7, #24]
      break;
 800b842:	bf00      	nop
  }

  return sysclockfreq;
 800b844:	69bb      	ldr	r3, [r7, #24]
}
 800b846:	4618      	mov	r0, r3
 800b848:	3724      	adds	r7, #36	@ 0x24
 800b84a:	46bd      	mov	sp, r7
 800b84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b850:	4770      	bx	lr
 800b852:	bf00      	nop
 800b854:	58024400 	.word	0x58024400
 800b858:	03d09000 	.word	0x03d09000
 800b85c:	003d0900 	.word	0x003d0900
 800b860:	007a1200 	.word	0x007a1200
 800b864:	46000000 	.word	0x46000000
 800b868:	4c742400 	.word	0x4c742400
 800b86c:	4a742400 	.word	0x4a742400
 800b870:	4af42400 	.word	0x4af42400

0800b874 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b082      	sub	sp, #8
 800b878:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b87a:	f7ff fe81 	bl	800b580 <HAL_RCC_GetSysClockFreq>
 800b87e:	4602      	mov	r2, r0
 800b880:	4b10      	ldr	r3, [pc, #64]	@ (800b8c4 <HAL_RCC_GetHCLKFreq+0x50>)
 800b882:	699b      	ldr	r3, [r3, #24]
 800b884:	0a1b      	lsrs	r3, r3, #8
 800b886:	f003 030f 	and.w	r3, r3, #15
 800b88a:	490f      	ldr	r1, [pc, #60]	@ (800b8c8 <HAL_RCC_GetHCLKFreq+0x54>)
 800b88c:	5ccb      	ldrb	r3, [r1, r3]
 800b88e:	f003 031f 	and.w	r3, r3, #31
 800b892:	fa22 f303 	lsr.w	r3, r2, r3
 800b896:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b898:	4b0a      	ldr	r3, [pc, #40]	@ (800b8c4 <HAL_RCC_GetHCLKFreq+0x50>)
 800b89a:	699b      	ldr	r3, [r3, #24]
 800b89c:	f003 030f 	and.w	r3, r3, #15
 800b8a0:	4a09      	ldr	r2, [pc, #36]	@ (800b8c8 <HAL_RCC_GetHCLKFreq+0x54>)
 800b8a2:	5cd3      	ldrb	r3, [r2, r3]
 800b8a4:	f003 031f 	and.w	r3, r3, #31
 800b8a8:	687a      	ldr	r2, [r7, #4]
 800b8aa:	fa22 f303 	lsr.w	r3, r2, r3
 800b8ae:	4a07      	ldr	r2, [pc, #28]	@ (800b8cc <HAL_RCC_GetHCLKFreq+0x58>)
 800b8b0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b8b2:	4a07      	ldr	r2, [pc, #28]	@ (800b8d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b8b8:	4b04      	ldr	r3, [pc, #16]	@ (800b8cc <HAL_RCC_GetHCLKFreq+0x58>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	3708      	adds	r7, #8
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}
 800b8c4:	58024400 	.word	0x58024400
 800b8c8:	080149b0 	.word	0x080149b0
 800b8cc:	2400003c 	.word	0x2400003c
 800b8d0:	24000038 	.word	0x24000038

0800b8d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b8d8:	f7ff ffcc 	bl	800b874 <HAL_RCC_GetHCLKFreq>
 800b8dc:	4602      	mov	r2, r0
 800b8de:	4b06      	ldr	r3, [pc, #24]	@ (800b8f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b8e0:	69db      	ldr	r3, [r3, #28]
 800b8e2:	091b      	lsrs	r3, r3, #4
 800b8e4:	f003 0307 	and.w	r3, r3, #7
 800b8e8:	4904      	ldr	r1, [pc, #16]	@ (800b8fc <HAL_RCC_GetPCLK1Freq+0x28>)
 800b8ea:	5ccb      	ldrb	r3, [r1, r3]
 800b8ec:	f003 031f 	and.w	r3, r3, #31
 800b8f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	bd80      	pop	{r7, pc}
 800b8f8:	58024400 	.word	0x58024400
 800b8fc:	080149b0 	.word	0x080149b0

0800b900 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b904:	f7ff ffb6 	bl	800b874 <HAL_RCC_GetHCLKFreq>
 800b908:	4602      	mov	r2, r0
 800b90a:	4b06      	ldr	r3, [pc, #24]	@ (800b924 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b90c:	69db      	ldr	r3, [r3, #28]
 800b90e:	0a1b      	lsrs	r3, r3, #8
 800b910:	f003 0307 	and.w	r3, r3, #7
 800b914:	4904      	ldr	r1, [pc, #16]	@ (800b928 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b916:	5ccb      	ldrb	r3, [r1, r3]
 800b918:	f003 031f 	and.w	r3, r3, #31
 800b91c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b920:	4618      	mov	r0, r3
 800b922:	bd80      	pop	{r7, pc}
 800b924:	58024400 	.word	0x58024400
 800b928:	080149b0 	.word	0x080149b0

0800b92c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b92c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b930:	b0c6      	sub	sp, #280	@ 0x118
 800b932:	af00      	add	r7, sp, #0
 800b934:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b938:	2300      	movs	r3, #0
 800b93a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b93e:	2300      	movs	r3, #0
 800b940:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b944:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b94c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800b950:	2500      	movs	r5, #0
 800b952:	ea54 0305 	orrs.w	r3, r4, r5
 800b956:	d049      	beq.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b958:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b95c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b95e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b962:	d02f      	beq.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b964:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b968:	d828      	bhi.n	800b9bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b96a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b96e:	d01a      	beq.n	800b9a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b970:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b974:	d822      	bhi.n	800b9bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b976:	2b00      	cmp	r3, #0
 800b978:	d003      	beq.n	800b982 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b97a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b97e:	d007      	beq.n	800b990 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b980:	e01c      	b.n	800b9bc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b982:	4bab      	ldr	r3, [pc, #684]	@ (800bc30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b986:	4aaa      	ldr	r2, [pc, #680]	@ (800bc30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b988:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b98c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b98e:	e01a      	b.n	800b9c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b994:	3308      	adds	r3, #8
 800b996:	2102      	movs	r1, #2
 800b998:	4618      	mov	r0, r3
 800b99a:	f002 fa49 	bl	800de30 <RCCEx_PLL2_Config>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b9a4:	e00f      	b.n	800b9c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b9a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9aa:	3328      	adds	r3, #40	@ 0x28
 800b9ac:	2102      	movs	r1, #2
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f002 faf0 	bl	800df94 <RCCEx_PLL3_Config>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b9ba:	e004      	b.n	800b9c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9bc:	2301      	movs	r3, #1
 800b9be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b9c2:	e000      	b.n	800b9c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b9c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d10a      	bne.n	800b9e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b9ce:	4b98      	ldr	r3, [pc, #608]	@ (800bc30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b9d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9d2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b9d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b9dc:	4a94      	ldr	r2, [pc, #592]	@ (800bc30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b9de:	430b      	orrs	r3, r1
 800b9e0:	6513      	str	r3, [r2, #80]	@ 0x50
 800b9e2:	e003      	b.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b9e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b9ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800b9f8:	f04f 0900 	mov.w	r9, #0
 800b9fc:	ea58 0309 	orrs.w	r3, r8, r9
 800ba00:	d047      	beq.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800ba02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba08:	2b04      	cmp	r3, #4
 800ba0a:	d82a      	bhi.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ba0c:	a201      	add	r2, pc, #4	@ (adr r2, 800ba14 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ba0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba12:	bf00      	nop
 800ba14:	0800ba29 	.word	0x0800ba29
 800ba18:	0800ba37 	.word	0x0800ba37
 800ba1c:	0800ba4d 	.word	0x0800ba4d
 800ba20:	0800ba6b 	.word	0x0800ba6b
 800ba24:	0800ba6b 	.word	0x0800ba6b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba28:	4b81      	ldr	r3, [pc, #516]	@ (800bc30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba2c:	4a80      	ldr	r2, [pc, #512]	@ (800bc30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ba32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ba34:	e01a      	b.n	800ba6c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ba36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba3a:	3308      	adds	r3, #8
 800ba3c:	2100      	movs	r1, #0
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f002 f9f6 	bl	800de30 <RCCEx_PLL2_Config>
 800ba44:	4603      	mov	r3, r0
 800ba46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ba4a:	e00f      	b.n	800ba6c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ba4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba50:	3328      	adds	r3, #40	@ 0x28
 800ba52:	2100      	movs	r1, #0
 800ba54:	4618      	mov	r0, r3
 800ba56:	f002 fa9d 	bl	800df94 <RCCEx_PLL3_Config>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ba60:	e004      	b.n	800ba6c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba62:	2301      	movs	r3, #1
 800ba64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ba68:	e000      	b.n	800ba6c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800ba6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d10a      	bne.n	800ba8a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ba74:	4b6e      	ldr	r3, [pc, #440]	@ (800bc30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba78:	f023 0107 	bic.w	r1, r3, #7
 800ba7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba82:	4a6b      	ldr	r2, [pc, #428]	@ (800bc30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ba84:	430b      	orrs	r3, r1
 800ba86:	6513      	str	r3, [r2, #80]	@ 0x50
 800ba88:	e003      	b.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ba8e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ba92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba9a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800ba9e:	f04f 0b00 	mov.w	fp, #0
 800baa2:	ea5a 030b 	orrs.w	r3, sl, fp
 800baa6:	d05b      	beq.n	800bb60 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800baa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800baac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bab0:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800bab4:	d03b      	beq.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0x202>
 800bab6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800baba:	d834      	bhi.n	800bb26 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800babc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bac0:	d037      	beq.n	800bb32 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800bac2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bac6:	d82e      	bhi.n	800bb26 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bac8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800bacc:	d033      	beq.n	800bb36 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800bace:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800bad2:	d828      	bhi.n	800bb26 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bad4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bad8:	d01a      	beq.n	800bb10 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800bada:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bade:	d822      	bhi.n	800bb26 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d003      	beq.n	800baec <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800bae4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bae8:	d007      	beq.n	800bafa <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800baea:	e01c      	b.n	800bb26 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800baec:	4b50      	ldr	r3, [pc, #320]	@ (800bc30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800baee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baf0:	4a4f      	ldr	r2, [pc, #316]	@ (800bc30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800baf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800baf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800baf8:	e01e      	b.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bafa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bafe:	3308      	adds	r3, #8
 800bb00:	2100      	movs	r1, #0
 800bb02:	4618      	mov	r0, r3
 800bb04:	f002 f994 	bl	800de30 <RCCEx_PLL2_Config>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800bb0e:	e013      	b.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bb10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb14:	3328      	adds	r3, #40	@ 0x28
 800bb16:	2100      	movs	r1, #0
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f002 fa3b 	bl	800df94 <RCCEx_PLL3_Config>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bb24:	e008      	b.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800bb26:	2301      	movs	r3, #1
 800bb28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bb2c:	e004      	b.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800bb2e:	bf00      	nop
 800bb30:	e002      	b.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800bb32:	bf00      	nop
 800bb34:	e000      	b.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800bb36:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d10b      	bne.n	800bb58 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800bb40:	4b3b      	ldr	r3, [pc, #236]	@ (800bc30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bb42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb44:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800bb48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb4c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bb50:	4a37      	ldr	r2, [pc, #220]	@ (800bc30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bb52:	430b      	orrs	r3, r1
 800bb54:	6593      	str	r3, [r2, #88]	@ 0x58
 800bb56:	e003      	b.n	800bb60 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bb5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800bb60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb68:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800bb6c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800bb70:	2300      	movs	r3, #0
 800bb72:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800bb76:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800bb7a:	460b      	mov	r3, r1
 800bb7c:	4313      	orrs	r3, r2
 800bb7e:	d05d      	beq.n	800bc3c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800bb80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb84:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800bb88:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800bb8c:	d03b      	beq.n	800bc06 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800bb8e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800bb92:	d834      	bhi.n	800bbfe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bb94:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bb98:	d037      	beq.n	800bc0a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800bb9a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bb9e:	d82e      	bhi.n	800bbfe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bba0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800bba4:	d033      	beq.n	800bc0e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800bba6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800bbaa:	d828      	bhi.n	800bbfe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bbac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bbb0:	d01a      	beq.n	800bbe8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800bbb2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bbb6:	d822      	bhi.n	800bbfe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d003      	beq.n	800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800bbbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bbc0:	d007      	beq.n	800bbd2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800bbc2:	e01c      	b.n	800bbfe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bbc4:	4b1a      	ldr	r3, [pc, #104]	@ (800bc30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bbc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbc8:	4a19      	ldr	r2, [pc, #100]	@ (800bc30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bbca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bbce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bbd0:	e01e      	b.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bbd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbd6:	3308      	adds	r3, #8
 800bbd8:	2100      	movs	r1, #0
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f002 f928 	bl	800de30 <RCCEx_PLL2_Config>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800bbe6:	e013      	b.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bbe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbec:	3328      	adds	r3, #40	@ 0x28
 800bbee:	2100      	movs	r1, #0
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f002 f9cf 	bl	800df94 <RCCEx_PLL3_Config>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bbfc:	e008      	b.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800bbfe:	2301      	movs	r3, #1
 800bc00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bc04:	e004      	b.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800bc06:	bf00      	nop
 800bc08:	e002      	b.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800bc0a:	bf00      	nop
 800bc0c:	e000      	b.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800bc0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d10d      	bne.n	800bc34 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800bc18:	4b05      	ldr	r3, [pc, #20]	@ (800bc30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bc1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc1c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800bc20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc24:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800bc28:	4a01      	ldr	r2, [pc, #4]	@ (800bc30 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bc2a:	430b      	orrs	r3, r1
 800bc2c:	6593      	str	r3, [r2, #88]	@ 0x58
 800bc2e:	e005      	b.n	800bc3c <HAL_RCCEx_PeriphCLKConfig+0x310>
 800bc30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bc38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800bc3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc44:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800bc48:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800bc52:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800bc56:	460b      	mov	r3, r1
 800bc58:	4313      	orrs	r3, r2
 800bc5a:	d03a      	beq.n	800bcd2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800bc5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc62:	2b30      	cmp	r3, #48	@ 0x30
 800bc64:	d01f      	beq.n	800bca6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800bc66:	2b30      	cmp	r3, #48	@ 0x30
 800bc68:	d819      	bhi.n	800bc9e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800bc6a:	2b20      	cmp	r3, #32
 800bc6c:	d00c      	beq.n	800bc88 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800bc6e:	2b20      	cmp	r3, #32
 800bc70:	d815      	bhi.n	800bc9e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d019      	beq.n	800bcaa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800bc76:	2b10      	cmp	r3, #16
 800bc78:	d111      	bne.n	800bc9e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc7a:	4baa      	ldr	r3, [pc, #680]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bc7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc7e:	4aa9      	ldr	r2, [pc, #676]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bc80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bc84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800bc86:	e011      	b.n	800bcac <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bc88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc8c:	3308      	adds	r3, #8
 800bc8e:	2102      	movs	r1, #2
 800bc90:	4618      	mov	r0, r3
 800bc92:	f002 f8cd 	bl	800de30 <RCCEx_PLL2_Config>
 800bc96:	4603      	mov	r3, r0
 800bc98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800bc9c:	e006      	b.n	800bcac <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bc9e:	2301      	movs	r3, #1
 800bca0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bca4:	e002      	b.n	800bcac <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800bca6:	bf00      	nop
 800bca8:	e000      	b.n	800bcac <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800bcaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d10a      	bne.n	800bcca <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800bcb4:	4b9b      	ldr	r3, [pc, #620]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bcb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bcb8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800bcbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bcc2:	4a98      	ldr	r2, [pc, #608]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bcc4:	430b      	orrs	r3, r1
 800bcc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800bcc8:	e003      	b.n	800bcd2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bcce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bcd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcda:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800bcde:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bce2:	2300      	movs	r3, #0
 800bce4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800bce8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800bcec:	460b      	mov	r3, r1
 800bcee:	4313      	orrs	r3, r2
 800bcf0:	d051      	beq.n	800bd96 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800bcf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bcf8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bcfc:	d035      	beq.n	800bd6a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800bcfe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bd02:	d82e      	bhi.n	800bd62 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bd04:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bd08:	d031      	beq.n	800bd6e <HAL_RCCEx_PeriphCLKConfig+0x442>
 800bd0a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bd0e:	d828      	bhi.n	800bd62 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bd10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bd14:	d01a      	beq.n	800bd4c <HAL_RCCEx_PeriphCLKConfig+0x420>
 800bd16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bd1a:	d822      	bhi.n	800bd62 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d003      	beq.n	800bd28 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800bd20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bd24:	d007      	beq.n	800bd36 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800bd26:	e01c      	b.n	800bd62 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd28:	4b7e      	ldr	r3, [pc, #504]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bd2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd2c:	4a7d      	ldr	r2, [pc, #500]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bd2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bd32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bd34:	e01c      	b.n	800bd70 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bd36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd3a:	3308      	adds	r3, #8
 800bd3c:	2100      	movs	r1, #0
 800bd3e:	4618      	mov	r0, r3
 800bd40:	f002 f876 	bl	800de30 <RCCEx_PLL2_Config>
 800bd44:	4603      	mov	r3, r0
 800bd46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bd4a:	e011      	b.n	800bd70 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bd4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd50:	3328      	adds	r3, #40	@ 0x28
 800bd52:	2100      	movs	r1, #0
 800bd54:	4618      	mov	r0, r3
 800bd56:	f002 f91d 	bl	800df94 <RCCEx_PLL3_Config>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bd60:	e006      	b.n	800bd70 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd62:	2301      	movs	r3, #1
 800bd64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bd68:	e002      	b.n	800bd70 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800bd6a:	bf00      	nop
 800bd6c:	e000      	b.n	800bd70 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800bd6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d10a      	bne.n	800bd8e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bd78:	4b6a      	ldr	r3, [pc, #424]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bd7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd7c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800bd80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bd86:	4a67      	ldr	r2, [pc, #412]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bd88:	430b      	orrs	r3, r1
 800bd8a:	6513      	str	r3, [r2, #80]	@ 0x50
 800bd8c:	e003      	b.n	800bd96 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bd92:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bd96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd9e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800bda2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bda6:	2300      	movs	r3, #0
 800bda8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bdac:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800bdb0:	460b      	mov	r3, r1
 800bdb2:	4313      	orrs	r3, r2
 800bdb4:	d053      	beq.n	800be5e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800bdb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bdbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bdc0:	d033      	beq.n	800be2a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800bdc2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bdc6:	d82c      	bhi.n	800be22 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bdc8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bdcc:	d02f      	beq.n	800be2e <HAL_RCCEx_PeriphCLKConfig+0x502>
 800bdce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bdd2:	d826      	bhi.n	800be22 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bdd4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bdd8:	d02b      	beq.n	800be32 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800bdda:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bdde:	d820      	bhi.n	800be22 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bde0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bde4:	d012      	beq.n	800be0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800bde6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bdea:	d81a      	bhi.n	800be22 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d022      	beq.n	800be36 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800bdf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bdf4:	d115      	bne.n	800be22 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bdf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdfa:	3308      	adds	r3, #8
 800bdfc:	2101      	movs	r1, #1
 800bdfe:	4618      	mov	r0, r3
 800be00:	f002 f816 	bl	800de30 <RCCEx_PLL2_Config>
 800be04:	4603      	mov	r3, r0
 800be06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800be0a:	e015      	b.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800be0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be10:	3328      	adds	r3, #40	@ 0x28
 800be12:	2101      	movs	r1, #1
 800be14:	4618      	mov	r0, r3
 800be16:	f002 f8bd 	bl	800df94 <RCCEx_PLL3_Config>
 800be1a:	4603      	mov	r3, r0
 800be1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800be20:	e00a      	b.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be22:	2301      	movs	r3, #1
 800be24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800be28:	e006      	b.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800be2a:	bf00      	nop
 800be2c:	e004      	b.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800be2e:	bf00      	nop
 800be30:	e002      	b.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800be32:	bf00      	nop
 800be34:	e000      	b.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800be36:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d10a      	bne.n	800be56 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800be40:	4b38      	ldr	r3, [pc, #224]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800be42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be44:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800be48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800be4e:	4a35      	ldr	r2, [pc, #212]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800be50:	430b      	orrs	r3, r1
 800be52:	6513      	str	r3, [r2, #80]	@ 0x50
 800be54:	e003      	b.n	800be5e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800be5a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800be5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be66:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800be6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800be6e:	2300      	movs	r3, #0
 800be70:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800be74:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800be78:	460b      	mov	r3, r1
 800be7a:	4313      	orrs	r3, r2
 800be7c:	d058      	beq.n	800bf30 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800be7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be82:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800be86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800be8a:	d033      	beq.n	800bef4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800be8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800be90:	d82c      	bhi.n	800beec <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800be92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be96:	d02f      	beq.n	800bef8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800be98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be9c:	d826      	bhi.n	800beec <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800be9e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bea2:	d02b      	beq.n	800befc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800bea4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bea8:	d820      	bhi.n	800beec <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800beaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800beae:	d012      	beq.n	800bed6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800beb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800beb4:	d81a      	bhi.n	800beec <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d022      	beq.n	800bf00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800beba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bebe:	d115      	bne.n	800beec <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bec4:	3308      	adds	r3, #8
 800bec6:	2101      	movs	r1, #1
 800bec8:	4618      	mov	r0, r3
 800beca:	f001 ffb1 	bl	800de30 <RCCEx_PLL2_Config>
 800bece:	4603      	mov	r3, r0
 800bed0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bed4:	e015      	b.n	800bf02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800beda:	3328      	adds	r3, #40	@ 0x28
 800bedc:	2101      	movs	r1, #1
 800bede:	4618      	mov	r0, r3
 800bee0:	f002 f858 	bl	800df94 <RCCEx_PLL3_Config>
 800bee4:	4603      	mov	r3, r0
 800bee6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800beea:	e00a      	b.n	800bf02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800beec:	2301      	movs	r3, #1
 800beee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bef2:	e006      	b.n	800bf02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bef4:	bf00      	nop
 800bef6:	e004      	b.n	800bf02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bef8:	bf00      	nop
 800befa:	e002      	b.n	800bf02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800befc:	bf00      	nop
 800befe:	e000      	b.n	800bf02 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bf00:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d10e      	bne.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bf0a:	4b06      	ldr	r3, [pc, #24]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bf0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf0e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800bf12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf16:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800bf1a:	4a02      	ldr	r2, [pc, #8]	@ (800bf24 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bf1c:	430b      	orrs	r3, r1
 800bf1e:	6593      	str	r3, [r2, #88]	@ 0x58
 800bf20:	e006      	b.n	800bf30 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800bf22:	bf00      	nop
 800bf24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bf2c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bf30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf38:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800bf3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bf40:	2300      	movs	r3, #0
 800bf42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800bf46:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800bf4a:	460b      	mov	r3, r1
 800bf4c:	4313      	orrs	r3, r2
 800bf4e:	d037      	beq.n	800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800bf50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bf5a:	d00e      	beq.n	800bf7a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800bf5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bf60:	d816      	bhi.n	800bf90 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d018      	beq.n	800bf98 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800bf66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bf6a:	d111      	bne.n	800bf90 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf6c:	4bc4      	ldr	r3, [pc, #784]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf70:	4ac3      	ldr	r2, [pc, #780]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bf76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bf78:	e00f      	b.n	800bf9a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bf7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf7e:	3308      	adds	r3, #8
 800bf80:	2101      	movs	r1, #1
 800bf82:	4618      	mov	r0, r3
 800bf84:	f001 ff54 	bl	800de30 <RCCEx_PLL2_Config>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bf8e:	e004      	b.n	800bf9a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf90:	2301      	movs	r3, #1
 800bf92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bf96:	e000      	b.n	800bf9a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800bf98:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf9a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d10a      	bne.n	800bfb8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bfa2:	4bb7      	ldr	r3, [pc, #732]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bfa6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800bfaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bfb0:	4ab3      	ldr	r2, [pc, #716]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfb2:	430b      	orrs	r3, r1
 800bfb4:	6513      	str	r3, [r2, #80]	@ 0x50
 800bfb6:	e003      	b.n	800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bfbc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bfc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800bfcc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800bfd6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800bfda:	460b      	mov	r3, r1
 800bfdc:	4313      	orrs	r3, r2
 800bfde:	d039      	beq.n	800c054 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800bfe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfe4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bfe6:	2b03      	cmp	r3, #3
 800bfe8:	d81c      	bhi.n	800c024 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800bfea:	a201      	add	r2, pc, #4	@ (adr r2, 800bff0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800bfec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bff0:	0800c02d 	.word	0x0800c02d
 800bff4:	0800c001 	.word	0x0800c001
 800bff8:	0800c00f 	.word	0x0800c00f
 800bffc:	0800c02d 	.word	0x0800c02d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c000:	4b9f      	ldr	r3, [pc, #636]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c004:	4a9e      	ldr	r2, [pc, #632]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c006:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c00a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c00c:	e00f      	b.n	800c02e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c00e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c012:	3308      	adds	r3, #8
 800c014:	2102      	movs	r1, #2
 800c016:	4618      	mov	r0, r3
 800c018:	f001 ff0a 	bl	800de30 <RCCEx_PLL2_Config>
 800c01c:	4603      	mov	r3, r0
 800c01e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c022:	e004      	b.n	800c02e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c024:	2301      	movs	r3, #1
 800c026:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c02a:	e000      	b.n	800c02e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800c02c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c02e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c032:	2b00      	cmp	r3, #0
 800c034:	d10a      	bne.n	800c04c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c036:	4b92      	ldr	r3, [pc, #584]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c03a:	f023 0103 	bic.w	r1, r3, #3
 800c03e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c042:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c044:	4a8e      	ldr	r2, [pc, #568]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c046:	430b      	orrs	r3, r1
 800c048:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c04a:	e003      	b.n	800c054 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c04c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c050:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c054:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c05c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800c060:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c064:	2300      	movs	r3, #0
 800c066:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c06a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c06e:	460b      	mov	r3, r1
 800c070:	4313      	orrs	r3, r2
 800c072:	f000 8099 	beq.w	800c1a8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c076:	4b83      	ldr	r3, [pc, #524]	@ (800c284 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	4a82      	ldr	r2, [pc, #520]	@ (800c284 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c07c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c080:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c082:	f7f8 fa3d 	bl	8004500 <HAL_GetTick>
 800c086:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c08a:	e00b      	b.n	800c0a4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c08c:	f7f8 fa38 	bl	8004500 <HAL_GetTick>
 800c090:	4602      	mov	r2, r0
 800c092:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c096:	1ad3      	subs	r3, r2, r3
 800c098:	2b64      	cmp	r3, #100	@ 0x64
 800c09a:	d903      	bls.n	800c0a4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800c09c:	2303      	movs	r3, #3
 800c09e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c0a2:	e005      	b.n	800c0b0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c0a4:	4b77      	ldr	r3, [pc, #476]	@ (800c284 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d0ed      	beq.n	800c08c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800c0b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d173      	bne.n	800c1a0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c0b8:	4b71      	ldr	r3, [pc, #452]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c0ba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c0bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c0c4:	4053      	eors	r3, r2
 800c0c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d015      	beq.n	800c0fa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c0ce:	4b6c      	ldr	r3, [pc, #432]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c0d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c0d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c0d6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c0da:	4b69      	ldr	r3, [pc, #420]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c0dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c0de:	4a68      	ldr	r2, [pc, #416]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c0e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c0e4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c0e6:	4b66      	ldr	r3, [pc, #408]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c0e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c0ea:	4a65      	ldr	r2, [pc, #404]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c0ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c0f0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c0f2:	4a63      	ldr	r2, [pc, #396]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c0f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c0f8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c0fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c102:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c106:	d118      	bne.n	800c13a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c108:	f7f8 f9fa 	bl	8004500 <HAL_GetTick>
 800c10c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c110:	e00d      	b.n	800c12e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c112:	f7f8 f9f5 	bl	8004500 <HAL_GetTick>
 800c116:	4602      	mov	r2, r0
 800c118:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c11c:	1ad2      	subs	r2, r2, r3
 800c11e:	f241 3388 	movw	r3, #5000	@ 0x1388
 800c122:	429a      	cmp	r2, r3
 800c124:	d903      	bls.n	800c12e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800c126:	2303      	movs	r3, #3
 800c128:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800c12c:	e005      	b.n	800c13a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c12e:	4b54      	ldr	r3, [pc, #336]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c132:	f003 0302 	and.w	r3, r3, #2
 800c136:	2b00      	cmp	r3, #0
 800c138:	d0eb      	beq.n	800c112 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800c13a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d129      	bne.n	800c196 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c146:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c14a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c14e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c152:	d10e      	bne.n	800c172 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800c154:	4b4a      	ldr	r3, [pc, #296]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c156:	691b      	ldr	r3, [r3, #16]
 800c158:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800c15c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c160:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c164:	091a      	lsrs	r2, r3, #4
 800c166:	4b48      	ldr	r3, [pc, #288]	@ (800c288 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800c168:	4013      	ands	r3, r2
 800c16a:	4a45      	ldr	r2, [pc, #276]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c16c:	430b      	orrs	r3, r1
 800c16e:	6113      	str	r3, [r2, #16]
 800c170:	e005      	b.n	800c17e <HAL_RCCEx_PeriphCLKConfig+0x852>
 800c172:	4b43      	ldr	r3, [pc, #268]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c174:	691b      	ldr	r3, [r3, #16]
 800c176:	4a42      	ldr	r2, [pc, #264]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c178:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c17c:	6113      	str	r3, [r2, #16]
 800c17e:	4b40      	ldr	r3, [pc, #256]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c180:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800c182:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c186:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c18a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c18e:	4a3c      	ldr	r2, [pc, #240]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c190:	430b      	orrs	r3, r1
 800c192:	6713      	str	r3, [r2, #112]	@ 0x70
 800c194:	e008      	b.n	800c1a8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c196:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c19a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800c19e:	e003      	b.n	800c1a8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c1a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c1a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1b0:	f002 0301 	and.w	r3, r2, #1
 800c1b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c1be:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800c1c2:	460b      	mov	r3, r1
 800c1c4:	4313      	orrs	r3, r2
 800c1c6:	f000 808f 	beq.w	800c2e8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800c1ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c1d0:	2b28      	cmp	r3, #40	@ 0x28
 800c1d2:	d871      	bhi.n	800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800c1d4:	a201      	add	r2, pc, #4	@ (adr r2, 800c1dc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800c1d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1da:	bf00      	nop
 800c1dc:	0800c2c1 	.word	0x0800c2c1
 800c1e0:	0800c2b9 	.word	0x0800c2b9
 800c1e4:	0800c2b9 	.word	0x0800c2b9
 800c1e8:	0800c2b9 	.word	0x0800c2b9
 800c1ec:	0800c2b9 	.word	0x0800c2b9
 800c1f0:	0800c2b9 	.word	0x0800c2b9
 800c1f4:	0800c2b9 	.word	0x0800c2b9
 800c1f8:	0800c2b9 	.word	0x0800c2b9
 800c1fc:	0800c28d 	.word	0x0800c28d
 800c200:	0800c2b9 	.word	0x0800c2b9
 800c204:	0800c2b9 	.word	0x0800c2b9
 800c208:	0800c2b9 	.word	0x0800c2b9
 800c20c:	0800c2b9 	.word	0x0800c2b9
 800c210:	0800c2b9 	.word	0x0800c2b9
 800c214:	0800c2b9 	.word	0x0800c2b9
 800c218:	0800c2b9 	.word	0x0800c2b9
 800c21c:	0800c2a3 	.word	0x0800c2a3
 800c220:	0800c2b9 	.word	0x0800c2b9
 800c224:	0800c2b9 	.word	0x0800c2b9
 800c228:	0800c2b9 	.word	0x0800c2b9
 800c22c:	0800c2b9 	.word	0x0800c2b9
 800c230:	0800c2b9 	.word	0x0800c2b9
 800c234:	0800c2b9 	.word	0x0800c2b9
 800c238:	0800c2b9 	.word	0x0800c2b9
 800c23c:	0800c2c1 	.word	0x0800c2c1
 800c240:	0800c2b9 	.word	0x0800c2b9
 800c244:	0800c2b9 	.word	0x0800c2b9
 800c248:	0800c2b9 	.word	0x0800c2b9
 800c24c:	0800c2b9 	.word	0x0800c2b9
 800c250:	0800c2b9 	.word	0x0800c2b9
 800c254:	0800c2b9 	.word	0x0800c2b9
 800c258:	0800c2b9 	.word	0x0800c2b9
 800c25c:	0800c2c1 	.word	0x0800c2c1
 800c260:	0800c2b9 	.word	0x0800c2b9
 800c264:	0800c2b9 	.word	0x0800c2b9
 800c268:	0800c2b9 	.word	0x0800c2b9
 800c26c:	0800c2b9 	.word	0x0800c2b9
 800c270:	0800c2b9 	.word	0x0800c2b9
 800c274:	0800c2b9 	.word	0x0800c2b9
 800c278:	0800c2b9 	.word	0x0800c2b9
 800c27c:	0800c2c1 	.word	0x0800c2c1
 800c280:	58024400 	.word	0x58024400
 800c284:	58024800 	.word	0x58024800
 800c288:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c28c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c290:	3308      	adds	r3, #8
 800c292:	2101      	movs	r1, #1
 800c294:	4618      	mov	r0, r3
 800c296:	f001 fdcb 	bl	800de30 <RCCEx_PLL2_Config>
 800c29a:	4603      	mov	r3, r0
 800c29c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c2a0:	e00f      	b.n	800c2c2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c2a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2a6:	3328      	adds	r3, #40	@ 0x28
 800c2a8:	2101      	movs	r1, #1
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f001 fe72 	bl	800df94 <RCCEx_PLL3_Config>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c2b6:	e004      	b.n	800c2c2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c2be:	e000      	b.n	800c2c2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800c2c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c2c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d10a      	bne.n	800c2e0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c2ca:	4bbf      	ldr	r3, [pc, #764]	@ (800c5c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c2cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2ce:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800c2d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c2d8:	4abb      	ldr	r2, [pc, #748]	@ (800c5c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c2da:	430b      	orrs	r3, r1
 800c2dc:	6553      	str	r3, [r2, #84]	@ 0x54
 800c2de:	e003      	b.n	800c2e8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c2e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c2e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f0:	f002 0302 	and.w	r3, r2, #2
 800c2f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c2fe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800c302:	460b      	mov	r3, r1
 800c304:	4313      	orrs	r3, r2
 800c306:	d041      	beq.n	800c38c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c30c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c30e:	2b05      	cmp	r3, #5
 800c310:	d824      	bhi.n	800c35c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800c312:	a201      	add	r2, pc, #4	@ (adr r2, 800c318 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800c314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c318:	0800c365 	.word	0x0800c365
 800c31c:	0800c331 	.word	0x0800c331
 800c320:	0800c347 	.word	0x0800c347
 800c324:	0800c365 	.word	0x0800c365
 800c328:	0800c365 	.word	0x0800c365
 800c32c:	0800c365 	.word	0x0800c365
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c330:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c334:	3308      	adds	r3, #8
 800c336:	2101      	movs	r1, #1
 800c338:	4618      	mov	r0, r3
 800c33a:	f001 fd79 	bl	800de30 <RCCEx_PLL2_Config>
 800c33e:	4603      	mov	r3, r0
 800c340:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c344:	e00f      	b.n	800c366 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c346:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c34a:	3328      	adds	r3, #40	@ 0x28
 800c34c:	2101      	movs	r1, #1
 800c34e:	4618      	mov	r0, r3
 800c350:	f001 fe20 	bl	800df94 <RCCEx_PLL3_Config>
 800c354:	4603      	mov	r3, r0
 800c356:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c35a:	e004      	b.n	800c366 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c35c:	2301      	movs	r3, #1
 800c35e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c362:	e000      	b.n	800c366 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800c364:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c366:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d10a      	bne.n	800c384 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c36e:	4b96      	ldr	r3, [pc, #600]	@ (800c5c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c372:	f023 0107 	bic.w	r1, r3, #7
 800c376:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c37a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c37c:	4a92      	ldr	r2, [pc, #584]	@ (800c5c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c37e:	430b      	orrs	r3, r1
 800c380:	6553      	str	r3, [r2, #84]	@ 0x54
 800c382:	e003      	b.n	800c38c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c384:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c388:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c38c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c390:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c394:	f002 0304 	and.w	r3, r2, #4
 800c398:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c39c:	2300      	movs	r3, #0
 800c39e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c3a2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c3a6:	460b      	mov	r3, r1
 800c3a8:	4313      	orrs	r3, r2
 800c3aa:	d044      	beq.n	800c436 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c3ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c3b4:	2b05      	cmp	r3, #5
 800c3b6:	d825      	bhi.n	800c404 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800c3b8:	a201      	add	r2, pc, #4	@ (adr r2, 800c3c0 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800c3ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3be:	bf00      	nop
 800c3c0:	0800c40d 	.word	0x0800c40d
 800c3c4:	0800c3d9 	.word	0x0800c3d9
 800c3c8:	0800c3ef 	.word	0x0800c3ef
 800c3cc:	0800c40d 	.word	0x0800c40d
 800c3d0:	0800c40d 	.word	0x0800c40d
 800c3d4:	0800c40d 	.word	0x0800c40d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c3d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3dc:	3308      	adds	r3, #8
 800c3de:	2101      	movs	r1, #1
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f001 fd25 	bl	800de30 <RCCEx_PLL2_Config>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c3ec:	e00f      	b.n	800c40e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c3ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3f2:	3328      	adds	r3, #40	@ 0x28
 800c3f4:	2101      	movs	r1, #1
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f001 fdcc 	bl	800df94 <RCCEx_PLL3_Config>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c402:	e004      	b.n	800c40e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c404:	2301      	movs	r3, #1
 800c406:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c40a:	e000      	b.n	800c40e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800c40c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c40e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c412:	2b00      	cmp	r3, #0
 800c414:	d10b      	bne.n	800c42e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c416:	4b6c      	ldr	r3, [pc, #432]	@ (800c5c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c41a:	f023 0107 	bic.w	r1, r3, #7
 800c41e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c422:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c426:	4a68      	ldr	r2, [pc, #416]	@ (800c5c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c428:	430b      	orrs	r3, r1
 800c42a:	6593      	str	r3, [r2, #88]	@ 0x58
 800c42c:	e003      	b.n	800c436 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c42e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c432:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c436:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c43e:	f002 0320 	and.w	r3, r2, #32
 800c442:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c446:	2300      	movs	r3, #0
 800c448:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c44c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800c450:	460b      	mov	r3, r1
 800c452:	4313      	orrs	r3, r2
 800c454:	d055      	beq.n	800c502 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c45a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c45e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c462:	d033      	beq.n	800c4cc <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800c464:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c468:	d82c      	bhi.n	800c4c4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c46a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c46e:	d02f      	beq.n	800c4d0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800c470:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c474:	d826      	bhi.n	800c4c4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c476:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c47a:	d02b      	beq.n	800c4d4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800c47c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c480:	d820      	bhi.n	800c4c4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c482:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c486:	d012      	beq.n	800c4ae <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800c488:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c48c:	d81a      	bhi.n	800c4c4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d022      	beq.n	800c4d8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c492:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c496:	d115      	bne.n	800c4c4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c498:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c49c:	3308      	adds	r3, #8
 800c49e:	2100      	movs	r1, #0
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f001 fcc5 	bl	800de30 <RCCEx_PLL2_Config>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c4ac:	e015      	b.n	800c4da <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c4ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4b2:	3328      	adds	r3, #40	@ 0x28
 800c4b4:	2102      	movs	r1, #2
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	f001 fd6c 	bl	800df94 <RCCEx_PLL3_Config>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c4c2:	e00a      	b.n	800c4da <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c4c4:	2301      	movs	r3, #1
 800c4c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c4ca:	e006      	b.n	800c4da <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c4cc:	bf00      	nop
 800c4ce:	e004      	b.n	800c4da <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c4d0:	bf00      	nop
 800c4d2:	e002      	b.n	800c4da <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c4d4:	bf00      	nop
 800c4d6:	e000      	b.n	800c4da <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c4d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c4da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d10b      	bne.n	800c4fa <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c4e2:	4b39      	ldr	r3, [pc, #228]	@ (800c5c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c4e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4e6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c4ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c4f2:	4a35      	ldr	r2, [pc, #212]	@ (800c5c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c4f4:	430b      	orrs	r3, r1
 800c4f6:	6553      	str	r3, [r2, #84]	@ 0x54
 800c4f8:	e003      	b.n	800c502 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c4fe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c502:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c50a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800c50e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c512:	2300      	movs	r3, #0
 800c514:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c518:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800c51c:	460b      	mov	r3, r1
 800c51e:	4313      	orrs	r3, r2
 800c520:	d058      	beq.n	800c5d4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c522:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c526:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c52a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c52e:	d033      	beq.n	800c598 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800c530:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c534:	d82c      	bhi.n	800c590 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c536:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c53a:	d02f      	beq.n	800c59c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c53c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c540:	d826      	bhi.n	800c590 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c542:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c546:	d02b      	beq.n	800c5a0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c548:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c54c:	d820      	bhi.n	800c590 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c54e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c552:	d012      	beq.n	800c57a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800c554:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c558:	d81a      	bhi.n	800c590 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d022      	beq.n	800c5a4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c55e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c562:	d115      	bne.n	800c590 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c564:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c568:	3308      	adds	r3, #8
 800c56a:	2100      	movs	r1, #0
 800c56c:	4618      	mov	r0, r3
 800c56e:	f001 fc5f 	bl	800de30 <RCCEx_PLL2_Config>
 800c572:	4603      	mov	r3, r0
 800c574:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c578:	e015      	b.n	800c5a6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c57a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c57e:	3328      	adds	r3, #40	@ 0x28
 800c580:	2102      	movs	r1, #2
 800c582:	4618      	mov	r0, r3
 800c584:	f001 fd06 	bl	800df94 <RCCEx_PLL3_Config>
 800c588:	4603      	mov	r3, r0
 800c58a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c58e:	e00a      	b.n	800c5a6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c590:	2301      	movs	r3, #1
 800c592:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c596:	e006      	b.n	800c5a6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c598:	bf00      	nop
 800c59a:	e004      	b.n	800c5a6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c59c:	bf00      	nop
 800c59e:	e002      	b.n	800c5a6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c5a0:	bf00      	nop
 800c5a2:	e000      	b.n	800c5a6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c5a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c5a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d10e      	bne.n	800c5cc <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c5ae:	4b06      	ldr	r3, [pc, #24]	@ (800c5c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c5b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c5b2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800c5b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c5be:	4a02      	ldr	r2, [pc, #8]	@ (800c5c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c5c0:	430b      	orrs	r3, r1
 800c5c2:	6593      	str	r3, [r2, #88]	@ 0x58
 800c5c4:	e006      	b.n	800c5d4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800c5c6:	bf00      	nop
 800c5c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c5d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c5d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5dc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800c5e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c5ea:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800c5ee:	460b      	mov	r3, r1
 800c5f0:	4313      	orrs	r3, r2
 800c5f2:	d055      	beq.n	800c6a0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c5f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c5fc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c600:	d033      	beq.n	800c66a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800c602:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c606:	d82c      	bhi.n	800c662 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c608:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c60c:	d02f      	beq.n	800c66e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c60e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c612:	d826      	bhi.n	800c662 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c614:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c618:	d02b      	beq.n	800c672 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c61a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c61e:	d820      	bhi.n	800c662 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c620:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c624:	d012      	beq.n	800c64c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800c626:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c62a:	d81a      	bhi.n	800c662 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d022      	beq.n	800c676 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c630:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c634:	d115      	bne.n	800c662 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c636:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c63a:	3308      	adds	r3, #8
 800c63c:	2100      	movs	r1, #0
 800c63e:	4618      	mov	r0, r3
 800c640:	f001 fbf6 	bl	800de30 <RCCEx_PLL2_Config>
 800c644:	4603      	mov	r3, r0
 800c646:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c64a:	e015      	b.n	800c678 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c64c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c650:	3328      	adds	r3, #40	@ 0x28
 800c652:	2102      	movs	r1, #2
 800c654:	4618      	mov	r0, r3
 800c656:	f001 fc9d 	bl	800df94 <RCCEx_PLL3_Config>
 800c65a:	4603      	mov	r3, r0
 800c65c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c660:	e00a      	b.n	800c678 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c662:	2301      	movs	r3, #1
 800c664:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c668:	e006      	b.n	800c678 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c66a:	bf00      	nop
 800c66c:	e004      	b.n	800c678 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c66e:	bf00      	nop
 800c670:	e002      	b.n	800c678 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c672:	bf00      	nop
 800c674:	e000      	b.n	800c678 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c676:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c678:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d10b      	bne.n	800c698 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c680:	4ba0      	ldr	r3, [pc, #640]	@ (800c904 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c684:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800c688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c68c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c690:	4a9c      	ldr	r2, [pc, #624]	@ (800c904 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c692:	430b      	orrs	r3, r1
 800c694:	6593      	str	r3, [r2, #88]	@ 0x58
 800c696:	e003      	b.n	800c6a0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c698:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c69c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800c6a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a8:	f002 0308 	and.w	r3, r2, #8
 800c6ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c6b6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800c6ba:	460b      	mov	r3, r1
 800c6bc:	4313      	orrs	r3, r2
 800c6be:	d01e      	beq.n	800c6fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800c6c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c6c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c6cc:	d10c      	bne.n	800c6e8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c6ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6d2:	3328      	adds	r3, #40	@ 0x28
 800c6d4:	2102      	movs	r1, #2
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f001 fc5c 	bl	800df94 <RCCEx_PLL3_Config>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d002      	beq.n	800c6e8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800c6e8:	4b86      	ldr	r3, [pc, #536]	@ (800c904 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c6ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6ec:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c6f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c6f8:	4a82      	ldr	r2, [pc, #520]	@ (800c904 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c6fa:	430b      	orrs	r3, r1
 800c6fc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c6fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c706:	f002 0310 	and.w	r3, r2, #16
 800c70a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c70e:	2300      	movs	r3, #0
 800c710:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c714:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800c718:	460b      	mov	r3, r1
 800c71a:	4313      	orrs	r3, r2
 800c71c:	d01e      	beq.n	800c75c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c71e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c722:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c726:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c72a:	d10c      	bne.n	800c746 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c72c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c730:	3328      	adds	r3, #40	@ 0x28
 800c732:	2102      	movs	r1, #2
 800c734:	4618      	mov	r0, r3
 800c736:	f001 fc2d 	bl	800df94 <RCCEx_PLL3_Config>
 800c73a:	4603      	mov	r3, r0
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d002      	beq.n	800c746 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800c740:	2301      	movs	r3, #1
 800c742:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c746:	4b6f      	ldr	r3, [pc, #444]	@ (800c904 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c74a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c74e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c752:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c756:	4a6b      	ldr	r2, [pc, #428]	@ (800c904 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c758:	430b      	orrs	r3, r1
 800c75a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c75c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c764:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800c768:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c76a:	2300      	movs	r3, #0
 800c76c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c76e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800c772:	460b      	mov	r3, r1
 800c774:	4313      	orrs	r3, r2
 800c776:	d03e      	beq.n	800c7f6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c778:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c77c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c780:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c784:	d022      	beq.n	800c7cc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c786:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c78a:	d81b      	bhi.n	800c7c4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d003      	beq.n	800c798 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800c790:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c794:	d00b      	beq.n	800c7ae <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800c796:	e015      	b.n	800c7c4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c798:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c79c:	3308      	adds	r3, #8
 800c79e:	2100      	movs	r1, #0
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	f001 fb45 	bl	800de30 <RCCEx_PLL2_Config>
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c7ac:	e00f      	b.n	800c7ce <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c7ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7b2:	3328      	adds	r3, #40	@ 0x28
 800c7b4:	2102      	movs	r1, #2
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f001 fbec 	bl	800df94 <RCCEx_PLL3_Config>
 800c7bc:	4603      	mov	r3, r0
 800c7be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c7c2:	e004      	b.n	800c7ce <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c7ca:	e000      	b.n	800c7ce <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800c7cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c7ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d10b      	bne.n	800c7ee <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c7d6:	4b4b      	ldr	r3, [pc, #300]	@ (800c904 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c7d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c7da:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800c7de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c7e6:	4a47      	ldr	r2, [pc, #284]	@ (800c904 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c7e8:	430b      	orrs	r3, r1
 800c7ea:	6593      	str	r3, [r2, #88]	@ 0x58
 800c7ec:	e003      	b.n	800c7f6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c7f2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c7f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7fe:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800c802:	673b      	str	r3, [r7, #112]	@ 0x70
 800c804:	2300      	movs	r3, #0
 800c806:	677b      	str	r3, [r7, #116]	@ 0x74
 800c808:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800c80c:	460b      	mov	r3, r1
 800c80e:	4313      	orrs	r3, r2
 800c810:	d03b      	beq.n	800c88a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c812:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c816:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c81a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c81e:	d01f      	beq.n	800c860 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c820:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c824:	d818      	bhi.n	800c858 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800c826:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c82a:	d003      	beq.n	800c834 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800c82c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c830:	d007      	beq.n	800c842 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800c832:	e011      	b.n	800c858 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c834:	4b33      	ldr	r3, [pc, #204]	@ (800c904 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c838:	4a32      	ldr	r2, [pc, #200]	@ (800c904 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c83a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c83e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c840:	e00f      	b.n	800c862 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c842:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c846:	3328      	adds	r3, #40	@ 0x28
 800c848:	2101      	movs	r1, #1
 800c84a:	4618      	mov	r0, r3
 800c84c:	f001 fba2 	bl	800df94 <RCCEx_PLL3_Config>
 800c850:	4603      	mov	r3, r0
 800c852:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800c856:	e004      	b.n	800c862 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c858:	2301      	movs	r3, #1
 800c85a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c85e:	e000      	b.n	800c862 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800c860:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c862:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c866:	2b00      	cmp	r3, #0
 800c868:	d10b      	bne.n	800c882 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c86a:	4b26      	ldr	r3, [pc, #152]	@ (800c904 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c86c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c86e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c872:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c876:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c87a:	4a22      	ldr	r2, [pc, #136]	@ (800c904 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c87c:	430b      	orrs	r3, r1
 800c87e:	6553      	str	r3, [r2, #84]	@ 0x54
 800c880:	e003      	b.n	800c88a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c882:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c886:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c88a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c892:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800c896:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c898:	2300      	movs	r3, #0
 800c89a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c89c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800c8a0:	460b      	mov	r3, r1
 800c8a2:	4313      	orrs	r3, r2
 800c8a4:	d034      	beq.n	800c910 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c8a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d003      	beq.n	800c8b8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800c8b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c8b4:	d007      	beq.n	800c8c6 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800c8b6:	e011      	b.n	800c8dc <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c8b8:	4b12      	ldr	r3, [pc, #72]	@ (800c904 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c8ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8bc:	4a11      	ldr	r2, [pc, #68]	@ (800c904 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c8be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c8c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c8c4:	e00e      	b.n	800c8e4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c8c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8ca:	3308      	adds	r3, #8
 800c8cc:	2102      	movs	r1, #2
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	f001 faae 	bl	800de30 <RCCEx_PLL2_Config>
 800c8d4:	4603      	mov	r3, r0
 800c8d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c8da:	e003      	b.n	800c8e4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800c8dc:	2301      	movs	r3, #1
 800c8de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c8e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c8e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d10d      	bne.n	800c908 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c8ec:	4b05      	ldr	r3, [pc, #20]	@ (800c904 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c8ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c8f0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c8f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c8fa:	4a02      	ldr	r2, [pc, #8]	@ (800c904 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c8fc:	430b      	orrs	r3, r1
 800c8fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c900:	e006      	b.n	800c910 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800c902:	bf00      	nop
 800c904:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c908:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c90c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c910:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c918:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800c91c:	663b      	str	r3, [r7, #96]	@ 0x60
 800c91e:	2300      	movs	r3, #0
 800c920:	667b      	str	r3, [r7, #100]	@ 0x64
 800c922:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800c926:	460b      	mov	r3, r1
 800c928:	4313      	orrs	r3, r2
 800c92a:	d00c      	beq.n	800c946 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c92c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c930:	3328      	adds	r3, #40	@ 0x28
 800c932:	2102      	movs	r1, #2
 800c934:	4618      	mov	r0, r3
 800c936:	f001 fb2d 	bl	800df94 <RCCEx_PLL3_Config>
 800c93a:	4603      	mov	r3, r0
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d002      	beq.n	800c946 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800c940:	2301      	movs	r3, #1
 800c942:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c946:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c94e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800c952:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c954:	2300      	movs	r3, #0
 800c956:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c958:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800c95c:	460b      	mov	r3, r1
 800c95e:	4313      	orrs	r3, r2
 800c960:	d036      	beq.n	800c9d0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c962:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c966:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c968:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c96c:	d018      	beq.n	800c9a0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800c96e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c972:	d811      	bhi.n	800c998 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c974:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c978:	d014      	beq.n	800c9a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800c97a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c97e:	d80b      	bhi.n	800c998 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c980:	2b00      	cmp	r3, #0
 800c982:	d011      	beq.n	800c9a8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800c984:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c988:	d106      	bne.n	800c998 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c98a:	4bb7      	ldr	r3, [pc, #732]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c98c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c98e:	4ab6      	ldr	r2, [pc, #728]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c990:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c994:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c996:	e008      	b.n	800c9aa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c998:	2301      	movs	r3, #1
 800c99a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c99e:	e004      	b.n	800c9aa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c9a0:	bf00      	nop
 800c9a2:	e002      	b.n	800c9aa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c9a4:	bf00      	nop
 800c9a6:	e000      	b.n	800c9aa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c9a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c9aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d10a      	bne.n	800c9c8 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c9b2:	4bad      	ldr	r3, [pc, #692]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c9b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c9b6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c9ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c9c0:	4aa9      	ldr	r2, [pc, #676]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c9c2:	430b      	orrs	r3, r1
 800c9c4:	6553      	str	r3, [r2, #84]	@ 0x54
 800c9c6:	e003      	b.n	800c9d0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c9cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c9d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800c9dc:	653b      	str	r3, [r7, #80]	@ 0x50
 800c9de:	2300      	movs	r3, #0
 800c9e0:	657b      	str	r3, [r7, #84]	@ 0x54
 800c9e2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800c9e6:	460b      	mov	r3, r1
 800c9e8:	4313      	orrs	r3, r2
 800c9ea:	d009      	beq.n	800ca00 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c9ec:	4b9e      	ldr	r3, [pc, #632]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c9ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c9f0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c9f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c9fa:	4a9b      	ldr	r2, [pc, #620]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c9fc:	430b      	orrs	r3, r1
 800c9fe:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ca00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca08:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800ca0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ca0e:	2300      	movs	r3, #0
 800ca10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ca12:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800ca16:	460b      	mov	r3, r1
 800ca18:	4313      	orrs	r3, r2
 800ca1a:	d009      	beq.n	800ca30 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ca1c:	4b92      	ldr	r3, [pc, #584]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca20:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800ca24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca28:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ca2a:	4a8f      	ldr	r2, [pc, #572]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca2c:	430b      	orrs	r3, r1
 800ca2e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ca30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca38:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800ca3c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca3e:	2300      	movs	r3, #0
 800ca40:	647b      	str	r3, [r7, #68]	@ 0x44
 800ca42:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800ca46:	460b      	mov	r3, r1
 800ca48:	4313      	orrs	r3, r2
 800ca4a:	d00e      	beq.n	800ca6a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ca4c:	4b86      	ldr	r3, [pc, #536]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca4e:	691b      	ldr	r3, [r3, #16]
 800ca50:	4a85      	ldr	r2, [pc, #532]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca52:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ca56:	6113      	str	r3, [r2, #16]
 800ca58:	4b83      	ldr	r3, [pc, #524]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca5a:	6919      	ldr	r1, [r3, #16]
 800ca5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca60:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ca64:	4a80      	ldr	r2, [pc, #512]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca66:	430b      	orrs	r3, r1
 800ca68:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ca6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca72:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800ca76:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ca78:	2300      	movs	r3, #0
 800ca7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca7c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800ca80:	460b      	mov	r3, r1
 800ca82:	4313      	orrs	r3, r2
 800ca84:	d009      	beq.n	800ca9a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ca86:	4b78      	ldr	r3, [pc, #480]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ca8a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800ca8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca94:	4a74      	ldr	r2, [pc, #464]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ca96:	430b      	orrs	r3, r1
 800ca98:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ca9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800caa6:	633b      	str	r3, [r7, #48]	@ 0x30
 800caa8:	2300      	movs	r3, #0
 800caaa:	637b      	str	r3, [r7, #52]	@ 0x34
 800caac:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800cab0:	460b      	mov	r3, r1
 800cab2:	4313      	orrs	r3, r2
 800cab4:	d00a      	beq.n	800cacc <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800cab6:	4b6c      	ldr	r3, [pc, #432]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800caba:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800cabe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cac6:	4a68      	ldr	r2, [pc, #416]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cac8:	430b      	orrs	r3, r1
 800caca:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800cacc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad4:	2100      	movs	r1, #0
 800cad6:	62b9      	str	r1, [r7, #40]	@ 0x28
 800cad8:	f003 0301 	and.w	r3, r3, #1
 800cadc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cade:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800cae2:	460b      	mov	r3, r1
 800cae4:	4313      	orrs	r3, r2
 800cae6:	d011      	beq.n	800cb0c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800caec:	3308      	adds	r3, #8
 800caee:	2100      	movs	r1, #0
 800caf0:	4618      	mov	r0, r3
 800caf2:	f001 f99d 	bl	800de30 <RCCEx_PLL2_Config>
 800caf6:	4603      	mov	r3, r0
 800caf8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800cafc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d003      	beq.n	800cb0c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800cb0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb14:	2100      	movs	r1, #0
 800cb16:	6239      	str	r1, [r7, #32]
 800cb18:	f003 0302 	and.w	r3, r3, #2
 800cb1c:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb1e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800cb22:	460b      	mov	r3, r1
 800cb24:	4313      	orrs	r3, r2
 800cb26:	d011      	beq.n	800cb4c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cb28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb2c:	3308      	adds	r3, #8
 800cb2e:	2101      	movs	r1, #1
 800cb30:	4618      	mov	r0, r3
 800cb32:	f001 f97d 	bl	800de30 <RCCEx_PLL2_Config>
 800cb36:	4603      	mov	r3, r0
 800cb38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800cb3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d003      	beq.n	800cb4c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800cb4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb54:	2100      	movs	r1, #0
 800cb56:	61b9      	str	r1, [r7, #24]
 800cb58:	f003 0304 	and.w	r3, r3, #4
 800cb5c:	61fb      	str	r3, [r7, #28]
 800cb5e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800cb62:	460b      	mov	r3, r1
 800cb64:	4313      	orrs	r3, r2
 800cb66:	d011      	beq.n	800cb8c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cb68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb6c:	3308      	adds	r3, #8
 800cb6e:	2102      	movs	r1, #2
 800cb70:	4618      	mov	r0, r3
 800cb72:	f001 f95d 	bl	800de30 <RCCEx_PLL2_Config>
 800cb76:	4603      	mov	r3, r0
 800cb78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800cb7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d003      	beq.n	800cb8c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800cb8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb94:	2100      	movs	r1, #0
 800cb96:	6139      	str	r1, [r7, #16]
 800cb98:	f003 0308 	and.w	r3, r3, #8
 800cb9c:	617b      	str	r3, [r7, #20]
 800cb9e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800cba2:	460b      	mov	r3, r1
 800cba4:	4313      	orrs	r3, r2
 800cba6:	d011      	beq.n	800cbcc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbac:	3328      	adds	r3, #40	@ 0x28
 800cbae:	2100      	movs	r1, #0
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	f001 f9ef 	bl	800df94 <RCCEx_PLL3_Config>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800cbbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d003      	beq.n	800cbcc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cbc4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cbc8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800cbcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd4:	2100      	movs	r1, #0
 800cbd6:	60b9      	str	r1, [r7, #8]
 800cbd8:	f003 0310 	and.w	r3, r3, #16
 800cbdc:	60fb      	str	r3, [r7, #12]
 800cbde:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800cbe2:	460b      	mov	r3, r1
 800cbe4:	4313      	orrs	r3, r2
 800cbe6:	d011      	beq.n	800cc0c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cbe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbec:	3328      	adds	r3, #40	@ 0x28
 800cbee:	2101      	movs	r1, #1
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f001 f9cf 	bl	800df94 <RCCEx_PLL3_Config>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800cbfc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d003      	beq.n	800cc0c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800cc0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc14:	2100      	movs	r1, #0
 800cc16:	6039      	str	r1, [r7, #0]
 800cc18:	f003 0320 	and.w	r3, r3, #32
 800cc1c:	607b      	str	r3, [r7, #4]
 800cc1e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800cc22:	460b      	mov	r3, r1
 800cc24:	4313      	orrs	r3, r2
 800cc26:	d011      	beq.n	800cc4c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cc28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc2c:	3328      	adds	r3, #40	@ 0x28
 800cc2e:	2102      	movs	r1, #2
 800cc30:	4618      	mov	r0, r3
 800cc32:	f001 f9af 	bl	800df94 <RCCEx_PLL3_Config>
 800cc36:	4603      	mov	r3, r0
 800cc38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800cc3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d003      	beq.n	800cc4c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800cc4c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d101      	bne.n	800cc58 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800cc54:	2300      	movs	r3, #0
 800cc56:	e000      	b.n	800cc5a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800cc58:	2301      	movs	r3, #1
}
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800cc60:	46bd      	mov	sp, r7
 800cc62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cc66:	bf00      	nop
 800cc68:	58024400 	.word	0x58024400

0800cc6c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b090      	sub	sp, #64	@ 0x40
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800cc76:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc7a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800cc7e:	430b      	orrs	r3, r1
 800cc80:	f040 8094 	bne.w	800cdac <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800cc84:	4b9b      	ldr	r3, [pc, #620]	@ (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cc86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc88:	f003 0307 	and.w	r3, r3, #7
 800cc8c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800cc8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc90:	2b04      	cmp	r3, #4
 800cc92:	f200 8087 	bhi.w	800cda4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800cc96:	a201      	add	r2, pc, #4	@ (adr r2, 800cc9c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800cc98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc9c:	0800ccb1 	.word	0x0800ccb1
 800cca0:	0800ccd9 	.word	0x0800ccd9
 800cca4:	0800cd01 	.word	0x0800cd01
 800cca8:	0800cd9d 	.word	0x0800cd9d
 800ccac:	0800cd29 	.word	0x0800cd29
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ccb0:	4b90      	ldr	r3, [pc, #576]	@ (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ccb8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ccbc:	d108      	bne.n	800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ccbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f000 ff62 	bl	800db8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ccc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cccc:	f000 bc93 	b.w	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ccd4:	f000 bc8f 	b.w	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ccd8:	4b86      	ldr	r3, [pc, #536]	@ (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cce0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cce4:	d108      	bne.n	800ccf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cce6:	f107 0318 	add.w	r3, r7, #24
 800ccea:	4618      	mov	r0, r3
 800ccec:	f000 fca6 	bl	800d63c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ccf0:	69bb      	ldr	r3, [r7, #24]
 800ccf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccf4:	f000 bc7f 	b.w	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ccfc:	f000 bc7b 	b.w	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cd00:	4b7c      	ldr	r3, [pc, #496]	@ (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cd08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cd0c:	d108      	bne.n	800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd0e:	f107 030c 	add.w	r3, r7, #12
 800cd12:	4618      	mov	r0, r3
 800cd14:	f000 fde6 	bl	800d8e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd1c:	f000 bc6b 	b.w	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cd20:	2300      	movs	r3, #0
 800cd22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd24:	f000 bc67 	b.w	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cd28:	4b72      	ldr	r3, [pc, #456]	@ (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cd2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cd2c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800cd30:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cd32:	4b70      	ldr	r3, [pc, #448]	@ (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	f003 0304 	and.w	r3, r3, #4
 800cd3a:	2b04      	cmp	r3, #4
 800cd3c:	d10c      	bne.n	800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800cd3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d109      	bne.n	800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd44:	4b6b      	ldr	r3, [pc, #428]	@ (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	08db      	lsrs	r3, r3, #3
 800cd4a:	f003 0303 	and.w	r3, r3, #3
 800cd4e:	4a6a      	ldr	r2, [pc, #424]	@ (800cef8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800cd50:	fa22 f303 	lsr.w	r3, r2, r3
 800cd54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cd56:	e01f      	b.n	800cd98 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cd58:	4b66      	ldr	r3, [pc, #408]	@ (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cd60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cd64:	d106      	bne.n	800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800cd66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cd6c:	d102      	bne.n	800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cd6e:	4b63      	ldr	r3, [pc, #396]	@ (800cefc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800cd70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cd72:	e011      	b.n	800cd98 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cd74:	4b5f      	ldr	r3, [pc, #380]	@ (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cd7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cd80:	d106      	bne.n	800cd90 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800cd82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cd88:	d102      	bne.n	800cd90 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cd8a:	4b5d      	ldr	r3, [pc, #372]	@ (800cf00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cd8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cd8e:	e003      	b.n	800cd98 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cd90:	2300      	movs	r3, #0
 800cd92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800cd94:	f000 bc2f 	b.w	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cd98:	f000 bc2d 	b.w	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cd9c:	4b59      	ldr	r3, [pc, #356]	@ (800cf04 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800cd9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cda0:	f000 bc29 	b.w	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800cda4:	2300      	movs	r3, #0
 800cda6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cda8:	f000 bc25 	b.w	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800cdac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cdb0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800cdb4:	430b      	orrs	r3, r1
 800cdb6:	f040 80a7 	bne.w	800cf08 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800cdba:	4b4e      	ldr	r3, [pc, #312]	@ (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cdbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cdbe:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800cdc2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800cdc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdc6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cdca:	d054      	beq.n	800ce76 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800cdcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cdd2:	f200 808b 	bhi.w	800ceec <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800cdd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdd8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800cddc:	f000 8083 	beq.w	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800cde0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cde2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800cde6:	f200 8081 	bhi.w	800ceec <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800cdea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cdf0:	d02f      	beq.n	800ce52 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800cdf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdf4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cdf8:	d878      	bhi.n	800ceec <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800cdfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d004      	beq.n	800ce0a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800ce00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ce06:	d012      	beq.n	800ce2e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800ce08:	e070      	b.n	800ceec <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ce0a:	4b3a      	ldr	r3, [pc, #232]	@ (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ce12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ce16:	d107      	bne.n	800ce28 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ce18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f000 feb5 	bl	800db8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ce22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce26:	e3e6      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ce28:	2300      	movs	r3, #0
 800ce2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce2c:	e3e3      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ce2e:	4b31      	ldr	r3, [pc, #196]	@ (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ce36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ce3a:	d107      	bne.n	800ce4c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce3c:	f107 0318 	add.w	r3, r7, #24
 800ce40:	4618      	mov	r0, r3
 800ce42:	f000 fbfb 	bl	800d63c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ce46:	69bb      	ldr	r3, [r7, #24]
 800ce48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce4a:	e3d4      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce50:	e3d1      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ce52:	4b28      	ldr	r3, [pc, #160]	@ (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ce5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ce5e:	d107      	bne.n	800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce60:	f107 030c 	add.w	r3, r7, #12
 800ce64:	4618      	mov	r0, r3
 800ce66:	f000 fd3d 	bl	800d8e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce6e:	e3c2      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ce70:	2300      	movs	r3, #0
 800ce72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce74:	e3bf      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ce76:	4b1f      	ldr	r3, [pc, #124]	@ (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ce78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ce7a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ce7e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ce80:	4b1c      	ldr	r3, [pc, #112]	@ (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	f003 0304 	and.w	r3, r3, #4
 800ce88:	2b04      	cmp	r3, #4
 800ce8a:	d10c      	bne.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800ce8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d109      	bne.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce92:	4b18      	ldr	r3, [pc, #96]	@ (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	08db      	lsrs	r3, r3, #3
 800ce98:	f003 0303 	and.w	r3, r3, #3
 800ce9c:	4a16      	ldr	r2, [pc, #88]	@ (800cef8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800ce9e:	fa22 f303 	lsr.w	r3, r2, r3
 800cea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cea4:	e01e      	b.n	800cee4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cea6:	4b13      	ldr	r3, [pc, #76]	@ (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ceae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ceb2:	d106      	bne.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800ceb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ceb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ceba:	d102      	bne.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cebc:	4b0f      	ldr	r3, [pc, #60]	@ (800cefc <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800cebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cec0:	e010      	b.n	800cee4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cec2:	4b0c      	ldr	r3, [pc, #48]	@ (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ceca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cece:	d106      	bne.n	800cede <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800ced0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ced2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ced6:	d102      	bne.n	800cede <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ced8:	4b09      	ldr	r3, [pc, #36]	@ (800cf00 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ceda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cedc:	e002      	b.n	800cee4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cede:	2300      	movs	r3, #0
 800cee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800cee2:	e388      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cee4:	e387      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cee6:	4b07      	ldr	r3, [pc, #28]	@ (800cf04 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800cee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ceea:	e384      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800ceec:	2300      	movs	r3, #0
 800ceee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cef0:	e381      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cef2:	bf00      	nop
 800cef4:	58024400 	.word	0x58024400
 800cef8:	03d09000 	.word	0x03d09000
 800cefc:	003d0900 	.word	0x003d0900
 800cf00:	007a1200 	.word	0x007a1200
 800cf04:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800cf08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf0c:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800cf10:	430b      	orrs	r3, r1
 800cf12:	f040 809c 	bne.w	800d04e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800cf16:	4b9e      	ldr	r3, [pc, #632]	@ (800d190 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf1a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800cf1e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800cf20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf22:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cf26:	d054      	beq.n	800cfd2 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800cf28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf2a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cf2e:	f200 808b 	bhi.w	800d048 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800cf32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf34:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800cf38:	f000 8083 	beq.w	800d042 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800cf3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf3e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800cf42:	f200 8081 	bhi.w	800d048 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800cf46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cf4c:	d02f      	beq.n	800cfae <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800cf4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf50:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cf54:	d878      	bhi.n	800d048 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800cf56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d004      	beq.n	800cf66 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800cf5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf5e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cf62:	d012      	beq.n	800cf8a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800cf64:	e070      	b.n	800d048 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cf66:	4b8a      	ldr	r3, [pc, #552]	@ (800d190 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cf6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cf72:	d107      	bne.n	800cf84 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cf74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cf78:	4618      	mov	r0, r3
 800cf7a:	f000 fe07 	bl	800db8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cf7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf82:	e338      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf84:	2300      	movs	r3, #0
 800cf86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf88:	e335      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cf8a:	4b81      	ldr	r3, [pc, #516]	@ (800d190 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cf92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cf96:	d107      	bne.n	800cfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf98:	f107 0318 	add.w	r3, r7, #24
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	f000 fb4d 	bl	800d63c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cfa2:	69bb      	ldr	r3, [r7, #24]
 800cfa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfa6:	e326      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cfac:	e323      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cfae:	4b78      	ldr	r3, [pc, #480]	@ (800d190 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cfb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cfba:	d107      	bne.n	800cfcc <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cfbc:	f107 030c 	add.w	r3, r7, #12
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f000 fc8f 	bl	800d8e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfca:	e314      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cfcc:	2300      	movs	r3, #0
 800cfce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cfd0:	e311      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cfd2:	4b6f      	ldr	r3, [pc, #444]	@ (800d190 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cfd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cfd6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800cfda:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cfdc:	4b6c      	ldr	r3, [pc, #432]	@ (800d190 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	f003 0304 	and.w	r3, r3, #4
 800cfe4:	2b04      	cmp	r3, #4
 800cfe6:	d10c      	bne.n	800d002 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800cfe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d109      	bne.n	800d002 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cfee:	4b68      	ldr	r3, [pc, #416]	@ (800d190 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	08db      	lsrs	r3, r3, #3
 800cff4:	f003 0303 	and.w	r3, r3, #3
 800cff8:	4a66      	ldr	r2, [pc, #408]	@ (800d194 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800cffa:	fa22 f303 	lsr.w	r3, r2, r3
 800cffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d000:	e01e      	b.n	800d040 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d002:	4b63      	ldr	r3, [pc, #396]	@ (800d190 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d00a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d00e:	d106      	bne.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800d010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d012:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d016:	d102      	bne.n	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d018:	4b5f      	ldr	r3, [pc, #380]	@ (800d198 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800d01a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d01c:	e010      	b.n	800d040 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d01e:	4b5c      	ldr	r3, [pc, #368]	@ (800d190 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d026:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d02a:	d106      	bne.n	800d03a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800d02c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d02e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d032:	d102      	bne.n	800d03a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d034:	4b59      	ldr	r3, [pc, #356]	@ (800d19c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d036:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d038:	e002      	b.n	800d040 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d03a:	2300      	movs	r3, #0
 800d03c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d03e:	e2da      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d040:	e2d9      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d042:	4b57      	ldr	r3, [pc, #348]	@ (800d1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800d044:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d046:	e2d6      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d048:	2300      	movs	r3, #0
 800d04a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d04c:	e2d3      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800d04e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d052:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800d056:	430b      	orrs	r3, r1
 800d058:	f040 80a7 	bne.w	800d1aa <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800d05c:	4b4c      	ldr	r3, [pc, #304]	@ (800d190 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d05e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d060:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800d064:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d068:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d06c:	d055      	beq.n	800d11a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800d06e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d070:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d074:	f200 8096 	bhi.w	800d1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800d078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d07a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d07e:	f000 8084 	beq.w	800d18a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800d082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d084:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d088:	f200 808c 	bhi.w	800d1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800d08c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d08e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d092:	d030      	beq.n	800d0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800d094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d096:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d09a:	f200 8083 	bhi.w	800d1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800d09e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d004      	beq.n	800d0ae <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800d0a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d0aa:	d012      	beq.n	800d0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800d0ac:	e07a      	b.n	800d1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d0ae:	4b38      	ldr	r3, [pc, #224]	@ (800d190 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d0b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d0ba:	d107      	bne.n	800d0cc <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d0bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	f000 fd63 	bl	800db8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d0c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0ca:	e294      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d0d0:	e291      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d0d2:	4b2f      	ldr	r3, [pc, #188]	@ (800d190 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d0da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d0de:	d107      	bne.n	800d0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d0e0:	f107 0318 	add.w	r3, r7, #24
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	f000 faa9 	bl	800d63c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d0ea:	69bb      	ldr	r3, [r7, #24]
 800d0ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0ee:	e282      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d0f4:	e27f      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d0f6:	4b26      	ldr	r3, [pc, #152]	@ (800d190 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d0fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d102:	d107      	bne.n	800d114 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d104:	f107 030c 	add.w	r3, r7, #12
 800d108:	4618      	mov	r0, r3
 800d10a:	f000 fbeb 	bl	800d8e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d112:	e270      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d114:	2300      	movs	r3, #0
 800d116:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d118:	e26d      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d11a:	4b1d      	ldr	r3, [pc, #116]	@ (800d190 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d11c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d11e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d122:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d124:	4b1a      	ldr	r3, [pc, #104]	@ (800d190 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	f003 0304 	and.w	r3, r3, #4
 800d12c:	2b04      	cmp	r3, #4
 800d12e:	d10c      	bne.n	800d14a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800d130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d132:	2b00      	cmp	r3, #0
 800d134:	d109      	bne.n	800d14a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d136:	4b16      	ldr	r3, [pc, #88]	@ (800d190 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	08db      	lsrs	r3, r3, #3
 800d13c:	f003 0303 	and.w	r3, r3, #3
 800d140:	4a14      	ldr	r2, [pc, #80]	@ (800d194 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800d142:	fa22 f303 	lsr.w	r3, r2, r3
 800d146:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d148:	e01e      	b.n	800d188 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d14a:	4b11      	ldr	r3, [pc, #68]	@ (800d190 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d152:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d156:	d106      	bne.n	800d166 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800d158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d15a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d15e:	d102      	bne.n	800d166 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d160:	4b0d      	ldr	r3, [pc, #52]	@ (800d198 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800d162:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d164:	e010      	b.n	800d188 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d166:	4b0a      	ldr	r3, [pc, #40]	@ (800d190 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d16e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d172:	d106      	bne.n	800d182 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800d174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d176:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d17a:	d102      	bne.n	800d182 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d17c:	4b07      	ldr	r3, [pc, #28]	@ (800d19c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d17e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d180:	e002      	b.n	800d188 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d182:	2300      	movs	r3, #0
 800d184:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d186:	e236      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d188:	e235      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d18a:	4b05      	ldr	r3, [pc, #20]	@ (800d1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800d18c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d18e:	e232      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d190:	58024400 	.word	0x58024400
 800d194:	03d09000 	.word	0x03d09000
 800d198:	003d0900 	.word	0x003d0900
 800d19c:	007a1200 	.word	0x007a1200
 800d1a0:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1a8:	e225      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800d1aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d1ae:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800d1b2:	430b      	orrs	r3, r1
 800d1b4:	f040 8085 	bne.w	800d2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800d1b8:	4b9c      	ldr	r3, [pc, #624]	@ (800d42c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d1ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d1bc:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800d1c0:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800d1c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d1c8:	d06b      	beq.n	800d2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800d1ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d1d0:	d874      	bhi.n	800d2bc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d1d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d1d8:	d056      	beq.n	800d288 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800d1da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d1e0:	d86c      	bhi.n	800d2bc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d1e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1e4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d1e8:	d03b      	beq.n	800d262 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800d1ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d1f0:	d864      	bhi.n	800d2bc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d1f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d1f8:	d021      	beq.n	800d23e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800d1fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d200:	d85c      	bhi.n	800d2bc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d204:	2b00      	cmp	r3, #0
 800d206:	d004      	beq.n	800d212 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800d208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d20a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d20e:	d004      	beq.n	800d21a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800d210:	e054      	b.n	800d2bc <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800d212:	f7fe fb5f 	bl	800b8d4 <HAL_RCC_GetPCLK1Freq>
 800d216:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d218:	e1ed      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d21a:	4b84      	ldr	r3, [pc, #528]	@ (800d42c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d222:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d226:	d107      	bne.n	800d238 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d228:	f107 0318 	add.w	r3, r7, #24
 800d22c:	4618      	mov	r0, r3
 800d22e:	f000 fa05 	bl	800d63c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d232:	69fb      	ldr	r3, [r7, #28]
 800d234:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d236:	e1de      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d238:	2300      	movs	r3, #0
 800d23a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d23c:	e1db      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d23e:	4b7b      	ldr	r3, [pc, #492]	@ (800d42c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d246:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d24a:	d107      	bne.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d24c:	f107 030c 	add.w	r3, r7, #12
 800d250:	4618      	mov	r0, r3
 800d252:	f000 fb47 	bl	800d8e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d256:	693b      	ldr	r3, [r7, #16]
 800d258:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d25a:	e1cc      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d25c:	2300      	movs	r3, #0
 800d25e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d260:	e1c9      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d262:	4b72      	ldr	r3, [pc, #456]	@ (800d42c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	f003 0304 	and.w	r3, r3, #4
 800d26a:	2b04      	cmp	r3, #4
 800d26c:	d109      	bne.n	800d282 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d26e:	4b6f      	ldr	r3, [pc, #444]	@ (800d42c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	08db      	lsrs	r3, r3, #3
 800d274:	f003 0303 	and.w	r3, r3, #3
 800d278:	4a6d      	ldr	r2, [pc, #436]	@ (800d430 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800d27a:	fa22 f303 	lsr.w	r3, r2, r3
 800d27e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d280:	e1b9      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d282:	2300      	movs	r3, #0
 800d284:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d286:	e1b6      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d288:	4b68      	ldr	r3, [pc, #416]	@ (800d42c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d290:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d294:	d102      	bne.n	800d29c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800d296:	4b67      	ldr	r3, [pc, #412]	@ (800d434 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800d298:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d29a:	e1ac      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d29c:	2300      	movs	r3, #0
 800d29e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d2a0:	e1a9      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d2a2:	4b62      	ldr	r3, [pc, #392]	@ (800d42c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d2aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d2ae:	d102      	bne.n	800d2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800d2b0:	4b61      	ldr	r3, [pc, #388]	@ (800d438 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800d2b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d2b4:	e19f      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d2ba:	e19c      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d2bc:	2300      	movs	r3, #0
 800d2be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d2c0:	e199      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800d2c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d2c6:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800d2ca:	430b      	orrs	r3, r1
 800d2cc:	d173      	bne.n	800d3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800d2ce:	4b57      	ldr	r3, [pc, #348]	@ (800d42c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d2d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d2d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d2d6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d2d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d2de:	d02f      	beq.n	800d340 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800d2e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d2e6:	d863      	bhi.n	800d3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800d2e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d004      	beq.n	800d2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800d2ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d2f4:	d012      	beq.n	800d31c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800d2f6:	e05b      	b.n	800d3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d2f8:	4b4c      	ldr	r3, [pc, #304]	@ (800d42c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d300:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d304:	d107      	bne.n	800d316 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d306:	f107 0318 	add.w	r3, r7, #24
 800d30a:	4618      	mov	r0, r3
 800d30c:	f000 f996 	bl	800d63c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d310:	69bb      	ldr	r3, [r7, #24]
 800d312:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d314:	e16f      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d316:	2300      	movs	r3, #0
 800d318:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d31a:	e16c      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d31c:	4b43      	ldr	r3, [pc, #268]	@ (800d42c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d324:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d328:	d107      	bne.n	800d33a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d32a:	f107 030c 	add.w	r3, r7, #12
 800d32e:	4618      	mov	r0, r3
 800d330:	f000 fad8 	bl	800d8e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800d334:	697b      	ldr	r3, [r7, #20]
 800d336:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d338:	e15d      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d33a:	2300      	movs	r3, #0
 800d33c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d33e:	e15a      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d340:	4b3a      	ldr	r3, [pc, #232]	@ (800d42c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d344:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d348:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d34a:	4b38      	ldr	r3, [pc, #224]	@ (800d42c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	f003 0304 	and.w	r3, r3, #4
 800d352:	2b04      	cmp	r3, #4
 800d354:	d10c      	bne.n	800d370 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800d356:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d109      	bne.n	800d370 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d35c:	4b33      	ldr	r3, [pc, #204]	@ (800d42c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	08db      	lsrs	r3, r3, #3
 800d362:	f003 0303 	and.w	r3, r3, #3
 800d366:	4a32      	ldr	r2, [pc, #200]	@ (800d430 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800d368:	fa22 f303 	lsr.w	r3, r2, r3
 800d36c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d36e:	e01e      	b.n	800d3ae <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d370:	4b2e      	ldr	r3, [pc, #184]	@ (800d42c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d378:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d37c:	d106      	bne.n	800d38c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800d37e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d380:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d384:	d102      	bne.n	800d38c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d386:	4b2b      	ldr	r3, [pc, #172]	@ (800d434 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800d388:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d38a:	e010      	b.n	800d3ae <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d38c:	4b27      	ldr	r3, [pc, #156]	@ (800d42c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d394:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d398:	d106      	bne.n	800d3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800d39a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d39c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d3a0:	d102      	bne.n	800d3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d3a2:	4b25      	ldr	r3, [pc, #148]	@ (800d438 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800d3a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d3a6:	e002      	b.n	800d3ae <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d3ac:	e123      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d3ae:	e122      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d3b4:	e11f      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d3b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d3ba:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800d3be:	430b      	orrs	r3, r1
 800d3c0:	d13c      	bne.n	800d43c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800d3c2:	4b1a      	ldr	r3, [pc, #104]	@ (800d42c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d3c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d3c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d3ca:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d3cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d004      	beq.n	800d3dc <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800d3d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d3d8:	d012      	beq.n	800d400 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800d3da:	e023      	b.n	800d424 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d3dc:	4b13      	ldr	r3, [pc, #76]	@ (800d42c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d3e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d3e8:	d107      	bne.n	800d3fa <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d3ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	f000 fbcc 	bl	800db8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d3f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d3f8:	e0fd      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d3fe:	e0fa      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d400:	4b0a      	ldr	r3, [pc, #40]	@ (800d42c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d408:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d40c:	d107      	bne.n	800d41e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d40e:	f107 0318 	add.w	r3, r7, #24
 800d412:	4618      	mov	r0, r3
 800d414:	f000 f912 	bl	800d63c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d418:	6a3b      	ldr	r3, [r7, #32]
 800d41a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d41c:	e0eb      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d41e:	2300      	movs	r3, #0
 800d420:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d422:	e0e8      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d424:	2300      	movs	r3, #0
 800d426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d428:	e0e5      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d42a:	bf00      	nop
 800d42c:	58024400 	.word	0x58024400
 800d430:	03d09000 	.word	0x03d09000
 800d434:	003d0900 	.word	0x003d0900
 800d438:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800d43c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d440:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800d444:	430b      	orrs	r3, r1
 800d446:	f040 8085 	bne.w	800d554 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800d44a:	4b6d      	ldr	r3, [pc, #436]	@ (800d600 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d44c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d44e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800d452:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d456:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d45a:	d06b      	beq.n	800d534 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800d45c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d45e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d462:	d874      	bhi.n	800d54e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d466:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d46a:	d056      	beq.n	800d51a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800d46c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d46e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d472:	d86c      	bhi.n	800d54e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d476:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d47a:	d03b      	beq.n	800d4f4 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800d47c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d47e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d482:	d864      	bhi.n	800d54e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d486:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d48a:	d021      	beq.n	800d4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800d48c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d48e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d492:	d85c      	bhi.n	800d54e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d496:	2b00      	cmp	r3, #0
 800d498:	d004      	beq.n	800d4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800d49a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d49c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d4a0:	d004      	beq.n	800d4ac <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800d4a2:	e054      	b.n	800d54e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800d4a4:	f000 f8b4 	bl	800d610 <HAL_RCCEx_GetD3PCLK1Freq>
 800d4a8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d4aa:	e0a4      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d4ac:	4b54      	ldr	r3, [pc, #336]	@ (800d600 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d4b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d4b8:	d107      	bne.n	800d4ca <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d4ba:	f107 0318 	add.w	r3, r7, #24
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f000 f8bc 	bl	800d63c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d4c4:	69fb      	ldr	r3, [r7, #28]
 800d4c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d4c8:	e095      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d4ce:	e092      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d4d0:	4b4b      	ldr	r3, [pc, #300]	@ (800d600 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d4d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d4dc:	d107      	bne.n	800d4ee <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d4de:	f107 030c 	add.w	r3, r7, #12
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	f000 f9fe 	bl	800d8e4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d4e8:	693b      	ldr	r3, [r7, #16]
 800d4ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d4ec:	e083      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d4f2:	e080      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d4f4:	4b42      	ldr	r3, [pc, #264]	@ (800d600 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	f003 0304 	and.w	r3, r3, #4
 800d4fc:	2b04      	cmp	r3, #4
 800d4fe:	d109      	bne.n	800d514 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d500:	4b3f      	ldr	r3, [pc, #252]	@ (800d600 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	08db      	lsrs	r3, r3, #3
 800d506:	f003 0303 	and.w	r3, r3, #3
 800d50a:	4a3e      	ldr	r2, [pc, #248]	@ (800d604 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800d50c:	fa22 f303 	lsr.w	r3, r2, r3
 800d510:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d512:	e070      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d514:	2300      	movs	r3, #0
 800d516:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d518:	e06d      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d51a:	4b39      	ldr	r3, [pc, #228]	@ (800d600 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d522:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d526:	d102      	bne.n	800d52e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800d528:	4b37      	ldr	r3, [pc, #220]	@ (800d608 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d52a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d52c:	e063      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d52e:	2300      	movs	r3, #0
 800d530:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d532:	e060      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d534:	4b32      	ldr	r3, [pc, #200]	@ (800d600 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d53c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d540:	d102      	bne.n	800d548 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800d542:	4b32      	ldr	r3, [pc, #200]	@ (800d60c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d544:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d546:	e056      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d548:	2300      	movs	r3, #0
 800d54a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d54c:	e053      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800d54e:	2300      	movs	r3, #0
 800d550:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d552:	e050      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d554:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d558:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800d55c:	430b      	orrs	r3, r1
 800d55e:	d148      	bne.n	800d5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800d560:	4b27      	ldr	r3, [pc, #156]	@ (800d600 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d562:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d564:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d568:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d56a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d56c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d570:	d02a      	beq.n	800d5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800d572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d574:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d578:	d838      	bhi.n	800d5ec <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800d57a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d004      	beq.n	800d58a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800d580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d582:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d586:	d00d      	beq.n	800d5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800d588:	e030      	b.n	800d5ec <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d58a:	4b1d      	ldr	r3, [pc, #116]	@ (800d600 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d592:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d596:	d102      	bne.n	800d59e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800d598:	4b1c      	ldr	r3, [pc, #112]	@ (800d60c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d59a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d59c:	e02b      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d59e:	2300      	movs	r3, #0
 800d5a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d5a2:	e028      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d5a4:	4b16      	ldr	r3, [pc, #88]	@ (800d600 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d5ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d5b0:	d107      	bne.n	800d5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d5b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f000 fae8 	bl	800db8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d5bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d5c0:	e019      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d5c6:	e016      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d5c8:	4b0d      	ldr	r3, [pc, #52]	@ (800d600 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d5d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d5d4:	d107      	bne.n	800d5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d5d6:	f107 0318 	add.w	r3, r7, #24
 800d5da:	4618      	mov	r0, r3
 800d5dc:	f000 f82e 	bl	800d63c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d5e0:	69fb      	ldr	r3, [r7, #28]
 800d5e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d5e4:	e007      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d5ea:	e004      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d5f0:	e001      	b.n	800d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800d5f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	3740      	adds	r7, #64	@ 0x40
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	bd80      	pop	{r7, pc}
 800d600:	58024400 	.word	0x58024400
 800d604:	03d09000 	.word	0x03d09000
 800d608:	003d0900 	.word	0x003d0900
 800d60c:	007a1200 	.word	0x007a1200

0800d610 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d610:	b580      	push	{r7, lr}
 800d612:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d614:	f7fe f92e 	bl	800b874 <HAL_RCC_GetHCLKFreq>
 800d618:	4602      	mov	r2, r0
 800d61a:	4b06      	ldr	r3, [pc, #24]	@ (800d634 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d61c:	6a1b      	ldr	r3, [r3, #32]
 800d61e:	091b      	lsrs	r3, r3, #4
 800d620:	f003 0307 	and.w	r3, r3, #7
 800d624:	4904      	ldr	r1, [pc, #16]	@ (800d638 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d626:	5ccb      	ldrb	r3, [r1, r3]
 800d628:	f003 031f 	and.w	r3, r3, #31
 800d62c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d630:	4618      	mov	r0, r3
 800d632:	bd80      	pop	{r7, pc}
 800d634:	58024400 	.word	0x58024400
 800d638:	080149b0 	.word	0x080149b0

0800d63c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d63c:	b480      	push	{r7}
 800d63e:	b089      	sub	sp, #36	@ 0x24
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d644:	4ba1      	ldr	r3, [pc, #644]	@ (800d8cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d648:	f003 0303 	and.w	r3, r3, #3
 800d64c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d64e:	4b9f      	ldr	r3, [pc, #636]	@ (800d8cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d652:	0b1b      	lsrs	r3, r3, #12
 800d654:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d658:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d65a:	4b9c      	ldr	r3, [pc, #624]	@ (800d8cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d65c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d65e:	091b      	lsrs	r3, r3, #4
 800d660:	f003 0301 	and.w	r3, r3, #1
 800d664:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d666:	4b99      	ldr	r3, [pc, #612]	@ (800d8cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d66a:	08db      	lsrs	r3, r3, #3
 800d66c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d670:	693a      	ldr	r2, [r7, #16]
 800d672:	fb02 f303 	mul.w	r3, r2, r3
 800d676:	ee07 3a90 	vmov	s15, r3
 800d67a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d67e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	2b00      	cmp	r3, #0
 800d686:	f000 8111 	beq.w	800d8ac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d68a:	69bb      	ldr	r3, [r7, #24]
 800d68c:	2b02      	cmp	r3, #2
 800d68e:	f000 8083 	beq.w	800d798 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d692:	69bb      	ldr	r3, [r7, #24]
 800d694:	2b02      	cmp	r3, #2
 800d696:	f200 80a1 	bhi.w	800d7dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d69a:	69bb      	ldr	r3, [r7, #24]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d003      	beq.n	800d6a8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d6a0:	69bb      	ldr	r3, [r7, #24]
 800d6a2:	2b01      	cmp	r3, #1
 800d6a4:	d056      	beq.n	800d754 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d6a6:	e099      	b.n	800d7dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d6a8:	4b88      	ldr	r3, [pc, #544]	@ (800d8cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	f003 0320 	and.w	r3, r3, #32
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d02d      	beq.n	800d710 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d6b4:	4b85      	ldr	r3, [pc, #532]	@ (800d8cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	08db      	lsrs	r3, r3, #3
 800d6ba:	f003 0303 	and.w	r3, r3, #3
 800d6be:	4a84      	ldr	r2, [pc, #528]	@ (800d8d0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d6c0:	fa22 f303 	lsr.w	r3, r2, r3
 800d6c4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d6c6:	68bb      	ldr	r3, [r7, #8]
 800d6c8:	ee07 3a90 	vmov	s15, r3
 800d6cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6d0:	697b      	ldr	r3, [r7, #20]
 800d6d2:	ee07 3a90 	vmov	s15, r3
 800d6d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6de:	4b7b      	ldr	r3, [pc, #492]	@ (800d8cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d6e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6e6:	ee07 3a90 	vmov	s15, r3
 800d6ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6f2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800d8d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d6f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d70a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d70e:	e087      	b.n	800d820 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d710:	697b      	ldr	r3, [r7, #20]
 800d712:	ee07 3a90 	vmov	s15, r3
 800d716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d71a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800d8d8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d71e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d722:	4b6a      	ldr	r3, [pc, #424]	@ (800d8cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d72a:	ee07 3a90 	vmov	s15, r3
 800d72e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d732:	ed97 6a03 	vldr	s12, [r7, #12]
 800d736:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800d8d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d73a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d73e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d742:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d74a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d74e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d752:	e065      	b.n	800d820 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d754:	697b      	ldr	r3, [r7, #20]
 800d756:	ee07 3a90 	vmov	s15, r3
 800d75a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d75e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800d8dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d766:	4b59      	ldr	r3, [pc, #356]	@ (800d8cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d76a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d76e:	ee07 3a90 	vmov	s15, r3
 800d772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d776:	ed97 6a03 	vldr	s12, [r7, #12]
 800d77a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800d8d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d77e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d786:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d78a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d78e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d792:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d796:	e043      	b.n	800d820 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d798:	697b      	ldr	r3, [r7, #20]
 800d79a:	ee07 3a90 	vmov	s15, r3
 800d79e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7a2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800d8e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d7a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d7aa:	4b48      	ldr	r3, [pc, #288]	@ (800d8cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d7ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7b2:	ee07 3a90 	vmov	s15, r3
 800d7b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d7ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800d7be:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800d8d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d7c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d7c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d7ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d7ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d7da:	e021      	b.n	800d820 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	ee07 3a90 	vmov	s15, r3
 800d7e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7e6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800d8dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d7ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d7ee:	4b37      	ldr	r3, [pc, #220]	@ (800d8cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d7f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7f6:	ee07 3a90 	vmov	s15, r3
 800d7fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d7fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800d802:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800d8d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d806:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d80a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d80e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d812:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d81a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d81e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d820:	4b2a      	ldr	r3, [pc, #168]	@ (800d8cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d824:	0a5b      	lsrs	r3, r3, #9
 800d826:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d82a:	ee07 3a90 	vmov	s15, r3
 800d82e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d832:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d836:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d83a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d83e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d842:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d846:	ee17 2a90 	vmov	r2, s15
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d84e:	4b1f      	ldr	r3, [pc, #124]	@ (800d8cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d852:	0c1b      	lsrs	r3, r3, #16
 800d854:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d858:	ee07 3a90 	vmov	s15, r3
 800d85c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d860:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d864:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d868:	edd7 6a07 	vldr	s13, [r7, #28]
 800d86c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d870:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d874:	ee17 2a90 	vmov	r2, s15
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d87c:	4b13      	ldr	r3, [pc, #76]	@ (800d8cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d87e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d880:	0e1b      	lsrs	r3, r3, #24
 800d882:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d886:	ee07 3a90 	vmov	s15, r3
 800d88a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d88e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d892:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d896:	edd7 6a07 	vldr	s13, [r7, #28]
 800d89a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d89e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d8a2:	ee17 2a90 	vmov	r2, s15
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d8aa:	e008      	b.n	800d8be <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	609a      	str	r2, [r3, #8]
}
 800d8be:	bf00      	nop
 800d8c0:	3724      	adds	r7, #36	@ 0x24
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c8:	4770      	bx	lr
 800d8ca:	bf00      	nop
 800d8cc:	58024400 	.word	0x58024400
 800d8d0:	03d09000 	.word	0x03d09000
 800d8d4:	46000000 	.word	0x46000000
 800d8d8:	4c742400 	.word	0x4c742400
 800d8dc:	4a742400 	.word	0x4a742400
 800d8e0:	4af42400 	.word	0x4af42400

0800d8e4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d8e4:	b480      	push	{r7}
 800d8e6:	b089      	sub	sp, #36	@ 0x24
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d8ec:	4ba1      	ldr	r3, [pc, #644]	@ (800db74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d8ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8f0:	f003 0303 	and.w	r3, r3, #3
 800d8f4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d8f6:	4b9f      	ldr	r3, [pc, #636]	@ (800db74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d8f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8fa:	0d1b      	lsrs	r3, r3, #20
 800d8fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d900:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d902:	4b9c      	ldr	r3, [pc, #624]	@ (800db74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d906:	0a1b      	lsrs	r3, r3, #8
 800d908:	f003 0301 	and.w	r3, r3, #1
 800d90c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d90e:	4b99      	ldr	r3, [pc, #612]	@ (800db74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d912:	08db      	lsrs	r3, r3, #3
 800d914:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d918:	693a      	ldr	r2, [r7, #16]
 800d91a:	fb02 f303 	mul.w	r3, r2, r3
 800d91e:	ee07 3a90 	vmov	s15, r3
 800d922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d926:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d92a:	697b      	ldr	r3, [r7, #20]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	f000 8111 	beq.w	800db54 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d932:	69bb      	ldr	r3, [r7, #24]
 800d934:	2b02      	cmp	r3, #2
 800d936:	f000 8083 	beq.w	800da40 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d93a:	69bb      	ldr	r3, [r7, #24]
 800d93c:	2b02      	cmp	r3, #2
 800d93e:	f200 80a1 	bhi.w	800da84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d942:	69bb      	ldr	r3, [r7, #24]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d003      	beq.n	800d950 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d948:	69bb      	ldr	r3, [r7, #24]
 800d94a:	2b01      	cmp	r3, #1
 800d94c:	d056      	beq.n	800d9fc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d94e:	e099      	b.n	800da84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d950:	4b88      	ldr	r3, [pc, #544]	@ (800db74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	f003 0320 	and.w	r3, r3, #32
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d02d      	beq.n	800d9b8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d95c:	4b85      	ldr	r3, [pc, #532]	@ (800db74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	08db      	lsrs	r3, r3, #3
 800d962:	f003 0303 	and.w	r3, r3, #3
 800d966:	4a84      	ldr	r2, [pc, #528]	@ (800db78 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d968:	fa22 f303 	lsr.w	r3, r2, r3
 800d96c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d96e:	68bb      	ldr	r3, [r7, #8]
 800d970:	ee07 3a90 	vmov	s15, r3
 800d974:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d978:	697b      	ldr	r3, [r7, #20]
 800d97a:	ee07 3a90 	vmov	s15, r3
 800d97e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d986:	4b7b      	ldr	r3, [pc, #492]	@ (800db74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d98a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d98e:	ee07 3a90 	vmov	s15, r3
 800d992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d996:	ed97 6a03 	vldr	s12, [r7, #12]
 800d99a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800db7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d99e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d9aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d9b6:	e087      	b.n	800dac8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d9b8:	697b      	ldr	r3, [r7, #20]
 800d9ba:	ee07 3a90 	vmov	s15, r3
 800d9be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9c2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800db80 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d9c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9ca:	4b6a      	ldr	r3, [pc, #424]	@ (800db74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d9cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9d2:	ee07 3a90 	vmov	s15, r3
 800d9d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9da:	ed97 6a03 	vldr	s12, [r7, #12]
 800d9de:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800db7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d9e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d9ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d9fa:	e065      	b.n	800dac8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d9fc:	697b      	ldr	r3, [r7, #20]
 800d9fe:	ee07 3a90 	vmov	s15, r3
 800da02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da06:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800db84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800da0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da0e:	4b59      	ldr	r3, [pc, #356]	@ (800db74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800da10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da16:	ee07 3a90 	vmov	s15, r3
 800da1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800da22:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800db7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800da26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800da32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da3e:	e043      	b.n	800dac8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800da40:	697b      	ldr	r3, [r7, #20]
 800da42:	ee07 3a90 	vmov	s15, r3
 800da46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da4a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800db88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800da4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da52:	4b48      	ldr	r3, [pc, #288]	@ (800db74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800da54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da5a:	ee07 3a90 	vmov	s15, r3
 800da5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da62:	ed97 6a03 	vldr	s12, [r7, #12]
 800da66:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800db7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800da6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800da76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da82:	e021      	b.n	800dac8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800da84:	697b      	ldr	r3, [r7, #20]
 800da86:	ee07 3a90 	vmov	s15, r3
 800da8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da8e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800db84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800da92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da96:	4b37      	ldr	r3, [pc, #220]	@ (800db74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800da98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da9e:	ee07 3a90 	vmov	s15, r3
 800daa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800daa6:	ed97 6a03 	vldr	s12, [r7, #12]
 800daaa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800db7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800daae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dab6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800daba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dabe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dac2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dac6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800dac8:	4b2a      	ldr	r3, [pc, #168]	@ (800db74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800daca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dacc:	0a5b      	lsrs	r3, r3, #9
 800dace:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dad2:	ee07 3a90 	vmov	s15, r3
 800dad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dada:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dade:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dae2:	edd7 6a07 	vldr	s13, [r7, #28]
 800dae6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800daea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800daee:	ee17 2a90 	vmov	r2, s15
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800daf6:	4b1f      	ldr	r3, [pc, #124]	@ (800db74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800daf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dafa:	0c1b      	lsrs	r3, r3, #16
 800dafc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800db00:	ee07 3a90 	vmov	s15, r3
 800db04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db08:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800db0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800db10:	edd7 6a07 	vldr	s13, [r7, #28]
 800db14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db1c:	ee17 2a90 	vmov	r2, s15
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800db24:	4b13      	ldr	r3, [pc, #76]	@ (800db74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800db26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db28:	0e1b      	lsrs	r3, r3, #24
 800db2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800db2e:	ee07 3a90 	vmov	s15, r3
 800db32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800db3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800db3e:	edd7 6a07 	vldr	s13, [r7, #28]
 800db42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db4a:	ee17 2a90 	vmov	r2, s15
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800db52:	e008      	b.n	800db66 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2200      	movs	r2, #0
 800db58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	2200      	movs	r2, #0
 800db5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2200      	movs	r2, #0
 800db64:	609a      	str	r2, [r3, #8]
}
 800db66:	bf00      	nop
 800db68:	3724      	adds	r7, #36	@ 0x24
 800db6a:	46bd      	mov	sp, r7
 800db6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db70:	4770      	bx	lr
 800db72:	bf00      	nop
 800db74:	58024400 	.word	0x58024400
 800db78:	03d09000 	.word	0x03d09000
 800db7c:	46000000 	.word	0x46000000
 800db80:	4c742400 	.word	0x4c742400
 800db84:	4a742400 	.word	0x4a742400
 800db88:	4af42400 	.word	0x4af42400

0800db8c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800db8c:	b480      	push	{r7}
 800db8e:	b089      	sub	sp, #36	@ 0x24
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800db94:	4ba0      	ldr	r3, [pc, #640]	@ (800de18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db98:	f003 0303 	and.w	r3, r3, #3
 800db9c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800db9e:	4b9e      	ldr	r3, [pc, #632]	@ (800de18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dba2:	091b      	lsrs	r3, r3, #4
 800dba4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800dba8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800dbaa:	4b9b      	ldr	r3, [pc, #620]	@ (800de18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dbac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbae:	f003 0301 	and.w	r3, r3, #1
 800dbb2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800dbb4:	4b98      	ldr	r3, [pc, #608]	@ (800de18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dbb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbb8:	08db      	lsrs	r3, r3, #3
 800dbba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dbbe:	693a      	ldr	r2, [r7, #16]
 800dbc0:	fb02 f303 	mul.w	r3, r2, r3
 800dbc4:	ee07 3a90 	vmov	s15, r3
 800dbc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbcc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800dbd0:	697b      	ldr	r3, [r7, #20]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	f000 8111 	beq.w	800ddfa <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800dbd8:	69bb      	ldr	r3, [r7, #24]
 800dbda:	2b02      	cmp	r3, #2
 800dbdc:	f000 8083 	beq.w	800dce6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800dbe0:	69bb      	ldr	r3, [r7, #24]
 800dbe2:	2b02      	cmp	r3, #2
 800dbe4:	f200 80a1 	bhi.w	800dd2a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800dbe8:	69bb      	ldr	r3, [r7, #24]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d003      	beq.n	800dbf6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800dbee:	69bb      	ldr	r3, [r7, #24]
 800dbf0:	2b01      	cmp	r3, #1
 800dbf2:	d056      	beq.n	800dca2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800dbf4:	e099      	b.n	800dd2a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dbf6:	4b88      	ldr	r3, [pc, #544]	@ (800de18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	f003 0320 	and.w	r3, r3, #32
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d02d      	beq.n	800dc5e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dc02:	4b85      	ldr	r3, [pc, #532]	@ (800de18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	08db      	lsrs	r3, r3, #3
 800dc08:	f003 0303 	and.w	r3, r3, #3
 800dc0c:	4a83      	ldr	r2, [pc, #524]	@ (800de1c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800dc0e:	fa22 f303 	lsr.w	r3, r2, r3
 800dc12:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	ee07 3a90 	vmov	s15, r3
 800dc1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc1e:	697b      	ldr	r3, [r7, #20]
 800dc20:	ee07 3a90 	vmov	s15, r3
 800dc24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc2c:	4b7a      	ldr	r3, [pc, #488]	@ (800de18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dc2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc34:	ee07 3a90 	vmov	s15, r3
 800dc38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc3c:	ed97 6a03 	vldr	s12, [r7, #12]
 800dc40:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800de20 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dc44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc4c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dc50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc54:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc58:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800dc5c:	e087      	b.n	800dd6e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	ee07 3a90 	vmov	s15, r3
 800dc64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc68:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800de24 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800dc6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc70:	4b69      	ldr	r3, [pc, #420]	@ (800de18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dc72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc78:	ee07 3a90 	vmov	s15, r3
 800dc7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc80:	ed97 6a03 	vldr	s12, [r7, #12]
 800dc84:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800de20 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dc88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc90:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dc94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc98:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc9c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dca0:	e065      	b.n	800dd6e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dca2:	697b      	ldr	r3, [r7, #20]
 800dca4:	ee07 3a90 	vmov	s15, r3
 800dca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcac:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800de28 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800dcb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dcb4:	4b58      	ldr	r3, [pc, #352]	@ (800de18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dcb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dcb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcbc:	ee07 3a90 	vmov	s15, r3
 800dcc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dcc4:	ed97 6a03 	vldr	s12, [r7, #12]
 800dcc8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800de20 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dccc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dcd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dcd4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dcd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dcdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dce0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dce4:	e043      	b.n	800dd6e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dce6:	697b      	ldr	r3, [r7, #20]
 800dce8:	ee07 3a90 	vmov	s15, r3
 800dcec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcf0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800de2c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800dcf4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dcf8:	4b47      	ldr	r3, [pc, #284]	@ (800de18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dcfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dcfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd00:	ee07 3a90 	vmov	s15, r3
 800dd04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd08:	ed97 6a03 	vldr	s12, [r7, #12]
 800dd0c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800de20 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dd10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dd14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dd18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dd1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd20:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd24:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dd28:	e021      	b.n	800dd6e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	ee07 3a90 	vmov	s15, r3
 800dd30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd34:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800de24 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800dd38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dd3c:	4b36      	ldr	r3, [pc, #216]	@ (800de18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dd3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd44:	ee07 3a90 	vmov	s15, r3
 800dd48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd4c:	ed97 6a03 	vldr	s12, [r7, #12]
 800dd50:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800de20 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dd54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dd58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dd5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dd60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd68:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dd6c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800dd6e:	4b2a      	ldr	r3, [pc, #168]	@ (800de18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dd70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd72:	0a5b      	lsrs	r3, r3, #9
 800dd74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dd78:	ee07 3a90 	vmov	s15, r3
 800dd7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dd84:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dd88:	edd7 6a07 	vldr	s13, [r7, #28]
 800dd8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dd90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dd94:	ee17 2a90 	vmov	r2, s15
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800dd9c:	4b1e      	ldr	r3, [pc, #120]	@ (800de18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dd9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dda0:	0c1b      	lsrs	r3, r3, #16
 800dda2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dda6:	ee07 3a90 	vmov	s15, r3
 800ddaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ddae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ddb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ddb6:	edd7 6a07 	vldr	s13, [r7, #28]
 800ddba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ddbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ddc2:	ee17 2a90 	vmov	r2, s15
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ddca:	4b13      	ldr	r3, [pc, #76]	@ (800de18 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ddcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddce:	0e1b      	lsrs	r3, r3, #24
 800ddd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ddd4:	ee07 3a90 	vmov	s15, r3
 800ddd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dddc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dde0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dde4:	edd7 6a07 	vldr	s13, [r7, #28]
 800dde8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ddec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ddf0:	ee17 2a90 	vmov	r2, s15
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ddf8:	e008      	b.n	800de0c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	2200      	movs	r2, #0
 800de04:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	2200      	movs	r2, #0
 800de0a:	609a      	str	r2, [r3, #8]
}
 800de0c:	bf00      	nop
 800de0e:	3724      	adds	r7, #36	@ 0x24
 800de10:	46bd      	mov	sp, r7
 800de12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de16:	4770      	bx	lr
 800de18:	58024400 	.word	0x58024400
 800de1c:	03d09000 	.word	0x03d09000
 800de20:	46000000 	.word	0x46000000
 800de24:	4c742400 	.word	0x4c742400
 800de28:	4a742400 	.word	0x4a742400
 800de2c:	4af42400 	.word	0x4af42400

0800de30 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b084      	sub	sp, #16
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
 800de38:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800de3a:	2300      	movs	r3, #0
 800de3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800de3e:	4b53      	ldr	r3, [pc, #332]	@ (800df8c <RCCEx_PLL2_Config+0x15c>)
 800de40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de42:	f003 0303 	and.w	r3, r3, #3
 800de46:	2b03      	cmp	r3, #3
 800de48:	d101      	bne.n	800de4e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800de4a:	2301      	movs	r3, #1
 800de4c:	e099      	b.n	800df82 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800de4e:	4b4f      	ldr	r3, [pc, #316]	@ (800df8c <RCCEx_PLL2_Config+0x15c>)
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	4a4e      	ldr	r2, [pc, #312]	@ (800df8c <RCCEx_PLL2_Config+0x15c>)
 800de54:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800de58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800de5a:	f7f6 fb51 	bl	8004500 <HAL_GetTick>
 800de5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800de60:	e008      	b.n	800de74 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800de62:	f7f6 fb4d 	bl	8004500 <HAL_GetTick>
 800de66:	4602      	mov	r2, r0
 800de68:	68bb      	ldr	r3, [r7, #8]
 800de6a:	1ad3      	subs	r3, r2, r3
 800de6c:	2b02      	cmp	r3, #2
 800de6e:	d901      	bls.n	800de74 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800de70:	2303      	movs	r3, #3
 800de72:	e086      	b.n	800df82 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800de74:	4b45      	ldr	r3, [pc, #276]	@ (800df8c <RCCEx_PLL2_Config+0x15c>)
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d1f0      	bne.n	800de62 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800de80:	4b42      	ldr	r3, [pc, #264]	@ (800df8c <RCCEx_PLL2_Config+0x15c>)
 800de82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de84:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	031b      	lsls	r3, r3, #12
 800de8e:	493f      	ldr	r1, [pc, #252]	@ (800df8c <RCCEx_PLL2_Config+0x15c>)
 800de90:	4313      	orrs	r3, r2
 800de92:	628b      	str	r3, [r1, #40]	@ 0x28
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	685b      	ldr	r3, [r3, #4]
 800de98:	3b01      	subs	r3, #1
 800de9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	689b      	ldr	r3, [r3, #8]
 800dea2:	3b01      	subs	r3, #1
 800dea4:	025b      	lsls	r3, r3, #9
 800dea6:	b29b      	uxth	r3, r3
 800dea8:	431a      	orrs	r2, r3
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	68db      	ldr	r3, [r3, #12]
 800deae:	3b01      	subs	r3, #1
 800deb0:	041b      	lsls	r3, r3, #16
 800deb2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800deb6:	431a      	orrs	r2, r3
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	691b      	ldr	r3, [r3, #16]
 800debc:	3b01      	subs	r3, #1
 800debe:	061b      	lsls	r3, r3, #24
 800dec0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800dec4:	4931      	ldr	r1, [pc, #196]	@ (800df8c <RCCEx_PLL2_Config+0x15c>)
 800dec6:	4313      	orrs	r3, r2
 800dec8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800deca:	4b30      	ldr	r3, [pc, #192]	@ (800df8c <RCCEx_PLL2_Config+0x15c>)
 800decc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dece:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	695b      	ldr	r3, [r3, #20]
 800ded6:	492d      	ldr	r1, [pc, #180]	@ (800df8c <RCCEx_PLL2_Config+0x15c>)
 800ded8:	4313      	orrs	r3, r2
 800deda:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800dedc:	4b2b      	ldr	r3, [pc, #172]	@ (800df8c <RCCEx_PLL2_Config+0x15c>)
 800dede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dee0:	f023 0220 	bic.w	r2, r3, #32
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	699b      	ldr	r3, [r3, #24]
 800dee8:	4928      	ldr	r1, [pc, #160]	@ (800df8c <RCCEx_PLL2_Config+0x15c>)
 800deea:	4313      	orrs	r3, r2
 800deec:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800deee:	4b27      	ldr	r3, [pc, #156]	@ (800df8c <RCCEx_PLL2_Config+0x15c>)
 800def0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800def2:	4a26      	ldr	r2, [pc, #152]	@ (800df8c <RCCEx_PLL2_Config+0x15c>)
 800def4:	f023 0310 	bic.w	r3, r3, #16
 800def8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800defa:	4b24      	ldr	r3, [pc, #144]	@ (800df8c <RCCEx_PLL2_Config+0x15c>)
 800defc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800defe:	4b24      	ldr	r3, [pc, #144]	@ (800df90 <RCCEx_PLL2_Config+0x160>)
 800df00:	4013      	ands	r3, r2
 800df02:	687a      	ldr	r2, [r7, #4]
 800df04:	69d2      	ldr	r2, [r2, #28]
 800df06:	00d2      	lsls	r2, r2, #3
 800df08:	4920      	ldr	r1, [pc, #128]	@ (800df8c <RCCEx_PLL2_Config+0x15c>)
 800df0a:	4313      	orrs	r3, r2
 800df0c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800df0e:	4b1f      	ldr	r3, [pc, #124]	@ (800df8c <RCCEx_PLL2_Config+0x15c>)
 800df10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df12:	4a1e      	ldr	r2, [pc, #120]	@ (800df8c <RCCEx_PLL2_Config+0x15c>)
 800df14:	f043 0310 	orr.w	r3, r3, #16
 800df18:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800df1a:	683b      	ldr	r3, [r7, #0]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d106      	bne.n	800df2e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800df20:	4b1a      	ldr	r3, [pc, #104]	@ (800df8c <RCCEx_PLL2_Config+0x15c>)
 800df22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df24:	4a19      	ldr	r2, [pc, #100]	@ (800df8c <RCCEx_PLL2_Config+0x15c>)
 800df26:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800df2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800df2c:	e00f      	b.n	800df4e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	2b01      	cmp	r3, #1
 800df32:	d106      	bne.n	800df42 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800df34:	4b15      	ldr	r3, [pc, #84]	@ (800df8c <RCCEx_PLL2_Config+0x15c>)
 800df36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df38:	4a14      	ldr	r2, [pc, #80]	@ (800df8c <RCCEx_PLL2_Config+0x15c>)
 800df3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800df3e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800df40:	e005      	b.n	800df4e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800df42:	4b12      	ldr	r3, [pc, #72]	@ (800df8c <RCCEx_PLL2_Config+0x15c>)
 800df44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df46:	4a11      	ldr	r2, [pc, #68]	@ (800df8c <RCCEx_PLL2_Config+0x15c>)
 800df48:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800df4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800df4e:	4b0f      	ldr	r3, [pc, #60]	@ (800df8c <RCCEx_PLL2_Config+0x15c>)
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	4a0e      	ldr	r2, [pc, #56]	@ (800df8c <RCCEx_PLL2_Config+0x15c>)
 800df54:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800df58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800df5a:	f7f6 fad1 	bl	8004500 <HAL_GetTick>
 800df5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800df60:	e008      	b.n	800df74 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800df62:	f7f6 facd 	bl	8004500 <HAL_GetTick>
 800df66:	4602      	mov	r2, r0
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	1ad3      	subs	r3, r2, r3
 800df6c:	2b02      	cmp	r3, #2
 800df6e:	d901      	bls.n	800df74 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800df70:	2303      	movs	r3, #3
 800df72:	e006      	b.n	800df82 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800df74:	4b05      	ldr	r3, [pc, #20]	@ (800df8c <RCCEx_PLL2_Config+0x15c>)
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d0f0      	beq.n	800df62 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800df80:	7bfb      	ldrb	r3, [r7, #15]
}
 800df82:	4618      	mov	r0, r3
 800df84:	3710      	adds	r7, #16
 800df86:	46bd      	mov	sp, r7
 800df88:	bd80      	pop	{r7, pc}
 800df8a:	bf00      	nop
 800df8c:	58024400 	.word	0x58024400
 800df90:	ffff0007 	.word	0xffff0007

0800df94 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b084      	sub	sp, #16
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
 800df9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800df9e:	2300      	movs	r3, #0
 800dfa0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dfa2:	4b53      	ldr	r3, [pc, #332]	@ (800e0f0 <RCCEx_PLL3_Config+0x15c>)
 800dfa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfa6:	f003 0303 	and.w	r3, r3, #3
 800dfaa:	2b03      	cmp	r3, #3
 800dfac:	d101      	bne.n	800dfb2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800dfae:	2301      	movs	r3, #1
 800dfb0:	e099      	b.n	800e0e6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800dfb2:	4b4f      	ldr	r3, [pc, #316]	@ (800e0f0 <RCCEx_PLL3_Config+0x15c>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	4a4e      	ldr	r2, [pc, #312]	@ (800e0f0 <RCCEx_PLL3_Config+0x15c>)
 800dfb8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dfbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dfbe:	f7f6 fa9f 	bl	8004500 <HAL_GetTick>
 800dfc2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dfc4:	e008      	b.n	800dfd8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dfc6:	f7f6 fa9b 	bl	8004500 <HAL_GetTick>
 800dfca:	4602      	mov	r2, r0
 800dfcc:	68bb      	ldr	r3, [r7, #8]
 800dfce:	1ad3      	subs	r3, r2, r3
 800dfd0:	2b02      	cmp	r3, #2
 800dfd2:	d901      	bls.n	800dfd8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800dfd4:	2303      	movs	r3, #3
 800dfd6:	e086      	b.n	800e0e6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dfd8:	4b45      	ldr	r3, [pc, #276]	@ (800e0f0 <RCCEx_PLL3_Config+0x15c>)
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d1f0      	bne.n	800dfc6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800dfe4:	4b42      	ldr	r3, [pc, #264]	@ (800e0f0 <RCCEx_PLL3_Config+0x15c>)
 800dfe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfe8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	051b      	lsls	r3, r3, #20
 800dff2:	493f      	ldr	r1, [pc, #252]	@ (800e0f0 <RCCEx_PLL3_Config+0x15c>)
 800dff4:	4313      	orrs	r3, r2
 800dff6:	628b      	str	r3, [r1, #40]	@ 0x28
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	685b      	ldr	r3, [r3, #4]
 800dffc:	3b01      	subs	r3, #1
 800dffe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	689b      	ldr	r3, [r3, #8]
 800e006:	3b01      	subs	r3, #1
 800e008:	025b      	lsls	r3, r3, #9
 800e00a:	b29b      	uxth	r3, r3
 800e00c:	431a      	orrs	r2, r3
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	68db      	ldr	r3, [r3, #12]
 800e012:	3b01      	subs	r3, #1
 800e014:	041b      	lsls	r3, r3, #16
 800e016:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800e01a:	431a      	orrs	r2, r3
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	691b      	ldr	r3, [r3, #16]
 800e020:	3b01      	subs	r3, #1
 800e022:	061b      	lsls	r3, r3, #24
 800e024:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800e028:	4931      	ldr	r1, [pc, #196]	@ (800e0f0 <RCCEx_PLL3_Config+0x15c>)
 800e02a:	4313      	orrs	r3, r2
 800e02c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800e02e:	4b30      	ldr	r3, [pc, #192]	@ (800e0f0 <RCCEx_PLL3_Config+0x15c>)
 800e030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e032:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	695b      	ldr	r3, [r3, #20]
 800e03a:	492d      	ldr	r1, [pc, #180]	@ (800e0f0 <RCCEx_PLL3_Config+0x15c>)
 800e03c:	4313      	orrs	r3, r2
 800e03e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800e040:	4b2b      	ldr	r3, [pc, #172]	@ (800e0f0 <RCCEx_PLL3_Config+0x15c>)
 800e042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e044:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	699b      	ldr	r3, [r3, #24]
 800e04c:	4928      	ldr	r1, [pc, #160]	@ (800e0f0 <RCCEx_PLL3_Config+0x15c>)
 800e04e:	4313      	orrs	r3, r2
 800e050:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800e052:	4b27      	ldr	r3, [pc, #156]	@ (800e0f0 <RCCEx_PLL3_Config+0x15c>)
 800e054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e056:	4a26      	ldr	r2, [pc, #152]	@ (800e0f0 <RCCEx_PLL3_Config+0x15c>)
 800e058:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e05c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800e05e:	4b24      	ldr	r3, [pc, #144]	@ (800e0f0 <RCCEx_PLL3_Config+0x15c>)
 800e060:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e062:	4b24      	ldr	r3, [pc, #144]	@ (800e0f4 <RCCEx_PLL3_Config+0x160>)
 800e064:	4013      	ands	r3, r2
 800e066:	687a      	ldr	r2, [r7, #4]
 800e068:	69d2      	ldr	r2, [r2, #28]
 800e06a:	00d2      	lsls	r2, r2, #3
 800e06c:	4920      	ldr	r1, [pc, #128]	@ (800e0f0 <RCCEx_PLL3_Config+0x15c>)
 800e06e:	4313      	orrs	r3, r2
 800e070:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800e072:	4b1f      	ldr	r3, [pc, #124]	@ (800e0f0 <RCCEx_PLL3_Config+0x15c>)
 800e074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e076:	4a1e      	ldr	r2, [pc, #120]	@ (800e0f0 <RCCEx_PLL3_Config+0x15c>)
 800e078:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e07c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e07e:	683b      	ldr	r3, [r7, #0]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d106      	bne.n	800e092 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800e084:	4b1a      	ldr	r3, [pc, #104]	@ (800e0f0 <RCCEx_PLL3_Config+0x15c>)
 800e086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e088:	4a19      	ldr	r2, [pc, #100]	@ (800e0f0 <RCCEx_PLL3_Config+0x15c>)
 800e08a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800e08e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e090:	e00f      	b.n	800e0b2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e092:	683b      	ldr	r3, [r7, #0]
 800e094:	2b01      	cmp	r3, #1
 800e096:	d106      	bne.n	800e0a6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800e098:	4b15      	ldr	r3, [pc, #84]	@ (800e0f0 <RCCEx_PLL3_Config+0x15c>)
 800e09a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e09c:	4a14      	ldr	r2, [pc, #80]	@ (800e0f0 <RCCEx_PLL3_Config+0x15c>)
 800e09e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800e0a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e0a4:	e005      	b.n	800e0b2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800e0a6:	4b12      	ldr	r3, [pc, #72]	@ (800e0f0 <RCCEx_PLL3_Config+0x15c>)
 800e0a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0aa:	4a11      	ldr	r2, [pc, #68]	@ (800e0f0 <RCCEx_PLL3_Config+0x15c>)
 800e0ac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e0b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800e0b2:	4b0f      	ldr	r3, [pc, #60]	@ (800e0f0 <RCCEx_PLL3_Config+0x15c>)
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	4a0e      	ldr	r2, [pc, #56]	@ (800e0f0 <RCCEx_PLL3_Config+0x15c>)
 800e0b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e0bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e0be:	f7f6 fa1f 	bl	8004500 <HAL_GetTick>
 800e0c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e0c4:	e008      	b.n	800e0d8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e0c6:	f7f6 fa1b 	bl	8004500 <HAL_GetTick>
 800e0ca:	4602      	mov	r2, r0
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	1ad3      	subs	r3, r2, r3
 800e0d0:	2b02      	cmp	r3, #2
 800e0d2:	d901      	bls.n	800e0d8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e0d4:	2303      	movs	r3, #3
 800e0d6:	e006      	b.n	800e0e6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e0d8:	4b05      	ldr	r3, [pc, #20]	@ (800e0f0 <RCCEx_PLL3_Config+0x15c>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d0f0      	beq.n	800e0c6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800e0e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	3710      	adds	r7, #16
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	bd80      	pop	{r7, pc}
 800e0ee:	bf00      	nop
 800e0f0:	58024400 	.word	0x58024400
 800e0f4:	ffff0007 	.word	0xffff0007

0800e0f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b082      	sub	sp, #8
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d101      	bne.n	800e10a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e106:	2301      	movs	r3, #1
 800e108:	e049      	b.n	800e19e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e110:	b2db      	uxtb	r3, r3
 800e112:	2b00      	cmp	r3, #0
 800e114:	d106      	bne.n	800e124 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	2200      	movs	r2, #0
 800e11a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e11e:	6878      	ldr	r0, [r7, #4]
 800e120:	f7f5 fef2 	bl	8003f08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	2202      	movs	r2, #2
 800e128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681a      	ldr	r2, [r3, #0]
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	3304      	adds	r3, #4
 800e134:	4619      	mov	r1, r3
 800e136:	4610      	mov	r0, r2
 800e138:	f000 fdbe 	bl	800ecb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2201      	movs	r2, #1
 800e140:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	2201      	movs	r2, #1
 800e148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	2201      	movs	r2, #1
 800e150:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	2201      	movs	r2, #1
 800e158:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2201      	movs	r2, #1
 800e160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2201      	movs	r2, #1
 800e168:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	2201      	movs	r2, #1
 800e170:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	2201      	movs	r2, #1
 800e178:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2201      	movs	r2, #1
 800e180:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2201      	movs	r2, #1
 800e188:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	2201      	movs	r2, #1
 800e190:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	2201      	movs	r2, #1
 800e198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e19c:	2300      	movs	r3, #0
}
 800e19e:	4618      	mov	r0, r3
 800e1a0:	3708      	adds	r7, #8
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bd80      	pop	{r7, pc}
	...

0800e1a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800e1a8:	b480      	push	{r7}
 800e1aa:	b085      	sub	sp, #20
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e1b6:	b2db      	uxtb	r3, r3
 800e1b8:	2b01      	cmp	r3, #1
 800e1ba:	d001      	beq.n	800e1c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800e1bc:	2301      	movs	r3, #1
 800e1be:	e056      	b.n	800e26e <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2202      	movs	r2, #2
 800e1c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	4a2b      	ldr	r2, [pc, #172]	@ (800e27c <HAL_TIM_Base_Start+0xd4>)
 800e1ce:	4293      	cmp	r3, r2
 800e1d0:	d02c      	beq.n	800e22c <HAL_TIM_Base_Start+0x84>
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e1da:	d027      	beq.n	800e22c <HAL_TIM_Base_Start+0x84>
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	4a27      	ldr	r2, [pc, #156]	@ (800e280 <HAL_TIM_Base_Start+0xd8>)
 800e1e2:	4293      	cmp	r3, r2
 800e1e4:	d022      	beq.n	800e22c <HAL_TIM_Base_Start+0x84>
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	4a26      	ldr	r2, [pc, #152]	@ (800e284 <HAL_TIM_Base_Start+0xdc>)
 800e1ec:	4293      	cmp	r3, r2
 800e1ee:	d01d      	beq.n	800e22c <HAL_TIM_Base_Start+0x84>
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	4a24      	ldr	r2, [pc, #144]	@ (800e288 <HAL_TIM_Base_Start+0xe0>)
 800e1f6:	4293      	cmp	r3, r2
 800e1f8:	d018      	beq.n	800e22c <HAL_TIM_Base_Start+0x84>
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	4a23      	ldr	r2, [pc, #140]	@ (800e28c <HAL_TIM_Base_Start+0xe4>)
 800e200:	4293      	cmp	r3, r2
 800e202:	d013      	beq.n	800e22c <HAL_TIM_Base_Start+0x84>
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	4a21      	ldr	r2, [pc, #132]	@ (800e290 <HAL_TIM_Base_Start+0xe8>)
 800e20a:	4293      	cmp	r3, r2
 800e20c:	d00e      	beq.n	800e22c <HAL_TIM_Base_Start+0x84>
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	4a20      	ldr	r2, [pc, #128]	@ (800e294 <HAL_TIM_Base_Start+0xec>)
 800e214:	4293      	cmp	r3, r2
 800e216:	d009      	beq.n	800e22c <HAL_TIM_Base_Start+0x84>
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	4a1e      	ldr	r2, [pc, #120]	@ (800e298 <HAL_TIM_Base_Start+0xf0>)
 800e21e:	4293      	cmp	r3, r2
 800e220:	d004      	beq.n	800e22c <HAL_TIM_Base_Start+0x84>
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	4a1d      	ldr	r2, [pc, #116]	@ (800e29c <HAL_TIM_Base_Start+0xf4>)
 800e228:	4293      	cmp	r3, r2
 800e22a:	d115      	bne.n	800e258 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	689a      	ldr	r2, [r3, #8]
 800e232:	4b1b      	ldr	r3, [pc, #108]	@ (800e2a0 <HAL_TIM_Base_Start+0xf8>)
 800e234:	4013      	ands	r3, r2
 800e236:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	2b06      	cmp	r3, #6
 800e23c:	d015      	beq.n	800e26a <HAL_TIM_Base_Start+0xc2>
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e244:	d011      	beq.n	800e26a <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	681a      	ldr	r2, [r3, #0]
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	f042 0201 	orr.w	r2, r2, #1
 800e254:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e256:	e008      	b.n	800e26a <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	681a      	ldr	r2, [r3, #0]
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	f042 0201 	orr.w	r2, r2, #1
 800e266:	601a      	str	r2, [r3, #0]
 800e268:	e000      	b.n	800e26c <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e26a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e26c:	2300      	movs	r3, #0
}
 800e26e:	4618      	mov	r0, r3
 800e270:	3714      	adds	r7, #20
 800e272:	46bd      	mov	sp, r7
 800e274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e278:	4770      	bx	lr
 800e27a:	bf00      	nop
 800e27c:	40010000 	.word	0x40010000
 800e280:	40000400 	.word	0x40000400
 800e284:	40000800 	.word	0x40000800
 800e288:	40000c00 	.word	0x40000c00
 800e28c:	40010400 	.word	0x40010400
 800e290:	40001800 	.word	0x40001800
 800e294:	40014000 	.word	0x40014000
 800e298:	4000e000 	.word	0x4000e000
 800e29c:	4000e400 	.word	0x4000e400
 800e2a0:	00010007 	.word	0x00010007

0800e2a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b082      	sub	sp, #8
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d101      	bne.n	800e2b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e2b2:	2301      	movs	r3, #1
 800e2b4:	e049      	b.n	800e34a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e2bc:	b2db      	uxtb	r3, r3
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d106      	bne.n	800e2d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e2ca:	6878      	ldr	r0, [r7, #4]
 800e2cc:	f7f5 fd4c 	bl	8003d68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2202      	movs	r2, #2
 800e2d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681a      	ldr	r2, [r3, #0]
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	3304      	adds	r3, #4
 800e2e0:	4619      	mov	r1, r3
 800e2e2:	4610      	mov	r0, r2
 800e2e4:	f000 fce8 	bl	800ecb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	2201      	movs	r2, #1
 800e2ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	2201      	movs	r2, #1
 800e2f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	2201      	movs	r2, #1
 800e2fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	2201      	movs	r2, #1
 800e304:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	2201      	movs	r2, #1
 800e30c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	2201      	movs	r2, #1
 800e314:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2201      	movs	r2, #1
 800e31c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2201      	movs	r2, #1
 800e324:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2201      	movs	r2, #1
 800e32c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	2201      	movs	r2, #1
 800e334:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	2201      	movs	r2, #1
 800e33c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	2201      	movs	r2, #1
 800e344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e348:	2300      	movs	r3, #0
}
 800e34a:	4618      	mov	r0, r3
 800e34c:	3708      	adds	r7, #8
 800e34e:	46bd      	mov	sp, r7
 800e350:	bd80      	pop	{r7, pc}
	...

0800e354 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e354:	b580      	push	{r7, lr}
 800e356:	b084      	sub	sp, #16
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
 800e35c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e35e:	683b      	ldr	r3, [r7, #0]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d109      	bne.n	800e378 <HAL_TIM_PWM_Start+0x24>
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e36a:	b2db      	uxtb	r3, r3
 800e36c:	2b01      	cmp	r3, #1
 800e36e:	bf14      	ite	ne
 800e370:	2301      	movne	r3, #1
 800e372:	2300      	moveq	r3, #0
 800e374:	b2db      	uxtb	r3, r3
 800e376:	e03c      	b.n	800e3f2 <HAL_TIM_PWM_Start+0x9e>
 800e378:	683b      	ldr	r3, [r7, #0]
 800e37a:	2b04      	cmp	r3, #4
 800e37c:	d109      	bne.n	800e392 <HAL_TIM_PWM_Start+0x3e>
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800e384:	b2db      	uxtb	r3, r3
 800e386:	2b01      	cmp	r3, #1
 800e388:	bf14      	ite	ne
 800e38a:	2301      	movne	r3, #1
 800e38c:	2300      	moveq	r3, #0
 800e38e:	b2db      	uxtb	r3, r3
 800e390:	e02f      	b.n	800e3f2 <HAL_TIM_PWM_Start+0x9e>
 800e392:	683b      	ldr	r3, [r7, #0]
 800e394:	2b08      	cmp	r3, #8
 800e396:	d109      	bne.n	800e3ac <HAL_TIM_PWM_Start+0x58>
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e39e:	b2db      	uxtb	r3, r3
 800e3a0:	2b01      	cmp	r3, #1
 800e3a2:	bf14      	ite	ne
 800e3a4:	2301      	movne	r3, #1
 800e3a6:	2300      	moveq	r3, #0
 800e3a8:	b2db      	uxtb	r3, r3
 800e3aa:	e022      	b.n	800e3f2 <HAL_TIM_PWM_Start+0x9e>
 800e3ac:	683b      	ldr	r3, [r7, #0]
 800e3ae:	2b0c      	cmp	r3, #12
 800e3b0:	d109      	bne.n	800e3c6 <HAL_TIM_PWM_Start+0x72>
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e3b8:	b2db      	uxtb	r3, r3
 800e3ba:	2b01      	cmp	r3, #1
 800e3bc:	bf14      	ite	ne
 800e3be:	2301      	movne	r3, #1
 800e3c0:	2300      	moveq	r3, #0
 800e3c2:	b2db      	uxtb	r3, r3
 800e3c4:	e015      	b.n	800e3f2 <HAL_TIM_PWM_Start+0x9e>
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	2b10      	cmp	r3, #16
 800e3ca:	d109      	bne.n	800e3e0 <HAL_TIM_PWM_Start+0x8c>
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e3d2:	b2db      	uxtb	r3, r3
 800e3d4:	2b01      	cmp	r3, #1
 800e3d6:	bf14      	ite	ne
 800e3d8:	2301      	movne	r3, #1
 800e3da:	2300      	moveq	r3, #0
 800e3dc:	b2db      	uxtb	r3, r3
 800e3de:	e008      	b.n	800e3f2 <HAL_TIM_PWM_Start+0x9e>
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e3e6:	b2db      	uxtb	r3, r3
 800e3e8:	2b01      	cmp	r3, #1
 800e3ea:	bf14      	ite	ne
 800e3ec:	2301      	movne	r3, #1
 800e3ee:	2300      	moveq	r3, #0
 800e3f0:	b2db      	uxtb	r3, r3
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d001      	beq.n	800e3fa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	e0ab      	b.n	800e552 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e3fa:	683b      	ldr	r3, [r7, #0]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d104      	bne.n	800e40a <HAL_TIM_PWM_Start+0xb6>
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	2202      	movs	r2, #2
 800e404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e408:	e023      	b.n	800e452 <HAL_TIM_PWM_Start+0xfe>
 800e40a:	683b      	ldr	r3, [r7, #0]
 800e40c:	2b04      	cmp	r3, #4
 800e40e:	d104      	bne.n	800e41a <HAL_TIM_PWM_Start+0xc6>
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2202      	movs	r2, #2
 800e414:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e418:	e01b      	b.n	800e452 <HAL_TIM_PWM_Start+0xfe>
 800e41a:	683b      	ldr	r3, [r7, #0]
 800e41c:	2b08      	cmp	r3, #8
 800e41e:	d104      	bne.n	800e42a <HAL_TIM_PWM_Start+0xd6>
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	2202      	movs	r2, #2
 800e424:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e428:	e013      	b.n	800e452 <HAL_TIM_PWM_Start+0xfe>
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	2b0c      	cmp	r3, #12
 800e42e:	d104      	bne.n	800e43a <HAL_TIM_PWM_Start+0xe6>
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2202      	movs	r2, #2
 800e434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e438:	e00b      	b.n	800e452 <HAL_TIM_PWM_Start+0xfe>
 800e43a:	683b      	ldr	r3, [r7, #0]
 800e43c:	2b10      	cmp	r3, #16
 800e43e:	d104      	bne.n	800e44a <HAL_TIM_PWM_Start+0xf6>
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	2202      	movs	r2, #2
 800e444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e448:	e003      	b.n	800e452 <HAL_TIM_PWM_Start+0xfe>
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	2202      	movs	r2, #2
 800e44e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	2201      	movs	r2, #1
 800e458:	6839      	ldr	r1, [r7, #0]
 800e45a:	4618      	mov	r0, r3
 800e45c:	f001 f97c 	bl	800f758 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	4a3d      	ldr	r2, [pc, #244]	@ (800e55c <HAL_TIM_PWM_Start+0x208>)
 800e466:	4293      	cmp	r3, r2
 800e468:	d013      	beq.n	800e492 <HAL_TIM_PWM_Start+0x13e>
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	4a3c      	ldr	r2, [pc, #240]	@ (800e560 <HAL_TIM_PWM_Start+0x20c>)
 800e470:	4293      	cmp	r3, r2
 800e472:	d00e      	beq.n	800e492 <HAL_TIM_PWM_Start+0x13e>
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	4a3a      	ldr	r2, [pc, #232]	@ (800e564 <HAL_TIM_PWM_Start+0x210>)
 800e47a:	4293      	cmp	r3, r2
 800e47c:	d009      	beq.n	800e492 <HAL_TIM_PWM_Start+0x13e>
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	4a39      	ldr	r2, [pc, #228]	@ (800e568 <HAL_TIM_PWM_Start+0x214>)
 800e484:	4293      	cmp	r3, r2
 800e486:	d004      	beq.n	800e492 <HAL_TIM_PWM_Start+0x13e>
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	4a37      	ldr	r2, [pc, #220]	@ (800e56c <HAL_TIM_PWM_Start+0x218>)
 800e48e:	4293      	cmp	r3, r2
 800e490:	d101      	bne.n	800e496 <HAL_TIM_PWM_Start+0x142>
 800e492:	2301      	movs	r3, #1
 800e494:	e000      	b.n	800e498 <HAL_TIM_PWM_Start+0x144>
 800e496:	2300      	movs	r3, #0
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d007      	beq.n	800e4ac <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e4aa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	4a2a      	ldr	r2, [pc, #168]	@ (800e55c <HAL_TIM_PWM_Start+0x208>)
 800e4b2:	4293      	cmp	r3, r2
 800e4b4:	d02c      	beq.n	800e510 <HAL_TIM_PWM_Start+0x1bc>
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e4be:	d027      	beq.n	800e510 <HAL_TIM_PWM_Start+0x1bc>
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	4a2a      	ldr	r2, [pc, #168]	@ (800e570 <HAL_TIM_PWM_Start+0x21c>)
 800e4c6:	4293      	cmp	r3, r2
 800e4c8:	d022      	beq.n	800e510 <HAL_TIM_PWM_Start+0x1bc>
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	4a29      	ldr	r2, [pc, #164]	@ (800e574 <HAL_TIM_PWM_Start+0x220>)
 800e4d0:	4293      	cmp	r3, r2
 800e4d2:	d01d      	beq.n	800e510 <HAL_TIM_PWM_Start+0x1bc>
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	4a27      	ldr	r2, [pc, #156]	@ (800e578 <HAL_TIM_PWM_Start+0x224>)
 800e4da:	4293      	cmp	r3, r2
 800e4dc:	d018      	beq.n	800e510 <HAL_TIM_PWM_Start+0x1bc>
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	4a1f      	ldr	r2, [pc, #124]	@ (800e560 <HAL_TIM_PWM_Start+0x20c>)
 800e4e4:	4293      	cmp	r3, r2
 800e4e6:	d013      	beq.n	800e510 <HAL_TIM_PWM_Start+0x1bc>
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	4a23      	ldr	r2, [pc, #140]	@ (800e57c <HAL_TIM_PWM_Start+0x228>)
 800e4ee:	4293      	cmp	r3, r2
 800e4f0:	d00e      	beq.n	800e510 <HAL_TIM_PWM_Start+0x1bc>
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	4a1b      	ldr	r2, [pc, #108]	@ (800e564 <HAL_TIM_PWM_Start+0x210>)
 800e4f8:	4293      	cmp	r3, r2
 800e4fa:	d009      	beq.n	800e510 <HAL_TIM_PWM_Start+0x1bc>
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	4a1f      	ldr	r2, [pc, #124]	@ (800e580 <HAL_TIM_PWM_Start+0x22c>)
 800e502:	4293      	cmp	r3, r2
 800e504:	d004      	beq.n	800e510 <HAL_TIM_PWM_Start+0x1bc>
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	4a1e      	ldr	r2, [pc, #120]	@ (800e584 <HAL_TIM_PWM_Start+0x230>)
 800e50c:	4293      	cmp	r3, r2
 800e50e:	d115      	bne.n	800e53c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	689a      	ldr	r2, [r3, #8]
 800e516:	4b1c      	ldr	r3, [pc, #112]	@ (800e588 <HAL_TIM_PWM_Start+0x234>)
 800e518:	4013      	ands	r3, r2
 800e51a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	2b06      	cmp	r3, #6
 800e520:	d015      	beq.n	800e54e <HAL_TIM_PWM_Start+0x1fa>
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e528:	d011      	beq.n	800e54e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	681a      	ldr	r2, [r3, #0]
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	f042 0201 	orr.w	r2, r2, #1
 800e538:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e53a:	e008      	b.n	800e54e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	681a      	ldr	r2, [r3, #0]
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	f042 0201 	orr.w	r2, r2, #1
 800e54a:	601a      	str	r2, [r3, #0]
 800e54c:	e000      	b.n	800e550 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e54e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e550:	2300      	movs	r3, #0
}
 800e552:	4618      	mov	r0, r3
 800e554:	3710      	adds	r7, #16
 800e556:	46bd      	mov	sp, r7
 800e558:	bd80      	pop	{r7, pc}
 800e55a:	bf00      	nop
 800e55c:	40010000 	.word	0x40010000
 800e560:	40010400 	.word	0x40010400
 800e564:	40014000 	.word	0x40014000
 800e568:	40014400 	.word	0x40014400
 800e56c:	40014800 	.word	0x40014800
 800e570:	40000400 	.word	0x40000400
 800e574:	40000800 	.word	0x40000800
 800e578:	40000c00 	.word	0x40000c00
 800e57c:	40001800 	.word	0x40001800
 800e580:	4000e000 	.word	0x4000e000
 800e584:	4000e400 	.word	0x4000e400
 800e588:	00010007 	.word	0x00010007

0800e58c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b082      	sub	sp, #8
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
 800e594:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	2200      	movs	r2, #0
 800e59c:	6839      	ldr	r1, [r7, #0]
 800e59e:	4618      	mov	r0, r3
 800e5a0:	f001 f8da 	bl	800f758 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	4a3e      	ldr	r2, [pc, #248]	@ (800e6a4 <HAL_TIM_PWM_Stop+0x118>)
 800e5aa:	4293      	cmp	r3, r2
 800e5ac:	d013      	beq.n	800e5d6 <HAL_TIM_PWM_Stop+0x4a>
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	4a3d      	ldr	r2, [pc, #244]	@ (800e6a8 <HAL_TIM_PWM_Stop+0x11c>)
 800e5b4:	4293      	cmp	r3, r2
 800e5b6:	d00e      	beq.n	800e5d6 <HAL_TIM_PWM_Stop+0x4a>
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	4a3b      	ldr	r2, [pc, #236]	@ (800e6ac <HAL_TIM_PWM_Stop+0x120>)
 800e5be:	4293      	cmp	r3, r2
 800e5c0:	d009      	beq.n	800e5d6 <HAL_TIM_PWM_Stop+0x4a>
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	4a3a      	ldr	r2, [pc, #232]	@ (800e6b0 <HAL_TIM_PWM_Stop+0x124>)
 800e5c8:	4293      	cmp	r3, r2
 800e5ca:	d004      	beq.n	800e5d6 <HAL_TIM_PWM_Stop+0x4a>
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	4a38      	ldr	r2, [pc, #224]	@ (800e6b4 <HAL_TIM_PWM_Stop+0x128>)
 800e5d2:	4293      	cmp	r3, r2
 800e5d4:	d101      	bne.n	800e5da <HAL_TIM_PWM_Stop+0x4e>
 800e5d6:	2301      	movs	r3, #1
 800e5d8:	e000      	b.n	800e5dc <HAL_TIM_PWM_Stop+0x50>
 800e5da:	2300      	movs	r3, #0
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d017      	beq.n	800e610 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	6a1a      	ldr	r2, [r3, #32]
 800e5e6:	f241 1311 	movw	r3, #4369	@ 0x1111
 800e5ea:	4013      	ands	r3, r2
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d10f      	bne.n	800e610 <HAL_TIM_PWM_Stop+0x84>
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	6a1a      	ldr	r2, [r3, #32]
 800e5f6:	f240 4344 	movw	r3, #1092	@ 0x444
 800e5fa:	4013      	ands	r3, r2
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d107      	bne.n	800e610 <HAL_TIM_PWM_Stop+0x84>
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e60e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	6a1a      	ldr	r2, [r3, #32]
 800e616:	f241 1311 	movw	r3, #4369	@ 0x1111
 800e61a:	4013      	ands	r3, r2
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d10f      	bne.n	800e640 <HAL_TIM_PWM_Stop+0xb4>
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	6a1a      	ldr	r2, [r3, #32]
 800e626:	f240 4344 	movw	r3, #1092	@ 0x444
 800e62a:	4013      	ands	r3, r2
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d107      	bne.n	800e640 <HAL_TIM_PWM_Stop+0xb4>
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	681a      	ldr	r2, [r3, #0]
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	f022 0201 	bic.w	r2, r2, #1
 800e63e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e640:	683b      	ldr	r3, [r7, #0]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d104      	bne.n	800e650 <HAL_TIM_PWM_Stop+0xc4>
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	2201      	movs	r2, #1
 800e64a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e64e:	e023      	b.n	800e698 <HAL_TIM_PWM_Stop+0x10c>
 800e650:	683b      	ldr	r3, [r7, #0]
 800e652:	2b04      	cmp	r3, #4
 800e654:	d104      	bne.n	800e660 <HAL_TIM_PWM_Stop+0xd4>
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	2201      	movs	r2, #1
 800e65a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e65e:	e01b      	b.n	800e698 <HAL_TIM_PWM_Stop+0x10c>
 800e660:	683b      	ldr	r3, [r7, #0]
 800e662:	2b08      	cmp	r3, #8
 800e664:	d104      	bne.n	800e670 <HAL_TIM_PWM_Stop+0xe4>
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	2201      	movs	r2, #1
 800e66a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e66e:	e013      	b.n	800e698 <HAL_TIM_PWM_Stop+0x10c>
 800e670:	683b      	ldr	r3, [r7, #0]
 800e672:	2b0c      	cmp	r3, #12
 800e674:	d104      	bne.n	800e680 <HAL_TIM_PWM_Stop+0xf4>
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	2201      	movs	r2, #1
 800e67a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e67e:	e00b      	b.n	800e698 <HAL_TIM_PWM_Stop+0x10c>
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	2b10      	cmp	r3, #16
 800e684:	d104      	bne.n	800e690 <HAL_TIM_PWM_Stop+0x104>
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	2201      	movs	r2, #1
 800e68a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e68e:	e003      	b.n	800e698 <HAL_TIM_PWM_Stop+0x10c>
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	2201      	movs	r2, #1
 800e694:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800e698:	2300      	movs	r3, #0
}
 800e69a:	4618      	mov	r0, r3
 800e69c:	3708      	adds	r7, #8
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd80      	pop	{r7, pc}
 800e6a2:	bf00      	nop
 800e6a4:	40010000 	.word	0x40010000
 800e6a8:	40010400 	.word	0x40010400
 800e6ac:	40014000 	.word	0x40014000
 800e6b0:	40014400 	.word	0x40014400
 800e6b4:	40014800 	.word	0x40014800

0800e6b8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b082      	sub	sp, #8
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d101      	bne.n	800e6ca <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800e6c6:	2301      	movs	r3, #1
 800e6c8:	e049      	b.n	800e75e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e6d0:	b2db      	uxtb	r3, r3
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d106      	bne.n	800e6e4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	2200      	movs	r2, #0
 800e6da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800e6de:	6878      	ldr	r0, [r7, #4]
 800e6e0:	f7f5 fb90 	bl	8003e04 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	2202      	movs	r2, #2
 800e6e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681a      	ldr	r2, [r3, #0]
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	3304      	adds	r3, #4
 800e6f4:	4619      	mov	r1, r3
 800e6f6:	4610      	mov	r0, r2
 800e6f8:	f000 fade 	bl	800ecb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2201      	movs	r2, #1
 800e700:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2201      	movs	r2, #1
 800e708:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	2201      	movs	r2, #1
 800e710:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	2201      	movs	r2, #1
 800e718:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	2201      	movs	r2, #1
 800e720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	2201      	movs	r2, #1
 800e728:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	2201      	movs	r2, #1
 800e730:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	2201      	movs	r2, #1
 800e738:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	2201      	movs	r2, #1
 800e740:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	2201      	movs	r2, #1
 800e748:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	2201      	movs	r2, #1
 800e750:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	2201      	movs	r2, #1
 800e758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e75c:	2300      	movs	r3, #0
}
 800e75e:	4618      	mov	r0, r3
 800e760:	3708      	adds	r7, #8
 800e762:	46bd      	mov	sp, r7
 800e764:	bd80      	pop	{r7, pc}

0800e766 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800e766:	b580      	push	{r7, lr}
 800e768:	b086      	sub	sp, #24
 800e76a:	af00      	add	r7, sp, #0
 800e76c:	60f8      	str	r0, [r7, #12]
 800e76e:	60b9      	str	r1, [r7, #8]
 800e770:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e772:	2300      	movs	r3, #0
 800e774:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e77c:	2b01      	cmp	r3, #1
 800e77e:	d101      	bne.n	800e784 <HAL_TIM_IC_ConfigChannel+0x1e>
 800e780:	2302      	movs	r3, #2
 800e782:	e088      	b.n	800e896 <HAL_TIM_IC_ConfigChannel+0x130>
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	2201      	movs	r2, #1
 800e788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d11b      	bne.n	800e7ca <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800e796:	68bb      	ldr	r3, [r7, #8]
 800e798:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800e79a:	68bb      	ldr	r3, [r7, #8]
 800e79c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800e79e:	68bb      	ldr	r3, [r7, #8]
 800e7a0:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800e7a2:	f000 fe05 	bl	800f3b0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	699a      	ldr	r2, [r3, #24]
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	f022 020c 	bic.w	r2, r2, #12
 800e7b4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	6999      	ldr	r1, [r3, #24]
 800e7bc:	68bb      	ldr	r3, [r7, #8]
 800e7be:	689a      	ldr	r2, [r3, #8]
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	430a      	orrs	r2, r1
 800e7c6:	619a      	str	r2, [r3, #24]
 800e7c8:	e060      	b.n	800e88c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	2b04      	cmp	r3, #4
 800e7ce:	d11c      	bne.n	800e80a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800e7d4:	68bb      	ldr	r3, [r7, #8]
 800e7d6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800e7d8:	68bb      	ldr	r3, [r7, #8]
 800e7da:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800e7dc:	68bb      	ldr	r3, [r7, #8]
 800e7de:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800e7e0:	f000 fe95 	bl	800f50e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	699a      	ldr	r2, [r3, #24]
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800e7f2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	6999      	ldr	r1, [r3, #24]
 800e7fa:	68bb      	ldr	r3, [r7, #8]
 800e7fc:	689b      	ldr	r3, [r3, #8]
 800e7fe:	021a      	lsls	r2, r3, #8
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	430a      	orrs	r2, r1
 800e806:	619a      	str	r2, [r3, #24]
 800e808:	e040      	b.n	800e88c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	2b08      	cmp	r3, #8
 800e80e:	d11b      	bne.n	800e848 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800e814:	68bb      	ldr	r3, [r7, #8]
 800e816:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800e818:	68bb      	ldr	r3, [r7, #8]
 800e81a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800e81c:	68bb      	ldr	r3, [r7, #8]
 800e81e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800e820:	f000 fee2 	bl	800f5e8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	69da      	ldr	r2, [r3, #28]
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	f022 020c 	bic.w	r2, r2, #12
 800e832:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	69d9      	ldr	r1, [r3, #28]
 800e83a:	68bb      	ldr	r3, [r7, #8]
 800e83c:	689a      	ldr	r2, [r3, #8]
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	430a      	orrs	r2, r1
 800e844:	61da      	str	r2, [r3, #28]
 800e846:	e021      	b.n	800e88c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	2b0c      	cmp	r3, #12
 800e84c:	d11c      	bne.n	800e888 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800e852:	68bb      	ldr	r3, [r7, #8]
 800e854:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800e856:	68bb      	ldr	r3, [r7, #8]
 800e858:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800e85a:	68bb      	ldr	r3, [r7, #8]
 800e85c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800e85e:	f000 feff 	bl	800f660 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	69da      	ldr	r2, [r3, #28]
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800e870:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	69d9      	ldr	r1, [r3, #28]
 800e878:	68bb      	ldr	r3, [r7, #8]
 800e87a:	689b      	ldr	r3, [r3, #8]
 800e87c:	021a      	lsls	r2, r3, #8
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	430a      	orrs	r2, r1
 800e884:	61da      	str	r2, [r3, #28]
 800e886:	e001      	b.n	800e88c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800e888:	2301      	movs	r3, #1
 800e88a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	2200      	movs	r2, #0
 800e890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e894:	7dfb      	ldrb	r3, [r7, #23]
}
 800e896:	4618      	mov	r0, r3
 800e898:	3718      	adds	r7, #24
 800e89a:	46bd      	mov	sp, r7
 800e89c:	bd80      	pop	{r7, pc}
	...

0800e8a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b086      	sub	sp, #24
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	60f8      	str	r0, [r7, #12]
 800e8a8:	60b9      	str	r1, [r7, #8]
 800e8aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e8b6:	2b01      	cmp	r3, #1
 800e8b8:	d101      	bne.n	800e8be <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e8ba:	2302      	movs	r3, #2
 800e8bc:	e0ff      	b.n	800eabe <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	2201      	movs	r2, #1
 800e8c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	2b14      	cmp	r3, #20
 800e8ca:	f200 80f0 	bhi.w	800eaae <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e8ce:	a201      	add	r2, pc, #4	@ (adr r2, 800e8d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e8d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8d4:	0800e929 	.word	0x0800e929
 800e8d8:	0800eaaf 	.word	0x0800eaaf
 800e8dc:	0800eaaf 	.word	0x0800eaaf
 800e8e0:	0800eaaf 	.word	0x0800eaaf
 800e8e4:	0800e969 	.word	0x0800e969
 800e8e8:	0800eaaf 	.word	0x0800eaaf
 800e8ec:	0800eaaf 	.word	0x0800eaaf
 800e8f0:	0800eaaf 	.word	0x0800eaaf
 800e8f4:	0800e9ab 	.word	0x0800e9ab
 800e8f8:	0800eaaf 	.word	0x0800eaaf
 800e8fc:	0800eaaf 	.word	0x0800eaaf
 800e900:	0800eaaf 	.word	0x0800eaaf
 800e904:	0800e9eb 	.word	0x0800e9eb
 800e908:	0800eaaf 	.word	0x0800eaaf
 800e90c:	0800eaaf 	.word	0x0800eaaf
 800e910:	0800eaaf 	.word	0x0800eaaf
 800e914:	0800ea2d 	.word	0x0800ea2d
 800e918:	0800eaaf 	.word	0x0800eaaf
 800e91c:	0800eaaf 	.word	0x0800eaaf
 800e920:	0800eaaf 	.word	0x0800eaaf
 800e924:	0800ea6d 	.word	0x0800ea6d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	68b9      	ldr	r1, [r7, #8]
 800e92e:	4618      	mov	r0, r3
 800e930:	f000 fa68 	bl	800ee04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	699a      	ldr	r2, [r3, #24]
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	f042 0208 	orr.w	r2, r2, #8
 800e942:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	699a      	ldr	r2, [r3, #24]
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	f022 0204 	bic.w	r2, r2, #4
 800e952:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	6999      	ldr	r1, [r3, #24]
 800e95a:	68bb      	ldr	r3, [r7, #8]
 800e95c:	691a      	ldr	r2, [r3, #16]
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	430a      	orrs	r2, r1
 800e964:	619a      	str	r2, [r3, #24]
      break;
 800e966:	e0a5      	b.n	800eab4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	68b9      	ldr	r1, [r7, #8]
 800e96e:	4618      	mov	r0, r3
 800e970:	f000 fad8 	bl	800ef24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	699a      	ldr	r2, [r3, #24]
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e982:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	699a      	ldr	r2, [r3, #24]
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e992:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	6999      	ldr	r1, [r3, #24]
 800e99a:	68bb      	ldr	r3, [r7, #8]
 800e99c:	691b      	ldr	r3, [r3, #16]
 800e99e:	021a      	lsls	r2, r3, #8
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	430a      	orrs	r2, r1
 800e9a6:	619a      	str	r2, [r3, #24]
      break;
 800e9a8:	e084      	b.n	800eab4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	68b9      	ldr	r1, [r7, #8]
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	f000 fb41 	bl	800f038 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	69da      	ldr	r2, [r3, #28]
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	f042 0208 	orr.w	r2, r2, #8
 800e9c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	69da      	ldr	r2, [r3, #28]
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	f022 0204 	bic.w	r2, r2, #4
 800e9d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	69d9      	ldr	r1, [r3, #28]
 800e9dc:	68bb      	ldr	r3, [r7, #8]
 800e9de:	691a      	ldr	r2, [r3, #16]
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	430a      	orrs	r2, r1
 800e9e6:	61da      	str	r2, [r3, #28]
      break;
 800e9e8:	e064      	b.n	800eab4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	68b9      	ldr	r1, [r7, #8]
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	f000 fba9 	bl	800f148 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	69da      	ldr	r2, [r3, #28]
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ea04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	69da      	ldr	r2, [r3, #28]
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ea14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	69d9      	ldr	r1, [r3, #28]
 800ea1c:	68bb      	ldr	r3, [r7, #8]
 800ea1e:	691b      	ldr	r3, [r3, #16]
 800ea20:	021a      	lsls	r2, r3, #8
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	430a      	orrs	r2, r1
 800ea28:	61da      	str	r2, [r3, #28]
      break;
 800ea2a:	e043      	b.n	800eab4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	68b9      	ldr	r1, [r7, #8]
 800ea32:	4618      	mov	r0, r3
 800ea34:	f000 fbf2 	bl	800f21c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	f042 0208 	orr.w	r2, r2, #8
 800ea46:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	f022 0204 	bic.w	r2, r2, #4
 800ea56:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ea5e:	68bb      	ldr	r3, [r7, #8]
 800ea60:	691a      	ldr	r2, [r3, #16]
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	430a      	orrs	r2, r1
 800ea68:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ea6a:	e023      	b.n	800eab4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	68b9      	ldr	r1, [r7, #8]
 800ea72:	4618      	mov	r0, r3
 800ea74:	f000 fc36 	bl	800f2e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ea86:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ea96:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ea9e:	68bb      	ldr	r3, [r7, #8]
 800eaa0:	691b      	ldr	r3, [r3, #16]
 800eaa2:	021a      	lsls	r2, r3, #8
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	430a      	orrs	r2, r1
 800eaaa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800eaac:	e002      	b.n	800eab4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800eaae:	2301      	movs	r3, #1
 800eab0:	75fb      	strb	r3, [r7, #23]
      break;
 800eab2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	2200      	movs	r2, #0
 800eab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800eabc:	7dfb      	ldrb	r3, [r7, #23]
}
 800eabe:	4618      	mov	r0, r3
 800eac0:	3718      	adds	r7, #24
 800eac2:	46bd      	mov	sp, r7
 800eac4:	bd80      	pop	{r7, pc}
 800eac6:	bf00      	nop

0800eac8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b084      	sub	sp, #16
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
 800ead0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ead2:	2300      	movs	r3, #0
 800ead4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800eadc:	2b01      	cmp	r3, #1
 800eade:	d101      	bne.n	800eae4 <HAL_TIM_ConfigClockSource+0x1c>
 800eae0:	2302      	movs	r3, #2
 800eae2:	e0dc      	b.n	800ec9e <HAL_TIM_ConfigClockSource+0x1d6>
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	2201      	movs	r2, #1
 800eae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	2202      	movs	r2, #2
 800eaf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	689b      	ldr	r3, [r3, #8]
 800eafa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800eafc:	68ba      	ldr	r2, [r7, #8]
 800eafe:	4b6a      	ldr	r3, [pc, #424]	@ (800eca8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800eb00:	4013      	ands	r3, r2
 800eb02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800eb04:	68bb      	ldr	r3, [r7, #8]
 800eb06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800eb0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	68ba      	ldr	r2, [r7, #8]
 800eb12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800eb14:	683b      	ldr	r3, [r7, #0]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	4a64      	ldr	r2, [pc, #400]	@ (800ecac <HAL_TIM_ConfigClockSource+0x1e4>)
 800eb1a:	4293      	cmp	r3, r2
 800eb1c:	f000 80a9 	beq.w	800ec72 <HAL_TIM_ConfigClockSource+0x1aa>
 800eb20:	4a62      	ldr	r2, [pc, #392]	@ (800ecac <HAL_TIM_ConfigClockSource+0x1e4>)
 800eb22:	4293      	cmp	r3, r2
 800eb24:	f200 80ae 	bhi.w	800ec84 <HAL_TIM_ConfigClockSource+0x1bc>
 800eb28:	4a61      	ldr	r2, [pc, #388]	@ (800ecb0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800eb2a:	4293      	cmp	r3, r2
 800eb2c:	f000 80a1 	beq.w	800ec72 <HAL_TIM_ConfigClockSource+0x1aa>
 800eb30:	4a5f      	ldr	r2, [pc, #380]	@ (800ecb0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800eb32:	4293      	cmp	r3, r2
 800eb34:	f200 80a6 	bhi.w	800ec84 <HAL_TIM_ConfigClockSource+0x1bc>
 800eb38:	4a5e      	ldr	r2, [pc, #376]	@ (800ecb4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800eb3a:	4293      	cmp	r3, r2
 800eb3c:	f000 8099 	beq.w	800ec72 <HAL_TIM_ConfigClockSource+0x1aa>
 800eb40:	4a5c      	ldr	r2, [pc, #368]	@ (800ecb4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800eb42:	4293      	cmp	r3, r2
 800eb44:	f200 809e 	bhi.w	800ec84 <HAL_TIM_ConfigClockSource+0x1bc>
 800eb48:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800eb4c:	f000 8091 	beq.w	800ec72 <HAL_TIM_ConfigClockSource+0x1aa>
 800eb50:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800eb54:	f200 8096 	bhi.w	800ec84 <HAL_TIM_ConfigClockSource+0x1bc>
 800eb58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800eb5c:	f000 8089 	beq.w	800ec72 <HAL_TIM_ConfigClockSource+0x1aa>
 800eb60:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800eb64:	f200 808e 	bhi.w	800ec84 <HAL_TIM_ConfigClockSource+0x1bc>
 800eb68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800eb6c:	d03e      	beq.n	800ebec <HAL_TIM_ConfigClockSource+0x124>
 800eb6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800eb72:	f200 8087 	bhi.w	800ec84 <HAL_TIM_ConfigClockSource+0x1bc>
 800eb76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eb7a:	f000 8086 	beq.w	800ec8a <HAL_TIM_ConfigClockSource+0x1c2>
 800eb7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eb82:	d87f      	bhi.n	800ec84 <HAL_TIM_ConfigClockSource+0x1bc>
 800eb84:	2b70      	cmp	r3, #112	@ 0x70
 800eb86:	d01a      	beq.n	800ebbe <HAL_TIM_ConfigClockSource+0xf6>
 800eb88:	2b70      	cmp	r3, #112	@ 0x70
 800eb8a:	d87b      	bhi.n	800ec84 <HAL_TIM_ConfigClockSource+0x1bc>
 800eb8c:	2b60      	cmp	r3, #96	@ 0x60
 800eb8e:	d050      	beq.n	800ec32 <HAL_TIM_ConfigClockSource+0x16a>
 800eb90:	2b60      	cmp	r3, #96	@ 0x60
 800eb92:	d877      	bhi.n	800ec84 <HAL_TIM_ConfigClockSource+0x1bc>
 800eb94:	2b50      	cmp	r3, #80	@ 0x50
 800eb96:	d03c      	beq.n	800ec12 <HAL_TIM_ConfigClockSource+0x14a>
 800eb98:	2b50      	cmp	r3, #80	@ 0x50
 800eb9a:	d873      	bhi.n	800ec84 <HAL_TIM_ConfigClockSource+0x1bc>
 800eb9c:	2b40      	cmp	r3, #64	@ 0x40
 800eb9e:	d058      	beq.n	800ec52 <HAL_TIM_ConfigClockSource+0x18a>
 800eba0:	2b40      	cmp	r3, #64	@ 0x40
 800eba2:	d86f      	bhi.n	800ec84 <HAL_TIM_ConfigClockSource+0x1bc>
 800eba4:	2b30      	cmp	r3, #48	@ 0x30
 800eba6:	d064      	beq.n	800ec72 <HAL_TIM_ConfigClockSource+0x1aa>
 800eba8:	2b30      	cmp	r3, #48	@ 0x30
 800ebaa:	d86b      	bhi.n	800ec84 <HAL_TIM_ConfigClockSource+0x1bc>
 800ebac:	2b20      	cmp	r3, #32
 800ebae:	d060      	beq.n	800ec72 <HAL_TIM_ConfigClockSource+0x1aa>
 800ebb0:	2b20      	cmp	r3, #32
 800ebb2:	d867      	bhi.n	800ec84 <HAL_TIM_ConfigClockSource+0x1bc>
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d05c      	beq.n	800ec72 <HAL_TIM_ConfigClockSource+0x1aa>
 800ebb8:	2b10      	cmp	r3, #16
 800ebba:	d05a      	beq.n	800ec72 <HAL_TIM_ConfigClockSource+0x1aa>
 800ebbc:	e062      	b.n	800ec84 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ebc6:	683b      	ldr	r3, [r7, #0]
 800ebc8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ebca:	683b      	ldr	r3, [r7, #0]
 800ebcc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ebce:	f000 fda3 	bl	800f718 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	689b      	ldr	r3, [r3, #8]
 800ebd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ebda:	68bb      	ldr	r3, [r7, #8]
 800ebdc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ebe0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	68ba      	ldr	r2, [r7, #8]
 800ebe8:	609a      	str	r2, [r3, #8]
      break;
 800ebea:	e04f      	b.n	800ec8c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ebf4:	683b      	ldr	r3, [r7, #0]
 800ebf6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ebf8:	683b      	ldr	r3, [r7, #0]
 800ebfa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ebfc:	f000 fd8c 	bl	800f718 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	689a      	ldr	r2, [r3, #8]
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ec0e:	609a      	str	r2, [r3, #8]
      break;
 800ec10:	e03c      	b.n	800ec8c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ec16:	683b      	ldr	r3, [r7, #0]
 800ec18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ec1a:	683b      	ldr	r3, [r7, #0]
 800ec1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ec1e:	461a      	mov	r2, r3
 800ec20:	f000 fc46 	bl	800f4b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	2150      	movs	r1, #80	@ 0x50
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	f000 fd56 	bl	800f6dc <TIM_ITRx_SetConfig>
      break;
 800ec30:	e02c      	b.n	800ec8c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ec36:	683b      	ldr	r3, [r7, #0]
 800ec38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ec3a:	683b      	ldr	r3, [r7, #0]
 800ec3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ec3e:	461a      	mov	r2, r3
 800ec40:	f000 fca2 	bl	800f588 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	2160      	movs	r1, #96	@ 0x60
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	f000 fd46 	bl	800f6dc <TIM_ITRx_SetConfig>
      break;
 800ec50:	e01c      	b.n	800ec8c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ec5a:	683b      	ldr	r3, [r7, #0]
 800ec5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ec5e:	461a      	mov	r2, r3
 800ec60:	f000 fc26 	bl	800f4b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	2140      	movs	r1, #64	@ 0x40
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	f000 fd36 	bl	800f6dc <TIM_ITRx_SetConfig>
      break;
 800ec70:	e00c      	b.n	800ec8c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681a      	ldr	r2, [r3, #0]
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	4619      	mov	r1, r3
 800ec7c:	4610      	mov	r0, r2
 800ec7e:	f000 fd2d 	bl	800f6dc <TIM_ITRx_SetConfig>
      break;
 800ec82:	e003      	b.n	800ec8c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ec84:	2301      	movs	r3, #1
 800ec86:	73fb      	strb	r3, [r7, #15]
      break;
 800ec88:	e000      	b.n	800ec8c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ec8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	2201      	movs	r2, #1
 800ec90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	2200      	movs	r2, #0
 800ec98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ec9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec9e:	4618      	mov	r0, r3
 800eca0:	3710      	adds	r7, #16
 800eca2:	46bd      	mov	sp, r7
 800eca4:	bd80      	pop	{r7, pc}
 800eca6:	bf00      	nop
 800eca8:	ffceff88 	.word	0xffceff88
 800ecac:	00100040 	.word	0x00100040
 800ecb0:	00100030 	.word	0x00100030
 800ecb4:	00100020 	.word	0x00100020

0800ecb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ecb8:	b480      	push	{r7}
 800ecba:	b085      	sub	sp, #20
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
 800ecc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	4a44      	ldr	r2, [pc, #272]	@ (800eddc <TIM_Base_SetConfig+0x124>)
 800eccc:	4293      	cmp	r3, r2
 800ecce:	d013      	beq.n	800ecf8 <TIM_Base_SetConfig+0x40>
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ecd6:	d00f      	beq.n	800ecf8 <TIM_Base_SetConfig+0x40>
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	4a41      	ldr	r2, [pc, #260]	@ (800ede0 <TIM_Base_SetConfig+0x128>)
 800ecdc:	4293      	cmp	r3, r2
 800ecde:	d00b      	beq.n	800ecf8 <TIM_Base_SetConfig+0x40>
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	4a40      	ldr	r2, [pc, #256]	@ (800ede4 <TIM_Base_SetConfig+0x12c>)
 800ece4:	4293      	cmp	r3, r2
 800ece6:	d007      	beq.n	800ecf8 <TIM_Base_SetConfig+0x40>
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	4a3f      	ldr	r2, [pc, #252]	@ (800ede8 <TIM_Base_SetConfig+0x130>)
 800ecec:	4293      	cmp	r3, r2
 800ecee:	d003      	beq.n	800ecf8 <TIM_Base_SetConfig+0x40>
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	4a3e      	ldr	r2, [pc, #248]	@ (800edec <TIM_Base_SetConfig+0x134>)
 800ecf4:	4293      	cmp	r3, r2
 800ecf6:	d108      	bne.n	800ed0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ecfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ed00:	683b      	ldr	r3, [r7, #0]
 800ed02:	685b      	ldr	r3, [r3, #4]
 800ed04:	68fa      	ldr	r2, [r7, #12]
 800ed06:	4313      	orrs	r3, r2
 800ed08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	4a33      	ldr	r2, [pc, #204]	@ (800eddc <TIM_Base_SetConfig+0x124>)
 800ed0e:	4293      	cmp	r3, r2
 800ed10:	d027      	beq.n	800ed62 <TIM_Base_SetConfig+0xaa>
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ed18:	d023      	beq.n	800ed62 <TIM_Base_SetConfig+0xaa>
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	4a30      	ldr	r2, [pc, #192]	@ (800ede0 <TIM_Base_SetConfig+0x128>)
 800ed1e:	4293      	cmp	r3, r2
 800ed20:	d01f      	beq.n	800ed62 <TIM_Base_SetConfig+0xaa>
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	4a2f      	ldr	r2, [pc, #188]	@ (800ede4 <TIM_Base_SetConfig+0x12c>)
 800ed26:	4293      	cmp	r3, r2
 800ed28:	d01b      	beq.n	800ed62 <TIM_Base_SetConfig+0xaa>
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	4a2e      	ldr	r2, [pc, #184]	@ (800ede8 <TIM_Base_SetConfig+0x130>)
 800ed2e:	4293      	cmp	r3, r2
 800ed30:	d017      	beq.n	800ed62 <TIM_Base_SetConfig+0xaa>
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	4a2d      	ldr	r2, [pc, #180]	@ (800edec <TIM_Base_SetConfig+0x134>)
 800ed36:	4293      	cmp	r3, r2
 800ed38:	d013      	beq.n	800ed62 <TIM_Base_SetConfig+0xaa>
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	4a2c      	ldr	r2, [pc, #176]	@ (800edf0 <TIM_Base_SetConfig+0x138>)
 800ed3e:	4293      	cmp	r3, r2
 800ed40:	d00f      	beq.n	800ed62 <TIM_Base_SetConfig+0xaa>
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	4a2b      	ldr	r2, [pc, #172]	@ (800edf4 <TIM_Base_SetConfig+0x13c>)
 800ed46:	4293      	cmp	r3, r2
 800ed48:	d00b      	beq.n	800ed62 <TIM_Base_SetConfig+0xaa>
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	4a2a      	ldr	r2, [pc, #168]	@ (800edf8 <TIM_Base_SetConfig+0x140>)
 800ed4e:	4293      	cmp	r3, r2
 800ed50:	d007      	beq.n	800ed62 <TIM_Base_SetConfig+0xaa>
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	4a29      	ldr	r2, [pc, #164]	@ (800edfc <TIM_Base_SetConfig+0x144>)
 800ed56:	4293      	cmp	r3, r2
 800ed58:	d003      	beq.n	800ed62 <TIM_Base_SetConfig+0xaa>
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	4a28      	ldr	r2, [pc, #160]	@ (800ee00 <TIM_Base_SetConfig+0x148>)
 800ed5e:	4293      	cmp	r3, r2
 800ed60:	d108      	bne.n	800ed74 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ed68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ed6a:	683b      	ldr	r3, [r7, #0]
 800ed6c:	68db      	ldr	r3, [r3, #12]
 800ed6e:	68fa      	ldr	r2, [r7, #12]
 800ed70:	4313      	orrs	r3, r2
 800ed72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ed7a:	683b      	ldr	r3, [r7, #0]
 800ed7c:	695b      	ldr	r3, [r3, #20]
 800ed7e:	4313      	orrs	r3, r2
 800ed80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	68fa      	ldr	r2, [r7, #12]
 800ed86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	689a      	ldr	r2, [r3, #8]
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ed90:	683b      	ldr	r3, [r7, #0]
 800ed92:	681a      	ldr	r2, [r3, #0]
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	4a10      	ldr	r2, [pc, #64]	@ (800eddc <TIM_Base_SetConfig+0x124>)
 800ed9c:	4293      	cmp	r3, r2
 800ed9e:	d00f      	beq.n	800edc0 <TIM_Base_SetConfig+0x108>
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	4a12      	ldr	r2, [pc, #72]	@ (800edec <TIM_Base_SetConfig+0x134>)
 800eda4:	4293      	cmp	r3, r2
 800eda6:	d00b      	beq.n	800edc0 <TIM_Base_SetConfig+0x108>
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	4a11      	ldr	r2, [pc, #68]	@ (800edf0 <TIM_Base_SetConfig+0x138>)
 800edac:	4293      	cmp	r3, r2
 800edae:	d007      	beq.n	800edc0 <TIM_Base_SetConfig+0x108>
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	4a10      	ldr	r2, [pc, #64]	@ (800edf4 <TIM_Base_SetConfig+0x13c>)
 800edb4:	4293      	cmp	r3, r2
 800edb6:	d003      	beq.n	800edc0 <TIM_Base_SetConfig+0x108>
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	4a0f      	ldr	r2, [pc, #60]	@ (800edf8 <TIM_Base_SetConfig+0x140>)
 800edbc:	4293      	cmp	r3, r2
 800edbe:	d103      	bne.n	800edc8 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800edc0:	683b      	ldr	r3, [r7, #0]
 800edc2:	691a      	ldr	r2, [r3, #16]
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2201      	movs	r2, #1
 800edcc:	615a      	str	r2, [r3, #20]
}
 800edce:	bf00      	nop
 800edd0:	3714      	adds	r7, #20
 800edd2:	46bd      	mov	sp, r7
 800edd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd8:	4770      	bx	lr
 800edda:	bf00      	nop
 800eddc:	40010000 	.word	0x40010000
 800ede0:	40000400 	.word	0x40000400
 800ede4:	40000800 	.word	0x40000800
 800ede8:	40000c00 	.word	0x40000c00
 800edec:	40010400 	.word	0x40010400
 800edf0:	40014000 	.word	0x40014000
 800edf4:	40014400 	.word	0x40014400
 800edf8:	40014800 	.word	0x40014800
 800edfc:	4000e000 	.word	0x4000e000
 800ee00:	4000e400 	.word	0x4000e400

0800ee04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ee04:	b480      	push	{r7}
 800ee06:	b087      	sub	sp, #28
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
 800ee0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	6a1b      	ldr	r3, [r3, #32]
 800ee12:	f023 0201 	bic.w	r2, r3, #1
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	6a1b      	ldr	r3, [r3, #32]
 800ee1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	685b      	ldr	r3, [r3, #4]
 800ee24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	699b      	ldr	r3, [r3, #24]
 800ee2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ee2c:	68fa      	ldr	r2, [r7, #12]
 800ee2e:	4b37      	ldr	r3, [pc, #220]	@ (800ef0c <TIM_OC1_SetConfig+0x108>)
 800ee30:	4013      	ands	r3, r2
 800ee32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	f023 0303 	bic.w	r3, r3, #3
 800ee3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ee3c:	683b      	ldr	r3, [r7, #0]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	68fa      	ldr	r2, [r7, #12]
 800ee42:	4313      	orrs	r3, r2
 800ee44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ee46:	697b      	ldr	r3, [r7, #20]
 800ee48:	f023 0302 	bic.w	r3, r3, #2
 800ee4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	689b      	ldr	r3, [r3, #8]
 800ee52:	697a      	ldr	r2, [r7, #20]
 800ee54:	4313      	orrs	r3, r2
 800ee56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	4a2d      	ldr	r2, [pc, #180]	@ (800ef10 <TIM_OC1_SetConfig+0x10c>)
 800ee5c:	4293      	cmp	r3, r2
 800ee5e:	d00f      	beq.n	800ee80 <TIM_OC1_SetConfig+0x7c>
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	4a2c      	ldr	r2, [pc, #176]	@ (800ef14 <TIM_OC1_SetConfig+0x110>)
 800ee64:	4293      	cmp	r3, r2
 800ee66:	d00b      	beq.n	800ee80 <TIM_OC1_SetConfig+0x7c>
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	4a2b      	ldr	r2, [pc, #172]	@ (800ef18 <TIM_OC1_SetConfig+0x114>)
 800ee6c:	4293      	cmp	r3, r2
 800ee6e:	d007      	beq.n	800ee80 <TIM_OC1_SetConfig+0x7c>
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	4a2a      	ldr	r2, [pc, #168]	@ (800ef1c <TIM_OC1_SetConfig+0x118>)
 800ee74:	4293      	cmp	r3, r2
 800ee76:	d003      	beq.n	800ee80 <TIM_OC1_SetConfig+0x7c>
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	4a29      	ldr	r2, [pc, #164]	@ (800ef20 <TIM_OC1_SetConfig+0x11c>)
 800ee7c:	4293      	cmp	r3, r2
 800ee7e:	d10c      	bne.n	800ee9a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ee80:	697b      	ldr	r3, [r7, #20]
 800ee82:	f023 0308 	bic.w	r3, r3, #8
 800ee86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	68db      	ldr	r3, [r3, #12]
 800ee8c:	697a      	ldr	r2, [r7, #20]
 800ee8e:	4313      	orrs	r3, r2
 800ee90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ee92:	697b      	ldr	r3, [r7, #20]
 800ee94:	f023 0304 	bic.w	r3, r3, #4
 800ee98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	4a1c      	ldr	r2, [pc, #112]	@ (800ef10 <TIM_OC1_SetConfig+0x10c>)
 800ee9e:	4293      	cmp	r3, r2
 800eea0:	d00f      	beq.n	800eec2 <TIM_OC1_SetConfig+0xbe>
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	4a1b      	ldr	r2, [pc, #108]	@ (800ef14 <TIM_OC1_SetConfig+0x110>)
 800eea6:	4293      	cmp	r3, r2
 800eea8:	d00b      	beq.n	800eec2 <TIM_OC1_SetConfig+0xbe>
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	4a1a      	ldr	r2, [pc, #104]	@ (800ef18 <TIM_OC1_SetConfig+0x114>)
 800eeae:	4293      	cmp	r3, r2
 800eeb0:	d007      	beq.n	800eec2 <TIM_OC1_SetConfig+0xbe>
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	4a19      	ldr	r2, [pc, #100]	@ (800ef1c <TIM_OC1_SetConfig+0x118>)
 800eeb6:	4293      	cmp	r3, r2
 800eeb8:	d003      	beq.n	800eec2 <TIM_OC1_SetConfig+0xbe>
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	4a18      	ldr	r2, [pc, #96]	@ (800ef20 <TIM_OC1_SetConfig+0x11c>)
 800eebe:	4293      	cmp	r3, r2
 800eec0:	d111      	bne.n	800eee6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800eec2:	693b      	ldr	r3, [r7, #16]
 800eec4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800eec8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800eeca:	693b      	ldr	r3, [r7, #16]
 800eecc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800eed0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800eed2:	683b      	ldr	r3, [r7, #0]
 800eed4:	695b      	ldr	r3, [r3, #20]
 800eed6:	693a      	ldr	r2, [r7, #16]
 800eed8:	4313      	orrs	r3, r2
 800eeda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800eedc:	683b      	ldr	r3, [r7, #0]
 800eede:	699b      	ldr	r3, [r3, #24]
 800eee0:	693a      	ldr	r2, [r7, #16]
 800eee2:	4313      	orrs	r3, r2
 800eee4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	693a      	ldr	r2, [r7, #16]
 800eeea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	68fa      	ldr	r2, [r7, #12]
 800eef0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800eef2:	683b      	ldr	r3, [r7, #0]
 800eef4:	685a      	ldr	r2, [r3, #4]
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	697a      	ldr	r2, [r7, #20]
 800eefe:	621a      	str	r2, [r3, #32]
}
 800ef00:	bf00      	nop
 800ef02:	371c      	adds	r7, #28
 800ef04:	46bd      	mov	sp, r7
 800ef06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0a:	4770      	bx	lr
 800ef0c:	fffeff8f 	.word	0xfffeff8f
 800ef10:	40010000 	.word	0x40010000
 800ef14:	40010400 	.word	0x40010400
 800ef18:	40014000 	.word	0x40014000
 800ef1c:	40014400 	.word	0x40014400
 800ef20:	40014800 	.word	0x40014800

0800ef24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ef24:	b480      	push	{r7}
 800ef26:	b087      	sub	sp, #28
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
 800ef2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	6a1b      	ldr	r3, [r3, #32]
 800ef32:	f023 0210 	bic.w	r2, r3, #16
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	6a1b      	ldr	r3, [r3, #32]
 800ef3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	685b      	ldr	r3, [r3, #4]
 800ef44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	699b      	ldr	r3, [r3, #24]
 800ef4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ef4c:	68fa      	ldr	r2, [r7, #12]
 800ef4e:	4b34      	ldr	r3, [pc, #208]	@ (800f020 <TIM_OC2_SetConfig+0xfc>)
 800ef50:	4013      	ands	r3, r2
 800ef52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ef5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ef5c:	683b      	ldr	r3, [r7, #0]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	021b      	lsls	r3, r3, #8
 800ef62:	68fa      	ldr	r2, [r7, #12]
 800ef64:	4313      	orrs	r3, r2
 800ef66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ef68:	697b      	ldr	r3, [r7, #20]
 800ef6a:	f023 0320 	bic.w	r3, r3, #32
 800ef6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ef70:	683b      	ldr	r3, [r7, #0]
 800ef72:	689b      	ldr	r3, [r3, #8]
 800ef74:	011b      	lsls	r3, r3, #4
 800ef76:	697a      	ldr	r2, [r7, #20]
 800ef78:	4313      	orrs	r3, r2
 800ef7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	4a29      	ldr	r2, [pc, #164]	@ (800f024 <TIM_OC2_SetConfig+0x100>)
 800ef80:	4293      	cmp	r3, r2
 800ef82:	d003      	beq.n	800ef8c <TIM_OC2_SetConfig+0x68>
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	4a28      	ldr	r2, [pc, #160]	@ (800f028 <TIM_OC2_SetConfig+0x104>)
 800ef88:	4293      	cmp	r3, r2
 800ef8a:	d10d      	bne.n	800efa8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ef8c:	697b      	ldr	r3, [r7, #20]
 800ef8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ef92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ef94:	683b      	ldr	r3, [r7, #0]
 800ef96:	68db      	ldr	r3, [r3, #12]
 800ef98:	011b      	lsls	r3, r3, #4
 800ef9a:	697a      	ldr	r2, [r7, #20]
 800ef9c:	4313      	orrs	r3, r2
 800ef9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800efa0:	697b      	ldr	r3, [r7, #20]
 800efa2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800efa6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	4a1e      	ldr	r2, [pc, #120]	@ (800f024 <TIM_OC2_SetConfig+0x100>)
 800efac:	4293      	cmp	r3, r2
 800efae:	d00f      	beq.n	800efd0 <TIM_OC2_SetConfig+0xac>
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	4a1d      	ldr	r2, [pc, #116]	@ (800f028 <TIM_OC2_SetConfig+0x104>)
 800efb4:	4293      	cmp	r3, r2
 800efb6:	d00b      	beq.n	800efd0 <TIM_OC2_SetConfig+0xac>
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	4a1c      	ldr	r2, [pc, #112]	@ (800f02c <TIM_OC2_SetConfig+0x108>)
 800efbc:	4293      	cmp	r3, r2
 800efbe:	d007      	beq.n	800efd0 <TIM_OC2_SetConfig+0xac>
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	4a1b      	ldr	r2, [pc, #108]	@ (800f030 <TIM_OC2_SetConfig+0x10c>)
 800efc4:	4293      	cmp	r3, r2
 800efc6:	d003      	beq.n	800efd0 <TIM_OC2_SetConfig+0xac>
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	4a1a      	ldr	r2, [pc, #104]	@ (800f034 <TIM_OC2_SetConfig+0x110>)
 800efcc:	4293      	cmp	r3, r2
 800efce:	d113      	bne.n	800eff8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800efd0:	693b      	ldr	r3, [r7, #16]
 800efd2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800efd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800efd8:	693b      	ldr	r3, [r7, #16]
 800efda:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800efde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800efe0:	683b      	ldr	r3, [r7, #0]
 800efe2:	695b      	ldr	r3, [r3, #20]
 800efe4:	009b      	lsls	r3, r3, #2
 800efe6:	693a      	ldr	r2, [r7, #16]
 800efe8:	4313      	orrs	r3, r2
 800efea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800efec:	683b      	ldr	r3, [r7, #0]
 800efee:	699b      	ldr	r3, [r3, #24]
 800eff0:	009b      	lsls	r3, r3, #2
 800eff2:	693a      	ldr	r2, [r7, #16]
 800eff4:	4313      	orrs	r3, r2
 800eff6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	693a      	ldr	r2, [r7, #16]
 800effc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	68fa      	ldr	r2, [r7, #12]
 800f002:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f004:	683b      	ldr	r3, [r7, #0]
 800f006:	685a      	ldr	r2, [r3, #4]
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	697a      	ldr	r2, [r7, #20]
 800f010:	621a      	str	r2, [r3, #32]
}
 800f012:	bf00      	nop
 800f014:	371c      	adds	r7, #28
 800f016:	46bd      	mov	sp, r7
 800f018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01c:	4770      	bx	lr
 800f01e:	bf00      	nop
 800f020:	feff8fff 	.word	0xfeff8fff
 800f024:	40010000 	.word	0x40010000
 800f028:	40010400 	.word	0x40010400
 800f02c:	40014000 	.word	0x40014000
 800f030:	40014400 	.word	0x40014400
 800f034:	40014800 	.word	0x40014800

0800f038 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f038:	b480      	push	{r7}
 800f03a:	b087      	sub	sp, #28
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
 800f040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	6a1b      	ldr	r3, [r3, #32]
 800f046:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	6a1b      	ldr	r3, [r3, #32]
 800f052:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	685b      	ldr	r3, [r3, #4]
 800f058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	69db      	ldr	r3, [r3, #28]
 800f05e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f060:	68fa      	ldr	r2, [r7, #12]
 800f062:	4b33      	ldr	r3, [pc, #204]	@ (800f130 <TIM_OC3_SetConfig+0xf8>)
 800f064:	4013      	ands	r3, r2
 800f066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	f023 0303 	bic.w	r3, r3, #3
 800f06e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f070:	683b      	ldr	r3, [r7, #0]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	68fa      	ldr	r2, [r7, #12]
 800f076:	4313      	orrs	r3, r2
 800f078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f07a:	697b      	ldr	r3, [r7, #20]
 800f07c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f080:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f082:	683b      	ldr	r3, [r7, #0]
 800f084:	689b      	ldr	r3, [r3, #8]
 800f086:	021b      	lsls	r3, r3, #8
 800f088:	697a      	ldr	r2, [r7, #20]
 800f08a:	4313      	orrs	r3, r2
 800f08c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	4a28      	ldr	r2, [pc, #160]	@ (800f134 <TIM_OC3_SetConfig+0xfc>)
 800f092:	4293      	cmp	r3, r2
 800f094:	d003      	beq.n	800f09e <TIM_OC3_SetConfig+0x66>
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	4a27      	ldr	r2, [pc, #156]	@ (800f138 <TIM_OC3_SetConfig+0x100>)
 800f09a:	4293      	cmp	r3, r2
 800f09c:	d10d      	bne.n	800f0ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f09e:	697b      	ldr	r3, [r7, #20]
 800f0a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f0a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	68db      	ldr	r3, [r3, #12]
 800f0aa:	021b      	lsls	r3, r3, #8
 800f0ac:	697a      	ldr	r2, [r7, #20]
 800f0ae:	4313      	orrs	r3, r2
 800f0b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f0b2:	697b      	ldr	r3, [r7, #20]
 800f0b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f0b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	4a1d      	ldr	r2, [pc, #116]	@ (800f134 <TIM_OC3_SetConfig+0xfc>)
 800f0be:	4293      	cmp	r3, r2
 800f0c0:	d00f      	beq.n	800f0e2 <TIM_OC3_SetConfig+0xaa>
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	4a1c      	ldr	r2, [pc, #112]	@ (800f138 <TIM_OC3_SetConfig+0x100>)
 800f0c6:	4293      	cmp	r3, r2
 800f0c8:	d00b      	beq.n	800f0e2 <TIM_OC3_SetConfig+0xaa>
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	4a1b      	ldr	r2, [pc, #108]	@ (800f13c <TIM_OC3_SetConfig+0x104>)
 800f0ce:	4293      	cmp	r3, r2
 800f0d0:	d007      	beq.n	800f0e2 <TIM_OC3_SetConfig+0xaa>
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	4a1a      	ldr	r2, [pc, #104]	@ (800f140 <TIM_OC3_SetConfig+0x108>)
 800f0d6:	4293      	cmp	r3, r2
 800f0d8:	d003      	beq.n	800f0e2 <TIM_OC3_SetConfig+0xaa>
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	4a19      	ldr	r2, [pc, #100]	@ (800f144 <TIM_OC3_SetConfig+0x10c>)
 800f0de:	4293      	cmp	r3, r2
 800f0e0:	d113      	bne.n	800f10a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f0e2:	693b      	ldr	r3, [r7, #16]
 800f0e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f0e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f0ea:	693b      	ldr	r3, [r7, #16]
 800f0ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f0f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f0f2:	683b      	ldr	r3, [r7, #0]
 800f0f4:	695b      	ldr	r3, [r3, #20]
 800f0f6:	011b      	lsls	r3, r3, #4
 800f0f8:	693a      	ldr	r2, [r7, #16]
 800f0fa:	4313      	orrs	r3, r2
 800f0fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f0fe:	683b      	ldr	r3, [r7, #0]
 800f100:	699b      	ldr	r3, [r3, #24]
 800f102:	011b      	lsls	r3, r3, #4
 800f104:	693a      	ldr	r2, [r7, #16]
 800f106:	4313      	orrs	r3, r2
 800f108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	693a      	ldr	r2, [r7, #16]
 800f10e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	68fa      	ldr	r2, [r7, #12]
 800f114:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f116:	683b      	ldr	r3, [r7, #0]
 800f118:	685a      	ldr	r2, [r3, #4]
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	697a      	ldr	r2, [r7, #20]
 800f122:	621a      	str	r2, [r3, #32]
}
 800f124:	bf00      	nop
 800f126:	371c      	adds	r7, #28
 800f128:	46bd      	mov	sp, r7
 800f12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12e:	4770      	bx	lr
 800f130:	fffeff8f 	.word	0xfffeff8f
 800f134:	40010000 	.word	0x40010000
 800f138:	40010400 	.word	0x40010400
 800f13c:	40014000 	.word	0x40014000
 800f140:	40014400 	.word	0x40014400
 800f144:	40014800 	.word	0x40014800

0800f148 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f148:	b480      	push	{r7}
 800f14a:	b087      	sub	sp, #28
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
 800f150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	6a1b      	ldr	r3, [r3, #32]
 800f156:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	6a1b      	ldr	r3, [r3, #32]
 800f162:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	685b      	ldr	r3, [r3, #4]
 800f168:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	69db      	ldr	r3, [r3, #28]
 800f16e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f170:	68fa      	ldr	r2, [r7, #12]
 800f172:	4b24      	ldr	r3, [pc, #144]	@ (800f204 <TIM_OC4_SetConfig+0xbc>)
 800f174:	4013      	ands	r3, r2
 800f176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f17e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f180:	683b      	ldr	r3, [r7, #0]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	021b      	lsls	r3, r3, #8
 800f186:	68fa      	ldr	r2, [r7, #12]
 800f188:	4313      	orrs	r3, r2
 800f18a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f18c:	693b      	ldr	r3, [r7, #16]
 800f18e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f192:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f194:	683b      	ldr	r3, [r7, #0]
 800f196:	689b      	ldr	r3, [r3, #8]
 800f198:	031b      	lsls	r3, r3, #12
 800f19a:	693a      	ldr	r2, [r7, #16]
 800f19c:	4313      	orrs	r3, r2
 800f19e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	4a19      	ldr	r2, [pc, #100]	@ (800f208 <TIM_OC4_SetConfig+0xc0>)
 800f1a4:	4293      	cmp	r3, r2
 800f1a6:	d00f      	beq.n	800f1c8 <TIM_OC4_SetConfig+0x80>
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	4a18      	ldr	r2, [pc, #96]	@ (800f20c <TIM_OC4_SetConfig+0xc4>)
 800f1ac:	4293      	cmp	r3, r2
 800f1ae:	d00b      	beq.n	800f1c8 <TIM_OC4_SetConfig+0x80>
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	4a17      	ldr	r2, [pc, #92]	@ (800f210 <TIM_OC4_SetConfig+0xc8>)
 800f1b4:	4293      	cmp	r3, r2
 800f1b6:	d007      	beq.n	800f1c8 <TIM_OC4_SetConfig+0x80>
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	4a16      	ldr	r2, [pc, #88]	@ (800f214 <TIM_OC4_SetConfig+0xcc>)
 800f1bc:	4293      	cmp	r3, r2
 800f1be:	d003      	beq.n	800f1c8 <TIM_OC4_SetConfig+0x80>
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	4a15      	ldr	r2, [pc, #84]	@ (800f218 <TIM_OC4_SetConfig+0xd0>)
 800f1c4:	4293      	cmp	r3, r2
 800f1c6:	d109      	bne.n	800f1dc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f1c8:	697b      	ldr	r3, [r7, #20]
 800f1ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f1ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f1d0:	683b      	ldr	r3, [r7, #0]
 800f1d2:	695b      	ldr	r3, [r3, #20]
 800f1d4:	019b      	lsls	r3, r3, #6
 800f1d6:	697a      	ldr	r2, [r7, #20]
 800f1d8:	4313      	orrs	r3, r2
 800f1da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	697a      	ldr	r2, [r7, #20]
 800f1e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	68fa      	ldr	r2, [r7, #12]
 800f1e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f1e8:	683b      	ldr	r3, [r7, #0]
 800f1ea:	685a      	ldr	r2, [r3, #4]
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	693a      	ldr	r2, [r7, #16]
 800f1f4:	621a      	str	r2, [r3, #32]
}
 800f1f6:	bf00      	nop
 800f1f8:	371c      	adds	r7, #28
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f200:	4770      	bx	lr
 800f202:	bf00      	nop
 800f204:	feff8fff 	.word	0xfeff8fff
 800f208:	40010000 	.word	0x40010000
 800f20c:	40010400 	.word	0x40010400
 800f210:	40014000 	.word	0x40014000
 800f214:	40014400 	.word	0x40014400
 800f218:	40014800 	.word	0x40014800

0800f21c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f21c:	b480      	push	{r7}
 800f21e:	b087      	sub	sp, #28
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
 800f224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	6a1b      	ldr	r3, [r3, #32]
 800f22a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	6a1b      	ldr	r3, [r3, #32]
 800f236:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	685b      	ldr	r3, [r3, #4]
 800f23c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f244:	68fa      	ldr	r2, [r7, #12]
 800f246:	4b21      	ldr	r3, [pc, #132]	@ (800f2cc <TIM_OC5_SetConfig+0xb0>)
 800f248:	4013      	ands	r3, r2
 800f24a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f24c:	683b      	ldr	r3, [r7, #0]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	68fa      	ldr	r2, [r7, #12]
 800f252:	4313      	orrs	r3, r2
 800f254:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f256:	693b      	ldr	r3, [r7, #16]
 800f258:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800f25c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f25e:	683b      	ldr	r3, [r7, #0]
 800f260:	689b      	ldr	r3, [r3, #8]
 800f262:	041b      	lsls	r3, r3, #16
 800f264:	693a      	ldr	r2, [r7, #16]
 800f266:	4313      	orrs	r3, r2
 800f268:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	4a18      	ldr	r2, [pc, #96]	@ (800f2d0 <TIM_OC5_SetConfig+0xb4>)
 800f26e:	4293      	cmp	r3, r2
 800f270:	d00f      	beq.n	800f292 <TIM_OC5_SetConfig+0x76>
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	4a17      	ldr	r2, [pc, #92]	@ (800f2d4 <TIM_OC5_SetConfig+0xb8>)
 800f276:	4293      	cmp	r3, r2
 800f278:	d00b      	beq.n	800f292 <TIM_OC5_SetConfig+0x76>
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	4a16      	ldr	r2, [pc, #88]	@ (800f2d8 <TIM_OC5_SetConfig+0xbc>)
 800f27e:	4293      	cmp	r3, r2
 800f280:	d007      	beq.n	800f292 <TIM_OC5_SetConfig+0x76>
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	4a15      	ldr	r2, [pc, #84]	@ (800f2dc <TIM_OC5_SetConfig+0xc0>)
 800f286:	4293      	cmp	r3, r2
 800f288:	d003      	beq.n	800f292 <TIM_OC5_SetConfig+0x76>
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	4a14      	ldr	r2, [pc, #80]	@ (800f2e0 <TIM_OC5_SetConfig+0xc4>)
 800f28e:	4293      	cmp	r3, r2
 800f290:	d109      	bne.n	800f2a6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f292:	697b      	ldr	r3, [r7, #20]
 800f294:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f298:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f29a:	683b      	ldr	r3, [r7, #0]
 800f29c:	695b      	ldr	r3, [r3, #20]
 800f29e:	021b      	lsls	r3, r3, #8
 800f2a0:	697a      	ldr	r2, [r7, #20]
 800f2a2:	4313      	orrs	r3, r2
 800f2a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	697a      	ldr	r2, [r7, #20]
 800f2aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	68fa      	ldr	r2, [r7, #12]
 800f2b0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f2b2:	683b      	ldr	r3, [r7, #0]
 800f2b4:	685a      	ldr	r2, [r3, #4]
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	693a      	ldr	r2, [r7, #16]
 800f2be:	621a      	str	r2, [r3, #32]
}
 800f2c0:	bf00      	nop
 800f2c2:	371c      	adds	r7, #28
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ca:	4770      	bx	lr
 800f2cc:	fffeff8f 	.word	0xfffeff8f
 800f2d0:	40010000 	.word	0x40010000
 800f2d4:	40010400 	.word	0x40010400
 800f2d8:	40014000 	.word	0x40014000
 800f2dc:	40014400 	.word	0x40014400
 800f2e0:	40014800 	.word	0x40014800

0800f2e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f2e4:	b480      	push	{r7}
 800f2e6:	b087      	sub	sp, #28
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
 800f2ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	6a1b      	ldr	r3, [r3, #32]
 800f2f2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	6a1b      	ldr	r3, [r3, #32]
 800f2fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	685b      	ldr	r3, [r3, #4]
 800f304:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f30a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f30c:	68fa      	ldr	r2, [r7, #12]
 800f30e:	4b22      	ldr	r3, [pc, #136]	@ (800f398 <TIM_OC6_SetConfig+0xb4>)
 800f310:	4013      	ands	r3, r2
 800f312:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f314:	683b      	ldr	r3, [r7, #0]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	021b      	lsls	r3, r3, #8
 800f31a:	68fa      	ldr	r2, [r7, #12]
 800f31c:	4313      	orrs	r3, r2
 800f31e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f320:	693b      	ldr	r3, [r7, #16]
 800f322:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f326:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f328:	683b      	ldr	r3, [r7, #0]
 800f32a:	689b      	ldr	r3, [r3, #8]
 800f32c:	051b      	lsls	r3, r3, #20
 800f32e:	693a      	ldr	r2, [r7, #16]
 800f330:	4313      	orrs	r3, r2
 800f332:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	4a19      	ldr	r2, [pc, #100]	@ (800f39c <TIM_OC6_SetConfig+0xb8>)
 800f338:	4293      	cmp	r3, r2
 800f33a:	d00f      	beq.n	800f35c <TIM_OC6_SetConfig+0x78>
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	4a18      	ldr	r2, [pc, #96]	@ (800f3a0 <TIM_OC6_SetConfig+0xbc>)
 800f340:	4293      	cmp	r3, r2
 800f342:	d00b      	beq.n	800f35c <TIM_OC6_SetConfig+0x78>
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	4a17      	ldr	r2, [pc, #92]	@ (800f3a4 <TIM_OC6_SetConfig+0xc0>)
 800f348:	4293      	cmp	r3, r2
 800f34a:	d007      	beq.n	800f35c <TIM_OC6_SetConfig+0x78>
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	4a16      	ldr	r2, [pc, #88]	@ (800f3a8 <TIM_OC6_SetConfig+0xc4>)
 800f350:	4293      	cmp	r3, r2
 800f352:	d003      	beq.n	800f35c <TIM_OC6_SetConfig+0x78>
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	4a15      	ldr	r2, [pc, #84]	@ (800f3ac <TIM_OC6_SetConfig+0xc8>)
 800f358:	4293      	cmp	r3, r2
 800f35a:	d109      	bne.n	800f370 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f35c:	697b      	ldr	r3, [r7, #20]
 800f35e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f362:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f364:	683b      	ldr	r3, [r7, #0]
 800f366:	695b      	ldr	r3, [r3, #20]
 800f368:	029b      	lsls	r3, r3, #10
 800f36a:	697a      	ldr	r2, [r7, #20]
 800f36c:	4313      	orrs	r3, r2
 800f36e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	697a      	ldr	r2, [r7, #20]
 800f374:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	68fa      	ldr	r2, [r7, #12]
 800f37a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	685a      	ldr	r2, [r3, #4]
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	693a      	ldr	r2, [r7, #16]
 800f388:	621a      	str	r2, [r3, #32]
}
 800f38a:	bf00      	nop
 800f38c:	371c      	adds	r7, #28
 800f38e:	46bd      	mov	sp, r7
 800f390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f394:	4770      	bx	lr
 800f396:	bf00      	nop
 800f398:	feff8fff 	.word	0xfeff8fff
 800f39c:	40010000 	.word	0x40010000
 800f3a0:	40010400 	.word	0x40010400
 800f3a4:	40014000 	.word	0x40014000
 800f3a8:	40014400 	.word	0x40014400
 800f3ac:	40014800 	.word	0x40014800

0800f3b0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800f3b0:	b480      	push	{r7}
 800f3b2:	b087      	sub	sp, #28
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	60f8      	str	r0, [r7, #12]
 800f3b8:	60b9      	str	r1, [r7, #8]
 800f3ba:	607a      	str	r2, [r7, #4]
 800f3bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	6a1b      	ldr	r3, [r3, #32]
 800f3c2:	f023 0201 	bic.w	r2, r3, #1
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	699b      	ldr	r3, [r3, #24]
 800f3ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	6a1b      	ldr	r3, [r3, #32]
 800f3d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	4a2c      	ldr	r2, [pc, #176]	@ (800f48c <TIM_TI1_SetConfig+0xdc>)
 800f3da:	4293      	cmp	r3, r2
 800f3dc:	d023      	beq.n	800f426 <TIM_TI1_SetConfig+0x76>
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f3e4:	d01f      	beq.n	800f426 <TIM_TI1_SetConfig+0x76>
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	4a29      	ldr	r2, [pc, #164]	@ (800f490 <TIM_TI1_SetConfig+0xe0>)
 800f3ea:	4293      	cmp	r3, r2
 800f3ec:	d01b      	beq.n	800f426 <TIM_TI1_SetConfig+0x76>
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	4a28      	ldr	r2, [pc, #160]	@ (800f494 <TIM_TI1_SetConfig+0xe4>)
 800f3f2:	4293      	cmp	r3, r2
 800f3f4:	d017      	beq.n	800f426 <TIM_TI1_SetConfig+0x76>
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	4a27      	ldr	r2, [pc, #156]	@ (800f498 <TIM_TI1_SetConfig+0xe8>)
 800f3fa:	4293      	cmp	r3, r2
 800f3fc:	d013      	beq.n	800f426 <TIM_TI1_SetConfig+0x76>
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	4a26      	ldr	r2, [pc, #152]	@ (800f49c <TIM_TI1_SetConfig+0xec>)
 800f402:	4293      	cmp	r3, r2
 800f404:	d00f      	beq.n	800f426 <TIM_TI1_SetConfig+0x76>
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	4a25      	ldr	r2, [pc, #148]	@ (800f4a0 <TIM_TI1_SetConfig+0xf0>)
 800f40a:	4293      	cmp	r3, r2
 800f40c:	d00b      	beq.n	800f426 <TIM_TI1_SetConfig+0x76>
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	4a24      	ldr	r2, [pc, #144]	@ (800f4a4 <TIM_TI1_SetConfig+0xf4>)
 800f412:	4293      	cmp	r3, r2
 800f414:	d007      	beq.n	800f426 <TIM_TI1_SetConfig+0x76>
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	4a23      	ldr	r2, [pc, #140]	@ (800f4a8 <TIM_TI1_SetConfig+0xf8>)
 800f41a:	4293      	cmp	r3, r2
 800f41c:	d003      	beq.n	800f426 <TIM_TI1_SetConfig+0x76>
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	4a22      	ldr	r2, [pc, #136]	@ (800f4ac <TIM_TI1_SetConfig+0xfc>)
 800f422:	4293      	cmp	r3, r2
 800f424:	d101      	bne.n	800f42a <TIM_TI1_SetConfig+0x7a>
 800f426:	2301      	movs	r3, #1
 800f428:	e000      	b.n	800f42c <TIM_TI1_SetConfig+0x7c>
 800f42a:	2300      	movs	r3, #0
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d008      	beq.n	800f442 <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800f430:	697b      	ldr	r3, [r7, #20]
 800f432:	f023 0303 	bic.w	r3, r3, #3
 800f436:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800f438:	697a      	ldr	r2, [r7, #20]
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	4313      	orrs	r3, r2
 800f43e:	617b      	str	r3, [r7, #20]
 800f440:	e003      	b.n	800f44a <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800f442:	697b      	ldr	r3, [r7, #20]
 800f444:	f043 0301 	orr.w	r3, r3, #1
 800f448:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f44a:	697b      	ldr	r3, [r7, #20]
 800f44c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f450:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800f452:	683b      	ldr	r3, [r7, #0]
 800f454:	011b      	lsls	r3, r3, #4
 800f456:	b2db      	uxtb	r3, r3
 800f458:	697a      	ldr	r2, [r7, #20]
 800f45a:	4313      	orrs	r3, r2
 800f45c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f45e:	693b      	ldr	r3, [r7, #16]
 800f460:	f023 030a 	bic.w	r3, r3, #10
 800f464:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800f466:	68bb      	ldr	r3, [r7, #8]
 800f468:	f003 030a 	and.w	r3, r3, #10
 800f46c:	693a      	ldr	r2, [r7, #16]
 800f46e:	4313      	orrs	r3, r2
 800f470:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	697a      	ldr	r2, [r7, #20]
 800f476:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	693a      	ldr	r2, [r7, #16]
 800f47c:	621a      	str	r2, [r3, #32]
}
 800f47e:	bf00      	nop
 800f480:	371c      	adds	r7, #28
 800f482:	46bd      	mov	sp, r7
 800f484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f488:	4770      	bx	lr
 800f48a:	bf00      	nop
 800f48c:	40010000 	.word	0x40010000
 800f490:	40000400 	.word	0x40000400
 800f494:	40000800 	.word	0x40000800
 800f498:	40000c00 	.word	0x40000c00
 800f49c:	40010400 	.word	0x40010400
 800f4a0:	40001800 	.word	0x40001800
 800f4a4:	40014000 	.word	0x40014000
 800f4a8:	4000e000 	.word	0x4000e000
 800f4ac:	4000e400 	.word	0x4000e400

0800f4b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f4b0:	b480      	push	{r7}
 800f4b2:	b087      	sub	sp, #28
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	60f8      	str	r0, [r7, #12]
 800f4b8:	60b9      	str	r1, [r7, #8]
 800f4ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	6a1b      	ldr	r3, [r3, #32]
 800f4c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	6a1b      	ldr	r3, [r3, #32]
 800f4c6:	f023 0201 	bic.w	r2, r3, #1
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	699b      	ldr	r3, [r3, #24]
 800f4d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f4d4:	693b      	ldr	r3, [r7, #16]
 800f4d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f4da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	011b      	lsls	r3, r3, #4
 800f4e0:	693a      	ldr	r2, [r7, #16]
 800f4e2:	4313      	orrs	r3, r2
 800f4e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f4e6:	697b      	ldr	r3, [r7, #20]
 800f4e8:	f023 030a 	bic.w	r3, r3, #10
 800f4ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f4ee:	697a      	ldr	r2, [r7, #20]
 800f4f0:	68bb      	ldr	r3, [r7, #8]
 800f4f2:	4313      	orrs	r3, r2
 800f4f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	693a      	ldr	r2, [r7, #16]
 800f4fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	697a      	ldr	r2, [r7, #20]
 800f500:	621a      	str	r2, [r3, #32]
}
 800f502:	bf00      	nop
 800f504:	371c      	adds	r7, #28
 800f506:	46bd      	mov	sp, r7
 800f508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50c:	4770      	bx	lr

0800f50e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800f50e:	b480      	push	{r7}
 800f510:	b087      	sub	sp, #28
 800f512:	af00      	add	r7, sp, #0
 800f514:	60f8      	str	r0, [r7, #12]
 800f516:	60b9      	str	r1, [r7, #8]
 800f518:	607a      	str	r2, [r7, #4]
 800f51a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	6a1b      	ldr	r3, [r3, #32]
 800f520:	f023 0210 	bic.w	r2, r3, #16
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	699b      	ldr	r3, [r3, #24]
 800f52c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	6a1b      	ldr	r3, [r3, #32]
 800f532:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800f534:	697b      	ldr	r3, [r7, #20]
 800f536:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f53a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	021b      	lsls	r3, r3, #8
 800f540:	697a      	ldr	r2, [r7, #20]
 800f542:	4313      	orrs	r3, r2
 800f544:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f546:	697b      	ldr	r3, [r7, #20]
 800f548:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f54c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800f54e:	683b      	ldr	r3, [r7, #0]
 800f550:	031b      	lsls	r3, r3, #12
 800f552:	b29b      	uxth	r3, r3
 800f554:	697a      	ldr	r2, [r7, #20]
 800f556:	4313      	orrs	r3, r2
 800f558:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f55a:	693b      	ldr	r3, [r7, #16]
 800f55c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f560:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800f562:	68bb      	ldr	r3, [r7, #8]
 800f564:	011b      	lsls	r3, r3, #4
 800f566:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800f56a:	693a      	ldr	r2, [r7, #16]
 800f56c:	4313      	orrs	r3, r2
 800f56e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	697a      	ldr	r2, [r7, #20]
 800f574:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	693a      	ldr	r2, [r7, #16]
 800f57a:	621a      	str	r2, [r3, #32]
}
 800f57c:	bf00      	nop
 800f57e:	371c      	adds	r7, #28
 800f580:	46bd      	mov	sp, r7
 800f582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f586:	4770      	bx	lr

0800f588 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f588:	b480      	push	{r7}
 800f58a:	b087      	sub	sp, #28
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	60f8      	str	r0, [r7, #12]
 800f590:	60b9      	str	r1, [r7, #8]
 800f592:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	6a1b      	ldr	r3, [r3, #32]
 800f598:	f023 0210 	bic.w	r2, r3, #16
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	699b      	ldr	r3, [r3, #24]
 800f5a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	6a1b      	ldr	r3, [r3, #32]
 800f5aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f5ac:	697b      	ldr	r3, [r7, #20]
 800f5ae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f5b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	031b      	lsls	r3, r3, #12
 800f5b8:	697a      	ldr	r2, [r7, #20]
 800f5ba:	4313      	orrs	r3, r2
 800f5bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f5be:	693b      	ldr	r3, [r7, #16]
 800f5c0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f5c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f5c6:	68bb      	ldr	r3, [r7, #8]
 800f5c8:	011b      	lsls	r3, r3, #4
 800f5ca:	693a      	ldr	r2, [r7, #16]
 800f5cc:	4313      	orrs	r3, r2
 800f5ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	697a      	ldr	r2, [r7, #20]
 800f5d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	693a      	ldr	r2, [r7, #16]
 800f5da:	621a      	str	r2, [r3, #32]
}
 800f5dc:	bf00      	nop
 800f5de:	371c      	adds	r7, #28
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e6:	4770      	bx	lr

0800f5e8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800f5e8:	b480      	push	{r7}
 800f5ea:	b087      	sub	sp, #28
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	60f8      	str	r0, [r7, #12]
 800f5f0:	60b9      	str	r1, [r7, #8]
 800f5f2:	607a      	str	r2, [r7, #4]
 800f5f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	6a1b      	ldr	r3, [r3, #32]
 800f5fa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	69db      	ldr	r3, [r3, #28]
 800f606:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	6a1b      	ldr	r3, [r3, #32]
 800f60c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800f60e:	697b      	ldr	r3, [r7, #20]
 800f610:	f023 0303 	bic.w	r3, r3, #3
 800f614:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800f616:	697a      	ldr	r2, [r7, #20]
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	4313      	orrs	r3, r2
 800f61c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800f61e:	697b      	ldr	r3, [r7, #20]
 800f620:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f624:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800f626:	683b      	ldr	r3, [r7, #0]
 800f628:	011b      	lsls	r3, r3, #4
 800f62a:	b2db      	uxtb	r3, r3
 800f62c:	697a      	ldr	r2, [r7, #20]
 800f62e:	4313      	orrs	r3, r2
 800f630:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800f632:	693b      	ldr	r3, [r7, #16]
 800f634:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800f638:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800f63a:	68bb      	ldr	r3, [r7, #8]
 800f63c:	021b      	lsls	r3, r3, #8
 800f63e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800f642:	693a      	ldr	r2, [r7, #16]
 800f644:	4313      	orrs	r3, r2
 800f646:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	697a      	ldr	r2, [r7, #20]
 800f64c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	693a      	ldr	r2, [r7, #16]
 800f652:	621a      	str	r2, [r3, #32]
}
 800f654:	bf00      	nop
 800f656:	371c      	adds	r7, #28
 800f658:	46bd      	mov	sp, r7
 800f65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65e:	4770      	bx	lr

0800f660 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800f660:	b480      	push	{r7}
 800f662:	b087      	sub	sp, #28
 800f664:	af00      	add	r7, sp, #0
 800f666:	60f8      	str	r0, [r7, #12]
 800f668:	60b9      	str	r1, [r7, #8]
 800f66a:	607a      	str	r2, [r7, #4]
 800f66c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	6a1b      	ldr	r3, [r3, #32]
 800f672:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	69db      	ldr	r3, [r3, #28]
 800f67e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	6a1b      	ldr	r3, [r3, #32]
 800f684:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800f686:	697b      	ldr	r3, [r7, #20]
 800f688:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f68c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	021b      	lsls	r3, r3, #8
 800f692:	697a      	ldr	r2, [r7, #20]
 800f694:	4313      	orrs	r3, r2
 800f696:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800f698:	697b      	ldr	r3, [r7, #20]
 800f69a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f69e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800f6a0:	683b      	ldr	r3, [r7, #0]
 800f6a2:	031b      	lsls	r3, r3, #12
 800f6a4:	b29b      	uxth	r3, r3
 800f6a6:	697a      	ldr	r2, [r7, #20]
 800f6a8:	4313      	orrs	r3, r2
 800f6aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800f6ac:	693b      	ldr	r3, [r7, #16]
 800f6ae:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800f6b2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800f6b4:	68bb      	ldr	r3, [r7, #8]
 800f6b6:	031b      	lsls	r3, r3, #12
 800f6b8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800f6bc:	693a      	ldr	r2, [r7, #16]
 800f6be:	4313      	orrs	r3, r2
 800f6c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	697a      	ldr	r2, [r7, #20]
 800f6c6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	693a      	ldr	r2, [r7, #16]
 800f6cc:	621a      	str	r2, [r3, #32]
}
 800f6ce:	bf00      	nop
 800f6d0:	371c      	adds	r7, #28
 800f6d2:	46bd      	mov	sp, r7
 800f6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d8:	4770      	bx	lr
	...

0800f6dc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f6dc:	b480      	push	{r7}
 800f6de:	b085      	sub	sp, #20
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]
 800f6e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	689b      	ldr	r3, [r3, #8]
 800f6ea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f6ec:	68fa      	ldr	r2, [r7, #12]
 800f6ee:	4b09      	ldr	r3, [pc, #36]	@ (800f714 <TIM_ITRx_SetConfig+0x38>)
 800f6f0:	4013      	ands	r3, r2
 800f6f2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f6f4:	683a      	ldr	r2, [r7, #0]
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	4313      	orrs	r3, r2
 800f6fa:	f043 0307 	orr.w	r3, r3, #7
 800f6fe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	68fa      	ldr	r2, [r7, #12]
 800f704:	609a      	str	r2, [r3, #8]
}
 800f706:	bf00      	nop
 800f708:	3714      	adds	r7, #20
 800f70a:	46bd      	mov	sp, r7
 800f70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f710:	4770      	bx	lr
 800f712:	bf00      	nop
 800f714:	ffcfff8f 	.word	0xffcfff8f

0800f718 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f718:	b480      	push	{r7}
 800f71a:	b087      	sub	sp, #28
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	60f8      	str	r0, [r7, #12]
 800f720:	60b9      	str	r1, [r7, #8]
 800f722:	607a      	str	r2, [r7, #4]
 800f724:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	689b      	ldr	r3, [r3, #8]
 800f72a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f72c:	697b      	ldr	r3, [r7, #20]
 800f72e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f732:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f734:	683b      	ldr	r3, [r7, #0]
 800f736:	021a      	lsls	r2, r3, #8
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	431a      	orrs	r2, r3
 800f73c:	68bb      	ldr	r3, [r7, #8]
 800f73e:	4313      	orrs	r3, r2
 800f740:	697a      	ldr	r2, [r7, #20]
 800f742:	4313      	orrs	r3, r2
 800f744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	697a      	ldr	r2, [r7, #20]
 800f74a:	609a      	str	r2, [r3, #8]
}
 800f74c:	bf00      	nop
 800f74e:	371c      	adds	r7, #28
 800f750:	46bd      	mov	sp, r7
 800f752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f756:	4770      	bx	lr

0800f758 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f758:	b480      	push	{r7}
 800f75a:	b087      	sub	sp, #28
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	60f8      	str	r0, [r7, #12]
 800f760:	60b9      	str	r1, [r7, #8]
 800f762:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f764:	68bb      	ldr	r3, [r7, #8]
 800f766:	f003 031f 	and.w	r3, r3, #31
 800f76a:	2201      	movs	r2, #1
 800f76c:	fa02 f303 	lsl.w	r3, r2, r3
 800f770:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	6a1a      	ldr	r2, [r3, #32]
 800f776:	697b      	ldr	r3, [r7, #20]
 800f778:	43db      	mvns	r3, r3
 800f77a:	401a      	ands	r2, r3
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	6a1a      	ldr	r2, [r3, #32]
 800f784:	68bb      	ldr	r3, [r7, #8]
 800f786:	f003 031f 	and.w	r3, r3, #31
 800f78a:	6879      	ldr	r1, [r7, #4]
 800f78c:	fa01 f303 	lsl.w	r3, r1, r3
 800f790:	431a      	orrs	r2, r3
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	621a      	str	r2, [r3, #32]
}
 800f796:	bf00      	nop
 800f798:	371c      	adds	r7, #28
 800f79a:	46bd      	mov	sp, r7
 800f79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a0:	4770      	bx	lr
	...

0800f7a4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b084      	sub	sp, #16
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
 800f7ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f7ae:	683b      	ldr	r3, [r7, #0]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d109      	bne.n	800f7c8 <HAL_TIMEx_PWMN_Start+0x24>
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f7ba:	b2db      	uxtb	r3, r3
 800f7bc:	2b01      	cmp	r3, #1
 800f7be:	bf14      	ite	ne
 800f7c0:	2301      	movne	r3, #1
 800f7c2:	2300      	moveq	r3, #0
 800f7c4:	b2db      	uxtb	r3, r3
 800f7c6:	e022      	b.n	800f80e <HAL_TIMEx_PWMN_Start+0x6a>
 800f7c8:	683b      	ldr	r3, [r7, #0]
 800f7ca:	2b04      	cmp	r3, #4
 800f7cc:	d109      	bne.n	800f7e2 <HAL_TIMEx_PWMN_Start+0x3e>
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f7d4:	b2db      	uxtb	r3, r3
 800f7d6:	2b01      	cmp	r3, #1
 800f7d8:	bf14      	ite	ne
 800f7da:	2301      	movne	r3, #1
 800f7dc:	2300      	moveq	r3, #0
 800f7de:	b2db      	uxtb	r3, r3
 800f7e0:	e015      	b.n	800f80e <HAL_TIMEx_PWMN_Start+0x6a>
 800f7e2:	683b      	ldr	r3, [r7, #0]
 800f7e4:	2b08      	cmp	r3, #8
 800f7e6:	d109      	bne.n	800f7fc <HAL_TIMEx_PWMN_Start+0x58>
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800f7ee:	b2db      	uxtb	r3, r3
 800f7f0:	2b01      	cmp	r3, #1
 800f7f2:	bf14      	ite	ne
 800f7f4:	2301      	movne	r3, #1
 800f7f6:	2300      	moveq	r3, #0
 800f7f8:	b2db      	uxtb	r3, r3
 800f7fa:	e008      	b.n	800f80e <HAL_TIMEx_PWMN_Start+0x6a>
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800f802:	b2db      	uxtb	r3, r3
 800f804:	2b01      	cmp	r3, #1
 800f806:	bf14      	ite	ne
 800f808:	2301      	movne	r3, #1
 800f80a:	2300      	moveq	r3, #0
 800f80c:	b2db      	uxtb	r3, r3
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d001      	beq.n	800f816 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800f812:	2301      	movs	r3, #1
 800f814:	e07d      	b.n	800f912 <HAL_TIMEx_PWMN_Start+0x16e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f816:	683b      	ldr	r3, [r7, #0]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d104      	bne.n	800f826 <HAL_TIMEx_PWMN_Start+0x82>
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	2202      	movs	r2, #2
 800f820:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f824:	e013      	b.n	800f84e <HAL_TIMEx_PWMN_Start+0xaa>
 800f826:	683b      	ldr	r3, [r7, #0]
 800f828:	2b04      	cmp	r3, #4
 800f82a:	d104      	bne.n	800f836 <HAL_TIMEx_PWMN_Start+0x92>
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	2202      	movs	r2, #2
 800f830:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f834:	e00b      	b.n	800f84e <HAL_TIMEx_PWMN_Start+0xaa>
 800f836:	683b      	ldr	r3, [r7, #0]
 800f838:	2b08      	cmp	r3, #8
 800f83a:	d104      	bne.n	800f846 <HAL_TIMEx_PWMN_Start+0xa2>
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	2202      	movs	r2, #2
 800f840:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f844:	e003      	b.n	800f84e <HAL_TIMEx_PWMN_Start+0xaa>
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	2202      	movs	r2, #2
 800f84a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	2204      	movs	r2, #4
 800f854:	6839      	ldr	r1, [r7, #0]
 800f856:	4618      	mov	r0, r3
 800f858:	f000 fa0e 	bl	800fc78 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f86a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	4a2a      	ldr	r2, [pc, #168]	@ (800f91c <HAL_TIMEx_PWMN_Start+0x178>)
 800f872:	4293      	cmp	r3, r2
 800f874:	d02c      	beq.n	800f8d0 <HAL_TIMEx_PWMN_Start+0x12c>
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f87e:	d027      	beq.n	800f8d0 <HAL_TIMEx_PWMN_Start+0x12c>
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	4a26      	ldr	r2, [pc, #152]	@ (800f920 <HAL_TIMEx_PWMN_Start+0x17c>)
 800f886:	4293      	cmp	r3, r2
 800f888:	d022      	beq.n	800f8d0 <HAL_TIMEx_PWMN_Start+0x12c>
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	4a25      	ldr	r2, [pc, #148]	@ (800f924 <HAL_TIMEx_PWMN_Start+0x180>)
 800f890:	4293      	cmp	r3, r2
 800f892:	d01d      	beq.n	800f8d0 <HAL_TIMEx_PWMN_Start+0x12c>
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	4a23      	ldr	r2, [pc, #140]	@ (800f928 <HAL_TIMEx_PWMN_Start+0x184>)
 800f89a:	4293      	cmp	r3, r2
 800f89c:	d018      	beq.n	800f8d0 <HAL_TIMEx_PWMN_Start+0x12c>
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	4a22      	ldr	r2, [pc, #136]	@ (800f92c <HAL_TIMEx_PWMN_Start+0x188>)
 800f8a4:	4293      	cmp	r3, r2
 800f8a6:	d013      	beq.n	800f8d0 <HAL_TIMEx_PWMN_Start+0x12c>
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	4a20      	ldr	r2, [pc, #128]	@ (800f930 <HAL_TIMEx_PWMN_Start+0x18c>)
 800f8ae:	4293      	cmp	r3, r2
 800f8b0:	d00e      	beq.n	800f8d0 <HAL_TIMEx_PWMN_Start+0x12c>
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	4a1f      	ldr	r2, [pc, #124]	@ (800f934 <HAL_TIMEx_PWMN_Start+0x190>)
 800f8b8:	4293      	cmp	r3, r2
 800f8ba:	d009      	beq.n	800f8d0 <HAL_TIMEx_PWMN_Start+0x12c>
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	4a1d      	ldr	r2, [pc, #116]	@ (800f938 <HAL_TIMEx_PWMN_Start+0x194>)
 800f8c2:	4293      	cmp	r3, r2
 800f8c4:	d004      	beq.n	800f8d0 <HAL_TIMEx_PWMN_Start+0x12c>
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	4a1c      	ldr	r2, [pc, #112]	@ (800f93c <HAL_TIMEx_PWMN_Start+0x198>)
 800f8cc:	4293      	cmp	r3, r2
 800f8ce:	d115      	bne.n	800f8fc <HAL_TIMEx_PWMN_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	689a      	ldr	r2, [r3, #8]
 800f8d6:	4b1a      	ldr	r3, [pc, #104]	@ (800f940 <HAL_TIMEx_PWMN_Start+0x19c>)
 800f8d8:	4013      	ands	r3, r2
 800f8da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	2b06      	cmp	r3, #6
 800f8e0:	d015      	beq.n	800f90e <HAL_TIMEx_PWMN_Start+0x16a>
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f8e8:	d011      	beq.n	800f90e <HAL_TIMEx_PWMN_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	681a      	ldr	r2, [r3, #0]
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	f042 0201 	orr.w	r2, r2, #1
 800f8f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f8fa:	e008      	b.n	800f90e <HAL_TIMEx_PWMN_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	681a      	ldr	r2, [r3, #0]
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	f042 0201 	orr.w	r2, r2, #1
 800f90a:	601a      	str	r2, [r3, #0]
 800f90c:	e000      	b.n	800f910 <HAL_TIMEx_PWMN_Start+0x16c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f90e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f910:	2300      	movs	r3, #0
}
 800f912:	4618      	mov	r0, r3
 800f914:	3710      	adds	r7, #16
 800f916:	46bd      	mov	sp, r7
 800f918:	bd80      	pop	{r7, pc}
 800f91a:	bf00      	nop
 800f91c:	40010000 	.word	0x40010000
 800f920:	40000400 	.word	0x40000400
 800f924:	40000800 	.word	0x40000800
 800f928:	40000c00 	.word	0x40000c00
 800f92c:	40010400 	.word	0x40010400
 800f930:	40001800 	.word	0x40001800
 800f934:	40014000 	.word	0x40014000
 800f938:	4000e000 	.word	0x4000e000
 800f93c:	4000e400 	.word	0x4000e400
 800f940:	00010007 	.word	0x00010007

0800f944 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b082      	sub	sp, #8
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
 800f94c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	2200      	movs	r2, #0
 800f954:	6839      	ldr	r1, [r7, #0]
 800f956:	4618      	mov	r0, r3
 800f958:	f000 f98e 	bl	800fc78 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	6a1a      	ldr	r2, [r3, #32]
 800f962:	f241 1311 	movw	r3, #4369	@ 0x1111
 800f966:	4013      	ands	r3, r2
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d10f      	bne.n	800f98c <HAL_TIMEx_PWMN_Stop+0x48>
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	6a1a      	ldr	r2, [r3, #32]
 800f972:	f240 4344 	movw	r3, #1092	@ 0x444
 800f976:	4013      	ands	r3, r2
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d107      	bne.n	800f98c <HAL_TIMEx_PWMN_Stop+0x48>
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800f98a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	6a1a      	ldr	r2, [r3, #32]
 800f992:	f241 1311 	movw	r3, #4369	@ 0x1111
 800f996:	4013      	ands	r3, r2
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d10f      	bne.n	800f9bc <HAL_TIMEx_PWMN_Stop+0x78>
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	6a1a      	ldr	r2, [r3, #32]
 800f9a2:	f240 4344 	movw	r3, #1092	@ 0x444
 800f9a6:	4013      	ands	r3, r2
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d107      	bne.n	800f9bc <HAL_TIMEx_PWMN_Stop+0x78>
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	681a      	ldr	r2, [r3, #0]
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	f022 0201 	bic.w	r2, r2, #1
 800f9ba:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f9bc:	683b      	ldr	r3, [r7, #0]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d104      	bne.n	800f9cc <HAL_TIMEx_PWMN_Stop+0x88>
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	2201      	movs	r2, #1
 800f9c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f9ca:	e013      	b.n	800f9f4 <HAL_TIMEx_PWMN_Stop+0xb0>
 800f9cc:	683b      	ldr	r3, [r7, #0]
 800f9ce:	2b04      	cmp	r3, #4
 800f9d0:	d104      	bne.n	800f9dc <HAL_TIMEx_PWMN_Stop+0x98>
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	2201      	movs	r2, #1
 800f9d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f9da:	e00b      	b.n	800f9f4 <HAL_TIMEx_PWMN_Stop+0xb0>
 800f9dc:	683b      	ldr	r3, [r7, #0]
 800f9de:	2b08      	cmp	r3, #8
 800f9e0:	d104      	bne.n	800f9ec <HAL_TIMEx_PWMN_Stop+0xa8>
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	2201      	movs	r2, #1
 800f9e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f9ea:	e003      	b.n	800f9f4 <HAL_TIMEx_PWMN_Stop+0xb0>
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	2201      	movs	r2, #1
 800f9f0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 800f9f4:	2300      	movs	r3, #0
}
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	3708      	adds	r7, #8
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	bd80      	pop	{r7, pc}
	...

0800fa00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fa00:	b480      	push	{r7}
 800fa02:	b085      	sub	sp, #20
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
 800fa08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fa10:	2b01      	cmp	r3, #1
 800fa12:	d101      	bne.n	800fa18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fa14:	2302      	movs	r3, #2
 800fa16:	e077      	b.n	800fb08 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	2201      	movs	r2, #1
 800fa1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	2202      	movs	r2, #2
 800fa24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	685b      	ldr	r3, [r3, #4]
 800fa2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	689b      	ldr	r3, [r3, #8]
 800fa36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	4a35      	ldr	r2, [pc, #212]	@ (800fb14 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fa3e:	4293      	cmp	r3, r2
 800fa40:	d004      	beq.n	800fa4c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	4a34      	ldr	r2, [pc, #208]	@ (800fb18 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fa48:	4293      	cmp	r3, r2
 800fa4a:	d108      	bne.n	800fa5e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800fa52:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fa54:	683b      	ldr	r3, [r7, #0]
 800fa56:	685b      	ldr	r3, [r3, #4]
 800fa58:	68fa      	ldr	r2, [r7, #12]
 800fa5a:	4313      	orrs	r3, r2
 800fa5c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fa64:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fa66:	683b      	ldr	r3, [r7, #0]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	68fa      	ldr	r2, [r7, #12]
 800fa6c:	4313      	orrs	r3, r2
 800fa6e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	68fa      	ldr	r2, [r7, #12]
 800fa76:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	4a25      	ldr	r2, [pc, #148]	@ (800fb14 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fa7e:	4293      	cmp	r3, r2
 800fa80:	d02c      	beq.n	800fadc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fa8a:	d027      	beq.n	800fadc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	4a22      	ldr	r2, [pc, #136]	@ (800fb1c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800fa92:	4293      	cmp	r3, r2
 800fa94:	d022      	beq.n	800fadc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	4a21      	ldr	r2, [pc, #132]	@ (800fb20 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800fa9c:	4293      	cmp	r3, r2
 800fa9e:	d01d      	beq.n	800fadc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	4a1f      	ldr	r2, [pc, #124]	@ (800fb24 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800faa6:	4293      	cmp	r3, r2
 800faa8:	d018      	beq.n	800fadc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	4a1a      	ldr	r2, [pc, #104]	@ (800fb18 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fab0:	4293      	cmp	r3, r2
 800fab2:	d013      	beq.n	800fadc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	4a1b      	ldr	r2, [pc, #108]	@ (800fb28 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800faba:	4293      	cmp	r3, r2
 800fabc:	d00e      	beq.n	800fadc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	4a1a      	ldr	r2, [pc, #104]	@ (800fb2c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800fac4:	4293      	cmp	r3, r2
 800fac6:	d009      	beq.n	800fadc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	4a18      	ldr	r2, [pc, #96]	@ (800fb30 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800face:	4293      	cmp	r3, r2
 800fad0:	d004      	beq.n	800fadc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	4a17      	ldr	r2, [pc, #92]	@ (800fb34 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800fad8:	4293      	cmp	r3, r2
 800fada:	d10c      	bne.n	800faf6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fadc:	68bb      	ldr	r3, [r7, #8]
 800fade:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fae2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fae4:	683b      	ldr	r3, [r7, #0]
 800fae6:	689b      	ldr	r3, [r3, #8]
 800fae8:	68ba      	ldr	r2, [r7, #8]
 800faea:	4313      	orrs	r3, r2
 800faec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	68ba      	ldr	r2, [r7, #8]
 800faf4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	2201      	movs	r2, #1
 800fafa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	2200      	movs	r2, #0
 800fb02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800fb06:	2300      	movs	r3, #0
}
 800fb08:	4618      	mov	r0, r3
 800fb0a:	3714      	adds	r7, #20
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb12:	4770      	bx	lr
 800fb14:	40010000 	.word	0x40010000
 800fb18:	40010400 	.word	0x40010400
 800fb1c:	40000400 	.word	0x40000400
 800fb20:	40000800 	.word	0x40000800
 800fb24:	40000c00 	.word	0x40000c00
 800fb28:	40001800 	.word	0x40001800
 800fb2c:	40014000 	.word	0x40014000
 800fb30:	4000e000 	.word	0x4000e000
 800fb34:	4000e400 	.word	0x4000e400

0800fb38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fb38:	b480      	push	{r7}
 800fb3a:	b085      	sub	sp, #20
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	6078      	str	r0, [r7, #4]
 800fb40:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fb42:	2300      	movs	r3, #0
 800fb44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fb4c:	2b01      	cmp	r3, #1
 800fb4e:	d101      	bne.n	800fb54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fb50:	2302      	movs	r3, #2
 800fb52:	e087      	b.n	800fc64 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	2201      	movs	r2, #1
 800fb58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800fb62:	683b      	ldr	r3, [r7, #0]
 800fb64:	68db      	ldr	r3, [r3, #12]
 800fb66:	4313      	orrs	r3, r2
 800fb68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800fb70:	683b      	ldr	r3, [r7, #0]
 800fb72:	689b      	ldr	r3, [r3, #8]
 800fb74:	4313      	orrs	r3, r2
 800fb76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800fb7e:	683b      	ldr	r3, [r7, #0]
 800fb80:	685b      	ldr	r3, [r3, #4]
 800fb82:	4313      	orrs	r3, r2
 800fb84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800fb8c:	683b      	ldr	r3, [r7, #0]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	4313      	orrs	r3, r2
 800fb92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800fb9a:	683b      	ldr	r3, [r7, #0]
 800fb9c:	691b      	ldr	r3, [r3, #16]
 800fb9e:	4313      	orrs	r3, r2
 800fba0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800fba8:	683b      	ldr	r3, [r7, #0]
 800fbaa:	695b      	ldr	r3, [r3, #20]
 800fbac:	4313      	orrs	r3, r2
 800fbae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800fbb6:	683b      	ldr	r3, [r7, #0]
 800fbb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fbba:	4313      	orrs	r3, r2
 800fbbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800fbc4:	683b      	ldr	r3, [r7, #0]
 800fbc6:	699b      	ldr	r3, [r3, #24]
 800fbc8:	041b      	lsls	r3, r3, #16
 800fbca:	4313      	orrs	r3, r2
 800fbcc:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	4a27      	ldr	r2, [pc, #156]	@ (800fc70 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800fbd4:	4293      	cmp	r3, r2
 800fbd6:	d004      	beq.n	800fbe2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	4a25      	ldr	r2, [pc, #148]	@ (800fc74 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800fbde:	4293      	cmp	r3, r2
 800fbe0:	d106      	bne.n	800fbf0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800fbe8:	683b      	ldr	r3, [r7, #0]
 800fbea:	69db      	ldr	r3, [r3, #28]
 800fbec:	4313      	orrs	r3, r2
 800fbee:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	4a1e      	ldr	r2, [pc, #120]	@ (800fc70 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800fbf6:	4293      	cmp	r3, r2
 800fbf8:	d004      	beq.n	800fc04 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	4a1d      	ldr	r2, [pc, #116]	@ (800fc74 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800fc00:	4293      	cmp	r3, r2
 800fc02:	d126      	bne.n	800fc52 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800fc0a:	683b      	ldr	r3, [r7, #0]
 800fc0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc0e:	051b      	lsls	r3, r3, #20
 800fc10:	4313      	orrs	r3, r2
 800fc12:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800fc1a:	683b      	ldr	r3, [r7, #0]
 800fc1c:	6a1b      	ldr	r3, [r3, #32]
 800fc1e:	4313      	orrs	r3, r2
 800fc20:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800fc28:	683b      	ldr	r3, [r7, #0]
 800fc2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc2c:	4313      	orrs	r3, r2
 800fc2e:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	4a0e      	ldr	r2, [pc, #56]	@ (800fc70 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800fc36:	4293      	cmp	r3, r2
 800fc38:	d004      	beq.n	800fc44 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	4a0d      	ldr	r2, [pc, #52]	@ (800fc74 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800fc40:	4293      	cmp	r3, r2
 800fc42:	d106      	bne.n	800fc52 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800fc4a:	683b      	ldr	r3, [r7, #0]
 800fc4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc4e:	4313      	orrs	r3, r2
 800fc50:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	68fa      	ldr	r2, [r7, #12]
 800fc58:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	2200      	movs	r2, #0
 800fc5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800fc62:	2300      	movs	r3, #0
}
 800fc64:	4618      	mov	r0, r3
 800fc66:	3714      	adds	r7, #20
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6e:	4770      	bx	lr
 800fc70:	40010000 	.word	0x40010000
 800fc74:	40010400 	.word	0x40010400

0800fc78 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800fc78:	b480      	push	{r7}
 800fc7a:	b087      	sub	sp, #28
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	60f8      	str	r0, [r7, #12]
 800fc80:	60b9      	str	r1, [r7, #8]
 800fc82:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fc84:	68bb      	ldr	r3, [r7, #8]
 800fc86:	f003 031f 	and.w	r3, r3, #31
 800fc8a:	2204      	movs	r2, #4
 800fc8c:	fa02 f303 	lsl.w	r3, r2, r3
 800fc90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	6a1a      	ldr	r2, [r3, #32]
 800fc96:	697b      	ldr	r3, [r7, #20]
 800fc98:	43db      	mvns	r3, r3
 800fc9a:	401a      	ands	r2, r3
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	6a1a      	ldr	r2, [r3, #32]
 800fca4:	68bb      	ldr	r3, [r7, #8]
 800fca6:	f003 031f 	and.w	r3, r3, #31
 800fcaa:	6879      	ldr	r1, [r7, #4]
 800fcac:	fa01 f303 	lsl.w	r3, r1, r3
 800fcb0:	431a      	orrs	r2, r3
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	621a      	str	r2, [r3, #32]
}
 800fcb6:	bf00      	nop
 800fcb8:	371c      	adds	r7, #28
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc0:	4770      	bx	lr

0800fcc2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fcc2:	b580      	push	{r7, lr}
 800fcc4:	b082      	sub	sp, #8
 800fcc6:	af00      	add	r7, sp, #0
 800fcc8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d101      	bne.n	800fcd4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fcd0:	2301      	movs	r3, #1
 800fcd2:	e042      	b.n	800fd5a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d106      	bne.n	800fcec <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	2200      	movs	r2, #0
 800fce2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fce6:	6878      	ldr	r0, [r7, #4]
 800fce8:	f7f3 ff84 	bl	8003bf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	2224      	movs	r2, #36	@ 0x24
 800fcf0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	681a      	ldr	r2, [r3, #0]
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	f022 0201 	bic.w	r2, r2, #1
 800fd02:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fd04:	6878      	ldr	r0, [r7, #4]
 800fd06:	f000 f983 	bl	8010010 <UART_SetConfig>
 800fd0a:	4603      	mov	r3, r0
 800fd0c:	2b01      	cmp	r3, #1
 800fd0e:	d101      	bne.n	800fd14 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800fd10:	2301      	movs	r3, #1
 800fd12:	e022      	b.n	800fd5a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d002      	beq.n	800fd22 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800fd1c:	6878      	ldr	r0, [r7, #4]
 800fd1e:	f000 ffe3 	bl	8010ce8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	685a      	ldr	r2, [r3, #4]
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800fd30:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	689a      	ldr	r2, [r3, #8]
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800fd40:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	681a      	ldr	r2, [r3, #0]
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	f042 0201 	orr.w	r2, r2, #1
 800fd50:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fd52:	6878      	ldr	r0, [r7, #4]
 800fd54:	f001 f86a 	bl	8010e2c <UART_CheckIdleState>
 800fd58:	4603      	mov	r3, r0
}
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	3708      	adds	r7, #8
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	bd80      	pop	{r7, pc}

0800fd62 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fd62:	b580      	push	{r7, lr}
 800fd64:	b08a      	sub	sp, #40	@ 0x28
 800fd66:	af02      	add	r7, sp, #8
 800fd68:	60f8      	str	r0, [r7, #12]
 800fd6a:	60b9      	str	r1, [r7, #8]
 800fd6c:	603b      	str	r3, [r7, #0]
 800fd6e:	4613      	mov	r3, r2
 800fd70:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fd78:	2b20      	cmp	r3, #32
 800fd7a:	d17b      	bne.n	800fe74 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800fd7c:	68bb      	ldr	r3, [r7, #8]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d002      	beq.n	800fd88 <HAL_UART_Transmit+0x26>
 800fd82:	88fb      	ldrh	r3, [r7, #6]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d101      	bne.n	800fd8c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800fd88:	2301      	movs	r3, #1
 800fd8a:	e074      	b.n	800fe76 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	2200      	movs	r2, #0
 800fd90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	2221      	movs	r2, #33	@ 0x21
 800fd98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fd9c:	f7f4 fbb0 	bl	8004500 <HAL_GetTick>
 800fda0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	88fa      	ldrh	r2, [r7, #6]
 800fda6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	88fa      	ldrh	r2, [r7, #6]
 800fdae:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	689b      	ldr	r3, [r3, #8]
 800fdb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fdba:	d108      	bne.n	800fdce <HAL_UART_Transmit+0x6c>
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	691b      	ldr	r3, [r3, #16]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d104      	bne.n	800fdce <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800fdc4:	2300      	movs	r3, #0
 800fdc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800fdc8:	68bb      	ldr	r3, [r7, #8]
 800fdca:	61bb      	str	r3, [r7, #24]
 800fdcc:	e003      	b.n	800fdd6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800fdce:	68bb      	ldr	r3, [r7, #8]
 800fdd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fdd2:	2300      	movs	r3, #0
 800fdd4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800fdd6:	e030      	b.n	800fe3a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fdd8:	683b      	ldr	r3, [r7, #0]
 800fdda:	9300      	str	r3, [sp, #0]
 800fddc:	697b      	ldr	r3, [r7, #20]
 800fdde:	2200      	movs	r2, #0
 800fde0:	2180      	movs	r1, #128	@ 0x80
 800fde2:	68f8      	ldr	r0, [r7, #12]
 800fde4:	f001 f8cc 	bl	8010f80 <UART_WaitOnFlagUntilTimeout>
 800fde8:	4603      	mov	r3, r0
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d005      	beq.n	800fdfa <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	2220      	movs	r2, #32
 800fdf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800fdf6:	2303      	movs	r3, #3
 800fdf8:	e03d      	b.n	800fe76 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800fdfa:	69fb      	ldr	r3, [r7, #28]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d10b      	bne.n	800fe18 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fe00:	69bb      	ldr	r3, [r7, #24]
 800fe02:	881b      	ldrh	r3, [r3, #0]
 800fe04:	461a      	mov	r2, r3
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fe0e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800fe10:	69bb      	ldr	r3, [r7, #24]
 800fe12:	3302      	adds	r3, #2
 800fe14:	61bb      	str	r3, [r7, #24]
 800fe16:	e007      	b.n	800fe28 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800fe18:	69fb      	ldr	r3, [r7, #28]
 800fe1a:	781a      	ldrb	r2, [r3, #0]
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800fe22:	69fb      	ldr	r3, [r7, #28]
 800fe24:	3301      	adds	r3, #1
 800fe26:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800fe2e:	b29b      	uxth	r3, r3
 800fe30:	3b01      	subs	r3, #1
 800fe32:	b29a      	uxth	r2, r3
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800fe40:	b29b      	uxth	r3, r3
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d1c8      	bne.n	800fdd8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fe46:	683b      	ldr	r3, [r7, #0]
 800fe48:	9300      	str	r3, [sp, #0]
 800fe4a:	697b      	ldr	r3, [r7, #20]
 800fe4c:	2200      	movs	r2, #0
 800fe4e:	2140      	movs	r1, #64	@ 0x40
 800fe50:	68f8      	ldr	r0, [r7, #12]
 800fe52:	f001 f895 	bl	8010f80 <UART_WaitOnFlagUntilTimeout>
 800fe56:	4603      	mov	r3, r0
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d005      	beq.n	800fe68 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	2220      	movs	r2, #32
 800fe60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800fe64:	2303      	movs	r3, #3
 800fe66:	e006      	b.n	800fe76 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	2220      	movs	r2, #32
 800fe6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800fe70:	2300      	movs	r3, #0
 800fe72:	e000      	b.n	800fe76 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800fe74:	2302      	movs	r3, #2
  }
}
 800fe76:	4618      	mov	r0, r3
 800fe78:	3720      	adds	r7, #32
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	bd80      	pop	{r7, pc}

0800fe7e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fe7e:	b580      	push	{r7, lr}
 800fe80:	b08a      	sub	sp, #40	@ 0x28
 800fe82:	af02      	add	r7, sp, #8
 800fe84:	60f8      	str	r0, [r7, #12]
 800fe86:	60b9      	str	r1, [r7, #8]
 800fe88:	603b      	str	r3, [r7, #0]
 800fe8a:	4613      	mov	r3, r2
 800fe8c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fe94:	2b20      	cmp	r3, #32
 800fe96:	f040 80b5 	bne.w	8010004 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800fe9a:	68bb      	ldr	r3, [r7, #8]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d002      	beq.n	800fea6 <HAL_UART_Receive+0x28>
 800fea0:	88fb      	ldrh	r3, [r7, #6]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d101      	bne.n	800feaa <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800fea6:	2301      	movs	r3, #1
 800fea8:	e0ad      	b.n	8010006 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	2200      	movs	r2, #0
 800feae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	2222      	movs	r2, #34	@ 0x22
 800feb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	2200      	movs	r2, #0
 800febe:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fec0:	f7f4 fb1e 	bl	8004500 <HAL_GetTick>
 800fec4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	88fa      	ldrh	r2, [r7, #6]
 800feca:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	88fa      	ldrh	r2, [r7, #6]
 800fed2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	689b      	ldr	r3, [r3, #8]
 800feda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fede:	d10e      	bne.n	800fefe <HAL_UART_Receive+0x80>
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	691b      	ldr	r3, [r3, #16]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d105      	bne.n	800fef4 <HAL_UART_Receive+0x76>
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800feee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800fef2:	e02d      	b.n	800ff50 <HAL_UART_Receive+0xd2>
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	22ff      	movs	r2, #255	@ 0xff
 800fef8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800fefc:	e028      	b.n	800ff50 <HAL_UART_Receive+0xd2>
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	689b      	ldr	r3, [r3, #8]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d10d      	bne.n	800ff22 <HAL_UART_Receive+0xa4>
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	691b      	ldr	r3, [r3, #16]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d104      	bne.n	800ff18 <HAL_UART_Receive+0x9a>
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	22ff      	movs	r2, #255	@ 0xff
 800ff12:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ff16:	e01b      	b.n	800ff50 <HAL_UART_Receive+0xd2>
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	227f      	movs	r2, #127	@ 0x7f
 800ff1c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ff20:	e016      	b.n	800ff50 <HAL_UART_Receive+0xd2>
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	689b      	ldr	r3, [r3, #8]
 800ff26:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ff2a:	d10d      	bne.n	800ff48 <HAL_UART_Receive+0xca>
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	691b      	ldr	r3, [r3, #16]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d104      	bne.n	800ff3e <HAL_UART_Receive+0xc0>
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	227f      	movs	r2, #127	@ 0x7f
 800ff38:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ff3c:	e008      	b.n	800ff50 <HAL_UART_Receive+0xd2>
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	223f      	movs	r2, #63	@ 0x3f
 800ff42:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800ff46:	e003      	b.n	800ff50 <HAL_UART_Receive+0xd2>
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800ff56:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	689b      	ldr	r3, [r3, #8]
 800ff5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ff60:	d108      	bne.n	800ff74 <HAL_UART_Receive+0xf6>
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	691b      	ldr	r3, [r3, #16]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d104      	bne.n	800ff74 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ff6e:	68bb      	ldr	r3, [r7, #8]
 800ff70:	61bb      	str	r3, [r7, #24]
 800ff72:	e003      	b.n	800ff7c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800ff74:	68bb      	ldr	r3, [r7, #8]
 800ff76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ff78:	2300      	movs	r3, #0
 800ff7a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800ff7c:	e036      	b.n	800ffec <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800ff7e:	683b      	ldr	r3, [r7, #0]
 800ff80:	9300      	str	r3, [sp, #0]
 800ff82:	697b      	ldr	r3, [r7, #20]
 800ff84:	2200      	movs	r2, #0
 800ff86:	2120      	movs	r1, #32
 800ff88:	68f8      	ldr	r0, [r7, #12]
 800ff8a:	f000 fff9 	bl	8010f80 <UART_WaitOnFlagUntilTimeout>
 800ff8e:	4603      	mov	r3, r0
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d005      	beq.n	800ffa0 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	2220      	movs	r2, #32
 800ff98:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800ff9c:	2303      	movs	r3, #3
 800ff9e:	e032      	b.n	8010006 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800ffa0:	69fb      	ldr	r3, [r7, #28]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d10c      	bne.n	800ffc0 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ffac:	b29a      	uxth	r2, r3
 800ffae:	8a7b      	ldrh	r3, [r7, #18]
 800ffb0:	4013      	ands	r3, r2
 800ffb2:	b29a      	uxth	r2, r3
 800ffb4:	69bb      	ldr	r3, [r7, #24]
 800ffb6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800ffb8:	69bb      	ldr	r3, [r7, #24]
 800ffba:	3302      	adds	r3, #2
 800ffbc:	61bb      	str	r3, [r7, #24]
 800ffbe:	e00c      	b.n	800ffda <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ffc6:	b2da      	uxtb	r2, r3
 800ffc8:	8a7b      	ldrh	r3, [r7, #18]
 800ffca:	b2db      	uxtb	r3, r3
 800ffcc:	4013      	ands	r3, r2
 800ffce:	b2da      	uxtb	r2, r3
 800ffd0:	69fb      	ldr	r3, [r7, #28]
 800ffd2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800ffd4:	69fb      	ldr	r3, [r7, #28]
 800ffd6:	3301      	adds	r3, #1
 800ffd8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ffe0:	b29b      	uxth	r3, r3
 800ffe2:	3b01      	subs	r3, #1
 800ffe4:	b29a      	uxth	r2, r3
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fff2:	b29b      	uxth	r3, r3
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d1c2      	bne.n	800ff7e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	2220      	movs	r2, #32
 800fffc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8010000:	2300      	movs	r3, #0
 8010002:	e000      	b.n	8010006 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8010004:	2302      	movs	r3, #2
  }
}
 8010006:	4618      	mov	r0, r3
 8010008:	3720      	adds	r7, #32
 801000a:	46bd      	mov	sp, r7
 801000c:	bd80      	pop	{r7, pc}
	...

08010010 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010010:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010014:	b092      	sub	sp, #72	@ 0x48
 8010016:	af00      	add	r7, sp, #0
 8010018:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801001a:	2300      	movs	r3, #0
 801001c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010020:	697b      	ldr	r3, [r7, #20]
 8010022:	689a      	ldr	r2, [r3, #8]
 8010024:	697b      	ldr	r3, [r7, #20]
 8010026:	691b      	ldr	r3, [r3, #16]
 8010028:	431a      	orrs	r2, r3
 801002a:	697b      	ldr	r3, [r7, #20]
 801002c:	695b      	ldr	r3, [r3, #20]
 801002e:	431a      	orrs	r2, r3
 8010030:	697b      	ldr	r3, [r7, #20]
 8010032:	69db      	ldr	r3, [r3, #28]
 8010034:	4313      	orrs	r3, r2
 8010036:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010038:	697b      	ldr	r3, [r7, #20]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	681a      	ldr	r2, [r3, #0]
 801003e:	4bbe      	ldr	r3, [pc, #760]	@ (8010338 <UART_SetConfig+0x328>)
 8010040:	4013      	ands	r3, r2
 8010042:	697a      	ldr	r2, [r7, #20]
 8010044:	6812      	ldr	r2, [r2, #0]
 8010046:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010048:	430b      	orrs	r3, r1
 801004a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801004c:	697b      	ldr	r3, [r7, #20]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	685b      	ldr	r3, [r3, #4]
 8010052:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8010056:	697b      	ldr	r3, [r7, #20]
 8010058:	68da      	ldr	r2, [r3, #12]
 801005a:	697b      	ldr	r3, [r7, #20]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	430a      	orrs	r2, r1
 8010060:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010062:	697b      	ldr	r3, [r7, #20]
 8010064:	699b      	ldr	r3, [r3, #24]
 8010066:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010068:	697b      	ldr	r3, [r7, #20]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	4ab3      	ldr	r2, [pc, #716]	@ (801033c <UART_SetConfig+0x32c>)
 801006e:	4293      	cmp	r3, r2
 8010070:	d004      	beq.n	801007c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010072:	697b      	ldr	r3, [r7, #20]
 8010074:	6a1b      	ldr	r3, [r3, #32]
 8010076:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010078:	4313      	orrs	r3, r2
 801007a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801007c:	697b      	ldr	r3, [r7, #20]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	689a      	ldr	r2, [r3, #8]
 8010082:	4baf      	ldr	r3, [pc, #700]	@ (8010340 <UART_SetConfig+0x330>)
 8010084:	4013      	ands	r3, r2
 8010086:	697a      	ldr	r2, [r7, #20]
 8010088:	6812      	ldr	r2, [r2, #0]
 801008a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801008c:	430b      	orrs	r3, r1
 801008e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010090:	697b      	ldr	r3, [r7, #20]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010096:	f023 010f 	bic.w	r1, r3, #15
 801009a:	697b      	ldr	r3, [r7, #20]
 801009c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801009e:	697b      	ldr	r3, [r7, #20]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	430a      	orrs	r2, r1
 80100a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80100a6:	697b      	ldr	r3, [r7, #20]
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	4aa6      	ldr	r2, [pc, #664]	@ (8010344 <UART_SetConfig+0x334>)
 80100ac:	4293      	cmp	r3, r2
 80100ae:	d177      	bne.n	80101a0 <UART_SetConfig+0x190>
 80100b0:	4ba5      	ldr	r3, [pc, #660]	@ (8010348 <UART_SetConfig+0x338>)
 80100b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80100b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80100b8:	2b28      	cmp	r3, #40	@ 0x28
 80100ba:	d86d      	bhi.n	8010198 <UART_SetConfig+0x188>
 80100bc:	a201      	add	r2, pc, #4	@ (adr r2, 80100c4 <UART_SetConfig+0xb4>)
 80100be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100c2:	bf00      	nop
 80100c4:	08010169 	.word	0x08010169
 80100c8:	08010199 	.word	0x08010199
 80100cc:	08010199 	.word	0x08010199
 80100d0:	08010199 	.word	0x08010199
 80100d4:	08010199 	.word	0x08010199
 80100d8:	08010199 	.word	0x08010199
 80100dc:	08010199 	.word	0x08010199
 80100e0:	08010199 	.word	0x08010199
 80100e4:	08010171 	.word	0x08010171
 80100e8:	08010199 	.word	0x08010199
 80100ec:	08010199 	.word	0x08010199
 80100f0:	08010199 	.word	0x08010199
 80100f4:	08010199 	.word	0x08010199
 80100f8:	08010199 	.word	0x08010199
 80100fc:	08010199 	.word	0x08010199
 8010100:	08010199 	.word	0x08010199
 8010104:	08010179 	.word	0x08010179
 8010108:	08010199 	.word	0x08010199
 801010c:	08010199 	.word	0x08010199
 8010110:	08010199 	.word	0x08010199
 8010114:	08010199 	.word	0x08010199
 8010118:	08010199 	.word	0x08010199
 801011c:	08010199 	.word	0x08010199
 8010120:	08010199 	.word	0x08010199
 8010124:	08010181 	.word	0x08010181
 8010128:	08010199 	.word	0x08010199
 801012c:	08010199 	.word	0x08010199
 8010130:	08010199 	.word	0x08010199
 8010134:	08010199 	.word	0x08010199
 8010138:	08010199 	.word	0x08010199
 801013c:	08010199 	.word	0x08010199
 8010140:	08010199 	.word	0x08010199
 8010144:	08010189 	.word	0x08010189
 8010148:	08010199 	.word	0x08010199
 801014c:	08010199 	.word	0x08010199
 8010150:	08010199 	.word	0x08010199
 8010154:	08010199 	.word	0x08010199
 8010158:	08010199 	.word	0x08010199
 801015c:	08010199 	.word	0x08010199
 8010160:	08010199 	.word	0x08010199
 8010164:	08010191 	.word	0x08010191
 8010168:	2301      	movs	r3, #1
 801016a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801016e:	e326      	b.n	80107be <UART_SetConfig+0x7ae>
 8010170:	2304      	movs	r3, #4
 8010172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010176:	e322      	b.n	80107be <UART_SetConfig+0x7ae>
 8010178:	2308      	movs	r3, #8
 801017a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801017e:	e31e      	b.n	80107be <UART_SetConfig+0x7ae>
 8010180:	2310      	movs	r3, #16
 8010182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010186:	e31a      	b.n	80107be <UART_SetConfig+0x7ae>
 8010188:	2320      	movs	r3, #32
 801018a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801018e:	e316      	b.n	80107be <UART_SetConfig+0x7ae>
 8010190:	2340      	movs	r3, #64	@ 0x40
 8010192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010196:	e312      	b.n	80107be <UART_SetConfig+0x7ae>
 8010198:	2380      	movs	r3, #128	@ 0x80
 801019a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801019e:	e30e      	b.n	80107be <UART_SetConfig+0x7ae>
 80101a0:	697b      	ldr	r3, [r7, #20]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	4a69      	ldr	r2, [pc, #420]	@ (801034c <UART_SetConfig+0x33c>)
 80101a6:	4293      	cmp	r3, r2
 80101a8:	d130      	bne.n	801020c <UART_SetConfig+0x1fc>
 80101aa:	4b67      	ldr	r3, [pc, #412]	@ (8010348 <UART_SetConfig+0x338>)
 80101ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80101ae:	f003 0307 	and.w	r3, r3, #7
 80101b2:	2b05      	cmp	r3, #5
 80101b4:	d826      	bhi.n	8010204 <UART_SetConfig+0x1f4>
 80101b6:	a201      	add	r2, pc, #4	@ (adr r2, 80101bc <UART_SetConfig+0x1ac>)
 80101b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101bc:	080101d5 	.word	0x080101d5
 80101c0:	080101dd 	.word	0x080101dd
 80101c4:	080101e5 	.word	0x080101e5
 80101c8:	080101ed 	.word	0x080101ed
 80101cc:	080101f5 	.word	0x080101f5
 80101d0:	080101fd 	.word	0x080101fd
 80101d4:	2300      	movs	r3, #0
 80101d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80101da:	e2f0      	b.n	80107be <UART_SetConfig+0x7ae>
 80101dc:	2304      	movs	r3, #4
 80101de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80101e2:	e2ec      	b.n	80107be <UART_SetConfig+0x7ae>
 80101e4:	2308      	movs	r3, #8
 80101e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80101ea:	e2e8      	b.n	80107be <UART_SetConfig+0x7ae>
 80101ec:	2310      	movs	r3, #16
 80101ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80101f2:	e2e4      	b.n	80107be <UART_SetConfig+0x7ae>
 80101f4:	2320      	movs	r3, #32
 80101f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80101fa:	e2e0      	b.n	80107be <UART_SetConfig+0x7ae>
 80101fc:	2340      	movs	r3, #64	@ 0x40
 80101fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010202:	e2dc      	b.n	80107be <UART_SetConfig+0x7ae>
 8010204:	2380      	movs	r3, #128	@ 0x80
 8010206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801020a:	e2d8      	b.n	80107be <UART_SetConfig+0x7ae>
 801020c:	697b      	ldr	r3, [r7, #20]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	4a4f      	ldr	r2, [pc, #316]	@ (8010350 <UART_SetConfig+0x340>)
 8010212:	4293      	cmp	r3, r2
 8010214:	d130      	bne.n	8010278 <UART_SetConfig+0x268>
 8010216:	4b4c      	ldr	r3, [pc, #304]	@ (8010348 <UART_SetConfig+0x338>)
 8010218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801021a:	f003 0307 	and.w	r3, r3, #7
 801021e:	2b05      	cmp	r3, #5
 8010220:	d826      	bhi.n	8010270 <UART_SetConfig+0x260>
 8010222:	a201      	add	r2, pc, #4	@ (adr r2, 8010228 <UART_SetConfig+0x218>)
 8010224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010228:	08010241 	.word	0x08010241
 801022c:	08010249 	.word	0x08010249
 8010230:	08010251 	.word	0x08010251
 8010234:	08010259 	.word	0x08010259
 8010238:	08010261 	.word	0x08010261
 801023c:	08010269 	.word	0x08010269
 8010240:	2300      	movs	r3, #0
 8010242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010246:	e2ba      	b.n	80107be <UART_SetConfig+0x7ae>
 8010248:	2304      	movs	r3, #4
 801024a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801024e:	e2b6      	b.n	80107be <UART_SetConfig+0x7ae>
 8010250:	2308      	movs	r3, #8
 8010252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010256:	e2b2      	b.n	80107be <UART_SetConfig+0x7ae>
 8010258:	2310      	movs	r3, #16
 801025a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801025e:	e2ae      	b.n	80107be <UART_SetConfig+0x7ae>
 8010260:	2320      	movs	r3, #32
 8010262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010266:	e2aa      	b.n	80107be <UART_SetConfig+0x7ae>
 8010268:	2340      	movs	r3, #64	@ 0x40
 801026a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801026e:	e2a6      	b.n	80107be <UART_SetConfig+0x7ae>
 8010270:	2380      	movs	r3, #128	@ 0x80
 8010272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010276:	e2a2      	b.n	80107be <UART_SetConfig+0x7ae>
 8010278:	697b      	ldr	r3, [r7, #20]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	4a35      	ldr	r2, [pc, #212]	@ (8010354 <UART_SetConfig+0x344>)
 801027e:	4293      	cmp	r3, r2
 8010280:	d130      	bne.n	80102e4 <UART_SetConfig+0x2d4>
 8010282:	4b31      	ldr	r3, [pc, #196]	@ (8010348 <UART_SetConfig+0x338>)
 8010284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010286:	f003 0307 	and.w	r3, r3, #7
 801028a:	2b05      	cmp	r3, #5
 801028c:	d826      	bhi.n	80102dc <UART_SetConfig+0x2cc>
 801028e:	a201      	add	r2, pc, #4	@ (adr r2, 8010294 <UART_SetConfig+0x284>)
 8010290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010294:	080102ad 	.word	0x080102ad
 8010298:	080102b5 	.word	0x080102b5
 801029c:	080102bd 	.word	0x080102bd
 80102a0:	080102c5 	.word	0x080102c5
 80102a4:	080102cd 	.word	0x080102cd
 80102a8:	080102d5 	.word	0x080102d5
 80102ac:	2300      	movs	r3, #0
 80102ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80102b2:	e284      	b.n	80107be <UART_SetConfig+0x7ae>
 80102b4:	2304      	movs	r3, #4
 80102b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80102ba:	e280      	b.n	80107be <UART_SetConfig+0x7ae>
 80102bc:	2308      	movs	r3, #8
 80102be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80102c2:	e27c      	b.n	80107be <UART_SetConfig+0x7ae>
 80102c4:	2310      	movs	r3, #16
 80102c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80102ca:	e278      	b.n	80107be <UART_SetConfig+0x7ae>
 80102cc:	2320      	movs	r3, #32
 80102ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80102d2:	e274      	b.n	80107be <UART_SetConfig+0x7ae>
 80102d4:	2340      	movs	r3, #64	@ 0x40
 80102d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80102da:	e270      	b.n	80107be <UART_SetConfig+0x7ae>
 80102dc:	2380      	movs	r3, #128	@ 0x80
 80102de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80102e2:	e26c      	b.n	80107be <UART_SetConfig+0x7ae>
 80102e4:	697b      	ldr	r3, [r7, #20]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	4a1b      	ldr	r2, [pc, #108]	@ (8010358 <UART_SetConfig+0x348>)
 80102ea:	4293      	cmp	r3, r2
 80102ec:	d142      	bne.n	8010374 <UART_SetConfig+0x364>
 80102ee:	4b16      	ldr	r3, [pc, #88]	@ (8010348 <UART_SetConfig+0x338>)
 80102f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80102f2:	f003 0307 	and.w	r3, r3, #7
 80102f6:	2b05      	cmp	r3, #5
 80102f8:	d838      	bhi.n	801036c <UART_SetConfig+0x35c>
 80102fa:	a201      	add	r2, pc, #4	@ (adr r2, 8010300 <UART_SetConfig+0x2f0>)
 80102fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010300:	08010319 	.word	0x08010319
 8010304:	08010321 	.word	0x08010321
 8010308:	08010329 	.word	0x08010329
 801030c:	08010331 	.word	0x08010331
 8010310:	0801035d 	.word	0x0801035d
 8010314:	08010365 	.word	0x08010365
 8010318:	2300      	movs	r3, #0
 801031a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801031e:	e24e      	b.n	80107be <UART_SetConfig+0x7ae>
 8010320:	2304      	movs	r3, #4
 8010322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010326:	e24a      	b.n	80107be <UART_SetConfig+0x7ae>
 8010328:	2308      	movs	r3, #8
 801032a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801032e:	e246      	b.n	80107be <UART_SetConfig+0x7ae>
 8010330:	2310      	movs	r3, #16
 8010332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010336:	e242      	b.n	80107be <UART_SetConfig+0x7ae>
 8010338:	cfff69f3 	.word	0xcfff69f3
 801033c:	58000c00 	.word	0x58000c00
 8010340:	11fff4ff 	.word	0x11fff4ff
 8010344:	40011000 	.word	0x40011000
 8010348:	58024400 	.word	0x58024400
 801034c:	40004400 	.word	0x40004400
 8010350:	40004800 	.word	0x40004800
 8010354:	40004c00 	.word	0x40004c00
 8010358:	40005000 	.word	0x40005000
 801035c:	2320      	movs	r3, #32
 801035e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010362:	e22c      	b.n	80107be <UART_SetConfig+0x7ae>
 8010364:	2340      	movs	r3, #64	@ 0x40
 8010366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801036a:	e228      	b.n	80107be <UART_SetConfig+0x7ae>
 801036c:	2380      	movs	r3, #128	@ 0x80
 801036e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010372:	e224      	b.n	80107be <UART_SetConfig+0x7ae>
 8010374:	697b      	ldr	r3, [r7, #20]
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	4ab1      	ldr	r2, [pc, #708]	@ (8010640 <UART_SetConfig+0x630>)
 801037a:	4293      	cmp	r3, r2
 801037c:	d176      	bne.n	801046c <UART_SetConfig+0x45c>
 801037e:	4bb1      	ldr	r3, [pc, #708]	@ (8010644 <UART_SetConfig+0x634>)
 8010380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010382:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010386:	2b28      	cmp	r3, #40	@ 0x28
 8010388:	d86c      	bhi.n	8010464 <UART_SetConfig+0x454>
 801038a:	a201      	add	r2, pc, #4	@ (adr r2, 8010390 <UART_SetConfig+0x380>)
 801038c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010390:	08010435 	.word	0x08010435
 8010394:	08010465 	.word	0x08010465
 8010398:	08010465 	.word	0x08010465
 801039c:	08010465 	.word	0x08010465
 80103a0:	08010465 	.word	0x08010465
 80103a4:	08010465 	.word	0x08010465
 80103a8:	08010465 	.word	0x08010465
 80103ac:	08010465 	.word	0x08010465
 80103b0:	0801043d 	.word	0x0801043d
 80103b4:	08010465 	.word	0x08010465
 80103b8:	08010465 	.word	0x08010465
 80103bc:	08010465 	.word	0x08010465
 80103c0:	08010465 	.word	0x08010465
 80103c4:	08010465 	.word	0x08010465
 80103c8:	08010465 	.word	0x08010465
 80103cc:	08010465 	.word	0x08010465
 80103d0:	08010445 	.word	0x08010445
 80103d4:	08010465 	.word	0x08010465
 80103d8:	08010465 	.word	0x08010465
 80103dc:	08010465 	.word	0x08010465
 80103e0:	08010465 	.word	0x08010465
 80103e4:	08010465 	.word	0x08010465
 80103e8:	08010465 	.word	0x08010465
 80103ec:	08010465 	.word	0x08010465
 80103f0:	0801044d 	.word	0x0801044d
 80103f4:	08010465 	.word	0x08010465
 80103f8:	08010465 	.word	0x08010465
 80103fc:	08010465 	.word	0x08010465
 8010400:	08010465 	.word	0x08010465
 8010404:	08010465 	.word	0x08010465
 8010408:	08010465 	.word	0x08010465
 801040c:	08010465 	.word	0x08010465
 8010410:	08010455 	.word	0x08010455
 8010414:	08010465 	.word	0x08010465
 8010418:	08010465 	.word	0x08010465
 801041c:	08010465 	.word	0x08010465
 8010420:	08010465 	.word	0x08010465
 8010424:	08010465 	.word	0x08010465
 8010428:	08010465 	.word	0x08010465
 801042c:	08010465 	.word	0x08010465
 8010430:	0801045d 	.word	0x0801045d
 8010434:	2301      	movs	r3, #1
 8010436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801043a:	e1c0      	b.n	80107be <UART_SetConfig+0x7ae>
 801043c:	2304      	movs	r3, #4
 801043e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010442:	e1bc      	b.n	80107be <UART_SetConfig+0x7ae>
 8010444:	2308      	movs	r3, #8
 8010446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801044a:	e1b8      	b.n	80107be <UART_SetConfig+0x7ae>
 801044c:	2310      	movs	r3, #16
 801044e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010452:	e1b4      	b.n	80107be <UART_SetConfig+0x7ae>
 8010454:	2320      	movs	r3, #32
 8010456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801045a:	e1b0      	b.n	80107be <UART_SetConfig+0x7ae>
 801045c:	2340      	movs	r3, #64	@ 0x40
 801045e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010462:	e1ac      	b.n	80107be <UART_SetConfig+0x7ae>
 8010464:	2380      	movs	r3, #128	@ 0x80
 8010466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801046a:	e1a8      	b.n	80107be <UART_SetConfig+0x7ae>
 801046c:	697b      	ldr	r3, [r7, #20]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	4a75      	ldr	r2, [pc, #468]	@ (8010648 <UART_SetConfig+0x638>)
 8010472:	4293      	cmp	r3, r2
 8010474:	d130      	bne.n	80104d8 <UART_SetConfig+0x4c8>
 8010476:	4b73      	ldr	r3, [pc, #460]	@ (8010644 <UART_SetConfig+0x634>)
 8010478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801047a:	f003 0307 	and.w	r3, r3, #7
 801047e:	2b05      	cmp	r3, #5
 8010480:	d826      	bhi.n	80104d0 <UART_SetConfig+0x4c0>
 8010482:	a201      	add	r2, pc, #4	@ (adr r2, 8010488 <UART_SetConfig+0x478>)
 8010484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010488:	080104a1 	.word	0x080104a1
 801048c:	080104a9 	.word	0x080104a9
 8010490:	080104b1 	.word	0x080104b1
 8010494:	080104b9 	.word	0x080104b9
 8010498:	080104c1 	.word	0x080104c1
 801049c:	080104c9 	.word	0x080104c9
 80104a0:	2300      	movs	r3, #0
 80104a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80104a6:	e18a      	b.n	80107be <UART_SetConfig+0x7ae>
 80104a8:	2304      	movs	r3, #4
 80104aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80104ae:	e186      	b.n	80107be <UART_SetConfig+0x7ae>
 80104b0:	2308      	movs	r3, #8
 80104b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80104b6:	e182      	b.n	80107be <UART_SetConfig+0x7ae>
 80104b8:	2310      	movs	r3, #16
 80104ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80104be:	e17e      	b.n	80107be <UART_SetConfig+0x7ae>
 80104c0:	2320      	movs	r3, #32
 80104c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80104c6:	e17a      	b.n	80107be <UART_SetConfig+0x7ae>
 80104c8:	2340      	movs	r3, #64	@ 0x40
 80104ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80104ce:	e176      	b.n	80107be <UART_SetConfig+0x7ae>
 80104d0:	2380      	movs	r3, #128	@ 0x80
 80104d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80104d6:	e172      	b.n	80107be <UART_SetConfig+0x7ae>
 80104d8:	697b      	ldr	r3, [r7, #20]
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	4a5b      	ldr	r2, [pc, #364]	@ (801064c <UART_SetConfig+0x63c>)
 80104de:	4293      	cmp	r3, r2
 80104e0:	d130      	bne.n	8010544 <UART_SetConfig+0x534>
 80104e2:	4b58      	ldr	r3, [pc, #352]	@ (8010644 <UART_SetConfig+0x634>)
 80104e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80104e6:	f003 0307 	and.w	r3, r3, #7
 80104ea:	2b05      	cmp	r3, #5
 80104ec:	d826      	bhi.n	801053c <UART_SetConfig+0x52c>
 80104ee:	a201      	add	r2, pc, #4	@ (adr r2, 80104f4 <UART_SetConfig+0x4e4>)
 80104f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104f4:	0801050d 	.word	0x0801050d
 80104f8:	08010515 	.word	0x08010515
 80104fc:	0801051d 	.word	0x0801051d
 8010500:	08010525 	.word	0x08010525
 8010504:	0801052d 	.word	0x0801052d
 8010508:	08010535 	.word	0x08010535
 801050c:	2300      	movs	r3, #0
 801050e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010512:	e154      	b.n	80107be <UART_SetConfig+0x7ae>
 8010514:	2304      	movs	r3, #4
 8010516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801051a:	e150      	b.n	80107be <UART_SetConfig+0x7ae>
 801051c:	2308      	movs	r3, #8
 801051e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010522:	e14c      	b.n	80107be <UART_SetConfig+0x7ae>
 8010524:	2310      	movs	r3, #16
 8010526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801052a:	e148      	b.n	80107be <UART_SetConfig+0x7ae>
 801052c:	2320      	movs	r3, #32
 801052e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010532:	e144      	b.n	80107be <UART_SetConfig+0x7ae>
 8010534:	2340      	movs	r3, #64	@ 0x40
 8010536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801053a:	e140      	b.n	80107be <UART_SetConfig+0x7ae>
 801053c:	2380      	movs	r3, #128	@ 0x80
 801053e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010542:	e13c      	b.n	80107be <UART_SetConfig+0x7ae>
 8010544:	697b      	ldr	r3, [r7, #20]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	4a41      	ldr	r2, [pc, #260]	@ (8010650 <UART_SetConfig+0x640>)
 801054a:	4293      	cmp	r3, r2
 801054c:	f040 8082 	bne.w	8010654 <UART_SetConfig+0x644>
 8010550:	4b3c      	ldr	r3, [pc, #240]	@ (8010644 <UART_SetConfig+0x634>)
 8010552:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010554:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010558:	2b28      	cmp	r3, #40	@ 0x28
 801055a:	d86d      	bhi.n	8010638 <UART_SetConfig+0x628>
 801055c:	a201      	add	r2, pc, #4	@ (adr r2, 8010564 <UART_SetConfig+0x554>)
 801055e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010562:	bf00      	nop
 8010564:	08010609 	.word	0x08010609
 8010568:	08010639 	.word	0x08010639
 801056c:	08010639 	.word	0x08010639
 8010570:	08010639 	.word	0x08010639
 8010574:	08010639 	.word	0x08010639
 8010578:	08010639 	.word	0x08010639
 801057c:	08010639 	.word	0x08010639
 8010580:	08010639 	.word	0x08010639
 8010584:	08010611 	.word	0x08010611
 8010588:	08010639 	.word	0x08010639
 801058c:	08010639 	.word	0x08010639
 8010590:	08010639 	.word	0x08010639
 8010594:	08010639 	.word	0x08010639
 8010598:	08010639 	.word	0x08010639
 801059c:	08010639 	.word	0x08010639
 80105a0:	08010639 	.word	0x08010639
 80105a4:	08010619 	.word	0x08010619
 80105a8:	08010639 	.word	0x08010639
 80105ac:	08010639 	.word	0x08010639
 80105b0:	08010639 	.word	0x08010639
 80105b4:	08010639 	.word	0x08010639
 80105b8:	08010639 	.word	0x08010639
 80105bc:	08010639 	.word	0x08010639
 80105c0:	08010639 	.word	0x08010639
 80105c4:	08010621 	.word	0x08010621
 80105c8:	08010639 	.word	0x08010639
 80105cc:	08010639 	.word	0x08010639
 80105d0:	08010639 	.word	0x08010639
 80105d4:	08010639 	.word	0x08010639
 80105d8:	08010639 	.word	0x08010639
 80105dc:	08010639 	.word	0x08010639
 80105e0:	08010639 	.word	0x08010639
 80105e4:	08010629 	.word	0x08010629
 80105e8:	08010639 	.word	0x08010639
 80105ec:	08010639 	.word	0x08010639
 80105f0:	08010639 	.word	0x08010639
 80105f4:	08010639 	.word	0x08010639
 80105f8:	08010639 	.word	0x08010639
 80105fc:	08010639 	.word	0x08010639
 8010600:	08010639 	.word	0x08010639
 8010604:	08010631 	.word	0x08010631
 8010608:	2301      	movs	r3, #1
 801060a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801060e:	e0d6      	b.n	80107be <UART_SetConfig+0x7ae>
 8010610:	2304      	movs	r3, #4
 8010612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010616:	e0d2      	b.n	80107be <UART_SetConfig+0x7ae>
 8010618:	2308      	movs	r3, #8
 801061a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801061e:	e0ce      	b.n	80107be <UART_SetConfig+0x7ae>
 8010620:	2310      	movs	r3, #16
 8010622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010626:	e0ca      	b.n	80107be <UART_SetConfig+0x7ae>
 8010628:	2320      	movs	r3, #32
 801062a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801062e:	e0c6      	b.n	80107be <UART_SetConfig+0x7ae>
 8010630:	2340      	movs	r3, #64	@ 0x40
 8010632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010636:	e0c2      	b.n	80107be <UART_SetConfig+0x7ae>
 8010638:	2380      	movs	r3, #128	@ 0x80
 801063a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801063e:	e0be      	b.n	80107be <UART_SetConfig+0x7ae>
 8010640:	40011400 	.word	0x40011400
 8010644:	58024400 	.word	0x58024400
 8010648:	40007800 	.word	0x40007800
 801064c:	40007c00 	.word	0x40007c00
 8010650:	40011800 	.word	0x40011800
 8010654:	697b      	ldr	r3, [r7, #20]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	4aad      	ldr	r2, [pc, #692]	@ (8010910 <UART_SetConfig+0x900>)
 801065a:	4293      	cmp	r3, r2
 801065c:	d176      	bne.n	801074c <UART_SetConfig+0x73c>
 801065e:	4bad      	ldr	r3, [pc, #692]	@ (8010914 <UART_SetConfig+0x904>)
 8010660:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010662:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010666:	2b28      	cmp	r3, #40	@ 0x28
 8010668:	d86c      	bhi.n	8010744 <UART_SetConfig+0x734>
 801066a:	a201      	add	r2, pc, #4	@ (adr r2, 8010670 <UART_SetConfig+0x660>)
 801066c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010670:	08010715 	.word	0x08010715
 8010674:	08010745 	.word	0x08010745
 8010678:	08010745 	.word	0x08010745
 801067c:	08010745 	.word	0x08010745
 8010680:	08010745 	.word	0x08010745
 8010684:	08010745 	.word	0x08010745
 8010688:	08010745 	.word	0x08010745
 801068c:	08010745 	.word	0x08010745
 8010690:	0801071d 	.word	0x0801071d
 8010694:	08010745 	.word	0x08010745
 8010698:	08010745 	.word	0x08010745
 801069c:	08010745 	.word	0x08010745
 80106a0:	08010745 	.word	0x08010745
 80106a4:	08010745 	.word	0x08010745
 80106a8:	08010745 	.word	0x08010745
 80106ac:	08010745 	.word	0x08010745
 80106b0:	08010725 	.word	0x08010725
 80106b4:	08010745 	.word	0x08010745
 80106b8:	08010745 	.word	0x08010745
 80106bc:	08010745 	.word	0x08010745
 80106c0:	08010745 	.word	0x08010745
 80106c4:	08010745 	.word	0x08010745
 80106c8:	08010745 	.word	0x08010745
 80106cc:	08010745 	.word	0x08010745
 80106d0:	0801072d 	.word	0x0801072d
 80106d4:	08010745 	.word	0x08010745
 80106d8:	08010745 	.word	0x08010745
 80106dc:	08010745 	.word	0x08010745
 80106e0:	08010745 	.word	0x08010745
 80106e4:	08010745 	.word	0x08010745
 80106e8:	08010745 	.word	0x08010745
 80106ec:	08010745 	.word	0x08010745
 80106f0:	08010735 	.word	0x08010735
 80106f4:	08010745 	.word	0x08010745
 80106f8:	08010745 	.word	0x08010745
 80106fc:	08010745 	.word	0x08010745
 8010700:	08010745 	.word	0x08010745
 8010704:	08010745 	.word	0x08010745
 8010708:	08010745 	.word	0x08010745
 801070c:	08010745 	.word	0x08010745
 8010710:	0801073d 	.word	0x0801073d
 8010714:	2301      	movs	r3, #1
 8010716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801071a:	e050      	b.n	80107be <UART_SetConfig+0x7ae>
 801071c:	2304      	movs	r3, #4
 801071e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010722:	e04c      	b.n	80107be <UART_SetConfig+0x7ae>
 8010724:	2308      	movs	r3, #8
 8010726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801072a:	e048      	b.n	80107be <UART_SetConfig+0x7ae>
 801072c:	2310      	movs	r3, #16
 801072e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010732:	e044      	b.n	80107be <UART_SetConfig+0x7ae>
 8010734:	2320      	movs	r3, #32
 8010736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801073a:	e040      	b.n	80107be <UART_SetConfig+0x7ae>
 801073c:	2340      	movs	r3, #64	@ 0x40
 801073e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010742:	e03c      	b.n	80107be <UART_SetConfig+0x7ae>
 8010744:	2380      	movs	r3, #128	@ 0x80
 8010746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801074a:	e038      	b.n	80107be <UART_SetConfig+0x7ae>
 801074c:	697b      	ldr	r3, [r7, #20]
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	4a71      	ldr	r2, [pc, #452]	@ (8010918 <UART_SetConfig+0x908>)
 8010752:	4293      	cmp	r3, r2
 8010754:	d130      	bne.n	80107b8 <UART_SetConfig+0x7a8>
 8010756:	4b6f      	ldr	r3, [pc, #444]	@ (8010914 <UART_SetConfig+0x904>)
 8010758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801075a:	f003 0307 	and.w	r3, r3, #7
 801075e:	2b05      	cmp	r3, #5
 8010760:	d826      	bhi.n	80107b0 <UART_SetConfig+0x7a0>
 8010762:	a201      	add	r2, pc, #4	@ (adr r2, 8010768 <UART_SetConfig+0x758>)
 8010764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010768:	08010781 	.word	0x08010781
 801076c:	08010789 	.word	0x08010789
 8010770:	08010791 	.word	0x08010791
 8010774:	08010799 	.word	0x08010799
 8010778:	080107a1 	.word	0x080107a1
 801077c:	080107a9 	.word	0x080107a9
 8010780:	2302      	movs	r3, #2
 8010782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010786:	e01a      	b.n	80107be <UART_SetConfig+0x7ae>
 8010788:	2304      	movs	r3, #4
 801078a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801078e:	e016      	b.n	80107be <UART_SetConfig+0x7ae>
 8010790:	2308      	movs	r3, #8
 8010792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010796:	e012      	b.n	80107be <UART_SetConfig+0x7ae>
 8010798:	2310      	movs	r3, #16
 801079a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801079e:	e00e      	b.n	80107be <UART_SetConfig+0x7ae>
 80107a0:	2320      	movs	r3, #32
 80107a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107a6:	e00a      	b.n	80107be <UART_SetConfig+0x7ae>
 80107a8:	2340      	movs	r3, #64	@ 0x40
 80107aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107ae:	e006      	b.n	80107be <UART_SetConfig+0x7ae>
 80107b0:	2380      	movs	r3, #128	@ 0x80
 80107b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80107b6:	e002      	b.n	80107be <UART_SetConfig+0x7ae>
 80107b8:	2380      	movs	r3, #128	@ 0x80
 80107ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80107be:	697b      	ldr	r3, [r7, #20]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	4a55      	ldr	r2, [pc, #340]	@ (8010918 <UART_SetConfig+0x908>)
 80107c4:	4293      	cmp	r3, r2
 80107c6:	f040 80f8 	bne.w	80109ba <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80107ca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80107ce:	2b20      	cmp	r3, #32
 80107d0:	dc46      	bgt.n	8010860 <UART_SetConfig+0x850>
 80107d2:	2b02      	cmp	r3, #2
 80107d4:	db75      	blt.n	80108c2 <UART_SetConfig+0x8b2>
 80107d6:	3b02      	subs	r3, #2
 80107d8:	2b1e      	cmp	r3, #30
 80107da:	d872      	bhi.n	80108c2 <UART_SetConfig+0x8b2>
 80107dc:	a201      	add	r2, pc, #4	@ (adr r2, 80107e4 <UART_SetConfig+0x7d4>)
 80107de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107e2:	bf00      	nop
 80107e4:	08010867 	.word	0x08010867
 80107e8:	080108c3 	.word	0x080108c3
 80107ec:	0801086f 	.word	0x0801086f
 80107f0:	080108c3 	.word	0x080108c3
 80107f4:	080108c3 	.word	0x080108c3
 80107f8:	080108c3 	.word	0x080108c3
 80107fc:	0801087f 	.word	0x0801087f
 8010800:	080108c3 	.word	0x080108c3
 8010804:	080108c3 	.word	0x080108c3
 8010808:	080108c3 	.word	0x080108c3
 801080c:	080108c3 	.word	0x080108c3
 8010810:	080108c3 	.word	0x080108c3
 8010814:	080108c3 	.word	0x080108c3
 8010818:	080108c3 	.word	0x080108c3
 801081c:	0801088f 	.word	0x0801088f
 8010820:	080108c3 	.word	0x080108c3
 8010824:	080108c3 	.word	0x080108c3
 8010828:	080108c3 	.word	0x080108c3
 801082c:	080108c3 	.word	0x080108c3
 8010830:	080108c3 	.word	0x080108c3
 8010834:	080108c3 	.word	0x080108c3
 8010838:	080108c3 	.word	0x080108c3
 801083c:	080108c3 	.word	0x080108c3
 8010840:	080108c3 	.word	0x080108c3
 8010844:	080108c3 	.word	0x080108c3
 8010848:	080108c3 	.word	0x080108c3
 801084c:	080108c3 	.word	0x080108c3
 8010850:	080108c3 	.word	0x080108c3
 8010854:	080108c3 	.word	0x080108c3
 8010858:	080108c3 	.word	0x080108c3
 801085c:	080108b5 	.word	0x080108b5
 8010860:	2b40      	cmp	r3, #64	@ 0x40
 8010862:	d02a      	beq.n	80108ba <UART_SetConfig+0x8aa>
 8010864:	e02d      	b.n	80108c2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010866:	f7fc fed3 	bl	800d610 <HAL_RCCEx_GetD3PCLK1Freq>
 801086a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801086c:	e02f      	b.n	80108ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801086e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010872:	4618      	mov	r0, r3
 8010874:	f7fc fee2 	bl	800d63c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801087a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801087c:	e027      	b.n	80108ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801087e:	f107 0318 	add.w	r3, r7, #24
 8010882:	4618      	mov	r0, r3
 8010884:	f7fd f82e 	bl	800d8e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010888:	69fb      	ldr	r3, [r7, #28]
 801088a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801088c:	e01f      	b.n	80108ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801088e:	4b21      	ldr	r3, [pc, #132]	@ (8010914 <UART_SetConfig+0x904>)
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	f003 0320 	and.w	r3, r3, #32
 8010896:	2b00      	cmp	r3, #0
 8010898:	d009      	beq.n	80108ae <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801089a:	4b1e      	ldr	r3, [pc, #120]	@ (8010914 <UART_SetConfig+0x904>)
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	08db      	lsrs	r3, r3, #3
 80108a0:	f003 0303 	and.w	r3, r3, #3
 80108a4:	4a1d      	ldr	r2, [pc, #116]	@ (801091c <UART_SetConfig+0x90c>)
 80108a6:	fa22 f303 	lsr.w	r3, r2, r3
 80108aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80108ac:	e00f      	b.n	80108ce <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80108ae:	4b1b      	ldr	r3, [pc, #108]	@ (801091c <UART_SetConfig+0x90c>)
 80108b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80108b2:	e00c      	b.n	80108ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80108b4:	4b1a      	ldr	r3, [pc, #104]	@ (8010920 <UART_SetConfig+0x910>)
 80108b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80108b8:	e009      	b.n	80108ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80108ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80108be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80108c0:	e005      	b.n	80108ce <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80108c2:	2300      	movs	r3, #0
 80108c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80108c6:	2301      	movs	r3, #1
 80108c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80108cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80108ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	f000 81ee 	beq.w	8010cb2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80108d6:	697b      	ldr	r3, [r7, #20]
 80108d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80108da:	4a12      	ldr	r2, [pc, #72]	@ (8010924 <UART_SetConfig+0x914>)
 80108dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80108e0:	461a      	mov	r2, r3
 80108e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80108e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80108e8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80108ea:	697b      	ldr	r3, [r7, #20]
 80108ec:	685a      	ldr	r2, [r3, #4]
 80108ee:	4613      	mov	r3, r2
 80108f0:	005b      	lsls	r3, r3, #1
 80108f2:	4413      	add	r3, r2
 80108f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80108f6:	429a      	cmp	r2, r3
 80108f8:	d305      	bcc.n	8010906 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80108fa:	697b      	ldr	r3, [r7, #20]
 80108fc:	685b      	ldr	r3, [r3, #4]
 80108fe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010900:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010902:	429a      	cmp	r2, r3
 8010904:	d910      	bls.n	8010928 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8010906:	2301      	movs	r3, #1
 8010908:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801090c:	e1d1      	b.n	8010cb2 <UART_SetConfig+0xca2>
 801090e:	bf00      	nop
 8010910:	40011c00 	.word	0x40011c00
 8010914:	58024400 	.word	0x58024400
 8010918:	58000c00 	.word	0x58000c00
 801091c:	03d09000 	.word	0x03d09000
 8010920:	003d0900 	.word	0x003d0900
 8010924:	080149c8 	.word	0x080149c8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801092a:	2200      	movs	r2, #0
 801092c:	60bb      	str	r3, [r7, #8]
 801092e:	60fa      	str	r2, [r7, #12]
 8010930:	697b      	ldr	r3, [r7, #20]
 8010932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010934:	4ac0      	ldr	r2, [pc, #768]	@ (8010c38 <UART_SetConfig+0xc28>)
 8010936:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801093a:	b29b      	uxth	r3, r3
 801093c:	2200      	movs	r2, #0
 801093e:	603b      	str	r3, [r7, #0]
 8010940:	607a      	str	r2, [r7, #4]
 8010942:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010946:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801094a:	f7ef fd39 	bl	80003c0 <__aeabi_uldivmod>
 801094e:	4602      	mov	r2, r0
 8010950:	460b      	mov	r3, r1
 8010952:	4610      	mov	r0, r2
 8010954:	4619      	mov	r1, r3
 8010956:	f04f 0200 	mov.w	r2, #0
 801095a:	f04f 0300 	mov.w	r3, #0
 801095e:	020b      	lsls	r3, r1, #8
 8010960:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010964:	0202      	lsls	r2, r0, #8
 8010966:	6979      	ldr	r1, [r7, #20]
 8010968:	6849      	ldr	r1, [r1, #4]
 801096a:	0849      	lsrs	r1, r1, #1
 801096c:	2000      	movs	r0, #0
 801096e:	460c      	mov	r4, r1
 8010970:	4605      	mov	r5, r0
 8010972:	eb12 0804 	adds.w	r8, r2, r4
 8010976:	eb43 0905 	adc.w	r9, r3, r5
 801097a:	697b      	ldr	r3, [r7, #20]
 801097c:	685b      	ldr	r3, [r3, #4]
 801097e:	2200      	movs	r2, #0
 8010980:	469a      	mov	sl, r3
 8010982:	4693      	mov	fp, r2
 8010984:	4652      	mov	r2, sl
 8010986:	465b      	mov	r3, fp
 8010988:	4640      	mov	r0, r8
 801098a:	4649      	mov	r1, r9
 801098c:	f7ef fd18 	bl	80003c0 <__aeabi_uldivmod>
 8010990:	4602      	mov	r2, r0
 8010992:	460b      	mov	r3, r1
 8010994:	4613      	mov	r3, r2
 8010996:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801099a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801099e:	d308      	bcc.n	80109b2 <UART_SetConfig+0x9a2>
 80109a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80109a6:	d204      	bcs.n	80109b2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80109a8:	697b      	ldr	r3, [r7, #20]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80109ae:	60da      	str	r2, [r3, #12]
 80109b0:	e17f      	b.n	8010cb2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80109b2:	2301      	movs	r3, #1
 80109b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80109b8:	e17b      	b.n	8010cb2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80109ba:	697b      	ldr	r3, [r7, #20]
 80109bc:	69db      	ldr	r3, [r3, #28]
 80109be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80109c2:	f040 80bd 	bne.w	8010b40 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80109c6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80109ca:	2b20      	cmp	r3, #32
 80109cc:	dc48      	bgt.n	8010a60 <UART_SetConfig+0xa50>
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	db7b      	blt.n	8010aca <UART_SetConfig+0xaba>
 80109d2:	2b20      	cmp	r3, #32
 80109d4:	d879      	bhi.n	8010aca <UART_SetConfig+0xaba>
 80109d6:	a201      	add	r2, pc, #4	@ (adr r2, 80109dc <UART_SetConfig+0x9cc>)
 80109d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109dc:	08010a67 	.word	0x08010a67
 80109e0:	08010a6f 	.word	0x08010a6f
 80109e4:	08010acb 	.word	0x08010acb
 80109e8:	08010acb 	.word	0x08010acb
 80109ec:	08010a77 	.word	0x08010a77
 80109f0:	08010acb 	.word	0x08010acb
 80109f4:	08010acb 	.word	0x08010acb
 80109f8:	08010acb 	.word	0x08010acb
 80109fc:	08010a87 	.word	0x08010a87
 8010a00:	08010acb 	.word	0x08010acb
 8010a04:	08010acb 	.word	0x08010acb
 8010a08:	08010acb 	.word	0x08010acb
 8010a0c:	08010acb 	.word	0x08010acb
 8010a10:	08010acb 	.word	0x08010acb
 8010a14:	08010acb 	.word	0x08010acb
 8010a18:	08010acb 	.word	0x08010acb
 8010a1c:	08010a97 	.word	0x08010a97
 8010a20:	08010acb 	.word	0x08010acb
 8010a24:	08010acb 	.word	0x08010acb
 8010a28:	08010acb 	.word	0x08010acb
 8010a2c:	08010acb 	.word	0x08010acb
 8010a30:	08010acb 	.word	0x08010acb
 8010a34:	08010acb 	.word	0x08010acb
 8010a38:	08010acb 	.word	0x08010acb
 8010a3c:	08010acb 	.word	0x08010acb
 8010a40:	08010acb 	.word	0x08010acb
 8010a44:	08010acb 	.word	0x08010acb
 8010a48:	08010acb 	.word	0x08010acb
 8010a4c:	08010acb 	.word	0x08010acb
 8010a50:	08010acb 	.word	0x08010acb
 8010a54:	08010acb 	.word	0x08010acb
 8010a58:	08010acb 	.word	0x08010acb
 8010a5c:	08010abd 	.word	0x08010abd
 8010a60:	2b40      	cmp	r3, #64	@ 0x40
 8010a62:	d02e      	beq.n	8010ac2 <UART_SetConfig+0xab2>
 8010a64:	e031      	b.n	8010aca <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010a66:	f7fa ff35 	bl	800b8d4 <HAL_RCC_GetPCLK1Freq>
 8010a6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010a6c:	e033      	b.n	8010ad6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010a6e:	f7fa ff47 	bl	800b900 <HAL_RCC_GetPCLK2Freq>
 8010a72:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010a74:	e02f      	b.n	8010ad6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010a76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010a7a:	4618      	mov	r0, r3
 8010a7c:	f7fc fdde 	bl	800d63c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010a84:	e027      	b.n	8010ad6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010a86:	f107 0318 	add.w	r3, r7, #24
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	f7fc ff2a 	bl	800d8e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010a90:	69fb      	ldr	r3, [r7, #28]
 8010a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010a94:	e01f      	b.n	8010ad6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010a96:	4b69      	ldr	r3, [pc, #420]	@ (8010c3c <UART_SetConfig+0xc2c>)
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	f003 0320 	and.w	r3, r3, #32
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d009      	beq.n	8010ab6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010aa2:	4b66      	ldr	r3, [pc, #408]	@ (8010c3c <UART_SetConfig+0xc2c>)
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	08db      	lsrs	r3, r3, #3
 8010aa8:	f003 0303 	and.w	r3, r3, #3
 8010aac:	4a64      	ldr	r2, [pc, #400]	@ (8010c40 <UART_SetConfig+0xc30>)
 8010aae:	fa22 f303 	lsr.w	r3, r2, r3
 8010ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010ab4:	e00f      	b.n	8010ad6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8010ab6:	4b62      	ldr	r3, [pc, #392]	@ (8010c40 <UART_SetConfig+0xc30>)
 8010ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010aba:	e00c      	b.n	8010ad6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010abc:	4b61      	ldr	r3, [pc, #388]	@ (8010c44 <UART_SetConfig+0xc34>)
 8010abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010ac0:	e009      	b.n	8010ad6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010ac2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010ac8:	e005      	b.n	8010ad6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8010aca:	2300      	movs	r3, #0
 8010acc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010ace:	2301      	movs	r3, #1
 8010ad0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010ad4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010ad6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	f000 80ea 	beq.w	8010cb2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010ade:	697b      	ldr	r3, [r7, #20]
 8010ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ae2:	4a55      	ldr	r2, [pc, #340]	@ (8010c38 <UART_SetConfig+0xc28>)
 8010ae4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010ae8:	461a      	mov	r2, r3
 8010aea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010aec:	fbb3 f3f2 	udiv	r3, r3, r2
 8010af0:	005a      	lsls	r2, r3, #1
 8010af2:	697b      	ldr	r3, [r7, #20]
 8010af4:	685b      	ldr	r3, [r3, #4]
 8010af6:	085b      	lsrs	r3, r3, #1
 8010af8:	441a      	add	r2, r3
 8010afa:	697b      	ldr	r3, [r7, #20]
 8010afc:	685b      	ldr	r3, [r3, #4]
 8010afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8010b02:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b06:	2b0f      	cmp	r3, #15
 8010b08:	d916      	bls.n	8010b38 <UART_SetConfig+0xb28>
 8010b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010b10:	d212      	bcs.n	8010b38 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b14:	b29b      	uxth	r3, r3
 8010b16:	f023 030f 	bic.w	r3, r3, #15
 8010b1a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b1e:	085b      	lsrs	r3, r3, #1
 8010b20:	b29b      	uxth	r3, r3
 8010b22:	f003 0307 	and.w	r3, r3, #7
 8010b26:	b29a      	uxth	r2, r3
 8010b28:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010b2a:	4313      	orrs	r3, r2
 8010b2c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8010b2e:	697b      	ldr	r3, [r7, #20]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8010b34:	60da      	str	r2, [r3, #12]
 8010b36:	e0bc      	b.n	8010cb2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8010b38:	2301      	movs	r3, #1
 8010b3a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010b3e:	e0b8      	b.n	8010cb2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010b40:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010b44:	2b20      	cmp	r3, #32
 8010b46:	dc4b      	bgt.n	8010be0 <UART_SetConfig+0xbd0>
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	f2c0 8087 	blt.w	8010c5c <UART_SetConfig+0xc4c>
 8010b4e:	2b20      	cmp	r3, #32
 8010b50:	f200 8084 	bhi.w	8010c5c <UART_SetConfig+0xc4c>
 8010b54:	a201      	add	r2, pc, #4	@ (adr r2, 8010b5c <UART_SetConfig+0xb4c>)
 8010b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b5a:	bf00      	nop
 8010b5c:	08010be7 	.word	0x08010be7
 8010b60:	08010bef 	.word	0x08010bef
 8010b64:	08010c5d 	.word	0x08010c5d
 8010b68:	08010c5d 	.word	0x08010c5d
 8010b6c:	08010bf7 	.word	0x08010bf7
 8010b70:	08010c5d 	.word	0x08010c5d
 8010b74:	08010c5d 	.word	0x08010c5d
 8010b78:	08010c5d 	.word	0x08010c5d
 8010b7c:	08010c07 	.word	0x08010c07
 8010b80:	08010c5d 	.word	0x08010c5d
 8010b84:	08010c5d 	.word	0x08010c5d
 8010b88:	08010c5d 	.word	0x08010c5d
 8010b8c:	08010c5d 	.word	0x08010c5d
 8010b90:	08010c5d 	.word	0x08010c5d
 8010b94:	08010c5d 	.word	0x08010c5d
 8010b98:	08010c5d 	.word	0x08010c5d
 8010b9c:	08010c17 	.word	0x08010c17
 8010ba0:	08010c5d 	.word	0x08010c5d
 8010ba4:	08010c5d 	.word	0x08010c5d
 8010ba8:	08010c5d 	.word	0x08010c5d
 8010bac:	08010c5d 	.word	0x08010c5d
 8010bb0:	08010c5d 	.word	0x08010c5d
 8010bb4:	08010c5d 	.word	0x08010c5d
 8010bb8:	08010c5d 	.word	0x08010c5d
 8010bbc:	08010c5d 	.word	0x08010c5d
 8010bc0:	08010c5d 	.word	0x08010c5d
 8010bc4:	08010c5d 	.word	0x08010c5d
 8010bc8:	08010c5d 	.word	0x08010c5d
 8010bcc:	08010c5d 	.word	0x08010c5d
 8010bd0:	08010c5d 	.word	0x08010c5d
 8010bd4:	08010c5d 	.word	0x08010c5d
 8010bd8:	08010c5d 	.word	0x08010c5d
 8010bdc:	08010c4f 	.word	0x08010c4f
 8010be0:	2b40      	cmp	r3, #64	@ 0x40
 8010be2:	d037      	beq.n	8010c54 <UART_SetConfig+0xc44>
 8010be4:	e03a      	b.n	8010c5c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010be6:	f7fa fe75 	bl	800b8d4 <HAL_RCC_GetPCLK1Freq>
 8010bea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010bec:	e03c      	b.n	8010c68 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010bee:	f7fa fe87 	bl	800b900 <HAL_RCC_GetPCLK2Freq>
 8010bf2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010bf4:	e038      	b.n	8010c68 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010bf6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	f7fc fd1e 	bl	800d63c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010c04:	e030      	b.n	8010c68 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010c06:	f107 0318 	add.w	r3, r7, #24
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	f7fc fe6a 	bl	800d8e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010c10:	69fb      	ldr	r3, [r7, #28]
 8010c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010c14:	e028      	b.n	8010c68 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010c16:	4b09      	ldr	r3, [pc, #36]	@ (8010c3c <UART_SetConfig+0xc2c>)
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	f003 0320 	and.w	r3, r3, #32
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d012      	beq.n	8010c48 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010c22:	4b06      	ldr	r3, [pc, #24]	@ (8010c3c <UART_SetConfig+0xc2c>)
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	08db      	lsrs	r3, r3, #3
 8010c28:	f003 0303 	and.w	r3, r3, #3
 8010c2c:	4a04      	ldr	r2, [pc, #16]	@ (8010c40 <UART_SetConfig+0xc30>)
 8010c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8010c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010c34:	e018      	b.n	8010c68 <UART_SetConfig+0xc58>
 8010c36:	bf00      	nop
 8010c38:	080149c8 	.word	0x080149c8
 8010c3c:	58024400 	.word	0x58024400
 8010c40:	03d09000 	.word	0x03d09000
 8010c44:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8010c48:	4b24      	ldr	r3, [pc, #144]	@ (8010cdc <UART_SetConfig+0xccc>)
 8010c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010c4c:	e00c      	b.n	8010c68 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010c4e:	4b24      	ldr	r3, [pc, #144]	@ (8010ce0 <UART_SetConfig+0xcd0>)
 8010c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010c52:	e009      	b.n	8010c68 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010c54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010c5a:	e005      	b.n	8010c68 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8010c5c:	2300      	movs	r3, #0
 8010c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010c60:	2301      	movs	r3, #1
 8010c62:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010c66:	bf00      	nop
    }

    if (pclk != 0U)
 8010c68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d021      	beq.n	8010cb2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010c6e:	697b      	ldr	r3, [r7, #20]
 8010c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010c72:	4a1c      	ldr	r2, [pc, #112]	@ (8010ce4 <UART_SetConfig+0xcd4>)
 8010c74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010c78:	461a      	mov	r2, r3
 8010c7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c7c:	fbb3 f2f2 	udiv	r2, r3, r2
 8010c80:	697b      	ldr	r3, [r7, #20]
 8010c82:	685b      	ldr	r3, [r3, #4]
 8010c84:	085b      	lsrs	r3, r3, #1
 8010c86:	441a      	add	r2, r3
 8010c88:	697b      	ldr	r3, [r7, #20]
 8010c8a:	685b      	ldr	r3, [r3, #4]
 8010c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010c90:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c94:	2b0f      	cmp	r3, #15
 8010c96:	d909      	bls.n	8010cac <UART_SetConfig+0xc9c>
 8010c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010c9e:	d205      	bcs.n	8010cac <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ca2:	b29a      	uxth	r2, r3
 8010ca4:	697b      	ldr	r3, [r7, #20]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	60da      	str	r2, [r3, #12]
 8010caa:	e002      	b.n	8010cb2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8010cac:	2301      	movs	r3, #1
 8010cae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010cb2:	697b      	ldr	r3, [r7, #20]
 8010cb4:	2201      	movs	r2, #1
 8010cb6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8010cba:	697b      	ldr	r3, [r7, #20]
 8010cbc:	2201      	movs	r2, #1
 8010cbe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010cc2:	697b      	ldr	r3, [r7, #20]
 8010cc4:	2200      	movs	r2, #0
 8010cc6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8010cc8:	697b      	ldr	r3, [r7, #20]
 8010cca:	2200      	movs	r2, #0
 8010ccc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8010cce:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	3748      	adds	r7, #72	@ 0x48
 8010cd6:	46bd      	mov	sp, r7
 8010cd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010cdc:	03d09000 	.word	0x03d09000
 8010ce0:	003d0900 	.word	0x003d0900
 8010ce4:	080149c8 	.word	0x080149c8

08010ce8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010ce8:	b480      	push	{r7}
 8010cea:	b083      	sub	sp, #12
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010cf4:	f003 0301 	and.w	r3, r3, #1
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d00a      	beq.n	8010d12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	685b      	ldr	r3, [r3, #4]
 8010d02:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	430a      	orrs	r2, r1
 8010d10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d16:	f003 0302 	and.w	r3, r3, #2
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d00a      	beq.n	8010d34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	685b      	ldr	r3, [r3, #4]
 8010d24:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	430a      	orrs	r2, r1
 8010d32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d38:	f003 0304 	and.w	r3, r3, #4
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d00a      	beq.n	8010d56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	685b      	ldr	r3, [r3, #4]
 8010d46:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	430a      	orrs	r2, r1
 8010d54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d5a:	f003 0308 	and.w	r3, r3, #8
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d00a      	beq.n	8010d78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	685b      	ldr	r3, [r3, #4]
 8010d68:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	430a      	orrs	r2, r1
 8010d76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d7c:	f003 0310 	and.w	r3, r3, #16
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d00a      	beq.n	8010d9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	689b      	ldr	r3, [r3, #8]
 8010d8a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	430a      	orrs	r2, r1
 8010d98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d9e:	f003 0320 	and.w	r3, r3, #32
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d00a      	beq.n	8010dbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	681b      	ldr	r3, [r3, #0]
 8010daa:	689b      	ldr	r3, [r3, #8]
 8010dac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	430a      	orrs	r2, r1
 8010dba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d01a      	beq.n	8010dfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	685b      	ldr	r3, [r3, #4]
 8010dce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	430a      	orrs	r2, r1
 8010ddc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010de2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010de6:	d10a      	bne.n	8010dfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	685b      	ldr	r3, [r3, #4]
 8010dee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	430a      	orrs	r2, r1
 8010dfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d00a      	beq.n	8010e20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	685b      	ldr	r3, [r3, #4]
 8010e10:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	430a      	orrs	r2, r1
 8010e1e:	605a      	str	r2, [r3, #4]
  }
}
 8010e20:	bf00      	nop
 8010e22:	370c      	adds	r7, #12
 8010e24:	46bd      	mov	sp, r7
 8010e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e2a:	4770      	bx	lr

08010e2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010e2c:	b580      	push	{r7, lr}
 8010e2e:	b098      	sub	sp, #96	@ 0x60
 8010e30:	af02      	add	r7, sp, #8
 8010e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	2200      	movs	r2, #0
 8010e38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010e3c:	f7f3 fb60 	bl	8004500 <HAL_GetTick>
 8010e40:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	f003 0308 	and.w	r3, r3, #8
 8010e4c:	2b08      	cmp	r3, #8
 8010e4e:	d12f      	bne.n	8010eb0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010e50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010e54:	9300      	str	r3, [sp, #0]
 8010e56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010e58:	2200      	movs	r2, #0
 8010e5a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010e5e:	6878      	ldr	r0, [r7, #4]
 8010e60:	f000 f88e 	bl	8010f80 <UART_WaitOnFlagUntilTimeout>
 8010e64:	4603      	mov	r3, r0
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d022      	beq.n	8010eb0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e72:	e853 3f00 	ldrex	r3, [r3]
 8010e76:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010e7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	461a      	mov	r2, r3
 8010e86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010e88:	647b      	str	r3, [r7, #68]	@ 0x44
 8010e8a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e8c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010e8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010e90:	e841 2300 	strex	r3, r2, [r1]
 8010e94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010e96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d1e6      	bne.n	8010e6a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	2220      	movs	r2, #32
 8010ea0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	2200      	movs	r2, #0
 8010ea8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010eac:	2303      	movs	r3, #3
 8010eae:	e063      	b.n	8010f78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	f003 0304 	and.w	r3, r3, #4
 8010eba:	2b04      	cmp	r3, #4
 8010ebc:	d149      	bne.n	8010f52 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010ebe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010ec2:	9300      	str	r3, [sp, #0]
 8010ec4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010ec6:	2200      	movs	r2, #0
 8010ec8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010ecc:	6878      	ldr	r0, [r7, #4]
 8010ece:	f000 f857 	bl	8010f80 <UART_WaitOnFlagUntilTimeout>
 8010ed2:	4603      	mov	r3, r0
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d03c      	beq.n	8010f52 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ee0:	e853 3f00 	ldrex	r3, [r3]
 8010ee4:	623b      	str	r3, [r7, #32]
   return(result);
 8010ee6:	6a3b      	ldr	r3, [r7, #32]
 8010ee8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010eec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	461a      	mov	r2, r3
 8010ef4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010ef6:	633b      	str	r3, [r7, #48]	@ 0x30
 8010ef8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010efa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010efc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010efe:	e841 2300 	strex	r3, r2, [r1]
 8010f02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d1e6      	bne.n	8010ed8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	3308      	adds	r3, #8
 8010f10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f12:	693b      	ldr	r3, [r7, #16]
 8010f14:	e853 3f00 	ldrex	r3, [r3]
 8010f18:	60fb      	str	r3, [r7, #12]
   return(result);
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	f023 0301 	bic.w	r3, r3, #1
 8010f20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	3308      	adds	r3, #8
 8010f28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010f2a:	61fa      	str	r2, [r7, #28]
 8010f2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f2e:	69b9      	ldr	r1, [r7, #24]
 8010f30:	69fa      	ldr	r2, [r7, #28]
 8010f32:	e841 2300 	strex	r3, r2, [r1]
 8010f36:	617b      	str	r3, [r7, #20]
   return(result);
 8010f38:	697b      	ldr	r3, [r7, #20]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d1e5      	bne.n	8010f0a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	2220      	movs	r2, #32
 8010f42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	2200      	movs	r2, #0
 8010f4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010f4e:	2303      	movs	r3, #3
 8010f50:	e012      	b.n	8010f78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	2220      	movs	r2, #32
 8010f56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	2220      	movs	r2, #32
 8010f5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	2200      	movs	r2, #0
 8010f66:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	2200      	movs	r2, #0
 8010f6c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	2200      	movs	r2, #0
 8010f72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010f76:	2300      	movs	r3, #0
}
 8010f78:	4618      	mov	r0, r3
 8010f7a:	3758      	adds	r7, #88	@ 0x58
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	bd80      	pop	{r7, pc}

08010f80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b084      	sub	sp, #16
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	60f8      	str	r0, [r7, #12]
 8010f88:	60b9      	str	r1, [r7, #8]
 8010f8a:	603b      	str	r3, [r7, #0]
 8010f8c:	4613      	mov	r3, r2
 8010f8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010f90:	e049      	b.n	8011026 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010f92:	69bb      	ldr	r3, [r7, #24]
 8010f94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010f98:	d045      	beq.n	8011026 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010f9a:	f7f3 fab1 	bl	8004500 <HAL_GetTick>
 8010f9e:	4602      	mov	r2, r0
 8010fa0:	683b      	ldr	r3, [r7, #0]
 8010fa2:	1ad3      	subs	r3, r2, r3
 8010fa4:	69ba      	ldr	r2, [r7, #24]
 8010fa6:	429a      	cmp	r2, r3
 8010fa8:	d302      	bcc.n	8010fb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8010faa:	69bb      	ldr	r3, [r7, #24]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d101      	bne.n	8010fb4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010fb0:	2303      	movs	r3, #3
 8010fb2:	e048      	b.n	8011046 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	681b      	ldr	r3, [r3, #0]
 8010fba:	f003 0304 	and.w	r3, r3, #4
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d031      	beq.n	8011026 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	69db      	ldr	r3, [r3, #28]
 8010fc8:	f003 0308 	and.w	r3, r3, #8
 8010fcc:	2b08      	cmp	r3, #8
 8010fce:	d110      	bne.n	8010ff2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	2208      	movs	r2, #8
 8010fd6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8010fd8:	68f8      	ldr	r0, [r7, #12]
 8010fda:	f000 f839 	bl	8011050 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	2208      	movs	r2, #8
 8010fe2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	2200      	movs	r2, #0
 8010fea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 8010fee:	2301      	movs	r3, #1
 8010ff0:	e029      	b.n	8011046 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	69db      	ldr	r3, [r3, #28]
 8010ff8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010ffc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011000:	d111      	bne.n	8011026 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801100a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801100c:	68f8      	ldr	r0, [r7, #12]
 801100e:	f000 f81f 	bl	8011050 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	2220      	movs	r2, #32
 8011016:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	2200      	movs	r2, #0
 801101e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8011022:	2303      	movs	r3, #3
 8011024:	e00f      	b.n	8011046 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	69da      	ldr	r2, [r3, #28]
 801102c:	68bb      	ldr	r3, [r7, #8]
 801102e:	4013      	ands	r3, r2
 8011030:	68ba      	ldr	r2, [r7, #8]
 8011032:	429a      	cmp	r2, r3
 8011034:	bf0c      	ite	eq
 8011036:	2301      	moveq	r3, #1
 8011038:	2300      	movne	r3, #0
 801103a:	b2db      	uxtb	r3, r3
 801103c:	461a      	mov	r2, r3
 801103e:	79fb      	ldrb	r3, [r7, #7]
 8011040:	429a      	cmp	r2, r3
 8011042:	d0a6      	beq.n	8010f92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011044:	2300      	movs	r3, #0
}
 8011046:	4618      	mov	r0, r3
 8011048:	3710      	adds	r7, #16
 801104a:	46bd      	mov	sp, r7
 801104c:	bd80      	pop	{r7, pc}
	...

08011050 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011050:	b480      	push	{r7}
 8011052:	b095      	sub	sp, #84	@ 0x54
 8011054:	af00      	add	r7, sp, #0
 8011056:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801105e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011060:	e853 3f00 	ldrex	r3, [r3]
 8011064:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011068:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801106c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	461a      	mov	r2, r3
 8011074:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011076:	643b      	str	r3, [r7, #64]	@ 0x40
 8011078:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801107a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801107c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801107e:	e841 2300 	strex	r3, r2, [r1]
 8011082:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011086:	2b00      	cmp	r3, #0
 8011088:	d1e6      	bne.n	8011058 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	681b      	ldr	r3, [r3, #0]
 801108e:	3308      	adds	r3, #8
 8011090:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011092:	6a3b      	ldr	r3, [r7, #32]
 8011094:	e853 3f00 	ldrex	r3, [r3]
 8011098:	61fb      	str	r3, [r7, #28]
   return(result);
 801109a:	69fa      	ldr	r2, [r7, #28]
 801109c:	4b1e      	ldr	r3, [pc, #120]	@ (8011118 <UART_EndRxTransfer+0xc8>)
 801109e:	4013      	ands	r3, r2
 80110a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	3308      	adds	r3, #8
 80110a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80110aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80110ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80110b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80110b2:	e841 2300 	strex	r3, r2, [r1]
 80110b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80110b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d1e5      	bne.n	801108a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80110c2:	2b01      	cmp	r3, #1
 80110c4:	d118      	bne.n	80110f8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	e853 3f00 	ldrex	r3, [r3]
 80110d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80110d4:	68bb      	ldr	r3, [r7, #8]
 80110d6:	f023 0310 	bic.w	r3, r3, #16
 80110da:	647b      	str	r3, [r7, #68]	@ 0x44
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	461a      	mov	r2, r3
 80110e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80110e4:	61bb      	str	r3, [r7, #24]
 80110e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110e8:	6979      	ldr	r1, [r7, #20]
 80110ea:	69ba      	ldr	r2, [r7, #24]
 80110ec:	e841 2300 	strex	r3, r2, [r1]
 80110f0:	613b      	str	r3, [r7, #16]
   return(result);
 80110f2:	693b      	ldr	r3, [r7, #16]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d1e6      	bne.n	80110c6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	2220      	movs	r2, #32
 80110fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	2200      	movs	r2, #0
 8011104:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	2200      	movs	r2, #0
 801110a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 801110c:	bf00      	nop
 801110e:	3754      	adds	r7, #84	@ 0x54
 8011110:	46bd      	mov	sp, r7
 8011112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011116:	4770      	bx	lr
 8011118:	effffffe 	.word	0xeffffffe

0801111c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801111c:	b480      	push	{r7}
 801111e:	b085      	sub	sp, #20
 8011120:	af00      	add	r7, sp, #0
 8011122:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801112a:	2b01      	cmp	r3, #1
 801112c:	d101      	bne.n	8011132 <HAL_UARTEx_DisableFifoMode+0x16>
 801112e:	2302      	movs	r3, #2
 8011130:	e027      	b.n	8011182 <HAL_UARTEx_DisableFifoMode+0x66>
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	2201      	movs	r2, #1
 8011136:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	2224      	movs	r2, #36	@ 0x24
 801113e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	681a      	ldr	r2, [r3, #0]
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	f022 0201 	bic.w	r2, r2, #1
 8011158:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8011160:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	2200      	movs	r2, #0
 8011166:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	68fa      	ldr	r2, [r7, #12]
 801116e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	2220      	movs	r2, #32
 8011174:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	2200      	movs	r2, #0
 801117c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011180:	2300      	movs	r3, #0
}
 8011182:	4618      	mov	r0, r3
 8011184:	3714      	adds	r7, #20
 8011186:	46bd      	mov	sp, r7
 8011188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801118c:	4770      	bx	lr

0801118e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801118e:	b580      	push	{r7, lr}
 8011190:	b084      	sub	sp, #16
 8011192:	af00      	add	r7, sp, #0
 8011194:	6078      	str	r0, [r7, #4]
 8011196:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801119e:	2b01      	cmp	r3, #1
 80111a0:	d101      	bne.n	80111a6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80111a2:	2302      	movs	r3, #2
 80111a4:	e02d      	b.n	8011202 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	2201      	movs	r2, #1
 80111aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	2224      	movs	r2, #36	@ 0x24
 80111b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	681a      	ldr	r2, [r3, #0]
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	f022 0201 	bic.w	r2, r2, #1
 80111cc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	689b      	ldr	r3, [r3, #8]
 80111d4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	683a      	ldr	r2, [r7, #0]
 80111de:	430a      	orrs	r2, r1
 80111e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80111e2:	6878      	ldr	r0, [r7, #4]
 80111e4:	f000 f850 	bl	8011288 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	68fa      	ldr	r2, [r7, #12]
 80111ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	2220      	movs	r2, #32
 80111f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	2200      	movs	r2, #0
 80111fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011200:	2300      	movs	r3, #0
}
 8011202:	4618      	mov	r0, r3
 8011204:	3710      	adds	r7, #16
 8011206:	46bd      	mov	sp, r7
 8011208:	bd80      	pop	{r7, pc}

0801120a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801120a:	b580      	push	{r7, lr}
 801120c:	b084      	sub	sp, #16
 801120e:	af00      	add	r7, sp, #0
 8011210:	6078      	str	r0, [r7, #4]
 8011212:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801121a:	2b01      	cmp	r3, #1
 801121c:	d101      	bne.n	8011222 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801121e:	2302      	movs	r3, #2
 8011220:	e02d      	b.n	801127e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	2201      	movs	r2, #1
 8011226:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	2224      	movs	r2, #36	@ 0x24
 801122e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	681a      	ldr	r2, [r3, #0]
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	f022 0201 	bic.w	r2, r2, #1
 8011248:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	689b      	ldr	r3, [r3, #8]
 8011250:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	683a      	ldr	r2, [r7, #0]
 801125a:	430a      	orrs	r2, r1
 801125c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801125e:	6878      	ldr	r0, [r7, #4]
 8011260:	f000 f812 	bl	8011288 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	68fa      	ldr	r2, [r7, #12]
 801126a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	2220      	movs	r2, #32
 8011270:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	2200      	movs	r2, #0
 8011278:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801127c:	2300      	movs	r3, #0
}
 801127e:	4618      	mov	r0, r3
 8011280:	3710      	adds	r7, #16
 8011282:	46bd      	mov	sp, r7
 8011284:	bd80      	pop	{r7, pc}
	...

08011288 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011288:	b480      	push	{r7}
 801128a:	b085      	sub	sp, #20
 801128c:	af00      	add	r7, sp, #0
 801128e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011294:	2b00      	cmp	r3, #0
 8011296:	d108      	bne.n	80112aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	2201      	movs	r2, #1
 801129c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	2201      	movs	r2, #1
 80112a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80112a8:	e031      	b.n	801130e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80112aa:	2310      	movs	r3, #16
 80112ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80112ae:	2310      	movs	r3, #16
 80112b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	689b      	ldr	r3, [r3, #8]
 80112b8:	0e5b      	lsrs	r3, r3, #25
 80112ba:	b2db      	uxtb	r3, r3
 80112bc:	f003 0307 	and.w	r3, r3, #7
 80112c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	689b      	ldr	r3, [r3, #8]
 80112c8:	0f5b      	lsrs	r3, r3, #29
 80112ca:	b2db      	uxtb	r3, r3
 80112cc:	f003 0307 	and.w	r3, r3, #7
 80112d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80112d2:	7bbb      	ldrb	r3, [r7, #14]
 80112d4:	7b3a      	ldrb	r2, [r7, #12]
 80112d6:	4911      	ldr	r1, [pc, #68]	@ (801131c <UARTEx_SetNbDataToProcess+0x94>)
 80112d8:	5c8a      	ldrb	r2, [r1, r2]
 80112da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80112de:	7b3a      	ldrb	r2, [r7, #12]
 80112e0:	490f      	ldr	r1, [pc, #60]	@ (8011320 <UARTEx_SetNbDataToProcess+0x98>)
 80112e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80112e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80112e8:	b29a      	uxth	r2, r3
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80112f0:	7bfb      	ldrb	r3, [r7, #15]
 80112f2:	7b7a      	ldrb	r2, [r7, #13]
 80112f4:	4909      	ldr	r1, [pc, #36]	@ (801131c <UARTEx_SetNbDataToProcess+0x94>)
 80112f6:	5c8a      	ldrb	r2, [r1, r2]
 80112f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80112fc:	7b7a      	ldrb	r2, [r7, #13]
 80112fe:	4908      	ldr	r1, [pc, #32]	@ (8011320 <UARTEx_SetNbDataToProcess+0x98>)
 8011300:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011302:	fb93 f3f2 	sdiv	r3, r3, r2
 8011306:	b29a      	uxth	r2, r3
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801130e:	bf00      	nop
 8011310:	3714      	adds	r7, #20
 8011312:	46bd      	mov	sp, r7
 8011314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011318:	4770      	bx	lr
 801131a:	bf00      	nop
 801131c:	080149e0 	.word	0x080149e0
 8011320:	080149e8 	.word	0x080149e8

08011324 <atoi>:
 8011324:	220a      	movs	r2, #10
 8011326:	2100      	movs	r1, #0
 8011328:	f000 b894 	b.w	8011454 <strtol>

0801132c <__itoa>:
 801132c:	1e93      	subs	r3, r2, #2
 801132e:	2b22      	cmp	r3, #34	@ 0x22
 8011330:	b510      	push	{r4, lr}
 8011332:	460c      	mov	r4, r1
 8011334:	d904      	bls.n	8011340 <__itoa+0x14>
 8011336:	2300      	movs	r3, #0
 8011338:	700b      	strb	r3, [r1, #0]
 801133a:	461c      	mov	r4, r3
 801133c:	4620      	mov	r0, r4
 801133e:	bd10      	pop	{r4, pc}
 8011340:	2a0a      	cmp	r2, #10
 8011342:	d109      	bne.n	8011358 <__itoa+0x2c>
 8011344:	2800      	cmp	r0, #0
 8011346:	da07      	bge.n	8011358 <__itoa+0x2c>
 8011348:	232d      	movs	r3, #45	@ 0x2d
 801134a:	700b      	strb	r3, [r1, #0]
 801134c:	4240      	negs	r0, r0
 801134e:	2101      	movs	r1, #1
 8011350:	4421      	add	r1, r4
 8011352:	f000 f889 	bl	8011468 <__utoa>
 8011356:	e7f1      	b.n	801133c <__itoa+0x10>
 8011358:	2100      	movs	r1, #0
 801135a:	e7f9      	b.n	8011350 <__itoa+0x24>

0801135c <itoa>:
 801135c:	f7ff bfe6 	b.w	801132c <__itoa>

08011360 <_strtol_l.constprop.0>:
 8011360:	2b24      	cmp	r3, #36	@ 0x24
 8011362:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011366:	4686      	mov	lr, r0
 8011368:	4690      	mov	r8, r2
 801136a:	d801      	bhi.n	8011370 <_strtol_l.constprop.0+0x10>
 801136c:	2b01      	cmp	r3, #1
 801136e:	d106      	bne.n	801137e <_strtol_l.constprop.0+0x1e>
 8011370:	f000 fe78 	bl	8012064 <__errno>
 8011374:	2316      	movs	r3, #22
 8011376:	6003      	str	r3, [r0, #0]
 8011378:	2000      	movs	r0, #0
 801137a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801137e:	4834      	ldr	r0, [pc, #208]	@ (8011450 <_strtol_l.constprop.0+0xf0>)
 8011380:	460d      	mov	r5, r1
 8011382:	462a      	mov	r2, r5
 8011384:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011388:	5d06      	ldrb	r6, [r0, r4]
 801138a:	f016 0608 	ands.w	r6, r6, #8
 801138e:	d1f8      	bne.n	8011382 <_strtol_l.constprop.0+0x22>
 8011390:	2c2d      	cmp	r4, #45	@ 0x2d
 8011392:	d12d      	bne.n	80113f0 <_strtol_l.constprop.0+0x90>
 8011394:	782c      	ldrb	r4, [r5, #0]
 8011396:	2601      	movs	r6, #1
 8011398:	1c95      	adds	r5, r2, #2
 801139a:	f033 0210 	bics.w	r2, r3, #16
 801139e:	d109      	bne.n	80113b4 <_strtol_l.constprop.0+0x54>
 80113a0:	2c30      	cmp	r4, #48	@ 0x30
 80113a2:	d12a      	bne.n	80113fa <_strtol_l.constprop.0+0x9a>
 80113a4:	782a      	ldrb	r2, [r5, #0]
 80113a6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80113aa:	2a58      	cmp	r2, #88	@ 0x58
 80113ac:	d125      	bne.n	80113fa <_strtol_l.constprop.0+0x9a>
 80113ae:	786c      	ldrb	r4, [r5, #1]
 80113b0:	2310      	movs	r3, #16
 80113b2:	3502      	adds	r5, #2
 80113b4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80113b8:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80113bc:	2200      	movs	r2, #0
 80113be:	fbbc f9f3 	udiv	r9, ip, r3
 80113c2:	4610      	mov	r0, r2
 80113c4:	fb03 ca19 	mls	sl, r3, r9, ip
 80113c8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80113cc:	2f09      	cmp	r7, #9
 80113ce:	d81b      	bhi.n	8011408 <_strtol_l.constprop.0+0xa8>
 80113d0:	463c      	mov	r4, r7
 80113d2:	42a3      	cmp	r3, r4
 80113d4:	dd27      	ble.n	8011426 <_strtol_l.constprop.0+0xc6>
 80113d6:	1c57      	adds	r7, r2, #1
 80113d8:	d007      	beq.n	80113ea <_strtol_l.constprop.0+0x8a>
 80113da:	4581      	cmp	r9, r0
 80113dc:	d320      	bcc.n	8011420 <_strtol_l.constprop.0+0xc0>
 80113de:	d101      	bne.n	80113e4 <_strtol_l.constprop.0+0x84>
 80113e0:	45a2      	cmp	sl, r4
 80113e2:	db1d      	blt.n	8011420 <_strtol_l.constprop.0+0xc0>
 80113e4:	fb00 4003 	mla	r0, r0, r3, r4
 80113e8:	2201      	movs	r2, #1
 80113ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80113ee:	e7eb      	b.n	80113c8 <_strtol_l.constprop.0+0x68>
 80113f0:	2c2b      	cmp	r4, #43	@ 0x2b
 80113f2:	bf04      	itt	eq
 80113f4:	782c      	ldrbeq	r4, [r5, #0]
 80113f6:	1c95      	addeq	r5, r2, #2
 80113f8:	e7cf      	b.n	801139a <_strtol_l.constprop.0+0x3a>
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d1da      	bne.n	80113b4 <_strtol_l.constprop.0+0x54>
 80113fe:	2c30      	cmp	r4, #48	@ 0x30
 8011400:	bf0c      	ite	eq
 8011402:	2308      	moveq	r3, #8
 8011404:	230a      	movne	r3, #10
 8011406:	e7d5      	b.n	80113b4 <_strtol_l.constprop.0+0x54>
 8011408:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801140c:	2f19      	cmp	r7, #25
 801140e:	d801      	bhi.n	8011414 <_strtol_l.constprop.0+0xb4>
 8011410:	3c37      	subs	r4, #55	@ 0x37
 8011412:	e7de      	b.n	80113d2 <_strtol_l.constprop.0+0x72>
 8011414:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011418:	2f19      	cmp	r7, #25
 801141a:	d804      	bhi.n	8011426 <_strtol_l.constprop.0+0xc6>
 801141c:	3c57      	subs	r4, #87	@ 0x57
 801141e:	e7d8      	b.n	80113d2 <_strtol_l.constprop.0+0x72>
 8011420:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011424:	e7e1      	b.n	80113ea <_strtol_l.constprop.0+0x8a>
 8011426:	1c53      	adds	r3, r2, #1
 8011428:	d108      	bne.n	801143c <_strtol_l.constprop.0+0xdc>
 801142a:	2322      	movs	r3, #34	@ 0x22
 801142c:	f8ce 3000 	str.w	r3, [lr]
 8011430:	4660      	mov	r0, ip
 8011432:	f1b8 0f00 	cmp.w	r8, #0
 8011436:	d0a0      	beq.n	801137a <_strtol_l.constprop.0+0x1a>
 8011438:	1e69      	subs	r1, r5, #1
 801143a:	e006      	b.n	801144a <_strtol_l.constprop.0+0xea>
 801143c:	b106      	cbz	r6, 8011440 <_strtol_l.constprop.0+0xe0>
 801143e:	4240      	negs	r0, r0
 8011440:	f1b8 0f00 	cmp.w	r8, #0
 8011444:	d099      	beq.n	801137a <_strtol_l.constprop.0+0x1a>
 8011446:	2a00      	cmp	r2, #0
 8011448:	d1f6      	bne.n	8011438 <_strtol_l.constprop.0+0xd8>
 801144a:	f8c8 1000 	str.w	r1, [r8]
 801144e:	e794      	b.n	801137a <_strtol_l.constprop.0+0x1a>
 8011450:	08014a16 	.word	0x08014a16

08011454 <strtol>:
 8011454:	4613      	mov	r3, r2
 8011456:	460a      	mov	r2, r1
 8011458:	4601      	mov	r1, r0
 801145a:	4802      	ldr	r0, [pc, #8]	@ (8011464 <strtol+0x10>)
 801145c:	6800      	ldr	r0, [r0, #0]
 801145e:	f7ff bf7f 	b.w	8011360 <_strtol_l.constprop.0>
 8011462:	bf00      	nop
 8011464:	24000054 	.word	0x24000054

08011468 <__utoa>:
 8011468:	b5f0      	push	{r4, r5, r6, r7, lr}
 801146a:	4c1f      	ldr	r4, [pc, #124]	@ (80114e8 <__utoa+0x80>)
 801146c:	b08b      	sub	sp, #44	@ 0x2c
 801146e:	4605      	mov	r5, r0
 8011470:	460b      	mov	r3, r1
 8011472:	466e      	mov	r6, sp
 8011474:	f104 0c20 	add.w	ip, r4, #32
 8011478:	6820      	ldr	r0, [r4, #0]
 801147a:	6861      	ldr	r1, [r4, #4]
 801147c:	4637      	mov	r7, r6
 801147e:	c703      	stmia	r7!, {r0, r1}
 8011480:	3408      	adds	r4, #8
 8011482:	4564      	cmp	r4, ip
 8011484:	463e      	mov	r6, r7
 8011486:	d1f7      	bne.n	8011478 <__utoa+0x10>
 8011488:	7921      	ldrb	r1, [r4, #4]
 801148a:	7139      	strb	r1, [r7, #4]
 801148c:	1e91      	subs	r1, r2, #2
 801148e:	6820      	ldr	r0, [r4, #0]
 8011490:	6038      	str	r0, [r7, #0]
 8011492:	2922      	cmp	r1, #34	@ 0x22
 8011494:	f04f 0100 	mov.w	r1, #0
 8011498:	d904      	bls.n	80114a4 <__utoa+0x3c>
 801149a:	7019      	strb	r1, [r3, #0]
 801149c:	460b      	mov	r3, r1
 801149e:	4618      	mov	r0, r3
 80114a0:	b00b      	add	sp, #44	@ 0x2c
 80114a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80114a4:	1e58      	subs	r0, r3, #1
 80114a6:	4684      	mov	ip, r0
 80114a8:	fbb5 f7f2 	udiv	r7, r5, r2
 80114ac:	fb02 5617 	mls	r6, r2, r7, r5
 80114b0:	3628      	adds	r6, #40	@ 0x28
 80114b2:	446e      	add	r6, sp
 80114b4:	460c      	mov	r4, r1
 80114b6:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80114ba:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80114be:	462e      	mov	r6, r5
 80114c0:	42b2      	cmp	r2, r6
 80114c2:	f101 0101 	add.w	r1, r1, #1
 80114c6:	463d      	mov	r5, r7
 80114c8:	d9ee      	bls.n	80114a8 <__utoa+0x40>
 80114ca:	2200      	movs	r2, #0
 80114cc:	545a      	strb	r2, [r3, r1]
 80114ce:	1919      	adds	r1, r3, r4
 80114d0:	1aa5      	subs	r5, r4, r2
 80114d2:	42aa      	cmp	r2, r5
 80114d4:	dae3      	bge.n	801149e <__utoa+0x36>
 80114d6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80114da:	780e      	ldrb	r6, [r1, #0]
 80114dc:	7006      	strb	r6, [r0, #0]
 80114de:	3201      	adds	r2, #1
 80114e0:	f801 5901 	strb.w	r5, [r1], #-1
 80114e4:	e7f4      	b.n	80114d0 <__utoa+0x68>
 80114e6:	bf00      	nop
 80114e8:	080149f0 	.word	0x080149f0

080114ec <__cvt>:
 80114ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80114ee:	ed2d 8b02 	vpush	{d8}
 80114f2:	eeb0 8b40 	vmov.f64	d8, d0
 80114f6:	b085      	sub	sp, #20
 80114f8:	4617      	mov	r7, r2
 80114fa:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80114fc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80114fe:	ee18 2a90 	vmov	r2, s17
 8011502:	f025 0520 	bic.w	r5, r5, #32
 8011506:	2a00      	cmp	r2, #0
 8011508:	bfb6      	itet	lt
 801150a:	222d      	movlt	r2, #45	@ 0x2d
 801150c:	2200      	movge	r2, #0
 801150e:	eeb1 8b40 	vneglt.f64	d8, d0
 8011512:	2d46      	cmp	r5, #70	@ 0x46
 8011514:	460c      	mov	r4, r1
 8011516:	701a      	strb	r2, [r3, #0]
 8011518:	d004      	beq.n	8011524 <__cvt+0x38>
 801151a:	2d45      	cmp	r5, #69	@ 0x45
 801151c:	d100      	bne.n	8011520 <__cvt+0x34>
 801151e:	3401      	adds	r4, #1
 8011520:	2102      	movs	r1, #2
 8011522:	e000      	b.n	8011526 <__cvt+0x3a>
 8011524:	2103      	movs	r1, #3
 8011526:	ab03      	add	r3, sp, #12
 8011528:	9301      	str	r3, [sp, #4]
 801152a:	ab02      	add	r3, sp, #8
 801152c:	9300      	str	r3, [sp, #0]
 801152e:	4622      	mov	r2, r4
 8011530:	4633      	mov	r3, r6
 8011532:	eeb0 0b48 	vmov.f64	d0, d8
 8011536:	f000 fe53 	bl	80121e0 <_dtoa_r>
 801153a:	2d47      	cmp	r5, #71	@ 0x47
 801153c:	d114      	bne.n	8011568 <__cvt+0x7c>
 801153e:	07fb      	lsls	r3, r7, #31
 8011540:	d50a      	bpl.n	8011558 <__cvt+0x6c>
 8011542:	1902      	adds	r2, r0, r4
 8011544:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801154c:	bf08      	it	eq
 801154e:	9203      	streq	r2, [sp, #12]
 8011550:	2130      	movs	r1, #48	@ 0x30
 8011552:	9b03      	ldr	r3, [sp, #12]
 8011554:	4293      	cmp	r3, r2
 8011556:	d319      	bcc.n	801158c <__cvt+0xa0>
 8011558:	9b03      	ldr	r3, [sp, #12]
 801155a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801155c:	1a1b      	subs	r3, r3, r0
 801155e:	6013      	str	r3, [r2, #0]
 8011560:	b005      	add	sp, #20
 8011562:	ecbd 8b02 	vpop	{d8}
 8011566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011568:	2d46      	cmp	r5, #70	@ 0x46
 801156a:	eb00 0204 	add.w	r2, r0, r4
 801156e:	d1e9      	bne.n	8011544 <__cvt+0x58>
 8011570:	7803      	ldrb	r3, [r0, #0]
 8011572:	2b30      	cmp	r3, #48	@ 0x30
 8011574:	d107      	bne.n	8011586 <__cvt+0x9a>
 8011576:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801157a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801157e:	bf1c      	itt	ne
 8011580:	f1c4 0401 	rsbne	r4, r4, #1
 8011584:	6034      	strne	r4, [r6, #0]
 8011586:	6833      	ldr	r3, [r6, #0]
 8011588:	441a      	add	r2, r3
 801158a:	e7db      	b.n	8011544 <__cvt+0x58>
 801158c:	1c5c      	adds	r4, r3, #1
 801158e:	9403      	str	r4, [sp, #12]
 8011590:	7019      	strb	r1, [r3, #0]
 8011592:	e7de      	b.n	8011552 <__cvt+0x66>

08011594 <__exponent>:
 8011594:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011596:	2900      	cmp	r1, #0
 8011598:	bfba      	itte	lt
 801159a:	4249      	neglt	r1, r1
 801159c:	232d      	movlt	r3, #45	@ 0x2d
 801159e:	232b      	movge	r3, #43	@ 0x2b
 80115a0:	2909      	cmp	r1, #9
 80115a2:	7002      	strb	r2, [r0, #0]
 80115a4:	7043      	strb	r3, [r0, #1]
 80115a6:	dd29      	ble.n	80115fc <__exponent+0x68>
 80115a8:	f10d 0307 	add.w	r3, sp, #7
 80115ac:	461d      	mov	r5, r3
 80115ae:	270a      	movs	r7, #10
 80115b0:	461a      	mov	r2, r3
 80115b2:	fbb1 f6f7 	udiv	r6, r1, r7
 80115b6:	fb07 1416 	mls	r4, r7, r6, r1
 80115ba:	3430      	adds	r4, #48	@ 0x30
 80115bc:	f802 4c01 	strb.w	r4, [r2, #-1]
 80115c0:	460c      	mov	r4, r1
 80115c2:	2c63      	cmp	r4, #99	@ 0x63
 80115c4:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80115c8:	4631      	mov	r1, r6
 80115ca:	dcf1      	bgt.n	80115b0 <__exponent+0x1c>
 80115cc:	3130      	adds	r1, #48	@ 0x30
 80115ce:	1e94      	subs	r4, r2, #2
 80115d0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80115d4:	1c41      	adds	r1, r0, #1
 80115d6:	4623      	mov	r3, r4
 80115d8:	42ab      	cmp	r3, r5
 80115da:	d30a      	bcc.n	80115f2 <__exponent+0x5e>
 80115dc:	f10d 0309 	add.w	r3, sp, #9
 80115e0:	1a9b      	subs	r3, r3, r2
 80115e2:	42ac      	cmp	r4, r5
 80115e4:	bf88      	it	hi
 80115e6:	2300      	movhi	r3, #0
 80115e8:	3302      	adds	r3, #2
 80115ea:	4403      	add	r3, r0
 80115ec:	1a18      	subs	r0, r3, r0
 80115ee:	b003      	add	sp, #12
 80115f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115f2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80115f6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80115fa:	e7ed      	b.n	80115d8 <__exponent+0x44>
 80115fc:	2330      	movs	r3, #48	@ 0x30
 80115fe:	3130      	adds	r1, #48	@ 0x30
 8011600:	7083      	strb	r3, [r0, #2]
 8011602:	70c1      	strb	r1, [r0, #3]
 8011604:	1d03      	adds	r3, r0, #4
 8011606:	e7f1      	b.n	80115ec <__exponent+0x58>

08011608 <_printf_float>:
 8011608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801160c:	b08d      	sub	sp, #52	@ 0x34
 801160e:	460c      	mov	r4, r1
 8011610:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8011614:	4616      	mov	r6, r2
 8011616:	461f      	mov	r7, r3
 8011618:	4605      	mov	r5, r0
 801161a:	f000 fcd9 	bl	8011fd0 <_localeconv_r>
 801161e:	f8d0 b000 	ldr.w	fp, [r0]
 8011622:	4658      	mov	r0, fp
 8011624:	f7ee fec4 	bl	80003b0 <strlen>
 8011628:	2300      	movs	r3, #0
 801162a:	930a      	str	r3, [sp, #40]	@ 0x28
 801162c:	f8d8 3000 	ldr.w	r3, [r8]
 8011630:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011634:	6822      	ldr	r2, [r4, #0]
 8011636:	9005      	str	r0, [sp, #20]
 8011638:	3307      	adds	r3, #7
 801163a:	f023 0307 	bic.w	r3, r3, #7
 801163e:	f103 0108 	add.w	r1, r3, #8
 8011642:	f8c8 1000 	str.w	r1, [r8]
 8011646:	ed93 0b00 	vldr	d0, [r3]
 801164a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80118a8 <_printf_float+0x2a0>
 801164e:	eeb0 7bc0 	vabs.f64	d7, d0
 8011652:	eeb4 7b46 	vcmp.f64	d7, d6
 8011656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801165a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 801165e:	dd24      	ble.n	80116aa <_printf_float+0xa2>
 8011660:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011668:	d502      	bpl.n	8011670 <_printf_float+0x68>
 801166a:	232d      	movs	r3, #45	@ 0x2d
 801166c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011670:	498f      	ldr	r1, [pc, #572]	@ (80118b0 <_printf_float+0x2a8>)
 8011672:	4b90      	ldr	r3, [pc, #576]	@ (80118b4 <_printf_float+0x2ac>)
 8011674:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8011678:	bf94      	ite	ls
 801167a:	4688      	movls	r8, r1
 801167c:	4698      	movhi	r8, r3
 801167e:	f022 0204 	bic.w	r2, r2, #4
 8011682:	2303      	movs	r3, #3
 8011684:	6123      	str	r3, [r4, #16]
 8011686:	6022      	str	r2, [r4, #0]
 8011688:	f04f 0a00 	mov.w	sl, #0
 801168c:	9700      	str	r7, [sp, #0]
 801168e:	4633      	mov	r3, r6
 8011690:	aa0b      	add	r2, sp, #44	@ 0x2c
 8011692:	4621      	mov	r1, r4
 8011694:	4628      	mov	r0, r5
 8011696:	f000 f9d1 	bl	8011a3c <_printf_common>
 801169a:	3001      	adds	r0, #1
 801169c:	f040 8089 	bne.w	80117b2 <_printf_float+0x1aa>
 80116a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80116a4:	b00d      	add	sp, #52	@ 0x34
 80116a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116aa:	eeb4 0b40 	vcmp.f64	d0, d0
 80116ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116b2:	d709      	bvc.n	80116c8 <_printf_float+0xc0>
 80116b4:	ee10 3a90 	vmov	r3, s1
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	bfbc      	itt	lt
 80116bc:	232d      	movlt	r3, #45	@ 0x2d
 80116be:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80116c2:	497d      	ldr	r1, [pc, #500]	@ (80118b8 <_printf_float+0x2b0>)
 80116c4:	4b7d      	ldr	r3, [pc, #500]	@ (80118bc <_printf_float+0x2b4>)
 80116c6:	e7d5      	b.n	8011674 <_printf_float+0x6c>
 80116c8:	6863      	ldr	r3, [r4, #4]
 80116ca:	1c59      	adds	r1, r3, #1
 80116cc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80116d0:	d139      	bne.n	8011746 <_printf_float+0x13e>
 80116d2:	2306      	movs	r3, #6
 80116d4:	6063      	str	r3, [r4, #4]
 80116d6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80116da:	2300      	movs	r3, #0
 80116dc:	6022      	str	r2, [r4, #0]
 80116de:	9303      	str	r3, [sp, #12]
 80116e0:	ab0a      	add	r3, sp, #40	@ 0x28
 80116e2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80116e6:	ab09      	add	r3, sp, #36	@ 0x24
 80116e8:	9300      	str	r3, [sp, #0]
 80116ea:	6861      	ldr	r1, [r4, #4]
 80116ec:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80116f0:	4628      	mov	r0, r5
 80116f2:	f7ff fefb 	bl	80114ec <__cvt>
 80116f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80116fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80116fc:	4680      	mov	r8, r0
 80116fe:	d129      	bne.n	8011754 <_printf_float+0x14c>
 8011700:	1cc8      	adds	r0, r1, #3
 8011702:	db02      	blt.n	801170a <_printf_float+0x102>
 8011704:	6863      	ldr	r3, [r4, #4]
 8011706:	4299      	cmp	r1, r3
 8011708:	dd41      	ble.n	801178e <_printf_float+0x186>
 801170a:	f1a9 0902 	sub.w	r9, r9, #2
 801170e:	fa5f f989 	uxtb.w	r9, r9
 8011712:	3901      	subs	r1, #1
 8011714:	464a      	mov	r2, r9
 8011716:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801171a:	9109      	str	r1, [sp, #36]	@ 0x24
 801171c:	f7ff ff3a 	bl	8011594 <__exponent>
 8011720:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011722:	1813      	adds	r3, r2, r0
 8011724:	2a01      	cmp	r2, #1
 8011726:	4682      	mov	sl, r0
 8011728:	6123      	str	r3, [r4, #16]
 801172a:	dc02      	bgt.n	8011732 <_printf_float+0x12a>
 801172c:	6822      	ldr	r2, [r4, #0]
 801172e:	07d2      	lsls	r2, r2, #31
 8011730:	d501      	bpl.n	8011736 <_printf_float+0x12e>
 8011732:	3301      	adds	r3, #1
 8011734:	6123      	str	r3, [r4, #16]
 8011736:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801173a:	2b00      	cmp	r3, #0
 801173c:	d0a6      	beq.n	801168c <_printf_float+0x84>
 801173e:	232d      	movs	r3, #45	@ 0x2d
 8011740:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011744:	e7a2      	b.n	801168c <_printf_float+0x84>
 8011746:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801174a:	d1c4      	bne.n	80116d6 <_printf_float+0xce>
 801174c:	2b00      	cmp	r3, #0
 801174e:	d1c2      	bne.n	80116d6 <_printf_float+0xce>
 8011750:	2301      	movs	r3, #1
 8011752:	e7bf      	b.n	80116d4 <_printf_float+0xcc>
 8011754:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8011758:	d9db      	bls.n	8011712 <_printf_float+0x10a>
 801175a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 801175e:	d118      	bne.n	8011792 <_printf_float+0x18a>
 8011760:	2900      	cmp	r1, #0
 8011762:	6863      	ldr	r3, [r4, #4]
 8011764:	dd0b      	ble.n	801177e <_printf_float+0x176>
 8011766:	6121      	str	r1, [r4, #16]
 8011768:	b913      	cbnz	r3, 8011770 <_printf_float+0x168>
 801176a:	6822      	ldr	r2, [r4, #0]
 801176c:	07d0      	lsls	r0, r2, #31
 801176e:	d502      	bpl.n	8011776 <_printf_float+0x16e>
 8011770:	3301      	adds	r3, #1
 8011772:	440b      	add	r3, r1
 8011774:	6123      	str	r3, [r4, #16]
 8011776:	65a1      	str	r1, [r4, #88]	@ 0x58
 8011778:	f04f 0a00 	mov.w	sl, #0
 801177c:	e7db      	b.n	8011736 <_printf_float+0x12e>
 801177e:	b913      	cbnz	r3, 8011786 <_printf_float+0x17e>
 8011780:	6822      	ldr	r2, [r4, #0]
 8011782:	07d2      	lsls	r2, r2, #31
 8011784:	d501      	bpl.n	801178a <_printf_float+0x182>
 8011786:	3302      	adds	r3, #2
 8011788:	e7f4      	b.n	8011774 <_printf_float+0x16c>
 801178a:	2301      	movs	r3, #1
 801178c:	e7f2      	b.n	8011774 <_printf_float+0x16c>
 801178e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8011792:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011794:	4299      	cmp	r1, r3
 8011796:	db05      	blt.n	80117a4 <_printf_float+0x19c>
 8011798:	6823      	ldr	r3, [r4, #0]
 801179a:	6121      	str	r1, [r4, #16]
 801179c:	07d8      	lsls	r0, r3, #31
 801179e:	d5ea      	bpl.n	8011776 <_printf_float+0x16e>
 80117a0:	1c4b      	adds	r3, r1, #1
 80117a2:	e7e7      	b.n	8011774 <_printf_float+0x16c>
 80117a4:	2900      	cmp	r1, #0
 80117a6:	bfd4      	ite	le
 80117a8:	f1c1 0202 	rsble	r2, r1, #2
 80117ac:	2201      	movgt	r2, #1
 80117ae:	4413      	add	r3, r2
 80117b0:	e7e0      	b.n	8011774 <_printf_float+0x16c>
 80117b2:	6823      	ldr	r3, [r4, #0]
 80117b4:	055a      	lsls	r2, r3, #21
 80117b6:	d407      	bmi.n	80117c8 <_printf_float+0x1c0>
 80117b8:	6923      	ldr	r3, [r4, #16]
 80117ba:	4642      	mov	r2, r8
 80117bc:	4631      	mov	r1, r6
 80117be:	4628      	mov	r0, r5
 80117c0:	47b8      	blx	r7
 80117c2:	3001      	adds	r0, #1
 80117c4:	d12a      	bne.n	801181c <_printf_float+0x214>
 80117c6:	e76b      	b.n	80116a0 <_printf_float+0x98>
 80117c8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80117cc:	f240 80e0 	bls.w	8011990 <_printf_float+0x388>
 80117d0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80117d4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80117d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117dc:	d133      	bne.n	8011846 <_printf_float+0x23e>
 80117de:	4a38      	ldr	r2, [pc, #224]	@ (80118c0 <_printf_float+0x2b8>)
 80117e0:	2301      	movs	r3, #1
 80117e2:	4631      	mov	r1, r6
 80117e4:	4628      	mov	r0, r5
 80117e6:	47b8      	blx	r7
 80117e8:	3001      	adds	r0, #1
 80117ea:	f43f af59 	beq.w	80116a0 <_printf_float+0x98>
 80117ee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80117f2:	4543      	cmp	r3, r8
 80117f4:	db02      	blt.n	80117fc <_printf_float+0x1f4>
 80117f6:	6823      	ldr	r3, [r4, #0]
 80117f8:	07d8      	lsls	r0, r3, #31
 80117fa:	d50f      	bpl.n	801181c <_printf_float+0x214>
 80117fc:	9b05      	ldr	r3, [sp, #20]
 80117fe:	465a      	mov	r2, fp
 8011800:	4631      	mov	r1, r6
 8011802:	4628      	mov	r0, r5
 8011804:	47b8      	blx	r7
 8011806:	3001      	adds	r0, #1
 8011808:	f43f af4a 	beq.w	80116a0 <_printf_float+0x98>
 801180c:	f04f 0900 	mov.w	r9, #0
 8011810:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8011814:	f104 0a1a 	add.w	sl, r4, #26
 8011818:	45c8      	cmp	r8, r9
 801181a:	dc09      	bgt.n	8011830 <_printf_float+0x228>
 801181c:	6823      	ldr	r3, [r4, #0]
 801181e:	079b      	lsls	r3, r3, #30
 8011820:	f100 8107 	bmi.w	8011a32 <_printf_float+0x42a>
 8011824:	68e0      	ldr	r0, [r4, #12]
 8011826:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011828:	4298      	cmp	r0, r3
 801182a:	bfb8      	it	lt
 801182c:	4618      	movlt	r0, r3
 801182e:	e739      	b.n	80116a4 <_printf_float+0x9c>
 8011830:	2301      	movs	r3, #1
 8011832:	4652      	mov	r2, sl
 8011834:	4631      	mov	r1, r6
 8011836:	4628      	mov	r0, r5
 8011838:	47b8      	blx	r7
 801183a:	3001      	adds	r0, #1
 801183c:	f43f af30 	beq.w	80116a0 <_printf_float+0x98>
 8011840:	f109 0901 	add.w	r9, r9, #1
 8011844:	e7e8      	b.n	8011818 <_printf_float+0x210>
 8011846:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011848:	2b00      	cmp	r3, #0
 801184a:	dc3b      	bgt.n	80118c4 <_printf_float+0x2bc>
 801184c:	4a1c      	ldr	r2, [pc, #112]	@ (80118c0 <_printf_float+0x2b8>)
 801184e:	2301      	movs	r3, #1
 8011850:	4631      	mov	r1, r6
 8011852:	4628      	mov	r0, r5
 8011854:	47b8      	blx	r7
 8011856:	3001      	adds	r0, #1
 8011858:	f43f af22 	beq.w	80116a0 <_printf_float+0x98>
 801185c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8011860:	ea59 0303 	orrs.w	r3, r9, r3
 8011864:	d102      	bne.n	801186c <_printf_float+0x264>
 8011866:	6823      	ldr	r3, [r4, #0]
 8011868:	07d9      	lsls	r1, r3, #31
 801186a:	d5d7      	bpl.n	801181c <_printf_float+0x214>
 801186c:	9b05      	ldr	r3, [sp, #20]
 801186e:	465a      	mov	r2, fp
 8011870:	4631      	mov	r1, r6
 8011872:	4628      	mov	r0, r5
 8011874:	47b8      	blx	r7
 8011876:	3001      	adds	r0, #1
 8011878:	f43f af12 	beq.w	80116a0 <_printf_float+0x98>
 801187c:	f04f 0a00 	mov.w	sl, #0
 8011880:	f104 0b1a 	add.w	fp, r4, #26
 8011884:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011886:	425b      	negs	r3, r3
 8011888:	4553      	cmp	r3, sl
 801188a:	dc01      	bgt.n	8011890 <_printf_float+0x288>
 801188c:	464b      	mov	r3, r9
 801188e:	e794      	b.n	80117ba <_printf_float+0x1b2>
 8011890:	2301      	movs	r3, #1
 8011892:	465a      	mov	r2, fp
 8011894:	4631      	mov	r1, r6
 8011896:	4628      	mov	r0, r5
 8011898:	47b8      	blx	r7
 801189a:	3001      	adds	r0, #1
 801189c:	f43f af00 	beq.w	80116a0 <_printf_float+0x98>
 80118a0:	f10a 0a01 	add.w	sl, sl, #1
 80118a4:	e7ee      	b.n	8011884 <_printf_float+0x27c>
 80118a6:	bf00      	nop
 80118a8:	ffffffff 	.word	0xffffffff
 80118ac:	7fefffff 	.word	0x7fefffff
 80118b0:	08014b16 	.word	0x08014b16
 80118b4:	08014b1a 	.word	0x08014b1a
 80118b8:	08014b1e 	.word	0x08014b1e
 80118bc:	08014b22 	.word	0x08014b22
 80118c0:	08014b26 	.word	0x08014b26
 80118c4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80118c6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80118ca:	4553      	cmp	r3, sl
 80118cc:	bfa8      	it	ge
 80118ce:	4653      	movge	r3, sl
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	4699      	mov	r9, r3
 80118d4:	dc37      	bgt.n	8011946 <_printf_float+0x33e>
 80118d6:	2300      	movs	r3, #0
 80118d8:	9307      	str	r3, [sp, #28]
 80118da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80118de:	f104 021a 	add.w	r2, r4, #26
 80118e2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80118e4:	9907      	ldr	r1, [sp, #28]
 80118e6:	9306      	str	r3, [sp, #24]
 80118e8:	eba3 0309 	sub.w	r3, r3, r9
 80118ec:	428b      	cmp	r3, r1
 80118ee:	dc31      	bgt.n	8011954 <_printf_float+0x34c>
 80118f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80118f2:	459a      	cmp	sl, r3
 80118f4:	dc3b      	bgt.n	801196e <_printf_float+0x366>
 80118f6:	6823      	ldr	r3, [r4, #0]
 80118f8:	07da      	lsls	r2, r3, #31
 80118fa:	d438      	bmi.n	801196e <_printf_float+0x366>
 80118fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80118fe:	ebaa 0903 	sub.w	r9, sl, r3
 8011902:	9b06      	ldr	r3, [sp, #24]
 8011904:	ebaa 0303 	sub.w	r3, sl, r3
 8011908:	4599      	cmp	r9, r3
 801190a:	bfa8      	it	ge
 801190c:	4699      	movge	r9, r3
 801190e:	f1b9 0f00 	cmp.w	r9, #0
 8011912:	dc34      	bgt.n	801197e <_printf_float+0x376>
 8011914:	f04f 0800 	mov.w	r8, #0
 8011918:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801191c:	f104 0b1a 	add.w	fp, r4, #26
 8011920:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011922:	ebaa 0303 	sub.w	r3, sl, r3
 8011926:	eba3 0309 	sub.w	r3, r3, r9
 801192a:	4543      	cmp	r3, r8
 801192c:	f77f af76 	ble.w	801181c <_printf_float+0x214>
 8011930:	2301      	movs	r3, #1
 8011932:	465a      	mov	r2, fp
 8011934:	4631      	mov	r1, r6
 8011936:	4628      	mov	r0, r5
 8011938:	47b8      	blx	r7
 801193a:	3001      	adds	r0, #1
 801193c:	f43f aeb0 	beq.w	80116a0 <_printf_float+0x98>
 8011940:	f108 0801 	add.w	r8, r8, #1
 8011944:	e7ec      	b.n	8011920 <_printf_float+0x318>
 8011946:	4642      	mov	r2, r8
 8011948:	4631      	mov	r1, r6
 801194a:	4628      	mov	r0, r5
 801194c:	47b8      	blx	r7
 801194e:	3001      	adds	r0, #1
 8011950:	d1c1      	bne.n	80118d6 <_printf_float+0x2ce>
 8011952:	e6a5      	b.n	80116a0 <_printf_float+0x98>
 8011954:	2301      	movs	r3, #1
 8011956:	4631      	mov	r1, r6
 8011958:	4628      	mov	r0, r5
 801195a:	9206      	str	r2, [sp, #24]
 801195c:	47b8      	blx	r7
 801195e:	3001      	adds	r0, #1
 8011960:	f43f ae9e 	beq.w	80116a0 <_printf_float+0x98>
 8011964:	9b07      	ldr	r3, [sp, #28]
 8011966:	9a06      	ldr	r2, [sp, #24]
 8011968:	3301      	adds	r3, #1
 801196a:	9307      	str	r3, [sp, #28]
 801196c:	e7b9      	b.n	80118e2 <_printf_float+0x2da>
 801196e:	9b05      	ldr	r3, [sp, #20]
 8011970:	465a      	mov	r2, fp
 8011972:	4631      	mov	r1, r6
 8011974:	4628      	mov	r0, r5
 8011976:	47b8      	blx	r7
 8011978:	3001      	adds	r0, #1
 801197a:	d1bf      	bne.n	80118fc <_printf_float+0x2f4>
 801197c:	e690      	b.n	80116a0 <_printf_float+0x98>
 801197e:	9a06      	ldr	r2, [sp, #24]
 8011980:	464b      	mov	r3, r9
 8011982:	4442      	add	r2, r8
 8011984:	4631      	mov	r1, r6
 8011986:	4628      	mov	r0, r5
 8011988:	47b8      	blx	r7
 801198a:	3001      	adds	r0, #1
 801198c:	d1c2      	bne.n	8011914 <_printf_float+0x30c>
 801198e:	e687      	b.n	80116a0 <_printf_float+0x98>
 8011990:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8011994:	f1b9 0f01 	cmp.w	r9, #1
 8011998:	dc01      	bgt.n	801199e <_printf_float+0x396>
 801199a:	07db      	lsls	r3, r3, #31
 801199c:	d536      	bpl.n	8011a0c <_printf_float+0x404>
 801199e:	2301      	movs	r3, #1
 80119a0:	4642      	mov	r2, r8
 80119a2:	4631      	mov	r1, r6
 80119a4:	4628      	mov	r0, r5
 80119a6:	47b8      	blx	r7
 80119a8:	3001      	adds	r0, #1
 80119aa:	f43f ae79 	beq.w	80116a0 <_printf_float+0x98>
 80119ae:	9b05      	ldr	r3, [sp, #20]
 80119b0:	465a      	mov	r2, fp
 80119b2:	4631      	mov	r1, r6
 80119b4:	4628      	mov	r0, r5
 80119b6:	47b8      	blx	r7
 80119b8:	3001      	adds	r0, #1
 80119ba:	f43f ae71 	beq.w	80116a0 <_printf_float+0x98>
 80119be:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80119c2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80119c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119ca:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 80119ce:	d018      	beq.n	8011a02 <_printf_float+0x3fa>
 80119d0:	464b      	mov	r3, r9
 80119d2:	f108 0201 	add.w	r2, r8, #1
 80119d6:	4631      	mov	r1, r6
 80119d8:	4628      	mov	r0, r5
 80119da:	47b8      	blx	r7
 80119dc:	3001      	adds	r0, #1
 80119de:	d10c      	bne.n	80119fa <_printf_float+0x3f2>
 80119e0:	e65e      	b.n	80116a0 <_printf_float+0x98>
 80119e2:	2301      	movs	r3, #1
 80119e4:	465a      	mov	r2, fp
 80119e6:	4631      	mov	r1, r6
 80119e8:	4628      	mov	r0, r5
 80119ea:	47b8      	blx	r7
 80119ec:	3001      	adds	r0, #1
 80119ee:	f43f ae57 	beq.w	80116a0 <_printf_float+0x98>
 80119f2:	f108 0801 	add.w	r8, r8, #1
 80119f6:	45c8      	cmp	r8, r9
 80119f8:	dbf3      	blt.n	80119e2 <_printf_float+0x3da>
 80119fa:	4653      	mov	r3, sl
 80119fc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8011a00:	e6dc      	b.n	80117bc <_printf_float+0x1b4>
 8011a02:	f04f 0800 	mov.w	r8, #0
 8011a06:	f104 0b1a 	add.w	fp, r4, #26
 8011a0a:	e7f4      	b.n	80119f6 <_printf_float+0x3ee>
 8011a0c:	2301      	movs	r3, #1
 8011a0e:	4642      	mov	r2, r8
 8011a10:	e7e1      	b.n	80119d6 <_printf_float+0x3ce>
 8011a12:	2301      	movs	r3, #1
 8011a14:	464a      	mov	r2, r9
 8011a16:	4631      	mov	r1, r6
 8011a18:	4628      	mov	r0, r5
 8011a1a:	47b8      	blx	r7
 8011a1c:	3001      	adds	r0, #1
 8011a1e:	f43f ae3f 	beq.w	80116a0 <_printf_float+0x98>
 8011a22:	f108 0801 	add.w	r8, r8, #1
 8011a26:	68e3      	ldr	r3, [r4, #12]
 8011a28:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011a2a:	1a5b      	subs	r3, r3, r1
 8011a2c:	4543      	cmp	r3, r8
 8011a2e:	dcf0      	bgt.n	8011a12 <_printf_float+0x40a>
 8011a30:	e6f8      	b.n	8011824 <_printf_float+0x21c>
 8011a32:	f04f 0800 	mov.w	r8, #0
 8011a36:	f104 0919 	add.w	r9, r4, #25
 8011a3a:	e7f4      	b.n	8011a26 <_printf_float+0x41e>

08011a3c <_printf_common>:
 8011a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a40:	4616      	mov	r6, r2
 8011a42:	4698      	mov	r8, r3
 8011a44:	688a      	ldr	r2, [r1, #8]
 8011a46:	690b      	ldr	r3, [r1, #16]
 8011a48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011a4c:	4293      	cmp	r3, r2
 8011a4e:	bfb8      	it	lt
 8011a50:	4613      	movlt	r3, r2
 8011a52:	6033      	str	r3, [r6, #0]
 8011a54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011a58:	4607      	mov	r7, r0
 8011a5a:	460c      	mov	r4, r1
 8011a5c:	b10a      	cbz	r2, 8011a62 <_printf_common+0x26>
 8011a5e:	3301      	adds	r3, #1
 8011a60:	6033      	str	r3, [r6, #0]
 8011a62:	6823      	ldr	r3, [r4, #0]
 8011a64:	0699      	lsls	r1, r3, #26
 8011a66:	bf42      	ittt	mi
 8011a68:	6833      	ldrmi	r3, [r6, #0]
 8011a6a:	3302      	addmi	r3, #2
 8011a6c:	6033      	strmi	r3, [r6, #0]
 8011a6e:	6825      	ldr	r5, [r4, #0]
 8011a70:	f015 0506 	ands.w	r5, r5, #6
 8011a74:	d106      	bne.n	8011a84 <_printf_common+0x48>
 8011a76:	f104 0a19 	add.w	sl, r4, #25
 8011a7a:	68e3      	ldr	r3, [r4, #12]
 8011a7c:	6832      	ldr	r2, [r6, #0]
 8011a7e:	1a9b      	subs	r3, r3, r2
 8011a80:	42ab      	cmp	r3, r5
 8011a82:	dc26      	bgt.n	8011ad2 <_printf_common+0x96>
 8011a84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011a88:	6822      	ldr	r2, [r4, #0]
 8011a8a:	3b00      	subs	r3, #0
 8011a8c:	bf18      	it	ne
 8011a8e:	2301      	movne	r3, #1
 8011a90:	0692      	lsls	r2, r2, #26
 8011a92:	d42b      	bmi.n	8011aec <_printf_common+0xb0>
 8011a94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011a98:	4641      	mov	r1, r8
 8011a9a:	4638      	mov	r0, r7
 8011a9c:	47c8      	blx	r9
 8011a9e:	3001      	adds	r0, #1
 8011aa0:	d01e      	beq.n	8011ae0 <_printf_common+0xa4>
 8011aa2:	6823      	ldr	r3, [r4, #0]
 8011aa4:	6922      	ldr	r2, [r4, #16]
 8011aa6:	f003 0306 	and.w	r3, r3, #6
 8011aaa:	2b04      	cmp	r3, #4
 8011aac:	bf02      	ittt	eq
 8011aae:	68e5      	ldreq	r5, [r4, #12]
 8011ab0:	6833      	ldreq	r3, [r6, #0]
 8011ab2:	1aed      	subeq	r5, r5, r3
 8011ab4:	68a3      	ldr	r3, [r4, #8]
 8011ab6:	bf0c      	ite	eq
 8011ab8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011abc:	2500      	movne	r5, #0
 8011abe:	4293      	cmp	r3, r2
 8011ac0:	bfc4      	itt	gt
 8011ac2:	1a9b      	subgt	r3, r3, r2
 8011ac4:	18ed      	addgt	r5, r5, r3
 8011ac6:	2600      	movs	r6, #0
 8011ac8:	341a      	adds	r4, #26
 8011aca:	42b5      	cmp	r5, r6
 8011acc:	d11a      	bne.n	8011b04 <_printf_common+0xc8>
 8011ace:	2000      	movs	r0, #0
 8011ad0:	e008      	b.n	8011ae4 <_printf_common+0xa8>
 8011ad2:	2301      	movs	r3, #1
 8011ad4:	4652      	mov	r2, sl
 8011ad6:	4641      	mov	r1, r8
 8011ad8:	4638      	mov	r0, r7
 8011ada:	47c8      	blx	r9
 8011adc:	3001      	adds	r0, #1
 8011ade:	d103      	bne.n	8011ae8 <_printf_common+0xac>
 8011ae0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ae8:	3501      	adds	r5, #1
 8011aea:	e7c6      	b.n	8011a7a <_printf_common+0x3e>
 8011aec:	18e1      	adds	r1, r4, r3
 8011aee:	1c5a      	adds	r2, r3, #1
 8011af0:	2030      	movs	r0, #48	@ 0x30
 8011af2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011af6:	4422      	add	r2, r4
 8011af8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011afc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011b00:	3302      	adds	r3, #2
 8011b02:	e7c7      	b.n	8011a94 <_printf_common+0x58>
 8011b04:	2301      	movs	r3, #1
 8011b06:	4622      	mov	r2, r4
 8011b08:	4641      	mov	r1, r8
 8011b0a:	4638      	mov	r0, r7
 8011b0c:	47c8      	blx	r9
 8011b0e:	3001      	adds	r0, #1
 8011b10:	d0e6      	beq.n	8011ae0 <_printf_common+0xa4>
 8011b12:	3601      	adds	r6, #1
 8011b14:	e7d9      	b.n	8011aca <_printf_common+0x8e>
	...

08011b18 <_printf_i>:
 8011b18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011b1c:	7e0f      	ldrb	r7, [r1, #24]
 8011b1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011b20:	2f78      	cmp	r7, #120	@ 0x78
 8011b22:	4691      	mov	r9, r2
 8011b24:	4680      	mov	r8, r0
 8011b26:	460c      	mov	r4, r1
 8011b28:	469a      	mov	sl, r3
 8011b2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011b2e:	d807      	bhi.n	8011b40 <_printf_i+0x28>
 8011b30:	2f62      	cmp	r7, #98	@ 0x62
 8011b32:	d80a      	bhi.n	8011b4a <_printf_i+0x32>
 8011b34:	2f00      	cmp	r7, #0
 8011b36:	f000 80d2 	beq.w	8011cde <_printf_i+0x1c6>
 8011b3a:	2f58      	cmp	r7, #88	@ 0x58
 8011b3c:	f000 80b9 	beq.w	8011cb2 <_printf_i+0x19a>
 8011b40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011b44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011b48:	e03a      	b.n	8011bc0 <_printf_i+0xa8>
 8011b4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011b4e:	2b15      	cmp	r3, #21
 8011b50:	d8f6      	bhi.n	8011b40 <_printf_i+0x28>
 8011b52:	a101      	add	r1, pc, #4	@ (adr r1, 8011b58 <_printf_i+0x40>)
 8011b54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011b58:	08011bb1 	.word	0x08011bb1
 8011b5c:	08011bc5 	.word	0x08011bc5
 8011b60:	08011b41 	.word	0x08011b41
 8011b64:	08011b41 	.word	0x08011b41
 8011b68:	08011b41 	.word	0x08011b41
 8011b6c:	08011b41 	.word	0x08011b41
 8011b70:	08011bc5 	.word	0x08011bc5
 8011b74:	08011b41 	.word	0x08011b41
 8011b78:	08011b41 	.word	0x08011b41
 8011b7c:	08011b41 	.word	0x08011b41
 8011b80:	08011b41 	.word	0x08011b41
 8011b84:	08011cc5 	.word	0x08011cc5
 8011b88:	08011bef 	.word	0x08011bef
 8011b8c:	08011c7f 	.word	0x08011c7f
 8011b90:	08011b41 	.word	0x08011b41
 8011b94:	08011b41 	.word	0x08011b41
 8011b98:	08011ce7 	.word	0x08011ce7
 8011b9c:	08011b41 	.word	0x08011b41
 8011ba0:	08011bef 	.word	0x08011bef
 8011ba4:	08011b41 	.word	0x08011b41
 8011ba8:	08011b41 	.word	0x08011b41
 8011bac:	08011c87 	.word	0x08011c87
 8011bb0:	6833      	ldr	r3, [r6, #0]
 8011bb2:	1d1a      	adds	r2, r3, #4
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	6032      	str	r2, [r6, #0]
 8011bb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011bbc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011bc0:	2301      	movs	r3, #1
 8011bc2:	e09d      	b.n	8011d00 <_printf_i+0x1e8>
 8011bc4:	6833      	ldr	r3, [r6, #0]
 8011bc6:	6820      	ldr	r0, [r4, #0]
 8011bc8:	1d19      	adds	r1, r3, #4
 8011bca:	6031      	str	r1, [r6, #0]
 8011bcc:	0606      	lsls	r6, r0, #24
 8011bce:	d501      	bpl.n	8011bd4 <_printf_i+0xbc>
 8011bd0:	681d      	ldr	r5, [r3, #0]
 8011bd2:	e003      	b.n	8011bdc <_printf_i+0xc4>
 8011bd4:	0645      	lsls	r5, r0, #25
 8011bd6:	d5fb      	bpl.n	8011bd0 <_printf_i+0xb8>
 8011bd8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011bdc:	2d00      	cmp	r5, #0
 8011bde:	da03      	bge.n	8011be8 <_printf_i+0xd0>
 8011be0:	232d      	movs	r3, #45	@ 0x2d
 8011be2:	426d      	negs	r5, r5
 8011be4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011be8:	4859      	ldr	r0, [pc, #356]	@ (8011d50 <_printf_i+0x238>)
 8011bea:	230a      	movs	r3, #10
 8011bec:	e011      	b.n	8011c12 <_printf_i+0xfa>
 8011bee:	6821      	ldr	r1, [r4, #0]
 8011bf0:	6833      	ldr	r3, [r6, #0]
 8011bf2:	0608      	lsls	r0, r1, #24
 8011bf4:	f853 5b04 	ldr.w	r5, [r3], #4
 8011bf8:	d402      	bmi.n	8011c00 <_printf_i+0xe8>
 8011bfa:	0649      	lsls	r1, r1, #25
 8011bfc:	bf48      	it	mi
 8011bfe:	b2ad      	uxthmi	r5, r5
 8011c00:	2f6f      	cmp	r7, #111	@ 0x6f
 8011c02:	4853      	ldr	r0, [pc, #332]	@ (8011d50 <_printf_i+0x238>)
 8011c04:	6033      	str	r3, [r6, #0]
 8011c06:	bf14      	ite	ne
 8011c08:	230a      	movne	r3, #10
 8011c0a:	2308      	moveq	r3, #8
 8011c0c:	2100      	movs	r1, #0
 8011c0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011c12:	6866      	ldr	r6, [r4, #4]
 8011c14:	60a6      	str	r6, [r4, #8]
 8011c16:	2e00      	cmp	r6, #0
 8011c18:	bfa2      	ittt	ge
 8011c1a:	6821      	ldrge	r1, [r4, #0]
 8011c1c:	f021 0104 	bicge.w	r1, r1, #4
 8011c20:	6021      	strge	r1, [r4, #0]
 8011c22:	b90d      	cbnz	r5, 8011c28 <_printf_i+0x110>
 8011c24:	2e00      	cmp	r6, #0
 8011c26:	d04b      	beq.n	8011cc0 <_printf_i+0x1a8>
 8011c28:	4616      	mov	r6, r2
 8011c2a:	fbb5 f1f3 	udiv	r1, r5, r3
 8011c2e:	fb03 5711 	mls	r7, r3, r1, r5
 8011c32:	5dc7      	ldrb	r7, [r0, r7]
 8011c34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011c38:	462f      	mov	r7, r5
 8011c3a:	42bb      	cmp	r3, r7
 8011c3c:	460d      	mov	r5, r1
 8011c3e:	d9f4      	bls.n	8011c2a <_printf_i+0x112>
 8011c40:	2b08      	cmp	r3, #8
 8011c42:	d10b      	bne.n	8011c5c <_printf_i+0x144>
 8011c44:	6823      	ldr	r3, [r4, #0]
 8011c46:	07df      	lsls	r7, r3, #31
 8011c48:	d508      	bpl.n	8011c5c <_printf_i+0x144>
 8011c4a:	6923      	ldr	r3, [r4, #16]
 8011c4c:	6861      	ldr	r1, [r4, #4]
 8011c4e:	4299      	cmp	r1, r3
 8011c50:	bfde      	ittt	le
 8011c52:	2330      	movle	r3, #48	@ 0x30
 8011c54:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011c58:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8011c5c:	1b92      	subs	r2, r2, r6
 8011c5e:	6122      	str	r2, [r4, #16]
 8011c60:	f8cd a000 	str.w	sl, [sp]
 8011c64:	464b      	mov	r3, r9
 8011c66:	aa03      	add	r2, sp, #12
 8011c68:	4621      	mov	r1, r4
 8011c6a:	4640      	mov	r0, r8
 8011c6c:	f7ff fee6 	bl	8011a3c <_printf_common>
 8011c70:	3001      	adds	r0, #1
 8011c72:	d14a      	bne.n	8011d0a <_printf_i+0x1f2>
 8011c74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011c78:	b004      	add	sp, #16
 8011c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c7e:	6823      	ldr	r3, [r4, #0]
 8011c80:	f043 0320 	orr.w	r3, r3, #32
 8011c84:	6023      	str	r3, [r4, #0]
 8011c86:	4833      	ldr	r0, [pc, #204]	@ (8011d54 <_printf_i+0x23c>)
 8011c88:	2778      	movs	r7, #120	@ 0x78
 8011c8a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011c8e:	6823      	ldr	r3, [r4, #0]
 8011c90:	6831      	ldr	r1, [r6, #0]
 8011c92:	061f      	lsls	r7, r3, #24
 8011c94:	f851 5b04 	ldr.w	r5, [r1], #4
 8011c98:	d402      	bmi.n	8011ca0 <_printf_i+0x188>
 8011c9a:	065f      	lsls	r7, r3, #25
 8011c9c:	bf48      	it	mi
 8011c9e:	b2ad      	uxthmi	r5, r5
 8011ca0:	6031      	str	r1, [r6, #0]
 8011ca2:	07d9      	lsls	r1, r3, #31
 8011ca4:	bf44      	itt	mi
 8011ca6:	f043 0320 	orrmi.w	r3, r3, #32
 8011caa:	6023      	strmi	r3, [r4, #0]
 8011cac:	b11d      	cbz	r5, 8011cb6 <_printf_i+0x19e>
 8011cae:	2310      	movs	r3, #16
 8011cb0:	e7ac      	b.n	8011c0c <_printf_i+0xf4>
 8011cb2:	4827      	ldr	r0, [pc, #156]	@ (8011d50 <_printf_i+0x238>)
 8011cb4:	e7e9      	b.n	8011c8a <_printf_i+0x172>
 8011cb6:	6823      	ldr	r3, [r4, #0]
 8011cb8:	f023 0320 	bic.w	r3, r3, #32
 8011cbc:	6023      	str	r3, [r4, #0]
 8011cbe:	e7f6      	b.n	8011cae <_printf_i+0x196>
 8011cc0:	4616      	mov	r6, r2
 8011cc2:	e7bd      	b.n	8011c40 <_printf_i+0x128>
 8011cc4:	6833      	ldr	r3, [r6, #0]
 8011cc6:	6825      	ldr	r5, [r4, #0]
 8011cc8:	6961      	ldr	r1, [r4, #20]
 8011cca:	1d18      	adds	r0, r3, #4
 8011ccc:	6030      	str	r0, [r6, #0]
 8011cce:	062e      	lsls	r6, r5, #24
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	d501      	bpl.n	8011cd8 <_printf_i+0x1c0>
 8011cd4:	6019      	str	r1, [r3, #0]
 8011cd6:	e002      	b.n	8011cde <_printf_i+0x1c6>
 8011cd8:	0668      	lsls	r0, r5, #25
 8011cda:	d5fb      	bpl.n	8011cd4 <_printf_i+0x1bc>
 8011cdc:	8019      	strh	r1, [r3, #0]
 8011cde:	2300      	movs	r3, #0
 8011ce0:	6123      	str	r3, [r4, #16]
 8011ce2:	4616      	mov	r6, r2
 8011ce4:	e7bc      	b.n	8011c60 <_printf_i+0x148>
 8011ce6:	6833      	ldr	r3, [r6, #0]
 8011ce8:	1d1a      	adds	r2, r3, #4
 8011cea:	6032      	str	r2, [r6, #0]
 8011cec:	681e      	ldr	r6, [r3, #0]
 8011cee:	6862      	ldr	r2, [r4, #4]
 8011cf0:	2100      	movs	r1, #0
 8011cf2:	4630      	mov	r0, r6
 8011cf4:	f7ee fb0c 	bl	8000310 <memchr>
 8011cf8:	b108      	cbz	r0, 8011cfe <_printf_i+0x1e6>
 8011cfa:	1b80      	subs	r0, r0, r6
 8011cfc:	6060      	str	r0, [r4, #4]
 8011cfe:	6863      	ldr	r3, [r4, #4]
 8011d00:	6123      	str	r3, [r4, #16]
 8011d02:	2300      	movs	r3, #0
 8011d04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011d08:	e7aa      	b.n	8011c60 <_printf_i+0x148>
 8011d0a:	6923      	ldr	r3, [r4, #16]
 8011d0c:	4632      	mov	r2, r6
 8011d0e:	4649      	mov	r1, r9
 8011d10:	4640      	mov	r0, r8
 8011d12:	47d0      	blx	sl
 8011d14:	3001      	adds	r0, #1
 8011d16:	d0ad      	beq.n	8011c74 <_printf_i+0x15c>
 8011d18:	6823      	ldr	r3, [r4, #0]
 8011d1a:	079b      	lsls	r3, r3, #30
 8011d1c:	d413      	bmi.n	8011d46 <_printf_i+0x22e>
 8011d1e:	68e0      	ldr	r0, [r4, #12]
 8011d20:	9b03      	ldr	r3, [sp, #12]
 8011d22:	4298      	cmp	r0, r3
 8011d24:	bfb8      	it	lt
 8011d26:	4618      	movlt	r0, r3
 8011d28:	e7a6      	b.n	8011c78 <_printf_i+0x160>
 8011d2a:	2301      	movs	r3, #1
 8011d2c:	4632      	mov	r2, r6
 8011d2e:	4649      	mov	r1, r9
 8011d30:	4640      	mov	r0, r8
 8011d32:	47d0      	blx	sl
 8011d34:	3001      	adds	r0, #1
 8011d36:	d09d      	beq.n	8011c74 <_printf_i+0x15c>
 8011d38:	3501      	adds	r5, #1
 8011d3a:	68e3      	ldr	r3, [r4, #12]
 8011d3c:	9903      	ldr	r1, [sp, #12]
 8011d3e:	1a5b      	subs	r3, r3, r1
 8011d40:	42ab      	cmp	r3, r5
 8011d42:	dcf2      	bgt.n	8011d2a <_printf_i+0x212>
 8011d44:	e7eb      	b.n	8011d1e <_printf_i+0x206>
 8011d46:	2500      	movs	r5, #0
 8011d48:	f104 0619 	add.w	r6, r4, #25
 8011d4c:	e7f5      	b.n	8011d3a <_printf_i+0x222>
 8011d4e:	bf00      	nop
 8011d50:	08014b28 	.word	0x08014b28
 8011d54:	08014b39 	.word	0x08014b39

08011d58 <std>:
 8011d58:	2300      	movs	r3, #0
 8011d5a:	b510      	push	{r4, lr}
 8011d5c:	4604      	mov	r4, r0
 8011d5e:	e9c0 3300 	strd	r3, r3, [r0]
 8011d62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011d66:	6083      	str	r3, [r0, #8]
 8011d68:	8181      	strh	r1, [r0, #12]
 8011d6a:	6643      	str	r3, [r0, #100]	@ 0x64
 8011d6c:	81c2      	strh	r2, [r0, #14]
 8011d6e:	6183      	str	r3, [r0, #24]
 8011d70:	4619      	mov	r1, r3
 8011d72:	2208      	movs	r2, #8
 8011d74:	305c      	adds	r0, #92	@ 0x5c
 8011d76:	f000 f914 	bl	8011fa2 <memset>
 8011d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8011db0 <std+0x58>)
 8011d7c:	6263      	str	r3, [r4, #36]	@ 0x24
 8011d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8011db4 <std+0x5c>)
 8011d80:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011d82:	4b0d      	ldr	r3, [pc, #52]	@ (8011db8 <std+0x60>)
 8011d84:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011d86:	4b0d      	ldr	r3, [pc, #52]	@ (8011dbc <std+0x64>)
 8011d88:	6323      	str	r3, [r4, #48]	@ 0x30
 8011d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8011dc0 <std+0x68>)
 8011d8c:	6224      	str	r4, [r4, #32]
 8011d8e:	429c      	cmp	r4, r3
 8011d90:	d006      	beq.n	8011da0 <std+0x48>
 8011d92:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011d96:	4294      	cmp	r4, r2
 8011d98:	d002      	beq.n	8011da0 <std+0x48>
 8011d9a:	33d0      	adds	r3, #208	@ 0xd0
 8011d9c:	429c      	cmp	r4, r3
 8011d9e:	d105      	bne.n	8011dac <std+0x54>
 8011da0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011da4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011da8:	f000 b986 	b.w	80120b8 <__retarget_lock_init_recursive>
 8011dac:	bd10      	pop	{r4, pc}
 8011dae:	bf00      	nop
 8011db0:	08011f1d 	.word	0x08011f1d
 8011db4:	08011f3f 	.word	0x08011f3f
 8011db8:	08011f77 	.word	0x08011f77
 8011dbc:	08011f9b 	.word	0x08011f9b
 8011dc0:	240010bc 	.word	0x240010bc

08011dc4 <stdio_exit_handler>:
 8011dc4:	4a02      	ldr	r2, [pc, #8]	@ (8011dd0 <stdio_exit_handler+0xc>)
 8011dc6:	4903      	ldr	r1, [pc, #12]	@ (8011dd4 <stdio_exit_handler+0x10>)
 8011dc8:	4803      	ldr	r0, [pc, #12]	@ (8011dd8 <stdio_exit_handler+0x14>)
 8011dca:	f000 b869 	b.w	8011ea0 <_fwalk_sglue>
 8011dce:	bf00      	nop
 8011dd0:	24000048 	.word	0x24000048
 8011dd4:	08013949 	.word	0x08013949
 8011dd8:	24000058 	.word	0x24000058

08011ddc <cleanup_stdio>:
 8011ddc:	6841      	ldr	r1, [r0, #4]
 8011dde:	4b0c      	ldr	r3, [pc, #48]	@ (8011e10 <cleanup_stdio+0x34>)
 8011de0:	4299      	cmp	r1, r3
 8011de2:	b510      	push	{r4, lr}
 8011de4:	4604      	mov	r4, r0
 8011de6:	d001      	beq.n	8011dec <cleanup_stdio+0x10>
 8011de8:	f001 fdae 	bl	8013948 <_fflush_r>
 8011dec:	68a1      	ldr	r1, [r4, #8]
 8011dee:	4b09      	ldr	r3, [pc, #36]	@ (8011e14 <cleanup_stdio+0x38>)
 8011df0:	4299      	cmp	r1, r3
 8011df2:	d002      	beq.n	8011dfa <cleanup_stdio+0x1e>
 8011df4:	4620      	mov	r0, r4
 8011df6:	f001 fda7 	bl	8013948 <_fflush_r>
 8011dfa:	68e1      	ldr	r1, [r4, #12]
 8011dfc:	4b06      	ldr	r3, [pc, #24]	@ (8011e18 <cleanup_stdio+0x3c>)
 8011dfe:	4299      	cmp	r1, r3
 8011e00:	d004      	beq.n	8011e0c <cleanup_stdio+0x30>
 8011e02:	4620      	mov	r0, r4
 8011e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e08:	f001 bd9e 	b.w	8013948 <_fflush_r>
 8011e0c:	bd10      	pop	{r4, pc}
 8011e0e:	bf00      	nop
 8011e10:	240010bc 	.word	0x240010bc
 8011e14:	24001124 	.word	0x24001124
 8011e18:	2400118c 	.word	0x2400118c

08011e1c <global_stdio_init.part.0>:
 8011e1c:	b510      	push	{r4, lr}
 8011e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8011e4c <global_stdio_init.part.0+0x30>)
 8011e20:	4c0b      	ldr	r4, [pc, #44]	@ (8011e50 <global_stdio_init.part.0+0x34>)
 8011e22:	4a0c      	ldr	r2, [pc, #48]	@ (8011e54 <global_stdio_init.part.0+0x38>)
 8011e24:	601a      	str	r2, [r3, #0]
 8011e26:	4620      	mov	r0, r4
 8011e28:	2200      	movs	r2, #0
 8011e2a:	2104      	movs	r1, #4
 8011e2c:	f7ff ff94 	bl	8011d58 <std>
 8011e30:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011e34:	2201      	movs	r2, #1
 8011e36:	2109      	movs	r1, #9
 8011e38:	f7ff ff8e 	bl	8011d58 <std>
 8011e3c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011e40:	2202      	movs	r2, #2
 8011e42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e46:	2112      	movs	r1, #18
 8011e48:	f7ff bf86 	b.w	8011d58 <std>
 8011e4c:	240011f4 	.word	0x240011f4
 8011e50:	240010bc 	.word	0x240010bc
 8011e54:	08011dc5 	.word	0x08011dc5

08011e58 <__sfp_lock_acquire>:
 8011e58:	4801      	ldr	r0, [pc, #4]	@ (8011e60 <__sfp_lock_acquire+0x8>)
 8011e5a:	f000 b92e 	b.w	80120ba <__retarget_lock_acquire_recursive>
 8011e5e:	bf00      	nop
 8011e60:	240011fd 	.word	0x240011fd

08011e64 <__sfp_lock_release>:
 8011e64:	4801      	ldr	r0, [pc, #4]	@ (8011e6c <__sfp_lock_release+0x8>)
 8011e66:	f000 b929 	b.w	80120bc <__retarget_lock_release_recursive>
 8011e6a:	bf00      	nop
 8011e6c:	240011fd 	.word	0x240011fd

08011e70 <__sinit>:
 8011e70:	b510      	push	{r4, lr}
 8011e72:	4604      	mov	r4, r0
 8011e74:	f7ff fff0 	bl	8011e58 <__sfp_lock_acquire>
 8011e78:	6a23      	ldr	r3, [r4, #32]
 8011e7a:	b11b      	cbz	r3, 8011e84 <__sinit+0x14>
 8011e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e80:	f7ff bff0 	b.w	8011e64 <__sfp_lock_release>
 8011e84:	4b04      	ldr	r3, [pc, #16]	@ (8011e98 <__sinit+0x28>)
 8011e86:	6223      	str	r3, [r4, #32]
 8011e88:	4b04      	ldr	r3, [pc, #16]	@ (8011e9c <__sinit+0x2c>)
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d1f5      	bne.n	8011e7c <__sinit+0xc>
 8011e90:	f7ff ffc4 	bl	8011e1c <global_stdio_init.part.0>
 8011e94:	e7f2      	b.n	8011e7c <__sinit+0xc>
 8011e96:	bf00      	nop
 8011e98:	08011ddd 	.word	0x08011ddd
 8011e9c:	240011f4 	.word	0x240011f4

08011ea0 <_fwalk_sglue>:
 8011ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ea4:	4607      	mov	r7, r0
 8011ea6:	4688      	mov	r8, r1
 8011ea8:	4614      	mov	r4, r2
 8011eaa:	2600      	movs	r6, #0
 8011eac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011eb0:	f1b9 0901 	subs.w	r9, r9, #1
 8011eb4:	d505      	bpl.n	8011ec2 <_fwalk_sglue+0x22>
 8011eb6:	6824      	ldr	r4, [r4, #0]
 8011eb8:	2c00      	cmp	r4, #0
 8011eba:	d1f7      	bne.n	8011eac <_fwalk_sglue+0xc>
 8011ebc:	4630      	mov	r0, r6
 8011ebe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011ec2:	89ab      	ldrh	r3, [r5, #12]
 8011ec4:	2b01      	cmp	r3, #1
 8011ec6:	d907      	bls.n	8011ed8 <_fwalk_sglue+0x38>
 8011ec8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011ecc:	3301      	adds	r3, #1
 8011ece:	d003      	beq.n	8011ed8 <_fwalk_sglue+0x38>
 8011ed0:	4629      	mov	r1, r5
 8011ed2:	4638      	mov	r0, r7
 8011ed4:	47c0      	blx	r8
 8011ed6:	4306      	orrs	r6, r0
 8011ed8:	3568      	adds	r5, #104	@ 0x68
 8011eda:	e7e9      	b.n	8011eb0 <_fwalk_sglue+0x10>

08011edc <siprintf>:
 8011edc:	b40e      	push	{r1, r2, r3}
 8011ede:	b500      	push	{lr}
 8011ee0:	b09c      	sub	sp, #112	@ 0x70
 8011ee2:	ab1d      	add	r3, sp, #116	@ 0x74
 8011ee4:	9002      	str	r0, [sp, #8]
 8011ee6:	9006      	str	r0, [sp, #24]
 8011ee8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011eec:	4809      	ldr	r0, [pc, #36]	@ (8011f14 <siprintf+0x38>)
 8011eee:	9107      	str	r1, [sp, #28]
 8011ef0:	9104      	str	r1, [sp, #16]
 8011ef2:	4909      	ldr	r1, [pc, #36]	@ (8011f18 <siprintf+0x3c>)
 8011ef4:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ef8:	9105      	str	r1, [sp, #20]
 8011efa:	6800      	ldr	r0, [r0, #0]
 8011efc:	9301      	str	r3, [sp, #4]
 8011efe:	a902      	add	r1, sp, #8
 8011f00:	f001 fba2 	bl	8013648 <_svfiprintf_r>
 8011f04:	9b02      	ldr	r3, [sp, #8]
 8011f06:	2200      	movs	r2, #0
 8011f08:	701a      	strb	r2, [r3, #0]
 8011f0a:	b01c      	add	sp, #112	@ 0x70
 8011f0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011f10:	b003      	add	sp, #12
 8011f12:	4770      	bx	lr
 8011f14:	24000054 	.word	0x24000054
 8011f18:	ffff0208 	.word	0xffff0208

08011f1c <__sread>:
 8011f1c:	b510      	push	{r4, lr}
 8011f1e:	460c      	mov	r4, r1
 8011f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f24:	f000 f87a 	bl	801201c <_read_r>
 8011f28:	2800      	cmp	r0, #0
 8011f2a:	bfab      	itete	ge
 8011f2c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011f2e:	89a3      	ldrhlt	r3, [r4, #12]
 8011f30:	181b      	addge	r3, r3, r0
 8011f32:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011f36:	bfac      	ite	ge
 8011f38:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011f3a:	81a3      	strhlt	r3, [r4, #12]
 8011f3c:	bd10      	pop	{r4, pc}

08011f3e <__swrite>:
 8011f3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f42:	461f      	mov	r7, r3
 8011f44:	898b      	ldrh	r3, [r1, #12]
 8011f46:	05db      	lsls	r3, r3, #23
 8011f48:	4605      	mov	r5, r0
 8011f4a:	460c      	mov	r4, r1
 8011f4c:	4616      	mov	r6, r2
 8011f4e:	d505      	bpl.n	8011f5c <__swrite+0x1e>
 8011f50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f54:	2302      	movs	r3, #2
 8011f56:	2200      	movs	r2, #0
 8011f58:	f000 f84e 	bl	8011ff8 <_lseek_r>
 8011f5c:	89a3      	ldrh	r3, [r4, #12]
 8011f5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011f62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011f66:	81a3      	strh	r3, [r4, #12]
 8011f68:	4632      	mov	r2, r6
 8011f6a:	463b      	mov	r3, r7
 8011f6c:	4628      	mov	r0, r5
 8011f6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011f72:	f000 b865 	b.w	8012040 <_write_r>

08011f76 <__sseek>:
 8011f76:	b510      	push	{r4, lr}
 8011f78:	460c      	mov	r4, r1
 8011f7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f7e:	f000 f83b 	bl	8011ff8 <_lseek_r>
 8011f82:	1c43      	adds	r3, r0, #1
 8011f84:	89a3      	ldrh	r3, [r4, #12]
 8011f86:	bf15      	itete	ne
 8011f88:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011f8a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011f8e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011f92:	81a3      	strheq	r3, [r4, #12]
 8011f94:	bf18      	it	ne
 8011f96:	81a3      	strhne	r3, [r4, #12]
 8011f98:	bd10      	pop	{r4, pc}

08011f9a <__sclose>:
 8011f9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f9e:	f000 b81b 	b.w	8011fd8 <_close_r>

08011fa2 <memset>:
 8011fa2:	4402      	add	r2, r0
 8011fa4:	4603      	mov	r3, r0
 8011fa6:	4293      	cmp	r3, r2
 8011fa8:	d100      	bne.n	8011fac <memset+0xa>
 8011faa:	4770      	bx	lr
 8011fac:	f803 1b01 	strb.w	r1, [r3], #1
 8011fb0:	e7f9      	b.n	8011fa6 <memset+0x4>

08011fb2 <strcat>:
 8011fb2:	b510      	push	{r4, lr}
 8011fb4:	4602      	mov	r2, r0
 8011fb6:	7814      	ldrb	r4, [r2, #0]
 8011fb8:	4613      	mov	r3, r2
 8011fba:	3201      	adds	r2, #1
 8011fbc:	2c00      	cmp	r4, #0
 8011fbe:	d1fa      	bne.n	8011fb6 <strcat+0x4>
 8011fc0:	3b01      	subs	r3, #1
 8011fc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011fc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011fca:	2a00      	cmp	r2, #0
 8011fcc:	d1f9      	bne.n	8011fc2 <strcat+0x10>
 8011fce:	bd10      	pop	{r4, pc}

08011fd0 <_localeconv_r>:
 8011fd0:	4800      	ldr	r0, [pc, #0]	@ (8011fd4 <_localeconv_r+0x4>)
 8011fd2:	4770      	bx	lr
 8011fd4:	24000194 	.word	0x24000194

08011fd8 <_close_r>:
 8011fd8:	b538      	push	{r3, r4, r5, lr}
 8011fda:	4d06      	ldr	r5, [pc, #24]	@ (8011ff4 <_close_r+0x1c>)
 8011fdc:	2300      	movs	r3, #0
 8011fde:	4604      	mov	r4, r0
 8011fe0:	4608      	mov	r0, r1
 8011fe2:	602b      	str	r3, [r5, #0]
 8011fe4:	f7f2 f8fa 	bl	80041dc <_close>
 8011fe8:	1c43      	adds	r3, r0, #1
 8011fea:	d102      	bne.n	8011ff2 <_close_r+0x1a>
 8011fec:	682b      	ldr	r3, [r5, #0]
 8011fee:	b103      	cbz	r3, 8011ff2 <_close_r+0x1a>
 8011ff0:	6023      	str	r3, [r4, #0]
 8011ff2:	bd38      	pop	{r3, r4, r5, pc}
 8011ff4:	240011f8 	.word	0x240011f8

08011ff8 <_lseek_r>:
 8011ff8:	b538      	push	{r3, r4, r5, lr}
 8011ffa:	4d07      	ldr	r5, [pc, #28]	@ (8012018 <_lseek_r+0x20>)
 8011ffc:	4604      	mov	r4, r0
 8011ffe:	4608      	mov	r0, r1
 8012000:	4611      	mov	r1, r2
 8012002:	2200      	movs	r2, #0
 8012004:	602a      	str	r2, [r5, #0]
 8012006:	461a      	mov	r2, r3
 8012008:	f7f2 f90f 	bl	800422a <_lseek>
 801200c:	1c43      	adds	r3, r0, #1
 801200e:	d102      	bne.n	8012016 <_lseek_r+0x1e>
 8012010:	682b      	ldr	r3, [r5, #0]
 8012012:	b103      	cbz	r3, 8012016 <_lseek_r+0x1e>
 8012014:	6023      	str	r3, [r4, #0]
 8012016:	bd38      	pop	{r3, r4, r5, pc}
 8012018:	240011f8 	.word	0x240011f8

0801201c <_read_r>:
 801201c:	b538      	push	{r3, r4, r5, lr}
 801201e:	4d07      	ldr	r5, [pc, #28]	@ (801203c <_read_r+0x20>)
 8012020:	4604      	mov	r4, r0
 8012022:	4608      	mov	r0, r1
 8012024:	4611      	mov	r1, r2
 8012026:	2200      	movs	r2, #0
 8012028:	602a      	str	r2, [r5, #0]
 801202a:	461a      	mov	r2, r3
 801202c:	f7f2 f89d 	bl	800416a <_read>
 8012030:	1c43      	adds	r3, r0, #1
 8012032:	d102      	bne.n	801203a <_read_r+0x1e>
 8012034:	682b      	ldr	r3, [r5, #0]
 8012036:	b103      	cbz	r3, 801203a <_read_r+0x1e>
 8012038:	6023      	str	r3, [r4, #0]
 801203a:	bd38      	pop	{r3, r4, r5, pc}
 801203c:	240011f8 	.word	0x240011f8

08012040 <_write_r>:
 8012040:	b538      	push	{r3, r4, r5, lr}
 8012042:	4d07      	ldr	r5, [pc, #28]	@ (8012060 <_write_r+0x20>)
 8012044:	4604      	mov	r4, r0
 8012046:	4608      	mov	r0, r1
 8012048:	4611      	mov	r1, r2
 801204a:	2200      	movs	r2, #0
 801204c:	602a      	str	r2, [r5, #0]
 801204e:	461a      	mov	r2, r3
 8012050:	f7f2 f8a8 	bl	80041a4 <_write>
 8012054:	1c43      	adds	r3, r0, #1
 8012056:	d102      	bne.n	801205e <_write_r+0x1e>
 8012058:	682b      	ldr	r3, [r5, #0]
 801205a:	b103      	cbz	r3, 801205e <_write_r+0x1e>
 801205c:	6023      	str	r3, [r4, #0]
 801205e:	bd38      	pop	{r3, r4, r5, pc}
 8012060:	240011f8 	.word	0x240011f8

08012064 <__errno>:
 8012064:	4b01      	ldr	r3, [pc, #4]	@ (801206c <__errno+0x8>)
 8012066:	6818      	ldr	r0, [r3, #0]
 8012068:	4770      	bx	lr
 801206a:	bf00      	nop
 801206c:	24000054 	.word	0x24000054

08012070 <__libc_init_array>:
 8012070:	b570      	push	{r4, r5, r6, lr}
 8012072:	4d0d      	ldr	r5, [pc, #52]	@ (80120a8 <__libc_init_array+0x38>)
 8012074:	4c0d      	ldr	r4, [pc, #52]	@ (80120ac <__libc_init_array+0x3c>)
 8012076:	1b64      	subs	r4, r4, r5
 8012078:	10a4      	asrs	r4, r4, #2
 801207a:	2600      	movs	r6, #0
 801207c:	42a6      	cmp	r6, r4
 801207e:	d109      	bne.n	8012094 <__libc_init_array+0x24>
 8012080:	4d0b      	ldr	r5, [pc, #44]	@ (80120b0 <__libc_init_array+0x40>)
 8012082:	4c0c      	ldr	r4, [pc, #48]	@ (80120b4 <__libc_init_array+0x44>)
 8012084:	f001 fffe 	bl	8014084 <_init>
 8012088:	1b64      	subs	r4, r4, r5
 801208a:	10a4      	asrs	r4, r4, #2
 801208c:	2600      	movs	r6, #0
 801208e:	42a6      	cmp	r6, r4
 8012090:	d105      	bne.n	801209e <__libc_init_array+0x2e>
 8012092:	bd70      	pop	{r4, r5, r6, pc}
 8012094:	f855 3b04 	ldr.w	r3, [r5], #4
 8012098:	4798      	blx	r3
 801209a:	3601      	adds	r6, #1
 801209c:	e7ee      	b.n	801207c <__libc_init_array+0xc>
 801209e:	f855 3b04 	ldr.w	r3, [r5], #4
 80120a2:	4798      	blx	r3
 80120a4:	3601      	adds	r6, #1
 80120a6:	e7f2      	b.n	801208e <__libc_init_array+0x1e>
 80120a8:	08014d90 	.word	0x08014d90
 80120ac:	08014d90 	.word	0x08014d90
 80120b0:	08014d90 	.word	0x08014d90
 80120b4:	08014d94 	.word	0x08014d94

080120b8 <__retarget_lock_init_recursive>:
 80120b8:	4770      	bx	lr

080120ba <__retarget_lock_acquire_recursive>:
 80120ba:	4770      	bx	lr

080120bc <__retarget_lock_release_recursive>:
 80120bc:	4770      	bx	lr

080120be <strcpy>:
 80120be:	4603      	mov	r3, r0
 80120c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80120c4:	f803 2b01 	strb.w	r2, [r3], #1
 80120c8:	2a00      	cmp	r2, #0
 80120ca:	d1f9      	bne.n	80120c0 <strcpy+0x2>
 80120cc:	4770      	bx	lr

080120ce <quorem>:
 80120ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120d2:	6903      	ldr	r3, [r0, #16]
 80120d4:	690c      	ldr	r4, [r1, #16]
 80120d6:	42a3      	cmp	r3, r4
 80120d8:	4607      	mov	r7, r0
 80120da:	db7e      	blt.n	80121da <quorem+0x10c>
 80120dc:	3c01      	subs	r4, #1
 80120de:	f101 0814 	add.w	r8, r1, #20
 80120e2:	00a3      	lsls	r3, r4, #2
 80120e4:	f100 0514 	add.w	r5, r0, #20
 80120e8:	9300      	str	r3, [sp, #0]
 80120ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80120ee:	9301      	str	r3, [sp, #4]
 80120f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80120f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80120f8:	3301      	adds	r3, #1
 80120fa:	429a      	cmp	r2, r3
 80120fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012100:	fbb2 f6f3 	udiv	r6, r2, r3
 8012104:	d32e      	bcc.n	8012164 <quorem+0x96>
 8012106:	f04f 0a00 	mov.w	sl, #0
 801210a:	46c4      	mov	ip, r8
 801210c:	46ae      	mov	lr, r5
 801210e:	46d3      	mov	fp, sl
 8012110:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012114:	b298      	uxth	r0, r3
 8012116:	fb06 a000 	mla	r0, r6, r0, sl
 801211a:	0c02      	lsrs	r2, r0, #16
 801211c:	0c1b      	lsrs	r3, r3, #16
 801211e:	fb06 2303 	mla	r3, r6, r3, r2
 8012122:	f8de 2000 	ldr.w	r2, [lr]
 8012126:	b280      	uxth	r0, r0
 8012128:	b292      	uxth	r2, r2
 801212a:	1a12      	subs	r2, r2, r0
 801212c:	445a      	add	r2, fp
 801212e:	f8de 0000 	ldr.w	r0, [lr]
 8012132:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012136:	b29b      	uxth	r3, r3
 8012138:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801213c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8012140:	b292      	uxth	r2, r2
 8012142:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8012146:	45e1      	cmp	r9, ip
 8012148:	f84e 2b04 	str.w	r2, [lr], #4
 801214c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8012150:	d2de      	bcs.n	8012110 <quorem+0x42>
 8012152:	9b00      	ldr	r3, [sp, #0]
 8012154:	58eb      	ldr	r3, [r5, r3]
 8012156:	b92b      	cbnz	r3, 8012164 <quorem+0x96>
 8012158:	9b01      	ldr	r3, [sp, #4]
 801215a:	3b04      	subs	r3, #4
 801215c:	429d      	cmp	r5, r3
 801215e:	461a      	mov	r2, r3
 8012160:	d32f      	bcc.n	80121c2 <quorem+0xf4>
 8012162:	613c      	str	r4, [r7, #16]
 8012164:	4638      	mov	r0, r7
 8012166:	f001 f90b 	bl	8013380 <__mcmp>
 801216a:	2800      	cmp	r0, #0
 801216c:	db25      	blt.n	80121ba <quorem+0xec>
 801216e:	4629      	mov	r1, r5
 8012170:	2000      	movs	r0, #0
 8012172:	f858 2b04 	ldr.w	r2, [r8], #4
 8012176:	f8d1 c000 	ldr.w	ip, [r1]
 801217a:	fa1f fe82 	uxth.w	lr, r2
 801217e:	fa1f f38c 	uxth.w	r3, ip
 8012182:	eba3 030e 	sub.w	r3, r3, lr
 8012186:	4403      	add	r3, r0
 8012188:	0c12      	lsrs	r2, r2, #16
 801218a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801218e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8012192:	b29b      	uxth	r3, r3
 8012194:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012198:	45c1      	cmp	r9, r8
 801219a:	f841 3b04 	str.w	r3, [r1], #4
 801219e:	ea4f 4022 	mov.w	r0, r2, asr #16
 80121a2:	d2e6      	bcs.n	8012172 <quorem+0xa4>
 80121a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80121a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80121ac:	b922      	cbnz	r2, 80121b8 <quorem+0xea>
 80121ae:	3b04      	subs	r3, #4
 80121b0:	429d      	cmp	r5, r3
 80121b2:	461a      	mov	r2, r3
 80121b4:	d30b      	bcc.n	80121ce <quorem+0x100>
 80121b6:	613c      	str	r4, [r7, #16]
 80121b8:	3601      	adds	r6, #1
 80121ba:	4630      	mov	r0, r6
 80121bc:	b003      	add	sp, #12
 80121be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121c2:	6812      	ldr	r2, [r2, #0]
 80121c4:	3b04      	subs	r3, #4
 80121c6:	2a00      	cmp	r2, #0
 80121c8:	d1cb      	bne.n	8012162 <quorem+0x94>
 80121ca:	3c01      	subs	r4, #1
 80121cc:	e7c6      	b.n	801215c <quorem+0x8e>
 80121ce:	6812      	ldr	r2, [r2, #0]
 80121d0:	3b04      	subs	r3, #4
 80121d2:	2a00      	cmp	r2, #0
 80121d4:	d1ef      	bne.n	80121b6 <quorem+0xe8>
 80121d6:	3c01      	subs	r4, #1
 80121d8:	e7ea      	b.n	80121b0 <quorem+0xe2>
 80121da:	2000      	movs	r0, #0
 80121dc:	e7ee      	b.n	80121bc <quorem+0xee>
	...

080121e0 <_dtoa_r>:
 80121e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121e4:	ed2d 8b02 	vpush	{d8}
 80121e8:	69c7      	ldr	r7, [r0, #28]
 80121ea:	b091      	sub	sp, #68	@ 0x44
 80121ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 80121f0:	ec55 4b10 	vmov	r4, r5, d0
 80121f4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80121f6:	9107      	str	r1, [sp, #28]
 80121f8:	4681      	mov	r9, r0
 80121fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80121fc:	930d      	str	r3, [sp, #52]	@ 0x34
 80121fe:	b97f      	cbnz	r7, 8012220 <_dtoa_r+0x40>
 8012200:	2010      	movs	r0, #16
 8012202:	f000 fd8d 	bl	8012d20 <malloc>
 8012206:	4602      	mov	r2, r0
 8012208:	f8c9 001c 	str.w	r0, [r9, #28]
 801220c:	b920      	cbnz	r0, 8012218 <_dtoa_r+0x38>
 801220e:	4ba0      	ldr	r3, [pc, #640]	@ (8012490 <_dtoa_r+0x2b0>)
 8012210:	21ef      	movs	r1, #239	@ 0xef
 8012212:	48a0      	ldr	r0, [pc, #640]	@ (8012494 <_dtoa_r+0x2b4>)
 8012214:	f001 fbf8 	bl	8013a08 <__assert_func>
 8012218:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801221c:	6007      	str	r7, [r0, #0]
 801221e:	60c7      	str	r7, [r0, #12]
 8012220:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012224:	6819      	ldr	r1, [r3, #0]
 8012226:	b159      	cbz	r1, 8012240 <_dtoa_r+0x60>
 8012228:	685a      	ldr	r2, [r3, #4]
 801222a:	604a      	str	r2, [r1, #4]
 801222c:	2301      	movs	r3, #1
 801222e:	4093      	lsls	r3, r2
 8012230:	608b      	str	r3, [r1, #8]
 8012232:	4648      	mov	r0, r9
 8012234:	f000 fe6a 	bl	8012f0c <_Bfree>
 8012238:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801223c:	2200      	movs	r2, #0
 801223e:	601a      	str	r2, [r3, #0]
 8012240:	1e2b      	subs	r3, r5, #0
 8012242:	bfbb      	ittet	lt
 8012244:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012248:	9303      	strlt	r3, [sp, #12]
 801224a:	2300      	movge	r3, #0
 801224c:	2201      	movlt	r2, #1
 801224e:	bfac      	ite	ge
 8012250:	6033      	strge	r3, [r6, #0]
 8012252:	6032      	strlt	r2, [r6, #0]
 8012254:	4b90      	ldr	r3, [pc, #576]	@ (8012498 <_dtoa_r+0x2b8>)
 8012256:	9e03      	ldr	r6, [sp, #12]
 8012258:	43b3      	bics	r3, r6
 801225a:	d110      	bne.n	801227e <_dtoa_r+0x9e>
 801225c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801225e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8012262:	6013      	str	r3, [r2, #0]
 8012264:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8012268:	4323      	orrs	r3, r4
 801226a:	f000 84de 	beq.w	8012c2a <_dtoa_r+0xa4a>
 801226e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012270:	4f8a      	ldr	r7, [pc, #552]	@ (801249c <_dtoa_r+0x2bc>)
 8012272:	2b00      	cmp	r3, #0
 8012274:	f000 84e0 	beq.w	8012c38 <_dtoa_r+0xa58>
 8012278:	1cfb      	adds	r3, r7, #3
 801227a:	f000 bcdb 	b.w	8012c34 <_dtoa_r+0xa54>
 801227e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8012282:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801228a:	d10a      	bne.n	80122a2 <_dtoa_r+0xc2>
 801228c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801228e:	2301      	movs	r3, #1
 8012290:	6013      	str	r3, [r2, #0]
 8012292:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012294:	b113      	cbz	r3, 801229c <_dtoa_r+0xbc>
 8012296:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8012298:	4b81      	ldr	r3, [pc, #516]	@ (80124a0 <_dtoa_r+0x2c0>)
 801229a:	6013      	str	r3, [r2, #0]
 801229c:	4f81      	ldr	r7, [pc, #516]	@ (80124a4 <_dtoa_r+0x2c4>)
 801229e:	f000 bccb 	b.w	8012c38 <_dtoa_r+0xa58>
 80122a2:	aa0e      	add	r2, sp, #56	@ 0x38
 80122a4:	a90f      	add	r1, sp, #60	@ 0x3c
 80122a6:	4648      	mov	r0, r9
 80122a8:	eeb0 0b48 	vmov.f64	d0, d8
 80122ac:	f001 f918 	bl	80134e0 <__d2b>
 80122b0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80122b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80122b6:	9001      	str	r0, [sp, #4]
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d045      	beq.n	8012348 <_dtoa_r+0x168>
 80122bc:	eeb0 7b48 	vmov.f64	d7, d8
 80122c0:	ee18 1a90 	vmov	r1, s17
 80122c4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80122c8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80122cc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80122d0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80122d4:	2500      	movs	r5, #0
 80122d6:	ee07 1a90 	vmov	s15, r1
 80122da:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80122de:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8012478 <_dtoa_r+0x298>
 80122e2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80122e6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8012480 <_dtoa_r+0x2a0>
 80122ea:	eea7 6b05 	vfma.f64	d6, d7, d5
 80122ee:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8012488 <_dtoa_r+0x2a8>
 80122f2:	ee07 3a90 	vmov	s15, r3
 80122f6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80122fa:	eeb0 7b46 	vmov.f64	d7, d6
 80122fe:	eea4 7b05 	vfma.f64	d7, d4, d5
 8012302:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8012306:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801230a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801230e:	ee16 8a90 	vmov	r8, s13
 8012312:	d508      	bpl.n	8012326 <_dtoa_r+0x146>
 8012314:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8012318:	eeb4 6b47 	vcmp.f64	d6, d7
 801231c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012320:	bf18      	it	ne
 8012322:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 8012326:	f1b8 0f16 	cmp.w	r8, #22
 801232a:	d82b      	bhi.n	8012384 <_dtoa_r+0x1a4>
 801232c:	495e      	ldr	r1, [pc, #376]	@ (80124a8 <_dtoa_r+0x2c8>)
 801232e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8012332:	ed91 7b00 	vldr	d7, [r1]
 8012336:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801233a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801233e:	d501      	bpl.n	8012344 <_dtoa_r+0x164>
 8012340:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8012344:	2100      	movs	r1, #0
 8012346:	e01e      	b.n	8012386 <_dtoa_r+0x1a6>
 8012348:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801234a:	4413      	add	r3, r2
 801234c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8012350:	2920      	cmp	r1, #32
 8012352:	bfc1      	itttt	gt
 8012354:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8012358:	408e      	lslgt	r6, r1
 801235a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801235e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8012362:	bfd6      	itet	le
 8012364:	f1c1 0120 	rsble	r1, r1, #32
 8012368:	4331      	orrgt	r1, r6
 801236a:	fa04 f101 	lslle.w	r1, r4, r1
 801236e:	ee07 1a90 	vmov	s15, r1
 8012372:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012376:	3b01      	subs	r3, #1
 8012378:	ee17 1a90 	vmov	r1, s15
 801237c:	2501      	movs	r5, #1
 801237e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8012382:	e7a8      	b.n	80122d6 <_dtoa_r+0xf6>
 8012384:	2101      	movs	r1, #1
 8012386:	1ad2      	subs	r2, r2, r3
 8012388:	1e53      	subs	r3, r2, #1
 801238a:	9306      	str	r3, [sp, #24]
 801238c:	bf45      	ittet	mi
 801238e:	f1c2 0301 	rsbmi	r3, r2, #1
 8012392:	9305      	strmi	r3, [sp, #20]
 8012394:	2300      	movpl	r3, #0
 8012396:	2300      	movmi	r3, #0
 8012398:	bf4c      	ite	mi
 801239a:	9306      	strmi	r3, [sp, #24]
 801239c:	9305      	strpl	r3, [sp, #20]
 801239e:	f1b8 0f00 	cmp.w	r8, #0
 80123a2:	910c      	str	r1, [sp, #48]	@ 0x30
 80123a4:	db18      	blt.n	80123d8 <_dtoa_r+0x1f8>
 80123a6:	9b06      	ldr	r3, [sp, #24]
 80123a8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80123ac:	4443      	add	r3, r8
 80123ae:	9306      	str	r3, [sp, #24]
 80123b0:	2300      	movs	r3, #0
 80123b2:	9a07      	ldr	r2, [sp, #28]
 80123b4:	2a09      	cmp	r2, #9
 80123b6:	d849      	bhi.n	801244c <_dtoa_r+0x26c>
 80123b8:	2a05      	cmp	r2, #5
 80123ba:	bfc4      	itt	gt
 80123bc:	3a04      	subgt	r2, #4
 80123be:	9207      	strgt	r2, [sp, #28]
 80123c0:	9a07      	ldr	r2, [sp, #28]
 80123c2:	f1a2 0202 	sub.w	r2, r2, #2
 80123c6:	bfcc      	ite	gt
 80123c8:	2400      	movgt	r4, #0
 80123ca:	2401      	movle	r4, #1
 80123cc:	2a03      	cmp	r2, #3
 80123ce:	d848      	bhi.n	8012462 <_dtoa_r+0x282>
 80123d0:	e8df f002 	tbb	[pc, r2]
 80123d4:	3a2c2e0b 	.word	0x3a2c2e0b
 80123d8:	9b05      	ldr	r3, [sp, #20]
 80123da:	2200      	movs	r2, #0
 80123dc:	eba3 0308 	sub.w	r3, r3, r8
 80123e0:	9305      	str	r3, [sp, #20]
 80123e2:	920a      	str	r2, [sp, #40]	@ 0x28
 80123e4:	f1c8 0300 	rsb	r3, r8, #0
 80123e8:	e7e3      	b.n	80123b2 <_dtoa_r+0x1d2>
 80123ea:	2200      	movs	r2, #0
 80123ec:	9208      	str	r2, [sp, #32]
 80123ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80123f0:	2a00      	cmp	r2, #0
 80123f2:	dc39      	bgt.n	8012468 <_dtoa_r+0x288>
 80123f4:	f04f 0b01 	mov.w	fp, #1
 80123f8:	46da      	mov	sl, fp
 80123fa:	465a      	mov	r2, fp
 80123fc:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8012400:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8012404:	2100      	movs	r1, #0
 8012406:	2004      	movs	r0, #4
 8012408:	f100 0614 	add.w	r6, r0, #20
 801240c:	4296      	cmp	r6, r2
 801240e:	d930      	bls.n	8012472 <_dtoa_r+0x292>
 8012410:	6079      	str	r1, [r7, #4]
 8012412:	4648      	mov	r0, r9
 8012414:	9304      	str	r3, [sp, #16]
 8012416:	f000 fd39 	bl	8012e8c <_Balloc>
 801241a:	9b04      	ldr	r3, [sp, #16]
 801241c:	4607      	mov	r7, r0
 801241e:	2800      	cmp	r0, #0
 8012420:	d146      	bne.n	80124b0 <_dtoa_r+0x2d0>
 8012422:	4b22      	ldr	r3, [pc, #136]	@ (80124ac <_dtoa_r+0x2cc>)
 8012424:	4602      	mov	r2, r0
 8012426:	f240 11af 	movw	r1, #431	@ 0x1af
 801242a:	e6f2      	b.n	8012212 <_dtoa_r+0x32>
 801242c:	2201      	movs	r2, #1
 801242e:	e7dd      	b.n	80123ec <_dtoa_r+0x20c>
 8012430:	2200      	movs	r2, #0
 8012432:	9208      	str	r2, [sp, #32]
 8012434:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012436:	eb08 0b02 	add.w	fp, r8, r2
 801243a:	f10b 0a01 	add.w	sl, fp, #1
 801243e:	4652      	mov	r2, sl
 8012440:	2a01      	cmp	r2, #1
 8012442:	bfb8      	it	lt
 8012444:	2201      	movlt	r2, #1
 8012446:	e7db      	b.n	8012400 <_dtoa_r+0x220>
 8012448:	2201      	movs	r2, #1
 801244a:	e7f2      	b.n	8012432 <_dtoa_r+0x252>
 801244c:	2401      	movs	r4, #1
 801244e:	2200      	movs	r2, #0
 8012450:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8012454:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8012458:	2100      	movs	r1, #0
 801245a:	46da      	mov	sl, fp
 801245c:	2212      	movs	r2, #18
 801245e:	9109      	str	r1, [sp, #36]	@ 0x24
 8012460:	e7ce      	b.n	8012400 <_dtoa_r+0x220>
 8012462:	2201      	movs	r2, #1
 8012464:	9208      	str	r2, [sp, #32]
 8012466:	e7f5      	b.n	8012454 <_dtoa_r+0x274>
 8012468:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801246c:	46da      	mov	sl, fp
 801246e:	465a      	mov	r2, fp
 8012470:	e7c6      	b.n	8012400 <_dtoa_r+0x220>
 8012472:	3101      	adds	r1, #1
 8012474:	0040      	lsls	r0, r0, #1
 8012476:	e7c7      	b.n	8012408 <_dtoa_r+0x228>
 8012478:	636f4361 	.word	0x636f4361
 801247c:	3fd287a7 	.word	0x3fd287a7
 8012480:	8b60c8b3 	.word	0x8b60c8b3
 8012484:	3fc68a28 	.word	0x3fc68a28
 8012488:	509f79fb 	.word	0x509f79fb
 801248c:	3fd34413 	.word	0x3fd34413
 8012490:	08014b57 	.word	0x08014b57
 8012494:	08014b6e 	.word	0x08014b6e
 8012498:	7ff00000 	.word	0x7ff00000
 801249c:	08014b53 	.word	0x08014b53
 80124a0:	08014b27 	.word	0x08014b27
 80124a4:	08014b26 	.word	0x08014b26
 80124a8:	08014c68 	.word	0x08014c68
 80124ac:	08014bc6 	.word	0x08014bc6
 80124b0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80124b4:	f1ba 0f0e 	cmp.w	sl, #14
 80124b8:	6010      	str	r0, [r2, #0]
 80124ba:	d86f      	bhi.n	801259c <_dtoa_r+0x3bc>
 80124bc:	2c00      	cmp	r4, #0
 80124be:	d06d      	beq.n	801259c <_dtoa_r+0x3bc>
 80124c0:	f1b8 0f00 	cmp.w	r8, #0
 80124c4:	f340 80c2 	ble.w	801264c <_dtoa_r+0x46c>
 80124c8:	4aca      	ldr	r2, [pc, #808]	@ (80127f4 <_dtoa_r+0x614>)
 80124ca:	f008 010f 	and.w	r1, r8, #15
 80124ce:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80124d2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80124d6:	ed92 7b00 	vldr	d7, [r2]
 80124da:	ea4f 1128 	mov.w	r1, r8, asr #4
 80124de:	f000 80a9 	beq.w	8012634 <_dtoa_r+0x454>
 80124e2:	4ac5      	ldr	r2, [pc, #788]	@ (80127f8 <_dtoa_r+0x618>)
 80124e4:	ed92 6b08 	vldr	d6, [r2, #32]
 80124e8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80124ec:	ed8d 6b02 	vstr	d6, [sp, #8]
 80124f0:	f001 010f 	and.w	r1, r1, #15
 80124f4:	2203      	movs	r2, #3
 80124f6:	48c0      	ldr	r0, [pc, #768]	@ (80127f8 <_dtoa_r+0x618>)
 80124f8:	2900      	cmp	r1, #0
 80124fa:	f040 809d 	bne.w	8012638 <_dtoa_r+0x458>
 80124fe:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012502:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012506:	ed8d 7b02 	vstr	d7, [sp, #8]
 801250a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801250c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012510:	2900      	cmp	r1, #0
 8012512:	f000 80c1 	beq.w	8012698 <_dtoa_r+0x4b8>
 8012516:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801251a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801251e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012522:	f140 80b9 	bpl.w	8012698 <_dtoa_r+0x4b8>
 8012526:	f1ba 0f00 	cmp.w	sl, #0
 801252a:	f000 80b5 	beq.w	8012698 <_dtoa_r+0x4b8>
 801252e:	f1bb 0f00 	cmp.w	fp, #0
 8012532:	dd31      	ble.n	8012598 <_dtoa_r+0x3b8>
 8012534:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8012538:	ee27 7b06 	vmul.f64	d7, d7, d6
 801253c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012540:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8012544:	9104      	str	r1, [sp, #16]
 8012546:	3201      	adds	r2, #1
 8012548:	465c      	mov	r4, fp
 801254a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801254e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8012552:	ee07 2a90 	vmov	s15, r2
 8012556:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801255a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801255e:	ee15 2a90 	vmov	r2, s11
 8012562:	ec51 0b15 	vmov	r0, r1, d5
 8012566:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801256a:	2c00      	cmp	r4, #0
 801256c:	f040 8098 	bne.w	80126a0 <_dtoa_r+0x4c0>
 8012570:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8012574:	ee36 6b47 	vsub.f64	d6, d6, d7
 8012578:	ec41 0b17 	vmov	d7, r0, r1
 801257c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012584:	f300 8261 	bgt.w	8012a4a <_dtoa_r+0x86a>
 8012588:	eeb1 7b47 	vneg.f64	d7, d7
 801258c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012594:	f100 80f5 	bmi.w	8012782 <_dtoa_r+0x5a2>
 8012598:	ed8d 8b02 	vstr	d8, [sp, #8]
 801259c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801259e:	2a00      	cmp	r2, #0
 80125a0:	f2c0 812c 	blt.w	80127fc <_dtoa_r+0x61c>
 80125a4:	f1b8 0f0e 	cmp.w	r8, #14
 80125a8:	f300 8128 	bgt.w	80127fc <_dtoa_r+0x61c>
 80125ac:	4b91      	ldr	r3, [pc, #580]	@ (80127f4 <_dtoa_r+0x614>)
 80125ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80125b2:	ed93 6b00 	vldr	d6, [r3]
 80125b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	da03      	bge.n	80125c4 <_dtoa_r+0x3e4>
 80125bc:	f1ba 0f00 	cmp.w	sl, #0
 80125c0:	f340 80d2 	ble.w	8012768 <_dtoa_r+0x588>
 80125c4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80125c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80125cc:	463e      	mov	r6, r7
 80125ce:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80125d2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80125d6:	ee15 3a10 	vmov	r3, s10
 80125da:	3330      	adds	r3, #48	@ 0x30
 80125dc:	f806 3b01 	strb.w	r3, [r6], #1
 80125e0:	1bf3      	subs	r3, r6, r7
 80125e2:	459a      	cmp	sl, r3
 80125e4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80125e8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80125ec:	f040 80f8 	bne.w	80127e0 <_dtoa_r+0x600>
 80125f0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80125f4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80125f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125fc:	f300 80dd 	bgt.w	80127ba <_dtoa_r+0x5da>
 8012600:	eeb4 7b46 	vcmp.f64	d7, d6
 8012604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012608:	d104      	bne.n	8012614 <_dtoa_r+0x434>
 801260a:	ee15 3a10 	vmov	r3, s10
 801260e:	07db      	lsls	r3, r3, #31
 8012610:	f100 80d3 	bmi.w	80127ba <_dtoa_r+0x5da>
 8012614:	9901      	ldr	r1, [sp, #4]
 8012616:	4648      	mov	r0, r9
 8012618:	f000 fc78 	bl	8012f0c <_Bfree>
 801261c:	2300      	movs	r3, #0
 801261e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012620:	7033      	strb	r3, [r6, #0]
 8012622:	f108 0301 	add.w	r3, r8, #1
 8012626:	6013      	str	r3, [r2, #0]
 8012628:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801262a:	2b00      	cmp	r3, #0
 801262c:	f000 8304 	beq.w	8012c38 <_dtoa_r+0xa58>
 8012630:	601e      	str	r6, [r3, #0]
 8012632:	e301      	b.n	8012c38 <_dtoa_r+0xa58>
 8012634:	2202      	movs	r2, #2
 8012636:	e75e      	b.n	80124f6 <_dtoa_r+0x316>
 8012638:	07cc      	lsls	r4, r1, #31
 801263a:	d504      	bpl.n	8012646 <_dtoa_r+0x466>
 801263c:	ed90 6b00 	vldr	d6, [r0]
 8012640:	3201      	adds	r2, #1
 8012642:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012646:	1049      	asrs	r1, r1, #1
 8012648:	3008      	adds	r0, #8
 801264a:	e755      	b.n	80124f8 <_dtoa_r+0x318>
 801264c:	d022      	beq.n	8012694 <_dtoa_r+0x4b4>
 801264e:	f1c8 0100 	rsb	r1, r8, #0
 8012652:	4a68      	ldr	r2, [pc, #416]	@ (80127f4 <_dtoa_r+0x614>)
 8012654:	f001 000f 	and.w	r0, r1, #15
 8012658:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801265c:	ed92 7b00 	vldr	d7, [r2]
 8012660:	ee28 7b07 	vmul.f64	d7, d8, d7
 8012664:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012668:	4863      	ldr	r0, [pc, #396]	@ (80127f8 <_dtoa_r+0x618>)
 801266a:	1109      	asrs	r1, r1, #4
 801266c:	2400      	movs	r4, #0
 801266e:	2202      	movs	r2, #2
 8012670:	b929      	cbnz	r1, 801267e <_dtoa_r+0x49e>
 8012672:	2c00      	cmp	r4, #0
 8012674:	f43f af49 	beq.w	801250a <_dtoa_r+0x32a>
 8012678:	ed8d 7b02 	vstr	d7, [sp, #8]
 801267c:	e745      	b.n	801250a <_dtoa_r+0x32a>
 801267e:	07ce      	lsls	r6, r1, #31
 8012680:	d505      	bpl.n	801268e <_dtoa_r+0x4ae>
 8012682:	ed90 6b00 	vldr	d6, [r0]
 8012686:	3201      	adds	r2, #1
 8012688:	2401      	movs	r4, #1
 801268a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801268e:	1049      	asrs	r1, r1, #1
 8012690:	3008      	adds	r0, #8
 8012692:	e7ed      	b.n	8012670 <_dtoa_r+0x490>
 8012694:	2202      	movs	r2, #2
 8012696:	e738      	b.n	801250a <_dtoa_r+0x32a>
 8012698:	f8cd 8010 	str.w	r8, [sp, #16]
 801269c:	4654      	mov	r4, sl
 801269e:	e754      	b.n	801254a <_dtoa_r+0x36a>
 80126a0:	4a54      	ldr	r2, [pc, #336]	@ (80127f4 <_dtoa_r+0x614>)
 80126a2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80126a6:	ed12 4b02 	vldr	d4, [r2, #-8]
 80126aa:	9a08      	ldr	r2, [sp, #32]
 80126ac:	ec41 0b17 	vmov	d7, r0, r1
 80126b0:	443c      	add	r4, r7
 80126b2:	b34a      	cbz	r2, 8012708 <_dtoa_r+0x528>
 80126b4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80126b8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80126bc:	463e      	mov	r6, r7
 80126be:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80126c2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80126c6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80126ca:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80126ce:	ee14 2a90 	vmov	r2, s9
 80126d2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80126d6:	3230      	adds	r2, #48	@ 0x30
 80126d8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80126dc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80126e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126e4:	f806 2b01 	strb.w	r2, [r6], #1
 80126e8:	d438      	bmi.n	801275c <_dtoa_r+0x57c>
 80126ea:	ee32 5b46 	vsub.f64	d5, d2, d6
 80126ee:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80126f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126f6:	d462      	bmi.n	80127be <_dtoa_r+0x5de>
 80126f8:	42a6      	cmp	r6, r4
 80126fa:	f43f af4d 	beq.w	8012598 <_dtoa_r+0x3b8>
 80126fe:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012702:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012706:	e7e0      	b.n	80126ca <_dtoa_r+0x4ea>
 8012708:	4621      	mov	r1, r4
 801270a:	463e      	mov	r6, r7
 801270c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012710:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8012714:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012718:	ee14 2a90 	vmov	r2, s9
 801271c:	3230      	adds	r2, #48	@ 0x30
 801271e:	f806 2b01 	strb.w	r2, [r6], #1
 8012722:	42a6      	cmp	r6, r4
 8012724:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012728:	ee36 6b45 	vsub.f64	d6, d6, d5
 801272c:	d119      	bne.n	8012762 <_dtoa_r+0x582>
 801272e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8012732:	ee37 4b05 	vadd.f64	d4, d7, d5
 8012736:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801273a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801273e:	dc3e      	bgt.n	80127be <_dtoa_r+0x5de>
 8012740:	ee35 5b47 	vsub.f64	d5, d5, d7
 8012744:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8012748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801274c:	f57f af24 	bpl.w	8012598 <_dtoa_r+0x3b8>
 8012750:	460e      	mov	r6, r1
 8012752:	3901      	subs	r1, #1
 8012754:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012758:	2b30      	cmp	r3, #48	@ 0x30
 801275a:	d0f9      	beq.n	8012750 <_dtoa_r+0x570>
 801275c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8012760:	e758      	b.n	8012614 <_dtoa_r+0x434>
 8012762:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012766:	e7d5      	b.n	8012714 <_dtoa_r+0x534>
 8012768:	d10b      	bne.n	8012782 <_dtoa_r+0x5a2>
 801276a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801276e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8012772:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012776:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801277a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801277e:	f2c0 8161 	blt.w	8012a44 <_dtoa_r+0x864>
 8012782:	2400      	movs	r4, #0
 8012784:	4625      	mov	r5, r4
 8012786:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012788:	43db      	mvns	r3, r3
 801278a:	9304      	str	r3, [sp, #16]
 801278c:	463e      	mov	r6, r7
 801278e:	f04f 0800 	mov.w	r8, #0
 8012792:	4621      	mov	r1, r4
 8012794:	4648      	mov	r0, r9
 8012796:	f000 fbb9 	bl	8012f0c <_Bfree>
 801279a:	2d00      	cmp	r5, #0
 801279c:	d0de      	beq.n	801275c <_dtoa_r+0x57c>
 801279e:	f1b8 0f00 	cmp.w	r8, #0
 80127a2:	d005      	beq.n	80127b0 <_dtoa_r+0x5d0>
 80127a4:	45a8      	cmp	r8, r5
 80127a6:	d003      	beq.n	80127b0 <_dtoa_r+0x5d0>
 80127a8:	4641      	mov	r1, r8
 80127aa:	4648      	mov	r0, r9
 80127ac:	f000 fbae 	bl	8012f0c <_Bfree>
 80127b0:	4629      	mov	r1, r5
 80127b2:	4648      	mov	r0, r9
 80127b4:	f000 fbaa 	bl	8012f0c <_Bfree>
 80127b8:	e7d0      	b.n	801275c <_dtoa_r+0x57c>
 80127ba:	f8cd 8010 	str.w	r8, [sp, #16]
 80127be:	4633      	mov	r3, r6
 80127c0:	461e      	mov	r6, r3
 80127c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80127c6:	2a39      	cmp	r2, #57	@ 0x39
 80127c8:	d106      	bne.n	80127d8 <_dtoa_r+0x5f8>
 80127ca:	429f      	cmp	r7, r3
 80127cc:	d1f8      	bne.n	80127c0 <_dtoa_r+0x5e0>
 80127ce:	9a04      	ldr	r2, [sp, #16]
 80127d0:	3201      	adds	r2, #1
 80127d2:	9204      	str	r2, [sp, #16]
 80127d4:	2230      	movs	r2, #48	@ 0x30
 80127d6:	703a      	strb	r2, [r7, #0]
 80127d8:	781a      	ldrb	r2, [r3, #0]
 80127da:	3201      	adds	r2, #1
 80127dc:	701a      	strb	r2, [r3, #0]
 80127de:	e7bd      	b.n	801275c <_dtoa_r+0x57c>
 80127e0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80127e4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80127e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127ec:	f47f aeef 	bne.w	80125ce <_dtoa_r+0x3ee>
 80127f0:	e710      	b.n	8012614 <_dtoa_r+0x434>
 80127f2:	bf00      	nop
 80127f4:	08014c68 	.word	0x08014c68
 80127f8:	08014c40 	.word	0x08014c40
 80127fc:	9908      	ldr	r1, [sp, #32]
 80127fe:	2900      	cmp	r1, #0
 8012800:	f000 80e3 	beq.w	80129ca <_dtoa_r+0x7ea>
 8012804:	9907      	ldr	r1, [sp, #28]
 8012806:	2901      	cmp	r1, #1
 8012808:	f300 80c8 	bgt.w	801299c <_dtoa_r+0x7bc>
 801280c:	2d00      	cmp	r5, #0
 801280e:	f000 80c1 	beq.w	8012994 <_dtoa_r+0x7b4>
 8012812:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8012816:	9e05      	ldr	r6, [sp, #20]
 8012818:	461c      	mov	r4, r3
 801281a:	9304      	str	r3, [sp, #16]
 801281c:	9b05      	ldr	r3, [sp, #20]
 801281e:	4413      	add	r3, r2
 8012820:	9305      	str	r3, [sp, #20]
 8012822:	9b06      	ldr	r3, [sp, #24]
 8012824:	2101      	movs	r1, #1
 8012826:	4413      	add	r3, r2
 8012828:	4648      	mov	r0, r9
 801282a:	9306      	str	r3, [sp, #24]
 801282c:	f000 fc22 	bl	8013074 <__i2b>
 8012830:	9b04      	ldr	r3, [sp, #16]
 8012832:	4605      	mov	r5, r0
 8012834:	b166      	cbz	r6, 8012850 <_dtoa_r+0x670>
 8012836:	9a06      	ldr	r2, [sp, #24]
 8012838:	2a00      	cmp	r2, #0
 801283a:	dd09      	ble.n	8012850 <_dtoa_r+0x670>
 801283c:	42b2      	cmp	r2, r6
 801283e:	9905      	ldr	r1, [sp, #20]
 8012840:	bfa8      	it	ge
 8012842:	4632      	movge	r2, r6
 8012844:	1a89      	subs	r1, r1, r2
 8012846:	9105      	str	r1, [sp, #20]
 8012848:	9906      	ldr	r1, [sp, #24]
 801284a:	1ab6      	subs	r6, r6, r2
 801284c:	1a8a      	subs	r2, r1, r2
 801284e:	9206      	str	r2, [sp, #24]
 8012850:	b1fb      	cbz	r3, 8012892 <_dtoa_r+0x6b2>
 8012852:	9a08      	ldr	r2, [sp, #32]
 8012854:	2a00      	cmp	r2, #0
 8012856:	f000 80bc 	beq.w	80129d2 <_dtoa_r+0x7f2>
 801285a:	b19c      	cbz	r4, 8012884 <_dtoa_r+0x6a4>
 801285c:	4629      	mov	r1, r5
 801285e:	4622      	mov	r2, r4
 8012860:	4648      	mov	r0, r9
 8012862:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012864:	f000 fcc6 	bl	80131f4 <__pow5mult>
 8012868:	9a01      	ldr	r2, [sp, #4]
 801286a:	4601      	mov	r1, r0
 801286c:	4605      	mov	r5, r0
 801286e:	4648      	mov	r0, r9
 8012870:	f000 fc16 	bl	80130a0 <__multiply>
 8012874:	9901      	ldr	r1, [sp, #4]
 8012876:	9004      	str	r0, [sp, #16]
 8012878:	4648      	mov	r0, r9
 801287a:	f000 fb47 	bl	8012f0c <_Bfree>
 801287e:	9a04      	ldr	r2, [sp, #16]
 8012880:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012882:	9201      	str	r2, [sp, #4]
 8012884:	1b1a      	subs	r2, r3, r4
 8012886:	d004      	beq.n	8012892 <_dtoa_r+0x6b2>
 8012888:	9901      	ldr	r1, [sp, #4]
 801288a:	4648      	mov	r0, r9
 801288c:	f000 fcb2 	bl	80131f4 <__pow5mult>
 8012890:	9001      	str	r0, [sp, #4]
 8012892:	2101      	movs	r1, #1
 8012894:	4648      	mov	r0, r9
 8012896:	f000 fbed 	bl	8013074 <__i2b>
 801289a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801289c:	4604      	mov	r4, r0
 801289e:	2b00      	cmp	r3, #0
 80128a0:	f000 81d0 	beq.w	8012c44 <_dtoa_r+0xa64>
 80128a4:	461a      	mov	r2, r3
 80128a6:	4601      	mov	r1, r0
 80128a8:	4648      	mov	r0, r9
 80128aa:	f000 fca3 	bl	80131f4 <__pow5mult>
 80128ae:	9b07      	ldr	r3, [sp, #28]
 80128b0:	2b01      	cmp	r3, #1
 80128b2:	4604      	mov	r4, r0
 80128b4:	f300 8095 	bgt.w	80129e2 <_dtoa_r+0x802>
 80128b8:	9b02      	ldr	r3, [sp, #8]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	f040 808b 	bne.w	80129d6 <_dtoa_r+0x7f6>
 80128c0:	9b03      	ldr	r3, [sp, #12]
 80128c2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80128c6:	2a00      	cmp	r2, #0
 80128c8:	f040 8087 	bne.w	80129da <_dtoa_r+0x7fa>
 80128cc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80128d0:	0d12      	lsrs	r2, r2, #20
 80128d2:	0512      	lsls	r2, r2, #20
 80128d4:	2a00      	cmp	r2, #0
 80128d6:	f000 8082 	beq.w	80129de <_dtoa_r+0x7fe>
 80128da:	9b05      	ldr	r3, [sp, #20]
 80128dc:	3301      	adds	r3, #1
 80128de:	9305      	str	r3, [sp, #20]
 80128e0:	9b06      	ldr	r3, [sp, #24]
 80128e2:	3301      	adds	r3, #1
 80128e4:	9306      	str	r3, [sp, #24]
 80128e6:	2301      	movs	r3, #1
 80128e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80128ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	f000 81af 	beq.w	8012c50 <_dtoa_r+0xa70>
 80128f2:	6922      	ldr	r2, [r4, #16]
 80128f4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80128f8:	6910      	ldr	r0, [r2, #16]
 80128fa:	f000 fb6f 	bl	8012fdc <__hi0bits>
 80128fe:	f1c0 0020 	rsb	r0, r0, #32
 8012902:	9b06      	ldr	r3, [sp, #24]
 8012904:	4418      	add	r0, r3
 8012906:	f010 001f 	ands.w	r0, r0, #31
 801290a:	d076      	beq.n	80129fa <_dtoa_r+0x81a>
 801290c:	f1c0 0220 	rsb	r2, r0, #32
 8012910:	2a04      	cmp	r2, #4
 8012912:	dd69      	ble.n	80129e8 <_dtoa_r+0x808>
 8012914:	9b05      	ldr	r3, [sp, #20]
 8012916:	f1c0 001c 	rsb	r0, r0, #28
 801291a:	4403      	add	r3, r0
 801291c:	9305      	str	r3, [sp, #20]
 801291e:	9b06      	ldr	r3, [sp, #24]
 8012920:	4406      	add	r6, r0
 8012922:	4403      	add	r3, r0
 8012924:	9306      	str	r3, [sp, #24]
 8012926:	9b05      	ldr	r3, [sp, #20]
 8012928:	2b00      	cmp	r3, #0
 801292a:	dd05      	ble.n	8012938 <_dtoa_r+0x758>
 801292c:	9901      	ldr	r1, [sp, #4]
 801292e:	461a      	mov	r2, r3
 8012930:	4648      	mov	r0, r9
 8012932:	f000 fcb9 	bl	80132a8 <__lshift>
 8012936:	9001      	str	r0, [sp, #4]
 8012938:	9b06      	ldr	r3, [sp, #24]
 801293a:	2b00      	cmp	r3, #0
 801293c:	dd05      	ble.n	801294a <_dtoa_r+0x76a>
 801293e:	4621      	mov	r1, r4
 8012940:	461a      	mov	r2, r3
 8012942:	4648      	mov	r0, r9
 8012944:	f000 fcb0 	bl	80132a8 <__lshift>
 8012948:	4604      	mov	r4, r0
 801294a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801294c:	2b00      	cmp	r3, #0
 801294e:	d056      	beq.n	80129fe <_dtoa_r+0x81e>
 8012950:	9801      	ldr	r0, [sp, #4]
 8012952:	4621      	mov	r1, r4
 8012954:	f000 fd14 	bl	8013380 <__mcmp>
 8012958:	2800      	cmp	r0, #0
 801295a:	da50      	bge.n	80129fe <_dtoa_r+0x81e>
 801295c:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8012960:	9304      	str	r3, [sp, #16]
 8012962:	9901      	ldr	r1, [sp, #4]
 8012964:	2300      	movs	r3, #0
 8012966:	220a      	movs	r2, #10
 8012968:	4648      	mov	r0, r9
 801296a:	f000 faf1 	bl	8012f50 <__multadd>
 801296e:	9b08      	ldr	r3, [sp, #32]
 8012970:	9001      	str	r0, [sp, #4]
 8012972:	2b00      	cmp	r3, #0
 8012974:	f000 816e 	beq.w	8012c54 <_dtoa_r+0xa74>
 8012978:	4629      	mov	r1, r5
 801297a:	2300      	movs	r3, #0
 801297c:	220a      	movs	r2, #10
 801297e:	4648      	mov	r0, r9
 8012980:	f000 fae6 	bl	8012f50 <__multadd>
 8012984:	f1bb 0f00 	cmp.w	fp, #0
 8012988:	4605      	mov	r5, r0
 801298a:	dc64      	bgt.n	8012a56 <_dtoa_r+0x876>
 801298c:	9b07      	ldr	r3, [sp, #28]
 801298e:	2b02      	cmp	r3, #2
 8012990:	dc3e      	bgt.n	8012a10 <_dtoa_r+0x830>
 8012992:	e060      	b.n	8012a56 <_dtoa_r+0x876>
 8012994:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012996:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801299a:	e73c      	b.n	8012816 <_dtoa_r+0x636>
 801299c:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 80129a0:	42a3      	cmp	r3, r4
 80129a2:	bfbf      	itttt	lt
 80129a4:	1ae2      	sublt	r2, r4, r3
 80129a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80129a8:	189b      	addlt	r3, r3, r2
 80129aa:	930a      	strlt	r3, [sp, #40]	@ 0x28
 80129ac:	bfae      	itee	ge
 80129ae:	1b1c      	subge	r4, r3, r4
 80129b0:	4623      	movlt	r3, r4
 80129b2:	2400      	movlt	r4, #0
 80129b4:	f1ba 0f00 	cmp.w	sl, #0
 80129b8:	bfb5      	itete	lt
 80129ba:	9a05      	ldrlt	r2, [sp, #20]
 80129bc:	9e05      	ldrge	r6, [sp, #20]
 80129be:	eba2 060a 	sublt.w	r6, r2, sl
 80129c2:	4652      	movge	r2, sl
 80129c4:	bfb8      	it	lt
 80129c6:	2200      	movlt	r2, #0
 80129c8:	e727      	b.n	801281a <_dtoa_r+0x63a>
 80129ca:	9e05      	ldr	r6, [sp, #20]
 80129cc:	9d08      	ldr	r5, [sp, #32]
 80129ce:	461c      	mov	r4, r3
 80129d0:	e730      	b.n	8012834 <_dtoa_r+0x654>
 80129d2:	461a      	mov	r2, r3
 80129d4:	e758      	b.n	8012888 <_dtoa_r+0x6a8>
 80129d6:	2300      	movs	r3, #0
 80129d8:	e786      	b.n	80128e8 <_dtoa_r+0x708>
 80129da:	9b02      	ldr	r3, [sp, #8]
 80129dc:	e784      	b.n	80128e8 <_dtoa_r+0x708>
 80129de:	920b      	str	r2, [sp, #44]	@ 0x2c
 80129e0:	e783      	b.n	80128ea <_dtoa_r+0x70a>
 80129e2:	2300      	movs	r3, #0
 80129e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80129e6:	e784      	b.n	80128f2 <_dtoa_r+0x712>
 80129e8:	d09d      	beq.n	8012926 <_dtoa_r+0x746>
 80129ea:	9b05      	ldr	r3, [sp, #20]
 80129ec:	321c      	adds	r2, #28
 80129ee:	4413      	add	r3, r2
 80129f0:	9305      	str	r3, [sp, #20]
 80129f2:	9b06      	ldr	r3, [sp, #24]
 80129f4:	4416      	add	r6, r2
 80129f6:	4413      	add	r3, r2
 80129f8:	e794      	b.n	8012924 <_dtoa_r+0x744>
 80129fa:	4602      	mov	r2, r0
 80129fc:	e7f5      	b.n	80129ea <_dtoa_r+0x80a>
 80129fe:	f1ba 0f00 	cmp.w	sl, #0
 8012a02:	f8cd 8010 	str.w	r8, [sp, #16]
 8012a06:	46d3      	mov	fp, sl
 8012a08:	dc21      	bgt.n	8012a4e <_dtoa_r+0x86e>
 8012a0a:	9b07      	ldr	r3, [sp, #28]
 8012a0c:	2b02      	cmp	r3, #2
 8012a0e:	dd1e      	ble.n	8012a4e <_dtoa_r+0x86e>
 8012a10:	f1bb 0f00 	cmp.w	fp, #0
 8012a14:	f47f aeb7 	bne.w	8012786 <_dtoa_r+0x5a6>
 8012a18:	4621      	mov	r1, r4
 8012a1a:	465b      	mov	r3, fp
 8012a1c:	2205      	movs	r2, #5
 8012a1e:	4648      	mov	r0, r9
 8012a20:	f000 fa96 	bl	8012f50 <__multadd>
 8012a24:	4601      	mov	r1, r0
 8012a26:	4604      	mov	r4, r0
 8012a28:	9801      	ldr	r0, [sp, #4]
 8012a2a:	f000 fca9 	bl	8013380 <__mcmp>
 8012a2e:	2800      	cmp	r0, #0
 8012a30:	f77f aea9 	ble.w	8012786 <_dtoa_r+0x5a6>
 8012a34:	463e      	mov	r6, r7
 8012a36:	2331      	movs	r3, #49	@ 0x31
 8012a38:	f806 3b01 	strb.w	r3, [r6], #1
 8012a3c:	9b04      	ldr	r3, [sp, #16]
 8012a3e:	3301      	adds	r3, #1
 8012a40:	9304      	str	r3, [sp, #16]
 8012a42:	e6a4      	b.n	801278e <_dtoa_r+0x5ae>
 8012a44:	f8cd 8010 	str.w	r8, [sp, #16]
 8012a48:	4654      	mov	r4, sl
 8012a4a:	4625      	mov	r5, r4
 8012a4c:	e7f2      	b.n	8012a34 <_dtoa_r+0x854>
 8012a4e:	9b08      	ldr	r3, [sp, #32]
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	f000 8103 	beq.w	8012c5c <_dtoa_r+0xa7c>
 8012a56:	2e00      	cmp	r6, #0
 8012a58:	dd05      	ble.n	8012a66 <_dtoa_r+0x886>
 8012a5a:	4629      	mov	r1, r5
 8012a5c:	4632      	mov	r2, r6
 8012a5e:	4648      	mov	r0, r9
 8012a60:	f000 fc22 	bl	80132a8 <__lshift>
 8012a64:	4605      	mov	r5, r0
 8012a66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d058      	beq.n	8012b1e <_dtoa_r+0x93e>
 8012a6c:	6869      	ldr	r1, [r5, #4]
 8012a6e:	4648      	mov	r0, r9
 8012a70:	f000 fa0c 	bl	8012e8c <_Balloc>
 8012a74:	4606      	mov	r6, r0
 8012a76:	b928      	cbnz	r0, 8012a84 <_dtoa_r+0x8a4>
 8012a78:	4b82      	ldr	r3, [pc, #520]	@ (8012c84 <_dtoa_r+0xaa4>)
 8012a7a:	4602      	mov	r2, r0
 8012a7c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8012a80:	f7ff bbc7 	b.w	8012212 <_dtoa_r+0x32>
 8012a84:	692a      	ldr	r2, [r5, #16]
 8012a86:	3202      	adds	r2, #2
 8012a88:	0092      	lsls	r2, r2, #2
 8012a8a:	f105 010c 	add.w	r1, r5, #12
 8012a8e:	300c      	adds	r0, #12
 8012a90:	f000 ffac 	bl	80139ec <memcpy>
 8012a94:	2201      	movs	r2, #1
 8012a96:	4631      	mov	r1, r6
 8012a98:	4648      	mov	r0, r9
 8012a9a:	f000 fc05 	bl	80132a8 <__lshift>
 8012a9e:	1c7b      	adds	r3, r7, #1
 8012aa0:	9305      	str	r3, [sp, #20]
 8012aa2:	eb07 030b 	add.w	r3, r7, fp
 8012aa6:	9309      	str	r3, [sp, #36]	@ 0x24
 8012aa8:	9b02      	ldr	r3, [sp, #8]
 8012aaa:	f003 0301 	and.w	r3, r3, #1
 8012aae:	46a8      	mov	r8, r5
 8012ab0:	9308      	str	r3, [sp, #32]
 8012ab2:	4605      	mov	r5, r0
 8012ab4:	9b05      	ldr	r3, [sp, #20]
 8012ab6:	9801      	ldr	r0, [sp, #4]
 8012ab8:	4621      	mov	r1, r4
 8012aba:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8012abe:	f7ff fb06 	bl	80120ce <quorem>
 8012ac2:	4641      	mov	r1, r8
 8012ac4:	9002      	str	r0, [sp, #8]
 8012ac6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8012aca:	9801      	ldr	r0, [sp, #4]
 8012acc:	f000 fc58 	bl	8013380 <__mcmp>
 8012ad0:	462a      	mov	r2, r5
 8012ad2:	9006      	str	r0, [sp, #24]
 8012ad4:	4621      	mov	r1, r4
 8012ad6:	4648      	mov	r0, r9
 8012ad8:	f000 fc6e 	bl	80133b8 <__mdiff>
 8012adc:	68c2      	ldr	r2, [r0, #12]
 8012ade:	4606      	mov	r6, r0
 8012ae0:	b9fa      	cbnz	r2, 8012b22 <_dtoa_r+0x942>
 8012ae2:	4601      	mov	r1, r0
 8012ae4:	9801      	ldr	r0, [sp, #4]
 8012ae6:	f000 fc4b 	bl	8013380 <__mcmp>
 8012aea:	4602      	mov	r2, r0
 8012aec:	4631      	mov	r1, r6
 8012aee:	4648      	mov	r0, r9
 8012af0:	920a      	str	r2, [sp, #40]	@ 0x28
 8012af2:	f000 fa0b 	bl	8012f0c <_Bfree>
 8012af6:	9b07      	ldr	r3, [sp, #28]
 8012af8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012afa:	9e05      	ldr	r6, [sp, #20]
 8012afc:	ea43 0102 	orr.w	r1, r3, r2
 8012b00:	9b08      	ldr	r3, [sp, #32]
 8012b02:	4319      	orrs	r1, r3
 8012b04:	d10f      	bne.n	8012b26 <_dtoa_r+0x946>
 8012b06:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8012b0a:	d028      	beq.n	8012b5e <_dtoa_r+0x97e>
 8012b0c:	9b06      	ldr	r3, [sp, #24]
 8012b0e:	2b00      	cmp	r3, #0
 8012b10:	dd02      	ble.n	8012b18 <_dtoa_r+0x938>
 8012b12:	9b02      	ldr	r3, [sp, #8]
 8012b14:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8012b18:	f88b a000 	strb.w	sl, [fp]
 8012b1c:	e639      	b.n	8012792 <_dtoa_r+0x5b2>
 8012b1e:	4628      	mov	r0, r5
 8012b20:	e7bd      	b.n	8012a9e <_dtoa_r+0x8be>
 8012b22:	2201      	movs	r2, #1
 8012b24:	e7e2      	b.n	8012aec <_dtoa_r+0x90c>
 8012b26:	9b06      	ldr	r3, [sp, #24]
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	db04      	blt.n	8012b36 <_dtoa_r+0x956>
 8012b2c:	9907      	ldr	r1, [sp, #28]
 8012b2e:	430b      	orrs	r3, r1
 8012b30:	9908      	ldr	r1, [sp, #32]
 8012b32:	430b      	orrs	r3, r1
 8012b34:	d120      	bne.n	8012b78 <_dtoa_r+0x998>
 8012b36:	2a00      	cmp	r2, #0
 8012b38:	ddee      	ble.n	8012b18 <_dtoa_r+0x938>
 8012b3a:	9901      	ldr	r1, [sp, #4]
 8012b3c:	2201      	movs	r2, #1
 8012b3e:	4648      	mov	r0, r9
 8012b40:	f000 fbb2 	bl	80132a8 <__lshift>
 8012b44:	4621      	mov	r1, r4
 8012b46:	9001      	str	r0, [sp, #4]
 8012b48:	f000 fc1a 	bl	8013380 <__mcmp>
 8012b4c:	2800      	cmp	r0, #0
 8012b4e:	dc03      	bgt.n	8012b58 <_dtoa_r+0x978>
 8012b50:	d1e2      	bne.n	8012b18 <_dtoa_r+0x938>
 8012b52:	f01a 0f01 	tst.w	sl, #1
 8012b56:	d0df      	beq.n	8012b18 <_dtoa_r+0x938>
 8012b58:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8012b5c:	d1d9      	bne.n	8012b12 <_dtoa_r+0x932>
 8012b5e:	2339      	movs	r3, #57	@ 0x39
 8012b60:	f88b 3000 	strb.w	r3, [fp]
 8012b64:	4633      	mov	r3, r6
 8012b66:	461e      	mov	r6, r3
 8012b68:	3b01      	subs	r3, #1
 8012b6a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012b6e:	2a39      	cmp	r2, #57	@ 0x39
 8012b70:	d053      	beq.n	8012c1a <_dtoa_r+0xa3a>
 8012b72:	3201      	adds	r2, #1
 8012b74:	701a      	strb	r2, [r3, #0]
 8012b76:	e60c      	b.n	8012792 <_dtoa_r+0x5b2>
 8012b78:	2a00      	cmp	r2, #0
 8012b7a:	dd07      	ble.n	8012b8c <_dtoa_r+0x9ac>
 8012b7c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8012b80:	d0ed      	beq.n	8012b5e <_dtoa_r+0x97e>
 8012b82:	f10a 0301 	add.w	r3, sl, #1
 8012b86:	f88b 3000 	strb.w	r3, [fp]
 8012b8a:	e602      	b.n	8012792 <_dtoa_r+0x5b2>
 8012b8c:	9b05      	ldr	r3, [sp, #20]
 8012b8e:	9a05      	ldr	r2, [sp, #20]
 8012b90:	f803 ac01 	strb.w	sl, [r3, #-1]
 8012b94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012b96:	4293      	cmp	r3, r2
 8012b98:	d029      	beq.n	8012bee <_dtoa_r+0xa0e>
 8012b9a:	9901      	ldr	r1, [sp, #4]
 8012b9c:	2300      	movs	r3, #0
 8012b9e:	220a      	movs	r2, #10
 8012ba0:	4648      	mov	r0, r9
 8012ba2:	f000 f9d5 	bl	8012f50 <__multadd>
 8012ba6:	45a8      	cmp	r8, r5
 8012ba8:	9001      	str	r0, [sp, #4]
 8012baa:	f04f 0300 	mov.w	r3, #0
 8012bae:	f04f 020a 	mov.w	r2, #10
 8012bb2:	4641      	mov	r1, r8
 8012bb4:	4648      	mov	r0, r9
 8012bb6:	d107      	bne.n	8012bc8 <_dtoa_r+0x9e8>
 8012bb8:	f000 f9ca 	bl	8012f50 <__multadd>
 8012bbc:	4680      	mov	r8, r0
 8012bbe:	4605      	mov	r5, r0
 8012bc0:	9b05      	ldr	r3, [sp, #20]
 8012bc2:	3301      	adds	r3, #1
 8012bc4:	9305      	str	r3, [sp, #20]
 8012bc6:	e775      	b.n	8012ab4 <_dtoa_r+0x8d4>
 8012bc8:	f000 f9c2 	bl	8012f50 <__multadd>
 8012bcc:	4629      	mov	r1, r5
 8012bce:	4680      	mov	r8, r0
 8012bd0:	2300      	movs	r3, #0
 8012bd2:	220a      	movs	r2, #10
 8012bd4:	4648      	mov	r0, r9
 8012bd6:	f000 f9bb 	bl	8012f50 <__multadd>
 8012bda:	4605      	mov	r5, r0
 8012bdc:	e7f0      	b.n	8012bc0 <_dtoa_r+0x9e0>
 8012bde:	f1bb 0f00 	cmp.w	fp, #0
 8012be2:	bfcc      	ite	gt
 8012be4:	465e      	movgt	r6, fp
 8012be6:	2601      	movle	r6, #1
 8012be8:	443e      	add	r6, r7
 8012bea:	f04f 0800 	mov.w	r8, #0
 8012bee:	9901      	ldr	r1, [sp, #4]
 8012bf0:	2201      	movs	r2, #1
 8012bf2:	4648      	mov	r0, r9
 8012bf4:	f000 fb58 	bl	80132a8 <__lshift>
 8012bf8:	4621      	mov	r1, r4
 8012bfa:	9001      	str	r0, [sp, #4]
 8012bfc:	f000 fbc0 	bl	8013380 <__mcmp>
 8012c00:	2800      	cmp	r0, #0
 8012c02:	dcaf      	bgt.n	8012b64 <_dtoa_r+0x984>
 8012c04:	d102      	bne.n	8012c0c <_dtoa_r+0xa2c>
 8012c06:	f01a 0f01 	tst.w	sl, #1
 8012c0a:	d1ab      	bne.n	8012b64 <_dtoa_r+0x984>
 8012c0c:	4633      	mov	r3, r6
 8012c0e:	461e      	mov	r6, r3
 8012c10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012c14:	2a30      	cmp	r2, #48	@ 0x30
 8012c16:	d0fa      	beq.n	8012c0e <_dtoa_r+0xa2e>
 8012c18:	e5bb      	b.n	8012792 <_dtoa_r+0x5b2>
 8012c1a:	429f      	cmp	r7, r3
 8012c1c:	d1a3      	bne.n	8012b66 <_dtoa_r+0x986>
 8012c1e:	9b04      	ldr	r3, [sp, #16]
 8012c20:	3301      	adds	r3, #1
 8012c22:	9304      	str	r3, [sp, #16]
 8012c24:	2331      	movs	r3, #49	@ 0x31
 8012c26:	703b      	strb	r3, [r7, #0]
 8012c28:	e5b3      	b.n	8012792 <_dtoa_r+0x5b2>
 8012c2a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012c2c:	4f16      	ldr	r7, [pc, #88]	@ (8012c88 <_dtoa_r+0xaa8>)
 8012c2e:	b11b      	cbz	r3, 8012c38 <_dtoa_r+0xa58>
 8012c30:	f107 0308 	add.w	r3, r7, #8
 8012c34:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8012c36:	6013      	str	r3, [r2, #0]
 8012c38:	4638      	mov	r0, r7
 8012c3a:	b011      	add	sp, #68	@ 0x44
 8012c3c:	ecbd 8b02 	vpop	{d8}
 8012c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c44:	9b07      	ldr	r3, [sp, #28]
 8012c46:	2b01      	cmp	r3, #1
 8012c48:	f77f ae36 	ble.w	80128b8 <_dtoa_r+0x6d8>
 8012c4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012c4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012c50:	2001      	movs	r0, #1
 8012c52:	e656      	b.n	8012902 <_dtoa_r+0x722>
 8012c54:	f1bb 0f00 	cmp.w	fp, #0
 8012c58:	f77f aed7 	ble.w	8012a0a <_dtoa_r+0x82a>
 8012c5c:	463e      	mov	r6, r7
 8012c5e:	9801      	ldr	r0, [sp, #4]
 8012c60:	4621      	mov	r1, r4
 8012c62:	f7ff fa34 	bl	80120ce <quorem>
 8012c66:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8012c6a:	f806 ab01 	strb.w	sl, [r6], #1
 8012c6e:	1bf2      	subs	r2, r6, r7
 8012c70:	4593      	cmp	fp, r2
 8012c72:	ddb4      	ble.n	8012bde <_dtoa_r+0x9fe>
 8012c74:	9901      	ldr	r1, [sp, #4]
 8012c76:	2300      	movs	r3, #0
 8012c78:	220a      	movs	r2, #10
 8012c7a:	4648      	mov	r0, r9
 8012c7c:	f000 f968 	bl	8012f50 <__multadd>
 8012c80:	9001      	str	r0, [sp, #4]
 8012c82:	e7ec      	b.n	8012c5e <_dtoa_r+0xa7e>
 8012c84:	08014bc6 	.word	0x08014bc6
 8012c88:	08014b4a 	.word	0x08014b4a

08012c8c <_free_r>:
 8012c8c:	b538      	push	{r3, r4, r5, lr}
 8012c8e:	4605      	mov	r5, r0
 8012c90:	2900      	cmp	r1, #0
 8012c92:	d041      	beq.n	8012d18 <_free_r+0x8c>
 8012c94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012c98:	1f0c      	subs	r4, r1, #4
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	bfb8      	it	lt
 8012c9e:	18e4      	addlt	r4, r4, r3
 8012ca0:	f000 f8e8 	bl	8012e74 <__malloc_lock>
 8012ca4:	4a1d      	ldr	r2, [pc, #116]	@ (8012d1c <_free_r+0x90>)
 8012ca6:	6813      	ldr	r3, [r2, #0]
 8012ca8:	b933      	cbnz	r3, 8012cb8 <_free_r+0x2c>
 8012caa:	6063      	str	r3, [r4, #4]
 8012cac:	6014      	str	r4, [r2, #0]
 8012cae:	4628      	mov	r0, r5
 8012cb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012cb4:	f000 b8e4 	b.w	8012e80 <__malloc_unlock>
 8012cb8:	42a3      	cmp	r3, r4
 8012cba:	d908      	bls.n	8012cce <_free_r+0x42>
 8012cbc:	6820      	ldr	r0, [r4, #0]
 8012cbe:	1821      	adds	r1, r4, r0
 8012cc0:	428b      	cmp	r3, r1
 8012cc2:	bf01      	itttt	eq
 8012cc4:	6819      	ldreq	r1, [r3, #0]
 8012cc6:	685b      	ldreq	r3, [r3, #4]
 8012cc8:	1809      	addeq	r1, r1, r0
 8012cca:	6021      	streq	r1, [r4, #0]
 8012ccc:	e7ed      	b.n	8012caa <_free_r+0x1e>
 8012cce:	461a      	mov	r2, r3
 8012cd0:	685b      	ldr	r3, [r3, #4]
 8012cd2:	b10b      	cbz	r3, 8012cd8 <_free_r+0x4c>
 8012cd4:	42a3      	cmp	r3, r4
 8012cd6:	d9fa      	bls.n	8012cce <_free_r+0x42>
 8012cd8:	6811      	ldr	r1, [r2, #0]
 8012cda:	1850      	adds	r0, r2, r1
 8012cdc:	42a0      	cmp	r0, r4
 8012cde:	d10b      	bne.n	8012cf8 <_free_r+0x6c>
 8012ce0:	6820      	ldr	r0, [r4, #0]
 8012ce2:	4401      	add	r1, r0
 8012ce4:	1850      	adds	r0, r2, r1
 8012ce6:	4283      	cmp	r3, r0
 8012ce8:	6011      	str	r1, [r2, #0]
 8012cea:	d1e0      	bne.n	8012cae <_free_r+0x22>
 8012cec:	6818      	ldr	r0, [r3, #0]
 8012cee:	685b      	ldr	r3, [r3, #4]
 8012cf0:	6053      	str	r3, [r2, #4]
 8012cf2:	4408      	add	r0, r1
 8012cf4:	6010      	str	r0, [r2, #0]
 8012cf6:	e7da      	b.n	8012cae <_free_r+0x22>
 8012cf8:	d902      	bls.n	8012d00 <_free_r+0x74>
 8012cfa:	230c      	movs	r3, #12
 8012cfc:	602b      	str	r3, [r5, #0]
 8012cfe:	e7d6      	b.n	8012cae <_free_r+0x22>
 8012d00:	6820      	ldr	r0, [r4, #0]
 8012d02:	1821      	adds	r1, r4, r0
 8012d04:	428b      	cmp	r3, r1
 8012d06:	bf04      	itt	eq
 8012d08:	6819      	ldreq	r1, [r3, #0]
 8012d0a:	685b      	ldreq	r3, [r3, #4]
 8012d0c:	6063      	str	r3, [r4, #4]
 8012d0e:	bf04      	itt	eq
 8012d10:	1809      	addeq	r1, r1, r0
 8012d12:	6021      	streq	r1, [r4, #0]
 8012d14:	6054      	str	r4, [r2, #4]
 8012d16:	e7ca      	b.n	8012cae <_free_r+0x22>
 8012d18:	bd38      	pop	{r3, r4, r5, pc}
 8012d1a:	bf00      	nop
 8012d1c:	24001204 	.word	0x24001204

08012d20 <malloc>:
 8012d20:	4b02      	ldr	r3, [pc, #8]	@ (8012d2c <malloc+0xc>)
 8012d22:	4601      	mov	r1, r0
 8012d24:	6818      	ldr	r0, [r3, #0]
 8012d26:	f000 b825 	b.w	8012d74 <_malloc_r>
 8012d2a:	bf00      	nop
 8012d2c:	24000054 	.word	0x24000054

08012d30 <sbrk_aligned>:
 8012d30:	b570      	push	{r4, r5, r6, lr}
 8012d32:	4e0f      	ldr	r6, [pc, #60]	@ (8012d70 <sbrk_aligned+0x40>)
 8012d34:	460c      	mov	r4, r1
 8012d36:	6831      	ldr	r1, [r6, #0]
 8012d38:	4605      	mov	r5, r0
 8012d3a:	b911      	cbnz	r1, 8012d42 <sbrk_aligned+0x12>
 8012d3c:	f000 fe46 	bl	80139cc <_sbrk_r>
 8012d40:	6030      	str	r0, [r6, #0]
 8012d42:	4621      	mov	r1, r4
 8012d44:	4628      	mov	r0, r5
 8012d46:	f000 fe41 	bl	80139cc <_sbrk_r>
 8012d4a:	1c43      	adds	r3, r0, #1
 8012d4c:	d103      	bne.n	8012d56 <sbrk_aligned+0x26>
 8012d4e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8012d52:	4620      	mov	r0, r4
 8012d54:	bd70      	pop	{r4, r5, r6, pc}
 8012d56:	1cc4      	adds	r4, r0, #3
 8012d58:	f024 0403 	bic.w	r4, r4, #3
 8012d5c:	42a0      	cmp	r0, r4
 8012d5e:	d0f8      	beq.n	8012d52 <sbrk_aligned+0x22>
 8012d60:	1a21      	subs	r1, r4, r0
 8012d62:	4628      	mov	r0, r5
 8012d64:	f000 fe32 	bl	80139cc <_sbrk_r>
 8012d68:	3001      	adds	r0, #1
 8012d6a:	d1f2      	bne.n	8012d52 <sbrk_aligned+0x22>
 8012d6c:	e7ef      	b.n	8012d4e <sbrk_aligned+0x1e>
 8012d6e:	bf00      	nop
 8012d70:	24001200 	.word	0x24001200

08012d74 <_malloc_r>:
 8012d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d78:	1ccd      	adds	r5, r1, #3
 8012d7a:	f025 0503 	bic.w	r5, r5, #3
 8012d7e:	3508      	adds	r5, #8
 8012d80:	2d0c      	cmp	r5, #12
 8012d82:	bf38      	it	cc
 8012d84:	250c      	movcc	r5, #12
 8012d86:	2d00      	cmp	r5, #0
 8012d88:	4606      	mov	r6, r0
 8012d8a:	db01      	blt.n	8012d90 <_malloc_r+0x1c>
 8012d8c:	42a9      	cmp	r1, r5
 8012d8e:	d904      	bls.n	8012d9a <_malloc_r+0x26>
 8012d90:	230c      	movs	r3, #12
 8012d92:	6033      	str	r3, [r6, #0]
 8012d94:	2000      	movs	r0, #0
 8012d96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012e70 <_malloc_r+0xfc>
 8012d9e:	f000 f869 	bl	8012e74 <__malloc_lock>
 8012da2:	f8d8 3000 	ldr.w	r3, [r8]
 8012da6:	461c      	mov	r4, r3
 8012da8:	bb44      	cbnz	r4, 8012dfc <_malloc_r+0x88>
 8012daa:	4629      	mov	r1, r5
 8012dac:	4630      	mov	r0, r6
 8012dae:	f7ff ffbf 	bl	8012d30 <sbrk_aligned>
 8012db2:	1c43      	adds	r3, r0, #1
 8012db4:	4604      	mov	r4, r0
 8012db6:	d158      	bne.n	8012e6a <_malloc_r+0xf6>
 8012db8:	f8d8 4000 	ldr.w	r4, [r8]
 8012dbc:	4627      	mov	r7, r4
 8012dbe:	2f00      	cmp	r7, #0
 8012dc0:	d143      	bne.n	8012e4a <_malloc_r+0xd6>
 8012dc2:	2c00      	cmp	r4, #0
 8012dc4:	d04b      	beq.n	8012e5e <_malloc_r+0xea>
 8012dc6:	6823      	ldr	r3, [r4, #0]
 8012dc8:	4639      	mov	r1, r7
 8012dca:	4630      	mov	r0, r6
 8012dcc:	eb04 0903 	add.w	r9, r4, r3
 8012dd0:	f000 fdfc 	bl	80139cc <_sbrk_r>
 8012dd4:	4581      	cmp	r9, r0
 8012dd6:	d142      	bne.n	8012e5e <_malloc_r+0xea>
 8012dd8:	6821      	ldr	r1, [r4, #0]
 8012dda:	1a6d      	subs	r5, r5, r1
 8012ddc:	4629      	mov	r1, r5
 8012dde:	4630      	mov	r0, r6
 8012de0:	f7ff ffa6 	bl	8012d30 <sbrk_aligned>
 8012de4:	3001      	adds	r0, #1
 8012de6:	d03a      	beq.n	8012e5e <_malloc_r+0xea>
 8012de8:	6823      	ldr	r3, [r4, #0]
 8012dea:	442b      	add	r3, r5
 8012dec:	6023      	str	r3, [r4, #0]
 8012dee:	f8d8 3000 	ldr.w	r3, [r8]
 8012df2:	685a      	ldr	r2, [r3, #4]
 8012df4:	bb62      	cbnz	r2, 8012e50 <_malloc_r+0xdc>
 8012df6:	f8c8 7000 	str.w	r7, [r8]
 8012dfa:	e00f      	b.n	8012e1c <_malloc_r+0xa8>
 8012dfc:	6822      	ldr	r2, [r4, #0]
 8012dfe:	1b52      	subs	r2, r2, r5
 8012e00:	d420      	bmi.n	8012e44 <_malloc_r+0xd0>
 8012e02:	2a0b      	cmp	r2, #11
 8012e04:	d917      	bls.n	8012e36 <_malloc_r+0xc2>
 8012e06:	1961      	adds	r1, r4, r5
 8012e08:	42a3      	cmp	r3, r4
 8012e0a:	6025      	str	r5, [r4, #0]
 8012e0c:	bf18      	it	ne
 8012e0e:	6059      	strne	r1, [r3, #4]
 8012e10:	6863      	ldr	r3, [r4, #4]
 8012e12:	bf08      	it	eq
 8012e14:	f8c8 1000 	streq.w	r1, [r8]
 8012e18:	5162      	str	r2, [r4, r5]
 8012e1a:	604b      	str	r3, [r1, #4]
 8012e1c:	4630      	mov	r0, r6
 8012e1e:	f000 f82f 	bl	8012e80 <__malloc_unlock>
 8012e22:	f104 000b 	add.w	r0, r4, #11
 8012e26:	1d23      	adds	r3, r4, #4
 8012e28:	f020 0007 	bic.w	r0, r0, #7
 8012e2c:	1ac2      	subs	r2, r0, r3
 8012e2e:	bf1c      	itt	ne
 8012e30:	1a1b      	subne	r3, r3, r0
 8012e32:	50a3      	strne	r3, [r4, r2]
 8012e34:	e7af      	b.n	8012d96 <_malloc_r+0x22>
 8012e36:	6862      	ldr	r2, [r4, #4]
 8012e38:	42a3      	cmp	r3, r4
 8012e3a:	bf0c      	ite	eq
 8012e3c:	f8c8 2000 	streq.w	r2, [r8]
 8012e40:	605a      	strne	r2, [r3, #4]
 8012e42:	e7eb      	b.n	8012e1c <_malloc_r+0xa8>
 8012e44:	4623      	mov	r3, r4
 8012e46:	6864      	ldr	r4, [r4, #4]
 8012e48:	e7ae      	b.n	8012da8 <_malloc_r+0x34>
 8012e4a:	463c      	mov	r4, r7
 8012e4c:	687f      	ldr	r7, [r7, #4]
 8012e4e:	e7b6      	b.n	8012dbe <_malloc_r+0x4a>
 8012e50:	461a      	mov	r2, r3
 8012e52:	685b      	ldr	r3, [r3, #4]
 8012e54:	42a3      	cmp	r3, r4
 8012e56:	d1fb      	bne.n	8012e50 <_malloc_r+0xdc>
 8012e58:	2300      	movs	r3, #0
 8012e5a:	6053      	str	r3, [r2, #4]
 8012e5c:	e7de      	b.n	8012e1c <_malloc_r+0xa8>
 8012e5e:	230c      	movs	r3, #12
 8012e60:	6033      	str	r3, [r6, #0]
 8012e62:	4630      	mov	r0, r6
 8012e64:	f000 f80c 	bl	8012e80 <__malloc_unlock>
 8012e68:	e794      	b.n	8012d94 <_malloc_r+0x20>
 8012e6a:	6005      	str	r5, [r0, #0]
 8012e6c:	e7d6      	b.n	8012e1c <_malloc_r+0xa8>
 8012e6e:	bf00      	nop
 8012e70:	24001204 	.word	0x24001204

08012e74 <__malloc_lock>:
 8012e74:	4801      	ldr	r0, [pc, #4]	@ (8012e7c <__malloc_lock+0x8>)
 8012e76:	f7ff b920 	b.w	80120ba <__retarget_lock_acquire_recursive>
 8012e7a:	bf00      	nop
 8012e7c:	240011fc 	.word	0x240011fc

08012e80 <__malloc_unlock>:
 8012e80:	4801      	ldr	r0, [pc, #4]	@ (8012e88 <__malloc_unlock+0x8>)
 8012e82:	f7ff b91b 	b.w	80120bc <__retarget_lock_release_recursive>
 8012e86:	bf00      	nop
 8012e88:	240011fc 	.word	0x240011fc

08012e8c <_Balloc>:
 8012e8c:	b570      	push	{r4, r5, r6, lr}
 8012e8e:	69c6      	ldr	r6, [r0, #28]
 8012e90:	4604      	mov	r4, r0
 8012e92:	460d      	mov	r5, r1
 8012e94:	b976      	cbnz	r6, 8012eb4 <_Balloc+0x28>
 8012e96:	2010      	movs	r0, #16
 8012e98:	f7ff ff42 	bl	8012d20 <malloc>
 8012e9c:	4602      	mov	r2, r0
 8012e9e:	61e0      	str	r0, [r4, #28]
 8012ea0:	b920      	cbnz	r0, 8012eac <_Balloc+0x20>
 8012ea2:	4b18      	ldr	r3, [pc, #96]	@ (8012f04 <_Balloc+0x78>)
 8012ea4:	4818      	ldr	r0, [pc, #96]	@ (8012f08 <_Balloc+0x7c>)
 8012ea6:	216b      	movs	r1, #107	@ 0x6b
 8012ea8:	f000 fdae 	bl	8013a08 <__assert_func>
 8012eac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012eb0:	6006      	str	r6, [r0, #0]
 8012eb2:	60c6      	str	r6, [r0, #12]
 8012eb4:	69e6      	ldr	r6, [r4, #28]
 8012eb6:	68f3      	ldr	r3, [r6, #12]
 8012eb8:	b183      	cbz	r3, 8012edc <_Balloc+0x50>
 8012eba:	69e3      	ldr	r3, [r4, #28]
 8012ebc:	68db      	ldr	r3, [r3, #12]
 8012ebe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012ec2:	b9b8      	cbnz	r0, 8012ef4 <_Balloc+0x68>
 8012ec4:	2101      	movs	r1, #1
 8012ec6:	fa01 f605 	lsl.w	r6, r1, r5
 8012eca:	1d72      	adds	r2, r6, #5
 8012ecc:	0092      	lsls	r2, r2, #2
 8012ece:	4620      	mov	r0, r4
 8012ed0:	f000 fdb8 	bl	8013a44 <_calloc_r>
 8012ed4:	b160      	cbz	r0, 8012ef0 <_Balloc+0x64>
 8012ed6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012eda:	e00e      	b.n	8012efa <_Balloc+0x6e>
 8012edc:	2221      	movs	r2, #33	@ 0x21
 8012ede:	2104      	movs	r1, #4
 8012ee0:	4620      	mov	r0, r4
 8012ee2:	f000 fdaf 	bl	8013a44 <_calloc_r>
 8012ee6:	69e3      	ldr	r3, [r4, #28]
 8012ee8:	60f0      	str	r0, [r6, #12]
 8012eea:	68db      	ldr	r3, [r3, #12]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d1e4      	bne.n	8012eba <_Balloc+0x2e>
 8012ef0:	2000      	movs	r0, #0
 8012ef2:	bd70      	pop	{r4, r5, r6, pc}
 8012ef4:	6802      	ldr	r2, [r0, #0]
 8012ef6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012efa:	2300      	movs	r3, #0
 8012efc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012f00:	e7f7      	b.n	8012ef2 <_Balloc+0x66>
 8012f02:	bf00      	nop
 8012f04:	08014b57 	.word	0x08014b57
 8012f08:	08014bd7 	.word	0x08014bd7

08012f0c <_Bfree>:
 8012f0c:	b570      	push	{r4, r5, r6, lr}
 8012f0e:	69c6      	ldr	r6, [r0, #28]
 8012f10:	4605      	mov	r5, r0
 8012f12:	460c      	mov	r4, r1
 8012f14:	b976      	cbnz	r6, 8012f34 <_Bfree+0x28>
 8012f16:	2010      	movs	r0, #16
 8012f18:	f7ff ff02 	bl	8012d20 <malloc>
 8012f1c:	4602      	mov	r2, r0
 8012f1e:	61e8      	str	r0, [r5, #28]
 8012f20:	b920      	cbnz	r0, 8012f2c <_Bfree+0x20>
 8012f22:	4b09      	ldr	r3, [pc, #36]	@ (8012f48 <_Bfree+0x3c>)
 8012f24:	4809      	ldr	r0, [pc, #36]	@ (8012f4c <_Bfree+0x40>)
 8012f26:	218f      	movs	r1, #143	@ 0x8f
 8012f28:	f000 fd6e 	bl	8013a08 <__assert_func>
 8012f2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012f30:	6006      	str	r6, [r0, #0]
 8012f32:	60c6      	str	r6, [r0, #12]
 8012f34:	b13c      	cbz	r4, 8012f46 <_Bfree+0x3a>
 8012f36:	69eb      	ldr	r3, [r5, #28]
 8012f38:	6862      	ldr	r2, [r4, #4]
 8012f3a:	68db      	ldr	r3, [r3, #12]
 8012f3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012f40:	6021      	str	r1, [r4, #0]
 8012f42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012f46:	bd70      	pop	{r4, r5, r6, pc}
 8012f48:	08014b57 	.word	0x08014b57
 8012f4c:	08014bd7 	.word	0x08014bd7

08012f50 <__multadd>:
 8012f50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f54:	690d      	ldr	r5, [r1, #16]
 8012f56:	4607      	mov	r7, r0
 8012f58:	460c      	mov	r4, r1
 8012f5a:	461e      	mov	r6, r3
 8012f5c:	f101 0c14 	add.w	ip, r1, #20
 8012f60:	2000      	movs	r0, #0
 8012f62:	f8dc 3000 	ldr.w	r3, [ip]
 8012f66:	b299      	uxth	r1, r3
 8012f68:	fb02 6101 	mla	r1, r2, r1, r6
 8012f6c:	0c1e      	lsrs	r6, r3, #16
 8012f6e:	0c0b      	lsrs	r3, r1, #16
 8012f70:	fb02 3306 	mla	r3, r2, r6, r3
 8012f74:	b289      	uxth	r1, r1
 8012f76:	3001      	adds	r0, #1
 8012f78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012f7c:	4285      	cmp	r5, r0
 8012f7e:	f84c 1b04 	str.w	r1, [ip], #4
 8012f82:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012f86:	dcec      	bgt.n	8012f62 <__multadd+0x12>
 8012f88:	b30e      	cbz	r6, 8012fce <__multadd+0x7e>
 8012f8a:	68a3      	ldr	r3, [r4, #8]
 8012f8c:	42ab      	cmp	r3, r5
 8012f8e:	dc19      	bgt.n	8012fc4 <__multadd+0x74>
 8012f90:	6861      	ldr	r1, [r4, #4]
 8012f92:	4638      	mov	r0, r7
 8012f94:	3101      	adds	r1, #1
 8012f96:	f7ff ff79 	bl	8012e8c <_Balloc>
 8012f9a:	4680      	mov	r8, r0
 8012f9c:	b928      	cbnz	r0, 8012faa <__multadd+0x5a>
 8012f9e:	4602      	mov	r2, r0
 8012fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8012fd4 <__multadd+0x84>)
 8012fa2:	480d      	ldr	r0, [pc, #52]	@ (8012fd8 <__multadd+0x88>)
 8012fa4:	21ba      	movs	r1, #186	@ 0xba
 8012fa6:	f000 fd2f 	bl	8013a08 <__assert_func>
 8012faa:	6922      	ldr	r2, [r4, #16]
 8012fac:	3202      	adds	r2, #2
 8012fae:	f104 010c 	add.w	r1, r4, #12
 8012fb2:	0092      	lsls	r2, r2, #2
 8012fb4:	300c      	adds	r0, #12
 8012fb6:	f000 fd19 	bl	80139ec <memcpy>
 8012fba:	4621      	mov	r1, r4
 8012fbc:	4638      	mov	r0, r7
 8012fbe:	f7ff ffa5 	bl	8012f0c <_Bfree>
 8012fc2:	4644      	mov	r4, r8
 8012fc4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012fc8:	3501      	adds	r5, #1
 8012fca:	615e      	str	r6, [r3, #20]
 8012fcc:	6125      	str	r5, [r4, #16]
 8012fce:	4620      	mov	r0, r4
 8012fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fd4:	08014bc6 	.word	0x08014bc6
 8012fd8:	08014bd7 	.word	0x08014bd7

08012fdc <__hi0bits>:
 8012fdc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012fe0:	4603      	mov	r3, r0
 8012fe2:	bf36      	itet	cc
 8012fe4:	0403      	lslcc	r3, r0, #16
 8012fe6:	2000      	movcs	r0, #0
 8012fe8:	2010      	movcc	r0, #16
 8012fea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012fee:	bf3c      	itt	cc
 8012ff0:	021b      	lslcc	r3, r3, #8
 8012ff2:	3008      	addcc	r0, #8
 8012ff4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012ff8:	bf3c      	itt	cc
 8012ffa:	011b      	lslcc	r3, r3, #4
 8012ffc:	3004      	addcc	r0, #4
 8012ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013002:	bf3c      	itt	cc
 8013004:	009b      	lslcc	r3, r3, #2
 8013006:	3002      	addcc	r0, #2
 8013008:	2b00      	cmp	r3, #0
 801300a:	db05      	blt.n	8013018 <__hi0bits+0x3c>
 801300c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013010:	f100 0001 	add.w	r0, r0, #1
 8013014:	bf08      	it	eq
 8013016:	2020      	moveq	r0, #32
 8013018:	4770      	bx	lr

0801301a <__lo0bits>:
 801301a:	6803      	ldr	r3, [r0, #0]
 801301c:	4602      	mov	r2, r0
 801301e:	f013 0007 	ands.w	r0, r3, #7
 8013022:	d00b      	beq.n	801303c <__lo0bits+0x22>
 8013024:	07d9      	lsls	r1, r3, #31
 8013026:	d421      	bmi.n	801306c <__lo0bits+0x52>
 8013028:	0798      	lsls	r0, r3, #30
 801302a:	bf49      	itett	mi
 801302c:	085b      	lsrmi	r3, r3, #1
 801302e:	089b      	lsrpl	r3, r3, #2
 8013030:	2001      	movmi	r0, #1
 8013032:	6013      	strmi	r3, [r2, #0]
 8013034:	bf5c      	itt	pl
 8013036:	6013      	strpl	r3, [r2, #0]
 8013038:	2002      	movpl	r0, #2
 801303a:	4770      	bx	lr
 801303c:	b299      	uxth	r1, r3
 801303e:	b909      	cbnz	r1, 8013044 <__lo0bits+0x2a>
 8013040:	0c1b      	lsrs	r3, r3, #16
 8013042:	2010      	movs	r0, #16
 8013044:	b2d9      	uxtb	r1, r3
 8013046:	b909      	cbnz	r1, 801304c <__lo0bits+0x32>
 8013048:	3008      	adds	r0, #8
 801304a:	0a1b      	lsrs	r3, r3, #8
 801304c:	0719      	lsls	r1, r3, #28
 801304e:	bf04      	itt	eq
 8013050:	091b      	lsreq	r3, r3, #4
 8013052:	3004      	addeq	r0, #4
 8013054:	0799      	lsls	r1, r3, #30
 8013056:	bf04      	itt	eq
 8013058:	089b      	lsreq	r3, r3, #2
 801305a:	3002      	addeq	r0, #2
 801305c:	07d9      	lsls	r1, r3, #31
 801305e:	d403      	bmi.n	8013068 <__lo0bits+0x4e>
 8013060:	085b      	lsrs	r3, r3, #1
 8013062:	f100 0001 	add.w	r0, r0, #1
 8013066:	d003      	beq.n	8013070 <__lo0bits+0x56>
 8013068:	6013      	str	r3, [r2, #0]
 801306a:	4770      	bx	lr
 801306c:	2000      	movs	r0, #0
 801306e:	4770      	bx	lr
 8013070:	2020      	movs	r0, #32
 8013072:	4770      	bx	lr

08013074 <__i2b>:
 8013074:	b510      	push	{r4, lr}
 8013076:	460c      	mov	r4, r1
 8013078:	2101      	movs	r1, #1
 801307a:	f7ff ff07 	bl	8012e8c <_Balloc>
 801307e:	4602      	mov	r2, r0
 8013080:	b928      	cbnz	r0, 801308e <__i2b+0x1a>
 8013082:	4b05      	ldr	r3, [pc, #20]	@ (8013098 <__i2b+0x24>)
 8013084:	4805      	ldr	r0, [pc, #20]	@ (801309c <__i2b+0x28>)
 8013086:	f240 1145 	movw	r1, #325	@ 0x145
 801308a:	f000 fcbd 	bl	8013a08 <__assert_func>
 801308e:	2301      	movs	r3, #1
 8013090:	6144      	str	r4, [r0, #20]
 8013092:	6103      	str	r3, [r0, #16]
 8013094:	bd10      	pop	{r4, pc}
 8013096:	bf00      	nop
 8013098:	08014bc6 	.word	0x08014bc6
 801309c:	08014bd7 	.word	0x08014bd7

080130a0 <__multiply>:
 80130a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130a4:	4614      	mov	r4, r2
 80130a6:	690a      	ldr	r2, [r1, #16]
 80130a8:	6923      	ldr	r3, [r4, #16]
 80130aa:	429a      	cmp	r2, r3
 80130ac:	bfa8      	it	ge
 80130ae:	4623      	movge	r3, r4
 80130b0:	460f      	mov	r7, r1
 80130b2:	bfa4      	itt	ge
 80130b4:	460c      	movge	r4, r1
 80130b6:	461f      	movge	r7, r3
 80130b8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80130bc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80130c0:	68a3      	ldr	r3, [r4, #8]
 80130c2:	6861      	ldr	r1, [r4, #4]
 80130c4:	eb0a 0609 	add.w	r6, sl, r9
 80130c8:	42b3      	cmp	r3, r6
 80130ca:	b085      	sub	sp, #20
 80130cc:	bfb8      	it	lt
 80130ce:	3101      	addlt	r1, #1
 80130d0:	f7ff fedc 	bl	8012e8c <_Balloc>
 80130d4:	b930      	cbnz	r0, 80130e4 <__multiply+0x44>
 80130d6:	4602      	mov	r2, r0
 80130d8:	4b44      	ldr	r3, [pc, #272]	@ (80131ec <__multiply+0x14c>)
 80130da:	4845      	ldr	r0, [pc, #276]	@ (80131f0 <__multiply+0x150>)
 80130dc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80130e0:	f000 fc92 	bl	8013a08 <__assert_func>
 80130e4:	f100 0514 	add.w	r5, r0, #20
 80130e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80130ec:	462b      	mov	r3, r5
 80130ee:	2200      	movs	r2, #0
 80130f0:	4543      	cmp	r3, r8
 80130f2:	d321      	bcc.n	8013138 <__multiply+0x98>
 80130f4:	f107 0114 	add.w	r1, r7, #20
 80130f8:	f104 0214 	add.w	r2, r4, #20
 80130fc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013100:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8013104:	9302      	str	r3, [sp, #8]
 8013106:	1b13      	subs	r3, r2, r4
 8013108:	3b15      	subs	r3, #21
 801310a:	f023 0303 	bic.w	r3, r3, #3
 801310e:	3304      	adds	r3, #4
 8013110:	f104 0715 	add.w	r7, r4, #21
 8013114:	42ba      	cmp	r2, r7
 8013116:	bf38      	it	cc
 8013118:	2304      	movcc	r3, #4
 801311a:	9301      	str	r3, [sp, #4]
 801311c:	9b02      	ldr	r3, [sp, #8]
 801311e:	9103      	str	r1, [sp, #12]
 8013120:	428b      	cmp	r3, r1
 8013122:	d80c      	bhi.n	801313e <__multiply+0x9e>
 8013124:	2e00      	cmp	r6, #0
 8013126:	dd03      	ble.n	8013130 <__multiply+0x90>
 8013128:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801312c:	2b00      	cmp	r3, #0
 801312e:	d05b      	beq.n	80131e8 <__multiply+0x148>
 8013130:	6106      	str	r6, [r0, #16]
 8013132:	b005      	add	sp, #20
 8013134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013138:	f843 2b04 	str.w	r2, [r3], #4
 801313c:	e7d8      	b.n	80130f0 <__multiply+0x50>
 801313e:	f8b1 a000 	ldrh.w	sl, [r1]
 8013142:	f1ba 0f00 	cmp.w	sl, #0
 8013146:	d024      	beq.n	8013192 <__multiply+0xf2>
 8013148:	f104 0e14 	add.w	lr, r4, #20
 801314c:	46a9      	mov	r9, r5
 801314e:	f04f 0c00 	mov.w	ip, #0
 8013152:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013156:	f8d9 3000 	ldr.w	r3, [r9]
 801315a:	fa1f fb87 	uxth.w	fp, r7
 801315e:	b29b      	uxth	r3, r3
 8013160:	fb0a 330b 	mla	r3, sl, fp, r3
 8013164:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013168:	f8d9 7000 	ldr.w	r7, [r9]
 801316c:	4463      	add	r3, ip
 801316e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013172:	fb0a c70b 	mla	r7, sl, fp, ip
 8013176:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801317a:	b29b      	uxth	r3, r3
 801317c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013180:	4572      	cmp	r2, lr
 8013182:	f849 3b04 	str.w	r3, [r9], #4
 8013186:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801318a:	d8e2      	bhi.n	8013152 <__multiply+0xb2>
 801318c:	9b01      	ldr	r3, [sp, #4]
 801318e:	f845 c003 	str.w	ip, [r5, r3]
 8013192:	9b03      	ldr	r3, [sp, #12]
 8013194:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013198:	3104      	adds	r1, #4
 801319a:	f1b9 0f00 	cmp.w	r9, #0
 801319e:	d021      	beq.n	80131e4 <__multiply+0x144>
 80131a0:	682b      	ldr	r3, [r5, #0]
 80131a2:	f104 0c14 	add.w	ip, r4, #20
 80131a6:	46ae      	mov	lr, r5
 80131a8:	f04f 0a00 	mov.w	sl, #0
 80131ac:	f8bc b000 	ldrh.w	fp, [ip]
 80131b0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80131b4:	fb09 770b 	mla	r7, r9, fp, r7
 80131b8:	4457      	add	r7, sl
 80131ba:	b29b      	uxth	r3, r3
 80131bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80131c0:	f84e 3b04 	str.w	r3, [lr], #4
 80131c4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80131c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80131cc:	f8be 3000 	ldrh.w	r3, [lr]
 80131d0:	fb09 330a 	mla	r3, r9, sl, r3
 80131d4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80131d8:	4562      	cmp	r2, ip
 80131da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80131de:	d8e5      	bhi.n	80131ac <__multiply+0x10c>
 80131e0:	9f01      	ldr	r7, [sp, #4]
 80131e2:	51eb      	str	r3, [r5, r7]
 80131e4:	3504      	adds	r5, #4
 80131e6:	e799      	b.n	801311c <__multiply+0x7c>
 80131e8:	3e01      	subs	r6, #1
 80131ea:	e79b      	b.n	8013124 <__multiply+0x84>
 80131ec:	08014bc6 	.word	0x08014bc6
 80131f0:	08014bd7 	.word	0x08014bd7

080131f4 <__pow5mult>:
 80131f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80131f8:	4615      	mov	r5, r2
 80131fa:	f012 0203 	ands.w	r2, r2, #3
 80131fe:	4607      	mov	r7, r0
 8013200:	460e      	mov	r6, r1
 8013202:	d007      	beq.n	8013214 <__pow5mult+0x20>
 8013204:	4c25      	ldr	r4, [pc, #148]	@ (801329c <__pow5mult+0xa8>)
 8013206:	3a01      	subs	r2, #1
 8013208:	2300      	movs	r3, #0
 801320a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801320e:	f7ff fe9f 	bl	8012f50 <__multadd>
 8013212:	4606      	mov	r6, r0
 8013214:	10ad      	asrs	r5, r5, #2
 8013216:	d03d      	beq.n	8013294 <__pow5mult+0xa0>
 8013218:	69fc      	ldr	r4, [r7, #28]
 801321a:	b97c      	cbnz	r4, 801323c <__pow5mult+0x48>
 801321c:	2010      	movs	r0, #16
 801321e:	f7ff fd7f 	bl	8012d20 <malloc>
 8013222:	4602      	mov	r2, r0
 8013224:	61f8      	str	r0, [r7, #28]
 8013226:	b928      	cbnz	r0, 8013234 <__pow5mult+0x40>
 8013228:	4b1d      	ldr	r3, [pc, #116]	@ (80132a0 <__pow5mult+0xac>)
 801322a:	481e      	ldr	r0, [pc, #120]	@ (80132a4 <__pow5mult+0xb0>)
 801322c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013230:	f000 fbea 	bl	8013a08 <__assert_func>
 8013234:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013238:	6004      	str	r4, [r0, #0]
 801323a:	60c4      	str	r4, [r0, #12]
 801323c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013240:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013244:	b94c      	cbnz	r4, 801325a <__pow5mult+0x66>
 8013246:	f240 2171 	movw	r1, #625	@ 0x271
 801324a:	4638      	mov	r0, r7
 801324c:	f7ff ff12 	bl	8013074 <__i2b>
 8013250:	2300      	movs	r3, #0
 8013252:	f8c8 0008 	str.w	r0, [r8, #8]
 8013256:	4604      	mov	r4, r0
 8013258:	6003      	str	r3, [r0, #0]
 801325a:	f04f 0900 	mov.w	r9, #0
 801325e:	07eb      	lsls	r3, r5, #31
 8013260:	d50a      	bpl.n	8013278 <__pow5mult+0x84>
 8013262:	4631      	mov	r1, r6
 8013264:	4622      	mov	r2, r4
 8013266:	4638      	mov	r0, r7
 8013268:	f7ff ff1a 	bl	80130a0 <__multiply>
 801326c:	4631      	mov	r1, r6
 801326e:	4680      	mov	r8, r0
 8013270:	4638      	mov	r0, r7
 8013272:	f7ff fe4b 	bl	8012f0c <_Bfree>
 8013276:	4646      	mov	r6, r8
 8013278:	106d      	asrs	r5, r5, #1
 801327a:	d00b      	beq.n	8013294 <__pow5mult+0xa0>
 801327c:	6820      	ldr	r0, [r4, #0]
 801327e:	b938      	cbnz	r0, 8013290 <__pow5mult+0x9c>
 8013280:	4622      	mov	r2, r4
 8013282:	4621      	mov	r1, r4
 8013284:	4638      	mov	r0, r7
 8013286:	f7ff ff0b 	bl	80130a0 <__multiply>
 801328a:	6020      	str	r0, [r4, #0]
 801328c:	f8c0 9000 	str.w	r9, [r0]
 8013290:	4604      	mov	r4, r0
 8013292:	e7e4      	b.n	801325e <__pow5mult+0x6a>
 8013294:	4630      	mov	r0, r6
 8013296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801329a:	bf00      	nop
 801329c:	08014c30 	.word	0x08014c30
 80132a0:	08014b57 	.word	0x08014b57
 80132a4:	08014bd7 	.word	0x08014bd7

080132a8 <__lshift>:
 80132a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80132ac:	460c      	mov	r4, r1
 80132ae:	6849      	ldr	r1, [r1, #4]
 80132b0:	6923      	ldr	r3, [r4, #16]
 80132b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80132b6:	68a3      	ldr	r3, [r4, #8]
 80132b8:	4607      	mov	r7, r0
 80132ba:	4691      	mov	r9, r2
 80132bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80132c0:	f108 0601 	add.w	r6, r8, #1
 80132c4:	42b3      	cmp	r3, r6
 80132c6:	db0b      	blt.n	80132e0 <__lshift+0x38>
 80132c8:	4638      	mov	r0, r7
 80132ca:	f7ff fddf 	bl	8012e8c <_Balloc>
 80132ce:	4605      	mov	r5, r0
 80132d0:	b948      	cbnz	r0, 80132e6 <__lshift+0x3e>
 80132d2:	4602      	mov	r2, r0
 80132d4:	4b28      	ldr	r3, [pc, #160]	@ (8013378 <__lshift+0xd0>)
 80132d6:	4829      	ldr	r0, [pc, #164]	@ (801337c <__lshift+0xd4>)
 80132d8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80132dc:	f000 fb94 	bl	8013a08 <__assert_func>
 80132e0:	3101      	adds	r1, #1
 80132e2:	005b      	lsls	r3, r3, #1
 80132e4:	e7ee      	b.n	80132c4 <__lshift+0x1c>
 80132e6:	2300      	movs	r3, #0
 80132e8:	f100 0114 	add.w	r1, r0, #20
 80132ec:	f100 0210 	add.w	r2, r0, #16
 80132f0:	4618      	mov	r0, r3
 80132f2:	4553      	cmp	r3, sl
 80132f4:	db33      	blt.n	801335e <__lshift+0xb6>
 80132f6:	6920      	ldr	r0, [r4, #16]
 80132f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80132fc:	f104 0314 	add.w	r3, r4, #20
 8013300:	f019 091f 	ands.w	r9, r9, #31
 8013304:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013308:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801330c:	d02b      	beq.n	8013366 <__lshift+0xbe>
 801330e:	f1c9 0e20 	rsb	lr, r9, #32
 8013312:	468a      	mov	sl, r1
 8013314:	2200      	movs	r2, #0
 8013316:	6818      	ldr	r0, [r3, #0]
 8013318:	fa00 f009 	lsl.w	r0, r0, r9
 801331c:	4310      	orrs	r0, r2
 801331e:	f84a 0b04 	str.w	r0, [sl], #4
 8013322:	f853 2b04 	ldr.w	r2, [r3], #4
 8013326:	459c      	cmp	ip, r3
 8013328:	fa22 f20e 	lsr.w	r2, r2, lr
 801332c:	d8f3      	bhi.n	8013316 <__lshift+0x6e>
 801332e:	ebac 0304 	sub.w	r3, ip, r4
 8013332:	3b15      	subs	r3, #21
 8013334:	f023 0303 	bic.w	r3, r3, #3
 8013338:	3304      	adds	r3, #4
 801333a:	f104 0015 	add.w	r0, r4, #21
 801333e:	4584      	cmp	ip, r0
 8013340:	bf38      	it	cc
 8013342:	2304      	movcc	r3, #4
 8013344:	50ca      	str	r2, [r1, r3]
 8013346:	b10a      	cbz	r2, 801334c <__lshift+0xa4>
 8013348:	f108 0602 	add.w	r6, r8, #2
 801334c:	3e01      	subs	r6, #1
 801334e:	4638      	mov	r0, r7
 8013350:	612e      	str	r6, [r5, #16]
 8013352:	4621      	mov	r1, r4
 8013354:	f7ff fdda 	bl	8012f0c <_Bfree>
 8013358:	4628      	mov	r0, r5
 801335a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801335e:	f842 0f04 	str.w	r0, [r2, #4]!
 8013362:	3301      	adds	r3, #1
 8013364:	e7c5      	b.n	80132f2 <__lshift+0x4a>
 8013366:	3904      	subs	r1, #4
 8013368:	f853 2b04 	ldr.w	r2, [r3], #4
 801336c:	f841 2f04 	str.w	r2, [r1, #4]!
 8013370:	459c      	cmp	ip, r3
 8013372:	d8f9      	bhi.n	8013368 <__lshift+0xc0>
 8013374:	e7ea      	b.n	801334c <__lshift+0xa4>
 8013376:	bf00      	nop
 8013378:	08014bc6 	.word	0x08014bc6
 801337c:	08014bd7 	.word	0x08014bd7

08013380 <__mcmp>:
 8013380:	690a      	ldr	r2, [r1, #16]
 8013382:	4603      	mov	r3, r0
 8013384:	6900      	ldr	r0, [r0, #16]
 8013386:	1a80      	subs	r0, r0, r2
 8013388:	b530      	push	{r4, r5, lr}
 801338a:	d10e      	bne.n	80133aa <__mcmp+0x2a>
 801338c:	3314      	adds	r3, #20
 801338e:	3114      	adds	r1, #20
 8013390:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013394:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013398:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801339c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80133a0:	4295      	cmp	r5, r2
 80133a2:	d003      	beq.n	80133ac <__mcmp+0x2c>
 80133a4:	d205      	bcs.n	80133b2 <__mcmp+0x32>
 80133a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80133aa:	bd30      	pop	{r4, r5, pc}
 80133ac:	42a3      	cmp	r3, r4
 80133ae:	d3f3      	bcc.n	8013398 <__mcmp+0x18>
 80133b0:	e7fb      	b.n	80133aa <__mcmp+0x2a>
 80133b2:	2001      	movs	r0, #1
 80133b4:	e7f9      	b.n	80133aa <__mcmp+0x2a>
	...

080133b8 <__mdiff>:
 80133b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133bc:	4689      	mov	r9, r1
 80133be:	4606      	mov	r6, r0
 80133c0:	4611      	mov	r1, r2
 80133c2:	4648      	mov	r0, r9
 80133c4:	4614      	mov	r4, r2
 80133c6:	f7ff ffdb 	bl	8013380 <__mcmp>
 80133ca:	1e05      	subs	r5, r0, #0
 80133cc:	d112      	bne.n	80133f4 <__mdiff+0x3c>
 80133ce:	4629      	mov	r1, r5
 80133d0:	4630      	mov	r0, r6
 80133d2:	f7ff fd5b 	bl	8012e8c <_Balloc>
 80133d6:	4602      	mov	r2, r0
 80133d8:	b928      	cbnz	r0, 80133e6 <__mdiff+0x2e>
 80133da:	4b3f      	ldr	r3, [pc, #252]	@ (80134d8 <__mdiff+0x120>)
 80133dc:	f240 2137 	movw	r1, #567	@ 0x237
 80133e0:	483e      	ldr	r0, [pc, #248]	@ (80134dc <__mdiff+0x124>)
 80133e2:	f000 fb11 	bl	8013a08 <__assert_func>
 80133e6:	2301      	movs	r3, #1
 80133e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80133ec:	4610      	mov	r0, r2
 80133ee:	b003      	add	sp, #12
 80133f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133f4:	bfbc      	itt	lt
 80133f6:	464b      	movlt	r3, r9
 80133f8:	46a1      	movlt	r9, r4
 80133fa:	4630      	mov	r0, r6
 80133fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013400:	bfba      	itte	lt
 8013402:	461c      	movlt	r4, r3
 8013404:	2501      	movlt	r5, #1
 8013406:	2500      	movge	r5, #0
 8013408:	f7ff fd40 	bl	8012e8c <_Balloc>
 801340c:	4602      	mov	r2, r0
 801340e:	b918      	cbnz	r0, 8013418 <__mdiff+0x60>
 8013410:	4b31      	ldr	r3, [pc, #196]	@ (80134d8 <__mdiff+0x120>)
 8013412:	f240 2145 	movw	r1, #581	@ 0x245
 8013416:	e7e3      	b.n	80133e0 <__mdiff+0x28>
 8013418:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801341c:	6926      	ldr	r6, [r4, #16]
 801341e:	60c5      	str	r5, [r0, #12]
 8013420:	f109 0310 	add.w	r3, r9, #16
 8013424:	f109 0514 	add.w	r5, r9, #20
 8013428:	f104 0e14 	add.w	lr, r4, #20
 801342c:	f100 0b14 	add.w	fp, r0, #20
 8013430:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013434:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013438:	9301      	str	r3, [sp, #4]
 801343a:	46d9      	mov	r9, fp
 801343c:	f04f 0c00 	mov.w	ip, #0
 8013440:	9b01      	ldr	r3, [sp, #4]
 8013442:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013446:	f853 af04 	ldr.w	sl, [r3, #4]!
 801344a:	9301      	str	r3, [sp, #4]
 801344c:	fa1f f38a 	uxth.w	r3, sl
 8013450:	4619      	mov	r1, r3
 8013452:	b283      	uxth	r3, r0
 8013454:	1acb      	subs	r3, r1, r3
 8013456:	0c00      	lsrs	r0, r0, #16
 8013458:	4463      	add	r3, ip
 801345a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801345e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8013462:	b29b      	uxth	r3, r3
 8013464:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013468:	4576      	cmp	r6, lr
 801346a:	f849 3b04 	str.w	r3, [r9], #4
 801346e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013472:	d8e5      	bhi.n	8013440 <__mdiff+0x88>
 8013474:	1b33      	subs	r3, r6, r4
 8013476:	3b15      	subs	r3, #21
 8013478:	f023 0303 	bic.w	r3, r3, #3
 801347c:	3415      	adds	r4, #21
 801347e:	3304      	adds	r3, #4
 8013480:	42a6      	cmp	r6, r4
 8013482:	bf38      	it	cc
 8013484:	2304      	movcc	r3, #4
 8013486:	441d      	add	r5, r3
 8013488:	445b      	add	r3, fp
 801348a:	461e      	mov	r6, r3
 801348c:	462c      	mov	r4, r5
 801348e:	4544      	cmp	r4, r8
 8013490:	d30e      	bcc.n	80134b0 <__mdiff+0xf8>
 8013492:	f108 0103 	add.w	r1, r8, #3
 8013496:	1b49      	subs	r1, r1, r5
 8013498:	f021 0103 	bic.w	r1, r1, #3
 801349c:	3d03      	subs	r5, #3
 801349e:	45a8      	cmp	r8, r5
 80134a0:	bf38      	it	cc
 80134a2:	2100      	movcc	r1, #0
 80134a4:	440b      	add	r3, r1
 80134a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80134aa:	b191      	cbz	r1, 80134d2 <__mdiff+0x11a>
 80134ac:	6117      	str	r7, [r2, #16]
 80134ae:	e79d      	b.n	80133ec <__mdiff+0x34>
 80134b0:	f854 1b04 	ldr.w	r1, [r4], #4
 80134b4:	46e6      	mov	lr, ip
 80134b6:	0c08      	lsrs	r0, r1, #16
 80134b8:	fa1c fc81 	uxtah	ip, ip, r1
 80134bc:	4471      	add	r1, lr
 80134be:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80134c2:	b289      	uxth	r1, r1
 80134c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80134c8:	f846 1b04 	str.w	r1, [r6], #4
 80134cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80134d0:	e7dd      	b.n	801348e <__mdiff+0xd6>
 80134d2:	3f01      	subs	r7, #1
 80134d4:	e7e7      	b.n	80134a6 <__mdiff+0xee>
 80134d6:	bf00      	nop
 80134d8:	08014bc6 	.word	0x08014bc6
 80134dc:	08014bd7 	.word	0x08014bd7

080134e0 <__d2b>:
 80134e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80134e4:	460f      	mov	r7, r1
 80134e6:	2101      	movs	r1, #1
 80134e8:	ec59 8b10 	vmov	r8, r9, d0
 80134ec:	4616      	mov	r6, r2
 80134ee:	f7ff fccd 	bl	8012e8c <_Balloc>
 80134f2:	4604      	mov	r4, r0
 80134f4:	b930      	cbnz	r0, 8013504 <__d2b+0x24>
 80134f6:	4602      	mov	r2, r0
 80134f8:	4b23      	ldr	r3, [pc, #140]	@ (8013588 <__d2b+0xa8>)
 80134fa:	4824      	ldr	r0, [pc, #144]	@ (801358c <__d2b+0xac>)
 80134fc:	f240 310f 	movw	r1, #783	@ 0x30f
 8013500:	f000 fa82 	bl	8013a08 <__assert_func>
 8013504:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013508:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801350c:	b10d      	cbz	r5, 8013512 <__d2b+0x32>
 801350e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013512:	9301      	str	r3, [sp, #4]
 8013514:	f1b8 0300 	subs.w	r3, r8, #0
 8013518:	d023      	beq.n	8013562 <__d2b+0x82>
 801351a:	4668      	mov	r0, sp
 801351c:	9300      	str	r3, [sp, #0]
 801351e:	f7ff fd7c 	bl	801301a <__lo0bits>
 8013522:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013526:	b1d0      	cbz	r0, 801355e <__d2b+0x7e>
 8013528:	f1c0 0320 	rsb	r3, r0, #32
 801352c:	fa02 f303 	lsl.w	r3, r2, r3
 8013530:	430b      	orrs	r3, r1
 8013532:	40c2      	lsrs	r2, r0
 8013534:	6163      	str	r3, [r4, #20]
 8013536:	9201      	str	r2, [sp, #4]
 8013538:	9b01      	ldr	r3, [sp, #4]
 801353a:	61a3      	str	r3, [r4, #24]
 801353c:	2b00      	cmp	r3, #0
 801353e:	bf0c      	ite	eq
 8013540:	2201      	moveq	r2, #1
 8013542:	2202      	movne	r2, #2
 8013544:	6122      	str	r2, [r4, #16]
 8013546:	b1a5      	cbz	r5, 8013572 <__d2b+0x92>
 8013548:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801354c:	4405      	add	r5, r0
 801354e:	603d      	str	r5, [r7, #0]
 8013550:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8013554:	6030      	str	r0, [r6, #0]
 8013556:	4620      	mov	r0, r4
 8013558:	b003      	add	sp, #12
 801355a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801355e:	6161      	str	r1, [r4, #20]
 8013560:	e7ea      	b.n	8013538 <__d2b+0x58>
 8013562:	a801      	add	r0, sp, #4
 8013564:	f7ff fd59 	bl	801301a <__lo0bits>
 8013568:	9b01      	ldr	r3, [sp, #4]
 801356a:	6163      	str	r3, [r4, #20]
 801356c:	3020      	adds	r0, #32
 801356e:	2201      	movs	r2, #1
 8013570:	e7e8      	b.n	8013544 <__d2b+0x64>
 8013572:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013576:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801357a:	6038      	str	r0, [r7, #0]
 801357c:	6918      	ldr	r0, [r3, #16]
 801357e:	f7ff fd2d 	bl	8012fdc <__hi0bits>
 8013582:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013586:	e7e5      	b.n	8013554 <__d2b+0x74>
 8013588:	08014bc6 	.word	0x08014bc6
 801358c:	08014bd7 	.word	0x08014bd7

08013590 <__ssputs_r>:
 8013590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013594:	688e      	ldr	r6, [r1, #8]
 8013596:	461f      	mov	r7, r3
 8013598:	42be      	cmp	r6, r7
 801359a:	680b      	ldr	r3, [r1, #0]
 801359c:	4682      	mov	sl, r0
 801359e:	460c      	mov	r4, r1
 80135a0:	4690      	mov	r8, r2
 80135a2:	d82d      	bhi.n	8013600 <__ssputs_r+0x70>
 80135a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80135a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80135ac:	d026      	beq.n	80135fc <__ssputs_r+0x6c>
 80135ae:	6965      	ldr	r5, [r4, #20]
 80135b0:	6909      	ldr	r1, [r1, #16]
 80135b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80135b6:	eba3 0901 	sub.w	r9, r3, r1
 80135ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80135be:	1c7b      	adds	r3, r7, #1
 80135c0:	444b      	add	r3, r9
 80135c2:	106d      	asrs	r5, r5, #1
 80135c4:	429d      	cmp	r5, r3
 80135c6:	bf38      	it	cc
 80135c8:	461d      	movcc	r5, r3
 80135ca:	0553      	lsls	r3, r2, #21
 80135cc:	d527      	bpl.n	801361e <__ssputs_r+0x8e>
 80135ce:	4629      	mov	r1, r5
 80135d0:	f7ff fbd0 	bl	8012d74 <_malloc_r>
 80135d4:	4606      	mov	r6, r0
 80135d6:	b360      	cbz	r0, 8013632 <__ssputs_r+0xa2>
 80135d8:	6921      	ldr	r1, [r4, #16]
 80135da:	464a      	mov	r2, r9
 80135dc:	f000 fa06 	bl	80139ec <memcpy>
 80135e0:	89a3      	ldrh	r3, [r4, #12]
 80135e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80135e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80135ea:	81a3      	strh	r3, [r4, #12]
 80135ec:	6126      	str	r6, [r4, #16]
 80135ee:	6165      	str	r5, [r4, #20]
 80135f0:	444e      	add	r6, r9
 80135f2:	eba5 0509 	sub.w	r5, r5, r9
 80135f6:	6026      	str	r6, [r4, #0]
 80135f8:	60a5      	str	r5, [r4, #8]
 80135fa:	463e      	mov	r6, r7
 80135fc:	42be      	cmp	r6, r7
 80135fe:	d900      	bls.n	8013602 <__ssputs_r+0x72>
 8013600:	463e      	mov	r6, r7
 8013602:	6820      	ldr	r0, [r4, #0]
 8013604:	4632      	mov	r2, r6
 8013606:	4641      	mov	r1, r8
 8013608:	f000 f9c6 	bl	8013998 <memmove>
 801360c:	68a3      	ldr	r3, [r4, #8]
 801360e:	1b9b      	subs	r3, r3, r6
 8013610:	60a3      	str	r3, [r4, #8]
 8013612:	6823      	ldr	r3, [r4, #0]
 8013614:	4433      	add	r3, r6
 8013616:	6023      	str	r3, [r4, #0]
 8013618:	2000      	movs	r0, #0
 801361a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801361e:	462a      	mov	r2, r5
 8013620:	f000 fa36 	bl	8013a90 <_realloc_r>
 8013624:	4606      	mov	r6, r0
 8013626:	2800      	cmp	r0, #0
 8013628:	d1e0      	bne.n	80135ec <__ssputs_r+0x5c>
 801362a:	6921      	ldr	r1, [r4, #16]
 801362c:	4650      	mov	r0, sl
 801362e:	f7ff fb2d 	bl	8012c8c <_free_r>
 8013632:	230c      	movs	r3, #12
 8013634:	f8ca 3000 	str.w	r3, [sl]
 8013638:	89a3      	ldrh	r3, [r4, #12]
 801363a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801363e:	81a3      	strh	r3, [r4, #12]
 8013640:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013644:	e7e9      	b.n	801361a <__ssputs_r+0x8a>
	...

08013648 <_svfiprintf_r>:
 8013648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801364c:	4698      	mov	r8, r3
 801364e:	898b      	ldrh	r3, [r1, #12]
 8013650:	061b      	lsls	r3, r3, #24
 8013652:	b09d      	sub	sp, #116	@ 0x74
 8013654:	4607      	mov	r7, r0
 8013656:	460d      	mov	r5, r1
 8013658:	4614      	mov	r4, r2
 801365a:	d510      	bpl.n	801367e <_svfiprintf_r+0x36>
 801365c:	690b      	ldr	r3, [r1, #16]
 801365e:	b973      	cbnz	r3, 801367e <_svfiprintf_r+0x36>
 8013660:	2140      	movs	r1, #64	@ 0x40
 8013662:	f7ff fb87 	bl	8012d74 <_malloc_r>
 8013666:	6028      	str	r0, [r5, #0]
 8013668:	6128      	str	r0, [r5, #16]
 801366a:	b930      	cbnz	r0, 801367a <_svfiprintf_r+0x32>
 801366c:	230c      	movs	r3, #12
 801366e:	603b      	str	r3, [r7, #0]
 8013670:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013674:	b01d      	add	sp, #116	@ 0x74
 8013676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801367a:	2340      	movs	r3, #64	@ 0x40
 801367c:	616b      	str	r3, [r5, #20]
 801367e:	2300      	movs	r3, #0
 8013680:	9309      	str	r3, [sp, #36]	@ 0x24
 8013682:	2320      	movs	r3, #32
 8013684:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013688:	f8cd 800c 	str.w	r8, [sp, #12]
 801368c:	2330      	movs	r3, #48	@ 0x30
 801368e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801382c <_svfiprintf_r+0x1e4>
 8013692:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013696:	f04f 0901 	mov.w	r9, #1
 801369a:	4623      	mov	r3, r4
 801369c:	469a      	mov	sl, r3
 801369e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80136a2:	b10a      	cbz	r2, 80136a8 <_svfiprintf_r+0x60>
 80136a4:	2a25      	cmp	r2, #37	@ 0x25
 80136a6:	d1f9      	bne.n	801369c <_svfiprintf_r+0x54>
 80136a8:	ebba 0b04 	subs.w	fp, sl, r4
 80136ac:	d00b      	beq.n	80136c6 <_svfiprintf_r+0x7e>
 80136ae:	465b      	mov	r3, fp
 80136b0:	4622      	mov	r2, r4
 80136b2:	4629      	mov	r1, r5
 80136b4:	4638      	mov	r0, r7
 80136b6:	f7ff ff6b 	bl	8013590 <__ssputs_r>
 80136ba:	3001      	adds	r0, #1
 80136bc:	f000 80a7 	beq.w	801380e <_svfiprintf_r+0x1c6>
 80136c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80136c2:	445a      	add	r2, fp
 80136c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80136c6:	f89a 3000 	ldrb.w	r3, [sl]
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	f000 809f 	beq.w	801380e <_svfiprintf_r+0x1c6>
 80136d0:	2300      	movs	r3, #0
 80136d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80136d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80136da:	f10a 0a01 	add.w	sl, sl, #1
 80136de:	9304      	str	r3, [sp, #16]
 80136e0:	9307      	str	r3, [sp, #28]
 80136e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80136e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80136e8:	4654      	mov	r4, sl
 80136ea:	2205      	movs	r2, #5
 80136ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80136f0:	484e      	ldr	r0, [pc, #312]	@ (801382c <_svfiprintf_r+0x1e4>)
 80136f2:	f7ec fe0d 	bl	8000310 <memchr>
 80136f6:	9a04      	ldr	r2, [sp, #16]
 80136f8:	b9d8      	cbnz	r0, 8013732 <_svfiprintf_r+0xea>
 80136fa:	06d0      	lsls	r0, r2, #27
 80136fc:	bf44      	itt	mi
 80136fe:	2320      	movmi	r3, #32
 8013700:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013704:	0711      	lsls	r1, r2, #28
 8013706:	bf44      	itt	mi
 8013708:	232b      	movmi	r3, #43	@ 0x2b
 801370a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801370e:	f89a 3000 	ldrb.w	r3, [sl]
 8013712:	2b2a      	cmp	r3, #42	@ 0x2a
 8013714:	d015      	beq.n	8013742 <_svfiprintf_r+0xfa>
 8013716:	9a07      	ldr	r2, [sp, #28]
 8013718:	4654      	mov	r4, sl
 801371a:	2000      	movs	r0, #0
 801371c:	f04f 0c0a 	mov.w	ip, #10
 8013720:	4621      	mov	r1, r4
 8013722:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013726:	3b30      	subs	r3, #48	@ 0x30
 8013728:	2b09      	cmp	r3, #9
 801372a:	d94b      	bls.n	80137c4 <_svfiprintf_r+0x17c>
 801372c:	b1b0      	cbz	r0, 801375c <_svfiprintf_r+0x114>
 801372e:	9207      	str	r2, [sp, #28]
 8013730:	e014      	b.n	801375c <_svfiprintf_r+0x114>
 8013732:	eba0 0308 	sub.w	r3, r0, r8
 8013736:	fa09 f303 	lsl.w	r3, r9, r3
 801373a:	4313      	orrs	r3, r2
 801373c:	9304      	str	r3, [sp, #16]
 801373e:	46a2      	mov	sl, r4
 8013740:	e7d2      	b.n	80136e8 <_svfiprintf_r+0xa0>
 8013742:	9b03      	ldr	r3, [sp, #12]
 8013744:	1d19      	adds	r1, r3, #4
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	9103      	str	r1, [sp, #12]
 801374a:	2b00      	cmp	r3, #0
 801374c:	bfbb      	ittet	lt
 801374e:	425b      	neglt	r3, r3
 8013750:	f042 0202 	orrlt.w	r2, r2, #2
 8013754:	9307      	strge	r3, [sp, #28]
 8013756:	9307      	strlt	r3, [sp, #28]
 8013758:	bfb8      	it	lt
 801375a:	9204      	strlt	r2, [sp, #16]
 801375c:	7823      	ldrb	r3, [r4, #0]
 801375e:	2b2e      	cmp	r3, #46	@ 0x2e
 8013760:	d10a      	bne.n	8013778 <_svfiprintf_r+0x130>
 8013762:	7863      	ldrb	r3, [r4, #1]
 8013764:	2b2a      	cmp	r3, #42	@ 0x2a
 8013766:	d132      	bne.n	80137ce <_svfiprintf_r+0x186>
 8013768:	9b03      	ldr	r3, [sp, #12]
 801376a:	1d1a      	adds	r2, r3, #4
 801376c:	681b      	ldr	r3, [r3, #0]
 801376e:	9203      	str	r2, [sp, #12]
 8013770:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013774:	3402      	adds	r4, #2
 8013776:	9305      	str	r3, [sp, #20]
 8013778:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801383c <_svfiprintf_r+0x1f4>
 801377c:	7821      	ldrb	r1, [r4, #0]
 801377e:	2203      	movs	r2, #3
 8013780:	4650      	mov	r0, sl
 8013782:	f7ec fdc5 	bl	8000310 <memchr>
 8013786:	b138      	cbz	r0, 8013798 <_svfiprintf_r+0x150>
 8013788:	9b04      	ldr	r3, [sp, #16]
 801378a:	eba0 000a 	sub.w	r0, r0, sl
 801378e:	2240      	movs	r2, #64	@ 0x40
 8013790:	4082      	lsls	r2, r0
 8013792:	4313      	orrs	r3, r2
 8013794:	3401      	adds	r4, #1
 8013796:	9304      	str	r3, [sp, #16]
 8013798:	f814 1b01 	ldrb.w	r1, [r4], #1
 801379c:	4824      	ldr	r0, [pc, #144]	@ (8013830 <_svfiprintf_r+0x1e8>)
 801379e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80137a2:	2206      	movs	r2, #6
 80137a4:	f7ec fdb4 	bl	8000310 <memchr>
 80137a8:	2800      	cmp	r0, #0
 80137aa:	d036      	beq.n	801381a <_svfiprintf_r+0x1d2>
 80137ac:	4b21      	ldr	r3, [pc, #132]	@ (8013834 <_svfiprintf_r+0x1ec>)
 80137ae:	bb1b      	cbnz	r3, 80137f8 <_svfiprintf_r+0x1b0>
 80137b0:	9b03      	ldr	r3, [sp, #12]
 80137b2:	3307      	adds	r3, #7
 80137b4:	f023 0307 	bic.w	r3, r3, #7
 80137b8:	3308      	adds	r3, #8
 80137ba:	9303      	str	r3, [sp, #12]
 80137bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80137be:	4433      	add	r3, r6
 80137c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80137c2:	e76a      	b.n	801369a <_svfiprintf_r+0x52>
 80137c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80137c8:	460c      	mov	r4, r1
 80137ca:	2001      	movs	r0, #1
 80137cc:	e7a8      	b.n	8013720 <_svfiprintf_r+0xd8>
 80137ce:	2300      	movs	r3, #0
 80137d0:	3401      	adds	r4, #1
 80137d2:	9305      	str	r3, [sp, #20]
 80137d4:	4619      	mov	r1, r3
 80137d6:	f04f 0c0a 	mov.w	ip, #10
 80137da:	4620      	mov	r0, r4
 80137dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80137e0:	3a30      	subs	r2, #48	@ 0x30
 80137e2:	2a09      	cmp	r2, #9
 80137e4:	d903      	bls.n	80137ee <_svfiprintf_r+0x1a6>
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d0c6      	beq.n	8013778 <_svfiprintf_r+0x130>
 80137ea:	9105      	str	r1, [sp, #20]
 80137ec:	e7c4      	b.n	8013778 <_svfiprintf_r+0x130>
 80137ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80137f2:	4604      	mov	r4, r0
 80137f4:	2301      	movs	r3, #1
 80137f6:	e7f0      	b.n	80137da <_svfiprintf_r+0x192>
 80137f8:	ab03      	add	r3, sp, #12
 80137fa:	9300      	str	r3, [sp, #0]
 80137fc:	462a      	mov	r2, r5
 80137fe:	4b0e      	ldr	r3, [pc, #56]	@ (8013838 <_svfiprintf_r+0x1f0>)
 8013800:	a904      	add	r1, sp, #16
 8013802:	4638      	mov	r0, r7
 8013804:	f7fd ff00 	bl	8011608 <_printf_float>
 8013808:	1c42      	adds	r2, r0, #1
 801380a:	4606      	mov	r6, r0
 801380c:	d1d6      	bne.n	80137bc <_svfiprintf_r+0x174>
 801380e:	89ab      	ldrh	r3, [r5, #12]
 8013810:	065b      	lsls	r3, r3, #25
 8013812:	f53f af2d 	bmi.w	8013670 <_svfiprintf_r+0x28>
 8013816:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013818:	e72c      	b.n	8013674 <_svfiprintf_r+0x2c>
 801381a:	ab03      	add	r3, sp, #12
 801381c:	9300      	str	r3, [sp, #0]
 801381e:	462a      	mov	r2, r5
 8013820:	4b05      	ldr	r3, [pc, #20]	@ (8013838 <_svfiprintf_r+0x1f0>)
 8013822:	a904      	add	r1, sp, #16
 8013824:	4638      	mov	r0, r7
 8013826:	f7fe f977 	bl	8011b18 <_printf_i>
 801382a:	e7ed      	b.n	8013808 <_svfiprintf_r+0x1c0>
 801382c:	08014d30 	.word	0x08014d30
 8013830:	08014d3a 	.word	0x08014d3a
 8013834:	08011609 	.word	0x08011609
 8013838:	08013591 	.word	0x08013591
 801383c:	08014d36 	.word	0x08014d36

08013840 <__sflush_r>:
 8013840:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013848:	0716      	lsls	r6, r2, #28
 801384a:	4605      	mov	r5, r0
 801384c:	460c      	mov	r4, r1
 801384e:	d454      	bmi.n	80138fa <__sflush_r+0xba>
 8013850:	684b      	ldr	r3, [r1, #4]
 8013852:	2b00      	cmp	r3, #0
 8013854:	dc02      	bgt.n	801385c <__sflush_r+0x1c>
 8013856:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013858:	2b00      	cmp	r3, #0
 801385a:	dd48      	ble.n	80138ee <__sflush_r+0xae>
 801385c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801385e:	2e00      	cmp	r6, #0
 8013860:	d045      	beq.n	80138ee <__sflush_r+0xae>
 8013862:	2300      	movs	r3, #0
 8013864:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013868:	682f      	ldr	r7, [r5, #0]
 801386a:	6a21      	ldr	r1, [r4, #32]
 801386c:	602b      	str	r3, [r5, #0]
 801386e:	d030      	beq.n	80138d2 <__sflush_r+0x92>
 8013870:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013872:	89a3      	ldrh	r3, [r4, #12]
 8013874:	0759      	lsls	r1, r3, #29
 8013876:	d505      	bpl.n	8013884 <__sflush_r+0x44>
 8013878:	6863      	ldr	r3, [r4, #4]
 801387a:	1ad2      	subs	r2, r2, r3
 801387c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801387e:	b10b      	cbz	r3, 8013884 <__sflush_r+0x44>
 8013880:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013882:	1ad2      	subs	r2, r2, r3
 8013884:	2300      	movs	r3, #0
 8013886:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013888:	6a21      	ldr	r1, [r4, #32]
 801388a:	4628      	mov	r0, r5
 801388c:	47b0      	blx	r6
 801388e:	1c43      	adds	r3, r0, #1
 8013890:	89a3      	ldrh	r3, [r4, #12]
 8013892:	d106      	bne.n	80138a2 <__sflush_r+0x62>
 8013894:	6829      	ldr	r1, [r5, #0]
 8013896:	291d      	cmp	r1, #29
 8013898:	d82b      	bhi.n	80138f2 <__sflush_r+0xb2>
 801389a:	4a2a      	ldr	r2, [pc, #168]	@ (8013944 <__sflush_r+0x104>)
 801389c:	410a      	asrs	r2, r1
 801389e:	07d6      	lsls	r6, r2, #31
 80138a0:	d427      	bmi.n	80138f2 <__sflush_r+0xb2>
 80138a2:	2200      	movs	r2, #0
 80138a4:	6062      	str	r2, [r4, #4]
 80138a6:	04d9      	lsls	r1, r3, #19
 80138a8:	6922      	ldr	r2, [r4, #16]
 80138aa:	6022      	str	r2, [r4, #0]
 80138ac:	d504      	bpl.n	80138b8 <__sflush_r+0x78>
 80138ae:	1c42      	adds	r2, r0, #1
 80138b0:	d101      	bne.n	80138b6 <__sflush_r+0x76>
 80138b2:	682b      	ldr	r3, [r5, #0]
 80138b4:	b903      	cbnz	r3, 80138b8 <__sflush_r+0x78>
 80138b6:	6560      	str	r0, [r4, #84]	@ 0x54
 80138b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80138ba:	602f      	str	r7, [r5, #0]
 80138bc:	b1b9      	cbz	r1, 80138ee <__sflush_r+0xae>
 80138be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80138c2:	4299      	cmp	r1, r3
 80138c4:	d002      	beq.n	80138cc <__sflush_r+0x8c>
 80138c6:	4628      	mov	r0, r5
 80138c8:	f7ff f9e0 	bl	8012c8c <_free_r>
 80138cc:	2300      	movs	r3, #0
 80138ce:	6363      	str	r3, [r4, #52]	@ 0x34
 80138d0:	e00d      	b.n	80138ee <__sflush_r+0xae>
 80138d2:	2301      	movs	r3, #1
 80138d4:	4628      	mov	r0, r5
 80138d6:	47b0      	blx	r6
 80138d8:	4602      	mov	r2, r0
 80138da:	1c50      	adds	r0, r2, #1
 80138dc:	d1c9      	bne.n	8013872 <__sflush_r+0x32>
 80138de:	682b      	ldr	r3, [r5, #0]
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d0c6      	beq.n	8013872 <__sflush_r+0x32>
 80138e4:	2b1d      	cmp	r3, #29
 80138e6:	d001      	beq.n	80138ec <__sflush_r+0xac>
 80138e8:	2b16      	cmp	r3, #22
 80138ea:	d11e      	bne.n	801392a <__sflush_r+0xea>
 80138ec:	602f      	str	r7, [r5, #0]
 80138ee:	2000      	movs	r0, #0
 80138f0:	e022      	b.n	8013938 <__sflush_r+0xf8>
 80138f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80138f6:	b21b      	sxth	r3, r3
 80138f8:	e01b      	b.n	8013932 <__sflush_r+0xf2>
 80138fa:	690f      	ldr	r7, [r1, #16]
 80138fc:	2f00      	cmp	r7, #0
 80138fe:	d0f6      	beq.n	80138ee <__sflush_r+0xae>
 8013900:	0793      	lsls	r3, r2, #30
 8013902:	680e      	ldr	r6, [r1, #0]
 8013904:	bf08      	it	eq
 8013906:	694b      	ldreq	r3, [r1, #20]
 8013908:	600f      	str	r7, [r1, #0]
 801390a:	bf18      	it	ne
 801390c:	2300      	movne	r3, #0
 801390e:	eba6 0807 	sub.w	r8, r6, r7
 8013912:	608b      	str	r3, [r1, #8]
 8013914:	f1b8 0f00 	cmp.w	r8, #0
 8013918:	dde9      	ble.n	80138ee <__sflush_r+0xae>
 801391a:	6a21      	ldr	r1, [r4, #32]
 801391c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801391e:	4643      	mov	r3, r8
 8013920:	463a      	mov	r2, r7
 8013922:	4628      	mov	r0, r5
 8013924:	47b0      	blx	r6
 8013926:	2800      	cmp	r0, #0
 8013928:	dc08      	bgt.n	801393c <__sflush_r+0xfc>
 801392a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801392e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013932:	81a3      	strh	r3, [r4, #12]
 8013934:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801393c:	4407      	add	r7, r0
 801393e:	eba8 0800 	sub.w	r8, r8, r0
 8013942:	e7e7      	b.n	8013914 <__sflush_r+0xd4>
 8013944:	dfbffffe 	.word	0xdfbffffe

08013948 <_fflush_r>:
 8013948:	b538      	push	{r3, r4, r5, lr}
 801394a:	690b      	ldr	r3, [r1, #16]
 801394c:	4605      	mov	r5, r0
 801394e:	460c      	mov	r4, r1
 8013950:	b913      	cbnz	r3, 8013958 <_fflush_r+0x10>
 8013952:	2500      	movs	r5, #0
 8013954:	4628      	mov	r0, r5
 8013956:	bd38      	pop	{r3, r4, r5, pc}
 8013958:	b118      	cbz	r0, 8013962 <_fflush_r+0x1a>
 801395a:	6a03      	ldr	r3, [r0, #32]
 801395c:	b90b      	cbnz	r3, 8013962 <_fflush_r+0x1a>
 801395e:	f7fe fa87 	bl	8011e70 <__sinit>
 8013962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013966:	2b00      	cmp	r3, #0
 8013968:	d0f3      	beq.n	8013952 <_fflush_r+0xa>
 801396a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801396c:	07d0      	lsls	r0, r2, #31
 801396e:	d404      	bmi.n	801397a <_fflush_r+0x32>
 8013970:	0599      	lsls	r1, r3, #22
 8013972:	d402      	bmi.n	801397a <_fflush_r+0x32>
 8013974:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013976:	f7fe fba0 	bl	80120ba <__retarget_lock_acquire_recursive>
 801397a:	4628      	mov	r0, r5
 801397c:	4621      	mov	r1, r4
 801397e:	f7ff ff5f 	bl	8013840 <__sflush_r>
 8013982:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013984:	07da      	lsls	r2, r3, #31
 8013986:	4605      	mov	r5, r0
 8013988:	d4e4      	bmi.n	8013954 <_fflush_r+0xc>
 801398a:	89a3      	ldrh	r3, [r4, #12]
 801398c:	059b      	lsls	r3, r3, #22
 801398e:	d4e1      	bmi.n	8013954 <_fflush_r+0xc>
 8013990:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013992:	f7fe fb93 	bl	80120bc <__retarget_lock_release_recursive>
 8013996:	e7dd      	b.n	8013954 <_fflush_r+0xc>

08013998 <memmove>:
 8013998:	4288      	cmp	r0, r1
 801399a:	b510      	push	{r4, lr}
 801399c:	eb01 0402 	add.w	r4, r1, r2
 80139a0:	d902      	bls.n	80139a8 <memmove+0x10>
 80139a2:	4284      	cmp	r4, r0
 80139a4:	4623      	mov	r3, r4
 80139a6:	d807      	bhi.n	80139b8 <memmove+0x20>
 80139a8:	1e43      	subs	r3, r0, #1
 80139aa:	42a1      	cmp	r1, r4
 80139ac:	d008      	beq.n	80139c0 <memmove+0x28>
 80139ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80139b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80139b6:	e7f8      	b.n	80139aa <memmove+0x12>
 80139b8:	4402      	add	r2, r0
 80139ba:	4601      	mov	r1, r0
 80139bc:	428a      	cmp	r2, r1
 80139be:	d100      	bne.n	80139c2 <memmove+0x2a>
 80139c0:	bd10      	pop	{r4, pc}
 80139c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80139c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80139ca:	e7f7      	b.n	80139bc <memmove+0x24>

080139cc <_sbrk_r>:
 80139cc:	b538      	push	{r3, r4, r5, lr}
 80139ce:	4d06      	ldr	r5, [pc, #24]	@ (80139e8 <_sbrk_r+0x1c>)
 80139d0:	2300      	movs	r3, #0
 80139d2:	4604      	mov	r4, r0
 80139d4:	4608      	mov	r0, r1
 80139d6:	602b      	str	r3, [r5, #0]
 80139d8:	f7f0 fc34 	bl	8004244 <_sbrk>
 80139dc:	1c43      	adds	r3, r0, #1
 80139de:	d102      	bne.n	80139e6 <_sbrk_r+0x1a>
 80139e0:	682b      	ldr	r3, [r5, #0]
 80139e2:	b103      	cbz	r3, 80139e6 <_sbrk_r+0x1a>
 80139e4:	6023      	str	r3, [r4, #0]
 80139e6:	bd38      	pop	{r3, r4, r5, pc}
 80139e8:	240011f8 	.word	0x240011f8

080139ec <memcpy>:
 80139ec:	440a      	add	r2, r1
 80139ee:	4291      	cmp	r1, r2
 80139f0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80139f4:	d100      	bne.n	80139f8 <memcpy+0xc>
 80139f6:	4770      	bx	lr
 80139f8:	b510      	push	{r4, lr}
 80139fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80139fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013a02:	4291      	cmp	r1, r2
 8013a04:	d1f9      	bne.n	80139fa <memcpy+0xe>
 8013a06:	bd10      	pop	{r4, pc}

08013a08 <__assert_func>:
 8013a08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013a0a:	4614      	mov	r4, r2
 8013a0c:	461a      	mov	r2, r3
 8013a0e:	4b09      	ldr	r3, [pc, #36]	@ (8013a34 <__assert_func+0x2c>)
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	4605      	mov	r5, r0
 8013a14:	68d8      	ldr	r0, [r3, #12]
 8013a16:	b954      	cbnz	r4, 8013a2e <__assert_func+0x26>
 8013a18:	4b07      	ldr	r3, [pc, #28]	@ (8013a38 <__assert_func+0x30>)
 8013a1a:	461c      	mov	r4, r3
 8013a1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013a20:	9100      	str	r1, [sp, #0]
 8013a22:	462b      	mov	r3, r5
 8013a24:	4905      	ldr	r1, [pc, #20]	@ (8013a3c <__assert_func+0x34>)
 8013a26:	f000 f86f 	bl	8013b08 <fiprintf>
 8013a2a:	f000 f87f 	bl	8013b2c <abort>
 8013a2e:	4b04      	ldr	r3, [pc, #16]	@ (8013a40 <__assert_func+0x38>)
 8013a30:	e7f4      	b.n	8013a1c <__assert_func+0x14>
 8013a32:	bf00      	nop
 8013a34:	24000054 	.word	0x24000054
 8013a38:	08014d86 	.word	0x08014d86
 8013a3c:	08014d58 	.word	0x08014d58
 8013a40:	08014d4b 	.word	0x08014d4b

08013a44 <_calloc_r>:
 8013a44:	b570      	push	{r4, r5, r6, lr}
 8013a46:	fba1 5402 	umull	r5, r4, r1, r2
 8013a4a:	b93c      	cbnz	r4, 8013a5c <_calloc_r+0x18>
 8013a4c:	4629      	mov	r1, r5
 8013a4e:	f7ff f991 	bl	8012d74 <_malloc_r>
 8013a52:	4606      	mov	r6, r0
 8013a54:	b928      	cbnz	r0, 8013a62 <_calloc_r+0x1e>
 8013a56:	2600      	movs	r6, #0
 8013a58:	4630      	mov	r0, r6
 8013a5a:	bd70      	pop	{r4, r5, r6, pc}
 8013a5c:	220c      	movs	r2, #12
 8013a5e:	6002      	str	r2, [r0, #0]
 8013a60:	e7f9      	b.n	8013a56 <_calloc_r+0x12>
 8013a62:	462a      	mov	r2, r5
 8013a64:	4621      	mov	r1, r4
 8013a66:	f7fe fa9c 	bl	8011fa2 <memset>
 8013a6a:	e7f5      	b.n	8013a58 <_calloc_r+0x14>

08013a6c <__ascii_mbtowc>:
 8013a6c:	b082      	sub	sp, #8
 8013a6e:	b901      	cbnz	r1, 8013a72 <__ascii_mbtowc+0x6>
 8013a70:	a901      	add	r1, sp, #4
 8013a72:	b142      	cbz	r2, 8013a86 <__ascii_mbtowc+0x1a>
 8013a74:	b14b      	cbz	r3, 8013a8a <__ascii_mbtowc+0x1e>
 8013a76:	7813      	ldrb	r3, [r2, #0]
 8013a78:	600b      	str	r3, [r1, #0]
 8013a7a:	7812      	ldrb	r2, [r2, #0]
 8013a7c:	1e10      	subs	r0, r2, #0
 8013a7e:	bf18      	it	ne
 8013a80:	2001      	movne	r0, #1
 8013a82:	b002      	add	sp, #8
 8013a84:	4770      	bx	lr
 8013a86:	4610      	mov	r0, r2
 8013a88:	e7fb      	b.n	8013a82 <__ascii_mbtowc+0x16>
 8013a8a:	f06f 0001 	mvn.w	r0, #1
 8013a8e:	e7f8      	b.n	8013a82 <__ascii_mbtowc+0x16>

08013a90 <_realloc_r>:
 8013a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a94:	4680      	mov	r8, r0
 8013a96:	4615      	mov	r5, r2
 8013a98:	460c      	mov	r4, r1
 8013a9a:	b921      	cbnz	r1, 8013aa6 <_realloc_r+0x16>
 8013a9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013aa0:	4611      	mov	r1, r2
 8013aa2:	f7ff b967 	b.w	8012d74 <_malloc_r>
 8013aa6:	b92a      	cbnz	r2, 8013ab4 <_realloc_r+0x24>
 8013aa8:	f7ff f8f0 	bl	8012c8c <_free_r>
 8013aac:	2400      	movs	r4, #0
 8013aae:	4620      	mov	r0, r4
 8013ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ab4:	f000 f841 	bl	8013b3a <_malloc_usable_size_r>
 8013ab8:	4285      	cmp	r5, r0
 8013aba:	4606      	mov	r6, r0
 8013abc:	d802      	bhi.n	8013ac4 <_realloc_r+0x34>
 8013abe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8013ac2:	d8f4      	bhi.n	8013aae <_realloc_r+0x1e>
 8013ac4:	4629      	mov	r1, r5
 8013ac6:	4640      	mov	r0, r8
 8013ac8:	f7ff f954 	bl	8012d74 <_malloc_r>
 8013acc:	4607      	mov	r7, r0
 8013ace:	2800      	cmp	r0, #0
 8013ad0:	d0ec      	beq.n	8013aac <_realloc_r+0x1c>
 8013ad2:	42b5      	cmp	r5, r6
 8013ad4:	462a      	mov	r2, r5
 8013ad6:	4621      	mov	r1, r4
 8013ad8:	bf28      	it	cs
 8013ada:	4632      	movcs	r2, r6
 8013adc:	f7ff ff86 	bl	80139ec <memcpy>
 8013ae0:	4621      	mov	r1, r4
 8013ae2:	4640      	mov	r0, r8
 8013ae4:	f7ff f8d2 	bl	8012c8c <_free_r>
 8013ae8:	463c      	mov	r4, r7
 8013aea:	e7e0      	b.n	8013aae <_realloc_r+0x1e>

08013aec <__ascii_wctomb>:
 8013aec:	4603      	mov	r3, r0
 8013aee:	4608      	mov	r0, r1
 8013af0:	b141      	cbz	r1, 8013b04 <__ascii_wctomb+0x18>
 8013af2:	2aff      	cmp	r2, #255	@ 0xff
 8013af4:	d904      	bls.n	8013b00 <__ascii_wctomb+0x14>
 8013af6:	228a      	movs	r2, #138	@ 0x8a
 8013af8:	601a      	str	r2, [r3, #0]
 8013afa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013afe:	4770      	bx	lr
 8013b00:	700a      	strb	r2, [r1, #0]
 8013b02:	2001      	movs	r0, #1
 8013b04:	4770      	bx	lr
	...

08013b08 <fiprintf>:
 8013b08:	b40e      	push	{r1, r2, r3}
 8013b0a:	b503      	push	{r0, r1, lr}
 8013b0c:	4601      	mov	r1, r0
 8013b0e:	ab03      	add	r3, sp, #12
 8013b10:	4805      	ldr	r0, [pc, #20]	@ (8013b28 <fiprintf+0x20>)
 8013b12:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b16:	6800      	ldr	r0, [r0, #0]
 8013b18:	9301      	str	r3, [sp, #4]
 8013b1a:	f000 f83f 	bl	8013b9c <_vfiprintf_r>
 8013b1e:	b002      	add	sp, #8
 8013b20:	f85d eb04 	ldr.w	lr, [sp], #4
 8013b24:	b003      	add	sp, #12
 8013b26:	4770      	bx	lr
 8013b28:	24000054 	.word	0x24000054

08013b2c <abort>:
 8013b2c:	b508      	push	{r3, lr}
 8013b2e:	2006      	movs	r0, #6
 8013b30:	f000 fa08 	bl	8013f44 <raise>
 8013b34:	2001      	movs	r0, #1
 8013b36:	f7f0 fb0d 	bl	8004154 <_exit>

08013b3a <_malloc_usable_size_r>:
 8013b3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013b3e:	1f18      	subs	r0, r3, #4
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	bfbc      	itt	lt
 8013b44:	580b      	ldrlt	r3, [r1, r0]
 8013b46:	18c0      	addlt	r0, r0, r3
 8013b48:	4770      	bx	lr

08013b4a <__sfputc_r>:
 8013b4a:	6893      	ldr	r3, [r2, #8]
 8013b4c:	3b01      	subs	r3, #1
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	b410      	push	{r4}
 8013b52:	6093      	str	r3, [r2, #8]
 8013b54:	da08      	bge.n	8013b68 <__sfputc_r+0x1e>
 8013b56:	6994      	ldr	r4, [r2, #24]
 8013b58:	42a3      	cmp	r3, r4
 8013b5a:	db01      	blt.n	8013b60 <__sfputc_r+0x16>
 8013b5c:	290a      	cmp	r1, #10
 8013b5e:	d103      	bne.n	8013b68 <__sfputc_r+0x1e>
 8013b60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b64:	f000 b932 	b.w	8013dcc <__swbuf_r>
 8013b68:	6813      	ldr	r3, [r2, #0]
 8013b6a:	1c58      	adds	r0, r3, #1
 8013b6c:	6010      	str	r0, [r2, #0]
 8013b6e:	7019      	strb	r1, [r3, #0]
 8013b70:	4608      	mov	r0, r1
 8013b72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b76:	4770      	bx	lr

08013b78 <__sfputs_r>:
 8013b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b7a:	4606      	mov	r6, r0
 8013b7c:	460f      	mov	r7, r1
 8013b7e:	4614      	mov	r4, r2
 8013b80:	18d5      	adds	r5, r2, r3
 8013b82:	42ac      	cmp	r4, r5
 8013b84:	d101      	bne.n	8013b8a <__sfputs_r+0x12>
 8013b86:	2000      	movs	r0, #0
 8013b88:	e007      	b.n	8013b9a <__sfputs_r+0x22>
 8013b8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b8e:	463a      	mov	r2, r7
 8013b90:	4630      	mov	r0, r6
 8013b92:	f7ff ffda 	bl	8013b4a <__sfputc_r>
 8013b96:	1c43      	adds	r3, r0, #1
 8013b98:	d1f3      	bne.n	8013b82 <__sfputs_r+0xa>
 8013b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013b9c <_vfiprintf_r>:
 8013b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ba0:	460d      	mov	r5, r1
 8013ba2:	b09d      	sub	sp, #116	@ 0x74
 8013ba4:	4614      	mov	r4, r2
 8013ba6:	4698      	mov	r8, r3
 8013ba8:	4606      	mov	r6, r0
 8013baa:	b118      	cbz	r0, 8013bb4 <_vfiprintf_r+0x18>
 8013bac:	6a03      	ldr	r3, [r0, #32]
 8013bae:	b90b      	cbnz	r3, 8013bb4 <_vfiprintf_r+0x18>
 8013bb0:	f7fe f95e 	bl	8011e70 <__sinit>
 8013bb4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013bb6:	07d9      	lsls	r1, r3, #31
 8013bb8:	d405      	bmi.n	8013bc6 <_vfiprintf_r+0x2a>
 8013bba:	89ab      	ldrh	r3, [r5, #12]
 8013bbc:	059a      	lsls	r2, r3, #22
 8013bbe:	d402      	bmi.n	8013bc6 <_vfiprintf_r+0x2a>
 8013bc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013bc2:	f7fe fa7a 	bl	80120ba <__retarget_lock_acquire_recursive>
 8013bc6:	89ab      	ldrh	r3, [r5, #12]
 8013bc8:	071b      	lsls	r3, r3, #28
 8013bca:	d501      	bpl.n	8013bd0 <_vfiprintf_r+0x34>
 8013bcc:	692b      	ldr	r3, [r5, #16]
 8013bce:	b99b      	cbnz	r3, 8013bf8 <_vfiprintf_r+0x5c>
 8013bd0:	4629      	mov	r1, r5
 8013bd2:	4630      	mov	r0, r6
 8013bd4:	f000 f938 	bl	8013e48 <__swsetup_r>
 8013bd8:	b170      	cbz	r0, 8013bf8 <_vfiprintf_r+0x5c>
 8013bda:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013bdc:	07dc      	lsls	r4, r3, #31
 8013bde:	d504      	bpl.n	8013bea <_vfiprintf_r+0x4e>
 8013be0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013be4:	b01d      	add	sp, #116	@ 0x74
 8013be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bea:	89ab      	ldrh	r3, [r5, #12]
 8013bec:	0598      	lsls	r0, r3, #22
 8013bee:	d4f7      	bmi.n	8013be0 <_vfiprintf_r+0x44>
 8013bf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013bf2:	f7fe fa63 	bl	80120bc <__retarget_lock_release_recursive>
 8013bf6:	e7f3      	b.n	8013be0 <_vfiprintf_r+0x44>
 8013bf8:	2300      	movs	r3, #0
 8013bfa:	9309      	str	r3, [sp, #36]	@ 0x24
 8013bfc:	2320      	movs	r3, #32
 8013bfe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013c02:	f8cd 800c 	str.w	r8, [sp, #12]
 8013c06:	2330      	movs	r3, #48	@ 0x30
 8013c08:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013db8 <_vfiprintf_r+0x21c>
 8013c0c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013c10:	f04f 0901 	mov.w	r9, #1
 8013c14:	4623      	mov	r3, r4
 8013c16:	469a      	mov	sl, r3
 8013c18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013c1c:	b10a      	cbz	r2, 8013c22 <_vfiprintf_r+0x86>
 8013c1e:	2a25      	cmp	r2, #37	@ 0x25
 8013c20:	d1f9      	bne.n	8013c16 <_vfiprintf_r+0x7a>
 8013c22:	ebba 0b04 	subs.w	fp, sl, r4
 8013c26:	d00b      	beq.n	8013c40 <_vfiprintf_r+0xa4>
 8013c28:	465b      	mov	r3, fp
 8013c2a:	4622      	mov	r2, r4
 8013c2c:	4629      	mov	r1, r5
 8013c2e:	4630      	mov	r0, r6
 8013c30:	f7ff ffa2 	bl	8013b78 <__sfputs_r>
 8013c34:	3001      	adds	r0, #1
 8013c36:	f000 80a7 	beq.w	8013d88 <_vfiprintf_r+0x1ec>
 8013c3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013c3c:	445a      	add	r2, fp
 8013c3e:	9209      	str	r2, [sp, #36]	@ 0x24
 8013c40:	f89a 3000 	ldrb.w	r3, [sl]
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	f000 809f 	beq.w	8013d88 <_vfiprintf_r+0x1ec>
 8013c4a:	2300      	movs	r3, #0
 8013c4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013c50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013c54:	f10a 0a01 	add.w	sl, sl, #1
 8013c58:	9304      	str	r3, [sp, #16]
 8013c5a:	9307      	str	r3, [sp, #28]
 8013c5c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013c60:	931a      	str	r3, [sp, #104]	@ 0x68
 8013c62:	4654      	mov	r4, sl
 8013c64:	2205      	movs	r2, #5
 8013c66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013c6a:	4853      	ldr	r0, [pc, #332]	@ (8013db8 <_vfiprintf_r+0x21c>)
 8013c6c:	f7ec fb50 	bl	8000310 <memchr>
 8013c70:	9a04      	ldr	r2, [sp, #16]
 8013c72:	b9d8      	cbnz	r0, 8013cac <_vfiprintf_r+0x110>
 8013c74:	06d1      	lsls	r1, r2, #27
 8013c76:	bf44      	itt	mi
 8013c78:	2320      	movmi	r3, #32
 8013c7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013c7e:	0713      	lsls	r3, r2, #28
 8013c80:	bf44      	itt	mi
 8013c82:	232b      	movmi	r3, #43	@ 0x2b
 8013c84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013c88:	f89a 3000 	ldrb.w	r3, [sl]
 8013c8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8013c8e:	d015      	beq.n	8013cbc <_vfiprintf_r+0x120>
 8013c90:	9a07      	ldr	r2, [sp, #28]
 8013c92:	4654      	mov	r4, sl
 8013c94:	2000      	movs	r0, #0
 8013c96:	f04f 0c0a 	mov.w	ip, #10
 8013c9a:	4621      	mov	r1, r4
 8013c9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013ca0:	3b30      	subs	r3, #48	@ 0x30
 8013ca2:	2b09      	cmp	r3, #9
 8013ca4:	d94b      	bls.n	8013d3e <_vfiprintf_r+0x1a2>
 8013ca6:	b1b0      	cbz	r0, 8013cd6 <_vfiprintf_r+0x13a>
 8013ca8:	9207      	str	r2, [sp, #28]
 8013caa:	e014      	b.n	8013cd6 <_vfiprintf_r+0x13a>
 8013cac:	eba0 0308 	sub.w	r3, r0, r8
 8013cb0:	fa09 f303 	lsl.w	r3, r9, r3
 8013cb4:	4313      	orrs	r3, r2
 8013cb6:	9304      	str	r3, [sp, #16]
 8013cb8:	46a2      	mov	sl, r4
 8013cba:	e7d2      	b.n	8013c62 <_vfiprintf_r+0xc6>
 8013cbc:	9b03      	ldr	r3, [sp, #12]
 8013cbe:	1d19      	adds	r1, r3, #4
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	9103      	str	r1, [sp, #12]
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	bfbb      	ittet	lt
 8013cc8:	425b      	neglt	r3, r3
 8013cca:	f042 0202 	orrlt.w	r2, r2, #2
 8013cce:	9307      	strge	r3, [sp, #28]
 8013cd0:	9307      	strlt	r3, [sp, #28]
 8013cd2:	bfb8      	it	lt
 8013cd4:	9204      	strlt	r2, [sp, #16]
 8013cd6:	7823      	ldrb	r3, [r4, #0]
 8013cd8:	2b2e      	cmp	r3, #46	@ 0x2e
 8013cda:	d10a      	bne.n	8013cf2 <_vfiprintf_r+0x156>
 8013cdc:	7863      	ldrb	r3, [r4, #1]
 8013cde:	2b2a      	cmp	r3, #42	@ 0x2a
 8013ce0:	d132      	bne.n	8013d48 <_vfiprintf_r+0x1ac>
 8013ce2:	9b03      	ldr	r3, [sp, #12]
 8013ce4:	1d1a      	adds	r2, r3, #4
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	9203      	str	r2, [sp, #12]
 8013cea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013cee:	3402      	adds	r4, #2
 8013cf0:	9305      	str	r3, [sp, #20]
 8013cf2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013dc8 <_vfiprintf_r+0x22c>
 8013cf6:	7821      	ldrb	r1, [r4, #0]
 8013cf8:	2203      	movs	r2, #3
 8013cfa:	4650      	mov	r0, sl
 8013cfc:	f7ec fb08 	bl	8000310 <memchr>
 8013d00:	b138      	cbz	r0, 8013d12 <_vfiprintf_r+0x176>
 8013d02:	9b04      	ldr	r3, [sp, #16]
 8013d04:	eba0 000a 	sub.w	r0, r0, sl
 8013d08:	2240      	movs	r2, #64	@ 0x40
 8013d0a:	4082      	lsls	r2, r0
 8013d0c:	4313      	orrs	r3, r2
 8013d0e:	3401      	adds	r4, #1
 8013d10:	9304      	str	r3, [sp, #16]
 8013d12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d16:	4829      	ldr	r0, [pc, #164]	@ (8013dbc <_vfiprintf_r+0x220>)
 8013d18:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013d1c:	2206      	movs	r2, #6
 8013d1e:	f7ec faf7 	bl	8000310 <memchr>
 8013d22:	2800      	cmp	r0, #0
 8013d24:	d03f      	beq.n	8013da6 <_vfiprintf_r+0x20a>
 8013d26:	4b26      	ldr	r3, [pc, #152]	@ (8013dc0 <_vfiprintf_r+0x224>)
 8013d28:	bb1b      	cbnz	r3, 8013d72 <_vfiprintf_r+0x1d6>
 8013d2a:	9b03      	ldr	r3, [sp, #12]
 8013d2c:	3307      	adds	r3, #7
 8013d2e:	f023 0307 	bic.w	r3, r3, #7
 8013d32:	3308      	adds	r3, #8
 8013d34:	9303      	str	r3, [sp, #12]
 8013d36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013d38:	443b      	add	r3, r7
 8013d3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8013d3c:	e76a      	b.n	8013c14 <_vfiprintf_r+0x78>
 8013d3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8013d42:	460c      	mov	r4, r1
 8013d44:	2001      	movs	r0, #1
 8013d46:	e7a8      	b.n	8013c9a <_vfiprintf_r+0xfe>
 8013d48:	2300      	movs	r3, #0
 8013d4a:	3401      	adds	r4, #1
 8013d4c:	9305      	str	r3, [sp, #20]
 8013d4e:	4619      	mov	r1, r3
 8013d50:	f04f 0c0a 	mov.w	ip, #10
 8013d54:	4620      	mov	r0, r4
 8013d56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013d5a:	3a30      	subs	r2, #48	@ 0x30
 8013d5c:	2a09      	cmp	r2, #9
 8013d5e:	d903      	bls.n	8013d68 <_vfiprintf_r+0x1cc>
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d0c6      	beq.n	8013cf2 <_vfiprintf_r+0x156>
 8013d64:	9105      	str	r1, [sp, #20]
 8013d66:	e7c4      	b.n	8013cf2 <_vfiprintf_r+0x156>
 8013d68:	fb0c 2101 	mla	r1, ip, r1, r2
 8013d6c:	4604      	mov	r4, r0
 8013d6e:	2301      	movs	r3, #1
 8013d70:	e7f0      	b.n	8013d54 <_vfiprintf_r+0x1b8>
 8013d72:	ab03      	add	r3, sp, #12
 8013d74:	9300      	str	r3, [sp, #0]
 8013d76:	462a      	mov	r2, r5
 8013d78:	4b12      	ldr	r3, [pc, #72]	@ (8013dc4 <_vfiprintf_r+0x228>)
 8013d7a:	a904      	add	r1, sp, #16
 8013d7c:	4630      	mov	r0, r6
 8013d7e:	f7fd fc43 	bl	8011608 <_printf_float>
 8013d82:	4607      	mov	r7, r0
 8013d84:	1c78      	adds	r0, r7, #1
 8013d86:	d1d6      	bne.n	8013d36 <_vfiprintf_r+0x19a>
 8013d88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013d8a:	07d9      	lsls	r1, r3, #31
 8013d8c:	d405      	bmi.n	8013d9a <_vfiprintf_r+0x1fe>
 8013d8e:	89ab      	ldrh	r3, [r5, #12]
 8013d90:	059a      	lsls	r2, r3, #22
 8013d92:	d402      	bmi.n	8013d9a <_vfiprintf_r+0x1fe>
 8013d94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013d96:	f7fe f991 	bl	80120bc <__retarget_lock_release_recursive>
 8013d9a:	89ab      	ldrh	r3, [r5, #12]
 8013d9c:	065b      	lsls	r3, r3, #25
 8013d9e:	f53f af1f 	bmi.w	8013be0 <_vfiprintf_r+0x44>
 8013da2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013da4:	e71e      	b.n	8013be4 <_vfiprintf_r+0x48>
 8013da6:	ab03      	add	r3, sp, #12
 8013da8:	9300      	str	r3, [sp, #0]
 8013daa:	462a      	mov	r2, r5
 8013dac:	4b05      	ldr	r3, [pc, #20]	@ (8013dc4 <_vfiprintf_r+0x228>)
 8013dae:	a904      	add	r1, sp, #16
 8013db0:	4630      	mov	r0, r6
 8013db2:	f7fd feb1 	bl	8011b18 <_printf_i>
 8013db6:	e7e4      	b.n	8013d82 <_vfiprintf_r+0x1e6>
 8013db8:	08014d30 	.word	0x08014d30
 8013dbc:	08014d3a 	.word	0x08014d3a
 8013dc0:	08011609 	.word	0x08011609
 8013dc4:	08013b79 	.word	0x08013b79
 8013dc8:	08014d36 	.word	0x08014d36

08013dcc <__swbuf_r>:
 8013dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013dce:	460e      	mov	r6, r1
 8013dd0:	4614      	mov	r4, r2
 8013dd2:	4605      	mov	r5, r0
 8013dd4:	b118      	cbz	r0, 8013dde <__swbuf_r+0x12>
 8013dd6:	6a03      	ldr	r3, [r0, #32]
 8013dd8:	b90b      	cbnz	r3, 8013dde <__swbuf_r+0x12>
 8013dda:	f7fe f849 	bl	8011e70 <__sinit>
 8013dde:	69a3      	ldr	r3, [r4, #24]
 8013de0:	60a3      	str	r3, [r4, #8]
 8013de2:	89a3      	ldrh	r3, [r4, #12]
 8013de4:	071a      	lsls	r2, r3, #28
 8013de6:	d501      	bpl.n	8013dec <__swbuf_r+0x20>
 8013de8:	6923      	ldr	r3, [r4, #16]
 8013dea:	b943      	cbnz	r3, 8013dfe <__swbuf_r+0x32>
 8013dec:	4621      	mov	r1, r4
 8013dee:	4628      	mov	r0, r5
 8013df0:	f000 f82a 	bl	8013e48 <__swsetup_r>
 8013df4:	b118      	cbz	r0, 8013dfe <__swbuf_r+0x32>
 8013df6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8013dfa:	4638      	mov	r0, r7
 8013dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013dfe:	6823      	ldr	r3, [r4, #0]
 8013e00:	6922      	ldr	r2, [r4, #16]
 8013e02:	1a98      	subs	r0, r3, r2
 8013e04:	6963      	ldr	r3, [r4, #20]
 8013e06:	b2f6      	uxtb	r6, r6
 8013e08:	4283      	cmp	r3, r0
 8013e0a:	4637      	mov	r7, r6
 8013e0c:	dc05      	bgt.n	8013e1a <__swbuf_r+0x4e>
 8013e0e:	4621      	mov	r1, r4
 8013e10:	4628      	mov	r0, r5
 8013e12:	f7ff fd99 	bl	8013948 <_fflush_r>
 8013e16:	2800      	cmp	r0, #0
 8013e18:	d1ed      	bne.n	8013df6 <__swbuf_r+0x2a>
 8013e1a:	68a3      	ldr	r3, [r4, #8]
 8013e1c:	3b01      	subs	r3, #1
 8013e1e:	60a3      	str	r3, [r4, #8]
 8013e20:	6823      	ldr	r3, [r4, #0]
 8013e22:	1c5a      	adds	r2, r3, #1
 8013e24:	6022      	str	r2, [r4, #0]
 8013e26:	701e      	strb	r6, [r3, #0]
 8013e28:	6962      	ldr	r2, [r4, #20]
 8013e2a:	1c43      	adds	r3, r0, #1
 8013e2c:	429a      	cmp	r2, r3
 8013e2e:	d004      	beq.n	8013e3a <__swbuf_r+0x6e>
 8013e30:	89a3      	ldrh	r3, [r4, #12]
 8013e32:	07db      	lsls	r3, r3, #31
 8013e34:	d5e1      	bpl.n	8013dfa <__swbuf_r+0x2e>
 8013e36:	2e0a      	cmp	r6, #10
 8013e38:	d1df      	bne.n	8013dfa <__swbuf_r+0x2e>
 8013e3a:	4621      	mov	r1, r4
 8013e3c:	4628      	mov	r0, r5
 8013e3e:	f7ff fd83 	bl	8013948 <_fflush_r>
 8013e42:	2800      	cmp	r0, #0
 8013e44:	d0d9      	beq.n	8013dfa <__swbuf_r+0x2e>
 8013e46:	e7d6      	b.n	8013df6 <__swbuf_r+0x2a>

08013e48 <__swsetup_r>:
 8013e48:	b538      	push	{r3, r4, r5, lr}
 8013e4a:	4b29      	ldr	r3, [pc, #164]	@ (8013ef0 <__swsetup_r+0xa8>)
 8013e4c:	4605      	mov	r5, r0
 8013e4e:	6818      	ldr	r0, [r3, #0]
 8013e50:	460c      	mov	r4, r1
 8013e52:	b118      	cbz	r0, 8013e5c <__swsetup_r+0x14>
 8013e54:	6a03      	ldr	r3, [r0, #32]
 8013e56:	b90b      	cbnz	r3, 8013e5c <__swsetup_r+0x14>
 8013e58:	f7fe f80a 	bl	8011e70 <__sinit>
 8013e5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013e60:	0719      	lsls	r1, r3, #28
 8013e62:	d422      	bmi.n	8013eaa <__swsetup_r+0x62>
 8013e64:	06da      	lsls	r2, r3, #27
 8013e66:	d407      	bmi.n	8013e78 <__swsetup_r+0x30>
 8013e68:	2209      	movs	r2, #9
 8013e6a:	602a      	str	r2, [r5, #0]
 8013e6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013e70:	81a3      	strh	r3, [r4, #12]
 8013e72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013e76:	e033      	b.n	8013ee0 <__swsetup_r+0x98>
 8013e78:	0758      	lsls	r0, r3, #29
 8013e7a:	d512      	bpl.n	8013ea2 <__swsetup_r+0x5a>
 8013e7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013e7e:	b141      	cbz	r1, 8013e92 <__swsetup_r+0x4a>
 8013e80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013e84:	4299      	cmp	r1, r3
 8013e86:	d002      	beq.n	8013e8e <__swsetup_r+0x46>
 8013e88:	4628      	mov	r0, r5
 8013e8a:	f7fe feff 	bl	8012c8c <_free_r>
 8013e8e:	2300      	movs	r3, #0
 8013e90:	6363      	str	r3, [r4, #52]	@ 0x34
 8013e92:	89a3      	ldrh	r3, [r4, #12]
 8013e94:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013e98:	81a3      	strh	r3, [r4, #12]
 8013e9a:	2300      	movs	r3, #0
 8013e9c:	6063      	str	r3, [r4, #4]
 8013e9e:	6923      	ldr	r3, [r4, #16]
 8013ea0:	6023      	str	r3, [r4, #0]
 8013ea2:	89a3      	ldrh	r3, [r4, #12]
 8013ea4:	f043 0308 	orr.w	r3, r3, #8
 8013ea8:	81a3      	strh	r3, [r4, #12]
 8013eaa:	6923      	ldr	r3, [r4, #16]
 8013eac:	b94b      	cbnz	r3, 8013ec2 <__swsetup_r+0x7a>
 8013eae:	89a3      	ldrh	r3, [r4, #12]
 8013eb0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013eb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013eb8:	d003      	beq.n	8013ec2 <__swsetup_r+0x7a>
 8013eba:	4621      	mov	r1, r4
 8013ebc:	4628      	mov	r0, r5
 8013ebe:	f000 f883 	bl	8013fc8 <__smakebuf_r>
 8013ec2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ec6:	f013 0201 	ands.w	r2, r3, #1
 8013eca:	d00a      	beq.n	8013ee2 <__swsetup_r+0x9a>
 8013ecc:	2200      	movs	r2, #0
 8013ece:	60a2      	str	r2, [r4, #8]
 8013ed0:	6962      	ldr	r2, [r4, #20]
 8013ed2:	4252      	negs	r2, r2
 8013ed4:	61a2      	str	r2, [r4, #24]
 8013ed6:	6922      	ldr	r2, [r4, #16]
 8013ed8:	b942      	cbnz	r2, 8013eec <__swsetup_r+0xa4>
 8013eda:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013ede:	d1c5      	bne.n	8013e6c <__swsetup_r+0x24>
 8013ee0:	bd38      	pop	{r3, r4, r5, pc}
 8013ee2:	0799      	lsls	r1, r3, #30
 8013ee4:	bf58      	it	pl
 8013ee6:	6962      	ldrpl	r2, [r4, #20]
 8013ee8:	60a2      	str	r2, [r4, #8]
 8013eea:	e7f4      	b.n	8013ed6 <__swsetup_r+0x8e>
 8013eec:	2000      	movs	r0, #0
 8013eee:	e7f7      	b.n	8013ee0 <__swsetup_r+0x98>
 8013ef0:	24000054 	.word	0x24000054

08013ef4 <_raise_r>:
 8013ef4:	291f      	cmp	r1, #31
 8013ef6:	b538      	push	{r3, r4, r5, lr}
 8013ef8:	4605      	mov	r5, r0
 8013efa:	460c      	mov	r4, r1
 8013efc:	d904      	bls.n	8013f08 <_raise_r+0x14>
 8013efe:	2316      	movs	r3, #22
 8013f00:	6003      	str	r3, [r0, #0]
 8013f02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013f06:	bd38      	pop	{r3, r4, r5, pc}
 8013f08:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013f0a:	b112      	cbz	r2, 8013f12 <_raise_r+0x1e>
 8013f0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013f10:	b94b      	cbnz	r3, 8013f26 <_raise_r+0x32>
 8013f12:	4628      	mov	r0, r5
 8013f14:	f000 f830 	bl	8013f78 <_getpid_r>
 8013f18:	4622      	mov	r2, r4
 8013f1a:	4601      	mov	r1, r0
 8013f1c:	4628      	mov	r0, r5
 8013f1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013f22:	f000 b817 	b.w	8013f54 <_kill_r>
 8013f26:	2b01      	cmp	r3, #1
 8013f28:	d00a      	beq.n	8013f40 <_raise_r+0x4c>
 8013f2a:	1c59      	adds	r1, r3, #1
 8013f2c:	d103      	bne.n	8013f36 <_raise_r+0x42>
 8013f2e:	2316      	movs	r3, #22
 8013f30:	6003      	str	r3, [r0, #0]
 8013f32:	2001      	movs	r0, #1
 8013f34:	e7e7      	b.n	8013f06 <_raise_r+0x12>
 8013f36:	2100      	movs	r1, #0
 8013f38:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013f3c:	4620      	mov	r0, r4
 8013f3e:	4798      	blx	r3
 8013f40:	2000      	movs	r0, #0
 8013f42:	e7e0      	b.n	8013f06 <_raise_r+0x12>

08013f44 <raise>:
 8013f44:	4b02      	ldr	r3, [pc, #8]	@ (8013f50 <raise+0xc>)
 8013f46:	4601      	mov	r1, r0
 8013f48:	6818      	ldr	r0, [r3, #0]
 8013f4a:	f7ff bfd3 	b.w	8013ef4 <_raise_r>
 8013f4e:	bf00      	nop
 8013f50:	24000054 	.word	0x24000054

08013f54 <_kill_r>:
 8013f54:	b538      	push	{r3, r4, r5, lr}
 8013f56:	4d07      	ldr	r5, [pc, #28]	@ (8013f74 <_kill_r+0x20>)
 8013f58:	2300      	movs	r3, #0
 8013f5a:	4604      	mov	r4, r0
 8013f5c:	4608      	mov	r0, r1
 8013f5e:	4611      	mov	r1, r2
 8013f60:	602b      	str	r3, [r5, #0]
 8013f62:	f7f0 f8e7 	bl	8004134 <_kill>
 8013f66:	1c43      	adds	r3, r0, #1
 8013f68:	d102      	bne.n	8013f70 <_kill_r+0x1c>
 8013f6a:	682b      	ldr	r3, [r5, #0]
 8013f6c:	b103      	cbz	r3, 8013f70 <_kill_r+0x1c>
 8013f6e:	6023      	str	r3, [r4, #0]
 8013f70:	bd38      	pop	{r3, r4, r5, pc}
 8013f72:	bf00      	nop
 8013f74:	240011f8 	.word	0x240011f8

08013f78 <_getpid_r>:
 8013f78:	f7f0 b8d4 	b.w	8004124 <_getpid>

08013f7c <__swhatbuf_r>:
 8013f7c:	b570      	push	{r4, r5, r6, lr}
 8013f7e:	460c      	mov	r4, r1
 8013f80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f84:	2900      	cmp	r1, #0
 8013f86:	b096      	sub	sp, #88	@ 0x58
 8013f88:	4615      	mov	r5, r2
 8013f8a:	461e      	mov	r6, r3
 8013f8c:	da0d      	bge.n	8013faa <__swhatbuf_r+0x2e>
 8013f8e:	89a3      	ldrh	r3, [r4, #12]
 8013f90:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013f94:	f04f 0100 	mov.w	r1, #0
 8013f98:	bf14      	ite	ne
 8013f9a:	2340      	movne	r3, #64	@ 0x40
 8013f9c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013fa0:	2000      	movs	r0, #0
 8013fa2:	6031      	str	r1, [r6, #0]
 8013fa4:	602b      	str	r3, [r5, #0]
 8013fa6:	b016      	add	sp, #88	@ 0x58
 8013fa8:	bd70      	pop	{r4, r5, r6, pc}
 8013faa:	466a      	mov	r2, sp
 8013fac:	f000 f848 	bl	8014040 <_fstat_r>
 8013fb0:	2800      	cmp	r0, #0
 8013fb2:	dbec      	blt.n	8013f8e <__swhatbuf_r+0x12>
 8013fb4:	9901      	ldr	r1, [sp, #4]
 8013fb6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013fba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013fbe:	4259      	negs	r1, r3
 8013fc0:	4159      	adcs	r1, r3
 8013fc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013fc6:	e7eb      	b.n	8013fa0 <__swhatbuf_r+0x24>

08013fc8 <__smakebuf_r>:
 8013fc8:	898b      	ldrh	r3, [r1, #12]
 8013fca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013fcc:	079d      	lsls	r5, r3, #30
 8013fce:	4606      	mov	r6, r0
 8013fd0:	460c      	mov	r4, r1
 8013fd2:	d507      	bpl.n	8013fe4 <__smakebuf_r+0x1c>
 8013fd4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013fd8:	6023      	str	r3, [r4, #0]
 8013fda:	6123      	str	r3, [r4, #16]
 8013fdc:	2301      	movs	r3, #1
 8013fde:	6163      	str	r3, [r4, #20]
 8013fe0:	b003      	add	sp, #12
 8013fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013fe4:	ab01      	add	r3, sp, #4
 8013fe6:	466a      	mov	r2, sp
 8013fe8:	f7ff ffc8 	bl	8013f7c <__swhatbuf_r>
 8013fec:	9f00      	ldr	r7, [sp, #0]
 8013fee:	4605      	mov	r5, r0
 8013ff0:	4639      	mov	r1, r7
 8013ff2:	4630      	mov	r0, r6
 8013ff4:	f7fe febe 	bl	8012d74 <_malloc_r>
 8013ff8:	b948      	cbnz	r0, 801400e <__smakebuf_r+0x46>
 8013ffa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ffe:	059a      	lsls	r2, r3, #22
 8014000:	d4ee      	bmi.n	8013fe0 <__smakebuf_r+0x18>
 8014002:	f023 0303 	bic.w	r3, r3, #3
 8014006:	f043 0302 	orr.w	r3, r3, #2
 801400a:	81a3      	strh	r3, [r4, #12]
 801400c:	e7e2      	b.n	8013fd4 <__smakebuf_r+0xc>
 801400e:	89a3      	ldrh	r3, [r4, #12]
 8014010:	6020      	str	r0, [r4, #0]
 8014012:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014016:	81a3      	strh	r3, [r4, #12]
 8014018:	9b01      	ldr	r3, [sp, #4]
 801401a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801401e:	b15b      	cbz	r3, 8014038 <__smakebuf_r+0x70>
 8014020:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014024:	4630      	mov	r0, r6
 8014026:	f000 f81d 	bl	8014064 <_isatty_r>
 801402a:	b128      	cbz	r0, 8014038 <__smakebuf_r+0x70>
 801402c:	89a3      	ldrh	r3, [r4, #12]
 801402e:	f023 0303 	bic.w	r3, r3, #3
 8014032:	f043 0301 	orr.w	r3, r3, #1
 8014036:	81a3      	strh	r3, [r4, #12]
 8014038:	89a3      	ldrh	r3, [r4, #12]
 801403a:	431d      	orrs	r5, r3
 801403c:	81a5      	strh	r5, [r4, #12]
 801403e:	e7cf      	b.n	8013fe0 <__smakebuf_r+0x18>

08014040 <_fstat_r>:
 8014040:	b538      	push	{r3, r4, r5, lr}
 8014042:	4d07      	ldr	r5, [pc, #28]	@ (8014060 <_fstat_r+0x20>)
 8014044:	2300      	movs	r3, #0
 8014046:	4604      	mov	r4, r0
 8014048:	4608      	mov	r0, r1
 801404a:	4611      	mov	r1, r2
 801404c:	602b      	str	r3, [r5, #0]
 801404e:	f7f0 f8d1 	bl	80041f4 <_fstat>
 8014052:	1c43      	adds	r3, r0, #1
 8014054:	d102      	bne.n	801405c <_fstat_r+0x1c>
 8014056:	682b      	ldr	r3, [r5, #0]
 8014058:	b103      	cbz	r3, 801405c <_fstat_r+0x1c>
 801405a:	6023      	str	r3, [r4, #0]
 801405c:	bd38      	pop	{r3, r4, r5, pc}
 801405e:	bf00      	nop
 8014060:	240011f8 	.word	0x240011f8

08014064 <_isatty_r>:
 8014064:	b538      	push	{r3, r4, r5, lr}
 8014066:	4d06      	ldr	r5, [pc, #24]	@ (8014080 <_isatty_r+0x1c>)
 8014068:	2300      	movs	r3, #0
 801406a:	4604      	mov	r4, r0
 801406c:	4608      	mov	r0, r1
 801406e:	602b      	str	r3, [r5, #0]
 8014070:	f7f0 f8d0 	bl	8004214 <_isatty>
 8014074:	1c43      	adds	r3, r0, #1
 8014076:	d102      	bne.n	801407e <_isatty_r+0x1a>
 8014078:	682b      	ldr	r3, [r5, #0]
 801407a:	b103      	cbz	r3, 801407e <_isatty_r+0x1a>
 801407c:	6023      	str	r3, [r4, #0]
 801407e:	bd38      	pop	{r3, r4, r5, pc}
 8014080:	240011f8 	.word	0x240011f8

08014084 <_init>:
 8014084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014086:	bf00      	nop
 8014088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801408a:	bc08      	pop	{r3}
 801408c:	469e      	mov	lr, r3
 801408e:	4770      	bx	lr

08014090 <_fini>:
 8014090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014092:	bf00      	nop
 8014094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014096:	bc08      	pop	{r3}
 8014098:	469e      	mov	lr, r3
 801409a:	4770      	bx	lr
