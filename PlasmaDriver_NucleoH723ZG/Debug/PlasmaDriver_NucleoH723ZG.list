
PlasmaDriver_NucleoH723ZG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011304  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ad4  080115d4  080115d4  000125d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080120a8  080120a8  000130a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080120b0  080120b0  000130b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080120b4  080120b4  000130b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000098  24000000  080120b8  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000098  08012150  00014098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000f8  080121b0  000140f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ee8  24000158  08012210  00014158  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24001040  08012210  00015040  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00014158  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023831  00000000  00000000  00014186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003959  00000000  00000000  000379b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ac8  00000000  00000000  0003b310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014f7  00000000  00000000  0003cdd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00037407  00000000  00000000  0003e2cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021a6b  00000000  00000000  000756d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016c4ca  00000000  00000000  00097141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0020360b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ad0  00000000  00000000  00203650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0020b120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000158 	.word	0x24000158
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080115bc 	.word	0x080115bc

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400015c 	.word	0x2400015c
 800030c:	080115bc 	.word	0x080115bc

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <writeConfigFlash>:
// Prototypes
void measureVoltagesTemperaturesADC3(void);

// Write configuration to flash
static uint32_t writeConfigFlash(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
	uint32_t faultySector;	//Contains error code for faulty sector
	uint32_t error_code = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]

	// Unlock Flash
	HAL_FLASH_Unlock();
 80006ba:	f009 fc4f 	bl	8009f5c <HAL_FLASH_Unlock>

	// Erase flash sector 7
	if (HAL_FLASHEx_Erase(&sFlashErase, &faultySector) == HAL_OK)
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	4619      	mov	r1, r3
 80006c2:	4815      	ldr	r0, [pc, #84]	@ (8000718 <writeConfigFlash+0x68>)
 80006c4:	f009 fce6 	bl	800a094 <HAL_FLASHEx_Erase>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d119      	bne.n	8000702 <writeConfigFlash+0x52>
	{
		for (uint32_t offset = 0; offset < sizeof(sFlashConfig); offset += FLASH_WORD)
 80006ce:	2300      	movs	r3, #0
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	e012      	b.n	80006fa <writeConfigFlash+0x4a>
		{
			// Program one flash word (8*4 bytes)
			if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, FLASH_SECTOR7_START_ADDR + offset, ((uint32_t) &sFlashConfig) + offset) != HAL_OK)
 80006d4:	68ba      	ldr	r2, [r7, #8]
 80006d6:	4b11      	ldr	r3, [pc, #68]	@ (800071c <writeConfigFlash+0x6c>)
 80006d8:	4413      	add	r3, r2
 80006da:	4911      	ldr	r1, [pc, #68]	@ (8000720 <writeConfigFlash+0x70>)
 80006dc:	68ba      	ldr	r2, [r7, #8]
 80006de:	440a      	add	r2, r1
 80006e0:	4619      	mov	r1, r3
 80006e2:	2001      	movs	r0, #1
 80006e4:	f009 fbcc 	bl	8009e80 <HAL_FLASH_Program>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d002      	beq.n	80006f4 <writeConfigFlash+0x44>
			{
				// Error during flash write
				error_code = HAL_FLASH_GetError();
 80006ee:	f009 fc6f 	bl	8009fd0 <HAL_FLASH_GetError>
 80006f2:	60f8      	str	r0, [r7, #12]
		for (uint32_t offset = 0; offset < sizeof(sFlashConfig); offset += FLASH_WORD)
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	3320      	adds	r3, #32
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d0e9      	beq.n	80006d4 <writeConfigFlash+0x24>
 8000700:	e002      	b.n	8000708 <writeConfigFlash+0x58>
			}
		}
	}
	else
	{
		error_code = HAL_FLASH_GetError();
 8000702:	f009 fc65 	bl	8009fd0 <HAL_FLASH_GetError>
 8000706:	60f8      	str	r0, [r7, #12]
	}

	  // Lock Flash
	  HAL_FLASH_Lock();
 8000708:	f009 fc4a 	bl	8009fa0 <HAL_FLASH_Lock>

	  return error_code;
 800070c:	68fb      	ldr	r3, [r7, #12]
}
 800070e:	4618      	mov	r0, r3
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	24000024 	.word	0x24000024
 800071c:	080e0000 	.word	0x080e0000
 8000720:	240008c8 	.word	0x240008c8

08000724 <readConfigFlash>:

// Read configuration from flash
static void readConfigFlash(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
	// Read configuration from flash
	memcpy(&sFlashConfig, (void *) FLASH_SECTOR7_START_ADDR, sizeof(sFlashConfig));
 8000728:	4b04      	ldr	r3, [pc, #16]	@ (800073c <readConfigFlash+0x18>)
 800072a:	781a      	ldrb	r2, [r3, #0]
 800072c:	4b04      	ldr	r3, [pc, #16]	@ (8000740 <readConfigFlash+0x1c>)
 800072e:	701a      	strb	r2, [r3, #0]
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	080e0000 	.word	0x080e0000
 8000740:	240008c8 	.word	0x240008c8

08000744 <printCR>:

// Print CR
static void printCR(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart3, (uint8_t *) "\n\r", 2, 1000);
 8000748:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800074c:	2202      	movs	r2, #2
 800074e:	4903      	ldr	r1, [pc, #12]	@ (800075c <printCR+0x18>)
 8000750:	4803      	ldr	r0, [pc, #12]	@ (8000760 <printCR+0x1c>)
 8000752:	f00e feb6 	bl	800f4c2 <HAL_UART_Transmit>
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	080115d4 	.word	0x080115d4
 8000760:	24000cb8 	.word	0x24000cb8

08000764 <printString>:

// Print string on UART3
static void printString(char *str)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) str, strlen(str), 1000);
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f7ff fdcf 	bl	8000310 <strlen>
 8000772:	4603      	mov	r3, r0
 8000774:	b29a      	uxth	r2, r3
 8000776:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800077a:	6879      	ldr	r1, [r7, #4]
 800077c:	4803      	ldr	r0, [pc, #12]	@ (800078c <printString+0x28>)
 800077e:	f00e fea0 	bl	800f4c2 <HAL_UART_Transmit>
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	24000cb8 	.word	0x24000cb8

08000790 <printConfigFlash>:

// Print configuration on UART3
static void printConfigFlash(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
	printString("\n\rCurrent configuration:");
 8000794:	480e      	ldr	r0, [pc, #56]	@ (80007d0 <printConfigFlash+0x40>)
 8000796:	f7ff ffe5 	bl	8000764 <printString>
	printString("\n\r  Mode = ");
 800079a:	480e      	ldr	r0, [pc, #56]	@ (80007d4 <printConfigFlash+0x44>)
 800079c:	f7ff ffe2 	bl	8000764 <printString>
	if (sFlashConfig.mode == TEST_MODE)
 80007a0:	4b0d      	ldr	r3, [pc, #52]	@ (80007d8 <printConfigFlash+0x48>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d103      	bne.n	80007b0 <printConfigFlash+0x20>
		printString("TEST");
 80007a8:	480c      	ldr	r0, [pc, #48]	@ (80007dc <printConfigFlash+0x4c>)
 80007aa:	f7ff ffdb 	bl	8000764 <printString>
 80007ae:	e00a      	b.n	80007c6 <printConfigFlash+0x36>
	else if (sFlashConfig.mode == RUN_MODE)
 80007b0:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <printConfigFlash+0x48>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d103      	bne.n	80007c0 <printConfigFlash+0x30>
		printString("RUN");
 80007b8:	4809      	ldr	r0, [pc, #36]	@ (80007e0 <printConfigFlash+0x50>)
 80007ba:	f7ff ffd3 	bl	8000764 <printString>
 80007be:	e002      	b.n	80007c6 <printConfigFlash+0x36>
	else
		printString("UNKNOWN");
 80007c0:	4808      	ldr	r0, [pc, #32]	@ (80007e4 <printConfigFlash+0x54>)
 80007c2:	f7ff ffcf 	bl	8000764 <printString>
	printCR();
 80007c6:	f7ff ffbd 	bl	8000744 <printCR>
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	080115d8 	.word	0x080115d8
 80007d4:	080115f4 	.word	0x080115f4
 80007d8:	240008c8 	.word	0x240008c8
 80007dc:	08011600 	.word	0x08011600
 80007e0:	08011608 	.word	0x08011608
 80007e4:	0801160c 	.word	0x0801160c

080007e8 <printNumber>:

// Print 16bit unsigned integer on UART3
static void printNumber(const char *text, uint16_t number, uint8_t CR)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b09e      	sub	sp, #120	@ 0x78
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	460b      	mov	r3, r1
 80007f2:	807b      	strh	r3, [r7, #2]
 80007f4:	4613      	mov	r3, r2
 80007f6:	707b      	strb	r3, [r7, #1]
	char s_output[100];
	char s_number[7];
	strcpy(s_output, text);
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	6879      	ldr	r1, [r7, #4]
 80007fe:	4618      	mov	r0, r3
 8000800:	f010 fa88 	bl	8010d14 <strcpy>
	itoa(number, s_number, 10);
 8000804:	887b      	ldrh	r3, [r7, #2]
 8000806:	f107 010c 	add.w	r1, r7, #12
 800080a:	220a      	movs	r2, #10
 800080c:	4618      	mov	r0, r3
 800080e:	f010 f955 	bl	8010abc <itoa>
	strcat(s_output, s_number);
 8000812:	f107 020c 	add.w	r2, r7, #12
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4611      	mov	r1, r2
 800081c:	4618      	mov	r0, r3
 800081e:	f010 fa3d 	bl	8010c9c <strcat>
	if (CR)
 8000822:	787b      	ldrb	r3, [r7, #1]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d00e      	beq.n	8000846 <printNumber+0x5e>
	{
		strcat(s_output, "\n\r");
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff fd6f 	bl	8000310 <strlen>
 8000832:	4603      	mov	r3, r0
 8000834:	461a      	mov	r2, r3
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4413      	add	r3, r2
 800083c:	4a0b      	ldr	r2, [pc, #44]	@ (800086c <printNumber+0x84>)
 800083e:	8811      	ldrh	r1, [r2, #0]
 8000840:	7892      	ldrb	r2, [r2, #2]
 8000842:	8019      	strh	r1, [r3, #0]
 8000844:	709a      	strb	r2, [r3, #2]
	}
	HAL_UART_Transmit(&huart3, (uint8_t *) s_output, strlen(s_output), 1000);
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff fd60 	bl	8000310 <strlen>
 8000850:	4603      	mov	r3, r0
 8000852:	b29a      	uxth	r2, r3
 8000854:	f107 0114 	add.w	r1, r7, #20
 8000858:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800085c:	4804      	ldr	r0, [pc, #16]	@ (8000870 <printNumber+0x88>)
 800085e:	f00e fe30 	bl	800f4c2 <HAL_UART_Transmit>
}
 8000862:	bf00      	nop
 8000864:	3778      	adds	r7, #120	@ 0x78
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	080115d4 	.word	0x080115d4
 8000870:	24000cb8 	.word	0x24000cb8

08000874 <printHALErrorStatus>:

// Print HAL error status on UART3
static void	printHALErrorStatus(HAL_StatusTypeDef HALresp, const char *text)
{
 8000874:	b5b0      	push	{r4, r5, r7, lr}
 8000876:	b09c      	sub	sp, #112	@ 0x70
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	6039      	str	r1, [r7, #0]
 800087e:	71fb      	strb	r3, [r7, #7]
	char s_output[100];

	switch (HALresp)
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	2b03      	cmp	r3, #3
 8000884:	d828      	bhi.n	80008d8 <printHALErrorStatus+0x64>
 8000886:	a201      	add	r2, pc, #4	@ (adr r2, 800088c <printHALErrorStatus+0x18>)
 8000888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800088c:	080008d9 	.word	0x080008d9
 8000890:	0800089d 	.word	0x0800089d
 8000894:	080008b1 	.word	0x080008b1
 8000898:	080008c5 	.word	0x080008c5
	{
		case HAL_ERROR:
			strcpy(s_output, "** HAL ERROR **: ");
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	4a15      	ldr	r2, [pc, #84]	@ (80008f8 <printHALErrorStatus+0x84>)
 80008a2:	461c      	mov	r4, r3
 80008a4:	4615      	mov	r5, r2
 80008a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008aa:	682b      	ldr	r3, [r5, #0]
 80008ac:	8023      	strh	r3, [r4, #0]
		break;
 80008ae:	e013      	b.n	80008d8 <printHALErrorStatus+0x64>

		case HAL_BUSY:
			strcpy(s_output, "** HAL BUSY **: ");
 80008b0:	f107 030c 	add.w	r3, r7, #12
 80008b4:	4a11      	ldr	r2, [pc, #68]	@ (80008fc <printHALErrorStatus+0x88>)
 80008b6:	461c      	mov	r4, r3
 80008b8:	4615      	mov	r5, r2
 80008ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008be:	682b      	ldr	r3, [r5, #0]
 80008c0:	7023      	strb	r3, [r4, #0]
		break;
 80008c2:	e009      	b.n	80008d8 <printHALErrorStatus+0x64>

		case HAL_TIMEOUT:
			strcpy(s_output, "** HAL TIMEOUT **: ");
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000900 <printHALErrorStatus+0x8c>)
 80008ca:	461c      	mov	r4, r3
 80008cc:	4615      	mov	r5, r2
 80008ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008d2:	682b      	ldr	r3, [r5, #0]
 80008d4:	6023      	str	r3, [r4, #0]
		break;
 80008d6:	bf00      	nop

		case HAL_OK:
		break;
	}
	strcat(s_output, text);
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	6839      	ldr	r1, [r7, #0]
 80008de:	4618      	mov	r0, r3
 80008e0:	f010 f9dc 	bl	8010c9c <strcat>
	printString(s_output);
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ff3b 	bl	8000764 <printString>
}
 80008ee:	bf00      	nop
 80008f0:	3770      	adds	r7, #112	@ 0x70
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bdb0      	pop	{r4, r5, r7, pc}
 80008f6:	bf00      	nop
 80008f8:	08011614 	.word	0x08011614
 80008fc:	08011628 	.word	0x08011628
 8000900:	0801163c 	.word	0x0801163c

08000904 <stopHbridge>:

void stopHbridge(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]

	//Stop TIMER 1 PWM & interrupts
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);  //This will stop channel PWM1
 8000918:	2100      	movs	r1, #0
 800091a:	480f      	ldr	r0, [pc, #60]	@ (8000958 <stopHbridge+0x54>)
 800091c:	f00d fb7c 	bl	800e018 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1); //This will stop channel PWM1N
 8000920:	2100      	movs	r1, #0
 8000922:	480d      	ldr	r0, [pc, #52]	@ (8000958 <stopHbridge+0x54>)
 8000924:	f00e fbbe 	bl	800f0a4 <HAL_TIMEx_PWMN_Stop>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, TIM1_CH1N_Pin|TIM1_CH1_Pin, GPIO_PIN_SET);
 8000928:	2201      	movs	r2, #1
 800092a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800092e:	480b      	ldr	r0, [pc, #44]	@ (800095c <stopHbridge+0x58>)
 8000930:	f009 fe44 	bl	800a5bc <HAL_GPIO_WritePin>
	/*Configure GPIO pins : LED_GREEN_Pin LINE_DRIVER1_ENABLE_Pin LINE_DRIVER2_ENABLE_Pin LED_RED_Pin */
	GPIO_InitStruct.Pin = TIM1_CH1N_Pin|TIM1_CH1_Pin;
 8000934:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000938:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093a:	2301      	movs	r3, #1
 800093c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	4619      	mov	r1, r3
 800094a:	4804      	ldr	r0, [pc, #16]	@ (800095c <stopHbridge+0x58>)
 800094c:	f009 fc76 	bl	800a23c <HAL_GPIO_Init>

}
 8000950:	bf00      	nop
 8000952:	3718      	adds	r7, #24
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	24000d4c 	.word	0x24000d4c
 800095c:	58021000 	.word	0x58021000

08000960 <printHbridgeData>:

// Print H-bridge data on UART3
static void printHbridgeData(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b09c      	sub	sp, #112	@ 0x70
 8000964:	af02      	add	r7, sp, #8
	char s_output[100];
	sprintf(s_output, "\n\rH-bridge 1=On 0=Off: %u, Frequency: %u (Hz), Dead time: %u (%%)\n\r", sHbridge.on, sHbridge.frequency, sHbridge.deadtime);
 8000966:	4b0f      	ldr	r3, [pc, #60]	@ (80009a4 <printHbridgeData+0x44>)
 8000968:	881b      	ldrh	r3, [r3, #0]
 800096a:	461a      	mov	r2, r3
 800096c:	4b0d      	ldr	r3, [pc, #52]	@ (80009a4 <printHbridgeData+0x44>)
 800096e:	885b      	ldrh	r3, [r3, #2]
 8000970:	4619      	mov	r1, r3
 8000972:	4b0c      	ldr	r3, [pc, #48]	@ (80009a4 <printHbridgeData+0x44>)
 8000974:	889b      	ldrh	r3, [r3, #4]
 8000976:	1d38      	adds	r0, r7, #4
 8000978:	9300      	str	r3, [sp, #0]
 800097a:	460b      	mov	r3, r1
 800097c:	490a      	ldr	r1, [pc, #40]	@ (80009a8 <printHbridgeData+0x48>)
 800097e:	f010 f965 	bl	8010c4c <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t *) s_output, strlen(s_output), 1000);
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff fcc3 	bl	8000310 <strlen>
 800098a:	4603      	mov	r3, r0
 800098c:	b29a      	uxth	r2, r3
 800098e:	1d39      	adds	r1, r7, #4
 8000990:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000994:	4805      	ldr	r0, [pc, #20]	@ (80009ac <printHbridgeData+0x4c>)
 8000996:	f00e fd94 	bl	800f4c2 <HAL_UART_Transmit>
}
 800099a:	bf00      	nop
 800099c:	3768      	adds	r7, #104	@ 0x68
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	2400001c 	.word	0x2400001c
 80009a8:	08011650 	.word	0x08011650
 80009ac:	24000cb8 	.word	0x24000cb8

080009b0 <programHbridge>:

// Program TIMER 1 controlling the H-bridge
static void programHbridge(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b0a6      	sub	sp, #152	@ 0x98
 80009b4:	af00      	add	r7, sp, #0
	uint8_t DT, DTG;
	float tDTS = 1E6/((float) TIMER_BASE_CLOCK);  //Minimum step in usec
 80009b6:	4b96      	ldr	r3, [pc, #600]	@ (8000c10 <programHbridge+0x260>)
 80009b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	// TIMER 1 has already been initialized using HAL.
	// Program the H-bridge TIMER 1 - Clock TIMER_BASE_CLOCK

	// Calculate the period and duty cycle based on the frequency requested.
	timARR_f = ((float) TIMER_BASE_CLOCK) / ((float) sHbridge.frequency);
 80009bc:	4b95      	ldr	r3, [pc, #596]	@ (8000c14 <programHbridge+0x264>)
 80009be:	885b      	ldrh	r3, [r3, #2]
 80009c0:	ee07 3a90 	vmov	s15, r3
 80009c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009c8:	eddf 6a93 	vldr	s13, [pc, #588]	@ 8000c18 <programHbridge+0x268>
 80009cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009d0:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
	timARR = (uint32_t) (timARR_f + 0.5);							// Set period counter
 80009d4:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80009d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009dc:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 80009e0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80009e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80009e8:	ee17 3a90 	vmov	r3, s15
 80009ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	timCCR1 = timARR / 2;  											// 50% duty cycle
 80009f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80009f4:	085b      	lsrs	r3, r3, #1
 80009f6:	67fb      	str	r3, [r7, #124]	@ 0x7c

	// Print out the set frequency
	if (debug == 1)
 80009f8:	4b88      	ldr	r3, [pc, #544]	@ (8000c1c <programHbridge+0x26c>)
 80009fa:	881b      	ldrh	r3, [r3, #0]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d111      	bne.n	8000a24 <programHbridge+0x74>
	{
		value_int = ((uint32_t) TIMER_BASE_CLOCK) / timARR;
 8000a00:	4a87      	ldr	r2, [pc, #540]	@ (8000c20 <programHbridge+0x270>)
 8000a02:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a0a:	67bb      	str	r3, [r7, #120]	@ 0x78
		sprintf(s_output, "\n\rSet frequency (Hz): %lu\n\r", value_int);
 8000a0c:	f107 030c 	add.w	r3, r7, #12
 8000a10:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000a12:	4984      	ldr	r1, [pc, #528]	@ (8000c24 <programHbridge+0x274>)
 8000a14:	4618      	mov	r0, r3
 8000a16:	f010 f919 	bl	8010c4c <siprintf>
		printString(s_output);
 8000a1a:	f107 030c 	add.w	r3, r7, #12
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff fea0 	bl	8000764 <printString>
	//  DTG[7:5] = 10x => DT = (64 + DTG[5:0]) x tDTG with tDTG =2xtDTS.	 max (64 + 63)*2*tDTS  	: 3.7236 usec - 7.3890 usec
	//  DTG[7:5] = 110 => DT = (32 + DTG[4:0]) x tDTG with tDTG =8xtDTS.     max (32 + 31)*8*tDTS   : 7.4472 usec - 14.662 usec
	//  DTG[7:5] = 111 => DT = (32 + DTG[4:0]) x tDTG with tDTG = 16 x tDTS. max (32 + 31)*16*tDTS 	: 14.895 usec - 29.324 usec

	// Calculate dead time in usec
	req_dtime_us = (((float) sHbridge.deadtime))*(10000./(float) sHbridge.frequency);
 8000a24:	4b7b      	ldr	r3, [pc, #492]	@ (8000c14 <programHbridge+0x264>)
 8000a26:	889b      	ldrh	r3, [r3, #4]
 8000a28:	ee07 3a90 	vmov	s15, r3
 8000a2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a30:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000a34:	4b77      	ldr	r3, [pc, #476]	@ (8000c14 <programHbridge+0x264>)
 8000a36:	885b      	ldrh	r3, [r3, #2]
 8000a38:	ee07 3a90 	vmov	s15, r3
 8000a3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a40:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000a44:	ed9f 4b70 	vldr	d4, [pc, #448]	@ 8000c08 <programHbridge+0x258>
 8000a48:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000a4c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000a50:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a54:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
		printString(s_output);
	}
*/

	// Minimum allowed dead time is 1 usec.
	if (req_dtime_us < 1.0)
 8000a58:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8000a5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000a60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a68:	d503      	bpl.n	8000a72 <programHbridge+0xc2>
		req_dtime_us = 1.0;
 8000a6a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000a6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

	if (req_dtime_us <= 127*tDTS) //3.6946
 8000a72:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000a76:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8000c28 <programHbridge+0x278>
 8000a7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a7e:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8000a82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a8a:	d81e      	bhi.n	8000aca <programHbridge+0x11a>
	{
		DT = (uint8_t) (req_dtime_us/tDTS + 0.5);
 8000a8c:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8000a90:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000a94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a98:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a9c:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000aa0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000aa4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000aa8:	edc7 7a01 	vstr	s15, [r7, #4]
 8000aac:	793b      	ldrb	r3, [r7, #4]
 8000aae:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		if (DT > 127)
 8000ab2:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	da02      	bge.n	8000ac0 <programHbridge+0x110>
			DT = 127;
 8000aba:	237f      	movs	r3, #127	@ 0x7f
 8000abc:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		DTG = DT;
 8000ac0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000ac4:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000ac8:	e0bd      	b.n	8000c46 <programHbridge+0x296>
	}
	else if (req_dtime_us <= 127*2*tDTS) //7.3890
 8000aca:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000ace:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8000c2c <programHbridge+0x27c>
 8000ad2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ad6:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8000ada:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ae2:	d825      	bhi.n	8000b30 <programHbridge+0x180>
	{
		DT = (uint8_t) ((req_dtime_us/(2*tDTS)) - 64 + 0.5);
 8000ae4:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000ae8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000aec:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8000af0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000af4:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8000c30 <programHbridge+0x280>
 8000af8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000afc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b00:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000b04:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b08:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b0c:	edc7 7a01 	vstr	s15, [r7, #4]
 8000b10:	793b      	ldrb	r3, [r7, #4]
 8000b12:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		if (DT > 63)
 8000b16:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000b1a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b1c:	d902      	bls.n	8000b24 <programHbridge+0x174>
			DT = 63;
 8000b1e:	233f      	movs	r3, #63	@ 0x3f
 8000b20:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		DTG = DT + 0x80;
 8000b24:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000b28:	3b80      	subs	r3, #128	@ 0x80
 8000b2a:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000b2e:	e08a      	b.n	8000c46 <programHbridge+0x296>
	}
	else if (req_dtime_us <= 63*8*tDTS) //14.662
 8000b30:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000b34:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8000c34 <programHbridge+0x284>
 8000b38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b3c:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8000b40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b48:	d827      	bhi.n	8000b9a <programHbridge+0x1ea>
	{
		DT = (uint8_t) ((req_dtime_us/(8*tDTS)) - 32 + 0.5);
 8000b4a:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000b4e:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8000b52:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b56:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8000b5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b5e:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8000c38 <programHbridge+0x288>
 8000b62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000b66:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b6a:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000b6e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b72:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b76:	edc7 7a01 	vstr	s15, [r7, #4]
 8000b7a:	793b      	ldrb	r3, [r7, #4]
 8000b7c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		if (DT > 31)
 8000b80:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000b84:	2b1f      	cmp	r3, #31
 8000b86:	d902      	bls.n	8000b8e <programHbridge+0x1de>
			DT = 31;
 8000b88:	231f      	movs	r3, #31
 8000b8a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		DTG = DT + 0xC0;
 8000b8e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000b92:	3b40      	subs	r3, #64	@ 0x40
 8000b94:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000b98:	e055      	b.n	8000c46 <programHbridge+0x296>
	}
	else if (req_dtime_us <= 63*16*tDTS) //29.324
 8000b9a:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000b9e:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8000c3c <programHbridge+0x28c>
 8000ba2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ba6:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8000baa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bb2:	d845      	bhi.n	8000c40 <programHbridge+0x290>
	{
		DT = (uint8_t) ((req_dtime_us/(16*tDTS)) - 32 + 0.5);
 8000bb4:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000bb8:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8000bbc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000bc0:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8000bc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bc8:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8000c38 <programHbridge+0x288>
 8000bcc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000bd0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bd4:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000bd8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000bdc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000be0:	edc7 7a01 	vstr	s15, [r7, #4]
 8000be4:	793b      	ldrb	r3, [r7, #4]
 8000be6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		if (DT > 31)
 8000bea:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000bee:	2b1f      	cmp	r3, #31
 8000bf0:	d902      	bls.n	8000bf8 <programHbridge+0x248>
			DT = 31;
 8000bf2:	231f      	movs	r3, #31
 8000bf4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		DTG = DT + 0xE0;
 8000bf8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000bfc:	3b20      	subs	r3, #32
 8000bfe:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000c02:	e020      	b.n	8000c46 <programHbridge+0x296>
 8000c04:	f3af 8000 	nop.w
 8000c08:	00000000 	.word	0x00000000
 8000c0c:	40c38800 	.word	0x40c38800
 8000c10:	3cee500f 	.word	0x3cee500f
 8000c14:	2400001c 	.word	0x2400001c
 8000c18:	4c032156 	.word	0x4c032156
 8000c1c:	24000000 	.word	0x24000000
 8000c20:	020c8558 	.word	0x020c8558
 8000c24:	08011694 	.word	0x08011694
 8000c28:	42fe0000 	.word	0x42fe0000
 8000c2c:	437e0000 	.word	0x437e0000
 8000c30:	42800000 	.word	0x42800000
 8000c34:	43fc0000 	.word	0x43fc0000
 8000c38:	42000000 	.word	0x42000000
 8000c3c:	447c0000 	.word	0x447c0000
	}
	else
		DTG = 255;
 8000c40:	23ff      	movs	r3, #255	@ 0xff
 8000c42:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96

	uint32_t temp = TIM1->BDTR & 0xFFFFFF00;		//Mask out DTG
 8000c46:	4b54      	ldr	r3, [pc, #336]	@ (8000d98 <programHbridge+0x3e8>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c4a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000c4e:	677b      	str	r3, [r7, #116]	@ 0x74
	timBDTR = temp | DTG;							//Add new DTG
 8000c50:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000c54:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000c56:	4313      	orrs	r3, r2
 8000c58:	673b      	str	r3, [r7, #112]	@ 0x70

	//Change timer1 settings
	htim1.Init.Period = timARR;   // Updating internal structure for timer
 8000c5a:	4a50      	ldr	r2, [pc, #320]	@ (8000d9c <programHbridge+0x3ec>)
 8000c5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000c60:	60d3      	str	r3, [r2, #12]
	TIM1->ARR = timARR;			  // Update period
 8000c62:	4a4d      	ldr	r2, [pc, #308]	@ (8000d98 <programHbridge+0x3e8>)
 8000c64:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000c68:	62d3      	str	r3, [r2, #44]	@ 0x2c
	TIM1->CCR1 = timCCR1;		  // Update duty cycle
 8000c6a:	4a4b      	ldr	r2, [pc, #300]	@ (8000d98 <programHbridge+0x3e8>)
 8000c6c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000c6e:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM1->BDTR = timBDTR;	      // Update dead time
 8000c70:	4a49      	ldr	r2, [pc, #292]	@ (8000d98 <programHbridge+0x3e8>)
 8000c72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000c74:	6453      	str	r3, [r2, #68]	@ 0x44

	if (debug == 1) {
 8000c76:	4b4a      	ldr	r3, [pc, #296]	@ (8000da0 <programHbridge+0x3f0>)
 8000c78:	881b      	ldrh	r3, [r3, #0]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d16c      	bne.n	8000d58 <programHbridge+0x3a8>
		//sprintf(s_output, "ARR %lu CCR1 %lu BDTR %lu", timARR, timCCR1, timBDTR & 0xFF);
		//printString(s_output);

		float calcDT = 0;
 8000c7e:	f04f 0300 	mov.w	r3, #0
 8000c82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		//  DTG[7:5] = 0xx => DT = DTG[7:0] x tDTG with tDTG = tDTS.			 max 127*tDTS   		: 0.0000 usec - 3.6946 usec
		if ((DTG & 0x80) == 0) {
 8000c86:	f997 3096 	ldrsb.w	r3, [r7, #150]	@ 0x96
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	db0b      	blt.n	8000ca6 <programHbridge+0x2f6>
			calcDT = DTG*tDTS;
 8000c8e:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000c92:	ee07 3a90 	vmov	s15, r3
 8000c96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c9a:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ca2:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
		}
		//  DTG[7:5] = 10x => DT = (64 + DTG[5:0]) x tDTG with tDTG =2xtDTS.	 max (64 + 63)*2*tDTS  	: 3.7236 usec - 7.3890 usec
		if ((DTG & 0xC0) == 0x80) {
 8000ca6:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000caa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000cae:	2b80      	cmp	r3, #128	@ 0x80
 8000cb0:	d10f      	bne.n	8000cd2 <programHbridge+0x322>
			calcDT = (64 + (DTG & 0x3F))*2*tDTS;
 8000cb2:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000cb6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000cba:	3340      	adds	r3, #64	@ 0x40
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	ee07 3a90 	vmov	s15, r3
 8000cc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cc6:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cce:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
		}
		//  DTG[7:5] = 110 => DT = (32 + DTG[4:0]) x tDTG with tDTG =8xtDTS.     max (32 + 31)*8*tDTS   : 7.4472 usec - 14.662 usec
		if ((DTG & 0xE0) == 0xC0) {
 8000cd2:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000cd6:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000cda:	2bc0      	cmp	r3, #192	@ 0xc0
 8000cdc:	d10f      	bne.n	8000cfe <programHbridge+0x34e>
			calcDT = (32 + (DTG & 0x1F))*8*tDTS;
 8000cde:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000ce2:	f003 031f 	and.w	r3, r3, #31
 8000ce6:	3320      	adds	r3, #32
 8000ce8:	00db      	lsls	r3, r3, #3
 8000cea:	ee07 3a90 	vmov	s15, r3
 8000cee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cf2:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cfa:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
		}
		//  DTG[7:5] = 111 => DT = (32 + DTG[4:0]) x tDTG with tDTG = 16 x tDTS. max (32 + 31)*16*tDTS 	: 14.895 usec - 29.324 usec
		if ((DTG & 0xE0) == 0xE0) {
 8000cfe:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000d02:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000d06:	2be0      	cmp	r3, #224	@ 0xe0
 8000d08:	d10f      	bne.n	8000d2a <programHbridge+0x37a>
			calcDT = (32 + (DTG & 0x1F))*16*tDTS;
 8000d0a:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000d0e:	f003 031f 	and.w	r3, r3, #31
 8000d12:	3320      	adds	r3, #32
 8000d14:	011b      	lsls	r3, r3, #4
 8000d16:	ee07 3a90 	vmov	s15, r3
 8000d1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d1e:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d26:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
		}
		value_int = (uint32_t) 1000*calcDT;
 8000d2a:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8000d2e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8000da4 <programHbridge+0x3f4>
 8000d32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d3a:	ee17 3a90 	vmov	r3, s15
 8000d3e:	67bb      	str	r3, [r7, #120]	@ 0x78
		sprintf(s_output, "\n\rSet dead time: %lu (ns)\n\r", value_int);
 8000d40:	f107 030c 	add.w	r3, r7, #12
 8000d44:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000d46:	4918      	ldr	r1, [pc, #96]	@ (8000da8 <programHbridge+0x3f8>)
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f00f ff7f 	bl	8010c4c <siprintf>
		printString(s_output);
 8000d4e:	f107 030c 	add.w	r3, r7, #12
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff fd06 	bl	8000764 <printString>
	}

	//Start driving the H-bridge
	if (sHbridge.on && (TIM_CHANNEL_STATE_GET(&htim1, TIM_CHANNEL_1) == HAL_TIM_CHANNEL_STATE_READY))
 8000d58:	4b14      	ldr	r3, [pc, #80]	@ (8000dac <programHbridge+0x3fc>)
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d010      	beq.n	8000d82 <programHbridge+0x3d2>
 8000d60:	4b0e      	ldr	r3, [pc, #56]	@ (8000d9c <programHbridge+0x3ec>)
 8000d62:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d10a      	bne.n	8000d82 <programHbridge+0x3d2>
	{
		HAL_TIM_MspPostInit(&htim1);	//Setup GPIO for timer alternate function
 8000d6c:	480b      	ldr	r0, [pc, #44]	@ (8000d9c <programHbridge+0x3ec>)
 8000d6e:	f002 ff99 	bl	8003ca4 <HAL_TIM_MspPostInit>
		//Start TIMER 1 PWM & interrupts
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  //This will start channel PWM1
 8000d72:	2100      	movs	r1, #0
 8000d74:	4809      	ldr	r0, [pc, #36]	@ (8000d9c <programHbridge+0x3ec>)
 8000d76:	f00d f833 	bl	800dde0 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1); //This will start channel PWM1N
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4807      	ldr	r0, [pc, #28]	@ (8000d9c <programHbridge+0x3ec>)
 8000d7e:	f00e f8c1 	bl	800ef04 <HAL_TIMEx_PWMN_Start>
	}

	//Stop driving the H-bridge
	if (!sHbridge.on)
 8000d82:	4b0a      	ldr	r3, [pc, #40]	@ (8000dac <programHbridge+0x3fc>)
 8000d84:	881b      	ldrh	r3, [r3, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d101      	bne.n	8000d8e <programHbridge+0x3de>
	{
		stopHbridge();
 8000d8a:	f7ff fdbb 	bl	8000904 <stopHbridge>
	}

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);

}
 8000d8e:	bf00      	nop
 8000d90:	3798      	adds	r7, #152	@ 0x98
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40010000 	.word	0x40010000
 8000d9c:	24000d4c 	.word	0x24000d4c
 8000da0:	24000000 	.word	0x24000000
 8000da4:	447a0000 	.word	0x447a0000
 8000da8:	080116b0 	.word	0x080116b0
 8000dac:	2400001c 	.word	0x2400001c

08000db0 <convertADC12data>:
#define ADC1_VplaL1			4	//Plasma voltage L1
#define ADC2_VplaL2			5	//Plasma voltage L2

//Convert ADC1 & ADC2 data to voltages and current
float convertADC12data(uint32_t item, char **text)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
	float result = 0;
 8000dba:	f04f 0300 	mov.w	r3, #0
 8000dbe:	60fb      	str	r3, [r7, #12]
* 3.3           *   (ADCData/65536.0)       *    1000
*   ^                   ^       ^                  ^
*   |                   |       |                  |
 * full scale V      Raw Data   Max ADC Value    Convert to mV
 */
	switch (item % (2*ADC12_NO_CHANNELS)) {
 8000dc0:	6879      	ldr	r1, [r7, #4]
 8000dc2:	4b7d      	ldr	r3, [pc, #500]	@ (8000fb8 <convertADC12data+0x208>)
 8000dc4:	fba3 2301 	umull	r2, r3, r3, r1
 8000dc8:	089a      	lsrs	r2, r3, #2
 8000dca:	4613      	mov	r3, r2
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	4413      	add	r3, r2
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	1aca      	subs	r2, r1, r3
 8000dd4:	2a05      	cmp	r2, #5
 8000dd6:	f200 80d8 	bhi.w	8000f8a <convertADC12data+0x1da>
 8000dda:	a301      	add	r3, pc, #4	@ (adr r3, 8000de0 <convertADC12data+0x30>)
 8000ddc:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8000de0:	08000df9 	.word	0x08000df9
 8000de4:	08000e1d 	.word	0x08000e1d
 8000de8:	08000e65 	.word	0x08000e65
 8000dec:	08000ea7 	.word	0x08000ea7
 8000df0:	08000ee9 	.word	0x08000ee9
 8000df4:	08000f2f 	.word	0x08000f2f
		case ADC1_TIM1_CH1:
			result = sADC.adc12_data[item];
 8000df8:	4a70      	ldr	r2, [pc, #448]	@ (8000fbc <convertADC12data+0x20c>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e00:	ee07 3a90 	vmov	s15, r3
 8000e04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e08:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f000 80b0 	beq.w	8000f74 <convertADC12data+0x1c4>
				*text ="ADC1_TIM1_CH1";
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	4a6a      	ldr	r2, [pc, #424]	@ (8000fc0 <convertADC12data+0x210>)
 8000e18:	601a      	str	r2, [r3, #0]
			break;
 8000e1a:	e0ab      	b.n	8000f74 <convertADC12data+0x1c4>

		case ADC2_Is:
			V = 3.3*(((float) sADC.adc12_data[item])/65536.0)*1000;
 8000e1c:	4a67      	ldr	r2, [pc, #412]	@ (8000fbc <convertADC12data+0x20c>)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e24:	ee07 3a90 	vmov	s15, r3
 8000e28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e2c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000e30:	ed9f 5b5b 	vldr	d5, [pc, #364]	@ 8000fa0 <convertADC12data+0x1f0>
 8000e34:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e38:	ed9f 6b5b 	vldr	d6, [pc, #364]	@ 8000fa8 <convertADC12data+0x1f8>
 8000e3c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e40:	ed9f 6b5b 	vldr	d6, [pc, #364]	@ 8000fb0 <convertADC12data+0x200>
 8000e44:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e48:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e4c:	edc7 7a02 	vstr	s15, [r7, #8]
			result =  V;//2000*(V - 1.585714)/3.594286;
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	60fb      	str	r3, [r7, #12]
			if (text)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	f000 808e 	beq.w	8000f78 <convertADC12data+0x1c8>
				*text ="ADC2_Is(mA)";
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	4a59      	ldr	r2, [pc, #356]	@ (8000fc4 <convertADC12data+0x214>)
 8000e60:	601a      	str	r2, [r3, #0]
			break;
 8000e62:	e089      	b.n	8000f78 <convertADC12data+0x1c8>

		case ADC1_VbriS1:
			result =  3.3*(((float) sADC.adc12_data[item])/65536.0)*1000; //1000*((12.0+2000.0)/12.0)*3.3*(((float) sADC.adc12_data[item])/65536.0);
 8000e64:	4a55      	ldr	r2, [pc, #340]	@ (8000fbc <convertADC12data+0x20c>)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e6c:	ee07 3a90 	vmov	s15, r3
 8000e70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e74:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000e78:	ed9f 5b49 	vldr	d5, [pc, #292]	@ 8000fa0 <convertADC12data+0x1f0>
 8000e7c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e80:	ed9f 6b49 	vldr	d6, [pc, #292]	@ 8000fa8 <convertADC12data+0x1f8>
 8000e84:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e88:	ed9f 6b49 	vldr	d6, [pc, #292]	@ 8000fb0 <convertADC12data+0x200>
 8000e8c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e90:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e94:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d06e      	beq.n	8000f7c <convertADC12data+0x1cc>
				*text ="ADC1_VbriS1(mV)";
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	4a49      	ldr	r2, [pc, #292]	@ (8000fc8 <convertADC12data+0x218>)
 8000ea2:	601a      	str	r2, [r3, #0]
			break;
 8000ea4:	e06a      	b.n	8000f7c <convertADC12data+0x1cc>

		case ADC2_VbriS2:
			result =  3.3*(((float) sADC.adc12_data[item])/65536.0) * 1000;//1000*((12.0+2000.0)/12.0)*3.3*(((float) sADC.adc12_data[item])/65536.0);
 8000ea6:	4a45      	ldr	r2, [pc, #276]	@ (8000fbc <convertADC12data+0x20c>)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000eae:	ee07 3a90 	vmov	s15, r3
 8000eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000eb6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000eba:	ed9f 5b39 	vldr	d5, [pc, #228]	@ 8000fa0 <convertADC12data+0x1f0>
 8000ebe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ec2:	ed9f 6b39 	vldr	d6, [pc, #228]	@ 8000fa8 <convertADC12data+0x1f8>
 8000ec6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000eca:	ed9f 6b39 	vldr	d6, [pc, #228]	@ 8000fb0 <convertADC12data+0x200>
 8000ece:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ed2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ed6:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d04f      	beq.n	8000f80 <convertADC12data+0x1d0>
				*text ="ADC2_VbriS2(mV)";
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	4a3a      	ldr	r2, [pc, #232]	@ (8000fcc <convertADC12data+0x21c>)
 8000ee4:	601a      	str	r2, [r3, #0]
			break;
 8000ee6:	e04b      	b.n	8000f80 <convertADC12data+0x1d0>

		case ADC1_VplaL1:
			V = 3.3*(((float) sADC.adc12_data[item])/65536.0) * 1000;
 8000ee8:	4a34      	ldr	r2, [pc, #208]	@ (8000fbc <convertADC12data+0x20c>)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ef0:	ee07 3a90 	vmov	s15, r3
 8000ef4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ef8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000efc:	ed9f 5b28 	vldr	d5, [pc, #160]	@ 8000fa0 <convertADC12data+0x1f0>
 8000f00:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f04:	ed9f 6b28 	vldr	d6, [pc, #160]	@ 8000fa8 <convertADC12data+0x1f8>
 8000f08:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f0c:	ed9f 6b28 	vldr	d6, [pc, #160]	@ 8000fb0 <convertADC12data+0x200>
 8000f10:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f14:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f18:	edc7 7a02 	vstr	s15, [r7, #8]
			result =  V;//1E6*(V-1.648348)/0.999;
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	60fb      	str	r3, [r7, #12]
			if (text)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d02e      	beq.n	8000f84 <convertADC12data+0x1d4>
				*text ="ADC1_VplaL1(mV)";
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	4a29      	ldr	r2, [pc, #164]	@ (8000fd0 <convertADC12data+0x220>)
 8000f2a:	601a      	str	r2, [r3, #0]
			break;
 8000f2c:	e02a      	b.n	8000f84 <convertADC12data+0x1d4>

		case ADC2_VplaL2:
			//V is the directly measured voltage from the ADC in mV
			V = 3.3*(((float) sADC.adc12_data[item])/65536.0) * 1000;
 8000f2e:	4a23      	ldr	r2, [pc, #140]	@ (8000fbc <convertADC12data+0x20c>)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f36:	ee07 3a90 	vmov	s15, r3
 8000f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f3e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000f42:	ed9f 5b17 	vldr	d5, [pc, #92]	@ 8000fa0 <convertADC12data+0x1f0>
 8000f46:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f4a:	ed9f 6b17 	vldr	d6, [pc, #92]	@ 8000fa8 <convertADC12data+0x1f8>
 8000f4e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f52:	ed9f 6b17 	vldr	d6, [pc, #92]	@ 8000fb0 <convertADC12data+0x200>
 8000f56:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f5a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f5e:	edc7 7a02 	vstr	s15, [r7, #8]
			//result is the True voltage at L2 (corrected for voltage divider)
			result =  V;//1E6*(V-1.648348)/0.999;
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	60fb      	str	r3, [r7, #12]
			if (text)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d00d      	beq.n	8000f88 <convertADC12data+0x1d8>
				*text ="ADC2_VplaL2(mV)";
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	4a19      	ldr	r2, [pc, #100]	@ (8000fd4 <convertADC12data+0x224>)
 8000f70:	601a      	str	r2, [r3, #0]
			break;
 8000f72:	e009      	b.n	8000f88 <convertADC12data+0x1d8>
			break;
 8000f74:	bf00      	nop
 8000f76:	e008      	b.n	8000f8a <convertADC12data+0x1da>
			break;
 8000f78:	bf00      	nop
 8000f7a:	e006      	b.n	8000f8a <convertADC12data+0x1da>
			break;
 8000f7c:	bf00      	nop
 8000f7e:	e004      	b.n	8000f8a <convertADC12data+0x1da>
			break;
 8000f80:	bf00      	nop
 8000f82:	e002      	b.n	8000f8a <convertADC12data+0x1da>
			break;
 8000f84:	bf00      	nop
 8000f86:	e000      	b.n	8000f8a <convertADC12data+0x1da>
			break;
 8000f88:	bf00      	nop
	}

	return(result);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	ee07 3a90 	vmov	s15, r3
}
 8000f90:	eeb0 0a67 	vmov.f32	s0, s15
 8000f94:	3714      	adds	r7, #20
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	00000000 	.word	0x00000000
 8000fa4:	40f00000 	.word	0x40f00000
 8000fa8:	66666666 	.word	0x66666666
 8000fac:	400a6666 	.word	0x400a6666
 8000fb0:	00000000 	.word	0x00000000
 8000fb4:	408f4000 	.word	0x408f4000
 8000fb8:	aaaaaaab 	.word	0xaaaaaaab
 8000fbc:	240001b4 	.word	0x240001b4
 8000fc0:	080116cc 	.word	0x080116cc
 8000fc4:	080116dc 	.word	0x080116dc
 8000fc8:	080116e8 	.word	0x080116e8
 8000fcc:	080116f8 	.word	0x080116f8
 8000fd0:	08011708 	.word	0x08011708
 8000fd4:	08011718 	.word	0x08011718

08000fd8 <printADC12data>:

//Print measured ADC1 and ADC2 data on UART3
void printADC12data(void)
{
 8000fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fda:	b0f7      	sub	sp, #476	@ 0x1dc
 8000fdc:	af10      	add	r7, sp, #64	@ 0x40
	char *p_text[2*ADC12_NO_CHANNELS];
	float result[2*ADC12_NO_CHANNELS];

	if (debug == 1)
 8000fde:	4ba0      	ldr	r3, [pc, #640]	@ (8001260 <printADC12data+0x288>)
 8000fe0:	881b      	ldrh	r3, [r3, #0]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	f040 8136 	bne.w	8001254 <printADC12data+0x27c>
	{
		printCR();
 8000fe8:	f7ff fbac 	bl	8000744 <printCR>
		printNumber("No data: ", sADC.nADC12Read, 1);
 8000fec:	4b9d      	ldr	r3, [pc, #628]	@ (8001264 <printADC12data+0x28c>)
 8000fee:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	489b      	ldr	r0, [pc, #620]	@ (8001268 <printADC12data+0x290>)
 8000ffa:	f7ff fbf5 	bl	80007e8 <printNumber>
		for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i++)
 8000ffe:	2300      	movs	r3, #0
 8001000:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8001004:	e119      	b.n	800123a <printADC12data+0x262>
		{
			int ii = i % (2*ADC12_NO_CHANNELS);
 8001006:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800100a:	4b98      	ldr	r3, [pc, #608]	@ (800126c <printADC12data+0x294>)
 800100c:	fb83 3102 	smull	r3, r1, r3, r2
 8001010:	17d3      	asrs	r3, r2, #31
 8001012:	1ac9      	subs	r1, r1, r3
 8001014:	460b      	mov	r3, r1
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	440b      	add	r3, r1
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
			result[ii] = convertADC12data(i, &p_text[ii]);
 8001022:	f8d7 0194 	ldr.w	r0, [r7, #404]	@ 0x194
 8001026:	f507 72bc 	add.w	r2, r7, #376	@ 0x178
 800102a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	4413      	add	r3, r2
 8001032:	4619      	mov	r1, r3
 8001034:	f7ff febc 	bl	8000db0 <convertADC12data>
 8001038:	eef0 7a40 	vmov.f32	s15, s0
 800103c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001046:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800104a:	4413      	add	r3, r2
 800104c:	3b38      	subs	r3, #56	@ 0x38
 800104e:	edc3 7a00 	vstr	s15, [r3]
			char text[300];
			if (ii == 5)
 8001052:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001056:	2b05      	cmp	r3, #5
 8001058:	f040 80ea 	bne.w	8001230 <printADC12data+0x258>
			{
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 800105c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001060:	4a82      	ldr	r2, [pc, #520]	@ (800126c <printADC12data+0x294>)
 8001062:	fb82 1203 	smull	r1, r2, r2, r3
 8001066:	17db      	asrs	r3, r3, #31
 8001068:	eba2 0c03 	sub.w	ip, r2, r3
						p_text[ii-5],                     sADC.adc12_data[i-5],
 800106c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001070:	3b05      	subs	r3, #5
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001078:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800107c:	4413      	add	r3, r2
 800107e:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8001082:	62fb      	str	r3, [r7, #44]	@ 0x2c
						p_text[ii-5],                     sADC.adc12_data[i-5],
 8001084:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001088:	3b05      	subs	r3, #5
 800108a:	4a76      	ldr	r2, [pc, #472]	@ (8001264 <printADC12data+0x28c>)
 800108c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001090:	62bb      	str	r3, [r7, #40]	@ 0x28
						p_text[ii-4], (int) result[ii-4], sADC.adc12_data[i-4],
 8001092:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001096:	3b04      	subs	r3, #4
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 800109e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80010a2:	18d3      	adds	r3, r2, r3
 80010a4:	f853 5c20 	ldr.w	r5, [r3, #-32]
						p_text[ii-4], (int) result[ii-4], sADC.adc12_data[i-4],
 80010a8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80010ac:	3b04      	subs	r3, #4
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 80010b4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80010b8:	18d3      	adds	r3, r2, r3
 80010ba:	3b38      	subs	r3, #56	@ 0x38
 80010bc:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80010c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010c4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
						p_text[ii-4], (int) result[ii-4], sADC.adc12_data[i-4],
 80010c8:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80010cc:	3b04      	subs	r3, #4
 80010ce:	4a65      	ldr	r2, [pc, #404]	@ (8001264 <printADC12data+0x28c>)
 80010d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80010d4:	623b      	str	r3, [r7, #32]
						p_text[ii-3], (int) result[ii-3], sADC.adc12_data[i-3],
 80010d6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80010da:	3b03      	subs	r3, #3
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 80010e2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80010e6:	18d3      	adds	r3, r2, r3
 80010e8:	f853 6c20 	ldr.w	r6, [r3, #-32]
						p_text[ii-3], (int) result[ii-3], sADC.adc12_data[i-3],
 80010ec:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80010f0:	3b03      	subs	r3, #3
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 80010f8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80010fc:	18d3      	adds	r3, r2, r3
 80010fe:	3b38      	subs	r3, #56	@ 0x38
 8001100:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001104:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001108:	edc7 7a07 	vstr	s15, [r7, #28]
						p_text[ii-3], (int) result[ii-3], sADC.adc12_data[i-3],
 800110c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001110:	3b03      	subs	r3, #3
 8001112:	4a54      	ldr	r2, [pc, #336]	@ (8001264 <printADC12data+0x28c>)
 8001114:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001118:	61bb      	str	r3, [r7, #24]
						p_text[ii-2], (int) result[ii-2], sADC.adc12_data[i-2],
 800111a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800111e:	3b02      	subs	r3, #2
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 8001126:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800112a:	18d3      	adds	r3, r2, r3
 800112c:	f853 2c20 	ldr.w	r2, [r3, #-32]
 8001130:	617a      	str	r2, [r7, #20]
						p_text[ii-2], (int) result[ii-2], sADC.adc12_data[i-2],
 8001132:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001136:	3b02      	subs	r3, #2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	f503 71b4 	add.w	r1, r3, #360	@ 0x168
 800113e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001142:	18cb      	adds	r3, r1, r3
 8001144:	3b38      	subs	r3, #56	@ 0x38
 8001146:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 800114a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800114e:	edc7 7a04 	vstr	s15, [r7, #16]
						p_text[ii-2], (int) result[ii-2], sADC.adc12_data[i-2],
 8001152:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001156:	3b02      	subs	r3, #2
 8001158:	4a42      	ldr	r2, [pc, #264]	@ (8001264 <printADC12data+0x28c>)
 800115a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 800115e:	60fb      	str	r3, [r7, #12]
						p_text[ii-1], (int) result[ii-1], sADC.adc12_data[i-1],
 8001160:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001164:	3b01      	subs	r3, #1
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	f503 71b4 	add.w	r1, r3, #360	@ 0x168
 800116c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001170:	18cb      	adds	r3, r1, r3
 8001172:	f853 1c20 	ldr.w	r1, [r3, #-32]
 8001176:	60b9      	str	r1, [r7, #8]
						p_text[ii-1], (int) result[ii-1], sADC.adc12_data[i-1],
 8001178:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800117c:	3b01      	subs	r3, #1
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	f503 70b4 	add.w	r0, r3, #360	@ 0x168
 8001184:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001188:	18c3      	adds	r3, r0, r3
 800118a:	3b38      	subs	r3, #56	@ 0x38
 800118c:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001190:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001194:	edc7 7a01 	vstr	s15, [r7, #4]
						p_text[ii-1], (int) result[ii-1], sADC.adc12_data[i-1],
 8001198:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800119c:	1e5a      	subs	r2, r3, #1
 800119e:	4b31      	ldr	r3, [pc, #196]	@ (8001264 <printADC12data+0x28c>)
 80011a0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80011a4:	603b      	str	r3, [r7, #0]
 80011a6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	f503 70b4 	add.w	r0, r3, #360	@ 0x168
 80011b0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011b4:	18c3      	adds	r3, r0, r3
 80011b6:	f853 1c20 	ldr.w	r1, [r3, #-32]
						p_text[ii],   (int) result[ii],   sADC.adc12_data[i]);
 80011ba:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	f503 70b4 	add.w	r0, r3, #360	@ 0x168
 80011c4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011c8:	18c3      	adds	r3, r0, r3
 80011ca:	3b38      	subs	r3, #56	@ 0x38
 80011cc:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80011d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011d4:	ee17 4a90 	vmov	r4, s15
						p_text[ii],   (int) result[ii],   sADC.adc12_data[i]);
 80011d8:	4a22      	ldr	r2, [pc, #136]	@ (8001264 <printADC12data+0x28c>)
 80011da:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80011de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80011e2:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80011e6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80011e8:	940e      	str	r4, [sp, #56]	@ 0x38
 80011ea:	910d      	str	r1, [sp, #52]	@ 0x34
 80011ec:	683c      	ldr	r4, [r7, #0]
 80011ee:	940c      	str	r4, [sp, #48]	@ 0x30
 80011f0:	687c      	ldr	r4, [r7, #4]
 80011f2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	910a      	str	r1, [sp, #40]	@ 0x28
 80011f8:	68f9      	ldr	r1, [r7, #12]
 80011fa:	9109      	str	r1, [sp, #36]	@ 0x24
 80011fc:	6939      	ldr	r1, [r7, #16]
 80011fe:	9108      	str	r1, [sp, #32]
 8001200:	697a      	ldr	r2, [r7, #20]
 8001202:	9207      	str	r2, [sp, #28]
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	9206      	str	r2, [sp, #24]
 8001208:	69fa      	ldr	r2, [r7, #28]
 800120a:	9205      	str	r2, [sp, #20]
 800120c:	9604      	str	r6, [sp, #16]
 800120e:	6a3a      	ldr	r2, [r7, #32]
 8001210:	9203      	str	r2, [sp, #12]
 8001212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001214:	9202      	str	r2, [sp, #8]
 8001216:	9501      	str	r5, [sp, #4]
 8001218:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800121a:	9200      	str	r2, [sp, #0]
 800121c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800121e:	4662      	mov	r2, ip
 8001220:	4913      	ldr	r1, [pc, #76]	@ (8001270 <printADC12data+0x298>)
 8001222:	f00f fd13 	bl	8010c4c <siprintf>
				printString(text);
 8001226:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff fa9a 	bl	8000764 <printString>
		for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i++)
 8001230:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001234:	3301      	adds	r3, #1
 8001236:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 800123a:	4b0a      	ldr	r3, [pc, #40]	@ (8001264 <printADC12data+0x28c>)
 800123c:	f8d3 2708 	ldr.w	r2, [r3, #1800]	@ 0x708
 8001240:	4613      	mov	r3, r2
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	4413      	add	r3, r2
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	461a      	mov	r2, r3
 800124a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800124e:	429a      	cmp	r2, r3
 8001250:	f63f aed9 	bhi.w	8001006 <printADC12data+0x2e>
			}
		}
	}
}
 8001254:	bf00      	nop
 8001256:	f507 77ce 	add.w	r7, r7, #412	@ 0x19c
 800125a:	46bd      	mov	sp, r7
 800125c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800125e:	bf00      	nop
 8001260:	24000000 	.word	0x24000000
 8001264:	240001b4 	.word	0x240001b4
 8001268:	08011728 	.word	0x08011728
 800126c:	2aaaaaab 	.word	0x2aaaaaab
 8001270:	08011734 	.word	0x08011734

08001274 <freqCorrection>:

//Calculate frequency correction
//Returns 1 if a valid frequency correction is calculated, otherwise 0
uint8_t freqCorrection(int16_t *freqCorr)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08e      	sub	sp, #56	@ 0x38
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	int start_index=0;
 800127c:	2300      	movs	r3, #0
 800127e:	637b      	str	r3, [r7, #52]	@ 0x34
	int stop_index=0;
 8001280:	2300      	movs	r3, #0
 8001282:	633b      	str	r3, [r7, #48]	@ 0x30
	int number_of_lows=0;
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]
	int lowDetected = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int highDetected = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	62bb      	str	r3, [r7, #40]	@ 0x28
	float min = 100000;
 8001290:	4b55      	ldr	r3, [pc, #340]	@ (80013e8 <freqCorrection+0x174>)
 8001292:	627b      	str	r3, [r7, #36]	@ 0x24
	float max = -100000;
 8001294:	4b55      	ldr	r3, [pc, #340]	@ (80013ec <freqCorrection+0x178>)
 8001296:	623b      	str	r3, [r7, #32]
	float norm = 0;
 8001298:	f04f 0300 	mov.w	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]

	//Find when MOSFET branch is on (start and stop time)
	//Find minimum and maximum value of bridge current
 	for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i=i+6)
 800129e:	2300      	movs	r3, #0
 80012a0:	61bb      	str	r3, [r7, #24]
 80012a2:	e043      	b.n	800132c <freqCorrection+0xb8>
	{
		// Find minimum of bridge current
		float data = convertADC12data(i+ADC2_Is, NULL);
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	3301      	adds	r3, #1
 80012a8:	2100      	movs	r1, #0
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fd80 	bl	8000db0 <convertADC12data>
 80012b0:	ed87 0a02 	vstr	s0, [r7, #8]
		if (data < min)
 80012b4:	ed97 7a02 	vldr	s14, [r7, #8]
 80012b8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80012bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c4:	d501      	bpl.n	80012ca <freqCorrection+0x56>
			min = data;
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	627b      	str	r3, [r7, #36]	@ 0x24
			//HAL_UART_Transmit(huart3, min);
			printCR();
 80012ca:	f7ff fa3b 	bl	8000744 <printCR>
		// Find maximum
		if (data > max)
 80012ce:	ed97 7a02 	vldr	s14, [r7, #8]
 80012d2:	edd7 7a08 	vldr	s15, [r7, #32]
 80012d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012de:	dd01      	ble.n	80012e4 <freqCorrection+0x70>
			max = data;
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	623b      	str	r3, [r7, #32]

		// Check for low
		if (!lowDetected && sADC.adc12_data[i+ADC1_TIM1_CH1] < 500)
 80012e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d10a      	bne.n	8001300 <freqCorrection+0x8c>
 80012ea:	4a41      	ldr	r2, [pc, #260]	@ (80013f0 <freqCorrection+0x17c>)
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012f2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80012f6:	d203      	bcs.n	8001300 <freqCorrection+0x8c>
		{
			//First low detected
			start_index = i; 		// Store index of first low detected
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	637b      	str	r3, [r7, #52]	@ 0x34
			lowDetected = 1;
 80012fc:	2301      	movs	r3, #1
 80012fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
		}
		//Check for high
		if (!highDetected && lowDetected && sADC.adc12_data[i+ADC1_TIM1_CH1] > 65000)
 8001300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001302:	2b00      	cmp	r3, #0
 8001304:	d10f      	bne.n	8001326 <freqCorrection+0xb2>
 8001306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001308:	2b00      	cmp	r3, #0
 800130a:	d00c      	beq.n	8001326 <freqCorrection+0xb2>
 800130c:	4a38      	ldr	r2, [pc, #224]	@ (80013f0 <freqCorrection+0x17c>)
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001314:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 8001318:	4293      	cmp	r3, r2
 800131a:	d904      	bls.n	8001326 <freqCorrection+0xb2>
		{
			//High after first low detected
			stop_index = i-6;		// Store index of last low
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	3b06      	subs	r3, #6
 8001320:	633b      	str	r3, [r7, #48]	@ 0x30
			highDetected = 1;
 8001322:	2301      	movs	r3, #1
 8001324:	62bb      	str	r3, [r7, #40]	@ 0x28
 	for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i=i+6)
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	3306      	adds	r3, #6
 800132a:	61bb      	str	r3, [r7, #24]
 800132c:	4b30      	ldr	r3, [pc, #192]	@ (80013f0 <freqCorrection+0x17c>)
 800132e:	f8d3 2708 	ldr.w	r2, [r3, #1800]	@ 0x708
 8001332:	4613      	mov	r3, r2
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	4413      	add	r3, r2
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	461a      	mov	r2, r3
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	429a      	cmp	r2, r3
 8001340:	d8b0      	bhi.n	80012a4 <freqCorrection+0x30>
		}
	}

	// Check maximum and minimum difference
	norm = max - min;
 8001342:	ed97 7a08 	vldr	s14, [r7, #32]
 8001346:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800134a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800134e:	edc7 7a07 	vstr	s15, [r7, #28]
	if (norm < 10)
 8001352:	edd7 7a07 	vldr	s15, [r7, #28]
 8001356:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800135a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800135e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001362:	d501      	bpl.n	8001368 <freqCorrection+0xf4>
		norm = max;
 8001364:	6a3b      	ldr	r3, [r7, #32]
 8001366:	61fb      	str	r3, [r7, #28]

	number_of_lows = (stop_index - start_index)/6 + 1;
 8001368:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800136a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	4a21      	ldr	r2, [pc, #132]	@ (80013f4 <freqCorrection+0x180>)
 8001370:	fb82 1203 	smull	r1, r2, r2, r3
 8001374:	17db      	asrs	r3, r3, #31
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	3301      	adds	r3, #1
 800137a:	617b      	str	r3, [r7, #20]
	if (lowDetected && highDetected && (number_of_lows >= 5))
 800137c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800137e:	2b00      	cmp	r3, #0
 8001380:	d02c      	beq.n	80013dc <freqCorrection+0x168>
 8001382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001384:	2b00      	cmp	r3, #0
 8001386:	d029      	beq.n	80013dc <freqCorrection+0x168>
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	2b04      	cmp	r3, #4
 800138c:	dd26      	ble.n	80013dc <freqCorrection+0x168>
	{
		float upper = convertADC12data(start_index+ADC2_Is+6, NULL);
 800138e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001390:	3307      	adds	r3, #7
 8001392:	2100      	movs	r1, #0
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fd0b 	bl	8000db0 <convertADC12data>
 800139a:	ed87 0a04 	vstr	s0, [r7, #16]
		float lower = convertADC12data(stop_index+ADC2_Is-6, NULL);
 800139e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013a0:	3b05      	subs	r3, #5
 80013a2:	2100      	movs	r1, #0
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fd03 	bl	8000db0 <convertADC12data>
 80013aa:	ed87 0a03 	vstr	s0, [r7, #12]
		*freqCorr = (int16_t) 1000*(upper - lower)/norm;
 80013ae:	ed97 7a04 	vldr	s14, [r7, #16]
 80013b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80013b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ba:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80013f8 <freqCorrection+0x184>
 80013be:	ee67 6a87 	vmul.f32	s13, s15, s14
 80013c2:	ed97 7a07 	vldr	s14, [r7, #28]
 80013c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013ce:	ee17 3a90 	vmov	r3, s15
 80013d2:	b21a      	sxth	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	801a      	strh	r2, [r3, #0]
		return(1);
 80013d8:	2301      	movs	r3, #1
 80013da:	e000      	b.n	80013de <freqCorrection+0x16a>
	}
	else
		return(0);
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3738      	adds	r7, #56	@ 0x38
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	47c35000 	.word	0x47c35000
 80013ec:	c7c35000 	.word	0xc7c35000
 80013f0:	240001b4 	.word	0x240001b4
 80013f4:	2aaaaaab 	.word	0x2aaaaaab
 80013f8:	447a0000 	.word	0x447a0000
 80013fc:	00000000 	.word	0x00000000

08001400 <measureBridgePlasmaADC12>:


// Measure bridge current, plasma voltage, and bridge current using ADC1 and ADC2 for one period
// After the measurement is done the function doneMeasuringBridgePlasmaADC12 is called
void measureBridgePlasmaADC12(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_SET);

	//Calculate number of reads needed for one period
	sADC.nADC12Read = 2 * ((uint32_t) ((1/(float) sHbridge.frequency)/ADC12_GROUP_READTIME));
 8001406:	4b26      	ldr	r3, [pc, #152]	@ (80014a0 <measureBridgePlasmaADC12+0xa0>)
 8001408:	885b      	ldrh	r3, [r3, #2]
 800140a:	ee07 3a90 	vmov	s15, r3
 800140e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001412:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001416:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800141a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800141e:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8001498 <measureBridgePlasmaADC12+0x98>
 8001422:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001426:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800142a:	ee17 3a90 	vmov	r3, s15
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	4a1c      	ldr	r2, [pc, #112]	@ (80014a4 <measureBridgePlasmaADC12+0xa4>)
 8001432:	f8c2 3708 	str.w	r3, [r2, #1800]	@ 0x708
	sADC.nADC12Read +=2; //Add to see the start of next period
 8001436:	4b1b      	ldr	r3, [pc, #108]	@ (80014a4 <measureBridgePlasmaADC12+0xa4>)
 8001438:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
 800143c:	3302      	adds	r3, #2
 800143e:	4a19      	ldr	r2, [pc, #100]	@ (80014a4 <measureBridgePlasmaADC12+0xa4>)
 8001440:	f8c2 3708 	str.w	r3, [r2, #1800]	@ 0x708

	//Start ADC1 and ADC2 measurements
	if (sADC.nADC12Read <= ADC12_MAX_GROUP)
 8001444:	4b17      	ldr	r3, [pc, #92]	@ (80014a4 <measureBridgePlasmaADC12+0xa4>)
 8001446:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
 800144a:	2b64      	cmp	r3, #100	@ 0x64
 800144c:	d81a      	bhi.n	8001484 <measureBridgePlasmaADC12+0x84>
	{
		//Calculate the number DMA transfers needed
		uint32_t noDMARequests = ADC12_NO_CHANNELS*sADC.nADC12Read;
 800144e:	4b15      	ldr	r3, [pc, #84]	@ (80014a4 <measureBridgePlasmaADC12+0xa4>)
 8001450:	f8d3 2708 	ldr.w	r2, [r3, #1800]	@ 0x708
 8001454:	4613      	mov	r3, r2
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	4413      	add	r3, r2
 800145a:	607b      	str	r3, [r7, #4]

		// Start reading ADC1 and ADC2
		sADC.adc12_reading = 1;
 800145c:	4b11      	ldr	r3, [pc, #68]	@ (80014a4 <measureBridgePlasmaADC12+0xa4>)
 800145e:	2201      	movs	r2, #1
 8001460:	f8a3 270e 	strh.w	r2, [r3, #1806]	@ 0x70e

		//This will start the ADC1 and ADC2 measurements when H-BRIDGE_B_CTRL (TIM1_CH1) goes from 0 to 1.
		//When the measurements are done doneMeasuringBridgePlasmaADC12 is called.
		HAL_StatusTypeDef HALresp = HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t *) sADC.adc12_data, noDMARequests);
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	490f      	ldr	r1, [pc, #60]	@ (80014a4 <measureBridgePlasmaADC12+0xa4>)
 8001468:	480f      	ldr	r0, [pc, #60]	@ (80014a8 <measureBridgePlasmaADC12+0xa8>)
 800146a:	f005 fc11 	bl	8006c90 <HAL_ADCEx_MultiModeStart_DMA>
 800146e:	4603      	mov	r3, r0
 8001470:	70fb      	strb	r3, [r7, #3]
		if (HALresp != HAL_OK)
 8001472:	78fb      	ldrb	r3, [r7, #3]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d008      	beq.n	800148a <measureBridgePlasmaADC12+0x8a>
		{
			printHALErrorStatus(HALresp, "measureBridgePlasmaADC12");
 8001478:	78fb      	ldrb	r3, [r7, #3]
 800147a:	490c      	ldr	r1, [pc, #48]	@ (80014ac <measureBridgePlasmaADC12+0xac>)
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff f9f9 	bl	8000874 <printHALErrorStatus>
	}
	else
		printString("** ERROR ** pADC.nRead > ADC12_MAX_GROUP");

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
}
 8001482:	e002      	b.n	800148a <measureBridgePlasmaADC12+0x8a>
		printString("** ERROR ** pADC.nRead > ADC12_MAX_GROUP");
 8001484:	480a      	ldr	r0, [pc, #40]	@ (80014b0 <measureBridgePlasmaADC12+0xb0>)
 8001486:	f7ff f96d 	bl	8000764 <printString>
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	f3af 8000 	nop.w
 8001498:	a0b5ed8d 	.word	0xa0b5ed8d
 800149c:	3eb0c6f7 	.word	0x3eb0c6f7
 80014a0:	2400001c 	.word	0x2400001c
 80014a4:	240001b4 	.word	0x240001b4
 80014a8:	24000908 	.word	0x24000908
 80014ac:	0801178c 	.word	0x0801178c
 80014b0:	080117a8 	.word	0x080117a8

080014b4 <doneMeasuringBridgePlasmaADC12>:

// Done measuring bridge current, plasma voltage, and bridge current
void doneMeasuringBridgePlasmaADC12(uint32_t errorCode)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	static uint32_t count = 0;

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_SET);

	count++;
 80014bc:	4b20      	ldr	r3, [pc, #128]	@ (8001540 <doneMeasuringBridgePlasmaADC12+0x8c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	3301      	adds	r3, #1
 80014c2:	4a1f      	ldr	r2, [pc, #124]	@ (8001540 <doneMeasuringBridgePlasmaADC12+0x8c>)
 80014c4:	6013      	str	r3, [r2, #0]

	// Done reading ADC1 and ADC2
	sADC.adc12_reading = 0;
 80014c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001544 <doneMeasuringBridgePlasmaADC12+0x90>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	f8a3 270e 	strh.w	r2, [r3, #1806]	@ 0x70e

	if (errorCode == HAL_ADC_ERROR_NONE)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d124      	bne.n	800151e <doneMeasuringBridgePlasmaADC12+0x6a>

			//TODO Check plasma voltage VplaL1 and VplaL2 (To high? Not present?)
			//TODO Calculate plasma voltage Vrms, Vmax and Vmin

			//Adjust H-bridge frequency
			if (powerStatus == V500_ON)
 80014d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001548 <doneMeasuringBridgePlasmaADC12+0x94>)
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d127      	bne.n	800152c <doneMeasuringBridgePlasmaADC12+0x78>
			{
				//Adjust H-bridge frequency
				int16_t freqCorr = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	81fb      	strh	r3, [r7, #14]
				if (freqCorrection(&freqCorr))
 80014e0:	f107 030e 	add.w	r3, r7, #14
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fec5 	bl	8001274 <freqCorrection>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d008      	beq.n	8001502 <doneMeasuringBridgePlasmaADC12+0x4e>
					sHbridge.frequency += freqCorr;
 80014f0:	4b16      	ldr	r3, [pc, #88]	@ (800154c <doneMeasuringBridgePlasmaADC12+0x98>)
 80014f2:	885a      	ldrh	r2, [r3, #2]
 80014f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	4413      	add	r3, r2
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	4b13      	ldr	r3, [pc, #76]	@ (800154c <doneMeasuringBridgePlasmaADC12+0x98>)
 8001500:	805a      	strh	r2, [r3, #2]
				//TODO Adjust H-bridge dead time
				//sHbridge.deadtime = new setting;
				programHbridge();
 8001502:	f7ff fa55 	bl	80009b0 <programHbridge>
					HAL_Delay(1);	//Allow H-bridge to settle with new settings
 8001506:	2001      	movs	r0, #1
 8001508:	f002 fe22 	bl	8004150 <HAL_Delay>
				if (count % 2048)
 800150c:	4b0c      	ldr	r3, [pc, #48]	@ (8001540 <doneMeasuringBridgePlasmaADC12+0x8c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001514:	2b00      	cmp	r3, #0
 8001516:	d009      	beq.n	800152c <doneMeasuringBridgePlasmaADC12+0x78>
					printHbridgeData();
 8001518:	f7ff fa22 	bl	8000960 <printHbridgeData>
 800151c:	e006      	b.n	800152c <doneMeasuringBridgePlasmaADC12+0x78>
			}
		}
	}
	else
	{
		printNumber("ADC12 Error Code: ", errorCode, 1);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	b29b      	uxth	r3, r3
 8001522:	2201      	movs	r2, #1
 8001524:	4619      	mov	r1, r3
 8001526:	480a      	ldr	r0, [pc, #40]	@ (8001550 <doneMeasuringBridgePlasmaADC12+0x9c>)
 8001528:	f7ff f95e 	bl	80007e8 <printNumber>
	}

	//Measure ADC3 voltages
	if (sFlashConfig.mode == RUN_MODE)
 800152c:	4b09      	ldr	r3, [pc, #36]	@ (8001554 <doneMeasuringBridgePlasmaADC12+0xa0>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d101      	bne.n	8001538 <doneMeasuringBridgePlasmaADC12+0x84>
		measureVoltagesTemperaturesADC3();
 8001534:	f000 f9e8 	bl	8001908 <measureVoltagesTemperaturesADC3>

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
}
 8001538:	bf00      	nop
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	240008cc 	.word	0x240008cc
 8001544:	240001b4 	.word	0x240001b4
 8001548:	240008c4 	.word	0x240008c4
 800154c:	2400001c 	.word	0x2400001c
 8001550:	080117d4 	.word	0x080117d4
 8001554:	240008c8 	.word	0x240008c8

08001558 <autoFreqAdj>:

// Automatically Correct the Drive Frequency until user presses 'q'
void autoFreqAdj(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b09a      	sub	sp, #104	@ 0x68
 800155c:	af00      	add	r7, sp, #0
	char input;

	printString("\n\r%Press any key to exit");
 800155e:	4838      	ldr	r0, [pc, #224]	@ (8001640 <autoFreqAdj+0xe8>)
 8001560:	f7ff f900 	bl	8000764 <printString>

	while (!(HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 1) == HAL_OK))
 8001564:	e05c      	b.n	8001620 <autoFreqAdj+0xc8>
	{
		measureBridgePlasmaADC12();
 8001566:	f7ff ff4b 	bl	8001400 <measureBridgePlasmaADC12>
		//Wait until ADC3 reading is done
		while (sADC.adc12_reading);
 800156a:	bf00      	nop
 800156c:	4b35      	ldr	r3, [pc, #212]	@ (8001644 <autoFreqAdj+0xec>)
 800156e:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	@ 0x70e
 8001572:	b29b      	uxth	r3, r3
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1f9      	bne.n	800156c <autoFreqAdj+0x14>
		//printADC12data();

		int16_t freqCorr;
		freqCorrection(&freqCorr);
 8001578:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fe79 	bl	8001274 <freqCorrection>

		char text[100];
		sprintf(text, "\n\rFrequency correction: %i", (int) freqCorr);
 8001582:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	@ 0x64
 8001586:	461a      	mov	r2, r3
 8001588:	463b      	mov	r3, r7
 800158a:	492f      	ldr	r1, [pc, #188]	@ (8001648 <autoFreqAdj+0xf0>)
 800158c:	4618      	mov	r0, r3
 800158e:	f00f fb5d 	bl	8010c4c <siprintf>
		printString(text);
 8001592:	463b      	mov	r3, r7
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff f8e5 	bl	8000764 <printString>

		if (sHbridge.frequency + freqCorr > MAX_FREQUENCY) //GetUint16Input(&sHbridge.frequency, 1, MIN_FREQUENCY, MAX_FREQUENCY))
 800159a:	4b2c      	ldr	r3, [pc, #176]	@ (800164c <autoFreqAdj+0xf4>)
 800159c:	885b      	ldrh	r3, [r3, #2]
 800159e:	461a      	mov	r2, r3
 80015a0:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	@ 0x64
 80015a4:	4413      	add	r3, r2
 80015a6:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 80015aa:	4293      	cmp	r3, r2
 80015ac:	dd10      	ble.n	80015d0 <autoFreqAdj+0x78>
		{   // Calculated freq is higher than max

			sprintf(text, "\n\r%i is higher than max freq", (int) freqCorr);
 80015ae:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	@ 0x64
 80015b2:	461a      	mov	r2, r3
 80015b4:	463b      	mov	r3, r7
 80015b6:	4926      	ldr	r1, [pc, #152]	@ (8001650 <autoFreqAdj+0xf8>)
 80015b8:	4618      	mov	r0, r3
 80015ba:	f00f fb47 	bl	8010c4c <siprintf>
			printString(text);
 80015be:	463b      	mov	r3, r7
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff f8cf 	bl	8000764 <printString>
			sHbridge.frequency = MAX_FREQUENCY;
 80015c6:	4b21      	ldr	r3, [pc, #132]	@ (800164c <autoFreqAdj+0xf4>)
 80015c8:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 80015cc:	805a      	strh	r2, [r3, #2]
 80015ce:	e023      	b.n	8001618 <autoFreqAdj+0xc0>
		}
		else if (sHbridge.frequency + freqCorr < MIN_FREQUENCY)
 80015d0:	4b1e      	ldr	r3, [pc, #120]	@ (800164c <autoFreqAdj+0xf4>)
 80015d2:	885b      	ldrh	r3, [r3, #2]
 80015d4:	461a      	mov	r2, r3
 80015d6:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	@ 0x64
 80015da:	4413      	add	r3, r2
 80015dc:	f643 2297 	movw	r2, #14999	@ 0x3a97
 80015e0:	4293      	cmp	r3, r2
 80015e2:	dc10      	bgt.n	8001606 <autoFreqAdj+0xae>
		{
			sprintf(text, "\n\r%i is lower than min freq", (int) freqCorr);
 80015e4:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	@ 0x64
 80015e8:	461a      	mov	r2, r3
 80015ea:	463b      	mov	r3, r7
 80015ec:	4919      	ldr	r1, [pc, #100]	@ (8001654 <autoFreqAdj+0xfc>)
 80015ee:	4618      	mov	r0, r3
 80015f0:	f00f fb2c 	bl	8010c4c <siprintf>
			printString(text);
 80015f4:	463b      	mov	r3, r7
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff f8b4 	bl	8000764 <printString>

			sHbridge.frequency = MIN_FREQUENCY;
 80015fc:	4b13      	ldr	r3, [pc, #76]	@ (800164c <autoFreqAdj+0xf4>)
 80015fe:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8001602:	805a      	strh	r2, [r3, #2]
 8001604:	e008      	b.n	8001618 <autoFreqAdj+0xc0>

		}
		else
		{
			sHbridge.frequency = sHbridge.frequency + freqCorr;
 8001606:	4b11      	ldr	r3, [pc, #68]	@ (800164c <autoFreqAdj+0xf4>)
 8001608:	885a      	ldrh	r2, [r3, #2]
 800160a:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	@ 0x64
 800160e:	b29b      	uxth	r3, r3
 8001610:	4413      	add	r3, r2
 8001612:	b29a      	uxth	r2, r3
 8001614:	4b0d      	ldr	r3, [pc, #52]	@ (800164c <autoFreqAdj+0xf4>)
 8001616:	805a      	strh	r2, [r3, #2]
		}

		programHbridge();
 8001618:	f7ff f9ca 	bl	80009b0 <programHbridge>
		printHbridgeData();
 800161c:	f7ff f9a0 	bl	8000960 <printHbridgeData>
	while (!(HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 1) == HAL_OK))
 8001620:	f107 0167 	add.w	r1, r7, #103	@ 0x67
 8001624:	2301      	movs	r3, #1
 8001626:	2201      	movs	r2, #1
 8001628:	480b      	ldr	r0, [pc, #44]	@ (8001658 <autoFreqAdj+0x100>)
 800162a:	f00d ffd8 	bl	800f5de <HAL_UART_Receive>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d198      	bne.n	8001566 <autoFreqAdj+0xe>
	}
}
 8001634:	bf00      	nop
 8001636:	bf00      	nop
 8001638:	3768      	adds	r7, #104	@ 0x68
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	080117e8 	.word	0x080117e8
 8001644:	240001b4 	.word	0x240001b4
 8001648:	08011804 	.word	0x08011804
 800164c:	2400001c 	.word	0x2400001c
 8001650:	08011820 	.word	0x08011820
 8001654:	08011840 	.word	0x08011840
 8001658:	24000cb8 	.word	0x24000cb8
 800165c:	00000000 	.word	0x00000000

08001660 <convertADC3data>:

//Convert ADC3 data to voltages
float convertADC3data(uint32_t item, char **text)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
	float result = 0;
 800166a:	f04f 0300 	mov.w	r3, #0
 800166e:	60fb      	str	r3, [r7, #12]

	switch (item) {
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b0a      	cmp	r3, #10
 8001674:	f200 80c5 	bhi.w	8001802 <convertADC3data+0x1a2>
 8001678:	a201      	add	r2, pc, #4	@ (adr r2, 8001680 <convertADC3data+0x20>)
 800167a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800167e:	bf00      	nop
 8001680:	080016ad 	.word	0x080016ad
 8001684:	080016df 	.word	0x080016df
 8001688:	08001711 	.word	0x08001711
 800168c:	08001743 	.word	0x08001743
 8001690:	08001751 	.word	0x08001751
 8001694:	0800178b 	.word	0x0800178b
 8001698:	080017bd 	.word	0x080017bd
 800169c:	080017cb 	.word	0x080017cb
 80016a0:	080017d9 	.word	0x080017d9
 80016a4:	080017e7 	.word	0x080017e7
 80016a8:	080017f5 	.word	0x080017f5
		case ADC3_VBAT:
			result =  1000*((9.76+169.0)/9.76)*3.3*(((float) sADC.adc3_data[ADC3_VBAT])/4096.0);
 80016ac:	4b66      	ldr	r3, [pc, #408]	@ (8001848 <convertADC3data+0x1e8>)
 80016ae:	f8b3 34b0 	ldrh.w	r3, [r3, #1200]	@ 0x4b0
 80016b2:	ee07 3a90 	vmov	s15, r3
 80016b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016ba:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80016be:	ed9f 5b56 	vldr	d5, [pc, #344]	@ 8001818 <convertADC3data+0x1b8>
 80016c2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80016c6:	ed9f 6b56 	vldr	d6, [pc, #344]	@ 8001820 <convertADC3data+0x1c0>
 80016ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 80016ce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80016d2:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_VBAT (mV)";
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	4a5c      	ldr	r2, [pc, #368]	@ (800184c <convertADC3data+0x1ec>)
 80016da:	601a      	str	r2, [r3, #0]
			break;
 80016dc:	e091      	b.n	8001802 <convertADC3data+0x1a2>
		case ADC3_15V:
			result =  1000*((30.0+120.0)/30.0)*3.3*(((float) sADC.adc3_data[ADC3_15V])/4096.0);
 80016de:	4b5a      	ldr	r3, [pc, #360]	@ (8001848 <convertADC3data+0x1e8>)
 80016e0:	f8b3 34b2 	ldrh.w	r3, [r3, #1202]	@ 0x4b2
 80016e4:	ee07 3a90 	vmov	s15, r3
 80016e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016ec:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80016f0:	ed9f 5b49 	vldr	d5, [pc, #292]	@ 8001818 <convertADC3data+0x1b8>
 80016f4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80016f8:	ed9f 6b4b 	vldr	d6, [pc, #300]	@ 8001828 <convertADC3data+0x1c8>
 80016fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001700:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001704:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_15V (mV)";
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	4a51      	ldr	r2, [pc, #324]	@ (8001850 <convertADC3data+0x1f0>)
 800170c:	601a      	str	r2, [r3, #0]
			break;
 800170e:	e078      	b.n	8001802 <convertADC3data+0x1a2>
		case ADC3_3_3V:
			result =  1000*((30.0+3.0)/30.0)*3.3*(((float) sADC.adc3_data[ADC3_3_3V])/4096.0);
 8001710:	4b4d      	ldr	r3, [pc, #308]	@ (8001848 <convertADC3data+0x1e8>)
 8001712:	f8b3 34b4 	ldrh.w	r3, [r3, #1204]	@ 0x4b4
 8001716:	ee07 3a90 	vmov	s15, r3
 800171a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800171e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001722:	ed9f 5b3d 	vldr	d5, [pc, #244]	@ 8001818 <convertADC3data+0x1b8>
 8001726:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800172a:	ed9f 6b41 	vldr	d6, [pc, #260]	@ 8001830 <convertADC3data+0x1d0>
 800172e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001732:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001736:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_3_3V (mV)";
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	4a45      	ldr	r2, [pc, #276]	@ (8001854 <convertADC3data+0x1f4>)
 800173e:	601a      	str	r2, [r3, #0]
			break;
 8001740:	e05f      	b.n	8001802 <convertADC3data+0x1a2>
		case ADC3_NC3:
			result = 0;
 8001742:	f04f 0300 	mov.w	r3, #0
 8001746:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_NC3";
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	4a43      	ldr	r2, [pc, #268]	@ (8001858 <convertADC3data+0x1f8>)
 800174c:	601a      	str	r2, [r3, #0]
			break;
 800174e:	e058      	b.n	8001802 <convertADC3data+0x1a2>
		case ADC3_BridgeTemp:
			result = 1000*((float) sADC.adc3_data[ADC3_BridgeTemp])*3.3/4096.0;
 8001750:	4b3d      	ldr	r3, [pc, #244]	@ (8001848 <convertADC3data+0x1e8>)
 8001752:	f8b3 34b8 	ldrh.w	r3, [r3, #1208]	@ 0x4b8
 8001756:	ee07 3a90 	vmov	s15, r3
 800175a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800175e:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800185c <convertADC3data+0x1fc>
 8001762:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001766:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800176a:	ed9f 6b33 	vldr	d6, [pc, #204]	@ 8001838 <convertADC3data+0x1d8>
 800176e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001772:	ed9f 5b29 	vldr	d5, [pc, #164]	@ 8001818 <convertADC3data+0x1b8>
 8001776:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800177a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800177e:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_BridgeTemp (mV)";
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	4a36      	ldr	r2, [pc, #216]	@ (8001860 <convertADC3data+0x200>)
 8001786:	601a      	str	r2, [r3, #0]
			break;
 8001788:	e03b      	b.n	8001802 <convertADC3data+0x1a2>
		case ADC3_500VDC:
			result =  1000*((12.0+2000.0)/12.0)*3.3*(((float) sADC.adc3_data[ADC3_500VDC])/4096.0);
 800178a:	4b2f      	ldr	r3, [pc, #188]	@ (8001848 <convertADC3data+0x1e8>)
 800178c:	f8b3 34ba 	ldrh.w	r3, [r3, #1210]	@ 0x4ba
 8001790:	ee07 3a90 	vmov	s15, r3
 8001794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001798:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800179c:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8001818 <convertADC3data+0x1b8>
 80017a0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80017a4:	ed9f 6b26 	vldr	d6, [pc, #152]	@ 8001840 <convertADC3data+0x1e0>
 80017a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80017ac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80017b0:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_500VDC (mV)";
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	4a2b      	ldr	r2, [pc, #172]	@ (8001864 <convertADC3data+0x204>)
 80017b8:	601a      	str	r2, [r3, #0]
			break;
 80017ba:	e022      	b.n	8001802 <convertADC3data+0x1a2>
		case ADC3_Thermistor1:
			result = 0;
 80017bc:	f04f 0300 	mov.w	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_Thermistor1";
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	4a28      	ldr	r2, [pc, #160]	@ (8001868 <convertADC3data+0x208>)
 80017c6:	601a      	str	r2, [r3, #0]
			break;
 80017c8:	e01b      	b.n	8001802 <convertADC3data+0x1a2>
		case ADC3_Thermistor2:
			result = 0;
 80017ca:	f04f 0300 	mov.w	r3, #0
 80017ce:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_Thermistor2";
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	4a26      	ldr	r2, [pc, #152]	@ (800186c <convertADC3data+0x20c>)
 80017d4:	601a      	str	r2, [r3, #0]
			break;
 80017d6:	e014      	b.n	8001802 <convertADC3data+0x1a2>
		case ADC3_Thermistor3:
			result = 0;
 80017d8:	f04f 0300 	mov.w	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_Thermistor3";
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	4a23      	ldr	r2, [pc, #140]	@ (8001870 <convertADC3data+0x210>)
 80017e2:	601a      	str	r2, [r3, #0]
			break;
 80017e4:	e00d      	b.n	8001802 <convertADC3data+0x1a2>
		case ADC3_Thermistor4:
			result = 0;
 80017e6:	f04f 0300 	mov.w	r3, #0
 80017ea:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_Thermistor4";
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	4a21      	ldr	r2, [pc, #132]	@ (8001874 <convertADC3data+0x214>)
 80017f0:	601a      	str	r2, [r3, #0]
			break;
 80017f2:	e006      	b.n	8001802 <convertADC3data+0x1a2>
		case ADC3_NC10:
			result = 0;
 80017f4:	f04f 0300 	mov.w	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_NC10";
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	4a1e      	ldr	r2, [pc, #120]	@ (8001878 <convertADC3data+0x218>)
 80017fe:	601a      	str	r2, [r3, #0]
			break;
 8001800:	bf00      	nop
	}

	return(result);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	ee07 3a90 	vmov	s15, r3
}
 8001808:	eeb0 0a67 	vmov.f32	s0, s15
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	00000000 	.word	0x00000000
 800181c:	40b00000 	.word	0x40b00000
 8001820:	9714fbcd 	.word	0x9714fbcd
 8001824:	40ed832c 	.word	0x40ed832c
 8001828:	00000000 	.word	0x00000000
 800182c:	40d01d00 	.word	0x40d01d00
 8001830:	00000000 	.word	0x00000000
 8001834:	40ac5c00 	.word	0x40ac5c00
 8001838:	66666666 	.word	0x66666666
 800183c:	400a6666 	.word	0x400a6666
 8001840:	ffffffff 	.word	0xffffffff
 8001844:	4120e2a7 	.word	0x4120e2a7
 8001848:	240001b4 	.word	0x240001b4
 800184c:	0801185c 	.word	0x0801185c
 8001850:	0801186c 	.word	0x0801186c
 8001854:	0801187c 	.word	0x0801187c
 8001858:	0801188c 	.word	0x0801188c
 800185c:	447a0000 	.word	0x447a0000
 8001860:	08011898 	.word	0x08011898
 8001864:	080118b0 	.word	0x080118b0
 8001868:	080118c4 	.word	0x080118c4
 800186c:	080118d8 	.word	0x080118d8
 8001870:	080118ec 	.word	0x080118ec
 8001874:	08011900 	.word	0x08011900
 8001878:	08011914 	.word	0x08011914

0800187c <printADC3data>:

//Print measured ADC3 data on UART3
void printADC3data(void)
{
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b09f      	sub	sp, #124	@ 0x7c
 8001880:	af02      	add	r7, sp, #8
	if (debug == 1)
 8001882:	4b1d      	ldr	r3, [pc, #116]	@ (80018f8 <printADC3data+0x7c>)
 8001884:	881b      	ldrh	r3, [r3, #0]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d131      	bne.n	80018ee <printADC3data+0x72>
	{
		printCR();
 800188a:	f7fe ff5b 	bl	8000744 <printCR>
		printNumber("No data: ", ADC3_DMA_REQUESTS, 1);
 800188e:	2201      	movs	r2, #1
 8001890:	210b      	movs	r1, #11
 8001892:	481a      	ldr	r0, [pc, #104]	@ (80018fc <printADC3data+0x80>)
 8001894:	f7fe ffa8 	bl	80007e8 <printNumber>
		for (int i=0; i<ADC3_DMA_REQUESTS; i++)
 8001898:	2300      	movs	r3, #0
 800189a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800189c:	e024      	b.n	80018e8 <printADC3data+0x6c>
		{
			char text[100];
			char *p_text;
			float result = convertADC3data(i, &p_text);
 800189e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80018a0:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 80018a4:	4611      	mov	r1, r2
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff feda 	bl	8001660 <convertADC3data>
 80018ac:	ed87 0a1a 	vstr	s0, [r7, #104]	@ 0x68
			sprintf(text, "%2u %20s: %7u    (%6u)\n\r", i, p_text, (int) result, sADC.adc3_data[i]);
 80018b0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80018b2:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80018b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018ba:	ee17 4a90 	vmov	r4, s15
 80018be:	4910      	ldr	r1, [pc, #64]	@ (8001900 <printADC3data+0x84>)
 80018c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80018c2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80018c6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80018ca:	4638      	mov	r0, r7
 80018cc:	9301      	str	r3, [sp, #4]
 80018ce:	9400      	str	r4, [sp, #0]
 80018d0:	4613      	mov	r3, r2
 80018d2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80018d4:	490b      	ldr	r1, [pc, #44]	@ (8001904 <printADC3data+0x88>)
 80018d6:	f00f f9b9 	bl	8010c4c <siprintf>
			printString(text);
 80018da:	463b      	mov	r3, r7
 80018dc:	4618      	mov	r0, r3
 80018de:	f7fe ff41 	bl	8000764 <printString>
		for (int i=0; i<ADC3_DMA_REQUESTS; i++)
 80018e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80018e4:	3301      	adds	r3, #1
 80018e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80018e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80018ea:	2b0a      	cmp	r3, #10
 80018ec:	ddd7      	ble.n	800189e <printADC3data+0x22>
		}
	}
}
 80018ee:	bf00      	nop
 80018f0:	3774      	adds	r7, #116	@ 0x74
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd90      	pop	{r4, r7, pc}
 80018f6:	bf00      	nop
 80018f8:	24000000 	.word	0x24000000
 80018fc:	08011728 	.word	0x08011728
 8001900:	240001b4 	.word	0x240001b4
 8001904:	08011920 	.word	0x08011920

08001908 <measureVoltagesTemperaturesADC3>:

// Measure voltages and temperatures using ADC3
// After the measurement is done the function doneMeasuringVoltagesTemperaturesADC3 is called
void measureVoltagesTemperaturesADC3(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_SET);

	// This will start the measurement of voltages and temperatures using ADC3
	sADC.adc3_reading = 1; //Started to read ADC3
 800190c:	4b05      	ldr	r3, [pc, #20]	@ (8001924 <measureVoltagesTemperaturesADC3+0x1c>)
 800190e:	2201      	movs	r2, #1
 8001910:	f8a3 270c 	strh.w	r2, [r3, #1804]	@ 0x70c
	HAL_ADC_Start_DMA(&hadc3, (uint32_t *) sADC.adc3_data, ADC3_DMA_REQUESTS);
 8001914:	220b      	movs	r2, #11
 8001916:	4904      	ldr	r1, [pc, #16]	@ (8001928 <measureVoltagesTemperaturesADC3+0x20>)
 8001918:	4804      	ldr	r0, [pc, #16]	@ (800192c <measureVoltagesTemperaturesADC3+0x24>)
 800191a:	f003 fa97 	bl	8004e4c <HAL_ADC_Start_DMA>

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	240001b4 	.word	0x240001b4
 8001928:	24000664 	.word	0x24000664
 800192c:	240009e8 	.word	0x240009e8

08001930 <doneMeasuringVoltagesTemperaturesADC3>:


// Done measuring voltages and temperatures
void doneMeasuringVoltagesTemperaturesADC3(uint32_t errorCode)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_SET);

	sADC.adc3_reading = 0; //Done reading ADC3
 8001938:	4b0b      	ldr	r3, [pc, #44]	@ (8001968 <doneMeasuringVoltagesTemperaturesADC3+0x38>)
 800193a:	2200      	movs	r2, #0
 800193c:	f8a3 270c 	strh.w	r2, [r3, #1804]	@ 0x70c

	if (errorCode == HAL_ADC_ERROR_NONE)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d006      	beq.n	8001954 <doneMeasuringVoltagesTemperaturesADC3+0x24>
		// TODO Check temperatures

	}
	else
	{
		printNumber("ADC12 Error Code: ", errorCode, 1);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	b29b      	uxth	r3, r3
 800194a:	2201      	movs	r2, #1
 800194c:	4619      	mov	r1, r3
 800194e:	4807      	ldr	r0, [pc, #28]	@ (800196c <doneMeasuringVoltagesTemperaturesADC3+0x3c>)
 8001950:	f7fe ff4a 	bl	80007e8 <printNumber>
	}


	//Start ADC1 and ADC2 measurements
	if (sFlashConfig.mode == RUN_MODE)
 8001954:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <doneMeasuringVoltagesTemperaturesADC3+0x40>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d101      	bne.n	8001960 <doneMeasuringVoltagesTemperaturesADC3+0x30>
		measureBridgePlasmaADC12();
 800195c:	f7ff fd50 	bl	8001400 <measureBridgePlasmaADC12>

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
}
 8001960:	bf00      	nop
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	240001b4 	.word	0x240001b4
 800196c:	080117d4 	.word	0x080117d4
 8001970:	240008c8 	.word	0x240008c8

08001974 <GetNumber>:

// Get an integer number from UART3. If the number is valid, the function returns 1, otherwise 0.
static uint8_t GetNumber(int *number)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08a      	sub	sp, #40	@ 0x28
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
	char input;
	char s_input[MAX_INPUT];
	int pos = 0;
 800197c:	2300      	movs	r3, #0
 800197e:	627b      	str	r3, [r7, #36]	@ 0x24
	//Wait for user input
	HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 100000);
 8001980:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 8001984:	4b2f      	ldr	r3, [pc, #188]	@ (8001a44 <GetNumber+0xd0>)
 8001986:	2201      	movs	r2, #1
 8001988:	482f      	ldr	r0, [pc, #188]	@ (8001a48 <GetNumber+0xd4>)
 800198a:	f00d fe28 	bl	800f5de <HAL_UART_Receive>
	while (input != 13)
 800198e:	e039      	b.n	8001a04 <GetNumber+0x90>
	{
		// Backspace?
		if ((input == 127) && (pos > 0))
 8001990:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001994:	2b7f      	cmp	r3, #127	@ 0x7f
 8001996:	d10e      	bne.n	80019b6 <GetNumber+0x42>
 8001998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199a:	2b00      	cmp	r3, #0
 800199c:	dd0b      	ble.n	80019b6 <GetNumber+0x42>
		{
			// Delete digit
			HAL_UART_Transmit(&huart3, (uint8_t *) &input, 1, 1000);
 800199e:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 80019a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019a6:	2201      	movs	r2, #1
 80019a8:	4827      	ldr	r0, [pc, #156]	@ (8001a48 <GetNumber+0xd4>)
 80019aa:	f00d fd8a 	bl	800f4c2 <HAL_UART_Transmit>
			pos--;
 80019ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b0:	3b01      	subs	r3, #1
 80019b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80019b4:	e018      	b.n	80019e8 <GetNumber+0x74>
		}
		// A digit?
		else if ((input >= 48) && (input <=57))
 80019b6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80019ba:	2b2f      	cmp	r3, #47	@ 0x2f
 80019bc:	d914      	bls.n	80019e8 <GetNumber+0x74>
 80019be:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80019c2:	2b39      	cmp	r3, #57	@ 0x39
 80019c4:	d810      	bhi.n	80019e8 <GetNumber+0x74>
		{
			// Echo digit and store it
			HAL_UART_Transmit(&huart3, (uint8_t *) &input, 1, 1000);
 80019c6:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 80019ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019ce:	2201      	movs	r2, #1
 80019d0:	481d      	ldr	r0, [pc, #116]	@ (8001a48 <GetNumber+0xd4>)
 80019d2:	f00d fd76 	bl	800f4c2 <HAL_UART_Transmit>
			s_input[pos++] = input;
 80019d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d8:	1c5a      	adds	r2, r3, #1
 80019da:	627a      	str	r2, [r7, #36]	@ 0x24
 80019dc:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80019e0:	3328      	adds	r3, #40	@ 0x28
 80019e2:	443b      	add	r3, r7
 80019e4:	f803 2c1c 	strb.w	r2, [r3, #-28]
		}

		// Get next character
		if (pos < MAX_INPUT-1)
 80019e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ea:	2b12      	cmp	r3, #18
 80019ec:	dc07      	bgt.n	80019fe <GetNumber+0x8a>
		{
			HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 100000);
 80019ee:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 80019f2:	4b14      	ldr	r3, [pc, #80]	@ (8001a44 <GetNumber+0xd0>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	4814      	ldr	r0, [pc, #80]	@ (8001a48 <GetNumber+0xd4>)
 80019f8:	f00d fdf1 	bl	800f5de <HAL_UART_Receive>
 80019fc:	e002      	b.n	8001a04 <GetNumber+0x90>
		}
		else
		{
			input = 13; // Terminate while loop
 80019fe:	230d      	movs	r3, #13
 8001a00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	while (input != 13)
 8001a04:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001a08:	2b0d      	cmp	r3, #13
 8001a0a:	d1c1      	bne.n	8001990 <GetNumber+0x1c>
		}
	}
	s_input[pos] = 0;
 8001a0c:	f107 020c 	add.w	r2, r7, #12
 8001a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a12:	4413      	add	r3, r2
 8001a14:	2200      	movs	r2, #0
 8001a16:	701a      	strb	r2, [r3, #0]
	if (pos > 0)
 8001a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	dd07      	ble.n	8001a2e <GetNumber+0xba>
		*number = atoi(s_input);
 8001a1e:	f107 030c 	add.w	r3, r7, #12
 8001a22:	4618      	mov	r0, r3
 8001a24:	f00f f82e 	bl	8010a84 <atoi>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	601a      	str	r2, [r3, #0]
	return(pos > 0);
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	bfcc      	ite	gt
 8001a34:	2301      	movgt	r3, #1
 8001a36:	2300      	movle	r3, #0
 8001a38:	b2db      	uxtb	r3, r3
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3728      	adds	r7, #40	@ 0x28
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	000186a0 	.word	0x000186a0
 8001a48:	24000cb8 	.word	0x24000cb8

08001a4c <GetUint16Input>:

// Get an 16bit unsigned number from UAR3 and validate the input againts min and max values
static uint8_t GetUint16Input(uint16_t *input, uint8_t bValidate, uint16_t min, uint16_t max)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b0a0      	sub	sp, #128	@ 0x80
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	4608      	mov	r0, r1
 8001a56:	4611      	mov	r1, r2
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	72fb      	strb	r3, [r7, #11]
 8001a5e:	460b      	mov	r3, r1
 8001a60:	813b      	strh	r3, [r7, #8]
 8001a62:	4613      	mov	r3, r2
 8001a64:	80fb      	strh	r3, [r7, #6]
	int number;
	char s_output[100];
	uint8_t result;

	result = GetNumber(&number);
 8001a66:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff ff82 	bl	8001974 <GetNumber>
 8001a70:	4603      	mov	r3, r0
 8001a72:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (bValidate)
 8001a76:	7afb      	ldrb	r3, [r7, #11]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d02f      	beq.n	8001adc <GetUint16Input+0x90>
	{
		if (result && (number >= min) && (number <= max))
 8001a7c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d013      	beq.n	8001aac <GetUint16Input+0x60>
 8001a84:	893a      	ldrh	r2, [r7, #8]
 8001a86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	dc0f      	bgt.n	8001aac <GetUint16Input+0x60>
 8001a8c:	88fa      	ldrh	r2, [r7, #6]
 8001a8e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001a90:	429a      	cmp	r2, r3
 8001a92:	db0b      	blt.n	8001aac <GetUint16Input+0x60>
		{
			*input =  number;
 8001a94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, (uint8_t *) " - Ok\n\r", 7, 1000);
 8001a9c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aa0:	2207      	movs	r2, #7
 8001aa2:	4911      	ldr	r1, [pc, #68]	@ (8001ae8 <GetUint16Input+0x9c>)
 8001aa4:	4811      	ldr	r0, [pc, #68]	@ (8001aec <GetUint16Input+0xa0>)
 8001aa6:	f00d fd0c 	bl	800f4c2 <HAL_UART_Transmit>
 8001aaa:	e017      	b.n	8001adc <GetUint16Input+0x90>
		}
		else
		{
			result = 0; //Indicate failure
 8001aac:	2300      	movs	r3, #0
 8001aae:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			sprintf(s_output, " - Invalid number, valid range %u - %u\n\r", min, max);
 8001ab2:	893a      	ldrh	r2, [r7, #8]
 8001ab4:	88fb      	ldrh	r3, [r7, #6]
 8001ab6:	f107 0014 	add.w	r0, r7, #20
 8001aba:	490d      	ldr	r1, [pc, #52]	@ (8001af0 <GetUint16Input+0xa4>)
 8001abc:	f00f f8c6 	bl	8010c4c <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t *) s_output, strlen(s_output), 1000);
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7fe fc23 	bl	8000310 <strlen>
 8001aca:	4603      	mov	r3, r0
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	f107 0114 	add.w	r1, r7, #20
 8001ad2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ad6:	4805      	ldr	r0, [pc, #20]	@ (8001aec <GetUint16Input+0xa0>)
 8001ad8:	f00d fcf3 	bl	800f4c2 <HAL_UART_Transmit>
		}
	}
	return(result);
 8001adc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3780      	adds	r7, #128	@ 0x80
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	0801193c 	.word	0x0801193c
 8001aec:	24000cb8 	.word	0x24000cb8
 8001af0:	08011944 	.word	0x08011944

08001af4 <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef* hadc)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
	// ADC1 is master and ADC2 is slave
	if (hadc->Instance == ADC1)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a0e      	ldr	r2, [pc, #56]	@ (8001b3c <HAL_ADC_ErrorCallback+0x48>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d108      	bne.n	8001b18 <HAL_ADC_ErrorCallback+0x24>
	{
		printNumber("** ERROR ** ADC12 Error Code: ", hadc->ErrorCode, 1);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	4619      	mov	r1, r3
 8001b10:	480b      	ldr	r0, [pc, #44]	@ (8001b40 <HAL_ADC_ErrorCallback+0x4c>)
 8001b12:	f7fe fe69 	bl	80007e8 <printNumber>
	}
	else if ((hadc->Instance == ADC3))
	{
		printNumber("** ERROR ** ADC3 Error Code: ", hadc->ErrorCode, 1);
	}
}
 8001b16:	e00c      	b.n	8001b32 <HAL_ADC_ErrorCallback+0x3e>
	else if ((hadc->Instance == ADC3))
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a09      	ldr	r2, [pc, #36]	@ (8001b44 <HAL_ADC_ErrorCallback+0x50>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d107      	bne.n	8001b32 <HAL_ADC_ErrorCallback+0x3e>
		printNumber("** ERROR ** ADC3 Error Code: ", hadc->ErrorCode, 1);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	2201      	movs	r2, #1
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4806      	ldr	r0, [pc, #24]	@ (8001b48 <HAL_ADC_ErrorCallback+0x54>)
 8001b2e:	f7fe fe5b 	bl	80007e8 <printNumber>
}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40022000 	.word	0x40022000
 8001b40:	08011970 	.word	0x08011970
 8001b44:	58026000 	.word	0x58026000
 8001b48:	08011990 	.word	0x08011990

08001b4c <HAL_ADC_ConvCpltCallback>:

// ADC conversion and DMA transfer complete
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
	// ADC1 is master and ADC2 is slave
	if (hadc->Instance == ADC1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a10      	ldr	r2, [pc, #64]	@ (8001b9c <HAL_ADC_ConvCpltCallback+0x50>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d105      	bne.n	8001b6a <HAL_ADC_ConvCpltCallback+0x1e>
	{
		//HAL_ADCEx_MultiModeStop_DMA(&hadc1);
		doneMeasuringBridgePlasmaADC12(hadc->ErrorCode);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fca6 	bl	80014b4 <doneMeasuringBridgePlasmaADC12>
	else
	{
		HAL_UART_Transmit(&huart3, (uint8_t *) "** ERROR ** Unknown ADC\n\r", 25, 1000);
		printCR();
	}
}
 8001b68:	e013      	b.n	8001b92 <HAL_ADC_ConvCpltCallback+0x46>
	else if (hadc->Instance == ADC3)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a0c      	ldr	r2, [pc, #48]	@ (8001ba0 <HAL_ADC_ConvCpltCallback+0x54>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d105      	bne.n	8001b80 <HAL_ADC_ConvCpltCallback+0x34>
		doneMeasuringVoltagesTemperaturesADC3(hadc->ErrorCode);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fed9 	bl	8001930 <doneMeasuringVoltagesTemperaturesADC3>
}
 8001b7e:	e008      	b.n	8001b92 <HAL_ADC_ConvCpltCallback+0x46>
		HAL_UART_Transmit(&huart3, (uint8_t *) "** ERROR ** Unknown ADC\n\r", 25, 1000);
 8001b80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b84:	2219      	movs	r2, #25
 8001b86:	4907      	ldr	r1, [pc, #28]	@ (8001ba4 <HAL_ADC_ConvCpltCallback+0x58>)
 8001b88:	4807      	ldr	r0, [pc, #28]	@ (8001ba8 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001b8a:	f00d fc9a 	bl	800f4c2 <HAL_UART_Transmit>
		printCR();
 8001b8e:	f7fe fdd9 	bl	8000744 <printCR>
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40022000 	.word	0x40022000
 8001ba0:	58026000 	.word	0x58026000
 8001ba4:	080119b0 	.word	0x080119b0
 8001ba8:	24000cb8 	.word	0x24000cb8

08001bac <PowerOffLowSupplies>:

//Power Off Supplies in order3.3V switch and 15V
void PowerOffLowSupplies(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
	if (powerStatus == V500_OFF)
 8001bb0:	4b0d      	ldr	r3, [pc, #52]	@ (8001be8 <PowerOffLowSupplies+0x3c>)
 8001bb2:	881b      	ldrh	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d110      	bne.n	8001bda <PowerOffLowSupplies+0x2e>
	{
		//Power off 3.3V switch voltage
		HAL_GPIO_WritePin(OUT_3V3_SWITCH_GPIO_Port, OUT_3V3_SWITCH_Pin, GPIO_PIN_SET);
 8001bb8:	2201      	movs	r2, #1
 8001bba:	2101      	movs	r1, #1
 8001bbc:	480b      	ldr	r0, [pc, #44]	@ (8001bec <PowerOffLowSupplies+0x40>)
 8001bbe:	f008 fcfd 	bl	800a5bc <HAL_GPIO_WritePin>
		HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001bc2:	2001      	movs	r0, #1
 8001bc4:	f002 fac4 	bl	8004150 <HAL_Delay>

		//Power off 15V
		HAL_GPIO_WritePin(OUT_15V_ENABLE_GPIO_Port, OUT_15V_ENABLE_Pin, GPIO_PIN_SET);		//There is an inverter between MCU and the output, thus SET
 8001bc8:	2201      	movs	r2, #1
 8001bca:	2102      	movs	r1, #2
 8001bcc:	4807      	ldr	r0, [pc, #28]	@ (8001bec <PowerOffLowSupplies+0x40>)
 8001bce:	f008 fcf5 	bl	800a5bc <HAL_GPIO_WritePin>
		HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001bd2:	2001      	movs	r0, #1
 8001bd4:	f002 fabc 	bl	8004150 <HAL_Delay>
	else
	{
		printString("** ERROR ** PowerOffLowSupplies: 500V is On\n\r");
		printCR();
	}
}
 8001bd8:	e004      	b.n	8001be4 <PowerOffLowSupplies+0x38>
		printString("** ERROR ** PowerOffLowSupplies: 500V is On\n\r");
 8001bda:	4805      	ldr	r0, [pc, #20]	@ (8001bf0 <PowerOffLowSupplies+0x44>)
 8001bdc:	f7fe fdc2 	bl	8000764 <printString>
		printCR();
 8001be0:	f7fe fdb0 	bl	8000744 <printCR>
}
 8001be4:	bf00      	nop
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	240008c4 	.word	0x240008c4
 8001bec:	58020c00 	.word	0x58020c00
 8001bf0:	080119cc 	.word	0x080119cc

08001bf4 <PowerOffHighSupplies>:


//Power Off Supply 500V
void PowerOffHighSupplies(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
	//Make sure the H-bridge outputs are zero before turning off power
	stopHbridge();
 8001bf8:	f7fe fe84 	bl	8000904 <stopHbridge>

	//Power off 500V
	HAL_GPIO_WritePin(OUT_500V_ENABLE_GPIO_Port, OUT_500V_ENABLE_Pin, GPIO_PIN_SET);	//There is an inverter between MCU and the output, thus SET
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	2101      	movs	r1, #1
 8001c00:	480b      	ldr	r0, [pc, #44]	@ (8001c30 <PowerOffHighSupplies+0x3c>)
 8001c02:	f008 fcdb 	bl	800a5bc <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001c06:	2001      	movs	r0, #1
 8001c08:	f002 faa2 	bl	8004150 <HAL_Delay>

	//Disable Line Drive 1
	HAL_GPIO_WritePin(LINE_DRIVER1_ENABLE_GPIO_Port, LINE_DRIVER1_ENABLE_Pin, GPIO_PIN_SET);
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	2104      	movs	r1, #4
 8001c10:	4808      	ldr	r0, [pc, #32]	@ (8001c34 <PowerOffHighSupplies+0x40>)
 8001c12:	f008 fcd3 	bl	800a5bc <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001c16:	2001      	movs	r0, #1
 8001c18:	f002 fa9a 	bl	8004150 <HAL_Delay>

	//Signal to robot controller all power supplies are inactive.
	HAL_GPIO_WritePin(LED_ACTIVE_GPIO_Port, LED_ACTIVE_Pin, GPIO_PIN_SET);			//There is an inverter between MCU and the output, thus SET
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	2101      	movs	r1, #1
 8001c20:	4805      	ldr	r0, [pc, #20]	@ (8001c38 <PowerOffHighSupplies+0x44>)
 8001c22:	f008 fccb 	bl	800a5bc <HAL_GPIO_WritePin>

	powerStatus = V500_OFF;
 8001c26:	4b05      	ldr	r3, [pc, #20]	@ (8001c3c <PowerOffHighSupplies+0x48>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	801a      	strh	r2, [r3, #0]
}
 8001c2c:	bf00      	nop
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	58021800 	.word	0x58021800
 8001c34:	58020400 	.word	0x58020400
 8001c38:	58021000 	.word	0x58021000
 8001c3c:	240008c4 	.word	0x240008c4

08001c40 <PowerOffSupplies>:

void PowerOffSupplies(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
	PowerOffHighSupplies();
 8001c44:	f7ff ffd6 	bl	8001bf4 <PowerOffHighSupplies>
	PowerOffLowSupplies();
 8001c48:	f7ff ffb0 	bl	8001bac <PowerOffLowSupplies>
}
 8001c4c:	bf00      	nop
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <PowerOnLowSupplies>:

//Power On Supplies in order 15V, 3.3V switch
//Returns 1 if the power up sequence was successful, and 0 if it failed
int PowerOnLowSupplies(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
	//Power on 15V
	//printString("\n\rPower on 15V - ");
	HAL_GPIO_WritePin(OUT_15V_ENABLE_GPIO_Port, OUT_15V_ENABLE_Pin, GPIO_PIN_RESET);	//There is an inverter between MCU and the output, thus RESET
 8001c54:	2200      	movs	r2, #0
 8001c56:	2102      	movs	r1, #2
 8001c58:	4818      	ldr	r0, [pc, #96]	@ (8001cbc <PowerOnLowSupplies+0x6c>)
 8001c5a:	f008 fcaf 	bl	800a5bc <HAL_GPIO_WritePin>
	printString("\n\rPower on 15V - ");
 8001c5e:	4818      	ldr	r0, [pc, #96]	@ (8001cc0 <PowerOnLowSupplies+0x70>)
 8001c60:	f7fe fd80 	bl	8000764 <printString>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001c64:	2001      	movs	r0, #1
 8001c66:	f002 fa73 	bl	8004150 <HAL_Delay>

	//Start reading ADC3 channels
	measureVoltagesTemperaturesADC3();
 8001c6a:	f7ff fe4d 	bl	8001908 <measureVoltagesTemperaturesADC3>
	//Wait until ADC3 reading is done
	while (sADC.adc3_reading) ;
 8001c6e:	bf00      	nop
 8001c70:	4b14      	ldr	r3, [pc, #80]	@ (8001cc4 <PowerOnLowSupplies+0x74>)
 8001c72:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	@ 0x70c
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d1f9      	bne.n	8001c70 <PowerOnLowSupplies+0x20>

	//Check 15V voltage
	if (sADC.adc3_data[ADC3_15V] >= sADC3threshold[ADC3_15V])
 8001c7c:	4b11      	ldr	r3, [pc, #68]	@ (8001cc4 <PowerOnLowSupplies+0x74>)
 8001c7e:	f8b3 24b2 	ldrh.w	r2, [r3, #1202]	@ 0x4b2
 8001c82:	4b11      	ldr	r3, [pc, #68]	@ (8001cc8 <PowerOnLowSupplies+0x78>)
 8001c84:	885b      	ldrh	r3, [r3, #2]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d30f      	bcc.n	8001caa <PowerOnLowSupplies+0x5a>
		printString("Ok");
 8001c8a:	4810      	ldr	r0, [pc, #64]	@ (8001ccc <PowerOnLowSupplies+0x7c>)
 8001c8c:	f7fe fd6a 	bl	8000764 <printString>
		PowerOffLowSupplies();
		return(0);
	}

	//Power on 3.3V switch voltage
	printString("\n\rPower on 3.3V switch");
 8001c90:	480f      	ldr	r0, [pc, #60]	@ (8001cd0 <PowerOnLowSupplies+0x80>)
 8001c92:	f7fe fd67 	bl	8000764 <printString>
	HAL_GPIO_WritePin(OUT_3V3_SWITCH_GPIO_Port, OUT_3V3_SWITCH_Pin, GPIO_PIN_RESET);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2101      	movs	r1, #1
 8001c9a:	4808      	ldr	r0, [pc, #32]	@ (8001cbc <PowerOnLowSupplies+0x6c>)
 8001c9c:	f008 fc8e 	bl	800a5bc <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001ca0:	2001      	movs	r0, #1
 8001ca2:	f002 fa55 	bl	8004150 <HAL_Delay>

	return(1);
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e005      	b.n	8001cb6 <PowerOnLowSupplies+0x66>
		printString("Fail");
 8001caa:	480a      	ldr	r0, [pc, #40]	@ (8001cd4 <PowerOnLowSupplies+0x84>)
 8001cac:	f7fe fd5a 	bl	8000764 <printString>
		PowerOffLowSupplies();
 8001cb0:	f7ff ff7c 	bl	8001bac <PowerOffLowSupplies>
		return(0);
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	58020c00 	.word	0x58020c00
 8001cc0:	080119fc 	.word	0x080119fc
 8001cc4:	240001b4 	.word	0x240001b4
 8001cc8:	24000004 	.word	0x24000004
 8001ccc:	08011a10 	.word	0x08011a10
 8001cd0:	08011a1c 	.word	0x08011a1c
 8001cd4:	08011a14 	.word	0x08011a14

08001cd8 <PowerOnHighSupplies>:

//Power On Supply 500V
//Returns 1 if the power up was successful, and 0 if it failed
int PowerOnHighSupplies(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
	stopHbridge(); 	//Make sure the H-bridge outputs are zero before enabling the line driver
 8001cdc:	f7fe fe12 	bl	8000904 <stopHbridge>

	//Enable Line Drive 1
	printString("\n\rEnable Line Drive 1");
 8001ce0:	481b      	ldr	r0, [pc, #108]	@ (8001d50 <PowerOnHighSupplies+0x78>)
 8001ce2:	f7fe fd3f 	bl	8000764 <printString>
	HAL_GPIO_WritePin(LINE_DRIVER1_ENABLE_GPIO_Port, LINE_DRIVER1_ENABLE_Pin, GPIO_PIN_RESET);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2104      	movs	r1, #4
 8001cea:	481a      	ldr	r0, [pc, #104]	@ (8001d54 <PowerOnHighSupplies+0x7c>)
 8001cec:	f008 fc66 	bl	800a5bc <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	f002 fa2d 	bl	8004150 <HAL_Delay>

	//Power on 500V
	printString("\n\rPower on 500V - ");
 8001cf6:	4818      	ldr	r0, [pc, #96]	@ (8001d58 <PowerOnHighSupplies+0x80>)
 8001cf8:	f7fe fd34 	bl	8000764 <printString>
	HAL_GPIO_WritePin(OUT_500V_ENABLE_GPIO_Port, OUT_500V_ENABLE_Pin, GPIO_PIN_RESET);	//There is an inverter between MCU and the output, thus RESET
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2101      	movs	r1, #1
 8001d00:	4816      	ldr	r0, [pc, #88]	@ (8001d5c <PowerOnHighSupplies+0x84>)
 8001d02:	f008 fc5b 	bl	800a5bc <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001d06:	2001      	movs	r0, #1
 8001d08:	f002 fa22 	bl	8004150 <HAL_Delay>

	//Start reading ADC3 channels
	measureVoltagesTemperaturesADC3();
 8001d0c:	f7ff fdfc 	bl	8001908 <measureVoltagesTemperaturesADC3>
	//Wait until ADC reading is done
	while (sADC.adc3_reading) ;
 8001d10:	bf00      	nop
 8001d12:	4b13      	ldr	r3, [pc, #76]	@ (8001d60 <PowerOnHighSupplies+0x88>)
 8001d14:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	@ 0x70c
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1f9      	bne.n	8001d12 <PowerOnHighSupplies+0x3a>

	//Check 500V voltage
	if (sADC.adc3_data[ADC3_500VDC] >= sADC3threshold[ADC3_500VDC])
 8001d1e:	4b10      	ldr	r3, [pc, #64]	@ (8001d60 <PowerOnHighSupplies+0x88>)
 8001d20:	f8b3 24ba 	ldrh.w	r2, [r3, #1210]	@ 0x4ba
 8001d24:	4b0f      	ldr	r3, [pc, #60]	@ (8001d64 <PowerOnHighSupplies+0x8c>)
 8001d26:	895b      	ldrh	r3, [r3, #10]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d303      	bcc.n	8001d34 <PowerOnHighSupplies+0x5c>
		printString("Ok");
 8001d2c:	480e      	ldr	r0, [pc, #56]	@ (8001d68 <PowerOnHighSupplies+0x90>)
 8001d2e:	f7fe fd19 	bl	8000764 <printString>
 8001d32:	e002      	b.n	8001d3a <PowerOnHighSupplies+0x62>
	else
	{
		//printString("Fail");
		printString("debug");
 8001d34:	480d      	ldr	r0, [pc, #52]	@ (8001d6c <PowerOnHighSupplies+0x94>)
 8001d36:	f7fe fd15 	bl	8000764 <printString>
		//PowerOffHighSupplies();
		//return(0);
	}

	//Signal to robot controller all power supplies are active
	HAL_GPIO_WritePin(LED_ACTIVE_GPIO_Port, LED_ACTIVE_Pin, GPIO_PIN_RESET);	//There is an inverter between MCU and the output, thus RESET
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	480c      	ldr	r0, [pc, #48]	@ (8001d70 <PowerOnHighSupplies+0x98>)
 8001d40:	f008 fc3c 	bl	800a5bc <HAL_GPIO_WritePin>

	powerStatus = V500_ON;
 8001d44:	4b0b      	ldr	r3, [pc, #44]	@ (8001d74 <PowerOnHighSupplies+0x9c>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	801a      	strh	r2, [r3, #0]

	return(1);
 8001d4a:	2301      	movs	r3, #1
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	08011a34 	.word	0x08011a34
 8001d54:	58020400 	.word	0x58020400
 8001d58:	08011a4c 	.word	0x08011a4c
 8001d5c:	58021800 	.word	0x58021800
 8001d60:	240001b4 	.word	0x240001b4
 8001d64:	24000004 	.word	0x24000004
 8001d68:	08011a10 	.word	0x08011a10
 8001d6c:	08011a60 	.word	0x08011a60
 8001d70:	58021000 	.word	0x58021000
 8001d74:	240008c4 	.word	0x240008c4

08001d78 <HAL_GPIO_EXTI_Callback>:

// GPIO interrupt handler
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	80fb      	strh	r3, [r7, #6]
	if (sFlashConfig.mode == RUN_MODE)
 8001d82:	4b07      	ldr	r3, [pc, #28]	@ (8001da0 <HAL_GPIO_EXTI_Callback+0x28>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d105      	bne.n	8001d96 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		// Power off request received
		if(GPIO_Pin == POWER_OFF_IRQ_Pin)
 8001d8a:	88fb      	ldrh	r3, [r7, #6]
 8001d8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d90:	d101      	bne.n	8001d96 <HAL_GPIO_EXTI_Callback+0x1e>
			PowerOffSupplies();
 8001d92:	f7ff ff55 	bl	8001c40 <PowerOffSupplies>
	}
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	240008c8 	.word	0x240008c8

08001da4 <InitializeConfigMenu>:

// Initialize the UART3 configuration menu
static void InitializeConfigMenu(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
	int item = 0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	607b      	str	r3, [r7, #4]

	config_menu[item++] = "\n\rPlasma Driver Configuration Menu";
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	1c5a      	adds	r2, r3, #1
 8001db2:	607a      	str	r2, [r7, #4]
 8001db4:	4a0c      	ldr	r2, [pc, #48]	@ (8001de8 <InitializeConfigMenu+0x44>)
 8001db6:	490d      	ldr	r1, [pc, #52]	@ (8001dec <InitializeConfigMenu+0x48>)
 8001db8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	config_menu[item++] = "   m: Change mode (Test/Run)";
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	1c5a      	adds	r2, r3, #1
 8001dc0:	607a      	str	r2, [r7, #4]
 8001dc2:	4a09      	ldr	r2, [pc, #36]	@ (8001de8 <InitializeConfigMenu+0x44>)
 8001dc4:	490a      	ldr	r1, [pc, #40]	@ (8001df0 <InitializeConfigMenu+0x4c>)
 8001dc6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if (item > CONFIG_MENU_SIZE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	dd06      	ble.n	8001dde <InitializeConfigMenu+0x3a>
		HAL_UART_Transmit(&huart3, (uint8_t *) "\n\rIncrease CONFIG_MENU_SIZE", 20, 1000);
 8001dd0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dd4:	2214      	movs	r2, #20
 8001dd6:	4907      	ldr	r1, [pc, #28]	@ (8001df4 <InitializeConfigMenu+0x50>)
 8001dd8:	4807      	ldr	r0, [pc, #28]	@ (8001df8 <InitializeConfigMenu+0x54>)
 8001dda:	f00d fb72 	bl	800f4c2 <HAL_UART_Transmit>

}
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	240001ac 	.word	0x240001ac
 8001dec:	08011a68 	.word	0x08011a68
 8001df0:	08011a8c 	.word	0x08011a8c
 8001df4:	08011aac 	.word	0x08011aac
 8001df8:	24000cb8 	.word	0x24000cb8

08001dfc <InitializeMenu>:

// Initialize the UART3 menu
static void InitializeMenu(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
	int item = 0;
 8001e02:	2300      	movs	r3, #0
 8001e04:	607b      	str	r3, [r7, #4]

	//Clear previous menu
	for (int i=0; i < MAX_MENU_SIZE; ++i)
 8001e06:	2300      	movs	r3, #0
 8001e08:	603b      	str	r3, [r7, #0]
 8001e0a:	e007      	b.n	8001e1c <InitializeMenu+0x20>
	{
		menu[i] = "";
 8001e0c:	4a4b      	ldr	r2, [pc, #300]	@ (8001f3c <InitializeMenu+0x140>)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	494b      	ldr	r1, [pc, #300]	@ (8001f40 <InitializeMenu+0x144>)
 8001e12:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i=0; i < MAX_MENU_SIZE; ++i)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	603b      	str	r3, [r7, #0]
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	2b0c      	cmp	r3, #12
 8001e20:	ddf4      	ble.n	8001e0c <InitializeMenu+0x10>
	}

	if (sFlashConfig.mode == TEST_MODE)
 8001e22:	4b48      	ldr	r3, [pc, #288]	@ (8001f44 <InitializeMenu+0x148>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d15b      	bne.n	8001ee2 <InitializeMenu+0xe6>
	{
		menu[item++] = "\n\rPlasma Driver TEST Menu";
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	1c5a      	adds	r2, r3, #1
 8001e2e:	607a      	str	r2, [r7, #4]
 8001e30:	4a42      	ldr	r2, [pc, #264]	@ (8001f3c <InitializeMenu+0x140>)
 8001e32:	4945      	ldr	r1, [pc, #276]	@ (8001f48 <InitializeMenu+0x14c>)
 8001e34:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   p: Power on supplies";
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	1c5a      	adds	r2, r3, #1
 8001e3c:	607a      	str	r2, [r7, #4]
 8001e3e:	4a3f      	ldr	r2, [pc, #252]	@ (8001f3c <InitializeMenu+0x140>)
 8001e40:	4942      	ldr	r1, [pc, #264]	@ (8001f4c <InitializeMenu+0x150>)
 8001e42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   o: Power off supplies";
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	1c5a      	adds	r2, r3, #1
 8001e4a:	607a      	str	r2, [r7, #4]
 8001e4c:	4a3b      	ldr	r2, [pc, #236]	@ (8001f3c <InitializeMenu+0x140>)
 8001e4e:	4940      	ldr	r1, [pc, #256]	@ (8001f50 <InitializeMenu+0x154>)
 8001e50:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   s: Start/stop driving H-Bridge";
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	1c5a      	adds	r2, r3, #1
 8001e58:	607a      	str	r2, [r7, #4]
 8001e5a:	4a38      	ldr	r2, [pc, #224]	@ (8001f3c <InitializeMenu+0x140>)
 8001e5c:	493d      	ldr	r1, [pc, #244]	@ (8001f54 <InitializeMenu+0x158>)
 8001e5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   f: Set H-bridge frequency (Hz)";
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	1c5a      	adds	r2, r3, #1
 8001e66:	607a      	str	r2, [r7, #4]
 8001e68:	4a34      	ldr	r2, [pc, #208]	@ (8001f3c <InitializeMenu+0x140>)
 8001e6a:	493b      	ldr	r1, [pc, #236]	@ (8001f58 <InitializeMenu+0x15c>)
 8001e6c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   d: Set H-bridge dead time (%)";
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	1c5a      	adds	r2, r3, #1
 8001e74:	607a      	str	r2, [r7, #4]
 8001e76:	4a31      	ldr	r2, [pc, #196]	@ (8001f3c <InitializeMenu+0x140>)
 8001e78:	4938      	ldr	r1, [pc, #224]	@ (8001f5c <InitializeMenu+0x160>)
 8001e7a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   a: Start ADC1 and ADC2 measurement";
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	1c5a      	adds	r2, r3, #1
 8001e82:	607a      	str	r2, [r7, #4]
 8001e84:	4a2d      	ldr	r2, [pc, #180]	@ (8001f3c <InitializeMenu+0x140>)
 8001e86:	4936      	ldr	r1, [pc, #216]	@ (8001f60 <InitializeMenu+0x164>)
 8001e88:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   b: Start ADC3 measurement";
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	1c5a      	adds	r2, r3, #1
 8001e90:	607a      	str	r2, [r7, #4]
 8001e92:	4a2a      	ldr	r2, [pc, #168]	@ (8001f3c <InitializeMenu+0x140>)
 8001e94:	4933      	ldr	r1, [pc, #204]	@ (8001f64 <InitializeMenu+0x168>)
 8001e96:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   q: Frequency correction";
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	1c5a      	adds	r2, r3, #1
 8001e9e:	607a      	str	r2, [r7, #4]
 8001ea0:	4a26      	ldr	r2, [pc, #152]	@ (8001f3c <InitializeMenu+0x140>)
 8001ea2:	4931      	ldr	r1, [pc, #196]	@ (8001f68 <InitializeMenu+0x16c>)
 8001ea4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   z: Debug output (On/Off)";
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	1c5a      	adds	r2, r3, #1
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	4a23      	ldr	r2, [pc, #140]	@ (8001f3c <InitializeMenu+0x140>)
 8001eb0:	492e      	ldr	r1, [pc, #184]	@ (8001f6c <InitializeMenu+0x170>)
 8001eb2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   c: Show/Change configuration";
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	1c5a      	adds	r2, r3, #1
 8001eba:	607a      	str	r2, [r7, #4]
 8001ebc:	4a1f      	ldr	r2, [pc, #124]	@ (8001f3c <InitializeMenu+0x140>)
 8001ebe:	492c      	ldr	r1, [pc, #176]	@ (8001f70 <InitializeMenu+0x174>)
 8001ec0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   t: Test GPIO";
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	1c5a      	adds	r2, r3, #1
 8001ec8:	607a      	str	r2, [r7, #4]
 8001eca:	4a1c      	ldr	r2, [pc, #112]	@ (8001f3c <InitializeMenu+0x140>)
 8001ecc:	4929      	ldr	r1, [pc, #164]	@ (8001f74 <InitializeMenu+0x178>)
 8001ece:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   y: Auto Frequency Adjustment";
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	1c5a      	adds	r2, r3, #1
 8001ed6:	607a      	str	r2, [r7, #4]
 8001ed8:	4a18      	ldr	r2, [pc, #96]	@ (8001f3c <InitializeMenu+0x140>)
 8001eda:	4927      	ldr	r1, [pc, #156]	@ (8001f78 <InitializeMenu+0x17c>)
 8001edc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001ee0:	e019      	b.n	8001f16 <InitializeMenu+0x11a>
	}
	else if ((sFlashConfig.mode == RUN_MODE))
 8001ee2:	4b18      	ldr	r3, [pc, #96]	@ (8001f44 <InitializeMenu+0x148>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d10e      	bne.n	8001f08 <InitializeMenu+0x10c>
	{
		menu[item++] = "\n\rPlasma Driver RUN Menu";
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	1c5a      	adds	r2, r3, #1
 8001eee:	607a      	str	r2, [r7, #4]
 8001ef0:	4a12      	ldr	r2, [pc, #72]	@ (8001f3c <InitializeMenu+0x140>)
 8001ef2:	4922      	ldr	r1, [pc, #136]	@ (8001f7c <InitializeMenu+0x180>)
 8001ef4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   c: Show/Change current configuration";
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	1c5a      	adds	r2, r3, #1
 8001efc:	607a      	str	r2, [r7, #4]
 8001efe:	4a0f      	ldr	r2, [pc, #60]	@ (8001f3c <InitializeMenu+0x140>)
 8001f00:	491f      	ldr	r1, [pc, #124]	@ (8001f80 <InitializeMenu+0x184>)
 8001f02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001f06:	e006      	b.n	8001f16 <InitializeMenu+0x11a>
	}
	else
	{
		menu[item++] = "\n\rERROR SETTING UP MENU";
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	1c5a      	adds	r2, r3, #1
 8001f0c:	607a      	str	r2, [r7, #4]
 8001f0e:	4a0b      	ldr	r2, [pc, #44]	@ (8001f3c <InitializeMenu+0x140>)
 8001f10:	491c      	ldr	r1, [pc, #112]	@ (8001f84 <InitializeMenu+0x188>)
 8001f12:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	menu_size = item;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001f88 <InitializeMenu+0x18c>)
 8001f1c:	801a      	strh	r2, [r3, #0]

	if (menu_size> MAX_MENU_SIZE)
 8001f1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001f88 <InitializeMenu+0x18c>)
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	2b0d      	cmp	r3, #13
 8001f24:	d906      	bls.n	8001f34 <InitializeMenu+0x138>
		HAL_UART_Transmit(&huart3, (uint8_t *) "\n\rIncrease MENU_SIZE", 20, 1000);
 8001f26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f2a:	2214      	movs	r2, #20
 8001f2c:	4917      	ldr	r1, [pc, #92]	@ (8001f8c <InitializeMenu+0x190>)
 8001f2e:	4818      	ldr	r0, [pc, #96]	@ (8001f90 <InitializeMenu+0x194>)
 8001f30:	f00d fac7 	bl	800f4c2 <HAL_UART_Transmit>

}
 8001f34:	bf00      	nop
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	24000174 	.word	0x24000174
 8001f40:	08011ac8 	.word	0x08011ac8
 8001f44:	240008c8 	.word	0x240008c8
 8001f48:	08011acc 	.word	0x08011acc
 8001f4c:	08011ae8 	.word	0x08011ae8
 8001f50:	08011b00 	.word	0x08011b00
 8001f54:	08011b1c 	.word	0x08011b1c
 8001f58:	08011b40 	.word	0x08011b40
 8001f5c:	08011b64 	.word	0x08011b64
 8001f60:	08011b88 	.word	0x08011b88
 8001f64:	08011bb0 	.word	0x08011bb0
 8001f68:	08011bd0 	.word	0x08011bd0
 8001f6c:	08011bec 	.word	0x08011bec
 8001f70:	08011c08 	.word	0x08011c08
 8001f74:	08011c28 	.word	0x08011c28
 8001f78:	08011c38 	.word	0x08011c38
 8001f7c:	08011c58 	.word	0x08011c58
 8001f80:	08011c74 	.word	0x08011c74
 8001f84:	08011c9c 	.word	0x08011c9c
 8001f88:	240001a8 	.word	0x240001a8
 8001f8c:	08011cb4 	.word	0x08011cb4
 8001f90:	24000cb8 	.word	0x24000cb8

08001f94 <ShowChangeConfigFlash>:

// Show configuration. Add option to change configuration
void ShowChangeConfigFlash(void)
{
 8001f94:	b590      	push	{r4, r7, lr}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
	uint16_t aYes;
	uint16_t mode;
	char input;

	printConfigFlash();
 8001f9a:	f7fe fbf9 	bl	8000790 <printConfigFlash>
	printString("\n\rChange configuration (0:No 1:Yes)? ");
 8001f9e:	482e      	ldr	r0, [pc, #184]	@ (8002058 <ShowChangeConfigFlash+0xc4>)
 8001fa0:	f7fe fbe0 	bl	8000764 <printString>
	if (GetUint16Input(&aYes, 1, 0, 1))
 8001fa4:	f107 000a 	add.w	r0, r7, #10
 8001fa8:	2301      	movs	r3, #1
 8001faa:	2200      	movs	r2, #0
 8001fac:	2101      	movs	r1, #1
 8001fae:	f7ff fd4d 	bl	8001a4c <GetUint16Input>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d04b      	beq.n	8002050 <ShowChangeConfigFlash+0xbc>
	{
		if (aYes)
 8001fb8:	897b      	ldrh	r3, [r7, #10]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d048      	beq.n	8002050 <ShowChangeConfigFlash+0xbc>
		{
			for (int i=0; i<CONFIG_MENU_SIZE; i++)
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	e017      	b.n	8001ff4 <ShowChangeConfigFlash+0x60>
			{
				HAL_UART_Transmit(&huart3, (uint8_t *) config_menu[i], strlen(config_menu[i]), 1000);
 8001fc4:	4a25      	ldr	r2, [pc, #148]	@ (800205c <ShowChangeConfigFlash+0xc8>)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8001fcc:	4a23      	ldr	r2, [pc, #140]	@ (800205c <ShowChangeConfigFlash+0xc8>)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7fe f99b 	bl	8000310 <strlen>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fe2:	4621      	mov	r1, r4
 8001fe4:	481e      	ldr	r0, [pc, #120]	@ (8002060 <ShowChangeConfigFlash+0xcc>)
 8001fe6:	f00d fa6c 	bl	800f4c2 <HAL_UART_Transmit>
				printCR();
 8001fea:	f7fe fbab 	bl	8000744 <printCR>
			for (int i=0; i<CONFIG_MENU_SIZE; i++)
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	dde4      	ble.n	8001fc4 <ShowChangeConfigFlash+0x30>
			}
			printCR();
 8001ffa:	f7fe fba3 	bl	8000744 <printCR>

			//Wait for user input
			if (HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 60000) == HAL_OK)
 8001ffe:	1df9      	adds	r1, r7, #7
 8002000:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8002004:	2201      	movs	r2, #1
 8002006:	4816      	ldr	r0, [pc, #88]	@ (8002060 <ShowChangeConfigFlash+0xcc>)
 8002008:	f00d fae9 	bl	800f5de <HAL_UART_Receive>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d11e      	bne.n	8002050 <ShowChangeConfigFlash+0xbc>
			{
				switch (input)
 8002012:	79fb      	ldrb	r3, [r7, #7]
 8002014:	2b6d      	cmp	r3, #109	@ 0x6d
 8002016:	d11b      	bne.n	8002050 <ShowChangeConfigFlash+0xbc>
				{
					case 'm': //Change mode
						printString("\n\rChange mode (0:Test 1:Run)? ");
 8002018:	4812      	ldr	r0, [pc, #72]	@ (8002064 <ShowChangeConfigFlash+0xd0>)
 800201a:	f7fe fba3 	bl	8000764 <printString>
						if (GetUint16Input(&mode, 1, 0, 1))
 800201e:	f107 0008 	add.w	r0, r7, #8
 8002022:	2301      	movs	r3, #1
 8002024:	2200      	movs	r2, #0
 8002026:	2101      	movs	r1, #1
 8002028:	f7ff fd10 	bl	8001a4c <GetUint16Input>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00d      	beq.n	800204e <ShowChangeConfigFlash+0xba>
						{   // Data entry valid
							if (sFlashConfig.mode != mode)
 8002032:	4b0d      	ldr	r3, [pc, #52]	@ (8002068 <ShowChangeConfigFlash+0xd4>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	461a      	mov	r2, r3
 8002038:	893b      	ldrh	r3, [r7, #8]
 800203a:	429a      	cmp	r2, r3
 800203c:	d007      	beq.n	800204e <ShowChangeConfigFlash+0xba>
							{
								sFlashConfig.mode = mode;
 800203e:	893b      	ldrh	r3, [r7, #8]
 8002040:	b2da      	uxtb	r2, r3
 8002042:	4b09      	ldr	r3, [pc, #36]	@ (8002068 <ShowChangeConfigFlash+0xd4>)
 8002044:	701a      	strb	r2, [r3, #0]
								InitializeMenu();
 8002046:	f7ff fed9 	bl	8001dfc <InitializeMenu>
								writeConfigFlash();
 800204a:	f7fe fb31 	bl	80006b0 <writeConfigFlash>
							}
						}
					break;
 800204e:	bf00      	nop
				}
			}
		}
	}
}
 8002050:	bf00      	nop
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	bd90      	pop	{r4, r7, pc}
 8002058:	08011ccc 	.word	0x08011ccc
 800205c:	240001ac 	.word	0x240001ac
 8002060:	24000cb8 	.word	0x24000cb8
 8002064:	08011cf4 	.word	0x08011cf4
 8002068:	240008c8 	.word	0x240008c8

0800206c <testGPIO>:

//Test GPIO settings
void testGPIO(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0

		printString("\n\rClear LED_GREEN");
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
		GetUint16Input(&aYes, 1, 0, 1);
*/
}
 8002070:	bf00      	nop
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <RunModeAction>:

// Action table for the run mode menu
static void RunModeAction(char input)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b082      	sub	sp, #8
 800207e:	af00      	add	r7, sp, #0
 8002080:	4603      	mov	r3, r0
 8002082:	71fb      	strb	r3, [r7, #7]
	switch (input)
 8002084:	79fb      	ldrb	r3, [r7, #7]
 8002086:	2b63      	cmp	r3, #99	@ 0x63
 8002088:	d102      	bne.n	8002090 <RunModeAction+0x16>
	{
		case 'c': //Show/Change current configuration
			ShowChangeConfigFlash();
 800208a:	f7ff ff83 	bl	8001f94 <ShowChangeConfigFlash>
			break;
 800208e:	bf00      	nop
	}
}
 8002090:	bf00      	nop
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <TestModeAction>:

// Action table for the test mode menu
static void TestModeAction(char input)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b09c      	sub	sp, #112	@ 0x70
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	71fb      	strb	r3, [r7, #7]
	switch (input)
 80020a2:	79fb      	ldrb	r3, [r7, #7]
 80020a4:	3b61      	subs	r3, #97	@ 0x61
 80020a6:	2b19      	cmp	r3, #25
 80020a8:	f200 80e6 	bhi.w	8002278 <TestModeAction+0x1e0>
 80020ac:	a201      	add	r2, pc, #4	@ (adr r2, 80020b4 <TestModeAction+0x1c>)
 80020ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b2:	bf00      	nop
 80020b4:	08002153 	.word	0x08002153
 80020b8:	0800217b 	.word	0x0800217b
 80020bc:	08002259 	.word	0x08002259
 80020c0:	080021bd 	.word	0x080021bd
 80020c4:	08002279 	.word	0x08002279
 80020c8:	08002193 	.word	0x08002193
 80020cc:	08002279 	.word	0x08002279
 80020d0:	08002279 	.word	0x08002279
 80020d4:	08002279 	.word	0x08002279
 80020d8:	08002279 	.word	0x08002279
 80020dc:	08002279 	.word	0x08002279
 80020e0:	08002279 	.word	0x08002279
 80020e4:	08002279 	.word	0x08002279
 80020e8:	08002279 	.word	0x08002279
 80020ec:	08002147 	.word	0x08002147
 80020f0:	0800211d 	.word	0x0800211d
 80020f4:	08002209 	.word	0x08002209
 80020f8:	08002279 	.word	0x08002279
 80020fc:	080021e3 	.word	0x080021e3
 8002100:	0800225f 	.word	0x0800225f
 8002104:	08002279 	.word	0x08002279
 8002108:	08002279 	.word	0x08002279
 800210c:	08002279 	.word	0x08002279
 8002110:	08002279 	.word	0x08002279
 8002114:	08002265 	.word	0x08002265
 8002118:	08002237 	.word	0x08002237
	{
		case 'p': //Power supplies on
			if (powerStatus == V500_OFF)
 800211c:	4b58      	ldr	r3, [pc, #352]	@ (8002280 <TestModeAction+0x1e8>)
 800211e:	881b      	ldrh	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d10c      	bne.n	800213e <TestModeAction+0xa6>
			{
				if (PowerOnHighSupplies() == POWERON_FAILED)
 8002124:	f7ff fdd8 	bl	8001cd8 <PowerOnHighSupplies>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d103      	bne.n	8002136 <TestModeAction+0x9e>
				{
					printString("\n\rPower on failed\n\r");
 800212e:	4855      	ldr	r0, [pc, #340]	@ (8002284 <TestModeAction+0x1ec>)
 8002130:	f7fe fb18 	bl	8000764 <printString>
			}
			else
			{
				printString("\n\rPower supplies are on\n\r");
			}
			break;
 8002134:	e0a0      	b.n	8002278 <TestModeAction+0x1e0>
					printString("\n\rPower on succeeded\n\r");
 8002136:	4854      	ldr	r0, [pc, #336]	@ (8002288 <TestModeAction+0x1f0>)
 8002138:	f7fe fb14 	bl	8000764 <printString>
			break;
 800213c:	e09c      	b.n	8002278 <TestModeAction+0x1e0>
				printString("\n\rPower supplies are on\n\r");
 800213e:	4853      	ldr	r0, [pc, #332]	@ (800228c <TestModeAction+0x1f4>)
 8002140:	f7fe fb10 	bl	8000764 <printString>
			break;
 8002144:	e098      	b.n	8002278 <TestModeAction+0x1e0>

		case 'o': //Power supplies off
			printString("\n\rPower off supplies\n\r");
 8002146:	4852      	ldr	r0, [pc, #328]	@ (8002290 <TestModeAction+0x1f8>)
 8002148:	f7fe fb0c 	bl	8000764 <printString>
			PowerOffHighSupplies();
 800214c:	f7ff fd52 	bl	8001bf4 <PowerOffHighSupplies>
			break;
 8002150:	e092      	b.n	8002278 <TestModeAction+0x1e0>

		case 'a': //Start ADC1 and ADC2 analog voltage measurement
			if (sHbridge.on)
 8002152:	4b50      	ldr	r3, [pc, #320]	@ (8002294 <TestModeAction+0x1fc>)
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00b      	beq.n	8002172 <TestModeAction+0xda>
			{
				//Setup to read ADC1 and ADC2 channels
				//Reading will start at TIM1 CH1 0->1 interrupt
				measureBridgePlasmaADC12();
 800215a:	f7ff f951 	bl	8001400 <measureBridgePlasmaADC12>
				//Wait until ADC3 reading is done
				while (sADC.adc12_reading) ;
 800215e:	bf00      	nop
 8002160:	4b4d      	ldr	r3, [pc, #308]	@ (8002298 <TestModeAction+0x200>)
 8002162:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	@ 0x70e
 8002166:	b29b      	uxth	r3, r3
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1f9      	bne.n	8002160 <TestModeAction+0xc8>
				//Print ADC3 data on UART3
				printADC12data();
 800216c:	f7fe ff34 	bl	8000fd8 <printADC12data>
			}
			else
			{
				printString("\n\r ---- H-Bridge needs to be on");
			}
			break;
 8002170:	e082      	b.n	8002278 <TestModeAction+0x1e0>
				printString("\n\r ---- H-Bridge needs to be on");
 8002172:	484a      	ldr	r0, [pc, #296]	@ (800229c <TestModeAction+0x204>)
 8002174:	f7fe faf6 	bl	8000764 <printString>
			break;
 8002178:	e07e      	b.n	8002278 <TestModeAction+0x1e0>

		case 'b': //Start ADC3 analog voltage measurement
				//Start reading ADC3 channels
				measureVoltagesTemperaturesADC3();
 800217a:	f7ff fbc5 	bl	8001908 <measureVoltagesTemperaturesADC3>
				//Wait until ADC3 reading is done
				while (sADC.adc3_reading) ;
 800217e:	bf00      	nop
 8002180:	4b45      	ldr	r3, [pc, #276]	@ (8002298 <TestModeAction+0x200>)
 8002182:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	@ 0x70c
 8002186:	b29b      	uxth	r3, r3
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1f9      	bne.n	8002180 <TestModeAction+0xe8>
				//Print ADC3 data on UART3
				printADC3data();
 800218c:	f7ff fb76 	bl	800187c <printADC3data>
			break;
 8002190:	e072      	b.n	8002278 <TestModeAction+0x1e0>

		case 'f': //Enter frequency (Hz)
			printHbridgeData();
 8002192:	f7fe fbe5 	bl	8000960 <printHbridgeData>
			printString("\n\rEnter frequency (Hz): ");
 8002196:	4842      	ldr	r0, [pc, #264]	@ (80022a0 <TestModeAction+0x208>)
 8002198:	f7fe fae4 	bl	8000764 <printString>
			if (GetUint16Input(&sHbridge.frequency, 1, MIN_FREQUENCY, MAX_FREQUENCY))
 800219c:	f64f 53e8 	movw	r3, #65000	@ 0xfde8
 80021a0:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80021a4:	2101      	movs	r1, #1
 80021a6:	483f      	ldr	r0, [pc, #252]	@ (80022a4 <TestModeAction+0x20c>)
 80021a8:	f7ff fc50 	bl	8001a4c <GetUint16Input>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d05b      	beq.n	800226a <TestModeAction+0x1d2>
			{   // Data entry valid
				programHbridge();
 80021b2:	f7fe fbfd 	bl	80009b0 <programHbridge>
				printHbridgeData();
 80021b6:	f7fe fbd3 	bl	8000960 <printHbridgeData>
			}
			break;
 80021ba:	e056      	b.n	800226a <TestModeAction+0x1d2>

		case 'd': //Enter dead time (%)
			printHbridgeData();
 80021bc:	f7fe fbd0 	bl	8000960 <printHbridgeData>
			printString("\n\rEnter dead time (%): ");
 80021c0:	4839      	ldr	r0, [pc, #228]	@ (80022a8 <TestModeAction+0x210>)
 80021c2:	f7fe facf 	bl	8000764 <printString>
			if (GetUint16Input(&sHbridge.deadtime, 1, MIN_DEADTIME, MAX_DEADTIME))
 80021c6:	2328      	movs	r3, #40	@ 0x28
 80021c8:	2201      	movs	r2, #1
 80021ca:	2101      	movs	r1, #1
 80021cc:	4837      	ldr	r0, [pc, #220]	@ (80022ac <TestModeAction+0x214>)
 80021ce:	f7ff fc3d 	bl	8001a4c <GetUint16Input>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d04a      	beq.n	800226e <TestModeAction+0x1d6>
			{   // Data entry valid
				programHbridge();
 80021d8:	f7fe fbea 	bl	80009b0 <programHbridge>
				printHbridgeData();
 80021dc:	f7fe fbc0 	bl	8000960 <printHbridgeData>
			}
			break;
 80021e0:	e045      	b.n	800226e <TestModeAction+0x1d6>

		case 's': //Start/stop driving H-bridge
			printHbridgeData();
 80021e2:	f7fe fbbd 	bl	8000960 <printHbridgeData>
			printString("\n\rDrive H-bridge 1:Yes 0:No : ");
 80021e6:	4832      	ldr	r0, [pc, #200]	@ (80022b0 <TestModeAction+0x218>)
 80021e8:	f7fe fabc 	bl	8000764 <printString>
			if (GetUint16Input(&sHbridge.on, 1, 0, 1))
 80021ec:	2301      	movs	r3, #1
 80021ee:	2200      	movs	r2, #0
 80021f0:	2101      	movs	r1, #1
 80021f2:	4828      	ldr	r0, [pc, #160]	@ (8002294 <TestModeAction+0x1fc>)
 80021f4:	f7ff fc2a 	bl	8001a4c <GetUint16Input>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d039      	beq.n	8002272 <TestModeAction+0x1da>
			{   // Data entry valid
				programHbridge();
 80021fe:	f7fe fbd7 	bl	80009b0 <programHbridge>
				printHbridgeData();
 8002202:	f7fe fbad 	bl	8000960 <printHbridgeData>
			}
			break;
 8002206:	e034      	b.n	8002272 <TestModeAction+0x1da>

		case 'q': //Frequency correction
			int16_t freqCorr;
			if (freqCorrection(&freqCorr))
 8002208:	f107 036e 	add.w	r3, r7, #110	@ 0x6e
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff f831 	bl	8001274 <freqCorrection>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d02e      	beq.n	8002276 <TestModeAction+0x1de>
			{
				char text[100];
				sprintf(text, "\n\rFrequency correction: %i", (int) freqCorr);
 8002218:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 800221c:	461a      	mov	r2, r3
 800221e:	f107 0308 	add.w	r3, r7, #8
 8002222:	4924      	ldr	r1, [pc, #144]	@ (80022b4 <TestModeAction+0x21c>)
 8002224:	4618      	mov	r0, r3
 8002226:	f00e fd11 	bl	8010c4c <siprintf>
				printString(text);
 800222a:	f107 0308 	add.w	r3, r7, #8
 800222e:	4618      	mov	r0, r3
 8002230:	f7fe fa98 	bl	8000764 <printString>
			}
			break;
 8002234:	e01f      	b.n	8002276 <TestModeAction+0x1de>

		case 'z': //Debug output
			printNumber("\n\rCurrent Debug output: ", debug, 0);
 8002236:	4b20      	ldr	r3, [pc, #128]	@ (80022b8 <TestModeAction+0x220>)
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	2200      	movs	r2, #0
 800223c:	4619      	mov	r1, r3
 800223e:	481f      	ldr	r0, [pc, #124]	@ (80022bc <TestModeAction+0x224>)
 8002240:	f7fe fad2 	bl	80007e8 <printNumber>
			printString("\n\rSet Debug output 1:On 0:Off : ");
 8002244:	481e      	ldr	r0, [pc, #120]	@ (80022c0 <TestModeAction+0x228>)
 8002246:	f7fe fa8d 	bl	8000764 <printString>
			GetUint16Input(&debug, 1, 0, 1);
 800224a:	2301      	movs	r3, #1
 800224c:	2200      	movs	r2, #0
 800224e:	2101      	movs	r1, #1
 8002250:	4819      	ldr	r0, [pc, #100]	@ (80022b8 <TestModeAction+0x220>)
 8002252:	f7ff fbfb 	bl	8001a4c <GetUint16Input>
			break;
 8002256:	e00f      	b.n	8002278 <TestModeAction+0x1e0>

		case 'c': //Show/Change current configuration
			ShowChangeConfigFlash();
 8002258:	f7ff fe9c 	bl	8001f94 <ShowChangeConfigFlash>
			break;
 800225c:	e00c      	b.n	8002278 <TestModeAction+0x1e0>

		case 't': //Test GPIO
			testGPIO();
 800225e:	f7ff ff05 	bl	800206c <testGPIO>
			break;
 8002262:	e009      	b.n	8002278 <TestModeAction+0x1e0>

		case 'y': //Auto Freq Adjust
			autoFreqAdj();
 8002264:	f7ff f978 	bl	8001558 <autoFreqAdj>
			break;
 8002268:	e006      	b.n	8002278 <TestModeAction+0x1e0>
			break;
 800226a:	bf00      	nop
 800226c:	e004      	b.n	8002278 <TestModeAction+0x1e0>
			break;
 800226e:	bf00      	nop
 8002270:	e002      	b.n	8002278 <TestModeAction+0x1e0>
			break;
 8002272:	bf00      	nop
 8002274:	e000      	b.n	8002278 <TestModeAction+0x1e0>
			break;
 8002276:	bf00      	nop
	}
}
 8002278:	bf00      	nop
 800227a:	3770      	adds	r7, #112	@ 0x70
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	240008c4 	.word	0x240008c4
 8002284:	08011d14 	.word	0x08011d14
 8002288:	08011d28 	.word	0x08011d28
 800228c:	08011d40 	.word	0x08011d40
 8002290:	08011d5c 	.word	0x08011d5c
 8002294:	2400001c 	.word	0x2400001c
 8002298:	240001b4 	.word	0x240001b4
 800229c:	08011d74 	.word	0x08011d74
 80022a0:	08011d94 	.word	0x08011d94
 80022a4:	2400001e 	.word	0x2400001e
 80022a8:	08011db0 	.word	0x08011db0
 80022ac:	24000020 	.word	0x24000020
 80022b0:	08011dc8 	.word	0x08011dc8
 80022b4:	08011804 	.word	0x08011804
 80022b8:	24000000 	.word	0x24000000
 80022bc:	08011de8 	.word	0x08011de8
 80022c0:	08011e04 	.word	0x08011e04

080022c4 <PlasmaDriverMenu>:

// Print the plasma driver menu on UART3, and execute entered command.
static void PlasmaDriverMenu(void)
{
 80022c4:	b590      	push	{r4, r7, lr}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
	char input;

	//Wait for user input
	if (HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 1) == HAL_OK)
 80022ca:	1cf9      	adds	r1, r7, #3
 80022cc:	2301      	movs	r3, #1
 80022ce:	2201      	movs	r2, #1
 80022d0:	4822      	ldr	r0, [pc, #136]	@ (800235c <PlasmaDriverMenu+0x98>)
 80022d2:	f00d f984 	bl	800f5de <HAL_UART_Receive>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d13b      	bne.n	8002354 <PlasmaDriverMenu+0x90>
	{
		// Return pressed -- Display Menu
		if (input == 13)
 80022dc:	78fb      	ldrb	r3, [r7, #3]
 80022de:	2b0d      	cmp	r3, #13
 80022e0:	d123      	bne.n	800232a <PlasmaDriverMenu+0x66>
		{
			for (int i=0; i<menu_size; i++)
 80022e2:	2300      	movs	r3, #0
 80022e4:	607b      	str	r3, [r7, #4]
 80022e6:	e017      	b.n	8002318 <PlasmaDriverMenu+0x54>
			{
				HAL_UART_Transmit(&huart3, (uint8_t *) menu[i], strlen(menu[i]), 1000);
 80022e8:	4a1d      	ldr	r2, [pc, #116]	@ (8002360 <PlasmaDriverMenu+0x9c>)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80022f0:	4a1b      	ldr	r2, [pc, #108]	@ (8002360 <PlasmaDriverMenu+0x9c>)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7fe f809 	bl	8000310 <strlen>
 80022fe:	4603      	mov	r3, r0
 8002300:	b29a      	uxth	r2, r3
 8002302:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002306:	4621      	mov	r1, r4
 8002308:	4814      	ldr	r0, [pc, #80]	@ (800235c <PlasmaDriverMenu+0x98>)
 800230a:	f00d f8da 	bl	800f4c2 <HAL_UART_Transmit>
				printCR();
 800230e:	f7fe fa19 	bl	8000744 <printCR>
			for (int i=0; i<menu_size; i++)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3301      	adds	r3, #1
 8002316:	607b      	str	r3, [r7, #4]
 8002318:	4b12      	ldr	r3, [pc, #72]	@ (8002364 <PlasmaDriverMenu+0xa0>)
 800231a:	881b      	ldrh	r3, [r3, #0]
 800231c:	461a      	mov	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4293      	cmp	r3, r2
 8002322:	dbe1      	blt.n	80022e8 <PlasmaDriverMenu+0x24>
			}
			printCR();
 8002324:	f7fe fa0e 	bl	8000744 <printCR>
				RunModeAction(input);
			else
				printString("\n\r*** ERROR *** Invalid mode");
		}
	}
}
 8002328:	e014      	b.n	8002354 <PlasmaDriverMenu+0x90>
			if (sFlashConfig.mode == TEST_MODE)
 800232a:	4b0f      	ldr	r3, [pc, #60]	@ (8002368 <PlasmaDriverMenu+0xa4>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d104      	bne.n	800233c <PlasmaDriverMenu+0x78>
				TestModeAction(input);
 8002332:	78fb      	ldrb	r3, [r7, #3]
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff feaf 	bl	8002098 <TestModeAction>
}
 800233a:	e00b      	b.n	8002354 <PlasmaDriverMenu+0x90>
			else if (sFlashConfig.mode == RUN_MODE)
 800233c:	4b0a      	ldr	r3, [pc, #40]	@ (8002368 <PlasmaDriverMenu+0xa4>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d104      	bne.n	800234e <PlasmaDriverMenu+0x8a>
				RunModeAction(input);
 8002344:	78fb      	ldrb	r3, [r7, #3]
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff fe97 	bl	800207a <RunModeAction>
}
 800234c:	e002      	b.n	8002354 <PlasmaDriverMenu+0x90>
				printString("\n\r*** ERROR *** Invalid mode");
 800234e:	4807      	ldr	r0, [pc, #28]	@ (800236c <PlasmaDriverMenu+0xa8>)
 8002350:	f7fe fa08 	bl	8000764 <printString>
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	bd90      	pop	{r4, r7, pc}
 800235c:	24000cb8 	.word	0x24000cb8
 8002360:	24000174 	.word	0x24000174
 8002364:	240001a8 	.word	0x240001a8
 8002368:	240008c8 	.word	0x240008c8
 800236c:	08011e28 	.word	0x08011e28

08002370 <PlasmaDriverInit>:

// Initialize the plasma driver
void PlasmaDriverInit(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
	//Enable line driver 2 (HAL has initialized all GPIO)
	HAL_GPIO_WritePin(LINE_DRIVER2_ENABLE_GPIO_Port, LINE_DRIVER2_ENABLE_Pin, GPIO_PIN_RESET);  //Enable = Low
 8002374:	2200      	movs	r2, #0
 8002376:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800237a:	4821      	ldr	r0, [pc, #132]	@ (8002400 <PlasmaDriverInit+0x90>)
 800237c:	f008 f91e 	bl	800a5bc <HAL_GPIO_WritePin>
	printString("\n\rEnable Line Drive 2");
 8002380:	4820      	ldr	r0, [pc, #128]	@ (8002404 <PlasmaDriverInit+0x94>)
 8002382:	f7fe f9ef 	bl	8000764 <printString>

	//Power On Supplies in order 15V, 3.3V switch
	PowerOnLowSupplies();
 8002386:	f7ff fc63 	bl	8001c50 <PowerOnLowSupplies>

	//Read configuration from flash
	readConfigFlash();
 800238a:	f7fe f9cb 	bl	8000724 <readConfigFlash>

	//Has the flash configuration been initialized?
	if (sFlashConfig.mode == 0xFF)
 800238e:	4b1e      	ldr	r3, [pc, #120]	@ (8002408 <PlasmaDriverInit+0x98>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2bff      	cmp	r3, #255	@ 0xff
 8002394:	d107      	bne.n	80023a6 <PlasmaDriverInit+0x36>
	{
		// write default configuration to flash
		if (writeConfigFlash() != 0)
 8002396:	f7fe f98b 	bl	80006b0 <writeConfigFlash>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d002      	beq.n	80023a6 <PlasmaDriverInit+0x36>
			printString("\n\r*** ERROR FLASH");
 80023a0:	481a      	ldr	r0, [pc, #104]	@ (800240c <PlasmaDriverInit+0x9c>)
 80023a2:	f7fe f9df 	bl	8000764 <printString>
	}

	//Initialize menu and configuration menu
	InitializeMenu();
 80023a6:	f7ff fd29 	bl	8001dfc <InitializeMenu>
	InitializeConfigMenu();
 80023aa:	f7ff fcfb 	bl	8001da4 <InitializeConfigMenu>

	//Calibrate ADC1, ADC2 and ADC3
	printString("\n\rCalibrate ADC1, ADC2 and ADC3");
 80023ae:	4818      	ldr	r0, [pc, #96]	@ (8002410 <PlasmaDriverInit+0xa0>)
 80023b0:	f7fe f9d8 	bl	8000764 <printString>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 80023b4:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80023b8:	2100      	movs	r1, #0
 80023ba:	4816      	ldr	r0, [pc, #88]	@ (8002414 <PlasmaDriverInit+0xa4>)
 80023bc:	f004 fc04 	bl	8006bc8 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 80023c0:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80023c4:	2100      	movs	r1, #0
 80023c6:	4814      	ldr	r0, [pc, #80]	@ (8002418 <PlasmaDriverInit+0xa8>)
 80023c8:	f004 fbfe 	bl	8006bc8 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 80023cc:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80023d0:	2100      	movs	r1, #0
 80023d2:	4812      	ldr	r0, [pc, #72]	@ (800241c <PlasmaDriverInit+0xac>)
 80023d4:	f004 fbf8 	bl	8006bc8 <HAL_ADCEx_Calibration_Start>

	//Power On Supply 500V
	if (sFlashConfig.mode == RUN_MODE)
 80023d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002408 <PlasmaDriverInit+0x98>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d10d      	bne.n	80023fc <PlasmaDriverInit+0x8c>
	{
		//POWER_OFF_IRQ needs to be high before powering On
		if (HAL_GPIO_ReadPin(POWER_OFF_IRQ_GPIO_Port, POWER_OFF_IRQ_Pin) == GPIO_PIN_RESET)		//There is an inverter between MCU and the input, thus check RESET
 80023e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80023e4:	480e      	ldr	r0, [pc, #56]	@ (8002420 <PlasmaDriverInit+0xb0>)
 80023e6:	f008 f8d1 	bl	800a58c <HAL_GPIO_ReadPin>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d102      	bne.n	80023f6 <PlasmaDriverInit+0x86>
			PowerOnHighSupplies();
 80023f0:	f7ff fc72 	bl	8001cd8 <PowerOnHighSupplies>
		else
		printString("\n\rPOWER_OFF_IRQ line is not high - 500V is not powered on");
	}
}
 80023f4:	e002      	b.n	80023fc <PlasmaDriverInit+0x8c>
		printString("\n\rPOWER_OFF_IRQ line is not high - 500V is not powered on");
 80023f6:	480b      	ldr	r0, [pc, #44]	@ (8002424 <PlasmaDriverInit+0xb4>)
 80023f8:	f7fe f9b4 	bl	8000764 <printString>
}
 80023fc:	bf00      	nop
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	58020400 	.word	0x58020400
 8002404:	08011e48 	.word	0x08011e48
 8002408:	240008c8 	.word	0x240008c8
 800240c:	08011e60 	.word	0x08011e60
 8002410:	08011e74 	.word	0x08011e74
 8002414:	24000908 	.word	0x24000908
 8002418:	24000978 	.word	0x24000978
 800241c:	240009e8 	.word	0x240009e8
 8002420:	58021000 	.word	0x58021000
 8002424:	08011e94 	.word	0x08011e94

08002428 <PlasmaDoTask>:

// This command is called from a while loop, and will execute any needed task.
void PlasmaDoTask(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
	PlasmaDriverMenu(); //Check UART3 and execute command
 800242c:	f7ff ff4a 	bl	80022c4 <PlasmaDriverMenu>

	if (sFlashConfig.mode == RUN_MODE)
 8002430:	4b0d      	ldr	r3, [pc, #52]	@ (8002468 <PlasmaDoTask+0x40>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d114      	bne.n	8002462 <PlasmaDoTask+0x3a>
	{
		//Check if robot controller requested the plasma On or Off
		if (HAL_GPIO_ReadPin(TURN_PLASMA_ON_GPIO_Port, TURN_PLASMA_ON_Pin) == GPIO_PIN_RESET)		//There is an inverter between MCU and the input, thus check RESET
 8002438:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800243c:	480b      	ldr	r0, [pc, #44]	@ (800246c <PlasmaDoTask+0x44>)
 800243e:	f008 f8a5 	bl	800a58c <HAL_GPIO_ReadPin>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d10c      	bne.n	8002462 <PlasmaDoTask+0x3a>
		{
			if (powerStatus == V500_ON)
 8002448:	4b09      	ldr	r3, [pc, #36]	@ (8002470 <PlasmaDoTask+0x48>)
 800244a:	881b      	ldrh	r3, [r3, #0]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d105      	bne.n	800245c <PlasmaDoTask+0x34>
			{
				sHbridge.on = 1; // Turn Hbridge on
 8002450:	4b08      	ldr	r3, [pc, #32]	@ (8002474 <PlasmaDoTask+0x4c>)
 8002452:	2201      	movs	r2, #1
 8002454:	801a      	strh	r2, [r3, #0]
				programHbridge();
 8002456:	f7fe faab 	bl	80009b0 <programHbridge>
			}
			else
				printString("\n\rUnable to turn H-bridge on, since 500V is not powered on");
		}
	}
}
 800245a:	e002      	b.n	8002462 <PlasmaDoTask+0x3a>
				printString("\n\rUnable to turn H-bridge on, since 500V is not powered on");
 800245c:	4806      	ldr	r0, [pc, #24]	@ (8002478 <PlasmaDoTask+0x50>)
 800245e:	f7fe f981 	bl	8000764 <printString>
}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	240008c8 	.word	0x240008c8
 800246c:	58021000 	.word	0x58021000
 8002470:	240008c4 	.word	0x240008c4
 8002474:	2400001c 	.word	0x2400001c
 8002478:	08011ed0 	.word	0x08011ed0

0800247c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002480:	f001 fdd4 	bl	800402c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002484:	f000 f826 	bl	80024d4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002488:	f000 f894 	bl	80025b4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800248c:	f000 fe4c 	bl	8003128 <MX_GPIO_Init>
  MX_DMA_Init();
 8002490:	f000 fe22 	bl	80030d8 <MX_DMA_Init>
  MX_TIM1_Init();
 8002494:	f000 fc26 	bl	8002ce4 <MX_TIM1_Init>
  MX_ETH_Init();
 8002498:	f000 fb3e 	bl	8002b18 <MX_ETH_Init>
  MX_ADC2_Init();
 800249c:	f000 f958 	bl	8002750 <MX_ADC2_Init>
  MX_USB_OTG_HS_USB_Init();
 80024a0:	f000 fe12 	bl	80030c8 <MX_USB_OTG_HS_USB_Init>
  MX_ADC3_Init();
 80024a4:	f000 f9f8 	bl	8002898 <MX_ADC3_Init>
  MX_USART3_UART_Init();
 80024a8:	f000 fbd0 	bl	8002c4c <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80024ac:	f000 f8b2 	bl	8002614 <MX_ADC1_Init>
  MX_COMP2_Init();
 80024b0:	f000 fb04 	bl	8002abc <MX_COMP2_Init>
  MX_TIM2_Init();
 80024b4:	f000 fca8 	bl	8002e08 <MX_TIM2_Init>
  MX_LPUART1_UART_Init();
 80024b8:	f000 fb7a 	bl	8002bb0 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 80024bc:	f000 fcfe 	bl	8002ebc <MX_TIM3_Init>
  MX_TIM4_Init();
 80024c0:	f000 fd50 	bl	8002f64 <MX_TIM4_Init>
  MX_TIM15_Init();
 80024c4:	f000 fda8 	bl	8003018 <MX_TIM15_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  PlasmaDriverInit();  			//Initialize plasma driver
 80024c8:	f7ff ff52 	bl	8002370 <PlasmaDriverInit>
  while (1)
  {
	PlasmaDoTask();     	    //Handle plasma driver task
 80024cc:	f7ff ffac 	bl	8002428 <PlasmaDoTask>
 80024d0:	e7fc      	b.n	80024cc <main+0x50>
	...

080024d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b09c      	sub	sp, #112	@ 0x70
 80024d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024de:	224c      	movs	r2, #76	@ 0x4c
 80024e0:	2100      	movs	r1, #0
 80024e2:	4618      	mov	r0, r3
 80024e4:	f00e fbd2 	bl	8010c8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024e8:	1d3b      	adds	r3, r7, #4
 80024ea:	2220      	movs	r2, #32
 80024ec:	2100      	movs	r1, #0
 80024ee:	4618      	mov	r0, r3
 80024f0:	f00e fbcc 	bl	8010c8c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80024f4:	2002      	movs	r0, #2
 80024f6:	f008 f895 	bl	800a624 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80024fa:	2300      	movs	r3, #0
 80024fc:	603b      	str	r3, [r7, #0]
 80024fe:	4b2c      	ldr	r3, [pc, #176]	@ (80025b0 <SystemClock_Config+0xdc>)
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	4a2b      	ldr	r2, [pc, #172]	@ (80025b0 <SystemClock_Config+0xdc>)
 8002504:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002508:	6193      	str	r3, [r2, #24]
 800250a:	4b29      	ldr	r3, [pc, #164]	@ (80025b0 <SystemClock_Config+0xdc>)
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002512:	603b      	str	r3, [r7, #0]
 8002514:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002516:	bf00      	nop
 8002518:	4b25      	ldr	r3, [pc, #148]	@ (80025b0 <SystemClock_Config+0xdc>)
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002520:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002524:	d1f8      	bne.n	8002518 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8002526:	2321      	movs	r3, #33	@ 0x21
 8002528:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800252a:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800252e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002530:	2301      	movs	r3, #1
 8002532:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002534:	2302      	movs	r3, #2
 8002536:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002538:	2302      	movs	r3, #2
 800253a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800253c:	2304      	movs	r3, #4
 800253e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8002540:	f240 1313 	movw	r3, #275	@ 0x113
 8002544:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8002546:	2301      	movs	r3, #1
 8002548:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800254a:	2304      	movs	r3, #4
 800254c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800254e:	2302      	movs	r3, #2
 8002550:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8002552:	2304      	movs	r3, #4
 8002554:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002556:	2300      	movs	r3, #0
 8002558:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800255a:	2300      	movs	r3, #0
 800255c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800255e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002562:	4618      	mov	r0, r3
 8002564:	f008 f898 	bl	800a698 <HAL_RCC_OscConfig>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800256e:	f000 ff4b 	bl	8003408 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002572:	233f      	movs	r3, #63	@ 0x3f
 8002574:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002576:	2303      	movs	r3, #3
 8002578:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800257a:	2300      	movs	r3, #0
 800257c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800257e:	2308      	movs	r3, #8
 8002580:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002582:	2340      	movs	r3, #64	@ 0x40
 8002584:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002586:	2340      	movs	r3, #64	@ 0x40
 8002588:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV16;
 800258a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800258e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002590:	2340      	movs	r3, #64	@ 0x40
 8002592:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002594:	1d3b      	adds	r3, r7, #4
 8002596:	2103      	movs	r1, #3
 8002598:	4618      	mov	r0, r3
 800259a:	f008 fc57 	bl	800ae4c <HAL_RCC_ClockConfig>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80025a4:	f000 ff30 	bl	8003408 <Error_Handler>
  }
}
 80025a8:	bf00      	nop
 80025aa:	3770      	adds	r7, #112	@ 0x70
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	58024800 	.word	0x58024800

080025b4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b0ae      	sub	sp, #184	@ 0xb8
 80025b8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025ba:	463b      	mov	r3, r7
 80025bc:	22b8      	movs	r2, #184	@ 0xb8
 80025be:	2100      	movs	r1, #0
 80025c0:	4618      	mov	r0, r3
 80025c2:	f00e fb63 	bl	8010c8c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80025c6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80025ca:	f04f 0300 	mov.w	r3, #0
 80025ce:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 80025d2:	2301      	movs	r3, #1
 80025d4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 80025d6:	2318      	movs	r3, #24
 80025d8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80025da:	2302      	movs	r3, #2
 80025dc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80025de:	2302      	movs	r3, #2
 80025e0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80025e2:	2302      	movs	r3, #2
 80025e4:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80025e6:	23c0      	movs	r3, #192	@ 0xc0
 80025e8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80025ea:	2300      	movs	r3, #0
 80025ec:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80025ee:	2300      	movs	r3, #0
 80025f0:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80025f2:	2300      	movs	r3, #0
 80025f4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025f8:	463b      	mov	r3, r7
 80025fa:	4618      	mov	r0, r3
 80025fc:	f008 ffb2 	bl	800b564 <HAL_RCCEx_PeriphCLKConfig>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8002606:	f000 feff 	bl	8003408 <Error_Handler>
  }
}
 800260a:	bf00      	nop
 800260c:	37b8      	adds	r7, #184	@ 0xb8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
	...

08002614 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b08c      	sub	sp, #48	@ 0x30
 8002618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800261a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	605a      	str	r2, [r3, #4]
 8002624:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002626:	463b      	mov	r3, r7
 8002628:	2224      	movs	r2, #36	@ 0x24
 800262a:	2100      	movs	r1, #0
 800262c:	4618      	mov	r0, r3
 800262e:	f00e fb2d 	bl	8010c8c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002632:	4b42      	ldr	r3, [pc, #264]	@ (800273c <MX_ADC1_Init+0x128>)
 8002634:	4a42      	ldr	r2, [pc, #264]	@ (8002740 <MX_ADC1_Init+0x12c>)
 8002636:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002638:	4b40      	ldr	r3, [pc, #256]	@ (800273c <MX_ADC1_Init+0x128>)
 800263a:	2200      	movs	r2, #0
 800263c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800263e:	4b3f      	ldr	r3, [pc, #252]	@ (800273c <MX_ADC1_Init+0x128>)
 8002640:	2200      	movs	r2, #0
 8002642:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002644:	4b3d      	ldr	r3, [pc, #244]	@ (800273c <MX_ADC1_Init+0x128>)
 8002646:	2201      	movs	r2, #1
 8002648:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800264a:	4b3c      	ldr	r3, [pc, #240]	@ (800273c <MX_ADC1_Init+0x128>)
 800264c:	2208      	movs	r2, #8
 800264e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002650:	4b3a      	ldr	r3, [pc, #232]	@ (800273c <MX_ADC1_Init+0x128>)
 8002652:	2200      	movs	r2, #0
 8002654:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002656:	4b39      	ldr	r3, [pc, #228]	@ (800273c <MX_ADC1_Init+0x128>)
 8002658:	2201      	movs	r2, #1
 800265a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 800265c:	4b37      	ldr	r3, [pc, #220]	@ (800273c <MX_ADC1_Init+0x128>)
 800265e:	2203      	movs	r2, #3
 8002660:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002662:	4b36      	ldr	r3, [pc, #216]	@ (800273c <MX_ADC1_Init+0x128>)
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC1;
 800266a:	4b34      	ldr	r3, [pc, #208]	@ (800273c <MX_ADC1_Init+0x128>)
 800266c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002670:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002672:	4b32      	ldr	r3, [pc, #200]	@ (800273c <MX_ADC1_Init+0x128>)
 8002674:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002678:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 800267a:	4b30      	ldr	r3, [pc, #192]	@ (800273c <MX_ADC1_Init+0x128>)
 800267c:	2201      	movs	r2, #1
 800267e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002680:	4b2e      	ldr	r3, [pc, #184]	@ (800273c <MX_ADC1_Init+0x128>)
 8002682:	2200      	movs	r2, #0
 8002684:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002686:	4b2d      	ldr	r3, [pc, #180]	@ (800273c <MX_ADC1_Init+0x128>)
 8002688:	2200      	movs	r2, #0
 800268a:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 800268c:	4b2b      	ldr	r3, [pc, #172]	@ (800273c <MX_ADC1_Init+0x128>)
 800268e:	2200      	movs	r2, #0
 8002690:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002694:	4829      	ldr	r0, [pc, #164]	@ (800273c <MX_ADC1_Init+0x128>)
 8002696:	f002 f9d1 	bl	8004a3c <HAL_ADC_Init>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80026a0:	f000 feb2 	bl	8003408 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 80026a4:	2306      	movs	r3, #6
 80026a6:	627b      	str	r3, [r7, #36]	@ 0x24
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 80026a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 80026ae:	2300      	movs	r3, #0
 80026b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80026b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026b6:	4619      	mov	r1, r3
 80026b8:	4820      	ldr	r0, [pc, #128]	@ (800273c <MX_ADC1_Init+0x128>)
 80026ba:	f004 fbcd 	bl	8006e58 <HAL_ADCEx_MultiModeConfigChannel>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80026c4:	f000 fea0 	bl	8003408 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80026c8:	4b1e      	ldr	r3, [pc, #120]	@ (8002744 <MX_ADC1_Init+0x130>)
 80026ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80026cc:	2306      	movs	r3, #6
 80026ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 80026d0:	2302      	movs	r3, #2
 80026d2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80026d4:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80026d8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80026da:	2304      	movs	r3, #4
 80026dc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80026de:	2300      	movs	r3, #0
 80026e0:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80026e2:	2300      	movs	r3, #0
 80026e4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80026e8:	463b      	mov	r3, r7
 80026ea:	4619      	mov	r1, r3
 80026ec:	4813      	ldr	r0, [pc, #76]	@ (800273c <MX_ADC1_Init+0x128>)
 80026ee:	f002 fed7 	bl	80054a0 <HAL_ADC_ConfigChannel>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 80026f8:	f000 fe86 	bl	8003408 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 80026fc:	4b12      	ldr	r3, [pc, #72]	@ (8002748 <MX_ADC1_Init+0x134>)
 80026fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002700:	230c      	movs	r3, #12
 8002702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002704:	463b      	mov	r3, r7
 8002706:	4619      	mov	r1, r3
 8002708:	480c      	ldr	r0, [pc, #48]	@ (800273c <MX_ADC1_Init+0x128>)
 800270a:	f002 fec9 	bl	80054a0 <HAL_ADC_ConfigChannel>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 8002714:	f000 fe78 	bl	8003408 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8002718:	4b0c      	ldr	r3, [pc, #48]	@ (800274c <MX_ADC1_Init+0x138>)
 800271a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800271c:	2312      	movs	r3, #18
 800271e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002720:	463b      	mov	r3, r7
 8002722:	4619      	mov	r1, r3
 8002724:	4805      	ldr	r0, [pc, #20]	@ (800273c <MX_ADC1_Init+0x128>)
 8002726:	f002 febb 	bl	80054a0 <HAL_ADC_ConfigChannel>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 8002730:	f000 fe6a 	bl	8003408 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002734:	bf00      	nop
 8002736:	3730      	adds	r7, #48	@ 0x30
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	24000908 	.word	0x24000908
 8002740:	40022000 	.word	0x40022000
 8002744:	3ef08000 	.word	0x3ef08000
 8002748:	4b840000 	.word	0x4b840000
 800274c:	43210000 	.word	0x43210000

08002750 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b090      	sub	sp, #64	@ 0x40
 8002754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8002756:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	605a      	str	r2, [r3, #4]
 8002760:	609a      	str	r2, [r3, #8]
 8002762:	60da      	str	r2, [r3, #12]
 8002764:	611a      	str	r2, [r3, #16]
 8002766:	615a      	str	r2, [r3, #20]
 8002768:	619a      	str	r2, [r3, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 800276a:	463b      	mov	r3, r7
 800276c:	2224      	movs	r2, #36	@ 0x24
 800276e:	2100      	movs	r1, #0
 8002770:	4618      	mov	r0, r3
 8002772:	f00e fa8b 	bl	8010c8c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8002776:	4b42      	ldr	r3, [pc, #264]	@ (8002880 <MX_ADC2_Init+0x130>)
 8002778:	4a42      	ldr	r2, [pc, #264]	@ (8002884 <MX_ADC2_Init+0x134>)
 800277a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800277c:	4b40      	ldr	r3, [pc, #256]	@ (8002880 <MX_ADC2_Init+0x130>)
 800277e:	2200      	movs	r2, #0
 8002780:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8002782:	4b3f      	ldr	r3, [pc, #252]	@ (8002880 <MX_ADC2_Init+0x130>)
 8002784:	2200      	movs	r2, #0
 8002786:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002788:	4b3d      	ldr	r3, [pc, #244]	@ (8002880 <MX_ADC2_Init+0x130>)
 800278a:	2201      	movs	r2, #1
 800278c:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800278e:	4b3c      	ldr	r3, [pc, #240]	@ (8002880 <MX_ADC2_Init+0x130>)
 8002790:	2208      	movs	r2, #8
 8002792:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002794:	4b3a      	ldr	r3, [pc, #232]	@ (8002880 <MX_ADC2_Init+0x130>)
 8002796:	2200      	movs	r2, #0
 8002798:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800279a:	4b39      	ldr	r3, [pc, #228]	@ (8002880 <MX_ADC2_Init+0x130>)
 800279c:	2201      	movs	r2, #1
 800279e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 3;
 80027a0:	4b37      	ldr	r3, [pc, #220]	@ (8002880 <MX_ADC2_Init+0x130>)
 80027a2:	2203      	movs	r2, #3
 80027a4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80027a6:	4b36      	ldr	r3, [pc, #216]	@ (8002880 <MX_ADC2_Init+0x130>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80027ae:	4b34      	ldr	r3, [pc, #208]	@ (8002880 <MX_ADC2_Init+0x130>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80027b4:	4b32      	ldr	r3, [pc, #200]	@ (8002880 <MX_ADC2_Init+0x130>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80027ba:	4b31      	ldr	r3, [pc, #196]	@ (8002880 <MX_ADC2_Init+0x130>)
 80027bc:	2200      	movs	r2, #0
 80027be:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 80027c0:	4b2f      	ldr	r3, [pc, #188]	@ (8002880 <MX_ADC2_Init+0x130>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80027c8:	482d      	ldr	r0, [pc, #180]	@ (8002880 <MX_ADC2_Init+0x130>)
 80027ca:	f002 f937 	bl	8004a3c <HAL_ADC_Init>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 80027d4:	f000 fe18 	bl	8003408 <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 80027d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002888 <MX_ADC2_Init+0x138>)
 80027da:	627b      	str	r3, [r7, #36]	@ 0x24
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80027dc:	f44f 0340 	mov.w	r3, #12582912	@ 0xc00000
 80027e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  AnalogWDGConfig.Channel = ADC_CHANNEL_3;
 80027e2:	4b2a      	ldr	r3, [pc, #168]	@ (800288c <MX_ADC2_Init+0x13c>)
 80027e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  AnalogWDGConfig.ITMode = DISABLE;
 80027e6:	2300      	movs	r3, #0
 80027e8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  AnalogWDGConfig.HighThreshold = 0;
 80027ec:	2300      	movs	r3, #0
 80027ee:	637b      	str	r3, [r7, #52]	@ 0x34
  AnalogWDGConfig.LowThreshold = 0;
 80027f0:	2300      	movs	r3, #0
 80027f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 80027f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027f8:	4619      	mov	r1, r3
 80027fa:	4821      	ldr	r0, [pc, #132]	@ (8002880 <MX_ADC2_Init+0x130>)
 80027fc:	f003 fb7c 	bl	8005ef8 <HAL_ADC_AnalogWDGConfig>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8002806:	f000 fdff 	bl	8003408 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800280a:	4b20      	ldr	r3, [pc, #128]	@ (800288c <MX_ADC2_Init+0x13c>)
 800280c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800280e:	2306      	movs	r3, #6
 8002810:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 8002812:	2302      	movs	r3, #2
 8002814:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002816:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800281a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800281c:	2304      	movs	r3, #4
 800281e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002820:	2300      	movs	r3, #0
 8002822:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8002824:	2300      	movs	r3, #0
 8002826:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800282a:	463b      	mov	r3, r7
 800282c:	4619      	mov	r1, r3
 800282e:	4814      	ldr	r0, [pc, #80]	@ (8002880 <MX_ADC2_Init+0x130>)
 8002830:	f002 fe36 	bl	80054a0 <HAL_ADC_ConfigChannel>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <MX_ADC2_Init+0xee>
  {
    Error_Handler();
 800283a:	f000 fde5 	bl	8003408 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 800283e:	4b14      	ldr	r3, [pc, #80]	@ (8002890 <MX_ADC2_Init+0x140>)
 8002840:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002842:	230c      	movs	r3, #12
 8002844:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002846:	463b      	mov	r3, r7
 8002848:	4619      	mov	r1, r3
 800284a:	480d      	ldr	r0, [pc, #52]	@ (8002880 <MX_ADC2_Init+0x130>)
 800284c:	f002 fe28 	bl	80054a0 <HAL_ADC_ConfigChannel>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <MX_ADC2_Init+0x10a>
  {
    Error_Handler();
 8002856:	f000 fdd7 	bl	8003408 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800285a:	4b0e      	ldr	r3, [pc, #56]	@ (8002894 <MX_ADC2_Init+0x144>)
 800285c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800285e:	2312      	movs	r3, #18
 8002860:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002862:	463b      	mov	r3, r7
 8002864:	4619      	mov	r1, r3
 8002866:	4806      	ldr	r0, [pc, #24]	@ (8002880 <MX_ADC2_Init+0x130>)
 8002868:	f002 fe1a 	bl	80054a0 <HAL_ADC_ConfigChannel>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <MX_ADC2_Init+0x126>
  {
    Error_Handler();
 8002872:	f000 fdc9 	bl	8003408 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002876:	bf00      	nop
 8002878:	3740      	adds	r7, #64	@ 0x40
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	24000978 	.word	0x24000978
 8002884:	40022100 	.word	0x40022100
 8002888:	7dc00000 	.word	0x7dc00000
 800288c:	0c900008 	.word	0x0c900008
 8002890:	4fb80000 	.word	0x4fb80000
 8002894:	14f00020 	.word	0x14f00020

08002898 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b08a      	sub	sp, #40	@ 0x28
 800289c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800289e:	1d3b      	adds	r3, r7, #4
 80028a0:	2224      	movs	r2, #36	@ 0x24
 80028a2:	2100      	movs	r1, #0
 80028a4:	4618      	mov	r0, r3
 80028a6:	f00e f9f1 	bl	8010c8c <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80028aa:	4b78      	ldr	r3, [pc, #480]	@ (8002a8c <MX_ADC3_Init+0x1f4>)
 80028ac:	4a78      	ldr	r2, [pc, #480]	@ (8002a90 <MX_ADC3_Init+0x1f8>)
 80028ae:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80028b0:	4b76      	ldr	r3, [pc, #472]	@ (8002a8c <MX_ADC3_Init+0x1f4>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80028b6:	4b75      	ldr	r3, [pc, #468]	@ (8002a8c <MX_ADC3_Init+0x1f4>)
 80028b8:	2208      	movs	r2, #8
 80028ba:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 80028bc:	4b73      	ldr	r3, [pc, #460]	@ (8002a8c <MX_ADC3_Init+0x1f4>)
 80028be:	2200      	movs	r2, #0
 80028c0:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80028c2:	4b72      	ldr	r3, [pc, #456]	@ (8002a8c <MX_ADC3_Init+0x1f4>)
 80028c4:	2201      	movs	r2, #1
 80028c6:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80028c8:	4b70      	ldr	r3, [pc, #448]	@ (8002a8c <MX_ADC3_Init+0x1f4>)
 80028ca:	2208      	movs	r2, #8
 80028cc:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80028ce:	4b6f      	ldr	r3, [pc, #444]	@ (8002a8c <MX_ADC3_Init+0x1f4>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80028d4:	4b6d      	ldr	r3, [pc, #436]	@ (8002a8c <MX_ADC3_Init+0x1f4>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 11;
 80028da:	4b6c      	ldr	r3, [pc, #432]	@ (8002a8c <MX_ADC3_Init+0x1f4>)
 80028dc:	220b      	movs	r2, #11
 80028de:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80028e0:	4b6a      	ldr	r3, [pc, #424]	@ (8002a8c <MX_ADC3_Init+0x1f4>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80028e8:	4b68      	ldr	r3, [pc, #416]	@ (8002a8c <MX_ADC3_Init+0x1f4>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80028ee:	4b67      	ldr	r3, [pc, #412]	@ (8002a8c <MX_ADC3_Init+0x1f4>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80028f4:	4b65      	ldr	r3, [pc, #404]	@ (8002a8c <MX_ADC3_Init+0x1f4>)
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80028fc:	4b63      	ldr	r3, [pc, #396]	@ (8002a8c <MX_ADC3_Init+0x1f4>)
 80028fe:	2200      	movs	r2, #0
 8002900:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 8002902:	4b62      	ldr	r3, [pc, #392]	@ (8002a8c <MX_ADC3_Init+0x1f4>)
 8002904:	2201      	movs	r2, #1
 8002906:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002908:	4b60      	ldr	r3, [pc, #384]	@ (8002a8c <MX_ADC3_Init+0x1f4>)
 800290a:	2200      	movs	r2, #0
 800290c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800290e:	4b5f      	ldr	r3, [pc, #380]	@ (8002a8c <MX_ADC3_Init+0x1f4>)
 8002910:	2200      	movs	r2, #0
 8002912:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8002914:	4b5d      	ldr	r3, [pc, #372]	@ (8002a8c <MX_ADC3_Init+0x1f4>)
 8002916:	2200      	movs	r2, #0
 8002918:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800291c:	485b      	ldr	r0, [pc, #364]	@ (8002a8c <MX_ADC3_Init+0x1f4>)
 800291e:	f002 f88d 	bl	8004a3c <HAL_ADC_Init>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8002928:	f000 fd6e 	bl	8003408 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800292c:	2301      	movs	r3, #1
 800292e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002930:	2306      	movs	r3, #6
 8002932:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_6CYCLES_5;
 8002934:	2301      	movs	r3, #1
 8002936:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002938:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800293c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800293e:	2304      	movs	r3, #4
 8002940:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002942:	2300      	movs	r3, #0
 8002944:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8002946:	2300      	movs	r3, #0
 8002948:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800294a:	1d3b      	adds	r3, r7, #4
 800294c:	4619      	mov	r1, r3
 800294e:	484f      	ldr	r0, [pc, #316]	@ (8002a8c <MX_ADC3_Init+0x1f4>)
 8002950:	f002 fda6 	bl	80054a0 <HAL_ADC_ConfigChannel>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <MX_ADC3_Init+0xc6>
  {
    Error_Handler();
 800295a:	f000 fd55 	bl	8003408 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800295e:	4b4d      	ldr	r3, [pc, #308]	@ (8002a94 <MX_ADC3_Init+0x1fc>)
 8002960:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002962:	230c      	movs	r3, #12
 8002964:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002966:	1d3b      	adds	r3, r7, #4
 8002968:	4619      	mov	r1, r3
 800296a:	4848      	ldr	r0, [pc, #288]	@ (8002a8c <MX_ADC3_Init+0x1f4>)
 800296c:	f002 fd98 	bl	80054a0 <HAL_ADC_ConfigChannel>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <MX_ADC3_Init+0xe2>
  {
    Error_Handler();
 8002976:	f000 fd47 	bl	8003408 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800297a:	4b47      	ldr	r3, [pc, #284]	@ (8002a98 <MX_ADC3_Init+0x200>)
 800297c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800297e:	2312      	movs	r3, #18
 8002980:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002982:	1d3b      	adds	r3, r7, #4
 8002984:	4619      	mov	r1, r3
 8002986:	4841      	ldr	r0, [pc, #260]	@ (8002a8c <MX_ADC3_Init+0x1f4>)
 8002988:	f002 fd8a 	bl	80054a0 <HAL_ADC_ConfigChannel>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <MX_ADC3_Init+0xfe>
  {
    Error_Handler();
 8002992:	f000 fd39 	bl	8003408 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002996:	4b41      	ldr	r3, [pc, #260]	@ (8002a9c <MX_ADC3_Init+0x204>)
 8002998:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800299a:	2318      	movs	r3, #24
 800299c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800299e:	1d3b      	adds	r3, r7, #4
 80029a0:	4619      	mov	r1, r3
 80029a2:	483a      	ldr	r0, [pc, #232]	@ (8002a8c <MX_ADC3_Init+0x1f4>)
 80029a4:	f002 fd7c 	bl	80054a0 <HAL_ADC_ConfigChannel>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <MX_ADC3_Init+0x11a>
  {
    Error_Handler();
 80029ae:	f000 fd2b 	bl	8003408 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80029b2:	4b3b      	ldr	r3, [pc, #236]	@ (8002aa0 <MX_ADC3_Init+0x208>)
 80029b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80029b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80029bc:	1d3b      	adds	r3, r7, #4
 80029be:	4619      	mov	r1, r3
 80029c0:	4832      	ldr	r0, [pc, #200]	@ (8002a8c <MX_ADC3_Init+0x1f4>)
 80029c2:	f002 fd6d 	bl	80054a0 <HAL_ADC_ConfigChannel>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <MX_ADC3_Init+0x138>
  {
    Error_Handler();
 80029cc:	f000 fd1c 	bl	8003408 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80029d0:	4b34      	ldr	r3, [pc, #208]	@ (8002aa4 <MX_ADC3_Init+0x20c>)
 80029d2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80029d4:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80029d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80029da:	1d3b      	adds	r3, r7, #4
 80029dc:	4619      	mov	r1, r3
 80029de:	482b      	ldr	r0, [pc, #172]	@ (8002a8c <MX_ADC3_Init+0x1f4>)
 80029e0:	f002 fd5e 	bl	80054a0 <HAL_ADC_ConfigChannel>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <MX_ADC3_Init+0x156>
  {
    Error_Handler();
 80029ea:	f000 fd0d 	bl	8003408 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80029ee:	4b2e      	ldr	r3, [pc, #184]	@ (8002aa8 <MX_ADC3_Init+0x210>)
 80029f0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80029f2:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 80029f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80029f8:	1d3b      	adds	r3, r7, #4
 80029fa:	4619      	mov	r1, r3
 80029fc:	4823      	ldr	r0, [pc, #140]	@ (8002a8c <MX_ADC3_Init+0x1f4>)
 80029fe:	f002 fd4f 	bl	80054a0 <HAL_ADC_ConfigChannel>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <MX_ADC3_Init+0x174>
  {
    Error_Handler();
 8002a08:	f000 fcfe 	bl	8003408 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002a0c:	4b27      	ldr	r3, [pc, #156]	@ (8002aac <MX_ADC3_Init+0x214>)
 8002a0e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8002a10:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8002a14:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002a16:	1d3b      	adds	r3, r7, #4
 8002a18:	4619      	mov	r1, r3
 8002a1a:	481c      	ldr	r0, [pc, #112]	@ (8002a8c <MX_ADC3_Init+0x1f4>)
 8002a1c:	f002 fd40 	bl	80054a0 <HAL_ADC_ConfigChannel>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <MX_ADC3_Init+0x192>
  {
    Error_Handler();
 8002a26:	f000 fcef 	bl	8003408 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002a2a:	4b21      	ldr	r3, [pc, #132]	@ (8002ab0 <MX_ADC3_Init+0x218>)
 8002a2c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8002a2e:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8002a32:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002a34:	1d3b      	adds	r3, r7, #4
 8002a36:	4619      	mov	r1, r3
 8002a38:	4814      	ldr	r0, [pc, #80]	@ (8002a8c <MX_ADC3_Init+0x1f4>)
 8002a3a:	f002 fd31 	bl	80054a0 <HAL_ADC_ConfigChannel>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <MX_ADC3_Init+0x1b0>
  {
    Error_Handler();
 8002a44:	f000 fce0 	bl	8003408 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002a48:	4b1a      	ldr	r3, [pc, #104]	@ (8002ab4 <MX_ADC3_Init+0x21c>)
 8002a4a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8002a4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a50:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002a52:	1d3b      	adds	r3, r7, #4
 8002a54:	4619      	mov	r1, r3
 8002a56:	480d      	ldr	r0, [pc, #52]	@ (8002a8c <MX_ADC3_Init+0x1f4>)
 8002a58:	f002 fd22 	bl	80054a0 <HAL_ADC_ConfigChannel>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <MX_ADC3_Init+0x1ce>
  {
    Error_Handler();
 8002a62:	f000 fcd1 	bl	8003408 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002a66:	4b14      	ldr	r3, [pc, #80]	@ (8002ab8 <MX_ADC3_Init+0x220>)
 8002a68:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8002a6a:	f240 2306 	movw	r3, #518	@ 0x206
 8002a6e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002a70:	1d3b      	adds	r3, r7, #4
 8002a72:	4619      	mov	r1, r3
 8002a74:	4805      	ldr	r0, [pc, #20]	@ (8002a8c <MX_ADC3_Init+0x1f4>)
 8002a76:	f002 fd13 	bl	80054a0 <HAL_ADC_ConfigChannel>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <MX_ADC3_Init+0x1ec>
  {
    Error_Handler();
 8002a80:	f000 fcc2 	bl	8003408 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002a84:	bf00      	nop
 8002a86:	3728      	adds	r7, #40	@ 0x28
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	240009e8 	.word	0x240009e8
 8002a90:	58026000 	.word	0x58026000
 8002a94:	04300002 	.word	0x04300002
 8002a98:	08600004 	.word	0x08600004
 8002a9c:	0c900008 	.word	0x0c900008
 8002aa0:	10c00010 	.word	0x10c00010
 8002aa4:	14f00020 	.word	0x14f00020
 8002aa8:	19200040 	.word	0x19200040
 8002aac:	1d500080 	.word	0x1d500080
 8002ab0:	21800100 	.word	0x21800100
 8002ab4:	25b00200 	.word	0x25b00200
 8002ab8:	2a000400 	.word	0x2a000400

08002abc <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8002ac0:	4b13      	ldr	r3, [pc, #76]	@ (8002b10 <MX_COMP2_Init+0x54>)
 8002ac2:	4a14      	ldr	r2, [pc, #80]	@ (8002b14 <MX_COMP2_Init+0x58>)
 8002ac4:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 8002ac6:	4b12      	ldr	r3, [pc, #72]	@ (8002b10 <MX_COMP2_Init+0x54>)
 8002ac8:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8002acc:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8002ace:	4b10      	ldr	r3, [pc, #64]	@ (8002b10 <MX_COMP2_Init+0x54>)
 8002ad0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002ad4:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8002ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8002b10 <MX_COMP2_Init+0x54>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8002adc:	4b0c      	ldr	r3, [pc, #48]	@ (8002b10 <MX_COMP2_Init+0x54>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8002ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8002b10 <MX_COMP2_Init+0x54>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8002ae8:	4b09      	ldr	r3, [pc, #36]	@ (8002b10 <MX_COMP2_Init+0x54>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8002aee:	4b08      	ldr	r3, [pc, #32]	@ (8002b10 <MX_COMP2_Init+0x54>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8002af4:	4b06      	ldr	r3, [pc, #24]	@ (8002b10 <MX_COMP2_Init+0x54>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8002afa:	4805      	ldr	r0, [pc, #20]	@ (8002b10 <MX_COMP2_Init+0x54>)
 8002afc:	f004 fa8e 	bl	800701c <HAL_COMP_Init>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <MX_COMP2_Init+0x4e>
  {
    Error_Handler();
 8002b06:	f000 fc7f 	bl	8003408 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8002b0a:	bf00      	nop
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	24000b48 	.word	0x24000b48
 8002b14:	58003810 	.word	0x58003810

08002b18 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8002b1c:	4b1e      	ldr	r3, [pc, #120]	@ (8002b98 <MX_ETH_Init+0x80>)
 8002b1e:	4a1f      	ldr	r2, [pc, #124]	@ (8002b9c <MX_ETH_Init+0x84>)
 8002b20:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8002b22:	4b1f      	ldr	r3, [pc, #124]	@ (8002ba0 <MX_ETH_Init+0x88>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8002b28:	4b1d      	ldr	r3, [pc, #116]	@ (8002ba0 <MX_ETH_Init+0x88>)
 8002b2a:	2280      	movs	r2, #128	@ 0x80
 8002b2c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8002b2e:	4b1c      	ldr	r3, [pc, #112]	@ (8002ba0 <MX_ETH_Init+0x88>)
 8002b30:	22e1      	movs	r2, #225	@ 0xe1
 8002b32:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8002b34:	4b1a      	ldr	r3, [pc, #104]	@ (8002ba0 <MX_ETH_Init+0x88>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8002b3a:	4b19      	ldr	r3, [pc, #100]	@ (8002ba0 <MX_ETH_Init+0x88>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8002b40:	4b17      	ldr	r3, [pc, #92]	@ (8002ba0 <MX_ETH_Init+0x88>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8002b46:	4b14      	ldr	r3, [pc, #80]	@ (8002b98 <MX_ETH_Init+0x80>)
 8002b48:	4a15      	ldr	r2, [pc, #84]	@ (8002ba0 <MX_ETH_Init+0x88>)
 8002b4a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8002b4c:	4b12      	ldr	r3, [pc, #72]	@ (8002b98 <MX_ETH_Init+0x80>)
 8002b4e:	2201      	movs	r2, #1
 8002b50:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8002b52:	4b11      	ldr	r3, [pc, #68]	@ (8002b98 <MX_ETH_Init+0x80>)
 8002b54:	4a13      	ldr	r2, [pc, #76]	@ (8002ba4 <MX_ETH_Init+0x8c>)
 8002b56:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8002b58:	4b0f      	ldr	r3, [pc, #60]	@ (8002b98 <MX_ETH_Init+0x80>)
 8002b5a:	4a13      	ldr	r2, [pc, #76]	@ (8002ba8 <MX_ETH_Init+0x90>)
 8002b5c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8002b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8002b98 <MX_ETH_Init+0x80>)
 8002b60:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8002b64:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8002b66:	480c      	ldr	r0, [pc, #48]	@ (8002b98 <MX_ETH_Init+0x80>)
 8002b68:	f006 fd66 	bl	8009638 <HAL_ETH_Init>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8002b72:	f000 fc49 	bl	8003408 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8002b76:	2238      	movs	r2, #56	@ 0x38
 8002b78:	2100      	movs	r1, #0
 8002b7a:	480c      	ldr	r0, [pc, #48]	@ (8002bac <MX_ETH_Init+0x94>)
 8002b7c:	f00e f886 	bl	8010c8c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8002b80:	4b0a      	ldr	r3, [pc, #40]	@ (8002bac <MX_ETH_Init+0x94>)
 8002b82:	2221      	movs	r2, #33	@ 0x21
 8002b84:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8002b86:	4b09      	ldr	r3, [pc, #36]	@ (8002bac <MX_ETH_Init+0x94>)
 8002b88:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002b8c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8002b8e:	4b07      	ldr	r3, [pc, #28]	@ (8002bac <MX_ETH_Init+0x94>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8002b94:	bf00      	nop
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	24000b74 	.word	0x24000b74
 8002b9c:	40028000 	.word	0x40028000
 8002ba0:	24000ec8 	.word	0x24000ec8
 8002ba4:	240000f8 	.word	0x240000f8
 8002ba8:	24000098 	.word	0x24000098
 8002bac:	240008d0 	.word	0x240008d0

08002bb0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002bb4:	4b22      	ldr	r3, [pc, #136]	@ (8002c40 <MX_LPUART1_UART_Init+0x90>)
 8002bb6:	4a23      	ldr	r2, [pc, #140]	@ (8002c44 <MX_LPUART1_UART_Init+0x94>)
 8002bb8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8002bba:	4b21      	ldr	r3, [pc, #132]	@ (8002c40 <MX_LPUART1_UART_Init+0x90>)
 8002bbc:	4a22      	ldr	r2, [pc, #136]	@ (8002c48 <MX_LPUART1_UART_Init+0x98>)
 8002bbe:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002bc0:	4b1f      	ldr	r3, [pc, #124]	@ (8002c40 <MX_LPUART1_UART_Init+0x90>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002bc6:	4b1e      	ldr	r3, [pc, #120]	@ (8002c40 <MX_LPUART1_UART_Init+0x90>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002bcc:	4b1c      	ldr	r3, [pc, #112]	@ (8002c40 <MX_LPUART1_UART_Init+0x90>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8002c40 <MX_LPUART1_UART_Init+0x90>)
 8002bd4:	220c      	movs	r2, #12
 8002bd6:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bd8:	4b19      	ldr	r3, [pc, #100]	@ (8002c40 <MX_LPUART1_UART_Init+0x90>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bde:	4b18      	ldr	r3, [pc, #96]	@ (8002c40 <MX_LPUART1_UART_Init+0x90>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002be4:	4b16      	ldr	r3, [pc, #88]	@ (8002c40 <MX_LPUART1_UART_Init+0x90>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bea:	4b15      	ldr	r3, [pc, #84]	@ (8002c40 <MX_LPUART1_UART_Init+0x90>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002bf0:	4b13      	ldr	r3, [pc, #76]	@ (8002c40 <MX_LPUART1_UART_Init+0x90>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002bf6:	4812      	ldr	r0, [pc, #72]	@ (8002c40 <MX_LPUART1_UART_Init+0x90>)
 8002bf8:	f00c fc13 	bl	800f422 <HAL_UART_Init>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8002c02:	f000 fc01 	bl	8003408 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c06:	2100      	movs	r1, #0
 8002c08:	480d      	ldr	r0, [pc, #52]	@ (8002c40 <MX_LPUART1_UART_Init+0x90>)
 8002c0a:	f00d fe70 	bl	80108ee <HAL_UARTEx_SetTxFifoThreshold>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8002c14:	f000 fbf8 	bl	8003408 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c18:	2100      	movs	r1, #0
 8002c1a:	4809      	ldr	r0, [pc, #36]	@ (8002c40 <MX_LPUART1_UART_Init+0x90>)
 8002c1c:	f00d fea5 	bl	801096a <HAL_UARTEx_SetRxFifoThreshold>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8002c26:	f000 fbef 	bl	8003408 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002c2a:	4805      	ldr	r0, [pc, #20]	@ (8002c40 <MX_LPUART1_UART_Init+0x90>)
 8002c2c:	f00d fe26 	bl	801087c <HAL_UARTEx_DisableFifoMode>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8002c36:	f000 fbe7 	bl	8003408 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002c3a:	bf00      	nop
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	24000c24 	.word	0x24000c24
 8002c44:	58000c00 	.word	0x58000c00
 8002c48:	00033324 	.word	0x00033324

08002c4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002c50:	4b22      	ldr	r3, [pc, #136]	@ (8002cdc <MX_USART3_UART_Init+0x90>)
 8002c52:	4a23      	ldr	r2, [pc, #140]	@ (8002ce0 <MX_USART3_UART_Init+0x94>)
 8002c54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002c56:	4b21      	ldr	r3, [pc, #132]	@ (8002cdc <MX_USART3_UART_Init+0x90>)
 8002c58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002c5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002c5e:	4b1f      	ldr	r3, [pc, #124]	@ (8002cdc <MX_USART3_UART_Init+0x90>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002c64:	4b1d      	ldr	r3, [pc, #116]	@ (8002cdc <MX_USART3_UART_Init+0x90>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8002cdc <MX_USART3_UART_Init+0x90>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002c70:	4b1a      	ldr	r3, [pc, #104]	@ (8002cdc <MX_USART3_UART_Init+0x90>)
 8002c72:	220c      	movs	r2, #12
 8002c74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c76:	4b19      	ldr	r3, [pc, #100]	@ (8002cdc <MX_USART3_UART_Init+0x90>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c7c:	4b17      	ldr	r3, [pc, #92]	@ (8002cdc <MX_USART3_UART_Init+0x90>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c82:	4b16      	ldr	r3, [pc, #88]	@ (8002cdc <MX_USART3_UART_Init+0x90>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c88:	4b14      	ldr	r3, [pc, #80]	@ (8002cdc <MX_USART3_UART_Init+0x90>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c8e:	4b13      	ldr	r3, [pc, #76]	@ (8002cdc <MX_USART3_UART_Init+0x90>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002c94:	4811      	ldr	r0, [pc, #68]	@ (8002cdc <MX_USART3_UART_Init+0x90>)
 8002c96:	f00c fbc4 	bl	800f422 <HAL_UART_Init>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002ca0:	f000 fbb2 	bl	8003408 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	480d      	ldr	r0, [pc, #52]	@ (8002cdc <MX_USART3_UART_Init+0x90>)
 8002ca8:	f00d fe21 	bl	80108ee <HAL_UARTEx_SetTxFifoThreshold>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002cb2:	f000 fba9 	bl	8003408 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	4808      	ldr	r0, [pc, #32]	@ (8002cdc <MX_USART3_UART_Init+0x90>)
 8002cba:	f00d fe56 	bl	801096a <HAL_UARTEx_SetRxFifoThreshold>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002cc4:	f000 fba0 	bl	8003408 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002cc8:	4804      	ldr	r0, [pc, #16]	@ (8002cdc <MX_USART3_UART_Init+0x90>)
 8002cca:	f00d fdd7 	bl	801087c <HAL_UARTEx_DisableFifoMode>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002cd4:	f000 fb98 	bl	8003408 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002cd8:	bf00      	nop
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	24000cb8 	.word	0x24000cb8
 8002ce0:	40004800 	.word	0x40004800

08002ce4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b098      	sub	sp, #96	@ 0x60
 8002ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cea:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002cee:	2200      	movs	r2, #0
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	605a      	str	r2, [r3, #4]
 8002cf4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002cf6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	605a      	str	r2, [r3, #4]
 8002d00:	609a      	str	r2, [r3, #8]
 8002d02:	60da      	str	r2, [r3, #12]
 8002d04:	611a      	str	r2, [r3, #16]
 8002d06:	615a      	str	r2, [r3, #20]
 8002d08:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002d0a:	1d3b      	adds	r3, r7, #4
 8002d0c:	2234      	movs	r2, #52	@ 0x34
 8002d0e:	2100      	movs	r1, #0
 8002d10:	4618      	mov	r0, r3
 8002d12:	f00d ffbb 	bl	8010c8c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002d16:	4b3a      	ldr	r3, [pc, #232]	@ (8002e00 <MX_TIM1_Init+0x11c>)
 8002d18:	4a3a      	ldr	r2, [pc, #232]	@ (8002e04 <MX_TIM1_Init+0x120>)
 8002d1a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002d1c:	4b38      	ldr	r3, [pc, #224]	@ (8002e00 <MX_TIM1_Init+0x11c>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d22:	4b37      	ldr	r3, [pc, #220]	@ (8002e00 <MX_TIM1_Init+0x11c>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3240;
 8002d28:	4b35      	ldr	r3, [pc, #212]	@ (8002e00 <MX_TIM1_Init+0x11c>)
 8002d2a:	f640 42a8 	movw	r2, #3240	@ 0xca8
 8002d2e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d30:	4b33      	ldr	r3, [pc, #204]	@ (8002e00 <MX_TIM1_Init+0x11c>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002d36:	4b32      	ldr	r3, [pc, #200]	@ (8002e00 <MX_TIM1_Init+0x11c>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d3c:	4b30      	ldr	r3, [pc, #192]	@ (8002e00 <MX_TIM1_Init+0x11c>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002d42:	482f      	ldr	r0, [pc, #188]	@ (8002e00 <MX_TIM1_Init+0x11c>)
 8002d44:	f00a fff4 	bl	800dd30 <HAL_TIM_PWM_Init>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002d4e:	f000 fb5b 	bl	8003408 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d52:	2300      	movs	r3, #0
 8002d54:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002d56:	2300      	movs	r3, #0
 8002d58:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d5e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002d62:	4619      	mov	r1, r3
 8002d64:	4826      	ldr	r0, [pc, #152]	@ (8002e00 <MX_TIM1_Init+0x11c>)
 8002d66:	f00c f9fb 	bl	800f160 <HAL_TIMEx_MasterConfigSynchronization>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002d70:	f000 fb4a 	bl	8003408 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d74:	2360      	movs	r3, #96	@ 0x60
 8002d76:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 1620;
 8002d78:	f240 6354 	movw	r3, #1620	@ 0x654
 8002d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002d7e:	2302      	movs	r3, #2
 8002d80:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8002d82:	2308      	movs	r3, #8
 8002d84:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d86:	2300      	movs	r3, #0
 8002d88:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8002d8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8002d90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d94:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d96:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	4818      	ldr	r0, [pc, #96]	@ (8002e00 <MX_TIM1_Init+0x11c>)
 8002da0:	f00b fac4 	bl	800e32c <HAL_TIM_PWM_ConfigChannel>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002daa:	f000 fb2d 	bl	8003408 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002dae:	2300      	movs	r3, #0
 8002db0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002db2:	2300      	movs	r3, #0
 8002db4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002db6:	2300      	movs	r3, #0
 8002db8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0xFF;
 8002dba:	23ff      	movs	r3, #255	@ 0xff
 8002dbc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002dc2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002dc6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002dd0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002dde:	1d3b      	adds	r3, r7, #4
 8002de0:	4619      	mov	r1, r3
 8002de2:	4807      	ldr	r0, [pc, #28]	@ (8002e00 <MX_TIM1_Init+0x11c>)
 8002de4:	f00c fa58 	bl	800f298 <HAL_TIMEx_ConfigBreakDeadTime>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8002dee:	f000 fb0b 	bl	8003408 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002df2:	4803      	ldr	r0, [pc, #12]	@ (8002e00 <MX_TIM1_Init+0x11c>)
 8002df4:	f000 ff56 	bl	8003ca4 <HAL_TIM_MspPostInit>

}
 8002df8:	bf00      	nop
 8002dfa:	3760      	adds	r7, #96	@ 0x60
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	24000d4c 	.word	0x24000d4c
 8002e04:	40010000 	.word	0x40010000

08002e08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b08a      	sub	sp, #40	@ 0x28
 8002e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e0e:	f107 031c 	add.w	r3, r7, #28
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]
 8002e16:	605a      	str	r2, [r3, #4]
 8002e18:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e1a:	463b      	mov	r3, r7
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	605a      	str	r2, [r3, #4]
 8002e22:	609a      	str	r2, [r3, #8]
 8002e24:	60da      	str	r2, [r3, #12]
 8002e26:	611a      	str	r2, [r3, #16]
 8002e28:	615a      	str	r2, [r3, #20]
 8002e2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e2c:	4b22      	ldr	r3, [pc, #136]	@ (8002eb8 <MX_TIM2_Init+0xb0>)
 8002e2e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002e32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002e34:	4b20      	ldr	r3, [pc, #128]	@ (8002eb8 <MX_TIM2_Init+0xb0>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e3a:	4b1f      	ldr	r3, [pc, #124]	@ (8002eb8 <MX_TIM2_Init+0xb0>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002e40:	4b1d      	ldr	r3, [pc, #116]	@ (8002eb8 <MX_TIM2_Init+0xb0>)
 8002e42:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e48:	4b1b      	ldr	r3, [pc, #108]	@ (8002eb8 <MX_TIM2_Init+0xb0>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8002eb8 <MX_TIM2_Init+0xb0>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002e54:	4818      	ldr	r0, [pc, #96]	@ (8002eb8 <MX_TIM2_Init+0xb0>)
 8002e56:	f00a ff6b 	bl	800dd30 <HAL_TIM_PWM_Init>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002e60:	f000 fad2 	bl	8003408 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e64:	2300      	movs	r3, #0
 8002e66:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e6c:	f107 031c 	add.w	r3, r7, #28
 8002e70:	4619      	mov	r1, r3
 8002e72:	4811      	ldr	r0, [pc, #68]	@ (8002eb8 <MX_TIM2_Init+0xb0>)
 8002e74:	f00c f974 	bl	800f160 <HAL_TIMEx_MasterConfigSynchronization>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d001      	beq.n	8002e82 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8002e7e:	f000 fac3 	bl	8003408 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e82:	2360      	movs	r3, #96	@ 0x60
 8002e84:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002e86:	2300      	movs	r3, #0
 8002e88:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e92:	463b      	mov	r3, r7
 8002e94:	2200      	movs	r2, #0
 8002e96:	4619      	mov	r1, r3
 8002e98:	4807      	ldr	r0, [pc, #28]	@ (8002eb8 <MX_TIM2_Init+0xb0>)
 8002e9a:	f00b fa47 	bl	800e32c <HAL_TIM_PWM_ConfigChannel>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002ea4:	f000 fab0 	bl	8003408 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002ea8:	4803      	ldr	r0, [pc, #12]	@ (8002eb8 <MX_TIM2_Init+0xb0>)
 8002eaa:	f000 fefb 	bl	8003ca4 <HAL_TIM_MspPostInit>

}
 8002eae:	bf00      	nop
 8002eb0:	3728      	adds	r7, #40	@ 0x28
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	24000d98 	.word	0x24000d98

08002ebc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b088      	sub	sp, #32
 8002ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ec2:	f107 0314 	add.w	r3, r7, #20
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	605a      	str	r2, [r3, #4]
 8002ecc:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002ece:	1d3b      	adds	r3, r7, #4
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	605a      	str	r2, [r3, #4]
 8002ed6:	609a      	str	r2, [r3, #8]
 8002ed8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002eda:	4b20      	ldr	r3, [pc, #128]	@ (8002f5c <MX_TIM3_Init+0xa0>)
 8002edc:	4a20      	ldr	r2, [pc, #128]	@ (8002f60 <MX_TIM3_Init+0xa4>)
 8002ede:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002ee0:	4b1e      	ldr	r3, [pc, #120]	@ (8002f5c <MX_TIM3_Init+0xa0>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ee6:	4b1d      	ldr	r3, [pc, #116]	@ (8002f5c <MX_TIM3_Init+0xa0>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002eec:	4b1b      	ldr	r3, [pc, #108]	@ (8002f5c <MX_TIM3_Init+0xa0>)
 8002eee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ef2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ef4:	4b19      	ldr	r3, [pc, #100]	@ (8002f5c <MX_TIM3_Init+0xa0>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002efa:	4b18      	ldr	r3, [pc, #96]	@ (8002f5c <MX_TIM3_Init+0xa0>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002f00:	4816      	ldr	r0, [pc, #88]	@ (8002f5c <MX_TIM3_Init+0xa0>)
 8002f02:	f00b f91f 	bl	800e144 <HAL_TIM_IC_Init>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002f0c:	f000 fa7c 	bl	8003408 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f10:	2300      	movs	r3, #0
 8002f12:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f14:	2300      	movs	r3, #0
 8002f16:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f18:	f107 0314 	add.w	r3, r7, #20
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	480f      	ldr	r0, [pc, #60]	@ (8002f5c <MX_TIM3_Init+0xa0>)
 8002f20:	f00c f91e 	bl	800f160 <HAL_TIMEx_MasterConfigSynchronization>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8002f2a:	f000 fa6d 	bl	8003408 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002f32:	2301      	movs	r3, #1
 8002f34:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002f36:	2300      	movs	r3, #0
 8002f38:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002f3e:	1d3b      	adds	r3, r7, #4
 8002f40:	2200      	movs	r2, #0
 8002f42:	4619      	mov	r1, r3
 8002f44:	4805      	ldr	r0, [pc, #20]	@ (8002f5c <MX_TIM3_Init+0xa0>)
 8002f46:	f00b f954 	bl	800e1f2 <HAL_TIM_IC_ConfigChannel>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002f50:	f000 fa5a 	bl	8003408 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002f54:	bf00      	nop
 8002f56:	3720      	adds	r7, #32
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	24000de4 	.word	0x24000de4
 8002f60:	40000400 	.word	0x40000400

08002f64 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b08a      	sub	sp, #40	@ 0x28
 8002f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f6a:	f107 031c 	add.w	r3, r7, #28
 8002f6e:	2200      	movs	r2, #0
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	605a      	str	r2, [r3, #4]
 8002f74:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f76:	463b      	mov	r3, r7
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	605a      	str	r2, [r3, #4]
 8002f7e:	609a      	str	r2, [r3, #8]
 8002f80:	60da      	str	r2, [r3, #12]
 8002f82:	611a      	str	r2, [r3, #16]
 8002f84:	615a      	str	r2, [r3, #20]
 8002f86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002f88:	4b21      	ldr	r3, [pc, #132]	@ (8003010 <MX_TIM4_Init+0xac>)
 8002f8a:	4a22      	ldr	r2, [pc, #136]	@ (8003014 <MX_TIM4_Init+0xb0>)
 8002f8c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002f8e:	4b20      	ldr	r3, [pc, #128]	@ (8003010 <MX_TIM4_Init+0xac>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f94:	4b1e      	ldr	r3, [pc, #120]	@ (8003010 <MX_TIM4_Init+0xac>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002f9a:	4b1d      	ldr	r3, [pc, #116]	@ (8003010 <MX_TIM4_Init+0xac>)
 8002f9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002fa0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fa2:	4b1b      	ldr	r3, [pc, #108]	@ (8003010 <MX_TIM4_Init+0xac>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fa8:	4b19      	ldr	r3, [pc, #100]	@ (8003010 <MX_TIM4_Init+0xac>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002fae:	4818      	ldr	r0, [pc, #96]	@ (8003010 <MX_TIM4_Init+0xac>)
 8002fb0:	f00a febe 	bl	800dd30 <HAL_TIM_PWM_Init>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8002fba:	f000 fa25 	bl	8003408 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002fc6:	f107 031c 	add.w	r3, r7, #28
 8002fca:	4619      	mov	r1, r3
 8002fcc:	4810      	ldr	r0, [pc, #64]	@ (8003010 <MX_TIM4_Init+0xac>)
 8002fce:	f00c f8c7 	bl	800f160 <HAL_TIMEx_MasterConfigSynchronization>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002fd8:	f000 fa16 	bl	8003408 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fdc:	2360      	movs	r3, #96	@ 0x60
 8002fde:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002fec:	463b      	mov	r3, r7
 8002fee:	2200      	movs	r2, #0
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	4807      	ldr	r0, [pc, #28]	@ (8003010 <MX_TIM4_Init+0xac>)
 8002ff4:	f00b f99a 	bl	800e32c <HAL_TIM_PWM_ConfigChannel>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002ffe:	f000 fa03 	bl	8003408 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003002:	4803      	ldr	r0, [pc, #12]	@ (8003010 <MX_TIM4_Init+0xac>)
 8003004:	f000 fe4e 	bl	8003ca4 <HAL_TIM_MspPostInit>

}
 8003008:	bf00      	nop
 800300a:	3728      	adds	r7, #40	@ 0x28
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	24000e30 	.word	0x24000e30
 8003014:	40000800 	.word	0x40000800

08003018 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b088      	sub	sp, #32
 800301c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800301e:	f107 0314 	add.w	r3, r7, #20
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	605a      	str	r2, [r3, #4]
 8003028:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800302a:	1d3b      	adds	r3, r7, #4
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	605a      	str	r2, [r3, #4]
 8003032:	609a      	str	r2, [r3, #8]
 8003034:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8003036:	4b22      	ldr	r3, [pc, #136]	@ (80030c0 <MX_TIM15_Init+0xa8>)
 8003038:	4a22      	ldr	r2, [pc, #136]	@ (80030c4 <MX_TIM15_Init+0xac>)
 800303a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800303c:	4b20      	ldr	r3, [pc, #128]	@ (80030c0 <MX_TIM15_Init+0xa8>)
 800303e:	2200      	movs	r2, #0
 8003040:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003042:	4b1f      	ldr	r3, [pc, #124]	@ (80030c0 <MX_TIM15_Init+0xa8>)
 8003044:	2200      	movs	r2, #0
 8003046:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8003048:	4b1d      	ldr	r3, [pc, #116]	@ (80030c0 <MX_TIM15_Init+0xa8>)
 800304a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800304e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003050:	4b1b      	ldr	r3, [pc, #108]	@ (80030c0 <MX_TIM15_Init+0xa8>)
 8003052:	2200      	movs	r2, #0
 8003054:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8003056:	4b1a      	ldr	r3, [pc, #104]	@ (80030c0 <MX_TIM15_Init+0xa8>)
 8003058:	2200      	movs	r2, #0
 800305a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800305c:	4b18      	ldr	r3, [pc, #96]	@ (80030c0 <MX_TIM15_Init+0xa8>)
 800305e:	2200      	movs	r2, #0
 8003060:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8003062:	4817      	ldr	r0, [pc, #92]	@ (80030c0 <MX_TIM15_Init+0xa8>)
 8003064:	f00b f86e 	bl	800e144 <HAL_TIM_IC_Init>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 800306e:	f000 f9cb 	bl	8003408 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003072:	2300      	movs	r3, #0
 8003074:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003076:	2300      	movs	r3, #0
 8003078:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800307a:	f107 0314 	add.w	r3, r7, #20
 800307e:	4619      	mov	r1, r3
 8003080:	480f      	ldr	r0, [pc, #60]	@ (80030c0 <MX_TIM15_Init+0xa8>)
 8003082:	f00c f86d 	bl	800f160 <HAL_TIMEx_MasterConfigSynchronization>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 800308c:	f000 f9bc 	bl	8003408 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003090:	2300      	movs	r3, #0
 8003092:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003094:	2301      	movs	r3, #1
 8003096:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003098:	2300      	movs	r3, #0
 800309a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800309c:	2300      	movs	r3, #0
 800309e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80030a0:	1d3b      	adds	r3, r7, #4
 80030a2:	2200      	movs	r2, #0
 80030a4:	4619      	mov	r1, r3
 80030a6:	4806      	ldr	r0, [pc, #24]	@ (80030c0 <MX_TIM15_Init+0xa8>)
 80030a8:	f00b f8a3 	bl	800e1f2 <HAL_TIM_IC_ConfigChannel>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <MX_TIM15_Init+0x9e>
  {
    Error_Handler();
 80030b2:	f000 f9a9 	bl	8003408 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80030b6:	bf00      	nop
 80030b8:	3720      	adds	r7, #32
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	24000e7c 	.word	0x24000e7c
 80030c4:	40014000 	.word	0x40014000

080030c8 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80030cc:	bf00      	nop
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
	...

080030d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80030de:	4b11      	ldr	r3, [pc, #68]	@ (8003124 <MX_DMA_Init+0x4c>)
 80030e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80030e4:	4a0f      	ldr	r2, [pc, #60]	@ (8003124 <MX_DMA_Init+0x4c>)
 80030e6:	f043 0301 	orr.w	r3, r3, #1
 80030ea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80030ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003124 <MX_DMA_Init+0x4c>)
 80030f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80030f4:	f003 0301 	and.w	r3, r3, #1
 80030f8:	607b      	str	r3, [r7, #4]
 80030fa:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80030fc:	2200      	movs	r2, #0
 80030fe:	2100      	movs	r1, #0
 8003100:	200c      	movs	r0, #12
 8003102:	f004 f990 	bl	8007426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003106:	200c      	movs	r0, #12
 8003108:	f004 f9a7 	bl	800745a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800310c:	2200      	movs	r2, #0
 800310e:	2100      	movs	r1, #0
 8003110:	200d      	movs	r0, #13
 8003112:	f004 f988 	bl	8007426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8003116:	200d      	movs	r0, #13
 8003118:	f004 f99f 	bl	800745a <HAL_NVIC_EnableIRQ>

}
 800311c:	bf00      	nop
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	58024400 	.word	0x58024400

08003128 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b08e      	sub	sp, #56	@ 0x38
 800312c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800312e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	605a      	str	r2, [r3, #4]
 8003138:	609a      	str	r2, [r3, #8]
 800313a:	60da      	str	r2, [r3, #12]
 800313c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800313e:	4bab      	ldr	r3, [pc, #684]	@ (80033ec <MX_GPIO_Init+0x2c4>)
 8003140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003144:	4aa9      	ldr	r2, [pc, #676]	@ (80033ec <MX_GPIO_Init+0x2c4>)
 8003146:	f043 0310 	orr.w	r3, r3, #16
 800314a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800314e:	4ba7      	ldr	r3, [pc, #668]	@ (80033ec <MX_GPIO_Init+0x2c4>)
 8003150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003154:	f003 0310 	and.w	r3, r3, #16
 8003158:	623b      	str	r3, [r7, #32]
 800315a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800315c:	4ba3      	ldr	r3, [pc, #652]	@ (80033ec <MX_GPIO_Init+0x2c4>)
 800315e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003162:	4aa2      	ldr	r2, [pc, #648]	@ (80033ec <MX_GPIO_Init+0x2c4>)
 8003164:	f043 0304 	orr.w	r3, r3, #4
 8003168:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800316c:	4b9f      	ldr	r3, [pc, #636]	@ (80033ec <MX_GPIO_Init+0x2c4>)
 800316e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003172:	f003 0304 	and.w	r3, r3, #4
 8003176:	61fb      	str	r3, [r7, #28]
 8003178:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800317a:	4b9c      	ldr	r3, [pc, #624]	@ (80033ec <MX_GPIO_Init+0x2c4>)
 800317c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003180:	4a9a      	ldr	r2, [pc, #616]	@ (80033ec <MX_GPIO_Init+0x2c4>)
 8003182:	f043 0320 	orr.w	r3, r3, #32
 8003186:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800318a:	4b98      	ldr	r3, [pc, #608]	@ (80033ec <MX_GPIO_Init+0x2c4>)
 800318c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003190:	f003 0320 	and.w	r3, r3, #32
 8003194:	61bb      	str	r3, [r7, #24]
 8003196:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003198:	4b94      	ldr	r3, [pc, #592]	@ (80033ec <MX_GPIO_Init+0x2c4>)
 800319a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800319e:	4a93      	ldr	r2, [pc, #588]	@ (80033ec <MX_GPIO_Init+0x2c4>)
 80031a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80031a8:	4b90      	ldr	r3, [pc, #576]	@ (80033ec <MX_GPIO_Init+0x2c4>)
 80031aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031b2:	617b      	str	r3, [r7, #20]
 80031b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031b6:	4b8d      	ldr	r3, [pc, #564]	@ (80033ec <MX_GPIO_Init+0x2c4>)
 80031b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031bc:	4a8b      	ldr	r2, [pc, #556]	@ (80033ec <MX_GPIO_Init+0x2c4>)
 80031be:	f043 0301 	orr.w	r3, r3, #1
 80031c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80031c6:	4b89      	ldr	r3, [pc, #548]	@ (80033ec <MX_GPIO_Init+0x2c4>)
 80031c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	613b      	str	r3, [r7, #16]
 80031d2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031d4:	4b85      	ldr	r3, [pc, #532]	@ (80033ec <MX_GPIO_Init+0x2c4>)
 80031d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031da:	4a84      	ldr	r2, [pc, #528]	@ (80033ec <MX_GPIO_Init+0x2c4>)
 80031dc:	f043 0302 	orr.w	r3, r3, #2
 80031e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80031e4:	4b81      	ldr	r3, [pc, #516]	@ (80033ec <MX_GPIO_Init+0x2c4>)
 80031e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	60fb      	str	r3, [r7, #12]
 80031f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80031f2:	4b7e      	ldr	r3, [pc, #504]	@ (80033ec <MX_GPIO_Init+0x2c4>)
 80031f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031f8:	4a7c      	ldr	r2, [pc, #496]	@ (80033ec <MX_GPIO_Init+0x2c4>)
 80031fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003202:	4b7a      	ldr	r3, [pc, #488]	@ (80033ec <MX_GPIO_Init+0x2c4>)
 8003204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003208:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800320c:	60bb      	str	r3, [r7, #8]
 800320e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003210:	4b76      	ldr	r3, [pc, #472]	@ (80033ec <MX_GPIO_Init+0x2c4>)
 8003212:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003216:	4a75      	ldr	r2, [pc, #468]	@ (80033ec <MX_GPIO_Init+0x2c4>)
 8003218:	f043 0308 	orr.w	r3, r3, #8
 800321c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003220:	4b72      	ldr	r3, [pc, #456]	@ (80033ec <MX_GPIO_Init+0x2c4>)
 8003222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003226:	f003 0308 	and.w	r3, r3, #8
 800322a:	607b      	str	r3, [r7, #4]
 800322c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LINE_DRIVER1_ENABLE_Pin|LINE_DRIVER2_ENABLE_Pin, GPIO_PIN_SET);
 800322e:	2201      	movs	r2, #1
 8003230:	f640 0105 	movw	r1, #2053	@ 0x805
 8003234:	486e      	ldr	r0, [pc, #440]	@ (80033f0 <MX_GPIO_Init+0x2c8>)
 8003236:	f007 f9c1 	bl	800a5bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
 800323a:	2200      	movs	r2, #0
 800323c:	2102      	movs	r1, #2
 800323e:	486d      	ldr	r0, [pc, #436]	@ (80033f4 <MX_GPIO_Init+0x2cc>)
 8003240:	f007 f9bc 	bl	800a5bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8003244:	2200      	movs	r2, #0
 8003246:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800324a:	4869      	ldr	r0, [pc, #420]	@ (80033f0 <MX_GPIO_Init+0x2c8>)
 800324c:	f007 f9b6 	bl	800a5bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_3V3_SWITCH_GPIO_Port, OUT_3V3_SWITCH_Pin, GPIO_PIN_SET);
 8003250:	2201      	movs	r2, #1
 8003252:	2101      	movs	r1, #1
 8003254:	4868      	ldr	r0, [pc, #416]	@ (80033f8 <MX_GPIO_Init+0x2d0>)
 8003256:	f007 f9b1 	bl	800a5bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ACTIVE_GPIO_Port, LED_ACTIVE_Pin, GPIO_PIN_SET);
 800325a:	2201      	movs	r2, #1
 800325c:	2101      	movs	r1, #1
 800325e:	4867      	ldr	r0, [pc, #412]	@ (80033fc <MX_GPIO_Init+0x2d4>)
 8003260:	f007 f9ac 	bl	800a5bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8003264:	2200      	movs	r2, #0
 8003266:	2102      	movs	r1, #2
 8003268:	4864      	ldr	r0, [pc, #400]	@ (80033fc <MX_GPIO_Init+0x2d4>)
 800326a:	f007 f9a7 	bl	800a5bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800326e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003272:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003274:	2300      	movs	r3, #0
 8003276:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003278:	2300      	movs	r3, #0
 800327a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800327c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003280:	4619      	mov	r1, r3
 8003282:	485f      	ldr	r0, [pc, #380]	@ (8003400 <MX_GPIO_Init+0x2d8>)
 8003284:	f006 ffda 	bl	800a23c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LINE_DRIVER1_ENABLE_Pin LINE_DRIVER2_ENABLE_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LINE_DRIVER1_ENABLE_Pin|LINE_DRIVER2_ENABLE_Pin|LED_RED_Pin;
 8003288:	f644 0305 	movw	r3, #18437	@ 0x4805
 800328c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800328e:	2301      	movs	r3, #1
 8003290:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003292:	2300      	movs	r3, #0
 8003294:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003296:	2300      	movs	r3, #0
 8003298:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800329a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800329e:	4619      	mov	r1, r3
 80032a0:	4853      	ldr	r0, [pc, #332]	@ (80033f0 <MX_GPIO_Init+0x2c8>)
 80032a2:	f006 ffcb 	bl	800a23c <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_500V_ENABLE_Pin */
  GPIO_InitStruct.Pin = OUT_500V_ENABLE_Pin;
 80032a6:	2301      	movs	r3, #1
 80032a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032aa:	2300      	movs	r3, #0
 80032ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ae:	2300      	movs	r3, #0
 80032b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OUT_500V_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80032b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032b6:	4619      	mov	r1, r3
 80032b8:	484e      	ldr	r0, [pc, #312]	@ (80033f4 <MX_GPIO_Init+0x2cc>)
 80032ba:	f006 ffbf 	bl	800a23c <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_OUTPUT_Pin */
  GPIO_InitStruct.Pin = TEST_OUTPUT_Pin;
 80032be:	2302      	movs	r3, #2
 80032c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032c2:	2301      	movs	r3, #1
 80032c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c6:	2300      	movs	r3, #0
 80032c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ca:	2300      	movs	r3, #0
 80032cc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(TEST_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 80032ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032d2:	4619      	mov	r1, r3
 80032d4:	4847      	ldr	r0, [pc, #284]	@ (80033f4 <MX_GPIO_Init+0x2cc>)
 80032d6:	f006 ffb1 	bl	800a23c <HAL_GPIO_Init>

  /*Configure GPIO pin : TURN_PLASMA_ON_Pin */
  GPIO_InitStruct.Pin = TURN_PLASMA_ON_Pin;
 80032da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032e0:	2300      	movs	r3, #0
 80032e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e4:	2300      	movs	r3, #0
 80032e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TURN_PLASMA_ON_GPIO_Port, &GPIO_InitStruct);
 80032e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032ec:	4619      	mov	r1, r3
 80032ee:	4843      	ldr	r0, [pc, #268]	@ (80033fc <MX_GPIO_Init+0x2d4>)
 80032f0:	f006 ffa4 	bl	800a23c <HAL_GPIO_Init>

  /*Configure GPIO pin : INP_COMP_IRQ_Pin */
  GPIO_InitStruct.Pin = INP_COMP_IRQ_Pin;
 80032f4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80032f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80032fa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80032fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003300:	2300      	movs	r3, #0
 8003302:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(INP_COMP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003304:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003308:	4619      	mov	r1, r3
 800330a:	483c      	ldr	r0, [pc, #240]	@ (80033fc <MX_GPIO_Init+0x2d4>)
 800330c:	f006 ff96 	bl	800a23c <HAL_GPIO_Init>

  /*Configure GPIO pin : POWER_OFF_IRQ_Pin */
  GPIO_InitStruct.Pin = POWER_OFF_IRQ_Pin;
 8003310:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003314:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003316:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800331a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331c:	2300      	movs	r3, #0
 800331e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(POWER_OFF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003320:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003324:	4619      	mov	r1, r3
 8003326:	4835      	ldr	r0, [pc, #212]	@ (80033fc <MX_GPIO_Init+0x2d4>)
 8003328:	f006 ff88 	bl	800a23c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800332c:	2380      	movs	r3, #128	@ 0x80
 800332e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003330:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003334:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003336:	2300      	movs	r3, #0
 8003338:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800333a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800333e:	4619      	mov	r1, r3
 8003340:	482c      	ldr	r0, [pc, #176]	@ (80033f4 <MX_GPIO_Init+0x2cc>)
 8003342:	f006 ff7b 	bl	800a23c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8003346:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800334a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800334c:	2300      	movs	r3, #0
 800334e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003350:	2300      	movs	r3, #0
 8003352:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003354:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003358:	4619      	mov	r1, r3
 800335a:	482a      	ldr	r0, [pc, #168]	@ (8003404 <MX_GPIO_Init+0x2dc>)
 800335c:	f006 ff6e 	bl	800a23c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8003360:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003364:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003366:	2302      	movs	r3, #2
 8003368:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336a:	2300      	movs	r3, #0
 800336c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800336e:	2300      	movs	r3, #0
 8003370:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8003372:	230a      	movs	r3, #10
 8003374:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8003376:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800337a:	4619      	mov	r1, r3
 800337c:	4821      	ldr	r0, [pc, #132]	@ (8003404 <MX_GPIO_Init+0x2dc>)
 800337e:	f006 ff5d 	bl	800a23c <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_3V3_SWITCH_Pin */
  GPIO_InitStruct.Pin = OUT_3V3_SWITCH_Pin;
 8003382:	2301      	movs	r3, #1
 8003384:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003386:	2301      	movs	r3, #1
 8003388:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800338a:	2300      	movs	r3, #0
 800338c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800338e:	2300      	movs	r3, #0
 8003390:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(OUT_3V3_SWITCH_GPIO_Port, &GPIO_InitStruct);
 8003392:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003396:	4619      	mov	r1, r3
 8003398:	4817      	ldr	r0, [pc, #92]	@ (80033f8 <MX_GPIO_Init+0x2d0>)
 800339a:	f006 ff4f 	bl	800a23c <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_15V_ENABLE_Pin */
  GPIO_InitStruct.Pin = OUT_15V_ENABLE_Pin;
 800339e:	2302      	movs	r3, #2
 80033a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033a2:	2300      	movs	r3, #0
 80033a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a6:	2300      	movs	r3, #0
 80033a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OUT_15V_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80033aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033ae:	4619      	mov	r1, r3
 80033b0:	4811      	ldr	r0, [pc, #68]	@ (80033f8 <MX_GPIO_Init+0x2d0>)
 80033b2:	f006 ff43 	bl	800a23c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_ACTIVE_Pin LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_ACTIVE_Pin|LED_YELLOW_Pin;
 80033b6:	2303      	movs	r3, #3
 80033b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033ba:	2301      	movs	r3, #1
 80033bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033be:	2300      	movs	r3, #0
 80033c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c2:	2300      	movs	r3, #0
 80033c4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033ca:	4619      	mov	r1, r3
 80033cc:	480b      	ldr	r0, [pc, #44]	@ (80033fc <MX_GPIO_Init+0x2d4>)
 80033ce:	f006 ff35 	bl	800a23c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80033d2:	2200      	movs	r2, #0
 80033d4:	2100      	movs	r1, #0
 80033d6:	2028      	movs	r0, #40	@ 0x28
 80033d8:	f004 f825 	bl	8007426 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80033dc:	2028      	movs	r0, #40	@ 0x28
 80033de:	f004 f83c 	bl	800745a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80033e2:	bf00      	nop
 80033e4:	3738      	adds	r7, #56	@ 0x38
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	58024400 	.word	0x58024400
 80033f0:	58020400 	.word	0x58020400
 80033f4:	58021800 	.word	0x58021800
 80033f8:	58020c00 	.word	0x58020c00
 80033fc:	58021000 	.word	0x58021000
 8003400:	58020800 	.word	0x58020800
 8003404:	58020000 	.word	0x58020000

08003408 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800340c:	b672      	cpsid	i
}
 800340e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003410:	bf00      	nop
 8003412:	e7fd      	b.n	8003410 <Error_Handler+0x8>

08003414 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800341a:	4b0a      	ldr	r3, [pc, #40]	@ (8003444 <HAL_MspInit+0x30>)
 800341c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003420:	4a08      	ldr	r2, [pc, #32]	@ (8003444 <HAL_MspInit+0x30>)
 8003422:	f043 0302 	orr.w	r3, r3, #2
 8003426:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800342a:	4b06      	ldr	r3, [pc, #24]	@ (8003444 <HAL_MspInit+0x30>)
 800342c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	607b      	str	r3, [r7, #4]
 8003436:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr
 8003444:	58024400 	.word	0x58024400

08003448 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b090      	sub	sp, #64	@ 0x40
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003450:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	605a      	str	r2, [r3, #4]
 800345a:	609a      	str	r2, [r3, #8]
 800345c:	60da      	str	r2, [r3, #12]
 800345e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4aaa      	ldr	r2, [pc, #680]	@ (8003710 <HAL_ADC_MspInit+0x2c8>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d16b      	bne.n	8003542 <HAL_ADC_MspInit+0xfa>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800346a:	4baa      	ldr	r3, [pc, #680]	@ (8003714 <HAL_ADC_MspInit+0x2cc>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	3301      	adds	r3, #1
 8003470:	4aa8      	ldr	r2, [pc, #672]	@ (8003714 <HAL_ADC_MspInit+0x2cc>)
 8003472:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003474:	4ba7      	ldr	r3, [pc, #668]	@ (8003714 <HAL_ADC_MspInit+0x2cc>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d10e      	bne.n	800349a <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800347c:	4ba6      	ldr	r3, [pc, #664]	@ (8003718 <HAL_ADC_MspInit+0x2d0>)
 800347e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003482:	4aa5      	ldr	r2, [pc, #660]	@ (8003718 <HAL_ADC_MspInit+0x2d0>)
 8003484:	f043 0320 	orr.w	r3, r3, #32
 8003488:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800348c:	4ba2      	ldr	r3, [pc, #648]	@ (8003718 <HAL_ADC_MspInit+0x2d0>)
 800348e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003492:	f003 0320 	and.w	r3, r3, #32
 8003496:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800349a:	4b9f      	ldr	r3, [pc, #636]	@ (8003718 <HAL_ADC_MspInit+0x2d0>)
 800349c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034a0:	4a9d      	ldr	r2, [pc, #628]	@ (8003718 <HAL_ADC_MspInit+0x2d0>)
 80034a2:	f043 0301 	orr.w	r3, r3, #1
 80034a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80034aa:	4b9b      	ldr	r3, [pc, #620]	@ (8003718 <HAL_ADC_MspInit+0x2d0>)
 80034ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80034b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP16
    PA3     ------> ADC1_INP15
    PA4     ------> ADC1_INP18
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 80034b8:	2319      	movs	r3, #25
 80034ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034bc:	2303      	movs	r3, #3
 80034be:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c0:	2300      	movs	r3, #0
 80034c2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80034c8:	4619      	mov	r1, r3
 80034ca:	4894      	ldr	r0, [pc, #592]	@ (800371c <HAL_ADC_MspInit+0x2d4>)
 80034cc:	f006 feb6 	bl	800a23c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream2;
 80034d0:	4b93      	ldr	r3, [pc, #588]	@ (8003720 <HAL_ADC_MspInit+0x2d8>)
 80034d2:	4a94      	ldr	r2, [pc, #592]	@ (8003724 <HAL_ADC_MspInit+0x2dc>)
 80034d4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80034d6:	4b92      	ldr	r3, [pc, #584]	@ (8003720 <HAL_ADC_MspInit+0x2d8>)
 80034d8:	2209      	movs	r2, #9
 80034da:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034dc:	4b90      	ldr	r3, [pc, #576]	@ (8003720 <HAL_ADC_MspInit+0x2d8>)
 80034de:	2200      	movs	r2, #0
 80034e0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80034e2:	4b8f      	ldr	r3, [pc, #572]	@ (8003720 <HAL_ADC_MspInit+0x2d8>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80034e8:	4b8d      	ldr	r3, [pc, #564]	@ (8003720 <HAL_ADC_MspInit+0x2d8>)
 80034ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80034ee:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80034f0:	4b8b      	ldr	r3, [pc, #556]	@ (8003720 <HAL_ADC_MspInit+0x2d8>)
 80034f2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80034f6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80034f8:	4b89      	ldr	r3, [pc, #548]	@ (8003720 <HAL_ADC_MspInit+0x2d8>)
 80034fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80034fe:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003500:	4b87      	ldr	r3, [pc, #540]	@ (8003720 <HAL_ADC_MspInit+0x2d8>)
 8003502:	2200      	movs	r2, #0
 8003504:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8003506:	4b86      	ldr	r3, [pc, #536]	@ (8003720 <HAL_ADC_MspInit+0x2d8>)
 8003508:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800350c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800350e:	4b84      	ldr	r3, [pc, #528]	@ (8003720 <HAL_ADC_MspInit+0x2d8>)
 8003510:	2200      	movs	r2, #0
 8003512:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003514:	4882      	ldr	r0, [pc, #520]	@ (8003720 <HAL_ADC_MspInit+0x2d8>)
 8003516:	f003 ffbb 	bl	8007490 <HAL_DMA_Init>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <HAL_ADC_MspInit+0xdc>
    {
      Error_Handler();
 8003520:	f7ff ff72 	bl	8003408 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a7e      	ldr	r2, [pc, #504]	@ (8003720 <HAL_ADC_MspInit+0x2d8>)
 8003528:	659a      	str	r2, [r3, #88]	@ 0x58
 800352a:	4a7d      	ldr	r2, [pc, #500]	@ (8003720 <HAL_ADC_MspInit+0x2d8>)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003530:	2200      	movs	r2, #0
 8003532:	2100      	movs	r1, #0
 8003534:	2012      	movs	r0, #18
 8003536:	f003 ff76 	bl	8007426 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800353a:	2012      	movs	r0, #18
 800353c:	f003 ff8d 	bl	800745a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003540:	e0e2      	b.n	8003708 <HAL_ADC_MspInit+0x2c0>
  else if(hadc->Instance==ADC2)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a78      	ldr	r2, [pc, #480]	@ (8003728 <HAL_ADC_MspInit+0x2e0>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d156      	bne.n	80035fa <HAL_ADC_MspInit+0x1b2>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800354c:	4b71      	ldr	r3, [pc, #452]	@ (8003714 <HAL_ADC_MspInit+0x2cc>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	3301      	adds	r3, #1
 8003552:	4a70      	ldr	r2, [pc, #448]	@ (8003714 <HAL_ADC_MspInit+0x2cc>)
 8003554:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003556:	4b6f      	ldr	r3, [pc, #444]	@ (8003714 <HAL_ADC_MspInit+0x2cc>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d10e      	bne.n	800357c <HAL_ADC_MspInit+0x134>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800355e:	4b6e      	ldr	r3, [pc, #440]	@ (8003718 <HAL_ADC_MspInit+0x2d0>)
 8003560:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003564:	4a6c      	ldr	r2, [pc, #432]	@ (8003718 <HAL_ADC_MspInit+0x2d0>)
 8003566:	f043 0320 	orr.w	r3, r3, #32
 800356a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800356e:	4b6a      	ldr	r3, [pc, #424]	@ (8003718 <HAL_ADC_MspInit+0x2d0>)
 8003570:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003574:	f003 0320 	and.w	r3, r3, #32
 8003578:	623b      	str	r3, [r7, #32]
 800357a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800357c:	4b66      	ldr	r3, [pc, #408]	@ (8003718 <HAL_ADC_MspInit+0x2d0>)
 800357e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003582:	4a65      	ldr	r2, [pc, #404]	@ (8003718 <HAL_ADC_MspInit+0x2d0>)
 8003584:	f043 0301 	orr.w	r3, r3, #1
 8003588:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800358c:	4b62      	ldr	r3, [pc, #392]	@ (8003718 <HAL_ADC_MspInit+0x2d0>)
 800358e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	61fb      	str	r3, [r7, #28]
 8003598:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800359a:	4b5f      	ldr	r3, [pc, #380]	@ (8003718 <HAL_ADC_MspInit+0x2d0>)
 800359c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035a0:	4a5d      	ldr	r2, [pc, #372]	@ (8003718 <HAL_ADC_MspInit+0x2d0>)
 80035a2:	f043 0302 	orr.w	r3, r3, #2
 80035a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80035aa:	4b5b      	ldr	r3, [pc, #364]	@ (8003718 <HAL_ADC_MspInit+0x2d0>)
 80035ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	61bb      	str	r3, [r7, #24]
 80035b6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80035b8:	2360      	movs	r3, #96	@ 0x60
 80035ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035bc:	2303      	movs	r3, #3
 80035be:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c0:	2300      	movs	r3, #0
 80035c2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80035c8:	4619      	mov	r1, r3
 80035ca:	4854      	ldr	r0, [pc, #336]	@ (800371c <HAL_ADC_MspInit+0x2d4>)
 80035cc:	f006 fe36 	bl	800a23c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80035d0:	2302      	movs	r3, #2
 80035d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035d4:	2303      	movs	r3, #3
 80035d6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d8:	2300      	movs	r3, #0
 80035da:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80035e0:	4619      	mov	r1, r3
 80035e2:	4852      	ldr	r0, [pc, #328]	@ (800372c <HAL_ADC_MspInit+0x2e4>)
 80035e4:	f006 fe2a 	bl	800a23c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80035e8:	2200      	movs	r2, #0
 80035ea:	2100      	movs	r1, #0
 80035ec:	2012      	movs	r0, #18
 80035ee:	f003 ff1a 	bl	8007426 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80035f2:	2012      	movs	r0, #18
 80035f4:	f003 ff31 	bl	800745a <HAL_NVIC_EnableIRQ>
}
 80035f8:	e086      	b.n	8003708 <HAL_ADC_MspInit+0x2c0>
  else if(hadc->Instance==ADC3)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a4c      	ldr	r2, [pc, #304]	@ (8003730 <HAL_ADC_MspInit+0x2e8>)
 8003600:	4293      	cmp	r3, r2
 8003602:	f040 8081 	bne.w	8003708 <HAL_ADC_MspInit+0x2c0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003606:	4b44      	ldr	r3, [pc, #272]	@ (8003718 <HAL_ADC_MspInit+0x2d0>)
 8003608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800360c:	4a42      	ldr	r2, [pc, #264]	@ (8003718 <HAL_ADC_MspInit+0x2d0>)
 800360e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003612:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003616:	4b40      	ldr	r3, [pc, #256]	@ (8003718 <HAL_ADC_MspInit+0x2d0>)
 8003618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800361c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003620:	617b      	str	r3, [r7, #20]
 8003622:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003624:	4b3c      	ldr	r3, [pc, #240]	@ (8003718 <HAL_ADC_MspInit+0x2d0>)
 8003626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800362a:	4a3b      	ldr	r2, [pc, #236]	@ (8003718 <HAL_ADC_MspInit+0x2d0>)
 800362c:	f043 0320 	orr.w	r3, r3, #32
 8003630:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003634:	4b38      	ldr	r3, [pc, #224]	@ (8003718 <HAL_ADC_MspInit+0x2d0>)
 8003636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800363a:	f003 0320 	and.w	r3, r3, #32
 800363e:	613b      	str	r3, [r7, #16]
 8003640:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003642:	4b35      	ldr	r3, [pc, #212]	@ (8003718 <HAL_ADC_MspInit+0x2d0>)
 8003644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003648:	4a33      	ldr	r2, [pc, #204]	@ (8003718 <HAL_ADC_MspInit+0x2d0>)
 800364a:	f043 0304 	orr.w	r3, r3, #4
 800364e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003652:	4b31      	ldr	r3, [pc, #196]	@ (8003718 <HAL_ADC_MspInit+0x2d0>)
 8003654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003658:	f003 0304 	and.w	r3, r3, #4
 800365c:	60fb      	str	r3, [r7, #12]
 800365e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8003660:	f44f 63ff 	mov.w	r3, #2040	@ 0x7f8
 8003664:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003666:	2303      	movs	r3, #3
 8003668:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366a:	2300      	movs	r3, #0
 800366c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800366e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003672:	4619      	mov	r1, r3
 8003674:	482f      	ldr	r0, [pc, #188]	@ (8003734 <HAL_ADC_MspInit+0x2ec>)
 8003676:	f006 fde1 	bl	800a23c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800367a:	2301      	movs	r3, #1
 800367c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800367e:	2303      	movs	r3, #3
 8003680:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003682:	2300      	movs	r3, #0
 8003684:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003686:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800368a:	4619      	mov	r1, r3
 800368c:	482a      	ldr	r0, [pc, #168]	@ (8003738 <HAL_ADC_MspInit+0x2f0>)
 800368e:	f006 fdd5 	bl	800a23c <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8003692:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8003696:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800369a:	f000 fd91 	bl	80041c0 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800369e:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 80036a2:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 80036a6:	f000 fd8b 	bl	80041c0 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 80036aa:	4b24      	ldr	r3, [pc, #144]	@ (800373c <HAL_ADC_MspInit+0x2f4>)
 80036ac:	4a24      	ldr	r2, [pc, #144]	@ (8003740 <HAL_ADC_MspInit+0x2f8>)
 80036ae:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80036b0:	4b22      	ldr	r3, [pc, #136]	@ (800373c <HAL_ADC_MspInit+0x2f4>)
 80036b2:	2273      	movs	r2, #115	@ 0x73
 80036b4:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036b6:	4b21      	ldr	r3, [pc, #132]	@ (800373c <HAL_ADC_MspInit+0x2f4>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80036bc:	4b1f      	ldr	r3, [pc, #124]	@ (800373c <HAL_ADC_MspInit+0x2f4>)
 80036be:	2200      	movs	r2, #0
 80036c0:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80036c2:	4b1e      	ldr	r3, [pc, #120]	@ (800373c <HAL_ADC_MspInit+0x2f4>)
 80036c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80036c8:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80036ca:	4b1c      	ldr	r3, [pc, #112]	@ (800373c <HAL_ADC_MspInit+0x2f4>)
 80036cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80036d0:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80036d2:	4b1a      	ldr	r3, [pc, #104]	@ (800373c <HAL_ADC_MspInit+0x2f4>)
 80036d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80036d8:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 80036da:	4b18      	ldr	r3, [pc, #96]	@ (800373c <HAL_ADC_MspInit+0x2f4>)
 80036dc:	2200      	movs	r2, #0
 80036de:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80036e0:	4b16      	ldr	r3, [pc, #88]	@ (800373c <HAL_ADC_MspInit+0x2f4>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036e6:	4b15      	ldr	r3, [pc, #84]	@ (800373c <HAL_ADC_MspInit+0x2f4>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80036ec:	4813      	ldr	r0, [pc, #76]	@ (800373c <HAL_ADC_MspInit+0x2f4>)
 80036ee:	f003 fecf 	bl	8007490 <HAL_DMA_Init>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <HAL_ADC_MspInit+0x2b4>
      Error_Handler();
 80036f8:	f7ff fe86 	bl	8003408 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a0f      	ldr	r2, [pc, #60]	@ (800373c <HAL_ADC_MspInit+0x2f4>)
 8003700:	659a      	str	r2, [r3, #88]	@ 0x58
 8003702:	4a0e      	ldr	r2, [pc, #56]	@ (800373c <HAL_ADC_MspInit+0x2f4>)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003708:	bf00      	nop
 800370a:	3740      	adds	r7, #64	@ 0x40
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40022000 	.word	0x40022000
 8003714:	24000ed0 	.word	0x24000ed0
 8003718:	58024400 	.word	0x58024400
 800371c:	58020000 	.word	0x58020000
 8003720:	24000a58 	.word	0x24000a58
 8003724:	40020040 	.word	0x40020040
 8003728:	40022100 	.word	0x40022100
 800372c:	58020400 	.word	0x58020400
 8003730:	58026000 	.word	0x58026000
 8003734:	58021400 	.word	0x58021400
 8003738:	58020800 	.word	0x58020800
 800373c:	24000ad0 	.word	0x24000ad0
 8003740:	40020028 	.word	0x40020028

08003744 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b08a      	sub	sp, #40	@ 0x28
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800374c:	f107 0314 	add.w	r3, r7, #20
 8003750:	2200      	movs	r2, #0
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	605a      	str	r2, [r3, #4]
 8003756:	609a      	str	r2, [r3, #8]
 8003758:	60da      	str	r2, [r3, #12]
 800375a:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a21      	ldr	r2, [pc, #132]	@ (80037e8 <HAL_COMP_MspInit+0xa4>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d13b      	bne.n	80037de <HAL_COMP_MspInit+0x9a>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_COMP12_CLK_ENABLE();
 8003766:	4b21      	ldr	r3, [pc, #132]	@ (80037ec <HAL_COMP_MspInit+0xa8>)
 8003768:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800376c:	4a1f      	ldr	r2, [pc, #124]	@ (80037ec <HAL_COMP_MspInit+0xa8>)
 800376e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003772:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003776:	4b1d      	ldr	r3, [pc, #116]	@ (80037ec <HAL_COMP_MspInit+0xa8>)
 8003778:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800377c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003780:	613b      	str	r3, [r7, #16]
 8003782:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003784:	4b19      	ldr	r3, [pc, #100]	@ (80037ec <HAL_COMP_MspInit+0xa8>)
 8003786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800378a:	4a18      	ldr	r2, [pc, #96]	@ (80037ec <HAL_COMP_MspInit+0xa8>)
 800378c:	f043 0310 	orr.w	r3, r3, #16
 8003790:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003794:	4b15      	ldr	r3, [pc, #84]	@ (80037ec <HAL_COMP_MspInit+0xa8>)
 8003796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800379a:	f003 0310 	and.w	r3, r3, #16
 800379e:	60fb      	str	r3, [r7, #12]
 80037a0:	68fb      	ldr	r3, [r7, #12]
    /**COMP2 GPIO Configuration
    PE7     ------> COMP2_INM
    PE11     ------> COMP2_INP
    PE13     ------> COMP2_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_11;
 80037a2:	f44f 6308 	mov.w	r3, #2176	@ 0x880
 80037a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037a8:	2303      	movs	r3, #3
 80037aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ac:	2300      	movs	r3, #0
 80037ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80037b0:	f107 0314 	add.w	r3, r7, #20
 80037b4:	4619      	mov	r1, r3
 80037b6:	480e      	ldr	r0, [pc, #56]	@ (80037f0 <HAL_COMP_MspInit+0xac>)
 80037b8:	f006 fd40 	bl	800a23c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80037bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80037c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c2:	2302      	movs	r3, #2
 80037c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c6:	2300      	movs	r3, #0
 80037c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ca:	2300      	movs	r3, #0
 80037cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_COMP2;
 80037ce:	230d      	movs	r3, #13
 80037d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80037d2:	f107 0314 	add.w	r3, r7, #20
 80037d6:	4619      	mov	r1, r3
 80037d8:	4805      	ldr	r0, [pc, #20]	@ (80037f0 <HAL_COMP_MspInit+0xac>)
 80037da:	f006 fd2f 	bl	800a23c <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 80037de:	bf00      	nop
 80037e0:	3728      	adds	r7, #40	@ 0x28
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	58003810 	.word	0x58003810
 80037ec:	58024400 	.word	0x58024400
 80037f0:	58021000 	.word	0x58021000

080037f4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b08e      	sub	sp, #56	@ 0x38
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	605a      	str	r2, [r3, #4]
 8003806:	609a      	str	r2, [r3, #8]
 8003808:	60da      	str	r2, [r3, #12]
 800380a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a59      	ldr	r2, [pc, #356]	@ (8003978 <HAL_ETH_MspInit+0x184>)
 8003812:	4293      	cmp	r3, r2
 8003814:	f040 80ab 	bne.w	800396e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8003818:	4b58      	ldr	r3, [pc, #352]	@ (800397c <HAL_ETH_MspInit+0x188>)
 800381a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800381e:	4a57      	ldr	r2, [pc, #348]	@ (800397c <HAL_ETH_MspInit+0x188>)
 8003820:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003824:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003828:	4b54      	ldr	r3, [pc, #336]	@ (800397c <HAL_ETH_MspInit+0x188>)
 800382a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800382e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003832:	623b      	str	r3, [r7, #32]
 8003834:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8003836:	4b51      	ldr	r3, [pc, #324]	@ (800397c <HAL_ETH_MspInit+0x188>)
 8003838:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800383c:	4a4f      	ldr	r2, [pc, #316]	@ (800397c <HAL_ETH_MspInit+0x188>)
 800383e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003842:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003846:	4b4d      	ldr	r3, [pc, #308]	@ (800397c <HAL_ETH_MspInit+0x188>)
 8003848:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800384c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003850:	61fb      	str	r3, [r7, #28]
 8003852:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8003854:	4b49      	ldr	r3, [pc, #292]	@ (800397c <HAL_ETH_MspInit+0x188>)
 8003856:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800385a:	4a48      	ldr	r2, [pc, #288]	@ (800397c <HAL_ETH_MspInit+0x188>)
 800385c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003860:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003864:	4b45      	ldr	r3, [pc, #276]	@ (800397c <HAL_ETH_MspInit+0x188>)
 8003866:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800386a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800386e:	61bb      	str	r3, [r7, #24]
 8003870:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003872:	4b42      	ldr	r3, [pc, #264]	@ (800397c <HAL_ETH_MspInit+0x188>)
 8003874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003878:	4a40      	ldr	r2, [pc, #256]	@ (800397c <HAL_ETH_MspInit+0x188>)
 800387a:	f043 0304 	orr.w	r3, r3, #4
 800387e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003882:	4b3e      	ldr	r3, [pc, #248]	@ (800397c <HAL_ETH_MspInit+0x188>)
 8003884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	617b      	str	r3, [r7, #20]
 800388e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003890:	4b3a      	ldr	r3, [pc, #232]	@ (800397c <HAL_ETH_MspInit+0x188>)
 8003892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003896:	4a39      	ldr	r2, [pc, #228]	@ (800397c <HAL_ETH_MspInit+0x188>)
 8003898:	f043 0301 	orr.w	r3, r3, #1
 800389c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80038a0:	4b36      	ldr	r3, [pc, #216]	@ (800397c <HAL_ETH_MspInit+0x188>)
 80038a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	613b      	str	r3, [r7, #16]
 80038ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038ae:	4b33      	ldr	r3, [pc, #204]	@ (800397c <HAL_ETH_MspInit+0x188>)
 80038b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038b4:	4a31      	ldr	r2, [pc, #196]	@ (800397c <HAL_ETH_MspInit+0x188>)
 80038b6:	f043 0302 	orr.w	r3, r3, #2
 80038ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80038be:	4b2f      	ldr	r3, [pc, #188]	@ (800397c <HAL_ETH_MspInit+0x188>)
 80038c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	60fb      	str	r3, [r7, #12]
 80038ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80038cc:	4b2b      	ldr	r3, [pc, #172]	@ (800397c <HAL_ETH_MspInit+0x188>)
 80038ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038d2:	4a2a      	ldr	r2, [pc, #168]	@ (800397c <HAL_ETH_MspInit+0x188>)
 80038d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80038dc:	4b27      	ldr	r3, [pc, #156]	@ (800397c <HAL_ETH_MspInit+0x188>)
 80038de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038e6:	60bb      	str	r3, [r7, #8]
 80038e8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80038ea:	2332      	movs	r3, #50	@ 0x32
 80038ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ee:	2302      	movs	r3, #2
 80038f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f2:	2300      	movs	r3, #0
 80038f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038f6:	2300      	movs	r3, #0
 80038f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80038fa:	230b      	movs	r3, #11
 80038fc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003902:	4619      	mov	r1, r3
 8003904:	481e      	ldr	r0, [pc, #120]	@ (8003980 <HAL_ETH_MspInit+0x18c>)
 8003906:	f006 fc99 	bl	800a23c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800390a:	2386      	movs	r3, #134	@ 0x86
 800390c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800390e:	2302      	movs	r3, #2
 8003910:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003912:	2300      	movs	r3, #0
 8003914:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003916:	2300      	movs	r3, #0
 8003918:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800391a:	230b      	movs	r3, #11
 800391c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800391e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003922:	4619      	mov	r1, r3
 8003924:	4817      	ldr	r0, [pc, #92]	@ (8003984 <HAL_ETH_MspInit+0x190>)
 8003926:	f006 fc89 	bl	800a23c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800392a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800392e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003930:	2302      	movs	r3, #2
 8003932:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003934:	2300      	movs	r3, #0
 8003936:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003938:	2300      	movs	r3, #0
 800393a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800393c:	230b      	movs	r3, #11
 800393e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003940:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003944:	4619      	mov	r1, r3
 8003946:	4810      	ldr	r0, [pc, #64]	@ (8003988 <HAL_ETH_MspInit+0x194>)
 8003948:	f006 fc78 	bl	800a23c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800394c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8003950:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003952:	2302      	movs	r3, #2
 8003954:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003956:	2300      	movs	r3, #0
 8003958:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800395a:	2300      	movs	r3, #0
 800395c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800395e:	230b      	movs	r3, #11
 8003960:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003962:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003966:	4619      	mov	r1, r3
 8003968:	4808      	ldr	r0, [pc, #32]	@ (800398c <HAL_ETH_MspInit+0x198>)
 800396a:	f006 fc67 	bl	800a23c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800396e:	bf00      	nop
 8003970:	3738      	adds	r7, #56	@ 0x38
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	40028000 	.word	0x40028000
 800397c:	58024400 	.word	0x58024400
 8003980:	58020800 	.word	0x58020800
 8003984:	58020000 	.word	0x58020000
 8003988:	58020400 	.word	0x58020400
 800398c:	58021800 	.word	0x58021800

08003990 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b0ba      	sub	sp, #232	@ 0xe8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003998:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800399c:	2200      	movs	r2, #0
 800399e:	601a      	str	r2, [r3, #0]
 80039a0:	605a      	str	r2, [r3, #4]
 80039a2:	609a      	str	r2, [r3, #8]
 80039a4:	60da      	str	r2, [r3, #12]
 80039a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80039a8:	f107 0318 	add.w	r3, r7, #24
 80039ac:	22b8      	movs	r2, #184	@ 0xb8
 80039ae:	2100      	movs	r1, #0
 80039b0:	4618      	mov	r0, r3
 80039b2:	f00d f96b 	bl	8010c8c <memset>
  if(huart->Instance==LPUART1)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a4d      	ldr	r2, [pc, #308]	@ (8003af0 <HAL_UART_MspInit+0x160>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d146      	bne.n	8003a4e <HAL_UART_MspInit+0xbe>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80039c0:	f04f 0204 	mov.w	r2, #4
 80039c4:	f04f 0300 	mov.w	r3, #0
 80039c8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 80039cc:	2300      	movs	r3, #0
 80039ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039d2:	f107 0318 	add.w	r3, r7, #24
 80039d6:	4618      	mov	r0, r3
 80039d8:	f007 fdc4 	bl	800b564 <HAL_RCCEx_PeriphCLKConfig>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80039e2:	f7ff fd11 	bl	8003408 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80039e6:	4b43      	ldr	r3, [pc, #268]	@ (8003af4 <HAL_UART_MspInit+0x164>)
 80039e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80039ec:	4a41      	ldr	r2, [pc, #260]	@ (8003af4 <HAL_UART_MspInit+0x164>)
 80039ee:	f043 0308 	orr.w	r3, r3, #8
 80039f2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80039f6:	4b3f      	ldr	r3, [pc, #252]	@ (8003af4 <HAL_UART_MspInit+0x164>)
 80039f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80039fc:	f003 0308 	and.w	r3, r3, #8
 8003a00:	617b      	str	r3, [r7, #20]
 8003a02:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a04:	4b3b      	ldr	r3, [pc, #236]	@ (8003af4 <HAL_UART_MspInit+0x164>)
 8003a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a0a:	4a3a      	ldr	r2, [pc, #232]	@ (8003af4 <HAL_UART_MspInit+0x164>)
 8003a0c:	f043 0302 	orr.w	r3, r3, #2
 8003a10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003a14:	4b37      	ldr	r3, [pc, #220]	@ (8003af4 <HAL_UART_MspInit+0x164>)
 8003a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	613b      	str	r3, [r7, #16]
 8003a20:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB6     ------> LPUART1_TX
    PB7     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003a22:	23c0      	movs	r3, #192	@ 0xc0
 8003a24:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a28:	2302      	movs	r3, #2
 8003a2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a34:	2300      	movs	r3, #0
 8003a36:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART;
 8003a3a:	2308      	movs	r3, #8
 8003a3c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a40:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003a44:	4619      	mov	r1, r3
 8003a46:	482c      	ldr	r0, [pc, #176]	@ (8003af8 <HAL_UART_MspInit+0x168>)
 8003a48:	f006 fbf8 	bl	800a23c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003a4c:	e04b      	b.n	8003ae6 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART3)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a2a      	ldr	r2, [pc, #168]	@ (8003afc <HAL_UART_MspInit+0x16c>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d146      	bne.n	8003ae6 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003a58:	f04f 0202 	mov.w	r2, #2
 8003a5c:	f04f 0300 	mov.w	r3, #0
 8003a60:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003a64:	2300      	movs	r3, #0
 8003a66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a6a:	f107 0318 	add.w	r3, r7, #24
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f007 fd78 	bl	800b564 <HAL_RCCEx_PeriphCLKConfig>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <HAL_UART_MspInit+0xee>
      Error_Handler();
 8003a7a:	f7ff fcc5 	bl	8003408 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003a7e:	4b1d      	ldr	r3, [pc, #116]	@ (8003af4 <HAL_UART_MspInit+0x164>)
 8003a80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003a84:	4a1b      	ldr	r2, [pc, #108]	@ (8003af4 <HAL_UART_MspInit+0x164>)
 8003a86:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a8a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003a8e:	4b19      	ldr	r3, [pc, #100]	@ (8003af4 <HAL_UART_MspInit+0x164>)
 8003a90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003a94:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a98:	60fb      	str	r3, [r7, #12]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a9c:	4b15      	ldr	r3, [pc, #84]	@ (8003af4 <HAL_UART_MspInit+0x164>)
 8003a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003aa2:	4a14      	ldr	r2, [pc, #80]	@ (8003af4 <HAL_UART_MspInit+0x164>)
 8003aa4:	f043 0308 	orr.w	r3, r3, #8
 8003aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003aac:	4b11      	ldr	r3, [pc, #68]	@ (8003af4 <HAL_UART_MspInit+0x164>)
 8003aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ab2:	f003 0308 	and.w	r3, r3, #8
 8003ab6:	60bb      	str	r3, [r7, #8]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8003aba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003abe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003ad4:	2307      	movs	r3, #7
 8003ad6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ada:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003ade:	4619      	mov	r1, r3
 8003ae0:	4807      	ldr	r0, [pc, #28]	@ (8003b00 <HAL_UART_MspInit+0x170>)
 8003ae2:	f006 fbab 	bl	800a23c <HAL_GPIO_Init>
}
 8003ae6:	bf00      	nop
 8003ae8:	37e8      	adds	r7, #232	@ 0xe8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	58000c00 	.word	0x58000c00
 8003af4:	58024400 	.word	0x58024400
 8003af8:	58020400 	.word	0x58020400
 8003afc:	40004800 	.word	0x40004800
 8003b00:	58020c00 	.word	0x58020c00

08003b04 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b087      	sub	sp, #28
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a20      	ldr	r2, [pc, #128]	@ (8003b94 <HAL_TIM_PWM_MspInit+0x90>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d10f      	bne.n	8003b36 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003b16:	4b20      	ldr	r3, [pc, #128]	@ (8003b98 <HAL_TIM_PWM_MspInit+0x94>)
 8003b18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b1c:	4a1e      	ldr	r2, [pc, #120]	@ (8003b98 <HAL_TIM_PWM_MspInit+0x94>)
 8003b1e:	f043 0301 	orr.w	r3, r3, #1
 8003b22:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003b26:	4b1c      	ldr	r3, [pc, #112]	@ (8003b98 <HAL_TIM_PWM_MspInit+0x94>)
 8003b28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b2c:	f003 0301 	and.w	r3, r3, #1
 8003b30:	617b      	str	r3, [r7, #20]
 8003b32:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003b34:	e028      	b.n	8003b88 <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM2)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b3e:	d10f      	bne.n	8003b60 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b40:	4b15      	ldr	r3, [pc, #84]	@ (8003b98 <HAL_TIM_PWM_MspInit+0x94>)
 8003b42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003b46:	4a14      	ldr	r2, [pc, #80]	@ (8003b98 <HAL_TIM_PWM_MspInit+0x94>)
 8003b48:	f043 0301 	orr.w	r3, r3, #1
 8003b4c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003b50:	4b11      	ldr	r3, [pc, #68]	@ (8003b98 <HAL_TIM_PWM_MspInit+0x94>)
 8003b52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	613b      	str	r3, [r7, #16]
 8003b5c:	693b      	ldr	r3, [r7, #16]
}
 8003b5e:	e013      	b.n	8003b88 <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM4)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a0d      	ldr	r2, [pc, #52]	@ (8003b9c <HAL_TIM_PWM_MspInit+0x98>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d10e      	bne.n	8003b88 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b98 <HAL_TIM_PWM_MspInit+0x94>)
 8003b6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003b70:	4a09      	ldr	r2, [pc, #36]	@ (8003b98 <HAL_TIM_PWM_MspInit+0x94>)
 8003b72:	f043 0304 	orr.w	r3, r3, #4
 8003b76:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003b7a:	4b07      	ldr	r3, [pc, #28]	@ (8003b98 <HAL_TIM_PWM_MspInit+0x94>)
 8003b7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003b80:	f003 0304 	and.w	r3, r3, #4
 8003b84:	60fb      	str	r3, [r7, #12]
 8003b86:	68fb      	ldr	r3, [r7, #12]
}
 8003b88:	bf00      	nop
 8003b8a:	371c      	adds	r7, #28
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr
 8003b94:	40010000 	.word	0x40010000
 8003b98:	58024400 	.word	0x58024400
 8003b9c:	40000800 	.word	0x40000800

08003ba0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b08c      	sub	sp, #48	@ 0x30
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ba8:	f107 031c 	add.w	r3, r7, #28
 8003bac:	2200      	movs	r2, #0
 8003bae:	601a      	str	r2, [r3, #0]
 8003bb0:	605a      	str	r2, [r3, #4]
 8003bb2:	609a      	str	r2, [r3, #8]
 8003bb4:	60da      	str	r2, [r3, #12]
 8003bb6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a34      	ldr	r2, [pc, #208]	@ (8003c90 <HAL_TIM_IC_MspInit+0xf0>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d12e      	bne.n	8003c20 <HAL_TIM_IC_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003bc2:	4b34      	ldr	r3, [pc, #208]	@ (8003c94 <HAL_TIM_IC_MspInit+0xf4>)
 8003bc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003bc8:	4a32      	ldr	r2, [pc, #200]	@ (8003c94 <HAL_TIM_IC_MspInit+0xf4>)
 8003bca:	f043 0302 	orr.w	r3, r3, #2
 8003bce:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003bd2:	4b30      	ldr	r3, [pc, #192]	@ (8003c94 <HAL_TIM_IC_MspInit+0xf4>)
 8003bd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	61bb      	str	r3, [r7, #24]
 8003bde:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003be0:	4b2c      	ldr	r3, [pc, #176]	@ (8003c94 <HAL_TIM_IC_MspInit+0xf4>)
 8003be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003be6:	4a2b      	ldr	r2, [pc, #172]	@ (8003c94 <HAL_TIM_IC_MspInit+0xf4>)
 8003be8:	f043 0304 	orr.w	r3, r3, #4
 8003bec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003bf0:	4b28      	ldr	r3, [pc, #160]	@ (8003c94 <HAL_TIM_IC_MspInit+0xf4>)
 8003bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003bf6:	f003 0304 	and.w	r3, r3, #4
 8003bfa:	617b      	str	r3, [r7, #20]
 8003bfc:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003bfe:	2340      	movs	r3, #64	@ 0x40
 8003c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c02:	2302      	movs	r3, #2
 8003c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c06:	2301      	movs	r3, #1
 8003c08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003c0e:	2302      	movs	r3, #2
 8003c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c12:	f107 031c 	add.w	r3, r7, #28
 8003c16:	4619      	mov	r1, r3
 8003c18:	481f      	ldr	r0, [pc, #124]	@ (8003c98 <HAL_TIM_IC_MspInit+0xf8>)
 8003c1a:	f006 fb0f 	bl	800a23c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8003c1e:	e032      	b.n	8003c86 <HAL_TIM_IC_MspInit+0xe6>
  else if(htim_ic->Instance==TIM15)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a1d      	ldr	r2, [pc, #116]	@ (8003c9c <HAL_TIM_IC_MspInit+0xfc>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d12d      	bne.n	8003c86 <HAL_TIM_IC_MspInit+0xe6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003c2a:	4b1a      	ldr	r3, [pc, #104]	@ (8003c94 <HAL_TIM_IC_MspInit+0xf4>)
 8003c2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c30:	4a18      	ldr	r2, [pc, #96]	@ (8003c94 <HAL_TIM_IC_MspInit+0xf4>)
 8003c32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c36:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003c3a:	4b16      	ldr	r3, [pc, #88]	@ (8003c94 <HAL_TIM_IC_MspInit+0xf4>)
 8003c3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c44:	613b      	str	r3, [r7, #16]
 8003c46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c48:	4b12      	ldr	r3, [pc, #72]	@ (8003c94 <HAL_TIM_IC_MspInit+0xf4>)
 8003c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c4e:	4a11      	ldr	r2, [pc, #68]	@ (8003c94 <HAL_TIM_IC_MspInit+0xf4>)
 8003c50:	f043 0310 	orr.w	r3, r3, #16
 8003c54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003c58:	4b0e      	ldr	r3, [pc, #56]	@ (8003c94 <HAL_TIM_IC_MspInit+0xf4>)
 8003c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c5e:	f003 0310 	and.w	r3, r3, #16
 8003c62:	60fb      	str	r3, [r7, #12]
 8003c64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003c66:	2320      	movs	r3, #32
 8003c68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c72:	2300      	movs	r3, #0
 8003c74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8003c76:	2304      	movs	r3, #4
 8003c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c7a:	f107 031c 	add.w	r3, r7, #28
 8003c7e:	4619      	mov	r1, r3
 8003c80:	4807      	ldr	r0, [pc, #28]	@ (8003ca0 <HAL_TIM_IC_MspInit+0x100>)
 8003c82:	f006 fadb 	bl	800a23c <HAL_GPIO_Init>
}
 8003c86:	bf00      	nop
 8003c88:	3730      	adds	r7, #48	@ 0x30
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	40000400 	.word	0x40000400
 8003c94:	58024400 	.word	0x58024400
 8003c98:	58020800 	.word	0x58020800
 8003c9c:	40014000 	.word	0x40014000
 8003ca0:	58021000 	.word	0x58021000

08003ca4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b08a      	sub	sp, #40	@ 0x28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cac:	f107 0314 	add.w	r3, r7, #20
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	605a      	str	r2, [r3, #4]
 8003cb6:	609a      	str	r2, [r3, #8]
 8003cb8:	60da      	str	r2, [r3, #12]
 8003cba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a39      	ldr	r2, [pc, #228]	@ (8003da8 <HAL_TIM_MspPostInit+0x104>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d120      	bne.n	8003d08 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003cc6:	4b39      	ldr	r3, [pc, #228]	@ (8003dac <HAL_TIM_MspPostInit+0x108>)
 8003cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ccc:	4a37      	ldr	r2, [pc, #220]	@ (8003dac <HAL_TIM_MspPostInit+0x108>)
 8003cce:	f043 0310 	orr.w	r3, r3, #16
 8003cd2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003cd6:	4b35      	ldr	r3, [pc, #212]	@ (8003dac <HAL_TIM_MspPostInit+0x108>)
 8003cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003cdc:	f003 0310 	and.w	r3, r3, #16
 8003ce0:	613b      	str	r3, [r7, #16]
 8003ce2:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE8     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = TIM1_CH1N_Pin|TIM1_CH1_Pin;
 8003ce4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cea:	2302      	movs	r3, #2
 8003cec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003cfa:	f107 0314 	add.w	r3, r7, #20
 8003cfe:	4619      	mov	r1, r3
 8003d00:	482b      	ldr	r0, [pc, #172]	@ (8003db0 <HAL_TIM_MspPostInit+0x10c>)
 8003d02:	f006 fa9b 	bl	800a23c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003d06:	e04a      	b.n	8003d9e <HAL_TIM_MspPostInit+0xfa>
  else if(htim->Instance==TIM2)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d10:	d120      	bne.n	8003d54 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d12:	4b26      	ldr	r3, [pc, #152]	@ (8003dac <HAL_TIM_MspPostInit+0x108>)
 8003d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d18:	4a24      	ldr	r2, [pc, #144]	@ (8003dac <HAL_TIM_MspPostInit+0x108>)
 8003d1a:	f043 0301 	orr.w	r3, r3, #1
 8003d1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003d22:	4b22      	ldr	r3, [pc, #136]	@ (8003dac <HAL_TIM_MspPostInit+0x108>)
 8003d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	60fb      	str	r3, [r7, #12]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003d30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d36:	2312      	movs	r3, #18
 8003d38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003d42:	2301      	movs	r3, #1
 8003d44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d46:	f107 0314 	add.w	r3, r7, #20
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	4819      	ldr	r0, [pc, #100]	@ (8003db4 <HAL_TIM_MspPostInit+0x110>)
 8003d4e:	f006 fa75 	bl	800a23c <HAL_GPIO_Init>
}
 8003d52:	e024      	b.n	8003d9e <HAL_TIM_MspPostInit+0xfa>
  else if(htim->Instance==TIM4)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a17      	ldr	r2, [pc, #92]	@ (8003db8 <HAL_TIM_MspPostInit+0x114>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d11f      	bne.n	8003d9e <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d5e:	4b13      	ldr	r3, [pc, #76]	@ (8003dac <HAL_TIM_MspPostInit+0x108>)
 8003d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d64:	4a11      	ldr	r2, [pc, #68]	@ (8003dac <HAL_TIM_MspPostInit+0x108>)
 8003d66:	f043 0308 	orr.w	r3, r3, #8
 8003d6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003d6e:	4b0f      	ldr	r3, [pc, #60]	@ (8003dac <HAL_TIM_MspPostInit+0x108>)
 8003d70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d74:	f003 0308 	and.w	r3, r3, #8
 8003d78:	60bb      	str	r3, [r7, #8]
 8003d7a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003d7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d82:	2312      	movs	r3, #18
 8003d84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d86:	2300      	movs	r3, #0
 8003d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003d8e:	2302      	movs	r3, #2
 8003d90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d92:	f107 0314 	add.w	r3, r7, #20
 8003d96:	4619      	mov	r1, r3
 8003d98:	4808      	ldr	r0, [pc, #32]	@ (8003dbc <HAL_TIM_MspPostInit+0x118>)
 8003d9a:	f006 fa4f 	bl	800a23c <HAL_GPIO_Init>
}
 8003d9e:	bf00      	nop
 8003da0:	3728      	adds	r7, #40	@ 0x28
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	40010000 	.word	0x40010000
 8003dac:	58024400 	.word	0x58024400
 8003db0:	58021000 	.word	0x58021000
 8003db4:	58020000 	.word	0x58020000
 8003db8:	40000800 	.word	0x40000800
 8003dbc:	58020c00 	.word	0x58020c00

08003dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003dc4:	bf00      	nop
 8003dc6:	e7fd      	b.n	8003dc4 <NMI_Handler+0x4>

08003dc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003dcc:	bf00      	nop
 8003dce:	e7fd      	b.n	8003dcc <HardFault_Handler+0x4>

08003dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003dd4:	bf00      	nop
 8003dd6:	e7fd      	b.n	8003dd4 <MemManage_Handler+0x4>

08003dd8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ddc:	bf00      	nop
 8003dde:	e7fd      	b.n	8003ddc <BusFault_Handler+0x4>

08003de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003de4:	bf00      	nop
 8003de6:	e7fd      	b.n	8003de4 <UsageFault_Handler+0x4>

08003de8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003dec:	bf00      	nop
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003df6:	b480      	push	{r7}
 8003df8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003dfa:	bf00      	nop
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e08:	bf00      	nop
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e16:	f000 f97b 	bl	8004110 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e1a:	bf00      	nop
 8003e1c:	bd80      	pop	{r7, pc}
	...

08003e20 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003e24:	4802      	ldr	r0, [pc, #8]	@ (8003e30 <DMA1_Stream1_IRQHandler+0x10>)
 8003e26:	f004 f8f5 	bl	8008014 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003e2a:	bf00      	nop
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	24000ad0 	.word	0x24000ad0

08003e34 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003e38:	4802      	ldr	r0, [pc, #8]	@ (8003e44 <DMA1_Stream2_IRQHandler+0x10>)
 8003e3a:	f004 f8eb 	bl	8008014 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003e3e:	bf00      	nop
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	24000a58 	.word	0x24000a58

08003e48 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003e4c:	4803      	ldr	r0, [pc, #12]	@ (8003e5c <ADC_IRQHandler+0x14>)
 8003e4e:	f001 f8d9 	bl	8005004 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8003e52:	4803      	ldr	r0, [pc, #12]	@ (8003e60 <ADC_IRQHandler+0x18>)
 8003e54:	f001 f8d6 	bl	8005004 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003e58:	bf00      	nop
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	24000908 	.word	0x24000908
 8003e60:	24000978 	.word	0x24000978

08003e64 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INP_COMP_IRQ_Pin);
 8003e68:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003e6c:	f006 fbbf 	bl	800a5ee <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(POWER_OFF_IRQ_Pin);
 8003e70:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003e74:	f006 fbbb 	bl	800a5ee <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003e78:	bf00      	nop
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b086      	sub	sp, #24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e84:	4a14      	ldr	r2, [pc, #80]	@ (8003ed8 <_sbrk+0x5c>)
 8003e86:	4b15      	ldr	r3, [pc, #84]	@ (8003edc <_sbrk+0x60>)
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e90:	4b13      	ldr	r3, [pc, #76]	@ (8003ee0 <_sbrk+0x64>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d102      	bne.n	8003e9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e98:	4b11      	ldr	r3, [pc, #68]	@ (8003ee0 <_sbrk+0x64>)
 8003e9a:	4a12      	ldr	r2, [pc, #72]	@ (8003ee4 <_sbrk+0x68>)
 8003e9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e9e:	4b10      	ldr	r3, [pc, #64]	@ (8003ee0 <_sbrk+0x64>)
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d207      	bcs.n	8003ebc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003eac:	f00c ff06 	bl	8010cbc <__errno>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	220c      	movs	r2, #12
 8003eb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003eb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003eba:	e009      	b.n	8003ed0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ebc:	4b08      	ldr	r3, [pc, #32]	@ (8003ee0 <_sbrk+0x64>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ec2:	4b07      	ldr	r3, [pc, #28]	@ (8003ee0 <_sbrk+0x64>)
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4413      	add	r3, r2
 8003eca:	4a05      	ldr	r2, [pc, #20]	@ (8003ee0 <_sbrk+0x64>)
 8003ecc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003ece:	68fb      	ldr	r3, [r7, #12]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3718      	adds	r7, #24
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	24050000 	.word	0x24050000
 8003edc:	00000400 	.word	0x00000400
 8003ee0:	24000ed4 	.word	0x24000ed4
 8003ee4:	24001040 	.word	0x24001040

08003ee8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003eec:	4b32      	ldr	r3, [pc, #200]	@ (8003fb8 <SystemInit+0xd0>)
 8003eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ef2:	4a31      	ldr	r2, [pc, #196]	@ (8003fb8 <SystemInit+0xd0>)
 8003ef4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003ef8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003efc:	4b2f      	ldr	r3, [pc, #188]	@ (8003fbc <SystemInit+0xd4>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 030f 	and.w	r3, r3, #15
 8003f04:	2b06      	cmp	r3, #6
 8003f06:	d807      	bhi.n	8003f18 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003f08:	4b2c      	ldr	r3, [pc, #176]	@ (8003fbc <SystemInit+0xd4>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f023 030f 	bic.w	r3, r3, #15
 8003f10:	4a2a      	ldr	r2, [pc, #168]	@ (8003fbc <SystemInit+0xd4>)
 8003f12:	f043 0307 	orr.w	r3, r3, #7
 8003f16:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003f18:	4b29      	ldr	r3, [pc, #164]	@ (8003fc0 <SystemInit+0xd8>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a28      	ldr	r2, [pc, #160]	@ (8003fc0 <SystemInit+0xd8>)
 8003f1e:	f043 0301 	orr.w	r3, r3, #1
 8003f22:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003f24:	4b26      	ldr	r3, [pc, #152]	@ (8003fc0 <SystemInit+0xd8>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003f2a:	4b25      	ldr	r3, [pc, #148]	@ (8003fc0 <SystemInit+0xd8>)
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	4924      	ldr	r1, [pc, #144]	@ (8003fc0 <SystemInit+0xd8>)
 8003f30:	4b24      	ldr	r3, [pc, #144]	@ (8003fc4 <SystemInit+0xdc>)
 8003f32:	4013      	ands	r3, r2
 8003f34:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003f36:	4b21      	ldr	r3, [pc, #132]	@ (8003fbc <SystemInit+0xd4>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0308 	and.w	r3, r3, #8
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d007      	beq.n	8003f52 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003f42:	4b1e      	ldr	r3, [pc, #120]	@ (8003fbc <SystemInit+0xd4>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f023 030f 	bic.w	r3, r3, #15
 8003f4a:	4a1c      	ldr	r2, [pc, #112]	@ (8003fbc <SystemInit+0xd4>)
 8003f4c:	f043 0307 	orr.w	r3, r3, #7
 8003f50:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003f52:	4b1b      	ldr	r3, [pc, #108]	@ (8003fc0 <SystemInit+0xd8>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003f58:	4b19      	ldr	r3, [pc, #100]	@ (8003fc0 <SystemInit+0xd8>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003f5e:	4b18      	ldr	r3, [pc, #96]	@ (8003fc0 <SystemInit+0xd8>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003f64:	4b16      	ldr	r3, [pc, #88]	@ (8003fc0 <SystemInit+0xd8>)
 8003f66:	4a18      	ldr	r2, [pc, #96]	@ (8003fc8 <SystemInit+0xe0>)
 8003f68:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003f6a:	4b15      	ldr	r3, [pc, #84]	@ (8003fc0 <SystemInit+0xd8>)
 8003f6c:	4a17      	ldr	r2, [pc, #92]	@ (8003fcc <SystemInit+0xe4>)
 8003f6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003f70:	4b13      	ldr	r3, [pc, #76]	@ (8003fc0 <SystemInit+0xd8>)
 8003f72:	4a17      	ldr	r2, [pc, #92]	@ (8003fd0 <SystemInit+0xe8>)
 8003f74:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003f76:	4b12      	ldr	r3, [pc, #72]	@ (8003fc0 <SystemInit+0xd8>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003f7c:	4b10      	ldr	r3, [pc, #64]	@ (8003fc0 <SystemInit+0xd8>)
 8003f7e:	4a14      	ldr	r2, [pc, #80]	@ (8003fd0 <SystemInit+0xe8>)
 8003f80:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003f82:	4b0f      	ldr	r3, [pc, #60]	@ (8003fc0 <SystemInit+0xd8>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003f88:	4b0d      	ldr	r3, [pc, #52]	@ (8003fc0 <SystemInit+0xd8>)
 8003f8a:	4a11      	ldr	r2, [pc, #68]	@ (8003fd0 <SystemInit+0xe8>)
 8003f8c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8003fc0 <SystemInit+0xd8>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003f94:	4b0a      	ldr	r3, [pc, #40]	@ (8003fc0 <SystemInit+0xd8>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a09      	ldr	r2, [pc, #36]	@ (8003fc0 <SystemInit+0xd8>)
 8003f9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f9e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003fa0:	4b07      	ldr	r3, [pc, #28]	@ (8003fc0 <SystemInit+0xd8>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8003fd4 <SystemInit+0xec>)
 8003fa8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003fac:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003fae:	bf00      	nop
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr
 8003fb8:	e000ed00 	.word	0xe000ed00
 8003fbc:	52002000 	.word	0x52002000
 8003fc0:	58024400 	.word	0x58024400
 8003fc4:	eaf6ed7f 	.word	0xeaf6ed7f
 8003fc8:	02020200 	.word	0x02020200
 8003fcc:	01ff0000 	.word	0x01ff0000
 8003fd0:	01010280 	.word	0x01010280
 8003fd4:	52004000 	.word	0x52004000

08003fd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003fd8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004010 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003fdc:	f7ff ff84 	bl	8003ee8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003fe0:	480c      	ldr	r0, [pc, #48]	@ (8004014 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003fe2:	490d      	ldr	r1, [pc, #52]	@ (8004018 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003fe4:	4a0d      	ldr	r2, [pc, #52]	@ (800401c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003fe6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fe8:	e002      	b.n	8003ff0 <LoopCopyDataInit>

08003fea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fee:	3304      	adds	r3, #4

08003ff0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ff0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ff2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ff4:	d3f9      	bcc.n	8003fea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ff6:	4a0a      	ldr	r2, [pc, #40]	@ (8004020 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003ff8:	4c0a      	ldr	r4, [pc, #40]	@ (8004024 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003ffa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ffc:	e001      	b.n	8004002 <LoopFillZerobss>

08003ffe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ffe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004000:	3204      	adds	r2, #4

08004002 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004002:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004004:	d3fb      	bcc.n	8003ffe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004006:	f00c fe5f 	bl	8010cc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800400a:	f7fe fa37 	bl	800247c <main>
  bx  lr
 800400e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004010:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8004014:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004018:	24000098 	.word	0x24000098
  ldr r2, =_sidata
 800401c:	080120b8 	.word	0x080120b8
  ldr r2, =_sbss
 8004020:	24000158 	.word	0x24000158
  ldr r4, =_ebss
 8004024:	24001040 	.word	0x24001040

08004028 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004028:	e7fe      	b.n	8004028 <ADC3_IRQHandler>
	...

0800402c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004032:	2003      	movs	r0, #3
 8004034:	f003 f9ec 	bl	8007410 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004038:	f007 f8be 	bl	800b1b8 <HAL_RCC_GetSysClockFreq>
 800403c:	4602      	mov	r2, r0
 800403e:	4b15      	ldr	r3, [pc, #84]	@ (8004094 <HAL_Init+0x68>)
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	0a1b      	lsrs	r3, r3, #8
 8004044:	f003 030f 	and.w	r3, r3, #15
 8004048:	4913      	ldr	r1, [pc, #76]	@ (8004098 <HAL_Init+0x6c>)
 800404a:	5ccb      	ldrb	r3, [r1, r3]
 800404c:	f003 031f 	and.w	r3, r3, #31
 8004050:	fa22 f303 	lsr.w	r3, r2, r3
 8004054:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004056:	4b0f      	ldr	r3, [pc, #60]	@ (8004094 <HAL_Init+0x68>)
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	4a0e      	ldr	r2, [pc, #56]	@ (8004098 <HAL_Init+0x6c>)
 8004060:	5cd3      	ldrb	r3, [r2, r3]
 8004062:	f003 031f 	and.w	r3, r3, #31
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	fa22 f303 	lsr.w	r3, r2, r3
 800406c:	4a0b      	ldr	r2, [pc, #44]	@ (800409c <HAL_Init+0x70>)
 800406e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004070:	4a0b      	ldr	r2, [pc, #44]	@ (80040a0 <HAL_Init+0x74>)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004076:	2000      	movs	r0, #0
 8004078:	f000 f814 	bl	80040a4 <HAL_InitTick>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e002      	b.n	800408c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004086:	f7ff f9c5 	bl	8003414 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3708      	adds	r7, #8
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	58024400 	.word	0x58024400
 8004098:	08011f0c 	.word	0x08011f0c
 800409c:	2400003c 	.word	0x2400003c
 80040a0:	24000038 	.word	0x24000038

080040a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80040ac:	4b15      	ldr	r3, [pc, #84]	@ (8004104 <HAL_InitTick+0x60>)
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d101      	bne.n	80040b8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e021      	b.n	80040fc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80040b8:	4b13      	ldr	r3, [pc, #76]	@ (8004108 <HAL_InitTick+0x64>)
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	4b11      	ldr	r3, [pc, #68]	@ (8004104 <HAL_InitTick+0x60>)
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	4619      	mov	r1, r3
 80040c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80040c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80040ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ce:	4618      	mov	r0, r3
 80040d0:	f003 f9d1 	bl	8007476 <HAL_SYSTICK_Config>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e00e      	b.n	80040fc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b0f      	cmp	r3, #15
 80040e2:	d80a      	bhi.n	80040fa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040e4:	2200      	movs	r2, #0
 80040e6:	6879      	ldr	r1, [r7, #4]
 80040e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80040ec:	f003 f99b 	bl	8007426 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040f0:	4a06      	ldr	r2, [pc, #24]	@ (800410c <HAL_InitTick+0x68>)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
 80040f8:	e000      	b.n	80040fc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3708      	adds	r7, #8
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	24000044 	.word	0x24000044
 8004108:	24000038 	.word	0x24000038
 800410c:	24000040 	.word	0x24000040

08004110 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004114:	4b06      	ldr	r3, [pc, #24]	@ (8004130 <HAL_IncTick+0x20>)
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	461a      	mov	r2, r3
 800411a:	4b06      	ldr	r3, [pc, #24]	@ (8004134 <HAL_IncTick+0x24>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4413      	add	r3, r2
 8004120:	4a04      	ldr	r2, [pc, #16]	@ (8004134 <HAL_IncTick+0x24>)
 8004122:	6013      	str	r3, [r2, #0]
}
 8004124:	bf00      	nop
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	24000044 	.word	0x24000044
 8004134:	24000ed8 	.word	0x24000ed8

08004138 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0
  return uwTick;
 800413c:	4b03      	ldr	r3, [pc, #12]	@ (800414c <HAL_GetTick+0x14>)
 800413e:	681b      	ldr	r3, [r3, #0]
}
 8004140:	4618      	mov	r0, r3
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	24000ed8 	.word	0x24000ed8

08004150 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004158:	f7ff ffee 	bl	8004138 <HAL_GetTick>
 800415c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004168:	d005      	beq.n	8004176 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800416a:	4b0a      	ldr	r3, [pc, #40]	@ (8004194 <HAL_Delay+0x44>)
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	461a      	mov	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4413      	add	r3, r2
 8004174:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004176:	bf00      	nop
 8004178:	f7ff ffde 	bl	8004138 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	429a      	cmp	r2, r3
 8004186:	d8f7      	bhi.n	8004178 <HAL_Delay+0x28>
  {
  }
}
 8004188:	bf00      	nop
 800418a:	bf00      	nop
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	24000044 	.word	0x24000044

08004198 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80041a0:	4b06      	ldr	r3, [pc, #24]	@ (80041bc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80041a8:	4904      	ldr	r1, [pc, #16]	@ (80041bc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	604b      	str	r3, [r1, #4]
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	58000400 	.word	0x58000400

080041c0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80041ca:	4b07      	ldr	r3, [pc, #28]	@ (80041e8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	43db      	mvns	r3, r3
 80041d2:	401a      	ands	r2, r3
 80041d4:	4904      	ldr	r1, [pc, #16]	@ (80041e8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	4313      	orrs	r3, r2
 80041da:	604b      	str	r3, [r1, #4]
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr
 80041e8:	58000400 	.word	0x58000400

080041ec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	431a      	orrs	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	609a      	str	r2, [r3, #8]
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004212:	b480      	push	{r7}
 8004214:	b083      	sub	sp, #12
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
 800421a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	431a      	orrs	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	609a      	str	r2, [r3, #8]
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004248:	4618      	mov	r0, r3
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004254:	b480      	push	{r7}
 8004256:	b087      	sub	sp, #28
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
 8004260:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	3360      	adds	r3, #96	@ 0x60
 8004266:	461a      	mov	r2, r3
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4413      	add	r3, r2
 800426e:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4a10      	ldr	r2, [pc, #64]	@ (80042b4 <LL_ADC_SetOffset+0x60>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d10b      	bne.n	8004290 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	4313      	orrs	r3, r2
 8004286:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800428e:	e00b      	b.n	80042a8 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	430b      	orrs	r3, r1
 80042a2:	431a      	orrs	r2, r3
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	601a      	str	r2, [r3, #0]
}
 80042a8:	bf00      	nop
 80042aa:	371c      	adds	r7, #28
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr
 80042b4:	58026000 	.word	0x58026000

080042b8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	3360      	adds	r3, #96	@ 0x60
 80042c6:	461a      	mov	r2, r3
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4413      	add	r3, r2
 80042ce:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	f003 031f 	and.w	r3, r3, #31
 80042fe:	6879      	ldr	r1, [r7, #4]
 8004300:	fa01 f303 	lsl.w	r3, r1, r3
 8004304:	431a      	orrs	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	611a      	str	r2, [r3, #16]
}
 800430a:	bf00      	nop
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
	...

08004318 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004318:	b480      	push	{r7}
 800431a:	b087      	sub	sp, #28
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4a0c      	ldr	r2, [pc, #48]	@ (8004358 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d00e      	beq.n	800434a <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	3360      	adds	r3, #96	@ 0x60
 8004330:	461a      	mov	r2, r3
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	4413      	add	r3, r2
 8004338:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	431a      	orrs	r2, r3
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	601a      	str	r2, [r3, #0]
  }
}
 800434a:	bf00      	nop
 800434c:	371c      	adds	r7, #28
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	58026000 	.word	0x58026000

0800435c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800435c:	b480      	push	{r7}
 800435e:	b087      	sub	sp, #28
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	4a0c      	ldr	r2, [pc, #48]	@ (800439c <LL_ADC_SetOffsetSaturation+0x40>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d10e      	bne.n	800438e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	3360      	adds	r3, #96	@ 0x60
 8004374:	461a      	mov	r2, r3
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	4413      	add	r3, r2
 800437c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	431a      	orrs	r2, r3
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800438e:	bf00      	nop
 8004390:	371c      	adds	r7, #28
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	58026000 	.word	0x58026000

080043a0 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b087      	sub	sp, #28
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4a0c      	ldr	r2, [pc, #48]	@ (80043e0 <LL_ADC_SetOffsetSign+0x40>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d10e      	bne.n	80043d2 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	3360      	adds	r3, #96	@ 0x60
 80043b8:	461a      	mov	r2, r3
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4413      	add	r3, r2
 80043c0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	431a      	orrs	r2, r3
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80043d2:	bf00      	nop
 80043d4:	371c      	adds	r7, #28
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	58026000 	.word	0x58026000

080043e4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b087      	sub	sp, #28
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	3360      	adds	r3, #96	@ 0x60
 80043f4:	461a      	mov	r2, r3
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4413      	add	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	4a0c      	ldr	r2, [pc, #48]	@ (8004434 <LL_ADC_SetOffsetState+0x50>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d108      	bne.n	8004418 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	431a      	orrs	r2, r3
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8004416:	e007      	b.n	8004428 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	431a      	orrs	r2, r3
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	601a      	str	r2, [r3, #0]
}
 8004428:	bf00      	nop
 800442a:	371c      	adds	r7, #28
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr
 8004434:	58026000 	.word	0x58026000

08004438 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004448:	2b00      	cmp	r3, #0
 800444a:	d101      	bne.n	8004450 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800444c:	2301      	movs	r3, #1
 800444e:	e000      	b.n	8004452 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr

0800445e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800445e:	b480      	push	{r7}
 8004460:	b087      	sub	sp, #28
 8004462:	af00      	add	r7, sp, #0
 8004464:	60f8      	str	r0, [r7, #12]
 8004466:	60b9      	str	r1, [r7, #8]
 8004468:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	3330      	adds	r3, #48	@ 0x30
 800446e:	461a      	mov	r2, r3
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	0a1b      	lsrs	r3, r3, #8
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	f003 030c 	and.w	r3, r3, #12
 800447a:	4413      	add	r3, r2
 800447c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	f003 031f 	and.w	r3, r3, #31
 8004488:	211f      	movs	r1, #31
 800448a:	fa01 f303 	lsl.w	r3, r1, r3
 800448e:	43db      	mvns	r3, r3
 8004490:	401a      	ands	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	0e9b      	lsrs	r3, r3, #26
 8004496:	f003 011f 	and.w	r1, r3, #31
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	f003 031f 	and.w	r3, r3, #31
 80044a0:	fa01 f303 	lsl.w	r3, r1, r3
 80044a4:	431a      	orrs	r2, r3
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80044aa:	bf00      	nop
 80044ac:	371c      	adds	r7, #28
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b083      	sub	sp, #12
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
 80044be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	f023 0203 	bic.w	r2, r3, #3
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	431a      	orrs	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	60da      	str	r2, [r3, #12]
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f043 0201 	orr.w	r2, r3, #1
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	60da      	str	r2, [r3, #12]
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a08      	ldr	r2, [pc, #32]	@ (800452c <LL_ADC_REG_SetDMATransferMode+0x30>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d107      	bne.n	800451e <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	f023 0203 	bic.w	r2, r3, #3
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	431a      	orrs	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	60da      	str	r2, [r3, #12]
  }
}
 800451e:	bf00      	nop
 8004520:	370c      	adds	r7, #12
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	58026000 	.word	0x58026000

08004530 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800453c:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8004540:	2b00      	cmp	r3, #0
 8004542:	d101      	bne.n	8004548 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8004544:	2301      	movs	r3, #1
 8004546:	e000      	b.n	800454a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	370c      	adds	r7, #12
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr

08004556 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004556:	b480      	push	{r7}
 8004558:	b087      	sub	sp, #28
 800455a:	af00      	add	r7, sp, #0
 800455c:	60f8      	str	r0, [r7, #12]
 800455e:	60b9      	str	r1, [r7, #8]
 8004560:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	3314      	adds	r3, #20
 8004566:	461a      	mov	r2, r3
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	0e5b      	lsrs	r3, r3, #25
 800456c:	009b      	lsls	r3, r3, #2
 800456e:	f003 0304 	and.w	r3, r3, #4
 8004572:	4413      	add	r3, r2
 8004574:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	0d1b      	lsrs	r3, r3, #20
 800457e:	f003 031f 	and.w	r3, r3, #31
 8004582:	2107      	movs	r1, #7
 8004584:	fa01 f303 	lsl.w	r3, r1, r3
 8004588:	43db      	mvns	r3, r3
 800458a:	401a      	ands	r2, r3
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	0d1b      	lsrs	r3, r3, #20
 8004590:	f003 031f 	and.w	r3, r3, #31
 8004594:	6879      	ldr	r1, [r7, #4]
 8004596:	fa01 f303 	lsl.w	r3, r1, r3
 800459a:	431a      	orrs	r2, r3
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80045a0:	bf00      	nop
 80045a2:	371c      	adds	r7, #28
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4a1a      	ldr	r2, [pc, #104]	@ (8004624 <LL_ADC_SetChannelSingleDiff+0x78>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d115      	bne.n	80045ec <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045cc:	43db      	mvns	r3, r3
 80045ce:	401a      	ands	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f003 0318 	and.w	r3, r3, #24
 80045d6:	4914      	ldr	r1, [pc, #80]	@ (8004628 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80045d8:	40d9      	lsrs	r1, r3
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	400b      	ands	r3, r1
 80045de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045e2:	431a      	orrs	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80045ea:	e014      	b.n	8004616 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045f8:	43db      	mvns	r3, r3
 80045fa:	401a      	ands	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f003 0318 	and.w	r3, r3, #24
 8004602:	4909      	ldr	r1, [pc, #36]	@ (8004628 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004604:	40d9      	lsrs	r1, r3
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	400b      	ands	r3, r1
 800460a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800460e:	431a      	orrs	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8004616:	bf00      	nop
 8004618:	3714      	adds	r7, #20
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	58026000 	.word	0x58026000
 8004628:	000fffff 	.word	0x000fffff

0800462c <LL_ADC_SetAnalogWDMonitChannels>:
  *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
  *         (2) On STM32H7, parameter available only on ADC instance: ADC2.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 800462c:	b480      	push	{r7}
 800462e:	b087      	sub	sp, #28
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	330c      	adds	r3, #12
 800463c:	4618      	mov	r0, r3
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	0d1b      	lsrs	r3, r3, #20
 8004642:	f003 0103 	and.w	r1, r3, #3
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	f003 0201 	and.w	r2, r3, #1
 800464c:	4613      	mov	r3, r2
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	4413      	add	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	440b      	add	r3, r1
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	4403      	add	r3, r0
 800465a:	617b      	str	r3, [r7, #20]
                                                      + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	68b9      	ldr	r1, [r7, #8]
 8004662:	4b08      	ldr	r3, [pc, #32]	@ (8004684 <LL_ADC_SetAnalogWDMonitChannels+0x58>)
 8004664:	400b      	ands	r3, r1
 8004666:	43db      	mvns	r3, r3
 8004668:	401a      	ands	r2, r3
 800466a:	6879      	ldr	r1, [r7, #4]
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	400b      	ands	r3, r1
 8004670:	431a      	orrs	r2, r3
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 8004676:	bf00      	nop
 8004678:	371c      	adds	r7, #28
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	7dcfffff 	.word	0x7dcfffff

08004688 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdHighValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue, uint32_t AWDThresholdLowValue)
{
 8004688:	b480      	push	{r7}
 800468a:	b089      	sub	sp, #36	@ 0x24
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
 8004694:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  if (ADCx == ADC3)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	4a29      	ldr	r2, [pc, #164]	@ (8004740 <LL_ADC_ConfigAnalogWDThresholds+0xb8>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d115      	bne.n	80046ca <LL_ADC_ConfigAnalogWDThresholds+0x42>
  {
    uint32_t __IO *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	3320      	adds	r3, #32
 80046a2:	461a      	mov	r2, r3
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	0d1b      	lsrs	r3, r3, #20
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	f003 030c 	and.w	r3, r3, #12
 80046ae:	4413      	add	r3, r2
 80046b0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 22f0 	and.w	r2, r3, #4026593280	@ 0xf000f000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	0419      	lsls	r1, r3, #16
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	430b      	orrs	r3, r1
 80046c2:	431a      	orrs	r2, r3
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	601a      	str	r2, [r3, #0]
                                                         + (LL_ADC_AWD_THRESHOLD_HIGH));

    MODIFY_REG(*preg, ADC_LTR_LT, AWDThresholdLowValue);
    MODIFY_REG(*preg2, ADC_HTR_HT, AWDThresholdHighValue);
  }
}
 80046c8:	e034      	b.n	8004734 <LL_ADC_ConfigAnalogWDThresholds+0xac>
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS) * 2UL)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	3320      	adds	r3, #32
 80046ce:	4618      	mov	r0, r3
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	0d1b      	lsrs	r3, r3, #20
 80046d4:	f003 0103 	and.w	r1, r3, #3
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	f003 0201 	and.w	r2, r3, #1
 80046de:	4613      	mov	r3, r2
 80046e0:	011b      	lsls	r3, r3, #4
 80046e2:	4413      	add	r3, r2
 80046e4:	440b      	add	r3, r1
 80046e6:	005b      	lsls	r3, r3, #1
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	4403      	add	r3, r0
 80046ec:	61fb      	str	r3, [r7, #28]
    __IO uint32_t *preg2 = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS) * 2UL)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	3320      	adds	r3, #32
 80046f2:	4618      	mov	r0, r3
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	0d1b      	lsrs	r3, r3, #20
 80046f8:	f003 0103 	and.w	r1, r3, #3
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	f003 0201 	and.w	r2, r3, #1
 8004702:	4613      	mov	r3, r2
 8004704:	011b      	lsls	r3, r3, #4
 8004706:	4413      	add	r3, r2
 8004708:	440b      	add	r3, r1
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	3301      	adds	r3, #1
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	4403      	add	r3, r0
 8004712:	61bb      	str	r3, [r7, #24]
    MODIFY_REG(*preg, ADC_LTR_LT, AWDThresholdLowValue);
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 427c 	and.w	r2, r3, #4227858432	@ 0xfc000000
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	431a      	orrs	r2, r3
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	601a      	str	r2, [r3, #0]
    MODIFY_REG(*preg2, ADC_HTR_HT, AWDThresholdHighValue);
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 427c 	and.w	r2, r3, #4227858432	@ 0xfc000000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	431a      	orrs	r2, r3
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	601a      	str	r2, [r3, #0]
}
 8004734:	bf00      	nop
 8004736:	3724      	adds	r7, #36	@ 0x24
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr
 8004740:	58026000 	.word	0x58026000

08004744 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f003 031f 	and.w	r3, r3, #31
}
 8004754:	4618      	mov	r0, r3
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8004770:	4618      	mov	r0, r3
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	4b04      	ldr	r3, [pc, #16]	@ (800479c <LL_ADC_DisableDeepPowerDown+0x20>)
 800478a:	4013      	ands	r3, r2
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6093      	str	r3, [r2, #8]
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr
 800479c:	5fffffc0 	.word	0x5fffffc0

080047a0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047b4:	d101      	bne.n	80047ba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80047b6:	2301      	movs	r3, #1
 80047b8:	e000      	b.n	80047bc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	4b05      	ldr	r3, [pc, #20]	@ (80047ec <LL_ADC_EnableInternalRegulator+0x24>)
 80047d6:	4013      	ands	r3, r2
 80047d8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr
 80047ec:	6fffffc0 	.word	0x6fffffc0

080047f0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004800:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004804:	d101      	bne.n	800480a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004806:	2301      	movs	r3, #1
 8004808:	e000      	b.n	800480c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800480a:	2300      	movs	r3, #0
}
 800480c:	4618      	mov	r0, r3
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689a      	ldr	r2, [r3, #8]
 8004824:	4b05      	ldr	r3, [pc, #20]	@ (800483c <LL_ADC_Enable+0x24>)
 8004826:	4013      	ands	r3, r2
 8004828:	f043 0201 	orr.w	r2, r3, #1
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr
 800483c:	7fffffc0 	.word	0x7fffffc0

08004840 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689a      	ldr	r2, [r3, #8]
 800484c:	4b05      	ldr	r3, [pc, #20]	@ (8004864 <LL_ADC_Disable+0x24>)
 800484e:	4013      	ands	r3, r2
 8004850:	f043 0202 	orr.w	r2, r3, #2
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004858:	bf00      	nop
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr
 8004864:	7fffffc0 	.word	0x7fffffc0

08004868 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f003 0301 	and.w	r3, r3, #1
 8004878:	2b01      	cmp	r3, #1
 800487a:	d101      	bne.n	8004880 <LL_ADC_IsEnabled+0x18>
 800487c:	2301      	movs	r3, #1
 800487e:	e000      	b.n	8004882 <LL_ADC_IsEnabled+0x1a>
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr

0800488e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800488e:	b480      	push	{r7}
 8004890:	b083      	sub	sp, #12
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d101      	bne.n	80048a6 <LL_ADC_IsDisableOngoing+0x18>
 80048a2:	2301      	movs	r3, #1
 80048a4:	e000      	b.n	80048a8 <LL_ADC_IsDisableOngoing+0x1a>
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689a      	ldr	r2, [r3, #8]
 80048c0:	4b05      	ldr	r3, [pc, #20]	@ (80048d8 <LL_ADC_REG_StartConversion+0x24>)
 80048c2:	4013      	ands	r3, r2
 80048c4:	f043 0204 	orr.w	r2, r3, #4
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr
 80048d8:	7fffffc0 	.word	0x7fffffc0

080048dc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f003 0304 	and.w	r3, r3, #4
 80048ec:	2b04      	cmp	r3, #4
 80048ee:	d101      	bne.n	80048f4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80048f0:	2301      	movs	r3, #1
 80048f2:	e000      	b.n	80048f6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004902:	b480      	push	{r7}
 8004904:	b083      	sub	sp, #12
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f003 0308 	and.w	r3, r3, #8
 8004912:	2b08      	cmp	r3, #8
 8004914:	d101      	bne.n	800491a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004916:	2301      	movs	r3, #1
 8004918:	e000      	b.n	800491c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2280      	movs	r2, #128	@ 0x80
 8004934:	601a      	str	r2, [r3, #0]
}
 8004936:	bf00      	nop
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 8004942:	b480      	push	{r7}
 8004944:	b083      	sub	sp, #12
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004950:	601a      	str	r2, [r3, #0]
}
 8004952:	bf00      	nop
 8004954:	370c      	adds	r7, #12
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 800495e:	b480      	push	{r7}
 8004960:	b083      	sub	sp, #12
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800496c:	601a      	str	r2, [r3, #0]
}
 800496e:	bf00      	nop
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 800497a:	b480      	push	{r7}
 800497c:	b083      	sub	sp, #12
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	605a      	str	r2, [r3, #4]
}
 800498e:	bf00      	nop
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 800499a:	b480      	push	{r7}
 800499c:	b083      	sub	sp, #12
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	605a      	str	r2, [r3, #4]
}
 80049ae:	bf00      	nop
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 80049ba:	b480      	push	{r7}
 80049bc:	b083      	sub	sp, #12
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	605a      	str	r2, [r3, #4]
}
 80049ce:	bf00      	nop
 80049d0:	370c      	adds	r7, #12
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 80049da:	b480      	push	{r7}
 80049dc:	b083      	sub	sp, #12
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	605a      	str	r2, [r3, #4]
}
 80049ee:	bf00      	nop
 80049f0:	370c      	adds	r7, #12
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr

080049fa <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 80049fa:	b480      	push	{r7}
 80049fc:	b083      	sub	sp, #12
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	605a      	str	r2, [r3, #4]
}
 8004a0e:	bf00      	nop
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b083      	sub	sp, #12
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	605a      	str	r2, [r3, #4]
}
 8004a2e:	bf00      	nop
 8004a30:	370c      	adds	r7, #12
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
	...

08004a3c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004a3c:	b590      	push	{r4, r7, lr}
 8004a3e:	b089      	sub	sp, #36	@ 0x24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a44:	2300      	movs	r3, #0
 8004a46:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e1ee      	b.n	8004e34 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d109      	bne.n	8004a78 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f7fe fcef 	bl	8003448 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7ff fe8f 	bl	80047a0 <LL_ADC_IsDeepPowerDownEnabled>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d004      	beq.n	8004a92 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7ff fe75 	bl	800477c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7ff feaa 	bl	80047f0 <LL_ADC_IsInternalRegulatorEnabled>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d114      	bne.n	8004acc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7ff fe8e 	bl	80047c8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004aac:	4b8e      	ldr	r3, [pc, #568]	@ (8004ce8 <HAL_ADC_Init+0x2ac>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	099b      	lsrs	r3, r3, #6
 8004ab2:	4a8e      	ldr	r2, [pc, #568]	@ (8004cec <HAL_ADC_Init+0x2b0>)
 8004ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab8:	099b      	lsrs	r3, r3, #6
 8004aba:	3301      	adds	r3, #1
 8004abc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004abe:	e002      	b.n	8004ac6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1f9      	bne.n	8004ac0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7ff fe8d 	bl	80047f0 <LL_ADC_IsInternalRegulatorEnabled>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d10d      	bne.n	8004af8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ae0:	f043 0210 	orr.w	r2, r3, #16
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004aec:	f043 0201 	orr.w	r2, r3, #1
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7ff feed 	bl	80048dc <LL_ADC_REG_IsConversionOngoing>
 8004b02:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b08:	f003 0310 	and.w	r3, r3, #16
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f040 8188 	bne.w	8004e22 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f040 8184 	bne.w	8004e22 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b1e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004b22:	f043 0202 	orr.w	r2, r3, #2
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7ff fe9a 	bl	8004868 <LL_ADC_IsEnabled>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d136      	bne.n	8004ba8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a6c      	ldr	r2, [pc, #432]	@ (8004cf0 <HAL_ADC_Init+0x2b4>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d004      	beq.n	8004b4e <HAL_ADC_Init+0x112>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a6a      	ldr	r2, [pc, #424]	@ (8004cf4 <HAL_ADC_Init+0x2b8>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d10e      	bne.n	8004b6c <HAL_ADC_Init+0x130>
 8004b4e:	4868      	ldr	r0, [pc, #416]	@ (8004cf0 <HAL_ADC_Init+0x2b4>)
 8004b50:	f7ff fe8a 	bl	8004868 <LL_ADC_IsEnabled>
 8004b54:	4604      	mov	r4, r0
 8004b56:	4867      	ldr	r0, [pc, #412]	@ (8004cf4 <HAL_ADC_Init+0x2b8>)
 8004b58:	f7ff fe86 	bl	8004868 <LL_ADC_IsEnabled>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	4323      	orrs	r3, r4
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	bf0c      	ite	eq
 8004b64:	2301      	moveq	r3, #1
 8004b66:	2300      	movne	r3, #0
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	e008      	b.n	8004b7e <HAL_ADC_Init+0x142>
 8004b6c:	4862      	ldr	r0, [pc, #392]	@ (8004cf8 <HAL_ADC_Init+0x2bc>)
 8004b6e:	f7ff fe7b 	bl	8004868 <LL_ADC_IsEnabled>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	bf0c      	ite	eq
 8004b78:	2301      	moveq	r3, #1
 8004b7a:	2300      	movne	r3, #0
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d012      	beq.n	8004ba8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a5a      	ldr	r2, [pc, #360]	@ (8004cf0 <HAL_ADC_Init+0x2b4>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d004      	beq.n	8004b96 <HAL_ADC_Init+0x15a>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a58      	ldr	r2, [pc, #352]	@ (8004cf4 <HAL_ADC_Init+0x2b8>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d101      	bne.n	8004b9a <HAL_ADC_Init+0x15e>
 8004b96:	4a59      	ldr	r2, [pc, #356]	@ (8004cfc <HAL_ADC_Init+0x2c0>)
 8004b98:	e000      	b.n	8004b9c <HAL_ADC_Init+0x160>
 8004b9a:	4a59      	ldr	r2, [pc, #356]	@ (8004d00 <HAL_ADC_Init+0x2c4>)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	4610      	mov	r0, r2
 8004ba4:	f7ff fb22 	bl	80041ec <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a52      	ldr	r2, [pc, #328]	@ (8004cf8 <HAL_ADC_Init+0x2bc>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d129      	bne.n	8004c06 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	7e5b      	ldrb	r3, [r3, #25]
 8004bb6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004bbc:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8004bc2:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	2b08      	cmp	r3, #8
 8004bca:	d013      	beq.n	8004bf4 <HAL_ADC_Init+0x1b8>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	2b0c      	cmp	r3, #12
 8004bd2:	d00d      	beq.n	8004bf0 <HAL_ADC_Init+0x1b4>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	2b1c      	cmp	r3, #28
 8004bda:	d007      	beq.n	8004bec <HAL_ADC_Init+0x1b0>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	2b18      	cmp	r3, #24
 8004be2:	d101      	bne.n	8004be8 <HAL_ADC_Init+0x1ac>
 8004be4:	2318      	movs	r3, #24
 8004be6:	e006      	b.n	8004bf6 <HAL_ADC_Init+0x1ba>
 8004be8:	2300      	movs	r3, #0
 8004bea:	e004      	b.n	8004bf6 <HAL_ADC_Init+0x1ba>
 8004bec:	2310      	movs	r3, #16
 8004bee:	e002      	b.n	8004bf6 <HAL_ADC_Init+0x1ba>
 8004bf0:	2308      	movs	r3, #8
 8004bf2:	e000      	b.n	8004bf6 <HAL_ADC_Init+0x1ba>
 8004bf4:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8004bf6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bfe:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004c00:	4313      	orrs	r3, r2
 8004c02:	61bb      	str	r3, [r7, #24]
 8004c04:	e00e      	b.n	8004c24 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	7e5b      	ldrb	r3, [r3, #25]
 8004c0a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004c10:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004c16:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c1e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004c20:	4313      	orrs	r3, r2
 8004c22:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d106      	bne.n	8004c3c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c32:	3b01      	subs	r3, #1
 8004c34:	045b      	lsls	r3, r3, #17
 8004c36:	69ba      	ldr	r2, [r7, #24]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d009      	beq.n	8004c58 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c48:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c50:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004c52:	69ba      	ldr	r2, [r7, #24]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a26      	ldr	r2, [pc, #152]	@ (8004cf8 <HAL_ADC_Init+0x2bc>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d115      	bne.n	8004c8e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68da      	ldr	r2, [r3, #12]
 8004c68:	4b26      	ldr	r3, [pc, #152]	@ (8004d04 <HAL_ADC_Init+0x2c8>)
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	6812      	ldr	r2, [r2, #0]
 8004c70:	69b9      	ldr	r1, [r7, #24]
 8004c72:	430b      	orrs	r3, r1
 8004c74:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	611a      	str	r2, [r3, #16]
 8004c8c:	e009      	b.n	8004ca2 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68da      	ldr	r2, [r3, #12]
 8004c94:	4b1c      	ldr	r3, [pc, #112]	@ (8004d08 <HAL_ADC_Init+0x2cc>)
 8004c96:	4013      	ands	r3, r2
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	6812      	ldr	r2, [r2, #0]
 8004c9c:	69b9      	ldr	r1, [r7, #24]
 8004c9e:	430b      	orrs	r3, r1
 8004ca0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7ff fe18 	bl	80048dc <LL_ADC_REG_IsConversionOngoing>
 8004cac:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7ff fe25 	bl	8004902 <LL_ADC_INJ_IsConversionOngoing>
 8004cb8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	f040 808e 	bne.w	8004dde <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f040 808a 	bne.w	8004dde <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a0a      	ldr	r2, [pc, #40]	@ (8004cf8 <HAL_ADC_Init+0x2bc>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d11b      	bne.n	8004d0c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	7e1b      	ldrb	r3, [r3, #24]
 8004cd8:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004ce0:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	61bb      	str	r3, [r7, #24]
 8004ce6:	e018      	b.n	8004d1a <HAL_ADC_Init+0x2de>
 8004ce8:	24000038 	.word	0x24000038
 8004cec:	053e2d63 	.word	0x053e2d63
 8004cf0:	40022000 	.word	0x40022000
 8004cf4:	40022100 	.word	0x40022100
 8004cf8:	58026000 	.word	0x58026000
 8004cfc:	40022300 	.word	0x40022300
 8004d00:	58026300 	.word	0x58026300
 8004d04:	fff04007 	.word	0xfff04007
 8004d08:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	7e1b      	ldrb	r3, [r3, #24]
 8004d10:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8004d16:	4313      	orrs	r3, r2
 8004d18:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68da      	ldr	r2, [r3, #12]
 8004d20:	4b46      	ldr	r3, [pc, #280]	@ (8004e3c <HAL_ADC_Init+0x400>)
 8004d22:	4013      	ands	r3, r2
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	6812      	ldr	r2, [r2, #0]
 8004d28:	69b9      	ldr	r1, [r7, #24]
 8004d2a:	430b      	orrs	r3, r1
 8004d2c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d137      	bne.n	8004da8 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d3c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a3f      	ldr	r2, [pc, #252]	@ (8004e40 <HAL_ADC_Init+0x404>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d116      	bne.n	8004d76 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	691a      	ldr	r2, [r3, #16]
 8004d4e:	4b3d      	ldr	r3, [pc, #244]	@ (8004e44 <HAL_ADC_Init+0x408>)
 8004d50:	4013      	ands	r3, r2
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004d5a:	4311      	orrs	r1, r2
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004d60:	4311      	orrs	r1, r2
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004d66:	430a      	orrs	r2, r1
 8004d68:	431a      	orrs	r2, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f042 0201 	orr.w	r2, r2, #1
 8004d72:	611a      	str	r2, [r3, #16]
 8004d74:	e020      	b.n	8004db8 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	691a      	ldr	r2, [r3, #16]
 8004d7c:	4b32      	ldr	r3, [pc, #200]	@ (8004e48 <HAL_ADC_Init+0x40c>)
 8004d7e:	4013      	ands	r3, r2
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004d84:	3a01      	subs	r2, #1
 8004d86:	0411      	lsls	r1, r2, #16
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004d8c:	4311      	orrs	r1, r2
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004d92:	4311      	orrs	r1, r2
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f042 0201 	orr.w	r2, r2, #1
 8004da4:	611a      	str	r2, [r3, #16]
 8004da6:	e007      	b.n	8004db8 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	691a      	ldr	r2, [r3, #16]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 0201 	bic.w	r2, r2, #1
 8004db6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a1b      	ldr	r2, [pc, #108]	@ (8004e40 <HAL_ADC_Init+0x404>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d002      	beq.n	8004dde <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f001 fd99 	bl	8006910 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d10c      	bne.n	8004e00 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dec:	f023 010f 	bic.w	r1, r3, #15
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	1e5a      	subs	r2, r3, #1
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	631a      	str	r2, [r3, #48]	@ 0x30
 8004dfe:	e007      	b.n	8004e10 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f022 020f 	bic.w	r2, r2, #15
 8004e0e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e14:	f023 0303 	bic.w	r3, r3, #3
 8004e18:	f043 0201 	orr.w	r2, r3, #1
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	661a      	str	r2, [r3, #96]	@ 0x60
 8004e20:	e007      	b.n	8004e32 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e26:	f043 0210 	orr.w	r2, r3, #16
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004e32:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3724      	adds	r7, #36	@ 0x24
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd90      	pop	{r4, r7, pc}
 8004e3c:	ffffbffc 	.word	0xffffbffc
 8004e40:	58026000 	.word	0x58026000
 8004e44:	fc00f81f 	.word	0xfc00f81f
 8004e48:	fc00f81e 	.word	0xfc00f81e

08004e4c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a60      	ldr	r2, [pc, #384]	@ (8004fe0 <HAL_ADC_Start_DMA+0x194>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d004      	beq.n	8004e6c <HAL_ADC_Start_DMA+0x20>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a5f      	ldr	r2, [pc, #380]	@ (8004fe4 <HAL_ADC_Start_DMA+0x198>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d101      	bne.n	8004e70 <HAL_ADC_Start_DMA+0x24>
 8004e6c:	4b5e      	ldr	r3, [pc, #376]	@ (8004fe8 <HAL_ADC_Start_DMA+0x19c>)
 8004e6e:	e000      	b.n	8004e72 <HAL_ADC_Start_DMA+0x26>
 8004e70:	4b5e      	ldr	r3, [pc, #376]	@ (8004fec <HAL_ADC_Start_DMA+0x1a0>)
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7ff fc66 	bl	8004744 <LL_ADC_GetMultimode>
 8004e78:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7ff fd2c 	bl	80048dc <LL_ADC_REG_IsConversionOngoing>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	f040 80a2 	bne.w	8004fd0 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d101      	bne.n	8004e9a <HAL_ADC_Start_DMA+0x4e>
 8004e96:	2302      	movs	r3, #2
 8004e98:	e09d      	b.n	8004fd6 <HAL_ADC_Start_DMA+0x18a>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d006      	beq.n	8004eb6 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	2b05      	cmp	r3, #5
 8004eac:	d003      	beq.n	8004eb6 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	2b09      	cmp	r3, #9
 8004eb2:	f040 8086 	bne.w	8004fc2 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004eb6:	68f8      	ldr	r0, [r7, #12]
 8004eb8:	f001 fbac 	bl	8006614 <ADC_Enable>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004ec0:	7dfb      	ldrb	r3, [r7, #23]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d178      	bne.n	8004fb8 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004eca:	4b49      	ldr	r3, [pc, #292]	@ (8004ff0 <HAL_ADC_Start_DMA+0x1a4>)
 8004ecc:	4013      	ands	r3, r2
 8004ece:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a42      	ldr	r2, [pc, #264]	@ (8004fe4 <HAL_ADC_Start_DMA+0x198>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d002      	beq.n	8004ee6 <HAL_ADC_Start_DMA+0x9a>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	e000      	b.n	8004ee8 <HAL_ADC_Start_DMA+0x9c>
 8004ee6:	4b3e      	ldr	r3, [pc, #248]	@ (8004fe0 <HAL_ADC_Start_DMA+0x194>)
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	6812      	ldr	r2, [r2, #0]
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d002      	beq.n	8004ef6 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d105      	bne.n	8004f02 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004efa:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d006      	beq.n	8004f1c <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f12:	f023 0206 	bic.w	r2, r3, #6
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	665a      	str	r2, [r3, #100]	@ 0x64
 8004f1a:	e002      	b.n	8004f22 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f26:	4a33      	ldr	r2, [pc, #204]	@ (8004ff4 <HAL_ADC_Start_DMA+0x1a8>)
 8004f28:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f2e:	4a32      	ldr	r2, [pc, #200]	@ (8004ff8 <HAL_ADC_Start_DMA+0x1ac>)
 8004f30:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f36:	4a31      	ldr	r2, [pc, #196]	@ (8004ffc <HAL_ADC_Start_DMA+0x1b0>)
 8004f38:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	221c      	movs	r2, #28
 8004f40:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f042 0210 	orr.w	r2, r2, #16
 8004f58:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a28      	ldr	r2, [pc, #160]	@ (8005000 <HAL_ADC_Start_DMA+0x1b4>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d10f      	bne.n	8004f84 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004f6e:	005b      	lsls	r3, r3, #1
 8004f70:	4619      	mov	r1, r3
 8004f72:	4610      	mov	r0, r2
 8004f74:	f7ff fac2 	bl	80044fc <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7ff faad 	bl	80044dc <LL_ADC_EnableDMAReq>
 8004f82:	e007      	b.n	8004f94 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	4610      	mov	r0, r2
 8004f90:	f7ff fa91 	bl	80044b6 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	3340      	adds	r3, #64	@ 0x40
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	68ba      	ldr	r2, [r7, #8]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f002 fdcc 	bl	8007b40 <HAL_DMA_Start_IT>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7ff fc7f 	bl	80048b4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004fb6:	e00d      	b.n	8004fd4 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 8004fc0:	e008      	b.n	8004fd4 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8004fce:	e001      	b.n	8004fd4 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3718      	adds	r7, #24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	40022000 	.word	0x40022000
 8004fe4:	40022100 	.word	0x40022100
 8004fe8:	40022300 	.word	0x40022300
 8004fec:	58026300 	.word	0x58026300
 8004ff0:	fffff0fe 	.word	0xfffff0fe
 8004ff4:	080067e7 	.word	0x080067e7
 8004ff8:	080068bf 	.word	0x080068bf
 8004ffc:	080068db 	.word	0x080068db
 8005000:	58026000 	.word	0x58026000

08005004 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b08a      	sub	sp, #40	@ 0x28
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800500c:	2300      	movs	r3, #0
 800500e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a87      	ldr	r2, [pc, #540]	@ (8005244 <HAL_ADC_IRQHandler+0x240>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d004      	beq.n	8005034 <HAL_ADC_IRQHandler+0x30>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a86      	ldr	r2, [pc, #536]	@ (8005248 <HAL_ADC_IRQHandler+0x244>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d101      	bne.n	8005038 <HAL_ADC_IRQHandler+0x34>
 8005034:	4b85      	ldr	r3, [pc, #532]	@ (800524c <HAL_ADC_IRQHandler+0x248>)
 8005036:	e000      	b.n	800503a <HAL_ADC_IRQHandler+0x36>
 8005038:	4b85      	ldr	r3, [pc, #532]	@ (8005250 <HAL_ADC_IRQHandler+0x24c>)
 800503a:	4618      	mov	r0, r3
 800503c:	f7ff fb82 	bl	8004744 <LL_ADC_GetMultimode>
 8005040:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b00      	cmp	r3, #0
 800504a:	d017      	beq.n	800507c <HAL_ADC_IRQHandler+0x78>
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d012      	beq.n	800507c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800505a:	f003 0310 	and.w	r3, r3, #16
 800505e:	2b00      	cmp	r3, #0
 8005060:	d105      	bne.n	800506e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005066:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f001 fee8 	bl	8006e44 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2202      	movs	r2, #2
 800507a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	f003 0304 	and.w	r3, r3, #4
 8005082:	2b00      	cmp	r3, #0
 8005084:	d004      	beq.n	8005090 <HAL_ADC_IRQHandler+0x8c>
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	f003 0304 	and.w	r3, r3, #4
 800508c:	2b00      	cmp	r3, #0
 800508e:	d10a      	bne.n	80050a6 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005096:	2b00      	cmp	r3, #0
 8005098:	f000 8083 	beq.w	80051a2 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	f003 0308 	and.w	r3, r3, #8
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d07d      	beq.n	80051a2 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050aa:	f003 0310 	and.w	r3, r3, #16
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d105      	bne.n	80050be <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050b6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7ff f9b8 	bl	8004438 <LL_ADC_REG_IsTriggerSourceSWStart>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d062      	beq.n	8005194 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a5d      	ldr	r2, [pc, #372]	@ (8005248 <HAL_ADC_IRQHandler+0x244>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d002      	beq.n	80050de <HAL_ADC_IRQHandler+0xda>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	e000      	b.n	80050e0 <HAL_ADC_IRQHandler+0xdc>
 80050de:	4b59      	ldr	r3, [pc, #356]	@ (8005244 <HAL_ADC_IRQHandler+0x240>)
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	6812      	ldr	r2, [r2, #0]
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d008      	beq.n	80050fa <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d005      	beq.n	80050fa <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	2b05      	cmp	r3, #5
 80050f2:	d002      	beq.n	80050fa <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	2b09      	cmp	r3, #9
 80050f8:	d104      	bne.n	8005104 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	623b      	str	r3, [r7, #32]
 8005102:	e00c      	b.n	800511e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a4f      	ldr	r2, [pc, #316]	@ (8005248 <HAL_ADC_IRQHandler+0x244>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d002      	beq.n	8005114 <HAL_ADC_IRQHandler+0x110>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	e000      	b.n	8005116 <HAL_ADC_IRQHandler+0x112>
 8005114:	4b4b      	ldr	r3, [pc, #300]	@ (8005244 <HAL_ADC_IRQHandler+0x240>)
 8005116:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800511e:	6a3b      	ldr	r3, [r7, #32]
 8005120:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d135      	bne.n	8005194 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0308 	and.w	r3, r3, #8
 8005132:	2b08      	cmp	r3, #8
 8005134:	d12e      	bne.n	8005194 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4618      	mov	r0, r3
 800513c:	f7ff fbce 	bl	80048dc <LL_ADC_REG_IsConversionOngoing>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d11a      	bne.n	800517c <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	685a      	ldr	r2, [r3, #4]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f022 020c 	bic.w	r2, r2, #12
 8005154:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800515a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005166:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d112      	bne.n	8005194 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005172:	f043 0201 	orr.w	r2, r3, #1
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	661a      	str	r2, [r3, #96]	@ 0x60
 800517a:	e00b      	b.n	8005194 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005180:	f043 0210 	orr.w	r2, r3, #16
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800518c:	f043 0201 	orr.w	r2, r3, #1
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f7fc fcd9 	bl	8001b4c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	220c      	movs	r2, #12
 80051a0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	f003 0320 	and.w	r3, r3, #32
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d004      	beq.n	80051b6 <HAL_ADC_IRQHandler+0x1b2>
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	f003 0320 	and.w	r3, r3, #32
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d10b      	bne.n	80051ce <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f000 80a0 	beq.w	8005302 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f000 809a 	beq.w	8005302 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051d2:	f003 0310 	and.w	r3, r3, #16
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d105      	bne.n	80051e6 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051de:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7ff f9a0 	bl	8004530 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80051f0:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7ff f91e 	bl	8004438 <LL_ADC_REG_IsTriggerSourceSWStart>
 80051fc:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a11      	ldr	r2, [pc, #68]	@ (8005248 <HAL_ADC_IRQHandler+0x244>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d002      	beq.n	800520e <HAL_ADC_IRQHandler+0x20a>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	e000      	b.n	8005210 <HAL_ADC_IRQHandler+0x20c>
 800520e:	4b0d      	ldr	r3, [pc, #52]	@ (8005244 <HAL_ADC_IRQHandler+0x240>)
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	6812      	ldr	r2, [r2, #0]
 8005214:	4293      	cmp	r3, r2
 8005216:	d008      	beq.n	800522a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d005      	beq.n	800522a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	2b06      	cmp	r3, #6
 8005222:	d002      	beq.n	800522a <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	2b07      	cmp	r3, #7
 8005228:	d104      	bne.n	8005234 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	623b      	str	r3, [r7, #32]
 8005232:	e014      	b.n	800525e <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a03      	ldr	r2, [pc, #12]	@ (8005248 <HAL_ADC_IRQHandler+0x244>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d00a      	beq.n	8005254 <HAL_ADC_IRQHandler+0x250>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	e008      	b.n	8005256 <HAL_ADC_IRQHandler+0x252>
 8005244:	40022000 	.word	0x40022000
 8005248:	40022100 	.word	0x40022100
 800524c:	40022300 	.word	0x40022300
 8005250:	58026300 	.word	0x58026300
 8005254:	4b84      	ldr	r3, [pc, #528]	@ (8005468 <HAL_ADC_IRQHandler+0x464>)
 8005256:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d047      	beq.n	80052f4 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005264:	6a3b      	ldr	r3, [r7, #32]
 8005266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d007      	beq.n	800527e <HAL_ADC_IRQHandler+0x27a>
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d03f      	beq.n	80052f4 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005274:	6a3b      	ldr	r3, [r7, #32]
 8005276:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800527a:	2b00      	cmp	r3, #0
 800527c:	d13a      	bne.n	80052f4 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005288:	2b40      	cmp	r3, #64	@ 0x40
 800528a:	d133      	bne.n	80052f4 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800528c:	6a3b      	ldr	r3, [r7, #32]
 800528e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d12e      	bne.n	80052f4 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4618      	mov	r0, r3
 800529c:	f7ff fb31 	bl	8004902 <LL_ADC_INJ_IsConversionOngoing>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d11a      	bne.n	80052dc <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	685a      	ldr	r2, [r3, #4]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80052b4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052ba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d112      	bne.n	80052f4 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052d2:	f043 0201 	orr.w	r2, r3, #1
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	661a      	str	r2, [r3, #96]	@ 0x60
 80052da:	e00b      	b.n	80052f4 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052e0:	f043 0210 	orr.w	r2, r3, #16
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052ec:	f043 0201 	orr.w	r2, r3, #1
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f001 fd7d 	bl	8006df4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2260      	movs	r2, #96	@ 0x60
 8005300:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005308:	2b00      	cmp	r3, #0
 800530a:	d011      	beq.n	8005330 <HAL_ADC_IRQHandler+0x32c>
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00c      	beq.n	8005330 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800531a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 f8b2 	bl	800548c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2280      	movs	r2, #128	@ 0x80
 800532e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005336:	2b00      	cmp	r3, #0
 8005338:	d012      	beq.n	8005360 <HAL_ADC_IRQHandler+0x35c>
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00d      	beq.n	8005360 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005348:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f001 fd63 	bl	8006e1c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800535e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005366:	2b00      	cmp	r3, #0
 8005368:	d012      	beq.n	8005390 <HAL_ADC_IRQHandler+0x38c>
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00d      	beq.n	8005390 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005378:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f001 fd55 	bl	8006e30 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800538e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	f003 0310 	and.w	r3, r3, #16
 8005396:	2b00      	cmp	r3, #0
 8005398:	d043      	beq.n	8005422 <HAL_ADC_IRQHandler+0x41e>
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	f003 0310 	and.w	r3, r3, #16
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d03e      	beq.n	8005422 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d102      	bne.n	80053b2 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80053ac:	2301      	movs	r3, #1
 80053ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80053b0:	e021      	b.n	80053f6 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d015      	beq.n	80053e4 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a2a      	ldr	r2, [pc, #168]	@ (8005468 <HAL_ADC_IRQHandler+0x464>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d004      	beq.n	80053cc <HAL_ADC_IRQHandler+0x3c8>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a29      	ldr	r2, [pc, #164]	@ (800546c <HAL_ADC_IRQHandler+0x468>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d101      	bne.n	80053d0 <HAL_ADC_IRQHandler+0x3cc>
 80053cc:	4b28      	ldr	r3, [pc, #160]	@ (8005470 <HAL_ADC_IRQHandler+0x46c>)
 80053ce:	e000      	b.n	80053d2 <HAL_ADC_IRQHandler+0x3ce>
 80053d0:	4b28      	ldr	r3, [pc, #160]	@ (8005474 <HAL_ADC_IRQHandler+0x470>)
 80053d2:	4618      	mov	r0, r3
 80053d4:	f7ff f9c4 	bl	8004760 <LL_ADC_GetMultiDMATransfer>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00b      	beq.n	80053f6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80053de:	2301      	movs	r3, #1
 80053e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80053e2:	e008      	b.n	80053f6 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	f003 0303 	and.w	r3, r3, #3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d001      	beq.n	80053f6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80053f2:	2301      	movs	r3, #1
 80053f4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80053f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d10e      	bne.n	800541a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005400:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800540c:	f043 0202 	orr.w	r2, r3, #2
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f7fc fb6d 	bl	8001af4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2210      	movs	r2, #16
 8005420:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005428:	2b00      	cmp	r3, #0
 800542a:	d018      	beq.n	800545e <HAL_ADC_IRQHandler+0x45a>
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005432:	2b00      	cmp	r3, #0
 8005434:	d013      	beq.n	800545e <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800543a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005446:	f043 0208 	orr.w	r2, r3, #8
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005456:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f001 fcd5 	bl	8006e08 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800545e:	bf00      	nop
 8005460:	3728      	adds	r7, #40	@ 0x28
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	40022000 	.word	0x40022000
 800546c:	40022100 	.word	0x40022100
 8005470:	40022300 	.word	0x40022300
 8005474:	58026300 	.word	0x58026300

08005478 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80054a0:	b590      	push	{r4, r7, lr}
 80054a2:	b0b9      	sub	sp, #228	@ 0xe4
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054aa:	2300      	movs	r3, #0
 80054ac:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80054b0:	2300      	movs	r3, #0
 80054b2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80054ba:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	4aa9      	ldr	r2, [pc, #676]	@ (8005768 <HAL_ADC_ConfigChannel+0x2c8>)
 80054c2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d102      	bne.n	80054d4 <HAL_ADC_ConfigChannel+0x34>
 80054ce:	2302      	movs	r3, #2
 80054d0:	f000 bcfa 	b.w	8005ec8 <HAL_ADC_ConfigChannel+0xa28>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7ff f9fb 	bl	80048dc <LL_ADC_REG_IsConversionOngoing>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f040 84de 	bne.w	8005eaa <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a9e      	ldr	r2, [pc, #632]	@ (800576c <HAL_ADC_ConfigChannel+0x2cc>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d033      	beq.n	8005560 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005500:	2b00      	cmp	r3, #0
 8005502:	d108      	bne.n	8005516 <HAL_ADC_ConfigChannel+0x76>
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	0e9b      	lsrs	r3, r3, #26
 800550a:	f003 031f 	and.w	r3, r3, #31
 800550e:	2201      	movs	r2, #1
 8005510:	fa02 f303 	lsl.w	r3, r2, r3
 8005514:	e01d      	b.n	8005552 <HAL_ADC_ConfigChannel+0xb2>
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800551e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005522:	fa93 f3a3 	rbit	r3, r3
 8005526:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800552a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800552e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005532:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 800553a:	2320      	movs	r3, #32
 800553c:	e004      	b.n	8005548 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 800553e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005542:	fab3 f383 	clz	r3, r3
 8005546:	b2db      	uxtb	r3, r3
 8005548:	f003 031f 	and.w	r3, r3, #31
 800554c:	2201      	movs	r2, #1
 800554e:	fa02 f303 	lsl.w	r3, r2, r3
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	6812      	ldr	r2, [r2, #0]
 8005556:	69d1      	ldr	r1, [r2, #28]
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	6812      	ldr	r2, [r2, #0]
 800555c:	430b      	orrs	r3, r1
 800555e:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6818      	ldr	r0, [r3, #0]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	6859      	ldr	r1, [r3, #4]
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	461a      	mov	r2, r3
 800556e:	f7fe ff76 	bl	800445e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4618      	mov	r0, r3
 8005578:	f7ff f9b0 	bl	80048dc <LL_ADC_REG_IsConversionOngoing>
 800557c:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4618      	mov	r0, r3
 8005586:	f7ff f9bc 	bl	8004902 <LL_ADC_INJ_IsConversionOngoing>
 800558a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800558e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005592:	2b00      	cmp	r3, #0
 8005594:	f040 8270 	bne.w	8005a78 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005598:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800559c:	2b00      	cmp	r3, #0
 800559e:	f040 826b 	bne.w	8005a78 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6818      	ldr	r0, [r3, #0]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	6819      	ldr	r1, [r3, #0]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	461a      	mov	r2, r3
 80055b0:	f7fe ffd1 	bl	8004556 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a6c      	ldr	r2, [pc, #432]	@ (800576c <HAL_ADC_ConfigChannel+0x2cc>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d10d      	bne.n	80055da <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	695a      	ldr	r2, [r3, #20]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	08db      	lsrs	r3, r3, #3
 80055ca:	f003 0303 	and.w	r3, r3, #3
 80055ce:	005b      	lsls	r3, r3, #1
 80055d0:	fa02 f303 	lsl.w	r3, r2, r3
 80055d4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80055d8:	e032      	b.n	8005640 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80055da:	4b65      	ldr	r3, [pc, #404]	@ (8005770 <HAL_ADC_ConfigChannel+0x2d0>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80055e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80055e6:	d10b      	bne.n	8005600 <HAL_ADC_ConfigChannel+0x160>
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	695a      	ldr	r2, [r3, #20]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	089b      	lsrs	r3, r3, #2
 80055f4:	f003 0307 	and.w	r3, r3, #7
 80055f8:	005b      	lsls	r3, r3, #1
 80055fa:	fa02 f303 	lsl.w	r3, r2, r3
 80055fe:	e01d      	b.n	800563c <HAL_ADC_ConfigChannel+0x19c>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	f003 0310 	and.w	r3, r3, #16
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10b      	bne.n	8005626 <HAL_ADC_ConfigChannel+0x186>
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	695a      	ldr	r2, [r3, #20]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	089b      	lsrs	r3, r3, #2
 800561a:	f003 0307 	and.w	r3, r3, #7
 800561e:	005b      	lsls	r3, r3, #1
 8005620:	fa02 f303 	lsl.w	r3, r2, r3
 8005624:	e00a      	b.n	800563c <HAL_ADC_ConfigChannel+0x19c>
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	695a      	ldr	r2, [r3, #20]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	089b      	lsrs	r3, r3, #2
 8005632:	f003 0304 	and.w	r3, r3, #4
 8005636:	005b      	lsls	r3, r3, #1
 8005638:	fa02 f303 	lsl.w	r3, r2, r3
 800563c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	2b04      	cmp	r3, #4
 8005646:	d048      	beq.n	80056da <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6818      	ldr	r0, [r3, #0]
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	6919      	ldr	r1, [r3, #16]
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005658:	f7fe fdfc 	bl	8004254 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a42      	ldr	r2, [pc, #264]	@ (800576c <HAL_ADC_ConfigChannel+0x2cc>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d119      	bne.n	800569a <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6818      	ldr	r0, [r3, #0]
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	6919      	ldr	r1, [r3, #16]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	69db      	ldr	r3, [r3, #28]
 8005672:	461a      	mov	r2, r3
 8005674:	f7fe fe94 	bl	80043a0 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6818      	ldr	r0, [r3, #0]
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	6919      	ldr	r1, [r3, #16]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d102      	bne.n	8005690 <HAL_ADC_ConfigChannel+0x1f0>
 800568a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800568e:	e000      	b.n	8005692 <HAL_ADC_ConfigChannel+0x1f2>
 8005690:	2300      	movs	r3, #0
 8005692:	461a      	mov	r2, r3
 8005694:	f7fe fe62 	bl	800435c <LL_ADC_SetOffsetSaturation>
 8005698:	e1ee      	b.n	8005a78 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6818      	ldr	r0, [r3, #0]
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	6919      	ldr	r1, [r3, #16]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d102      	bne.n	80056b2 <HAL_ADC_ConfigChannel+0x212>
 80056ac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80056b0:	e000      	b.n	80056b4 <HAL_ADC_ConfigChannel+0x214>
 80056b2:	2300      	movs	r3, #0
 80056b4:	461a      	mov	r2, r3
 80056b6:	f7fe fe2f 	bl	8004318 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6818      	ldr	r0, [r3, #0]
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	6919      	ldr	r1, [r3, #16]
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	7e1b      	ldrb	r3, [r3, #24]
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d102      	bne.n	80056d0 <HAL_ADC_ConfigChannel+0x230>
 80056ca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80056ce:	e000      	b.n	80056d2 <HAL_ADC_ConfigChannel+0x232>
 80056d0:	2300      	movs	r3, #0
 80056d2:	461a      	mov	r2, r3
 80056d4:	f7fe fe06 	bl	80042e4 <LL_ADC_SetDataRightShift>
 80056d8:	e1ce      	b.n	8005a78 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a23      	ldr	r2, [pc, #140]	@ (800576c <HAL_ADC_ConfigChannel+0x2cc>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	f040 8181 	bne.w	80059e8 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2100      	movs	r1, #0
 80056ec:	4618      	mov	r0, r3
 80056ee:	f7fe fde3 	bl	80042b8 <LL_ADC_GetOffsetChannel>
 80056f2:	4603      	mov	r3, r0
 80056f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d10a      	bne.n	8005712 <HAL_ADC_ConfigChannel+0x272>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2100      	movs	r1, #0
 8005702:	4618      	mov	r0, r3
 8005704:	f7fe fdd8 	bl	80042b8 <LL_ADC_GetOffsetChannel>
 8005708:	4603      	mov	r3, r0
 800570a:	0e9b      	lsrs	r3, r3, #26
 800570c:	f003 021f 	and.w	r2, r3, #31
 8005710:	e01e      	b.n	8005750 <HAL_ADC_ConfigChannel+0x2b0>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2100      	movs	r1, #0
 8005718:	4618      	mov	r0, r3
 800571a:	f7fe fdcd 	bl	80042b8 <LL_ADC_GetOffsetChannel>
 800571e:	4603      	mov	r3, r0
 8005720:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005724:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005728:	fa93 f3a3 	rbit	r3, r3
 800572c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8005730:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005734:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8005738:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800573c:	2b00      	cmp	r3, #0
 800573e:	d101      	bne.n	8005744 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8005740:	2320      	movs	r3, #32
 8005742:	e004      	b.n	800574e <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8005744:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005748:	fab3 f383 	clz	r3, r3
 800574c:	b2db      	uxtb	r3, r3
 800574e:	461a      	mov	r2, r3
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10b      	bne.n	8005774 <HAL_ADC_ConfigChannel+0x2d4>
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	0e9b      	lsrs	r3, r3, #26
 8005762:	f003 031f 	and.w	r3, r3, #31
 8005766:	e01e      	b.n	80057a6 <HAL_ADC_ConfigChannel+0x306>
 8005768:	47ff0000 	.word	0x47ff0000
 800576c:	58026000 	.word	0x58026000
 8005770:	5c001000 	.word	0x5c001000
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800577c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005780:	fa93 f3a3 	rbit	r3, r3
 8005784:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8005788:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800578c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8005790:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d101      	bne.n	800579c <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8005798:	2320      	movs	r3, #32
 800579a:	e004      	b.n	80057a6 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 800579c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80057a0:	fab3 f383 	clz	r3, r3
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d106      	bne.n	80057b8 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2200      	movs	r2, #0
 80057b0:	2100      	movs	r1, #0
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7fe fe16 	bl	80043e4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2101      	movs	r1, #1
 80057be:	4618      	mov	r0, r3
 80057c0:	f7fe fd7a 	bl	80042b8 <LL_ADC_GetOffsetChannel>
 80057c4:	4603      	mov	r3, r0
 80057c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d10a      	bne.n	80057e4 <HAL_ADC_ConfigChannel+0x344>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2101      	movs	r1, #1
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7fe fd6f 	bl	80042b8 <LL_ADC_GetOffsetChannel>
 80057da:	4603      	mov	r3, r0
 80057dc:	0e9b      	lsrs	r3, r3, #26
 80057de:	f003 021f 	and.w	r2, r3, #31
 80057e2:	e01e      	b.n	8005822 <HAL_ADC_ConfigChannel+0x382>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2101      	movs	r1, #1
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7fe fd64 	bl	80042b8 <LL_ADC_GetOffsetChannel>
 80057f0:	4603      	mov	r3, r0
 80057f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80057fa:	fa93 f3a3 	rbit	r3, r3
 80057fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8005802:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005806:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800580a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800580e:	2b00      	cmp	r3, #0
 8005810:	d101      	bne.n	8005816 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8005812:	2320      	movs	r3, #32
 8005814:	e004      	b.n	8005820 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8005816:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800581a:	fab3 f383 	clz	r3, r3
 800581e:	b2db      	uxtb	r3, r3
 8005820:	461a      	mov	r2, r3
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800582a:	2b00      	cmp	r3, #0
 800582c:	d105      	bne.n	800583a <HAL_ADC_ConfigChannel+0x39a>
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	0e9b      	lsrs	r3, r3, #26
 8005834:	f003 031f 	and.w	r3, r3, #31
 8005838:	e018      	b.n	800586c <HAL_ADC_ConfigChannel+0x3cc>
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005842:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005846:	fa93 f3a3 	rbit	r3, r3
 800584a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800584e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005852:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8005856:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800585a:	2b00      	cmp	r3, #0
 800585c:	d101      	bne.n	8005862 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 800585e:	2320      	movs	r3, #32
 8005860:	e004      	b.n	800586c <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8005862:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005866:	fab3 f383 	clz	r3, r3
 800586a:	b2db      	uxtb	r3, r3
 800586c:	429a      	cmp	r2, r3
 800586e:	d106      	bne.n	800587e <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2200      	movs	r2, #0
 8005876:	2101      	movs	r1, #1
 8005878:	4618      	mov	r0, r3
 800587a:	f7fe fdb3 	bl	80043e4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2102      	movs	r1, #2
 8005884:	4618      	mov	r0, r3
 8005886:	f7fe fd17 	bl	80042b8 <LL_ADC_GetOffsetChannel>
 800588a:	4603      	mov	r3, r0
 800588c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10a      	bne.n	80058aa <HAL_ADC_ConfigChannel+0x40a>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2102      	movs	r1, #2
 800589a:	4618      	mov	r0, r3
 800589c:	f7fe fd0c 	bl	80042b8 <LL_ADC_GetOffsetChannel>
 80058a0:	4603      	mov	r3, r0
 80058a2:	0e9b      	lsrs	r3, r3, #26
 80058a4:	f003 021f 	and.w	r2, r3, #31
 80058a8:	e01e      	b.n	80058e8 <HAL_ADC_ConfigChannel+0x448>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2102      	movs	r1, #2
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7fe fd01 	bl	80042b8 <LL_ADC_GetOffsetChannel>
 80058b6:	4603      	mov	r3, r0
 80058b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80058c0:	fa93 f3a3 	rbit	r3, r3
 80058c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80058c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80058cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80058d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d101      	bne.n	80058dc <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 80058d8:	2320      	movs	r3, #32
 80058da:	e004      	b.n	80058e6 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 80058dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058e0:	fab3 f383 	clz	r3, r3
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	461a      	mov	r2, r3
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d105      	bne.n	8005900 <HAL_ADC_ConfigChannel+0x460>
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	0e9b      	lsrs	r3, r3, #26
 80058fa:	f003 031f 	and.w	r3, r3, #31
 80058fe:	e014      	b.n	800592a <HAL_ADC_ConfigChannel+0x48a>
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005906:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005908:	fa93 f3a3 	rbit	r3, r3
 800590c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800590e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005910:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8005914:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005918:	2b00      	cmp	r3, #0
 800591a:	d101      	bne.n	8005920 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 800591c:	2320      	movs	r3, #32
 800591e:	e004      	b.n	800592a <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8005920:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005924:	fab3 f383 	clz	r3, r3
 8005928:	b2db      	uxtb	r3, r3
 800592a:	429a      	cmp	r2, r3
 800592c:	d106      	bne.n	800593c <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2200      	movs	r2, #0
 8005934:	2102      	movs	r1, #2
 8005936:	4618      	mov	r0, r3
 8005938:	f7fe fd54 	bl	80043e4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2103      	movs	r1, #3
 8005942:	4618      	mov	r0, r3
 8005944:	f7fe fcb8 	bl	80042b8 <LL_ADC_GetOffsetChannel>
 8005948:	4603      	mov	r3, r0
 800594a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10a      	bne.n	8005968 <HAL_ADC_ConfigChannel+0x4c8>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2103      	movs	r1, #3
 8005958:	4618      	mov	r0, r3
 800595a:	f7fe fcad 	bl	80042b8 <LL_ADC_GetOffsetChannel>
 800595e:	4603      	mov	r3, r0
 8005960:	0e9b      	lsrs	r3, r3, #26
 8005962:	f003 021f 	and.w	r2, r3, #31
 8005966:	e017      	b.n	8005998 <HAL_ADC_ConfigChannel+0x4f8>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2103      	movs	r1, #3
 800596e:	4618      	mov	r0, r3
 8005970:	f7fe fca2 	bl	80042b8 <LL_ADC_GetOffsetChannel>
 8005974:	4603      	mov	r3, r0
 8005976:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005978:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800597a:	fa93 f3a3 	rbit	r3, r3
 800597e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8005980:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005982:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8005984:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005986:	2b00      	cmp	r3, #0
 8005988:	d101      	bne.n	800598e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800598a:	2320      	movs	r3, #32
 800598c:	e003      	b.n	8005996 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800598e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005990:	fab3 f383 	clz	r3, r3
 8005994:	b2db      	uxtb	r3, r3
 8005996:	461a      	mov	r2, r3
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d105      	bne.n	80059b0 <HAL_ADC_ConfigChannel+0x510>
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	0e9b      	lsrs	r3, r3, #26
 80059aa:	f003 031f 	and.w	r3, r3, #31
 80059ae:	e011      	b.n	80059d4 <HAL_ADC_ConfigChannel+0x534>
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80059b8:	fa93 f3a3 	rbit	r3, r3
 80059bc:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80059be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80059c0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80059c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d101      	bne.n	80059cc <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 80059c8:	2320      	movs	r3, #32
 80059ca:	e003      	b.n	80059d4 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 80059cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80059ce:	fab3 f383 	clz	r3, r3
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d14f      	bne.n	8005a78 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2200      	movs	r2, #0
 80059de:	2103      	movs	r1, #3
 80059e0:	4618      	mov	r0, r3
 80059e2:	f7fe fcff 	bl	80043e4 <LL_ADC_SetOffsetState>
 80059e6:	e047      	b.n	8005a78 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	069b      	lsls	r3, r3, #26
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d107      	bne.n	8005a0c <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005a0a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a12:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	069b      	lsls	r3, r3, #26
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d107      	bne.n	8005a30 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005a2e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a36:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	069b      	lsls	r3, r3, #26
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d107      	bne.n	8005a54 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005a52:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a5a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	069b      	lsls	r3, r3, #26
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d107      	bne.n	8005a78 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005a76:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7fe fef3 	bl	8004868 <LL_ADC_IsEnabled>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f040 8219 	bne.w	8005ebc <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6818      	ldr	r0, [r3, #0]
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	6819      	ldr	r1, [r3, #0]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	461a      	mov	r2, r3
 8005a98:	f7fe fd88 	bl	80045ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	4aa1      	ldr	r2, [pc, #644]	@ (8005d28 <HAL_ADC_ConfigChannel+0x888>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	f040 812e 	bne.w	8005d04 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d10b      	bne.n	8005ad0 <HAL_ADC_ConfigChannel+0x630>
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	0e9b      	lsrs	r3, r3, #26
 8005abe:	3301      	adds	r3, #1
 8005ac0:	f003 031f 	and.w	r3, r3, #31
 8005ac4:	2b09      	cmp	r3, #9
 8005ac6:	bf94      	ite	ls
 8005ac8:	2301      	movls	r3, #1
 8005aca:	2300      	movhi	r3, #0
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	e019      	b.n	8005b04 <HAL_ADC_ConfigChannel+0x664>
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ad6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ad8:	fa93 f3a3 	rbit	r3, r3
 8005adc:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8005ade:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ae0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8005ae2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d101      	bne.n	8005aec <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8005ae8:	2320      	movs	r3, #32
 8005aea:	e003      	b.n	8005af4 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8005aec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005aee:	fab3 f383 	clz	r3, r3
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	3301      	adds	r3, #1
 8005af6:	f003 031f 	and.w	r3, r3, #31
 8005afa:	2b09      	cmp	r3, #9
 8005afc:	bf94      	ite	ls
 8005afe:	2301      	movls	r3, #1
 8005b00:	2300      	movhi	r3, #0
 8005b02:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d079      	beq.n	8005bfc <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d107      	bne.n	8005b24 <HAL_ADC_ConfigChannel+0x684>
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	0e9b      	lsrs	r3, r3, #26
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	069b      	lsls	r3, r3, #26
 8005b1e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005b22:	e015      	b.n	8005b50 <HAL_ADC_ConfigChannel+0x6b0>
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b2c:	fa93 f3a3 	rbit	r3, r3
 8005b30:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8005b32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b34:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8005b36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d101      	bne.n	8005b40 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8005b3c:	2320      	movs	r3, #32
 8005b3e:	e003      	b.n	8005b48 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8005b40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b42:	fab3 f383 	clz	r3, r3
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	3301      	adds	r3, #1
 8005b4a:	069b      	lsls	r3, r3, #26
 8005b4c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d109      	bne.n	8005b70 <HAL_ADC_ConfigChannel+0x6d0>
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	0e9b      	lsrs	r3, r3, #26
 8005b62:	3301      	adds	r3, #1
 8005b64:	f003 031f 	and.w	r3, r3, #31
 8005b68:	2101      	movs	r1, #1
 8005b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b6e:	e017      	b.n	8005ba0 <HAL_ADC_ConfigChannel+0x700>
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b78:	fa93 f3a3 	rbit	r3, r3
 8005b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8005b7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b80:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8005b82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d101      	bne.n	8005b8c <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8005b88:	2320      	movs	r3, #32
 8005b8a:	e003      	b.n	8005b94 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8005b8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b8e:	fab3 f383 	clz	r3, r3
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	3301      	adds	r3, #1
 8005b96:	f003 031f 	and.w	r3, r3, #31
 8005b9a:	2101      	movs	r1, #1
 8005b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8005ba0:	ea42 0103 	orr.w	r1, r2, r3
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d10a      	bne.n	8005bc6 <HAL_ADC_ConfigChannel+0x726>
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	0e9b      	lsrs	r3, r3, #26
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	f003 021f 	and.w	r2, r3, #31
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	005b      	lsls	r3, r3, #1
 8005bc0:	4413      	add	r3, r2
 8005bc2:	051b      	lsls	r3, r3, #20
 8005bc4:	e018      	b.n	8005bf8 <HAL_ADC_ConfigChannel+0x758>
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bce:	fa93 f3a3 	rbit	r3, r3
 8005bd2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8005bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8005bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d101      	bne.n	8005be2 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8005bde:	2320      	movs	r3, #32
 8005be0:	e003      	b.n	8005bea <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8005be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005be4:	fab3 f383 	clz	r3, r3
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	3301      	adds	r3, #1
 8005bec:	f003 021f 	and.w	r2, r3, #31
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	005b      	lsls	r3, r3, #1
 8005bf4:	4413      	add	r3, r2
 8005bf6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005bf8:	430b      	orrs	r3, r1
 8005bfa:	e07e      	b.n	8005cfa <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d107      	bne.n	8005c18 <HAL_ADC_ConfigChannel+0x778>
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	0e9b      	lsrs	r3, r3, #26
 8005c0e:	3301      	adds	r3, #1
 8005c10:	069b      	lsls	r3, r3, #26
 8005c12:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005c16:	e015      	b.n	8005c44 <HAL_ADC_ConfigChannel+0x7a4>
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c20:	fa93 f3a3 	rbit	r3, r3
 8005c24:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8005c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8005c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d101      	bne.n	8005c34 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8005c30:	2320      	movs	r3, #32
 8005c32:	e003      	b.n	8005c3c <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8005c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c36:	fab3 f383 	clz	r3, r3
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	069b      	lsls	r3, r3, #26
 8005c40:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d109      	bne.n	8005c64 <HAL_ADC_ConfigChannel+0x7c4>
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	0e9b      	lsrs	r3, r3, #26
 8005c56:	3301      	adds	r3, #1
 8005c58:	f003 031f 	and.w	r3, r3, #31
 8005c5c:	2101      	movs	r1, #1
 8005c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c62:	e017      	b.n	8005c94 <HAL_ADC_ConfigChannel+0x7f4>
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	fa93 f3a3 	rbit	r3, r3
 8005c70:	61bb      	str	r3, [r7, #24]
  return result;
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005c76:	6a3b      	ldr	r3, [r7, #32]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d101      	bne.n	8005c80 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8005c7c:	2320      	movs	r3, #32
 8005c7e:	e003      	b.n	8005c88 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8005c80:	6a3b      	ldr	r3, [r7, #32]
 8005c82:	fab3 f383 	clz	r3, r3
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	3301      	adds	r3, #1
 8005c8a:	f003 031f 	and.w	r3, r3, #31
 8005c8e:	2101      	movs	r1, #1
 8005c90:	fa01 f303 	lsl.w	r3, r1, r3
 8005c94:	ea42 0103 	orr.w	r1, r2, r3
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d10d      	bne.n	8005cc0 <HAL_ADC_ConfigChannel+0x820>
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	0e9b      	lsrs	r3, r3, #26
 8005caa:	3301      	adds	r3, #1
 8005cac:	f003 021f 	and.w	r2, r3, #31
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	005b      	lsls	r3, r3, #1
 8005cb4:	4413      	add	r3, r2
 8005cb6:	3b1e      	subs	r3, #30
 8005cb8:	051b      	lsls	r3, r3, #20
 8005cba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005cbe:	e01b      	b.n	8005cf8 <HAL_ADC_ConfigChannel+0x858>
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	fa93 f3a3 	rbit	r3, r3
 8005ccc:	60fb      	str	r3, [r7, #12]
  return result;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d101      	bne.n	8005cdc <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8005cd8:	2320      	movs	r3, #32
 8005cda:	e003      	b.n	8005ce4 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	fab3 f383 	clz	r3, r3
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	f003 021f 	and.w	r2, r3, #31
 8005cea:	4613      	mov	r3, r2
 8005cec:	005b      	lsls	r3, r3, #1
 8005cee:	4413      	add	r3, r2
 8005cf0:	3b1e      	subs	r3, #30
 8005cf2:	051b      	lsls	r3, r3, #20
 8005cf4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005cf8:	430b      	orrs	r3, r1
 8005cfa:	683a      	ldr	r2, [r7, #0]
 8005cfc:	6892      	ldr	r2, [r2, #8]
 8005cfe:	4619      	mov	r1, r3
 8005d00:	f7fe fc29 	bl	8004556 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f280 80d7 	bge.w	8005ebc <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a06      	ldr	r2, [pc, #24]	@ (8005d2c <HAL_ADC_ConfigChannel+0x88c>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d004      	beq.n	8005d22 <HAL_ADC_ConfigChannel+0x882>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a04      	ldr	r2, [pc, #16]	@ (8005d30 <HAL_ADC_ConfigChannel+0x890>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d10a      	bne.n	8005d38 <HAL_ADC_ConfigChannel+0x898>
 8005d22:	4b04      	ldr	r3, [pc, #16]	@ (8005d34 <HAL_ADC_ConfigChannel+0x894>)
 8005d24:	e009      	b.n	8005d3a <HAL_ADC_ConfigChannel+0x89a>
 8005d26:	bf00      	nop
 8005d28:	47ff0000 	.word	0x47ff0000
 8005d2c:	40022000 	.word	0x40022000
 8005d30:	40022100 	.word	0x40022100
 8005d34:	40022300 	.word	0x40022300
 8005d38:	4b65      	ldr	r3, [pc, #404]	@ (8005ed0 <HAL_ADC_ConfigChannel+0xa30>)
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7fe fa7c 	bl	8004238 <LL_ADC_GetCommonPathInternalCh>
 8005d40:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a62      	ldr	r2, [pc, #392]	@ (8005ed4 <HAL_ADC_ConfigChannel+0xa34>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d004      	beq.n	8005d58 <HAL_ADC_ConfigChannel+0x8b8>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a61      	ldr	r2, [pc, #388]	@ (8005ed8 <HAL_ADC_ConfigChannel+0xa38>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d10e      	bne.n	8005d76 <HAL_ADC_ConfigChannel+0x8d6>
 8005d58:	485e      	ldr	r0, [pc, #376]	@ (8005ed4 <HAL_ADC_ConfigChannel+0xa34>)
 8005d5a:	f7fe fd85 	bl	8004868 <LL_ADC_IsEnabled>
 8005d5e:	4604      	mov	r4, r0
 8005d60:	485d      	ldr	r0, [pc, #372]	@ (8005ed8 <HAL_ADC_ConfigChannel+0xa38>)
 8005d62:	f7fe fd81 	bl	8004868 <LL_ADC_IsEnabled>
 8005d66:	4603      	mov	r3, r0
 8005d68:	4323      	orrs	r3, r4
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	bf0c      	ite	eq
 8005d6e:	2301      	moveq	r3, #1
 8005d70:	2300      	movne	r3, #0
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	e008      	b.n	8005d88 <HAL_ADC_ConfigChannel+0x8e8>
 8005d76:	4859      	ldr	r0, [pc, #356]	@ (8005edc <HAL_ADC_ConfigChannel+0xa3c>)
 8005d78:	f7fe fd76 	bl	8004868 <LL_ADC_IsEnabled>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	bf0c      	ite	eq
 8005d82:	2301      	moveq	r3, #1
 8005d84:	2300      	movne	r3, #0
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f000 8084 	beq.w	8005e96 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a53      	ldr	r2, [pc, #332]	@ (8005ee0 <HAL_ADC_ConfigChannel+0xa40>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d132      	bne.n	8005dfe <HAL_ADC_ConfigChannel+0x95e>
 8005d98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d12c      	bne.n	8005dfe <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a4c      	ldr	r2, [pc, #304]	@ (8005edc <HAL_ADC_ConfigChannel+0xa3c>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	f040 8086 	bne.w	8005ebc <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a47      	ldr	r2, [pc, #284]	@ (8005ed4 <HAL_ADC_ConfigChannel+0xa34>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d004      	beq.n	8005dc4 <HAL_ADC_ConfigChannel+0x924>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a46      	ldr	r2, [pc, #280]	@ (8005ed8 <HAL_ADC_ConfigChannel+0xa38>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d101      	bne.n	8005dc8 <HAL_ADC_ConfigChannel+0x928>
 8005dc4:	4a47      	ldr	r2, [pc, #284]	@ (8005ee4 <HAL_ADC_ConfigChannel+0xa44>)
 8005dc6:	e000      	b.n	8005dca <HAL_ADC_ConfigChannel+0x92a>
 8005dc8:	4a41      	ldr	r2, [pc, #260]	@ (8005ed0 <HAL_ADC_ConfigChannel+0xa30>)
 8005dca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005dce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	4610      	mov	r0, r2
 8005dd6:	f7fe fa1c 	bl	8004212 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005dda:	4b43      	ldr	r3, [pc, #268]	@ (8005ee8 <HAL_ADC_ConfigChannel+0xa48>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	099b      	lsrs	r3, r3, #6
 8005de0:	4a42      	ldr	r2, [pc, #264]	@ (8005eec <HAL_ADC_ConfigChannel+0xa4c>)
 8005de2:	fba2 2303 	umull	r2, r3, r2, r3
 8005de6:	099b      	lsrs	r3, r3, #6
 8005de8:	3301      	adds	r3, #1
 8005dea:	005b      	lsls	r3, r3, #1
 8005dec:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005dee:	e002      	b.n	8005df6 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	3b01      	subs	r3, #1
 8005df4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d1f9      	bne.n	8005df0 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005dfc:	e05e      	b.n	8005ebc <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a3b      	ldr	r2, [pc, #236]	@ (8005ef0 <HAL_ADC_ConfigChannel+0xa50>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d120      	bne.n	8005e4a <HAL_ADC_ConfigChannel+0x9aa>
 8005e08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e0c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d11a      	bne.n	8005e4a <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a30      	ldr	r2, [pc, #192]	@ (8005edc <HAL_ADC_ConfigChannel+0xa3c>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d14e      	bne.n	8005ebc <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a2c      	ldr	r2, [pc, #176]	@ (8005ed4 <HAL_ADC_ConfigChannel+0xa34>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d004      	beq.n	8005e32 <HAL_ADC_ConfigChannel+0x992>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a2a      	ldr	r2, [pc, #168]	@ (8005ed8 <HAL_ADC_ConfigChannel+0xa38>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d101      	bne.n	8005e36 <HAL_ADC_ConfigChannel+0x996>
 8005e32:	4a2c      	ldr	r2, [pc, #176]	@ (8005ee4 <HAL_ADC_ConfigChannel+0xa44>)
 8005e34:	e000      	b.n	8005e38 <HAL_ADC_ConfigChannel+0x998>
 8005e36:	4a26      	ldr	r2, [pc, #152]	@ (8005ed0 <HAL_ADC_ConfigChannel+0xa30>)
 8005e38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e3c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e40:	4619      	mov	r1, r3
 8005e42:	4610      	mov	r0, r2
 8005e44:	f7fe f9e5 	bl	8004212 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005e48:	e038      	b.n	8005ebc <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a29      	ldr	r2, [pc, #164]	@ (8005ef4 <HAL_ADC_ConfigChannel+0xa54>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d133      	bne.n	8005ebc <HAL_ADC_ConfigChannel+0xa1c>
 8005e54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d12d      	bne.n	8005ebc <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a1d      	ldr	r2, [pc, #116]	@ (8005edc <HAL_ADC_ConfigChannel+0xa3c>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d128      	bne.n	8005ebc <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a19      	ldr	r2, [pc, #100]	@ (8005ed4 <HAL_ADC_ConfigChannel+0xa34>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d004      	beq.n	8005e7e <HAL_ADC_ConfigChannel+0x9de>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a17      	ldr	r2, [pc, #92]	@ (8005ed8 <HAL_ADC_ConfigChannel+0xa38>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d101      	bne.n	8005e82 <HAL_ADC_ConfigChannel+0x9e2>
 8005e7e:	4a19      	ldr	r2, [pc, #100]	@ (8005ee4 <HAL_ADC_ConfigChannel+0xa44>)
 8005e80:	e000      	b.n	8005e84 <HAL_ADC_ConfigChannel+0x9e4>
 8005e82:	4a13      	ldr	r2, [pc, #76]	@ (8005ed0 <HAL_ADC_ConfigChannel+0xa30>)
 8005e84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e88:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	4610      	mov	r0, r2
 8005e90:	f7fe f9bf 	bl	8004212 <LL_ADC_SetCommonPathInternalCh>
 8005e94:	e012      	b.n	8005ebc <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e9a:	f043 0220 	orr.w	r2, r3, #32
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8005ea8:	e008      	b.n	8005ebc <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005eae:	f043 0220 	orr.w	r2, r3, #32
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005ec4:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	37e4      	adds	r7, #228	@ 0xe4
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd90      	pop	{r4, r7, pc}
 8005ed0:	58026300 	.word	0x58026300
 8005ed4:	40022000 	.word	0x40022000
 8005ed8:	40022100 	.word	0x40022100
 8005edc:	58026000 	.word	0x58026000
 8005ee0:	c7520000 	.word	0xc7520000
 8005ee4:	40022300 	.word	0x40022300
 8005ee8:	24000038 	.word	0x24000038
 8005eec:	053e2d63 	.word	0x053e2d63
 8005ef0:	c3210000 	.word	0xc3210000
 8005ef4:	cb840000 	.word	0xcb840000

08005ef8 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b094      	sub	sp, #80	@ 0x50
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f02:	2300      	movs	r3, #0
 8005f04:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));

  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005f10:	d003      	beq.n	8005f1a <HAL_ADC_AnalogWDGConfig+0x22>
      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	685b      	ldr	r3, [r3, #4]
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8005f16:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
  }

#if defined(ADC_VER_V5_V90)

  if (hadc->Instance == ADC3)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a8c      	ldr	r2, [pc, #560]	@ (8006150 <HAL_ADC_AnalogWDGConfig+0x258>)
 8005f20:	4293      	cmp	r3, r2
      assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
    }
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d101      	bne.n	8005f30 <HAL_ADC_AnalogWDGConfig+0x38>
 8005f2c:	2302      	movs	r3, #2
 8005f2e:	e36b      	b.n	8006608 <HAL_ADC_AnalogWDGConfig+0x710>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  /*  - Analog watchdog thresholds                                            */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f7fe fccd 	bl	80048dc <LL_ADC_REG_IsConversionOngoing>
 8005f42:	6438      	str	r0, [r7, #64]	@ 0x40
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7fe fcda 	bl	8004902 <LL_ADC_INJ_IsConversionOngoing>
 8005f4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005f50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f040 8349 	bne.w	80065ea <HAL_ADC_AnalogWDGConfig+0x6f2>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005f58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	f040 8345 	bne.w	80065ea <HAL_ADC_AnalogWDGConfig+0x6f2>
     )
  {
    /* Analog watchdog configuration */
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a7b      	ldr	r2, [pc, #492]	@ (8006154 <HAL_ADC_AnalogWDGConfig+0x25c>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	f040 8131 	bne.w	80061ce <HAL_ADC_AnalogWDGConfig+0x2d6>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (AnalogWDGConfig->WatchdogMode)
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 8005f74:	d034      	beq.n	8005fe0 <HAL_ADC_AnalogWDGConfig+0xe8>
 8005f76:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 8005f7a:	d856      	bhi.n	800602a <HAL_ADC_AnalogWDGConfig+0x132>
 8005f7c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005f80:	d04b      	beq.n	800601a <HAL_ADC_AnalogWDGConfig+0x122>
 8005f82:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005f86:	d850      	bhi.n	800602a <HAL_ADC_AnalogWDGConfig+0x132>
 8005f88:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8005f8c:	d01b      	beq.n	8005fc6 <HAL_ADC_AnalogWDGConfig+0xce>
 8005f8e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8005f92:	d84a      	bhi.n	800602a <HAL_ADC_AnalogWDGConfig+0x132>
 8005f94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f98:	d037      	beq.n	800600a <HAL_ADC_AnalogWDGConfig+0x112>
 8005f9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f9e:	d844      	bhi.n	800602a <HAL_ADC_AnalogWDGConfig+0x132>
 8005fa0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005fa4:	d029      	beq.n	8005ffa <HAL_ADC_AnalogWDGConfig+0x102>
 8005fa6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005faa:	d13e      	bne.n	800602a <HAL_ADC_AnalogWDGConfig+0x132>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6818      	ldr	r0, [r3, #0]
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8005fb8:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	4965      	ldr	r1, [pc, #404]	@ (8006154 <HAL_ADC_AnalogWDGConfig+0x25c>)
 8005fc0:	f7fe fb34 	bl	800462c <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR));
          break;
 8005fc4:	e039      	b.n	800603a <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6818      	ldr	r0, [r3, #0]
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8005fd2:	f043 73a0 	orr.w	r3, r3, #20971520	@ 0x1400000
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	495e      	ldr	r1, [pc, #376]	@ (8006154 <HAL_ADC_AnalogWDGConfig+0x25c>)
 8005fda:	f7fe fb27 	bl	800462c <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_INJECTED));
          break;
 8005fde:	e02c      	b.n	800603a <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6818      	ldr	r0, [r3, #0]
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8005fec:	f043 73e0 	orr.w	r3, r3, #29360128	@ 0x1c00000
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	4958      	ldr	r1, [pc, #352]	@ (8006154 <HAL_ADC_AnalogWDGConfig+0x25c>)
 8005ff4:	f7fe fb1a 	bl	800462c <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 8005ff8:	e01f      	b.n	800603a <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a56      	ldr	r2, [pc, #344]	@ (8006158 <HAL_ADC_AnalogWDGConfig+0x260>)
 8006000:	4954      	ldr	r1, [pc, #336]	@ (8006154 <HAL_ADC_AnalogWDGConfig+0x25c>)
 8006002:	4618      	mov	r0, r3
 8006004:	f7fe fb12 	bl	800462c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006008:	e017      	b.n	800603a <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a53      	ldr	r2, [pc, #332]	@ (800615c <HAL_ADC_AnalogWDGConfig+0x264>)
 8006010:	4950      	ldr	r1, [pc, #320]	@ (8006154 <HAL_ADC_AnalogWDGConfig+0x25c>)
 8006012:	4618      	mov	r0, r3
 8006014:	f7fe fb0a 	bl	800462c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006018:	e00f      	b.n	800603a <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a50      	ldr	r2, [pc, #320]	@ (8006160 <HAL_ADC_AnalogWDGConfig+0x268>)
 8006020:	494c      	ldr	r1, [pc, #304]	@ (8006154 <HAL_ADC_AnalogWDGConfig+0x25c>)
 8006022:	4618      	mov	r0, r3
 8006024:	f7fe fb02 	bl	800462c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006028:	e007      	b.n	800603a <HAL_ADC_AnalogWDGConfig+0x142>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2200      	movs	r2, #0
 8006030:	4948      	ldr	r1, [pc, #288]	@ (8006154 <HAL_ADC_AnalogWDGConfig+0x25c>)
 8006032:	4618      	mov	r0, r3
 8006034:	f7fe fafa 	bl	800462c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006038:	bf00      	nop
      }

      /* Shift the offset in function of the selected ADC resolution:         */
      /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
      /* are set to 0                                                         */
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 800603a:	4b4a      	ldr	r3, [pc, #296]	@ (8006164 <HAL_ADC_AnalogWDGConfig+0x26c>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006042:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006046:	d10b      	bne.n	8006060 <HAL_ADC_AnalogWDGConfig+0x168>
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	691a      	ldr	r2, [r3, #16]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	089b      	lsrs	r3, r3, #2
 8006054:	f003 0307 	and.w	r3, r3, #7
 8006058:	005b      	lsls	r3, r3, #1
 800605a:	fa02 f303 	lsl.w	r3, r2, r3
 800605e:	e01d      	b.n	800609c <HAL_ADC_AnalogWDGConfig+0x1a4>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	f003 0310 	and.w	r3, r3, #16
 800606a:	2b00      	cmp	r3, #0
 800606c:	d10b      	bne.n	8006086 <HAL_ADC_AnalogWDGConfig+0x18e>
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	691a      	ldr	r2, [r3, #16]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	089b      	lsrs	r3, r3, #2
 800607a:	f003 0307 	and.w	r3, r3, #7
 800607e:	005b      	lsls	r3, r3, #1
 8006080:	fa02 f303 	lsl.w	r3, r2, r3
 8006084:	e00a      	b.n	800609c <HAL_ADC_AnalogWDGConfig+0x1a4>
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	691a      	ldr	r2, [r3, #16]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	089b      	lsrs	r3, r3, #2
 8006092:	f003 0304 	and.w	r3, r3, #4
 8006096:	005b      	lsls	r3, r3, #1
 8006098:	fa02 f303 	lsl.w	r3, r2, r3
 800609c:	64bb      	str	r3, [r7, #72]	@ 0x48
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 800609e:	4b31      	ldr	r3, [pc, #196]	@ (8006164 <HAL_ADC_AnalogWDGConfig+0x26c>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80060a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060aa:	d10b      	bne.n	80060c4 <HAL_ADC_AnalogWDGConfig+0x1cc>
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	695a      	ldr	r2, [r3, #20]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	089b      	lsrs	r3, r3, #2
 80060b8:	f003 0307 	and.w	r3, r3, #7
 80060bc:	005b      	lsls	r3, r3, #1
 80060be:	fa02 f303 	lsl.w	r3, r2, r3
 80060c2:	e01d      	b.n	8006100 <HAL_ADC_AnalogWDGConfig+0x208>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	f003 0310 	and.w	r3, r3, #16
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10b      	bne.n	80060ea <HAL_ADC_AnalogWDGConfig+0x1f2>
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	695a      	ldr	r2, [r3, #20]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	089b      	lsrs	r3, r3, #2
 80060de:	f003 0307 	and.w	r3, r3, #7
 80060e2:	005b      	lsls	r3, r3, #1
 80060e4:	fa02 f303 	lsl.w	r3, r2, r3
 80060e8:	e00a      	b.n	8006100 <HAL_ADC_AnalogWDGConfig+0x208>
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	695a      	ldr	r2, [r3, #20]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	089b      	lsrs	r3, r3, #2
 80060f6:	f003 0304 	and.w	r3, r3, #4
 80060fa:	005b      	lsls	r3, r3, #1
 80060fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006100:	647b      	str	r3, [r7, #68]	@ 0x44

      /* Set the high and low thresholds */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a12      	ldr	r2, [pc, #72]	@ (8006150 <HAL_ADC_AnalogWDGConfig+0x258>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d131      	bne.n	8006170 <HAL_ADC_AnalogWDGConfig+0x278>
      {
        MODIFY_REG(hadc->Instance->LTR1_TR1,
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	699a      	ldr	r2, [r3, #24]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	430a      	orrs	r2, r1
 8006120:	621a      	str	r2, [r3, #32]
                   ADC3_TR1_AWDFILT,
                   AnalogWDGConfig->FilteringConfig);
        MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC3_TR1_LT1, tmpAWDLowThresholdShifted);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	6a1a      	ldr	r2, [r3, #32]
 8006128:	4b0f      	ldr	r3, [pc, #60]	@ (8006168 <HAL_ADC_AnalogWDGConfig+0x270>)
 800612a:	4013      	ands	r3, r2
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	6812      	ldr	r2, [r2, #0]
 8006130:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006132:	430b      	orrs	r3, r1
 8006134:	6213      	str	r3, [r2, #32]
        MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC3_TR1_HT1, (tmpAWDHighThresholdShifted << ADC3_TR1_HT1_Pos));
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	6a1a      	ldr	r2, [r3, #32]
 800613c:	4b0b      	ldr	r3, [pc, #44]	@ (800616c <HAL_ADC_AnalogWDGConfig+0x274>)
 800613e:	4013      	ands	r3, r2
 8006140:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006142:	0411      	lsls	r1, r2, #16
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	6812      	ldr	r2, [r2, #0]
 8006148:	430b      	orrs	r3, r1
 800614a:	6213      	str	r3, [r2, #32]
 800614c:	e024      	b.n	8006198 <HAL_ADC_AnalogWDGConfig+0x2a0>
 800614e:	bf00      	nop
 8006150:	58026000 	.word	0x58026000
 8006154:	7dc00000 	.word	0x7dc00000
 8006158:	008fffff 	.word	0x008fffff
 800615c:	010fffff 	.word	0x010fffff
 8006160:	018fffff 	.word	0x018fffff
 8006164:	5c001000 	.word	0x5c001000
 8006168:	fffff000 	.word	0xfffff000
 800616c:	f000ffff 	.word	0xf000ffff
      }
      else
      {

        MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006180:	430a      	orrs	r2, r1
 8006182:	621a      	str	r2, [r3, #32]
        MODIFY_REG(hadc->Instance->HTR1_TR2,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800618a:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006194:	430a      	orrs	r2, r1
 8006196:	625a      	str	r2, [r3, #36]	@ 0x24
      MODIFY_REG(hadc->Instance->LTR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
      MODIFY_REG(hadc->Instance->HTR1,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
#endif

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800619c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4618      	mov	r0, r3
 80061aa:	f7fe fbbd 	bl	8004928 <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (AnalogWDGConfig->ITMode == ENABLE)
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	7b1b      	ldrb	r3, [r3, #12]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d105      	bne.n	80061c2 <HAL_ADC_AnalogWDGConfig+0x2ca>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7fe fbdd 	bl	800497a <LL_ADC_EnableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80061c0:	e21c      	b.n	80065fc <HAL_ADC_AnalogWDGConfig+0x704>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7fe fc07 	bl	80049da <LL_ADC_DisableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80061cc:	e216      	b.n	80065fc <HAL_ADC_AnalogWDGConfig+0x704>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (AnalogWDGConfig->WatchdogMode)
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 80061d6:	d01f      	beq.n	8006218 <HAL_ADC_AnalogWDGConfig+0x320>
 80061d8:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 80061dc:	f200 80f4 	bhi.w	80063c8 <HAL_ADC_AnalogWDGConfig+0x4d0>
 80061e0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80061e4:	d07d      	beq.n	80062e2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 80061e6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80061ea:	f200 80ed 	bhi.w	80063c8 <HAL_ADC_AnalogWDGConfig+0x4d0>
 80061ee:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80061f2:	d011      	beq.n	8006218 <HAL_ADC_AnalogWDGConfig+0x320>
 80061f4:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80061f8:	f200 80e6 	bhi.w	80063c8 <HAL_ADC_AnalogWDGConfig+0x4d0>
 80061fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006200:	d06f      	beq.n	80062e2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 8006202:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006206:	f200 80df 	bhi.w	80063c8 <HAL_ADC_AnalogWDGConfig+0x4d0>
 800620a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800620e:	d068      	beq.n	80062e2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 8006210:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006214:	f040 80d8 	bne.w	80063c8 <HAL_ADC_AnalogWDGConfig+0x4d0>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a9c      	ldr	r2, [pc, #624]	@ (8006490 <HAL_ADC_AnalogWDGConfig+0x598>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d12f      	bne.n	8006282 <HAL_ADC_AnalogWDGConfig+0x38a>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800622a:	2b00      	cmp	r3, #0
 800622c:	d108      	bne.n	8006240 <HAL_ADC_AnalogWDGConfig+0x348>
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	0e9b      	lsrs	r3, r3, #26
 8006234:	f003 031f 	and.w	r3, r3, #31
 8006238:	2201      	movs	r2, #1
 800623a:	fa02 f303 	lsl.w	r3, r2, r3
 800623e:	e016      	b.n	800626e <HAL_ADC_AnalogWDGConfig+0x376>
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006248:	fa93 f3a3 	rbit	r3, r3
 800624c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800624e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006250:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8006252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006254:	2b00      	cmp	r3, #0
 8006256:	d101      	bne.n	800625c <HAL_ADC_AnalogWDGConfig+0x364>
    return 32U;
 8006258:	2320      	movs	r3, #32
 800625a:	e003      	b.n	8006264 <HAL_ADC_AnalogWDGConfig+0x36c>
  return __builtin_clz(value);
 800625c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800625e:	fab3 f383 	clz	r3, r3
 8006262:	b2db      	uxtb	r3, r3
 8006264:	f003 031f 	and.w	r3, r3, #31
 8006268:	2201      	movs	r2, #1
 800626a:	fa02 f303 	lsl.w	r3, r2, r3
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	6812      	ldr	r2, [r2, #0]
 8006272:	f8d2 10a0 	ldr.w	r1, [r2, #160]	@ 0xa0
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	6812      	ldr	r2, [r2, #0]
 800627a:	430b      	orrs	r3, r1
 800627c:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 8006280:	e0ab      	b.n	80063da <HAL_ADC_AnalogWDGConfig+0x4e2>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800628a:	2b00      	cmp	r3, #0
 800628c:	d108      	bne.n	80062a0 <HAL_ADC_AnalogWDGConfig+0x3a8>
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	0e9b      	lsrs	r3, r3, #26
 8006294:	f003 031f 	and.w	r3, r3, #31
 8006298:	2201      	movs	r2, #1
 800629a:	fa02 f303 	lsl.w	r3, r2, r3
 800629e:	e016      	b.n	80062ce <HAL_ADC_AnalogWDGConfig+0x3d6>
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062a8:	fa93 f3a3 	rbit	r3, r3
 80062ac:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80062ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80062b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d101      	bne.n	80062bc <HAL_ADC_AnalogWDGConfig+0x3c4>
    return 32U;
 80062b8:	2320      	movs	r3, #32
 80062ba:	e003      	b.n	80062c4 <HAL_ADC_AnalogWDGConfig+0x3cc>
  return __builtin_clz(value);
 80062bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062be:	fab3 f383 	clz	r3, r3
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	f003 031f 	and.w	r3, r3, #31
 80062c8:	2201      	movs	r2, #1
 80062ca:	fa02 f303 	lsl.w	r3, r2, r3
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	6812      	ldr	r2, [r2, #0]
 80062d2:	f8d2 10a4 	ldr.w	r1, [r2, #164]	@ 0xa4
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	6812      	ldr	r2, [r2, #0]
 80062da:	430b      	orrs	r3, r1
 80062dc:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
          break;
 80062e0:	e07b      	b.n	80063da <HAL_ADC_AnalogWDGConfig+0x4e2>
        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:

#if defined(ADC_VER_V5_V90)
          if (hadc->Instance == ADC3)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a6b      	ldr	r2, [pc, #428]	@ (8006494 <HAL_ADC_AnalogWDGConfig+0x59c>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d108      	bne.n	80062fe <HAL_ADC_AnalogWDGConfig+0x406>
          {

            LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6818      	ldr	r0, [r3, #0]
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a68      	ldr	r2, [pc, #416]	@ (8006498 <HAL_ADC_AnalogWDGConfig+0x5a0>)
 80062f6:	4619      	mov	r1, r3
 80062f8:	f7fe f998 	bl	800462c <LL_ADC_SetAnalogWDMonitChannels>
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
            }
#if defined(ADC_VER_V5_V90)
          }
#endif  /*ADC_VER_V5_V90*/
          break;
 80062fc:	e06d      	b.n	80063da <HAL_ADC_AnalogWDGConfig+0x4e2>
            if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a63      	ldr	r2, [pc, #396]	@ (8006490 <HAL_ADC_AnalogWDGConfig+0x598>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d12f      	bne.n	8006368 <HAL_ADC_AnalogWDGConfig+0x470>
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006310:	2b00      	cmp	r3, #0
 8006312:	d108      	bne.n	8006326 <HAL_ADC_AnalogWDGConfig+0x42e>
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	0e9b      	lsrs	r3, r3, #26
 800631a:	f003 031f 	and.w	r3, r3, #31
 800631e:	2201      	movs	r2, #1
 8006320:	fa02 f303 	lsl.w	r3, r2, r3
 8006324:	e016      	b.n	8006354 <HAL_ADC_AnalogWDGConfig+0x45c>
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	fa93 f3a3 	rbit	r3, r3
 8006332:	61bb      	str	r3, [r7, #24]
  return result;
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006338:	6a3b      	ldr	r3, [r7, #32]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <HAL_ADC_AnalogWDGConfig+0x44a>
    return 32U;
 800633e:	2320      	movs	r3, #32
 8006340:	e003      	b.n	800634a <HAL_ADC_AnalogWDGConfig+0x452>
  return __builtin_clz(value);
 8006342:	6a3b      	ldr	r3, [r7, #32]
 8006344:	fab3 f383 	clz	r3, r3
 8006348:	b2db      	uxtb	r3, r3
 800634a:	f003 031f 	and.w	r3, r3, #31
 800634e:	2201      	movs	r2, #1
 8006350:	fa02 f303 	lsl.w	r3, r2, r3
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	6812      	ldr	r2, [r2, #0]
 8006358:	f8d2 10a0 	ldr.w	r1, [r2, #160]	@ 0xa0
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	6812      	ldr	r2, [r2, #0]
 8006360:	430b      	orrs	r3, r1
 8006362:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
          break;
 8006366:	e038      	b.n	80063da <HAL_ADC_AnalogWDGConfig+0x4e2>
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006370:	2b00      	cmp	r3, #0
 8006372:	d108      	bne.n	8006386 <HAL_ADC_AnalogWDGConfig+0x48e>
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	0e9b      	lsrs	r3, r3, #26
 800637a:	f003 031f 	and.w	r3, r3, #31
 800637e:	2201      	movs	r2, #1
 8006380:	fa02 f303 	lsl.w	r3, r2, r3
 8006384:	e016      	b.n	80063b4 <HAL_ADC_AnalogWDGConfig+0x4bc>
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	fa93 f3a3 	rbit	r3, r3
 8006392:	60fb      	str	r3, [r7, #12]
  return result;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d101      	bne.n	80063a2 <HAL_ADC_AnalogWDGConfig+0x4aa>
    return 32U;
 800639e:	2320      	movs	r3, #32
 80063a0:	e003      	b.n	80063aa <HAL_ADC_AnalogWDGConfig+0x4b2>
  return __builtin_clz(value);
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	fab3 f383 	clz	r3, r3
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	f003 031f 	and.w	r3, r3, #31
 80063ae:	2201      	movs	r2, #1
 80063b0:	fa02 f303 	lsl.w	r3, r2, r3
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	6812      	ldr	r2, [r2, #0]
 80063b8:	f8d2 10a4 	ldr.w	r1, [r2, #164]	@ 0xa4
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	6812      	ldr	r2, [r2, #0]
 80063c0:	430b      	orrs	r3, r1
 80063c2:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
          break;
 80063c6:	e008      	b.n	80063da <HAL_ADC_AnalogWDGConfig+0x4e2>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6818      	ldr	r0, [r3, #0]
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2200      	movs	r2, #0
 80063d2:	4619      	mov	r1, r3
 80063d4:	f7fe f92a 	bl	800462c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80063d8:	bf00      	nop
      }

      /* Shift the thresholds in function of the selected ADC resolution      */
      /* have to be left-aligned on bit 15, the LSB (right bits) are set to 0 */
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	f003 0310 	and.w	r3, r3, #16
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d10b      	bne.n	8006400 <HAL_ADC_AnalogWDGConfig+0x508>
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	691a      	ldr	r2, [r3, #16]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	089b      	lsrs	r3, r3, #2
 80063f4:	f003 0307 	and.w	r3, r3, #7
 80063f8:	005b      	lsls	r3, r3, #1
 80063fa:	fa02 f303 	lsl.w	r3, r2, r3
 80063fe:	e00a      	b.n	8006416 <HAL_ADC_AnalogWDGConfig+0x51e>
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	691a      	ldr	r2, [r3, #16]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	089b      	lsrs	r3, r3, #2
 800640c:	f003 0304 	and.w	r3, r3, #4
 8006410:	005b      	lsls	r3, r3, #1
 8006412:	fa02 f303 	lsl.w	r3, r2, r3
 8006416:	64bb      	str	r3, [r7, #72]	@ 0x48
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	f003 0310 	and.w	r3, r3, #16
 8006422:	2b00      	cmp	r3, #0
 8006424:	d10b      	bne.n	800643e <HAL_ADC_AnalogWDGConfig+0x546>
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	695a      	ldr	r2, [r3, #20]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	089b      	lsrs	r3, r3, #2
 8006432:	f003 0307 	and.w	r3, r3, #7
 8006436:	005b      	lsls	r3, r3, #1
 8006438:	fa02 f303 	lsl.w	r3, r2, r3
 800643c:	e00a      	b.n	8006454 <HAL_ADC_AnalogWDGConfig+0x55c>
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	695a      	ldr	r2, [r3, #20]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	089b      	lsrs	r3, r3, #2
 800644a:	f003 0304 	and.w	r3, r3, #4
 800644e:	005b      	lsls	r3, r3, #1
 8006450:	fa02 f303 	lsl.w	r3, r2, r3
 8006454:	647b      	str	r3, [r7, #68]	@ 0x44

#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a0e      	ldr	r2, [pc, #56]	@ (8006494 <HAL_ADC_AnalogWDGConfig+0x59c>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d153      	bne.n	8006508 <HAL_ADC_AnalogWDGConfig+0x610>
      {

        /* Analog watchdog thresholds configuration */
        if (AnalogWDGConfig->WatchdogNumber != ADC_ANALOGWATCHDOG_1)
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a0d      	ldr	r2, [pc, #52]	@ (800649c <HAL_ADC_AnalogWDGConfig+0x5a4>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d045      	beq.n	80064f6 <HAL_ADC_AnalogWDGConfig+0x5fe>
        {
          /* Shift the offset with respect to the selected ADC resolution:        */
          /* Thresholds have to be left-aligned on bit 7, the LSB (right bits)    */
          /* are set to 0.                                                        */
          tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	f003 0310 	and.w	r3, r3, #16
 8006474:	2b00      	cmp	r3, #0
 8006476:	d113      	bne.n	80064a0 <HAL_ADC_AnalogWDGConfig+0x5a8>
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	691a      	ldr	r2, [r3, #16]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	089b      	lsrs	r3, r3, #2
 8006484:	f003 0307 	and.w	r3, r3, #7
 8006488:	005b      	lsls	r3, r3, #1
 800648a:	fa02 f303 	lsl.w	r3, r2, r3
 800648e:	e012      	b.n	80064b6 <HAL_ADC_AnalogWDGConfig+0x5be>
 8006490:	001fffff 	.word	0x001fffff
 8006494:	58026000 	.word	0x58026000
 8006498:	018fffff 	.word	0x018fffff
 800649c:	7dc00000 	.word	0x7dc00000
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	691a      	ldr	r2, [r3, #16]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	089b      	lsrs	r3, r3, #2
 80064ac:	f003 0304 	and.w	r3, r3, #4
 80064b0:	005b      	lsls	r3, r3, #1
 80064b2:	fa02 f303 	lsl.w	r3, r2, r3
 80064b6:	64bb      	str	r3, [r7, #72]	@ 0x48
          tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	f003 0310 	and.w	r3, r3, #16
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d10b      	bne.n	80064de <HAL_ADC_AnalogWDGConfig+0x5e6>
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	695a      	ldr	r2, [r3, #20]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	089b      	lsrs	r3, r3, #2
 80064d2:	f003 0307 	and.w	r3, r3, #7
 80064d6:	005b      	lsls	r3, r3, #1
 80064d8:	fa02 f303 	lsl.w	r3, r2, r3
 80064dc:	e00a      	b.n	80064f4 <HAL_ADC_AnalogWDGConfig+0x5fc>
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	695a      	ldr	r2, [r3, #20]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	089b      	lsrs	r3, r3, #2
 80064ea:	f003 0304 	and.w	r3, r3, #4
 80064ee:	005b      	lsls	r3, r3, #1
 80064f0:	fa02 f303 	lsl.w	r3, r2, r3
 80064f4:	647b      	str	r3, [r7, #68]	@ 0x44
        }

        /* Set ADC analog watchdog thresholds value of both thresholds high and low */
        LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted, tmpAWDLowThresholdShifted);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6818      	ldr	r0, [r3, #0]
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	6819      	ldr	r1, [r3, #0]
 80064fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006500:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006502:	f7fe f8c1 	bl	8004688 <LL_ADC_ConfigAnalogWDThresholds>
 8006506:	e035      	b.n	8006574 <HAL_ADC_AnalogWDGConfig+0x67c>

      }
      else
      {

        if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a40      	ldr	r2, [pc, #256]	@ (8006610 <HAL_ADC_AnalogWDGConfig+0x718>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d118      	bne.n	8006544 <HAL_ADC_AnalogWDGConfig+0x64c>
        {
          /* Set ADC analog watchdog thresholds value of both thresholds high and low */
          MODIFY_REG(hadc->Instance->LTR2_DIFSEL,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800651a:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006524:	430a      	orrs	r2, r1
 8006526:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
          MODIFY_REG(hadc->Instance->HTR2_CALFACT,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006532:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800653c:	430a      	orrs	r2, r1
 800653e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
 8006542:	e017      	b.n	8006574 <HAL_ADC_AnalogWDGConfig+0x67c>
        }
        else
        {
          /* Set ADC analog watchdog thresholds value of both thresholds high and low */
          MODIFY_REG(hadc->Instance->LTR3_RES10,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800654c:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006556:	430a      	orrs	r2, r1
 8006558:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
          MODIFY_REG(hadc->Instance->HTR3_RES11,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006564:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800656e:	430a      	orrs	r2, r1
 8006570:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        MODIFY_REG(hadc->Instance->LTR3,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
        MODIFY_REG(hadc->Instance->HTR3,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
      }

#endif
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a25      	ldr	r2, [pc, #148]	@ (8006610 <HAL_ADC_AnalogWDGConfig+0x718>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d11a      	bne.n	80065b4 <HAL_ADC_AnalogWDGConfig+0x6bc>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006582:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4618      	mov	r0, r3
 8006590:	f7fe f9d7 	bl	8004942 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	7b1b      	ldrb	r3, [r3, #12]
 8006598:	2b01      	cmp	r3, #1
 800659a:	d105      	bne.n	80065a8 <HAL_ADC_AnalogWDGConfig+0x6b0>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4618      	mov	r0, r3
 80065a2:	f7fe f9fa 	bl	800499a <LL_ADC_EnableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80065a6:	e029      	b.n	80065fc <HAL_ADC_AnalogWDGConfig+0x704>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7fe fa24 	bl	80049fa <LL_ADC_DisableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80065b2:	e023      	b.n	80065fc <HAL_ADC_AnalogWDGConfig+0x704>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065b8:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4618      	mov	r0, r3
 80065c6:	f7fe f9ca 	bl	800495e <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	7b1b      	ldrb	r3, [r3, #12]
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d105      	bne.n	80065de <HAL_ADC_AnalogWDGConfig+0x6e6>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7fe f9ef 	bl	80049ba <LL_ADC_EnableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80065dc:	e00e      	b.n	80065fc <HAL_ADC_AnalogWDGConfig+0x704>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4618      	mov	r0, r3
 80065e4:	f7fe fa19 	bl	8004a1a <LL_ADC_DisableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80065e8:	e008      	b.n	80065fc <HAL_ADC_AnalogWDGConfig+0x704>
  /* If a conversion is on going on ADC group regular or injected, no update  */
  /* could be done on neither of the AWD configuration structure parameters.  */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065ee:	f043 0220 	orr.w	r2, r3, #32
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8006604:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8006608:	4618      	mov	r0, r3
 800660a:	3750      	adds	r7, #80	@ 0x50
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	001fffff 	.word	0x001fffff

08006614 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4618      	mov	r0, r3
 8006622:	f7fe f921 	bl	8004868 <LL_ADC_IsEnabled>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d16e      	bne.n	800670a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	689a      	ldr	r2, [r3, #8]
 8006632:	4b38      	ldr	r3, [pc, #224]	@ (8006714 <ADC_Enable+0x100>)
 8006634:	4013      	ands	r3, r2
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00d      	beq.n	8006656 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800663e:	f043 0210 	orr.w	r2, r3, #16
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800664a:	f043 0201 	orr.w	r2, r3, #1
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e05a      	b.n	800670c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4618      	mov	r0, r3
 800665c:	f7fe f8dc 	bl	8004818 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006660:	f7fd fd6a 	bl	8004138 <HAL_GetTick>
 8006664:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a2b      	ldr	r2, [pc, #172]	@ (8006718 <ADC_Enable+0x104>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d004      	beq.n	800667a <ADC_Enable+0x66>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a29      	ldr	r2, [pc, #164]	@ (800671c <ADC_Enable+0x108>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d101      	bne.n	800667e <ADC_Enable+0x6a>
 800667a:	4b29      	ldr	r3, [pc, #164]	@ (8006720 <ADC_Enable+0x10c>)
 800667c:	e000      	b.n	8006680 <ADC_Enable+0x6c>
 800667e:	4b29      	ldr	r3, [pc, #164]	@ (8006724 <ADC_Enable+0x110>)
 8006680:	4618      	mov	r0, r3
 8006682:	f7fe f85f 	bl	8004744 <LL_ADC_GetMultimode>
 8006686:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a23      	ldr	r2, [pc, #140]	@ (800671c <ADC_Enable+0x108>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d002      	beq.n	8006698 <ADC_Enable+0x84>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	e000      	b.n	800669a <ADC_Enable+0x86>
 8006698:	4b1f      	ldr	r3, [pc, #124]	@ (8006718 <ADC_Enable+0x104>)
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	6812      	ldr	r2, [r2, #0]
 800669e:	4293      	cmp	r3, r2
 80066a0:	d02c      	beq.n	80066fc <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d130      	bne.n	800670a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80066a8:	e028      	b.n	80066fc <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7fe f8da 	bl	8004868 <LL_ADC_IsEnabled>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d104      	bne.n	80066c4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4618      	mov	r0, r3
 80066c0:	f7fe f8aa 	bl	8004818 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80066c4:	f7fd fd38 	bl	8004138 <HAL_GetTick>
 80066c8:	4602      	mov	r2, r0
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	d914      	bls.n	80066fc <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 0301 	and.w	r3, r3, #1
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d00d      	beq.n	80066fc <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066e4:	f043 0210 	orr.w	r2, r3, #16
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80066f0:	f043 0201 	orr.w	r2, r3, #1
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e007      	b.n	800670c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 0301 	and.w	r3, r3, #1
 8006706:	2b01      	cmp	r3, #1
 8006708:	d1cf      	bne.n	80066aa <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3710      	adds	r7, #16
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	8000003f 	.word	0x8000003f
 8006718:	40022000 	.word	0x40022000
 800671c:	40022100 	.word	0x40022100
 8006720:	40022300 	.word	0x40022300
 8006724:	58026300 	.word	0x58026300

08006728 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4618      	mov	r0, r3
 8006736:	f7fe f8aa 	bl	800488e <LL_ADC_IsDisableOngoing>
 800673a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4618      	mov	r0, r3
 8006742:	f7fe f891 	bl	8004868 <LL_ADC_IsEnabled>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d047      	beq.n	80067dc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d144      	bne.n	80067dc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	f003 030d 	and.w	r3, r3, #13
 800675c:	2b01      	cmp	r3, #1
 800675e:	d10c      	bne.n	800677a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4618      	mov	r0, r3
 8006766:	f7fe f86b 	bl	8004840 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2203      	movs	r2, #3
 8006770:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006772:	f7fd fce1 	bl	8004138 <HAL_GetTick>
 8006776:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006778:	e029      	b.n	80067ce <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800677e:	f043 0210 	orr.w	r2, r3, #16
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800678a:	f043 0201 	orr.w	r2, r3, #1
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e023      	b.n	80067de <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006796:	f7fd fccf 	bl	8004138 <HAL_GetTick>
 800679a:	4602      	mov	r2, r0
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d914      	bls.n	80067ce <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	f003 0301 	and.w	r3, r3, #1
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00d      	beq.n	80067ce <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067b6:	f043 0210 	orr.w	r2, r3, #16
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067c2:	f043 0201 	orr.w	r2, r3, #1
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e007      	b.n	80067de <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	f003 0301 	and.w	r3, r3, #1
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1dc      	bne.n	8006796 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b084      	sub	sp, #16
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067f2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d14b      	bne.n	8006898 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006804:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f003 0308 	and.w	r3, r3, #8
 8006816:	2b00      	cmp	r3, #0
 8006818:	d021      	beq.n	800685e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4618      	mov	r0, r3
 8006820:	f7fd fe0a 	bl	8004438 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d032      	beq.n	8006890 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006834:	2b00      	cmp	r3, #0
 8006836:	d12b      	bne.n	8006890 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800683c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006848:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800684c:	2b00      	cmp	r3, #0
 800684e:	d11f      	bne.n	8006890 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006854:	f043 0201 	orr.w	r2, r3, #1
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	661a      	str	r2, [r3, #96]	@ 0x60
 800685c:	e018      	b.n	8006890 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	f003 0303 	and.w	r3, r3, #3
 8006868:	2b00      	cmp	r3, #0
 800686a:	d111      	bne.n	8006890 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006870:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800687c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006880:	2b00      	cmp	r3, #0
 8006882:	d105      	bne.n	8006890 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006888:	f043 0201 	orr.w	r2, r3, #1
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f7fb f95b 	bl	8001b4c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006896:	e00e      	b.n	80068b6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800689c:	f003 0310 	and.w	r3, r3, #16
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d003      	beq.n	80068ac <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80068a4:	68f8      	ldr	r0, [r7, #12]
 80068a6:	f7fb f925 	bl	8001af4 <HAL_ADC_ErrorCallback>
}
 80068aa:	e004      	b.n	80068b6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	4798      	blx	r3
}
 80068b6:	bf00      	nop
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}

080068be <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80068be:	b580      	push	{r7, lr}
 80068c0:	b084      	sub	sp, #16
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068ca:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80068cc:	68f8      	ldr	r0, [r7, #12]
 80068ce:	f7fe fdd3 	bl	8005478 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80068d2:	bf00      	nop
 80068d4:	3710      	adds	r7, #16
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80068da:	b580      	push	{r7, lr}
 80068dc:	b084      	sub	sp, #16
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068e6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068ec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068f8:	f043 0204 	orr.w	r2, r3, #4
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006900:	68f8      	ldr	r0, [r7, #12]
 8006902:	f7fb f8f7 	bl	8001af4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006906:	bf00      	nop
 8006908:	3710      	adds	r7, #16
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
	...

08006910 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a6c      	ldr	r2, [pc, #432]	@ (8006ad0 <ADC_ConfigureBoostMode+0x1c0>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d004      	beq.n	800692c <ADC_ConfigureBoostMode+0x1c>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a6b      	ldr	r2, [pc, #428]	@ (8006ad4 <ADC_ConfigureBoostMode+0x1c4>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d109      	bne.n	8006940 <ADC_ConfigureBoostMode+0x30>
 800692c:	4b6a      	ldr	r3, [pc, #424]	@ (8006ad8 <ADC_ConfigureBoostMode+0x1c8>)
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006934:	2b00      	cmp	r3, #0
 8006936:	bf14      	ite	ne
 8006938:	2301      	movne	r3, #1
 800693a:	2300      	moveq	r3, #0
 800693c:	b2db      	uxtb	r3, r3
 800693e:	e008      	b.n	8006952 <ADC_ConfigureBoostMode+0x42>
 8006940:	4b66      	ldr	r3, [pc, #408]	@ (8006adc <ADC_ConfigureBoostMode+0x1cc>)
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006948:	2b00      	cmp	r3, #0
 800694a:	bf14      	ite	ne
 800694c:	2301      	movne	r3, #1
 800694e:	2300      	moveq	r3, #0
 8006950:	b2db      	uxtb	r3, r3
 8006952:	2b00      	cmp	r3, #0
 8006954:	d01c      	beq.n	8006990 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8006956:	f004 fda9 	bl	800b4ac <HAL_RCC_GetHCLKFreq>
 800695a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006964:	d010      	beq.n	8006988 <ADC_ConfigureBoostMode+0x78>
 8006966:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800696a:	d873      	bhi.n	8006a54 <ADC_ConfigureBoostMode+0x144>
 800696c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006970:	d002      	beq.n	8006978 <ADC_ConfigureBoostMode+0x68>
 8006972:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006976:	d16d      	bne.n	8006a54 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	0c1b      	lsrs	r3, r3, #16
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	fbb2 f3f3 	udiv	r3, r2, r3
 8006984:	60fb      	str	r3, [r7, #12]
        break;
 8006986:	e068      	b.n	8006a5a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	089b      	lsrs	r3, r3, #2
 800698c:	60fb      	str	r3, [r7, #12]
        break;
 800698e:	e064      	b.n	8006a5a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006990:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8006994:	f04f 0100 	mov.w	r1, #0
 8006998:	f005 ff84 	bl	800c8a4 <HAL_RCCEx_GetPeriphCLKFreq>
 800699c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80069a6:	d051      	beq.n	8006a4c <ADC_ConfigureBoostMode+0x13c>
 80069a8:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80069ac:	d854      	bhi.n	8006a58 <ADC_ConfigureBoostMode+0x148>
 80069ae:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80069b2:	d047      	beq.n	8006a44 <ADC_ConfigureBoostMode+0x134>
 80069b4:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80069b8:	d84e      	bhi.n	8006a58 <ADC_ConfigureBoostMode+0x148>
 80069ba:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80069be:	d03d      	beq.n	8006a3c <ADC_ConfigureBoostMode+0x12c>
 80069c0:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80069c4:	d848      	bhi.n	8006a58 <ADC_ConfigureBoostMode+0x148>
 80069c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80069ca:	d033      	beq.n	8006a34 <ADC_ConfigureBoostMode+0x124>
 80069cc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80069d0:	d842      	bhi.n	8006a58 <ADC_ConfigureBoostMode+0x148>
 80069d2:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80069d6:	d029      	beq.n	8006a2c <ADC_ConfigureBoostMode+0x11c>
 80069d8:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80069dc:	d83c      	bhi.n	8006a58 <ADC_ConfigureBoostMode+0x148>
 80069de:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80069e2:	d01a      	beq.n	8006a1a <ADC_ConfigureBoostMode+0x10a>
 80069e4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80069e8:	d836      	bhi.n	8006a58 <ADC_ConfigureBoostMode+0x148>
 80069ea:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80069ee:	d014      	beq.n	8006a1a <ADC_ConfigureBoostMode+0x10a>
 80069f0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80069f4:	d830      	bhi.n	8006a58 <ADC_ConfigureBoostMode+0x148>
 80069f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069fa:	d00e      	beq.n	8006a1a <ADC_ConfigureBoostMode+0x10a>
 80069fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a00:	d82a      	bhi.n	8006a58 <ADC_ConfigureBoostMode+0x148>
 8006a02:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006a06:	d008      	beq.n	8006a1a <ADC_ConfigureBoostMode+0x10a>
 8006a08:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006a0c:	d824      	bhi.n	8006a58 <ADC_ConfigureBoostMode+0x148>
 8006a0e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006a12:	d002      	beq.n	8006a1a <ADC_ConfigureBoostMode+0x10a>
 8006a14:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006a18:	d11e      	bne.n	8006a58 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	0c9b      	lsrs	r3, r3, #18
 8006a20:	005b      	lsls	r3, r3, #1
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a28:	60fb      	str	r3, [r7, #12]
        break;
 8006a2a:	e016      	b.n	8006a5a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	091b      	lsrs	r3, r3, #4
 8006a30:	60fb      	str	r3, [r7, #12]
        break;
 8006a32:	e012      	b.n	8006a5a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	095b      	lsrs	r3, r3, #5
 8006a38:	60fb      	str	r3, [r7, #12]
        break;
 8006a3a:	e00e      	b.n	8006a5a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	099b      	lsrs	r3, r3, #6
 8006a40:	60fb      	str	r3, [r7, #12]
        break;
 8006a42:	e00a      	b.n	8006a5a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	09db      	lsrs	r3, r3, #7
 8006a48:	60fb      	str	r3, [r7, #12]
        break;
 8006a4a:	e006      	b.n	8006a5a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	0a1b      	lsrs	r3, r3, #8
 8006a50:	60fb      	str	r3, [r7, #12]
        break;
 8006a52:	e002      	b.n	8006a5a <ADC_ConfigureBoostMode+0x14a>
        break;
 8006a54:	bf00      	nop
 8006a56:	e000      	b.n	8006a5a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8006a58:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	085b      	lsrs	r3, r3, #1
 8006a5e:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	4a1f      	ldr	r2, [pc, #124]	@ (8006ae0 <ADC_ConfigureBoostMode+0x1d0>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d808      	bhi.n	8006a7a <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	689a      	ldr	r2, [r3, #8]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006a76:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006a78:	e025      	b.n	8006ac6 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	4a19      	ldr	r2, [pc, #100]	@ (8006ae4 <ADC_ConfigureBoostMode+0x1d4>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d80a      	bhi.n	8006a98 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006a94:	609a      	str	r2, [r3, #8]
}
 8006a96:	e016      	b.n	8006ac6 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	4a13      	ldr	r2, [pc, #76]	@ (8006ae8 <ADC_ConfigureBoostMode+0x1d8>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d80a      	bhi.n	8006ab6 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006ab2:	609a      	str	r2, [r3, #8]
}
 8006ab4:	e007      	b.n	8006ac6 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	689a      	ldr	r2, [r3, #8]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8006ac4:	609a      	str	r2, [r3, #8]
}
 8006ac6:	bf00      	nop
 8006ac8:	3710      	adds	r7, #16
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	40022000 	.word	0x40022000
 8006ad4:	40022100 	.word	0x40022100
 8006ad8:	40022300 	.word	0x40022300
 8006adc:	58026300 	.word	0x58026300
 8006ae0:	005f5e10 	.word	0x005f5e10
 8006ae4:	00bebc20 	.word	0x00bebc20
 8006ae8:	017d7840 	.word	0x017d7840

08006aec <LL_ADC_IsEnabled>:
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	f003 0301 	and.w	r3, r3, #1
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d101      	bne.n	8006b04 <LL_ADC_IsEnabled+0x18>
 8006b00:	2301      	movs	r3, #1
 8006b02:	e000      	b.n	8006b06 <LL_ADC_IsEnabled+0x1a>
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	370c      	adds	r7, #12
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr
	...

08006b14 <LL_ADC_StartCalibration>:
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	689a      	ldr	r2, [r3, #8]
 8006b24:	4b09      	ldr	r3, [pc, #36]	@ (8006b4c <LL_ADC_StartCalibration+0x38>)
 8006b26:	4013      	ands	r3, r2
 8006b28:	68ba      	ldr	r2, [r7, #8]
 8006b2a:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006b34:	430a      	orrs	r2, r1
 8006b36:	4313      	orrs	r3, r2
 8006b38:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	609a      	str	r2, [r3, #8]
}
 8006b40:	bf00      	nop
 8006b42:	3714      	adds	r7, #20
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr
 8006b4c:	3ffeffc0 	.word	0x3ffeffc0

08006b50 <LL_ADC_IsCalibrationOnGoing>:
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b64:	d101      	bne.n	8006b6a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8006b66:	2301      	movs	r3, #1
 8006b68:	e000      	b.n	8006b6c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006b6a:	2300      	movs	r3, #0
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <LL_ADC_REG_StartConversion>:
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	689a      	ldr	r2, [r3, #8]
 8006b84:	4b05      	ldr	r3, [pc, #20]	@ (8006b9c <LL_ADC_REG_StartConversion+0x24>)
 8006b86:	4013      	ands	r3, r2
 8006b88:	f043 0204 	orr.w	r2, r3, #4
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	609a      	str	r2, [r3, #8]
}
 8006b90:	bf00      	nop
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr
 8006b9c:	7fffffc0 	.word	0x7fffffc0

08006ba0 <LL_ADC_REG_IsConversionOngoing>:
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	f003 0304 	and.w	r3, r3, #4
 8006bb0:	2b04      	cmp	r3, #4
 8006bb2:	d101      	bne.n	8006bb8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e000      	b.n	8006bba <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	370c      	adds	r7, #12
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr
	...

08006bc8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b086      	sub	sp, #24
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d101      	bne.n	8006be6 <HAL_ADCEx_Calibration_Start+0x1e>
 8006be2:	2302      	movs	r3, #2
 8006be4:	e04c      	b.n	8006c80 <HAL_ADCEx_Calibration_Start+0xb8>
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2201      	movs	r2, #1
 8006bea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	f7ff fd9a 	bl	8006728 <ADC_Disable>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006bf8:	7dfb      	ldrb	r3, [r7, #23]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d135      	bne.n	8006c6a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006c02:	4b21      	ldr	r3, [pc, #132]	@ (8006c88 <HAL_ADCEx_Calibration_Start+0xc0>)
 8006c04:	4013      	ands	r3, r2
 8006c06:	f043 0202 	orr.w	r2, r3, #2
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	661a      	str	r2, [r3, #96]	@ 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	68b9      	ldr	r1, [r7, #8]
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7ff ff7c 	bl	8006b14 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006c1c:	e014      	b.n	8006c48 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	3301      	adds	r3, #1
 8006c22:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	4a19      	ldr	r2, [pc, #100]	@ (8006c8c <HAL_ADCEx_Calibration_Start+0xc4>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d30d      	bcc.n	8006c48 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c30:	f023 0312 	bic.w	r3, r3, #18
 8006c34:	f043 0210 	orr.w	r2, r3, #16
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e01b      	b.n	8006c80 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f7ff ff7f 	bl	8006b50 <LL_ADC_IsCalibrationOnGoing>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d1e2      	bne.n	8006c1e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c5c:	f023 0303 	bic.w	r3, r3, #3
 8006c60:	f043 0201 	orr.w	r2, r3, #1
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	661a      	str	r2, [r3, #96]	@ 0x60
 8006c68:	e005      	b.n	8006c76 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c6e:	f043 0210 	orr.w	r2, r3, #16
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8006c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3718      	adds	r7, #24
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	ffffeefd 	.word	0xffffeefd
 8006c8c:	25c3f800 	.word	0x25c3f800

08006c90 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b0a2      	sub	sp, #136	@ 0x88
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	60f8      	str	r0, [r7, #12]
 8006c98:	60b9      	str	r1, [r7, #8]
 8006c9a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f7ff ff7d 	bl	8006ba0 <LL_ADC_REG_IsConversionOngoing>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d001      	beq.n	8006cb0 <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 8006cac:	2302      	movs	r3, #2
 8006cae:	e08c      	b.n	8006dca <HAL_ADCEx_MultiModeStart_DMA+0x13a>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d101      	bne.n	8006cbe <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 8006cba:	2302      	movs	r3, #2
 8006cbc:	e085      	b.n	8006dca <HAL_ADCEx_MultiModeStart_DMA+0x13a>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	673b      	str	r3, [r7, #112]	@ 0x70
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	677b      	str	r3, [r7, #116]	@ 0x74
    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a40      	ldr	r2, [pc, #256]	@ (8006dd4 <HAL_ADCEx_MultiModeStart_DMA+0x144>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d102      	bne.n	8006cde <HAL_ADCEx_MultiModeStart_DMA+0x4e>
 8006cd8:	4b3f      	ldr	r3, [pc, #252]	@ (8006dd8 <HAL_ADCEx_MultiModeStart_DMA+0x148>)
 8006cda:	613b      	str	r3, [r7, #16]
 8006cdc:	e001      	b.n	8006ce2 <HAL_ADCEx_MultiModeStart_DMA+0x52>
 8006cde:	2300      	movs	r3, #0
 8006ce0:	613b      	str	r3, [r7, #16]

    if (tmphadcSlave.Instance == NULL)
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d10b      	bne.n	8006d00 <HAL_ADCEx_MultiModeStart_DMA+0x70>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cec:	f043 0220 	orr.w	r2, r3, #32
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e064      	b.n	8006dca <HAL_ADCEx_MultiModeStart_DMA+0x13a>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 8006d00:	68f8      	ldr	r0, [r7, #12]
 8006d02:	f7ff fc87 	bl	8006614 <ADC_Enable>
 8006d06:	4603      	mov	r3, r0
 8006d08:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    if (tmp_hal_status == HAL_OK)
 8006d0c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d107      	bne.n	8006d24 <HAL_ADCEx_MultiModeStart_DMA+0x94>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8006d14:	f107 0310 	add.w	r3, r7, #16
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f7ff fc7b 	bl	8006614 <ADC_Enable>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 8006d24:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d148      	bne.n	8006dbe <HAL_ADCEx_MultiModeStart_DMA+0x12e>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006d30:	4b2a      	ldr	r3, [pc, #168]	@ (8006ddc <HAL_ADCEx_MultiModeStart_DMA+0x14c>)
 8006d32:	4013      	ands	r3, r2
 8006d34:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	661a      	str	r2, [r3, #96]	@ 0x60
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d46:	4a26      	ldr	r2, [pc, #152]	@ (8006de0 <HAL_ADCEx_MultiModeStart_DMA+0x150>)
 8006d48:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d4e:	4a25      	ldr	r2, [pc, #148]	@ (8006de4 <HAL_ADCEx_MultiModeStart_DMA+0x154>)
 8006d50:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d56:	4a24      	ldr	r2, [pc, #144]	@ (8006de8 <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 8006d58:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a1d      	ldr	r2, [pc, #116]	@ (8006dd4 <HAL_ADCEx_MultiModeStart_DMA+0x144>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d004      	beq.n	8006d6e <HAL_ADCEx_MultiModeStart_DMA+0xde>
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a1b      	ldr	r2, [pc, #108]	@ (8006dd8 <HAL_ADCEx_MultiModeStart_DMA+0x148>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d101      	bne.n	8006d72 <HAL_ADCEx_MultiModeStart_DMA+0xe2>
 8006d6e:	4b1f      	ldr	r3, [pc, #124]	@ (8006dec <HAL_ADCEx_MultiModeStart_DMA+0x15c>)
 8006d70:	e000      	b.n	8006d74 <HAL_ADCEx_MultiModeStart_DMA+0xe4>
 8006d72:	4b1f      	ldr	r3, [pc, #124]	@ (8006df0 <HAL_ADCEx_MultiModeStart_DMA+0x160>)
 8006d74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	221c      	movs	r2, #28
 8006d7e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	685a      	ldr	r2, [r3, #4]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f042 0210 	orr.w	r2, r2, #16
 8006d96:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8006d9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006da0:	330c      	adds	r3, #12
 8006da2:	4619      	mov	r1, r3
 8006da4:	68ba      	ldr	r2, [r7, #8]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f000 feca 	bl	8007b40 <HAL_DMA_Start_IT>
 8006dac:	4603      	mov	r3, r0
 8006dae:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7ff fede 	bl	8006b78 <LL_ADC_REG_StartConversion>
 8006dbc:	e003      	b.n	8006dc6 <HAL_ADCEx_MultiModeStart_DMA+0x136>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    }

    /* Return function status */
    return tmp_hal_status;
 8006dc6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
  }
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3788      	adds	r7, #136	@ 0x88
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	40022000 	.word	0x40022000
 8006dd8:	40022100 	.word	0x40022100
 8006ddc:	fffff0fe 	.word	0xfffff0fe
 8006de0:	080067e7 	.word	0x080067e7
 8006de4:	080068bf 	.word	0x080068bf
 8006de8:	080068db 	.word	0x080068db
 8006dec:	40022300 	.word	0x40022300
 8006df0:	58026300 	.word	0x58026300

08006df4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006dfc:	bf00      	nop
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006e10:	bf00      	nop
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006e24:	bf00      	nop
 8006e26:	370c      	adds	r7, #12
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006e38:	bf00      	nop
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006e4c:	bf00      	nop
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006e58:	b590      	push	{r4, r7, lr}
 8006e5a:	b0a3      	sub	sp, #140	@ 0x8c
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e62:	2300      	movs	r3, #0
 8006e64:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d101      	bne.n	8006e76 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006e72:	2302      	movs	r3, #2
 8006e74:	e0c1      	b.n	8006ffa <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8006e82:	2300      	movs	r3, #0
 8006e84:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a5e      	ldr	r2, [pc, #376]	@ (8007004 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d102      	bne.n	8006e96 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006e90:	4b5d      	ldr	r3, [pc, #372]	@ (8007008 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006e92:	60fb      	str	r3, [r7, #12]
 8006e94:	e001      	b.n	8006e9a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006e96:	2300      	movs	r3, #0
 8006e98:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d10b      	bne.n	8006eb8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ea4:	f043 0220 	orr.w	r2, r3, #32
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e0a0      	b.n	8006ffa <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7ff fe70 	bl	8006ba0 <LL_ADC_REG_IsConversionOngoing>
 8006ec0:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f7ff fe69 	bl	8006ba0 <LL_ADC_REG_IsConversionOngoing>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f040 8081 	bne.w	8006fd8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006ed6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d17c      	bne.n	8006fd8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a48      	ldr	r2, [pc, #288]	@ (8007004 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d004      	beq.n	8006ef2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a46      	ldr	r2, [pc, #280]	@ (8007008 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d101      	bne.n	8006ef6 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8006ef2:	4b46      	ldr	r3, [pc, #280]	@ (800700c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006ef4:	e000      	b.n	8006ef8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8006ef6:	4b46      	ldr	r3, [pc, #280]	@ (8007010 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006ef8:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d039      	beq.n	8006f76 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006f02:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	431a      	orrs	r2, r3
 8006f10:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006f12:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a3a      	ldr	r2, [pc, #232]	@ (8007004 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d004      	beq.n	8006f28 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a39      	ldr	r2, [pc, #228]	@ (8007008 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d10e      	bne.n	8006f46 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8006f28:	4836      	ldr	r0, [pc, #216]	@ (8007004 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006f2a:	f7ff fddf 	bl	8006aec <LL_ADC_IsEnabled>
 8006f2e:	4604      	mov	r4, r0
 8006f30:	4835      	ldr	r0, [pc, #212]	@ (8007008 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006f32:	f7ff fddb 	bl	8006aec <LL_ADC_IsEnabled>
 8006f36:	4603      	mov	r3, r0
 8006f38:	4323      	orrs	r3, r4
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	bf0c      	ite	eq
 8006f3e:	2301      	moveq	r3, #1
 8006f40:	2300      	movne	r3, #0
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	e008      	b.n	8006f58 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8006f46:	4833      	ldr	r0, [pc, #204]	@ (8007014 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8006f48:	f7ff fdd0 	bl	8006aec <LL_ADC_IsEnabled>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	bf0c      	ite	eq
 8006f52:	2301      	moveq	r3, #1
 8006f54:	2300      	movne	r3, #0
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d047      	beq.n	8006fec <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006f5c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006f5e:	689a      	ldr	r2, [r3, #8]
 8006f60:	4b2d      	ldr	r3, [pc, #180]	@ (8007018 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006f62:	4013      	ands	r3, r2
 8006f64:	683a      	ldr	r2, [r7, #0]
 8006f66:	6811      	ldr	r1, [r2, #0]
 8006f68:	683a      	ldr	r2, [r7, #0]
 8006f6a:	6892      	ldr	r2, [r2, #8]
 8006f6c:	430a      	orrs	r2, r1
 8006f6e:	431a      	orrs	r2, r3
 8006f70:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006f72:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006f74:	e03a      	b.n	8006fec <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006f76:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006f7e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006f80:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a1f      	ldr	r2, [pc, #124]	@ (8007004 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d004      	beq.n	8006f96 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a1d      	ldr	r2, [pc, #116]	@ (8007008 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d10e      	bne.n	8006fb4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8006f96:	481b      	ldr	r0, [pc, #108]	@ (8007004 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006f98:	f7ff fda8 	bl	8006aec <LL_ADC_IsEnabled>
 8006f9c:	4604      	mov	r4, r0
 8006f9e:	481a      	ldr	r0, [pc, #104]	@ (8007008 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006fa0:	f7ff fda4 	bl	8006aec <LL_ADC_IsEnabled>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	4323      	orrs	r3, r4
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	bf0c      	ite	eq
 8006fac:	2301      	moveq	r3, #1
 8006fae:	2300      	movne	r3, #0
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	e008      	b.n	8006fc6 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8006fb4:	4817      	ldr	r0, [pc, #92]	@ (8007014 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8006fb6:	f7ff fd99 	bl	8006aec <LL_ADC_IsEnabled>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	bf0c      	ite	eq
 8006fc0:	2301      	moveq	r3, #1
 8006fc2:	2300      	movne	r3, #0
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d010      	beq.n	8006fec <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006fca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006fcc:	689a      	ldr	r2, [r3, #8]
 8006fce:	4b12      	ldr	r3, [pc, #72]	@ (8007018 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006fd4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006fd6:	e009      	b.n	8006fec <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fdc:	f043 0220 	orr.w	r2, r3, #32
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8006fea:	e000      	b.n	8006fee <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006fec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8006ff6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	378c      	adds	r7, #140	@ 0x8c
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd90      	pop	{r4, r7, pc}
 8007002:	bf00      	nop
 8007004:	40022000 	.word	0x40022000
 8007008:	40022100 	.word	0x40022100
 800700c:	40022300 	.word	0x40022300
 8007010:	58026300 	.word	0x58026300
 8007014:	58026000 	.word	0x58026000
 8007018:	fffff0e0 	.word	0xfffff0e0

0800701c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b088      	sub	sp, #32
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8007024:	2300      	movs	r3, #0
 8007026:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 8007028:	2300      	movs	r3, #0
 800702a:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d102      	bne.n	8007038 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	77fb      	strb	r3, [r7, #31]
 8007036:	e10e      	b.n	8007256 <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007042:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007046:	d102      	bne.n	800704e <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	77fb      	strb	r3, [r7, #31]
 800704c:	e103      	b.n	8007256 <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007054:	b2db      	uxtb	r3, r3
 8007056:	2b00      	cmp	r3, #0
 8007058:	d109      	bne.n	800706e <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f7fc fb6b 	bl	8003744 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 0304 	and.w	r3, r3, #4
 8007078:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8007082:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 8007088:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 800708e:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 8007094:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 800709a:	4313      	orrs	r3, r2
 800709c:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	4b6e      	ldr	r3, [pc, #440]	@ (8007260 <HAL_COMP_Init+0x244>)
 80070a6:	4013      	ands	r3, r2
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	6812      	ldr	r2, [r2, #0]
 80070ac:	6979      	ldr	r1, [r7, #20]
 80070ae:	430b      	orrs	r3, r1
 80070b0:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	2b10      	cmp	r3, #16
 80070b8:	d108      	bne.n	80070cc <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f042 0210 	orr.w	r2, r2, #16
 80070c8:	601a      	str	r2, [r3, #0]
 80070ca:	e007      	b.n	80070dc <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f022 0210 	bic.w	r2, r2, #16
 80070da:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 0304 	and.w	r3, r3, #4
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d016      	beq.n	8007118 <HAL_COMP_Init+0xfc>
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d013      	beq.n	8007118 <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80070f0:	4b5c      	ldr	r3, [pc, #368]	@ (8007264 <HAL_COMP_Init+0x248>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	099b      	lsrs	r3, r3, #6
 80070f6:	4a5c      	ldr	r2, [pc, #368]	@ (8007268 <HAL_COMP_Init+0x24c>)
 80070f8:	fba2 2303 	umull	r2, r3, r2, r3
 80070fc:	099b      	lsrs	r3, r3, #6
 80070fe:	1c5a      	adds	r2, r3, #1
 8007100:	4613      	mov	r3, r2
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	4413      	add	r3, r2
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 800710a:	e002      	b.n	8007112 <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	3b01      	subs	r3, #1
 8007110:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d1f9      	bne.n	800710c <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a53      	ldr	r2, [pc, #332]	@ (800726c <HAL_COMP_Init+0x250>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d102      	bne.n	8007128 <HAL_COMP_Init+0x10c>
 8007122:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007126:	e001      	b.n	800712c <HAL_COMP_Init+0x110>
 8007128:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800712c:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a1b      	ldr	r3, [r3, #32]
 8007132:	f003 0303 	and.w	r3, r3, #3
 8007136:	2b00      	cmp	r3, #0
 8007138:	d06d      	beq.n	8007216 <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a1b      	ldr	r3, [r3, #32]
 800713e:	f003 0310 	and.w	r3, r3, #16
 8007142:	2b00      	cmp	r3, #0
 8007144:	d008      	beq.n	8007158 <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 8007146:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	4313      	orrs	r3, r2
 8007154:	600b      	str	r3, [r1, #0]
 8007156:	e008      	b.n	800716a <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 8007158:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	43db      	mvns	r3, r3
 8007162:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007166:	4013      	ands	r3, r2
 8007168:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a1b      	ldr	r3, [r3, #32]
 800716e:	f003 0320 	and.w	r3, r3, #32
 8007172:	2b00      	cmp	r3, #0
 8007174:	d008      	beq.n	8007188 <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 8007176:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800717a:	685a      	ldr	r2, [r3, #4]
 800717c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	4313      	orrs	r3, r2
 8007184:	604b      	str	r3, [r1, #4]
 8007186:	e008      	b.n	800719a <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 8007188:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800718c:	685a      	ldr	r2, [r3, #4]
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	43db      	mvns	r3, r3
 8007192:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007196:	4013      	ands	r3, r2
 8007198:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 800719a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6a1b      	ldr	r3, [r3, #32]
 80071a8:	f003 0302 	and.w	r3, r3, #2
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00a      	beq.n	80071c6 <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 80071b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071b4:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80071b8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	4313      	orrs	r3, r2
 80071c0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 80071c4:	e00a      	b.n	80071dc <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 80071c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071ca:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	43db      	mvns	r3, r3
 80071d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80071d6:	4013      	ands	r3, r2
 80071d8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6a1b      	ldr	r3, [r3, #32]
 80071e0:	f003 0301 	and.w	r3, r3, #1
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00a      	beq.n	80071fe <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 80071e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071ec:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80071f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 80071fc:	e021      	b.n	8007242 <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 80071fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007202:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	43db      	mvns	r3, r3
 800720a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800720e:	4013      	ands	r3, r2
 8007210:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 8007214:	e015      	b.n	8007242 <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 8007216:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800721a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	43db      	mvns	r3, r3
 8007222:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007226:	4013      	ands	r3, r2
 8007228:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 800722c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007230:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	43db      	mvns	r3, r3
 8007238:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800723c:	4013      	ands	r3, r2
 800723e:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007248:	b2db      	uxtb	r3, r3
 800724a:	2b00      	cmp	r3, #0
 800724c:	d103      	bne.n	8007256 <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
   
  }
  
  return status;
 8007256:	7ffb      	ldrb	r3, [r7, #31]
}
 8007258:	4618      	mov	r0, r3
 800725a:	3720      	adds	r7, #32
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}
 8007260:	f0e8cce1 	.word	0xf0e8cce1
 8007264:	24000038 	.word	0x24000038
 8007268:	053e2d63 	.word	0x053e2d63
 800726c:	5800380c 	.word	0x5800380c

08007270 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007270:	b480      	push	{r7}
 8007272:	b085      	sub	sp, #20
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f003 0307 	and.w	r3, r3, #7
 800727e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007280:	4b0b      	ldr	r3, [pc, #44]	@ (80072b0 <__NVIC_SetPriorityGrouping+0x40>)
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800728c:	4013      	ands	r3, r2
 800728e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007298:	4b06      	ldr	r3, [pc, #24]	@ (80072b4 <__NVIC_SetPriorityGrouping+0x44>)
 800729a:	4313      	orrs	r3, r2
 800729c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800729e:	4a04      	ldr	r2, [pc, #16]	@ (80072b0 <__NVIC_SetPriorityGrouping+0x40>)
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	60d3      	str	r3, [r2, #12]
}
 80072a4:	bf00      	nop
 80072a6:	3714      	adds	r7, #20
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr
 80072b0:	e000ed00 	.word	0xe000ed00
 80072b4:	05fa0000 	.word	0x05fa0000

080072b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80072b8:	b480      	push	{r7}
 80072ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80072bc:	4b04      	ldr	r3, [pc, #16]	@ (80072d0 <__NVIC_GetPriorityGrouping+0x18>)
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	0a1b      	lsrs	r3, r3, #8
 80072c2:	f003 0307 	and.w	r3, r3, #7
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr
 80072d0:	e000ed00 	.word	0xe000ed00

080072d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
 80072da:	4603      	mov	r3, r0
 80072dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80072de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	db0b      	blt.n	80072fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80072e6:	88fb      	ldrh	r3, [r7, #6]
 80072e8:	f003 021f 	and.w	r2, r3, #31
 80072ec:	4907      	ldr	r1, [pc, #28]	@ (800730c <__NVIC_EnableIRQ+0x38>)
 80072ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80072f2:	095b      	lsrs	r3, r3, #5
 80072f4:	2001      	movs	r0, #1
 80072f6:	fa00 f202 	lsl.w	r2, r0, r2
 80072fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80072fe:	bf00      	nop
 8007300:	370c      	adds	r7, #12
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr
 800730a:	bf00      	nop
 800730c:	e000e100 	.word	0xe000e100

08007310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	4603      	mov	r3, r0
 8007318:	6039      	str	r1, [r7, #0]
 800731a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800731c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007320:	2b00      	cmp	r3, #0
 8007322:	db0a      	blt.n	800733a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	b2da      	uxtb	r2, r3
 8007328:	490c      	ldr	r1, [pc, #48]	@ (800735c <__NVIC_SetPriority+0x4c>)
 800732a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800732e:	0112      	lsls	r2, r2, #4
 8007330:	b2d2      	uxtb	r2, r2
 8007332:	440b      	add	r3, r1
 8007334:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007338:	e00a      	b.n	8007350 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	b2da      	uxtb	r2, r3
 800733e:	4908      	ldr	r1, [pc, #32]	@ (8007360 <__NVIC_SetPriority+0x50>)
 8007340:	88fb      	ldrh	r3, [r7, #6]
 8007342:	f003 030f 	and.w	r3, r3, #15
 8007346:	3b04      	subs	r3, #4
 8007348:	0112      	lsls	r2, r2, #4
 800734a:	b2d2      	uxtb	r2, r2
 800734c:	440b      	add	r3, r1
 800734e:	761a      	strb	r2, [r3, #24]
}
 8007350:	bf00      	nop
 8007352:	370c      	adds	r7, #12
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr
 800735c:	e000e100 	.word	0xe000e100
 8007360:	e000ed00 	.word	0xe000ed00

08007364 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007364:	b480      	push	{r7}
 8007366:	b089      	sub	sp, #36	@ 0x24
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f003 0307 	and.w	r3, r3, #7
 8007376:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	f1c3 0307 	rsb	r3, r3, #7
 800737e:	2b04      	cmp	r3, #4
 8007380:	bf28      	it	cs
 8007382:	2304      	movcs	r3, #4
 8007384:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	3304      	adds	r3, #4
 800738a:	2b06      	cmp	r3, #6
 800738c:	d902      	bls.n	8007394 <NVIC_EncodePriority+0x30>
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	3b03      	subs	r3, #3
 8007392:	e000      	b.n	8007396 <NVIC_EncodePriority+0x32>
 8007394:	2300      	movs	r3, #0
 8007396:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007398:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800739c:	69bb      	ldr	r3, [r7, #24]
 800739e:	fa02 f303 	lsl.w	r3, r2, r3
 80073a2:	43da      	mvns	r2, r3
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	401a      	ands	r2, r3
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80073ac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	fa01 f303 	lsl.w	r3, r1, r3
 80073b6:	43d9      	mvns	r1, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80073bc:	4313      	orrs	r3, r2
         );
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3724      	adds	r7, #36	@ 0x24
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr
	...

080073cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b082      	sub	sp, #8
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	3b01      	subs	r3, #1
 80073d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80073dc:	d301      	bcc.n	80073e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80073de:	2301      	movs	r3, #1
 80073e0:	e00f      	b.n	8007402 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80073e2:	4a0a      	ldr	r2, [pc, #40]	@ (800740c <SysTick_Config+0x40>)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	3b01      	subs	r3, #1
 80073e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80073ea:	210f      	movs	r1, #15
 80073ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80073f0:	f7ff ff8e 	bl	8007310 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80073f4:	4b05      	ldr	r3, [pc, #20]	@ (800740c <SysTick_Config+0x40>)
 80073f6:	2200      	movs	r2, #0
 80073f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80073fa:	4b04      	ldr	r3, [pc, #16]	@ (800740c <SysTick_Config+0x40>)
 80073fc:	2207      	movs	r2, #7
 80073fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3708      	adds	r7, #8
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop
 800740c:	e000e010 	.word	0xe000e010

08007410 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f7ff ff29 	bl	8007270 <__NVIC_SetPriorityGrouping>
}
 800741e:	bf00      	nop
 8007420:	3708      	adds	r7, #8
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}

08007426 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007426:	b580      	push	{r7, lr}
 8007428:	b086      	sub	sp, #24
 800742a:	af00      	add	r7, sp, #0
 800742c:	4603      	mov	r3, r0
 800742e:	60b9      	str	r1, [r7, #8]
 8007430:	607a      	str	r2, [r7, #4]
 8007432:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007434:	f7ff ff40 	bl	80072b8 <__NVIC_GetPriorityGrouping>
 8007438:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	68b9      	ldr	r1, [r7, #8]
 800743e:	6978      	ldr	r0, [r7, #20]
 8007440:	f7ff ff90 	bl	8007364 <NVIC_EncodePriority>
 8007444:	4602      	mov	r2, r0
 8007446:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800744a:	4611      	mov	r1, r2
 800744c:	4618      	mov	r0, r3
 800744e:	f7ff ff5f 	bl	8007310 <__NVIC_SetPriority>
}
 8007452:	bf00      	nop
 8007454:	3718      	adds	r7, #24
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b082      	sub	sp, #8
 800745e:	af00      	add	r7, sp, #0
 8007460:	4603      	mov	r3, r0
 8007462:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007464:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007468:	4618      	mov	r0, r3
 800746a:	f7ff ff33 	bl	80072d4 <__NVIC_EnableIRQ>
}
 800746e:	bf00      	nop
 8007470:	3708      	adds	r7, #8
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}

08007476 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007476:	b580      	push	{r7, lr}
 8007478:	b082      	sub	sp, #8
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f7ff ffa4 	bl	80073cc <SysTick_Config>
 8007484:	4603      	mov	r3, r0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3708      	adds	r7, #8
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
	...

08007490 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b086      	sub	sp, #24
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8007498:	f7fc fe4e 	bl	8004138 <HAL_GetTick>
 800749c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d101      	bne.n	80074a8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	e312      	b.n	8007ace <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a66      	ldr	r2, [pc, #408]	@ (8007648 <HAL_DMA_Init+0x1b8>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d04a      	beq.n	8007548 <HAL_DMA_Init+0xb8>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a65      	ldr	r2, [pc, #404]	@ (800764c <HAL_DMA_Init+0x1bc>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d045      	beq.n	8007548 <HAL_DMA_Init+0xb8>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a63      	ldr	r2, [pc, #396]	@ (8007650 <HAL_DMA_Init+0x1c0>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d040      	beq.n	8007548 <HAL_DMA_Init+0xb8>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a62      	ldr	r2, [pc, #392]	@ (8007654 <HAL_DMA_Init+0x1c4>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d03b      	beq.n	8007548 <HAL_DMA_Init+0xb8>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a60      	ldr	r2, [pc, #384]	@ (8007658 <HAL_DMA_Init+0x1c8>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d036      	beq.n	8007548 <HAL_DMA_Init+0xb8>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a5f      	ldr	r2, [pc, #380]	@ (800765c <HAL_DMA_Init+0x1cc>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d031      	beq.n	8007548 <HAL_DMA_Init+0xb8>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a5d      	ldr	r2, [pc, #372]	@ (8007660 <HAL_DMA_Init+0x1d0>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d02c      	beq.n	8007548 <HAL_DMA_Init+0xb8>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a5c      	ldr	r2, [pc, #368]	@ (8007664 <HAL_DMA_Init+0x1d4>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d027      	beq.n	8007548 <HAL_DMA_Init+0xb8>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a5a      	ldr	r2, [pc, #360]	@ (8007668 <HAL_DMA_Init+0x1d8>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d022      	beq.n	8007548 <HAL_DMA_Init+0xb8>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a59      	ldr	r2, [pc, #356]	@ (800766c <HAL_DMA_Init+0x1dc>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d01d      	beq.n	8007548 <HAL_DMA_Init+0xb8>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a57      	ldr	r2, [pc, #348]	@ (8007670 <HAL_DMA_Init+0x1e0>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d018      	beq.n	8007548 <HAL_DMA_Init+0xb8>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a56      	ldr	r2, [pc, #344]	@ (8007674 <HAL_DMA_Init+0x1e4>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d013      	beq.n	8007548 <HAL_DMA_Init+0xb8>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a54      	ldr	r2, [pc, #336]	@ (8007678 <HAL_DMA_Init+0x1e8>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d00e      	beq.n	8007548 <HAL_DMA_Init+0xb8>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a53      	ldr	r2, [pc, #332]	@ (800767c <HAL_DMA_Init+0x1ec>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d009      	beq.n	8007548 <HAL_DMA_Init+0xb8>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a51      	ldr	r2, [pc, #324]	@ (8007680 <HAL_DMA_Init+0x1f0>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d004      	beq.n	8007548 <HAL_DMA_Init+0xb8>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a50      	ldr	r2, [pc, #320]	@ (8007684 <HAL_DMA_Init+0x1f4>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d101      	bne.n	800754c <HAL_DMA_Init+0xbc>
 8007548:	2301      	movs	r3, #1
 800754a:	e000      	b.n	800754e <HAL_DMA_Init+0xbe>
 800754c:	2300      	movs	r3, #0
 800754e:	2b00      	cmp	r3, #0
 8007550:	f000 813c 	beq.w	80077cc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2202      	movs	r2, #2
 8007558:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a37      	ldr	r2, [pc, #220]	@ (8007648 <HAL_DMA_Init+0x1b8>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d04a      	beq.n	8007604 <HAL_DMA_Init+0x174>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a36      	ldr	r2, [pc, #216]	@ (800764c <HAL_DMA_Init+0x1bc>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d045      	beq.n	8007604 <HAL_DMA_Init+0x174>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a34      	ldr	r2, [pc, #208]	@ (8007650 <HAL_DMA_Init+0x1c0>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d040      	beq.n	8007604 <HAL_DMA_Init+0x174>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a33      	ldr	r2, [pc, #204]	@ (8007654 <HAL_DMA_Init+0x1c4>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d03b      	beq.n	8007604 <HAL_DMA_Init+0x174>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a31      	ldr	r2, [pc, #196]	@ (8007658 <HAL_DMA_Init+0x1c8>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d036      	beq.n	8007604 <HAL_DMA_Init+0x174>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a30      	ldr	r2, [pc, #192]	@ (800765c <HAL_DMA_Init+0x1cc>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d031      	beq.n	8007604 <HAL_DMA_Init+0x174>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a2e      	ldr	r2, [pc, #184]	@ (8007660 <HAL_DMA_Init+0x1d0>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d02c      	beq.n	8007604 <HAL_DMA_Init+0x174>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a2d      	ldr	r2, [pc, #180]	@ (8007664 <HAL_DMA_Init+0x1d4>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d027      	beq.n	8007604 <HAL_DMA_Init+0x174>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a2b      	ldr	r2, [pc, #172]	@ (8007668 <HAL_DMA_Init+0x1d8>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d022      	beq.n	8007604 <HAL_DMA_Init+0x174>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a2a      	ldr	r2, [pc, #168]	@ (800766c <HAL_DMA_Init+0x1dc>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d01d      	beq.n	8007604 <HAL_DMA_Init+0x174>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a28      	ldr	r2, [pc, #160]	@ (8007670 <HAL_DMA_Init+0x1e0>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d018      	beq.n	8007604 <HAL_DMA_Init+0x174>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a27      	ldr	r2, [pc, #156]	@ (8007674 <HAL_DMA_Init+0x1e4>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d013      	beq.n	8007604 <HAL_DMA_Init+0x174>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a25      	ldr	r2, [pc, #148]	@ (8007678 <HAL_DMA_Init+0x1e8>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d00e      	beq.n	8007604 <HAL_DMA_Init+0x174>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a24      	ldr	r2, [pc, #144]	@ (800767c <HAL_DMA_Init+0x1ec>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d009      	beq.n	8007604 <HAL_DMA_Init+0x174>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a22      	ldr	r2, [pc, #136]	@ (8007680 <HAL_DMA_Init+0x1f0>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d004      	beq.n	8007604 <HAL_DMA_Init+0x174>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a21      	ldr	r2, [pc, #132]	@ (8007684 <HAL_DMA_Init+0x1f4>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d108      	bne.n	8007616 <HAL_DMA_Init+0x186>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f022 0201 	bic.w	r2, r2, #1
 8007612:	601a      	str	r2, [r3, #0]
 8007614:	e007      	b.n	8007626 <HAL_DMA_Init+0x196>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f022 0201 	bic.w	r2, r2, #1
 8007624:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007626:	e02f      	b.n	8007688 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007628:	f7fc fd86 	bl	8004138 <HAL_GetTick>
 800762c:	4602      	mov	r2, r0
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	1ad3      	subs	r3, r2, r3
 8007632:	2b05      	cmp	r3, #5
 8007634:	d928      	bls.n	8007688 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2220      	movs	r2, #32
 800763a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2203      	movs	r2, #3
 8007640:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	e242      	b.n	8007ace <HAL_DMA_Init+0x63e>
 8007648:	40020010 	.word	0x40020010
 800764c:	40020028 	.word	0x40020028
 8007650:	40020040 	.word	0x40020040
 8007654:	40020058 	.word	0x40020058
 8007658:	40020070 	.word	0x40020070
 800765c:	40020088 	.word	0x40020088
 8007660:	400200a0 	.word	0x400200a0
 8007664:	400200b8 	.word	0x400200b8
 8007668:	40020410 	.word	0x40020410
 800766c:	40020428 	.word	0x40020428
 8007670:	40020440 	.word	0x40020440
 8007674:	40020458 	.word	0x40020458
 8007678:	40020470 	.word	0x40020470
 800767c:	40020488 	.word	0x40020488
 8007680:	400204a0 	.word	0x400204a0
 8007684:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 0301 	and.w	r3, r3, #1
 8007692:	2b00      	cmp	r3, #0
 8007694:	d1c8      	bne.n	8007628 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800769e:	697a      	ldr	r2, [r7, #20]
 80076a0:	4b83      	ldr	r3, [pc, #524]	@ (80078b0 <HAL_DMA_Init+0x420>)
 80076a2:	4013      	ands	r3, r2
 80076a4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80076ae:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	691b      	ldr	r3, [r3, #16]
 80076b4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80076ba:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	699b      	ldr	r3, [r3, #24]
 80076c0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80076c6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6a1b      	ldr	r3, [r3, #32]
 80076cc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80076ce:	697a      	ldr	r2, [r7, #20]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076d8:	2b04      	cmp	r3, #4
 80076da:	d107      	bne.n	80076ec <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076e4:	4313      	orrs	r3, r2
 80076e6:	697a      	ldr	r2, [r7, #20]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	2b28      	cmp	r3, #40	@ 0x28
 80076f2:	d903      	bls.n	80076fc <HAL_DMA_Init+0x26c>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80076fa:	d91f      	bls.n	800773c <HAL_DMA_Init+0x2ac>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	2b3e      	cmp	r3, #62	@ 0x3e
 8007702:	d903      	bls.n	800770c <HAL_DMA_Init+0x27c>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	2b42      	cmp	r3, #66	@ 0x42
 800770a:	d917      	bls.n	800773c <HAL_DMA_Init+0x2ac>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	2b46      	cmp	r3, #70	@ 0x46
 8007712:	d903      	bls.n	800771c <HAL_DMA_Init+0x28c>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	2b48      	cmp	r3, #72	@ 0x48
 800771a:	d90f      	bls.n	800773c <HAL_DMA_Init+0x2ac>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	2b4e      	cmp	r3, #78	@ 0x4e
 8007722:	d903      	bls.n	800772c <HAL_DMA_Init+0x29c>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	2b52      	cmp	r3, #82	@ 0x52
 800772a:	d907      	bls.n	800773c <HAL_DMA_Init+0x2ac>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	2b73      	cmp	r3, #115	@ 0x73
 8007732:	d905      	bls.n	8007740 <HAL_DMA_Init+0x2b0>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	2b77      	cmp	r3, #119	@ 0x77
 800773a:	d801      	bhi.n	8007740 <HAL_DMA_Init+0x2b0>
 800773c:	2301      	movs	r3, #1
 800773e:	e000      	b.n	8007742 <HAL_DMA_Init+0x2b2>
 8007740:	2300      	movs	r3, #0
 8007742:	2b00      	cmp	r3, #0
 8007744:	d003      	beq.n	800774e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800774c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	697a      	ldr	r2, [r7, #20]
 8007754:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	695b      	ldr	r3, [r3, #20]
 800775c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	f023 0307 	bic.w	r3, r3, #7
 8007764:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800776a:	697a      	ldr	r2, [r7, #20]
 800776c:	4313      	orrs	r3, r2
 800776e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007774:	2b04      	cmp	r3, #4
 8007776:	d117      	bne.n	80077a8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800777c:	697a      	ldr	r2, [r7, #20]
 800777e:	4313      	orrs	r3, r2
 8007780:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00e      	beq.n	80077a8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f001 fdca 	bl	8009324 <DMA_CheckFifoParam>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d008      	beq.n	80077a8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2240      	movs	r2, #64	@ 0x40
 800779a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	e192      	b.n	8007ace <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	697a      	ldr	r2, [r7, #20]
 80077ae:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f001 fd05 	bl	80091c0 <DMA_CalcBaseAndBitshift>
 80077b6:	4603      	mov	r3, r0
 80077b8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077be:	f003 031f 	and.w	r3, r3, #31
 80077c2:	223f      	movs	r2, #63	@ 0x3f
 80077c4:	409a      	lsls	r2, r3
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	609a      	str	r2, [r3, #8]
 80077ca:	e0c8      	b.n	800795e <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a38      	ldr	r2, [pc, #224]	@ (80078b4 <HAL_DMA_Init+0x424>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d022      	beq.n	800781c <HAL_DMA_Init+0x38c>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a37      	ldr	r2, [pc, #220]	@ (80078b8 <HAL_DMA_Init+0x428>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d01d      	beq.n	800781c <HAL_DMA_Init+0x38c>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a35      	ldr	r2, [pc, #212]	@ (80078bc <HAL_DMA_Init+0x42c>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d018      	beq.n	800781c <HAL_DMA_Init+0x38c>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a34      	ldr	r2, [pc, #208]	@ (80078c0 <HAL_DMA_Init+0x430>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d013      	beq.n	800781c <HAL_DMA_Init+0x38c>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a32      	ldr	r2, [pc, #200]	@ (80078c4 <HAL_DMA_Init+0x434>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d00e      	beq.n	800781c <HAL_DMA_Init+0x38c>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a31      	ldr	r2, [pc, #196]	@ (80078c8 <HAL_DMA_Init+0x438>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d009      	beq.n	800781c <HAL_DMA_Init+0x38c>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a2f      	ldr	r2, [pc, #188]	@ (80078cc <HAL_DMA_Init+0x43c>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d004      	beq.n	800781c <HAL_DMA_Init+0x38c>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a2e      	ldr	r2, [pc, #184]	@ (80078d0 <HAL_DMA_Init+0x440>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d101      	bne.n	8007820 <HAL_DMA_Init+0x390>
 800781c:	2301      	movs	r3, #1
 800781e:	e000      	b.n	8007822 <HAL_DMA_Init+0x392>
 8007820:	2300      	movs	r3, #0
 8007822:	2b00      	cmp	r3, #0
 8007824:	f000 8092 	beq.w	800794c <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a21      	ldr	r2, [pc, #132]	@ (80078b4 <HAL_DMA_Init+0x424>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d021      	beq.n	8007876 <HAL_DMA_Init+0x3e6>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a20      	ldr	r2, [pc, #128]	@ (80078b8 <HAL_DMA_Init+0x428>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d01c      	beq.n	8007876 <HAL_DMA_Init+0x3e6>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a1e      	ldr	r2, [pc, #120]	@ (80078bc <HAL_DMA_Init+0x42c>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d017      	beq.n	8007876 <HAL_DMA_Init+0x3e6>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a1d      	ldr	r2, [pc, #116]	@ (80078c0 <HAL_DMA_Init+0x430>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d012      	beq.n	8007876 <HAL_DMA_Init+0x3e6>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a1b      	ldr	r2, [pc, #108]	@ (80078c4 <HAL_DMA_Init+0x434>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d00d      	beq.n	8007876 <HAL_DMA_Init+0x3e6>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a1a      	ldr	r2, [pc, #104]	@ (80078c8 <HAL_DMA_Init+0x438>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d008      	beq.n	8007876 <HAL_DMA_Init+0x3e6>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a18      	ldr	r2, [pc, #96]	@ (80078cc <HAL_DMA_Init+0x43c>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d003      	beq.n	8007876 <HAL_DMA_Init+0x3e6>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a17      	ldr	r2, [pc, #92]	@ (80078d0 <HAL_DMA_Init+0x440>)
 8007874:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2202      	movs	r2, #2
 800787a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800788e:	697a      	ldr	r2, [r7, #20]
 8007890:	4b10      	ldr	r3, [pc, #64]	@ (80078d4 <HAL_DMA_Init+0x444>)
 8007892:	4013      	ands	r3, r2
 8007894:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	689b      	ldr	r3, [r3, #8]
 800789a:	2b40      	cmp	r3, #64	@ 0x40
 800789c:	d01c      	beq.n	80078d8 <HAL_DMA_Init+0x448>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	2b80      	cmp	r3, #128	@ 0x80
 80078a4:	d102      	bne.n	80078ac <HAL_DMA_Init+0x41c>
 80078a6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80078aa:	e016      	b.n	80078da <HAL_DMA_Init+0x44a>
 80078ac:	2300      	movs	r3, #0
 80078ae:	e014      	b.n	80078da <HAL_DMA_Init+0x44a>
 80078b0:	fe10803f 	.word	0xfe10803f
 80078b4:	58025408 	.word	0x58025408
 80078b8:	5802541c 	.word	0x5802541c
 80078bc:	58025430 	.word	0x58025430
 80078c0:	58025444 	.word	0x58025444
 80078c4:	58025458 	.word	0x58025458
 80078c8:	5802546c 	.word	0x5802546c
 80078cc:	58025480 	.word	0x58025480
 80078d0:	58025494 	.word	0x58025494
 80078d4:	fffe000f 	.word	0xfffe000f
 80078d8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	68d2      	ldr	r2, [r2, #12]
 80078de:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80078e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80078e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	695b      	ldr	r3, [r3, #20]
 80078ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80078f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	699b      	ldr	r3, [r3, #24]
 80078f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80078f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	69db      	ldr	r3, [r3, #28]
 80078fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007900:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a1b      	ldr	r3, [r3, #32]
 8007906:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007908:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800790a:	697a      	ldr	r2, [r7, #20]
 800790c:	4313      	orrs	r3, r2
 800790e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	697a      	ldr	r2, [r7, #20]
 8007916:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	461a      	mov	r2, r3
 800791e:	4b6e      	ldr	r3, [pc, #440]	@ (8007ad8 <HAL_DMA_Init+0x648>)
 8007920:	4413      	add	r3, r2
 8007922:	4a6e      	ldr	r2, [pc, #440]	@ (8007adc <HAL_DMA_Init+0x64c>)
 8007924:	fba2 2303 	umull	r2, r3, r2, r3
 8007928:	091b      	lsrs	r3, r3, #4
 800792a:	009a      	lsls	r2, r3, #2
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f001 fc45 	bl	80091c0 <DMA_CalcBaseAndBitshift>
 8007936:	4603      	mov	r3, r0
 8007938:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800793e:	f003 031f 	and.w	r3, r3, #31
 8007942:	2201      	movs	r2, #1
 8007944:	409a      	lsls	r2, r3
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	605a      	str	r2, [r3, #4]
 800794a:	e008      	b.n	800795e <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2240      	movs	r2, #64	@ 0x40
 8007950:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2203      	movs	r2, #3
 8007956:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	e0b7      	b.n	8007ace <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a5f      	ldr	r2, [pc, #380]	@ (8007ae0 <HAL_DMA_Init+0x650>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d072      	beq.n	8007a4e <HAL_DMA_Init+0x5be>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a5d      	ldr	r2, [pc, #372]	@ (8007ae4 <HAL_DMA_Init+0x654>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d06d      	beq.n	8007a4e <HAL_DMA_Init+0x5be>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a5c      	ldr	r2, [pc, #368]	@ (8007ae8 <HAL_DMA_Init+0x658>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d068      	beq.n	8007a4e <HAL_DMA_Init+0x5be>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a5a      	ldr	r2, [pc, #360]	@ (8007aec <HAL_DMA_Init+0x65c>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d063      	beq.n	8007a4e <HAL_DMA_Init+0x5be>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a59      	ldr	r2, [pc, #356]	@ (8007af0 <HAL_DMA_Init+0x660>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d05e      	beq.n	8007a4e <HAL_DMA_Init+0x5be>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a57      	ldr	r2, [pc, #348]	@ (8007af4 <HAL_DMA_Init+0x664>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d059      	beq.n	8007a4e <HAL_DMA_Init+0x5be>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a56      	ldr	r2, [pc, #344]	@ (8007af8 <HAL_DMA_Init+0x668>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d054      	beq.n	8007a4e <HAL_DMA_Init+0x5be>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a54      	ldr	r2, [pc, #336]	@ (8007afc <HAL_DMA_Init+0x66c>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d04f      	beq.n	8007a4e <HAL_DMA_Init+0x5be>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a53      	ldr	r2, [pc, #332]	@ (8007b00 <HAL_DMA_Init+0x670>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d04a      	beq.n	8007a4e <HAL_DMA_Init+0x5be>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a51      	ldr	r2, [pc, #324]	@ (8007b04 <HAL_DMA_Init+0x674>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d045      	beq.n	8007a4e <HAL_DMA_Init+0x5be>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a50      	ldr	r2, [pc, #320]	@ (8007b08 <HAL_DMA_Init+0x678>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d040      	beq.n	8007a4e <HAL_DMA_Init+0x5be>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a4e      	ldr	r2, [pc, #312]	@ (8007b0c <HAL_DMA_Init+0x67c>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d03b      	beq.n	8007a4e <HAL_DMA_Init+0x5be>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a4d      	ldr	r2, [pc, #308]	@ (8007b10 <HAL_DMA_Init+0x680>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d036      	beq.n	8007a4e <HAL_DMA_Init+0x5be>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a4b      	ldr	r2, [pc, #300]	@ (8007b14 <HAL_DMA_Init+0x684>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d031      	beq.n	8007a4e <HAL_DMA_Init+0x5be>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a4a      	ldr	r2, [pc, #296]	@ (8007b18 <HAL_DMA_Init+0x688>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d02c      	beq.n	8007a4e <HAL_DMA_Init+0x5be>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a48      	ldr	r2, [pc, #288]	@ (8007b1c <HAL_DMA_Init+0x68c>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d027      	beq.n	8007a4e <HAL_DMA_Init+0x5be>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a47      	ldr	r2, [pc, #284]	@ (8007b20 <HAL_DMA_Init+0x690>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d022      	beq.n	8007a4e <HAL_DMA_Init+0x5be>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a45      	ldr	r2, [pc, #276]	@ (8007b24 <HAL_DMA_Init+0x694>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d01d      	beq.n	8007a4e <HAL_DMA_Init+0x5be>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a44      	ldr	r2, [pc, #272]	@ (8007b28 <HAL_DMA_Init+0x698>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d018      	beq.n	8007a4e <HAL_DMA_Init+0x5be>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a42      	ldr	r2, [pc, #264]	@ (8007b2c <HAL_DMA_Init+0x69c>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d013      	beq.n	8007a4e <HAL_DMA_Init+0x5be>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a41      	ldr	r2, [pc, #260]	@ (8007b30 <HAL_DMA_Init+0x6a0>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d00e      	beq.n	8007a4e <HAL_DMA_Init+0x5be>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a3f      	ldr	r2, [pc, #252]	@ (8007b34 <HAL_DMA_Init+0x6a4>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d009      	beq.n	8007a4e <HAL_DMA_Init+0x5be>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a3e      	ldr	r2, [pc, #248]	@ (8007b38 <HAL_DMA_Init+0x6a8>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d004      	beq.n	8007a4e <HAL_DMA_Init+0x5be>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a3c      	ldr	r2, [pc, #240]	@ (8007b3c <HAL_DMA_Init+0x6ac>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d101      	bne.n	8007a52 <HAL_DMA_Init+0x5c2>
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e000      	b.n	8007a54 <HAL_DMA_Init+0x5c4>
 8007a52:	2300      	movs	r3, #0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d032      	beq.n	8007abe <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f001 fcdf 	bl	800941c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	2b80      	cmp	r3, #128	@ 0x80
 8007a64:	d102      	bne.n	8007a6c <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	685a      	ldr	r2, [r3, #4]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a74:	b2d2      	uxtb	r2, r2
 8007a76:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007a80:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d010      	beq.n	8007aac <HAL_DMA_Init+0x61c>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	2b08      	cmp	r3, #8
 8007a90:	d80c      	bhi.n	8007aac <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f001 fd5c 	bl	8009550 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007aa8:	605a      	str	r2, [r3, #4]
 8007aaa:	e008      	b.n	8007abe <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3718      	adds	r7, #24
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	a7fdabf8 	.word	0xa7fdabf8
 8007adc:	cccccccd 	.word	0xcccccccd
 8007ae0:	40020010 	.word	0x40020010
 8007ae4:	40020028 	.word	0x40020028
 8007ae8:	40020040 	.word	0x40020040
 8007aec:	40020058 	.word	0x40020058
 8007af0:	40020070 	.word	0x40020070
 8007af4:	40020088 	.word	0x40020088
 8007af8:	400200a0 	.word	0x400200a0
 8007afc:	400200b8 	.word	0x400200b8
 8007b00:	40020410 	.word	0x40020410
 8007b04:	40020428 	.word	0x40020428
 8007b08:	40020440 	.word	0x40020440
 8007b0c:	40020458 	.word	0x40020458
 8007b10:	40020470 	.word	0x40020470
 8007b14:	40020488 	.word	0x40020488
 8007b18:	400204a0 	.word	0x400204a0
 8007b1c:	400204b8 	.word	0x400204b8
 8007b20:	58025408 	.word	0x58025408
 8007b24:	5802541c 	.word	0x5802541c
 8007b28:	58025430 	.word	0x58025430
 8007b2c:	58025444 	.word	0x58025444
 8007b30:	58025458 	.word	0x58025458
 8007b34:	5802546c 	.word	0x5802546c
 8007b38:	58025480 	.word	0x58025480
 8007b3c:	58025494 	.word	0x58025494

08007b40 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b086      	sub	sp, #24
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	60b9      	str	r1, [r7, #8]
 8007b4a:	607a      	str	r2, [r7, #4]
 8007b4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d101      	bne.n	8007b5c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e226      	b.n	8007faa <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d101      	bne.n	8007b6a <HAL_DMA_Start_IT+0x2a>
 8007b66:	2302      	movs	r3, #2
 8007b68:	e21f      	b.n	8007faa <HAL_DMA_Start_IT+0x46a>
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	f040 820a 	bne.w	8007f94 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2202      	movs	r2, #2
 8007b84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a68      	ldr	r2, [pc, #416]	@ (8007d34 <HAL_DMA_Start_IT+0x1f4>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d04a      	beq.n	8007c2e <HAL_DMA_Start_IT+0xee>
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a66      	ldr	r2, [pc, #408]	@ (8007d38 <HAL_DMA_Start_IT+0x1f8>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d045      	beq.n	8007c2e <HAL_DMA_Start_IT+0xee>
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a65      	ldr	r2, [pc, #404]	@ (8007d3c <HAL_DMA_Start_IT+0x1fc>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d040      	beq.n	8007c2e <HAL_DMA_Start_IT+0xee>
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a63      	ldr	r2, [pc, #396]	@ (8007d40 <HAL_DMA_Start_IT+0x200>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d03b      	beq.n	8007c2e <HAL_DMA_Start_IT+0xee>
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a62      	ldr	r2, [pc, #392]	@ (8007d44 <HAL_DMA_Start_IT+0x204>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d036      	beq.n	8007c2e <HAL_DMA_Start_IT+0xee>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a60      	ldr	r2, [pc, #384]	@ (8007d48 <HAL_DMA_Start_IT+0x208>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d031      	beq.n	8007c2e <HAL_DMA_Start_IT+0xee>
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a5f      	ldr	r2, [pc, #380]	@ (8007d4c <HAL_DMA_Start_IT+0x20c>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d02c      	beq.n	8007c2e <HAL_DMA_Start_IT+0xee>
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a5d      	ldr	r2, [pc, #372]	@ (8007d50 <HAL_DMA_Start_IT+0x210>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d027      	beq.n	8007c2e <HAL_DMA_Start_IT+0xee>
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a5c      	ldr	r2, [pc, #368]	@ (8007d54 <HAL_DMA_Start_IT+0x214>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d022      	beq.n	8007c2e <HAL_DMA_Start_IT+0xee>
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a5a      	ldr	r2, [pc, #360]	@ (8007d58 <HAL_DMA_Start_IT+0x218>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d01d      	beq.n	8007c2e <HAL_DMA_Start_IT+0xee>
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a59      	ldr	r2, [pc, #356]	@ (8007d5c <HAL_DMA_Start_IT+0x21c>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d018      	beq.n	8007c2e <HAL_DMA_Start_IT+0xee>
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a57      	ldr	r2, [pc, #348]	@ (8007d60 <HAL_DMA_Start_IT+0x220>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d013      	beq.n	8007c2e <HAL_DMA_Start_IT+0xee>
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a56      	ldr	r2, [pc, #344]	@ (8007d64 <HAL_DMA_Start_IT+0x224>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d00e      	beq.n	8007c2e <HAL_DMA_Start_IT+0xee>
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a54      	ldr	r2, [pc, #336]	@ (8007d68 <HAL_DMA_Start_IT+0x228>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d009      	beq.n	8007c2e <HAL_DMA_Start_IT+0xee>
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a53      	ldr	r2, [pc, #332]	@ (8007d6c <HAL_DMA_Start_IT+0x22c>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d004      	beq.n	8007c2e <HAL_DMA_Start_IT+0xee>
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a51      	ldr	r2, [pc, #324]	@ (8007d70 <HAL_DMA_Start_IT+0x230>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d108      	bne.n	8007c40 <HAL_DMA_Start_IT+0x100>
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f022 0201 	bic.w	r2, r2, #1
 8007c3c:	601a      	str	r2, [r3, #0]
 8007c3e:	e007      	b.n	8007c50 <HAL_DMA_Start_IT+0x110>
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f022 0201 	bic.w	r2, r2, #1
 8007c4e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	68b9      	ldr	r1, [r7, #8]
 8007c56:	68f8      	ldr	r0, [r7, #12]
 8007c58:	f001 f906 	bl	8008e68 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a34      	ldr	r2, [pc, #208]	@ (8007d34 <HAL_DMA_Start_IT+0x1f4>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d04a      	beq.n	8007cfc <HAL_DMA_Start_IT+0x1bc>
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a33      	ldr	r2, [pc, #204]	@ (8007d38 <HAL_DMA_Start_IT+0x1f8>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d045      	beq.n	8007cfc <HAL_DMA_Start_IT+0x1bc>
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a31      	ldr	r2, [pc, #196]	@ (8007d3c <HAL_DMA_Start_IT+0x1fc>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d040      	beq.n	8007cfc <HAL_DMA_Start_IT+0x1bc>
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a30      	ldr	r2, [pc, #192]	@ (8007d40 <HAL_DMA_Start_IT+0x200>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d03b      	beq.n	8007cfc <HAL_DMA_Start_IT+0x1bc>
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a2e      	ldr	r2, [pc, #184]	@ (8007d44 <HAL_DMA_Start_IT+0x204>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d036      	beq.n	8007cfc <HAL_DMA_Start_IT+0x1bc>
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a2d      	ldr	r2, [pc, #180]	@ (8007d48 <HAL_DMA_Start_IT+0x208>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d031      	beq.n	8007cfc <HAL_DMA_Start_IT+0x1bc>
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a2b      	ldr	r2, [pc, #172]	@ (8007d4c <HAL_DMA_Start_IT+0x20c>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d02c      	beq.n	8007cfc <HAL_DMA_Start_IT+0x1bc>
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a2a      	ldr	r2, [pc, #168]	@ (8007d50 <HAL_DMA_Start_IT+0x210>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d027      	beq.n	8007cfc <HAL_DMA_Start_IT+0x1bc>
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a28      	ldr	r2, [pc, #160]	@ (8007d54 <HAL_DMA_Start_IT+0x214>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d022      	beq.n	8007cfc <HAL_DMA_Start_IT+0x1bc>
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	4a27      	ldr	r2, [pc, #156]	@ (8007d58 <HAL_DMA_Start_IT+0x218>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	d01d      	beq.n	8007cfc <HAL_DMA_Start_IT+0x1bc>
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a25      	ldr	r2, [pc, #148]	@ (8007d5c <HAL_DMA_Start_IT+0x21c>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d018      	beq.n	8007cfc <HAL_DMA_Start_IT+0x1bc>
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a24      	ldr	r2, [pc, #144]	@ (8007d60 <HAL_DMA_Start_IT+0x220>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d013      	beq.n	8007cfc <HAL_DMA_Start_IT+0x1bc>
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a22      	ldr	r2, [pc, #136]	@ (8007d64 <HAL_DMA_Start_IT+0x224>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d00e      	beq.n	8007cfc <HAL_DMA_Start_IT+0x1bc>
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a21      	ldr	r2, [pc, #132]	@ (8007d68 <HAL_DMA_Start_IT+0x228>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d009      	beq.n	8007cfc <HAL_DMA_Start_IT+0x1bc>
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a1f      	ldr	r2, [pc, #124]	@ (8007d6c <HAL_DMA_Start_IT+0x22c>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d004      	beq.n	8007cfc <HAL_DMA_Start_IT+0x1bc>
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a1e      	ldr	r2, [pc, #120]	@ (8007d70 <HAL_DMA_Start_IT+0x230>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d101      	bne.n	8007d00 <HAL_DMA_Start_IT+0x1c0>
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	e000      	b.n	8007d02 <HAL_DMA_Start_IT+0x1c2>
 8007d00:	2300      	movs	r3, #0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d036      	beq.n	8007d74 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f023 021e 	bic.w	r2, r3, #30
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f042 0216 	orr.w	r2, r2, #22
 8007d18:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d03e      	beq.n	8007da0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f042 0208 	orr.w	r2, r2, #8
 8007d30:	601a      	str	r2, [r3, #0]
 8007d32:	e035      	b.n	8007da0 <HAL_DMA_Start_IT+0x260>
 8007d34:	40020010 	.word	0x40020010
 8007d38:	40020028 	.word	0x40020028
 8007d3c:	40020040 	.word	0x40020040
 8007d40:	40020058 	.word	0x40020058
 8007d44:	40020070 	.word	0x40020070
 8007d48:	40020088 	.word	0x40020088
 8007d4c:	400200a0 	.word	0x400200a0
 8007d50:	400200b8 	.word	0x400200b8
 8007d54:	40020410 	.word	0x40020410
 8007d58:	40020428 	.word	0x40020428
 8007d5c:	40020440 	.word	0x40020440
 8007d60:	40020458 	.word	0x40020458
 8007d64:	40020470 	.word	0x40020470
 8007d68:	40020488 	.word	0x40020488
 8007d6c:	400204a0 	.word	0x400204a0
 8007d70:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f023 020e 	bic.w	r2, r3, #14
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f042 020a 	orr.w	r2, r2, #10
 8007d86:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d007      	beq.n	8007da0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f042 0204 	orr.w	r2, r2, #4
 8007d9e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a83      	ldr	r2, [pc, #524]	@ (8007fb4 <HAL_DMA_Start_IT+0x474>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d072      	beq.n	8007e90 <HAL_DMA_Start_IT+0x350>
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a82      	ldr	r2, [pc, #520]	@ (8007fb8 <HAL_DMA_Start_IT+0x478>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d06d      	beq.n	8007e90 <HAL_DMA_Start_IT+0x350>
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a80      	ldr	r2, [pc, #512]	@ (8007fbc <HAL_DMA_Start_IT+0x47c>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d068      	beq.n	8007e90 <HAL_DMA_Start_IT+0x350>
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a7f      	ldr	r2, [pc, #508]	@ (8007fc0 <HAL_DMA_Start_IT+0x480>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d063      	beq.n	8007e90 <HAL_DMA_Start_IT+0x350>
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a7d      	ldr	r2, [pc, #500]	@ (8007fc4 <HAL_DMA_Start_IT+0x484>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d05e      	beq.n	8007e90 <HAL_DMA_Start_IT+0x350>
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4a7c      	ldr	r2, [pc, #496]	@ (8007fc8 <HAL_DMA_Start_IT+0x488>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d059      	beq.n	8007e90 <HAL_DMA_Start_IT+0x350>
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a7a      	ldr	r2, [pc, #488]	@ (8007fcc <HAL_DMA_Start_IT+0x48c>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d054      	beq.n	8007e90 <HAL_DMA_Start_IT+0x350>
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a79      	ldr	r2, [pc, #484]	@ (8007fd0 <HAL_DMA_Start_IT+0x490>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d04f      	beq.n	8007e90 <HAL_DMA_Start_IT+0x350>
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a77      	ldr	r2, [pc, #476]	@ (8007fd4 <HAL_DMA_Start_IT+0x494>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d04a      	beq.n	8007e90 <HAL_DMA_Start_IT+0x350>
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a76      	ldr	r2, [pc, #472]	@ (8007fd8 <HAL_DMA_Start_IT+0x498>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d045      	beq.n	8007e90 <HAL_DMA_Start_IT+0x350>
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a74      	ldr	r2, [pc, #464]	@ (8007fdc <HAL_DMA_Start_IT+0x49c>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d040      	beq.n	8007e90 <HAL_DMA_Start_IT+0x350>
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a73      	ldr	r2, [pc, #460]	@ (8007fe0 <HAL_DMA_Start_IT+0x4a0>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d03b      	beq.n	8007e90 <HAL_DMA_Start_IT+0x350>
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a71      	ldr	r2, [pc, #452]	@ (8007fe4 <HAL_DMA_Start_IT+0x4a4>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d036      	beq.n	8007e90 <HAL_DMA_Start_IT+0x350>
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a70      	ldr	r2, [pc, #448]	@ (8007fe8 <HAL_DMA_Start_IT+0x4a8>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d031      	beq.n	8007e90 <HAL_DMA_Start_IT+0x350>
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a6e      	ldr	r2, [pc, #440]	@ (8007fec <HAL_DMA_Start_IT+0x4ac>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d02c      	beq.n	8007e90 <HAL_DMA_Start_IT+0x350>
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a6d      	ldr	r2, [pc, #436]	@ (8007ff0 <HAL_DMA_Start_IT+0x4b0>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d027      	beq.n	8007e90 <HAL_DMA_Start_IT+0x350>
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a6b      	ldr	r2, [pc, #428]	@ (8007ff4 <HAL_DMA_Start_IT+0x4b4>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d022      	beq.n	8007e90 <HAL_DMA_Start_IT+0x350>
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a6a      	ldr	r2, [pc, #424]	@ (8007ff8 <HAL_DMA_Start_IT+0x4b8>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d01d      	beq.n	8007e90 <HAL_DMA_Start_IT+0x350>
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a68      	ldr	r2, [pc, #416]	@ (8007ffc <HAL_DMA_Start_IT+0x4bc>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d018      	beq.n	8007e90 <HAL_DMA_Start_IT+0x350>
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a67      	ldr	r2, [pc, #412]	@ (8008000 <HAL_DMA_Start_IT+0x4c0>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d013      	beq.n	8007e90 <HAL_DMA_Start_IT+0x350>
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a65      	ldr	r2, [pc, #404]	@ (8008004 <HAL_DMA_Start_IT+0x4c4>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d00e      	beq.n	8007e90 <HAL_DMA_Start_IT+0x350>
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a64      	ldr	r2, [pc, #400]	@ (8008008 <HAL_DMA_Start_IT+0x4c8>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d009      	beq.n	8007e90 <HAL_DMA_Start_IT+0x350>
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a62      	ldr	r2, [pc, #392]	@ (800800c <HAL_DMA_Start_IT+0x4cc>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d004      	beq.n	8007e90 <HAL_DMA_Start_IT+0x350>
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a61      	ldr	r2, [pc, #388]	@ (8008010 <HAL_DMA_Start_IT+0x4d0>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d101      	bne.n	8007e94 <HAL_DMA_Start_IT+0x354>
 8007e90:	2301      	movs	r3, #1
 8007e92:	e000      	b.n	8007e96 <HAL_DMA_Start_IT+0x356>
 8007e94:	2300      	movs	r3, #0
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d01a      	beq.n	8007ed0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d007      	beq.n	8007eb8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007eb2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007eb6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d007      	beq.n	8007ed0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007eca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007ece:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a37      	ldr	r2, [pc, #220]	@ (8007fb4 <HAL_DMA_Start_IT+0x474>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d04a      	beq.n	8007f70 <HAL_DMA_Start_IT+0x430>
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a36      	ldr	r2, [pc, #216]	@ (8007fb8 <HAL_DMA_Start_IT+0x478>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d045      	beq.n	8007f70 <HAL_DMA_Start_IT+0x430>
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a34      	ldr	r2, [pc, #208]	@ (8007fbc <HAL_DMA_Start_IT+0x47c>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d040      	beq.n	8007f70 <HAL_DMA_Start_IT+0x430>
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a33      	ldr	r2, [pc, #204]	@ (8007fc0 <HAL_DMA_Start_IT+0x480>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d03b      	beq.n	8007f70 <HAL_DMA_Start_IT+0x430>
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a31      	ldr	r2, [pc, #196]	@ (8007fc4 <HAL_DMA_Start_IT+0x484>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d036      	beq.n	8007f70 <HAL_DMA_Start_IT+0x430>
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a30      	ldr	r2, [pc, #192]	@ (8007fc8 <HAL_DMA_Start_IT+0x488>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d031      	beq.n	8007f70 <HAL_DMA_Start_IT+0x430>
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a2e      	ldr	r2, [pc, #184]	@ (8007fcc <HAL_DMA_Start_IT+0x48c>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d02c      	beq.n	8007f70 <HAL_DMA_Start_IT+0x430>
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a2d      	ldr	r2, [pc, #180]	@ (8007fd0 <HAL_DMA_Start_IT+0x490>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d027      	beq.n	8007f70 <HAL_DMA_Start_IT+0x430>
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a2b      	ldr	r2, [pc, #172]	@ (8007fd4 <HAL_DMA_Start_IT+0x494>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d022      	beq.n	8007f70 <HAL_DMA_Start_IT+0x430>
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a2a      	ldr	r2, [pc, #168]	@ (8007fd8 <HAL_DMA_Start_IT+0x498>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d01d      	beq.n	8007f70 <HAL_DMA_Start_IT+0x430>
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a28      	ldr	r2, [pc, #160]	@ (8007fdc <HAL_DMA_Start_IT+0x49c>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d018      	beq.n	8007f70 <HAL_DMA_Start_IT+0x430>
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a27      	ldr	r2, [pc, #156]	@ (8007fe0 <HAL_DMA_Start_IT+0x4a0>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d013      	beq.n	8007f70 <HAL_DMA_Start_IT+0x430>
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a25      	ldr	r2, [pc, #148]	@ (8007fe4 <HAL_DMA_Start_IT+0x4a4>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d00e      	beq.n	8007f70 <HAL_DMA_Start_IT+0x430>
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a24      	ldr	r2, [pc, #144]	@ (8007fe8 <HAL_DMA_Start_IT+0x4a8>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d009      	beq.n	8007f70 <HAL_DMA_Start_IT+0x430>
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a22      	ldr	r2, [pc, #136]	@ (8007fec <HAL_DMA_Start_IT+0x4ac>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d004      	beq.n	8007f70 <HAL_DMA_Start_IT+0x430>
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a21      	ldr	r2, [pc, #132]	@ (8007ff0 <HAL_DMA_Start_IT+0x4b0>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d108      	bne.n	8007f82 <HAL_DMA_Start_IT+0x442>
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	681a      	ldr	r2, [r3, #0]
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f042 0201 	orr.w	r2, r2, #1
 8007f7e:	601a      	str	r2, [r3, #0]
 8007f80:	e012      	b.n	8007fa8 <HAL_DMA_Start_IT+0x468>
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f042 0201 	orr.w	r2, r2, #1
 8007f90:	601a      	str	r2, [r3, #0]
 8007f92:	e009      	b.n	8007fa8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007f9a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007fa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3718      	adds	r7, #24
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	40020010 	.word	0x40020010
 8007fb8:	40020028 	.word	0x40020028
 8007fbc:	40020040 	.word	0x40020040
 8007fc0:	40020058 	.word	0x40020058
 8007fc4:	40020070 	.word	0x40020070
 8007fc8:	40020088 	.word	0x40020088
 8007fcc:	400200a0 	.word	0x400200a0
 8007fd0:	400200b8 	.word	0x400200b8
 8007fd4:	40020410 	.word	0x40020410
 8007fd8:	40020428 	.word	0x40020428
 8007fdc:	40020440 	.word	0x40020440
 8007fe0:	40020458 	.word	0x40020458
 8007fe4:	40020470 	.word	0x40020470
 8007fe8:	40020488 	.word	0x40020488
 8007fec:	400204a0 	.word	0x400204a0
 8007ff0:	400204b8 	.word	0x400204b8
 8007ff4:	58025408 	.word	0x58025408
 8007ff8:	5802541c 	.word	0x5802541c
 8007ffc:	58025430 	.word	0x58025430
 8008000:	58025444 	.word	0x58025444
 8008004:	58025458 	.word	0x58025458
 8008008:	5802546c 	.word	0x5802546c
 800800c:	58025480 	.word	0x58025480
 8008010:	58025494 	.word	0x58025494

08008014 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b08a      	sub	sp, #40	@ 0x28
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800801c:	2300      	movs	r3, #0
 800801e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008020:	4b67      	ldr	r3, [pc, #412]	@ (80081c0 <HAL_DMA_IRQHandler+0x1ac>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a67      	ldr	r2, [pc, #412]	@ (80081c4 <HAL_DMA_IRQHandler+0x1b0>)
 8008026:	fba2 2303 	umull	r2, r3, r2, r3
 800802a:	0a9b      	lsrs	r3, r3, #10
 800802c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008032:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008038:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800803a:	6a3b      	ldr	r3, [r7, #32]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8008040:	69fb      	ldr	r3, [r7, #28]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a5f      	ldr	r2, [pc, #380]	@ (80081c8 <HAL_DMA_IRQHandler+0x1b4>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d04a      	beq.n	80080e6 <HAL_DMA_IRQHandler+0xd2>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a5d      	ldr	r2, [pc, #372]	@ (80081cc <HAL_DMA_IRQHandler+0x1b8>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d045      	beq.n	80080e6 <HAL_DMA_IRQHandler+0xd2>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a5c      	ldr	r2, [pc, #368]	@ (80081d0 <HAL_DMA_IRQHandler+0x1bc>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d040      	beq.n	80080e6 <HAL_DMA_IRQHandler+0xd2>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a5a      	ldr	r2, [pc, #360]	@ (80081d4 <HAL_DMA_IRQHandler+0x1c0>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d03b      	beq.n	80080e6 <HAL_DMA_IRQHandler+0xd2>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a59      	ldr	r2, [pc, #356]	@ (80081d8 <HAL_DMA_IRQHandler+0x1c4>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d036      	beq.n	80080e6 <HAL_DMA_IRQHandler+0xd2>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a57      	ldr	r2, [pc, #348]	@ (80081dc <HAL_DMA_IRQHandler+0x1c8>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d031      	beq.n	80080e6 <HAL_DMA_IRQHandler+0xd2>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a56      	ldr	r2, [pc, #344]	@ (80081e0 <HAL_DMA_IRQHandler+0x1cc>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d02c      	beq.n	80080e6 <HAL_DMA_IRQHandler+0xd2>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a54      	ldr	r2, [pc, #336]	@ (80081e4 <HAL_DMA_IRQHandler+0x1d0>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d027      	beq.n	80080e6 <HAL_DMA_IRQHandler+0xd2>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a53      	ldr	r2, [pc, #332]	@ (80081e8 <HAL_DMA_IRQHandler+0x1d4>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d022      	beq.n	80080e6 <HAL_DMA_IRQHandler+0xd2>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a51      	ldr	r2, [pc, #324]	@ (80081ec <HAL_DMA_IRQHandler+0x1d8>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d01d      	beq.n	80080e6 <HAL_DMA_IRQHandler+0xd2>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a50      	ldr	r2, [pc, #320]	@ (80081f0 <HAL_DMA_IRQHandler+0x1dc>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d018      	beq.n	80080e6 <HAL_DMA_IRQHandler+0xd2>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a4e      	ldr	r2, [pc, #312]	@ (80081f4 <HAL_DMA_IRQHandler+0x1e0>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d013      	beq.n	80080e6 <HAL_DMA_IRQHandler+0xd2>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a4d      	ldr	r2, [pc, #308]	@ (80081f8 <HAL_DMA_IRQHandler+0x1e4>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d00e      	beq.n	80080e6 <HAL_DMA_IRQHandler+0xd2>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a4b      	ldr	r2, [pc, #300]	@ (80081fc <HAL_DMA_IRQHandler+0x1e8>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d009      	beq.n	80080e6 <HAL_DMA_IRQHandler+0xd2>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a4a      	ldr	r2, [pc, #296]	@ (8008200 <HAL_DMA_IRQHandler+0x1ec>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d004      	beq.n	80080e6 <HAL_DMA_IRQHandler+0xd2>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a48      	ldr	r2, [pc, #288]	@ (8008204 <HAL_DMA_IRQHandler+0x1f0>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d101      	bne.n	80080ea <HAL_DMA_IRQHandler+0xd6>
 80080e6:	2301      	movs	r3, #1
 80080e8:	e000      	b.n	80080ec <HAL_DMA_IRQHandler+0xd8>
 80080ea:	2300      	movs	r3, #0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	f000 842b 	beq.w	8008948 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080f6:	f003 031f 	and.w	r3, r3, #31
 80080fa:	2208      	movs	r2, #8
 80080fc:	409a      	lsls	r2, r3
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	4013      	ands	r3, r2
 8008102:	2b00      	cmp	r3, #0
 8008104:	f000 80a2 	beq.w	800824c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a2e      	ldr	r2, [pc, #184]	@ (80081c8 <HAL_DMA_IRQHandler+0x1b4>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d04a      	beq.n	80081a8 <HAL_DMA_IRQHandler+0x194>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a2d      	ldr	r2, [pc, #180]	@ (80081cc <HAL_DMA_IRQHandler+0x1b8>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d045      	beq.n	80081a8 <HAL_DMA_IRQHandler+0x194>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a2b      	ldr	r2, [pc, #172]	@ (80081d0 <HAL_DMA_IRQHandler+0x1bc>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d040      	beq.n	80081a8 <HAL_DMA_IRQHandler+0x194>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a2a      	ldr	r2, [pc, #168]	@ (80081d4 <HAL_DMA_IRQHandler+0x1c0>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d03b      	beq.n	80081a8 <HAL_DMA_IRQHandler+0x194>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a28      	ldr	r2, [pc, #160]	@ (80081d8 <HAL_DMA_IRQHandler+0x1c4>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d036      	beq.n	80081a8 <HAL_DMA_IRQHandler+0x194>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a27      	ldr	r2, [pc, #156]	@ (80081dc <HAL_DMA_IRQHandler+0x1c8>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d031      	beq.n	80081a8 <HAL_DMA_IRQHandler+0x194>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a25      	ldr	r2, [pc, #148]	@ (80081e0 <HAL_DMA_IRQHandler+0x1cc>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d02c      	beq.n	80081a8 <HAL_DMA_IRQHandler+0x194>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a24      	ldr	r2, [pc, #144]	@ (80081e4 <HAL_DMA_IRQHandler+0x1d0>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d027      	beq.n	80081a8 <HAL_DMA_IRQHandler+0x194>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a22      	ldr	r2, [pc, #136]	@ (80081e8 <HAL_DMA_IRQHandler+0x1d4>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d022      	beq.n	80081a8 <HAL_DMA_IRQHandler+0x194>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a21      	ldr	r2, [pc, #132]	@ (80081ec <HAL_DMA_IRQHandler+0x1d8>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d01d      	beq.n	80081a8 <HAL_DMA_IRQHandler+0x194>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a1f      	ldr	r2, [pc, #124]	@ (80081f0 <HAL_DMA_IRQHandler+0x1dc>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d018      	beq.n	80081a8 <HAL_DMA_IRQHandler+0x194>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a1e      	ldr	r2, [pc, #120]	@ (80081f4 <HAL_DMA_IRQHandler+0x1e0>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d013      	beq.n	80081a8 <HAL_DMA_IRQHandler+0x194>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a1c      	ldr	r2, [pc, #112]	@ (80081f8 <HAL_DMA_IRQHandler+0x1e4>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d00e      	beq.n	80081a8 <HAL_DMA_IRQHandler+0x194>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a1b      	ldr	r2, [pc, #108]	@ (80081fc <HAL_DMA_IRQHandler+0x1e8>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d009      	beq.n	80081a8 <HAL_DMA_IRQHandler+0x194>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a19      	ldr	r2, [pc, #100]	@ (8008200 <HAL_DMA_IRQHandler+0x1ec>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d004      	beq.n	80081a8 <HAL_DMA_IRQHandler+0x194>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a18      	ldr	r2, [pc, #96]	@ (8008204 <HAL_DMA_IRQHandler+0x1f0>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d12f      	bne.n	8008208 <HAL_DMA_IRQHandler+0x1f4>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f003 0304 	and.w	r3, r3, #4
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	bf14      	ite	ne
 80081b6:	2301      	movne	r3, #1
 80081b8:	2300      	moveq	r3, #0
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	e02e      	b.n	800821c <HAL_DMA_IRQHandler+0x208>
 80081be:	bf00      	nop
 80081c0:	24000038 	.word	0x24000038
 80081c4:	1b4e81b5 	.word	0x1b4e81b5
 80081c8:	40020010 	.word	0x40020010
 80081cc:	40020028 	.word	0x40020028
 80081d0:	40020040 	.word	0x40020040
 80081d4:	40020058 	.word	0x40020058
 80081d8:	40020070 	.word	0x40020070
 80081dc:	40020088 	.word	0x40020088
 80081e0:	400200a0 	.word	0x400200a0
 80081e4:	400200b8 	.word	0x400200b8
 80081e8:	40020410 	.word	0x40020410
 80081ec:	40020428 	.word	0x40020428
 80081f0:	40020440 	.word	0x40020440
 80081f4:	40020458 	.word	0x40020458
 80081f8:	40020470 	.word	0x40020470
 80081fc:	40020488 	.word	0x40020488
 8008200:	400204a0 	.word	0x400204a0
 8008204:	400204b8 	.word	0x400204b8
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f003 0308 	and.w	r3, r3, #8
 8008212:	2b00      	cmp	r3, #0
 8008214:	bf14      	ite	ne
 8008216:	2301      	movne	r3, #1
 8008218:	2300      	moveq	r3, #0
 800821a:	b2db      	uxtb	r3, r3
 800821c:	2b00      	cmp	r3, #0
 800821e:	d015      	beq.n	800824c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f022 0204 	bic.w	r2, r2, #4
 800822e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008234:	f003 031f 	and.w	r3, r3, #31
 8008238:	2208      	movs	r2, #8
 800823a:	409a      	lsls	r2, r3
 800823c:	6a3b      	ldr	r3, [r7, #32]
 800823e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008244:	f043 0201 	orr.w	r2, r3, #1
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008250:	f003 031f 	and.w	r3, r3, #31
 8008254:	69ba      	ldr	r2, [r7, #24]
 8008256:	fa22 f303 	lsr.w	r3, r2, r3
 800825a:	f003 0301 	and.w	r3, r3, #1
 800825e:	2b00      	cmp	r3, #0
 8008260:	d06e      	beq.n	8008340 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a69      	ldr	r2, [pc, #420]	@ (800840c <HAL_DMA_IRQHandler+0x3f8>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d04a      	beq.n	8008302 <HAL_DMA_IRQHandler+0x2ee>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a67      	ldr	r2, [pc, #412]	@ (8008410 <HAL_DMA_IRQHandler+0x3fc>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d045      	beq.n	8008302 <HAL_DMA_IRQHandler+0x2ee>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a66      	ldr	r2, [pc, #408]	@ (8008414 <HAL_DMA_IRQHandler+0x400>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d040      	beq.n	8008302 <HAL_DMA_IRQHandler+0x2ee>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a64      	ldr	r2, [pc, #400]	@ (8008418 <HAL_DMA_IRQHandler+0x404>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d03b      	beq.n	8008302 <HAL_DMA_IRQHandler+0x2ee>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a63      	ldr	r2, [pc, #396]	@ (800841c <HAL_DMA_IRQHandler+0x408>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d036      	beq.n	8008302 <HAL_DMA_IRQHandler+0x2ee>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a61      	ldr	r2, [pc, #388]	@ (8008420 <HAL_DMA_IRQHandler+0x40c>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d031      	beq.n	8008302 <HAL_DMA_IRQHandler+0x2ee>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a60      	ldr	r2, [pc, #384]	@ (8008424 <HAL_DMA_IRQHandler+0x410>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d02c      	beq.n	8008302 <HAL_DMA_IRQHandler+0x2ee>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a5e      	ldr	r2, [pc, #376]	@ (8008428 <HAL_DMA_IRQHandler+0x414>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d027      	beq.n	8008302 <HAL_DMA_IRQHandler+0x2ee>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a5d      	ldr	r2, [pc, #372]	@ (800842c <HAL_DMA_IRQHandler+0x418>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d022      	beq.n	8008302 <HAL_DMA_IRQHandler+0x2ee>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a5b      	ldr	r2, [pc, #364]	@ (8008430 <HAL_DMA_IRQHandler+0x41c>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d01d      	beq.n	8008302 <HAL_DMA_IRQHandler+0x2ee>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a5a      	ldr	r2, [pc, #360]	@ (8008434 <HAL_DMA_IRQHandler+0x420>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d018      	beq.n	8008302 <HAL_DMA_IRQHandler+0x2ee>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a58      	ldr	r2, [pc, #352]	@ (8008438 <HAL_DMA_IRQHandler+0x424>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d013      	beq.n	8008302 <HAL_DMA_IRQHandler+0x2ee>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a57      	ldr	r2, [pc, #348]	@ (800843c <HAL_DMA_IRQHandler+0x428>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d00e      	beq.n	8008302 <HAL_DMA_IRQHandler+0x2ee>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a55      	ldr	r2, [pc, #340]	@ (8008440 <HAL_DMA_IRQHandler+0x42c>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d009      	beq.n	8008302 <HAL_DMA_IRQHandler+0x2ee>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a54      	ldr	r2, [pc, #336]	@ (8008444 <HAL_DMA_IRQHandler+0x430>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d004      	beq.n	8008302 <HAL_DMA_IRQHandler+0x2ee>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a52      	ldr	r2, [pc, #328]	@ (8008448 <HAL_DMA_IRQHandler+0x434>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d10a      	bne.n	8008318 <HAL_DMA_IRQHandler+0x304>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	695b      	ldr	r3, [r3, #20]
 8008308:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800830c:	2b00      	cmp	r3, #0
 800830e:	bf14      	ite	ne
 8008310:	2301      	movne	r3, #1
 8008312:	2300      	moveq	r3, #0
 8008314:	b2db      	uxtb	r3, r3
 8008316:	e003      	b.n	8008320 <HAL_DMA_IRQHandler+0x30c>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	2300      	movs	r3, #0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d00d      	beq.n	8008340 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008328:	f003 031f 	and.w	r3, r3, #31
 800832c:	2201      	movs	r2, #1
 800832e:	409a      	lsls	r2, r3
 8008330:	6a3b      	ldr	r3, [r7, #32]
 8008332:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008338:	f043 0202 	orr.w	r2, r3, #2
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008344:	f003 031f 	and.w	r3, r3, #31
 8008348:	2204      	movs	r2, #4
 800834a:	409a      	lsls	r2, r3
 800834c:	69bb      	ldr	r3, [r7, #24]
 800834e:	4013      	ands	r3, r2
 8008350:	2b00      	cmp	r3, #0
 8008352:	f000 808f 	beq.w	8008474 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a2c      	ldr	r2, [pc, #176]	@ (800840c <HAL_DMA_IRQHandler+0x3f8>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d04a      	beq.n	80083f6 <HAL_DMA_IRQHandler+0x3e2>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a2a      	ldr	r2, [pc, #168]	@ (8008410 <HAL_DMA_IRQHandler+0x3fc>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d045      	beq.n	80083f6 <HAL_DMA_IRQHandler+0x3e2>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a29      	ldr	r2, [pc, #164]	@ (8008414 <HAL_DMA_IRQHandler+0x400>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d040      	beq.n	80083f6 <HAL_DMA_IRQHandler+0x3e2>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a27      	ldr	r2, [pc, #156]	@ (8008418 <HAL_DMA_IRQHandler+0x404>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d03b      	beq.n	80083f6 <HAL_DMA_IRQHandler+0x3e2>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a26      	ldr	r2, [pc, #152]	@ (800841c <HAL_DMA_IRQHandler+0x408>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d036      	beq.n	80083f6 <HAL_DMA_IRQHandler+0x3e2>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a24      	ldr	r2, [pc, #144]	@ (8008420 <HAL_DMA_IRQHandler+0x40c>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d031      	beq.n	80083f6 <HAL_DMA_IRQHandler+0x3e2>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a23      	ldr	r2, [pc, #140]	@ (8008424 <HAL_DMA_IRQHandler+0x410>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d02c      	beq.n	80083f6 <HAL_DMA_IRQHandler+0x3e2>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a21      	ldr	r2, [pc, #132]	@ (8008428 <HAL_DMA_IRQHandler+0x414>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d027      	beq.n	80083f6 <HAL_DMA_IRQHandler+0x3e2>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a20      	ldr	r2, [pc, #128]	@ (800842c <HAL_DMA_IRQHandler+0x418>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d022      	beq.n	80083f6 <HAL_DMA_IRQHandler+0x3e2>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a1e      	ldr	r2, [pc, #120]	@ (8008430 <HAL_DMA_IRQHandler+0x41c>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d01d      	beq.n	80083f6 <HAL_DMA_IRQHandler+0x3e2>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a1d      	ldr	r2, [pc, #116]	@ (8008434 <HAL_DMA_IRQHandler+0x420>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d018      	beq.n	80083f6 <HAL_DMA_IRQHandler+0x3e2>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a1b      	ldr	r2, [pc, #108]	@ (8008438 <HAL_DMA_IRQHandler+0x424>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d013      	beq.n	80083f6 <HAL_DMA_IRQHandler+0x3e2>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a1a      	ldr	r2, [pc, #104]	@ (800843c <HAL_DMA_IRQHandler+0x428>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d00e      	beq.n	80083f6 <HAL_DMA_IRQHandler+0x3e2>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a18      	ldr	r2, [pc, #96]	@ (8008440 <HAL_DMA_IRQHandler+0x42c>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d009      	beq.n	80083f6 <HAL_DMA_IRQHandler+0x3e2>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a17      	ldr	r2, [pc, #92]	@ (8008444 <HAL_DMA_IRQHandler+0x430>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d004      	beq.n	80083f6 <HAL_DMA_IRQHandler+0x3e2>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a15      	ldr	r2, [pc, #84]	@ (8008448 <HAL_DMA_IRQHandler+0x434>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d12a      	bne.n	800844c <HAL_DMA_IRQHandler+0x438>
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f003 0302 	and.w	r3, r3, #2
 8008400:	2b00      	cmp	r3, #0
 8008402:	bf14      	ite	ne
 8008404:	2301      	movne	r3, #1
 8008406:	2300      	moveq	r3, #0
 8008408:	b2db      	uxtb	r3, r3
 800840a:	e023      	b.n	8008454 <HAL_DMA_IRQHandler+0x440>
 800840c:	40020010 	.word	0x40020010
 8008410:	40020028 	.word	0x40020028
 8008414:	40020040 	.word	0x40020040
 8008418:	40020058 	.word	0x40020058
 800841c:	40020070 	.word	0x40020070
 8008420:	40020088 	.word	0x40020088
 8008424:	400200a0 	.word	0x400200a0
 8008428:	400200b8 	.word	0x400200b8
 800842c:	40020410 	.word	0x40020410
 8008430:	40020428 	.word	0x40020428
 8008434:	40020440 	.word	0x40020440
 8008438:	40020458 	.word	0x40020458
 800843c:	40020470 	.word	0x40020470
 8008440:	40020488 	.word	0x40020488
 8008444:	400204a0 	.word	0x400204a0
 8008448:	400204b8 	.word	0x400204b8
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	2300      	movs	r3, #0
 8008454:	2b00      	cmp	r3, #0
 8008456:	d00d      	beq.n	8008474 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800845c:	f003 031f 	and.w	r3, r3, #31
 8008460:	2204      	movs	r2, #4
 8008462:	409a      	lsls	r2, r3
 8008464:	6a3b      	ldr	r3, [r7, #32]
 8008466:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800846c:	f043 0204 	orr.w	r2, r3, #4
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008478:	f003 031f 	and.w	r3, r3, #31
 800847c:	2210      	movs	r2, #16
 800847e:	409a      	lsls	r2, r3
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	4013      	ands	r3, r2
 8008484:	2b00      	cmp	r3, #0
 8008486:	f000 80a6 	beq.w	80085d6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a85      	ldr	r2, [pc, #532]	@ (80086a4 <HAL_DMA_IRQHandler+0x690>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d04a      	beq.n	800852a <HAL_DMA_IRQHandler+0x516>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a83      	ldr	r2, [pc, #524]	@ (80086a8 <HAL_DMA_IRQHandler+0x694>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d045      	beq.n	800852a <HAL_DMA_IRQHandler+0x516>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a82      	ldr	r2, [pc, #520]	@ (80086ac <HAL_DMA_IRQHandler+0x698>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d040      	beq.n	800852a <HAL_DMA_IRQHandler+0x516>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a80      	ldr	r2, [pc, #512]	@ (80086b0 <HAL_DMA_IRQHandler+0x69c>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d03b      	beq.n	800852a <HAL_DMA_IRQHandler+0x516>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a7f      	ldr	r2, [pc, #508]	@ (80086b4 <HAL_DMA_IRQHandler+0x6a0>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d036      	beq.n	800852a <HAL_DMA_IRQHandler+0x516>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a7d      	ldr	r2, [pc, #500]	@ (80086b8 <HAL_DMA_IRQHandler+0x6a4>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d031      	beq.n	800852a <HAL_DMA_IRQHandler+0x516>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a7c      	ldr	r2, [pc, #496]	@ (80086bc <HAL_DMA_IRQHandler+0x6a8>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d02c      	beq.n	800852a <HAL_DMA_IRQHandler+0x516>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a7a      	ldr	r2, [pc, #488]	@ (80086c0 <HAL_DMA_IRQHandler+0x6ac>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d027      	beq.n	800852a <HAL_DMA_IRQHandler+0x516>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a79      	ldr	r2, [pc, #484]	@ (80086c4 <HAL_DMA_IRQHandler+0x6b0>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d022      	beq.n	800852a <HAL_DMA_IRQHandler+0x516>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a77      	ldr	r2, [pc, #476]	@ (80086c8 <HAL_DMA_IRQHandler+0x6b4>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d01d      	beq.n	800852a <HAL_DMA_IRQHandler+0x516>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a76      	ldr	r2, [pc, #472]	@ (80086cc <HAL_DMA_IRQHandler+0x6b8>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d018      	beq.n	800852a <HAL_DMA_IRQHandler+0x516>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a74      	ldr	r2, [pc, #464]	@ (80086d0 <HAL_DMA_IRQHandler+0x6bc>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d013      	beq.n	800852a <HAL_DMA_IRQHandler+0x516>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a73      	ldr	r2, [pc, #460]	@ (80086d4 <HAL_DMA_IRQHandler+0x6c0>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d00e      	beq.n	800852a <HAL_DMA_IRQHandler+0x516>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a71      	ldr	r2, [pc, #452]	@ (80086d8 <HAL_DMA_IRQHandler+0x6c4>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d009      	beq.n	800852a <HAL_DMA_IRQHandler+0x516>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a70      	ldr	r2, [pc, #448]	@ (80086dc <HAL_DMA_IRQHandler+0x6c8>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d004      	beq.n	800852a <HAL_DMA_IRQHandler+0x516>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a6e      	ldr	r2, [pc, #440]	@ (80086e0 <HAL_DMA_IRQHandler+0x6cc>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d10a      	bne.n	8008540 <HAL_DMA_IRQHandler+0x52c>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f003 0308 	and.w	r3, r3, #8
 8008534:	2b00      	cmp	r3, #0
 8008536:	bf14      	ite	ne
 8008538:	2301      	movne	r3, #1
 800853a:	2300      	moveq	r3, #0
 800853c:	b2db      	uxtb	r3, r3
 800853e:	e009      	b.n	8008554 <HAL_DMA_IRQHandler+0x540>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f003 0304 	and.w	r3, r3, #4
 800854a:	2b00      	cmp	r3, #0
 800854c:	bf14      	ite	ne
 800854e:	2301      	movne	r3, #1
 8008550:	2300      	moveq	r3, #0
 8008552:	b2db      	uxtb	r3, r3
 8008554:	2b00      	cmp	r3, #0
 8008556:	d03e      	beq.n	80085d6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800855c:	f003 031f 	and.w	r3, r3, #31
 8008560:	2210      	movs	r2, #16
 8008562:	409a      	lsls	r2, r3
 8008564:	6a3b      	ldr	r3, [r7, #32]
 8008566:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008572:	2b00      	cmp	r3, #0
 8008574:	d018      	beq.n	80085a8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008580:	2b00      	cmp	r3, #0
 8008582:	d108      	bne.n	8008596 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008588:	2b00      	cmp	r3, #0
 800858a:	d024      	beq.n	80085d6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	4798      	blx	r3
 8008594:	e01f      	b.n	80085d6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800859a:	2b00      	cmp	r3, #0
 800859c:	d01b      	beq.n	80085d6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	4798      	blx	r3
 80085a6:	e016      	b.n	80085d6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d107      	bne.n	80085c6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f022 0208 	bic.w	r2, r2, #8
 80085c4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d003      	beq.n	80085d6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085da:	f003 031f 	and.w	r3, r3, #31
 80085de:	2220      	movs	r2, #32
 80085e0:	409a      	lsls	r2, r3
 80085e2:	69bb      	ldr	r3, [r7, #24]
 80085e4:	4013      	ands	r3, r2
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	f000 8110 	beq.w	800880c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a2c      	ldr	r2, [pc, #176]	@ (80086a4 <HAL_DMA_IRQHandler+0x690>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d04a      	beq.n	800868c <HAL_DMA_IRQHandler+0x678>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a2b      	ldr	r2, [pc, #172]	@ (80086a8 <HAL_DMA_IRQHandler+0x694>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d045      	beq.n	800868c <HAL_DMA_IRQHandler+0x678>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a29      	ldr	r2, [pc, #164]	@ (80086ac <HAL_DMA_IRQHandler+0x698>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d040      	beq.n	800868c <HAL_DMA_IRQHandler+0x678>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a28      	ldr	r2, [pc, #160]	@ (80086b0 <HAL_DMA_IRQHandler+0x69c>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d03b      	beq.n	800868c <HAL_DMA_IRQHandler+0x678>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a26      	ldr	r2, [pc, #152]	@ (80086b4 <HAL_DMA_IRQHandler+0x6a0>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d036      	beq.n	800868c <HAL_DMA_IRQHandler+0x678>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a25      	ldr	r2, [pc, #148]	@ (80086b8 <HAL_DMA_IRQHandler+0x6a4>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d031      	beq.n	800868c <HAL_DMA_IRQHandler+0x678>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a23      	ldr	r2, [pc, #140]	@ (80086bc <HAL_DMA_IRQHandler+0x6a8>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d02c      	beq.n	800868c <HAL_DMA_IRQHandler+0x678>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a22      	ldr	r2, [pc, #136]	@ (80086c0 <HAL_DMA_IRQHandler+0x6ac>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d027      	beq.n	800868c <HAL_DMA_IRQHandler+0x678>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a20      	ldr	r2, [pc, #128]	@ (80086c4 <HAL_DMA_IRQHandler+0x6b0>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d022      	beq.n	800868c <HAL_DMA_IRQHandler+0x678>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a1f      	ldr	r2, [pc, #124]	@ (80086c8 <HAL_DMA_IRQHandler+0x6b4>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d01d      	beq.n	800868c <HAL_DMA_IRQHandler+0x678>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a1d      	ldr	r2, [pc, #116]	@ (80086cc <HAL_DMA_IRQHandler+0x6b8>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d018      	beq.n	800868c <HAL_DMA_IRQHandler+0x678>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a1c      	ldr	r2, [pc, #112]	@ (80086d0 <HAL_DMA_IRQHandler+0x6bc>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d013      	beq.n	800868c <HAL_DMA_IRQHandler+0x678>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a1a      	ldr	r2, [pc, #104]	@ (80086d4 <HAL_DMA_IRQHandler+0x6c0>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d00e      	beq.n	800868c <HAL_DMA_IRQHandler+0x678>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a19      	ldr	r2, [pc, #100]	@ (80086d8 <HAL_DMA_IRQHandler+0x6c4>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d009      	beq.n	800868c <HAL_DMA_IRQHandler+0x678>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a17      	ldr	r2, [pc, #92]	@ (80086dc <HAL_DMA_IRQHandler+0x6c8>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d004      	beq.n	800868c <HAL_DMA_IRQHandler+0x678>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a16      	ldr	r2, [pc, #88]	@ (80086e0 <HAL_DMA_IRQHandler+0x6cc>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d12b      	bne.n	80086e4 <HAL_DMA_IRQHandler+0x6d0>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f003 0310 	and.w	r3, r3, #16
 8008696:	2b00      	cmp	r3, #0
 8008698:	bf14      	ite	ne
 800869a:	2301      	movne	r3, #1
 800869c:	2300      	moveq	r3, #0
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	e02a      	b.n	80086f8 <HAL_DMA_IRQHandler+0x6e4>
 80086a2:	bf00      	nop
 80086a4:	40020010 	.word	0x40020010
 80086a8:	40020028 	.word	0x40020028
 80086ac:	40020040 	.word	0x40020040
 80086b0:	40020058 	.word	0x40020058
 80086b4:	40020070 	.word	0x40020070
 80086b8:	40020088 	.word	0x40020088
 80086bc:	400200a0 	.word	0x400200a0
 80086c0:	400200b8 	.word	0x400200b8
 80086c4:	40020410 	.word	0x40020410
 80086c8:	40020428 	.word	0x40020428
 80086cc:	40020440 	.word	0x40020440
 80086d0:	40020458 	.word	0x40020458
 80086d4:	40020470 	.word	0x40020470
 80086d8:	40020488 	.word	0x40020488
 80086dc:	400204a0 	.word	0x400204a0
 80086e0:	400204b8 	.word	0x400204b8
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f003 0302 	and.w	r3, r3, #2
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	bf14      	ite	ne
 80086f2:	2301      	movne	r3, #1
 80086f4:	2300      	moveq	r3, #0
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f000 8087 	beq.w	800880c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008702:	f003 031f 	and.w	r3, r3, #31
 8008706:	2220      	movs	r2, #32
 8008708:	409a      	lsls	r2, r3
 800870a:	6a3b      	ldr	r3, [r7, #32]
 800870c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008714:	b2db      	uxtb	r3, r3
 8008716:	2b04      	cmp	r3, #4
 8008718:	d139      	bne.n	800878e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f022 0216 	bic.w	r2, r2, #22
 8008728:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	695a      	ldr	r2, [r3, #20]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008738:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800873e:	2b00      	cmp	r3, #0
 8008740:	d103      	bne.n	800874a <HAL_DMA_IRQHandler+0x736>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008746:	2b00      	cmp	r3, #0
 8008748:	d007      	beq.n	800875a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f022 0208 	bic.w	r2, r2, #8
 8008758:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800875e:	f003 031f 	and.w	r3, r3, #31
 8008762:	223f      	movs	r2, #63	@ 0x3f
 8008764:	409a      	lsls	r2, r3
 8008766:	6a3b      	ldr	r3, [r7, #32]
 8008768:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2201      	movs	r2, #1
 800876e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800877e:	2b00      	cmp	r3, #0
 8008780:	f000 834a 	beq.w	8008e18 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	4798      	blx	r3
          }
          return;
 800878c:	e344      	b.n	8008e18 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008798:	2b00      	cmp	r3, #0
 800879a:	d018      	beq.n	80087ce <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d108      	bne.n	80087bc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d02c      	beq.n	800880c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	4798      	blx	r3
 80087ba:	e027      	b.n	800880c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d023      	beq.n	800880c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	4798      	blx	r3
 80087cc:	e01e      	b.n	800880c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d10f      	bne.n	80087fc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f022 0210 	bic.w	r2, r2, #16
 80087ea:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2201      	movs	r2, #1
 80087f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008800:	2b00      	cmp	r3, #0
 8008802:	d003      	beq.n	800880c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008810:	2b00      	cmp	r3, #0
 8008812:	f000 8306 	beq.w	8008e22 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800881a:	f003 0301 	and.w	r3, r3, #1
 800881e:	2b00      	cmp	r3, #0
 8008820:	f000 8088 	beq.w	8008934 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2204      	movs	r2, #4
 8008828:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a7a      	ldr	r2, [pc, #488]	@ (8008a1c <HAL_DMA_IRQHandler+0xa08>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d04a      	beq.n	80088cc <HAL_DMA_IRQHandler+0x8b8>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a79      	ldr	r2, [pc, #484]	@ (8008a20 <HAL_DMA_IRQHandler+0xa0c>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d045      	beq.n	80088cc <HAL_DMA_IRQHandler+0x8b8>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a77      	ldr	r2, [pc, #476]	@ (8008a24 <HAL_DMA_IRQHandler+0xa10>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d040      	beq.n	80088cc <HAL_DMA_IRQHandler+0x8b8>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a76      	ldr	r2, [pc, #472]	@ (8008a28 <HAL_DMA_IRQHandler+0xa14>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d03b      	beq.n	80088cc <HAL_DMA_IRQHandler+0x8b8>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a74      	ldr	r2, [pc, #464]	@ (8008a2c <HAL_DMA_IRQHandler+0xa18>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d036      	beq.n	80088cc <HAL_DMA_IRQHandler+0x8b8>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a73      	ldr	r2, [pc, #460]	@ (8008a30 <HAL_DMA_IRQHandler+0xa1c>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d031      	beq.n	80088cc <HAL_DMA_IRQHandler+0x8b8>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a71      	ldr	r2, [pc, #452]	@ (8008a34 <HAL_DMA_IRQHandler+0xa20>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d02c      	beq.n	80088cc <HAL_DMA_IRQHandler+0x8b8>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a70      	ldr	r2, [pc, #448]	@ (8008a38 <HAL_DMA_IRQHandler+0xa24>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d027      	beq.n	80088cc <HAL_DMA_IRQHandler+0x8b8>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a6e      	ldr	r2, [pc, #440]	@ (8008a3c <HAL_DMA_IRQHandler+0xa28>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d022      	beq.n	80088cc <HAL_DMA_IRQHandler+0x8b8>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a6d      	ldr	r2, [pc, #436]	@ (8008a40 <HAL_DMA_IRQHandler+0xa2c>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d01d      	beq.n	80088cc <HAL_DMA_IRQHandler+0x8b8>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a6b      	ldr	r2, [pc, #428]	@ (8008a44 <HAL_DMA_IRQHandler+0xa30>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d018      	beq.n	80088cc <HAL_DMA_IRQHandler+0x8b8>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a6a      	ldr	r2, [pc, #424]	@ (8008a48 <HAL_DMA_IRQHandler+0xa34>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d013      	beq.n	80088cc <HAL_DMA_IRQHandler+0x8b8>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a68      	ldr	r2, [pc, #416]	@ (8008a4c <HAL_DMA_IRQHandler+0xa38>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d00e      	beq.n	80088cc <HAL_DMA_IRQHandler+0x8b8>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a67      	ldr	r2, [pc, #412]	@ (8008a50 <HAL_DMA_IRQHandler+0xa3c>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d009      	beq.n	80088cc <HAL_DMA_IRQHandler+0x8b8>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a65      	ldr	r2, [pc, #404]	@ (8008a54 <HAL_DMA_IRQHandler+0xa40>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d004      	beq.n	80088cc <HAL_DMA_IRQHandler+0x8b8>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a64      	ldr	r2, [pc, #400]	@ (8008a58 <HAL_DMA_IRQHandler+0xa44>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d108      	bne.n	80088de <HAL_DMA_IRQHandler+0x8ca>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f022 0201 	bic.w	r2, r2, #1
 80088da:	601a      	str	r2, [r3, #0]
 80088dc:	e007      	b.n	80088ee <HAL_DMA_IRQHandler+0x8da>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f022 0201 	bic.w	r2, r2, #1
 80088ec:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	3301      	adds	r3, #1
 80088f2:	60fb      	str	r3, [r7, #12]
 80088f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d307      	bcc.n	800890a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f003 0301 	and.w	r3, r3, #1
 8008904:	2b00      	cmp	r3, #0
 8008906:	d1f2      	bne.n	80088ee <HAL_DMA_IRQHandler+0x8da>
 8008908:	e000      	b.n	800890c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800890a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f003 0301 	and.w	r3, r3, #1
 8008916:	2b00      	cmp	r3, #0
 8008918:	d004      	beq.n	8008924 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2203      	movs	r2, #3
 800891e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8008922:	e003      	b.n	800892c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2201      	movs	r2, #1
 8008928:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2200      	movs	r2, #0
 8008930:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008938:	2b00      	cmp	r3, #0
 800893a:	f000 8272 	beq.w	8008e22 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	4798      	blx	r3
 8008946:	e26c      	b.n	8008e22 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a43      	ldr	r2, [pc, #268]	@ (8008a5c <HAL_DMA_IRQHandler+0xa48>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d022      	beq.n	8008998 <HAL_DMA_IRQHandler+0x984>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a42      	ldr	r2, [pc, #264]	@ (8008a60 <HAL_DMA_IRQHandler+0xa4c>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d01d      	beq.n	8008998 <HAL_DMA_IRQHandler+0x984>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a40      	ldr	r2, [pc, #256]	@ (8008a64 <HAL_DMA_IRQHandler+0xa50>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d018      	beq.n	8008998 <HAL_DMA_IRQHandler+0x984>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a3f      	ldr	r2, [pc, #252]	@ (8008a68 <HAL_DMA_IRQHandler+0xa54>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d013      	beq.n	8008998 <HAL_DMA_IRQHandler+0x984>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a3d      	ldr	r2, [pc, #244]	@ (8008a6c <HAL_DMA_IRQHandler+0xa58>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d00e      	beq.n	8008998 <HAL_DMA_IRQHandler+0x984>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a3c      	ldr	r2, [pc, #240]	@ (8008a70 <HAL_DMA_IRQHandler+0xa5c>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d009      	beq.n	8008998 <HAL_DMA_IRQHandler+0x984>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a3a      	ldr	r2, [pc, #232]	@ (8008a74 <HAL_DMA_IRQHandler+0xa60>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d004      	beq.n	8008998 <HAL_DMA_IRQHandler+0x984>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a39      	ldr	r2, [pc, #228]	@ (8008a78 <HAL_DMA_IRQHandler+0xa64>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d101      	bne.n	800899c <HAL_DMA_IRQHandler+0x988>
 8008998:	2301      	movs	r3, #1
 800899a:	e000      	b.n	800899e <HAL_DMA_IRQHandler+0x98a>
 800899c:	2300      	movs	r3, #0
 800899e:	2b00      	cmp	r3, #0
 80089a0:	f000 823f 	beq.w	8008e22 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80089b0:	f003 031f 	and.w	r3, r3, #31
 80089b4:	2204      	movs	r2, #4
 80089b6:	409a      	lsls	r2, r3
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	4013      	ands	r3, r2
 80089bc:	2b00      	cmp	r3, #0
 80089be:	f000 80cd 	beq.w	8008b5c <HAL_DMA_IRQHandler+0xb48>
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	f003 0304 	and.w	r3, r3, #4
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	f000 80c7 	beq.w	8008b5c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80089d2:	f003 031f 	and.w	r3, r3, #31
 80089d6:	2204      	movs	r2, #4
 80089d8:	409a      	lsls	r2, r3
 80089da:	69fb      	ldr	r3, [r7, #28]
 80089dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d049      	beq.n	8008a7c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d109      	bne.n	8008a06 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	f000 8210 	beq.w	8008e1c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008a04:	e20a      	b.n	8008e1c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	f000 8206 	beq.w	8008e1c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008a18:	e200      	b.n	8008e1c <HAL_DMA_IRQHandler+0xe08>
 8008a1a:	bf00      	nop
 8008a1c:	40020010 	.word	0x40020010
 8008a20:	40020028 	.word	0x40020028
 8008a24:	40020040 	.word	0x40020040
 8008a28:	40020058 	.word	0x40020058
 8008a2c:	40020070 	.word	0x40020070
 8008a30:	40020088 	.word	0x40020088
 8008a34:	400200a0 	.word	0x400200a0
 8008a38:	400200b8 	.word	0x400200b8
 8008a3c:	40020410 	.word	0x40020410
 8008a40:	40020428 	.word	0x40020428
 8008a44:	40020440 	.word	0x40020440
 8008a48:	40020458 	.word	0x40020458
 8008a4c:	40020470 	.word	0x40020470
 8008a50:	40020488 	.word	0x40020488
 8008a54:	400204a0 	.word	0x400204a0
 8008a58:	400204b8 	.word	0x400204b8
 8008a5c:	58025408 	.word	0x58025408
 8008a60:	5802541c 	.word	0x5802541c
 8008a64:	58025430 	.word	0x58025430
 8008a68:	58025444 	.word	0x58025444
 8008a6c:	58025458 	.word	0x58025458
 8008a70:	5802546c 	.word	0x5802546c
 8008a74:	58025480 	.word	0x58025480
 8008a78:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	f003 0320 	and.w	r3, r3, #32
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d160      	bne.n	8008b48 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a7f      	ldr	r2, [pc, #508]	@ (8008c88 <HAL_DMA_IRQHandler+0xc74>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d04a      	beq.n	8008b26 <HAL_DMA_IRQHandler+0xb12>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a7d      	ldr	r2, [pc, #500]	@ (8008c8c <HAL_DMA_IRQHandler+0xc78>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d045      	beq.n	8008b26 <HAL_DMA_IRQHandler+0xb12>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a7c      	ldr	r2, [pc, #496]	@ (8008c90 <HAL_DMA_IRQHandler+0xc7c>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d040      	beq.n	8008b26 <HAL_DMA_IRQHandler+0xb12>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a7a      	ldr	r2, [pc, #488]	@ (8008c94 <HAL_DMA_IRQHandler+0xc80>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d03b      	beq.n	8008b26 <HAL_DMA_IRQHandler+0xb12>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a79      	ldr	r2, [pc, #484]	@ (8008c98 <HAL_DMA_IRQHandler+0xc84>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d036      	beq.n	8008b26 <HAL_DMA_IRQHandler+0xb12>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a77      	ldr	r2, [pc, #476]	@ (8008c9c <HAL_DMA_IRQHandler+0xc88>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d031      	beq.n	8008b26 <HAL_DMA_IRQHandler+0xb12>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a76      	ldr	r2, [pc, #472]	@ (8008ca0 <HAL_DMA_IRQHandler+0xc8c>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d02c      	beq.n	8008b26 <HAL_DMA_IRQHandler+0xb12>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a74      	ldr	r2, [pc, #464]	@ (8008ca4 <HAL_DMA_IRQHandler+0xc90>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d027      	beq.n	8008b26 <HAL_DMA_IRQHandler+0xb12>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a73      	ldr	r2, [pc, #460]	@ (8008ca8 <HAL_DMA_IRQHandler+0xc94>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d022      	beq.n	8008b26 <HAL_DMA_IRQHandler+0xb12>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a71      	ldr	r2, [pc, #452]	@ (8008cac <HAL_DMA_IRQHandler+0xc98>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d01d      	beq.n	8008b26 <HAL_DMA_IRQHandler+0xb12>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a70      	ldr	r2, [pc, #448]	@ (8008cb0 <HAL_DMA_IRQHandler+0xc9c>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d018      	beq.n	8008b26 <HAL_DMA_IRQHandler+0xb12>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a6e      	ldr	r2, [pc, #440]	@ (8008cb4 <HAL_DMA_IRQHandler+0xca0>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d013      	beq.n	8008b26 <HAL_DMA_IRQHandler+0xb12>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a6d      	ldr	r2, [pc, #436]	@ (8008cb8 <HAL_DMA_IRQHandler+0xca4>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d00e      	beq.n	8008b26 <HAL_DMA_IRQHandler+0xb12>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a6b      	ldr	r2, [pc, #428]	@ (8008cbc <HAL_DMA_IRQHandler+0xca8>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d009      	beq.n	8008b26 <HAL_DMA_IRQHandler+0xb12>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a6a      	ldr	r2, [pc, #424]	@ (8008cc0 <HAL_DMA_IRQHandler+0xcac>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d004      	beq.n	8008b26 <HAL_DMA_IRQHandler+0xb12>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a68      	ldr	r2, [pc, #416]	@ (8008cc4 <HAL_DMA_IRQHandler+0xcb0>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d108      	bne.n	8008b38 <HAL_DMA_IRQHandler+0xb24>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f022 0208 	bic.w	r2, r2, #8
 8008b34:	601a      	str	r2, [r3, #0]
 8008b36:	e007      	b.n	8008b48 <HAL_DMA_IRQHandler+0xb34>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f022 0204 	bic.w	r2, r2, #4
 8008b46:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	f000 8165 	beq.w	8008e1c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008b5a:	e15f      	b.n	8008e1c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b60:	f003 031f 	and.w	r3, r3, #31
 8008b64:	2202      	movs	r2, #2
 8008b66:	409a      	lsls	r2, r3
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	4013      	ands	r3, r2
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	f000 80c5 	beq.w	8008cfc <HAL_DMA_IRQHandler+0xce8>
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	f003 0302 	and.w	r3, r3, #2
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	f000 80bf 	beq.w	8008cfc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b82:	f003 031f 	and.w	r3, r3, #31
 8008b86:	2202      	movs	r2, #2
 8008b88:	409a      	lsls	r2, r3
 8008b8a:	69fb      	ldr	r3, [r7, #28]
 8008b8c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d018      	beq.n	8008bca <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d109      	bne.n	8008bb6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	f000 813a 	beq.w	8008e20 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008bb4:	e134      	b.n	8008e20 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	f000 8130 	beq.w	8008e20 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008bc8:	e12a      	b.n	8008e20 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	f003 0320 	and.w	r3, r3, #32
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	f040 8089 	bne.w	8008ce8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a2b      	ldr	r2, [pc, #172]	@ (8008c88 <HAL_DMA_IRQHandler+0xc74>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d04a      	beq.n	8008c76 <HAL_DMA_IRQHandler+0xc62>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a29      	ldr	r2, [pc, #164]	@ (8008c8c <HAL_DMA_IRQHandler+0xc78>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d045      	beq.n	8008c76 <HAL_DMA_IRQHandler+0xc62>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4a28      	ldr	r2, [pc, #160]	@ (8008c90 <HAL_DMA_IRQHandler+0xc7c>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d040      	beq.n	8008c76 <HAL_DMA_IRQHandler+0xc62>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a26      	ldr	r2, [pc, #152]	@ (8008c94 <HAL_DMA_IRQHandler+0xc80>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d03b      	beq.n	8008c76 <HAL_DMA_IRQHandler+0xc62>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a25      	ldr	r2, [pc, #148]	@ (8008c98 <HAL_DMA_IRQHandler+0xc84>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d036      	beq.n	8008c76 <HAL_DMA_IRQHandler+0xc62>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a23      	ldr	r2, [pc, #140]	@ (8008c9c <HAL_DMA_IRQHandler+0xc88>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d031      	beq.n	8008c76 <HAL_DMA_IRQHandler+0xc62>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a22      	ldr	r2, [pc, #136]	@ (8008ca0 <HAL_DMA_IRQHandler+0xc8c>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d02c      	beq.n	8008c76 <HAL_DMA_IRQHandler+0xc62>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a20      	ldr	r2, [pc, #128]	@ (8008ca4 <HAL_DMA_IRQHandler+0xc90>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d027      	beq.n	8008c76 <HAL_DMA_IRQHandler+0xc62>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a1f      	ldr	r2, [pc, #124]	@ (8008ca8 <HAL_DMA_IRQHandler+0xc94>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d022      	beq.n	8008c76 <HAL_DMA_IRQHandler+0xc62>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a1d      	ldr	r2, [pc, #116]	@ (8008cac <HAL_DMA_IRQHandler+0xc98>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d01d      	beq.n	8008c76 <HAL_DMA_IRQHandler+0xc62>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a1c      	ldr	r2, [pc, #112]	@ (8008cb0 <HAL_DMA_IRQHandler+0xc9c>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d018      	beq.n	8008c76 <HAL_DMA_IRQHandler+0xc62>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a1a      	ldr	r2, [pc, #104]	@ (8008cb4 <HAL_DMA_IRQHandler+0xca0>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d013      	beq.n	8008c76 <HAL_DMA_IRQHandler+0xc62>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a19      	ldr	r2, [pc, #100]	@ (8008cb8 <HAL_DMA_IRQHandler+0xca4>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d00e      	beq.n	8008c76 <HAL_DMA_IRQHandler+0xc62>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a17      	ldr	r2, [pc, #92]	@ (8008cbc <HAL_DMA_IRQHandler+0xca8>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d009      	beq.n	8008c76 <HAL_DMA_IRQHandler+0xc62>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a16      	ldr	r2, [pc, #88]	@ (8008cc0 <HAL_DMA_IRQHandler+0xcac>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d004      	beq.n	8008c76 <HAL_DMA_IRQHandler+0xc62>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a14      	ldr	r2, [pc, #80]	@ (8008cc4 <HAL_DMA_IRQHandler+0xcb0>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d128      	bne.n	8008cc8 <HAL_DMA_IRQHandler+0xcb4>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f022 0214 	bic.w	r2, r2, #20
 8008c84:	601a      	str	r2, [r3, #0]
 8008c86:	e027      	b.n	8008cd8 <HAL_DMA_IRQHandler+0xcc4>
 8008c88:	40020010 	.word	0x40020010
 8008c8c:	40020028 	.word	0x40020028
 8008c90:	40020040 	.word	0x40020040
 8008c94:	40020058 	.word	0x40020058
 8008c98:	40020070 	.word	0x40020070
 8008c9c:	40020088 	.word	0x40020088
 8008ca0:	400200a0 	.word	0x400200a0
 8008ca4:	400200b8 	.word	0x400200b8
 8008ca8:	40020410 	.word	0x40020410
 8008cac:	40020428 	.word	0x40020428
 8008cb0:	40020440 	.word	0x40020440
 8008cb4:	40020458 	.word	0x40020458
 8008cb8:	40020470 	.word	0x40020470
 8008cbc:	40020488 	.word	0x40020488
 8008cc0:	400204a0 	.word	0x400204a0
 8008cc4:	400204b8 	.word	0x400204b8
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f022 020a 	bic.w	r2, r2, #10
 8008cd6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	f000 8097 	beq.w	8008e20 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008cfa:	e091      	b.n	8008e20 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d00:	f003 031f 	and.w	r3, r3, #31
 8008d04:	2208      	movs	r2, #8
 8008d06:	409a      	lsls	r2, r3
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	4013      	ands	r3, r2
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	f000 8088 	beq.w	8008e22 <HAL_DMA_IRQHandler+0xe0e>
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	f003 0308 	and.w	r3, r3, #8
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	f000 8082 	beq.w	8008e22 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a41      	ldr	r2, [pc, #260]	@ (8008e28 <HAL_DMA_IRQHandler+0xe14>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d04a      	beq.n	8008dbe <HAL_DMA_IRQHandler+0xdaa>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a3f      	ldr	r2, [pc, #252]	@ (8008e2c <HAL_DMA_IRQHandler+0xe18>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d045      	beq.n	8008dbe <HAL_DMA_IRQHandler+0xdaa>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a3e      	ldr	r2, [pc, #248]	@ (8008e30 <HAL_DMA_IRQHandler+0xe1c>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d040      	beq.n	8008dbe <HAL_DMA_IRQHandler+0xdaa>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a3c      	ldr	r2, [pc, #240]	@ (8008e34 <HAL_DMA_IRQHandler+0xe20>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d03b      	beq.n	8008dbe <HAL_DMA_IRQHandler+0xdaa>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a3b      	ldr	r2, [pc, #236]	@ (8008e38 <HAL_DMA_IRQHandler+0xe24>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d036      	beq.n	8008dbe <HAL_DMA_IRQHandler+0xdaa>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a39      	ldr	r2, [pc, #228]	@ (8008e3c <HAL_DMA_IRQHandler+0xe28>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d031      	beq.n	8008dbe <HAL_DMA_IRQHandler+0xdaa>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a38      	ldr	r2, [pc, #224]	@ (8008e40 <HAL_DMA_IRQHandler+0xe2c>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d02c      	beq.n	8008dbe <HAL_DMA_IRQHandler+0xdaa>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a36      	ldr	r2, [pc, #216]	@ (8008e44 <HAL_DMA_IRQHandler+0xe30>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d027      	beq.n	8008dbe <HAL_DMA_IRQHandler+0xdaa>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a35      	ldr	r2, [pc, #212]	@ (8008e48 <HAL_DMA_IRQHandler+0xe34>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d022      	beq.n	8008dbe <HAL_DMA_IRQHandler+0xdaa>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a33      	ldr	r2, [pc, #204]	@ (8008e4c <HAL_DMA_IRQHandler+0xe38>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d01d      	beq.n	8008dbe <HAL_DMA_IRQHandler+0xdaa>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a32      	ldr	r2, [pc, #200]	@ (8008e50 <HAL_DMA_IRQHandler+0xe3c>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d018      	beq.n	8008dbe <HAL_DMA_IRQHandler+0xdaa>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a30      	ldr	r2, [pc, #192]	@ (8008e54 <HAL_DMA_IRQHandler+0xe40>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d013      	beq.n	8008dbe <HAL_DMA_IRQHandler+0xdaa>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a2f      	ldr	r2, [pc, #188]	@ (8008e58 <HAL_DMA_IRQHandler+0xe44>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d00e      	beq.n	8008dbe <HAL_DMA_IRQHandler+0xdaa>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a2d      	ldr	r2, [pc, #180]	@ (8008e5c <HAL_DMA_IRQHandler+0xe48>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d009      	beq.n	8008dbe <HAL_DMA_IRQHandler+0xdaa>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a2c      	ldr	r2, [pc, #176]	@ (8008e60 <HAL_DMA_IRQHandler+0xe4c>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d004      	beq.n	8008dbe <HAL_DMA_IRQHandler+0xdaa>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a2a      	ldr	r2, [pc, #168]	@ (8008e64 <HAL_DMA_IRQHandler+0xe50>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d108      	bne.n	8008dd0 <HAL_DMA_IRQHandler+0xdbc>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	681a      	ldr	r2, [r3, #0]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f022 021c 	bic.w	r2, r2, #28
 8008dcc:	601a      	str	r2, [r3, #0]
 8008dce:	e007      	b.n	8008de0 <HAL_DMA_IRQHandler+0xdcc>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	681a      	ldr	r2, [r3, #0]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f022 020e 	bic.w	r2, r2, #14
 8008dde:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008de4:	f003 031f 	and.w	r3, r3, #31
 8008de8:	2201      	movs	r2, #1
 8008dea:	409a      	lsls	r2, r3
 8008dec:	69fb      	ldr	r3, [r7, #28]
 8008dee:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2201      	movs	r2, #1
 8008df4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2201      	movs	r2, #1
 8008dfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d009      	beq.n	8008e22 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	4798      	blx	r3
 8008e16:	e004      	b.n	8008e22 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008e18:	bf00      	nop
 8008e1a:	e002      	b.n	8008e22 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008e1c:	bf00      	nop
 8008e1e:	e000      	b.n	8008e22 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008e20:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008e22:	3728      	adds	r7, #40	@ 0x28
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}
 8008e28:	40020010 	.word	0x40020010
 8008e2c:	40020028 	.word	0x40020028
 8008e30:	40020040 	.word	0x40020040
 8008e34:	40020058 	.word	0x40020058
 8008e38:	40020070 	.word	0x40020070
 8008e3c:	40020088 	.word	0x40020088
 8008e40:	400200a0 	.word	0x400200a0
 8008e44:	400200b8 	.word	0x400200b8
 8008e48:	40020410 	.word	0x40020410
 8008e4c:	40020428 	.word	0x40020428
 8008e50:	40020440 	.word	0x40020440
 8008e54:	40020458 	.word	0x40020458
 8008e58:	40020470 	.word	0x40020470
 8008e5c:	40020488 	.word	0x40020488
 8008e60:	400204a0 	.word	0x400204a0
 8008e64:	400204b8 	.word	0x400204b8

08008e68 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b087      	sub	sp, #28
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	60b9      	str	r1, [r7, #8]
 8008e72:	607a      	str	r2, [r7, #4]
 8008e74:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e7a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e80:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a7f      	ldr	r2, [pc, #508]	@ (8009084 <DMA_SetConfig+0x21c>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d072      	beq.n	8008f72 <DMA_SetConfig+0x10a>
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a7d      	ldr	r2, [pc, #500]	@ (8009088 <DMA_SetConfig+0x220>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d06d      	beq.n	8008f72 <DMA_SetConfig+0x10a>
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a7c      	ldr	r2, [pc, #496]	@ (800908c <DMA_SetConfig+0x224>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d068      	beq.n	8008f72 <DMA_SetConfig+0x10a>
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a7a      	ldr	r2, [pc, #488]	@ (8009090 <DMA_SetConfig+0x228>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d063      	beq.n	8008f72 <DMA_SetConfig+0x10a>
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a79      	ldr	r2, [pc, #484]	@ (8009094 <DMA_SetConfig+0x22c>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d05e      	beq.n	8008f72 <DMA_SetConfig+0x10a>
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4a77      	ldr	r2, [pc, #476]	@ (8009098 <DMA_SetConfig+0x230>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d059      	beq.n	8008f72 <DMA_SetConfig+0x10a>
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a76      	ldr	r2, [pc, #472]	@ (800909c <DMA_SetConfig+0x234>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d054      	beq.n	8008f72 <DMA_SetConfig+0x10a>
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a74      	ldr	r2, [pc, #464]	@ (80090a0 <DMA_SetConfig+0x238>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d04f      	beq.n	8008f72 <DMA_SetConfig+0x10a>
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a73      	ldr	r2, [pc, #460]	@ (80090a4 <DMA_SetConfig+0x23c>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d04a      	beq.n	8008f72 <DMA_SetConfig+0x10a>
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a71      	ldr	r2, [pc, #452]	@ (80090a8 <DMA_SetConfig+0x240>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d045      	beq.n	8008f72 <DMA_SetConfig+0x10a>
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a70      	ldr	r2, [pc, #448]	@ (80090ac <DMA_SetConfig+0x244>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d040      	beq.n	8008f72 <DMA_SetConfig+0x10a>
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a6e      	ldr	r2, [pc, #440]	@ (80090b0 <DMA_SetConfig+0x248>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d03b      	beq.n	8008f72 <DMA_SetConfig+0x10a>
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a6d      	ldr	r2, [pc, #436]	@ (80090b4 <DMA_SetConfig+0x24c>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d036      	beq.n	8008f72 <DMA_SetConfig+0x10a>
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a6b      	ldr	r2, [pc, #428]	@ (80090b8 <DMA_SetConfig+0x250>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d031      	beq.n	8008f72 <DMA_SetConfig+0x10a>
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4a6a      	ldr	r2, [pc, #424]	@ (80090bc <DMA_SetConfig+0x254>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d02c      	beq.n	8008f72 <DMA_SetConfig+0x10a>
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a68      	ldr	r2, [pc, #416]	@ (80090c0 <DMA_SetConfig+0x258>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d027      	beq.n	8008f72 <DMA_SetConfig+0x10a>
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4a67      	ldr	r2, [pc, #412]	@ (80090c4 <DMA_SetConfig+0x25c>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d022      	beq.n	8008f72 <DMA_SetConfig+0x10a>
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a65      	ldr	r2, [pc, #404]	@ (80090c8 <DMA_SetConfig+0x260>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d01d      	beq.n	8008f72 <DMA_SetConfig+0x10a>
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a64      	ldr	r2, [pc, #400]	@ (80090cc <DMA_SetConfig+0x264>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d018      	beq.n	8008f72 <DMA_SetConfig+0x10a>
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a62      	ldr	r2, [pc, #392]	@ (80090d0 <DMA_SetConfig+0x268>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d013      	beq.n	8008f72 <DMA_SetConfig+0x10a>
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4a61      	ldr	r2, [pc, #388]	@ (80090d4 <DMA_SetConfig+0x26c>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d00e      	beq.n	8008f72 <DMA_SetConfig+0x10a>
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a5f      	ldr	r2, [pc, #380]	@ (80090d8 <DMA_SetConfig+0x270>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d009      	beq.n	8008f72 <DMA_SetConfig+0x10a>
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a5e      	ldr	r2, [pc, #376]	@ (80090dc <DMA_SetConfig+0x274>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d004      	beq.n	8008f72 <DMA_SetConfig+0x10a>
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a5c      	ldr	r2, [pc, #368]	@ (80090e0 <DMA_SetConfig+0x278>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d101      	bne.n	8008f76 <DMA_SetConfig+0x10e>
 8008f72:	2301      	movs	r3, #1
 8008f74:	e000      	b.n	8008f78 <DMA_SetConfig+0x110>
 8008f76:	2300      	movs	r3, #0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d00d      	beq.n	8008f98 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f80:	68fa      	ldr	r2, [r7, #12]
 8008f82:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8008f84:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d004      	beq.n	8008f98 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f92:	68fa      	ldr	r2, [r7, #12]
 8008f94:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008f96:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a39      	ldr	r2, [pc, #228]	@ (8009084 <DMA_SetConfig+0x21c>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d04a      	beq.n	8009038 <DMA_SetConfig+0x1d0>
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4a38      	ldr	r2, [pc, #224]	@ (8009088 <DMA_SetConfig+0x220>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d045      	beq.n	8009038 <DMA_SetConfig+0x1d0>
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a36      	ldr	r2, [pc, #216]	@ (800908c <DMA_SetConfig+0x224>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d040      	beq.n	8009038 <DMA_SetConfig+0x1d0>
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a35      	ldr	r2, [pc, #212]	@ (8009090 <DMA_SetConfig+0x228>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d03b      	beq.n	8009038 <DMA_SetConfig+0x1d0>
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4a33      	ldr	r2, [pc, #204]	@ (8009094 <DMA_SetConfig+0x22c>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d036      	beq.n	8009038 <DMA_SetConfig+0x1d0>
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a32      	ldr	r2, [pc, #200]	@ (8009098 <DMA_SetConfig+0x230>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d031      	beq.n	8009038 <DMA_SetConfig+0x1d0>
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a30      	ldr	r2, [pc, #192]	@ (800909c <DMA_SetConfig+0x234>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d02c      	beq.n	8009038 <DMA_SetConfig+0x1d0>
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a2f      	ldr	r2, [pc, #188]	@ (80090a0 <DMA_SetConfig+0x238>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d027      	beq.n	8009038 <DMA_SetConfig+0x1d0>
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a2d      	ldr	r2, [pc, #180]	@ (80090a4 <DMA_SetConfig+0x23c>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d022      	beq.n	8009038 <DMA_SetConfig+0x1d0>
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4a2c      	ldr	r2, [pc, #176]	@ (80090a8 <DMA_SetConfig+0x240>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d01d      	beq.n	8009038 <DMA_SetConfig+0x1d0>
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a2a      	ldr	r2, [pc, #168]	@ (80090ac <DMA_SetConfig+0x244>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d018      	beq.n	8009038 <DMA_SetConfig+0x1d0>
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a29      	ldr	r2, [pc, #164]	@ (80090b0 <DMA_SetConfig+0x248>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d013      	beq.n	8009038 <DMA_SetConfig+0x1d0>
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a27      	ldr	r2, [pc, #156]	@ (80090b4 <DMA_SetConfig+0x24c>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d00e      	beq.n	8009038 <DMA_SetConfig+0x1d0>
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a26      	ldr	r2, [pc, #152]	@ (80090b8 <DMA_SetConfig+0x250>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d009      	beq.n	8009038 <DMA_SetConfig+0x1d0>
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a24      	ldr	r2, [pc, #144]	@ (80090bc <DMA_SetConfig+0x254>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d004      	beq.n	8009038 <DMA_SetConfig+0x1d0>
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a23      	ldr	r2, [pc, #140]	@ (80090c0 <DMA_SetConfig+0x258>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d101      	bne.n	800903c <DMA_SetConfig+0x1d4>
 8009038:	2301      	movs	r3, #1
 800903a:	e000      	b.n	800903e <DMA_SetConfig+0x1d6>
 800903c:	2300      	movs	r3, #0
 800903e:	2b00      	cmp	r3, #0
 8009040:	d059      	beq.n	80090f6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009046:	f003 031f 	and.w	r3, r3, #31
 800904a:	223f      	movs	r2, #63	@ 0x3f
 800904c:	409a      	lsls	r2, r3
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009060:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	683a      	ldr	r2, [r7, #0]
 8009068:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	2b40      	cmp	r3, #64	@ 0x40
 8009070:	d138      	bne.n	80090e4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	68ba      	ldr	r2, [r7, #8]
 8009080:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009082:	e086      	b.n	8009192 <DMA_SetConfig+0x32a>
 8009084:	40020010 	.word	0x40020010
 8009088:	40020028 	.word	0x40020028
 800908c:	40020040 	.word	0x40020040
 8009090:	40020058 	.word	0x40020058
 8009094:	40020070 	.word	0x40020070
 8009098:	40020088 	.word	0x40020088
 800909c:	400200a0 	.word	0x400200a0
 80090a0:	400200b8 	.word	0x400200b8
 80090a4:	40020410 	.word	0x40020410
 80090a8:	40020428 	.word	0x40020428
 80090ac:	40020440 	.word	0x40020440
 80090b0:	40020458 	.word	0x40020458
 80090b4:	40020470 	.word	0x40020470
 80090b8:	40020488 	.word	0x40020488
 80090bc:	400204a0 	.word	0x400204a0
 80090c0:	400204b8 	.word	0x400204b8
 80090c4:	58025408 	.word	0x58025408
 80090c8:	5802541c 	.word	0x5802541c
 80090cc:	58025430 	.word	0x58025430
 80090d0:	58025444 	.word	0x58025444
 80090d4:	58025458 	.word	0x58025458
 80090d8:	5802546c 	.word	0x5802546c
 80090dc:	58025480 	.word	0x58025480
 80090e0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	68ba      	ldr	r2, [r7, #8]
 80090ea:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	60da      	str	r2, [r3, #12]
}
 80090f4:	e04d      	b.n	8009192 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a29      	ldr	r2, [pc, #164]	@ (80091a0 <DMA_SetConfig+0x338>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d022      	beq.n	8009146 <DMA_SetConfig+0x2de>
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a27      	ldr	r2, [pc, #156]	@ (80091a4 <DMA_SetConfig+0x33c>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d01d      	beq.n	8009146 <DMA_SetConfig+0x2de>
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4a26      	ldr	r2, [pc, #152]	@ (80091a8 <DMA_SetConfig+0x340>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d018      	beq.n	8009146 <DMA_SetConfig+0x2de>
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a24      	ldr	r2, [pc, #144]	@ (80091ac <DMA_SetConfig+0x344>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d013      	beq.n	8009146 <DMA_SetConfig+0x2de>
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4a23      	ldr	r2, [pc, #140]	@ (80091b0 <DMA_SetConfig+0x348>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d00e      	beq.n	8009146 <DMA_SetConfig+0x2de>
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4a21      	ldr	r2, [pc, #132]	@ (80091b4 <DMA_SetConfig+0x34c>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d009      	beq.n	8009146 <DMA_SetConfig+0x2de>
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4a20      	ldr	r2, [pc, #128]	@ (80091b8 <DMA_SetConfig+0x350>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d004      	beq.n	8009146 <DMA_SetConfig+0x2de>
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a1e      	ldr	r2, [pc, #120]	@ (80091bc <DMA_SetConfig+0x354>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d101      	bne.n	800914a <DMA_SetConfig+0x2e2>
 8009146:	2301      	movs	r3, #1
 8009148:	e000      	b.n	800914c <DMA_SetConfig+0x2e4>
 800914a:	2300      	movs	r3, #0
 800914c:	2b00      	cmp	r3, #0
 800914e:	d020      	beq.n	8009192 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009154:	f003 031f 	and.w	r3, r3, #31
 8009158:	2201      	movs	r2, #1
 800915a:	409a      	lsls	r2, r3
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	683a      	ldr	r2, [r7, #0]
 8009166:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	2b40      	cmp	r3, #64	@ 0x40
 800916e:	d108      	bne.n	8009182 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	68ba      	ldr	r2, [r7, #8]
 800917e:	60da      	str	r2, [r3, #12]
}
 8009180:	e007      	b.n	8009192 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	68ba      	ldr	r2, [r7, #8]
 8009188:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	60da      	str	r2, [r3, #12]
}
 8009192:	bf00      	nop
 8009194:	371c      	adds	r7, #28
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr
 800919e:	bf00      	nop
 80091a0:	58025408 	.word	0x58025408
 80091a4:	5802541c 	.word	0x5802541c
 80091a8:	58025430 	.word	0x58025430
 80091ac:	58025444 	.word	0x58025444
 80091b0:	58025458 	.word	0x58025458
 80091b4:	5802546c 	.word	0x5802546c
 80091b8:	58025480 	.word	0x58025480
 80091bc:	58025494 	.word	0x58025494

080091c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b085      	sub	sp, #20
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a42      	ldr	r2, [pc, #264]	@ (80092d8 <DMA_CalcBaseAndBitshift+0x118>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d04a      	beq.n	8009268 <DMA_CalcBaseAndBitshift+0xa8>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a41      	ldr	r2, [pc, #260]	@ (80092dc <DMA_CalcBaseAndBitshift+0x11c>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d045      	beq.n	8009268 <DMA_CalcBaseAndBitshift+0xa8>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a3f      	ldr	r2, [pc, #252]	@ (80092e0 <DMA_CalcBaseAndBitshift+0x120>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d040      	beq.n	8009268 <DMA_CalcBaseAndBitshift+0xa8>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a3e      	ldr	r2, [pc, #248]	@ (80092e4 <DMA_CalcBaseAndBitshift+0x124>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d03b      	beq.n	8009268 <DMA_CalcBaseAndBitshift+0xa8>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4a3c      	ldr	r2, [pc, #240]	@ (80092e8 <DMA_CalcBaseAndBitshift+0x128>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d036      	beq.n	8009268 <DMA_CalcBaseAndBitshift+0xa8>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a3b      	ldr	r2, [pc, #236]	@ (80092ec <DMA_CalcBaseAndBitshift+0x12c>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d031      	beq.n	8009268 <DMA_CalcBaseAndBitshift+0xa8>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a39      	ldr	r2, [pc, #228]	@ (80092f0 <DMA_CalcBaseAndBitshift+0x130>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d02c      	beq.n	8009268 <DMA_CalcBaseAndBitshift+0xa8>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a38      	ldr	r2, [pc, #224]	@ (80092f4 <DMA_CalcBaseAndBitshift+0x134>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d027      	beq.n	8009268 <DMA_CalcBaseAndBitshift+0xa8>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a36      	ldr	r2, [pc, #216]	@ (80092f8 <DMA_CalcBaseAndBitshift+0x138>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d022      	beq.n	8009268 <DMA_CalcBaseAndBitshift+0xa8>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a35      	ldr	r2, [pc, #212]	@ (80092fc <DMA_CalcBaseAndBitshift+0x13c>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d01d      	beq.n	8009268 <DMA_CalcBaseAndBitshift+0xa8>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a33      	ldr	r2, [pc, #204]	@ (8009300 <DMA_CalcBaseAndBitshift+0x140>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d018      	beq.n	8009268 <DMA_CalcBaseAndBitshift+0xa8>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a32      	ldr	r2, [pc, #200]	@ (8009304 <DMA_CalcBaseAndBitshift+0x144>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d013      	beq.n	8009268 <DMA_CalcBaseAndBitshift+0xa8>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a30      	ldr	r2, [pc, #192]	@ (8009308 <DMA_CalcBaseAndBitshift+0x148>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d00e      	beq.n	8009268 <DMA_CalcBaseAndBitshift+0xa8>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4a2f      	ldr	r2, [pc, #188]	@ (800930c <DMA_CalcBaseAndBitshift+0x14c>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d009      	beq.n	8009268 <DMA_CalcBaseAndBitshift+0xa8>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a2d      	ldr	r2, [pc, #180]	@ (8009310 <DMA_CalcBaseAndBitshift+0x150>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d004      	beq.n	8009268 <DMA_CalcBaseAndBitshift+0xa8>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a2c      	ldr	r2, [pc, #176]	@ (8009314 <DMA_CalcBaseAndBitshift+0x154>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d101      	bne.n	800926c <DMA_CalcBaseAndBitshift+0xac>
 8009268:	2301      	movs	r3, #1
 800926a:	e000      	b.n	800926e <DMA_CalcBaseAndBitshift+0xae>
 800926c:	2300      	movs	r3, #0
 800926e:	2b00      	cmp	r3, #0
 8009270:	d024      	beq.n	80092bc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	b2db      	uxtb	r3, r3
 8009278:	3b10      	subs	r3, #16
 800927a:	4a27      	ldr	r2, [pc, #156]	@ (8009318 <DMA_CalcBaseAndBitshift+0x158>)
 800927c:	fba2 2303 	umull	r2, r3, r2, r3
 8009280:	091b      	lsrs	r3, r3, #4
 8009282:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f003 0307 	and.w	r3, r3, #7
 800928a:	4a24      	ldr	r2, [pc, #144]	@ (800931c <DMA_CalcBaseAndBitshift+0x15c>)
 800928c:	5cd3      	ldrb	r3, [r2, r3]
 800928e:	461a      	mov	r2, r3
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2b03      	cmp	r3, #3
 8009298:	d908      	bls.n	80092ac <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	461a      	mov	r2, r3
 80092a0:	4b1f      	ldr	r3, [pc, #124]	@ (8009320 <DMA_CalcBaseAndBitshift+0x160>)
 80092a2:	4013      	ands	r3, r2
 80092a4:	1d1a      	adds	r2, r3, #4
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	659a      	str	r2, [r3, #88]	@ 0x58
 80092aa:	e00d      	b.n	80092c8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	461a      	mov	r2, r3
 80092b2:	4b1b      	ldr	r3, [pc, #108]	@ (8009320 <DMA_CalcBaseAndBitshift+0x160>)
 80092b4:	4013      	ands	r3, r2
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80092ba:	e005      	b.n	80092c8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3714      	adds	r7, #20
 80092d0:	46bd      	mov	sp, r7
 80092d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d6:	4770      	bx	lr
 80092d8:	40020010 	.word	0x40020010
 80092dc:	40020028 	.word	0x40020028
 80092e0:	40020040 	.word	0x40020040
 80092e4:	40020058 	.word	0x40020058
 80092e8:	40020070 	.word	0x40020070
 80092ec:	40020088 	.word	0x40020088
 80092f0:	400200a0 	.word	0x400200a0
 80092f4:	400200b8 	.word	0x400200b8
 80092f8:	40020410 	.word	0x40020410
 80092fc:	40020428 	.word	0x40020428
 8009300:	40020440 	.word	0x40020440
 8009304:	40020458 	.word	0x40020458
 8009308:	40020470 	.word	0x40020470
 800930c:	40020488 	.word	0x40020488
 8009310:	400204a0 	.word	0x400204a0
 8009314:	400204b8 	.word	0x400204b8
 8009318:	aaaaaaab 	.word	0xaaaaaaab
 800931c:	08011f1c 	.word	0x08011f1c
 8009320:	fffffc00 	.word	0xfffffc00

08009324 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009324:	b480      	push	{r7}
 8009326:	b085      	sub	sp, #20
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800932c:	2300      	movs	r3, #0
 800932e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	699b      	ldr	r3, [r3, #24]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d120      	bne.n	800937a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800933c:	2b03      	cmp	r3, #3
 800933e:	d858      	bhi.n	80093f2 <DMA_CheckFifoParam+0xce>
 8009340:	a201      	add	r2, pc, #4	@ (adr r2, 8009348 <DMA_CheckFifoParam+0x24>)
 8009342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009346:	bf00      	nop
 8009348:	08009359 	.word	0x08009359
 800934c:	0800936b 	.word	0x0800936b
 8009350:	08009359 	.word	0x08009359
 8009354:	080093f3 	.word	0x080093f3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800935c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009360:	2b00      	cmp	r3, #0
 8009362:	d048      	beq.n	80093f6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009364:	2301      	movs	r3, #1
 8009366:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009368:	e045      	b.n	80093f6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800936e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8009372:	d142      	bne.n	80093fa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009374:	2301      	movs	r3, #1
 8009376:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009378:	e03f      	b.n	80093fa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	699b      	ldr	r3, [r3, #24]
 800937e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009382:	d123      	bne.n	80093cc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009388:	2b03      	cmp	r3, #3
 800938a:	d838      	bhi.n	80093fe <DMA_CheckFifoParam+0xda>
 800938c:	a201      	add	r2, pc, #4	@ (adr r2, 8009394 <DMA_CheckFifoParam+0x70>)
 800938e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009392:	bf00      	nop
 8009394:	080093a5 	.word	0x080093a5
 8009398:	080093ab 	.word	0x080093ab
 800939c:	080093a5 	.word	0x080093a5
 80093a0:	080093bd 	.word	0x080093bd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80093a4:	2301      	movs	r3, #1
 80093a6:	73fb      	strb	r3, [r7, #15]
        break;
 80093a8:	e030      	b.n	800940c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d025      	beq.n	8009402 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80093b6:	2301      	movs	r3, #1
 80093b8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80093ba:	e022      	b.n	8009402 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093c0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80093c4:	d11f      	bne.n	8009406 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80093c6:	2301      	movs	r3, #1
 80093c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80093ca:	e01c      	b.n	8009406 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093d0:	2b02      	cmp	r3, #2
 80093d2:	d902      	bls.n	80093da <DMA_CheckFifoParam+0xb6>
 80093d4:	2b03      	cmp	r3, #3
 80093d6:	d003      	beq.n	80093e0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80093d8:	e018      	b.n	800940c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80093da:	2301      	movs	r3, #1
 80093dc:	73fb      	strb	r3, [r7, #15]
        break;
 80093de:	e015      	b.n	800940c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d00e      	beq.n	800940a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80093ec:	2301      	movs	r3, #1
 80093ee:	73fb      	strb	r3, [r7, #15]
    break;
 80093f0:	e00b      	b.n	800940a <DMA_CheckFifoParam+0xe6>
        break;
 80093f2:	bf00      	nop
 80093f4:	e00a      	b.n	800940c <DMA_CheckFifoParam+0xe8>
        break;
 80093f6:	bf00      	nop
 80093f8:	e008      	b.n	800940c <DMA_CheckFifoParam+0xe8>
        break;
 80093fa:	bf00      	nop
 80093fc:	e006      	b.n	800940c <DMA_CheckFifoParam+0xe8>
        break;
 80093fe:	bf00      	nop
 8009400:	e004      	b.n	800940c <DMA_CheckFifoParam+0xe8>
        break;
 8009402:	bf00      	nop
 8009404:	e002      	b.n	800940c <DMA_CheckFifoParam+0xe8>
        break;
 8009406:	bf00      	nop
 8009408:	e000      	b.n	800940c <DMA_CheckFifoParam+0xe8>
    break;
 800940a:	bf00      	nop
    }
  }

  return status;
 800940c:	7bfb      	ldrb	r3, [r7, #15]
}
 800940e:	4618      	mov	r0, r3
 8009410:	3714      	adds	r7, #20
 8009412:	46bd      	mov	sp, r7
 8009414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009418:	4770      	bx	lr
 800941a:	bf00      	nop

0800941c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800941c:	b480      	push	{r7}
 800941e:	b085      	sub	sp, #20
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4a38      	ldr	r2, [pc, #224]	@ (8009510 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d022      	beq.n	800947a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4a36      	ldr	r2, [pc, #216]	@ (8009514 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d01d      	beq.n	800947a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4a35      	ldr	r2, [pc, #212]	@ (8009518 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d018      	beq.n	800947a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a33      	ldr	r2, [pc, #204]	@ (800951c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d013      	beq.n	800947a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a32      	ldr	r2, [pc, #200]	@ (8009520 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d00e      	beq.n	800947a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4a30      	ldr	r2, [pc, #192]	@ (8009524 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d009      	beq.n	800947a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4a2f      	ldr	r2, [pc, #188]	@ (8009528 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d004      	beq.n	800947a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4a2d      	ldr	r2, [pc, #180]	@ (800952c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d101      	bne.n	800947e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800947a:	2301      	movs	r3, #1
 800947c:	e000      	b.n	8009480 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800947e:	2300      	movs	r3, #0
 8009480:	2b00      	cmp	r3, #0
 8009482:	d01a      	beq.n	80094ba <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	b2db      	uxtb	r3, r3
 800948a:	3b08      	subs	r3, #8
 800948c:	4a28      	ldr	r2, [pc, #160]	@ (8009530 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800948e:	fba2 2303 	umull	r2, r3, r2, r3
 8009492:	091b      	lsrs	r3, r3, #4
 8009494:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009496:	68fa      	ldr	r2, [r7, #12]
 8009498:	4b26      	ldr	r3, [pc, #152]	@ (8009534 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800949a:	4413      	add	r3, r2
 800949c:	009b      	lsls	r3, r3, #2
 800949e:	461a      	mov	r2, r3
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	4a24      	ldr	r2, [pc, #144]	@ (8009538 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80094a8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	f003 031f 	and.w	r3, r3, #31
 80094b0:	2201      	movs	r2, #1
 80094b2:	409a      	lsls	r2, r3
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80094b8:	e024      	b.n	8009504 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	b2db      	uxtb	r3, r3
 80094c0:	3b10      	subs	r3, #16
 80094c2:	4a1e      	ldr	r2, [pc, #120]	@ (800953c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80094c4:	fba2 2303 	umull	r2, r3, r2, r3
 80094c8:	091b      	lsrs	r3, r3, #4
 80094ca:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	4a1c      	ldr	r2, [pc, #112]	@ (8009540 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d806      	bhi.n	80094e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	4a1b      	ldr	r2, [pc, #108]	@ (8009544 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d902      	bls.n	80094e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	3308      	adds	r3, #8
 80094e0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80094e2:	68fa      	ldr	r2, [r7, #12]
 80094e4:	4b18      	ldr	r3, [pc, #96]	@ (8009548 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80094e6:	4413      	add	r3, r2
 80094e8:	009b      	lsls	r3, r3, #2
 80094ea:	461a      	mov	r2, r3
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	4a16      	ldr	r2, [pc, #88]	@ (800954c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80094f4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	f003 031f 	and.w	r3, r3, #31
 80094fc:	2201      	movs	r2, #1
 80094fe:	409a      	lsls	r2, r3
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009504:	bf00      	nop
 8009506:	3714      	adds	r7, #20
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr
 8009510:	58025408 	.word	0x58025408
 8009514:	5802541c 	.word	0x5802541c
 8009518:	58025430 	.word	0x58025430
 800951c:	58025444 	.word	0x58025444
 8009520:	58025458 	.word	0x58025458
 8009524:	5802546c 	.word	0x5802546c
 8009528:	58025480 	.word	0x58025480
 800952c:	58025494 	.word	0x58025494
 8009530:	cccccccd 	.word	0xcccccccd
 8009534:	16009600 	.word	0x16009600
 8009538:	58025880 	.word	0x58025880
 800953c:	aaaaaaab 	.word	0xaaaaaaab
 8009540:	400204b8 	.word	0x400204b8
 8009544:	4002040f 	.word	0x4002040f
 8009548:	10008200 	.word	0x10008200
 800954c:	40020880 	.word	0x40020880

08009550 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009550:	b480      	push	{r7}
 8009552:	b085      	sub	sp, #20
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	b2db      	uxtb	r3, r3
 800955e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d04a      	beq.n	80095fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2b08      	cmp	r3, #8
 800956a:	d847      	bhi.n	80095fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4a25      	ldr	r2, [pc, #148]	@ (8009608 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d022      	beq.n	80095bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4a24      	ldr	r2, [pc, #144]	@ (800960c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d01d      	beq.n	80095bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4a22      	ldr	r2, [pc, #136]	@ (8009610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d018      	beq.n	80095bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4a21      	ldr	r2, [pc, #132]	@ (8009614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d013      	beq.n	80095bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a1f      	ldr	r2, [pc, #124]	@ (8009618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d00e      	beq.n	80095bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4a1e      	ldr	r2, [pc, #120]	@ (800961c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d009      	beq.n	80095bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a1c      	ldr	r2, [pc, #112]	@ (8009620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d004      	beq.n	80095bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4a1b      	ldr	r2, [pc, #108]	@ (8009624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d101      	bne.n	80095c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80095bc:	2301      	movs	r3, #1
 80095be:	e000      	b.n	80095c2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80095c0:	2300      	movs	r3, #0
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d00a      	beq.n	80095dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80095c6:	68fa      	ldr	r2, [r7, #12]
 80095c8:	4b17      	ldr	r3, [pc, #92]	@ (8009628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80095ca:	4413      	add	r3, r2
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	461a      	mov	r2, r3
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	4a15      	ldr	r2, [pc, #84]	@ (800962c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80095d8:	671a      	str	r2, [r3, #112]	@ 0x70
 80095da:	e009      	b.n	80095f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80095dc:	68fa      	ldr	r2, [r7, #12]
 80095de:	4b14      	ldr	r3, [pc, #80]	@ (8009630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80095e0:	4413      	add	r3, r2
 80095e2:	009b      	lsls	r3, r3, #2
 80095e4:	461a      	mov	r2, r3
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	4a11      	ldr	r2, [pc, #68]	@ (8009634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80095ee:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	3b01      	subs	r3, #1
 80095f4:	2201      	movs	r2, #1
 80095f6:	409a      	lsls	r2, r3
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80095fc:	bf00      	nop
 80095fe:	3714      	adds	r7, #20
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr
 8009608:	58025408 	.word	0x58025408
 800960c:	5802541c 	.word	0x5802541c
 8009610:	58025430 	.word	0x58025430
 8009614:	58025444 	.word	0x58025444
 8009618:	58025458 	.word	0x58025458
 800961c:	5802546c 	.word	0x5802546c
 8009620:	58025480 	.word	0x58025480
 8009624:	58025494 	.word	0x58025494
 8009628:	1600963f 	.word	0x1600963f
 800962c:	58025940 	.word	0x58025940
 8009630:	1000823f 	.word	0x1000823f
 8009634:	40020940 	.word	0x40020940

08009638 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b084      	sub	sp, #16
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d101      	bne.n	800964a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8009646:	2301      	movs	r3, #1
 8009648:	e0cf      	b.n	80097ea <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009650:	2b00      	cmp	r3, #0
 8009652:	d106      	bne.n	8009662 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2223      	movs	r2, #35	@ 0x23
 8009658:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f7fa f8c9 	bl	80037f4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009662:	4b64      	ldr	r3, [pc, #400]	@ (80097f4 <HAL_ETH_Init+0x1bc>)
 8009664:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009668:	4a62      	ldr	r2, [pc, #392]	@ (80097f4 <HAL_ETH_Init+0x1bc>)
 800966a:	f043 0302 	orr.w	r3, r3, #2
 800966e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8009672:	4b60      	ldr	r3, [pc, #384]	@ (80097f4 <HAL_ETH_Init+0x1bc>)
 8009674:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009678:	f003 0302 	and.w	r3, r3, #2
 800967c:	60bb      	str	r3, [r7, #8]
 800967e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	7a1b      	ldrb	r3, [r3, #8]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d103      	bne.n	8009690 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8009688:	2000      	movs	r0, #0
 800968a:	f7fa fd85 	bl	8004198 <HAL_SYSCFG_ETHInterfaceSelect>
 800968e:	e003      	b.n	8009698 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8009690:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8009694:	f7fa fd80 	bl	8004198 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8009698:	4b57      	ldr	r3, [pc, #348]	@ (80097f8 <HAL_ETH_Init+0x1c0>)
 800969a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	687a      	ldr	r2, [r7, #4]
 80096a8:	6812      	ldr	r2, [r2, #0]
 80096aa:	f043 0301 	orr.w	r3, r3, #1
 80096ae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80096b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80096b4:	f7fa fd40 	bl	8004138 <HAL_GetTick>
 80096b8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80096ba:	e011      	b.n	80096e0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80096bc:	f7fa fd3c 	bl	8004138 <HAL_GetTick>
 80096c0:	4602      	mov	r2, r0
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	1ad3      	subs	r3, r2, r3
 80096c6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80096ca:	d909      	bls.n	80096e0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2204      	movs	r2, #4
 80096d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	22e0      	movs	r2, #224	@ 0xe0
 80096d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80096dc:	2301      	movs	r3, #1
 80096de:	e084      	b.n	80097ea <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f003 0301 	and.w	r3, r3, #1
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d1e4      	bne.n	80096bc <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 f886 	bl	8009804 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80096f8:	f001 fed8 	bl	800b4ac <HAL_RCC_GetHCLKFreq>
 80096fc:	4603      	mov	r3, r0
 80096fe:	4a3f      	ldr	r2, [pc, #252]	@ (80097fc <HAL_ETH_Init+0x1c4>)
 8009700:	fba2 2303 	umull	r2, r3, r2, r3
 8009704:	0c9a      	lsrs	r2, r3, #18
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	3a01      	subs	r2, #1
 800970c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 fa71 	bl	8009bf8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800971e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8009722:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8009726:	687a      	ldr	r2, [r7, #4]
 8009728:	6812      	ldr	r2, [r2, #0]
 800972a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800972e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009732:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	695b      	ldr	r3, [r3, #20]
 800973a:	f003 0303 	and.w	r3, r3, #3
 800973e:	2b00      	cmp	r3, #0
 8009740:	d009      	beq.n	8009756 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2201      	movs	r2, #1
 8009746:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	22e0      	movs	r2, #224	@ 0xe0
 800974e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8009752:	2301      	movs	r3, #1
 8009754:	e049      	b.n	80097ea <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800975e:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8009762:	4b27      	ldr	r3, [pc, #156]	@ (8009800 <HAL_ETH_Init+0x1c8>)
 8009764:	4013      	ands	r3, r2
 8009766:	687a      	ldr	r2, [r7, #4]
 8009768:	6952      	ldr	r2, [r2, #20]
 800976a:	0051      	lsls	r1, r2, #1
 800976c:	687a      	ldr	r2, [r7, #4]
 800976e:	6812      	ldr	r2, [r2, #0]
 8009770:	430b      	orrs	r3, r1
 8009772:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009776:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f000 fad9 	bl	8009d32 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f000 fb1f 	bl	8009dc4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	3305      	adds	r3, #5
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	021a      	lsls	r2, r3, #8
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	3304      	adds	r3, #4
 8009796:	781b      	ldrb	r3, [r3, #0]
 8009798:	4619      	mov	r1, r3
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	430a      	orrs	r2, r1
 80097a0:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	685b      	ldr	r3, [r3, #4]
 80097a8:	3303      	adds	r3, #3
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	061a      	lsls	r2, r3, #24
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	3302      	adds	r3, #2
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	041b      	lsls	r3, r3, #16
 80097b8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	3301      	adds	r3, #1
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80097c4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80097d2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80097d4:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2200      	movs	r2, #0
 80097dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2210      	movs	r2, #16
 80097e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80097e8:	2300      	movs	r3, #0
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3710      	adds	r7, #16
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	bf00      	nop
 80097f4:	58024400 	.word	0x58024400
 80097f8:	58000400 	.word	0x58000400
 80097fc:	431bde83 	.word	0x431bde83
 8009800:	ffff8001 	.word	0xffff8001

08009804 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b084      	sub	sp, #16
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8009814:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800981c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800981e:	f001 fe45 	bl	800b4ac <HAL_RCC_GetHCLKFreq>
 8009822:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	4a1e      	ldr	r2, [pc, #120]	@ (80098a0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d908      	bls.n	800983e <HAL_ETH_SetMDIOClockRange+0x3a>
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	4a1d      	ldr	r2, [pc, #116]	@ (80098a4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d804      	bhi.n	800983e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800983a:	60fb      	str	r3, [r7, #12]
 800983c:	e027      	b.n	800988e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	4a18      	ldr	r2, [pc, #96]	@ (80098a4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d908      	bls.n	8009858 <HAL_ETH_SetMDIOClockRange+0x54>
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	4a17      	ldr	r2, [pc, #92]	@ (80098a8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d204      	bcs.n	8009858 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8009854:	60fb      	str	r3, [r7, #12]
 8009856:	e01a      	b.n	800988e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	4a13      	ldr	r2, [pc, #76]	@ (80098a8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d303      	bcc.n	8009868 <HAL_ETH_SetMDIOClockRange+0x64>
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	4a12      	ldr	r2, [pc, #72]	@ (80098ac <HAL_ETH_SetMDIOClockRange+0xa8>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d911      	bls.n	800988c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	4a10      	ldr	r2, [pc, #64]	@ (80098ac <HAL_ETH_SetMDIOClockRange+0xa8>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d908      	bls.n	8009882 <HAL_ETH_SetMDIOClockRange+0x7e>
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	4a0f      	ldr	r2, [pc, #60]	@ (80098b0 <HAL_ETH_SetMDIOClockRange+0xac>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d804      	bhi.n	8009882 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800987e:	60fb      	str	r3, [r7, #12]
 8009880:	e005      	b.n	800988e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009888:	60fb      	str	r3, [r7, #12]
 800988a:	e000      	b.n	800988e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800988c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	68fa      	ldr	r2, [r7, #12]
 8009894:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8009898:	bf00      	nop
 800989a:	3710      	adds	r7, #16
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}
 80098a0:	01312cff 	.word	0x01312cff
 80098a4:	02160ebf 	.word	0x02160ebf
 80098a8:	03938700 	.word	0x03938700
 80098ac:	05f5e0ff 	.word	0x05f5e0ff
 80098b0:	08f0d17f 	.word	0x08f0d17f

080098b4 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b085      	sub	sp, #20
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80098c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	791b      	ldrb	r3, [r3, #4]
 80098cc:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80098ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	7b1b      	ldrb	r3, [r3, #12]
 80098d4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80098d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	7b5b      	ldrb	r3, [r3, #13]
 80098dc:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80098de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	7b9b      	ldrb	r3, [r3, #14]
 80098e4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80098e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	7bdb      	ldrb	r3, [r3, #15]
 80098ec:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80098ee:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80098f0:	683a      	ldr	r2, [r7, #0]
 80098f2:	7c12      	ldrb	r2, [r2, #16]
 80098f4:	2a00      	cmp	r2, #0
 80098f6:	d102      	bne.n	80098fe <ETH_SetMACConfig+0x4a>
 80098f8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80098fc:	e000      	b.n	8009900 <ETH_SetMACConfig+0x4c>
 80098fe:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8009900:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8009902:	683a      	ldr	r2, [r7, #0]
 8009904:	7c52      	ldrb	r2, [r2, #17]
 8009906:	2a00      	cmp	r2, #0
 8009908:	d102      	bne.n	8009910 <ETH_SetMACConfig+0x5c>
 800990a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800990e:	e000      	b.n	8009912 <ETH_SetMACConfig+0x5e>
 8009910:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8009912:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	7c9b      	ldrb	r3, [r3, #18]
 8009918:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800991a:	431a      	orrs	r2, r3
               macconf->Speed |
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8009920:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8009926:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	7f1b      	ldrb	r3, [r3, #28]
 800992c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800992e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	7f5b      	ldrb	r3, [r3, #29]
 8009934:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8009936:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8009938:	683a      	ldr	r2, [r7, #0]
 800993a:	7f92      	ldrb	r2, [r2, #30]
 800993c:	2a00      	cmp	r2, #0
 800993e:	d102      	bne.n	8009946 <ETH_SetMACConfig+0x92>
 8009940:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009944:	e000      	b.n	8009948 <ETH_SetMACConfig+0x94>
 8009946:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8009948:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	7fdb      	ldrb	r3, [r3, #31]
 800994e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8009950:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8009952:	683a      	ldr	r2, [r7, #0]
 8009954:	f892 2020 	ldrb.w	r2, [r2, #32]
 8009958:	2a00      	cmp	r2, #0
 800995a:	d102      	bne.n	8009962 <ETH_SetMACConfig+0xae>
 800995c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009960:	e000      	b.n	8009964 <ETH_SetMACConfig+0xb0>
 8009962:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8009964:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800996a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009972:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8009974:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800997a:	4313      	orrs	r3, r2
 800997c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	681a      	ldr	r2, [r3, #0]
 8009984:	4b56      	ldr	r3, [pc, #344]	@ (8009ae0 <ETH_SetMACConfig+0x22c>)
 8009986:	4013      	ands	r3, r2
 8009988:	687a      	ldr	r2, [r7, #4]
 800998a:	6812      	ldr	r2, [r2, #0]
 800998c:	68f9      	ldr	r1, [r7, #12]
 800998e:	430b      	orrs	r3, r1
 8009990:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009996:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800999e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80099a0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80099a8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80099aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80099b2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80099b4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80099b6:	683a      	ldr	r2, [r7, #0]
 80099b8:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80099bc:	2a00      	cmp	r2, #0
 80099be:	d102      	bne.n	80099c6 <ETH_SetMACConfig+0x112>
 80099c0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80099c4:	e000      	b.n	80099c8 <ETH_SetMACConfig+0x114>
 80099c6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80099c8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80099ce:	4313      	orrs	r3, r2
 80099d0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	685a      	ldr	r2, [r3, #4]
 80099d8:	4b42      	ldr	r3, [pc, #264]	@ (8009ae4 <ETH_SetMACConfig+0x230>)
 80099da:	4013      	ands	r3, r2
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	6812      	ldr	r2, [r2, #0]
 80099e0:	68f9      	ldr	r1, [r7, #12]
 80099e2:	430b      	orrs	r3, r1
 80099e4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80099ec:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80099f2:	4313      	orrs	r3, r2
 80099f4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	68da      	ldr	r2, [r3, #12]
 80099fc:	4b3a      	ldr	r3, [pc, #232]	@ (8009ae8 <ETH_SetMACConfig+0x234>)
 80099fe:	4013      	ands	r3, r2
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	6812      	ldr	r2, [r2, #0]
 8009a04:	68f9      	ldr	r1, [r7, #12]
 8009a06:	430b      	orrs	r3, r1
 8009a08:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8009a10:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8009a16:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8009a18:	683a      	ldr	r2, [r7, #0]
 8009a1a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8009a1e:	2a00      	cmp	r2, #0
 8009a20:	d101      	bne.n	8009a26 <ETH_SetMACConfig+0x172>
 8009a22:	2280      	movs	r2, #128	@ 0x80
 8009a24:	e000      	b.n	8009a28 <ETH_SetMACConfig+0x174>
 8009a26:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8009a28:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a2e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8009a30:	4313      	orrs	r3, r2
 8009a32:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009a3a:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8009a3e:	4013      	ands	r3, r2
 8009a40:	687a      	ldr	r2, [r7, #4]
 8009a42:	6812      	ldr	r2, [r2, #0]
 8009a44:	68f9      	ldr	r1, [r7, #12]
 8009a46:	430b      	orrs	r3, r1
 8009a48:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8009a50:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8009a58:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a66:	f023 0103 	bic.w	r1, r3, #3
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	68fa      	ldr	r2, [r7, #12]
 8009a70:	430a      	orrs	r2, r1
 8009a72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8009a7e:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	430a      	orrs	r2, r1
 8009a8c:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8009a94:	683a      	ldr	r2, [r7, #0]
 8009a96:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8009a9a:	2a00      	cmp	r2, #0
 8009a9c:	d101      	bne.n	8009aa2 <ETH_SetMACConfig+0x1ee>
 8009a9e:	2240      	movs	r2, #64	@ 0x40
 8009aa0:	e000      	b.n	8009aa4 <ETH_SetMACConfig+0x1f0>
 8009aa2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8009aa4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8009aac:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8009aae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8009ab6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8009ac4:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	68fa      	ldr	r2, [r7, #12]
 8009ace:	430a      	orrs	r2, r1
 8009ad0:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8009ad4:	bf00      	nop
 8009ad6:	3714      	adds	r7, #20
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr
 8009ae0:	00048083 	.word	0x00048083
 8009ae4:	c0f88000 	.word	0xc0f88000
 8009ae8:	fffffef0 	.word	0xfffffef0

08009aec <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b085      	sub	sp, #20
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009afe:	681a      	ldr	r2, [r3, #0]
 8009b00:	4b38      	ldr	r3, [pc, #224]	@ (8009be4 <ETH_SetDMAConfig+0xf8>)
 8009b02:	4013      	ands	r3, r2
 8009b04:	683a      	ldr	r2, [r7, #0]
 8009b06:	6811      	ldr	r1, [r2, #0]
 8009b08:	687a      	ldr	r2, [r7, #4]
 8009b0a:	6812      	ldr	r2, [r2, #0]
 8009b0c:	430b      	orrs	r3, r1
 8009b0e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009b12:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	791b      	ldrb	r3, [r3, #4]
 8009b18:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8009b1e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	7b1b      	ldrb	r3, [r3, #12]
 8009b24:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8009b26:	4313      	orrs	r3, r2
 8009b28:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b32:	685a      	ldr	r2, [r3, #4]
 8009b34:	4b2c      	ldr	r3, [pc, #176]	@ (8009be8 <ETH_SetDMAConfig+0xfc>)
 8009b36:	4013      	ands	r3, r2
 8009b38:	687a      	ldr	r2, [r7, #4]
 8009b3a:	6812      	ldr	r2, [r2, #0]
 8009b3c:	68f9      	ldr	r1, [r7, #12]
 8009b3e:	430b      	orrs	r3, r1
 8009b40:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009b44:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	7b5b      	ldrb	r3, [r3, #13]
 8009b4a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8009b50:	4313      	orrs	r3, r2
 8009b52:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b5c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8009b60:	4b22      	ldr	r3, [pc, #136]	@ (8009bec <ETH_SetDMAConfig+0x100>)
 8009b62:	4013      	ands	r3, r2
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	6812      	ldr	r2, [r2, #0]
 8009b68:	68f9      	ldr	r1, [r7, #12]
 8009b6a:	430b      	orrs	r3, r1
 8009b6c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009b70:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	7d1b      	ldrb	r3, [r3, #20]
 8009b7c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8009b7e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	7f5b      	ldrb	r3, [r3, #29]
 8009b84:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8009b86:	4313      	orrs	r3, r2
 8009b88:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b92:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8009b96:	4b16      	ldr	r3, [pc, #88]	@ (8009bf0 <ETH_SetDMAConfig+0x104>)
 8009b98:	4013      	ands	r3, r2
 8009b9a:	687a      	ldr	r2, [r7, #4]
 8009b9c:	6812      	ldr	r2, [r2, #0]
 8009b9e:	68f9      	ldr	r1, [r7, #12]
 8009ba0:	430b      	orrs	r3, r1
 8009ba2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009ba6:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	7f1b      	ldrb	r3, [r3, #28]
 8009bae:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009bc0:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8009bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8009bf4 <ETH_SetDMAConfig+0x108>)
 8009bc6:	4013      	ands	r3, r2
 8009bc8:	687a      	ldr	r2, [r7, #4]
 8009bca:	6812      	ldr	r2, [r2, #0]
 8009bcc:	68f9      	ldr	r1, [r7, #12]
 8009bce:	430b      	orrs	r3, r1
 8009bd0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009bd4:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8009bd8:	bf00      	nop
 8009bda:	3714      	adds	r7, #20
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr
 8009be4:	ffff87fd 	.word	0xffff87fd
 8009be8:	ffff2ffe 	.word	0xffff2ffe
 8009bec:	fffec000 	.word	0xfffec000
 8009bf0:	ffc0efef 	.word	0xffc0efef
 8009bf4:	7fc0ffff 	.word	0x7fc0ffff

08009bf8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b0a4      	sub	sp, #144	@ 0x90
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8009c00:	2301      	movs	r3, #1
 8009c02:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8009c06:	2300      	movs	r3, #0
 8009c08:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8009c10:	2300      	movs	r3, #0
 8009c12:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8009c16:	2301      	movs	r3, #1
 8009c18:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8009c22:	2301      	movs	r3, #1
 8009c24:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8009c2e:	2301      	movs	r3, #1
 8009c30:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8009c34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009c38:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8009c40:	2300      	movs	r3, #0
 8009c42:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8009c44:	2300      	movs	r3, #0
 8009c46:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8009c50:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8009c54:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8009c56:	2300      	movs	r3, #0
 8009c58:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8009c60:	2301      	movs	r3, #1
 8009c62:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8009c66:	2300      	movs	r3, #0
 8009c68:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8009c72:	2300      	movs	r3, #0
 8009c74:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0;
 8009c76:	2300      	movs	r3, #0
 8009c78:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8009c7e:	2300      	movs	r3, #0
 8009c80:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8009c84:	2300      	movs	r3, #0
 8009c86:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8009c90:	2320      	movs	r3, #32
 8009c92:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8009c96:	2301      	movs	r3, #1
 8009c98:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8009ca2:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8009ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8009ca8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009cac:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8009cb4:	2302      	movs	r3, #2
 8009cb6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8009ccc:	2301      	movs	r3, #1
 8009cce:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8009cdc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f7ff fde6 	bl	80098b4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8009cec:	2301      	movs	r3, #1
 8009cee:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8009d02:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009d06:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8009d0c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009d10:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8009d12:	2300      	movs	r3, #0
 8009d14:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8009d18:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8009d1c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8009d1e:	f107 0308 	add.w	r3, r7, #8
 8009d22:	4619      	mov	r1, r3
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f7ff fee1 	bl	8009aec <ETH_SetDMAConfig>
}
 8009d2a:	bf00      	nop
 8009d2c:	3790      	adds	r7, #144	@ 0x90
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}

08009d32 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8009d32:	b480      	push	{r7}
 8009d34:	b085      	sub	sp, #20
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	60fb      	str	r3, [r7, #12]
 8009d3e:	e01d      	b.n	8009d7c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	68d9      	ldr	r1, [r3, #12]
 8009d44:	68fa      	ldr	r2, [r7, #12]
 8009d46:	4613      	mov	r3, r2
 8009d48:	005b      	lsls	r3, r3, #1
 8009d4a:	4413      	add	r3, r2
 8009d4c:	00db      	lsls	r3, r3, #3
 8009d4e:	440b      	add	r3, r1
 8009d50:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	2200      	movs	r2, #0
 8009d56:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	2200      	movs	r2, #0
 8009d62:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	2200      	movs	r2, #0
 8009d68:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8009d6a:	68b9      	ldr	r1, [r7, #8]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	68fa      	ldr	r2, [r7, #12]
 8009d70:	3206      	adds	r2, #6
 8009d72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	3301      	adds	r3, #1
 8009d7a:	60fb      	str	r3, [r7, #12]
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2b03      	cmp	r3, #3
 8009d80:	d9de      	bls.n	8009d40 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2200      	movs	r2, #0
 8009d86:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009d90:	461a      	mov	r2, r3
 8009d92:	2303      	movs	r3, #3
 8009d94:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	68da      	ldr	r2, [r3, #12]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009da4:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	68da      	ldr	r2, [r3, #12]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009db4:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8009db8:	bf00      	nop
 8009dba:	3714      	adds	r7, #20
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr

08009dc4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b085      	sub	sp, #20
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8009dcc:	2300      	movs	r3, #0
 8009dce:	60fb      	str	r3, [r7, #12]
 8009dd0:	e023      	b.n	8009e1a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6919      	ldr	r1, [r3, #16]
 8009dd6:	68fa      	ldr	r2, [r7, #12]
 8009dd8:	4613      	mov	r3, r2
 8009dda:	005b      	lsls	r3, r3, #1
 8009ddc:	4413      	add	r3, r2
 8009dde:	00db      	lsls	r3, r3, #3
 8009de0:	440b      	add	r3, r1
 8009de2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	2200      	movs	r2, #0
 8009de8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	2200      	movs	r2, #0
 8009dee:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	2200      	movs	r2, #0
 8009df4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	2200      	movs	r2, #0
 8009e06:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8009e08:	68b9      	ldr	r1, [r7, #8]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	68fa      	ldr	r2, [r7, #12]
 8009e0e:	3212      	adds	r2, #18
 8009e10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	3301      	adds	r3, #1
 8009e18:	60fb      	str	r3, [r7, #12]
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2b03      	cmp	r3, #3
 8009e1e:	d9d8      	bls.n	8009dd2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2200      	movs	r2, #0
 8009e24:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2200      	movs	r2, #0
 8009e36:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e46:	461a      	mov	r2, r3
 8009e48:	2303      	movs	r3, #3
 8009e4a:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	691a      	ldr	r2, [r3, #16]
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e5a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	691b      	ldr	r3, [r3, #16]
 8009e62:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e6e:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8009e72:	bf00      	nop
 8009e74:	3714      	adds	r7, #20
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr
	...

08009e80 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b08a      	sub	sp, #40	@ 0x28
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	60b9      	str	r1, [r7, #8]
 8009e8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 8009e94:	2308      	movs	r3, #8
 8009e96:	76fb      	strb	r3, [r7, #27]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009e98:	4b2e      	ldr	r3, [pc, #184]	@ (8009f54 <HAL_FLASH_Program+0xd4>)
 8009e9a:	7d1b      	ldrb	r3, [r3, #20]
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d101      	bne.n	8009ea4 <HAL_FLASH_Program+0x24>
 8009ea0:	2302      	movs	r3, #2
 8009ea2:	e053      	b.n	8009f4c <HAL_FLASH_Program+0xcc>
 8009ea4:	4b2b      	ldr	r3, [pc, #172]	@ (8009f54 <HAL_FLASH_Program+0xd4>)
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009eb0:	d315      	bcc.n	8009ede <HAL_FLASH_Program+0x5e>
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 8009eb8:	d211      	bcs.n	8009ede <HAL_FLASH_Program+0x5e>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 8009eba:	2301      	movs	r3, #1
 8009ebc:	617b      	str	r3, [r7, #20]
  {
    return HAL_ERROR;
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009ebe:	4b25      	ldr	r3, [pc, #148]	@ (8009f54 <HAL_FLASH_Program+0xd4>)
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8009ec4:	6979      	ldr	r1, [r7, #20]
 8009ec6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8009eca:	f000 f88d 	bl	8009fe8 <FLASH_WaitForLastOperation>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if(status == HAL_OK)
 8009ed4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d002      	beq.n	8009ee2 <HAL_FLASH_Program+0x62>
 8009edc:	e031      	b.n	8009f42 <HAL_FLASH_Program+0xc2>
    return HAL_ERROR;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	e034      	b.n	8009f4c <HAL_FLASH_Program+0xcc>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 8009ee2:	4b1d      	ldr	r3, [pc, #116]	@ (8009f58 <HAL_FLASH_Program+0xd8>)
 8009ee4:	68db      	ldr	r3, [r3, #12]
 8009ee6:	4a1c      	ldr	r2, [pc, #112]	@ (8009f58 <HAL_FLASH_Program+0xd8>)
 8009ee8:	f043 0302 	orr.w	r3, r3, #2
 8009eec:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("isb 0xF":::"memory");
 8009eee:	f3bf 8f6f 	isb	sy
}
 8009ef2:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8009ef4:	f3bf 8f4f 	dsb	sy
}
 8009ef8:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 8009efa:	69fb      	ldr	r3, [r7, #28]
 8009efc:	681a      	ldr	r2, [r3, #0]
 8009efe:	6a3b      	ldr	r3, [r7, #32]
 8009f00:	601a      	str	r2, [r3, #0]
        dest_addr++;
 8009f02:	6a3b      	ldr	r3, [r7, #32]
 8009f04:	3304      	adds	r3, #4
 8009f06:	623b      	str	r3, [r7, #32]
        src_addr++;
 8009f08:	69fb      	ldr	r3, [r7, #28]
 8009f0a:	3304      	adds	r3, #4
 8009f0c:	61fb      	str	r3, [r7, #28]
        row_index--;
 8009f0e:	7efb      	ldrb	r3, [r7, #27]
 8009f10:	3b01      	subs	r3, #1
 8009f12:	76fb      	strb	r3, [r7, #27]
     } while (row_index != 0U);
 8009f14:	7efb      	ldrb	r3, [r7, #27]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d1ef      	bne.n	8009efa <HAL_FLASH_Program+0x7a>
  __ASM volatile ("isb 0xF":::"memory");
 8009f1a:	f3bf 8f6f 	isb	sy
}
 8009f1e:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8009f20:	f3bf 8f4f 	dsb	sy
}
 8009f24:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8009f26:	6979      	ldr	r1, [r7, #20]
 8009f28:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8009f2c:	f000 f85c 	bl	8009fe8 <FLASH_WaitForLastOperation>
 8009f30:	4603      	mov	r3, r0
 8009f32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* If the program operation is completed, disable the PG */
      CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 8009f36:	4b08      	ldr	r3, [pc, #32]	@ (8009f58 <HAL_FLASH_Program+0xd8>)
 8009f38:	68db      	ldr	r3, [r3, #12]
 8009f3a:	4a07      	ldr	r2, [pc, #28]	@ (8009f58 <HAL_FLASH_Program+0xd8>)
 8009f3c:	f023 0302 	bic.w	r3, r3, #2
 8009f40:	60d3      	str	r3, [r2, #12]
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009f42:	4b04      	ldr	r3, [pc, #16]	@ (8009f54 <HAL_FLASH_Program+0xd4>)
 8009f44:	2200      	movs	r2, #0
 8009f46:	751a      	strb	r2, [r3, #20]

  return status;
 8009f48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3728      	adds	r7, #40	@ 0x28
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}
 8009f54:	24000edc 	.word	0x24000edc
 8009f58:	52002000 	.word	0x52002000

08009f5c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8009f5c:	b480      	push	{r7}
 8009f5e:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8009f60:	4b0c      	ldr	r3, [pc, #48]	@ (8009f94 <HAL_FLASH_Unlock+0x38>)
 8009f62:	68db      	ldr	r3, [r3, #12]
 8009f64:	f003 0301 	and.w	r3, r3, #1
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d00d      	beq.n	8009f88 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 8009f6c:	4b09      	ldr	r3, [pc, #36]	@ (8009f94 <HAL_FLASH_Unlock+0x38>)
 8009f6e:	4a0a      	ldr	r2, [pc, #40]	@ (8009f98 <HAL_FLASH_Unlock+0x3c>)
 8009f70:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 8009f72:	4b08      	ldr	r3, [pc, #32]	@ (8009f94 <HAL_FLASH_Unlock+0x38>)
 8009f74:	4a09      	ldr	r2, [pc, #36]	@ (8009f9c <HAL_FLASH_Unlock+0x40>)
 8009f76:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8009f78:	4b06      	ldr	r3, [pc, #24]	@ (8009f94 <HAL_FLASH_Unlock+0x38>)
 8009f7a:	68db      	ldr	r3, [r3, #12]
 8009f7c:	f003 0301 	and.w	r3, r3, #1
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d001      	beq.n	8009f88 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 8009f84:	2301      	movs	r3, #1
 8009f86:	e000      	b.n	8009f8a <HAL_FLASH_Unlock+0x2e>
      return HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8009f88:	2300      	movs	r3, #0
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr
 8009f94:	52002000 	.word	0x52002000
 8009f98:	45670123 	.word	0x45670123
 8009f9c:	cdef89ab 	.word	0xcdef89ab

08009fa0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 8009fa4:	4b09      	ldr	r3, [pc, #36]	@ (8009fcc <HAL_FLASH_Lock+0x2c>)
 8009fa6:	68db      	ldr	r3, [r3, #12]
 8009fa8:	4a08      	ldr	r2, [pc, #32]	@ (8009fcc <HAL_FLASH_Lock+0x2c>)
 8009faa:	f043 0301 	orr.w	r3, r3, #1
 8009fae:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 8009fb0:	4b06      	ldr	r3, [pc, #24]	@ (8009fcc <HAL_FLASH_Lock+0x2c>)
 8009fb2:	68db      	ldr	r3, [r3, #12]
 8009fb4:	f003 0301 	and.w	r3, r3, #1
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d101      	bne.n	8009fc0 <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	e000      	b.n	8009fc2 <HAL_FLASH_Lock+0x22>
  {
    return HAL_ERROR;
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8009fc0:	2300      	movs	r3, #0
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr
 8009fcc:	52002000 	.word	0x52002000

08009fd0 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_DBECC_BANK2: Double Detection ECC on Bank 2
  *            @arg HAL_FLASH_ERROR_CRCRD_BANK2: CRC Read Error on Bank 2
*/

uint32_t HAL_FLASH_GetError(void)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8009fd4:	4b03      	ldr	r3, [pc, #12]	@ (8009fe4 <HAL_FLASH_GetError+0x14>)
 8009fd6:	699b      	ldr	r3, [r3, #24]
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe0:	4770      	bx	lr
 8009fe2:	bf00      	nop
 8009fe4:	24000edc 	.word	0x24000edc

08009fe8 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b086      	sub	sp, #24
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 8009ff2:	2304      	movs	r3, #4
 8009ff4:	613b      	str	r3, [r7, #16]
  uint32_t errorflag = 0;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009ffa:	f7fa f89d 	bl	8004138 <HAL_GetTick>
 8009ffe:	60f8      	str	r0, [r7, #12]
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800a000:	e010      	b.n	800a024 <FLASH_WaitForLastOperation+0x3c>
  {
    if(Timeout != HAL_MAX_DELAY)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a008:	d00c      	beq.n	800a024 <FLASH_WaitForLastOperation+0x3c>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a00a:	f7fa f895 	bl	8004138 <HAL_GetTick>
 800a00e:	4602      	mov	r2, r0
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	1ad3      	subs	r3, r2, r3
 800a014:	687a      	ldr	r2, [r7, #4]
 800a016:	429a      	cmp	r2, r3
 800a018:	d302      	bcc.n	800a020 <FLASH_WaitForLastOperation+0x38>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d101      	bne.n	800a024 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800a020:	2303      	movs	r3, #3
 800a022:	e02d      	b.n	800a080 <FLASH_WaitForLastOperation+0x98>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800a024:	4b18      	ldr	r3, [pc, #96]	@ (800a088 <FLASH_WaitForLastOperation+0xa0>)
 800a026:	691a      	ldr	r2, [r3, #16]
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	4013      	ands	r3, r2
 800a02c:	693a      	ldr	r2, [r7, #16]
 800a02e:	429a      	cmp	r2, r3
 800a030:	d0e7      	beq.n	800a002 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	2b01      	cmp	r3, #1
 800a036:	d104      	bne.n	800a042 <FLASH_WaitForLastOperation+0x5a>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 800a038:	4b13      	ldr	r3, [pc, #76]	@ (800a088 <FLASH_WaitForLastOperation+0xa0>)
 800a03a:	691a      	ldr	r2, [r3, #16]
 800a03c:	4b13      	ldr	r3, [pc, #76]	@ (800a08c <FLASH_WaitForLastOperation+0xa4>)
 800a03e:	4013      	ands	r3, r2
 800a040:	617b      	str	r3, [r7, #20]
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d00a      	beq.n	800a062 <FLASH_WaitForLastOperation+0x7a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 800a04c:	4b10      	ldr	r3, [pc, #64]	@ (800a090 <FLASH_WaitForLastOperation+0xa8>)
 800a04e:	699a      	ldr	r2, [r3, #24]
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	4313      	orrs	r3, r2
 800a054:	4a0e      	ldr	r2, [pc, #56]	@ (800a090 <FLASH_WaitForLastOperation+0xa8>)
 800a056:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 800a058:	4a0b      	ldr	r2, [pc, #44]	@ (800a088 <FLASH_WaitForLastOperation+0xa0>)
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	6153      	str	r3, [r2, #20]

    return HAL_ERROR;
 800a05e:	2301      	movs	r3, #1
 800a060:	e00e      	b.n	800a080 <FLASH_WaitForLastOperation+0x98>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	2b01      	cmp	r3, #1
 800a066:	d10a      	bne.n	800a07e <FLASH_WaitForLastOperation+0x96>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 800a068:	4b07      	ldr	r3, [pc, #28]	@ (800a088 <FLASH_WaitForLastOperation+0xa0>)
 800a06a:	691b      	ldr	r3, [r3, #16]
 800a06c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a070:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a074:	d103      	bne.n	800a07e <FLASH_WaitForLastOperation+0x96>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800a076:	4b04      	ldr	r3, [pc, #16]	@ (800a088 <FLASH_WaitForLastOperation+0xa0>)
 800a078:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800a07c:	615a      	str	r2, [r3, #20]
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800a07e:	2300      	movs	r3, #0
}
 800a080:	4618      	mov	r0, r3
 800a082:	3718      	adds	r7, #24
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}
 800a088:	52002000 	.word	0x52002000
 800a08c:	17ee0000 	.word	0x17ee0000
 800a090:	24000edc 	.word	0x24000edc

0800a094 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b084      	sub	sp, #16
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a0a2:	4b3f      	ldr	r3, [pc, #252]	@ (800a1a0 <HAL_FLASHEx_Erase+0x10c>)
 800a0a4:	7d1b      	ldrb	r3, [r3, #20]
 800a0a6:	2b01      	cmp	r3, #1
 800a0a8:	d101      	bne.n	800a0ae <HAL_FLASHEx_Erase+0x1a>
 800a0aa:	2302      	movs	r3, #2
 800a0ac:	e074      	b.n	800a198 <HAL_FLASHEx_Erase+0x104>
 800a0ae:	4b3c      	ldr	r3, [pc, #240]	@ (800a1a0 <HAL_FLASHEx_Erase+0x10c>)
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a0b4:	4b3a      	ldr	r3, [pc, #232]	@ (800a1a0 <HAL_FLASHEx_Erase+0x10c>)
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	685b      	ldr	r3, [r3, #4]
 800a0be:	f003 0301 	and.w	r3, r3, #1
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d009      	beq.n	800a0da <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800a0c6:	2101      	movs	r1, #1
 800a0c8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800a0cc:	f7ff ff8c 	bl	8009fe8 <FLASH_WaitForLastOperation>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d001      	beq.n	800a0da <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	73fb      	strb	r3, [r7, #15]
      status = HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 800a0da:	7bfb      	ldrb	r3, [r7, #15]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d157      	bne.n	800a190 <HAL_FLASHEx_Erase+0xfc>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	2b01      	cmp	r3, #1
 800a0e6:	d11e      	bne.n	800a126 <HAL_FLASHEx_Erase+0x92>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	691a      	ldr	r2, [r3, #16]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	4610      	mov	r0, r2
 800a0f4:	f000 f85a 	bl	800a1ac <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	685b      	ldr	r3, [r3, #4]
 800a0fc:	f003 0301 	and.w	r3, r3, #1
 800a100:	2b00      	cmp	r3, #0
 800a102:	d045      	beq.n	800a190 <HAL_FLASHEx_Erase+0xfc>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800a104:	2101      	movs	r1, #1
 800a106:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800a10a:	f7ff ff6d 	bl	8009fe8 <FLASH_WaitForLastOperation>
 800a10e:	4603      	mov	r3, r0
 800a110:	2b00      	cmp	r3, #0
 800a112:	d001      	beq.n	800a118 <HAL_FLASHEx_Erase+0x84>
        {
          status = HAL_ERROR;
 800a114:	2301      	movs	r3, #1
 800a116:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 800a118:	4b22      	ldr	r3, [pc, #136]	@ (800a1a4 <HAL_FLASHEx_Erase+0x110>)
 800a11a:	68db      	ldr	r3, [r3, #12]
 800a11c:	4a21      	ldr	r2, [pc, #132]	@ (800a1a4 <HAL_FLASHEx_Erase+0x110>)
 800a11e:	f023 0308 	bic.w	r3, r3, #8
 800a122:	60d3      	str	r3, [r2, #12]
 800a124:	e034      	b.n	800a190 <HAL_FLASHEx_Erase+0xfc>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a12c:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	689b      	ldr	r3, [r3, #8]
 800a132:	60bb      	str	r3, [r7, #8]
 800a134:	e024      	b.n	800a180 <HAL_FLASHEx_Erase+0xec>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6859      	ldr	r1, [r3, #4]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	691b      	ldr	r3, [r3, #16]
 800a13e:	461a      	mov	r2, r3
 800a140:	68b8      	ldr	r0, [r7, #8]
 800a142:	f000 f857 	bl	800a1f4 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	685b      	ldr	r3, [r3, #4]
 800a14a:	f003 0301 	and.w	r3, r3, #1
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d00c      	beq.n	800a16c <HAL_FLASHEx_Erase+0xd8>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 800a152:	2101      	movs	r1, #1
 800a154:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800a158:	f7ff ff46 	bl	8009fe8 <FLASH_WaitForLastOperation>
 800a15c:	4603      	mov	r3, r0
 800a15e:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800a160:	4b10      	ldr	r3, [pc, #64]	@ (800a1a4 <HAL_FLASHEx_Erase+0x110>)
 800a162:	68da      	ldr	r2, [r3, #12]
 800a164:	490f      	ldr	r1, [pc, #60]	@ (800a1a4 <HAL_FLASHEx_Erase+0x110>)
 800a166:	4b10      	ldr	r3, [pc, #64]	@ (800a1a8 <HAL_FLASHEx_Erase+0x114>)
 800a168:	4013      	ands	r3, r2
 800a16a:	60cb      	str	r3, [r1, #12]
          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 800a16c:	7bfb      	ldrb	r3, [r7, #15]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d003      	beq.n	800a17a <HAL_FLASHEx_Erase+0xe6>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	68ba      	ldr	r2, [r7, #8]
 800a176:	601a      	str	r2, [r3, #0]
          break;
 800a178:	e00a      	b.n	800a190 <HAL_FLASHEx_Erase+0xfc>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	3301      	adds	r3, #1
 800a17e:	60bb      	str	r3, [r7, #8]
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	68da      	ldr	r2, [r3, #12]
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	689b      	ldr	r3, [r3, #8]
 800a188:	4413      	add	r3, r2
 800a18a:	68ba      	ldr	r2, [r7, #8]
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d3d2      	bcc.n	800a136 <HAL_FLASHEx_Erase+0xa2>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a190:	4b03      	ldr	r3, [pc, #12]	@ (800a1a0 <HAL_FLASHEx_Erase+0x10c>)
 800a192:	2200      	movs	r2, #0
 800a194:	751a      	strb	r2, [r3, #20]

  return status;
 800a196:	7bfb      	ldrb	r3, [r7, #15]
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3710      	adds	r7, #16
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}
 800a1a0:	24000edc 	.word	0x24000edc
 800a1a4:	52002000 	.word	0x52002000
 800a1a8:	fffff8fb 	.word	0xfffff8fb

0800a1ac <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b083      	sub	sp, #12
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	6039      	str	r1, [r7, #0]
  }
  else
#endif /* DUAL_BANK */
  {
    /* Proceed to erase Flash Bank  */
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	f003 0301 	and.w	r3, r3, #1
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d011      	beq.n	800a1e4 <FLASH_MassErase+0x38>
    {
#if defined (FLASH_CR_PSIZE)
      /* Set Program/erase VoltageRange for Bank1 */
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800a1c0:	4b0b      	ldr	r3, [pc, #44]	@ (800a1f0 <FLASH_MassErase+0x44>)
 800a1c2:	68db      	ldr	r3, [r3, #12]
 800a1c4:	4a0a      	ldr	r2, [pc, #40]	@ (800a1f0 <FLASH_MassErase+0x44>)
 800a1c6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800a1ca:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 800a1cc:	4b08      	ldr	r3, [pc, #32]	@ (800a1f0 <FLASH_MassErase+0x44>)
 800a1ce:	68da      	ldr	r2, [r3, #12]
 800a1d0:	4907      	ldr	r1, [pc, #28]	@ (800a1f0 <FLASH_MassErase+0x44>)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	60cb      	str	r3, [r1, #12]
#endif /* FLASH_CR_PSIZE */

      /* Erase Bank1 */
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 800a1d8:	4b05      	ldr	r3, [pc, #20]	@ (800a1f0 <FLASH_MassErase+0x44>)
 800a1da:	68db      	ldr	r3, [r3, #12]
 800a1dc:	4a04      	ldr	r2, [pc, #16]	@ (800a1f0 <FLASH_MassErase+0x44>)
 800a1de:	f043 0388 	orr.w	r3, r3, #136	@ 0x88
 800a1e2:	60d3      	str	r3, [r2, #12]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 800a1e4:	bf00      	nop
 800a1e6:	370c      	adds	r7, #12
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ee:	4770      	bx	lr
 800a1f0:	52002000 	.word	0x52002000

0800a1f4 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b085      	sub	sp, #20
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	60f8      	str	r0, [r7, #12]
 800a1fc:	60b9      	str	r1, [r7, #8]
 800a1fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	f003 0301 	and.w	r3, r3, #1
 800a206:	2b00      	cmp	r3, #0
 800a208:	d010      	beq.n	800a22c <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800a20a:	4b0b      	ldr	r3, [pc, #44]	@ (800a238 <FLASH_Erase_Sector+0x44>)
 800a20c:	68db      	ldr	r3, [r3, #12]
 800a20e:	4a0a      	ldr	r2, [pc, #40]	@ (800a238 <FLASH_Erase_Sector+0x44>)
 800a210:	f423 63e6 	bic.w	r3, r3, #1840	@ 0x730
 800a214:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800a216:	4b08      	ldr	r3, [pc, #32]	@ (800a238 <FLASH_Erase_Sector+0x44>)
 800a218:	68da      	ldr	r2, [r3, #12]
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	0219      	lsls	r1, r3, #8
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	430b      	orrs	r3, r1
 800a222:	4313      	orrs	r3, r2
 800a224:	4a04      	ldr	r2, [pc, #16]	@ (800a238 <FLASH_Erase_Sector+0x44>)
 800a226:	f043 0384 	orr.w	r3, r3, #132	@ 0x84
 800a22a:	60d3      	str	r3, [r2, #12]

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 800a22c:	bf00      	nop
 800a22e:	3714      	adds	r7, #20
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr
 800a238:	52002000 	.word	0x52002000

0800a23c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a23c:	b480      	push	{r7}
 800a23e:	b089      	sub	sp, #36	@ 0x24
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
 800a244:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a246:	2300      	movs	r3, #0
 800a248:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a24a:	4b86      	ldr	r3, [pc, #536]	@ (800a464 <HAL_GPIO_Init+0x228>)
 800a24c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a24e:	e18c      	b.n	800a56a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	681a      	ldr	r2, [r3, #0]
 800a254:	2101      	movs	r1, #1
 800a256:	69fb      	ldr	r3, [r7, #28]
 800a258:	fa01 f303 	lsl.w	r3, r1, r3
 800a25c:	4013      	ands	r3, r2
 800a25e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	2b00      	cmp	r3, #0
 800a264:	f000 817e 	beq.w	800a564 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	f003 0303 	and.w	r3, r3, #3
 800a270:	2b01      	cmp	r3, #1
 800a272:	d005      	beq.n	800a280 <HAL_GPIO_Init+0x44>
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	685b      	ldr	r3, [r3, #4]
 800a278:	f003 0303 	and.w	r3, r3, #3
 800a27c:	2b02      	cmp	r3, #2
 800a27e:	d130      	bne.n	800a2e2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	689b      	ldr	r3, [r3, #8]
 800a284:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a286:	69fb      	ldr	r3, [r7, #28]
 800a288:	005b      	lsls	r3, r3, #1
 800a28a:	2203      	movs	r2, #3
 800a28c:	fa02 f303 	lsl.w	r3, r2, r3
 800a290:	43db      	mvns	r3, r3
 800a292:	69ba      	ldr	r2, [r7, #24]
 800a294:	4013      	ands	r3, r2
 800a296:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	68da      	ldr	r2, [r3, #12]
 800a29c:	69fb      	ldr	r3, [r7, #28]
 800a29e:	005b      	lsls	r3, r3, #1
 800a2a0:	fa02 f303 	lsl.w	r3, r2, r3
 800a2a4:	69ba      	ldr	r2, [r7, #24]
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	69ba      	ldr	r2, [r7, #24]
 800a2ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	685b      	ldr	r3, [r3, #4]
 800a2b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	69fb      	ldr	r3, [r7, #28]
 800a2ba:	fa02 f303 	lsl.w	r3, r2, r3
 800a2be:	43db      	mvns	r3, r3
 800a2c0:	69ba      	ldr	r2, [r7, #24]
 800a2c2:	4013      	ands	r3, r2
 800a2c4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	091b      	lsrs	r3, r3, #4
 800a2cc:	f003 0201 	and.w	r2, r3, #1
 800a2d0:	69fb      	ldr	r3, [r7, #28]
 800a2d2:	fa02 f303 	lsl.w	r3, r2, r3
 800a2d6:	69ba      	ldr	r2, [r7, #24]
 800a2d8:	4313      	orrs	r3, r2
 800a2da:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	69ba      	ldr	r2, [r7, #24]
 800a2e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	685b      	ldr	r3, [r3, #4]
 800a2e6:	f003 0303 	and.w	r3, r3, #3
 800a2ea:	2b03      	cmp	r3, #3
 800a2ec:	d017      	beq.n	800a31e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	68db      	ldr	r3, [r3, #12]
 800a2f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a2f4:	69fb      	ldr	r3, [r7, #28]
 800a2f6:	005b      	lsls	r3, r3, #1
 800a2f8:	2203      	movs	r2, #3
 800a2fa:	fa02 f303 	lsl.w	r3, r2, r3
 800a2fe:	43db      	mvns	r3, r3
 800a300:	69ba      	ldr	r2, [r7, #24]
 800a302:	4013      	ands	r3, r2
 800a304:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	689a      	ldr	r2, [r3, #8]
 800a30a:	69fb      	ldr	r3, [r7, #28]
 800a30c:	005b      	lsls	r3, r3, #1
 800a30e:	fa02 f303 	lsl.w	r3, r2, r3
 800a312:	69ba      	ldr	r2, [r7, #24]
 800a314:	4313      	orrs	r3, r2
 800a316:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	69ba      	ldr	r2, [r7, #24]
 800a31c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	685b      	ldr	r3, [r3, #4]
 800a322:	f003 0303 	and.w	r3, r3, #3
 800a326:	2b02      	cmp	r3, #2
 800a328:	d123      	bne.n	800a372 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a32a:	69fb      	ldr	r3, [r7, #28]
 800a32c:	08da      	lsrs	r2, r3, #3
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	3208      	adds	r2, #8
 800a332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a336:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a338:	69fb      	ldr	r3, [r7, #28]
 800a33a:	f003 0307 	and.w	r3, r3, #7
 800a33e:	009b      	lsls	r3, r3, #2
 800a340:	220f      	movs	r2, #15
 800a342:	fa02 f303 	lsl.w	r3, r2, r3
 800a346:	43db      	mvns	r3, r3
 800a348:	69ba      	ldr	r2, [r7, #24]
 800a34a:	4013      	ands	r3, r2
 800a34c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	691a      	ldr	r2, [r3, #16]
 800a352:	69fb      	ldr	r3, [r7, #28]
 800a354:	f003 0307 	and.w	r3, r3, #7
 800a358:	009b      	lsls	r3, r3, #2
 800a35a:	fa02 f303 	lsl.w	r3, r2, r3
 800a35e:	69ba      	ldr	r2, [r7, #24]
 800a360:	4313      	orrs	r3, r2
 800a362:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a364:	69fb      	ldr	r3, [r7, #28]
 800a366:	08da      	lsrs	r2, r3, #3
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	3208      	adds	r2, #8
 800a36c:	69b9      	ldr	r1, [r7, #24]
 800a36e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a378:	69fb      	ldr	r3, [r7, #28]
 800a37a:	005b      	lsls	r3, r3, #1
 800a37c:	2203      	movs	r2, #3
 800a37e:	fa02 f303 	lsl.w	r3, r2, r3
 800a382:	43db      	mvns	r3, r3
 800a384:	69ba      	ldr	r2, [r7, #24]
 800a386:	4013      	ands	r3, r2
 800a388:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	685b      	ldr	r3, [r3, #4]
 800a38e:	f003 0203 	and.w	r2, r3, #3
 800a392:	69fb      	ldr	r3, [r7, #28]
 800a394:	005b      	lsls	r3, r3, #1
 800a396:	fa02 f303 	lsl.w	r3, r2, r3
 800a39a:	69ba      	ldr	r2, [r7, #24]
 800a39c:	4313      	orrs	r3, r2
 800a39e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	69ba      	ldr	r2, [r7, #24]
 800a3a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	685b      	ldr	r3, [r3, #4]
 800a3aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	f000 80d8 	beq.w	800a564 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a3b4:	4b2c      	ldr	r3, [pc, #176]	@ (800a468 <HAL_GPIO_Init+0x22c>)
 800a3b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a3ba:	4a2b      	ldr	r2, [pc, #172]	@ (800a468 <HAL_GPIO_Init+0x22c>)
 800a3bc:	f043 0302 	orr.w	r3, r3, #2
 800a3c0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800a3c4:	4b28      	ldr	r3, [pc, #160]	@ (800a468 <HAL_GPIO_Init+0x22c>)
 800a3c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a3ca:	f003 0302 	and.w	r3, r3, #2
 800a3ce:	60fb      	str	r3, [r7, #12]
 800a3d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a3d2:	4a26      	ldr	r2, [pc, #152]	@ (800a46c <HAL_GPIO_Init+0x230>)
 800a3d4:	69fb      	ldr	r3, [r7, #28]
 800a3d6:	089b      	lsrs	r3, r3, #2
 800a3d8:	3302      	adds	r3, #2
 800a3da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a3e0:	69fb      	ldr	r3, [r7, #28]
 800a3e2:	f003 0303 	and.w	r3, r3, #3
 800a3e6:	009b      	lsls	r3, r3, #2
 800a3e8:	220f      	movs	r2, #15
 800a3ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a3ee:	43db      	mvns	r3, r3
 800a3f0:	69ba      	ldr	r2, [r7, #24]
 800a3f2:	4013      	ands	r3, r2
 800a3f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	4a1d      	ldr	r2, [pc, #116]	@ (800a470 <HAL_GPIO_Init+0x234>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d04a      	beq.n	800a494 <HAL_GPIO_Init+0x258>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	4a1c      	ldr	r2, [pc, #112]	@ (800a474 <HAL_GPIO_Init+0x238>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d02b      	beq.n	800a45e <HAL_GPIO_Init+0x222>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	4a1b      	ldr	r2, [pc, #108]	@ (800a478 <HAL_GPIO_Init+0x23c>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d025      	beq.n	800a45a <HAL_GPIO_Init+0x21e>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	4a1a      	ldr	r2, [pc, #104]	@ (800a47c <HAL_GPIO_Init+0x240>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d01f      	beq.n	800a456 <HAL_GPIO_Init+0x21a>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	4a19      	ldr	r2, [pc, #100]	@ (800a480 <HAL_GPIO_Init+0x244>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d019      	beq.n	800a452 <HAL_GPIO_Init+0x216>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	4a18      	ldr	r2, [pc, #96]	@ (800a484 <HAL_GPIO_Init+0x248>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d013      	beq.n	800a44e <HAL_GPIO_Init+0x212>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	4a17      	ldr	r2, [pc, #92]	@ (800a488 <HAL_GPIO_Init+0x24c>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d00d      	beq.n	800a44a <HAL_GPIO_Init+0x20e>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	4a16      	ldr	r2, [pc, #88]	@ (800a48c <HAL_GPIO_Init+0x250>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d007      	beq.n	800a446 <HAL_GPIO_Init+0x20a>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	4a15      	ldr	r2, [pc, #84]	@ (800a490 <HAL_GPIO_Init+0x254>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d101      	bne.n	800a442 <HAL_GPIO_Init+0x206>
 800a43e:	2309      	movs	r3, #9
 800a440:	e029      	b.n	800a496 <HAL_GPIO_Init+0x25a>
 800a442:	230a      	movs	r3, #10
 800a444:	e027      	b.n	800a496 <HAL_GPIO_Init+0x25a>
 800a446:	2307      	movs	r3, #7
 800a448:	e025      	b.n	800a496 <HAL_GPIO_Init+0x25a>
 800a44a:	2306      	movs	r3, #6
 800a44c:	e023      	b.n	800a496 <HAL_GPIO_Init+0x25a>
 800a44e:	2305      	movs	r3, #5
 800a450:	e021      	b.n	800a496 <HAL_GPIO_Init+0x25a>
 800a452:	2304      	movs	r3, #4
 800a454:	e01f      	b.n	800a496 <HAL_GPIO_Init+0x25a>
 800a456:	2303      	movs	r3, #3
 800a458:	e01d      	b.n	800a496 <HAL_GPIO_Init+0x25a>
 800a45a:	2302      	movs	r3, #2
 800a45c:	e01b      	b.n	800a496 <HAL_GPIO_Init+0x25a>
 800a45e:	2301      	movs	r3, #1
 800a460:	e019      	b.n	800a496 <HAL_GPIO_Init+0x25a>
 800a462:	bf00      	nop
 800a464:	58000080 	.word	0x58000080
 800a468:	58024400 	.word	0x58024400
 800a46c:	58000400 	.word	0x58000400
 800a470:	58020000 	.word	0x58020000
 800a474:	58020400 	.word	0x58020400
 800a478:	58020800 	.word	0x58020800
 800a47c:	58020c00 	.word	0x58020c00
 800a480:	58021000 	.word	0x58021000
 800a484:	58021400 	.word	0x58021400
 800a488:	58021800 	.word	0x58021800
 800a48c:	58021c00 	.word	0x58021c00
 800a490:	58022400 	.word	0x58022400
 800a494:	2300      	movs	r3, #0
 800a496:	69fa      	ldr	r2, [r7, #28]
 800a498:	f002 0203 	and.w	r2, r2, #3
 800a49c:	0092      	lsls	r2, r2, #2
 800a49e:	4093      	lsls	r3, r2
 800a4a0:	69ba      	ldr	r2, [r7, #24]
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a4a6:	4938      	ldr	r1, [pc, #224]	@ (800a588 <HAL_GPIO_Init+0x34c>)
 800a4a8:	69fb      	ldr	r3, [r7, #28]
 800a4aa:	089b      	lsrs	r3, r3, #2
 800a4ac:	3302      	adds	r3, #2
 800a4ae:	69ba      	ldr	r2, [r7, #24]
 800a4b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a4b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	43db      	mvns	r3, r3
 800a4c0:	69ba      	ldr	r2, [r7, #24]
 800a4c2:	4013      	ands	r3, r2
 800a4c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d003      	beq.n	800a4da <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800a4d2:	69ba      	ldr	r2, [r7, #24]
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800a4da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a4de:	69bb      	ldr	r3, [r7, #24]
 800a4e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a4e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	43db      	mvns	r3, r3
 800a4ee:	69ba      	ldr	r2, [r7, #24]
 800a4f0:	4013      	ands	r3, r2
 800a4f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d003      	beq.n	800a508 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800a500:	69ba      	ldr	r2, [r7, #24]
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	4313      	orrs	r3, r2
 800a506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800a508:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a50c:	69bb      	ldr	r3, [r7, #24]
 800a50e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	685b      	ldr	r3, [r3, #4]
 800a514:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	43db      	mvns	r3, r3
 800a51a:	69ba      	ldr	r2, [r7, #24]
 800a51c:	4013      	ands	r3, r2
 800a51e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	685b      	ldr	r3, [r3, #4]
 800a524:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d003      	beq.n	800a534 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800a52c:	69ba      	ldr	r2, [r7, #24]
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	4313      	orrs	r3, r2
 800a532:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	69ba      	ldr	r2, [r7, #24]
 800a538:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	43db      	mvns	r3, r3
 800a544:	69ba      	ldr	r2, [r7, #24]
 800a546:	4013      	ands	r3, r2
 800a548:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a552:	2b00      	cmp	r3, #0
 800a554:	d003      	beq.n	800a55e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800a556:	69ba      	ldr	r2, [r7, #24]
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	4313      	orrs	r3, r2
 800a55c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	69ba      	ldr	r2, [r7, #24]
 800a562:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800a564:	69fb      	ldr	r3, [r7, #28]
 800a566:	3301      	adds	r3, #1
 800a568:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	681a      	ldr	r2, [r3, #0]
 800a56e:	69fb      	ldr	r3, [r7, #28]
 800a570:	fa22 f303 	lsr.w	r3, r2, r3
 800a574:	2b00      	cmp	r3, #0
 800a576:	f47f ae6b 	bne.w	800a250 <HAL_GPIO_Init+0x14>
  }
}
 800a57a:	bf00      	nop
 800a57c:	bf00      	nop
 800a57e:	3724      	adds	r7, #36	@ 0x24
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr
 800a588:	58000400 	.word	0x58000400

0800a58c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a58c:	b480      	push	{r7}
 800a58e:	b085      	sub	sp, #20
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
 800a594:	460b      	mov	r3, r1
 800a596:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	691a      	ldr	r2, [r3, #16]
 800a59c:	887b      	ldrh	r3, [r7, #2]
 800a59e:	4013      	ands	r3, r2
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d002      	beq.n	800a5aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	73fb      	strb	r3, [r7, #15]
 800a5a8:	e001      	b.n	800a5ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a5ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3714      	adds	r7, #20
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr

0800a5bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b083      	sub	sp, #12
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	460b      	mov	r3, r1
 800a5c6:	807b      	strh	r3, [r7, #2]
 800a5c8:	4613      	mov	r3, r2
 800a5ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a5cc:	787b      	ldrb	r3, [r7, #1]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d003      	beq.n	800a5da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a5d2:	887a      	ldrh	r2, [r7, #2]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800a5d8:	e003      	b.n	800a5e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a5da:	887b      	ldrh	r3, [r7, #2]
 800a5dc:	041a      	lsls	r2, r3, #16
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	619a      	str	r2, [r3, #24]
}
 800a5e2:	bf00      	nop
 800a5e4:	370c      	adds	r7, #12
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ec:	4770      	bx	lr

0800a5ee <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a5ee:	b580      	push	{r7, lr}
 800a5f0:	b082      	sub	sp, #8
 800a5f2:	af00      	add	r7, sp, #0
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800a5f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a5fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800a600:	88fb      	ldrh	r3, [r7, #6]
 800a602:	4013      	ands	r3, r2
 800a604:	2b00      	cmp	r3, #0
 800a606:	d008      	beq.n	800a61a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a608:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a60c:	88fb      	ldrh	r3, [r7, #6]
 800a60e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a612:	88fb      	ldrh	r3, [r7, #6]
 800a614:	4618      	mov	r0, r3
 800a616:	f7f7 fbaf 	bl	8001d78 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800a61a:	bf00      	nop
 800a61c:	3708      	adds	r7, #8
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
	...

0800a624 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b084      	sub	sp, #16
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a62c:	4b19      	ldr	r3, [pc, #100]	@ (800a694 <HAL_PWREx_ConfigSupply+0x70>)
 800a62e:	68db      	ldr	r3, [r3, #12]
 800a630:	f003 0304 	and.w	r3, r3, #4
 800a634:	2b04      	cmp	r3, #4
 800a636:	d00a      	beq.n	800a64e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a638:	4b16      	ldr	r3, [pc, #88]	@ (800a694 <HAL_PWREx_ConfigSupply+0x70>)
 800a63a:	68db      	ldr	r3, [r3, #12]
 800a63c:	f003 0307 	and.w	r3, r3, #7
 800a640:	687a      	ldr	r2, [r7, #4]
 800a642:	429a      	cmp	r2, r3
 800a644:	d001      	beq.n	800a64a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a646:	2301      	movs	r3, #1
 800a648:	e01f      	b.n	800a68a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a64a:	2300      	movs	r3, #0
 800a64c:	e01d      	b.n	800a68a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a64e:	4b11      	ldr	r3, [pc, #68]	@ (800a694 <HAL_PWREx_ConfigSupply+0x70>)
 800a650:	68db      	ldr	r3, [r3, #12]
 800a652:	f023 0207 	bic.w	r2, r3, #7
 800a656:	490f      	ldr	r1, [pc, #60]	@ (800a694 <HAL_PWREx_ConfigSupply+0x70>)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	4313      	orrs	r3, r2
 800a65c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a65e:	f7f9 fd6b 	bl	8004138 <HAL_GetTick>
 800a662:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a664:	e009      	b.n	800a67a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a666:	f7f9 fd67 	bl	8004138 <HAL_GetTick>
 800a66a:	4602      	mov	r2, r0
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	1ad3      	subs	r3, r2, r3
 800a670:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a674:	d901      	bls.n	800a67a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a676:	2301      	movs	r3, #1
 800a678:	e007      	b.n	800a68a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a67a:	4b06      	ldr	r3, [pc, #24]	@ (800a694 <HAL_PWREx_ConfigSupply+0x70>)
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a682:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a686:	d1ee      	bne.n	800a666 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a688:	2300      	movs	r3, #0
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3710      	adds	r7, #16
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
 800a692:	bf00      	nop
 800a694:	58024800 	.word	0x58024800

0800a698 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b08c      	sub	sp, #48	@ 0x30
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d101      	bne.n	800a6aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	e3c8      	b.n	800ae3c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f003 0301 	and.w	r3, r3, #1
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	f000 8087 	beq.w	800a7c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a6b8:	4b88      	ldr	r3, [pc, #544]	@ (800a8dc <HAL_RCC_OscConfig+0x244>)
 800a6ba:	691b      	ldr	r3, [r3, #16]
 800a6bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a6c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a6c2:	4b86      	ldr	r3, [pc, #536]	@ (800a8dc <HAL_RCC_OscConfig+0x244>)
 800a6c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a6c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6ca:	2b10      	cmp	r3, #16
 800a6cc:	d007      	beq.n	800a6de <HAL_RCC_OscConfig+0x46>
 800a6ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6d0:	2b18      	cmp	r3, #24
 800a6d2:	d110      	bne.n	800a6f6 <HAL_RCC_OscConfig+0x5e>
 800a6d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6d6:	f003 0303 	and.w	r3, r3, #3
 800a6da:	2b02      	cmp	r3, #2
 800a6dc:	d10b      	bne.n	800a6f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a6de:	4b7f      	ldr	r3, [pc, #508]	@ (800a8dc <HAL_RCC_OscConfig+0x244>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d06c      	beq.n	800a7c4 <HAL_RCC_OscConfig+0x12c>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d168      	bne.n	800a7c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	e3a2      	b.n	800ae3c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	685b      	ldr	r3, [r3, #4]
 800a6fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6fe:	d106      	bne.n	800a70e <HAL_RCC_OscConfig+0x76>
 800a700:	4b76      	ldr	r3, [pc, #472]	@ (800a8dc <HAL_RCC_OscConfig+0x244>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	4a75      	ldr	r2, [pc, #468]	@ (800a8dc <HAL_RCC_OscConfig+0x244>)
 800a706:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a70a:	6013      	str	r3, [r2, #0]
 800a70c:	e02e      	b.n	800a76c <HAL_RCC_OscConfig+0xd4>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d10c      	bne.n	800a730 <HAL_RCC_OscConfig+0x98>
 800a716:	4b71      	ldr	r3, [pc, #452]	@ (800a8dc <HAL_RCC_OscConfig+0x244>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4a70      	ldr	r2, [pc, #448]	@ (800a8dc <HAL_RCC_OscConfig+0x244>)
 800a71c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a720:	6013      	str	r3, [r2, #0]
 800a722:	4b6e      	ldr	r3, [pc, #440]	@ (800a8dc <HAL_RCC_OscConfig+0x244>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	4a6d      	ldr	r2, [pc, #436]	@ (800a8dc <HAL_RCC_OscConfig+0x244>)
 800a728:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a72c:	6013      	str	r3, [r2, #0]
 800a72e:	e01d      	b.n	800a76c <HAL_RCC_OscConfig+0xd4>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a738:	d10c      	bne.n	800a754 <HAL_RCC_OscConfig+0xbc>
 800a73a:	4b68      	ldr	r3, [pc, #416]	@ (800a8dc <HAL_RCC_OscConfig+0x244>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4a67      	ldr	r2, [pc, #412]	@ (800a8dc <HAL_RCC_OscConfig+0x244>)
 800a740:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a744:	6013      	str	r3, [r2, #0]
 800a746:	4b65      	ldr	r3, [pc, #404]	@ (800a8dc <HAL_RCC_OscConfig+0x244>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	4a64      	ldr	r2, [pc, #400]	@ (800a8dc <HAL_RCC_OscConfig+0x244>)
 800a74c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a750:	6013      	str	r3, [r2, #0]
 800a752:	e00b      	b.n	800a76c <HAL_RCC_OscConfig+0xd4>
 800a754:	4b61      	ldr	r3, [pc, #388]	@ (800a8dc <HAL_RCC_OscConfig+0x244>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4a60      	ldr	r2, [pc, #384]	@ (800a8dc <HAL_RCC_OscConfig+0x244>)
 800a75a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a75e:	6013      	str	r3, [r2, #0]
 800a760:	4b5e      	ldr	r3, [pc, #376]	@ (800a8dc <HAL_RCC_OscConfig+0x244>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4a5d      	ldr	r2, [pc, #372]	@ (800a8dc <HAL_RCC_OscConfig+0x244>)
 800a766:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a76a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d013      	beq.n	800a79c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a774:	f7f9 fce0 	bl	8004138 <HAL_GetTick>
 800a778:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a77a:	e008      	b.n	800a78e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a77c:	f7f9 fcdc 	bl	8004138 <HAL_GetTick>
 800a780:	4602      	mov	r2, r0
 800a782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a784:	1ad3      	subs	r3, r2, r3
 800a786:	2b64      	cmp	r3, #100	@ 0x64
 800a788:	d901      	bls.n	800a78e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a78a:	2303      	movs	r3, #3
 800a78c:	e356      	b.n	800ae3c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a78e:	4b53      	ldr	r3, [pc, #332]	@ (800a8dc <HAL_RCC_OscConfig+0x244>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a796:	2b00      	cmp	r3, #0
 800a798:	d0f0      	beq.n	800a77c <HAL_RCC_OscConfig+0xe4>
 800a79a:	e014      	b.n	800a7c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a79c:	f7f9 fccc 	bl	8004138 <HAL_GetTick>
 800a7a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a7a2:	e008      	b.n	800a7b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a7a4:	f7f9 fcc8 	bl	8004138 <HAL_GetTick>
 800a7a8:	4602      	mov	r2, r0
 800a7aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ac:	1ad3      	subs	r3, r2, r3
 800a7ae:	2b64      	cmp	r3, #100	@ 0x64
 800a7b0:	d901      	bls.n	800a7b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a7b2:	2303      	movs	r3, #3
 800a7b4:	e342      	b.n	800ae3c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a7b6:	4b49      	ldr	r3, [pc, #292]	@ (800a8dc <HAL_RCC_OscConfig+0x244>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d1f0      	bne.n	800a7a4 <HAL_RCC_OscConfig+0x10c>
 800a7c2:	e000      	b.n	800a7c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a7c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f003 0302 	and.w	r3, r3, #2
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	f000 808c 	beq.w	800a8ec <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a7d4:	4b41      	ldr	r3, [pc, #260]	@ (800a8dc <HAL_RCC_OscConfig+0x244>)
 800a7d6:	691b      	ldr	r3, [r3, #16]
 800a7d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a7dc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a7de:	4b3f      	ldr	r3, [pc, #252]	@ (800a8dc <HAL_RCC_OscConfig+0x244>)
 800a7e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7e2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a7e4:	6a3b      	ldr	r3, [r7, #32]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d007      	beq.n	800a7fa <HAL_RCC_OscConfig+0x162>
 800a7ea:	6a3b      	ldr	r3, [r7, #32]
 800a7ec:	2b18      	cmp	r3, #24
 800a7ee:	d137      	bne.n	800a860 <HAL_RCC_OscConfig+0x1c8>
 800a7f0:	69fb      	ldr	r3, [r7, #28]
 800a7f2:	f003 0303 	and.w	r3, r3, #3
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d132      	bne.n	800a860 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a7fa:	4b38      	ldr	r3, [pc, #224]	@ (800a8dc <HAL_RCC_OscConfig+0x244>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f003 0304 	and.w	r3, r3, #4
 800a802:	2b00      	cmp	r3, #0
 800a804:	d005      	beq.n	800a812 <HAL_RCC_OscConfig+0x17a>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	68db      	ldr	r3, [r3, #12]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d101      	bne.n	800a812 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a80e:	2301      	movs	r3, #1
 800a810:	e314      	b.n	800ae3c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a812:	4b32      	ldr	r3, [pc, #200]	@ (800a8dc <HAL_RCC_OscConfig+0x244>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f023 0219 	bic.w	r2, r3, #25
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	68db      	ldr	r3, [r3, #12]
 800a81e:	492f      	ldr	r1, [pc, #188]	@ (800a8dc <HAL_RCC_OscConfig+0x244>)
 800a820:	4313      	orrs	r3, r2
 800a822:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a824:	f7f9 fc88 	bl	8004138 <HAL_GetTick>
 800a828:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a82a:	e008      	b.n	800a83e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a82c:	f7f9 fc84 	bl	8004138 <HAL_GetTick>
 800a830:	4602      	mov	r2, r0
 800a832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a834:	1ad3      	subs	r3, r2, r3
 800a836:	2b02      	cmp	r3, #2
 800a838:	d901      	bls.n	800a83e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800a83a:	2303      	movs	r3, #3
 800a83c:	e2fe      	b.n	800ae3c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a83e:	4b27      	ldr	r3, [pc, #156]	@ (800a8dc <HAL_RCC_OscConfig+0x244>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f003 0304 	and.w	r3, r3, #4
 800a846:	2b00      	cmp	r3, #0
 800a848:	d0f0      	beq.n	800a82c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a84a:	4b24      	ldr	r3, [pc, #144]	@ (800a8dc <HAL_RCC_OscConfig+0x244>)
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	691b      	ldr	r3, [r3, #16]
 800a856:	061b      	lsls	r3, r3, #24
 800a858:	4920      	ldr	r1, [pc, #128]	@ (800a8dc <HAL_RCC_OscConfig+0x244>)
 800a85a:	4313      	orrs	r3, r2
 800a85c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a85e:	e045      	b.n	800a8ec <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	68db      	ldr	r3, [r3, #12]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d026      	beq.n	800a8b6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a868:	4b1c      	ldr	r3, [pc, #112]	@ (800a8dc <HAL_RCC_OscConfig+0x244>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f023 0219 	bic.w	r2, r3, #25
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	68db      	ldr	r3, [r3, #12]
 800a874:	4919      	ldr	r1, [pc, #100]	@ (800a8dc <HAL_RCC_OscConfig+0x244>)
 800a876:	4313      	orrs	r3, r2
 800a878:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a87a:	f7f9 fc5d 	bl	8004138 <HAL_GetTick>
 800a87e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a880:	e008      	b.n	800a894 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a882:	f7f9 fc59 	bl	8004138 <HAL_GetTick>
 800a886:	4602      	mov	r2, r0
 800a888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a88a:	1ad3      	subs	r3, r2, r3
 800a88c:	2b02      	cmp	r3, #2
 800a88e:	d901      	bls.n	800a894 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800a890:	2303      	movs	r3, #3
 800a892:	e2d3      	b.n	800ae3c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a894:	4b11      	ldr	r3, [pc, #68]	@ (800a8dc <HAL_RCC_OscConfig+0x244>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f003 0304 	and.w	r3, r3, #4
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d0f0      	beq.n	800a882 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a8a0:	4b0e      	ldr	r3, [pc, #56]	@ (800a8dc <HAL_RCC_OscConfig+0x244>)
 800a8a2:	685b      	ldr	r3, [r3, #4]
 800a8a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	691b      	ldr	r3, [r3, #16]
 800a8ac:	061b      	lsls	r3, r3, #24
 800a8ae:	490b      	ldr	r1, [pc, #44]	@ (800a8dc <HAL_RCC_OscConfig+0x244>)
 800a8b0:	4313      	orrs	r3, r2
 800a8b2:	604b      	str	r3, [r1, #4]
 800a8b4:	e01a      	b.n	800a8ec <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a8b6:	4b09      	ldr	r3, [pc, #36]	@ (800a8dc <HAL_RCC_OscConfig+0x244>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	4a08      	ldr	r2, [pc, #32]	@ (800a8dc <HAL_RCC_OscConfig+0x244>)
 800a8bc:	f023 0301 	bic.w	r3, r3, #1
 800a8c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8c2:	f7f9 fc39 	bl	8004138 <HAL_GetTick>
 800a8c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a8c8:	e00a      	b.n	800a8e0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a8ca:	f7f9 fc35 	bl	8004138 <HAL_GetTick>
 800a8ce:	4602      	mov	r2, r0
 800a8d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8d2:	1ad3      	subs	r3, r2, r3
 800a8d4:	2b02      	cmp	r3, #2
 800a8d6:	d903      	bls.n	800a8e0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a8d8:	2303      	movs	r3, #3
 800a8da:	e2af      	b.n	800ae3c <HAL_RCC_OscConfig+0x7a4>
 800a8dc:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a8e0:	4b96      	ldr	r3, [pc, #600]	@ (800ab3c <HAL_RCC_OscConfig+0x4a4>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f003 0304 	and.w	r3, r3, #4
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d1ee      	bne.n	800a8ca <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f003 0310 	and.w	r3, r3, #16
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d06a      	beq.n	800a9ce <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a8f8:	4b90      	ldr	r3, [pc, #576]	@ (800ab3c <HAL_RCC_OscConfig+0x4a4>)
 800a8fa:	691b      	ldr	r3, [r3, #16]
 800a8fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a900:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a902:	4b8e      	ldr	r3, [pc, #568]	@ (800ab3c <HAL_RCC_OscConfig+0x4a4>)
 800a904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a906:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a908:	69bb      	ldr	r3, [r7, #24]
 800a90a:	2b08      	cmp	r3, #8
 800a90c:	d007      	beq.n	800a91e <HAL_RCC_OscConfig+0x286>
 800a90e:	69bb      	ldr	r3, [r7, #24]
 800a910:	2b18      	cmp	r3, #24
 800a912:	d11b      	bne.n	800a94c <HAL_RCC_OscConfig+0x2b4>
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	f003 0303 	and.w	r3, r3, #3
 800a91a:	2b01      	cmp	r3, #1
 800a91c:	d116      	bne.n	800a94c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a91e:	4b87      	ldr	r3, [pc, #540]	@ (800ab3c <HAL_RCC_OscConfig+0x4a4>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a926:	2b00      	cmp	r3, #0
 800a928:	d005      	beq.n	800a936 <HAL_RCC_OscConfig+0x29e>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	69db      	ldr	r3, [r3, #28]
 800a92e:	2b80      	cmp	r3, #128	@ 0x80
 800a930:	d001      	beq.n	800a936 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800a932:	2301      	movs	r3, #1
 800a934:	e282      	b.n	800ae3c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a936:	4b81      	ldr	r3, [pc, #516]	@ (800ab3c <HAL_RCC_OscConfig+0x4a4>)
 800a938:	68db      	ldr	r3, [r3, #12]
 800a93a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6a1b      	ldr	r3, [r3, #32]
 800a942:	061b      	lsls	r3, r3, #24
 800a944:	497d      	ldr	r1, [pc, #500]	@ (800ab3c <HAL_RCC_OscConfig+0x4a4>)
 800a946:	4313      	orrs	r3, r2
 800a948:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a94a:	e040      	b.n	800a9ce <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	69db      	ldr	r3, [r3, #28]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d023      	beq.n	800a99c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a954:	4b79      	ldr	r3, [pc, #484]	@ (800ab3c <HAL_RCC_OscConfig+0x4a4>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	4a78      	ldr	r2, [pc, #480]	@ (800ab3c <HAL_RCC_OscConfig+0x4a4>)
 800a95a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a95e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a960:	f7f9 fbea 	bl	8004138 <HAL_GetTick>
 800a964:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a966:	e008      	b.n	800a97a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a968:	f7f9 fbe6 	bl	8004138 <HAL_GetTick>
 800a96c:	4602      	mov	r2, r0
 800a96e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a970:	1ad3      	subs	r3, r2, r3
 800a972:	2b02      	cmp	r3, #2
 800a974:	d901      	bls.n	800a97a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a976:	2303      	movs	r3, #3
 800a978:	e260      	b.n	800ae3c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a97a:	4b70      	ldr	r3, [pc, #448]	@ (800ab3c <HAL_RCC_OscConfig+0x4a4>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a982:	2b00      	cmp	r3, #0
 800a984:	d0f0      	beq.n	800a968 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a986:	4b6d      	ldr	r3, [pc, #436]	@ (800ab3c <HAL_RCC_OscConfig+0x4a4>)
 800a988:	68db      	ldr	r3, [r3, #12]
 800a98a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6a1b      	ldr	r3, [r3, #32]
 800a992:	061b      	lsls	r3, r3, #24
 800a994:	4969      	ldr	r1, [pc, #420]	@ (800ab3c <HAL_RCC_OscConfig+0x4a4>)
 800a996:	4313      	orrs	r3, r2
 800a998:	60cb      	str	r3, [r1, #12]
 800a99a:	e018      	b.n	800a9ce <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a99c:	4b67      	ldr	r3, [pc, #412]	@ (800ab3c <HAL_RCC_OscConfig+0x4a4>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	4a66      	ldr	r2, [pc, #408]	@ (800ab3c <HAL_RCC_OscConfig+0x4a4>)
 800a9a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a9a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9a8:	f7f9 fbc6 	bl	8004138 <HAL_GetTick>
 800a9ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a9ae:	e008      	b.n	800a9c2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a9b0:	f7f9 fbc2 	bl	8004138 <HAL_GetTick>
 800a9b4:	4602      	mov	r2, r0
 800a9b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9b8:	1ad3      	subs	r3, r2, r3
 800a9ba:	2b02      	cmp	r3, #2
 800a9bc:	d901      	bls.n	800a9c2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800a9be:	2303      	movs	r3, #3
 800a9c0:	e23c      	b.n	800ae3c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a9c2:	4b5e      	ldr	r3, [pc, #376]	@ (800ab3c <HAL_RCC_OscConfig+0x4a4>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d1f0      	bne.n	800a9b0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f003 0308 	and.w	r3, r3, #8
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d036      	beq.n	800aa48 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	695b      	ldr	r3, [r3, #20]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d019      	beq.n	800aa16 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a9e2:	4b56      	ldr	r3, [pc, #344]	@ (800ab3c <HAL_RCC_OscConfig+0x4a4>)
 800a9e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a9e6:	4a55      	ldr	r2, [pc, #340]	@ (800ab3c <HAL_RCC_OscConfig+0x4a4>)
 800a9e8:	f043 0301 	orr.w	r3, r3, #1
 800a9ec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a9ee:	f7f9 fba3 	bl	8004138 <HAL_GetTick>
 800a9f2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a9f4:	e008      	b.n	800aa08 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a9f6:	f7f9 fb9f 	bl	8004138 <HAL_GetTick>
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9fe:	1ad3      	subs	r3, r2, r3
 800aa00:	2b02      	cmp	r3, #2
 800aa02:	d901      	bls.n	800aa08 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800aa04:	2303      	movs	r3, #3
 800aa06:	e219      	b.n	800ae3c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800aa08:	4b4c      	ldr	r3, [pc, #304]	@ (800ab3c <HAL_RCC_OscConfig+0x4a4>)
 800aa0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa0c:	f003 0302 	and.w	r3, r3, #2
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d0f0      	beq.n	800a9f6 <HAL_RCC_OscConfig+0x35e>
 800aa14:	e018      	b.n	800aa48 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aa16:	4b49      	ldr	r3, [pc, #292]	@ (800ab3c <HAL_RCC_OscConfig+0x4a4>)
 800aa18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa1a:	4a48      	ldr	r2, [pc, #288]	@ (800ab3c <HAL_RCC_OscConfig+0x4a4>)
 800aa1c:	f023 0301 	bic.w	r3, r3, #1
 800aa20:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa22:	f7f9 fb89 	bl	8004138 <HAL_GetTick>
 800aa26:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800aa28:	e008      	b.n	800aa3c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa2a:	f7f9 fb85 	bl	8004138 <HAL_GetTick>
 800aa2e:	4602      	mov	r2, r0
 800aa30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa32:	1ad3      	subs	r3, r2, r3
 800aa34:	2b02      	cmp	r3, #2
 800aa36:	d901      	bls.n	800aa3c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800aa38:	2303      	movs	r3, #3
 800aa3a:	e1ff      	b.n	800ae3c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800aa3c:	4b3f      	ldr	r3, [pc, #252]	@ (800ab3c <HAL_RCC_OscConfig+0x4a4>)
 800aa3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa40:	f003 0302 	and.w	r3, r3, #2
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d1f0      	bne.n	800aa2a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f003 0320 	and.w	r3, r3, #32
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d036      	beq.n	800aac2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	699b      	ldr	r3, [r3, #24]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d019      	beq.n	800aa90 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800aa5c:	4b37      	ldr	r3, [pc, #220]	@ (800ab3c <HAL_RCC_OscConfig+0x4a4>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4a36      	ldr	r2, [pc, #216]	@ (800ab3c <HAL_RCC_OscConfig+0x4a4>)
 800aa62:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800aa66:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800aa68:	f7f9 fb66 	bl	8004138 <HAL_GetTick>
 800aa6c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800aa6e:	e008      	b.n	800aa82 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aa70:	f7f9 fb62 	bl	8004138 <HAL_GetTick>
 800aa74:	4602      	mov	r2, r0
 800aa76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa78:	1ad3      	subs	r3, r2, r3
 800aa7a:	2b02      	cmp	r3, #2
 800aa7c:	d901      	bls.n	800aa82 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800aa7e:	2303      	movs	r3, #3
 800aa80:	e1dc      	b.n	800ae3c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800aa82:	4b2e      	ldr	r3, [pc, #184]	@ (800ab3c <HAL_RCC_OscConfig+0x4a4>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d0f0      	beq.n	800aa70 <HAL_RCC_OscConfig+0x3d8>
 800aa8e:	e018      	b.n	800aac2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800aa90:	4b2a      	ldr	r3, [pc, #168]	@ (800ab3c <HAL_RCC_OscConfig+0x4a4>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4a29      	ldr	r2, [pc, #164]	@ (800ab3c <HAL_RCC_OscConfig+0x4a4>)
 800aa96:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aa9a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800aa9c:	f7f9 fb4c 	bl	8004138 <HAL_GetTick>
 800aaa0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800aaa2:	e008      	b.n	800aab6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aaa4:	f7f9 fb48 	bl	8004138 <HAL_GetTick>
 800aaa8:	4602      	mov	r2, r0
 800aaaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaac:	1ad3      	subs	r3, r2, r3
 800aaae:	2b02      	cmp	r3, #2
 800aab0:	d901      	bls.n	800aab6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800aab2:	2303      	movs	r3, #3
 800aab4:	e1c2      	b.n	800ae3c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800aab6:	4b21      	ldr	r3, [pc, #132]	@ (800ab3c <HAL_RCC_OscConfig+0x4a4>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d1f0      	bne.n	800aaa4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f003 0304 	and.w	r3, r3, #4
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	f000 8086 	beq.w	800abdc <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800aad0:	4b1b      	ldr	r3, [pc, #108]	@ (800ab40 <HAL_RCC_OscConfig+0x4a8>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	4a1a      	ldr	r2, [pc, #104]	@ (800ab40 <HAL_RCC_OscConfig+0x4a8>)
 800aad6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aada:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aadc:	f7f9 fb2c 	bl	8004138 <HAL_GetTick>
 800aae0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aae2:	e008      	b.n	800aaf6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aae4:	f7f9 fb28 	bl	8004138 <HAL_GetTick>
 800aae8:	4602      	mov	r2, r0
 800aaea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaec:	1ad3      	subs	r3, r2, r3
 800aaee:	2b64      	cmp	r3, #100	@ 0x64
 800aaf0:	d901      	bls.n	800aaf6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800aaf2:	2303      	movs	r3, #3
 800aaf4:	e1a2      	b.n	800ae3c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aaf6:	4b12      	ldr	r3, [pc, #72]	@ (800ab40 <HAL_RCC_OscConfig+0x4a8>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d0f0      	beq.n	800aae4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	689b      	ldr	r3, [r3, #8]
 800ab06:	2b01      	cmp	r3, #1
 800ab08:	d106      	bne.n	800ab18 <HAL_RCC_OscConfig+0x480>
 800ab0a:	4b0c      	ldr	r3, [pc, #48]	@ (800ab3c <HAL_RCC_OscConfig+0x4a4>)
 800ab0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab0e:	4a0b      	ldr	r2, [pc, #44]	@ (800ab3c <HAL_RCC_OscConfig+0x4a4>)
 800ab10:	f043 0301 	orr.w	r3, r3, #1
 800ab14:	6713      	str	r3, [r2, #112]	@ 0x70
 800ab16:	e032      	b.n	800ab7e <HAL_RCC_OscConfig+0x4e6>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	689b      	ldr	r3, [r3, #8]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d111      	bne.n	800ab44 <HAL_RCC_OscConfig+0x4ac>
 800ab20:	4b06      	ldr	r3, [pc, #24]	@ (800ab3c <HAL_RCC_OscConfig+0x4a4>)
 800ab22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab24:	4a05      	ldr	r2, [pc, #20]	@ (800ab3c <HAL_RCC_OscConfig+0x4a4>)
 800ab26:	f023 0301 	bic.w	r3, r3, #1
 800ab2a:	6713      	str	r3, [r2, #112]	@ 0x70
 800ab2c:	4b03      	ldr	r3, [pc, #12]	@ (800ab3c <HAL_RCC_OscConfig+0x4a4>)
 800ab2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab30:	4a02      	ldr	r2, [pc, #8]	@ (800ab3c <HAL_RCC_OscConfig+0x4a4>)
 800ab32:	f023 0304 	bic.w	r3, r3, #4
 800ab36:	6713      	str	r3, [r2, #112]	@ 0x70
 800ab38:	e021      	b.n	800ab7e <HAL_RCC_OscConfig+0x4e6>
 800ab3a:	bf00      	nop
 800ab3c:	58024400 	.word	0x58024400
 800ab40:	58024800 	.word	0x58024800
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	689b      	ldr	r3, [r3, #8]
 800ab48:	2b05      	cmp	r3, #5
 800ab4a:	d10c      	bne.n	800ab66 <HAL_RCC_OscConfig+0x4ce>
 800ab4c:	4b83      	ldr	r3, [pc, #524]	@ (800ad5c <HAL_RCC_OscConfig+0x6c4>)
 800ab4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab50:	4a82      	ldr	r2, [pc, #520]	@ (800ad5c <HAL_RCC_OscConfig+0x6c4>)
 800ab52:	f043 0304 	orr.w	r3, r3, #4
 800ab56:	6713      	str	r3, [r2, #112]	@ 0x70
 800ab58:	4b80      	ldr	r3, [pc, #512]	@ (800ad5c <HAL_RCC_OscConfig+0x6c4>)
 800ab5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab5c:	4a7f      	ldr	r2, [pc, #508]	@ (800ad5c <HAL_RCC_OscConfig+0x6c4>)
 800ab5e:	f043 0301 	orr.w	r3, r3, #1
 800ab62:	6713      	str	r3, [r2, #112]	@ 0x70
 800ab64:	e00b      	b.n	800ab7e <HAL_RCC_OscConfig+0x4e6>
 800ab66:	4b7d      	ldr	r3, [pc, #500]	@ (800ad5c <HAL_RCC_OscConfig+0x6c4>)
 800ab68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab6a:	4a7c      	ldr	r2, [pc, #496]	@ (800ad5c <HAL_RCC_OscConfig+0x6c4>)
 800ab6c:	f023 0301 	bic.w	r3, r3, #1
 800ab70:	6713      	str	r3, [r2, #112]	@ 0x70
 800ab72:	4b7a      	ldr	r3, [pc, #488]	@ (800ad5c <HAL_RCC_OscConfig+0x6c4>)
 800ab74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab76:	4a79      	ldr	r2, [pc, #484]	@ (800ad5c <HAL_RCC_OscConfig+0x6c4>)
 800ab78:	f023 0304 	bic.w	r3, r3, #4
 800ab7c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	689b      	ldr	r3, [r3, #8]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d015      	beq.n	800abb2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab86:	f7f9 fad7 	bl	8004138 <HAL_GetTick>
 800ab8a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ab8c:	e00a      	b.n	800aba4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab8e:	f7f9 fad3 	bl	8004138 <HAL_GetTick>
 800ab92:	4602      	mov	r2, r0
 800ab94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab96:	1ad3      	subs	r3, r2, r3
 800ab98:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	d901      	bls.n	800aba4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800aba0:	2303      	movs	r3, #3
 800aba2:	e14b      	b.n	800ae3c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aba4:	4b6d      	ldr	r3, [pc, #436]	@ (800ad5c <HAL_RCC_OscConfig+0x6c4>)
 800aba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aba8:	f003 0302 	and.w	r3, r3, #2
 800abac:	2b00      	cmp	r3, #0
 800abae:	d0ee      	beq.n	800ab8e <HAL_RCC_OscConfig+0x4f6>
 800abb0:	e014      	b.n	800abdc <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800abb2:	f7f9 fac1 	bl	8004138 <HAL_GetTick>
 800abb6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800abb8:	e00a      	b.n	800abd0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abba:	f7f9 fabd 	bl	8004138 <HAL_GetTick>
 800abbe:	4602      	mov	r2, r0
 800abc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abc2:	1ad3      	subs	r3, r2, r3
 800abc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800abc8:	4293      	cmp	r3, r2
 800abca:	d901      	bls.n	800abd0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800abcc:	2303      	movs	r3, #3
 800abce:	e135      	b.n	800ae3c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800abd0:	4b62      	ldr	r3, [pc, #392]	@ (800ad5c <HAL_RCC_OscConfig+0x6c4>)
 800abd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abd4:	f003 0302 	and.w	r3, r3, #2
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d1ee      	bne.n	800abba <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	f000 812a 	beq.w	800ae3a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800abe6:	4b5d      	ldr	r3, [pc, #372]	@ (800ad5c <HAL_RCC_OscConfig+0x6c4>)
 800abe8:	691b      	ldr	r3, [r3, #16]
 800abea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800abee:	2b18      	cmp	r3, #24
 800abf0:	f000 80ba 	beq.w	800ad68 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abf8:	2b02      	cmp	r3, #2
 800abfa:	f040 8095 	bne.w	800ad28 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800abfe:	4b57      	ldr	r3, [pc, #348]	@ (800ad5c <HAL_RCC_OscConfig+0x6c4>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	4a56      	ldr	r2, [pc, #344]	@ (800ad5c <HAL_RCC_OscConfig+0x6c4>)
 800ac04:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ac08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac0a:	f7f9 fa95 	bl	8004138 <HAL_GetTick>
 800ac0e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ac10:	e008      	b.n	800ac24 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac12:	f7f9 fa91 	bl	8004138 <HAL_GetTick>
 800ac16:	4602      	mov	r2, r0
 800ac18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac1a:	1ad3      	subs	r3, r2, r3
 800ac1c:	2b02      	cmp	r3, #2
 800ac1e:	d901      	bls.n	800ac24 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800ac20:	2303      	movs	r3, #3
 800ac22:	e10b      	b.n	800ae3c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ac24:	4b4d      	ldr	r3, [pc, #308]	@ (800ad5c <HAL_RCC_OscConfig+0x6c4>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d1f0      	bne.n	800ac12 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ac30:	4b4a      	ldr	r3, [pc, #296]	@ (800ad5c <HAL_RCC_OscConfig+0x6c4>)
 800ac32:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ac34:	4b4a      	ldr	r3, [pc, #296]	@ (800ad60 <HAL_RCC_OscConfig+0x6c8>)
 800ac36:	4013      	ands	r3, r2
 800ac38:	687a      	ldr	r2, [r7, #4]
 800ac3a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800ac3c:	687a      	ldr	r2, [r7, #4]
 800ac3e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800ac40:	0112      	lsls	r2, r2, #4
 800ac42:	430a      	orrs	r2, r1
 800ac44:	4945      	ldr	r1, [pc, #276]	@ (800ad5c <HAL_RCC_OscConfig+0x6c4>)
 800ac46:	4313      	orrs	r3, r2
 800ac48:	628b      	str	r3, [r1, #40]	@ 0x28
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac4e:	3b01      	subs	r3, #1
 800ac50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac58:	3b01      	subs	r3, #1
 800ac5a:	025b      	lsls	r3, r3, #9
 800ac5c:	b29b      	uxth	r3, r3
 800ac5e:	431a      	orrs	r2, r3
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac64:	3b01      	subs	r3, #1
 800ac66:	041b      	lsls	r3, r3, #16
 800ac68:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ac6c:	431a      	orrs	r2, r3
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac72:	3b01      	subs	r3, #1
 800ac74:	061b      	lsls	r3, r3, #24
 800ac76:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ac7a:	4938      	ldr	r1, [pc, #224]	@ (800ad5c <HAL_RCC_OscConfig+0x6c4>)
 800ac7c:	4313      	orrs	r3, r2
 800ac7e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800ac80:	4b36      	ldr	r3, [pc, #216]	@ (800ad5c <HAL_RCC_OscConfig+0x6c4>)
 800ac82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac84:	4a35      	ldr	r2, [pc, #212]	@ (800ad5c <HAL_RCC_OscConfig+0x6c4>)
 800ac86:	f023 0301 	bic.w	r3, r3, #1
 800ac8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ac8c:	4b33      	ldr	r3, [pc, #204]	@ (800ad5c <HAL_RCC_OscConfig+0x6c4>)
 800ac8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ac90:	4b34      	ldr	r3, [pc, #208]	@ (800ad64 <HAL_RCC_OscConfig+0x6cc>)
 800ac92:	4013      	ands	r3, r2
 800ac94:	687a      	ldr	r2, [r7, #4]
 800ac96:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ac98:	00d2      	lsls	r2, r2, #3
 800ac9a:	4930      	ldr	r1, [pc, #192]	@ (800ad5c <HAL_RCC_OscConfig+0x6c4>)
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800aca0:	4b2e      	ldr	r3, [pc, #184]	@ (800ad5c <HAL_RCC_OscConfig+0x6c4>)
 800aca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aca4:	f023 020c 	bic.w	r2, r3, #12
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acac:	492b      	ldr	r1, [pc, #172]	@ (800ad5c <HAL_RCC_OscConfig+0x6c4>)
 800acae:	4313      	orrs	r3, r2
 800acb0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800acb2:	4b2a      	ldr	r3, [pc, #168]	@ (800ad5c <HAL_RCC_OscConfig+0x6c4>)
 800acb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acb6:	f023 0202 	bic.w	r2, r3, #2
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acbe:	4927      	ldr	r1, [pc, #156]	@ (800ad5c <HAL_RCC_OscConfig+0x6c4>)
 800acc0:	4313      	orrs	r3, r2
 800acc2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800acc4:	4b25      	ldr	r3, [pc, #148]	@ (800ad5c <HAL_RCC_OscConfig+0x6c4>)
 800acc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acc8:	4a24      	ldr	r2, [pc, #144]	@ (800ad5c <HAL_RCC_OscConfig+0x6c4>)
 800acca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800acce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acd0:	4b22      	ldr	r3, [pc, #136]	@ (800ad5c <HAL_RCC_OscConfig+0x6c4>)
 800acd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acd4:	4a21      	ldr	r2, [pc, #132]	@ (800ad5c <HAL_RCC_OscConfig+0x6c4>)
 800acd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800acda:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800acdc:	4b1f      	ldr	r3, [pc, #124]	@ (800ad5c <HAL_RCC_OscConfig+0x6c4>)
 800acde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ace0:	4a1e      	ldr	r2, [pc, #120]	@ (800ad5c <HAL_RCC_OscConfig+0x6c4>)
 800ace2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ace6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800ace8:	4b1c      	ldr	r3, [pc, #112]	@ (800ad5c <HAL_RCC_OscConfig+0x6c4>)
 800acea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acec:	4a1b      	ldr	r2, [pc, #108]	@ (800ad5c <HAL_RCC_OscConfig+0x6c4>)
 800acee:	f043 0301 	orr.w	r3, r3, #1
 800acf2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800acf4:	4b19      	ldr	r3, [pc, #100]	@ (800ad5c <HAL_RCC_OscConfig+0x6c4>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	4a18      	ldr	r2, [pc, #96]	@ (800ad5c <HAL_RCC_OscConfig+0x6c4>)
 800acfa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800acfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad00:	f7f9 fa1a 	bl	8004138 <HAL_GetTick>
 800ad04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ad06:	e008      	b.n	800ad1a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad08:	f7f9 fa16 	bl	8004138 <HAL_GetTick>
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad10:	1ad3      	subs	r3, r2, r3
 800ad12:	2b02      	cmp	r3, #2
 800ad14:	d901      	bls.n	800ad1a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800ad16:	2303      	movs	r3, #3
 800ad18:	e090      	b.n	800ae3c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ad1a:	4b10      	ldr	r3, [pc, #64]	@ (800ad5c <HAL_RCC_OscConfig+0x6c4>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d0f0      	beq.n	800ad08 <HAL_RCC_OscConfig+0x670>
 800ad26:	e088      	b.n	800ae3a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ad28:	4b0c      	ldr	r3, [pc, #48]	@ (800ad5c <HAL_RCC_OscConfig+0x6c4>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	4a0b      	ldr	r2, [pc, #44]	@ (800ad5c <HAL_RCC_OscConfig+0x6c4>)
 800ad2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ad32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad34:	f7f9 fa00 	bl	8004138 <HAL_GetTick>
 800ad38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ad3a:	e008      	b.n	800ad4e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad3c:	f7f9 f9fc 	bl	8004138 <HAL_GetTick>
 800ad40:	4602      	mov	r2, r0
 800ad42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad44:	1ad3      	subs	r3, r2, r3
 800ad46:	2b02      	cmp	r3, #2
 800ad48:	d901      	bls.n	800ad4e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800ad4a:	2303      	movs	r3, #3
 800ad4c:	e076      	b.n	800ae3c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ad4e:	4b03      	ldr	r3, [pc, #12]	@ (800ad5c <HAL_RCC_OscConfig+0x6c4>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d1f0      	bne.n	800ad3c <HAL_RCC_OscConfig+0x6a4>
 800ad5a:	e06e      	b.n	800ae3a <HAL_RCC_OscConfig+0x7a2>
 800ad5c:	58024400 	.word	0x58024400
 800ad60:	fffffc0c 	.word	0xfffffc0c
 800ad64:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ad68:	4b36      	ldr	r3, [pc, #216]	@ (800ae44 <HAL_RCC_OscConfig+0x7ac>)
 800ad6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad6c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ad6e:	4b35      	ldr	r3, [pc, #212]	@ (800ae44 <HAL_RCC_OscConfig+0x7ac>)
 800ad70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad72:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad78:	2b01      	cmp	r3, #1
 800ad7a:	d031      	beq.n	800ade0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	f003 0203 	and.w	r2, r3, #3
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ad86:	429a      	cmp	r2, r3
 800ad88:	d12a      	bne.n	800ade0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	091b      	lsrs	r3, r3, #4
 800ad8e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d122      	bne.n	800ade0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ada4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ada6:	429a      	cmp	r2, r3
 800ada8:	d11a      	bne.n	800ade0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	0a5b      	lsrs	r3, r3, #9
 800adae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800adb6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800adb8:	429a      	cmp	r2, r3
 800adba:	d111      	bne.n	800ade0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	0c1b      	lsrs	r3, r3, #16
 800adc0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adc8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800adca:	429a      	cmp	r2, r3
 800adcc:	d108      	bne.n	800ade0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	0e1b      	lsrs	r3, r3, #24
 800add2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800adda:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800addc:	429a      	cmp	r2, r3
 800adde:	d001      	beq.n	800ade4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800ade0:	2301      	movs	r3, #1
 800ade2:	e02b      	b.n	800ae3c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ade4:	4b17      	ldr	r3, [pc, #92]	@ (800ae44 <HAL_RCC_OscConfig+0x7ac>)
 800ade6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ade8:	08db      	lsrs	r3, r3, #3
 800adea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800adee:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800adf4:	693a      	ldr	r2, [r7, #16]
 800adf6:	429a      	cmp	r2, r3
 800adf8:	d01f      	beq.n	800ae3a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800adfa:	4b12      	ldr	r3, [pc, #72]	@ (800ae44 <HAL_RCC_OscConfig+0x7ac>)
 800adfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adfe:	4a11      	ldr	r2, [pc, #68]	@ (800ae44 <HAL_RCC_OscConfig+0x7ac>)
 800ae00:	f023 0301 	bic.w	r3, r3, #1
 800ae04:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ae06:	f7f9 f997 	bl	8004138 <HAL_GetTick>
 800ae0a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800ae0c:	bf00      	nop
 800ae0e:	f7f9 f993 	bl	8004138 <HAL_GetTick>
 800ae12:	4602      	mov	r2, r0
 800ae14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae16:	4293      	cmp	r3, r2
 800ae18:	d0f9      	beq.n	800ae0e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ae1a:	4b0a      	ldr	r3, [pc, #40]	@ (800ae44 <HAL_RCC_OscConfig+0x7ac>)
 800ae1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ae1e:	4b0a      	ldr	r3, [pc, #40]	@ (800ae48 <HAL_RCC_OscConfig+0x7b0>)
 800ae20:	4013      	ands	r3, r2
 800ae22:	687a      	ldr	r2, [r7, #4]
 800ae24:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ae26:	00d2      	lsls	r2, r2, #3
 800ae28:	4906      	ldr	r1, [pc, #24]	@ (800ae44 <HAL_RCC_OscConfig+0x7ac>)
 800ae2a:	4313      	orrs	r3, r2
 800ae2c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800ae2e:	4b05      	ldr	r3, [pc, #20]	@ (800ae44 <HAL_RCC_OscConfig+0x7ac>)
 800ae30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae32:	4a04      	ldr	r2, [pc, #16]	@ (800ae44 <HAL_RCC_OscConfig+0x7ac>)
 800ae34:	f043 0301 	orr.w	r3, r3, #1
 800ae38:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800ae3a:	2300      	movs	r3, #0
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3730      	adds	r7, #48	@ 0x30
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}
 800ae44:	58024400 	.word	0x58024400
 800ae48:	ffff0007 	.word	0xffff0007

0800ae4c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b086      	sub	sp, #24
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d101      	bne.n	800ae60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	e19c      	b.n	800b19a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ae60:	4b8a      	ldr	r3, [pc, #552]	@ (800b08c <HAL_RCC_ClockConfig+0x240>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f003 030f 	and.w	r3, r3, #15
 800ae68:	683a      	ldr	r2, [r7, #0]
 800ae6a:	429a      	cmp	r2, r3
 800ae6c:	d910      	bls.n	800ae90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae6e:	4b87      	ldr	r3, [pc, #540]	@ (800b08c <HAL_RCC_ClockConfig+0x240>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	f023 020f 	bic.w	r2, r3, #15
 800ae76:	4985      	ldr	r1, [pc, #532]	@ (800b08c <HAL_RCC_ClockConfig+0x240>)
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae7e:	4b83      	ldr	r3, [pc, #524]	@ (800b08c <HAL_RCC_ClockConfig+0x240>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f003 030f 	and.w	r3, r3, #15
 800ae86:	683a      	ldr	r2, [r7, #0]
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	d001      	beq.n	800ae90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	e184      	b.n	800b19a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f003 0304 	and.w	r3, r3, #4
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d010      	beq.n	800aebe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	691a      	ldr	r2, [r3, #16]
 800aea0:	4b7b      	ldr	r3, [pc, #492]	@ (800b090 <HAL_RCC_ClockConfig+0x244>)
 800aea2:	699b      	ldr	r3, [r3, #24]
 800aea4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800aea8:	429a      	cmp	r2, r3
 800aeaa:	d908      	bls.n	800aebe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800aeac:	4b78      	ldr	r3, [pc, #480]	@ (800b090 <HAL_RCC_ClockConfig+0x244>)
 800aeae:	699b      	ldr	r3, [r3, #24]
 800aeb0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	691b      	ldr	r3, [r3, #16]
 800aeb8:	4975      	ldr	r1, [pc, #468]	@ (800b090 <HAL_RCC_ClockConfig+0x244>)
 800aeba:	4313      	orrs	r3, r2
 800aebc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f003 0308 	and.w	r3, r3, #8
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d010      	beq.n	800aeec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	695a      	ldr	r2, [r3, #20]
 800aece:	4b70      	ldr	r3, [pc, #448]	@ (800b090 <HAL_RCC_ClockConfig+0x244>)
 800aed0:	69db      	ldr	r3, [r3, #28]
 800aed2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800aed6:	429a      	cmp	r2, r3
 800aed8:	d908      	bls.n	800aeec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800aeda:	4b6d      	ldr	r3, [pc, #436]	@ (800b090 <HAL_RCC_ClockConfig+0x244>)
 800aedc:	69db      	ldr	r3, [r3, #28]
 800aede:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	695b      	ldr	r3, [r3, #20]
 800aee6:	496a      	ldr	r1, [pc, #424]	@ (800b090 <HAL_RCC_ClockConfig+0x244>)
 800aee8:	4313      	orrs	r3, r2
 800aeea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f003 0310 	and.w	r3, r3, #16
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d010      	beq.n	800af1a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	699a      	ldr	r2, [r3, #24]
 800aefc:	4b64      	ldr	r3, [pc, #400]	@ (800b090 <HAL_RCC_ClockConfig+0x244>)
 800aefe:	69db      	ldr	r3, [r3, #28]
 800af00:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800af04:	429a      	cmp	r2, r3
 800af06:	d908      	bls.n	800af1a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800af08:	4b61      	ldr	r3, [pc, #388]	@ (800b090 <HAL_RCC_ClockConfig+0x244>)
 800af0a:	69db      	ldr	r3, [r3, #28]
 800af0c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	699b      	ldr	r3, [r3, #24]
 800af14:	495e      	ldr	r1, [pc, #376]	@ (800b090 <HAL_RCC_ClockConfig+0x244>)
 800af16:	4313      	orrs	r3, r2
 800af18:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f003 0320 	and.w	r3, r3, #32
 800af22:	2b00      	cmp	r3, #0
 800af24:	d010      	beq.n	800af48 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	69da      	ldr	r2, [r3, #28]
 800af2a:	4b59      	ldr	r3, [pc, #356]	@ (800b090 <HAL_RCC_ClockConfig+0x244>)
 800af2c:	6a1b      	ldr	r3, [r3, #32]
 800af2e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800af32:	429a      	cmp	r2, r3
 800af34:	d908      	bls.n	800af48 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800af36:	4b56      	ldr	r3, [pc, #344]	@ (800b090 <HAL_RCC_ClockConfig+0x244>)
 800af38:	6a1b      	ldr	r3, [r3, #32]
 800af3a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	69db      	ldr	r3, [r3, #28]
 800af42:	4953      	ldr	r1, [pc, #332]	@ (800b090 <HAL_RCC_ClockConfig+0x244>)
 800af44:	4313      	orrs	r3, r2
 800af46:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	f003 0302 	and.w	r3, r3, #2
 800af50:	2b00      	cmp	r3, #0
 800af52:	d010      	beq.n	800af76 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	68da      	ldr	r2, [r3, #12]
 800af58:	4b4d      	ldr	r3, [pc, #308]	@ (800b090 <HAL_RCC_ClockConfig+0x244>)
 800af5a:	699b      	ldr	r3, [r3, #24]
 800af5c:	f003 030f 	and.w	r3, r3, #15
 800af60:	429a      	cmp	r2, r3
 800af62:	d908      	bls.n	800af76 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800af64:	4b4a      	ldr	r3, [pc, #296]	@ (800b090 <HAL_RCC_ClockConfig+0x244>)
 800af66:	699b      	ldr	r3, [r3, #24]
 800af68:	f023 020f 	bic.w	r2, r3, #15
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	68db      	ldr	r3, [r3, #12]
 800af70:	4947      	ldr	r1, [pc, #284]	@ (800b090 <HAL_RCC_ClockConfig+0x244>)
 800af72:	4313      	orrs	r3, r2
 800af74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f003 0301 	and.w	r3, r3, #1
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d055      	beq.n	800b02e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800af82:	4b43      	ldr	r3, [pc, #268]	@ (800b090 <HAL_RCC_ClockConfig+0x244>)
 800af84:	699b      	ldr	r3, [r3, #24]
 800af86:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	689b      	ldr	r3, [r3, #8]
 800af8e:	4940      	ldr	r1, [pc, #256]	@ (800b090 <HAL_RCC_ClockConfig+0x244>)
 800af90:	4313      	orrs	r3, r2
 800af92:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	685b      	ldr	r3, [r3, #4]
 800af98:	2b02      	cmp	r3, #2
 800af9a:	d107      	bne.n	800afac <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800af9c:	4b3c      	ldr	r3, [pc, #240]	@ (800b090 <HAL_RCC_ClockConfig+0x244>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d121      	bne.n	800afec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800afa8:	2301      	movs	r3, #1
 800afaa:	e0f6      	b.n	800b19a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	685b      	ldr	r3, [r3, #4]
 800afb0:	2b03      	cmp	r3, #3
 800afb2:	d107      	bne.n	800afc4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800afb4:	4b36      	ldr	r3, [pc, #216]	@ (800b090 <HAL_RCC_ClockConfig+0x244>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d115      	bne.n	800afec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800afc0:	2301      	movs	r3, #1
 800afc2:	e0ea      	b.n	800b19a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	685b      	ldr	r3, [r3, #4]
 800afc8:	2b01      	cmp	r3, #1
 800afca:	d107      	bne.n	800afdc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800afcc:	4b30      	ldr	r3, [pc, #192]	@ (800b090 <HAL_RCC_ClockConfig+0x244>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d109      	bne.n	800afec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800afd8:	2301      	movs	r3, #1
 800afda:	e0de      	b.n	800b19a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800afdc:	4b2c      	ldr	r3, [pc, #176]	@ (800b090 <HAL_RCC_ClockConfig+0x244>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f003 0304 	and.w	r3, r3, #4
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d101      	bne.n	800afec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800afe8:	2301      	movs	r3, #1
 800afea:	e0d6      	b.n	800b19a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800afec:	4b28      	ldr	r3, [pc, #160]	@ (800b090 <HAL_RCC_ClockConfig+0x244>)
 800afee:	691b      	ldr	r3, [r3, #16]
 800aff0:	f023 0207 	bic.w	r2, r3, #7
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	685b      	ldr	r3, [r3, #4]
 800aff8:	4925      	ldr	r1, [pc, #148]	@ (800b090 <HAL_RCC_ClockConfig+0x244>)
 800affa:	4313      	orrs	r3, r2
 800affc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800affe:	f7f9 f89b 	bl	8004138 <HAL_GetTick>
 800b002:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b004:	e00a      	b.n	800b01c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b006:	f7f9 f897 	bl	8004138 <HAL_GetTick>
 800b00a:	4602      	mov	r2, r0
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	1ad3      	subs	r3, r2, r3
 800b010:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b014:	4293      	cmp	r3, r2
 800b016:	d901      	bls.n	800b01c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b018:	2303      	movs	r3, #3
 800b01a:	e0be      	b.n	800b19a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b01c:	4b1c      	ldr	r3, [pc, #112]	@ (800b090 <HAL_RCC_ClockConfig+0x244>)
 800b01e:	691b      	ldr	r3, [r3, #16]
 800b020:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	685b      	ldr	r3, [r3, #4]
 800b028:	00db      	lsls	r3, r3, #3
 800b02a:	429a      	cmp	r2, r3
 800b02c:	d1eb      	bne.n	800b006 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f003 0302 	and.w	r3, r3, #2
 800b036:	2b00      	cmp	r3, #0
 800b038:	d010      	beq.n	800b05c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	68da      	ldr	r2, [r3, #12]
 800b03e:	4b14      	ldr	r3, [pc, #80]	@ (800b090 <HAL_RCC_ClockConfig+0x244>)
 800b040:	699b      	ldr	r3, [r3, #24]
 800b042:	f003 030f 	and.w	r3, r3, #15
 800b046:	429a      	cmp	r2, r3
 800b048:	d208      	bcs.n	800b05c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b04a:	4b11      	ldr	r3, [pc, #68]	@ (800b090 <HAL_RCC_ClockConfig+0x244>)
 800b04c:	699b      	ldr	r3, [r3, #24]
 800b04e:	f023 020f 	bic.w	r2, r3, #15
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	68db      	ldr	r3, [r3, #12]
 800b056:	490e      	ldr	r1, [pc, #56]	@ (800b090 <HAL_RCC_ClockConfig+0x244>)
 800b058:	4313      	orrs	r3, r2
 800b05a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b05c:	4b0b      	ldr	r3, [pc, #44]	@ (800b08c <HAL_RCC_ClockConfig+0x240>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f003 030f 	and.w	r3, r3, #15
 800b064:	683a      	ldr	r2, [r7, #0]
 800b066:	429a      	cmp	r2, r3
 800b068:	d214      	bcs.n	800b094 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b06a:	4b08      	ldr	r3, [pc, #32]	@ (800b08c <HAL_RCC_ClockConfig+0x240>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f023 020f 	bic.w	r2, r3, #15
 800b072:	4906      	ldr	r1, [pc, #24]	@ (800b08c <HAL_RCC_ClockConfig+0x240>)
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	4313      	orrs	r3, r2
 800b078:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b07a:	4b04      	ldr	r3, [pc, #16]	@ (800b08c <HAL_RCC_ClockConfig+0x240>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f003 030f 	and.w	r3, r3, #15
 800b082:	683a      	ldr	r2, [r7, #0]
 800b084:	429a      	cmp	r2, r3
 800b086:	d005      	beq.n	800b094 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b088:	2301      	movs	r3, #1
 800b08a:	e086      	b.n	800b19a <HAL_RCC_ClockConfig+0x34e>
 800b08c:	52002000 	.word	0x52002000
 800b090:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f003 0304 	and.w	r3, r3, #4
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d010      	beq.n	800b0c2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	691a      	ldr	r2, [r3, #16]
 800b0a4:	4b3f      	ldr	r3, [pc, #252]	@ (800b1a4 <HAL_RCC_ClockConfig+0x358>)
 800b0a6:	699b      	ldr	r3, [r3, #24]
 800b0a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b0ac:	429a      	cmp	r2, r3
 800b0ae:	d208      	bcs.n	800b0c2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b0b0:	4b3c      	ldr	r3, [pc, #240]	@ (800b1a4 <HAL_RCC_ClockConfig+0x358>)
 800b0b2:	699b      	ldr	r3, [r3, #24]
 800b0b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	691b      	ldr	r3, [r3, #16]
 800b0bc:	4939      	ldr	r1, [pc, #228]	@ (800b1a4 <HAL_RCC_ClockConfig+0x358>)
 800b0be:	4313      	orrs	r3, r2
 800b0c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f003 0308 	and.w	r3, r3, #8
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d010      	beq.n	800b0f0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	695a      	ldr	r2, [r3, #20]
 800b0d2:	4b34      	ldr	r3, [pc, #208]	@ (800b1a4 <HAL_RCC_ClockConfig+0x358>)
 800b0d4:	69db      	ldr	r3, [r3, #28]
 800b0d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d208      	bcs.n	800b0f0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b0de:	4b31      	ldr	r3, [pc, #196]	@ (800b1a4 <HAL_RCC_ClockConfig+0x358>)
 800b0e0:	69db      	ldr	r3, [r3, #28]
 800b0e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	695b      	ldr	r3, [r3, #20]
 800b0ea:	492e      	ldr	r1, [pc, #184]	@ (800b1a4 <HAL_RCC_ClockConfig+0x358>)
 800b0ec:	4313      	orrs	r3, r2
 800b0ee:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f003 0310 	and.w	r3, r3, #16
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d010      	beq.n	800b11e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	699a      	ldr	r2, [r3, #24]
 800b100:	4b28      	ldr	r3, [pc, #160]	@ (800b1a4 <HAL_RCC_ClockConfig+0x358>)
 800b102:	69db      	ldr	r3, [r3, #28]
 800b104:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b108:	429a      	cmp	r2, r3
 800b10a:	d208      	bcs.n	800b11e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b10c:	4b25      	ldr	r3, [pc, #148]	@ (800b1a4 <HAL_RCC_ClockConfig+0x358>)
 800b10e:	69db      	ldr	r3, [r3, #28]
 800b110:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	699b      	ldr	r3, [r3, #24]
 800b118:	4922      	ldr	r1, [pc, #136]	@ (800b1a4 <HAL_RCC_ClockConfig+0x358>)
 800b11a:	4313      	orrs	r3, r2
 800b11c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f003 0320 	and.w	r3, r3, #32
 800b126:	2b00      	cmp	r3, #0
 800b128:	d010      	beq.n	800b14c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	69da      	ldr	r2, [r3, #28]
 800b12e:	4b1d      	ldr	r3, [pc, #116]	@ (800b1a4 <HAL_RCC_ClockConfig+0x358>)
 800b130:	6a1b      	ldr	r3, [r3, #32]
 800b132:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b136:	429a      	cmp	r2, r3
 800b138:	d208      	bcs.n	800b14c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b13a:	4b1a      	ldr	r3, [pc, #104]	@ (800b1a4 <HAL_RCC_ClockConfig+0x358>)
 800b13c:	6a1b      	ldr	r3, [r3, #32]
 800b13e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	69db      	ldr	r3, [r3, #28]
 800b146:	4917      	ldr	r1, [pc, #92]	@ (800b1a4 <HAL_RCC_ClockConfig+0x358>)
 800b148:	4313      	orrs	r3, r2
 800b14a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b14c:	f000 f834 	bl	800b1b8 <HAL_RCC_GetSysClockFreq>
 800b150:	4602      	mov	r2, r0
 800b152:	4b14      	ldr	r3, [pc, #80]	@ (800b1a4 <HAL_RCC_ClockConfig+0x358>)
 800b154:	699b      	ldr	r3, [r3, #24]
 800b156:	0a1b      	lsrs	r3, r3, #8
 800b158:	f003 030f 	and.w	r3, r3, #15
 800b15c:	4912      	ldr	r1, [pc, #72]	@ (800b1a8 <HAL_RCC_ClockConfig+0x35c>)
 800b15e:	5ccb      	ldrb	r3, [r1, r3]
 800b160:	f003 031f 	and.w	r3, r3, #31
 800b164:	fa22 f303 	lsr.w	r3, r2, r3
 800b168:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b16a:	4b0e      	ldr	r3, [pc, #56]	@ (800b1a4 <HAL_RCC_ClockConfig+0x358>)
 800b16c:	699b      	ldr	r3, [r3, #24]
 800b16e:	f003 030f 	and.w	r3, r3, #15
 800b172:	4a0d      	ldr	r2, [pc, #52]	@ (800b1a8 <HAL_RCC_ClockConfig+0x35c>)
 800b174:	5cd3      	ldrb	r3, [r2, r3]
 800b176:	f003 031f 	and.w	r3, r3, #31
 800b17a:	693a      	ldr	r2, [r7, #16]
 800b17c:	fa22 f303 	lsr.w	r3, r2, r3
 800b180:	4a0a      	ldr	r2, [pc, #40]	@ (800b1ac <HAL_RCC_ClockConfig+0x360>)
 800b182:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b184:	4a0a      	ldr	r2, [pc, #40]	@ (800b1b0 <HAL_RCC_ClockConfig+0x364>)
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b18a:	4b0a      	ldr	r3, [pc, #40]	@ (800b1b4 <HAL_RCC_ClockConfig+0x368>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	4618      	mov	r0, r3
 800b190:	f7f8 ff88 	bl	80040a4 <HAL_InitTick>
 800b194:	4603      	mov	r3, r0
 800b196:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b198:	7bfb      	ldrb	r3, [r7, #15]
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3718      	adds	r7, #24
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
 800b1a2:	bf00      	nop
 800b1a4:	58024400 	.word	0x58024400
 800b1a8:	08011f0c 	.word	0x08011f0c
 800b1ac:	2400003c 	.word	0x2400003c
 800b1b0:	24000038 	.word	0x24000038
 800b1b4:	24000040 	.word	0x24000040

0800b1b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b089      	sub	sp, #36	@ 0x24
 800b1bc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b1be:	4bb3      	ldr	r3, [pc, #716]	@ (800b48c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b1c0:	691b      	ldr	r3, [r3, #16]
 800b1c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b1c6:	2b18      	cmp	r3, #24
 800b1c8:	f200 8155 	bhi.w	800b476 <HAL_RCC_GetSysClockFreq+0x2be>
 800b1cc:	a201      	add	r2, pc, #4	@ (adr r2, 800b1d4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b1ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1d2:	bf00      	nop
 800b1d4:	0800b239 	.word	0x0800b239
 800b1d8:	0800b477 	.word	0x0800b477
 800b1dc:	0800b477 	.word	0x0800b477
 800b1e0:	0800b477 	.word	0x0800b477
 800b1e4:	0800b477 	.word	0x0800b477
 800b1e8:	0800b477 	.word	0x0800b477
 800b1ec:	0800b477 	.word	0x0800b477
 800b1f0:	0800b477 	.word	0x0800b477
 800b1f4:	0800b25f 	.word	0x0800b25f
 800b1f8:	0800b477 	.word	0x0800b477
 800b1fc:	0800b477 	.word	0x0800b477
 800b200:	0800b477 	.word	0x0800b477
 800b204:	0800b477 	.word	0x0800b477
 800b208:	0800b477 	.word	0x0800b477
 800b20c:	0800b477 	.word	0x0800b477
 800b210:	0800b477 	.word	0x0800b477
 800b214:	0800b265 	.word	0x0800b265
 800b218:	0800b477 	.word	0x0800b477
 800b21c:	0800b477 	.word	0x0800b477
 800b220:	0800b477 	.word	0x0800b477
 800b224:	0800b477 	.word	0x0800b477
 800b228:	0800b477 	.word	0x0800b477
 800b22c:	0800b477 	.word	0x0800b477
 800b230:	0800b477 	.word	0x0800b477
 800b234:	0800b26b 	.word	0x0800b26b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b238:	4b94      	ldr	r3, [pc, #592]	@ (800b48c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f003 0320 	and.w	r3, r3, #32
 800b240:	2b00      	cmp	r3, #0
 800b242:	d009      	beq.n	800b258 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b244:	4b91      	ldr	r3, [pc, #580]	@ (800b48c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	08db      	lsrs	r3, r3, #3
 800b24a:	f003 0303 	and.w	r3, r3, #3
 800b24e:	4a90      	ldr	r2, [pc, #576]	@ (800b490 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b250:	fa22 f303 	lsr.w	r3, r2, r3
 800b254:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b256:	e111      	b.n	800b47c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b258:	4b8d      	ldr	r3, [pc, #564]	@ (800b490 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b25a:	61bb      	str	r3, [r7, #24]
      break;
 800b25c:	e10e      	b.n	800b47c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b25e:	4b8d      	ldr	r3, [pc, #564]	@ (800b494 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b260:	61bb      	str	r3, [r7, #24]
      break;
 800b262:	e10b      	b.n	800b47c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b264:	4b8c      	ldr	r3, [pc, #560]	@ (800b498 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b266:	61bb      	str	r3, [r7, #24]
      break;
 800b268:	e108      	b.n	800b47c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b26a:	4b88      	ldr	r3, [pc, #544]	@ (800b48c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b26c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b26e:	f003 0303 	and.w	r3, r3, #3
 800b272:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b274:	4b85      	ldr	r3, [pc, #532]	@ (800b48c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b278:	091b      	lsrs	r3, r3, #4
 800b27a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b27e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b280:	4b82      	ldr	r3, [pc, #520]	@ (800b48c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b284:	f003 0301 	and.w	r3, r3, #1
 800b288:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b28a:	4b80      	ldr	r3, [pc, #512]	@ (800b48c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b28c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b28e:	08db      	lsrs	r3, r3, #3
 800b290:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b294:	68fa      	ldr	r2, [r7, #12]
 800b296:	fb02 f303 	mul.w	r3, r2, r3
 800b29a:	ee07 3a90 	vmov	s15, r3
 800b29e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2a2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	f000 80e1 	beq.w	800b470 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	2b02      	cmp	r3, #2
 800b2b2:	f000 8083 	beq.w	800b3bc <HAL_RCC_GetSysClockFreq+0x204>
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	2b02      	cmp	r3, #2
 800b2ba:	f200 80a1 	bhi.w	800b400 <HAL_RCC_GetSysClockFreq+0x248>
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d003      	beq.n	800b2cc <HAL_RCC_GetSysClockFreq+0x114>
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	d056      	beq.n	800b378 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b2ca:	e099      	b.n	800b400 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2cc:	4b6f      	ldr	r3, [pc, #444]	@ (800b48c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f003 0320 	and.w	r3, r3, #32
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d02d      	beq.n	800b334 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b2d8:	4b6c      	ldr	r3, [pc, #432]	@ (800b48c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	08db      	lsrs	r3, r3, #3
 800b2de:	f003 0303 	and.w	r3, r3, #3
 800b2e2:	4a6b      	ldr	r2, [pc, #428]	@ (800b490 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b2e4:	fa22 f303 	lsr.w	r3, r2, r3
 800b2e8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	ee07 3a90 	vmov	s15, r3
 800b2f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	ee07 3a90 	vmov	s15, r3
 800b2fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b302:	4b62      	ldr	r3, [pc, #392]	@ (800b48c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b30a:	ee07 3a90 	vmov	s15, r3
 800b30e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b312:	ed97 6a02 	vldr	s12, [r7, #8]
 800b316:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800b49c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b31a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b31e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b322:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b32a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b32e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b332:	e087      	b.n	800b444 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	ee07 3a90 	vmov	s15, r3
 800b33a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b33e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800b4a0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b346:	4b51      	ldr	r3, [pc, #324]	@ (800b48c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b34a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b34e:	ee07 3a90 	vmov	s15, r3
 800b352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b356:	ed97 6a02 	vldr	s12, [r7, #8]
 800b35a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800b49c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b35e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b366:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b36a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b36e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b372:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b376:	e065      	b.n	800b444 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b378:	693b      	ldr	r3, [r7, #16]
 800b37a:	ee07 3a90 	vmov	s15, r3
 800b37e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b382:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800b4a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b38a:	4b40      	ldr	r3, [pc, #256]	@ (800b48c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b38c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b38e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b392:	ee07 3a90 	vmov	s15, r3
 800b396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b39a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b39e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800b49c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b3a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b3ba:	e043      	b.n	800b444 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	ee07 3a90 	vmov	s15, r3
 800b3c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3c6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800b4a8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b3ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3ce:	4b2f      	ldr	r3, [pc, #188]	@ (800b48c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3d6:	ee07 3a90 	vmov	s15, r3
 800b3da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3de:	ed97 6a02 	vldr	s12, [r7, #8]
 800b3e2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800b49c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b3e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b3fe:	e021      	b.n	800b444 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b400:	693b      	ldr	r3, [r7, #16]
 800b402:	ee07 3a90 	vmov	s15, r3
 800b406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b40a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800b4a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b40e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b412:	4b1e      	ldr	r3, [pc, #120]	@ (800b48c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b41a:	ee07 3a90 	vmov	s15, r3
 800b41e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b422:	ed97 6a02 	vldr	s12, [r7, #8]
 800b426:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800b49c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b42a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b42e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b432:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b43a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b43e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b442:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b444:	4b11      	ldr	r3, [pc, #68]	@ (800b48c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b448:	0a5b      	lsrs	r3, r3, #9
 800b44a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b44e:	3301      	adds	r3, #1
 800b450:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	ee07 3a90 	vmov	s15, r3
 800b458:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b45c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b460:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b464:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b468:	ee17 3a90 	vmov	r3, s15
 800b46c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b46e:	e005      	b.n	800b47c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b470:	2300      	movs	r3, #0
 800b472:	61bb      	str	r3, [r7, #24]
      break;
 800b474:	e002      	b.n	800b47c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b476:	4b07      	ldr	r3, [pc, #28]	@ (800b494 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b478:	61bb      	str	r3, [r7, #24]
      break;
 800b47a:	bf00      	nop
  }

  return sysclockfreq;
 800b47c:	69bb      	ldr	r3, [r7, #24]
}
 800b47e:	4618      	mov	r0, r3
 800b480:	3724      	adds	r7, #36	@ 0x24
 800b482:	46bd      	mov	sp, r7
 800b484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b488:	4770      	bx	lr
 800b48a:	bf00      	nop
 800b48c:	58024400 	.word	0x58024400
 800b490:	03d09000 	.word	0x03d09000
 800b494:	003d0900 	.word	0x003d0900
 800b498:	007a1200 	.word	0x007a1200
 800b49c:	46000000 	.word	0x46000000
 800b4a0:	4c742400 	.word	0x4c742400
 800b4a4:	4a742400 	.word	0x4a742400
 800b4a8:	4af42400 	.word	0x4af42400

0800b4ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b082      	sub	sp, #8
 800b4b0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b4b2:	f7ff fe81 	bl	800b1b8 <HAL_RCC_GetSysClockFreq>
 800b4b6:	4602      	mov	r2, r0
 800b4b8:	4b10      	ldr	r3, [pc, #64]	@ (800b4fc <HAL_RCC_GetHCLKFreq+0x50>)
 800b4ba:	699b      	ldr	r3, [r3, #24]
 800b4bc:	0a1b      	lsrs	r3, r3, #8
 800b4be:	f003 030f 	and.w	r3, r3, #15
 800b4c2:	490f      	ldr	r1, [pc, #60]	@ (800b500 <HAL_RCC_GetHCLKFreq+0x54>)
 800b4c4:	5ccb      	ldrb	r3, [r1, r3]
 800b4c6:	f003 031f 	and.w	r3, r3, #31
 800b4ca:	fa22 f303 	lsr.w	r3, r2, r3
 800b4ce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b4d0:	4b0a      	ldr	r3, [pc, #40]	@ (800b4fc <HAL_RCC_GetHCLKFreq+0x50>)
 800b4d2:	699b      	ldr	r3, [r3, #24]
 800b4d4:	f003 030f 	and.w	r3, r3, #15
 800b4d8:	4a09      	ldr	r2, [pc, #36]	@ (800b500 <HAL_RCC_GetHCLKFreq+0x54>)
 800b4da:	5cd3      	ldrb	r3, [r2, r3]
 800b4dc:	f003 031f 	and.w	r3, r3, #31
 800b4e0:	687a      	ldr	r2, [r7, #4]
 800b4e2:	fa22 f303 	lsr.w	r3, r2, r3
 800b4e6:	4a07      	ldr	r2, [pc, #28]	@ (800b504 <HAL_RCC_GetHCLKFreq+0x58>)
 800b4e8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b4ea:	4a07      	ldr	r2, [pc, #28]	@ (800b508 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b4f0:	4b04      	ldr	r3, [pc, #16]	@ (800b504 <HAL_RCC_GetHCLKFreq+0x58>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	3708      	adds	r7, #8
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}
 800b4fc:	58024400 	.word	0x58024400
 800b500:	08011f0c 	.word	0x08011f0c
 800b504:	2400003c 	.word	0x2400003c
 800b508:	24000038 	.word	0x24000038

0800b50c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b510:	f7ff ffcc 	bl	800b4ac <HAL_RCC_GetHCLKFreq>
 800b514:	4602      	mov	r2, r0
 800b516:	4b06      	ldr	r3, [pc, #24]	@ (800b530 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b518:	69db      	ldr	r3, [r3, #28]
 800b51a:	091b      	lsrs	r3, r3, #4
 800b51c:	f003 0307 	and.w	r3, r3, #7
 800b520:	4904      	ldr	r1, [pc, #16]	@ (800b534 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b522:	5ccb      	ldrb	r3, [r1, r3]
 800b524:	f003 031f 	and.w	r3, r3, #31
 800b528:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	bd80      	pop	{r7, pc}
 800b530:	58024400 	.word	0x58024400
 800b534:	08011f0c 	.word	0x08011f0c

0800b538 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b53c:	f7ff ffb6 	bl	800b4ac <HAL_RCC_GetHCLKFreq>
 800b540:	4602      	mov	r2, r0
 800b542:	4b06      	ldr	r3, [pc, #24]	@ (800b55c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b544:	69db      	ldr	r3, [r3, #28]
 800b546:	0a1b      	lsrs	r3, r3, #8
 800b548:	f003 0307 	and.w	r3, r3, #7
 800b54c:	4904      	ldr	r1, [pc, #16]	@ (800b560 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b54e:	5ccb      	ldrb	r3, [r1, r3]
 800b550:	f003 031f 	and.w	r3, r3, #31
 800b554:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b558:	4618      	mov	r0, r3
 800b55a:	bd80      	pop	{r7, pc}
 800b55c:	58024400 	.word	0x58024400
 800b560:	08011f0c 	.word	0x08011f0c

0800b564 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b564:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b568:	b0c6      	sub	sp, #280	@ 0x118
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b570:	2300      	movs	r3, #0
 800b572:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b576:	2300      	movs	r3, #0
 800b578:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b57c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b584:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800b588:	2500      	movs	r5, #0
 800b58a:	ea54 0305 	orrs.w	r3, r4, r5
 800b58e:	d049      	beq.n	800b624 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b590:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b594:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b596:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b59a:	d02f      	beq.n	800b5fc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b59c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b5a0:	d828      	bhi.n	800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b5a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b5a6:	d01a      	beq.n	800b5de <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b5a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b5ac:	d822      	bhi.n	800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d003      	beq.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b5b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b5b6:	d007      	beq.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b5b8:	e01c      	b.n	800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b5ba:	4bab      	ldr	r3, [pc, #684]	@ (800b868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b5bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5be:	4aaa      	ldr	r2, [pc, #680]	@ (800b868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b5c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b5c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b5c6:	e01a      	b.n	800b5fe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b5c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5cc:	3308      	adds	r3, #8
 800b5ce:	2102      	movs	r1, #2
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f002 fa49 	bl	800da68 <RCCEx_PLL2_Config>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b5dc:	e00f      	b.n	800b5fe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b5de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5e2:	3328      	adds	r3, #40	@ 0x28
 800b5e4:	2102      	movs	r1, #2
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f002 faf0 	bl	800dbcc <RCCEx_PLL3_Config>
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b5f2:	e004      	b.n	800b5fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b5fa:	e000      	b.n	800b5fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b5fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b602:	2b00      	cmp	r3, #0
 800b604:	d10a      	bne.n	800b61c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b606:	4b98      	ldr	r3, [pc, #608]	@ (800b868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b608:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b60a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b60e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b612:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b614:	4a94      	ldr	r2, [pc, #592]	@ (800b868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b616:	430b      	orrs	r3, r1
 800b618:	6513      	str	r3, [r2, #80]	@ 0x50
 800b61a:	e003      	b.n	800b624 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b61c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b620:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b624:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b62c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800b630:	f04f 0900 	mov.w	r9, #0
 800b634:	ea58 0309 	orrs.w	r3, r8, r9
 800b638:	d047      	beq.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b63a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b63e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b640:	2b04      	cmp	r3, #4
 800b642:	d82a      	bhi.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b644:	a201      	add	r2, pc, #4	@ (adr r2, 800b64c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b64a:	bf00      	nop
 800b64c:	0800b661 	.word	0x0800b661
 800b650:	0800b66f 	.word	0x0800b66f
 800b654:	0800b685 	.word	0x0800b685
 800b658:	0800b6a3 	.word	0x0800b6a3
 800b65c:	0800b6a3 	.word	0x0800b6a3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b660:	4b81      	ldr	r3, [pc, #516]	@ (800b868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b664:	4a80      	ldr	r2, [pc, #512]	@ (800b868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b666:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b66a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b66c:	e01a      	b.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b66e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b672:	3308      	adds	r3, #8
 800b674:	2100      	movs	r1, #0
 800b676:	4618      	mov	r0, r3
 800b678:	f002 f9f6 	bl	800da68 <RCCEx_PLL2_Config>
 800b67c:	4603      	mov	r3, r0
 800b67e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b682:	e00f      	b.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b688:	3328      	adds	r3, #40	@ 0x28
 800b68a:	2100      	movs	r1, #0
 800b68c:	4618      	mov	r0, r3
 800b68e:	f002 fa9d 	bl	800dbcc <RCCEx_PLL3_Config>
 800b692:	4603      	mov	r3, r0
 800b694:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b698:	e004      	b.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b69a:	2301      	movs	r3, #1
 800b69c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b6a0:	e000      	b.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b6a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d10a      	bne.n	800b6c2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b6ac:	4b6e      	ldr	r3, [pc, #440]	@ (800b868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b6ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b6b0:	f023 0107 	bic.w	r1, r3, #7
 800b6b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b6ba:	4a6b      	ldr	r2, [pc, #428]	@ (800b868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b6bc:	430b      	orrs	r3, r1
 800b6be:	6513      	str	r3, [r2, #80]	@ 0x50
 800b6c0:	e003      	b.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b6c6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b6ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d2:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800b6d6:	f04f 0b00 	mov.w	fp, #0
 800b6da:	ea5a 030b 	orrs.w	r3, sl, fp
 800b6de:	d05b      	beq.n	800b798 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b6e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b6e8:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800b6ec:	d03b      	beq.n	800b766 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800b6ee:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800b6f2:	d834      	bhi.n	800b75e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b6f4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b6f8:	d037      	beq.n	800b76a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800b6fa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b6fe:	d82e      	bhi.n	800b75e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b700:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b704:	d033      	beq.n	800b76e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800b706:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b70a:	d828      	bhi.n	800b75e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b70c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b710:	d01a      	beq.n	800b748 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800b712:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b716:	d822      	bhi.n	800b75e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d003      	beq.n	800b724 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800b71c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b720:	d007      	beq.n	800b732 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800b722:	e01c      	b.n	800b75e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b724:	4b50      	ldr	r3, [pc, #320]	@ (800b868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b728:	4a4f      	ldr	r2, [pc, #316]	@ (800b868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b72a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b72e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b730:	e01e      	b.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b732:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b736:	3308      	adds	r3, #8
 800b738:	2100      	movs	r1, #0
 800b73a:	4618      	mov	r0, r3
 800b73c:	f002 f994 	bl	800da68 <RCCEx_PLL2_Config>
 800b740:	4603      	mov	r3, r0
 800b742:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b746:	e013      	b.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b748:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b74c:	3328      	adds	r3, #40	@ 0x28
 800b74e:	2100      	movs	r1, #0
 800b750:	4618      	mov	r0, r3
 800b752:	f002 fa3b 	bl	800dbcc <RCCEx_PLL3_Config>
 800b756:	4603      	mov	r3, r0
 800b758:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b75c:	e008      	b.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b75e:	2301      	movs	r3, #1
 800b760:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b764:	e004      	b.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b766:	bf00      	nop
 800b768:	e002      	b.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b76a:	bf00      	nop
 800b76c:	e000      	b.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b76e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b770:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b774:	2b00      	cmp	r3, #0
 800b776:	d10b      	bne.n	800b790 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b778:	4b3b      	ldr	r3, [pc, #236]	@ (800b868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b77a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b77c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800b780:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b784:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b788:	4a37      	ldr	r2, [pc, #220]	@ (800b868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b78a:	430b      	orrs	r3, r1
 800b78c:	6593      	str	r3, [r2, #88]	@ 0x58
 800b78e:	e003      	b.n	800b798 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b790:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b794:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b798:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800b7a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b7ae:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800b7b2:	460b      	mov	r3, r1
 800b7b4:	4313      	orrs	r3, r2
 800b7b6:	d05d      	beq.n	800b874 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b7b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b7c0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800b7c4:	d03b      	beq.n	800b83e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800b7c6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800b7ca:	d834      	bhi.n	800b836 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b7cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b7d0:	d037      	beq.n	800b842 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800b7d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b7d6:	d82e      	bhi.n	800b836 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b7d8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b7dc:	d033      	beq.n	800b846 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800b7de:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b7e2:	d828      	bhi.n	800b836 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b7e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b7e8:	d01a      	beq.n	800b820 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800b7ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b7ee:	d822      	bhi.n	800b836 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d003      	beq.n	800b7fc <HAL_RCCEx_PeriphCLKConfig+0x298>
 800b7f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b7f8:	d007      	beq.n	800b80a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800b7fa:	e01c      	b.n	800b836 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7fc:	4b1a      	ldr	r3, [pc, #104]	@ (800b868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b7fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b800:	4a19      	ldr	r2, [pc, #100]	@ (800b868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b802:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b806:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b808:	e01e      	b.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b80a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b80e:	3308      	adds	r3, #8
 800b810:	2100      	movs	r1, #0
 800b812:	4618      	mov	r0, r3
 800b814:	f002 f928 	bl	800da68 <RCCEx_PLL2_Config>
 800b818:	4603      	mov	r3, r0
 800b81a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b81e:	e013      	b.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b820:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b824:	3328      	adds	r3, #40	@ 0x28
 800b826:	2100      	movs	r1, #0
 800b828:	4618      	mov	r0, r3
 800b82a:	f002 f9cf 	bl	800dbcc <RCCEx_PLL3_Config>
 800b82e:	4603      	mov	r3, r0
 800b830:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b834:	e008      	b.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b836:	2301      	movs	r3, #1
 800b838:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b83c:	e004      	b.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b83e:	bf00      	nop
 800b840:	e002      	b.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b842:	bf00      	nop
 800b844:	e000      	b.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b846:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b848:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d10d      	bne.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b850:	4b05      	ldr	r3, [pc, #20]	@ (800b868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b854:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800b858:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b85c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b860:	4a01      	ldr	r2, [pc, #4]	@ (800b868 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b862:	430b      	orrs	r3, r1
 800b864:	6593      	str	r3, [r2, #88]	@ 0x58
 800b866:	e005      	b.n	800b874 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800b868:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b86c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b870:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b874:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b87c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800b880:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b884:	2300      	movs	r3, #0
 800b886:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b88a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800b88e:	460b      	mov	r3, r1
 800b890:	4313      	orrs	r3, r2
 800b892:	d03a      	beq.n	800b90a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800b894:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b89a:	2b30      	cmp	r3, #48	@ 0x30
 800b89c:	d01f      	beq.n	800b8de <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800b89e:	2b30      	cmp	r3, #48	@ 0x30
 800b8a0:	d819      	bhi.n	800b8d6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800b8a2:	2b20      	cmp	r3, #32
 800b8a4:	d00c      	beq.n	800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800b8a6:	2b20      	cmp	r3, #32
 800b8a8:	d815      	bhi.n	800b8d6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d019      	beq.n	800b8e2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b8ae:	2b10      	cmp	r3, #16
 800b8b0:	d111      	bne.n	800b8d6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8b2:	4baa      	ldr	r3, [pc, #680]	@ (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b8b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8b6:	4aa9      	ldr	r2, [pc, #676]	@ (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b8b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b8bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b8be:	e011      	b.n	800b8e4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b8c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8c4:	3308      	adds	r3, #8
 800b8c6:	2102      	movs	r1, #2
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f002 f8cd 	bl	800da68 <RCCEx_PLL2_Config>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b8d4:	e006      	b.n	800b8e4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b8dc:	e002      	b.n	800b8e4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800b8de:	bf00      	nop
 800b8e0:	e000      	b.n	800b8e4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800b8e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d10a      	bne.n	800b902 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b8ec:	4b9b      	ldr	r3, [pc, #620]	@ (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b8ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b8f0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800b8f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b8fa:	4a98      	ldr	r2, [pc, #608]	@ (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b8fc:	430b      	orrs	r3, r1
 800b8fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b900:	e003      	b.n	800b90a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b902:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b906:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b90a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b912:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800b916:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b91a:	2300      	movs	r3, #0
 800b91c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b920:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800b924:	460b      	mov	r3, r1
 800b926:	4313      	orrs	r3, r2
 800b928:	d051      	beq.n	800b9ce <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b92a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b92e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b930:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b934:	d035      	beq.n	800b9a2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800b936:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b93a:	d82e      	bhi.n	800b99a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b93c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b940:	d031      	beq.n	800b9a6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800b942:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b946:	d828      	bhi.n	800b99a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b948:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b94c:	d01a      	beq.n	800b984 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800b94e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b952:	d822      	bhi.n	800b99a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b954:	2b00      	cmp	r3, #0
 800b956:	d003      	beq.n	800b960 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800b958:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b95c:	d007      	beq.n	800b96e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800b95e:	e01c      	b.n	800b99a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b960:	4b7e      	ldr	r3, [pc, #504]	@ (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b964:	4a7d      	ldr	r2, [pc, #500]	@ (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b966:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b96a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b96c:	e01c      	b.n	800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b96e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b972:	3308      	adds	r3, #8
 800b974:	2100      	movs	r1, #0
 800b976:	4618      	mov	r0, r3
 800b978:	f002 f876 	bl	800da68 <RCCEx_PLL2_Config>
 800b97c:	4603      	mov	r3, r0
 800b97e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b982:	e011      	b.n	800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b984:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b988:	3328      	adds	r3, #40	@ 0x28
 800b98a:	2100      	movs	r1, #0
 800b98c:	4618      	mov	r0, r3
 800b98e:	f002 f91d 	bl	800dbcc <RCCEx_PLL3_Config>
 800b992:	4603      	mov	r3, r0
 800b994:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b998:	e006      	b.n	800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b99a:	2301      	movs	r3, #1
 800b99c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b9a0:	e002      	b.n	800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800b9a2:	bf00      	nop
 800b9a4:	e000      	b.n	800b9a8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800b9a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d10a      	bne.n	800b9c6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b9b0:	4b6a      	ldr	r3, [pc, #424]	@ (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b9b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9b4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800b9b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b9be:	4a67      	ldr	r2, [pc, #412]	@ (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b9c0:	430b      	orrs	r3, r1
 800b9c2:	6513      	str	r3, [r2, #80]	@ 0x50
 800b9c4:	e003      	b.n	800b9ce <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b9ca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b9ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800b9da:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b9de:	2300      	movs	r3, #0
 800b9e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b9e4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800b9e8:	460b      	mov	r3, r1
 800b9ea:	4313      	orrs	r3, r2
 800b9ec:	d053      	beq.n	800ba96 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b9ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b9f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b9f8:	d033      	beq.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800b9fa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b9fe:	d82c      	bhi.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ba00:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ba04:	d02f      	beq.n	800ba66 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800ba06:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ba0a:	d826      	bhi.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ba0c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ba10:	d02b      	beq.n	800ba6a <HAL_RCCEx_PeriphCLKConfig+0x506>
 800ba12:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ba16:	d820      	bhi.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ba18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba1c:	d012      	beq.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800ba1e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba22:	d81a      	bhi.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d022      	beq.n	800ba6e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800ba28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba2c:	d115      	bne.n	800ba5a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ba2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba32:	3308      	adds	r3, #8
 800ba34:	2101      	movs	r1, #1
 800ba36:	4618      	mov	r0, r3
 800ba38:	f002 f816 	bl	800da68 <RCCEx_PLL2_Config>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ba42:	e015      	b.n	800ba70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba48:	3328      	adds	r3, #40	@ 0x28
 800ba4a:	2101      	movs	r1, #1
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f002 f8bd 	bl	800dbcc <RCCEx_PLL3_Config>
 800ba52:	4603      	mov	r3, r0
 800ba54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ba58:	e00a      	b.n	800ba70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ba60:	e006      	b.n	800ba70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ba62:	bf00      	nop
 800ba64:	e004      	b.n	800ba70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ba66:	bf00      	nop
 800ba68:	e002      	b.n	800ba70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ba6a:	bf00      	nop
 800ba6c:	e000      	b.n	800ba70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ba6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d10a      	bne.n	800ba8e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ba78:	4b38      	ldr	r3, [pc, #224]	@ (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba7c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800ba80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ba86:	4a35      	ldr	r2, [pc, #212]	@ (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba88:	430b      	orrs	r3, r1
 800ba8a:	6513      	str	r3, [r2, #80]	@ 0x50
 800ba8c:	e003      	b.n	800ba96 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ba92:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ba96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba9e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800baa2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800baa6:	2300      	movs	r3, #0
 800baa8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800baac:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800bab0:	460b      	mov	r3, r1
 800bab2:	4313      	orrs	r3, r2
 800bab4:	d058      	beq.n	800bb68 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800bab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800baba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800babe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bac2:	d033      	beq.n	800bb2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800bac4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bac8:	d82c      	bhi.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800baca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bace:	d02f      	beq.n	800bb30 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800bad0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bad4:	d826      	bhi.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bad6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bada:	d02b      	beq.n	800bb34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800badc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bae0:	d820      	bhi.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bae2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bae6:	d012      	beq.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800bae8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800baec:	d81a      	bhi.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d022      	beq.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800baf2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800baf6:	d115      	bne.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800baf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bafc:	3308      	adds	r3, #8
 800bafe:	2101      	movs	r1, #1
 800bb00:	4618      	mov	r0, r3
 800bb02:	f001 ffb1 	bl	800da68 <RCCEx_PLL2_Config>
 800bb06:	4603      	mov	r3, r0
 800bb08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bb0c:	e015      	b.n	800bb3a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bb0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb12:	3328      	adds	r3, #40	@ 0x28
 800bb14:	2101      	movs	r1, #1
 800bb16:	4618      	mov	r0, r3
 800bb18:	f002 f858 	bl	800dbcc <RCCEx_PLL3_Config>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bb22:	e00a      	b.n	800bb3a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800bb24:	2301      	movs	r3, #1
 800bb26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bb2a:	e006      	b.n	800bb3a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bb2c:	bf00      	nop
 800bb2e:	e004      	b.n	800bb3a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bb30:	bf00      	nop
 800bb32:	e002      	b.n	800bb3a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bb34:	bf00      	nop
 800bb36:	e000      	b.n	800bb3a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bb38:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d10e      	bne.n	800bb60 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bb42:	4b06      	ldr	r3, [pc, #24]	@ (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bb44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb46:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800bb4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800bb52:	4a02      	ldr	r2, [pc, #8]	@ (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bb54:	430b      	orrs	r3, r1
 800bb56:	6593      	str	r3, [r2, #88]	@ 0x58
 800bb58:	e006      	b.n	800bb68 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800bb5a:	bf00      	nop
 800bb5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bb64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bb68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb70:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800bb74:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bb78:	2300      	movs	r3, #0
 800bb7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800bb7e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800bb82:	460b      	mov	r3, r1
 800bb84:	4313      	orrs	r3, r2
 800bb86:	d037      	beq.n	800bbf8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800bb88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bb92:	d00e      	beq.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800bb94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bb98:	d816      	bhi.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d018      	beq.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800bb9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bba2:	d111      	bne.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bba4:	4bc4      	ldr	r3, [pc, #784]	@ (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bba8:	4ac3      	ldr	r2, [pc, #780]	@ (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bbaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bbae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bbb0:	e00f      	b.n	800bbd2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bbb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbb6:	3308      	adds	r3, #8
 800bbb8:	2101      	movs	r1, #1
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f001 ff54 	bl	800da68 <RCCEx_PLL2_Config>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bbc6:	e004      	b.n	800bbd2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bbc8:	2301      	movs	r3, #1
 800bbca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bbce:	e000      	b.n	800bbd2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800bbd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbd2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d10a      	bne.n	800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bbda:	4bb7      	ldr	r3, [pc, #732]	@ (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bbdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bbde:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800bbe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbe6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bbe8:	4ab3      	ldr	r2, [pc, #716]	@ (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bbea:	430b      	orrs	r3, r1
 800bbec:	6513      	str	r3, [r2, #80]	@ 0x50
 800bbee:	e003      	b.n	800bbf8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbf0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bbf4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bbf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc00:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800bc04:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bc08:	2300      	movs	r3, #0
 800bc0a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800bc0e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800bc12:	460b      	mov	r3, r1
 800bc14:	4313      	orrs	r3, r2
 800bc16:	d039      	beq.n	800bc8c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800bc18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bc1e:	2b03      	cmp	r3, #3
 800bc20:	d81c      	bhi.n	800bc5c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800bc22:	a201      	add	r2, pc, #4	@ (adr r2, 800bc28 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800bc24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc28:	0800bc65 	.word	0x0800bc65
 800bc2c:	0800bc39 	.word	0x0800bc39
 800bc30:	0800bc47 	.word	0x0800bc47
 800bc34:	0800bc65 	.word	0x0800bc65
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc38:	4b9f      	ldr	r3, [pc, #636]	@ (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc3c:	4a9e      	ldr	r2, [pc, #632]	@ (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bc42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bc44:	e00f      	b.n	800bc66 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bc46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc4a:	3308      	adds	r3, #8
 800bc4c:	2102      	movs	r1, #2
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f001 ff0a 	bl	800da68 <RCCEx_PLL2_Config>
 800bc54:	4603      	mov	r3, r0
 800bc56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bc5a:	e004      	b.n	800bc66 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bc62:	e000      	b.n	800bc66 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800bc64:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc66:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d10a      	bne.n	800bc84 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bc6e:	4b92      	ldr	r3, [pc, #584]	@ (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc72:	f023 0103 	bic.w	r1, r3, #3
 800bc76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bc7c:	4a8e      	ldr	r2, [pc, #568]	@ (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc7e:	430b      	orrs	r3, r1
 800bc80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800bc82:	e003      	b.n	800bc8c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bc88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bc8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc94:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800bc98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bca2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800bca6:	460b      	mov	r3, r1
 800bca8:	4313      	orrs	r3, r2
 800bcaa:	f000 8099 	beq.w	800bde0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bcae:	4b83      	ldr	r3, [pc, #524]	@ (800bebc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	4a82      	ldr	r2, [pc, #520]	@ (800bebc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bcb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bcb8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bcba:	f7f8 fa3d 	bl	8004138 <HAL_GetTick>
 800bcbe:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bcc2:	e00b      	b.n	800bcdc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bcc4:	f7f8 fa38 	bl	8004138 <HAL_GetTick>
 800bcc8:	4602      	mov	r2, r0
 800bcca:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800bcce:	1ad3      	subs	r3, r2, r3
 800bcd0:	2b64      	cmp	r3, #100	@ 0x64
 800bcd2:	d903      	bls.n	800bcdc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800bcd4:	2303      	movs	r3, #3
 800bcd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bcda:	e005      	b.n	800bce8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bcdc:	4b77      	ldr	r3, [pc, #476]	@ (800bebc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d0ed      	beq.n	800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800bce8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d173      	bne.n	800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bcf0:	4b71      	ldr	r3, [pc, #452]	@ (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bcf2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800bcf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcf8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bcfc:	4053      	eors	r3, r2
 800bcfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d015      	beq.n	800bd32 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bd06:	4b6c      	ldr	r3, [pc, #432]	@ (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bd0e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bd12:	4b69      	ldr	r3, [pc, #420]	@ (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd16:	4a68      	ldr	r2, [pc, #416]	@ (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bd1c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bd1e:	4b66      	ldr	r3, [pc, #408]	@ (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd22:	4a65      	ldr	r2, [pc, #404]	@ (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bd28:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bd2a:	4a63      	ldr	r2, [pc, #396]	@ (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd30:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bd32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bd3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bd3e:	d118      	bne.n	800bd72 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd40:	f7f8 f9fa 	bl	8004138 <HAL_GetTick>
 800bd44:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bd48:	e00d      	b.n	800bd66 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bd4a:	f7f8 f9f5 	bl	8004138 <HAL_GetTick>
 800bd4e:	4602      	mov	r2, r0
 800bd50:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800bd54:	1ad2      	subs	r2, r2, r3
 800bd56:	f241 3388 	movw	r3, #5000	@ 0x1388
 800bd5a:	429a      	cmp	r2, r3
 800bd5c:	d903      	bls.n	800bd66 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800bd5e:	2303      	movs	r3, #3
 800bd60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800bd64:	e005      	b.n	800bd72 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bd66:	4b54      	ldr	r3, [pc, #336]	@ (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd6a:	f003 0302 	and.w	r3, r3, #2
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d0eb      	beq.n	800bd4a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800bd72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d129      	bne.n	800bdce <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bd7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bd82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bd86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bd8a:	d10e      	bne.n	800bdaa <HAL_RCCEx_PeriphCLKConfig+0x846>
 800bd8c:	4b4a      	ldr	r3, [pc, #296]	@ (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd8e:	691b      	ldr	r3, [r3, #16]
 800bd90:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800bd94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bd9c:	091a      	lsrs	r2, r3, #4
 800bd9e:	4b48      	ldr	r3, [pc, #288]	@ (800bec0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800bda0:	4013      	ands	r3, r2
 800bda2:	4a45      	ldr	r2, [pc, #276]	@ (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bda4:	430b      	orrs	r3, r1
 800bda6:	6113      	str	r3, [r2, #16]
 800bda8:	e005      	b.n	800bdb6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800bdaa:	4b43      	ldr	r3, [pc, #268]	@ (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdac:	691b      	ldr	r3, [r3, #16]
 800bdae:	4a42      	ldr	r2, [pc, #264]	@ (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdb0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800bdb4:	6113      	str	r3, [r2, #16]
 800bdb6:	4b40      	ldr	r3, [pc, #256]	@ (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdb8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800bdba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdbe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bdc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bdc6:	4a3c      	ldr	r2, [pc, #240]	@ (800beb8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdc8:	430b      	orrs	r3, r1
 800bdca:	6713      	str	r3, [r2, #112]	@ 0x70
 800bdcc:	e008      	b.n	800bde0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bdce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bdd2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800bdd6:	e003      	b.n	800bde0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdd8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bddc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bde0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bde4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde8:	f002 0301 	and.w	r3, r2, #1
 800bdec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800bdf6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800bdfa:	460b      	mov	r3, r1
 800bdfc:	4313      	orrs	r3, r2
 800bdfe:	f000 808f 	beq.w	800bf20 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800be02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be06:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800be08:	2b28      	cmp	r3, #40	@ 0x28
 800be0a:	d871      	bhi.n	800bef0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800be0c:	a201      	add	r2, pc, #4	@ (adr r2, 800be14 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800be0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be12:	bf00      	nop
 800be14:	0800bef9 	.word	0x0800bef9
 800be18:	0800bef1 	.word	0x0800bef1
 800be1c:	0800bef1 	.word	0x0800bef1
 800be20:	0800bef1 	.word	0x0800bef1
 800be24:	0800bef1 	.word	0x0800bef1
 800be28:	0800bef1 	.word	0x0800bef1
 800be2c:	0800bef1 	.word	0x0800bef1
 800be30:	0800bef1 	.word	0x0800bef1
 800be34:	0800bec5 	.word	0x0800bec5
 800be38:	0800bef1 	.word	0x0800bef1
 800be3c:	0800bef1 	.word	0x0800bef1
 800be40:	0800bef1 	.word	0x0800bef1
 800be44:	0800bef1 	.word	0x0800bef1
 800be48:	0800bef1 	.word	0x0800bef1
 800be4c:	0800bef1 	.word	0x0800bef1
 800be50:	0800bef1 	.word	0x0800bef1
 800be54:	0800bedb 	.word	0x0800bedb
 800be58:	0800bef1 	.word	0x0800bef1
 800be5c:	0800bef1 	.word	0x0800bef1
 800be60:	0800bef1 	.word	0x0800bef1
 800be64:	0800bef1 	.word	0x0800bef1
 800be68:	0800bef1 	.word	0x0800bef1
 800be6c:	0800bef1 	.word	0x0800bef1
 800be70:	0800bef1 	.word	0x0800bef1
 800be74:	0800bef9 	.word	0x0800bef9
 800be78:	0800bef1 	.word	0x0800bef1
 800be7c:	0800bef1 	.word	0x0800bef1
 800be80:	0800bef1 	.word	0x0800bef1
 800be84:	0800bef1 	.word	0x0800bef1
 800be88:	0800bef1 	.word	0x0800bef1
 800be8c:	0800bef1 	.word	0x0800bef1
 800be90:	0800bef1 	.word	0x0800bef1
 800be94:	0800bef9 	.word	0x0800bef9
 800be98:	0800bef1 	.word	0x0800bef1
 800be9c:	0800bef1 	.word	0x0800bef1
 800bea0:	0800bef1 	.word	0x0800bef1
 800bea4:	0800bef1 	.word	0x0800bef1
 800bea8:	0800bef1 	.word	0x0800bef1
 800beac:	0800bef1 	.word	0x0800bef1
 800beb0:	0800bef1 	.word	0x0800bef1
 800beb4:	0800bef9 	.word	0x0800bef9
 800beb8:	58024400 	.word	0x58024400
 800bebc:	58024800 	.word	0x58024800
 800bec0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bec8:	3308      	adds	r3, #8
 800beca:	2101      	movs	r1, #1
 800becc:	4618      	mov	r0, r3
 800bece:	f001 fdcb 	bl	800da68 <RCCEx_PLL2_Config>
 800bed2:	4603      	mov	r3, r0
 800bed4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bed8:	e00f      	b.n	800befa <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800beda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bede:	3328      	adds	r3, #40	@ 0x28
 800bee0:	2101      	movs	r1, #1
 800bee2:	4618      	mov	r0, r3
 800bee4:	f001 fe72 	bl	800dbcc <RCCEx_PLL3_Config>
 800bee8:	4603      	mov	r3, r0
 800beea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800beee:	e004      	b.n	800befa <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bef0:	2301      	movs	r3, #1
 800bef2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bef6:	e000      	b.n	800befa <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800bef8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800befa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d10a      	bne.n	800bf18 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bf02:	4bbf      	ldr	r3, [pc, #764]	@ (800c200 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bf04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf06:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800bf0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf0e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bf10:	4abb      	ldr	r2, [pc, #748]	@ (800c200 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bf12:	430b      	orrs	r3, r1
 800bf14:	6553      	str	r3, [r2, #84]	@ 0x54
 800bf16:	e003      	b.n	800bf20 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bf1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bf20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf28:	f002 0302 	and.w	r3, r2, #2
 800bf2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bf30:	2300      	movs	r3, #0
 800bf32:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bf36:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800bf3a:	460b      	mov	r3, r1
 800bf3c:	4313      	orrs	r3, r2
 800bf3e:	d041      	beq.n	800bfc4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800bf40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf46:	2b05      	cmp	r3, #5
 800bf48:	d824      	bhi.n	800bf94 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800bf4a:	a201      	add	r2, pc, #4	@ (adr r2, 800bf50 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800bf4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf50:	0800bf9d 	.word	0x0800bf9d
 800bf54:	0800bf69 	.word	0x0800bf69
 800bf58:	0800bf7f 	.word	0x0800bf7f
 800bf5c:	0800bf9d 	.word	0x0800bf9d
 800bf60:	0800bf9d 	.word	0x0800bf9d
 800bf64:	0800bf9d 	.word	0x0800bf9d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bf68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf6c:	3308      	adds	r3, #8
 800bf6e:	2101      	movs	r1, #1
 800bf70:	4618      	mov	r0, r3
 800bf72:	f001 fd79 	bl	800da68 <RCCEx_PLL2_Config>
 800bf76:	4603      	mov	r3, r0
 800bf78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bf7c:	e00f      	b.n	800bf9e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bf7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf82:	3328      	adds	r3, #40	@ 0x28
 800bf84:	2101      	movs	r1, #1
 800bf86:	4618      	mov	r0, r3
 800bf88:	f001 fe20 	bl	800dbcc <RCCEx_PLL3_Config>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bf92:	e004      	b.n	800bf9e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf94:	2301      	movs	r3, #1
 800bf96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bf9a:	e000      	b.n	800bf9e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800bf9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d10a      	bne.n	800bfbc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800bfa6:	4b96      	ldr	r3, [pc, #600]	@ (800c200 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bfa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfaa:	f023 0107 	bic.w	r1, r3, #7
 800bfae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bfb4:	4a92      	ldr	r2, [pc, #584]	@ (800c200 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bfb6:	430b      	orrs	r3, r1
 800bfb8:	6553      	str	r3, [r2, #84]	@ 0x54
 800bfba:	e003      	b.n	800bfc4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bfc0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bfc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfcc:	f002 0304 	and.w	r3, r2, #4
 800bfd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bfda:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800bfde:	460b      	mov	r3, r1
 800bfe0:	4313      	orrs	r3, r2
 800bfe2:	d044      	beq.n	800c06e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800bfe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bfec:	2b05      	cmp	r3, #5
 800bfee:	d825      	bhi.n	800c03c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800bff0:	a201      	add	r2, pc, #4	@ (adr r2, 800bff8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800bff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bff6:	bf00      	nop
 800bff8:	0800c045 	.word	0x0800c045
 800bffc:	0800c011 	.word	0x0800c011
 800c000:	0800c027 	.word	0x0800c027
 800c004:	0800c045 	.word	0x0800c045
 800c008:	0800c045 	.word	0x0800c045
 800c00c:	0800c045 	.word	0x0800c045
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c010:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c014:	3308      	adds	r3, #8
 800c016:	2101      	movs	r1, #1
 800c018:	4618      	mov	r0, r3
 800c01a:	f001 fd25 	bl	800da68 <RCCEx_PLL2_Config>
 800c01e:	4603      	mov	r3, r0
 800c020:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c024:	e00f      	b.n	800c046 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c026:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c02a:	3328      	adds	r3, #40	@ 0x28
 800c02c:	2101      	movs	r1, #1
 800c02e:	4618      	mov	r0, r3
 800c030:	f001 fdcc 	bl	800dbcc <RCCEx_PLL3_Config>
 800c034:	4603      	mov	r3, r0
 800c036:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c03a:	e004      	b.n	800c046 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c03c:	2301      	movs	r3, #1
 800c03e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c042:	e000      	b.n	800c046 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800c044:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c046:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d10b      	bne.n	800c066 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c04e:	4b6c      	ldr	r3, [pc, #432]	@ (800c200 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c052:	f023 0107 	bic.w	r1, r3, #7
 800c056:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c05a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c05e:	4a68      	ldr	r2, [pc, #416]	@ (800c200 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c060:	430b      	orrs	r3, r1
 800c062:	6593      	str	r3, [r2, #88]	@ 0x58
 800c064:	e003      	b.n	800c06e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c066:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c06a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c06e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c076:	f002 0320 	and.w	r3, r2, #32
 800c07a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c07e:	2300      	movs	r3, #0
 800c080:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c084:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800c088:	460b      	mov	r3, r1
 800c08a:	4313      	orrs	r3, r2
 800c08c:	d055      	beq.n	800c13a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c08e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c092:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c096:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c09a:	d033      	beq.n	800c104 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800c09c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c0a0:	d82c      	bhi.n	800c0fc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c0a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0a6:	d02f      	beq.n	800c108 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800c0a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0ac:	d826      	bhi.n	800c0fc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c0ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c0b2:	d02b      	beq.n	800c10c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800c0b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c0b8:	d820      	bhi.n	800c0fc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c0ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c0be:	d012      	beq.n	800c0e6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800c0c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c0c4:	d81a      	bhi.n	800c0fc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d022      	beq.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c0ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c0ce:	d115      	bne.n	800c0fc <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c0d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0d4:	3308      	adds	r3, #8
 800c0d6:	2100      	movs	r1, #0
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f001 fcc5 	bl	800da68 <RCCEx_PLL2_Config>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c0e4:	e015      	b.n	800c112 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c0e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0ea:	3328      	adds	r3, #40	@ 0x28
 800c0ec:	2102      	movs	r1, #2
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f001 fd6c 	bl	800dbcc <RCCEx_PLL3_Config>
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c0fa:	e00a      	b.n	800c112 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c102:	e006      	b.n	800c112 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c104:	bf00      	nop
 800c106:	e004      	b.n	800c112 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c108:	bf00      	nop
 800c10a:	e002      	b.n	800c112 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c10c:	bf00      	nop
 800c10e:	e000      	b.n	800c112 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c110:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c112:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c116:	2b00      	cmp	r3, #0
 800c118:	d10b      	bne.n	800c132 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c11a:	4b39      	ldr	r3, [pc, #228]	@ (800c200 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c11c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c11e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c126:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c12a:	4a35      	ldr	r2, [pc, #212]	@ (800c200 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c12c:	430b      	orrs	r3, r1
 800c12e:	6553      	str	r3, [r2, #84]	@ 0x54
 800c130:	e003      	b.n	800c13a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c132:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c136:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c13a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c142:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800c146:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c14a:	2300      	movs	r3, #0
 800c14c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c150:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800c154:	460b      	mov	r3, r1
 800c156:	4313      	orrs	r3, r2
 800c158:	d058      	beq.n	800c20c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c15a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c15e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c162:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c166:	d033      	beq.n	800c1d0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800c168:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c16c:	d82c      	bhi.n	800c1c8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c16e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c172:	d02f      	beq.n	800c1d4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c174:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c178:	d826      	bhi.n	800c1c8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c17a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c17e:	d02b      	beq.n	800c1d8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c180:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c184:	d820      	bhi.n	800c1c8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c186:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c18a:	d012      	beq.n	800c1b2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800c18c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c190:	d81a      	bhi.n	800c1c8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c192:	2b00      	cmp	r3, #0
 800c194:	d022      	beq.n	800c1dc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c196:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c19a:	d115      	bne.n	800c1c8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c19c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1a0:	3308      	adds	r3, #8
 800c1a2:	2100      	movs	r1, #0
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	f001 fc5f 	bl	800da68 <RCCEx_PLL2_Config>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c1b0:	e015      	b.n	800c1de <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c1b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1b6:	3328      	adds	r3, #40	@ 0x28
 800c1b8:	2102      	movs	r1, #2
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f001 fd06 	bl	800dbcc <RCCEx_PLL3_Config>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c1c6:	e00a      	b.n	800c1de <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c1ce:	e006      	b.n	800c1de <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c1d0:	bf00      	nop
 800c1d2:	e004      	b.n	800c1de <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c1d4:	bf00      	nop
 800c1d6:	e002      	b.n	800c1de <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c1d8:	bf00      	nop
 800c1da:	e000      	b.n	800c1de <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c1dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d10e      	bne.n	800c204 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c1e6:	4b06      	ldr	r3, [pc, #24]	@ (800c200 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c1e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c1ea:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800c1ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c1f6:	4a02      	ldr	r2, [pc, #8]	@ (800c200 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c1f8:	430b      	orrs	r3, r1
 800c1fa:	6593      	str	r3, [r2, #88]	@ 0x58
 800c1fc:	e006      	b.n	800c20c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800c1fe:	bf00      	nop
 800c200:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c204:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c208:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c20c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c214:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800c218:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c21c:	2300      	movs	r3, #0
 800c21e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c222:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800c226:	460b      	mov	r3, r1
 800c228:	4313      	orrs	r3, r2
 800c22a:	d055      	beq.n	800c2d8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c22c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c230:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c234:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c238:	d033      	beq.n	800c2a2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800c23a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c23e:	d82c      	bhi.n	800c29a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c240:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c244:	d02f      	beq.n	800c2a6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c246:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c24a:	d826      	bhi.n	800c29a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c24c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c250:	d02b      	beq.n	800c2aa <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c252:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c256:	d820      	bhi.n	800c29a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c258:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c25c:	d012      	beq.n	800c284 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800c25e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c262:	d81a      	bhi.n	800c29a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c264:	2b00      	cmp	r3, #0
 800c266:	d022      	beq.n	800c2ae <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c268:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c26c:	d115      	bne.n	800c29a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c26e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c272:	3308      	adds	r3, #8
 800c274:	2100      	movs	r1, #0
 800c276:	4618      	mov	r0, r3
 800c278:	f001 fbf6 	bl	800da68 <RCCEx_PLL2_Config>
 800c27c:	4603      	mov	r3, r0
 800c27e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c282:	e015      	b.n	800c2b0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c284:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c288:	3328      	adds	r3, #40	@ 0x28
 800c28a:	2102      	movs	r1, #2
 800c28c:	4618      	mov	r0, r3
 800c28e:	f001 fc9d 	bl	800dbcc <RCCEx_PLL3_Config>
 800c292:	4603      	mov	r3, r0
 800c294:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c298:	e00a      	b.n	800c2b0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c29a:	2301      	movs	r3, #1
 800c29c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c2a0:	e006      	b.n	800c2b0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c2a2:	bf00      	nop
 800c2a4:	e004      	b.n	800c2b0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c2a6:	bf00      	nop
 800c2a8:	e002      	b.n	800c2b0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c2aa:	bf00      	nop
 800c2ac:	e000      	b.n	800c2b0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c2ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c2b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d10b      	bne.n	800c2d0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c2b8:	4ba0      	ldr	r3, [pc, #640]	@ (800c53c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c2ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c2bc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800c2c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c2c8:	4a9c      	ldr	r2, [pc, #624]	@ (800c53c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c2ca:	430b      	orrs	r3, r1
 800c2cc:	6593      	str	r3, [r2, #88]	@ 0x58
 800c2ce:	e003      	b.n	800c2d8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c2d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800c2d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e0:	f002 0308 	and.w	r3, r2, #8
 800c2e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c2ee:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800c2f2:	460b      	mov	r3, r1
 800c2f4:	4313      	orrs	r3, r2
 800c2f6:	d01e      	beq.n	800c336 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800c2f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c300:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c304:	d10c      	bne.n	800c320 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c306:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c30a:	3328      	adds	r3, #40	@ 0x28
 800c30c:	2102      	movs	r1, #2
 800c30e:	4618      	mov	r0, r3
 800c310:	f001 fc5c 	bl	800dbcc <RCCEx_PLL3_Config>
 800c314:	4603      	mov	r3, r0
 800c316:	2b00      	cmp	r3, #0
 800c318:	d002      	beq.n	800c320 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800c31a:	2301      	movs	r3, #1
 800c31c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800c320:	4b86      	ldr	r3, [pc, #536]	@ (800c53c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c324:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c328:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c32c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c330:	4a82      	ldr	r2, [pc, #520]	@ (800c53c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c332:	430b      	orrs	r3, r1
 800c334:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c336:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c33e:	f002 0310 	and.w	r3, r2, #16
 800c342:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c346:	2300      	movs	r3, #0
 800c348:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c34c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800c350:	460b      	mov	r3, r1
 800c352:	4313      	orrs	r3, r2
 800c354:	d01e      	beq.n	800c394 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c356:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c35a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c35e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c362:	d10c      	bne.n	800c37e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c364:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c368:	3328      	adds	r3, #40	@ 0x28
 800c36a:	2102      	movs	r1, #2
 800c36c:	4618      	mov	r0, r3
 800c36e:	f001 fc2d 	bl	800dbcc <RCCEx_PLL3_Config>
 800c372:	4603      	mov	r3, r0
 800c374:	2b00      	cmp	r3, #0
 800c376:	d002      	beq.n	800c37e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800c378:	2301      	movs	r3, #1
 800c37a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c37e:	4b6f      	ldr	r3, [pc, #444]	@ (800c53c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c382:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c386:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c38a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c38e:	4a6b      	ldr	r2, [pc, #428]	@ (800c53c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c390:	430b      	orrs	r3, r1
 800c392:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c39c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800c3a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c3a6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800c3aa:	460b      	mov	r3, r1
 800c3ac:	4313      	orrs	r3, r2
 800c3ae:	d03e      	beq.n	800c42e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c3b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c3b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c3bc:	d022      	beq.n	800c404 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c3be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c3c2:	d81b      	bhi.n	800c3fc <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d003      	beq.n	800c3d0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800c3c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c3cc:	d00b      	beq.n	800c3e6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800c3ce:	e015      	b.n	800c3fc <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c3d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3d4:	3308      	adds	r3, #8
 800c3d6:	2100      	movs	r1, #0
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f001 fb45 	bl	800da68 <RCCEx_PLL2_Config>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c3e4:	e00f      	b.n	800c406 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c3e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3ea:	3328      	adds	r3, #40	@ 0x28
 800c3ec:	2102      	movs	r1, #2
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f001 fbec 	bl	800dbcc <RCCEx_PLL3_Config>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c3fa:	e004      	b.n	800c406 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c402:	e000      	b.n	800c406 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800c404:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c406:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d10b      	bne.n	800c426 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c40e:	4b4b      	ldr	r3, [pc, #300]	@ (800c53c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c412:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800c416:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c41a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c41e:	4a47      	ldr	r2, [pc, #284]	@ (800c53c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c420:	430b      	orrs	r3, r1
 800c422:	6593      	str	r3, [r2, #88]	@ 0x58
 800c424:	e003      	b.n	800c42e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c426:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c42a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c42e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c432:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c436:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800c43a:	673b      	str	r3, [r7, #112]	@ 0x70
 800c43c:	2300      	movs	r3, #0
 800c43e:	677b      	str	r3, [r7, #116]	@ 0x74
 800c440:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800c444:	460b      	mov	r3, r1
 800c446:	4313      	orrs	r3, r2
 800c448:	d03b      	beq.n	800c4c2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c44a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c44e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c452:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c456:	d01f      	beq.n	800c498 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c458:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c45c:	d818      	bhi.n	800c490 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800c45e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c462:	d003      	beq.n	800c46c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800c464:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c468:	d007      	beq.n	800c47a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800c46a:	e011      	b.n	800c490 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c46c:	4b33      	ldr	r3, [pc, #204]	@ (800c53c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c46e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c470:	4a32      	ldr	r2, [pc, #200]	@ (800c53c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c472:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c476:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c478:	e00f      	b.n	800c49a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c47a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c47e:	3328      	adds	r3, #40	@ 0x28
 800c480:	2101      	movs	r1, #1
 800c482:	4618      	mov	r0, r3
 800c484:	f001 fba2 	bl	800dbcc <RCCEx_PLL3_Config>
 800c488:	4603      	mov	r3, r0
 800c48a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800c48e:	e004      	b.n	800c49a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c490:	2301      	movs	r3, #1
 800c492:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c496:	e000      	b.n	800c49a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800c498:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c49a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d10b      	bne.n	800c4ba <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c4a2:	4b26      	ldr	r3, [pc, #152]	@ (800c53c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c4a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4a6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c4aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c4b2:	4a22      	ldr	r2, [pc, #136]	@ (800c53c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c4b4:	430b      	orrs	r3, r1
 800c4b6:	6553      	str	r3, [r2, #84]	@ 0x54
 800c4b8:	e003      	b.n	800c4c2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c4be:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c4c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ca:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800c4ce:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c4d4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800c4d8:	460b      	mov	r3, r1
 800c4da:	4313      	orrs	r3, r2
 800c4dc:	d034      	beq.n	800c548 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c4de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d003      	beq.n	800c4f0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800c4e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c4ec:	d007      	beq.n	800c4fe <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800c4ee:	e011      	b.n	800c514 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c4f0:	4b12      	ldr	r3, [pc, #72]	@ (800c53c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c4f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4f4:	4a11      	ldr	r2, [pc, #68]	@ (800c53c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c4f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c4fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c4fc:	e00e      	b.n	800c51c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c4fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c502:	3308      	adds	r3, #8
 800c504:	2102      	movs	r1, #2
 800c506:	4618      	mov	r0, r3
 800c508:	f001 faae 	bl	800da68 <RCCEx_PLL2_Config>
 800c50c:	4603      	mov	r3, r0
 800c50e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c512:	e003      	b.n	800c51c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800c514:	2301      	movs	r3, #1
 800c516:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c51a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c51c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c520:	2b00      	cmp	r3, #0
 800c522:	d10d      	bne.n	800c540 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c524:	4b05      	ldr	r3, [pc, #20]	@ (800c53c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c526:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c528:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c52c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c530:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c532:	4a02      	ldr	r2, [pc, #8]	@ (800c53c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c534:	430b      	orrs	r3, r1
 800c536:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c538:	e006      	b.n	800c548 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800c53a:	bf00      	nop
 800c53c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c540:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c544:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c548:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c550:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800c554:	663b      	str	r3, [r7, #96]	@ 0x60
 800c556:	2300      	movs	r3, #0
 800c558:	667b      	str	r3, [r7, #100]	@ 0x64
 800c55a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800c55e:	460b      	mov	r3, r1
 800c560:	4313      	orrs	r3, r2
 800c562:	d00c      	beq.n	800c57e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c564:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c568:	3328      	adds	r3, #40	@ 0x28
 800c56a:	2102      	movs	r1, #2
 800c56c:	4618      	mov	r0, r3
 800c56e:	f001 fb2d 	bl	800dbcc <RCCEx_PLL3_Config>
 800c572:	4603      	mov	r3, r0
 800c574:	2b00      	cmp	r3, #0
 800c576:	d002      	beq.n	800c57e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800c578:	2301      	movs	r3, #1
 800c57a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c57e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c586:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800c58a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c58c:	2300      	movs	r3, #0
 800c58e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c590:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800c594:	460b      	mov	r3, r1
 800c596:	4313      	orrs	r3, r2
 800c598:	d036      	beq.n	800c608 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c59a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c59e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c5a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c5a4:	d018      	beq.n	800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800c5a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c5aa:	d811      	bhi.n	800c5d0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c5ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c5b0:	d014      	beq.n	800c5dc <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800c5b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c5b6:	d80b      	bhi.n	800c5d0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d011      	beq.n	800c5e0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800c5bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c5c0:	d106      	bne.n	800c5d0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c5c2:	4bb7      	ldr	r3, [pc, #732]	@ (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c5c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5c6:	4ab6      	ldr	r2, [pc, #728]	@ (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c5c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c5cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c5ce:	e008      	b.n	800c5e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c5d6:	e004      	b.n	800c5e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c5d8:	bf00      	nop
 800c5da:	e002      	b.n	800c5e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c5dc:	bf00      	nop
 800c5de:	e000      	b.n	800c5e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c5e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c5e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d10a      	bne.n	800c600 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c5ea:	4bad      	ldr	r3, [pc, #692]	@ (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c5ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c5f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c5f8:	4aa9      	ldr	r2, [pc, #676]	@ (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c5fa:	430b      	orrs	r3, r1
 800c5fc:	6553      	str	r3, [r2, #84]	@ 0x54
 800c5fe:	e003      	b.n	800c608 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c600:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c604:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c608:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c610:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800c614:	653b      	str	r3, [r7, #80]	@ 0x50
 800c616:	2300      	movs	r3, #0
 800c618:	657b      	str	r3, [r7, #84]	@ 0x54
 800c61a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800c61e:	460b      	mov	r3, r1
 800c620:	4313      	orrs	r3, r2
 800c622:	d009      	beq.n	800c638 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c624:	4b9e      	ldr	r3, [pc, #632]	@ (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c626:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c628:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c62c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c632:	4a9b      	ldr	r2, [pc, #620]	@ (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c634:	430b      	orrs	r3, r1
 800c636:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c638:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c640:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800c644:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c646:	2300      	movs	r3, #0
 800c648:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c64a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800c64e:	460b      	mov	r3, r1
 800c650:	4313      	orrs	r3, r2
 800c652:	d009      	beq.n	800c668 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c654:	4b92      	ldr	r3, [pc, #584]	@ (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c656:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c658:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800c65c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c660:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c662:	4a8f      	ldr	r2, [pc, #572]	@ (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c664:	430b      	orrs	r3, r1
 800c666:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c668:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c670:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800c674:	643b      	str	r3, [r7, #64]	@ 0x40
 800c676:	2300      	movs	r3, #0
 800c678:	647b      	str	r3, [r7, #68]	@ 0x44
 800c67a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800c67e:	460b      	mov	r3, r1
 800c680:	4313      	orrs	r3, r2
 800c682:	d00e      	beq.n	800c6a2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c684:	4b86      	ldr	r3, [pc, #536]	@ (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c686:	691b      	ldr	r3, [r3, #16]
 800c688:	4a85      	ldr	r2, [pc, #532]	@ (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c68a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c68e:	6113      	str	r3, [r2, #16]
 800c690:	4b83      	ldr	r3, [pc, #524]	@ (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c692:	6919      	ldr	r1, [r3, #16]
 800c694:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c698:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c69c:	4a80      	ldr	r2, [pc, #512]	@ (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c69e:	430b      	orrs	r3, r1
 800c6a0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c6a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6aa:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800c6ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c6b4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800c6b8:	460b      	mov	r3, r1
 800c6ba:	4313      	orrs	r3, r2
 800c6bc:	d009      	beq.n	800c6d2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c6be:	4b78      	ldr	r3, [pc, #480]	@ (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c6c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c6c2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800c6c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6cc:	4a74      	ldr	r2, [pc, #464]	@ (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c6ce:	430b      	orrs	r3, r1
 800c6d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c6d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6da:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800c6de:	633b      	str	r3, [r7, #48]	@ 0x30
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	637b      	str	r3, [r7, #52]	@ 0x34
 800c6e4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800c6e8:	460b      	mov	r3, r1
 800c6ea:	4313      	orrs	r3, r2
 800c6ec:	d00a      	beq.n	800c704 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c6ee:	4b6c      	ldr	r3, [pc, #432]	@ (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c6f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6f2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800c6f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c6fe:	4a68      	ldr	r2, [pc, #416]	@ (800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c700:	430b      	orrs	r3, r1
 800c702:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c704:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c70c:	2100      	movs	r1, #0
 800c70e:	62b9      	str	r1, [r7, #40]	@ 0x28
 800c710:	f003 0301 	and.w	r3, r3, #1
 800c714:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c716:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800c71a:	460b      	mov	r3, r1
 800c71c:	4313      	orrs	r3, r2
 800c71e:	d011      	beq.n	800c744 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c720:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c724:	3308      	adds	r3, #8
 800c726:	2100      	movs	r1, #0
 800c728:	4618      	mov	r0, r3
 800c72a:	f001 f99d 	bl	800da68 <RCCEx_PLL2_Config>
 800c72e:	4603      	mov	r3, r0
 800c730:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c734:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d003      	beq.n	800c744 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c73c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c740:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c74c:	2100      	movs	r1, #0
 800c74e:	6239      	str	r1, [r7, #32]
 800c750:	f003 0302 	and.w	r3, r3, #2
 800c754:	627b      	str	r3, [r7, #36]	@ 0x24
 800c756:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c75a:	460b      	mov	r3, r1
 800c75c:	4313      	orrs	r3, r2
 800c75e:	d011      	beq.n	800c784 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c760:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c764:	3308      	adds	r3, #8
 800c766:	2101      	movs	r1, #1
 800c768:	4618      	mov	r0, r3
 800c76a:	f001 f97d 	bl	800da68 <RCCEx_PLL2_Config>
 800c76e:	4603      	mov	r3, r0
 800c770:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c774:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d003      	beq.n	800c784 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c77c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c780:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c784:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c78c:	2100      	movs	r1, #0
 800c78e:	61b9      	str	r1, [r7, #24]
 800c790:	f003 0304 	and.w	r3, r3, #4
 800c794:	61fb      	str	r3, [r7, #28]
 800c796:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c79a:	460b      	mov	r3, r1
 800c79c:	4313      	orrs	r3, r2
 800c79e:	d011      	beq.n	800c7c4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c7a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7a4:	3308      	adds	r3, #8
 800c7a6:	2102      	movs	r1, #2
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f001 f95d 	bl	800da68 <RCCEx_PLL2_Config>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c7b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d003      	beq.n	800c7c4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c7c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c7c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7cc:	2100      	movs	r1, #0
 800c7ce:	6139      	str	r1, [r7, #16]
 800c7d0:	f003 0308 	and.w	r3, r3, #8
 800c7d4:	617b      	str	r3, [r7, #20]
 800c7d6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c7da:	460b      	mov	r3, r1
 800c7dc:	4313      	orrs	r3, r2
 800c7de:	d011      	beq.n	800c804 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c7e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7e4:	3328      	adds	r3, #40	@ 0x28
 800c7e6:	2100      	movs	r1, #0
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f001 f9ef 	bl	800dbcc <RCCEx_PLL3_Config>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800c7f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d003      	beq.n	800c804 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c800:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c804:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c80c:	2100      	movs	r1, #0
 800c80e:	60b9      	str	r1, [r7, #8]
 800c810:	f003 0310 	and.w	r3, r3, #16
 800c814:	60fb      	str	r3, [r7, #12]
 800c816:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c81a:	460b      	mov	r3, r1
 800c81c:	4313      	orrs	r3, r2
 800c81e:	d011      	beq.n	800c844 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c820:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c824:	3328      	adds	r3, #40	@ 0x28
 800c826:	2101      	movs	r1, #1
 800c828:	4618      	mov	r0, r3
 800c82a:	f001 f9cf 	bl	800dbcc <RCCEx_PLL3_Config>
 800c82e:	4603      	mov	r3, r0
 800c830:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c834:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d003      	beq.n	800c844 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c83c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c840:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c844:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c84c:	2100      	movs	r1, #0
 800c84e:	6039      	str	r1, [r7, #0]
 800c850:	f003 0320 	and.w	r3, r3, #32
 800c854:	607b      	str	r3, [r7, #4]
 800c856:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c85a:	460b      	mov	r3, r1
 800c85c:	4313      	orrs	r3, r2
 800c85e:	d011      	beq.n	800c884 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c860:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c864:	3328      	adds	r3, #40	@ 0x28
 800c866:	2102      	movs	r1, #2
 800c868:	4618      	mov	r0, r3
 800c86a:	f001 f9af 	bl	800dbcc <RCCEx_PLL3_Config>
 800c86e:	4603      	mov	r3, r0
 800c870:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c874:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d003      	beq.n	800c884 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c87c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c880:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800c884:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d101      	bne.n	800c890 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800c88c:	2300      	movs	r3, #0
 800c88e:	e000      	b.n	800c892 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800c890:	2301      	movs	r3, #1
}
 800c892:	4618      	mov	r0, r3
 800c894:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800c898:	46bd      	mov	sp, r7
 800c89a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c89e:	bf00      	nop
 800c8a0:	58024400 	.word	0x58024400

0800c8a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b090      	sub	sp, #64	@ 0x40
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c8ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8b2:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800c8b6:	430b      	orrs	r3, r1
 800c8b8:	f040 8094 	bne.w	800c9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c8bc:	4b9b      	ldr	r3, [pc, #620]	@ (800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c8be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c8c0:	f003 0307 	and.w	r3, r3, #7
 800c8c4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800c8c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8c8:	2b04      	cmp	r3, #4
 800c8ca:	f200 8087 	bhi.w	800c9dc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c8ce:	a201      	add	r2, pc, #4	@ (adr r2, 800c8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c8d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8d4:	0800c8e9 	.word	0x0800c8e9
 800c8d8:	0800c911 	.word	0x0800c911
 800c8dc:	0800c939 	.word	0x0800c939
 800c8e0:	0800c9d5 	.word	0x0800c9d5
 800c8e4:	0800c961 	.word	0x0800c961
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c8e8:	4b90      	ldr	r3, [pc, #576]	@ (800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c8f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c8f4:	d108      	bne.n	800c908 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c8f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	f000 ff62 	bl	800d7c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c902:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c904:	f000 bc93 	b.w	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c908:	2300      	movs	r3, #0
 800c90a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c90c:	f000 bc8f 	b.w	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c910:	4b86      	ldr	r3, [pc, #536]	@ (800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c918:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c91c:	d108      	bne.n	800c930 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c91e:	f107 0318 	add.w	r3, r7, #24
 800c922:	4618      	mov	r0, r3
 800c924:	f000 fca6 	bl	800d274 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c928:	69bb      	ldr	r3, [r7, #24]
 800c92a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c92c:	f000 bc7f 	b.w	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c930:	2300      	movs	r3, #0
 800c932:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c934:	f000 bc7b 	b.w	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c938:	4b7c      	ldr	r3, [pc, #496]	@ (800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c940:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c944:	d108      	bne.n	800c958 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c946:	f107 030c 	add.w	r3, r7, #12
 800c94a:	4618      	mov	r0, r3
 800c94c:	f000 fde6 	bl	800d51c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c954:	f000 bc6b 	b.w	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c958:	2300      	movs	r3, #0
 800c95a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c95c:	f000 bc67 	b.w	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c960:	4b72      	ldr	r3, [pc, #456]	@ (800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c962:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c964:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c968:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c96a:	4b70      	ldr	r3, [pc, #448]	@ (800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f003 0304 	and.w	r3, r3, #4
 800c972:	2b04      	cmp	r3, #4
 800c974:	d10c      	bne.n	800c990 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d109      	bne.n	800c990 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c97c:	4b6b      	ldr	r3, [pc, #428]	@ (800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	08db      	lsrs	r3, r3, #3
 800c982:	f003 0303 	and.w	r3, r3, #3
 800c986:	4a6a      	ldr	r2, [pc, #424]	@ (800cb30 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800c988:	fa22 f303 	lsr.w	r3, r2, r3
 800c98c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c98e:	e01f      	b.n	800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c990:	4b66      	ldr	r3, [pc, #408]	@ (800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c998:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c99c:	d106      	bne.n	800c9ac <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c99e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c9a4:	d102      	bne.n	800c9ac <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c9a6:	4b63      	ldr	r3, [pc, #396]	@ (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800c9a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c9aa:	e011      	b.n	800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c9ac:	4b5f      	ldr	r3, [pc, #380]	@ (800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c9b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c9b8:	d106      	bne.n	800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c9ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c9c0:	d102      	bne.n	800c9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c9c2:	4b5d      	ldr	r3, [pc, #372]	@ (800cb38 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c9c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c9c6:	e003      	b.n	800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800c9cc:	f000 bc2f 	b.w	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c9d0:	f000 bc2d 	b.w	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c9d4:	4b59      	ldr	r3, [pc, #356]	@ (800cb3c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c9d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9d8:	f000 bc29 	b.w	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c9dc:	2300      	movs	r3, #0
 800c9de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9e0:	f000 bc25 	b.w	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c9e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9e8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800c9ec:	430b      	orrs	r3, r1
 800c9ee:	f040 80a7 	bne.w	800cb40 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c9f2:	4b4e      	ldr	r3, [pc, #312]	@ (800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c9f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c9f6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800c9fa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800c9fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ca02:	d054      	beq.n	800caae <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800ca04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca06:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ca0a:	f200 808b 	bhi.w	800cb24 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ca0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca10:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ca14:	f000 8083 	beq.w	800cb1e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800ca18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca1a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ca1e:	f200 8081 	bhi.w	800cb24 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ca22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ca28:	d02f      	beq.n	800ca8a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800ca2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca2c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ca30:	d878      	bhi.n	800cb24 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ca32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d004      	beq.n	800ca42 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800ca38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca3a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ca3e:	d012      	beq.n	800ca66 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800ca40:	e070      	b.n	800cb24 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ca42:	4b3a      	ldr	r3, [pc, #232]	@ (800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ca4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ca4e:	d107      	bne.n	800ca60 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ca50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ca54:	4618      	mov	r0, r3
 800ca56:	f000 feb5 	bl	800d7c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ca5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca5e:	e3e6      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ca60:	2300      	movs	r3, #0
 800ca62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca64:	e3e3      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ca66:	4b31      	ldr	r3, [pc, #196]	@ (800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ca6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ca72:	d107      	bne.n	800ca84 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca74:	f107 0318 	add.w	r3, r7, #24
 800ca78:	4618      	mov	r0, r3
 800ca7a:	f000 fbfb 	bl	800d274 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ca7e:	69bb      	ldr	r3, [r7, #24]
 800ca80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca82:	e3d4      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ca84:	2300      	movs	r3, #0
 800ca86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca88:	e3d1      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ca8a:	4b28      	ldr	r3, [pc, #160]	@ (800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ca92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ca96:	d107      	bne.n	800caa8 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca98:	f107 030c 	add.w	r3, r7, #12
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f000 fd3d 	bl	800d51c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800caa6:	e3c2      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800caa8:	2300      	movs	r3, #0
 800caaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800caac:	e3bf      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800caae:	4b1f      	ldr	r3, [pc, #124]	@ (800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cab2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800cab6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cab8:	4b1c      	ldr	r3, [pc, #112]	@ (800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	f003 0304 	and.w	r3, r3, #4
 800cac0:	2b04      	cmp	r3, #4
 800cac2:	d10c      	bne.n	800cade <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800cac4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d109      	bne.n	800cade <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800caca:	4b18      	ldr	r3, [pc, #96]	@ (800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	08db      	lsrs	r3, r3, #3
 800cad0:	f003 0303 	and.w	r3, r3, #3
 800cad4:	4a16      	ldr	r2, [pc, #88]	@ (800cb30 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800cad6:	fa22 f303 	lsr.w	r3, r2, r3
 800cada:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cadc:	e01e      	b.n	800cb1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cade:	4b13      	ldr	r3, [pc, #76]	@ (800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cae6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800caea:	d106      	bne.n	800cafa <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800caec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800caee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800caf2:	d102      	bne.n	800cafa <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800caf4:	4b0f      	ldr	r3, [pc, #60]	@ (800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800caf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800caf8:	e010      	b.n	800cb1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cafa:	4b0c      	ldr	r3, [pc, #48]	@ (800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cb02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cb06:	d106      	bne.n	800cb16 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800cb08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cb0e:	d102      	bne.n	800cb16 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cb10:	4b09      	ldr	r3, [pc, #36]	@ (800cb38 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cb12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cb14:	e002      	b.n	800cb1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cb16:	2300      	movs	r3, #0
 800cb18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800cb1a:	e388      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cb1c:	e387      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cb1e:	4b07      	ldr	r3, [pc, #28]	@ (800cb3c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800cb20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb22:	e384      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800cb24:	2300      	movs	r3, #0
 800cb26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb28:	e381      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cb2a:	bf00      	nop
 800cb2c:	58024400 	.word	0x58024400
 800cb30:	03d09000 	.word	0x03d09000
 800cb34:	003d0900 	.word	0x003d0900
 800cb38:	007a1200 	.word	0x007a1200
 800cb3c:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800cb40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb44:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800cb48:	430b      	orrs	r3, r1
 800cb4a:	f040 809c 	bne.w	800cc86 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800cb4e:	4b9e      	ldr	r3, [pc, #632]	@ (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cb50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cb52:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800cb56:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800cb58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb5a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cb5e:	d054      	beq.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800cb60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb62:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cb66:	f200 808b 	bhi.w	800cc80 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800cb6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb6c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800cb70:	f000 8083 	beq.w	800cc7a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800cb74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb76:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800cb7a:	f200 8081 	bhi.w	800cc80 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800cb7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb80:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cb84:	d02f      	beq.n	800cbe6 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800cb86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cb8c:	d878      	bhi.n	800cc80 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800cb8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d004      	beq.n	800cb9e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800cb94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cb9a:	d012      	beq.n	800cbc2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800cb9c:	e070      	b.n	800cc80 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cb9e:	4b8a      	ldr	r3, [pc, #552]	@ (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cba6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cbaa:	d107      	bne.n	800cbbc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cbac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	f000 fe07 	bl	800d7c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cbb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbba:	e338      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cbc0:	e335      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cbc2:	4b81      	ldr	r3, [pc, #516]	@ (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cbca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cbce:	d107      	bne.n	800cbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbd0:	f107 0318 	add.w	r3, r7, #24
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	f000 fb4d 	bl	800d274 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cbda:	69bb      	ldr	r3, [r7, #24]
 800cbdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbde:	e326      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cbe4:	e323      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cbe6:	4b78      	ldr	r3, [pc, #480]	@ (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cbee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cbf2:	d107      	bne.n	800cc04 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cbf4:	f107 030c 	add.w	r3, r7, #12
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	f000 fc8f 	bl	800d51c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc02:	e314      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cc04:	2300      	movs	r3, #0
 800cc06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc08:	e311      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cc0a:	4b6f      	ldr	r3, [pc, #444]	@ (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cc0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cc0e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800cc12:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cc14:	4b6c      	ldr	r3, [pc, #432]	@ (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	f003 0304 	and.w	r3, r3, #4
 800cc1c:	2b04      	cmp	r3, #4
 800cc1e:	d10c      	bne.n	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800cc20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d109      	bne.n	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc26:	4b68      	ldr	r3, [pc, #416]	@ (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	08db      	lsrs	r3, r3, #3
 800cc2c:	f003 0303 	and.w	r3, r3, #3
 800cc30:	4a66      	ldr	r2, [pc, #408]	@ (800cdcc <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800cc32:	fa22 f303 	lsr.w	r3, r2, r3
 800cc36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cc38:	e01e      	b.n	800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cc3a:	4b63      	ldr	r3, [pc, #396]	@ (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cc46:	d106      	bne.n	800cc56 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800cc48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cc4e:	d102      	bne.n	800cc56 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cc50:	4b5f      	ldr	r3, [pc, #380]	@ (800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800cc52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cc54:	e010      	b.n	800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cc56:	4b5c      	ldr	r3, [pc, #368]	@ (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cc5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cc62:	d106      	bne.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800cc64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cc6a:	d102      	bne.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cc6c:	4b59      	ldr	r3, [pc, #356]	@ (800cdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cc6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cc70:	e002      	b.n	800cc78 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cc72:	2300      	movs	r3, #0
 800cc74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800cc76:	e2da      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cc78:	e2d9      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cc7a:	4b57      	ldr	r3, [pc, #348]	@ (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800cc7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc7e:	e2d6      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800cc80:	2300      	movs	r3, #0
 800cc82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc84:	e2d3      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800cc86:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc8a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800cc8e:	430b      	orrs	r3, r1
 800cc90:	f040 80a7 	bne.w	800cde2 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800cc94:	4b4c      	ldr	r3, [pc, #304]	@ (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cc96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc98:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800cc9c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800cc9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cca0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cca4:	d055      	beq.n	800cd52 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800cca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cca8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ccac:	f200 8096 	bhi.w	800cddc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800ccb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccb2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ccb6:	f000 8084 	beq.w	800cdc2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800ccba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccbc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ccc0:	f200 808c 	bhi.w	800cddc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800ccc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ccca:	d030      	beq.n	800cd2e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800cccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ccd2:	f200 8083 	bhi.w	800cddc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800ccd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d004      	beq.n	800cce6 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800ccdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cce2:	d012      	beq.n	800cd0a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800cce4:	e07a      	b.n	800cddc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cce6:	4b38      	ldr	r3, [pc, #224]	@ (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ccee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ccf2:	d107      	bne.n	800cd04 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ccf4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f000 fd63 	bl	800d7c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ccfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd02:	e294      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cd04:	2300      	movs	r3, #0
 800cd06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd08:	e291      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cd0a:	4b2f      	ldr	r3, [pc, #188]	@ (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cd12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cd16:	d107      	bne.n	800cd28 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd18:	f107 0318 	add.w	r3, r7, #24
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f000 faa9 	bl	800d274 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cd22:	69bb      	ldr	r3, [r7, #24]
 800cd24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd26:	e282      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cd28:	2300      	movs	r3, #0
 800cd2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd2c:	e27f      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cd2e:	4b26      	ldr	r3, [pc, #152]	@ (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cd36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cd3a:	d107      	bne.n	800cd4c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd3c:	f107 030c 	add.w	r3, r7, #12
 800cd40:	4618      	mov	r0, r3
 800cd42:	f000 fbeb 	bl	800d51c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd4a:	e270      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd50:	e26d      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cd52:	4b1d      	ldr	r3, [pc, #116]	@ (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cd54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cd56:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800cd5a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cd5c:	4b1a      	ldr	r3, [pc, #104]	@ (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f003 0304 	and.w	r3, r3, #4
 800cd64:	2b04      	cmp	r3, #4
 800cd66:	d10c      	bne.n	800cd82 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800cd68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d109      	bne.n	800cd82 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd6e:	4b16      	ldr	r3, [pc, #88]	@ (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	08db      	lsrs	r3, r3, #3
 800cd74:	f003 0303 	and.w	r3, r3, #3
 800cd78:	4a14      	ldr	r2, [pc, #80]	@ (800cdcc <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800cd7a:	fa22 f303 	lsr.w	r3, r2, r3
 800cd7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cd80:	e01e      	b.n	800cdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cd82:	4b11      	ldr	r3, [pc, #68]	@ (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cd8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cd8e:	d106      	bne.n	800cd9e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800cd90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cd96:	d102      	bne.n	800cd9e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cd98:	4b0d      	ldr	r3, [pc, #52]	@ (800cdd0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800cd9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cd9c:	e010      	b.n	800cdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cd9e:	4b0a      	ldr	r3, [pc, #40]	@ (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cda6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cdaa:	d106      	bne.n	800cdba <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800cdac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cdb2:	d102      	bne.n	800cdba <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cdb4:	4b07      	ldr	r3, [pc, #28]	@ (800cdd4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cdb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cdb8:	e002      	b.n	800cdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800cdbe:	e236      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cdc0:	e235      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cdc2:	4b05      	ldr	r3, [pc, #20]	@ (800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800cdc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cdc6:	e232      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cdc8:	58024400 	.word	0x58024400
 800cdcc:	03d09000 	.word	0x03d09000
 800cdd0:	003d0900 	.word	0x003d0900
 800cdd4:	007a1200 	.word	0x007a1200
 800cdd8:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800cddc:	2300      	movs	r3, #0
 800cdde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cde0:	e225      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800cde2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cde6:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800cdea:	430b      	orrs	r3, r1
 800cdec:	f040 8085 	bne.w	800cefa <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800cdf0:	4b9c      	ldr	r3, [pc, #624]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cdf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cdf4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800cdf8:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800cdfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ce00:	d06b      	beq.n	800ceda <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800ce02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ce08:	d874      	bhi.n	800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ce0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce0c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ce10:	d056      	beq.n	800cec0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800ce12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce14:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ce18:	d86c      	bhi.n	800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ce1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce1c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ce20:	d03b      	beq.n	800ce9a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800ce22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce24:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ce28:	d864      	bhi.n	800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ce2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ce30:	d021      	beq.n	800ce76 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800ce32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ce38:	d85c      	bhi.n	800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ce3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d004      	beq.n	800ce4a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800ce40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ce46:	d004      	beq.n	800ce52 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800ce48:	e054      	b.n	800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800ce4a:	f7fe fb5f 	bl	800b50c <HAL_RCC_GetPCLK1Freq>
 800ce4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ce50:	e1ed      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ce52:	4b84      	ldr	r3, [pc, #528]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ce5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ce5e:	d107      	bne.n	800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce60:	f107 0318 	add.w	r3, r7, #24
 800ce64:	4618      	mov	r0, r3
 800ce66:	f000 fa05 	bl	800d274 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ce6a:	69fb      	ldr	r3, [r7, #28]
 800ce6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce6e:	e1de      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ce70:	2300      	movs	r3, #0
 800ce72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce74:	e1db      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ce76:	4b7b      	ldr	r3, [pc, #492]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ce7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ce82:	d107      	bne.n	800ce94 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce84:	f107 030c 	add.w	r3, r7, #12
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f000 fb47 	bl	800d51c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ce8e:	693b      	ldr	r3, [r7, #16]
 800ce90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce92:	e1cc      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ce94:	2300      	movs	r3, #0
 800ce96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce98:	e1c9      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ce9a:	4b72      	ldr	r3, [pc, #456]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	f003 0304 	and.w	r3, r3, #4
 800cea2:	2b04      	cmp	r3, #4
 800cea4:	d109      	bne.n	800ceba <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cea6:	4b6f      	ldr	r3, [pc, #444]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	08db      	lsrs	r3, r3, #3
 800ceac:	f003 0303 	and.w	r3, r3, #3
 800ceb0:	4a6d      	ldr	r2, [pc, #436]	@ (800d068 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800ceb2:	fa22 f303 	lsr.w	r3, r2, r3
 800ceb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ceb8:	e1b9      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ceba:	2300      	movs	r3, #0
 800cebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cebe:	e1b6      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cec0:	4b68      	ldr	r3, [pc, #416]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cec8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cecc:	d102      	bne.n	800ced4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800cece:	4b67      	ldr	r3, [pc, #412]	@ (800d06c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800ced0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ced2:	e1ac      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ced4:	2300      	movs	r3, #0
 800ced6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ced8:	e1a9      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ceda:	4b62      	ldr	r3, [pc, #392]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cee2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cee6:	d102      	bne.n	800ceee <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800cee8:	4b61      	ldr	r3, [pc, #388]	@ (800d070 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800ceea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ceec:	e19f      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ceee:	2300      	movs	r3, #0
 800cef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cef2:	e19c      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800cef4:	2300      	movs	r3, #0
 800cef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cef8:	e199      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800cefa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cefe:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800cf02:	430b      	orrs	r3, r1
 800cf04:	d173      	bne.n	800cfee <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800cf06:	4b57      	ldr	r3, [pc, #348]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cf08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf0a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800cf0e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800cf10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cf16:	d02f      	beq.n	800cf78 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800cf18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cf1e:	d863      	bhi.n	800cfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800cf20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d004      	beq.n	800cf30 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800cf26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cf2c:	d012      	beq.n	800cf54 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800cf2e:	e05b      	b.n	800cfe8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cf30:	4b4c      	ldr	r3, [pc, #304]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cf38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cf3c:	d107      	bne.n	800cf4e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf3e:	f107 0318 	add.w	r3, r7, #24
 800cf42:	4618      	mov	r0, r3
 800cf44:	f000 f996 	bl	800d274 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cf48:	69bb      	ldr	r3, [r7, #24]
 800cf4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf4c:	e16f      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf52:	e16c      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cf54:	4b43      	ldr	r3, [pc, #268]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cf5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cf60:	d107      	bne.n	800cf72 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf62:	f107 030c 	add.w	r3, r7, #12
 800cf66:	4618      	mov	r0, r3
 800cf68:	f000 fad8 	bl	800d51c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800cf6c:	697b      	ldr	r3, [r7, #20]
 800cf6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf70:	e15d      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf72:	2300      	movs	r3, #0
 800cf74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf76:	e15a      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cf78:	4b3a      	ldr	r3, [pc, #232]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cf7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cf7c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800cf80:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cf82:	4b38      	ldr	r3, [pc, #224]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	f003 0304 	and.w	r3, r3, #4
 800cf8a:	2b04      	cmp	r3, #4
 800cf8c:	d10c      	bne.n	800cfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800cf8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d109      	bne.n	800cfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf94:	4b33      	ldr	r3, [pc, #204]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	08db      	lsrs	r3, r3, #3
 800cf9a:	f003 0303 	and.w	r3, r3, #3
 800cf9e:	4a32      	ldr	r2, [pc, #200]	@ (800d068 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800cfa0:	fa22 f303 	lsr.w	r3, r2, r3
 800cfa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cfa6:	e01e      	b.n	800cfe6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cfa8:	4b2e      	ldr	r3, [pc, #184]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cfb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cfb4:	d106      	bne.n	800cfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800cfb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cfbc:	d102      	bne.n	800cfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cfbe:	4b2b      	ldr	r3, [pc, #172]	@ (800d06c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800cfc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cfc2:	e010      	b.n	800cfe6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cfc4:	4b27      	ldr	r3, [pc, #156]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cfcc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cfd0:	d106      	bne.n	800cfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800cfd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cfd8:	d102      	bne.n	800cfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cfda:	4b25      	ldr	r3, [pc, #148]	@ (800d070 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800cfdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cfde:	e002      	b.n	800cfe6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800cfe4:	e123      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cfe6:	e122      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800cfe8:	2300      	movs	r3, #0
 800cfea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cfec:	e11f      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800cfee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cff2:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800cff6:	430b      	orrs	r3, r1
 800cff8:	d13c      	bne.n	800d074 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800cffa:	4b1a      	ldr	r3, [pc, #104]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cffe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d002:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d006:	2b00      	cmp	r3, #0
 800d008:	d004      	beq.n	800d014 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800d00a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d00c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d010:	d012      	beq.n	800d038 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800d012:	e023      	b.n	800d05c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d014:	4b13      	ldr	r3, [pc, #76]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d01c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d020:	d107      	bne.n	800d032 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d022:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d026:	4618      	mov	r0, r3
 800d028:	f000 fbcc 	bl	800d7c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d02c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d02e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d030:	e0fd      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d032:	2300      	movs	r3, #0
 800d034:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d036:	e0fa      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d038:	4b0a      	ldr	r3, [pc, #40]	@ (800d064 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d040:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d044:	d107      	bne.n	800d056 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d046:	f107 0318 	add.w	r3, r7, #24
 800d04a:	4618      	mov	r0, r3
 800d04c:	f000 f912 	bl	800d274 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d050:	6a3b      	ldr	r3, [r7, #32]
 800d052:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d054:	e0eb      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d056:	2300      	movs	r3, #0
 800d058:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d05a:	e0e8      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d05c:	2300      	movs	r3, #0
 800d05e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d060:	e0e5      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d062:	bf00      	nop
 800d064:	58024400 	.word	0x58024400
 800d068:	03d09000 	.word	0x03d09000
 800d06c:	003d0900 	.word	0x003d0900
 800d070:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800d074:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d078:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800d07c:	430b      	orrs	r3, r1
 800d07e:	f040 8085 	bne.w	800d18c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800d082:	4b6d      	ldr	r3, [pc, #436]	@ (800d238 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d086:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800d08a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d08c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d08e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d092:	d06b      	beq.n	800d16c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800d094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d096:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d09a:	d874      	bhi.n	800d186 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d09c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d09e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d0a2:	d056      	beq.n	800d152 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800d0a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d0aa:	d86c      	bhi.n	800d186 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d0ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d0b2:	d03b      	beq.n	800d12c <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800d0b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d0ba:	d864      	bhi.n	800d186 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d0bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d0c2:	d021      	beq.n	800d108 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800d0c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d0ca:	d85c      	bhi.n	800d186 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d0cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d004      	beq.n	800d0dc <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800d0d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d0d8:	d004      	beq.n	800d0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800d0da:	e054      	b.n	800d186 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800d0dc:	f000 f8b4 	bl	800d248 <HAL_RCCEx_GetD3PCLK1Freq>
 800d0e0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d0e2:	e0a4      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d0e4:	4b54      	ldr	r3, [pc, #336]	@ (800d238 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d0ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d0f0:	d107      	bne.n	800d102 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d0f2:	f107 0318 	add.w	r3, r7, #24
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f000 f8bc 	bl	800d274 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d0fc:	69fb      	ldr	r3, [r7, #28]
 800d0fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d100:	e095      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d102:	2300      	movs	r3, #0
 800d104:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d106:	e092      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d108:	4b4b      	ldr	r3, [pc, #300]	@ (800d238 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d110:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d114:	d107      	bne.n	800d126 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d116:	f107 030c 	add.w	r3, r7, #12
 800d11a:	4618      	mov	r0, r3
 800d11c:	f000 f9fe 	bl	800d51c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d124:	e083      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d126:	2300      	movs	r3, #0
 800d128:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d12a:	e080      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d12c:	4b42      	ldr	r3, [pc, #264]	@ (800d238 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	f003 0304 	and.w	r3, r3, #4
 800d134:	2b04      	cmp	r3, #4
 800d136:	d109      	bne.n	800d14c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d138:	4b3f      	ldr	r3, [pc, #252]	@ (800d238 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	08db      	lsrs	r3, r3, #3
 800d13e:	f003 0303 	and.w	r3, r3, #3
 800d142:	4a3e      	ldr	r2, [pc, #248]	@ (800d23c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800d144:	fa22 f303 	lsr.w	r3, r2, r3
 800d148:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d14a:	e070      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d14c:	2300      	movs	r3, #0
 800d14e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d150:	e06d      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d152:	4b39      	ldr	r3, [pc, #228]	@ (800d238 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d15a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d15e:	d102      	bne.n	800d166 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800d160:	4b37      	ldr	r3, [pc, #220]	@ (800d240 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d164:	e063      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d166:	2300      	movs	r3, #0
 800d168:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d16a:	e060      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d16c:	4b32      	ldr	r3, [pc, #200]	@ (800d238 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d174:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d178:	d102      	bne.n	800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800d17a:	4b32      	ldr	r3, [pc, #200]	@ (800d244 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d17c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d17e:	e056      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d180:	2300      	movs	r3, #0
 800d182:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d184:	e053      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800d186:	2300      	movs	r3, #0
 800d188:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d18a:	e050      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d18c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d190:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800d194:	430b      	orrs	r3, r1
 800d196:	d148      	bne.n	800d22a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800d198:	4b27      	ldr	r3, [pc, #156]	@ (800d238 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d19a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d19c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d1a0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d1a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d1a8:	d02a      	beq.n	800d200 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800d1aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d1b0:	d838      	bhi.n	800d224 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800d1b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d004      	beq.n	800d1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800d1b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d1be:	d00d      	beq.n	800d1dc <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800d1c0:	e030      	b.n	800d224 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d1c2:	4b1d      	ldr	r3, [pc, #116]	@ (800d238 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d1ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d1ce:	d102      	bne.n	800d1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800d1d0:	4b1c      	ldr	r3, [pc, #112]	@ (800d244 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d1d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d1d4:	e02b      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1da:	e028      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d1dc:	4b16      	ldr	r3, [pc, #88]	@ (800d238 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d1e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d1e8:	d107      	bne.n	800d1fa <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d1ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f000 fae8 	bl	800d7c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d1f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d1f8:	e019      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1fe:	e016      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d200:	4b0d      	ldr	r3, [pc, #52]	@ (800d238 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d208:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d20c:	d107      	bne.n	800d21e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d20e:	f107 0318 	add.w	r3, r7, #24
 800d212:	4618      	mov	r0, r3
 800d214:	f000 f82e 	bl	800d274 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d218:	69fb      	ldr	r3, [r7, #28]
 800d21a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d21c:	e007      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d21e:	2300      	movs	r3, #0
 800d220:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d222:	e004      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d224:	2300      	movs	r3, #0
 800d226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d228:	e001      	b.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800d22a:	2300      	movs	r3, #0
 800d22c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800d22e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d230:	4618      	mov	r0, r3
 800d232:	3740      	adds	r7, #64	@ 0x40
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}
 800d238:	58024400 	.word	0x58024400
 800d23c:	03d09000 	.word	0x03d09000
 800d240:	003d0900 	.word	0x003d0900
 800d244:	007a1200 	.word	0x007a1200

0800d248 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d24c:	f7fe f92e 	bl	800b4ac <HAL_RCC_GetHCLKFreq>
 800d250:	4602      	mov	r2, r0
 800d252:	4b06      	ldr	r3, [pc, #24]	@ (800d26c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d254:	6a1b      	ldr	r3, [r3, #32]
 800d256:	091b      	lsrs	r3, r3, #4
 800d258:	f003 0307 	and.w	r3, r3, #7
 800d25c:	4904      	ldr	r1, [pc, #16]	@ (800d270 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d25e:	5ccb      	ldrb	r3, [r1, r3]
 800d260:	f003 031f 	and.w	r3, r3, #31
 800d264:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d268:	4618      	mov	r0, r3
 800d26a:	bd80      	pop	{r7, pc}
 800d26c:	58024400 	.word	0x58024400
 800d270:	08011f0c 	.word	0x08011f0c

0800d274 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d274:	b480      	push	{r7}
 800d276:	b089      	sub	sp, #36	@ 0x24
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d27c:	4ba1      	ldr	r3, [pc, #644]	@ (800d504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d27e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d280:	f003 0303 	and.w	r3, r3, #3
 800d284:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d286:	4b9f      	ldr	r3, [pc, #636]	@ (800d504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d28a:	0b1b      	lsrs	r3, r3, #12
 800d28c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d290:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d292:	4b9c      	ldr	r3, [pc, #624]	@ (800d504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d296:	091b      	lsrs	r3, r3, #4
 800d298:	f003 0301 	and.w	r3, r3, #1
 800d29c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d29e:	4b99      	ldr	r3, [pc, #612]	@ (800d504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d2a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2a2:	08db      	lsrs	r3, r3, #3
 800d2a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d2a8:	693a      	ldr	r2, [r7, #16]
 800d2aa:	fb02 f303 	mul.w	r3, r2, r3
 800d2ae:	ee07 3a90 	vmov	s15, r3
 800d2b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d2ba:	697b      	ldr	r3, [r7, #20]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	f000 8111 	beq.w	800d4e4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d2c2:	69bb      	ldr	r3, [r7, #24]
 800d2c4:	2b02      	cmp	r3, #2
 800d2c6:	f000 8083 	beq.w	800d3d0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d2ca:	69bb      	ldr	r3, [r7, #24]
 800d2cc:	2b02      	cmp	r3, #2
 800d2ce:	f200 80a1 	bhi.w	800d414 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d2d2:	69bb      	ldr	r3, [r7, #24]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d003      	beq.n	800d2e0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d2d8:	69bb      	ldr	r3, [r7, #24]
 800d2da:	2b01      	cmp	r3, #1
 800d2dc:	d056      	beq.n	800d38c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d2de:	e099      	b.n	800d414 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d2e0:	4b88      	ldr	r3, [pc, #544]	@ (800d504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	f003 0320 	and.w	r3, r3, #32
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d02d      	beq.n	800d348 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d2ec:	4b85      	ldr	r3, [pc, #532]	@ (800d504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	08db      	lsrs	r3, r3, #3
 800d2f2:	f003 0303 	and.w	r3, r3, #3
 800d2f6:	4a84      	ldr	r2, [pc, #528]	@ (800d508 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d2f8:	fa22 f303 	lsr.w	r3, r2, r3
 800d2fc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d2fe:	68bb      	ldr	r3, [r7, #8]
 800d300:	ee07 3a90 	vmov	s15, r3
 800d304:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d308:	697b      	ldr	r3, [r7, #20]
 800d30a:	ee07 3a90 	vmov	s15, r3
 800d30e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d316:	4b7b      	ldr	r3, [pc, #492]	@ (800d504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d31a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d31e:	ee07 3a90 	vmov	s15, r3
 800d322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d326:	ed97 6a03 	vldr	s12, [r7, #12]
 800d32a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800d50c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d32e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d336:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d33a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d33e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d342:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d346:	e087      	b.n	800d458 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d348:	697b      	ldr	r3, [r7, #20]
 800d34a:	ee07 3a90 	vmov	s15, r3
 800d34e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d352:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800d510 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d35a:	4b6a      	ldr	r3, [pc, #424]	@ (800d504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d35c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d35e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d362:	ee07 3a90 	vmov	s15, r3
 800d366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d36a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d36e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800d50c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d37a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d37e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d382:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d386:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d38a:	e065      	b.n	800d458 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d38c:	697b      	ldr	r3, [r7, #20]
 800d38e:	ee07 3a90 	vmov	s15, r3
 800d392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d396:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800d514 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d39a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d39e:	4b59      	ldr	r3, [pc, #356]	@ (800d504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d3a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3a6:	ee07 3a90 	vmov	s15, r3
 800d3aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3b2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800d50c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d3b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d3c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d3ce:	e043      	b.n	800d458 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d3d0:	697b      	ldr	r3, [r7, #20]
 800d3d2:	ee07 3a90 	vmov	s15, r3
 800d3d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3da:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800d518 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d3de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3e2:	4b48      	ldr	r3, [pc, #288]	@ (800d504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d3e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3ea:	ee07 3a90 	vmov	s15, r3
 800d3ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3f6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800d50c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d3fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d402:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d40a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d40e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d412:	e021      	b.n	800d458 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d414:	697b      	ldr	r3, [r7, #20]
 800d416:	ee07 3a90 	vmov	s15, r3
 800d41a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d41e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800d514 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d426:	4b37      	ldr	r3, [pc, #220]	@ (800d504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d42a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d42e:	ee07 3a90 	vmov	s15, r3
 800d432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d436:	ed97 6a03 	vldr	s12, [r7, #12]
 800d43a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800d50c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d43e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d446:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d44a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d44e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d452:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d456:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d458:	4b2a      	ldr	r3, [pc, #168]	@ (800d504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d45a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d45c:	0a5b      	lsrs	r3, r3, #9
 800d45e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d462:	ee07 3a90 	vmov	s15, r3
 800d466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d46a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d46e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d472:	edd7 6a07 	vldr	s13, [r7, #28]
 800d476:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d47a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d47e:	ee17 2a90 	vmov	r2, s15
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d486:	4b1f      	ldr	r3, [pc, #124]	@ (800d504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d48a:	0c1b      	lsrs	r3, r3, #16
 800d48c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d490:	ee07 3a90 	vmov	s15, r3
 800d494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d498:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d49c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d4a0:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4ac:	ee17 2a90 	vmov	r2, s15
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d4b4:	4b13      	ldr	r3, [pc, #76]	@ (800d504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4b8:	0e1b      	lsrs	r3, r3, #24
 800d4ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d4be:	ee07 3a90 	vmov	s15, r3
 800d4c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d4ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d4ce:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4da:	ee17 2a90 	vmov	r2, s15
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d4e2:	e008      	b.n	800d4f6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	609a      	str	r2, [r3, #8]
}
 800d4f6:	bf00      	nop
 800d4f8:	3724      	adds	r7, #36	@ 0x24
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d500:	4770      	bx	lr
 800d502:	bf00      	nop
 800d504:	58024400 	.word	0x58024400
 800d508:	03d09000 	.word	0x03d09000
 800d50c:	46000000 	.word	0x46000000
 800d510:	4c742400 	.word	0x4c742400
 800d514:	4a742400 	.word	0x4a742400
 800d518:	4af42400 	.word	0x4af42400

0800d51c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d51c:	b480      	push	{r7}
 800d51e:	b089      	sub	sp, #36	@ 0x24
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d524:	4ba1      	ldr	r3, [pc, #644]	@ (800d7ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d528:	f003 0303 	and.w	r3, r3, #3
 800d52c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d52e:	4b9f      	ldr	r3, [pc, #636]	@ (800d7ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d532:	0d1b      	lsrs	r3, r3, #20
 800d534:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d538:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d53a:	4b9c      	ldr	r3, [pc, #624]	@ (800d7ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d53c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d53e:	0a1b      	lsrs	r3, r3, #8
 800d540:	f003 0301 	and.w	r3, r3, #1
 800d544:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d546:	4b99      	ldr	r3, [pc, #612]	@ (800d7ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d54a:	08db      	lsrs	r3, r3, #3
 800d54c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d550:	693a      	ldr	r2, [r7, #16]
 800d552:	fb02 f303 	mul.w	r3, r2, r3
 800d556:	ee07 3a90 	vmov	s15, r3
 800d55a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d55e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d562:	697b      	ldr	r3, [r7, #20]
 800d564:	2b00      	cmp	r3, #0
 800d566:	f000 8111 	beq.w	800d78c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d56a:	69bb      	ldr	r3, [r7, #24]
 800d56c:	2b02      	cmp	r3, #2
 800d56e:	f000 8083 	beq.w	800d678 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d572:	69bb      	ldr	r3, [r7, #24]
 800d574:	2b02      	cmp	r3, #2
 800d576:	f200 80a1 	bhi.w	800d6bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d57a:	69bb      	ldr	r3, [r7, #24]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d003      	beq.n	800d588 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d580:	69bb      	ldr	r3, [r7, #24]
 800d582:	2b01      	cmp	r3, #1
 800d584:	d056      	beq.n	800d634 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d586:	e099      	b.n	800d6bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d588:	4b88      	ldr	r3, [pc, #544]	@ (800d7ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	f003 0320 	and.w	r3, r3, #32
 800d590:	2b00      	cmp	r3, #0
 800d592:	d02d      	beq.n	800d5f0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d594:	4b85      	ldr	r3, [pc, #532]	@ (800d7ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	08db      	lsrs	r3, r3, #3
 800d59a:	f003 0303 	and.w	r3, r3, #3
 800d59e:	4a84      	ldr	r2, [pc, #528]	@ (800d7b0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d5a0:	fa22 f303 	lsr.w	r3, r2, r3
 800d5a4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d5a6:	68bb      	ldr	r3, [r7, #8]
 800d5a8:	ee07 3a90 	vmov	s15, r3
 800d5ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5b0:	697b      	ldr	r3, [r7, #20]
 800d5b2:	ee07 3a90 	vmov	s15, r3
 800d5b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5be:	4b7b      	ldr	r3, [pc, #492]	@ (800d7ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d5c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5c6:	ee07 3a90 	vmov	s15, r3
 800d5ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5d2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800d7b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d5d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d5e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d5ee:	e087      	b.n	800d700 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d5f0:	697b      	ldr	r3, [r7, #20]
 800d5f2:	ee07 3a90 	vmov	s15, r3
 800d5f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5fa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800d7b8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d5fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d602:	4b6a      	ldr	r3, [pc, #424]	@ (800d7ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d60a:	ee07 3a90 	vmov	s15, r3
 800d60e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d612:	ed97 6a03 	vldr	s12, [r7, #12]
 800d616:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800d7b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d61a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d61e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d622:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d62a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d62e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d632:	e065      	b.n	800d700 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d634:	697b      	ldr	r3, [r7, #20]
 800d636:	ee07 3a90 	vmov	s15, r3
 800d63a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d63e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800d7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d646:	4b59      	ldr	r3, [pc, #356]	@ (800d7ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d64a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d64e:	ee07 3a90 	vmov	s15, r3
 800d652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d656:	ed97 6a03 	vldr	s12, [r7, #12]
 800d65a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800d7b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d65e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d666:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d66a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d66e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d672:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d676:	e043      	b.n	800d700 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d678:	697b      	ldr	r3, [r7, #20]
 800d67a:	ee07 3a90 	vmov	s15, r3
 800d67e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d682:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800d7c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d68a:	4b48      	ldr	r3, [pc, #288]	@ (800d7ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d68c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d68e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d692:	ee07 3a90 	vmov	s15, r3
 800d696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d69a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d69e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800d7b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d6a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d6ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d6ba:	e021      	b.n	800d700 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d6bc:	697b      	ldr	r3, [r7, #20]
 800d6be:	ee07 3a90 	vmov	s15, r3
 800d6c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6c6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800d7bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d6ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6ce:	4b37      	ldr	r3, [pc, #220]	@ (800d7ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d6d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6d6:	ee07 3a90 	vmov	s15, r3
 800d6da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6de:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6e2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800d7b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d6e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d6f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d6fe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d700:	4b2a      	ldr	r3, [pc, #168]	@ (800d7ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d704:	0a5b      	lsrs	r3, r3, #9
 800d706:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d70a:	ee07 3a90 	vmov	s15, r3
 800d70e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d712:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d716:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d71a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d71e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d722:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d726:	ee17 2a90 	vmov	r2, s15
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d72e:	4b1f      	ldr	r3, [pc, #124]	@ (800d7ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d732:	0c1b      	lsrs	r3, r3, #16
 800d734:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d738:	ee07 3a90 	vmov	s15, r3
 800d73c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d740:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d744:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d748:	edd7 6a07 	vldr	s13, [r7, #28]
 800d74c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d750:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d754:	ee17 2a90 	vmov	r2, s15
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d75c:	4b13      	ldr	r3, [pc, #76]	@ (800d7ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d75e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d760:	0e1b      	lsrs	r3, r3, #24
 800d762:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d766:	ee07 3a90 	vmov	s15, r3
 800d76a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d76e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d772:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d776:	edd7 6a07 	vldr	s13, [r7, #28]
 800d77a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d77e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d782:	ee17 2a90 	vmov	r2, s15
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d78a:	e008      	b.n	800d79e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2200      	movs	r2, #0
 800d790:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	2200      	movs	r2, #0
 800d796:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2200      	movs	r2, #0
 800d79c:	609a      	str	r2, [r3, #8]
}
 800d79e:	bf00      	nop
 800d7a0:	3724      	adds	r7, #36	@ 0x24
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a8:	4770      	bx	lr
 800d7aa:	bf00      	nop
 800d7ac:	58024400 	.word	0x58024400
 800d7b0:	03d09000 	.word	0x03d09000
 800d7b4:	46000000 	.word	0x46000000
 800d7b8:	4c742400 	.word	0x4c742400
 800d7bc:	4a742400 	.word	0x4a742400
 800d7c0:	4af42400 	.word	0x4af42400

0800d7c4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d7c4:	b480      	push	{r7}
 800d7c6:	b089      	sub	sp, #36	@ 0x24
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d7cc:	4ba0      	ldr	r3, [pc, #640]	@ (800da50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d7ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7d0:	f003 0303 	and.w	r3, r3, #3
 800d7d4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d7d6:	4b9e      	ldr	r3, [pc, #632]	@ (800da50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d7d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7da:	091b      	lsrs	r3, r3, #4
 800d7dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d7e0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d7e2:	4b9b      	ldr	r3, [pc, #620]	@ (800da50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d7e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7e6:	f003 0301 	and.w	r3, r3, #1
 800d7ea:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d7ec:	4b98      	ldr	r3, [pc, #608]	@ (800da50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d7ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7f0:	08db      	lsrs	r3, r3, #3
 800d7f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d7f6:	693a      	ldr	r2, [r7, #16]
 800d7f8:	fb02 f303 	mul.w	r3, r2, r3
 800d7fc:	ee07 3a90 	vmov	s15, r3
 800d800:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d804:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d808:	697b      	ldr	r3, [r7, #20]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	f000 8111 	beq.w	800da32 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d810:	69bb      	ldr	r3, [r7, #24]
 800d812:	2b02      	cmp	r3, #2
 800d814:	f000 8083 	beq.w	800d91e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d818:	69bb      	ldr	r3, [r7, #24]
 800d81a:	2b02      	cmp	r3, #2
 800d81c:	f200 80a1 	bhi.w	800d962 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d820:	69bb      	ldr	r3, [r7, #24]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d003      	beq.n	800d82e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d826:	69bb      	ldr	r3, [r7, #24]
 800d828:	2b01      	cmp	r3, #1
 800d82a:	d056      	beq.n	800d8da <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d82c:	e099      	b.n	800d962 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d82e:	4b88      	ldr	r3, [pc, #544]	@ (800da50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	f003 0320 	and.w	r3, r3, #32
 800d836:	2b00      	cmp	r3, #0
 800d838:	d02d      	beq.n	800d896 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d83a:	4b85      	ldr	r3, [pc, #532]	@ (800da50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	08db      	lsrs	r3, r3, #3
 800d840:	f003 0303 	and.w	r3, r3, #3
 800d844:	4a83      	ldr	r2, [pc, #524]	@ (800da54 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d846:	fa22 f303 	lsr.w	r3, r2, r3
 800d84a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d84c:	68bb      	ldr	r3, [r7, #8]
 800d84e:	ee07 3a90 	vmov	s15, r3
 800d852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d856:	697b      	ldr	r3, [r7, #20]
 800d858:	ee07 3a90 	vmov	s15, r3
 800d85c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d860:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d864:	4b7a      	ldr	r3, [pc, #488]	@ (800da50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d86c:	ee07 3a90 	vmov	s15, r3
 800d870:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d874:	ed97 6a03 	vldr	s12, [r7, #12]
 800d878:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800da58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d87c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d880:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d884:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d888:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d88c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d890:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d894:	e087      	b.n	800d9a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d896:	697b      	ldr	r3, [r7, #20]
 800d898:	ee07 3a90 	vmov	s15, r3
 800d89c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8a0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800da5c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d8a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d8a8:	4b69      	ldr	r3, [pc, #420]	@ (800da50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d8aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d8ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8b0:	ee07 3a90 	vmov	s15, r3
 800d8b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d8b8:	ed97 6a03 	vldr	s12, [r7, #12]
 800d8bc:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800da58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d8c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d8c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d8c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d8cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d8d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d8d8:	e065      	b.n	800d9a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d8da:	697b      	ldr	r3, [r7, #20]
 800d8dc:	ee07 3a90 	vmov	s15, r3
 800d8e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8e4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800da60 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d8e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d8ec:	4b58      	ldr	r3, [pc, #352]	@ (800da50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d8ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d8f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8f4:	ee07 3a90 	vmov	s15, r3
 800d8f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d8fc:	ed97 6a03 	vldr	s12, [r7, #12]
 800d900:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800da58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d904:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d908:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d90c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d910:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d914:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d918:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d91c:	e043      	b.n	800d9a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d91e:	697b      	ldr	r3, [r7, #20]
 800d920:	ee07 3a90 	vmov	s15, r3
 800d924:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d928:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800da64 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d92c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d930:	4b47      	ldr	r3, [pc, #284]	@ (800da50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d938:	ee07 3a90 	vmov	s15, r3
 800d93c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d940:	ed97 6a03 	vldr	s12, [r7, #12]
 800d944:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800da58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d948:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d94c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d950:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d954:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d958:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d95c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d960:	e021      	b.n	800d9a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d962:	697b      	ldr	r3, [r7, #20]
 800d964:	ee07 3a90 	vmov	s15, r3
 800d968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d96c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800da5c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d970:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d974:	4b36      	ldr	r3, [pc, #216]	@ (800da50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d97c:	ee07 3a90 	vmov	s15, r3
 800d980:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d984:	ed97 6a03 	vldr	s12, [r7, #12]
 800d988:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800da58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d98c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d990:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d994:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d998:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d99c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d9a4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d9a6:	4b2a      	ldr	r3, [pc, #168]	@ (800da50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d9a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9aa:	0a5b      	lsrs	r3, r3, #9
 800d9ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d9b0:	ee07 3a90 	vmov	s15, r3
 800d9b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d9bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d9c0:	edd7 6a07 	vldr	s13, [r7, #28]
 800d9c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d9c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d9cc:	ee17 2a90 	vmov	r2, s15
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d9d4:	4b1e      	ldr	r3, [pc, #120]	@ (800da50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d9d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9d8:	0c1b      	lsrs	r3, r3, #16
 800d9da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d9de:	ee07 3a90 	vmov	s15, r3
 800d9e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d9ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d9ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800d9f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d9f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d9fa:	ee17 2a90 	vmov	r2, s15
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800da02:	4b13      	ldr	r3, [pc, #76]	@ (800da50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da06:	0e1b      	lsrs	r3, r3, #24
 800da08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800da0c:	ee07 3a90 	vmov	s15, r3
 800da10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da14:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800da18:	ee37 7a87 	vadd.f32	s14, s15, s14
 800da1c:	edd7 6a07 	vldr	s13, [r7, #28]
 800da20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da28:	ee17 2a90 	vmov	r2, s15
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800da30:	e008      	b.n	800da44 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	2200      	movs	r2, #0
 800da36:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2200      	movs	r2, #0
 800da3c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2200      	movs	r2, #0
 800da42:	609a      	str	r2, [r3, #8]
}
 800da44:	bf00      	nop
 800da46:	3724      	adds	r7, #36	@ 0x24
 800da48:	46bd      	mov	sp, r7
 800da4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4e:	4770      	bx	lr
 800da50:	58024400 	.word	0x58024400
 800da54:	03d09000 	.word	0x03d09000
 800da58:	46000000 	.word	0x46000000
 800da5c:	4c742400 	.word	0x4c742400
 800da60:	4a742400 	.word	0x4a742400
 800da64:	4af42400 	.word	0x4af42400

0800da68 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b084      	sub	sp, #16
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
 800da70:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800da72:	2300      	movs	r3, #0
 800da74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800da76:	4b53      	ldr	r3, [pc, #332]	@ (800dbc4 <RCCEx_PLL2_Config+0x15c>)
 800da78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da7a:	f003 0303 	and.w	r3, r3, #3
 800da7e:	2b03      	cmp	r3, #3
 800da80:	d101      	bne.n	800da86 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800da82:	2301      	movs	r3, #1
 800da84:	e099      	b.n	800dbba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800da86:	4b4f      	ldr	r3, [pc, #316]	@ (800dbc4 <RCCEx_PLL2_Config+0x15c>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	4a4e      	ldr	r2, [pc, #312]	@ (800dbc4 <RCCEx_PLL2_Config+0x15c>)
 800da8c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800da90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800da92:	f7f6 fb51 	bl	8004138 <HAL_GetTick>
 800da96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800da98:	e008      	b.n	800daac <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800da9a:	f7f6 fb4d 	bl	8004138 <HAL_GetTick>
 800da9e:	4602      	mov	r2, r0
 800daa0:	68bb      	ldr	r3, [r7, #8]
 800daa2:	1ad3      	subs	r3, r2, r3
 800daa4:	2b02      	cmp	r3, #2
 800daa6:	d901      	bls.n	800daac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800daa8:	2303      	movs	r3, #3
 800daaa:	e086      	b.n	800dbba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800daac:	4b45      	ldr	r3, [pc, #276]	@ (800dbc4 <RCCEx_PLL2_Config+0x15c>)
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d1f0      	bne.n	800da9a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800dab8:	4b42      	ldr	r3, [pc, #264]	@ (800dbc4 <RCCEx_PLL2_Config+0x15c>)
 800daba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dabc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	031b      	lsls	r3, r3, #12
 800dac6:	493f      	ldr	r1, [pc, #252]	@ (800dbc4 <RCCEx_PLL2_Config+0x15c>)
 800dac8:	4313      	orrs	r3, r2
 800daca:	628b      	str	r3, [r1, #40]	@ 0x28
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	685b      	ldr	r3, [r3, #4]
 800dad0:	3b01      	subs	r3, #1
 800dad2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	689b      	ldr	r3, [r3, #8]
 800dada:	3b01      	subs	r3, #1
 800dadc:	025b      	lsls	r3, r3, #9
 800dade:	b29b      	uxth	r3, r3
 800dae0:	431a      	orrs	r2, r3
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	68db      	ldr	r3, [r3, #12]
 800dae6:	3b01      	subs	r3, #1
 800dae8:	041b      	lsls	r3, r3, #16
 800daea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800daee:	431a      	orrs	r2, r3
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	691b      	ldr	r3, [r3, #16]
 800daf4:	3b01      	subs	r3, #1
 800daf6:	061b      	lsls	r3, r3, #24
 800daf8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800dafc:	4931      	ldr	r1, [pc, #196]	@ (800dbc4 <RCCEx_PLL2_Config+0x15c>)
 800dafe:	4313      	orrs	r3, r2
 800db00:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800db02:	4b30      	ldr	r3, [pc, #192]	@ (800dbc4 <RCCEx_PLL2_Config+0x15c>)
 800db04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db06:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	695b      	ldr	r3, [r3, #20]
 800db0e:	492d      	ldr	r1, [pc, #180]	@ (800dbc4 <RCCEx_PLL2_Config+0x15c>)
 800db10:	4313      	orrs	r3, r2
 800db12:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800db14:	4b2b      	ldr	r3, [pc, #172]	@ (800dbc4 <RCCEx_PLL2_Config+0x15c>)
 800db16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db18:	f023 0220 	bic.w	r2, r3, #32
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	699b      	ldr	r3, [r3, #24]
 800db20:	4928      	ldr	r1, [pc, #160]	@ (800dbc4 <RCCEx_PLL2_Config+0x15c>)
 800db22:	4313      	orrs	r3, r2
 800db24:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800db26:	4b27      	ldr	r3, [pc, #156]	@ (800dbc4 <RCCEx_PLL2_Config+0x15c>)
 800db28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db2a:	4a26      	ldr	r2, [pc, #152]	@ (800dbc4 <RCCEx_PLL2_Config+0x15c>)
 800db2c:	f023 0310 	bic.w	r3, r3, #16
 800db30:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800db32:	4b24      	ldr	r3, [pc, #144]	@ (800dbc4 <RCCEx_PLL2_Config+0x15c>)
 800db34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800db36:	4b24      	ldr	r3, [pc, #144]	@ (800dbc8 <RCCEx_PLL2_Config+0x160>)
 800db38:	4013      	ands	r3, r2
 800db3a:	687a      	ldr	r2, [r7, #4]
 800db3c:	69d2      	ldr	r2, [r2, #28]
 800db3e:	00d2      	lsls	r2, r2, #3
 800db40:	4920      	ldr	r1, [pc, #128]	@ (800dbc4 <RCCEx_PLL2_Config+0x15c>)
 800db42:	4313      	orrs	r3, r2
 800db44:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800db46:	4b1f      	ldr	r3, [pc, #124]	@ (800dbc4 <RCCEx_PLL2_Config+0x15c>)
 800db48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db4a:	4a1e      	ldr	r2, [pc, #120]	@ (800dbc4 <RCCEx_PLL2_Config+0x15c>)
 800db4c:	f043 0310 	orr.w	r3, r3, #16
 800db50:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d106      	bne.n	800db66 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800db58:	4b1a      	ldr	r3, [pc, #104]	@ (800dbc4 <RCCEx_PLL2_Config+0x15c>)
 800db5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db5c:	4a19      	ldr	r2, [pc, #100]	@ (800dbc4 <RCCEx_PLL2_Config+0x15c>)
 800db5e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800db62:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800db64:	e00f      	b.n	800db86 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	2b01      	cmp	r3, #1
 800db6a:	d106      	bne.n	800db7a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800db6c:	4b15      	ldr	r3, [pc, #84]	@ (800dbc4 <RCCEx_PLL2_Config+0x15c>)
 800db6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db70:	4a14      	ldr	r2, [pc, #80]	@ (800dbc4 <RCCEx_PLL2_Config+0x15c>)
 800db72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800db76:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800db78:	e005      	b.n	800db86 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800db7a:	4b12      	ldr	r3, [pc, #72]	@ (800dbc4 <RCCEx_PLL2_Config+0x15c>)
 800db7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db7e:	4a11      	ldr	r2, [pc, #68]	@ (800dbc4 <RCCEx_PLL2_Config+0x15c>)
 800db80:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800db84:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800db86:	4b0f      	ldr	r3, [pc, #60]	@ (800dbc4 <RCCEx_PLL2_Config+0x15c>)
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	4a0e      	ldr	r2, [pc, #56]	@ (800dbc4 <RCCEx_PLL2_Config+0x15c>)
 800db8c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800db90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800db92:	f7f6 fad1 	bl	8004138 <HAL_GetTick>
 800db96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800db98:	e008      	b.n	800dbac <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800db9a:	f7f6 facd 	bl	8004138 <HAL_GetTick>
 800db9e:	4602      	mov	r2, r0
 800dba0:	68bb      	ldr	r3, [r7, #8]
 800dba2:	1ad3      	subs	r3, r2, r3
 800dba4:	2b02      	cmp	r3, #2
 800dba6:	d901      	bls.n	800dbac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800dba8:	2303      	movs	r3, #3
 800dbaa:	e006      	b.n	800dbba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dbac:	4b05      	ldr	r3, [pc, #20]	@ (800dbc4 <RCCEx_PLL2_Config+0x15c>)
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d0f0      	beq.n	800db9a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800dbb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbba:	4618      	mov	r0, r3
 800dbbc:	3710      	adds	r7, #16
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}
 800dbc2:	bf00      	nop
 800dbc4:	58024400 	.word	0x58024400
 800dbc8:	ffff0007 	.word	0xffff0007

0800dbcc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b084      	sub	sp, #16
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
 800dbd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dbda:	4b53      	ldr	r3, [pc, #332]	@ (800dd28 <RCCEx_PLL3_Config+0x15c>)
 800dbdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbde:	f003 0303 	and.w	r3, r3, #3
 800dbe2:	2b03      	cmp	r3, #3
 800dbe4:	d101      	bne.n	800dbea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800dbe6:	2301      	movs	r3, #1
 800dbe8:	e099      	b.n	800dd1e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800dbea:	4b4f      	ldr	r3, [pc, #316]	@ (800dd28 <RCCEx_PLL3_Config+0x15c>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	4a4e      	ldr	r2, [pc, #312]	@ (800dd28 <RCCEx_PLL3_Config+0x15c>)
 800dbf0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dbf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dbf6:	f7f6 fa9f 	bl	8004138 <HAL_GetTick>
 800dbfa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dbfc:	e008      	b.n	800dc10 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dbfe:	f7f6 fa9b 	bl	8004138 <HAL_GetTick>
 800dc02:	4602      	mov	r2, r0
 800dc04:	68bb      	ldr	r3, [r7, #8]
 800dc06:	1ad3      	subs	r3, r2, r3
 800dc08:	2b02      	cmp	r3, #2
 800dc0a:	d901      	bls.n	800dc10 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800dc0c:	2303      	movs	r3, #3
 800dc0e:	e086      	b.n	800dd1e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dc10:	4b45      	ldr	r3, [pc, #276]	@ (800dd28 <RCCEx_PLL3_Config+0x15c>)
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d1f0      	bne.n	800dbfe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800dc1c:	4b42      	ldr	r3, [pc, #264]	@ (800dd28 <RCCEx_PLL3_Config+0x15c>)
 800dc1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc20:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	051b      	lsls	r3, r3, #20
 800dc2a:	493f      	ldr	r1, [pc, #252]	@ (800dd28 <RCCEx_PLL3_Config+0x15c>)
 800dc2c:	4313      	orrs	r3, r2
 800dc2e:	628b      	str	r3, [r1, #40]	@ 0x28
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	685b      	ldr	r3, [r3, #4]
 800dc34:	3b01      	subs	r3, #1
 800dc36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	689b      	ldr	r3, [r3, #8]
 800dc3e:	3b01      	subs	r3, #1
 800dc40:	025b      	lsls	r3, r3, #9
 800dc42:	b29b      	uxth	r3, r3
 800dc44:	431a      	orrs	r2, r3
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	68db      	ldr	r3, [r3, #12]
 800dc4a:	3b01      	subs	r3, #1
 800dc4c:	041b      	lsls	r3, r3, #16
 800dc4e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800dc52:	431a      	orrs	r2, r3
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	691b      	ldr	r3, [r3, #16]
 800dc58:	3b01      	subs	r3, #1
 800dc5a:	061b      	lsls	r3, r3, #24
 800dc5c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800dc60:	4931      	ldr	r1, [pc, #196]	@ (800dd28 <RCCEx_PLL3_Config+0x15c>)
 800dc62:	4313      	orrs	r3, r2
 800dc64:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800dc66:	4b30      	ldr	r3, [pc, #192]	@ (800dd28 <RCCEx_PLL3_Config+0x15c>)
 800dc68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc6a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	695b      	ldr	r3, [r3, #20]
 800dc72:	492d      	ldr	r1, [pc, #180]	@ (800dd28 <RCCEx_PLL3_Config+0x15c>)
 800dc74:	4313      	orrs	r3, r2
 800dc76:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800dc78:	4b2b      	ldr	r3, [pc, #172]	@ (800dd28 <RCCEx_PLL3_Config+0x15c>)
 800dc7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc7c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	699b      	ldr	r3, [r3, #24]
 800dc84:	4928      	ldr	r1, [pc, #160]	@ (800dd28 <RCCEx_PLL3_Config+0x15c>)
 800dc86:	4313      	orrs	r3, r2
 800dc88:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800dc8a:	4b27      	ldr	r3, [pc, #156]	@ (800dd28 <RCCEx_PLL3_Config+0x15c>)
 800dc8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc8e:	4a26      	ldr	r2, [pc, #152]	@ (800dd28 <RCCEx_PLL3_Config+0x15c>)
 800dc90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dc94:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800dc96:	4b24      	ldr	r3, [pc, #144]	@ (800dd28 <RCCEx_PLL3_Config+0x15c>)
 800dc98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dc9a:	4b24      	ldr	r3, [pc, #144]	@ (800dd2c <RCCEx_PLL3_Config+0x160>)
 800dc9c:	4013      	ands	r3, r2
 800dc9e:	687a      	ldr	r2, [r7, #4]
 800dca0:	69d2      	ldr	r2, [r2, #28]
 800dca2:	00d2      	lsls	r2, r2, #3
 800dca4:	4920      	ldr	r1, [pc, #128]	@ (800dd28 <RCCEx_PLL3_Config+0x15c>)
 800dca6:	4313      	orrs	r3, r2
 800dca8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800dcaa:	4b1f      	ldr	r3, [pc, #124]	@ (800dd28 <RCCEx_PLL3_Config+0x15c>)
 800dcac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcae:	4a1e      	ldr	r2, [pc, #120]	@ (800dd28 <RCCEx_PLL3_Config+0x15c>)
 800dcb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dcb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d106      	bne.n	800dcca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800dcbc:	4b1a      	ldr	r3, [pc, #104]	@ (800dd28 <RCCEx_PLL3_Config+0x15c>)
 800dcbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcc0:	4a19      	ldr	r2, [pc, #100]	@ (800dd28 <RCCEx_PLL3_Config+0x15c>)
 800dcc2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800dcc6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dcc8:	e00f      	b.n	800dcea <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	2b01      	cmp	r3, #1
 800dcce:	d106      	bne.n	800dcde <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800dcd0:	4b15      	ldr	r3, [pc, #84]	@ (800dd28 <RCCEx_PLL3_Config+0x15c>)
 800dcd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcd4:	4a14      	ldr	r2, [pc, #80]	@ (800dd28 <RCCEx_PLL3_Config+0x15c>)
 800dcd6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800dcda:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dcdc:	e005      	b.n	800dcea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800dcde:	4b12      	ldr	r3, [pc, #72]	@ (800dd28 <RCCEx_PLL3_Config+0x15c>)
 800dce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dce2:	4a11      	ldr	r2, [pc, #68]	@ (800dd28 <RCCEx_PLL3_Config+0x15c>)
 800dce4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800dce8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800dcea:	4b0f      	ldr	r3, [pc, #60]	@ (800dd28 <RCCEx_PLL3_Config+0x15c>)
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	4a0e      	ldr	r2, [pc, #56]	@ (800dd28 <RCCEx_PLL3_Config+0x15c>)
 800dcf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dcf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dcf6:	f7f6 fa1f 	bl	8004138 <HAL_GetTick>
 800dcfa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dcfc:	e008      	b.n	800dd10 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dcfe:	f7f6 fa1b 	bl	8004138 <HAL_GetTick>
 800dd02:	4602      	mov	r2, r0
 800dd04:	68bb      	ldr	r3, [r7, #8]
 800dd06:	1ad3      	subs	r3, r2, r3
 800dd08:	2b02      	cmp	r3, #2
 800dd0a:	d901      	bls.n	800dd10 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800dd0c:	2303      	movs	r3, #3
 800dd0e:	e006      	b.n	800dd1e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dd10:	4b05      	ldr	r3, [pc, #20]	@ (800dd28 <RCCEx_PLL3_Config+0x15c>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d0f0      	beq.n	800dcfe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800dd1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd1e:	4618      	mov	r0, r3
 800dd20:	3710      	adds	r7, #16
 800dd22:	46bd      	mov	sp, r7
 800dd24:	bd80      	pop	{r7, pc}
 800dd26:	bf00      	nop
 800dd28:	58024400 	.word	0x58024400
 800dd2c:	ffff0007 	.word	0xffff0007

0800dd30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b082      	sub	sp, #8
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d101      	bne.n	800dd42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800dd3e:	2301      	movs	r3, #1
 800dd40:	e049      	b.n	800ddd6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dd48:	b2db      	uxtb	r3, r3
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d106      	bne.n	800dd5c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	2200      	movs	r2, #0
 800dd52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	f7f5 fed4 	bl	8003b04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	2202      	movs	r2, #2
 800dd60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681a      	ldr	r2, [r3, #0]
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	3304      	adds	r3, #4
 800dd6c:	4619      	mov	r1, r3
 800dd6e:	4610      	mov	r0, r2
 800dd70:	f000 fbf0 	bl	800e554 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2201      	movs	r2, #1
 800dd78:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	2201      	movs	r2, #1
 800dd80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	2201      	movs	r2, #1
 800dd88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	2201      	movs	r2, #1
 800dd90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2201      	movs	r2, #1
 800dd98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2201      	movs	r2, #1
 800dda0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	2201      	movs	r2, #1
 800dda8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	2201      	movs	r2, #1
 800ddb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2201      	movs	r2, #1
 800ddb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2201      	movs	r2, #1
 800ddc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	2201      	movs	r2, #1
 800ddc8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	2201      	movs	r2, #1
 800ddd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ddd4:	2300      	movs	r3, #0
}
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	3708      	adds	r7, #8
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}
	...

0800dde0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b084      	sub	sp, #16
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
 800dde8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ddea:	683b      	ldr	r3, [r7, #0]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d109      	bne.n	800de04 <HAL_TIM_PWM_Start+0x24>
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ddf6:	b2db      	uxtb	r3, r3
 800ddf8:	2b01      	cmp	r3, #1
 800ddfa:	bf14      	ite	ne
 800ddfc:	2301      	movne	r3, #1
 800ddfe:	2300      	moveq	r3, #0
 800de00:	b2db      	uxtb	r3, r3
 800de02:	e03c      	b.n	800de7e <HAL_TIM_PWM_Start+0x9e>
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	2b04      	cmp	r3, #4
 800de08:	d109      	bne.n	800de1e <HAL_TIM_PWM_Start+0x3e>
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800de10:	b2db      	uxtb	r3, r3
 800de12:	2b01      	cmp	r3, #1
 800de14:	bf14      	ite	ne
 800de16:	2301      	movne	r3, #1
 800de18:	2300      	moveq	r3, #0
 800de1a:	b2db      	uxtb	r3, r3
 800de1c:	e02f      	b.n	800de7e <HAL_TIM_PWM_Start+0x9e>
 800de1e:	683b      	ldr	r3, [r7, #0]
 800de20:	2b08      	cmp	r3, #8
 800de22:	d109      	bne.n	800de38 <HAL_TIM_PWM_Start+0x58>
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800de2a:	b2db      	uxtb	r3, r3
 800de2c:	2b01      	cmp	r3, #1
 800de2e:	bf14      	ite	ne
 800de30:	2301      	movne	r3, #1
 800de32:	2300      	moveq	r3, #0
 800de34:	b2db      	uxtb	r3, r3
 800de36:	e022      	b.n	800de7e <HAL_TIM_PWM_Start+0x9e>
 800de38:	683b      	ldr	r3, [r7, #0]
 800de3a:	2b0c      	cmp	r3, #12
 800de3c:	d109      	bne.n	800de52 <HAL_TIM_PWM_Start+0x72>
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800de44:	b2db      	uxtb	r3, r3
 800de46:	2b01      	cmp	r3, #1
 800de48:	bf14      	ite	ne
 800de4a:	2301      	movne	r3, #1
 800de4c:	2300      	moveq	r3, #0
 800de4e:	b2db      	uxtb	r3, r3
 800de50:	e015      	b.n	800de7e <HAL_TIM_PWM_Start+0x9e>
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	2b10      	cmp	r3, #16
 800de56:	d109      	bne.n	800de6c <HAL_TIM_PWM_Start+0x8c>
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800de5e:	b2db      	uxtb	r3, r3
 800de60:	2b01      	cmp	r3, #1
 800de62:	bf14      	ite	ne
 800de64:	2301      	movne	r3, #1
 800de66:	2300      	moveq	r3, #0
 800de68:	b2db      	uxtb	r3, r3
 800de6a:	e008      	b.n	800de7e <HAL_TIM_PWM_Start+0x9e>
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800de72:	b2db      	uxtb	r3, r3
 800de74:	2b01      	cmp	r3, #1
 800de76:	bf14      	ite	ne
 800de78:	2301      	movne	r3, #1
 800de7a:	2300      	moveq	r3, #0
 800de7c:	b2db      	uxtb	r3, r3
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d001      	beq.n	800de86 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800de82:	2301      	movs	r3, #1
 800de84:	e0ab      	b.n	800dfde <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800de86:	683b      	ldr	r3, [r7, #0]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d104      	bne.n	800de96 <HAL_TIM_PWM_Start+0xb6>
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	2202      	movs	r2, #2
 800de90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800de94:	e023      	b.n	800dede <HAL_TIM_PWM_Start+0xfe>
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	2b04      	cmp	r3, #4
 800de9a:	d104      	bne.n	800dea6 <HAL_TIM_PWM_Start+0xc6>
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	2202      	movs	r2, #2
 800dea0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800dea4:	e01b      	b.n	800dede <HAL_TIM_PWM_Start+0xfe>
 800dea6:	683b      	ldr	r3, [r7, #0]
 800dea8:	2b08      	cmp	r3, #8
 800deaa:	d104      	bne.n	800deb6 <HAL_TIM_PWM_Start+0xd6>
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2202      	movs	r2, #2
 800deb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800deb4:	e013      	b.n	800dede <HAL_TIM_PWM_Start+0xfe>
 800deb6:	683b      	ldr	r3, [r7, #0]
 800deb8:	2b0c      	cmp	r3, #12
 800deba:	d104      	bne.n	800dec6 <HAL_TIM_PWM_Start+0xe6>
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2202      	movs	r2, #2
 800dec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800dec4:	e00b      	b.n	800dede <HAL_TIM_PWM_Start+0xfe>
 800dec6:	683b      	ldr	r3, [r7, #0]
 800dec8:	2b10      	cmp	r3, #16
 800deca:	d104      	bne.n	800ded6 <HAL_TIM_PWM_Start+0xf6>
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2202      	movs	r2, #2
 800ded0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ded4:	e003      	b.n	800dede <HAL_TIM_PWM_Start+0xfe>
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	2202      	movs	r2, #2
 800deda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	2201      	movs	r2, #1
 800dee4:	6839      	ldr	r1, [r7, #0]
 800dee6:	4618      	mov	r0, r3
 800dee8:	f000 ffe6 	bl	800eeb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	4a3d      	ldr	r2, [pc, #244]	@ (800dfe8 <HAL_TIM_PWM_Start+0x208>)
 800def2:	4293      	cmp	r3, r2
 800def4:	d013      	beq.n	800df1e <HAL_TIM_PWM_Start+0x13e>
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	4a3c      	ldr	r2, [pc, #240]	@ (800dfec <HAL_TIM_PWM_Start+0x20c>)
 800defc:	4293      	cmp	r3, r2
 800defe:	d00e      	beq.n	800df1e <HAL_TIM_PWM_Start+0x13e>
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	4a3a      	ldr	r2, [pc, #232]	@ (800dff0 <HAL_TIM_PWM_Start+0x210>)
 800df06:	4293      	cmp	r3, r2
 800df08:	d009      	beq.n	800df1e <HAL_TIM_PWM_Start+0x13e>
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	4a39      	ldr	r2, [pc, #228]	@ (800dff4 <HAL_TIM_PWM_Start+0x214>)
 800df10:	4293      	cmp	r3, r2
 800df12:	d004      	beq.n	800df1e <HAL_TIM_PWM_Start+0x13e>
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	4a37      	ldr	r2, [pc, #220]	@ (800dff8 <HAL_TIM_PWM_Start+0x218>)
 800df1a:	4293      	cmp	r3, r2
 800df1c:	d101      	bne.n	800df22 <HAL_TIM_PWM_Start+0x142>
 800df1e:	2301      	movs	r3, #1
 800df20:	e000      	b.n	800df24 <HAL_TIM_PWM_Start+0x144>
 800df22:	2300      	movs	r3, #0
 800df24:	2b00      	cmp	r3, #0
 800df26:	d007      	beq.n	800df38 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800df36:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	4a2a      	ldr	r2, [pc, #168]	@ (800dfe8 <HAL_TIM_PWM_Start+0x208>)
 800df3e:	4293      	cmp	r3, r2
 800df40:	d02c      	beq.n	800df9c <HAL_TIM_PWM_Start+0x1bc>
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800df4a:	d027      	beq.n	800df9c <HAL_TIM_PWM_Start+0x1bc>
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	4a2a      	ldr	r2, [pc, #168]	@ (800dffc <HAL_TIM_PWM_Start+0x21c>)
 800df52:	4293      	cmp	r3, r2
 800df54:	d022      	beq.n	800df9c <HAL_TIM_PWM_Start+0x1bc>
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	4a29      	ldr	r2, [pc, #164]	@ (800e000 <HAL_TIM_PWM_Start+0x220>)
 800df5c:	4293      	cmp	r3, r2
 800df5e:	d01d      	beq.n	800df9c <HAL_TIM_PWM_Start+0x1bc>
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	4a27      	ldr	r2, [pc, #156]	@ (800e004 <HAL_TIM_PWM_Start+0x224>)
 800df66:	4293      	cmp	r3, r2
 800df68:	d018      	beq.n	800df9c <HAL_TIM_PWM_Start+0x1bc>
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	4a1f      	ldr	r2, [pc, #124]	@ (800dfec <HAL_TIM_PWM_Start+0x20c>)
 800df70:	4293      	cmp	r3, r2
 800df72:	d013      	beq.n	800df9c <HAL_TIM_PWM_Start+0x1bc>
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	4a23      	ldr	r2, [pc, #140]	@ (800e008 <HAL_TIM_PWM_Start+0x228>)
 800df7a:	4293      	cmp	r3, r2
 800df7c:	d00e      	beq.n	800df9c <HAL_TIM_PWM_Start+0x1bc>
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	4a1b      	ldr	r2, [pc, #108]	@ (800dff0 <HAL_TIM_PWM_Start+0x210>)
 800df84:	4293      	cmp	r3, r2
 800df86:	d009      	beq.n	800df9c <HAL_TIM_PWM_Start+0x1bc>
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	4a1f      	ldr	r2, [pc, #124]	@ (800e00c <HAL_TIM_PWM_Start+0x22c>)
 800df8e:	4293      	cmp	r3, r2
 800df90:	d004      	beq.n	800df9c <HAL_TIM_PWM_Start+0x1bc>
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	4a1e      	ldr	r2, [pc, #120]	@ (800e010 <HAL_TIM_PWM_Start+0x230>)
 800df98:	4293      	cmp	r3, r2
 800df9a:	d115      	bne.n	800dfc8 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	689a      	ldr	r2, [r3, #8]
 800dfa2:	4b1c      	ldr	r3, [pc, #112]	@ (800e014 <HAL_TIM_PWM_Start+0x234>)
 800dfa4:	4013      	ands	r3, r2
 800dfa6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	2b06      	cmp	r3, #6
 800dfac:	d015      	beq.n	800dfda <HAL_TIM_PWM_Start+0x1fa>
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dfb4:	d011      	beq.n	800dfda <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	681a      	ldr	r2, [r3, #0]
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	f042 0201 	orr.w	r2, r2, #1
 800dfc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dfc6:	e008      	b.n	800dfda <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	681a      	ldr	r2, [r3, #0]
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	f042 0201 	orr.w	r2, r2, #1
 800dfd6:	601a      	str	r2, [r3, #0]
 800dfd8:	e000      	b.n	800dfdc <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dfda:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800dfdc:	2300      	movs	r3, #0
}
 800dfde:	4618      	mov	r0, r3
 800dfe0:	3710      	adds	r7, #16
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	bd80      	pop	{r7, pc}
 800dfe6:	bf00      	nop
 800dfe8:	40010000 	.word	0x40010000
 800dfec:	40010400 	.word	0x40010400
 800dff0:	40014000 	.word	0x40014000
 800dff4:	40014400 	.word	0x40014400
 800dff8:	40014800 	.word	0x40014800
 800dffc:	40000400 	.word	0x40000400
 800e000:	40000800 	.word	0x40000800
 800e004:	40000c00 	.word	0x40000c00
 800e008:	40001800 	.word	0x40001800
 800e00c:	4000e000 	.word	0x4000e000
 800e010:	4000e400 	.word	0x4000e400
 800e014:	00010007 	.word	0x00010007

0800e018 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e018:	b580      	push	{r7, lr}
 800e01a:	b082      	sub	sp, #8
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
 800e020:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	2200      	movs	r2, #0
 800e028:	6839      	ldr	r1, [r7, #0]
 800e02a:	4618      	mov	r0, r3
 800e02c:	f000 ff44 	bl	800eeb8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	4a3e      	ldr	r2, [pc, #248]	@ (800e130 <HAL_TIM_PWM_Stop+0x118>)
 800e036:	4293      	cmp	r3, r2
 800e038:	d013      	beq.n	800e062 <HAL_TIM_PWM_Stop+0x4a>
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	4a3d      	ldr	r2, [pc, #244]	@ (800e134 <HAL_TIM_PWM_Stop+0x11c>)
 800e040:	4293      	cmp	r3, r2
 800e042:	d00e      	beq.n	800e062 <HAL_TIM_PWM_Stop+0x4a>
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	4a3b      	ldr	r2, [pc, #236]	@ (800e138 <HAL_TIM_PWM_Stop+0x120>)
 800e04a:	4293      	cmp	r3, r2
 800e04c:	d009      	beq.n	800e062 <HAL_TIM_PWM_Stop+0x4a>
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	4a3a      	ldr	r2, [pc, #232]	@ (800e13c <HAL_TIM_PWM_Stop+0x124>)
 800e054:	4293      	cmp	r3, r2
 800e056:	d004      	beq.n	800e062 <HAL_TIM_PWM_Stop+0x4a>
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	4a38      	ldr	r2, [pc, #224]	@ (800e140 <HAL_TIM_PWM_Stop+0x128>)
 800e05e:	4293      	cmp	r3, r2
 800e060:	d101      	bne.n	800e066 <HAL_TIM_PWM_Stop+0x4e>
 800e062:	2301      	movs	r3, #1
 800e064:	e000      	b.n	800e068 <HAL_TIM_PWM_Stop+0x50>
 800e066:	2300      	movs	r3, #0
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d017      	beq.n	800e09c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	6a1a      	ldr	r2, [r3, #32]
 800e072:	f241 1311 	movw	r3, #4369	@ 0x1111
 800e076:	4013      	ands	r3, r2
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d10f      	bne.n	800e09c <HAL_TIM_PWM_Stop+0x84>
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	6a1a      	ldr	r2, [r3, #32]
 800e082:	f240 4344 	movw	r3, #1092	@ 0x444
 800e086:	4013      	ands	r3, r2
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d107      	bne.n	800e09c <HAL_TIM_PWM_Stop+0x84>
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e09a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	6a1a      	ldr	r2, [r3, #32]
 800e0a2:	f241 1311 	movw	r3, #4369	@ 0x1111
 800e0a6:	4013      	ands	r3, r2
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d10f      	bne.n	800e0cc <HAL_TIM_PWM_Stop+0xb4>
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	6a1a      	ldr	r2, [r3, #32]
 800e0b2:	f240 4344 	movw	r3, #1092	@ 0x444
 800e0b6:	4013      	ands	r3, r2
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d107      	bne.n	800e0cc <HAL_TIM_PWM_Stop+0xb4>
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	681a      	ldr	r2, [r3, #0]
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	f022 0201 	bic.w	r2, r2, #1
 800e0ca:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d104      	bne.n	800e0dc <HAL_TIM_PWM_Stop+0xc4>
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2201      	movs	r2, #1
 800e0d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e0da:	e023      	b.n	800e124 <HAL_TIM_PWM_Stop+0x10c>
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	2b04      	cmp	r3, #4
 800e0e0:	d104      	bne.n	800e0ec <HAL_TIM_PWM_Stop+0xd4>
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	2201      	movs	r2, #1
 800e0e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e0ea:	e01b      	b.n	800e124 <HAL_TIM_PWM_Stop+0x10c>
 800e0ec:	683b      	ldr	r3, [r7, #0]
 800e0ee:	2b08      	cmp	r3, #8
 800e0f0:	d104      	bne.n	800e0fc <HAL_TIM_PWM_Stop+0xe4>
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	2201      	movs	r2, #1
 800e0f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e0fa:	e013      	b.n	800e124 <HAL_TIM_PWM_Stop+0x10c>
 800e0fc:	683b      	ldr	r3, [r7, #0]
 800e0fe:	2b0c      	cmp	r3, #12
 800e100:	d104      	bne.n	800e10c <HAL_TIM_PWM_Stop+0xf4>
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	2201      	movs	r2, #1
 800e106:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e10a:	e00b      	b.n	800e124 <HAL_TIM_PWM_Stop+0x10c>
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	2b10      	cmp	r3, #16
 800e110:	d104      	bne.n	800e11c <HAL_TIM_PWM_Stop+0x104>
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2201      	movs	r2, #1
 800e116:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e11a:	e003      	b.n	800e124 <HAL_TIM_PWM_Stop+0x10c>
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	2201      	movs	r2, #1
 800e120:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800e124:	2300      	movs	r3, #0
}
 800e126:	4618      	mov	r0, r3
 800e128:	3708      	adds	r7, #8
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bd80      	pop	{r7, pc}
 800e12e:	bf00      	nop
 800e130:	40010000 	.word	0x40010000
 800e134:	40010400 	.word	0x40010400
 800e138:	40014000 	.word	0x40014000
 800e13c:	40014400 	.word	0x40014400
 800e140:	40014800 	.word	0x40014800

0800e144 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b082      	sub	sp, #8
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d101      	bne.n	800e156 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800e152:	2301      	movs	r3, #1
 800e154:	e049      	b.n	800e1ea <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e15c:	b2db      	uxtb	r3, r3
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d106      	bne.n	800e170 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	2200      	movs	r2, #0
 800e166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800e16a:	6878      	ldr	r0, [r7, #4]
 800e16c:	f7f5 fd18 	bl	8003ba0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2202      	movs	r2, #2
 800e174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	681a      	ldr	r2, [r3, #0]
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	3304      	adds	r3, #4
 800e180:	4619      	mov	r1, r3
 800e182:	4610      	mov	r0, r2
 800e184:	f000 f9e6 	bl	800e554 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	2201      	movs	r2, #1
 800e18c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2201      	movs	r2, #1
 800e194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2201      	movs	r2, #1
 800e19c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2201      	movs	r2, #1
 800e1a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	2201      	movs	r2, #1
 800e1ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2201      	movs	r2, #1
 800e1b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2201      	movs	r2, #1
 800e1bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2201      	movs	r2, #1
 800e1c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2201      	movs	r2, #1
 800e1cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	2201      	movs	r2, #1
 800e1d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	2201      	movs	r2, #1
 800e1dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	2201      	movs	r2, #1
 800e1e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e1e8:	2300      	movs	r3, #0
}
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	3708      	adds	r7, #8
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	bd80      	pop	{r7, pc}

0800e1f2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800e1f2:	b580      	push	{r7, lr}
 800e1f4:	b086      	sub	sp, #24
 800e1f6:	af00      	add	r7, sp, #0
 800e1f8:	60f8      	str	r0, [r7, #12]
 800e1fa:	60b9      	str	r1, [r7, #8]
 800e1fc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e1fe:	2300      	movs	r3, #0
 800e200:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e208:	2b01      	cmp	r3, #1
 800e20a:	d101      	bne.n	800e210 <HAL_TIM_IC_ConfigChannel+0x1e>
 800e20c:	2302      	movs	r3, #2
 800e20e:	e088      	b.n	800e322 <HAL_TIM_IC_ConfigChannel+0x130>
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	2201      	movs	r2, #1
 800e214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d11b      	bne.n	800e256 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800e222:	68bb      	ldr	r3, [r7, #8]
 800e224:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800e226:	68bb      	ldr	r3, [r7, #8]
 800e228:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800e22a:	68bb      	ldr	r3, [r7, #8]
 800e22c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800e22e:	f000 fd0d 	bl	800ec4c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	699a      	ldr	r2, [r3, #24]
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	f022 020c 	bic.w	r2, r2, #12
 800e240:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	6999      	ldr	r1, [r3, #24]
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	689a      	ldr	r2, [r3, #8]
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	430a      	orrs	r2, r1
 800e252:	619a      	str	r2, [r3, #24]
 800e254:	e060      	b.n	800e318 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	2b04      	cmp	r3, #4
 800e25a:	d11c      	bne.n	800e296 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800e260:	68bb      	ldr	r3, [r7, #8]
 800e262:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800e264:	68bb      	ldr	r3, [r7, #8]
 800e266:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800e268:	68bb      	ldr	r3, [r7, #8]
 800e26a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800e26c:	f000 fd6e 	bl	800ed4c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	699a      	ldr	r2, [r3, #24]
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800e27e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	6999      	ldr	r1, [r3, #24]
 800e286:	68bb      	ldr	r3, [r7, #8]
 800e288:	689b      	ldr	r3, [r3, #8]
 800e28a:	021a      	lsls	r2, r3, #8
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	430a      	orrs	r2, r1
 800e292:	619a      	str	r2, [r3, #24]
 800e294:	e040      	b.n	800e318 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	2b08      	cmp	r3, #8
 800e29a:	d11b      	bne.n	800e2d4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800e2a0:	68bb      	ldr	r3, [r7, #8]
 800e2a2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800e2a4:	68bb      	ldr	r3, [r7, #8]
 800e2a6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800e2a8:	68bb      	ldr	r3, [r7, #8]
 800e2aa:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800e2ac:	f000 fd8b 	bl	800edc6 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	69da      	ldr	r2, [r3, #28]
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	f022 020c 	bic.w	r2, r2, #12
 800e2be:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	69d9      	ldr	r1, [r3, #28]
 800e2c6:	68bb      	ldr	r3, [r7, #8]
 800e2c8:	689a      	ldr	r2, [r3, #8]
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	430a      	orrs	r2, r1
 800e2d0:	61da      	str	r2, [r3, #28]
 800e2d2:	e021      	b.n	800e318 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	2b0c      	cmp	r3, #12
 800e2d8:	d11c      	bne.n	800e314 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800e2de:	68bb      	ldr	r3, [r7, #8]
 800e2e0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800e2e2:	68bb      	ldr	r3, [r7, #8]
 800e2e4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800e2e6:	68bb      	ldr	r3, [r7, #8]
 800e2e8:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800e2ea:	f000 fda8 	bl	800ee3e <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	69da      	ldr	r2, [r3, #28]
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800e2fc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	69d9      	ldr	r1, [r3, #28]
 800e304:	68bb      	ldr	r3, [r7, #8]
 800e306:	689b      	ldr	r3, [r3, #8]
 800e308:	021a      	lsls	r2, r3, #8
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	430a      	orrs	r2, r1
 800e310:	61da      	str	r2, [r3, #28]
 800e312:	e001      	b.n	800e318 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800e314:	2301      	movs	r3, #1
 800e316:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	2200      	movs	r2, #0
 800e31c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e320:	7dfb      	ldrb	r3, [r7, #23]
}
 800e322:	4618      	mov	r0, r3
 800e324:	3718      	adds	r7, #24
 800e326:	46bd      	mov	sp, r7
 800e328:	bd80      	pop	{r7, pc}
	...

0800e32c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b086      	sub	sp, #24
 800e330:	af00      	add	r7, sp, #0
 800e332:	60f8      	str	r0, [r7, #12]
 800e334:	60b9      	str	r1, [r7, #8]
 800e336:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e338:	2300      	movs	r3, #0
 800e33a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e342:	2b01      	cmp	r3, #1
 800e344:	d101      	bne.n	800e34a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e346:	2302      	movs	r3, #2
 800e348:	e0ff      	b.n	800e54a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	2201      	movs	r2, #1
 800e34e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	2b14      	cmp	r3, #20
 800e356:	f200 80f0 	bhi.w	800e53a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e35a:	a201      	add	r2, pc, #4	@ (adr r2, 800e360 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e35c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e360:	0800e3b5 	.word	0x0800e3b5
 800e364:	0800e53b 	.word	0x0800e53b
 800e368:	0800e53b 	.word	0x0800e53b
 800e36c:	0800e53b 	.word	0x0800e53b
 800e370:	0800e3f5 	.word	0x0800e3f5
 800e374:	0800e53b 	.word	0x0800e53b
 800e378:	0800e53b 	.word	0x0800e53b
 800e37c:	0800e53b 	.word	0x0800e53b
 800e380:	0800e437 	.word	0x0800e437
 800e384:	0800e53b 	.word	0x0800e53b
 800e388:	0800e53b 	.word	0x0800e53b
 800e38c:	0800e53b 	.word	0x0800e53b
 800e390:	0800e477 	.word	0x0800e477
 800e394:	0800e53b 	.word	0x0800e53b
 800e398:	0800e53b 	.word	0x0800e53b
 800e39c:	0800e53b 	.word	0x0800e53b
 800e3a0:	0800e4b9 	.word	0x0800e4b9
 800e3a4:	0800e53b 	.word	0x0800e53b
 800e3a8:	0800e53b 	.word	0x0800e53b
 800e3ac:	0800e53b 	.word	0x0800e53b
 800e3b0:	0800e4f9 	.word	0x0800e4f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	68b9      	ldr	r1, [r7, #8]
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	f000 f970 	bl	800e6a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	699a      	ldr	r2, [r3, #24]
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	f042 0208 	orr.w	r2, r2, #8
 800e3ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	699a      	ldr	r2, [r3, #24]
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	f022 0204 	bic.w	r2, r2, #4
 800e3de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	6999      	ldr	r1, [r3, #24]
 800e3e6:	68bb      	ldr	r3, [r7, #8]
 800e3e8:	691a      	ldr	r2, [r3, #16]
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	430a      	orrs	r2, r1
 800e3f0:	619a      	str	r2, [r3, #24]
      break;
 800e3f2:	e0a5      	b.n	800e540 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	68b9      	ldr	r1, [r7, #8]
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f000 f9e0 	bl	800e7c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	699a      	ldr	r2, [r3, #24]
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e40e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	699a      	ldr	r2, [r3, #24]
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e41e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	6999      	ldr	r1, [r3, #24]
 800e426:	68bb      	ldr	r3, [r7, #8]
 800e428:	691b      	ldr	r3, [r3, #16]
 800e42a:	021a      	lsls	r2, r3, #8
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	430a      	orrs	r2, r1
 800e432:	619a      	str	r2, [r3, #24]
      break;
 800e434:	e084      	b.n	800e540 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	68b9      	ldr	r1, [r7, #8]
 800e43c:	4618      	mov	r0, r3
 800e43e:	f000 fa49 	bl	800e8d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	69da      	ldr	r2, [r3, #28]
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	f042 0208 	orr.w	r2, r2, #8
 800e450:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	69da      	ldr	r2, [r3, #28]
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	f022 0204 	bic.w	r2, r2, #4
 800e460:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	69d9      	ldr	r1, [r3, #28]
 800e468:	68bb      	ldr	r3, [r7, #8]
 800e46a:	691a      	ldr	r2, [r3, #16]
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	430a      	orrs	r2, r1
 800e472:	61da      	str	r2, [r3, #28]
      break;
 800e474:	e064      	b.n	800e540 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	68b9      	ldr	r1, [r7, #8]
 800e47c:	4618      	mov	r0, r3
 800e47e:	f000 fab1 	bl	800e9e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	69da      	ldr	r2, [r3, #28]
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e490:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	69da      	ldr	r2, [r3, #28]
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e4a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	69d9      	ldr	r1, [r3, #28]
 800e4a8:	68bb      	ldr	r3, [r7, #8]
 800e4aa:	691b      	ldr	r3, [r3, #16]
 800e4ac:	021a      	lsls	r2, r3, #8
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	430a      	orrs	r2, r1
 800e4b4:	61da      	str	r2, [r3, #28]
      break;
 800e4b6:	e043      	b.n	800e540 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	68b9      	ldr	r1, [r7, #8]
 800e4be:	4618      	mov	r0, r3
 800e4c0:	f000 fafa 	bl	800eab8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	f042 0208 	orr.w	r2, r2, #8
 800e4d2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	f022 0204 	bic.w	r2, r2, #4
 800e4e2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e4ea:	68bb      	ldr	r3, [r7, #8]
 800e4ec:	691a      	ldr	r2, [r3, #16]
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	430a      	orrs	r2, r1
 800e4f4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e4f6:	e023      	b.n	800e540 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	68b9      	ldr	r1, [r7, #8]
 800e4fe:	4618      	mov	r0, r3
 800e500:	f000 fb3e 	bl	800eb80 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e512:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e522:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e52a:	68bb      	ldr	r3, [r7, #8]
 800e52c:	691b      	ldr	r3, [r3, #16]
 800e52e:	021a      	lsls	r2, r3, #8
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	430a      	orrs	r2, r1
 800e536:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e538:	e002      	b.n	800e540 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e53a:	2301      	movs	r3, #1
 800e53c:	75fb      	strb	r3, [r7, #23]
      break;
 800e53e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	2200      	movs	r2, #0
 800e544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e548:	7dfb      	ldrb	r3, [r7, #23]
}
 800e54a:	4618      	mov	r0, r3
 800e54c:	3718      	adds	r7, #24
 800e54e:	46bd      	mov	sp, r7
 800e550:	bd80      	pop	{r7, pc}
 800e552:	bf00      	nop

0800e554 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e554:	b480      	push	{r7}
 800e556:	b085      	sub	sp, #20
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
 800e55c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	4a44      	ldr	r2, [pc, #272]	@ (800e678 <TIM_Base_SetConfig+0x124>)
 800e568:	4293      	cmp	r3, r2
 800e56a:	d013      	beq.n	800e594 <TIM_Base_SetConfig+0x40>
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e572:	d00f      	beq.n	800e594 <TIM_Base_SetConfig+0x40>
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	4a41      	ldr	r2, [pc, #260]	@ (800e67c <TIM_Base_SetConfig+0x128>)
 800e578:	4293      	cmp	r3, r2
 800e57a:	d00b      	beq.n	800e594 <TIM_Base_SetConfig+0x40>
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	4a40      	ldr	r2, [pc, #256]	@ (800e680 <TIM_Base_SetConfig+0x12c>)
 800e580:	4293      	cmp	r3, r2
 800e582:	d007      	beq.n	800e594 <TIM_Base_SetConfig+0x40>
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	4a3f      	ldr	r2, [pc, #252]	@ (800e684 <TIM_Base_SetConfig+0x130>)
 800e588:	4293      	cmp	r3, r2
 800e58a:	d003      	beq.n	800e594 <TIM_Base_SetConfig+0x40>
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	4a3e      	ldr	r2, [pc, #248]	@ (800e688 <TIM_Base_SetConfig+0x134>)
 800e590:	4293      	cmp	r3, r2
 800e592:	d108      	bne.n	800e5a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e59a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e59c:	683b      	ldr	r3, [r7, #0]
 800e59e:	685b      	ldr	r3, [r3, #4]
 800e5a0:	68fa      	ldr	r2, [r7, #12]
 800e5a2:	4313      	orrs	r3, r2
 800e5a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	4a33      	ldr	r2, [pc, #204]	@ (800e678 <TIM_Base_SetConfig+0x124>)
 800e5aa:	4293      	cmp	r3, r2
 800e5ac:	d027      	beq.n	800e5fe <TIM_Base_SetConfig+0xaa>
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e5b4:	d023      	beq.n	800e5fe <TIM_Base_SetConfig+0xaa>
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	4a30      	ldr	r2, [pc, #192]	@ (800e67c <TIM_Base_SetConfig+0x128>)
 800e5ba:	4293      	cmp	r3, r2
 800e5bc:	d01f      	beq.n	800e5fe <TIM_Base_SetConfig+0xaa>
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	4a2f      	ldr	r2, [pc, #188]	@ (800e680 <TIM_Base_SetConfig+0x12c>)
 800e5c2:	4293      	cmp	r3, r2
 800e5c4:	d01b      	beq.n	800e5fe <TIM_Base_SetConfig+0xaa>
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	4a2e      	ldr	r2, [pc, #184]	@ (800e684 <TIM_Base_SetConfig+0x130>)
 800e5ca:	4293      	cmp	r3, r2
 800e5cc:	d017      	beq.n	800e5fe <TIM_Base_SetConfig+0xaa>
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	4a2d      	ldr	r2, [pc, #180]	@ (800e688 <TIM_Base_SetConfig+0x134>)
 800e5d2:	4293      	cmp	r3, r2
 800e5d4:	d013      	beq.n	800e5fe <TIM_Base_SetConfig+0xaa>
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	4a2c      	ldr	r2, [pc, #176]	@ (800e68c <TIM_Base_SetConfig+0x138>)
 800e5da:	4293      	cmp	r3, r2
 800e5dc:	d00f      	beq.n	800e5fe <TIM_Base_SetConfig+0xaa>
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	4a2b      	ldr	r2, [pc, #172]	@ (800e690 <TIM_Base_SetConfig+0x13c>)
 800e5e2:	4293      	cmp	r3, r2
 800e5e4:	d00b      	beq.n	800e5fe <TIM_Base_SetConfig+0xaa>
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	4a2a      	ldr	r2, [pc, #168]	@ (800e694 <TIM_Base_SetConfig+0x140>)
 800e5ea:	4293      	cmp	r3, r2
 800e5ec:	d007      	beq.n	800e5fe <TIM_Base_SetConfig+0xaa>
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	4a29      	ldr	r2, [pc, #164]	@ (800e698 <TIM_Base_SetConfig+0x144>)
 800e5f2:	4293      	cmp	r3, r2
 800e5f4:	d003      	beq.n	800e5fe <TIM_Base_SetConfig+0xaa>
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	4a28      	ldr	r2, [pc, #160]	@ (800e69c <TIM_Base_SetConfig+0x148>)
 800e5fa:	4293      	cmp	r3, r2
 800e5fc:	d108      	bne.n	800e610 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e604:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e606:	683b      	ldr	r3, [r7, #0]
 800e608:	68db      	ldr	r3, [r3, #12]
 800e60a:	68fa      	ldr	r2, [r7, #12]
 800e60c:	4313      	orrs	r3, r2
 800e60e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e616:	683b      	ldr	r3, [r7, #0]
 800e618:	695b      	ldr	r3, [r3, #20]
 800e61a:	4313      	orrs	r3, r2
 800e61c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	68fa      	ldr	r2, [r7, #12]
 800e622:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e624:	683b      	ldr	r3, [r7, #0]
 800e626:	689a      	ldr	r2, [r3, #8]
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e62c:	683b      	ldr	r3, [r7, #0]
 800e62e:	681a      	ldr	r2, [r3, #0]
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	4a10      	ldr	r2, [pc, #64]	@ (800e678 <TIM_Base_SetConfig+0x124>)
 800e638:	4293      	cmp	r3, r2
 800e63a:	d00f      	beq.n	800e65c <TIM_Base_SetConfig+0x108>
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	4a12      	ldr	r2, [pc, #72]	@ (800e688 <TIM_Base_SetConfig+0x134>)
 800e640:	4293      	cmp	r3, r2
 800e642:	d00b      	beq.n	800e65c <TIM_Base_SetConfig+0x108>
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	4a11      	ldr	r2, [pc, #68]	@ (800e68c <TIM_Base_SetConfig+0x138>)
 800e648:	4293      	cmp	r3, r2
 800e64a:	d007      	beq.n	800e65c <TIM_Base_SetConfig+0x108>
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	4a10      	ldr	r2, [pc, #64]	@ (800e690 <TIM_Base_SetConfig+0x13c>)
 800e650:	4293      	cmp	r3, r2
 800e652:	d003      	beq.n	800e65c <TIM_Base_SetConfig+0x108>
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	4a0f      	ldr	r2, [pc, #60]	@ (800e694 <TIM_Base_SetConfig+0x140>)
 800e658:	4293      	cmp	r3, r2
 800e65a:	d103      	bne.n	800e664 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e65c:	683b      	ldr	r3, [r7, #0]
 800e65e:	691a      	ldr	r2, [r3, #16]
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	2201      	movs	r2, #1
 800e668:	615a      	str	r2, [r3, #20]
}
 800e66a:	bf00      	nop
 800e66c:	3714      	adds	r7, #20
 800e66e:	46bd      	mov	sp, r7
 800e670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e674:	4770      	bx	lr
 800e676:	bf00      	nop
 800e678:	40010000 	.word	0x40010000
 800e67c:	40000400 	.word	0x40000400
 800e680:	40000800 	.word	0x40000800
 800e684:	40000c00 	.word	0x40000c00
 800e688:	40010400 	.word	0x40010400
 800e68c:	40014000 	.word	0x40014000
 800e690:	40014400 	.word	0x40014400
 800e694:	40014800 	.word	0x40014800
 800e698:	4000e000 	.word	0x4000e000
 800e69c:	4000e400 	.word	0x4000e400

0800e6a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e6a0:	b480      	push	{r7}
 800e6a2:	b087      	sub	sp, #28
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
 800e6a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	6a1b      	ldr	r3, [r3, #32]
 800e6ae:	f023 0201 	bic.w	r2, r3, #1
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	6a1b      	ldr	r3, [r3, #32]
 800e6ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	685b      	ldr	r3, [r3, #4]
 800e6c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	699b      	ldr	r3, [r3, #24]
 800e6c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e6c8:	68fa      	ldr	r2, [r7, #12]
 800e6ca:	4b37      	ldr	r3, [pc, #220]	@ (800e7a8 <TIM_OC1_SetConfig+0x108>)
 800e6cc:	4013      	ands	r3, r2
 800e6ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	f023 0303 	bic.w	r3, r3, #3
 800e6d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e6d8:	683b      	ldr	r3, [r7, #0]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	68fa      	ldr	r2, [r7, #12]
 800e6de:	4313      	orrs	r3, r2
 800e6e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e6e2:	697b      	ldr	r3, [r7, #20]
 800e6e4:	f023 0302 	bic.w	r3, r3, #2
 800e6e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e6ea:	683b      	ldr	r3, [r7, #0]
 800e6ec:	689b      	ldr	r3, [r3, #8]
 800e6ee:	697a      	ldr	r2, [r7, #20]
 800e6f0:	4313      	orrs	r3, r2
 800e6f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	4a2d      	ldr	r2, [pc, #180]	@ (800e7ac <TIM_OC1_SetConfig+0x10c>)
 800e6f8:	4293      	cmp	r3, r2
 800e6fa:	d00f      	beq.n	800e71c <TIM_OC1_SetConfig+0x7c>
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	4a2c      	ldr	r2, [pc, #176]	@ (800e7b0 <TIM_OC1_SetConfig+0x110>)
 800e700:	4293      	cmp	r3, r2
 800e702:	d00b      	beq.n	800e71c <TIM_OC1_SetConfig+0x7c>
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	4a2b      	ldr	r2, [pc, #172]	@ (800e7b4 <TIM_OC1_SetConfig+0x114>)
 800e708:	4293      	cmp	r3, r2
 800e70a:	d007      	beq.n	800e71c <TIM_OC1_SetConfig+0x7c>
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	4a2a      	ldr	r2, [pc, #168]	@ (800e7b8 <TIM_OC1_SetConfig+0x118>)
 800e710:	4293      	cmp	r3, r2
 800e712:	d003      	beq.n	800e71c <TIM_OC1_SetConfig+0x7c>
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	4a29      	ldr	r2, [pc, #164]	@ (800e7bc <TIM_OC1_SetConfig+0x11c>)
 800e718:	4293      	cmp	r3, r2
 800e71a:	d10c      	bne.n	800e736 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e71c:	697b      	ldr	r3, [r7, #20]
 800e71e:	f023 0308 	bic.w	r3, r3, #8
 800e722:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e724:	683b      	ldr	r3, [r7, #0]
 800e726:	68db      	ldr	r3, [r3, #12]
 800e728:	697a      	ldr	r2, [r7, #20]
 800e72a:	4313      	orrs	r3, r2
 800e72c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e72e:	697b      	ldr	r3, [r7, #20]
 800e730:	f023 0304 	bic.w	r3, r3, #4
 800e734:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	4a1c      	ldr	r2, [pc, #112]	@ (800e7ac <TIM_OC1_SetConfig+0x10c>)
 800e73a:	4293      	cmp	r3, r2
 800e73c:	d00f      	beq.n	800e75e <TIM_OC1_SetConfig+0xbe>
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	4a1b      	ldr	r2, [pc, #108]	@ (800e7b0 <TIM_OC1_SetConfig+0x110>)
 800e742:	4293      	cmp	r3, r2
 800e744:	d00b      	beq.n	800e75e <TIM_OC1_SetConfig+0xbe>
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	4a1a      	ldr	r2, [pc, #104]	@ (800e7b4 <TIM_OC1_SetConfig+0x114>)
 800e74a:	4293      	cmp	r3, r2
 800e74c:	d007      	beq.n	800e75e <TIM_OC1_SetConfig+0xbe>
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	4a19      	ldr	r2, [pc, #100]	@ (800e7b8 <TIM_OC1_SetConfig+0x118>)
 800e752:	4293      	cmp	r3, r2
 800e754:	d003      	beq.n	800e75e <TIM_OC1_SetConfig+0xbe>
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	4a18      	ldr	r2, [pc, #96]	@ (800e7bc <TIM_OC1_SetConfig+0x11c>)
 800e75a:	4293      	cmp	r3, r2
 800e75c:	d111      	bne.n	800e782 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e75e:	693b      	ldr	r3, [r7, #16]
 800e760:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e764:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e766:	693b      	ldr	r3, [r7, #16]
 800e768:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e76c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e76e:	683b      	ldr	r3, [r7, #0]
 800e770:	695b      	ldr	r3, [r3, #20]
 800e772:	693a      	ldr	r2, [r7, #16]
 800e774:	4313      	orrs	r3, r2
 800e776:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	699b      	ldr	r3, [r3, #24]
 800e77c:	693a      	ldr	r2, [r7, #16]
 800e77e:	4313      	orrs	r3, r2
 800e780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	693a      	ldr	r2, [r7, #16]
 800e786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	68fa      	ldr	r2, [r7, #12]
 800e78c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e78e:	683b      	ldr	r3, [r7, #0]
 800e790:	685a      	ldr	r2, [r3, #4]
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	697a      	ldr	r2, [r7, #20]
 800e79a:	621a      	str	r2, [r3, #32]
}
 800e79c:	bf00      	nop
 800e79e:	371c      	adds	r7, #28
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a6:	4770      	bx	lr
 800e7a8:	fffeff8f 	.word	0xfffeff8f
 800e7ac:	40010000 	.word	0x40010000
 800e7b0:	40010400 	.word	0x40010400
 800e7b4:	40014000 	.word	0x40014000
 800e7b8:	40014400 	.word	0x40014400
 800e7bc:	40014800 	.word	0x40014800

0800e7c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e7c0:	b480      	push	{r7}
 800e7c2:	b087      	sub	sp, #28
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
 800e7c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	6a1b      	ldr	r3, [r3, #32]
 800e7ce:	f023 0210 	bic.w	r2, r3, #16
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	6a1b      	ldr	r3, [r3, #32]
 800e7da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	685b      	ldr	r3, [r3, #4]
 800e7e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	699b      	ldr	r3, [r3, #24]
 800e7e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e7e8:	68fa      	ldr	r2, [r7, #12]
 800e7ea:	4b34      	ldr	r3, [pc, #208]	@ (800e8bc <TIM_OC2_SetConfig+0xfc>)
 800e7ec:	4013      	ands	r3, r2
 800e7ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e7f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	021b      	lsls	r3, r3, #8
 800e7fe:	68fa      	ldr	r2, [r7, #12]
 800e800:	4313      	orrs	r3, r2
 800e802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e804:	697b      	ldr	r3, [r7, #20]
 800e806:	f023 0320 	bic.w	r3, r3, #32
 800e80a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	689b      	ldr	r3, [r3, #8]
 800e810:	011b      	lsls	r3, r3, #4
 800e812:	697a      	ldr	r2, [r7, #20]
 800e814:	4313      	orrs	r3, r2
 800e816:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	4a29      	ldr	r2, [pc, #164]	@ (800e8c0 <TIM_OC2_SetConfig+0x100>)
 800e81c:	4293      	cmp	r3, r2
 800e81e:	d003      	beq.n	800e828 <TIM_OC2_SetConfig+0x68>
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	4a28      	ldr	r2, [pc, #160]	@ (800e8c4 <TIM_OC2_SetConfig+0x104>)
 800e824:	4293      	cmp	r3, r2
 800e826:	d10d      	bne.n	800e844 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e828:	697b      	ldr	r3, [r7, #20]
 800e82a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e82e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e830:	683b      	ldr	r3, [r7, #0]
 800e832:	68db      	ldr	r3, [r3, #12]
 800e834:	011b      	lsls	r3, r3, #4
 800e836:	697a      	ldr	r2, [r7, #20]
 800e838:	4313      	orrs	r3, r2
 800e83a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e83c:	697b      	ldr	r3, [r7, #20]
 800e83e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e842:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	4a1e      	ldr	r2, [pc, #120]	@ (800e8c0 <TIM_OC2_SetConfig+0x100>)
 800e848:	4293      	cmp	r3, r2
 800e84a:	d00f      	beq.n	800e86c <TIM_OC2_SetConfig+0xac>
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	4a1d      	ldr	r2, [pc, #116]	@ (800e8c4 <TIM_OC2_SetConfig+0x104>)
 800e850:	4293      	cmp	r3, r2
 800e852:	d00b      	beq.n	800e86c <TIM_OC2_SetConfig+0xac>
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	4a1c      	ldr	r2, [pc, #112]	@ (800e8c8 <TIM_OC2_SetConfig+0x108>)
 800e858:	4293      	cmp	r3, r2
 800e85a:	d007      	beq.n	800e86c <TIM_OC2_SetConfig+0xac>
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	4a1b      	ldr	r2, [pc, #108]	@ (800e8cc <TIM_OC2_SetConfig+0x10c>)
 800e860:	4293      	cmp	r3, r2
 800e862:	d003      	beq.n	800e86c <TIM_OC2_SetConfig+0xac>
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	4a1a      	ldr	r2, [pc, #104]	@ (800e8d0 <TIM_OC2_SetConfig+0x110>)
 800e868:	4293      	cmp	r3, r2
 800e86a:	d113      	bne.n	800e894 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e86c:	693b      	ldr	r3, [r7, #16]
 800e86e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e872:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e874:	693b      	ldr	r3, [r7, #16]
 800e876:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e87a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	695b      	ldr	r3, [r3, #20]
 800e880:	009b      	lsls	r3, r3, #2
 800e882:	693a      	ldr	r2, [r7, #16]
 800e884:	4313      	orrs	r3, r2
 800e886:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	699b      	ldr	r3, [r3, #24]
 800e88c:	009b      	lsls	r3, r3, #2
 800e88e:	693a      	ldr	r2, [r7, #16]
 800e890:	4313      	orrs	r3, r2
 800e892:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	693a      	ldr	r2, [r7, #16]
 800e898:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	68fa      	ldr	r2, [r7, #12]
 800e89e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e8a0:	683b      	ldr	r3, [r7, #0]
 800e8a2:	685a      	ldr	r2, [r3, #4]
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	697a      	ldr	r2, [r7, #20]
 800e8ac:	621a      	str	r2, [r3, #32]
}
 800e8ae:	bf00      	nop
 800e8b0:	371c      	adds	r7, #28
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b8:	4770      	bx	lr
 800e8ba:	bf00      	nop
 800e8bc:	feff8fff 	.word	0xfeff8fff
 800e8c0:	40010000 	.word	0x40010000
 800e8c4:	40010400 	.word	0x40010400
 800e8c8:	40014000 	.word	0x40014000
 800e8cc:	40014400 	.word	0x40014400
 800e8d0:	40014800 	.word	0x40014800

0800e8d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e8d4:	b480      	push	{r7}
 800e8d6:	b087      	sub	sp, #28
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
 800e8dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	6a1b      	ldr	r3, [r3, #32]
 800e8e2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	6a1b      	ldr	r3, [r3, #32]
 800e8ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	685b      	ldr	r3, [r3, #4]
 800e8f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	69db      	ldr	r3, [r3, #28]
 800e8fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e8fc:	68fa      	ldr	r2, [r7, #12]
 800e8fe:	4b33      	ldr	r3, [pc, #204]	@ (800e9cc <TIM_OC3_SetConfig+0xf8>)
 800e900:	4013      	ands	r3, r2
 800e902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	f023 0303 	bic.w	r3, r3, #3
 800e90a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	68fa      	ldr	r2, [r7, #12]
 800e912:	4313      	orrs	r3, r2
 800e914:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e916:	697b      	ldr	r3, [r7, #20]
 800e918:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e91c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e91e:	683b      	ldr	r3, [r7, #0]
 800e920:	689b      	ldr	r3, [r3, #8]
 800e922:	021b      	lsls	r3, r3, #8
 800e924:	697a      	ldr	r2, [r7, #20]
 800e926:	4313      	orrs	r3, r2
 800e928:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	4a28      	ldr	r2, [pc, #160]	@ (800e9d0 <TIM_OC3_SetConfig+0xfc>)
 800e92e:	4293      	cmp	r3, r2
 800e930:	d003      	beq.n	800e93a <TIM_OC3_SetConfig+0x66>
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	4a27      	ldr	r2, [pc, #156]	@ (800e9d4 <TIM_OC3_SetConfig+0x100>)
 800e936:	4293      	cmp	r3, r2
 800e938:	d10d      	bne.n	800e956 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e93a:	697b      	ldr	r3, [r7, #20]
 800e93c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e940:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e942:	683b      	ldr	r3, [r7, #0]
 800e944:	68db      	ldr	r3, [r3, #12]
 800e946:	021b      	lsls	r3, r3, #8
 800e948:	697a      	ldr	r2, [r7, #20]
 800e94a:	4313      	orrs	r3, r2
 800e94c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e94e:	697b      	ldr	r3, [r7, #20]
 800e950:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e954:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	4a1d      	ldr	r2, [pc, #116]	@ (800e9d0 <TIM_OC3_SetConfig+0xfc>)
 800e95a:	4293      	cmp	r3, r2
 800e95c:	d00f      	beq.n	800e97e <TIM_OC3_SetConfig+0xaa>
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	4a1c      	ldr	r2, [pc, #112]	@ (800e9d4 <TIM_OC3_SetConfig+0x100>)
 800e962:	4293      	cmp	r3, r2
 800e964:	d00b      	beq.n	800e97e <TIM_OC3_SetConfig+0xaa>
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	4a1b      	ldr	r2, [pc, #108]	@ (800e9d8 <TIM_OC3_SetConfig+0x104>)
 800e96a:	4293      	cmp	r3, r2
 800e96c:	d007      	beq.n	800e97e <TIM_OC3_SetConfig+0xaa>
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	4a1a      	ldr	r2, [pc, #104]	@ (800e9dc <TIM_OC3_SetConfig+0x108>)
 800e972:	4293      	cmp	r3, r2
 800e974:	d003      	beq.n	800e97e <TIM_OC3_SetConfig+0xaa>
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	4a19      	ldr	r2, [pc, #100]	@ (800e9e0 <TIM_OC3_SetConfig+0x10c>)
 800e97a:	4293      	cmp	r3, r2
 800e97c:	d113      	bne.n	800e9a6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e97e:	693b      	ldr	r3, [r7, #16]
 800e980:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e984:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e986:	693b      	ldr	r3, [r7, #16]
 800e988:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800e98c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	695b      	ldr	r3, [r3, #20]
 800e992:	011b      	lsls	r3, r3, #4
 800e994:	693a      	ldr	r2, [r7, #16]
 800e996:	4313      	orrs	r3, r2
 800e998:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e99a:	683b      	ldr	r3, [r7, #0]
 800e99c:	699b      	ldr	r3, [r3, #24]
 800e99e:	011b      	lsls	r3, r3, #4
 800e9a0:	693a      	ldr	r2, [r7, #16]
 800e9a2:	4313      	orrs	r3, r2
 800e9a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	693a      	ldr	r2, [r7, #16]
 800e9aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	68fa      	ldr	r2, [r7, #12]
 800e9b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e9b2:	683b      	ldr	r3, [r7, #0]
 800e9b4:	685a      	ldr	r2, [r3, #4]
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	697a      	ldr	r2, [r7, #20]
 800e9be:	621a      	str	r2, [r3, #32]
}
 800e9c0:	bf00      	nop
 800e9c2:	371c      	adds	r7, #28
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ca:	4770      	bx	lr
 800e9cc:	fffeff8f 	.word	0xfffeff8f
 800e9d0:	40010000 	.word	0x40010000
 800e9d4:	40010400 	.word	0x40010400
 800e9d8:	40014000 	.word	0x40014000
 800e9dc:	40014400 	.word	0x40014400
 800e9e0:	40014800 	.word	0x40014800

0800e9e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e9e4:	b480      	push	{r7}
 800e9e6:	b087      	sub	sp, #28
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
 800e9ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	6a1b      	ldr	r3, [r3, #32]
 800e9f2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	6a1b      	ldr	r3, [r3, #32]
 800e9fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	685b      	ldr	r3, [r3, #4]
 800ea04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	69db      	ldr	r3, [r3, #28]
 800ea0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ea0c:	68fa      	ldr	r2, [r7, #12]
 800ea0e:	4b24      	ldr	r3, [pc, #144]	@ (800eaa0 <TIM_OC4_SetConfig+0xbc>)
 800ea10:	4013      	ands	r3, r2
 800ea12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ea1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	021b      	lsls	r3, r3, #8
 800ea22:	68fa      	ldr	r2, [r7, #12]
 800ea24:	4313      	orrs	r3, r2
 800ea26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ea28:	693b      	ldr	r3, [r7, #16]
 800ea2a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ea2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ea30:	683b      	ldr	r3, [r7, #0]
 800ea32:	689b      	ldr	r3, [r3, #8]
 800ea34:	031b      	lsls	r3, r3, #12
 800ea36:	693a      	ldr	r2, [r7, #16]
 800ea38:	4313      	orrs	r3, r2
 800ea3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	4a19      	ldr	r2, [pc, #100]	@ (800eaa4 <TIM_OC4_SetConfig+0xc0>)
 800ea40:	4293      	cmp	r3, r2
 800ea42:	d00f      	beq.n	800ea64 <TIM_OC4_SetConfig+0x80>
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	4a18      	ldr	r2, [pc, #96]	@ (800eaa8 <TIM_OC4_SetConfig+0xc4>)
 800ea48:	4293      	cmp	r3, r2
 800ea4a:	d00b      	beq.n	800ea64 <TIM_OC4_SetConfig+0x80>
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	4a17      	ldr	r2, [pc, #92]	@ (800eaac <TIM_OC4_SetConfig+0xc8>)
 800ea50:	4293      	cmp	r3, r2
 800ea52:	d007      	beq.n	800ea64 <TIM_OC4_SetConfig+0x80>
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	4a16      	ldr	r2, [pc, #88]	@ (800eab0 <TIM_OC4_SetConfig+0xcc>)
 800ea58:	4293      	cmp	r3, r2
 800ea5a:	d003      	beq.n	800ea64 <TIM_OC4_SetConfig+0x80>
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	4a15      	ldr	r2, [pc, #84]	@ (800eab4 <TIM_OC4_SetConfig+0xd0>)
 800ea60:	4293      	cmp	r3, r2
 800ea62:	d109      	bne.n	800ea78 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ea64:	697b      	ldr	r3, [r7, #20]
 800ea66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ea6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	695b      	ldr	r3, [r3, #20]
 800ea70:	019b      	lsls	r3, r3, #6
 800ea72:	697a      	ldr	r2, [r7, #20]
 800ea74:	4313      	orrs	r3, r2
 800ea76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	697a      	ldr	r2, [r7, #20]
 800ea7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	68fa      	ldr	r2, [r7, #12]
 800ea82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ea84:	683b      	ldr	r3, [r7, #0]
 800ea86:	685a      	ldr	r2, [r3, #4]
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	693a      	ldr	r2, [r7, #16]
 800ea90:	621a      	str	r2, [r3, #32]
}
 800ea92:	bf00      	nop
 800ea94:	371c      	adds	r7, #28
 800ea96:	46bd      	mov	sp, r7
 800ea98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9c:	4770      	bx	lr
 800ea9e:	bf00      	nop
 800eaa0:	feff8fff 	.word	0xfeff8fff
 800eaa4:	40010000 	.word	0x40010000
 800eaa8:	40010400 	.word	0x40010400
 800eaac:	40014000 	.word	0x40014000
 800eab0:	40014400 	.word	0x40014400
 800eab4:	40014800 	.word	0x40014800

0800eab8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800eab8:	b480      	push	{r7}
 800eaba:	b087      	sub	sp, #28
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
 800eac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	6a1b      	ldr	r3, [r3, #32]
 800eac6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	6a1b      	ldr	r3, [r3, #32]
 800ead2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	685b      	ldr	r3, [r3, #4]
 800ead8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800eae0:	68fa      	ldr	r2, [r7, #12]
 800eae2:	4b21      	ldr	r3, [pc, #132]	@ (800eb68 <TIM_OC5_SetConfig+0xb0>)
 800eae4:	4013      	ands	r3, r2
 800eae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eae8:	683b      	ldr	r3, [r7, #0]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	68fa      	ldr	r2, [r7, #12]
 800eaee:	4313      	orrs	r3, r2
 800eaf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800eaf2:	693b      	ldr	r3, [r7, #16]
 800eaf4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800eaf8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800eafa:	683b      	ldr	r3, [r7, #0]
 800eafc:	689b      	ldr	r3, [r3, #8]
 800eafe:	041b      	lsls	r3, r3, #16
 800eb00:	693a      	ldr	r2, [r7, #16]
 800eb02:	4313      	orrs	r3, r2
 800eb04:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	4a18      	ldr	r2, [pc, #96]	@ (800eb6c <TIM_OC5_SetConfig+0xb4>)
 800eb0a:	4293      	cmp	r3, r2
 800eb0c:	d00f      	beq.n	800eb2e <TIM_OC5_SetConfig+0x76>
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	4a17      	ldr	r2, [pc, #92]	@ (800eb70 <TIM_OC5_SetConfig+0xb8>)
 800eb12:	4293      	cmp	r3, r2
 800eb14:	d00b      	beq.n	800eb2e <TIM_OC5_SetConfig+0x76>
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	4a16      	ldr	r2, [pc, #88]	@ (800eb74 <TIM_OC5_SetConfig+0xbc>)
 800eb1a:	4293      	cmp	r3, r2
 800eb1c:	d007      	beq.n	800eb2e <TIM_OC5_SetConfig+0x76>
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	4a15      	ldr	r2, [pc, #84]	@ (800eb78 <TIM_OC5_SetConfig+0xc0>)
 800eb22:	4293      	cmp	r3, r2
 800eb24:	d003      	beq.n	800eb2e <TIM_OC5_SetConfig+0x76>
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	4a14      	ldr	r2, [pc, #80]	@ (800eb7c <TIM_OC5_SetConfig+0xc4>)
 800eb2a:	4293      	cmp	r3, r2
 800eb2c:	d109      	bne.n	800eb42 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800eb2e:	697b      	ldr	r3, [r7, #20]
 800eb30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800eb34:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	695b      	ldr	r3, [r3, #20]
 800eb3a:	021b      	lsls	r3, r3, #8
 800eb3c:	697a      	ldr	r2, [r7, #20]
 800eb3e:	4313      	orrs	r3, r2
 800eb40:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	697a      	ldr	r2, [r7, #20]
 800eb46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	68fa      	ldr	r2, [r7, #12]
 800eb4c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800eb4e:	683b      	ldr	r3, [r7, #0]
 800eb50:	685a      	ldr	r2, [r3, #4]
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	693a      	ldr	r2, [r7, #16]
 800eb5a:	621a      	str	r2, [r3, #32]
}
 800eb5c:	bf00      	nop
 800eb5e:	371c      	adds	r7, #28
 800eb60:	46bd      	mov	sp, r7
 800eb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb66:	4770      	bx	lr
 800eb68:	fffeff8f 	.word	0xfffeff8f
 800eb6c:	40010000 	.word	0x40010000
 800eb70:	40010400 	.word	0x40010400
 800eb74:	40014000 	.word	0x40014000
 800eb78:	40014400 	.word	0x40014400
 800eb7c:	40014800 	.word	0x40014800

0800eb80 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800eb80:	b480      	push	{r7}
 800eb82:	b087      	sub	sp, #28
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	6078      	str	r0, [r7, #4]
 800eb88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	6a1b      	ldr	r3, [r3, #32]
 800eb8e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	6a1b      	ldr	r3, [r3, #32]
 800eb9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	685b      	ldr	r3, [r3, #4]
 800eba0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800eba8:	68fa      	ldr	r2, [r7, #12]
 800ebaa:	4b22      	ldr	r3, [pc, #136]	@ (800ec34 <TIM_OC6_SetConfig+0xb4>)
 800ebac:	4013      	ands	r3, r2
 800ebae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ebb0:	683b      	ldr	r3, [r7, #0]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	021b      	lsls	r3, r3, #8
 800ebb6:	68fa      	ldr	r2, [r7, #12]
 800ebb8:	4313      	orrs	r3, r2
 800ebba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ebbc:	693b      	ldr	r3, [r7, #16]
 800ebbe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ebc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ebc4:	683b      	ldr	r3, [r7, #0]
 800ebc6:	689b      	ldr	r3, [r3, #8]
 800ebc8:	051b      	lsls	r3, r3, #20
 800ebca:	693a      	ldr	r2, [r7, #16]
 800ebcc:	4313      	orrs	r3, r2
 800ebce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	4a19      	ldr	r2, [pc, #100]	@ (800ec38 <TIM_OC6_SetConfig+0xb8>)
 800ebd4:	4293      	cmp	r3, r2
 800ebd6:	d00f      	beq.n	800ebf8 <TIM_OC6_SetConfig+0x78>
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	4a18      	ldr	r2, [pc, #96]	@ (800ec3c <TIM_OC6_SetConfig+0xbc>)
 800ebdc:	4293      	cmp	r3, r2
 800ebde:	d00b      	beq.n	800ebf8 <TIM_OC6_SetConfig+0x78>
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	4a17      	ldr	r2, [pc, #92]	@ (800ec40 <TIM_OC6_SetConfig+0xc0>)
 800ebe4:	4293      	cmp	r3, r2
 800ebe6:	d007      	beq.n	800ebf8 <TIM_OC6_SetConfig+0x78>
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	4a16      	ldr	r2, [pc, #88]	@ (800ec44 <TIM_OC6_SetConfig+0xc4>)
 800ebec:	4293      	cmp	r3, r2
 800ebee:	d003      	beq.n	800ebf8 <TIM_OC6_SetConfig+0x78>
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	4a15      	ldr	r2, [pc, #84]	@ (800ec48 <TIM_OC6_SetConfig+0xc8>)
 800ebf4:	4293      	cmp	r3, r2
 800ebf6:	d109      	bne.n	800ec0c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ebf8:	697b      	ldr	r3, [r7, #20]
 800ebfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ebfe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ec00:	683b      	ldr	r3, [r7, #0]
 800ec02:	695b      	ldr	r3, [r3, #20]
 800ec04:	029b      	lsls	r3, r3, #10
 800ec06:	697a      	ldr	r2, [r7, #20]
 800ec08:	4313      	orrs	r3, r2
 800ec0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	697a      	ldr	r2, [r7, #20]
 800ec10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	68fa      	ldr	r2, [r7, #12]
 800ec16:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ec18:	683b      	ldr	r3, [r7, #0]
 800ec1a:	685a      	ldr	r2, [r3, #4]
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	693a      	ldr	r2, [r7, #16]
 800ec24:	621a      	str	r2, [r3, #32]
}
 800ec26:	bf00      	nop
 800ec28:	371c      	adds	r7, #28
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec30:	4770      	bx	lr
 800ec32:	bf00      	nop
 800ec34:	feff8fff 	.word	0xfeff8fff
 800ec38:	40010000 	.word	0x40010000
 800ec3c:	40010400 	.word	0x40010400
 800ec40:	40014000 	.word	0x40014000
 800ec44:	40014400 	.word	0x40014400
 800ec48:	40014800 	.word	0x40014800

0800ec4c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800ec4c:	b480      	push	{r7}
 800ec4e:	b087      	sub	sp, #28
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	60f8      	str	r0, [r7, #12]
 800ec54:	60b9      	str	r1, [r7, #8]
 800ec56:	607a      	str	r2, [r7, #4]
 800ec58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	6a1b      	ldr	r3, [r3, #32]
 800ec5e:	f023 0201 	bic.w	r2, r3, #1
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	699b      	ldr	r3, [r3, #24]
 800ec6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	6a1b      	ldr	r3, [r3, #32]
 800ec70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	4a2c      	ldr	r2, [pc, #176]	@ (800ed28 <TIM_TI1_SetConfig+0xdc>)
 800ec76:	4293      	cmp	r3, r2
 800ec78:	d023      	beq.n	800ecc2 <TIM_TI1_SetConfig+0x76>
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ec80:	d01f      	beq.n	800ecc2 <TIM_TI1_SetConfig+0x76>
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	4a29      	ldr	r2, [pc, #164]	@ (800ed2c <TIM_TI1_SetConfig+0xe0>)
 800ec86:	4293      	cmp	r3, r2
 800ec88:	d01b      	beq.n	800ecc2 <TIM_TI1_SetConfig+0x76>
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	4a28      	ldr	r2, [pc, #160]	@ (800ed30 <TIM_TI1_SetConfig+0xe4>)
 800ec8e:	4293      	cmp	r3, r2
 800ec90:	d017      	beq.n	800ecc2 <TIM_TI1_SetConfig+0x76>
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	4a27      	ldr	r2, [pc, #156]	@ (800ed34 <TIM_TI1_SetConfig+0xe8>)
 800ec96:	4293      	cmp	r3, r2
 800ec98:	d013      	beq.n	800ecc2 <TIM_TI1_SetConfig+0x76>
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	4a26      	ldr	r2, [pc, #152]	@ (800ed38 <TIM_TI1_SetConfig+0xec>)
 800ec9e:	4293      	cmp	r3, r2
 800eca0:	d00f      	beq.n	800ecc2 <TIM_TI1_SetConfig+0x76>
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	4a25      	ldr	r2, [pc, #148]	@ (800ed3c <TIM_TI1_SetConfig+0xf0>)
 800eca6:	4293      	cmp	r3, r2
 800eca8:	d00b      	beq.n	800ecc2 <TIM_TI1_SetConfig+0x76>
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	4a24      	ldr	r2, [pc, #144]	@ (800ed40 <TIM_TI1_SetConfig+0xf4>)
 800ecae:	4293      	cmp	r3, r2
 800ecb0:	d007      	beq.n	800ecc2 <TIM_TI1_SetConfig+0x76>
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	4a23      	ldr	r2, [pc, #140]	@ (800ed44 <TIM_TI1_SetConfig+0xf8>)
 800ecb6:	4293      	cmp	r3, r2
 800ecb8:	d003      	beq.n	800ecc2 <TIM_TI1_SetConfig+0x76>
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	4a22      	ldr	r2, [pc, #136]	@ (800ed48 <TIM_TI1_SetConfig+0xfc>)
 800ecbe:	4293      	cmp	r3, r2
 800ecc0:	d101      	bne.n	800ecc6 <TIM_TI1_SetConfig+0x7a>
 800ecc2:	2301      	movs	r3, #1
 800ecc4:	e000      	b.n	800ecc8 <TIM_TI1_SetConfig+0x7c>
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d008      	beq.n	800ecde <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800eccc:	697b      	ldr	r3, [r7, #20]
 800ecce:	f023 0303 	bic.w	r3, r3, #3
 800ecd2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800ecd4:	697a      	ldr	r2, [r7, #20]
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	4313      	orrs	r3, r2
 800ecda:	617b      	str	r3, [r7, #20]
 800ecdc:	e003      	b.n	800ece6 <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800ecde:	697b      	ldr	r3, [r7, #20]
 800ece0:	f043 0301 	orr.w	r3, r3, #1
 800ece4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ece6:	697b      	ldr	r3, [r7, #20]
 800ece8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ecec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800ecee:	683b      	ldr	r3, [r7, #0]
 800ecf0:	011b      	lsls	r3, r3, #4
 800ecf2:	b2db      	uxtb	r3, r3
 800ecf4:	697a      	ldr	r2, [r7, #20]
 800ecf6:	4313      	orrs	r3, r2
 800ecf8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ecfa:	693b      	ldr	r3, [r7, #16]
 800ecfc:	f023 030a 	bic.w	r3, r3, #10
 800ed00:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800ed02:	68bb      	ldr	r3, [r7, #8]
 800ed04:	f003 030a 	and.w	r3, r3, #10
 800ed08:	693a      	ldr	r2, [r7, #16]
 800ed0a:	4313      	orrs	r3, r2
 800ed0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	697a      	ldr	r2, [r7, #20]
 800ed12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	693a      	ldr	r2, [r7, #16]
 800ed18:	621a      	str	r2, [r3, #32]
}
 800ed1a:	bf00      	nop
 800ed1c:	371c      	adds	r7, #28
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed24:	4770      	bx	lr
 800ed26:	bf00      	nop
 800ed28:	40010000 	.word	0x40010000
 800ed2c:	40000400 	.word	0x40000400
 800ed30:	40000800 	.word	0x40000800
 800ed34:	40000c00 	.word	0x40000c00
 800ed38:	40010400 	.word	0x40010400
 800ed3c:	40001800 	.word	0x40001800
 800ed40:	40014000 	.word	0x40014000
 800ed44:	4000e000 	.word	0x4000e000
 800ed48:	4000e400 	.word	0x4000e400

0800ed4c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ed4c:	b480      	push	{r7}
 800ed4e:	b087      	sub	sp, #28
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	60f8      	str	r0, [r7, #12]
 800ed54:	60b9      	str	r1, [r7, #8]
 800ed56:	607a      	str	r2, [r7, #4]
 800ed58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	6a1b      	ldr	r3, [r3, #32]
 800ed5e:	f023 0210 	bic.w	r2, r3, #16
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	699b      	ldr	r3, [r3, #24]
 800ed6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	6a1b      	ldr	r3, [r3, #32]
 800ed70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800ed72:	697b      	ldr	r3, [r7, #20]
 800ed74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ed78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	021b      	lsls	r3, r3, #8
 800ed7e:	697a      	ldr	r2, [r7, #20]
 800ed80:	4313      	orrs	r3, r2
 800ed82:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ed84:	697b      	ldr	r3, [r7, #20]
 800ed86:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ed8a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800ed8c:	683b      	ldr	r3, [r7, #0]
 800ed8e:	031b      	lsls	r3, r3, #12
 800ed90:	b29b      	uxth	r3, r3
 800ed92:	697a      	ldr	r2, [r7, #20]
 800ed94:	4313      	orrs	r3, r2
 800ed96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ed98:	693b      	ldr	r3, [r7, #16]
 800ed9a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ed9e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800eda0:	68bb      	ldr	r3, [r7, #8]
 800eda2:	011b      	lsls	r3, r3, #4
 800eda4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800eda8:	693a      	ldr	r2, [r7, #16]
 800edaa:	4313      	orrs	r3, r2
 800edac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	697a      	ldr	r2, [r7, #20]
 800edb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	693a      	ldr	r2, [r7, #16]
 800edb8:	621a      	str	r2, [r3, #32]
}
 800edba:	bf00      	nop
 800edbc:	371c      	adds	r7, #28
 800edbe:	46bd      	mov	sp, r7
 800edc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc4:	4770      	bx	lr

0800edc6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800edc6:	b480      	push	{r7}
 800edc8:	b087      	sub	sp, #28
 800edca:	af00      	add	r7, sp, #0
 800edcc:	60f8      	str	r0, [r7, #12]
 800edce:	60b9      	str	r1, [r7, #8]
 800edd0:	607a      	str	r2, [r7, #4]
 800edd2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	6a1b      	ldr	r3, [r3, #32]
 800edd8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	69db      	ldr	r3, [r3, #28]
 800ede4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	6a1b      	ldr	r3, [r3, #32]
 800edea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800edec:	697b      	ldr	r3, [r7, #20]
 800edee:	f023 0303 	bic.w	r3, r3, #3
 800edf2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800edf4:	697a      	ldr	r2, [r7, #20]
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	4313      	orrs	r3, r2
 800edfa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800edfc:	697b      	ldr	r3, [r7, #20]
 800edfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ee02:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800ee04:	683b      	ldr	r3, [r7, #0]
 800ee06:	011b      	lsls	r3, r3, #4
 800ee08:	b2db      	uxtb	r3, r3
 800ee0a:	697a      	ldr	r2, [r7, #20]
 800ee0c:	4313      	orrs	r3, r2
 800ee0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800ee10:	693b      	ldr	r3, [r7, #16]
 800ee12:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800ee16:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800ee18:	68bb      	ldr	r3, [r7, #8]
 800ee1a:	021b      	lsls	r3, r3, #8
 800ee1c:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800ee20:	693a      	ldr	r2, [r7, #16]
 800ee22:	4313      	orrs	r3, r2
 800ee24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	697a      	ldr	r2, [r7, #20]
 800ee2a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	693a      	ldr	r2, [r7, #16]
 800ee30:	621a      	str	r2, [r3, #32]
}
 800ee32:	bf00      	nop
 800ee34:	371c      	adds	r7, #28
 800ee36:	46bd      	mov	sp, r7
 800ee38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3c:	4770      	bx	lr

0800ee3e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ee3e:	b480      	push	{r7}
 800ee40:	b087      	sub	sp, #28
 800ee42:	af00      	add	r7, sp, #0
 800ee44:	60f8      	str	r0, [r7, #12]
 800ee46:	60b9      	str	r1, [r7, #8]
 800ee48:	607a      	str	r2, [r7, #4]
 800ee4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	6a1b      	ldr	r3, [r3, #32]
 800ee50:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	69db      	ldr	r3, [r3, #28]
 800ee5c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	6a1b      	ldr	r3, [r3, #32]
 800ee62:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800ee64:	697b      	ldr	r3, [r7, #20]
 800ee66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ee6a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	021b      	lsls	r3, r3, #8
 800ee70:	697a      	ldr	r2, [r7, #20]
 800ee72:	4313      	orrs	r3, r2
 800ee74:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800ee76:	697b      	ldr	r3, [r7, #20]
 800ee78:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ee7c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800ee7e:	683b      	ldr	r3, [r7, #0]
 800ee80:	031b      	lsls	r3, r3, #12
 800ee82:	b29b      	uxth	r3, r3
 800ee84:	697a      	ldr	r2, [r7, #20]
 800ee86:	4313      	orrs	r3, r2
 800ee88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800ee8a:	693b      	ldr	r3, [r7, #16]
 800ee8c:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800ee90:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800ee92:	68bb      	ldr	r3, [r7, #8]
 800ee94:	031b      	lsls	r3, r3, #12
 800ee96:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800ee9a:	693a      	ldr	r2, [r7, #16]
 800ee9c:	4313      	orrs	r3, r2
 800ee9e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	697a      	ldr	r2, [r7, #20]
 800eea4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	693a      	ldr	r2, [r7, #16]
 800eeaa:	621a      	str	r2, [r3, #32]
}
 800eeac:	bf00      	nop
 800eeae:	371c      	adds	r7, #28
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb6:	4770      	bx	lr

0800eeb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800eeb8:	b480      	push	{r7}
 800eeba:	b087      	sub	sp, #28
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	60f8      	str	r0, [r7, #12]
 800eec0:	60b9      	str	r1, [r7, #8]
 800eec2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800eec4:	68bb      	ldr	r3, [r7, #8]
 800eec6:	f003 031f 	and.w	r3, r3, #31
 800eeca:	2201      	movs	r2, #1
 800eecc:	fa02 f303 	lsl.w	r3, r2, r3
 800eed0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	6a1a      	ldr	r2, [r3, #32]
 800eed6:	697b      	ldr	r3, [r7, #20]
 800eed8:	43db      	mvns	r3, r3
 800eeda:	401a      	ands	r2, r3
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	6a1a      	ldr	r2, [r3, #32]
 800eee4:	68bb      	ldr	r3, [r7, #8]
 800eee6:	f003 031f 	and.w	r3, r3, #31
 800eeea:	6879      	ldr	r1, [r7, #4]
 800eeec:	fa01 f303 	lsl.w	r3, r1, r3
 800eef0:	431a      	orrs	r2, r3
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	621a      	str	r2, [r3, #32]
}
 800eef6:	bf00      	nop
 800eef8:	371c      	adds	r7, #28
 800eefa:	46bd      	mov	sp, r7
 800eefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef00:	4770      	bx	lr
	...

0800ef04 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b084      	sub	sp, #16
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
 800ef0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ef0e:	683b      	ldr	r3, [r7, #0]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d109      	bne.n	800ef28 <HAL_TIMEx_PWMN_Start+0x24>
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ef1a:	b2db      	uxtb	r3, r3
 800ef1c:	2b01      	cmp	r3, #1
 800ef1e:	bf14      	ite	ne
 800ef20:	2301      	movne	r3, #1
 800ef22:	2300      	moveq	r3, #0
 800ef24:	b2db      	uxtb	r3, r3
 800ef26:	e022      	b.n	800ef6e <HAL_TIMEx_PWMN_Start+0x6a>
 800ef28:	683b      	ldr	r3, [r7, #0]
 800ef2a:	2b04      	cmp	r3, #4
 800ef2c:	d109      	bne.n	800ef42 <HAL_TIMEx_PWMN_Start+0x3e>
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ef34:	b2db      	uxtb	r3, r3
 800ef36:	2b01      	cmp	r3, #1
 800ef38:	bf14      	ite	ne
 800ef3a:	2301      	movne	r3, #1
 800ef3c:	2300      	moveq	r3, #0
 800ef3e:	b2db      	uxtb	r3, r3
 800ef40:	e015      	b.n	800ef6e <HAL_TIMEx_PWMN_Start+0x6a>
 800ef42:	683b      	ldr	r3, [r7, #0]
 800ef44:	2b08      	cmp	r3, #8
 800ef46:	d109      	bne.n	800ef5c <HAL_TIMEx_PWMN_Start+0x58>
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800ef4e:	b2db      	uxtb	r3, r3
 800ef50:	2b01      	cmp	r3, #1
 800ef52:	bf14      	ite	ne
 800ef54:	2301      	movne	r3, #1
 800ef56:	2300      	moveq	r3, #0
 800ef58:	b2db      	uxtb	r3, r3
 800ef5a:	e008      	b.n	800ef6e <HAL_TIMEx_PWMN_Start+0x6a>
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800ef62:	b2db      	uxtb	r3, r3
 800ef64:	2b01      	cmp	r3, #1
 800ef66:	bf14      	ite	ne
 800ef68:	2301      	movne	r3, #1
 800ef6a:	2300      	moveq	r3, #0
 800ef6c:	b2db      	uxtb	r3, r3
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d001      	beq.n	800ef76 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800ef72:	2301      	movs	r3, #1
 800ef74:	e07d      	b.n	800f072 <HAL_TIMEx_PWMN_Start+0x16e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ef76:	683b      	ldr	r3, [r7, #0]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d104      	bne.n	800ef86 <HAL_TIMEx_PWMN_Start+0x82>
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	2202      	movs	r2, #2
 800ef80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ef84:	e013      	b.n	800efae <HAL_TIMEx_PWMN_Start+0xaa>
 800ef86:	683b      	ldr	r3, [r7, #0]
 800ef88:	2b04      	cmp	r3, #4
 800ef8a:	d104      	bne.n	800ef96 <HAL_TIMEx_PWMN_Start+0x92>
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	2202      	movs	r2, #2
 800ef90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ef94:	e00b      	b.n	800efae <HAL_TIMEx_PWMN_Start+0xaa>
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	2b08      	cmp	r3, #8
 800ef9a:	d104      	bne.n	800efa6 <HAL_TIMEx_PWMN_Start+0xa2>
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	2202      	movs	r2, #2
 800efa0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800efa4:	e003      	b.n	800efae <HAL_TIMEx_PWMN_Start+0xaa>
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	2202      	movs	r2, #2
 800efaa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	2204      	movs	r2, #4
 800efb4:	6839      	ldr	r1, [r7, #0]
 800efb6:	4618      	mov	r0, r3
 800efb8:	f000 fa0e 	bl	800f3d8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800efca:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	4a2a      	ldr	r2, [pc, #168]	@ (800f07c <HAL_TIMEx_PWMN_Start+0x178>)
 800efd2:	4293      	cmp	r3, r2
 800efd4:	d02c      	beq.n	800f030 <HAL_TIMEx_PWMN_Start+0x12c>
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800efde:	d027      	beq.n	800f030 <HAL_TIMEx_PWMN_Start+0x12c>
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	4a26      	ldr	r2, [pc, #152]	@ (800f080 <HAL_TIMEx_PWMN_Start+0x17c>)
 800efe6:	4293      	cmp	r3, r2
 800efe8:	d022      	beq.n	800f030 <HAL_TIMEx_PWMN_Start+0x12c>
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	4a25      	ldr	r2, [pc, #148]	@ (800f084 <HAL_TIMEx_PWMN_Start+0x180>)
 800eff0:	4293      	cmp	r3, r2
 800eff2:	d01d      	beq.n	800f030 <HAL_TIMEx_PWMN_Start+0x12c>
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	4a23      	ldr	r2, [pc, #140]	@ (800f088 <HAL_TIMEx_PWMN_Start+0x184>)
 800effa:	4293      	cmp	r3, r2
 800effc:	d018      	beq.n	800f030 <HAL_TIMEx_PWMN_Start+0x12c>
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	4a22      	ldr	r2, [pc, #136]	@ (800f08c <HAL_TIMEx_PWMN_Start+0x188>)
 800f004:	4293      	cmp	r3, r2
 800f006:	d013      	beq.n	800f030 <HAL_TIMEx_PWMN_Start+0x12c>
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	4a20      	ldr	r2, [pc, #128]	@ (800f090 <HAL_TIMEx_PWMN_Start+0x18c>)
 800f00e:	4293      	cmp	r3, r2
 800f010:	d00e      	beq.n	800f030 <HAL_TIMEx_PWMN_Start+0x12c>
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	4a1f      	ldr	r2, [pc, #124]	@ (800f094 <HAL_TIMEx_PWMN_Start+0x190>)
 800f018:	4293      	cmp	r3, r2
 800f01a:	d009      	beq.n	800f030 <HAL_TIMEx_PWMN_Start+0x12c>
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	4a1d      	ldr	r2, [pc, #116]	@ (800f098 <HAL_TIMEx_PWMN_Start+0x194>)
 800f022:	4293      	cmp	r3, r2
 800f024:	d004      	beq.n	800f030 <HAL_TIMEx_PWMN_Start+0x12c>
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	4a1c      	ldr	r2, [pc, #112]	@ (800f09c <HAL_TIMEx_PWMN_Start+0x198>)
 800f02c:	4293      	cmp	r3, r2
 800f02e:	d115      	bne.n	800f05c <HAL_TIMEx_PWMN_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	689a      	ldr	r2, [r3, #8]
 800f036:	4b1a      	ldr	r3, [pc, #104]	@ (800f0a0 <HAL_TIMEx_PWMN_Start+0x19c>)
 800f038:	4013      	ands	r3, r2
 800f03a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	2b06      	cmp	r3, #6
 800f040:	d015      	beq.n	800f06e <HAL_TIMEx_PWMN_Start+0x16a>
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f048:	d011      	beq.n	800f06e <HAL_TIMEx_PWMN_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	681a      	ldr	r2, [r3, #0]
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	f042 0201 	orr.w	r2, r2, #1
 800f058:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f05a:	e008      	b.n	800f06e <HAL_TIMEx_PWMN_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	681a      	ldr	r2, [r3, #0]
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	f042 0201 	orr.w	r2, r2, #1
 800f06a:	601a      	str	r2, [r3, #0]
 800f06c:	e000      	b.n	800f070 <HAL_TIMEx_PWMN_Start+0x16c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f06e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f070:	2300      	movs	r3, #0
}
 800f072:	4618      	mov	r0, r3
 800f074:	3710      	adds	r7, #16
 800f076:	46bd      	mov	sp, r7
 800f078:	bd80      	pop	{r7, pc}
 800f07a:	bf00      	nop
 800f07c:	40010000 	.word	0x40010000
 800f080:	40000400 	.word	0x40000400
 800f084:	40000800 	.word	0x40000800
 800f088:	40000c00 	.word	0x40000c00
 800f08c:	40010400 	.word	0x40010400
 800f090:	40001800 	.word	0x40001800
 800f094:	40014000 	.word	0x40014000
 800f098:	4000e000 	.word	0x4000e000
 800f09c:	4000e400 	.word	0x4000e400
 800f0a0:	00010007 	.word	0x00010007

0800f0a4 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b082      	sub	sp, #8
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
 800f0ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	6839      	ldr	r1, [r7, #0]
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	f000 f98e 	bl	800f3d8 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	6a1a      	ldr	r2, [r3, #32]
 800f0c2:	f241 1311 	movw	r3, #4369	@ 0x1111
 800f0c6:	4013      	ands	r3, r2
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d10f      	bne.n	800f0ec <HAL_TIMEx_PWMN_Stop+0x48>
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	6a1a      	ldr	r2, [r3, #32]
 800f0d2:	f240 4344 	movw	r3, #1092	@ 0x444
 800f0d6:	4013      	ands	r3, r2
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d107      	bne.n	800f0ec <HAL_TIMEx_PWMN_Stop+0x48>
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800f0ea:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	6a1a      	ldr	r2, [r3, #32]
 800f0f2:	f241 1311 	movw	r3, #4369	@ 0x1111
 800f0f6:	4013      	ands	r3, r2
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d10f      	bne.n	800f11c <HAL_TIMEx_PWMN_Stop+0x78>
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	6a1a      	ldr	r2, [r3, #32]
 800f102:	f240 4344 	movw	r3, #1092	@ 0x444
 800f106:	4013      	ands	r3, r2
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d107      	bne.n	800f11c <HAL_TIMEx_PWMN_Stop+0x78>
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	681a      	ldr	r2, [r3, #0]
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	f022 0201 	bic.w	r2, r2, #1
 800f11a:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f11c:	683b      	ldr	r3, [r7, #0]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d104      	bne.n	800f12c <HAL_TIMEx_PWMN_Stop+0x88>
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	2201      	movs	r2, #1
 800f126:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f12a:	e013      	b.n	800f154 <HAL_TIMEx_PWMN_Stop+0xb0>
 800f12c:	683b      	ldr	r3, [r7, #0]
 800f12e:	2b04      	cmp	r3, #4
 800f130:	d104      	bne.n	800f13c <HAL_TIMEx_PWMN_Stop+0x98>
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	2201      	movs	r2, #1
 800f136:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f13a:	e00b      	b.n	800f154 <HAL_TIMEx_PWMN_Stop+0xb0>
 800f13c:	683b      	ldr	r3, [r7, #0]
 800f13e:	2b08      	cmp	r3, #8
 800f140:	d104      	bne.n	800f14c <HAL_TIMEx_PWMN_Stop+0xa8>
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	2201      	movs	r2, #1
 800f146:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f14a:	e003      	b.n	800f154 <HAL_TIMEx_PWMN_Stop+0xb0>
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	2201      	movs	r2, #1
 800f150:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 800f154:	2300      	movs	r3, #0
}
 800f156:	4618      	mov	r0, r3
 800f158:	3708      	adds	r7, #8
 800f15a:	46bd      	mov	sp, r7
 800f15c:	bd80      	pop	{r7, pc}
	...

0800f160 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f160:	b480      	push	{r7}
 800f162:	b085      	sub	sp, #20
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]
 800f168:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f170:	2b01      	cmp	r3, #1
 800f172:	d101      	bne.n	800f178 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f174:	2302      	movs	r3, #2
 800f176:	e077      	b.n	800f268 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	2201      	movs	r2, #1
 800f17c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	2202      	movs	r2, #2
 800f184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	685b      	ldr	r3, [r3, #4]
 800f18e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	689b      	ldr	r3, [r3, #8]
 800f196:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	4a35      	ldr	r2, [pc, #212]	@ (800f274 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f19e:	4293      	cmp	r3, r2
 800f1a0:	d004      	beq.n	800f1ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	4a34      	ldr	r2, [pc, #208]	@ (800f278 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f1a8:	4293      	cmp	r3, r2
 800f1aa:	d108      	bne.n	800f1be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f1b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f1b4:	683b      	ldr	r3, [r7, #0]
 800f1b6:	685b      	ldr	r3, [r3, #4]
 800f1b8:	68fa      	ldr	r2, [r7, #12]
 800f1ba:	4313      	orrs	r3, r2
 800f1bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f1c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f1c6:	683b      	ldr	r3, [r7, #0]
 800f1c8:	681b      	ldr	r3, [r3, #0]
 800f1ca:	68fa      	ldr	r2, [r7, #12]
 800f1cc:	4313      	orrs	r3, r2
 800f1ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	68fa      	ldr	r2, [r7, #12]
 800f1d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	4a25      	ldr	r2, [pc, #148]	@ (800f274 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f1de:	4293      	cmp	r3, r2
 800f1e0:	d02c      	beq.n	800f23c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f1ea:	d027      	beq.n	800f23c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	4a22      	ldr	r2, [pc, #136]	@ (800f27c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800f1f2:	4293      	cmp	r3, r2
 800f1f4:	d022      	beq.n	800f23c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	4a21      	ldr	r2, [pc, #132]	@ (800f280 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800f1fc:	4293      	cmp	r3, r2
 800f1fe:	d01d      	beq.n	800f23c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	4a1f      	ldr	r2, [pc, #124]	@ (800f284 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800f206:	4293      	cmp	r3, r2
 800f208:	d018      	beq.n	800f23c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	4a1a      	ldr	r2, [pc, #104]	@ (800f278 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f210:	4293      	cmp	r3, r2
 800f212:	d013      	beq.n	800f23c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	4a1b      	ldr	r2, [pc, #108]	@ (800f288 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800f21a:	4293      	cmp	r3, r2
 800f21c:	d00e      	beq.n	800f23c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	4a1a      	ldr	r2, [pc, #104]	@ (800f28c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800f224:	4293      	cmp	r3, r2
 800f226:	d009      	beq.n	800f23c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	4a18      	ldr	r2, [pc, #96]	@ (800f290 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800f22e:	4293      	cmp	r3, r2
 800f230:	d004      	beq.n	800f23c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	4a17      	ldr	r2, [pc, #92]	@ (800f294 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800f238:	4293      	cmp	r3, r2
 800f23a:	d10c      	bne.n	800f256 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f23c:	68bb      	ldr	r3, [r7, #8]
 800f23e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f242:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f244:	683b      	ldr	r3, [r7, #0]
 800f246:	689b      	ldr	r3, [r3, #8]
 800f248:	68ba      	ldr	r2, [r7, #8]
 800f24a:	4313      	orrs	r3, r2
 800f24c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	68ba      	ldr	r2, [r7, #8]
 800f254:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	2201      	movs	r2, #1
 800f25a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	2200      	movs	r2, #0
 800f262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f266:	2300      	movs	r3, #0
}
 800f268:	4618      	mov	r0, r3
 800f26a:	3714      	adds	r7, #20
 800f26c:	46bd      	mov	sp, r7
 800f26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f272:	4770      	bx	lr
 800f274:	40010000 	.word	0x40010000
 800f278:	40010400 	.word	0x40010400
 800f27c:	40000400 	.word	0x40000400
 800f280:	40000800 	.word	0x40000800
 800f284:	40000c00 	.word	0x40000c00
 800f288:	40001800 	.word	0x40001800
 800f28c:	40014000 	.word	0x40014000
 800f290:	4000e000 	.word	0x4000e000
 800f294:	4000e400 	.word	0x4000e400

0800f298 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f298:	b480      	push	{r7}
 800f29a:	b085      	sub	sp, #20
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
 800f2a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f2ac:	2b01      	cmp	r3, #1
 800f2ae:	d101      	bne.n	800f2b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f2b0:	2302      	movs	r3, #2
 800f2b2:	e087      	b.n	800f3c4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2201      	movs	r2, #1
 800f2b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800f2c2:	683b      	ldr	r3, [r7, #0]
 800f2c4:	68db      	ldr	r3, [r3, #12]
 800f2c6:	4313      	orrs	r3, r2
 800f2c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f2d0:	683b      	ldr	r3, [r7, #0]
 800f2d2:	689b      	ldr	r3, [r3, #8]
 800f2d4:	4313      	orrs	r3, r2
 800f2d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800f2de:	683b      	ldr	r3, [r7, #0]
 800f2e0:	685b      	ldr	r3, [r3, #4]
 800f2e2:	4313      	orrs	r3, r2
 800f2e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800f2ec:	683b      	ldr	r3, [r7, #0]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	4313      	orrs	r3, r2
 800f2f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f2fa:	683b      	ldr	r3, [r7, #0]
 800f2fc:	691b      	ldr	r3, [r3, #16]
 800f2fe:	4313      	orrs	r3, r2
 800f300:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800f308:	683b      	ldr	r3, [r7, #0]
 800f30a:	695b      	ldr	r3, [r3, #20]
 800f30c:	4313      	orrs	r3, r2
 800f30e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800f316:	683b      	ldr	r3, [r7, #0]
 800f318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f31a:	4313      	orrs	r3, r2
 800f31c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800f324:	683b      	ldr	r3, [r7, #0]
 800f326:	699b      	ldr	r3, [r3, #24]
 800f328:	041b      	lsls	r3, r3, #16
 800f32a:	4313      	orrs	r3, r2
 800f32c:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	4a27      	ldr	r2, [pc, #156]	@ (800f3d0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800f334:	4293      	cmp	r3, r2
 800f336:	d004      	beq.n	800f342 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	4a25      	ldr	r2, [pc, #148]	@ (800f3d4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800f33e:	4293      	cmp	r3, r2
 800f340:	d106      	bne.n	800f350 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800f348:	683b      	ldr	r3, [r7, #0]
 800f34a:	69db      	ldr	r3, [r3, #28]
 800f34c:	4313      	orrs	r3, r2
 800f34e:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	4a1e      	ldr	r2, [pc, #120]	@ (800f3d0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800f356:	4293      	cmp	r3, r2
 800f358:	d004      	beq.n	800f364 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	4a1d      	ldr	r2, [pc, #116]	@ (800f3d4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800f360:	4293      	cmp	r3, r2
 800f362:	d126      	bne.n	800f3b2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800f36a:	683b      	ldr	r3, [r7, #0]
 800f36c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f36e:	051b      	lsls	r3, r3, #20
 800f370:	4313      	orrs	r3, r2
 800f372:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800f37a:	683b      	ldr	r3, [r7, #0]
 800f37c:	6a1b      	ldr	r3, [r3, #32]
 800f37e:	4313      	orrs	r3, r2
 800f380:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800f388:	683b      	ldr	r3, [r7, #0]
 800f38a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f38c:	4313      	orrs	r3, r2
 800f38e:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	4a0e      	ldr	r2, [pc, #56]	@ (800f3d0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800f396:	4293      	cmp	r3, r2
 800f398:	d004      	beq.n	800f3a4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	4a0d      	ldr	r2, [pc, #52]	@ (800f3d4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800f3a0:	4293      	cmp	r3, r2
 800f3a2:	d106      	bne.n	800f3b2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800f3aa:	683b      	ldr	r3, [r7, #0]
 800f3ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3ae:	4313      	orrs	r3, r2
 800f3b0:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	68fa      	ldr	r2, [r7, #12]
 800f3b8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	2200      	movs	r2, #0
 800f3be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f3c2:	2300      	movs	r3, #0
}
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	3714      	adds	r7, #20
 800f3c8:	46bd      	mov	sp, r7
 800f3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ce:	4770      	bx	lr
 800f3d0:	40010000 	.word	0x40010000
 800f3d4:	40010400 	.word	0x40010400

0800f3d8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800f3d8:	b480      	push	{r7}
 800f3da:	b087      	sub	sp, #28
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	60f8      	str	r0, [r7, #12]
 800f3e0:	60b9      	str	r1, [r7, #8]
 800f3e2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f3e4:	68bb      	ldr	r3, [r7, #8]
 800f3e6:	f003 031f 	and.w	r3, r3, #31
 800f3ea:	2204      	movs	r2, #4
 800f3ec:	fa02 f303 	lsl.w	r3, r2, r3
 800f3f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	6a1a      	ldr	r2, [r3, #32]
 800f3f6:	697b      	ldr	r3, [r7, #20]
 800f3f8:	43db      	mvns	r3, r3
 800f3fa:	401a      	ands	r2, r3
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	6a1a      	ldr	r2, [r3, #32]
 800f404:	68bb      	ldr	r3, [r7, #8]
 800f406:	f003 031f 	and.w	r3, r3, #31
 800f40a:	6879      	ldr	r1, [r7, #4]
 800f40c:	fa01 f303 	lsl.w	r3, r1, r3
 800f410:	431a      	orrs	r2, r3
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	621a      	str	r2, [r3, #32]
}
 800f416:	bf00      	nop
 800f418:	371c      	adds	r7, #28
 800f41a:	46bd      	mov	sp, r7
 800f41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f420:	4770      	bx	lr

0800f422 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f422:	b580      	push	{r7, lr}
 800f424:	b082      	sub	sp, #8
 800f426:	af00      	add	r7, sp, #0
 800f428:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d101      	bne.n	800f434 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f430:	2301      	movs	r3, #1
 800f432:	e042      	b.n	800f4ba <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d106      	bne.n	800f44c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	2200      	movs	r2, #0
 800f442:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f446:	6878      	ldr	r0, [r7, #4]
 800f448:	f7f4 faa2 	bl	8003990 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	2224      	movs	r2, #36	@ 0x24
 800f450:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	681a      	ldr	r2, [r3, #0]
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	f022 0201 	bic.w	r2, r2, #1
 800f462:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f464:	6878      	ldr	r0, [r7, #4]
 800f466:	f000 f983 	bl	800f770 <UART_SetConfig>
 800f46a:	4603      	mov	r3, r0
 800f46c:	2b01      	cmp	r3, #1
 800f46e:	d101      	bne.n	800f474 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800f470:	2301      	movs	r3, #1
 800f472:	e022      	b.n	800f4ba <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d002      	beq.n	800f482 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800f47c:	6878      	ldr	r0, [r7, #4]
 800f47e:	f000 ffe3 	bl	8010448 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	685a      	ldr	r2, [r3, #4]
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f490:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	689a      	ldr	r2, [r3, #8]
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f4a0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	681a      	ldr	r2, [r3, #0]
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	f042 0201 	orr.w	r2, r2, #1
 800f4b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f4b2:	6878      	ldr	r0, [r7, #4]
 800f4b4:	f001 f86a 	bl	801058c <UART_CheckIdleState>
 800f4b8:	4603      	mov	r3, r0
}
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	3708      	adds	r7, #8
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	bd80      	pop	{r7, pc}

0800f4c2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f4c2:	b580      	push	{r7, lr}
 800f4c4:	b08a      	sub	sp, #40	@ 0x28
 800f4c6:	af02      	add	r7, sp, #8
 800f4c8:	60f8      	str	r0, [r7, #12]
 800f4ca:	60b9      	str	r1, [r7, #8]
 800f4cc:	603b      	str	r3, [r7, #0]
 800f4ce:	4613      	mov	r3, r2
 800f4d0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f4d8:	2b20      	cmp	r3, #32
 800f4da:	d17b      	bne.n	800f5d4 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800f4dc:	68bb      	ldr	r3, [r7, #8]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d002      	beq.n	800f4e8 <HAL_UART_Transmit+0x26>
 800f4e2:	88fb      	ldrh	r3, [r7, #6]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d101      	bne.n	800f4ec <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800f4e8:	2301      	movs	r3, #1
 800f4ea:	e074      	b.n	800f5d6 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	2221      	movs	r2, #33	@ 0x21
 800f4f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f4fc:	f7f4 fe1c 	bl	8004138 <HAL_GetTick>
 800f500:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	88fa      	ldrh	r2, [r7, #6]
 800f506:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	88fa      	ldrh	r2, [r7, #6]
 800f50e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	689b      	ldr	r3, [r3, #8]
 800f516:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f51a:	d108      	bne.n	800f52e <HAL_UART_Transmit+0x6c>
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	691b      	ldr	r3, [r3, #16]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d104      	bne.n	800f52e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800f524:	2300      	movs	r3, #0
 800f526:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f528:	68bb      	ldr	r3, [r7, #8]
 800f52a:	61bb      	str	r3, [r7, #24]
 800f52c:	e003      	b.n	800f536 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800f52e:	68bb      	ldr	r3, [r7, #8]
 800f530:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f532:	2300      	movs	r3, #0
 800f534:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f536:	e030      	b.n	800f59a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f538:	683b      	ldr	r3, [r7, #0]
 800f53a:	9300      	str	r3, [sp, #0]
 800f53c:	697b      	ldr	r3, [r7, #20]
 800f53e:	2200      	movs	r2, #0
 800f540:	2180      	movs	r1, #128	@ 0x80
 800f542:	68f8      	ldr	r0, [r7, #12]
 800f544:	f001 f8cc 	bl	80106e0 <UART_WaitOnFlagUntilTimeout>
 800f548:	4603      	mov	r3, r0
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d005      	beq.n	800f55a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	2220      	movs	r2, #32
 800f552:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800f556:	2303      	movs	r3, #3
 800f558:	e03d      	b.n	800f5d6 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800f55a:	69fb      	ldr	r3, [r7, #28]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d10b      	bne.n	800f578 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f560:	69bb      	ldr	r3, [r7, #24]
 800f562:	881b      	ldrh	r3, [r3, #0]
 800f564:	461a      	mov	r2, r3
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f56e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800f570:	69bb      	ldr	r3, [r7, #24]
 800f572:	3302      	adds	r3, #2
 800f574:	61bb      	str	r3, [r7, #24]
 800f576:	e007      	b.n	800f588 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f578:	69fb      	ldr	r3, [r7, #28]
 800f57a:	781a      	ldrb	r2, [r3, #0]
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800f582:	69fb      	ldr	r3, [r7, #28]
 800f584:	3301      	adds	r3, #1
 800f586:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f58e:	b29b      	uxth	r3, r3
 800f590:	3b01      	subs	r3, #1
 800f592:	b29a      	uxth	r2, r3
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f5a0:	b29b      	uxth	r3, r3
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d1c8      	bne.n	800f538 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f5a6:	683b      	ldr	r3, [r7, #0]
 800f5a8:	9300      	str	r3, [sp, #0]
 800f5aa:	697b      	ldr	r3, [r7, #20]
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	2140      	movs	r1, #64	@ 0x40
 800f5b0:	68f8      	ldr	r0, [r7, #12]
 800f5b2:	f001 f895 	bl	80106e0 <UART_WaitOnFlagUntilTimeout>
 800f5b6:	4603      	mov	r3, r0
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d005      	beq.n	800f5c8 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	2220      	movs	r2, #32
 800f5c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800f5c4:	2303      	movs	r3, #3
 800f5c6:	e006      	b.n	800f5d6 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	2220      	movs	r2, #32
 800f5cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800f5d0:	2300      	movs	r3, #0
 800f5d2:	e000      	b.n	800f5d6 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800f5d4:	2302      	movs	r3, #2
  }
}
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	3720      	adds	r7, #32
 800f5da:	46bd      	mov	sp, r7
 800f5dc:	bd80      	pop	{r7, pc}

0800f5de <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f5de:	b580      	push	{r7, lr}
 800f5e0:	b08a      	sub	sp, #40	@ 0x28
 800f5e2:	af02      	add	r7, sp, #8
 800f5e4:	60f8      	str	r0, [r7, #12]
 800f5e6:	60b9      	str	r1, [r7, #8]
 800f5e8:	603b      	str	r3, [r7, #0]
 800f5ea:	4613      	mov	r3, r2
 800f5ec:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f5f4:	2b20      	cmp	r3, #32
 800f5f6:	f040 80b5 	bne.w	800f764 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800f5fa:	68bb      	ldr	r3, [r7, #8]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d002      	beq.n	800f606 <HAL_UART_Receive+0x28>
 800f600:	88fb      	ldrh	r3, [r7, #6]
 800f602:	2b00      	cmp	r3, #0
 800f604:	d101      	bne.n	800f60a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800f606:	2301      	movs	r3, #1
 800f608:	e0ad      	b.n	800f766 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	2200      	movs	r2, #0
 800f60e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	2222      	movs	r2, #34	@ 0x22
 800f616:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	2200      	movs	r2, #0
 800f61e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f620:	f7f4 fd8a 	bl	8004138 <HAL_GetTick>
 800f624:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	88fa      	ldrh	r2, [r7, #6]
 800f62a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	88fa      	ldrh	r2, [r7, #6]
 800f632:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	689b      	ldr	r3, [r3, #8]
 800f63a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f63e:	d10e      	bne.n	800f65e <HAL_UART_Receive+0x80>
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	691b      	ldr	r3, [r3, #16]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d105      	bne.n	800f654 <HAL_UART_Receive+0x76>
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800f64e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f652:	e02d      	b.n	800f6b0 <HAL_UART_Receive+0xd2>
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	22ff      	movs	r2, #255	@ 0xff
 800f658:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f65c:	e028      	b.n	800f6b0 <HAL_UART_Receive+0xd2>
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	689b      	ldr	r3, [r3, #8]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d10d      	bne.n	800f682 <HAL_UART_Receive+0xa4>
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	691b      	ldr	r3, [r3, #16]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d104      	bne.n	800f678 <HAL_UART_Receive+0x9a>
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	22ff      	movs	r2, #255	@ 0xff
 800f672:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f676:	e01b      	b.n	800f6b0 <HAL_UART_Receive+0xd2>
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	227f      	movs	r2, #127	@ 0x7f
 800f67c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f680:	e016      	b.n	800f6b0 <HAL_UART_Receive+0xd2>
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	689b      	ldr	r3, [r3, #8]
 800f686:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f68a:	d10d      	bne.n	800f6a8 <HAL_UART_Receive+0xca>
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	691b      	ldr	r3, [r3, #16]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d104      	bne.n	800f69e <HAL_UART_Receive+0xc0>
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	227f      	movs	r2, #127	@ 0x7f
 800f698:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f69c:	e008      	b.n	800f6b0 <HAL_UART_Receive+0xd2>
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	223f      	movs	r2, #63	@ 0x3f
 800f6a2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f6a6:	e003      	b.n	800f6b0 <HAL_UART_Receive+0xd2>
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f6b6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	689b      	ldr	r3, [r3, #8]
 800f6bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f6c0:	d108      	bne.n	800f6d4 <HAL_UART_Receive+0xf6>
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	691b      	ldr	r3, [r3, #16]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d104      	bne.n	800f6d4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f6ce:	68bb      	ldr	r3, [r7, #8]
 800f6d0:	61bb      	str	r3, [r7, #24]
 800f6d2:	e003      	b.n	800f6dc <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800f6d4:	68bb      	ldr	r3, [r7, #8]
 800f6d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f6d8:	2300      	movs	r3, #0
 800f6da:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800f6dc:	e036      	b.n	800f74c <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800f6de:	683b      	ldr	r3, [r7, #0]
 800f6e0:	9300      	str	r3, [sp, #0]
 800f6e2:	697b      	ldr	r3, [r7, #20]
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	2120      	movs	r1, #32
 800f6e8:	68f8      	ldr	r0, [r7, #12]
 800f6ea:	f000 fff9 	bl	80106e0 <UART_WaitOnFlagUntilTimeout>
 800f6ee:	4603      	mov	r3, r0
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d005      	beq.n	800f700 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	2220      	movs	r2, #32
 800f6f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800f6fc:	2303      	movs	r3, #3
 800f6fe:	e032      	b.n	800f766 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800f700:	69fb      	ldr	r3, [r7, #28]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d10c      	bne.n	800f720 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f70c:	b29a      	uxth	r2, r3
 800f70e:	8a7b      	ldrh	r3, [r7, #18]
 800f710:	4013      	ands	r3, r2
 800f712:	b29a      	uxth	r2, r3
 800f714:	69bb      	ldr	r3, [r7, #24]
 800f716:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800f718:	69bb      	ldr	r3, [r7, #24]
 800f71a:	3302      	adds	r3, #2
 800f71c:	61bb      	str	r3, [r7, #24]
 800f71e:	e00c      	b.n	800f73a <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f726:	b2da      	uxtb	r2, r3
 800f728:	8a7b      	ldrh	r3, [r7, #18]
 800f72a:	b2db      	uxtb	r3, r3
 800f72c:	4013      	ands	r3, r2
 800f72e:	b2da      	uxtb	r2, r3
 800f730:	69fb      	ldr	r3, [r7, #28]
 800f732:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800f734:	69fb      	ldr	r3, [r7, #28]
 800f736:	3301      	adds	r3, #1
 800f738:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f740:	b29b      	uxth	r3, r3
 800f742:	3b01      	subs	r3, #1
 800f744:	b29a      	uxth	r2, r3
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f752:	b29b      	uxth	r3, r3
 800f754:	2b00      	cmp	r3, #0
 800f756:	d1c2      	bne.n	800f6de <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	2220      	movs	r2, #32
 800f75c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800f760:	2300      	movs	r3, #0
 800f762:	e000      	b.n	800f766 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800f764:	2302      	movs	r3, #2
  }
}
 800f766:	4618      	mov	r0, r3
 800f768:	3720      	adds	r7, #32
 800f76a:	46bd      	mov	sp, r7
 800f76c:	bd80      	pop	{r7, pc}
	...

0800f770 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f770:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f774:	b092      	sub	sp, #72	@ 0x48
 800f776:	af00      	add	r7, sp, #0
 800f778:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f77a:	2300      	movs	r3, #0
 800f77c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f780:	697b      	ldr	r3, [r7, #20]
 800f782:	689a      	ldr	r2, [r3, #8]
 800f784:	697b      	ldr	r3, [r7, #20]
 800f786:	691b      	ldr	r3, [r3, #16]
 800f788:	431a      	orrs	r2, r3
 800f78a:	697b      	ldr	r3, [r7, #20]
 800f78c:	695b      	ldr	r3, [r3, #20]
 800f78e:	431a      	orrs	r2, r3
 800f790:	697b      	ldr	r3, [r7, #20]
 800f792:	69db      	ldr	r3, [r3, #28]
 800f794:	4313      	orrs	r3, r2
 800f796:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f798:	697b      	ldr	r3, [r7, #20]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	681a      	ldr	r2, [r3, #0]
 800f79e:	4bbe      	ldr	r3, [pc, #760]	@ (800fa98 <UART_SetConfig+0x328>)
 800f7a0:	4013      	ands	r3, r2
 800f7a2:	697a      	ldr	r2, [r7, #20]
 800f7a4:	6812      	ldr	r2, [r2, #0]
 800f7a6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f7a8:	430b      	orrs	r3, r1
 800f7aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f7ac:	697b      	ldr	r3, [r7, #20]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	685b      	ldr	r3, [r3, #4]
 800f7b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f7b6:	697b      	ldr	r3, [r7, #20]
 800f7b8:	68da      	ldr	r2, [r3, #12]
 800f7ba:	697b      	ldr	r3, [r7, #20]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	430a      	orrs	r2, r1
 800f7c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f7c2:	697b      	ldr	r3, [r7, #20]
 800f7c4:	699b      	ldr	r3, [r3, #24]
 800f7c6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f7c8:	697b      	ldr	r3, [r7, #20]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	4ab3      	ldr	r2, [pc, #716]	@ (800fa9c <UART_SetConfig+0x32c>)
 800f7ce:	4293      	cmp	r3, r2
 800f7d0:	d004      	beq.n	800f7dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f7d2:	697b      	ldr	r3, [r7, #20]
 800f7d4:	6a1b      	ldr	r3, [r3, #32]
 800f7d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f7d8:	4313      	orrs	r3, r2
 800f7da:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f7dc:	697b      	ldr	r3, [r7, #20]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	689a      	ldr	r2, [r3, #8]
 800f7e2:	4baf      	ldr	r3, [pc, #700]	@ (800faa0 <UART_SetConfig+0x330>)
 800f7e4:	4013      	ands	r3, r2
 800f7e6:	697a      	ldr	r2, [r7, #20]
 800f7e8:	6812      	ldr	r2, [r2, #0]
 800f7ea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f7ec:	430b      	orrs	r3, r1
 800f7ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f7f0:	697b      	ldr	r3, [r7, #20]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7f6:	f023 010f 	bic.w	r1, r3, #15
 800f7fa:	697b      	ldr	r3, [r7, #20]
 800f7fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f7fe:	697b      	ldr	r3, [r7, #20]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	430a      	orrs	r2, r1
 800f804:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f806:	697b      	ldr	r3, [r7, #20]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	4aa6      	ldr	r2, [pc, #664]	@ (800faa4 <UART_SetConfig+0x334>)
 800f80c:	4293      	cmp	r3, r2
 800f80e:	d177      	bne.n	800f900 <UART_SetConfig+0x190>
 800f810:	4ba5      	ldr	r3, [pc, #660]	@ (800faa8 <UART_SetConfig+0x338>)
 800f812:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f814:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f818:	2b28      	cmp	r3, #40	@ 0x28
 800f81a:	d86d      	bhi.n	800f8f8 <UART_SetConfig+0x188>
 800f81c:	a201      	add	r2, pc, #4	@ (adr r2, 800f824 <UART_SetConfig+0xb4>)
 800f81e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f822:	bf00      	nop
 800f824:	0800f8c9 	.word	0x0800f8c9
 800f828:	0800f8f9 	.word	0x0800f8f9
 800f82c:	0800f8f9 	.word	0x0800f8f9
 800f830:	0800f8f9 	.word	0x0800f8f9
 800f834:	0800f8f9 	.word	0x0800f8f9
 800f838:	0800f8f9 	.word	0x0800f8f9
 800f83c:	0800f8f9 	.word	0x0800f8f9
 800f840:	0800f8f9 	.word	0x0800f8f9
 800f844:	0800f8d1 	.word	0x0800f8d1
 800f848:	0800f8f9 	.word	0x0800f8f9
 800f84c:	0800f8f9 	.word	0x0800f8f9
 800f850:	0800f8f9 	.word	0x0800f8f9
 800f854:	0800f8f9 	.word	0x0800f8f9
 800f858:	0800f8f9 	.word	0x0800f8f9
 800f85c:	0800f8f9 	.word	0x0800f8f9
 800f860:	0800f8f9 	.word	0x0800f8f9
 800f864:	0800f8d9 	.word	0x0800f8d9
 800f868:	0800f8f9 	.word	0x0800f8f9
 800f86c:	0800f8f9 	.word	0x0800f8f9
 800f870:	0800f8f9 	.word	0x0800f8f9
 800f874:	0800f8f9 	.word	0x0800f8f9
 800f878:	0800f8f9 	.word	0x0800f8f9
 800f87c:	0800f8f9 	.word	0x0800f8f9
 800f880:	0800f8f9 	.word	0x0800f8f9
 800f884:	0800f8e1 	.word	0x0800f8e1
 800f888:	0800f8f9 	.word	0x0800f8f9
 800f88c:	0800f8f9 	.word	0x0800f8f9
 800f890:	0800f8f9 	.word	0x0800f8f9
 800f894:	0800f8f9 	.word	0x0800f8f9
 800f898:	0800f8f9 	.word	0x0800f8f9
 800f89c:	0800f8f9 	.word	0x0800f8f9
 800f8a0:	0800f8f9 	.word	0x0800f8f9
 800f8a4:	0800f8e9 	.word	0x0800f8e9
 800f8a8:	0800f8f9 	.word	0x0800f8f9
 800f8ac:	0800f8f9 	.word	0x0800f8f9
 800f8b0:	0800f8f9 	.word	0x0800f8f9
 800f8b4:	0800f8f9 	.word	0x0800f8f9
 800f8b8:	0800f8f9 	.word	0x0800f8f9
 800f8bc:	0800f8f9 	.word	0x0800f8f9
 800f8c0:	0800f8f9 	.word	0x0800f8f9
 800f8c4:	0800f8f1 	.word	0x0800f8f1
 800f8c8:	2301      	movs	r3, #1
 800f8ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8ce:	e326      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800f8d0:	2304      	movs	r3, #4
 800f8d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8d6:	e322      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800f8d8:	2308      	movs	r3, #8
 800f8da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8de:	e31e      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800f8e0:	2310      	movs	r3, #16
 800f8e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8e6:	e31a      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800f8e8:	2320      	movs	r3, #32
 800f8ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8ee:	e316      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800f8f0:	2340      	movs	r3, #64	@ 0x40
 800f8f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8f6:	e312      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800f8f8:	2380      	movs	r3, #128	@ 0x80
 800f8fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f8fe:	e30e      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800f900:	697b      	ldr	r3, [r7, #20]
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	4a69      	ldr	r2, [pc, #420]	@ (800faac <UART_SetConfig+0x33c>)
 800f906:	4293      	cmp	r3, r2
 800f908:	d130      	bne.n	800f96c <UART_SetConfig+0x1fc>
 800f90a:	4b67      	ldr	r3, [pc, #412]	@ (800faa8 <UART_SetConfig+0x338>)
 800f90c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f90e:	f003 0307 	and.w	r3, r3, #7
 800f912:	2b05      	cmp	r3, #5
 800f914:	d826      	bhi.n	800f964 <UART_SetConfig+0x1f4>
 800f916:	a201      	add	r2, pc, #4	@ (adr r2, 800f91c <UART_SetConfig+0x1ac>)
 800f918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f91c:	0800f935 	.word	0x0800f935
 800f920:	0800f93d 	.word	0x0800f93d
 800f924:	0800f945 	.word	0x0800f945
 800f928:	0800f94d 	.word	0x0800f94d
 800f92c:	0800f955 	.word	0x0800f955
 800f930:	0800f95d 	.word	0x0800f95d
 800f934:	2300      	movs	r3, #0
 800f936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f93a:	e2f0      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800f93c:	2304      	movs	r3, #4
 800f93e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f942:	e2ec      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800f944:	2308      	movs	r3, #8
 800f946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f94a:	e2e8      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800f94c:	2310      	movs	r3, #16
 800f94e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f952:	e2e4      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800f954:	2320      	movs	r3, #32
 800f956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f95a:	e2e0      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800f95c:	2340      	movs	r3, #64	@ 0x40
 800f95e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f962:	e2dc      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800f964:	2380      	movs	r3, #128	@ 0x80
 800f966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f96a:	e2d8      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800f96c:	697b      	ldr	r3, [r7, #20]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	4a4f      	ldr	r2, [pc, #316]	@ (800fab0 <UART_SetConfig+0x340>)
 800f972:	4293      	cmp	r3, r2
 800f974:	d130      	bne.n	800f9d8 <UART_SetConfig+0x268>
 800f976:	4b4c      	ldr	r3, [pc, #304]	@ (800faa8 <UART_SetConfig+0x338>)
 800f978:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f97a:	f003 0307 	and.w	r3, r3, #7
 800f97e:	2b05      	cmp	r3, #5
 800f980:	d826      	bhi.n	800f9d0 <UART_SetConfig+0x260>
 800f982:	a201      	add	r2, pc, #4	@ (adr r2, 800f988 <UART_SetConfig+0x218>)
 800f984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f988:	0800f9a1 	.word	0x0800f9a1
 800f98c:	0800f9a9 	.word	0x0800f9a9
 800f990:	0800f9b1 	.word	0x0800f9b1
 800f994:	0800f9b9 	.word	0x0800f9b9
 800f998:	0800f9c1 	.word	0x0800f9c1
 800f99c:	0800f9c9 	.word	0x0800f9c9
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9a6:	e2ba      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800f9a8:	2304      	movs	r3, #4
 800f9aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9ae:	e2b6      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800f9b0:	2308      	movs	r3, #8
 800f9b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9b6:	e2b2      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800f9b8:	2310      	movs	r3, #16
 800f9ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9be:	e2ae      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800f9c0:	2320      	movs	r3, #32
 800f9c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9c6:	e2aa      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800f9c8:	2340      	movs	r3, #64	@ 0x40
 800f9ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9ce:	e2a6      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800f9d0:	2380      	movs	r3, #128	@ 0x80
 800f9d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9d6:	e2a2      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800f9d8:	697b      	ldr	r3, [r7, #20]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	4a35      	ldr	r2, [pc, #212]	@ (800fab4 <UART_SetConfig+0x344>)
 800f9de:	4293      	cmp	r3, r2
 800f9e0:	d130      	bne.n	800fa44 <UART_SetConfig+0x2d4>
 800f9e2:	4b31      	ldr	r3, [pc, #196]	@ (800faa8 <UART_SetConfig+0x338>)
 800f9e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f9e6:	f003 0307 	and.w	r3, r3, #7
 800f9ea:	2b05      	cmp	r3, #5
 800f9ec:	d826      	bhi.n	800fa3c <UART_SetConfig+0x2cc>
 800f9ee:	a201      	add	r2, pc, #4	@ (adr r2, 800f9f4 <UART_SetConfig+0x284>)
 800f9f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9f4:	0800fa0d 	.word	0x0800fa0d
 800f9f8:	0800fa15 	.word	0x0800fa15
 800f9fc:	0800fa1d 	.word	0x0800fa1d
 800fa00:	0800fa25 	.word	0x0800fa25
 800fa04:	0800fa2d 	.word	0x0800fa2d
 800fa08:	0800fa35 	.word	0x0800fa35
 800fa0c:	2300      	movs	r3, #0
 800fa0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa12:	e284      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fa14:	2304      	movs	r3, #4
 800fa16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa1a:	e280      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fa1c:	2308      	movs	r3, #8
 800fa1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa22:	e27c      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fa24:	2310      	movs	r3, #16
 800fa26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa2a:	e278      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fa2c:	2320      	movs	r3, #32
 800fa2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa32:	e274      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fa34:	2340      	movs	r3, #64	@ 0x40
 800fa36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa3a:	e270      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fa3c:	2380      	movs	r3, #128	@ 0x80
 800fa3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa42:	e26c      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fa44:	697b      	ldr	r3, [r7, #20]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	4a1b      	ldr	r2, [pc, #108]	@ (800fab8 <UART_SetConfig+0x348>)
 800fa4a:	4293      	cmp	r3, r2
 800fa4c:	d142      	bne.n	800fad4 <UART_SetConfig+0x364>
 800fa4e:	4b16      	ldr	r3, [pc, #88]	@ (800faa8 <UART_SetConfig+0x338>)
 800fa50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fa52:	f003 0307 	and.w	r3, r3, #7
 800fa56:	2b05      	cmp	r3, #5
 800fa58:	d838      	bhi.n	800facc <UART_SetConfig+0x35c>
 800fa5a:	a201      	add	r2, pc, #4	@ (adr r2, 800fa60 <UART_SetConfig+0x2f0>)
 800fa5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa60:	0800fa79 	.word	0x0800fa79
 800fa64:	0800fa81 	.word	0x0800fa81
 800fa68:	0800fa89 	.word	0x0800fa89
 800fa6c:	0800fa91 	.word	0x0800fa91
 800fa70:	0800fabd 	.word	0x0800fabd
 800fa74:	0800fac5 	.word	0x0800fac5
 800fa78:	2300      	movs	r3, #0
 800fa7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa7e:	e24e      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fa80:	2304      	movs	r3, #4
 800fa82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa86:	e24a      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fa88:	2308      	movs	r3, #8
 800fa8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa8e:	e246      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fa90:	2310      	movs	r3, #16
 800fa92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa96:	e242      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fa98:	cfff69f3 	.word	0xcfff69f3
 800fa9c:	58000c00 	.word	0x58000c00
 800faa0:	11fff4ff 	.word	0x11fff4ff
 800faa4:	40011000 	.word	0x40011000
 800faa8:	58024400 	.word	0x58024400
 800faac:	40004400 	.word	0x40004400
 800fab0:	40004800 	.word	0x40004800
 800fab4:	40004c00 	.word	0x40004c00
 800fab8:	40005000 	.word	0x40005000
 800fabc:	2320      	movs	r3, #32
 800fabe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fac2:	e22c      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fac4:	2340      	movs	r3, #64	@ 0x40
 800fac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800faca:	e228      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800facc:	2380      	movs	r3, #128	@ 0x80
 800face:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fad2:	e224      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fad4:	697b      	ldr	r3, [r7, #20]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	4ab1      	ldr	r2, [pc, #708]	@ (800fda0 <UART_SetConfig+0x630>)
 800fada:	4293      	cmp	r3, r2
 800fadc:	d176      	bne.n	800fbcc <UART_SetConfig+0x45c>
 800fade:	4bb1      	ldr	r3, [pc, #708]	@ (800fda4 <UART_SetConfig+0x634>)
 800fae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fae2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fae6:	2b28      	cmp	r3, #40	@ 0x28
 800fae8:	d86c      	bhi.n	800fbc4 <UART_SetConfig+0x454>
 800faea:	a201      	add	r2, pc, #4	@ (adr r2, 800faf0 <UART_SetConfig+0x380>)
 800faec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800faf0:	0800fb95 	.word	0x0800fb95
 800faf4:	0800fbc5 	.word	0x0800fbc5
 800faf8:	0800fbc5 	.word	0x0800fbc5
 800fafc:	0800fbc5 	.word	0x0800fbc5
 800fb00:	0800fbc5 	.word	0x0800fbc5
 800fb04:	0800fbc5 	.word	0x0800fbc5
 800fb08:	0800fbc5 	.word	0x0800fbc5
 800fb0c:	0800fbc5 	.word	0x0800fbc5
 800fb10:	0800fb9d 	.word	0x0800fb9d
 800fb14:	0800fbc5 	.word	0x0800fbc5
 800fb18:	0800fbc5 	.word	0x0800fbc5
 800fb1c:	0800fbc5 	.word	0x0800fbc5
 800fb20:	0800fbc5 	.word	0x0800fbc5
 800fb24:	0800fbc5 	.word	0x0800fbc5
 800fb28:	0800fbc5 	.word	0x0800fbc5
 800fb2c:	0800fbc5 	.word	0x0800fbc5
 800fb30:	0800fba5 	.word	0x0800fba5
 800fb34:	0800fbc5 	.word	0x0800fbc5
 800fb38:	0800fbc5 	.word	0x0800fbc5
 800fb3c:	0800fbc5 	.word	0x0800fbc5
 800fb40:	0800fbc5 	.word	0x0800fbc5
 800fb44:	0800fbc5 	.word	0x0800fbc5
 800fb48:	0800fbc5 	.word	0x0800fbc5
 800fb4c:	0800fbc5 	.word	0x0800fbc5
 800fb50:	0800fbad 	.word	0x0800fbad
 800fb54:	0800fbc5 	.word	0x0800fbc5
 800fb58:	0800fbc5 	.word	0x0800fbc5
 800fb5c:	0800fbc5 	.word	0x0800fbc5
 800fb60:	0800fbc5 	.word	0x0800fbc5
 800fb64:	0800fbc5 	.word	0x0800fbc5
 800fb68:	0800fbc5 	.word	0x0800fbc5
 800fb6c:	0800fbc5 	.word	0x0800fbc5
 800fb70:	0800fbb5 	.word	0x0800fbb5
 800fb74:	0800fbc5 	.word	0x0800fbc5
 800fb78:	0800fbc5 	.word	0x0800fbc5
 800fb7c:	0800fbc5 	.word	0x0800fbc5
 800fb80:	0800fbc5 	.word	0x0800fbc5
 800fb84:	0800fbc5 	.word	0x0800fbc5
 800fb88:	0800fbc5 	.word	0x0800fbc5
 800fb8c:	0800fbc5 	.word	0x0800fbc5
 800fb90:	0800fbbd 	.word	0x0800fbbd
 800fb94:	2301      	movs	r3, #1
 800fb96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb9a:	e1c0      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fb9c:	2304      	movs	r3, #4
 800fb9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fba2:	e1bc      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fba4:	2308      	movs	r3, #8
 800fba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbaa:	e1b8      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fbac:	2310      	movs	r3, #16
 800fbae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbb2:	e1b4      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fbb4:	2320      	movs	r3, #32
 800fbb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbba:	e1b0      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fbbc:	2340      	movs	r3, #64	@ 0x40
 800fbbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbc2:	e1ac      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fbc4:	2380      	movs	r3, #128	@ 0x80
 800fbc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fbca:	e1a8      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fbcc:	697b      	ldr	r3, [r7, #20]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	4a75      	ldr	r2, [pc, #468]	@ (800fda8 <UART_SetConfig+0x638>)
 800fbd2:	4293      	cmp	r3, r2
 800fbd4:	d130      	bne.n	800fc38 <UART_SetConfig+0x4c8>
 800fbd6:	4b73      	ldr	r3, [pc, #460]	@ (800fda4 <UART_SetConfig+0x634>)
 800fbd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fbda:	f003 0307 	and.w	r3, r3, #7
 800fbde:	2b05      	cmp	r3, #5
 800fbe0:	d826      	bhi.n	800fc30 <UART_SetConfig+0x4c0>
 800fbe2:	a201      	add	r2, pc, #4	@ (adr r2, 800fbe8 <UART_SetConfig+0x478>)
 800fbe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbe8:	0800fc01 	.word	0x0800fc01
 800fbec:	0800fc09 	.word	0x0800fc09
 800fbf0:	0800fc11 	.word	0x0800fc11
 800fbf4:	0800fc19 	.word	0x0800fc19
 800fbf8:	0800fc21 	.word	0x0800fc21
 800fbfc:	0800fc29 	.word	0x0800fc29
 800fc00:	2300      	movs	r3, #0
 800fc02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc06:	e18a      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fc08:	2304      	movs	r3, #4
 800fc0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc0e:	e186      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fc10:	2308      	movs	r3, #8
 800fc12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc16:	e182      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fc18:	2310      	movs	r3, #16
 800fc1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc1e:	e17e      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fc20:	2320      	movs	r3, #32
 800fc22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc26:	e17a      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fc28:	2340      	movs	r3, #64	@ 0x40
 800fc2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc2e:	e176      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fc30:	2380      	movs	r3, #128	@ 0x80
 800fc32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc36:	e172      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fc38:	697b      	ldr	r3, [r7, #20]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	4a5b      	ldr	r2, [pc, #364]	@ (800fdac <UART_SetConfig+0x63c>)
 800fc3e:	4293      	cmp	r3, r2
 800fc40:	d130      	bne.n	800fca4 <UART_SetConfig+0x534>
 800fc42:	4b58      	ldr	r3, [pc, #352]	@ (800fda4 <UART_SetConfig+0x634>)
 800fc44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fc46:	f003 0307 	and.w	r3, r3, #7
 800fc4a:	2b05      	cmp	r3, #5
 800fc4c:	d826      	bhi.n	800fc9c <UART_SetConfig+0x52c>
 800fc4e:	a201      	add	r2, pc, #4	@ (adr r2, 800fc54 <UART_SetConfig+0x4e4>)
 800fc50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc54:	0800fc6d 	.word	0x0800fc6d
 800fc58:	0800fc75 	.word	0x0800fc75
 800fc5c:	0800fc7d 	.word	0x0800fc7d
 800fc60:	0800fc85 	.word	0x0800fc85
 800fc64:	0800fc8d 	.word	0x0800fc8d
 800fc68:	0800fc95 	.word	0x0800fc95
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc72:	e154      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fc74:	2304      	movs	r3, #4
 800fc76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc7a:	e150      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fc7c:	2308      	movs	r3, #8
 800fc7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc82:	e14c      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fc84:	2310      	movs	r3, #16
 800fc86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc8a:	e148      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fc8c:	2320      	movs	r3, #32
 800fc8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc92:	e144      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fc94:	2340      	movs	r3, #64	@ 0x40
 800fc96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc9a:	e140      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fc9c:	2380      	movs	r3, #128	@ 0x80
 800fc9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fca2:	e13c      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fca4:	697b      	ldr	r3, [r7, #20]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	4a41      	ldr	r2, [pc, #260]	@ (800fdb0 <UART_SetConfig+0x640>)
 800fcaa:	4293      	cmp	r3, r2
 800fcac:	f040 8082 	bne.w	800fdb4 <UART_SetConfig+0x644>
 800fcb0:	4b3c      	ldr	r3, [pc, #240]	@ (800fda4 <UART_SetConfig+0x634>)
 800fcb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fcb4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fcb8:	2b28      	cmp	r3, #40	@ 0x28
 800fcba:	d86d      	bhi.n	800fd98 <UART_SetConfig+0x628>
 800fcbc:	a201      	add	r2, pc, #4	@ (adr r2, 800fcc4 <UART_SetConfig+0x554>)
 800fcbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcc2:	bf00      	nop
 800fcc4:	0800fd69 	.word	0x0800fd69
 800fcc8:	0800fd99 	.word	0x0800fd99
 800fccc:	0800fd99 	.word	0x0800fd99
 800fcd0:	0800fd99 	.word	0x0800fd99
 800fcd4:	0800fd99 	.word	0x0800fd99
 800fcd8:	0800fd99 	.word	0x0800fd99
 800fcdc:	0800fd99 	.word	0x0800fd99
 800fce0:	0800fd99 	.word	0x0800fd99
 800fce4:	0800fd71 	.word	0x0800fd71
 800fce8:	0800fd99 	.word	0x0800fd99
 800fcec:	0800fd99 	.word	0x0800fd99
 800fcf0:	0800fd99 	.word	0x0800fd99
 800fcf4:	0800fd99 	.word	0x0800fd99
 800fcf8:	0800fd99 	.word	0x0800fd99
 800fcfc:	0800fd99 	.word	0x0800fd99
 800fd00:	0800fd99 	.word	0x0800fd99
 800fd04:	0800fd79 	.word	0x0800fd79
 800fd08:	0800fd99 	.word	0x0800fd99
 800fd0c:	0800fd99 	.word	0x0800fd99
 800fd10:	0800fd99 	.word	0x0800fd99
 800fd14:	0800fd99 	.word	0x0800fd99
 800fd18:	0800fd99 	.word	0x0800fd99
 800fd1c:	0800fd99 	.word	0x0800fd99
 800fd20:	0800fd99 	.word	0x0800fd99
 800fd24:	0800fd81 	.word	0x0800fd81
 800fd28:	0800fd99 	.word	0x0800fd99
 800fd2c:	0800fd99 	.word	0x0800fd99
 800fd30:	0800fd99 	.word	0x0800fd99
 800fd34:	0800fd99 	.word	0x0800fd99
 800fd38:	0800fd99 	.word	0x0800fd99
 800fd3c:	0800fd99 	.word	0x0800fd99
 800fd40:	0800fd99 	.word	0x0800fd99
 800fd44:	0800fd89 	.word	0x0800fd89
 800fd48:	0800fd99 	.word	0x0800fd99
 800fd4c:	0800fd99 	.word	0x0800fd99
 800fd50:	0800fd99 	.word	0x0800fd99
 800fd54:	0800fd99 	.word	0x0800fd99
 800fd58:	0800fd99 	.word	0x0800fd99
 800fd5c:	0800fd99 	.word	0x0800fd99
 800fd60:	0800fd99 	.word	0x0800fd99
 800fd64:	0800fd91 	.word	0x0800fd91
 800fd68:	2301      	movs	r3, #1
 800fd6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd6e:	e0d6      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fd70:	2304      	movs	r3, #4
 800fd72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd76:	e0d2      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fd78:	2308      	movs	r3, #8
 800fd7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd7e:	e0ce      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fd80:	2310      	movs	r3, #16
 800fd82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd86:	e0ca      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fd88:	2320      	movs	r3, #32
 800fd8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd8e:	e0c6      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fd90:	2340      	movs	r3, #64	@ 0x40
 800fd92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd96:	e0c2      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fd98:	2380      	movs	r3, #128	@ 0x80
 800fd9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd9e:	e0be      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fda0:	40011400 	.word	0x40011400
 800fda4:	58024400 	.word	0x58024400
 800fda8:	40007800 	.word	0x40007800
 800fdac:	40007c00 	.word	0x40007c00
 800fdb0:	40011800 	.word	0x40011800
 800fdb4:	697b      	ldr	r3, [r7, #20]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	4aad      	ldr	r2, [pc, #692]	@ (8010070 <UART_SetConfig+0x900>)
 800fdba:	4293      	cmp	r3, r2
 800fdbc:	d176      	bne.n	800feac <UART_SetConfig+0x73c>
 800fdbe:	4bad      	ldr	r3, [pc, #692]	@ (8010074 <UART_SetConfig+0x904>)
 800fdc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fdc2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fdc6:	2b28      	cmp	r3, #40	@ 0x28
 800fdc8:	d86c      	bhi.n	800fea4 <UART_SetConfig+0x734>
 800fdca:	a201      	add	r2, pc, #4	@ (adr r2, 800fdd0 <UART_SetConfig+0x660>)
 800fdcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdd0:	0800fe75 	.word	0x0800fe75
 800fdd4:	0800fea5 	.word	0x0800fea5
 800fdd8:	0800fea5 	.word	0x0800fea5
 800fddc:	0800fea5 	.word	0x0800fea5
 800fde0:	0800fea5 	.word	0x0800fea5
 800fde4:	0800fea5 	.word	0x0800fea5
 800fde8:	0800fea5 	.word	0x0800fea5
 800fdec:	0800fea5 	.word	0x0800fea5
 800fdf0:	0800fe7d 	.word	0x0800fe7d
 800fdf4:	0800fea5 	.word	0x0800fea5
 800fdf8:	0800fea5 	.word	0x0800fea5
 800fdfc:	0800fea5 	.word	0x0800fea5
 800fe00:	0800fea5 	.word	0x0800fea5
 800fe04:	0800fea5 	.word	0x0800fea5
 800fe08:	0800fea5 	.word	0x0800fea5
 800fe0c:	0800fea5 	.word	0x0800fea5
 800fe10:	0800fe85 	.word	0x0800fe85
 800fe14:	0800fea5 	.word	0x0800fea5
 800fe18:	0800fea5 	.word	0x0800fea5
 800fe1c:	0800fea5 	.word	0x0800fea5
 800fe20:	0800fea5 	.word	0x0800fea5
 800fe24:	0800fea5 	.word	0x0800fea5
 800fe28:	0800fea5 	.word	0x0800fea5
 800fe2c:	0800fea5 	.word	0x0800fea5
 800fe30:	0800fe8d 	.word	0x0800fe8d
 800fe34:	0800fea5 	.word	0x0800fea5
 800fe38:	0800fea5 	.word	0x0800fea5
 800fe3c:	0800fea5 	.word	0x0800fea5
 800fe40:	0800fea5 	.word	0x0800fea5
 800fe44:	0800fea5 	.word	0x0800fea5
 800fe48:	0800fea5 	.word	0x0800fea5
 800fe4c:	0800fea5 	.word	0x0800fea5
 800fe50:	0800fe95 	.word	0x0800fe95
 800fe54:	0800fea5 	.word	0x0800fea5
 800fe58:	0800fea5 	.word	0x0800fea5
 800fe5c:	0800fea5 	.word	0x0800fea5
 800fe60:	0800fea5 	.word	0x0800fea5
 800fe64:	0800fea5 	.word	0x0800fea5
 800fe68:	0800fea5 	.word	0x0800fea5
 800fe6c:	0800fea5 	.word	0x0800fea5
 800fe70:	0800fe9d 	.word	0x0800fe9d
 800fe74:	2301      	movs	r3, #1
 800fe76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe7a:	e050      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fe7c:	2304      	movs	r3, #4
 800fe7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe82:	e04c      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fe84:	2308      	movs	r3, #8
 800fe86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe8a:	e048      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fe8c:	2310      	movs	r3, #16
 800fe8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe92:	e044      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fe94:	2320      	movs	r3, #32
 800fe96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe9a:	e040      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fe9c:	2340      	movs	r3, #64	@ 0x40
 800fe9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fea2:	e03c      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fea4:	2380      	movs	r3, #128	@ 0x80
 800fea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800feaa:	e038      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800feac:	697b      	ldr	r3, [r7, #20]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	4a71      	ldr	r2, [pc, #452]	@ (8010078 <UART_SetConfig+0x908>)
 800feb2:	4293      	cmp	r3, r2
 800feb4:	d130      	bne.n	800ff18 <UART_SetConfig+0x7a8>
 800feb6:	4b6f      	ldr	r3, [pc, #444]	@ (8010074 <UART_SetConfig+0x904>)
 800feb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800feba:	f003 0307 	and.w	r3, r3, #7
 800febe:	2b05      	cmp	r3, #5
 800fec0:	d826      	bhi.n	800ff10 <UART_SetConfig+0x7a0>
 800fec2:	a201      	add	r2, pc, #4	@ (adr r2, 800fec8 <UART_SetConfig+0x758>)
 800fec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fec8:	0800fee1 	.word	0x0800fee1
 800fecc:	0800fee9 	.word	0x0800fee9
 800fed0:	0800fef1 	.word	0x0800fef1
 800fed4:	0800fef9 	.word	0x0800fef9
 800fed8:	0800ff01 	.word	0x0800ff01
 800fedc:	0800ff09 	.word	0x0800ff09
 800fee0:	2302      	movs	r3, #2
 800fee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fee6:	e01a      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fee8:	2304      	movs	r3, #4
 800feea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800feee:	e016      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fef0:	2308      	movs	r3, #8
 800fef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fef6:	e012      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800fef8:	2310      	movs	r3, #16
 800fefa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fefe:	e00e      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800ff00:	2320      	movs	r3, #32
 800ff02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff06:	e00a      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800ff08:	2340      	movs	r3, #64	@ 0x40
 800ff0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff0e:	e006      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800ff10:	2380      	movs	r3, #128	@ 0x80
 800ff12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff16:	e002      	b.n	800ff1e <UART_SetConfig+0x7ae>
 800ff18:	2380      	movs	r3, #128	@ 0x80
 800ff1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ff1e:	697b      	ldr	r3, [r7, #20]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	4a55      	ldr	r2, [pc, #340]	@ (8010078 <UART_SetConfig+0x908>)
 800ff24:	4293      	cmp	r3, r2
 800ff26:	f040 80f8 	bne.w	801011a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ff2a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ff2e:	2b20      	cmp	r3, #32
 800ff30:	dc46      	bgt.n	800ffc0 <UART_SetConfig+0x850>
 800ff32:	2b02      	cmp	r3, #2
 800ff34:	db75      	blt.n	8010022 <UART_SetConfig+0x8b2>
 800ff36:	3b02      	subs	r3, #2
 800ff38:	2b1e      	cmp	r3, #30
 800ff3a:	d872      	bhi.n	8010022 <UART_SetConfig+0x8b2>
 800ff3c:	a201      	add	r2, pc, #4	@ (adr r2, 800ff44 <UART_SetConfig+0x7d4>)
 800ff3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff42:	bf00      	nop
 800ff44:	0800ffc7 	.word	0x0800ffc7
 800ff48:	08010023 	.word	0x08010023
 800ff4c:	0800ffcf 	.word	0x0800ffcf
 800ff50:	08010023 	.word	0x08010023
 800ff54:	08010023 	.word	0x08010023
 800ff58:	08010023 	.word	0x08010023
 800ff5c:	0800ffdf 	.word	0x0800ffdf
 800ff60:	08010023 	.word	0x08010023
 800ff64:	08010023 	.word	0x08010023
 800ff68:	08010023 	.word	0x08010023
 800ff6c:	08010023 	.word	0x08010023
 800ff70:	08010023 	.word	0x08010023
 800ff74:	08010023 	.word	0x08010023
 800ff78:	08010023 	.word	0x08010023
 800ff7c:	0800ffef 	.word	0x0800ffef
 800ff80:	08010023 	.word	0x08010023
 800ff84:	08010023 	.word	0x08010023
 800ff88:	08010023 	.word	0x08010023
 800ff8c:	08010023 	.word	0x08010023
 800ff90:	08010023 	.word	0x08010023
 800ff94:	08010023 	.word	0x08010023
 800ff98:	08010023 	.word	0x08010023
 800ff9c:	08010023 	.word	0x08010023
 800ffa0:	08010023 	.word	0x08010023
 800ffa4:	08010023 	.word	0x08010023
 800ffa8:	08010023 	.word	0x08010023
 800ffac:	08010023 	.word	0x08010023
 800ffb0:	08010023 	.word	0x08010023
 800ffb4:	08010023 	.word	0x08010023
 800ffb8:	08010023 	.word	0x08010023
 800ffbc:	08010015 	.word	0x08010015
 800ffc0:	2b40      	cmp	r3, #64	@ 0x40
 800ffc2:	d02a      	beq.n	801001a <UART_SetConfig+0x8aa>
 800ffc4:	e02d      	b.n	8010022 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ffc6:	f7fd f93f 	bl	800d248 <HAL_RCCEx_GetD3PCLK1Freq>
 800ffca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ffcc:	e02f      	b.n	801002e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ffce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	f7fd f94e 	bl	800d274 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ffd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ffdc:	e027      	b.n	801002e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ffde:	f107 0318 	add.w	r3, r7, #24
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	f7fd fa9a 	bl	800d51c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ffe8:	69fb      	ldr	r3, [r7, #28]
 800ffea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ffec:	e01f      	b.n	801002e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ffee:	4b21      	ldr	r3, [pc, #132]	@ (8010074 <UART_SetConfig+0x904>)
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	f003 0320 	and.w	r3, r3, #32
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d009      	beq.n	801000e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fffa:	4b1e      	ldr	r3, [pc, #120]	@ (8010074 <UART_SetConfig+0x904>)
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	08db      	lsrs	r3, r3, #3
 8010000:	f003 0303 	and.w	r3, r3, #3
 8010004:	4a1d      	ldr	r2, [pc, #116]	@ (801007c <UART_SetConfig+0x90c>)
 8010006:	fa22 f303 	lsr.w	r3, r2, r3
 801000a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801000c:	e00f      	b.n	801002e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801000e:	4b1b      	ldr	r3, [pc, #108]	@ (801007c <UART_SetConfig+0x90c>)
 8010010:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010012:	e00c      	b.n	801002e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010014:	4b1a      	ldr	r3, [pc, #104]	@ (8010080 <UART_SetConfig+0x910>)
 8010016:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010018:	e009      	b.n	801002e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801001a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801001e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010020:	e005      	b.n	801002e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8010022:	2300      	movs	r3, #0
 8010024:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010026:	2301      	movs	r3, #1
 8010028:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801002c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801002e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010030:	2b00      	cmp	r3, #0
 8010032:	f000 81ee 	beq.w	8010412 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010036:	697b      	ldr	r3, [r7, #20]
 8010038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801003a:	4a12      	ldr	r2, [pc, #72]	@ (8010084 <UART_SetConfig+0x914>)
 801003c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010040:	461a      	mov	r2, r3
 8010042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010044:	fbb3 f3f2 	udiv	r3, r3, r2
 8010048:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801004a:	697b      	ldr	r3, [r7, #20]
 801004c:	685a      	ldr	r2, [r3, #4]
 801004e:	4613      	mov	r3, r2
 8010050:	005b      	lsls	r3, r3, #1
 8010052:	4413      	add	r3, r2
 8010054:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010056:	429a      	cmp	r2, r3
 8010058:	d305      	bcc.n	8010066 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801005a:	697b      	ldr	r3, [r7, #20]
 801005c:	685b      	ldr	r3, [r3, #4]
 801005e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010060:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010062:	429a      	cmp	r2, r3
 8010064:	d910      	bls.n	8010088 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8010066:	2301      	movs	r3, #1
 8010068:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801006c:	e1d1      	b.n	8010412 <UART_SetConfig+0xca2>
 801006e:	bf00      	nop
 8010070:	40011c00 	.word	0x40011c00
 8010074:	58024400 	.word	0x58024400
 8010078:	58000c00 	.word	0x58000c00
 801007c:	03d09000 	.word	0x03d09000
 8010080:	003d0900 	.word	0x003d0900
 8010084:	08011f24 	.word	0x08011f24
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010088:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801008a:	2200      	movs	r2, #0
 801008c:	60bb      	str	r3, [r7, #8]
 801008e:	60fa      	str	r2, [r7, #12]
 8010090:	697b      	ldr	r3, [r7, #20]
 8010092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010094:	4ac0      	ldr	r2, [pc, #768]	@ (8010398 <UART_SetConfig+0xc28>)
 8010096:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801009a:	b29b      	uxth	r3, r3
 801009c:	2200      	movs	r2, #0
 801009e:	603b      	str	r3, [r7, #0]
 80100a0:	607a      	str	r2, [r7, #4]
 80100a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80100a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80100aa:	f7f0 f989 	bl	80003c0 <__aeabi_uldivmod>
 80100ae:	4602      	mov	r2, r0
 80100b0:	460b      	mov	r3, r1
 80100b2:	4610      	mov	r0, r2
 80100b4:	4619      	mov	r1, r3
 80100b6:	f04f 0200 	mov.w	r2, #0
 80100ba:	f04f 0300 	mov.w	r3, #0
 80100be:	020b      	lsls	r3, r1, #8
 80100c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80100c4:	0202      	lsls	r2, r0, #8
 80100c6:	6979      	ldr	r1, [r7, #20]
 80100c8:	6849      	ldr	r1, [r1, #4]
 80100ca:	0849      	lsrs	r1, r1, #1
 80100cc:	2000      	movs	r0, #0
 80100ce:	460c      	mov	r4, r1
 80100d0:	4605      	mov	r5, r0
 80100d2:	eb12 0804 	adds.w	r8, r2, r4
 80100d6:	eb43 0905 	adc.w	r9, r3, r5
 80100da:	697b      	ldr	r3, [r7, #20]
 80100dc:	685b      	ldr	r3, [r3, #4]
 80100de:	2200      	movs	r2, #0
 80100e0:	469a      	mov	sl, r3
 80100e2:	4693      	mov	fp, r2
 80100e4:	4652      	mov	r2, sl
 80100e6:	465b      	mov	r3, fp
 80100e8:	4640      	mov	r0, r8
 80100ea:	4649      	mov	r1, r9
 80100ec:	f7f0 f968 	bl	80003c0 <__aeabi_uldivmod>
 80100f0:	4602      	mov	r2, r0
 80100f2:	460b      	mov	r3, r1
 80100f4:	4613      	mov	r3, r2
 80100f6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80100f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80100fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80100fe:	d308      	bcc.n	8010112 <UART_SetConfig+0x9a2>
 8010100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010102:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010106:	d204      	bcs.n	8010112 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8010108:	697b      	ldr	r3, [r7, #20]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801010e:	60da      	str	r2, [r3, #12]
 8010110:	e17f      	b.n	8010412 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8010112:	2301      	movs	r3, #1
 8010114:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010118:	e17b      	b.n	8010412 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801011a:	697b      	ldr	r3, [r7, #20]
 801011c:	69db      	ldr	r3, [r3, #28]
 801011e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010122:	f040 80bd 	bne.w	80102a0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8010126:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801012a:	2b20      	cmp	r3, #32
 801012c:	dc48      	bgt.n	80101c0 <UART_SetConfig+0xa50>
 801012e:	2b00      	cmp	r3, #0
 8010130:	db7b      	blt.n	801022a <UART_SetConfig+0xaba>
 8010132:	2b20      	cmp	r3, #32
 8010134:	d879      	bhi.n	801022a <UART_SetConfig+0xaba>
 8010136:	a201      	add	r2, pc, #4	@ (adr r2, 801013c <UART_SetConfig+0x9cc>)
 8010138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801013c:	080101c7 	.word	0x080101c7
 8010140:	080101cf 	.word	0x080101cf
 8010144:	0801022b 	.word	0x0801022b
 8010148:	0801022b 	.word	0x0801022b
 801014c:	080101d7 	.word	0x080101d7
 8010150:	0801022b 	.word	0x0801022b
 8010154:	0801022b 	.word	0x0801022b
 8010158:	0801022b 	.word	0x0801022b
 801015c:	080101e7 	.word	0x080101e7
 8010160:	0801022b 	.word	0x0801022b
 8010164:	0801022b 	.word	0x0801022b
 8010168:	0801022b 	.word	0x0801022b
 801016c:	0801022b 	.word	0x0801022b
 8010170:	0801022b 	.word	0x0801022b
 8010174:	0801022b 	.word	0x0801022b
 8010178:	0801022b 	.word	0x0801022b
 801017c:	080101f7 	.word	0x080101f7
 8010180:	0801022b 	.word	0x0801022b
 8010184:	0801022b 	.word	0x0801022b
 8010188:	0801022b 	.word	0x0801022b
 801018c:	0801022b 	.word	0x0801022b
 8010190:	0801022b 	.word	0x0801022b
 8010194:	0801022b 	.word	0x0801022b
 8010198:	0801022b 	.word	0x0801022b
 801019c:	0801022b 	.word	0x0801022b
 80101a0:	0801022b 	.word	0x0801022b
 80101a4:	0801022b 	.word	0x0801022b
 80101a8:	0801022b 	.word	0x0801022b
 80101ac:	0801022b 	.word	0x0801022b
 80101b0:	0801022b 	.word	0x0801022b
 80101b4:	0801022b 	.word	0x0801022b
 80101b8:	0801022b 	.word	0x0801022b
 80101bc:	0801021d 	.word	0x0801021d
 80101c0:	2b40      	cmp	r3, #64	@ 0x40
 80101c2:	d02e      	beq.n	8010222 <UART_SetConfig+0xab2>
 80101c4:	e031      	b.n	801022a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80101c6:	f7fb f9a1 	bl	800b50c <HAL_RCC_GetPCLK1Freq>
 80101ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80101cc:	e033      	b.n	8010236 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80101ce:	f7fb f9b3 	bl	800b538 <HAL_RCC_GetPCLK2Freq>
 80101d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80101d4:	e02f      	b.n	8010236 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80101d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80101da:	4618      	mov	r0, r3
 80101dc:	f7fd f84a 	bl	800d274 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80101e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80101e4:	e027      	b.n	8010236 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80101e6:	f107 0318 	add.w	r3, r7, #24
 80101ea:	4618      	mov	r0, r3
 80101ec:	f7fd f996 	bl	800d51c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80101f0:	69fb      	ldr	r3, [r7, #28]
 80101f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80101f4:	e01f      	b.n	8010236 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80101f6:	4b69      	ldr	r3, [pc, #420]	@ (801039c <UART_SetConfig+0xc2c>)
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	f003 0320 	and.w	r3, r3, #32
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d009      	beq.n	8010216 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010202:	4b66      	ldr	r3, [pc, #408]	@ (801039c <UART_SetConfig+0xc2c>)
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	08db      	lsrs	r3, r3, #3
 8010208:	f003 0303 	and.w	r3, r3, #3
 801020c:	4a64      	ldr	r2, [pc, #400]	@ (80103a0 <UART_SetConfig+0xc30>)
 801020e:	fa22 f303 	lsr.w	r3, r2, r3
 8010212:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010214:	e00f      	b.n	8010236 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8010216:	4b62      	ldr	r3, [pc, #392]	@ (80103a0 <UART_SetConfig+0xc30>)
 8010218:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801021a:	e00c      	b.n	8010236 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801021c:	4b61      	ldr	r3, [pc, #388]	@ (80103a4 <UART_SetConfig+0xc34>)
 801021e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010220:	e009      	b.n	8010236 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010222:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010228:	e005      	b.n	8010236 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 801022a:	2300      	movs	r3, #0
 801022c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801022e:	2301      	movs	r3, #1
 8010230:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010234:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010236:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010238:	2b00      	cmp	r3, #0
 801023a:	f000 80ea 	beq.w	8010412 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801023e:	697b      	ldr	r3, [r7, #20]
 8010240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010242:	4a55      	ldr	r2, [pc, #340]	@ (8010398 <UART_SetConfig+0xc28>)
 8010244:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010248:	461a      	mov	r2, r3
 801024a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801024c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010250:	005a      	lsls	r2, r3, #1
 8010252:	697b      	ldr	r3, [r7, #20]
 8010254:	685b      	ldr	r3, [r3, #4]
 8010256:	085b      	lsrs	r3, r3, #1
 8010258:	441a      	add	r2, r3
 801025a:	697b      	ldr	r3, [r7, #20]
 801025c:	685b      	ldr	r3, [r3, #4]
 801025e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010262:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010266:	2b0f      	cmp	r3, #15
 8010268:	d916      	bls.n	8010298 <UART_SetConfig+0xb28>
 801026a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801026c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010270:	d212      	bcs.n	8010298 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010274:	b29b      	uxth	r3, r3
 8010276:	f023 030f 	bic.w	r3, r3, #15
 801027a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801027c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801027e:	085b      	lsrs	r3, r3, #1
 8010280:	b29b      	uxth	r3, r3
 8010282:	f003 0307 	and.w	r3, r3, #7
 8010286:	b29a      	uxth	r2, r3
 8010288:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801028a:	4313      	orrs	r3, r2
 801028c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 801028e:	697b      	ldr	r3, [r7, #20]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8010294:	60da      	str	r2, [r3, #12]
 8010296:	e0bc      	b.n	8010412 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8010298:	2301      	movs	r3, #1
 801029a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801029e:	e0b8      	b.n	8010412 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80102a0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80102a4:	2b20      	cmp	r3, #32
 80102a6:	dc4b      	bgt.n	8010340 <UART_SetConfig+0xbd0>
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	f2c0 8087 	blt.w	80103bc <UART_SetConfig+0xc4c>
 80102ae:	2b20      	cmp	r3, #32
 80102b0:	f200 8084 	bhi.w	80103bc <UART_SetConfig+0xc4c>
 80102b4:	a201      	add	r2, pc, #4	@ (adr r2, 80102bc <UART_SetConfig+0xb4c>)
 80102b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102ba:	bf00      	nop
 80102bc:	08010347 	.word	0x08010347
 80102c0:	0801034f 	.word	0x0801034f
 80102c4:	080103bd 	.word	0x080103bd
 80102c8:	080103bd 	.word	0x080103bd
 80102cc:	08010357 	.word	0x08010357
 80102d0:	080103bd 	.word	0x080103bd
 80102d4:	080103bd 	.word	0x080103bd
 80102d8:	080103bd 	.word	0x080103bd
 80102dc:	08010367 	.word	0x08010367
 80102e0:	080103bd 	.word	0x080103bd
 80102e4:	080103bd 	.word	0x080103bd
 80102e8:	080103bd 	.word	0x080103bd
 80102ec:	080103bd 	.word	0x080103bd
 80102f0:	080103bd 	.word	0x080103bd
 80102f4:	080103bd 	.word	0x080103bd
 80102f8:	080103bd 	.word	0x080103bd
 80102fc:	08010377 	.word	0x08010377
 8010300:	080103bd 	.word	0x080103bd
 8010304:	080103bd 	.word	0x080103bd
 8010308:	080103bd 	.word	0x080103bd
 801030c:	080103bd 	.word	0x080103bd
 8010310:	080103bd 	.word	0x080103bd
 8010314:	080103bd 	.word	0x080103bd
 8010318:	080103bd 	.word	0x080103bd
 801031c:	080103bd 	.word	0x080103bd
 8010320:	080103bd 	.word	0x080103bd
 8010324:	080103bd 	.word	0x080103bd
 8010328:	080103bd 	.word	0x080103bd
 801032c:	080103bd 	.word	0x080103bd
 8010330:	080103bd 	.word	0x080103bd
 8010334:	080103bd 	.word	0x080103bd
 8010338:	080103bd 	.word	0x080103bd
 801033c:	080103af 	.word	0x080103af
 8010340:	2b40      	cmp	r3, #64	@ 0x40
 8010342:	d037      	beq.n	80103b4 <UART_SetConfig+0xc44>
 8010344:	e03a      	b.n	80103bc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010346:	f7fb f8e1 	bl	800b50c <HAL_RCC_GetPCLK1Freq>
 801034a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801034c:	e03c      	b.n	80103c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801034e:	f7fb f8f3 	bl	800b538 <HAL_RCC_GetPCLK2Freq>
 8010352:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010354:	e038      	b.n	80103c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010356:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801035a:	4618      	mov	r0, r3
 801035c:	f7fc ff8a 	bl	800d274 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010362:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010364:	e030      	b.n	80103c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010366:	f107 0318 	add.w	r3, r7, #24
 801036a:	4618      	mov	r0, r3
 801036c:	f7fd f8d6 	bl	800d51c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010370:	69fb      	ldr	r3, [r7, #28]
 8010372:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010374:	e028      	b.n	80103c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010376:	4b09      	ldr	r3, [pc, #36]	@ (801039c <UART_SetConfig+0xc2c>)
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	f003 0320 	and.w	r3, r3, #32
 801037e:	2b00      	cmp	r3, #0
 8010380:	d012      	beq.n	80103a8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010382:	4b06      	ldr	r3, [pc, #24]	@ (801039c <UART_SetConfig+0xc2c>)
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	08db      	lsrs	r3, r3, #3
 8010388:	f003 0303 	and.w	r3, r3, #3
 801038c:	4a04      	ldr	r2, [pc, #16]	@ (80103a0 <UART_SetConfig+0xc30>)
 801038e:	fa22 f303 	lsr.w	r3, r2, r3
 8010392:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010394:	e018      	b.n	80103c8 <UART_SetConfig+0xc58>
 8010396:	bf00      	nop
 8010398:	08011f24 	.word	0x08011f24
 801039c:	58024400 	.word	0x58024400
 80103a0:	03d09000 	.word	0x03d09000
 80103a4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80103a8:	4b24      	ldr	r3, [pc, #144]	@ (801043c <UART_SetConfig+0xccc>)
 80103aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80103ac:	e00c      	b.n	80103c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80103ae:	4b24      	ldr	r3, [pc, #144]	@ (8010440 <UART_SetConfig+0xcd0>)
 80103b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80103b2:	e009      	b.n	80103c8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80103b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80103b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80103ba:	e005      	b.n	80103c8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80103bc:	2300      	movs	r3, #0
 80103be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80103c0:	2301      	movs	r3, #1
 80103c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80103c6:	bf00      	nop
    }

    if (pclk != 0U)
 80103c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d021      	beq.n	8010412 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80103ce:	697b      	ldr	r3, [r7, #20]
 80103d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103d2:	4a1c      	ldr	r2, [pc, #112]	@ (8010444 <UART_SetConfig+0xcd4>)
 80103d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80103d8:	461a      	mov	r2, r3
 80103da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80103dc:	fbb3 f2f2 	udiv	r2, r3, r2
 80103e0:	697b      	ldr	r3, [r7, #20]
 80103e2:	685b      	ldr	r3, [r3, #4]
 80103e4:	085b      	lsrs	r3, r3, #1
 80103e6:	441a      	add	r2, r3
 80103e8:	697b      	ldr	r3, [r7, #20]
 80103ea:	685b      	ldr	r3, [r3, #4]
 80103ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80103f0:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80103f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103f4:	2b0f      	cmp	r3, #15
 80103f6:	d909      	bls.n	801040c <UART_SetConfig+0xc9c>
 80103f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80103fe:	d205      	bcs.n	801040c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010402:	b29a      	uxth	r2, r3
 8010404:	697b      	ldr	r3, [r7, #20]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	60da      	str	r2, [r3, #12]
 801040a:	e002      	b.n	8010412 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 801040c:	2301      	movs	r3, #1
 801040e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010412:	697b      	ldr	r3, [r7, #20]
 8010414:	2201      	movs	r2, #1
 8010416:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 801041a:	697b      	ldr	r3, [r7, #20]
 801041c:	2201      	movs	r2, #1
 801041e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010422:	697b      	ldr	r3, [r7, #20]
 8010424:	2200      	movs	r2, #0
 8010426:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8010428:	697b      	ldr	r3, [r7, #20]
 801042a:	2200      	movs	r2, #0
 801042c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 801042e:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8010432:	4618      	mov	r0, r3
 8010434:	3748      	adds	r7, #72	@ 0x48
 8010436:	46bd      	mov	sp, r7
 8010438:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801043c:	03d09000 	.word	0x03d09000
 8010440:	003d0900 	.word	0x003d0900
 8010444:	08011f24 	.word	0x08011f24

08010448 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010448:	b480      	push	{r7}
 801044a:	b083      	sub	sp, #12
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010454:	f003 0301 	and.w	r3, r3, #1
 8010458:	2b00      	cmp	r3, #0
 801045a:	d00a      	beq.n	8010472 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	685b      	ldr	r3, [r3, #4]
 8010462:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	430a      	orrs	r2, r1
 8010470:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010476:	f003 0302 	and.w	r3, r3, #2
 801047a:	2b00      	cmp	r3, #0
 801047c:	d00a      	beq.n	8010494 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	685b      	ldr	r3, [r3, #4]
 8010484:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	430a      	orrs	r2, r1
 8010492:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010498:	f003 0304 	and.w	r3, r3, #4
 801049c:	2b00      	cmp	r3, #0
 801049e:	d00a      	beq.n	80104b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	685b      	ldr	r3, [r3, #4]
 80104a6:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	430a      	orrs	r2, r1
 80104b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80104ba:	f003 0308 	and.w	r3, r3, #8
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d00a      	beq.n	80104d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	685b      	ldr	r3, [r3, #4]
 80104c8:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	430a      	orrs	r2, r1
 80104d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80104dc:	f003 0310 	and.w	r3, r3, #16
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d00a      	beq.n	80104fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	689b      	ldr	r3, [r3, #8]
 80104ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	430a      	orrs	r2, r1
 80104f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80104fe:	f003 0320 	and.w	r3, r3, #32
 8010502:	2b00      	cmp	r3, #0
 8010504:	d00a      	beq.n	801051c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	689b      	ldr	r3, [r3, #8]
 801050c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	430a      	orrs	r2, r1
 801051a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010520:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010524:	2b00      	cmp	r3, #0
 8010526:	d01a      	beq.n	801055e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	685b      	ldr	r3, [r3, #4]
 801052e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	430a      	orrs	r2, r1
 801053c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010542:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010546:	d10a      	bne.n	801055e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	685b      	ldr	r3, [r3, #4]
 801054e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	430a      	orrs	r2, r1
 801055c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010566:	2b00      	cmp	r3, #0
 8010568:	d00a      	beq.n	8010580 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	685b      	ldr	r3, [r3, #4]
 8010570:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	430a      	orrs	r2, r1
 801057e:	605a      	str	r2, [r3, #4]
  }
}
 8010580:	bf00      	nop
 8010582:	370c      	adds	r7, #12
 8010584:	46bd      	mov	sp, r7
 8010586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801058a:	4770      	bx	lr

0801058c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801058c:	b580      	push	{r7, lr}
 801058e:	b098      	sub	sp, #96	@ 0x60
 8010590:	af02      	add	r7, sp, #8
 8010592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	2200      	movs	r2, #0
 8010598:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801059c:	f7f3 fdcc 	bl	8004138 <HAL_GetTick>
 80105a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	f003 0308 	and.w	r3, r3, #8
 80105ac:	2b08      	cmp	r3, #8
 80105ae:	d12f      	bne.n	8010610 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80105b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80105b4:	9300      	str	r3, [sp, #0]
 80105b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80105b8:	2200      	movs	r2, #0
 80105ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80105be:	6878      	ldr	r0, [r7, #4]
 80105c0:	f000 f88e 	bl	80106e0 <UART_WaitOnFlagUntilTimeout>
 80105c4:	4603      	mov	r3, r0
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d022      	beq.n	8010610 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105d2:	e853 3f00 	ldrex	r3, [r3]
 80105d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80105d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80105da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80105de:	653b      	str	r3, [r7, #80]	@ 0x50
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	461a      	mov	r2, r3
 80105e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80105e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80105ea:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80105ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80105f0:	e841 2300 	strex	r3, r2, [r1]
 80105f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80105f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d1e6      	bne.n	80105ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	2220      	movs	r2, #32
 8010600:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	2200      	movs	r2, #0
 8010608:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801060c:	2303      	movs	r3, #3
 801060e:	e063      	b.n	80106d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	f003 0304 	and.w	r3, r3, #4
 801061a:	2b04      	cmp	r3, #4
 801061c:	d149      	bne.n	80106b2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801061e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010622:	9300      	str	r3, [sp, #0]
 8010624:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010626:	2200      	movs	r2, #0
 8010628:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801062c:	6878      	ldr	r0, [r7, #4]
 801062e:	f000 f857 	bl	80106e0 <UART_WaitOnFlagUntilTimeout>
 8010632:	4603      	mov	r3, r0
 8010634:	2b00      	cmp	r3, #0
 8010636:	d03c      	beq.n	80106b2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801063e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010640:	e853 3f00 	ldrex	r3, [r3]
 8010644:	623b      	str	r3, [r7, #32]
   return(result);
 8010646:	6a3b      	ldr	r3, [r7, #32]
 8010648:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801064c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	461a      	mov	r2, r3
 8010654:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010656:	633b      	str	r3, [r7, #48]	@ 0x30
 8010658:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801065a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801065c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801065e:	e841 2300 	strex	r3, r2, [r1]
 8010662:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010666:	2b00      	cmp	r3, #0
 8010668:	d1e6      	bne.n	8010638 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	3308      	adds	r3, #8
 8010670:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010672:	693b      	ldr	r3, [r7, #16]
 8010674:	e853 3f00 	ldrex	r3, [r3]
 8010678:	60fb      	str	r3, [r7, #12]
   return(result);
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	f023 0301 	bic.w	r3, r3, #1
 8010680:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	3308      	adds	r3, #8
 8010688:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801068a:	61fa      	str	r2, [r7, #28]
 801068c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801068e:	69b9      	ldr	r1, [r7, #24]
 8010690:	69fa      	ldr	r2, [r7, #28]
 8010692:	e841 2300 	strex	r3, r2, [r1]
 8010696:	617b      	str	r3, [r7, #20]
   return(result);
 8010698:	697b      	ldr	r3, [r7, #20]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d1e5      	bne.n	801066a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	2220      	movs	r2, #32
 80106a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	2200      	movs	r2, #0
 80106aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80106ae:	2303      	movs	r3, #3
 80106b0:	e012      	b.n	80106d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	2220      	movs	r2, #32
 80106b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	2220      	movs	r2, #32
 80106be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	2200      	movs	r2, #0
 80106c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	2200      	movs	r2, #0
 80106cc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	2200      	movs	r2, #0
 80106d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80106d6:	2300      	movs	r3, #0
}
 80106d8:	4618      	mov	r0, r3
 80106da:	3758      	adds	r7, #88	@ 0x58
 80106dc:	46bd      	mov	sp, r7
 80106de:	bd80      	pop	{r7, pc}

080106e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80106e0:	b580      	push	{r7, lr}
 80106e2:	b084      	sub	sp, #16
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	60f8      	str	r0, [r7, #12]
 80106e8:	60b9      	str	r1, [r7, #8]
 80106ea:	603b      	str	r3, [r7, #0]
 80106ec:	4613      	mov	r3, r2
 80106ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80106f0:	e049      	b.n	8010786 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80106f2:	69bb      	ldr	r3, [r7, #24]
 80106f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80106f8:	d045      	beq.n	8010786 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80106fa:	f7f3 fd1d 	bl	8004138 <HAL_GetTick>
 80106fe:	4602      	mov	r2, r0
 8010700:	683b      	ldr	r3, [r7, #0]
 8010702:	1ad3      	subs	r3, r2, r3
 8010704:	69ba      	ldr	r2, [r7, #24]
 8010706:	429a      	cmp	r2, r3
 8010708:	d302      	bcc.n	8010710 <UART_WaitOnFlagUntilTimeout+0x30>
 801070a:	69bb      	ldr	r3, [r7, #24]
 801070c:	2b00      	cmp	r3, #0
 801070e:	d101      	bne.n	8010714 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010710:	2303      	movs	r3, #3
 8010712:	e048      	b.n	80107a6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	f003 0304 	and.w	r3, r3, #4
 801071e:	2b00      	cmp	r3, #0
 8010720:	d031      	beq.n	8010786 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	69db      	ldr	r3, [r3, #28]
 8010728:	f003 0308 	and.w	r3, r3, #8
 801072c:	2b08      	cmp	r3, #8
 801072e:	d110      	bne.n	8010752 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	2208      	movs	r2, #8
 8010736:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8010738:	68f8      	ldr	r0, [r7, #12]
 801073a:	f000 f839 	bl	80107b0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	2208      	movs	r2, #8
 8010742:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	2200      	movs	r2, #0
 801074a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 801074e:	2301      	movs	r3, #1
 8010750:	e029      	b.n	80107a6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	69db      	ldr	r3, [r3, #28]
 8010758:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801075c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010760:	d111      	bne.n	8010786 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801076a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801076c:	68f8      	ldr	r0, [r7, #12]
 801076e:	f000 f81f 	bl	80107b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	2220      	movs	r2, #32
 8010776:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	2200      	movs	r2, #0
 801077e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8010782:	2303      	movs	r3, #3
 8010784:	e00f      	b.n	80107a6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	69da      	ldr	r2, [r3, #28]
 801078c:	68bb      	ldr	r3, [r7, #8]
 801078e:	4013      	ands	r3, r2
 8010790:	68ba      	ldr	r2, [r7, #8]
 8010792:	429a      	cmp	r2, r3
 8010794:	bf0c      	ite	eq
 8010796:	2301      	moveq	r3, #1
 8010798:	2300      	movne	r3, #0
 801079a:	b2db      	uxtb	r3, r3
 801079c:	461a      	mov	r2, r3
 801079e:	79fb      	ldrb	r3, [r7, #7]
 80107a0:	429a      	cmp	r2, r3
 80107a2:	d0a6      	beq.n	80106f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80107a4:	2300      	movs	r3, #0
}
 80107a6:	4618      	mov	r0, r3
 80107a8:	3710      	adds	r7, #16
 80107aa:	46bd      	mov	sp, r7
 80107ac:	bd80      	pop	{r7, pc}
	...

080107b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80107b0:	b480      	push	{r7}
 80107b2:	b095      	sub	sp, #84	@ 0x54
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80107c0:	e853 3f00 	ldrex	r3, [r3]
 80107c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80107c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80107cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	461a      	mov	r2, r3
 80107d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80107d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80107d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80107dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80107de:	e841 2300 	strex	r3, r2, [r1]
 80107e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80107e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d1e6      	bne.n	80107b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	3308      	adds	r3, #8
 80107f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107f2:	6a3b      	ldr	r3, [r7, #32]
 80107f4:	e853 3f00 	ldrex	r3, [r3]
 80107f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80107fa:	69fa      	ldr	r2, [r7, #28]
 80107fc:	4b1e      	ldr	r3, [pc, #120]	@ (8010878 <UART_EndRxTransfer+0xc8>)
 80107fe:	4013      	ands	r3, r2
 8010800:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	3308      	adds	r3, #8
 8010808:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801080a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801080c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801080e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010810:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010812:	e841 2300 	strex	r3, r2, [r1]
 8010816:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801081a:	2b00      	cmp	r3, #0
 801081c:	d1e5      	bne.n	80107ea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010822:	2b01      	cmp	r3, #1
 8010824:	d118      	bne.n	8010858 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	e853 3f00 	ldrex	r3, [r3]
 8010832:	60bb      	str	r3, [r7, #8]
   return(result);
 8010834:	68bb      	ldr	r3, [r7, #8]
 8010836:	f023 0310 	bic.w	r3, r3, #16
 801083a:	647b      	str	r3, [r7, #68]	@ 0x44
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	461a      	mov	r2, r3
 8010842:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010844:	61bb      	str	r3, [r7, #24]
 8010846:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010848:	6979      	ldr	r1, [r7, #20]
 801084a:	69ba      	ldr	r2, [r7, #24]
 801084c:	e841 2300 	strex	r3, r2, [r1]
 8010850:	613b      	str	r3, [r7, #16]
   return(result);
 8010852:	693b      	ldr	r3, [r7, #16]
 8010854:	2b00      	cmp	r3, #0
 8010856:	d1e6      	bne.n	8010826 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	2220      	movs	r2, #32
 801085c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	2200      	movs	r2, #0
 8010864:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	2200      	movs	r2, #0
 801086a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 801086c:	bf00      	nop
 801086e:	3754      	adds	r7, #84	@ 0x54
 8010870:	46bd      	mov	sp, r7
 8010872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010876:	4770      	bx	lr
 8010878:	effffffe 	.word	0xeffffffe

0801087c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801087c:	b480      	push	{r7}
 801087e:	b085      	sub	sp, #20
 8010880:	af00      	add	r7, sp, #0
 8010882:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801088a:	2b01      	cmp	r3, #1
 801088c:	d101      	bne.n	8010892 <HAL_UARTEx_DisableFifoMode+0x16>
 801088e:	2302      	movs	r3, #2
 8010890:	e027      	b.n	80108e2 <HAL_UARTEx_DisableFifoMode+0x66>
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	2201      	movs	r2, #1
 8010896:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	2224      	movs	r2, #36	@ 0x24
 801089e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	681a      	ldr	r2, [r3, #0]
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	f022 0201 	bic.w	r2, r2, #1
 80108b8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80108c0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	2200      	movs	r2, #0
 80108c6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	68fa      	ldr	r2, [r7, #12]
 80108ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	2220      	movs	r2, #32
 80108d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	2200      	movs	r2, #0
 80108dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80108e0:	2300      	movs	r3, #0
}
 80108e2:	4618      	mov	r0, r3
 80108e4:	3714      	adds	r7, #20
 80108e6:	46bd      	mov	sp, r7
 80108e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ec:	4770      	bx	lr

080108ee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80108ee:	b580      	push	{r7, lr}
 80108f0:	b084      	sub	sp, #16
 80108f2:	af00      	add	r7, sp, #0
 80108f4:	6078      	str	r0, [r7, #4]
 80108f6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80108fe:	2b01      	cmp	r3, #1
 8010900:	d101      	bne.n	8010906 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010902:	2302      	movs	r3, #2
 8010904:	e02d      	b.n	8010962 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	2201      	movs	r2, #1
 801090a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	2224      	movs	r2, #36	@ 0x24
 8010912:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	681a      	ldr	r2, [r3, #0]
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	f022 0201 	bic.w	r2, r2, #1
 801092c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	689b      	ldr	r3, [r3, #8]
 8010934:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	683a      	ldr	r2, [r7, #0]
 801093e:	430a      	orrs	r2, r1
 8010940:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010942:	6878      	ldr	r0, [r7, #4]
 8010944:	f000 f850 	bl	80109e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	68fa      	ldr	r2, [r7, #12]
 801094e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	2220      	movs	r2, #32
 8010954:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	2200      	movs	r2, #0
 801095c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010960:	2300      	movs	r3, #0
}
 8010962:	4618      	mov	r0, r3
 8010964:	3710      	adds	r7, #16
 8010966:	46bd      	mov	sp, r7
 8010968:	bd80      	pop	{r7, pc}

0801096a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801096a:	b580      	push	{r7, lr}
 801096c:	b084      	sub	sp, #16
 801096e:	af00      	add	r7, sp, #0
 8010970:	6078      	str	r0, [r7, #4]
 8010972:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801097a:	2b01      	cmp	r3, #1
 801097c:	d101      	bne.n	8010982 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801097e:	2302      	movs	r3, #2
 8010980:	e02d      	b.n	80109de <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	2201      	movs	r2, #1
 8010986:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	2224      	movs	r2, #36	@ 0x24
 801098e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	681a      	ldr	r2, [r3, #0]
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	f022 0201 	bic.w	r2, r2, #1
 80109a8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	689b      	ldr	r3, [r3, #8]
 80109b0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	683a      	ldr	r2, [r7, #0]
 80109ba:	430a      	orrs	r2, r1
 80109bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80109be:	6878      	ldr	r0, [r7, #4]
 80109c0:	f000 f812 	bl	80109e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	68fa      	ldr	r2, [r7, #12]
 80109ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	2220      	movs	r2, #32
 80109d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	2200      	movs	r2, #0
 80109d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80109dc:	2300      	movs	r3, #0
}
 80109de:	4618      	mov	r0, r3
 80109e0:	3710      	adds	r7, #16
 80109e2:	46bd      	mov	sp, r7
 80109e4:	bd80      	pop	{r7, pc}
	...

080109e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80109e8:	b480      	push	{r7}
 80109ea:	b085      	sub	sp, #20
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d108      	bne.n	8010a0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	2201      	movs	r2, #1
 80109fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	2201      	movs	r2, #1
 8010a04:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010a08:	e031      	b.n	8010a6e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010a0a:	2310      	movs	r3, #16
 8010a0c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010a0e:	2310      	movs	r3, #16
 8010a10:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	689b      	ldr	r3, [r3, #8]
 8010a18:	0e5b      	lsrs	r3, r3, #25
 8010a1a:	b2db      	uxtb	r3, r3
 8010a1c:	f003 0307 	and.w	r3, r3, #7
 8010a20:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	689b      	ldr	r3, [r3, #8]
 8010a28:	0f5b      	lsrs	r3, r3, #29
 8010a2a:	b2db      	uxtb	r3, r3
 8010a2c:	f003 0307 	and.w	r3, r3, #7
 8010a30:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010a32:	7bbb      	ldrb	r3, [r7, #14]
 8010a34:	7b3a      	ldrb	r2, [r7, #12]
 8010a36:	4911      	ldr	r1, [pc, #68]	@ (8010a7c <UARTEx_SetNbDataToProcess+0x94>)
 8010a38:	5c8a      	ldrb	r2, [r1, r2]
 8010a3a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010a3e:	7b3a      	ldrb	r2, [r7, #12]
 8010a40:	490f      	ldr	r1, [pc, #60]	@ (8010a80 <UARTEx_SetNbDataToProcess+0x98>)
 8010a42:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010a44:	fb93 f3f2 	sdiv	r3, r3, r2
 8010a48:	b29a      	uxth	r2, r3
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010a50:	7bfb      	ldrb	r3, [r7, #15]
 8010a52:	7b7a      	ldrb	r2, [r7, #13]
 8010a54:	4909      	ldr	r1, [pc, #36]	@ (8010a7c <UARTEx_SetNbDataToProcess+0x94>)
 8010a56:	5c8a      	ldrb	r2, [r1, r2]
 8010a58:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010a5c:	7b7a      	ldrb	r2, [r7, #13]
 8010a5e:	4908      	ldr	r1, [pc, #32]	@ (8010a80 <UARTEx_SetNbDataToProcess+0x98>)
 8010a60:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010a62:	fb93 f3f2 	sdiv	r3, r3, r2
 8010a66:	b29a      	uxth	r2, r3
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8010a6e:	bf00      	nop
 8010a70:	3714      	adds	r7, #20
 8010a72:	46bd      	mov	sp, r7
 8010a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a78:	4770      	bx	lr
 8010a7a:	bf00      	nop
 8010a7c:	08011f3c 	.word	0x08011f3c
 8010a80:	08011f44 	.word	0x08011f44

08010a84 <atoi>:
 8010a84:	220a      	movs	r2, #10
 8010a86:	2100      	movs	r1, #0
 8010a88:	f000 b894 	b.w	8010bb4 <strtol>

08010a8c <__itoa>:
 8010a8c:	1e93      	subs	r3, r2, #2
 8010a8e:	2b22      	cmp	r3, #34	@ 0x22
 8010a90:	b510      	push	{r4, lr}
 8010a92:	460c      	mov	r4, r1
 8010a94:	d904      	bls.n	8010aa0 <__itoa+0x14>
 8010a96:	2300      	movs	r3, #0
 8010a98:	700b      	strb	r3, [r1, #0]
 8010a9a:	461c      	mov	r4, r3
 8010a9c:	4620      	mov	r0, r4
 8010a9e:	bd10      	pop	{r4, pc}
 8010aa0:	2a0a      	cmp	r2, #10
 8010aa2:	d109      	bne.n	8010ab8 <__itoa+0x2c>
 8010aa4:	2800      	cmp	r0, #0
 8010aa6:	da07      	bge.n	8010ab8 <__itoa+0x2c>
 8010aa8:	232d      	movs	r3, #45	@ 0x2d
 8010aaa:	700b      	strb	r3, [r1, #0]
 8010aac:	4240      	negs	r0, r0
 8010aae:	2101      	movs	r1, #1
 8010ab0:	4421      	add	r1, r4
 8010ab2:	f000 f889 	bl	8010bc8 <__utoa>
 8010ab6:	e7f1      	b.n	8010a9c <__itoa+0x10>
 8010ab8:	2100      	movs	r1, #0
 8010aba:	e7f9      	b.n	8010ab0 <__itoa+0x24>

08010abc <itoa>:
 8010abc:	f7ff bfe6 	b.w	8010a8c <__itoa>

08010ac0 <_strtol_l.constprop.0>:
 8010ac0:	2b24      	cmp	r3, #36	@ 0x24
 8010ac2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ac6:	4686      	mov	lr, r0
 8010ac8:	4690      	mov	r8, r2
 8010aca:	d801      	bhi.n	8010ad0 <_strtol_l.constprop.0+0x10>
 8010acc:	2b01      	cmp	r3, #1
 8010ace:	d106      	bne.n	8010ade <_strtol_l.constprop.0+0x1e>
 8010ad0:	f000 f8f4 	bl	8010cbc <__errno>
 8010ad4:	2316      	movs	r3, #22
 8010ad6:	6003      	str	r3, [r0, #0]
 8010ad8:	2000      	movs	r0, #0
 8010ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ade:	4834      	ldr	r0, [pc, #208]	@ (8010bb0 <_strtol_l.constprop.0+0xf0>)
 8010ae0:	460d      	mov	r5, r1
 8010ae2:	462a      	mov	r2, r5
 8010ae4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010ae8:	5d06      	ldrb	r6, [r0, r4]
 8010aea:	f016 0608 	ands.w	r6, r6, #8
 8010aee:	d1f8      	bne.n	8010ae2 <_strtol_l.constprop.0+0x22>
 8010af0:	2c2d      	cmp	r4, #45	@ 0x2d
 8010af2:	d12d      	bne.n	8010b50 <_strtol_l.constprop.0+0x90>
 8010af4:	782c      	ldrb	r4, [r5, #0]
 8010af6:	2601      	movs	r6, #1
 8010af8:	1c95      	adds	r5, r2, #2
 8010afa:	f033 0210 	bics.w	r2, r3, #16
 8010afe:	d109      	bne.n	8010b14 <_strtol_l.constprop.0+0x54>
 8010b00:	2c30      	cmp	r4, #48	@ 0x30
 8010b02:	d12a      	bne.n	8010b5a <_strtol_l.constprop.0+0x9a>
 8010b04:	782a      	ldrb	r2, [r5, #0]
 8010b06:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010b0a:	2a58      	cmp	r2, #88	@ 0x58
 8010b0c:	d125      	bne.n	8010b5a <_strtol_l.constprop.0+0x9a>
 8010b0e:	786c      	ldrb	r4, [r5, #1]
 8010b10:	2310      	movs	r3, #16
 8010b12:	3502      	adds	r5, #2
 8010b14:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8010b18:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8010b1c:	2200      	movs	r2, #0
 8010b1e:	fbbc f9f3 	udiv	r9, ip, r3
 8010b22:	4610      	mov	r0, r2
 8010b24:	fb03 ca19 	mls	sl, r3, r9, ip
 8010b28:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8010b2c:	2f09      	cmp	r7, #9
 8010b2e:	d81b      	bhi.n	8010b68 <_strtol_l.constprop.0+0xa8>
 8010b30:	463c      	mov	r4, r7
 8010b32:	42a3      	cmp	r3, r4
 8010b34:	dd27      	ble.n	8010b86 <_strtol_l.constprop.0+0xc6>
 8010b36:	1c57      	adds	r7, r2, #1
 8010b38:	d007      	beq.n	8010b4a <_strtol_l.constprop.0+0x8a>
 8010b3a:	4581      	cmp	r9, r0
 8010b3c:	d320      	bcc.n	8010b80 <_strtol_l.constprop.0+0xc0>
 8010b3e:	d101      	bne.n	8010b44 <_strtol_l.constprop.0+0x84>
 8010b40:	45a2      	cmp	sl, r4
 8010b42:	db1d      	blt.n	8010b80 <_strtol_l.constprop.0+0xc0>
 8010b44:	fb00 4003 	mla	r0, r0, r3, r4
 8010b48:	2201      	movs	r2, #1
 8010b4a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010b4e:	e7eb      	b.n	8010b28 <_strtol_l.constprop.0+0x68>
 8010b50:	2c2b      	cmp	r4, #43	@ 0x2b
 8010b52:	bf04      	itt	eq
 8010b54:	782c      	ldrbeq	r4, [r5, #0]
 8010b56:	1c95      	addeq	r5, r2, #2
 8010b58:	e7cf      	b.n	8010afa <_strtol_l.constprop.0+0x3a>
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d1da      	bne.n	8010b14 <_strtol_l.constprop.0+0x54>
 8010b5e:	2c30      	cmp	r4, #48	@ 0x30
 8010b60:	bf0c      	ite	eq
 8010b62:	2308      	moveq	r3, #8
 8010b64:	230a      	movne	r3, #10
 8010b66:	e7d5      	b.n	8010b14 <_strtol_l.constprop.0+0x54>
 8010b68:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010b6c:	2f19      	cmp	r7, #25
 8010b6e:	d801      	bhi.n	8010b74 <_strtol_l.constprop.0+0xb4>
 8010b70:	3c37      	subs	r4, #55	@ 0x37
 8010b72:	e7de      	b.n	8010b32 <_strtol_l.constprop.0+0x72>
 8010b74:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8010b78:	2f19      	cmp	r7, #25
 8010b7a:	d804      	bhi.n	8010b86 <_strtol_l.constprop.0+0xc6>
 8010b7c:	3c57      	subs	r4, #87	@ 0x57
 8010b7e:	e7d8      	b.n	8010b32 <_strtol_l.constprop.0+0x72>
 8010b80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010b84:	e7e1      	b.n	8010b4a <_strtol_l.constprop.0+0x8a>
 8010b86:	1c53      	adds	r3, r2, #1
 8010b88:	d108      	bne.n	8010b9c <_strtol_l.constprop.0+0xdc>
 8010b8a:	2322      	movs	r3, #34	@ 0x22
 8010b8c:	f8ce 3000 	str.w	r3, [lr]
 8010b90:	4660      	mov	r0, ip
 8010b92:	f1b8 0f00 	cmp.w	r8, #0
 8010b96:	d0a0      	beq.n	8010ada <_strtol_l.constprop.0+0x1a>
 8010b98:	1e69      	subs	r1, r5, #1
 8010b9a:	e006      	b.n	8010baa <_strtol_l.constprop.0+0xea>
 8010b9c:	b106      	cbz	r6, 8010ba0 <_strtol_l.constprop.0+0xe0>
 8010b9e:	4240      	negs	r0, r0
 8010ba0:	f1b8 0f00 	cmp.w	r8, #0
 8010ba4:	d099      	beq.n	8010ada <_strtol_l.constprop.0+0x1a>
 8010ba6:	2a00      	cmp	r2, #0
 8010ba8:	d1f6      	bne.n	8010b98 <_strtol_l.constprop.0+0xd8>
 8010baa:	f8c8 1000 	str.w	r1, [r8]
 8010bae:	e794      	b.n	8010ada <_strtol_l.constprop.0+0x1a>
 8010bb0:	08011f72 	.word	0x08011f72

08010bb4 <strtol>:
 8010bb4:	4613      	mov	r3, r2
 8010bb6:	460a      	mov	r2, r1
 8010bb8:	4601      	mov	r1, r0
 8010bba:	4802      	ldr	r0, [pc, #8]	@ (8010bc4 <strtol+0x10>)
 8010bbc:	6800      	ldr	r0, [r0, #0]
 8010bbe:	f7ff bf7f 	b.w	8010ac0 <_strtol_l.constprop.0>
 8010bc2:	bf00      	nop
 8010bc4:	24000048 	.word	0x24000048

08010bc8 <__utoa>:
 8010bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010bca:	4c1f      	ldr	r4, [pc, #124]	@ (8010c48 <__utoa+0x80>)
 8010bcc:	b08b      	sub	sp, #44	@ 0x2c
 8010bce:	4605      	mov	r5, r0
 8010bd0:	460b      	mov	r3, r1
 8010bd2:	466e      	mov	r6, sp
 8010bd4:	f104 0c20 	add.w	ip, r4, #32
 8010bd8:	6820      	ldr	r0, [r4, #0]
 8010bda:	6861      	ldr	r1, [r4, #4]
 8010bdc:	4637      	mov	r7, r6
 8010bde:	c703      	stmia	r7!, {r0, r1}
 8010be0:	3408      	adds	r4, #8
 8010be2:	4564      	cmp	r4, ip
 8010be4:	463e      	mov	r6, r7
 8010be6:	d1f7      	bne.n	8010bd8 <__utoa+0x10>
 8010be8:	7921      	ldrb	r1, [r4, #4]
 8010bea:	7139      	strb	r1, [r7, #4]
 8010bec:	1e91      	subs	r1, r2, #2
 8010bee:	6820      	ldr	r0, [r4, #0]
 8010bf0:	6038      	str	r0, [r7, #0]
 8010bf2:	2922      	cmp	r1, #34	@ 0x22
 8010bf4:	f04f 0100 	mov.w	r1, #0
 8010bf8:	d904      	bls.n	8010c04 <__utoa+0x3c>
 8010bfa:	7019      	strb	r1, [r3, #0]
 8010bfc:	460b      	mov	r3, r1
 8010bfe:	4618      	mov	r0, r3
 8010c00:	b00b      	add	sp, #44	@ 0x2c
 8010c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c04:	1e58      	subs	r0, r3, #1
 8010c06:	4684      	mov	ip, r0
 8010c08:	fbb5 f7f2 	udiv	r7, r5, r2
 8010c0c:	fb02 5617 	mls	r6, r2, r7, r5
 8010c10:	3628      	adds	r6, #40	@ 0x28
 8010c12:	446e      	add	r6, sp
 8010c14:	460c      	mov	r4, r1
 8010c16:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8010c1a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8010c1e:	462e      	mov	r6, r5
 8010c20:	42b2      	cmp	r2, r6
 8010c22:	f101 0101 	add.w	r1, r1, #1
 8010c26:	463d      	mov	r5, r7
 8010c28:	d9ee      	bls.n	8010c08 <__utoa+0x40>
 8010c2a:	2200      	movs	r2, #0
 8010c2c:	545a      	strb	r2, [r3, r1]
 8010c2e:	1919      	adds	r1, r3, r4
 8010c30:	1aa5      	subs	r5, r4, r2
 8010c32:	42aa      	cmp	r2, r5
 8010c34:	dae3      	bge.n	8010bfe <__utoa+0x36>
 8010c36:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8010c3a:	780e      	ldrb	r6, [r1, #0]
 8010c3c:	7006      	strb	r6, [r0, #0]
 8010c3e:	3201      	adds	r2, #1
 8010c40:	f801 5901 	strb.w	r5, [r1], #-1
 8010c44:	e7f4      	b.n	8010c30 <__utoa+0x68>
 8010c46:	bf00      	nop
 8010c48:	08011f4c 	.word	0x08011f4c

08010c4c <siprintf>:
 8010c4c:	b40e      	push	{r1, r2, r3}
 8010c4e:	b500      	push	{lr}
 8010c50:	b09c      	sub	sp, #112	@ 0x70
 8010c52:	ab1d      	add	r3, sp, #116	@ 0x74
 8010c54:	9002      	str	r0, [sp, #8]
 8010c56:	9006      	str	r0, [sp, #24]
 8010c58:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010c5c:	4809      	ldr	r0, [pc, #36]	@ (8010c84 <siprintf+0x38>)
 8010c5e:	9107      	str	r1, [sp, #28]
 8010c60:	9104      	str	r1, [sp, #16]
 8010c62:	4909      	ldr	r1, [pc, #36]	@ (8010c88 <siprintf+0x3c>)
 8010c64:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c68:	9105      	str	r1, [sp, #20]
 8010c6a:	6800      	ldr	r0, [r0, #0]
 8010c6c:	9301      	str	r3, [sp, #4]
 8010c6e:	a902      	add	r1, sp, #8
 8010c70:	f000 f9ac 	bl	8010fcc <_svfiprintf_r>
 8010c74:	9b02      	ldr	r3, [sp, #8]
 8010c76:	2200      	movs	r2, #0
 8010c78:	701a      	strb	r2, [r3, #0]
 8010c7a:	b01c      	add	sp, #112	@ 0x70
 8010c7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010c80:	b003      	add	sp, #12
 8010c82:	4770      	bx	lr
 8010c84:	24000048 	.word	0x24000048
 8010c88:	ffff0208 	.word	0xffff0208

08010c8c <memset>:
 8010c8c:	4402      	add	r2, r0
 8010c8e:	4603      	mov	r3, r0
 8010c90:	4293      	cmp	r3, r2
 8010c92:	d100      	bne.n	8010c96 <memset+0xa>
 8010c94:	4770      	bx	lr
 8010c96:	f803 1b01 	strb.w	r1, [r3], #1
 8010c9a:	e7f9      	b.n	8010c90 <memset+0x4>

08010c9c <strcat>:
 8010c9c:	b510      	push	{r4, lr}
 8010c9e:	4602      	mov	r2, r0
 8010ca0:	7814      	ldrb	r4, [r2, #0]
 8010ca2:	4613      	mov	r3, r2
 8010ca4:	3201      	adds	r2, #1
 8010ca6:	2c00      	cmp	r4, #0
 8010ca8:	d1fa      	bne.n	8010ca0 <strcat+0x4>
 8010caa:	3b01      	subs	r3, #1
 8010cac:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010cb0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010cb4:	2a00      	cmp	r2, #0
 8010cb6:	d1f9      	bne.n	8010cac <strcat+0x10>
 8010cb8:	bd10      	pop	{r4, pc}
	...

08010cbc <__errno>:
 8010cbc:	4b01      	ldr	r3, [pc, #4]	@ (8010cc4 <__errno+0x8>)
 8010cbe:	6818      	ldr	r0, [r3, #0]
 8010cc0:	4770      	bx	lr
 8010cc2:	bf00      	nop
 8010cc4:	24000048 	.word	0x24000048

08010cc8 <__libc_init_array>:
 8010cc8:	b570      	push	{r4, r5, r6, lr}
 8010cca:	4d0d      	ldr	r5, [pc, #52]	@ (8010d00 <__libc_init_array+0x38>)
 8010ccc:	4c0d      	ldr	r4, [pc, #52]	@ (8010d04 <__libc_init_array+0x3c>)
 8010cce:	1b64      	subs	r4, r4, r5
 8010cd0:	10a4      	asrs	r4, r4, #2
 8010cd2:	2600      	movs	r6, #0
 8010cd4:	42a6      	cmp	r6, r4
 8010cd6:	d109      	bne.n	8010cec <__libc_init_array+0x24>
 8010cd8:	4d0b      	ldr	r5, [pc, #44]	@ (8010d08 <__libc_init_array+0x40>)
 8010cda:	4c0c      	ldr	r4, [pc, #48]	@ (8010d0c <__libc_init_array+0x44>)
 8010cdc:	f000 fc6e 	bl	80115bc <_init>
 8010ce0:	1b64      	subs	r4, r4, r5
 8010ce2:	10a4      	asrs	r4, r4, #2
 8010ce4:	2600      	movs	r6, #0
 8010ce6:	42a6      	cmp	r6, r4
 8010ce8:	d105      	bne.n	8010cf6 <__libc_init_array+0x2e>
 8010cea:	bd70      	pop	{r4, r5, r6, pc}
 8010cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8010cf0:	4798      	blx	r3
 8010cf2:	3601      	adds	r6, #1
 8010cf4:	e7ee      	b.n	8010cd4 <__libc_init_array+0xc>
 8010cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8010cfa:	4798      	blx	r3
 8010cfc:	3601      	adds	r6, #1
 8010cfe:	e7f2      	b.n	8010ce6 <__libc_init_array+0x1e>
 8010d00:	080120b0 	.word	0x080120b0
 8010d04:	080120b0 	.word	0x080120b0
 8010d08:	080120b0 	.word	0x080120b0
 8010d0c:	080120b4 	.word	0x080120b4

08010d10 <__retarget_lock_acquire_recursive>:
 8010d10:	4770      	bx	lr

08010d12 <__retarget_lock_release_recursive>:
 8010d12:	4770      	bx	lr

08010d14 <strcpy>:
 8010d14:	4603      	mov	r3, r0
 8010d16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010d1a:	f803 2b01 	strb.w	r2, [r3], #1
 8010d1e:	2a00      	cmp	r2, #0
 8010d20:	d1f9      	bne.n	8010d16 <strcpy+0x2>
 8010d22:	4770      	bx	lr

08010d24 <_free_r>:
 8010d24:	b538      	push	{r3, r4, r5, lr}
 8010d26:	4605      	mov	r5, r0
 8010d28:	2900      	cmp	r1, #0
 8010d2a:	d041      	beq.n	8010db0 <_free_r+0x8c>
 8010d2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d30:	1f0c      	subs	r4, r1, #4
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	bfb8      	it	lt
 8010d36:	18e4      	addlt	r4, r4, r3
 8010d38:	f000 f8e0 	bl	8010efc <__malloc_lock>
 8010d3c:	4a1d      	ldr	r2, [pc, #116]	@ (8010db4 <_free_r+0x90>)
 8010d3e:	6813      	ldr	r3, [r2, #0]
 8010d40:	b933      	cbnz	r3, 8010d50 <_free_r+0x2c>
 8010d42:	6063      	str	r3, [r4, #4]
 8010d44:	6014      	str	r4, [r2, #0]
 8010d46:	4628      	mov	r0, r5
 8010d48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d4c:	f000 b8dc 	b.w	8010f08 <__malloc_unlock>
 8010d50:	42a3      	cmp	r3, r4
 8010d52:	d908      	bls.n	8010d66 <_free_r+0x42>
 8010d54:	6820      	ldr	r0, [r4, #0]
 8010d56:	1821      	adds	r1, r4, r0
 8010d58:	428b      	cmp	r3, r1
 8010d5a:	bf01      	itttt	eq
 8010d5c:	6819      	ldreq	r1, [r3, #0]
 8010d5e:	685b      	ldreq	r3, [r3, #4]
 8010d60:	1809      	addeq	r1, r1, r0
 8010d62:	6021      	streq	r1, [r4, #0]
 8010d64:	e7ed      	b.n	8010d42 <_free_r+0x1e>
 8010d66:	461a      	mov	r2, r3
 8010d68:	685b      	ldr	r3, [r3, #4]
 8010d6a:	b10b      	cbz	r3, 8010d70 <_free_r+0x4c>
 8010d6c:	42a3      	cmp	r3, r4
 8010d6e:	d9fa      	bls.n	8010d66 <_free_r+0x42>
 8010d70:	6811      	ldr	r1, [r2, #0]
 8010d72:	1850      	adds	r0, r2, r1
 8010d74:	42a0      	cmp	r0, r4
 8010d76:	d10b      	bne.n	8010d90 <_free_r+0x6c>
 8010d78:	6820      	ldr	r0, [r4, #0]
 8010d7a:	4401      	add	r1, r0
 8010d7c:	1850      	adds	r0, r2, r1
 8010d7e:	4283      	cmp	r3, r0
 8010d80:	6011      	str	r1, [r2, #0]
 8010d82:	d1e0      	bne.n	8010d46 <_free_r+0x22>
 8010d84:	6818      	ldr	r0, [r3, #0]
 8010d86:	685b      	ldr	r3, [r3, #4]
 8010d88:	6053      	str	r3, [r2, #4]
 8010d8a:	4408      	add	r0, r1
 8010d8c:	6010      	str	r0, [r2, #0]
 8010d8e:	e7da      	b.n	8010d46 <_free_r+0x22>
 8010d90:	d902      	bls.n	8010d98 <_free_r+0x74>
 8010d92:	230c      	movs	r3, #12
 8010d94:	602b      	str	r3, [r5, #0]
 8010d96:	e7d6      	b.n	8010d46 <_free_r+0x22>
 8010d98:	6820      	ldr	r0, [r4, #0]
 8010d9a:	1821      	adds	r1, r4, r0
 8010d9c:	428b      	cmp	r3, r1
 8010d9e:	bf04      	itt	eq
 8010da0:	6819      	ldreq	r1, [r3, #0]
 8010da2:	685b      	ldreq	r3, [r3, #4]
 8010da4:	6063      	str	r3, [r4, #4]
 8010da6:	bf04      	itt	eq
 8010da8:	1809      	addeq	r1, r1, r0
 8010daa:	6021      	streq	r1, [r4, #0]
 8010dac:	6054      	str	r4, [r2, #4]
 8010dae:	e7ca      	b.n	8010d46 <_free_r+0x22>
 8010db0:	bd38      	pop	{r3, r4, r5, pc}
 8010db2:	bf00      	nop
 8010db4:	2400103c 	.word	0x2400103c

08010db8 <sbrk_aligned>:
 8010db8:	b570      	push	{r4, r5, r6, lr}
 8010dba:	4e0f      	ldr	r6, [pc, #60]	@ (8010df8 <sbrk_aligned+0x40>)
 8010dbc:	460c      	mov	r4, r1
 8010dbe:	6831      	ldr	r1, [r6, #0]
 8010dc0:	4605      	mov	r5, r0
 8010dc2:	b911      	cbnz	r1, 8010dca <sbrk_aligned+0x12>
 8010dc4:	f000 fba6 	bl	8011514 <_sbrk_r>
 8010dc8:	6030      	str	r0, [r6, #0]
 8010dca:	4621      	mov	r1, r4
 8010dcc:	4628      	mov	r0, r5
 8010dce:	f000 fba1 	bl	8011514 <_sbrk_r>
 8010dd2:	1c43      	adds	r3, r0, #1
 8010dd4:	d103      	bne.n	8010dde <sbrk_aligned+0x26>
 8010dd6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8010dda:	4620      	mov	r0, r4
 8010ddc:	bd70      	pop	{r4, r5, r6, pc}
 8010dde:	1cc4      	adds	r4, r0, #3
 8010de0:	f024 0403 	bic.w	r4, r4, #3
 8010de4:	42a0      	cmp	r0, r4
 8010de6:	d0f8      	beq.n	8010dda <sbrk_aligned+0x22>
 8010de8:	1a21      	subs	r1, r4, r0
 8010dea:	4628      	mov	r0, r5
 8010dec:	f000 fb92 	bl	8011514 <_sbrk_r>
 8010df0:	3001      	adds	r0, #1
 8010df2:	d1f2      	bne.n	8010dda <sbrk_aligned+0x22>
 8010df4:	e7ef      	b.n	8010dd6 <sbrk_aligned+0x1e>
 8010df6:	bf00      	nop
 8010df8:	24001038 	.word	0x24001038

08010dfc <_malloc_r>:
 8010dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e00:	1ccd      	adds	r5, r1, #3
 8010e02:	f025 0503 	bic.w	r5, r5, #3
 8010e06:	3508      	adds	r5, #8
 8010e08:	2d0c      	cmp	r5, #12
 8010e0a:	bf38      	it	cc
 8010e0c:	250c      	movcc	r5, #12
 8010e0e:	2d00      	cmp	r5, #0
 8010e10:	4606      	mov	r6, r0
 8010e12:	db01      	blt.n	8010e18 <_malloc_r+0x1c>
 8010e14:	42a9      	cmp	r1, r5
 8010e16:	d904      	bls.n	8010e22 <_malloc_r+0x26>
 8010e18:	230c      	movs	r3, #12
 8010e1a:	6033      	str	r3, [r6, #0]
 8010e1c:	2000      	movs	r0, #0
 8010e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010ef8 <_malloc_r+0xfc>
 8010e26:	f000 f869 	bl	8010efc <__malloc_lock>
 8010e2a:	f8d8 3000 	ldr.w	r3, [r8]
 8010e2e:	461c      	mov	r4, r3
 8010e30:	bb44      	cbnz	r4, 8010e84 <_malloc_r+0x88>
 8010e32:	4629      	mov	r1, r5
 8010e34:	4630      	mov	r0, r6
 8010e36:	f7ff ffbf 	bl	8010db8 <sbrk_aligned>
 8010e3a:	1c43      	adds	r3, r0, #1
 8010e3c:	4604      	mov	r4, r0
 8010e3e:	d158      	bne.n	8010ef2 <_malloc_r+0xf6>
 8010e40:	f8d8 4000 	ldr.w	r4, [r8]
 8010e44:	4627      	mov	r7, r4
 8010e46:	2f00      	cmp	r7, #0
 8010e48:	d143      	bne.n	8010ed2 <_malloc_r+0xd6>
 8010e4a:	2c00      	cmp	r4, #0
 8010e4c:	d04b      	beq.n	8010ee6 <_malloc_r+0xea>
 8010e4e:	6823      	ldr	r3, [r4, #0]
 8010e50:	4639      	mov	r1, r7
 8010e52:	4630      	mov	r0, r6
 8010e54:	eb04 0903 	add.w	r9, r4, r3
 8010e58:	f000 fb5c 	bl	8011514 <_sbrk_r>
 8010e5c:	4581      	cmp	r9, r0
 8010e5e:	d142      	bne.n	8010ee6 <_malloc_r+0xea>
 8010e60:	6821      	ldr	r1, [r4, #0]
 8010e62:	1a6d      	subs	r5, r5, r1
 8010e64:	4629      	mov	r1, r5
 8010e66:	4630      	mov	r0, r6
 8010e68:	f7ff ffa6 	bl	8010db8 <sbrk_aligned>
 8010e6c:	3001      	adds	r0, #1
 8010e6e:	d03a      	beq.n	8010ee6 <_malloc_r+0xea>
 8010e70:	6823      	ldr	r3, [r4, #0]
 8010e72:	442b      	add	r3, r5
 8010e74:	6023      	str	r3, [r4, #0]
 8010e76:	f8d8 3000 	ldr.w	r3, [r8]
 8010e7a:	685a      	ldr	r2, [r3, #4]
 8010e7c:	bb62      	cbnz	r2, 8010ed8 <_malloc_r+0xdc>
 8010e7e:	f8c8 7000 	str.w	r7, [r8]
 8010e82:	e00f      	b.n	8010ea4 <_malloc_r+0xa8>
 8010e84:	6822      	ldr	r2, [r4, #0]
 8010e86:	1b52      	subs	r2, r2, r5
 8010e88:	d420      	bmi.n	8010ecc <_malloc_r+0xd0>
 8010e8a:	2a0b      	cmp	r2, #11
 8010e8c:	d917      	bls.n	8010ebe <_malloc_r+0xc2>
 8010e8e:	1961      	adds	r1, r4, r5
 8010e90:	42a3      	cmp	r3, r4
 8010e92:	6025      	str	r5, [r4, #0]
 8010e94:	bf18      	it	ne
 8010e96:	6059      	strne	r1, [r3, #4]
 8010e98:	6863      	ldr	r3, [r4, #4]
 8010e9a:	bf08      	it	eq
 8010e9c:	f8c8 1000 	streq.w	r1, [r8]
 8010ea0:	5162      	str	r2, [r4, r5]
 8010ea2:	604b      	str	r3, [r1, #4]
 8010ea4:	4630      	mov	r0, r6
 8010ea6:	f000 f82f 	bl	8010f08 <__malloc_unlock>
 8010eaa:	f104 000b 	add.w	r0, r4, #11
 8010eae:	1d23      	adds	r3, r4, #4
 8010eb0:	f020 0007 	bic.w	r0, r0, #7
 8010eb4:	1ac2      	subs	r2, r0, r3
 8010eb6:	bf1c      	itt	ne
 8010eb8:	1a1b      	subne	r3, r3, r0
 8010eba:	50a3      	strne	r3, [r4, r2]
 8010ebc:	e7af      	b.n	8010e1e <_malloc_r+0x22>
 8010ebe:	6862      	ldr	r2, [r4, #4]
 8010ec0:	42a3      	cmp	r3, r4
 8010ec2:	bf0c      	ite	eq
 8010ec4:	f8c8 2000 	streq.w	r2, [r8]
 8010ec8:	605a      	strne	r2, [r3, #4]
 8010eca:	e7eb      	b.n	8010ea4 <_malloc_r+0xa8>
 8010ecc:	4623      	mov	r3, r4
 8010ece:	6864      	ldr	r4, [r4, #4]
 8010ed0:	e7ae      	b.n	8010e30 <_malloc_r+0x34>
 8010ed2:	463c      	mov	r4, r7
 8010ed4:	687f      	ldr	r7, [r7, #4]
 8010ed6:	e7b6      	b.n	8010e46 <_malloc_r+0x4a>
 8010ed8:	461a      	mov	r2, r3
 8010eda:	685b      	ldr	r3, [r3, #4]
 8010edc:	42a3      	cmp	r3, r4
 8010ede:	d1fb      	bne.n	8010ed8 <_malloc_r+0xdc>
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	6053      	str	r3, [r2, #4]
 8010ee4:	e7de      	b.n	8010ea4 <_malloc_r+0xa8>
 8010ee6:	230c      	movs	r3, #12
 8010ee8:	6033      	str	r3, [r6, #0]
 8010eea:	4630      	mov	r0, r6
 8010eec:	f000 f80c 	bl	8010f08 <__malloc_unlock>
 8010ef0:	e794      	b.n	8010e1c <_malloc_r+0x20>
 8010ef2:	6005      	str	r5, [r0, #0]
 8010ef4:	e7d6      	b.n	8010ea4 <_malloc_r+0xa8>
 8010ef6:	bf00      	nop
 8010ef8:	2400103c 	.word	0x2400103c

08010efc <__malloc_lock>:
 8010efc:	4801      	ldr	r0, [pc, #4]	@ (8010f04 <__malloc_lock+0x8>)
 8010efe:	f7ff bf07 	b.w	8010d10 <__retarget_lock_acquire_recursive>
 8010f02:	bf00      	nop
 8010f04:	24001034 	.word	0x24001034

08010f08 <__malloc_unlock>:
 8010f08:	4801      	ldr	r0, [pc, #4]	@ (8010f10 <__malloc_unlock+0x8>)
 8010f0a:	f7ff bf02 	b.w	8010d12 <__retarget_lock_release_recursive>
 8010f0e:	bf00      	nop
 8010f10:	24001034 	.word	0x24001034

08010f14 <__ssputs_r>:
 8010f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f18:	688e      	ldr	r6, [r1, #8]
 8010f1a:	461f      	mov	r7, r3
 8010f1c:	42be      	cmp	r6, r7
 8010f1e:	680b      	ldr	r3, [r1, #0]
 8010f20:	4682      	mov	sl, r0
 8010f22:	460c      	mov	r4, r1
 8010f24:	4690      	mov	r8, r2
 8010f26:	d82d      	bhi.n	8010f84 <__ssputs_r+0x70>
 8010f28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010f2c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010f30:	d026      	beq.n	8010f80 <__ssputs_r+0x6c>
 8010f32:	6965      	ldr	r5, [r4, #20]
 8010f34:	6909      	ldr	r1, [r1, #16]
 8010f36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010f3a:	eba3 0901 	sub.w	r9, r3, r1
 8010f3e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010f42:	1c7b      	adds	r3, r7, #1
 8010f44:	444b      	add	r3, r9
 8010f46:	106d      	asrs	r5, r5, #1
 8010f48:	429d      	cmp	r5, r3
 8010f4a:	bf38      	it	cc
 8010f4c:	461d      	movcc	r5, r3
 8010f4e:	0553      	lsls	r3, r2, #21
 8010f50:	d527      	bpl.n	8010fa2 <__ssputs_r+0x8e>
 8010f52:	4629      	mov	r1, r5
 8010f54:	f7ff ff52 	bl	8010dfc <_malloc_r>
 8010f58:	4606      	mov	r6, r0
 8010f5a:	b360      	cbz	r0, 8010fb6 <__ssputs_r+0xa2>
 8010f5c:	6921      	ldr	r1, [r4, #16]
 8010f5e:	464a      	mov	r2, r9
 8010f60:	f000 fae8 	bl	8011534 <memcpy>
 8010f64:	89a3      	ldrh	r3, [r4, #12]
 8010f66:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010f6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010f6e:	81a3      	strh	r3, [r4, #12]
 8010f70:	6126      	str	r6, [r4, #16]
 8010f72:	6165      	str	r5, [r4, #20]
 8010f74:	444e      	add	r6, r9
 8010f76:	eba5 0509 	sub.w	r5, r5, r9
 8010f7a:	6026      	str	r6, [r4, #0]
 8010f7c:	60a5      	str	r5, [r4, #8]
 8010f7e:	463e      	mov	r6, r7
 8010f80:	42be      	cmp	r6, r7
 8010f82:	d900      	bls.n	8010f86 <__ssputs_r+0x72>
 8010f84:	463e      	mov	r6, r7
 8010f86:	6820      	ldr	r0, [r4, #0]
 8010f88:	4632      	mov	r2, r6
 8010f8a:	4641      	mov	r1, r8
 8010f8c:	f000 faa8 	bl	80114e0 <memmove>
 8010f90:	68a3      	ldr	r3, [r4, #8]
 8010f92:	1b9b      	subs	r3, r3, r6
 8010f94:	60a3      	str	r3, [r4, #8]
 8010f96:	6823      	ldr	r3, [r4, #0]
 8010f98:	4433      	add	r3, r6
 8010f9a:	6023      	str	r3, [r4, #0]
 8010f9c:	2000      	movs	r0, #0
 8010f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fa2:	462a      	mov	r2, r5
 8010fa4:	f000 fad4 	bl	8011550 <_realloc_r>
 8010fa8:	4606      	mov	r6, r0
 8010faa:	2800      	cmp	r0, #0
 8010fac:	d1e0      	bne.n	8010f70 <__ssputs_r+0x5c>
 8010fae:	6921      	ldr	r1, [r4, #16]
 8010fb0:	4650      	mov	r0, sl
 8010fb2:	f7ff feb7 	bl	8010d24 <_free_r>
 8010fb6:	230c      	movs	r3, #12
 8010fb8:	f8ca 3000 	str.w	r3, [sl]
 8010fbc:	89a3      	ldrh	r3, [r4, #12]
 8010fbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010fc2:	81a3      	strh	r3, [r4, #12]
 8010fc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010fc8:	e7e9      	b.n	8010f9e <__ssputs_r+0x8a>
	...

08010fcc <_svfiprintf_r>:
 8010fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fd0:	4698      	mov	r8, r3
 8010fd2:	898b      	ldrh	r3, [r1, #12]
 8010fd4:	061b      	lsls	r3, r3, #24
 8010fd6:	b09d      	sub	sp, #116	@ 0x74
 8010fd8:	4607      	mov	r7, r0
 8010fda:	460d      	mov	r5, r1
 8010fdc:	4614      	mov	r4, r2
 8010fde:	d510      	bpl.n	8011002 <_svfiprintf_r+0x36>
 8010fe0:	690b      	ldr	r3, [r1, #16]
 8010fe2:	b973      	cbnz	r3, 8011002 <_svfiprintf_r+0x36>
 8010fe4:	2140      	movs	r1, #64	@ 0x40
 8010fe6:	f7ff ff09 	bl	8010dfc <_malloc_r>
 8010fea:	6028      	str	r0, [r5, #0]
 8010fec:	6128      	str	r0, [r5, #16]
 8010fee:	b930      	cbnz	r0, 8010ffe <_svfiprintf_r+0x32>
 8010ff0:	230c      	movs	r3, #12
 8010ff2:	603b      	str	r3, [r7, #0]
 8010ff4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010ff8:	b01d      	add	sp, #116	@ 0x74
 8010ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ffe:	2340      	movs	r3, #64	@ 0x40
 8011000:	616b      	str	r3, [r5, #20]
 8011002:	2300      	movs	r3, #0
 8011004:	9309      	str	r3, [sp, #36]	@ 0x24
 8011006:	2320      	movs	r3, #32
 8011008:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801100c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011010:	2330      	movs	r3, #48	@ 0x30
 8011012:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80111b0 <_svfiprintf_r+0x1e4>
 8011016:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801101a:	f04f 0901 	mov.w	r9, #1
 801101e:	4623      	mov	r3, r4
 8011020:	469a      	mov	sl, r3
 8011022:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011026:	b10a      	cbz	r2, 801102c <_svfiprintf_r+0x60>
 8011028:	2a25      	cmp	r2, #37	@ 0x25
 801102a:	d1f9      	bne.n	8011020 <_svfiprintf_r+0x54>
 801102c:	ebba 0b04 	subs.w	fp, sl, r4
 8011030:	d00b      	beq.n	801104a <_svfiprintf_r+0x7e>
 8011032:	465b      	mov	r3, fp
 8011034:	4622      	mov	r2, r4
 8011036:	4629      	mov	r1, r5
 8011038:	4638      	mov	r0, r7
 801103a:	f7ff ff6b 	bl	8010f14 <__ssputs_r>
 801103e:	3001      	adds	r0, #1
 8011040:	f000 80a7 	beq.w	8011192 <_svfiprintf_r+0x1c6>
 8011044:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011046:	445a      	add	r2, fp
 8011048:	9209      	str	r2, [sp, #36]	@ 0x24
 801104a:	f89a 3000 	ldrb.w	r3, [sl]
 801104e:	2b00      	cmp	r3, #0
 8011050:	f000 809f 	beq.w	8011192 <_svfiprintf_r+0x1c6>
 8011054:	2300      	movs	r3, #0
 8011056:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801105a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801105e:	f10a 0a01 	add.w	sl, sl, #1
 8011062:	9304      	str	r3, [sp, #16]
 8011064:	9307      	str	r3, [sp, #28]
 8011066:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801106a:	931a      	str	r3, [sp, #104]	@ 0x68
 801106c:	4654      	mov	r4, sl
 801106e:	2205      	movs	r2, #5
 8011070:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011074:	484e      	ldr	r0, [pc, #312]	@ (80111b0 <_svfiprintf_r+0x1e4>)
 8011076:	f7ef f953 	bl	8000320 <memchr>
 801107a:	9a04      	ldr	r2, [sp, #16]
 801107c:	b9d8      	cbnz	r0, 80110b6 <_svfiprintf_r+0xea>
 801107e:	06d0      	lsls	r0, r2, #27
 8011080:	bf44      	itt	mi
 8011082:	2320      	movmi	r3, #32
 8011084:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011088:	0711      	lsls	r1, r2, #28
 801108a:	bf44      	itt	mi
 801108c:	232b      	movmi	r3, #43	@ 0x2b
 801108e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011092:	f89a 3000 	ldrb.w	r3, [sl]
 8011096:	2b2a      	cmp	r3, #42	@ 0x2a
 8011098:	d015      	beq.n	80110c6 <_svfiprintf_r+0xfa>
 801109a:	9a07      	ldr	r2, [sp, #28]
 801109c:	4654      	mov	r4, sl
 801109e:	2000      	movs	r0, #0
 80110a0:	f04f 0c0a 	mov.w	ip, #10
 80110a4:	4621      	mov	r1, r4
 80110a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80110aa:	3b30      	subs	r3, #48	@ 0x30
 80110ac:	2b09      	cmp	r3, #9
 80110ae:	d94b      	bls.n	8011148 <_svfiprintf_r+0x17c>
 80110b0:	b1b0      	cbz	r0, 80110e0 <_svfiprintf_r+0x114>
 80110b2:	9207      	str	r2, [sp, #28]
 80110b4:	e014      	b.n	80110e0 <_svfiprintf_r+0x114>
 80110b6:	eba0 0308 	sub.w	r3, r0, r8
 80110ba:	fa09 f303 	lsl.w	r3, r9, r3
 80110be:	4313      	orrs	r3, r2
 80110c0:	9304      	str	r3, [sp, #16]
 80110c2:	46a2      	mov	sl, r4
 80110c4:	e7d2      	b.n	801106c <_svfiprintf_r+0xa0>
 80110c6:	9b03      	ldr	r3, [sp, #12]
 80110c8:	1d19      	adds	r1, r3, #4
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	9103      	str	r1, [sp, #12]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	bfbb      	ittet	lt
 80110d2:	425b      	neglt	r3, r3
 80110d4:	f042 0202 	orrlt.w	r2, r2, #2
 80110d8:	9307      	strge	r3, [sp, #28]
 80110da:	9307      	strlt	r3, [sp, #28]
 80110dc:	bfb8      	it	lt
 80110de:	9204      	strlt	r2, [sp, #16]
 80110e0:	7823      	ldrb	r3, [r4, #0]
 80110e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80110e4:	d10a      	bne.n	80110fc <_svfiprintf_r+0x130>
 80110e6:	7863      	ldrb	r3, [r4, #1]
 80110e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80110ea:	d132      	bne.n	8011152 <_svfiprintf_r+0x186>
 80110ec:	9b03      	ldr	r3, [sp, #12]
 80110ee:	1d1a      	adds	r2, r3, #4
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	9203      	str	r2, [sp, #12]
 80110f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80110f8:	3402      	adds	r4, #2
 80110fa:	9305      	str	r3, [sp, #20]
 80110fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80111c0 <_svfiprintf_r+0x1f4>
 8011100:	7821      	ldrb	r1, [r4, #0]
 8011102:	2203      	movs	r2, #3
 8011104:	4650      	mov	r0, sl
 8011106:	f7ef f90b 	bl	8000320 <memchr>
 801110a:	b138      	cbz	r0, 801111c <_svfiprintf_r+0x150>
 801110c:	9b04      	ldr	r3, [sp, #16]
 801110e:	eba0 000a 	sub.w	r0, r0, sl
 8011112:	2240      	movs	r2, #64	@ 0x40
 8011114:	4082      	lsls	r2, r0
 8011116:	4313      	orrs	r3, r2
 8011118:	3401      	adds	r4, #1
 801111a:	9304      	str	r3, [sp, #16]
 801111c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011120:	4824      	ldr	r0, [pc, #144]	@ (80111b4 <_svfiprintf_r+0x1e8>)
 8011122:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011126:	2206      	movs	r2, #6
 8011128:	f7ef f8fa 	bl	8000320 <memchr>
 801112c:	2800      	cmp	r0, #0
 801112e:	d036      	beq.n	801119e <_svfiprintf_r+0x1d2>
 8011130:	4b21      	ldr	r3, [pc, #132]	@ (80111b8 <_svfiprintf_r+0x1ec>)
 8011132:	bb1b      	cbnz	r3, 801117c <_svfiprintf_r+0x1b0>
 8011134:	9b03      	ldr	r3, [sp, #12]
 8011136:	3307      	adds	r3, #7
 8011138:	f023 0307 	bic.w	r3, r3, #7
 801113c:	3308      	adds	r3, #8
 801113e:	9303      	str	r3, [sp, #12]
 8011140:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011142:	4433      	add	r3, r6
 8011144:	9309      	str	r3, [sp, #36]	@ 0x24
 8011146:	e76a      	b.n	801101e <_svfiprintf_r+0x52>
 8011148:	fb0c 3202 	mla	r2, ip, r2, r3
 801114c:	460c      	mov	r4, r1
 801114e:	2001      	movs	r0, #1
 8011150:	e7a8      	b.n	80110a4 <_svfiprintf_r+0xd8>
 8011152:	2300      	movs	r3, #0
 8011154:	3401      	adds	r4, #1
 8011156:	9305      	str	r3, [sp, #20]
 8011158:	4619      	mov	r1, r3
 801115a:	f04f 0c0a 	mov.w	ip, #10
 801115e:	4620      	mov	r0, r4
 8011160:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011164:	3a30      	subs	r2, #48	@ 0x30
 8011166:	2a09      	cmp	r2, #9
 8011168:	d903      	bls.n	8011172 <_svfiprintf_r+0x1a6>
 801116a:	2b00      	cmp	r3, #0
 801116c:	d0c6      	beq.n	80110fc <_svfiprintf_r+0x130>
 801116e:	9105      	str	r1, [sp, #20]
 8011170:	e7c4      	b.n	80110fc <_svfiprintf_r+0x130>
 8011172:	fb0c 2101 	mla	r1, ip, r1, r2
 8011176:	4604      	mov	r4, r0
 8011178:	2301      	movs	r3, #1
 801117a:	e7f0      	b.n	801115e <_svfiprintf_r+0x192>
 801117c:	ab03      	add	r3, sp, #12
 801117e:	9300      	str	r3, [sp, #0]
 8011180:	462a      	mov	r2, r5
 8011182:	4b0e      	ldr	r3, [pc, #56]	@ (80111bc <_svfiprintf_r+0x1f0>)
 8011184:	a904      	add	r1, sp, #16
 8011186:	4638      	mov	r0, r7
 8011188:	f3af 8000 	nop.w
 801118c:	1c42      	adds	r2, r0, #1
 801118e:	4606      	mov	r6, r0
 8011190:	d1d6      	bne.n	8011140 <_svfiprintf_r+0x174>
 8011192:	89ab      	ldrh	r3, [r5, #12]
 8011194:	065b      	lsls	r3, r3, #25
 8011196:	f53f af2d 	bmi.w	8010ff4 <_svfiprintf_r+0x28>
 801119a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801119c:	e72c      	b.n	8010ff8 <_svfiprintf_r+0x2c>
 801119e:	ab03      	add	r3, sp, #12
 80111a0:	9300      	str	r3, [sp, #0]
 80111a2:	462a      	mov	r2, r5
 80111a4:	4b05      	ldr	r3, [pc, #20]	@ (80111bc <_svfiprintf_r+0x1f0>)
 80111a6:	a904      	add	r1, sp, #16
 80111a8:	4638      	mov	r0, r7
 80111aa:	f000 f879 	bl	80112a0 <_printf_i>
 80111ae:	e7ed      	b.n	801118c <_svfiprintf_r+0x1c0>
 80111b0:	08012072 	.word	0x08012072
 80111b4:	0801207c 	.word	0x0801207c
 80111b8:	00000000 	.word	0x00000000
 80111bc:	08010f15 	.word	0x08010f15
 80111c0:	08012078 	.word	0x08012078

080111c4 <_printf_common>:
 80111c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111c8:	4616      	mov	r6, r2
 80111ca:	4698      	mov	r8, r3
 80111cc:	688a      	ldr	r2, [r1, #8]
 80111ce:	690b      	ldr	r3, [r1, #16]
 80111d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80111d4:	4293      	cmp	r3, r2
 80111d6:	bfb8      	it	lt
 80111d8:	4613      	movlt	r3, r2
 80111da:	6033      	str	r3, [r6, #0]
 80111dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80111e0:	4607      	mov	r7, r0
 80111e2:	460c      	mov	r4, r1
 80111e4:	b10a      	cbz	r2, 80111ea <_printf_common+0x26>
 80111e6:	3301      	adds	r3, #1
 80111e8:	6033      	str	r3, [r6, #0]
 80111ea:	6823      	ldr	r3, [r4, #0]
 80111ec:	0699      	lsls	r1, r3, #26
 80111ee:	bf42      	ittt	mi
 80111f0:	6833      	ldrmi	r3, [r6, #0]
 80111f2:	3302      	addmi	r3, #2
 80111f4:	6033      	strmi	r3, [r6, #0]
 80111f6:	6825      	ldr	r5, [r4, #0]
 80111f8:	f015 0506 	ands.w	r5, r5, #6
 80111fc:	d106      	bne.n	801120c <_printf_common+0x48>
 80111fe:	f104 0a19 	add.w	sl, r4, #25
 8011202:	68e3      	ldr	r3, [r4, #12]
 8011204:	6832      	ldr	r2, [r6, #0]
 8011206:	1a9b      	subs	r3, r3, r2
 8011208:	42ab      	cmp	r3, r5
 801120a:	dc26      	bgt.n	801125a <_printf_common+0x96>
 801120c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011210:	6822      	ldr	r2, [r4, #0]
 8011212:	3b00      	subs	r3, #0
 8011214:	bf18      	it	ne
 8011216:	2301      	movne	r3, #1
 8011218:	0692      	lsls	r2, r2, #26
 801121a:	d42b      	bmi.n	8011274 <_printf_common+0xb0>
 801121c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011220:	4641      	mov	r1, r8
 8011222:	4638      	mov	r0, r7
 8011224:	47c8      	blx	r9
 8011226:	3001      	adds	r0, #1
 8011228:	d01e      	beq.n	8011268 <_printf_common+0xa4>
 801122a:	6823      	ldr	r3, [r4, #0]
 801122c:	6922      	ldr	r2, [r4, #16]
 801122e:	f003 0306 	and.w	r3, r3, #6
 8011232:	2b04      	cmp	r3, #4
 8011234:	bf02      	ittt	eq
 8011236:	68e5      	ldreq	r5, [r4, #12]
 8011238:	6833      	ldreq	r3, [r6, #0]
 801123a:	1aed      	subeq	r5, r5, r3
 801123c:	68a3      	ldr	r3, [r4, #8]
 801123e:	bf0c      	ite	eq
 8011240:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011244:	2500      	movne	r5, #0
 8011246:	4293      	cmp	r3, r2
 8011248:	bfc4      	itt	gt
 801124a:	1a9b      	subgt	r3, r3, r2
 801124c:	18ed      	addgt	r5, r5, r3
 801124e:	2600      	movs	r6, #0
 8011250:	341a      	adds	r4, #26
 8011252:	42b5      	cmp	r5, r6
 8011254:	d11a      	bne.n	801128c <_printf_common+0xc8>
 8011256:	2000      	movs	r0, #0
 8011258:	e008      	b.n	801126c <_printf_common+0xa8>
 801125a:	2301      	movs	r3, #1
 801125c:	4652      	mov	r2, sl
 801125e:	4641      	mov	r1, r8
 8011260:	4638      	mov	r0, r7
 8011262:	47c8      	blx	r9
 8011264:	3001      	adds	r0, #1
 8011266:	d103      	bne.n	8011270 <_printf_common+0xac>
 8011268:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801126c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011270:	3501      	adds	r5, #1
 8011272:	e7c6      	b.n	8011202 <_printf_common+0x3e>
 8011274:	18e1      	adds	r1, r4, r3
 8011276:	1c5a      	adds	r2, r3, #1
 8011278:	2030      	movs	r0, #48	@ 0x30
 801127a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801127e:	4422      	add	r2, r4
 8011280:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011284:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011288:	3302      	adds	r3, #2
 801128a:	e7c7      	b.n	801121c <_printf_common+0x58>
 801128c:	2301      	movs	r3, #1
 801128e:	4622      	mov	r2, r4
 8011290:	4641      	mov	r1, r8
 8011292:	4638      	mov	r0, r7
 8011294:	47c8      	blx	r9
 8011296:	3001      	adds	r0, #1
 8011298:	d0e6      	beq.n	8011268 <_printf_common+0xa4>
 801129a:	3601      	adds	r6, #1
 801129c:	e7d9      	b.n	8011252 <_printf_common+0x8e>
	...

080112a0 <_printf_i>:
 80112a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80112a4:	7e0f      	ldrb	r7, [r1, #24]
 80112a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80112a8:	2f78      	cmp	r7, #120	@ 0x78
 80112aa:	4691      	mov	r9, r2
 80112ac:	4680      	mov	r8, r0
 80112ae:	460c      	mov	r4, r1
 80112b0:	469a      	mov	sl, r3
 80112b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80112b6:	d807      	bhi.n	80112c8 <_printf_i+0x28>
 80112b8:	2f62      	cmp	r7, #98	@ 0x62
 80112ba:	d80a      	bhi.n	80112d2 <_printf_i+0x32>
 80112bc:	2f00      	cmp	r7, #0
 80112be:	f000 80d2 	beq.w	8011466 <_printf_i+0x1c6>
 80112c2:	2f58      	cmp	r7, #88	@ 0x58
 80112c4:	f000 80b9 	beq.w	801143a <_printf_i+0x19a>
 80112c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80112cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80112d0:	e03a      	b.n	8011348 <_printf_i+0xa8>
 80112d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80112d6:	2b15      	cmp	r3, #21
 80112d8:	d8f6      	bhi.n	80112c8 <_printf_i+0x28>
 80112da:	a101      	add	r1, pc, #4	@ (adr r1, 80112e0 <_printf_i+0x40>)
 80112dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80112e0:	08011339 	.word	0x08011339
 80112e4:	0801134d 	.word	0x0801134d
 80112e8:	080112c9 	.word	0x080112c9
 80112ec:	080112c9 	.word	0x080112c9
 80112f0:	080112c9 	.word	0x080112c9
 80112f4:	080112c9 	.word	0x080112c9
 80112f8:	0801134d 	.word	0x0801134d
 80112fc:	080112c9 	.word	0x080112c9
 8011300:	080112c9 	.word	0x080112c9
 8011304:	080112c9 	.word	0x080112c9
 8011308:	080112c9 	.word	0x080112c9
 801130c:	0801144d 	.word	0x0801144d
 8011310:	08011377 	.word	0x08011377
 8011314:	08011407 	.word	0x08011407
 8011318:	080112c9 	.word	0x080112c9
 801131c:	080112c9 	.word	0x080112c9
 8011320:	0801146f 	.word	0x0801146f
 8011324:	080112c9 	.word	0x080112c9
 8011328:	08011377 	.word	0x08011377
 801132c:	080112c9 	.word	0x080112c9
 8011330:	080112c9 	.word	0x080112c9
 8011334:	0801140f 	.word	0x0801140f
 8011338:	6833      	ldr	r3, [r6, #0]
 801133a:	1d1a      	adds	r2, r3, #4
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	6032      	str	r2, [r6, #0]
 8011340:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011344:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011348:	2301      	movs	r3, #1
 801134a:	e09d      	b.n	8011488 <_printf_i+0x1e8>
 801134c:	6833      	ldr	r3, [r6, #0]
 801134e:	6820      	ldr	r0, [r4, #0]
 8011350:	1d19      	adds	r1, r3, #4
 8011352:	6031      	str	r1, [r6, #0]
 8011354:	0606      	lsls	r6, r0, #24
 8011356:	d501      	bpl.n	801135c <_printf_i+0xbc>
 8011358:	681d      	ldr	r5, [r3, #0]
 801135a:	e003      	b.n	8011364 <_printf_i+0xc4>
 801135c:	0645      	lsls	r5, r0, #25
 801135e:	d5fb      	bpl.n	8011358 <_printf_i+0xb8>
 8011360:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011364:	2d00      	cmp	r5, #0
 8011366:	da03      	bge.n	8011370 <_printf_i+0xd0>
 8011368:	232d      	movs	r3, #45	@ 0x2d
 801136a:	426d      	negs	r5, r5
 801136c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011370:	4859      	ldr	r0, [pc, #356]	@ (80114d8 <_printf_i+0x238>)
 8011372:	230a      	movs	r3, #10
 8011374:	e011      	b.n	801139a <_printf_i+0xfa>
 8011376:	6821      	ldr	r1, [r4, #0]
 8011378:	6833      	ldr	r3, [r6, #0]
 801137a:	0608      	lsls	r0, r1, #24
 801137c:	f853 5b04 	ldr.w	r5, [r3], #4
 8011380:	d402      	bmi.n	8011388 <_printf_i+0xe8>
 8011382:	0649      	lsls	r1, r1, #25
 8011384:	bf48      	it	mi
 8011386:	b2ad      	uxthmi	r5, r5
 8011388:	2f6f      	cmp	r7, #111	@ 0x6f
 801138a:	4853      	ldr	r0, [pc, #332]	@ (80114d8 <_printf_i+0x238>)
 801138c:	6033      	str	r3, [r6, #0]
 801138e:	bf14      	ite	ne
 8011390:	230a      	movne	r3, #10
 8011392:	2308      	moveq	r3, #8
 8011394:	2100      	movs	r1, #0
 8011396:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801139a:	6866      	ldr	r6, [r4, #4]
 801139c:	60a6      	str	r6, [r4, #8]
 801139e:	2e00      	cmp	r6, #0
 80113a0:	bfa2      	ittt	ge
 80113a2:	6821      	ldrge	r1, [r4, #0]
 80113a4:	f021 0104 	bicge.w	r1, r1, #4
 80113a8:	6021      	strge	r1, [r4, #0]
 80113aa:	b90d      	cbnz	r5, 80113b0 <_printf_i+0x110>
 80113ac:	2e00      	cmp	r6, #0
 80113ae:	d04b      	beq.n	8011448 <_printf_i+0x1a8>
 80113b0:	4616      	mov	r6, r2
 80113b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80113b6:	fb03 5711 	mls	r7, r3, r1, r5
 80113ba:	5dc7      	ldrb	r7, [r0, r7]
 80113bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80113c0:	462f      	mov	r7, r5
 80113c2:	42bb      	cmp	r3, r7
 80113c4:	460d      	mov	r5, r1
 80113c6:	d9f4      	bls.n	80113b2 <_printf_i+0x112>
 80113c8:	2b08      	cmp	r3, #8
 80113ca:	d10b      	bne.n	80113e4 <_printf_i+0x144>
 80113cc:	6823      	ldr	r3, [r4, #0]
 80113ce:	07df      	lsls	r7, r3, #31
 80113d0:	d508      	bpl.n	80113e4 <_printf_i+0x144>
 80113d2:	6923      	ldr	r3, [r4, #16]
 80113d4:	6861      	ldr	r1, [r4, #4]
 80113d6:	4299      	cmp	r1, r3
 80113d8:	bfde      	ittt	le
 80113da:	2330      	movle	r3, #48	@ 0x30
 80113dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80113e0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80113e4:	1b92      	subs	r2, r2, r6
 80113e6:	6122      	str	r2, [r4, #16]
 80113e8:	f8cd a000 	str.w	sl, [sp]
 80113ec:	464b      	mov	r3, r9
 80113ee:	aa03      	add	r2, sp, #12
 80113f0:	4621      	mov	r1, r4
 80113f2:	4640      	mov	r0, r8
 80113f4:	f7ff fee6 	bl	80111c4 <_printf_common>
 80113f8:	3001      	adds	r0, #1
 80113fa:	d14a      	bne.n	8011492 <_printf_i+0x1f2>
 80113fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011400:	b004      	add	sp, #16
 8011402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011406:	6823      	ldr	r3, [r4, #0]
 8011408:	f043 0320 	orr.w	r3, r3, #32
 801140c:	6023      	str	r3, [r4, #0]
 801140e:	4833      	ldr	r0, [pc, #204]	@ (80114dc <_printf_i+0x23c>)
 8011410:	2778      	movs	r7, #120	@ 0x78
 8011412:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011416:	6823      	ldr	r3, [r4, #0]
 8011418:	6831      	ldr	r1, [r6, #0]
 801141a:	061f      	lsls	r7, r3, #24
 801141c:	f851 5b04 	ldr.w	r5, [r1], #4
 8011420:	d402      	bmi.n	8011428 <_printf_i+0x188>
 8011422:	065f      	lsls	r7, r3, #25
 8011424:	bf48      	it	mi
 8011426:	b2ad      	uxthmi	r5, r5
 8011428:	6031      	str	r1, [r6, #0]
 801142a:	07d9      	lsls	r1, r3, #31
 801142c:	bf44      	itt	mi
 801142e:	f043 0320 	orrmi.w	r3, r3, #32
 8011432:	6023      	strmi	r3, [r4, #0]
 8011434:	b11d      	cbz	r5, 801143e <_printf_i+0x19e>
 8011436:	2310      	movs	r3, #16
 8011438:	e7ac      	b.n	8011394 <_printf_i+0xf4>
 801143a:	4827      	ldr	r0, [pc, #156]	@ (80114d8 <_printf_i+0x238>)
 801143c:	e7e9      	b.n	8011412 <_printf_i+0x172>
 801143e:	6823      	ldr	r3, [r4, #0]
 8011440:	f023 0320 	bic.w	r3, r3, #32
 8011444:	6023      	str	r3, [r4, #0]
 8011446:	e7f6      	b.n	8011436 <_printf_i+0x196>
 8011448:	4616      	mov	r6, r2
 801144a:	e7bd      	b.n	80113c8 <_printf_i+0x128>
 801144c:	6833      	ldr	r3, [r6, #0]
 801144e:	6825      	ldr	r5, [r4, #0]
 8011450:	6961      	ldr	r1, [r4, #20]
 8011452:	1d18      	adds	r0, r3, #4
 8011454:	6030      	str	r0, [r6, #0]
 8011456:	062e      	lsls	r6, r5, #24
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	d501      	bpl.n	8011460 <_printf_i+0x1c0>
 801145c:	6019      	str	r1, [r3, #0]
 801145e:	e002      	b.n	8011466 <_printf_i+0x1c6>
 8011460:	0668      	lsls	r0, r5, #25
 8011462:	d5fb      	bpl.n	801145c <_printf_i+0x1bc>
 8011464:	8019      	strh	r1, [r3, #0]
 8011466:	2300      	movs	r3, #0
 8011468:	6123      	str	r3, [r4, #16]
 801146a:	4616      	mov	r6, r2
 801146c:	e7bc      	b.n	80113e8 <_printf_i+0x148>
 801146e:	6833      	ldr	r3, [r6, #0]
 8011470:	1d1a      	adds	r2, r3, #4
 8011472:	6032      	str	r2, [r6, #0]
 8011474:	681e      	ldr	r6, [r3, #0]
 8011476:	6862      	ldr	r2, [r4, #4]
 8011478:	2100      	movs	r1, #0
 801147a:	4630      	mov	r0, r6
 801147c:	f7ee ff50 	bl	8000320 <memchr>
 8011480:	b108      	cbz	r0, 8011486 <_printf_i+0x1e6>
 8011482:	1b80      	subs	r0, r0, r6
 8011484:	6060      	str	r0, [r4, #4]
 8011486:	6863      	ldr	r3, [r4, #4]
 8011488:	6123      	str	r3, [r4, #16]
 801148a:	2300      	movs	r3, #0
 801148c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011490:	e7aa      	b.n	80113e8 <_printf_i+0x148>
 8011492:	6923      	ldr	r3, [r4, #16]
 8011494:	4632      	mov	r2, r6
 8011496:	4649      	mov	r1, r9
 8011498:	4640      	mov	r0, r8
 801149a:	47d0      	blx	sl
 801149c:	3001      	adds	r0, #1
 801149e:	d0ad      	beq.n	80113fc <_printf_i+0x15c>
 80114a0:	6823      	ldr	r3, [r4, #0]
 80114a2:	079b      	lsls	r3, r3, #30
 80114a4:	d413      	bmi.n	80114ce <_printf_i+0x22e>
 80114a6:	68e0      	ldr	r0, [r4, #12]
 80114a8:	9b03      	ldr	r3, [sp, #12]
 80114aa:	4298      	cmp	r0, r3
 80114ac:	bfb8      	it	lt
 80114ae:	4618      	movlt	r0, r3
 80114b0:	e7a6      	b.n	8011400 <_printf_i+0x160>
 80114b2:	2301      	movs	r3, #1
 80114b4:	4632      	mov	r2, r6
 80114b6:	4649      	mov	r1, r9
 80114b8:	4640      	mov	r0, r8
 80114ba:	47d0      	blx	sl
 80114bc:	3001      	adds	r0, #1
 80114be:	d09d      	beq.n	80113fc <_printf_i+0x15c>
 80114c0:	3501      	adds	r5, #1
 80114c2:	68e3      	ldr	r3, [r4, #12]
 80114c4:	9903      	ldr	r1, [sp, #12]
 80114c6:	1a5b      	subs	r3, r3, r1
 80114c8:	42ab      	cmp	r3, r5
 80114ca:	dcf2      	bgt.n	80114b2 <_printf_i+0x212>
 80114cc:	e7eb      	b.n	80114a6 <_printf_i+0x206>
 80114ce:	2500      	movs	r5, #0
 80114d0:	f104 0619 	add.w	r6, r4, #25
 80114d4:	e7f5      	b.n	80114c2 <_printf_i+0x222>
 80114d6:	bf00      	nop
 80114d8:	08012083 	.word	0x08012083
 80114dc:	08012094 	.word	0x08012094

080114e0 <memmove>:
 80114e0:	4288      	cmp	r0, r1
 80114e2:	b510      	push	{r4, lr}
 80114e4:	eb01 0402 	add.w	r4, r1, r2
 80114e8:	d902      	bls.n	80114f0 <memmove+0x10>
 80114ea:	4284      	cmp	r4, r0
 80114ec:	4623      	mov	r3, r4
 80114ee:	d807      	bhi.n	8011500 <memmove+0x20>
 80114f0:	1e43      	subs	r3, r0, #1
 80114f2:	42a1      	cmp	r1, r4
 80114f4:	d008      	beq.n	8011508 <memmove+0x28>
 80114f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80114fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80114fe:	e7f8      	b.n	80114f2 <memmove+0x12>
 8011500:	4402      	add	r2, r0
 8011502:	4601      	mov	r1, r0
 8011504:	428a      	cmp	r2, r1
 8011506:	d100      	bne.n	801150a <memmove+0x2a>
 8011508:	bd10      	pop	{r4, pc}
 801150a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801150e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011512:	e7f7      	b.n	8011504 <memmove+0x24>

08011514 <_sbrk_r>:
 8011514:	b538      	push	{r3, r4, r5, lr}
 8011516:	4d06      	ldr	r5, [pc, #24]	@ (8011530 <_sbrk_r+0x1c>)
 8011518:	2300      	movs	r3, #0
 801151a:	4604      	mov	r4, r0
 801151c:	4608      	mov	r0, r1
 801151e:	602b      	str	r3, [r5, #0]
 8011520:	f7f2 fcac 	bl	8003e7c <_sbrk>
 8011524:	1c43      	adds	r3, r0, #1
 8011526:	d102      	bne.n	801152e <_sbrk_r+0x1a>
 8011528:	682b      	ldr	r3, [r5, #0]
 801152a:	b103      	cbz	r3, 801152e <_sbrk_r+0x1a>
 801152c:	6023      	str	r3, [r4, #0]
 801152e:	bd38      	pop	{r3, r4, r5, pc}
 8011530:	24001030 	.word	0x24001030

08011534 <memcpy>:
 8011534:	440a      	add	r2, r1
 8011536:	4291      	cmp	r1, r2
 8011538:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801153c:	d100      	bne.n	8011540 <memcpy+0xc>
 801153e:	4770      	bx	lr
 8011540:	b510      	push	{r4, lr}
 8011542:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011546:	f803 4f01 	strb.w	r4, [r3, #1]!
 801154a:	4291      	cmp	r1, r2
 801154c:	d1f9      	bne.n	8011542 <memcpy+0xe>
 801154e:	bd10      	pop	{r4, pc}

08011550 <_realloc_r>:
 8011550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011554:	4680      	mov	r8, r0
 8011556:	4615      	mov	r5, r2
 8011558:	460c      	mov	r4, r1
 801155a:	b921      	cbnz	r1, 8011566 <_realloc_r+0x16>
 801155c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011560:	4611      	mov	r1, r2
 8011562:	f7ff bc4b 	b.w	8010dfc <_malloc_r>
 8011566:	b92a      	cbnz	r2, 8011574 <_realloc_r+0x24>
 8011568:	f7ff fbdc 	bl	8010d24 <_free_r>
 801156c:	2400      	movs	r4, #0
 801156e:	4620      	mov	r0, r4
 8011570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011574:	f000 f81a 	bl	80115ac <_malloc_usable_size_r>
 8011578:	4285      	cmp	r5, r0
 801157a:	4606      	mov	r6, r0
 801157c:	d802      	bhi.n	8011584 <_realloc_r+0x34>
 801157e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011582:	d8f4      	bhi.n	801156e <_realloc_r+0x1e>
 8011584:	4629      	mov	r1, r5
 8011586:	4640      	mov	r0, r8
 8011588:	f7ff fc38 	bl	8010dfc <_malloc_r>
 801158c:	4607      	mov	r7, r0
 801158e:	2800      	cmp	r0, #0
 8011590:	d0ec      	beq.n	801156c <_realloc_r+0x1c>
 8011592:	42b5      	cmp	r5, r6
 8011594:	462a      	mov	r2, r5
 8011596:	4621      	mov	r1, r4
 8011598:	bf28      	it	cs
 801159a:	4632      	movcs	r2, r6
 801159c:	f7ff ffca 	bl	8011534 <memcpy>
 80115a0:	4621      	mov	r1, r4
 80115a2:	4640      	mov	r0, r8
 80115a4:	f7ff fbbe 	bl	8010d24 <_free_r>
 80115a8:	463c      	mov	r4, r7
 80115aa:	e7e0      	b.n	801156e <_realloc_r+0x1e>

080115ac <_malloc_usable_size_r>:
 80115ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80115b0:	1f18      	subs	r0, r3, #4
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	bfbc      	itt	lt
 80115b6:	580b      	ldrlt	r3, [r1, r0]
 80115b8:	18c0      	addlt	r0, r0, r3
 80115ba:	4770      	bx	lr

080115bc <_init>:
 80115bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115be:	bf00      	nop
 80115c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80115c2:	bc08      	pop	{r3}
 80115c4:	469e      	mov	lr, r3
 80115c6:	4770      	bx	lr

080115c8 <_fini>:
 80115c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115ca:	bf00      	nop
 80115cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80115ce:	bc08      	pop	{r3}
 80115d0:	469e      	mov	lr, r3
 80115d2:	4770      	bx	lr
