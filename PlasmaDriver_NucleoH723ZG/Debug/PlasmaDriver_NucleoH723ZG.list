
PlasmaDriver_NucleoH723ZG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000146c4  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d38  08014998  08014998  00015998  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080156d0  080156d0  000166d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080156d8  080156d8  000166d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080156dc  080156dc  000166dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000210  24000000  080156e0  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000210  080158f0  00017210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000270  08015950  00017270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f40  240002d0  080159b0  000172d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24001210  080159b0  00018210  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000172d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024629  00000000  00000000  000172fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bb7  00000000  00000000  0003b927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001be8  00000000  00000000  0003f4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015d1  00000000  00000000  000410c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038050  00000000  00000000  00042699  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022878  00000000  00000000  0007a6e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016e1e9  00000000  00000000  0009cf61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0020b14a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000089ec  00000000  00000000  0020b190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00213b7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002d0 	.word	0x240002d0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801497c 	.word	0x0801497c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002d4 	.word	0x240002d4
 800030c:	0801497c 	.word	0x0801497c

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003f4:	f000 b96a 	b.w	80006cc <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9d08      	ldr	r5, [sp, #32]
 8000416:	460c      	mov	r4, r1
 8000418:	2b00      	cmp	r3, #0
 800041a:	d14e      	bne.n	80004ba <__udivmoddi4+0xaa>
 800041c:	4694      	mov	ip, r2
 800041e:	458c      	cmp	ip, r1
 8000420:	4686      	mov	lr, r0
 8000422:	fab2 f282 	clz	r2, r2
 8000426:	d962      	bls.n	80004ee <__udivmoddi4+0xde>
 8000428:	b14a      	cbz	r2, 800043e <__udivmoddi4+0x2e>
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	4091      	lsls	r1, r2
 8000430:	fa20 f303 	lsr.w	r3, r0, r3
 8000434:	fa0c fc02 	lsl.w	ip, ip, r2
 8000438:	4319      	orrs	r1, r3
 800043a:	fa00 fe02 	lsl.w	lr, r0, r2
 800043e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000442:	fa1f f68c 	uxth.w	r6, ip
 8000446:	fbb1 f4f7 	udiv	r4, r1, r7
 800044a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800044e:	fb07 1114 	mls	r1, r7, r4, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb04 f106 	mul.w	r1, r4, r6
 800045a:	4299      	cmp	r1, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x64>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000466:	f080 8112 	bcs.w	800068e <__udivmoddi4+0x27e>
 800046a:	4299      	cmp	r1, r3
 800046c:	f240 810f 	bls.w	800068e <__udivmoddi4+0x27e>
 8000470:	3c02      	subs	r4, #2
 8000472:	4463      	add	r3, ip
 8000474:	1a59      	subs	r1, r3, r1
 8000476:	fa1f f38e 	uxth.w	r3, lr
 800047a:	fbb1 f0f7 	udiv	r0, r1, r7
 800047e:	fb07 1110 	mls	r1, r7, r0, r1
 8000482:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000486:	fb00 f606 	mul.w	r6, r0, r6
 800048a:	429e      	cmp	r6, r3
 800048c:	d90a      	bls.n	80004a4 <__udivmoddi4+0x94>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000496:	f080 80fc 	bcs.w	8000692 <__udivmoddi4+0x282>
 800049a:	429e      	cmp	r6, r3
 800049c:	f240 80f9 	bls.w	8000692 <__udivmoddi4+0x282>
 80004a0:	4463      	add	r3, ip
 80004a2:	3802      	subs	r0, #2
 80004a4:	1b9b      	subs	r3, r3, r6
 80004a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80004aa:	2100      	movs	r1, #0
 80004ac:	b11d      	cbz	r5, 80004b6 <__udivmoddi4+0xa6>
 80004ae:	40d3      	lsrs	r3, r2
 80004b0:	2200      	movs	r2, #0
 80004b2:	e9c5 3200 	strd	r3, r2, [r5]
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d905      	bls.n	80004ca <__udivmoddi4+0xba>
 80004be:	b10d      	cbz	r5, 80004c4 <__udivmoddi4+0xb4>
 80004c0:	e9c5 0100 	strd	r0, r1, [r5]
 80004c4:	2100      	movs	r1, #0
 80004c6:	4608      	mov	r0, r1
 80004c8:	e7f5      	b.n	80004b6 <__udivmoddi4+0xa6>
 80004ca:	fab3 f183 	clz	r1, r3
 80004ce:	2900      	cmp	r1, #0
 80004d0:	d146      	bne.n	8000560 <__udivmoddi4+0x150>
 80004d2:	42a3      	cmp	r3, r4
 80004d4:	d302      	bcc.n	80004dc <__udivmoddi4+0xcc>
 80004d6:	4290      	cmp	r0, r2
 80004d8:	f0c0 80f0 	bcc.w	80006bc <__udivmoddi4+0x2ac>
 80004dc:	1a86      	subs	r6, r0, r2
 80004de:	eb64 0303 	sbc.w	r3, r4, r3
 80004e2:	2001      	movs	r0, #1
 80004e4:	2d00      	cmp	r5, #0
 80004e6:	d0e6      	beq.n	80004b6 <__udivmoddi4+0xa6>
 80004e8:	e9c5 6300 	strd	r6, r3, [r5]
 80004ec:	e7e3      	b.n	80004b6 <__udivmoddi4+0xa6>
 80004ee:	2a00      	cmp	r2, #0
 80004f0:	f040 8090 	bne.w	8000614 <__udivmoddi4+0x204>
 80004f4:	eba1 040c 	sub.w	r4, r1, ip
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa1f f78c 	uxth.w	r7, ip
 8000500:	2101      	movs	r1, #1
 8000502:	fbb4 f6f8 	udiv	r6, r4, r8
 8000506:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800050a:	fb08 4416 	mls	r4, r8, r6, r4
 800050e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000512:	fb07 f006 	mul.w	r0, r7, r6
 8000516:	4298      	cmp	r0, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x11c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000522:	d202      	bcs.n	800052a <__udivmoddi4+0x11a>
 8000524:	4298      	cmp	r0, r3
 8000526:	f200 80cd 	bhi.w	80006c4 <__udivmoddi4+0x2b4>
 800052a:	4626      	mov	r6, r4
 800052c:	1a1c      	subs	r4, r3, r0
 800052e:	fa1f f38e 	uxth.w	r3, lr
 8000532:	fbb4 f0f8 	udiv	r0, r4, r8
 8000536:	fb08 4410 	mls	r4, r8, r0, r4
 800053a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800053e:	fb00 f707 	mul.w	r7, r0, r7
 8000542:	429f      	cmp	r7, r3
 8000544:	d908      	bls.n	8000558 <__udivmoddi4+0x148>
 8000546:	eb1c 0303 	adds.w	r3, ip, r3
 800054a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800054e:	d202      	bcs.n	8000556 <__udivmoddi4+0x146>
 8000550:	429f      	cmp	r7, r3
 8000552:	f200 80b0 	bhi.w	80006b6 <__udivmoddi4+0x2a6>
 8000556:	4620      	mov	r0, r4
 8000558:	1bdb      	subs	r3, r3, r7
 800055a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800055e:	e7a5      	b.n	80004ac <__udivmoddi4+0x9c>
 8000560:	f1c1 0620 	rsb	r6, r1, #32
 8000564:	408b      	lsls	r3, r1
 8000566:	fa22 f706 	lsr.w	r7, r2, r6
 800056a:	431f      	orrs	r7, r3
 800056c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000570:	fa04 f301 	lsl.w	r3, r4, r1
 8000574:	ea43 030c 	orr.w	r3, r3, ip
 8000578:	40f4      	lsrs	r4, r6
 800057a:	fa00 f801 	lsl.w	r8, r0, r1
 800057e:	0c38      	lsrs	r0, r7, #16
 8000580:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000584:	fbb4 fef0 	udiv	lr, r4, r0
 8000588:	fa1f fc87 	uxth.w	ip, r7
 800058c:	fb00 441e 	mls	r4, r0, lr, r4
 8000590:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000594:	fb0e f90c 	mul.w	r9, lr, ip
 8000598:	45a1      	cmp	r9, r4
 800059a:	fa02 f201 	lsl.w	r2, r2, r1
 800059e:	d90a      	bls.n	80005b6 <__udivmoddi4+0x1a6>
 80005a0:	193c      	adds	r4, r7, r4
 80005a2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80005a6:	f080 8084 	bcs.w	80006b2 <__udivmoddi4+0x2a2>
 80005aa:	45a1      	cmp	r9, r4
 80005ac:	f240 8081 	bls.w	80006b2 <__udivmoddi4+0x2a2>
 80005b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80005b4:	443c      	add	r4, r7
 80005b6:	eba4 0409 	sub.w	r4, r4, r9
 80005ba:	fa1f f983 	uxth.w	r9, r3
 80005be:	fbb4 f3f0 	udiv	r3, r4, r0
 80005c2:	fb00 4413 	mls	r4, r0, r3, r4
 80005c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ce:	45a4      	cmp	ip, r4
 80005d0:	d907      	bls.n	80005e2 <__udivmoddi4+0x1d2>
 80005d2:	193c      	adds	r4, r7, r4
 80005d4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80005d8:	d267      	bcs.n	80006aa <__udivmoddi4+0x29a>
 80005da:	45a4      	cmp	ip, r4
 80005dc:	d965      	bls.n	80006aa <__udivmoddi4+0x29a>
 80005de:	3b02      	subs	r3, #2
 80005e0:	443c      	add	r4, r7
 80005e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005e6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ea:	eba4 040c 	sub.w	r4, r4, ip
 80005ee:	429c      	cmp	r4, r3
 80005f0:	46ce      	mov	lr, r9
 80005f2:	469c      	mov	ip, r3
 80005f4:	d351      	bcc.n	800069a <__udivmoddi4+0x28a>
 80005f6:	d04e      	beq.n	8000696 <__udivmoddi4+0x286>
 80005f8:	b155      	cbz	r5, 8000610 <__udivmoddi4+0x200>
 80005fa:	ebb8 030e 	subs.w	r3, r8, lr
 80005fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000602:	fa04 f606 	lsl.w	r6, r4, r6
 8000606:	40cb      	lsrs	r3, r1
 8000608:	431e      	orrs	r6, r3
 800060a:	40cc      	lsrs	r4, r1
 800060c:	e9c5 6400 	strd	r6, r4, [r5]
 8000610:	2100      	movs	r1, #0
 8000612:	e750      	b.n	80004b6 <__udivmoddi4+0xa6>
 8000614:	f1c2 0320 	rsb	r3, r2, #32
 8000618:	fa20 f103 	lsr.w	r1, r0, r3
 800061c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000620:	fa24 f303 	lsr.w	r3, r4, r3
 8000624:	4094      	lsls	r4, r2
 8000626:	430c      	orrs	r4, r1
 8000628:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800062c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000630:	fa1f f78c 	uxth.w	r7, ip
 8000634:	fbb3 f0f8 	udiv	r0, r3, r8
 8000638:	fb08 3110 	mls	r1, r8, r0, r3
 800063c:	0c23      	lsrs	r3, r4, #16
 800063e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000642:	fb00 f107 	mul.w	r1, r0, r7
 8000646:	4299      	cmp	r1, r3
 8000648:	d908      	bls.n	800065c <__udivmoddi4+0x24c>
 800064a:	eb1c 0303 	adds.w	r3, ip, r3
 800064e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000652:	d22c      	bcs.n	80006ae <__udivmoddi4+0x29e>
 8000654:	4299      	cmp	r1, r3
 8000656:	d92a      	bls.n	80006ae <__udivmoddi4+0x29e>
 8000658:	3802      	subs	r0, #2
 800065a:	4463      	add	r3, ip
 800065c:	1a5b      	subs	r3, r3, r1
 800065e:	b2a4      	uxth	r4, r4
 8000660:	fbb3 f1f8 	udiv	r1, r3, r8
 8000664:	fb08 3311 	mls	r3, r8, r1, r3
 8000668:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800066c:	fb01 f307 	mul.w	r3, r1, r7
 8000670:	42a3      	cmp	r3, r4
 8000672:	d908      	bls.n	8000686 <__udivmoddi4+0x276>
 8000674:	eb1c 0404 	adds.w	r4, ip, r4
 8000678:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800067c:	d213      	bcs.n	80006a6 <__udivmoddi4+0x296>
 800067e:	42a3      	cmp	r3, r4
 8000680:	d911      	bls.n	80006a6 <__udivmoddi4+0x296>
 8000682:	3902      	subs	r1, #2
 8000684:	4464      	add	r4, ip
 8000686:	1ae4      	subs	r4, r4, r3
 8000688:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800068c:	e739      	b.n	8000502 <__udivmoddi4+0xf2>
 800068e:	4604      	mov	r4, r0
 8000690:	e6f0      	b.n	8000474 <__udivmoddi4+0x64>
 8000692:	4608      	mov	r0, r1
 8000694:	e706      	b.n	80004a4 <__udivmoddi4+0x94>
 8000696:	45c8      	cmp	r8, r9
 8000698:	d2ae      	bcs.n	80005f8 <__udivmoddi4+0x1e8>
 800069a:	ebb9 0e02 	subs.w	lr, r9, r2
 800069e:	eb63 0c07 	sbc.w	ip, r3, r7
 80006a2:	3801      	subs	r0, #1
 80006a4:	e7a8      	b.n	80005f8 <__udivmoddi4+0x1e8>
 80006a6:	4631      	mov	r1, r6
 80006a8:	e7ed      	b.n	8000686 <__udivmoddi4+0x276>
 80006aa:	4603      	mov	r3, r0
 80006ac:	e799      	b.n	80005e2 <__udivmoddi4+0x1d2>
 80006ae:	4630      	mov	r0, r6
 80006b0:	e7d4      	b.n	800065c <__udivmoddi4+0x24c>
 80006b2:	46d6      	mov	lr, sl
 80006b4:	e77f      	b.n	80005b6 <__udivmoddi4+0x1a6>
 80006b6:	4463      	add	r3, ip
 80006b8:	3802      	subs	r0, #2
 80006ba:	e74d      	b.n	8000558 <__udivmoddi4+0x148>
 80006bc:	4606      	mov	r6, r0
 80006be:	4623      	mov	r3, r4
 80006c0:	4608      	mov	r0, r1
 80006c2:	e70f      	b.n	80004e4 <__udivmoddi4+0xd4>
 80006c4:	3e02      	subs	r6, #2
 80006c6:	4463      	add	r3, ip
 80006c8:	e730      	b.n	800052c <__udivmoddi4+0x11c>
 80006ca:	bf00      	nop

080006cc <__aeabi_idiv0>:
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop

080006d0 <init_supply_struct>:
	char sHV;
} supply_struct;
static supply_struct supply_status;

static void init_supply_struct()
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
	supply_status.s15V = 0;
 80006d4:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <init_supply_struct+0x20>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	705a      	strb	r2, [r3, #1]
	supply_status.s3_3V = 0;
 80006da:	4b05      	ldr	r3, [pc, #20]	@ (80006f0 <init_supply_struct+0x20>)
 80006dc:	2200      	movs	r2, #0
 80006de:	701a      	strb	r2, [r3, #0]
	supply_status.sHV = 0;
 80006e0:	4b03      	ldr	r3, [pc, #12]	@ (80006f0 <init_supply_struct+0x20>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	709a      	strb	r2, [r3, #2]
}
 80006e6:	bf00      	nop
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	24000a40 	.word	0x24000a40

080006f4 <writeConfigFlash>:
// Prototypes
void measureVoltagesTemperaturesADC3(void);

// Write configuration to flash
static uint32_t writeConfigFlash(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
	uint32_t faultySector;	//Contains error code for faulty sector
	uint32_t error_code = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]

	// Unlock Flash
	HAL_FLASH_Unlock();
 80006fe:	f00a fa8d 	bl	800ac1c <HAL_FLASH_Unlock>

	// Erase flash sector 7
	if (HAL_FLASHEx_Erase(&sFlashErase, &faultySector) == HAL_OK)
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	4619      	mov	r1, r3
 8000706:	4815      	ldr	r0, [pc, #84]	@ (800075c <writeConfigFlash+0x68>)
 8000708:	f00a fb24 	bl	800ad54 <HAL_FLASHEx_Erase>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d119      	bne.n	8000746 <writeConfigFlash+0x52>
	{
		for (uint32_t offset = 0; offset < sizeof(sFlashConfig); offset += FLASH_WORD)
 8000712:	2300      	movs	r3, #0
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	e012      	b.n	800073e <writeConfigFlash+0x4a>
		{
			// Program one flash word (8*4 bytes)
			if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, FLASH_SECTOR7_START_ADDR + offset, ((uint32_t) &sFlashConfig) + offset) != HAL_OK)
 8000718:	68ba      	ldr	r2, [r7, #8]
 800071a:	4b11      	ldr	r3, [pc, #68]	@ (8000760 <writeConfigFlash+0x6c>)
 800071c:	4413      	add	r3, r2
 800071e:	4911      	ldr	r1, [pc, #68]	@ (8000764 <writeConfigFlash+0x70>)
 8000720:	68ba      	ldr	r2, [r7, #8]
 8000722:	440a      	add	r2, r1
 8000724:	4619      	mov	r1, r3
 8000726:	2001      	movs	r0, #1
 8000728:	f00a fa0a 	bl	800ab40 <HAL_FLASH_Program>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d002      	beq.n	8000738 <writeConfigFlash+0x44>
			{
				// Error during flash write
				error_code = HAL_FLASH_GetError();
 8000732:	f00a faad 	bl	800ac90 <HAL_FLASH_GetError>
 8000736:	60f8      	str	r0, [r7, #12]
		for (uint32_t offset = 0; offset < sizeof(sFlashConfig); offset += FLASH_WORD)
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	3320      	adds	r3, #32
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d0e9      	beq.n	8000718 <writeConfigFlash+0x24>
 8000744:	e002      	b.n	800074c <writeConfigFlash+0x58>
			}
		}
	}
	else
	{
		error_code = HAL_FLASH_GetError();
 8000746:	f00a faa3 	bl	800ac90 <HAL_FLASH_GetError>
 800074a:	60f8      	str	r0, [r7, #12]
	}

	  // Lock Flash
	  HAL_FLASH_Lock();
 800074c:	f00a fa88 	bl	800ac60 <HAL_FLASH_Lock>

	  return error_code;
 8000750:	68fb      	ldr	r3, [r7, #12]
}
 8000752:	4618      	mov	r0, r3
 8000754:	3710      	adds	r7, #16
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	24000024 	.word	0x24000024
 8000760:	080e0000 	.word	0x080e0000
 8000764:	24000a48 	.word	0x24000a48

08000768 <readConfigFlash>:

// Read configuration from flash
static void readConfigFlash(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
	// Read configuration from flash
	memcpy(&sFlashConfig, (void *) FLASH_SECTOR7_START_ADDR, sizeof(sFlashConfig));
 800076c:	4b04      	ldr	r3, [pc, #16]	@ (8000780 <readConfigFlash+0x18>)
 800076e:	781a      	ldrb	r2, [r3, #0]
 8000770:	4b04      	ldr	r3, [pc, #16]	@ (8000784 <readConfigFlash+0x1c>)
 8000772:	701a      	strb	r2, [r3, #0]
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	080e0000 	.word	0x080e0000
 8000784:	24000a48 	.word	0x24000a48

08000788 <printCR>:

// Print CR
static void printCR(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart3, (uint8_t *) "\n\r", 2, 1000);
 800078c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000790:	2202      	movs	r2, #2
 8000792:	4903      	ldr	r1, [pc, #12]	@ (80007a0 <printCR+0x18>)
 8000794:	4803      	ldr	r0, [pc, #12]	@ (80007a4 <printCR+0x1c>)
 8000796:	f00f ff60 	bl	801065a <HAL_UART_Transmit>
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	08014998 	.word	0x08014998
 80007a4:	24000e38 	.word	0x24000e38

080007a8 <printString>:

// Print string on UART3
static void printString(char *str)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) str, strlen(str), 1000);
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f7ff fe0d 	bl	80003d0 <strlen>
 80007b6:	4603      	mov	r3, r0
 80007b8:	b29a      	uxth	r2, r3
 80007ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007be:	6879      	ldr	r1, [r7, #4]
 80007c0:	4803      	ldr	r0, [pc, #12]	@ (80007d0 <printString+0x28>)
 80007c2:	f00f ff4a 	bl	801065a <HAL_UART_Transmit>
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	24000e38 	.word	0x24000e38

080007d4 <printConfigFlash>:

// Print configuration on UART3
static void printConfigFlash(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	printString("\n\rCurrent configuration:");
 80007d8:	480e      	ldr	r0, [pc, #56]	@ (8000814 <printConfigFlash+0x40>)
 80007da:	f7ff ffe5 	bl	80007a8 <printString>
	printString("\n\r  Mode = ");
 80007de:	480e      	ldr	r0, [pc, #56]	@ (8000818 <printConfigFlash+0x44>)
 80007e0:	f7ff ffe2 	bl	80007a8 <printString>
	if (sFlashConfig.mode == TEST_MODE)
 80007e4:	4b0d      	ldr	r3, [pc, #52]	@ (800081c <printConfigFlash+0x48>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d103      	bne.n	80007f4 <printConfigFlash+0x20>
		printString("TEST");
 80007ec:	480c      	ldr	r0, [pc, #48]	@ (8000820 <printConfigFlash+0x4c>)
 80007ee:	f7ff ffdb 	bl	80007a8 <printString>
 80007f2:	e00a      	b.n	800080a <printConfigFlash+0x36>
	else if (sFlashConfig.mode == RUN_MODE)
 80007f4:	4b09      	ldr	r3, [pc, #36]	@ (800081c <printConfigFlash+0x48>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	d103      	bne.n	8000804 <printConfigFlash+0x30>
		printString("RUN");
 80007fc:	4809      	ldr	r0, [pc, #36]	@ (8000824 <printConfigFlash+0x50>)
 80007fe:	f7ff ffd3 	bl	80007a8 <printString>
 8000802:	e002      	b.n	800080a <printConfigFlash+0x36>
	else
		printString("UNKNOWN");
 8000804:	4808      	ldr	r0, [pc, #32]	@ (8000828 <printConfigFlash+0x54>)
 8000806:	f7ff ffcf 	bl	80007a8 <printString>
	printCR();
 800080a:	f7ff ffbd 	bl	8000788 <printCR>
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	0801499c 	.word	0x0801499c
 8000818:	080149b8 	.word	0x080149b8
 800081c:	24000a48 	.word	0x24000a48
 8000820:	080149c4 	.word	0x080149c4
 8000824:	080149cc 	.word	0x080149cc
 8000828:	080149d0 	.word	0x080149d0

0800082c <printNumber>:

// Print 16bit unsigned integer on UART3
static void printNumber(const char *text, uint16_t number, uint8_t CR)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b09e      	sub	sp, #120	@ 0x78
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	460b      	mov	r3, r1
 8000836:	807b      	strh	r3, [r7, #2]
 8000838:	4613      	mov	r3, r2
 800083a:	707b      	strb	r3, [r7, #1]
	char s_output[100];
	char s_number[7];
	strcpy(s_output, text);
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	6879      	ldr	r1, [r7, #4]
 8000842:	4618      	mov	r0, r3
 8000844:	f012 f8b7 	bl	80129b6 <strcpy>
	itoa(number, s_number, 10);
 8000848:	887b      	ldrh	r3, [r7, #2]
 800084a:	f107 010c 	add.w	r1, r7, #12
 800084e:	220a      	movs	r2, #10
 8000850:	4618      	mov	r0, r3
 8000852:	f011 f9ff 	bl	8011c54 <itoa>
	strcat(s_output, s_number);
 8000856:	f107 020c 	add.w	r2, r7, #12
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	4611      	mov	r1, r2
 8000860:	4618      	mov	r0, r3
 8000862:	f012 f822 	bl	80128aa <strcat>
	if (CR)
 8000866:	787b      	ldrb	r3, [r7, #1]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d00e      	beq.n	800088a <printNumber+0x5e>
	{
		strcat(s_output, "\n\r");
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff fdad 	bl	80003d0 <strlen>
 8000876:	4603      	mov	r3, r0
 8000878:	461a      	mov	r2, r3
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	4413      	add	r3, r2
 8000880:	4a0b      	ldr	r2, [pc, #44]	@ (80008b0 <printNumber+0x84>)
 8000882:	8811      	ldrh	r1, [r2, #0]
 8000884:	7892      	ldrb	r2, [r2, #2]
 8000886:	8019      	strh	r1, [r3, #0]
 8000888:	709a      	strb	r2, [r3, #2]
	}
	HAL_UART_Transmit(&huart3, (uint8_t *) s_output, strlen(s_output), 1000);
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff fd9e 	bl	80003d0 <strlen>
 8000894:	4603      	mov	r3, r0
 8000896:	b29a      	uxth	r2, r3
 8000898:	f107 0114 	add.w	r1, r7, #20
 800089c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008a0:	4804      	ldr	r0, [pc, #16]	@ (80008b4 <printNumber+0x88>)
 80008a2:	f00f feda 	bl	801065a <HAL_UART_Transmit>
}
 80008a6:	bf00      	nop
 80008a8:	3778      	adds	r7, #120	@ 0x78
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	08014998 	.word	0x08014998
 80008b4:	24000e38 	.word	0x24000e38

080008b8 <printHALErrorStatus>:

// Print HAL error status on UART3
static void	printHALErrorStatus(HAL_StatusTypeDef HALresp, const char *text)
{
 80008b8:	b5b0      	push	{r4, r5, r7, lr}
 80008ba:	b09c      	sub	sp, #112	@ 0x70
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	6039      	str	r1, [r7, #0]
 80008c2:	71fb      	strb	r3, [r7, #7]
	char s_output[100];

	switch (HALresp)
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	2b03      	cmp	r3, #3
 80008c8:	d828      	bhi.n	800091c <printHALErrorStatus+0x64>
 80008ca:	a201      	add	r2, pc, #4	@ (adr r2, 80008d0 <printHALErrorStatus+0x18>)
 80008cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d0:	0800091d 	.word	0x0800091d
 80008d4:	080008e1 	.word	0x080008e1
 80008d8:	080008f5 	.word	0x080008f5
 80008dc:	08000909 	.word	0x08000909
	{
		case HAL_ERROR:
			strcpy(s_output, "** HAL ERROR **: ");
 80008e0:	f107 030c 	add.w	r3, r7, #12
 80008e4:	4a15      	ldr	r2, [pc, #84]	@ (800093c <printHALErrorStatus+0x84>)
 80008e6:	461c      	mov	r4, r3
 80008e8:	4615      	mov	r5, r2
 80008ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008ee:	682b      	ldr	r3, [r5, #0]
 80008f0:	8023      	strh	r3, [r4, #0]
		break;
 80008f2:	e013      	b.n	800091c <printHALErrorStatus+0x64>

		case HAL_BUSY:
			strcpy(s_output, "** HAL BUSY **: ");
 80008f4:	f107 030c 	add.w	r3, r7, #12
 80008f8:	4a11      	ldr	r2, [pc, #68]	@ (8000940 <printHALErrorStatus+0x88>)
 80008fa:	461c      	mov	r4, r3
 80008fc:	4615      	mov	r5, r2
 80008fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000900:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000902:	682b      	ldr	r3, [r5, #0]
 8000904:	7023      	strb	r3, [r4, #0]
		break;
 8000906:	e009      	b.n	800091c <printHALErrorStatus+0x64>

		case HAL_TIMEOUT:
			strcpy(s_output, "** HAL TIMEOUT **: ");
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	4a0d      	ldr	r2, [pc, #52]	@ (8000944 <printHALErrorStatus+0x8c>)
 800090e:	461c      	mov	r4, r3
 8000910:	4615      	mov	r5, r2
 8000912:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000914:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000916:	682b      	ldr	r3, [r5, #0]
 8000918:	6023      	str	r3, [r4, #0]
		break;
 800091a:	bf00      	nop

		case HAL_OK:
		break;
	}
	strcat(s_output, text);
 800091c:	f107 030c 	add.w	r3, r7, #12
 8000920:	6839      	ldr	r1, [r7, #0]
 8000922:	4618      	mov	r0, r3
 8000924:	f011 ffc1 	bl	80128aa <strcat>
	printString(s_output);
 8000928:	f107 030c 	add.w	r3, r7, #12
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff ff3b 	bl	80007a8 <printString>
}
 8000932:	bf00      	nop
 8000934:	3770      	adds	r7, #112	@ 0x70
 8000936:	46bd      	mov	sp, r7
 8000938:	bdb0      	pop	{r4, r5, r7, pc}
 800093a:	bf00      	nop
 800093c:	080149d8 	.word	0x080149d8
 8000940:	080149ec 	.word	0x080149ec
 8000944:	08014a00 	.word	0x08014a00

08000948 <stopHbridge>:

void stopHbridge(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]

	//Stop TIMER 1 PWM & interrupts
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);  //This will stop channel PWM1
 800095c:	2100      	movs	r1, #0
 800095e:	480f      	ldr	r0, [pc, #60]	@ (800099c <stopHbridge+0x54>)
 8000960:	f00e fa90 	bl	800ee84 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1); //This will stop channel PWM1N
 8000964:	2100      	movs	r1, #0
 8000966:	480d      	ldr	r0, [pc, #52]	@ (800099c <stopHbridge+0x54>)
 8000968:	f00f fc68 	bl	801023c <HAL_TIMEx_PWMN_Stop>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, TIM1_CH1N_Pin|TIM1_CH1_Pin, GPIO_PIN_SET);
 800096c:	2201      	movs	r2, #1
 800096e:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8000972:	480b      	ldr	r0, [pc, #44]	@ (80009a0 <stopHbridge+0x58>)
 8000974:	f00a fc82 	bl	800b27c <HAL_GPIO_WritePin>
	/*Configure GPIO pins : LED_GREEN_Pin LINE_DRIVER1_ENABLE_Pin LINE_DRIVER2_ENABLE_Pin LED_RED_Pin */
	GPIO_InitStruct.Pin = TIM1_CH1N_Pin|TIM1_CH1_Pin;
 8000978:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800097c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097e:	2301      	movs	r3, #1
 8000980:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	4619      	mov	r1, r3
 800098e:	4804      	ldr	r0, [pc, #16]	@ (80009a0 <stopHbridge+0x58>)
 8000990:	f00a fab4 	bl	800aefc <HAL_GPIO_Init>

}
 8000994:	bf00      	nop
 8000996:	3718      	adds	r7, #24
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	24000ecc 	.word	0x24000ecc
 80009a0:	58021000 	.word	0x58021000

080009a4 <printHbridgeData>:

// Print H-bridge data on UART3
static void printHbridgeData(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b09c      	sub	sp, #112	@ 0x70
 80009a8:	af02      	add	r7, sp, #8
	char s_output[100];
	sprintf(s_output, "\n\rH-bridge 1=On 0=Off: %u, Frequency: %u (Hz), Dead time: %u (%%)\n\r", sHbridge.on, sHbridge.frequency, sHbridge.deadtime);
 80009aa:	4b0f      	ldr	r3, [pc, #60]	@ (80009e8 <printHbridgeData+0x44>)
 80009ac:	881b      	ldrh	r3, [r3, #0]
 80009ae:	461a      	mov	r2, r3
 80009b0:	4b0d      	ldr	r3, [pc, #52]	@ (80009e8 <printHbridgeData+0x44>)
 80009b2:	885b      	ldrh	r3, [r3, #2]
 80009b4:	4619      	mov	r1, r3
 80009b6:	4b0c      	ldr	r3, [pc, #48]	@ (80009e8 <printHbridgeData+0x44>)
 80009b8:	889b      	ldrh	r3, [r3, #4]
 80009ba:	1d38      	adds	r0, r7, #4
 80009bc:	9300      	str	r3, [sp, #0]
 80009be:	460b      	mov	r3, r1
 80009c0:	490a      	ldr	r1, [pc, #40]	@ (80009ec <printHbridgeData+0x48>)
 80009c2:	f011 ff07 	bl	80127d4 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t *) s_output, strlen(s_output), 1000);
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff fd01 	bl	80003d0 <strlen>
 80009ce:	4603      	mov	r3, r0
 80009d0:	b29a      	uxth	r2, r3
 80009d2:	1d39      	adds	r1, r7, #4
 80009d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009d8:	4805      	ldr	r0, [pc, #20]	@ (80009f0 <printHbridgeData+0x4c>)
 80009da:	f00f fe3e 	bl	801065a <HAL_UART_Transmit>
}
 80009de:	bf00      	nop
 80009e0:	3768      	adds	r7, #104	@ 0x68
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	2400001c 	.word	0x2400001c
 80009ec:	08014a14 	.word	0x08014a14
 80009f0:	24000e38 	.word	0x24000e38
 80009f4:	00000000 	.word	0x00000000

080009f8 <programHbridge>:



// Program TIMER 1 controlling the H-bridge
static void programHbridge()
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b0a6      	sub	sp, #152	@ 0x98
 80009fc:	af00      	add	r7, sp, #0
	uint8_t DT, DTG;
	float tDTS = 1E6/((float) TIMER_BASE_CLOCK);  //Minimum step in usec
 80009fe:	4b90      	ldr	r3, [pc, #576]	@ (8000c40 <programHbridge+0x248>)
 8000a00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	// TIMER 1 has already been initialized using HAL.
	// Program the H-bridge TIMER 1 - Clock TIMER_BASE_CLOCK

	// Calculate the period and duty cycle based on the frequency requested.
	timARR_f = ((float) TIMER_BASE_CLOCK) / ((float) sHbridge.frequency);
 8000a04:	4b8f      	ldr	r3, [pc, #572]	@ (8000c44 <programHbridge+0x24c>)
 8000a06:	885b      	ldrh	r3, [r3, #2]
 8000a08:	ee07 3a90 	vmov	s15, r3
 8000a0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a10:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 8000c48 <programHbridge+0x250>
 8000a14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a18:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
	timARR = (uint32_t) (timARR_f + 0.5);							// Set period counter
 8000a1c:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8000a20:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a24:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000a28:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000a2c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a30:	ee17 3a90 	vmov	r3, s15
 8000a34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	timCCR1 = timARR / 2;  											// 50% duty cycle
 8000a38:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a3c:	085b      	lsrs	r3, r3, #1
 8000a3e:	67fb      	str	r3, [r7, #124]	@ 0x7c

	// Print out the set frequency
	if (debug == 1)
 8000a40:	4b82      	ldr	r3, [pc, #520]	@ (8000c4c <programHbridge+0x254>)
 8000a42:	881b      	ldrh	r3, [r3, #0]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d105      	bne.n	8000a54 <programHbridge+0x5c>
	{
		value_int = ((uint32_t) TIMER_BASE_CLOCK) / timARR;
 8000a48:	4a81      	ldr	r2, [pc, #516]	@ (8000c50 <programHbridge+0x258>)
 8000a4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a52:	67bb      	str	r3, [r7, #120]	@ 0x78
	//  DTG[7:5] = 10x => DT = (64 + DTG[5:0]) x tDTG with tDTG =2xtDTS.	 max (64 + 63)*2*tDTS  	: 3.7236 usec - 7.3890 usec
	//  DTG[7:5] = 110 => DT = (32 + DTG[4:0]) x tDTG with tDTG =8xtDTS.     max (32 + 31)*8*tDTS   : 7.4472 usec - 14.662 usec
	//  DTG[7:5] = 111 => DT = (32 + DTG[4:0]) x tDTG with tDTG = 16 x tDTS. max (32 + 31)*16*tDTS 	: 14.895 usec - 29.324 usec

	// Calculate dead time in usec
	req_dtime_us = (((float) sHbridge.deadtime))*(10000./(float) sHbridge.frequency);
 8000a54:	4b7b      	ldr	r3, [pc, #492]	@ (8000c44 <programHbridge+0x24c>)
 8000a56:	889b      	ldrh	r3, [r3, #4]
 8000a58:	ee07 3a90 	vmov	s15, r3
 8000a5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a60:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000a64:	4b77      	ldr	r3, [pc, #476]	@ (8000c44 <programHbridge+0x24c>)
 8000a66:	885b      	ldrh	r3, [r3, #2]
 8000a68:	ee07 3a90 	vmov	s15, r3
 8000a6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a70:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000a74:	ed9f 4b70 	vldr	d4, [pc, #448]	@ 8000c38 <programHbridge+0x240>
 8000a78:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000a7c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000a80:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a84:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
		printString(s_output);
	}
*/

	// Minimum allowed dead time is 1 usec.
	if (req_dtime_us < 1.0)
 8000a88:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8000a8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000a90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a98:	d503      	bpl.n	8000aa2 <programHbridge+0xaa>
		req_dtime_us = 1.0;
 8000a9a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000a9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

	if (req_dtime_us <= 127*tDTS) //3.6946
 8000aa2:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000aa6:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 8000c54 <programHbridge+0x25c>
 8000aaa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000aae:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8000ab2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aba:	d81e      	bhi.n	8000afa <programHbridge+0x102>
	{
		DT = (uint8_t) (req_dtime_us/tDTS + 0.5);
 8000abc:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8000ac0:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000ac4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ac8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000acc:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000ad0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000ad4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ad8:	edc7 7a01 	vstr	s15, [r7, #4]
 8000adc:	793b      	ldrb	r3, [r7, #4]
 8000ade:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		if (DT > 127)
 8000ae2:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	da02      	bge.n	8000af0 <programHbridge+0xf8>
			DT = 127;
 8000aea:	237f      	movs	r3, #127	@ 0x7f
 8000aec:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		DTG = DT;
 8000af0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000af4:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000af8:	e0bb      	b.n	8000c72 <programHbridge+0x27a>
	}
	else if (req_dtime_us <= 127*2*tDTS) //7.3890
 8000afa:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000afe:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8000c58 <programHbridge+0x260>
 8000b02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b06:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8000b0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b12:	d825      	bhi.n	8000b60 <programHbridge+0x168>
	{
		DT = (uint8_t) ((req_dtime_us/(2*tDTS)) - 64 + 0.5);
 8000b14:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000b18:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000b1c:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8000b20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b24:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8000c5c <programHbridge+0x264>
 8000b28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000b2c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b30:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000b34:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b38:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b3c:	edc7 7a01 	vstr	s15, [r7, #4]
 8000b40:	793b      	ldrb	r3, [r7, #4]
 8000b42:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		if (DT > 63)
 8000b46:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000b4a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b4c:	d902      	bls.n	8000b54 <programHbridge+0x15c>
			DT = 63;
 8000b4e:	233f      	movs	r3, #63	@ 0x3f
 8000b50:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		DTG = DT + 0x80;
 8000b54:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000b58:	3b80      	subs	r3, #128	@ 0x80
 8000b5a:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000b5e:	e088      	b.n	8000c72 <programHbridge+0x27a>
	}
	else if (req_dtime_us <= 63*8*tDTS) //14.662
 8000b60:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000b64:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8000c60 <programHbridge+0x268>
 8000b68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b6c:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8000b70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b78:	d827      	bhi.n	8000bca <programHbridge+0x1d2>
	{
		DT = (uint8_t) ((req_dtime_us/(8*tDTS)) - 32 + 0.5);
 8000b7a:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000b7e:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8000b82:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b86:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8000b8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b8e:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8000c64 <programHbridge+0x26c>
 8000b92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000b96:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b9a:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000b9e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000ba2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ba6:	edc7 7a01 	vstr	s15, [r7, #4]
 8000baa:	793b      	ldrb	r3, [r7, #4]
 8000bac:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		if (DT > 31)
 8000bb0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000bb4:	2b1f      	cmp	r3, #31
 8000bb6:	d902      	bls.n	8000bbe <programHbridge+0x1c6>
			DT = 31;
 8000bb8:	231f      	movs	r3, #31
 8000bba:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		DTG = DT + 0xC0;
 8000bbe:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000bc2:	3b40      	subs	r3, #64	@ 0x40
 8000bc4:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000bc8:	e053      	b.n	8000c72 <programHbridge+0x27a>
	}
	else if (req_dtime_us <= 63*16*tDTS) //29.324
 8000bca:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000bce:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8000c68 <programHbridge+0x270>
 8000bd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bd6:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8000bda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000be2:	d843      	bhi.n	8000c6c <programHbridge+0x274>
	{
		DT = (uint8_t) ((req_dtime_us/(16*tDTS)) - 32 + 0.5);
 8000be4:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000be8:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8000bec:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000bf0:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8000bf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bf8:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8000c64 <programHbridge+0x26c>
 8000bfc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000c00:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c04:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000c08:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000c0c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c10:	edc7 7a01 	vstr	s15, [r7, #4]
 8000c14:	793b      	ldrb	r3, [r7, #4]
 8000c16:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		if (DT > 31)
 8000c1a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000c1e:	2b1f      	cmp	r3, #31
 8000c20:	d902      	bls.n	8000c28 <programHbridge+0x230>
			DT = 31;
 8000c22:	231f      	movs	r3, #31
 8000c24:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		DTG = DT + 0xE0;
 8000c28:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000c2c:	3b20      	subs	r3, #32
 8000c2e:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000c32:	e01e      	b.n	8000c72 <programHbridge+0x27a>
 8000c34:	f3af 8000 	nop.w
 8000c38:	00000000 	.word	0x00000000
 8000c3c:	40c38800 	.word	0x40c38800
 8000c40:	3cee500f 	.word	0x3cee500f
 8000c44:	2400001c 	.word	0x2400001c
 8000c48:	4c032156 	.word	0x4c032156
 8000c4c:	24000000 	.word	0x24000000
 8000c50:	020c8558 	.word	0x020c8558
 8000c54:	42fe0000 	.word	0x42fe0000
 8000c58:	437e0000 	.word	0x437e0000
 8000c5c:	42800000 	.word	0x42800000
 8000c60:	43fc0000 	.word	0x43fc0000
 8000c64:	42000000 	.word	0x42000000
 8000c68:	447c0000 	.word	0x447c0000
	}
	else
		DTG = 255;
 8000c6c:	23ff      	movs	r3, #255	@ 0xff
 8000c6e:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96

	uint32_t temp = TIM1->BDTR & 0xFFFFFF00;		//Mask out DTG
 8000c72:	4b4e      	ldr	r3, [pc, #312]	@ (8000dac <programHbridge+0x3b4>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c76:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000c7a:	677b      	str	r3, [r7, #116]	@ 0x74
	timBDTR = temp | DTG;							//Add new DTG
 8000c7c:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000c80:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000c82:	4313      	orrs	r3, r2
 8000c84:	673b      	str	r3, [r7, #112]	@ 0x70

	//Change timer1 settings
	htim1.Init.Period = timARR;   // Updating internal structure for timer
 8000c86:	4a4a      	ldr	r2, [pc, #296]	@ (8000db0 <programHbridge+0x3b8>)
 8000c88:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000c8c:	60d3      	str	r3, [r2, #12]
	TIM1->ARR = timARR;			  // Update period
 8000c8e:	4a47      	ldr	r2, [pc, #284]	@ (8000dac <programHbridge+0x3b4>)
 8000c90:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000c94:	62d3      	str	r3, [r2, #44]	@ 0x2c
	TIM1->CCR1 = timCCR1;		  // Update duty cycle
 8000c96:	4a45      	ldr	r2, [pc, #276]	@ (8000dac <programHbridge+0x3b4>)
 8000c98:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000c9a:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM1->BDTR = timBDTR;	      // Update dead time
 8000c9c:	4a43      	ldr	r2, [pc, #268]	@ (8000dac <programHbridge+0x3b4>)
 8000c9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000ca0:	6453      	str	r3, [r2, #68]	@ 0x44

	if (debug == 1) {
 8000ca2:	4b44      	ldr	r3, [pc, #272]	@ (8000db4 <programHbridge+0x3bc>)
 8000ca4:	881b      	ldrh	r3, [r3, #0]
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d160      	bne.n	8000d6c <programHbridge+0x374>
		//sprintf(s_output, "ARR %lu CCR1 %lu BDTR %lu", timARR, timCCR1, timBDTR & 0xFF);
		//printString(s_output);

		float calcDT = 0;
 8000caa:	f04f 0300 	mov.w	r3, #0
 8000cae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		//  DTG[7:5] = 0xx => DT = DTG[7:0] x tDTG with tDTG = tDTS.			 max 127*tDTS   		: 0.0000 usec - 3.6946 usec
		if ((DTG & 0x80) == 0) {
 8000cb2:	f997 3096 	ldrsb.w	r3, [r7, #150]	@ 0x96
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db0b      	blt.n	8000cd2 <programHbridge+0x2da>
			calcDT = DTG*tDTS;
 8000cba:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000cbe:	ee07 3a90 	vmov	s15, r3
 8000cc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cc6:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cce:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
		}
		//  DTG[7:5] = 10x => DT = (64 + DTG[5:0]) x tDTG with tDTG =2xtDTS.	 max (64 + 63)*2*tDTS  	: 3.7236 usec - 7.3890 usec
		if ((DTG & 0xC0) == 0x80) {
 8000cd2:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000cd6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000cda:	2b80      	cmp	r3, #128	@ 0x80
 8000cdc:	d10f      	bne.n	8000cfe <programHbridge+0x306>
			calcDT = (64 + (DTG & 0x3F))*2*tDTS;
 8000cde:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000ce2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000ce6:	3340      	adds	r3, #64	@ 0x40
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	ee07 3a90 	vmov	s15, r3
 8000cee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cf2:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cfa:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
		}
		//  DTG[7:5] = 110 => DT = (32 + DTG[4:0]) x tDTG with tDTG =8xtDTS.     max (32 + 31)*8*tDTS   : 7.4472 usec - 14.662 usec
		if ((DTG & 0xE0) == 0xC0) {
 8000cfe:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000d02:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000d06:	2bc0      	cmp	r3, #192	@ 0xc0
 8000d08:	d10f      	bne.n	8000d2a <programHbridge+0x332>
			calcDT = (32 + (DTG & 0x1F))*8*tDTS;
 8000d0a:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000d0e:	f003 031f 	and.w	r3, r3, #31
 8000d12:	3320      	adds	r3, #32
 8000d14:	00db      	lsls	r3, r3, #3
 8000d16:	ee07 3a90 	vmov	s15, r3
 8000d1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d1e:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d26:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
		}
		//  DTG[7:5] = 111 => DT = (32 + DTG[4:0]) x tDTG with tDTG = 16 x tDTS. max (32 + 31)*16*tDTS 	: 14.895 usec - 29.324 usec
		if ((DTG & 0xE0) == 0xE0) {
 8000d2a:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000d2e:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000d32:	2be0      	cmp	r3, #224	@ 0xe0
 8000d34:	d10f      	bne.n	8000d56 <programHbridge+0x35e>
			calcDT = (32 + (DTG & 0x1F))*16*tDTS;
 8000d36:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000d3a:	f003 031f 	and.w	r3, r3, #31
 8000d3e:	3320      	adds	r3, #32
 8000d40:	011b      	lsls	r3, r3, #4
 8000d42:	ee07 3a90 	vmov	s15, r3
 8000d46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d4a:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d52:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
		}
		value_int = (uint32_t) 1000*calcDT;
 8000d56:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8000d5a:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000db8 <programHbridge+0x3c0>
 8000d5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d66:	ee17 3a90 	vmov	r3, s15
 8000d6a:	67bb      	str	r3, [r7, #120]	@ 0x78
		//sprintf(s_output, "\n\rSet dead time: %lu (ns)\n\r", value_int);
		//printString(s_output);
	}

	//Start driving the H-bridge
	if (sHbridge.on && (TIM_CHANNEL_STATE_GET(&htim1, TIM_CHANNEL_1) == HAL_TIM_CHANNEL_STATE_READY))
 8000d6c:	4b13      	ldr	r3, [pc, #76]	@ (8000dbc <programHbridge+0x3c4>)
 8000d6e:	881b      	ldrh	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d010      	beq.n	8000d96 <programHbridge+0x39e>
 8000d74:	4b0e      	ldr	r3, [pc, #56]	@ (8000db0 <programHbridge+0x3b8>)
 8000d76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d10a      	bne.n	8000d96 <programHbridge+0x39e>
	{
		HAL_TIM_MspPostInit(&htim1);	//Setup GPIO for timer alternate function
 8000d80:	480b      	ldr	r0, [pc, #44]	@ (8000db0 <programHbridge+0x3b8>)
 8000d82:	f003 fd5f 	bl	8004844 <HAL_TIM_MspPostInit>
		//Start TIMER 1 PWM & interrupts
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  //This will start channel PWM1
 8000d86:	2100      	movs	r1, #0
 8000d88:	4809      	ldr	r0, [pc, #36]	@ (8000db0 <programHbridge+0x3b8>)
 8000d8a:	f00d ff5f 	bl	800ec4c <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1); //This will start channel PWM1N
 8000d8e:	2100      	movs	r1, #0
 8000d90:	4807      	ldr	r0, [pc, #28]	@ (8000db0 <programHbridge+0x3b8>)
 8000d92:	f00f f983 	bl	801009c <HAL_TIMEx_PWMN_Start>
	}

	//Stop driving the H-bridge
	if (!sHbridge.on)
 8000d96:	4b09      	ldr	r3, [pc, #36]	@ (8000dbc <programHbridge+0x3c4>)
 8000d98:	881b      	ldrh	r3, [r3, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d101      	bne.n	8000da2 <programHbridge+0x3aa>
	{
		stopHbridge();
 8000d9e:	f7ff fdd3 	bl	8000948 <stopHbridge>
	}

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);

}
 8000da2:	bf00      	nop
 8000da4:	3798      	adds	r7, #152	@ 0x98
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40010000 	.word	0x40010000
 8000db0:	24000ecc 	.word	0x24000ecc
 8000db4:	24000000 	.word	0x24000000
 8000db8:	447a0000 	.word	0x447a0000
 8000dbc:	2400001c 	.word	0x2400001c

08000dc0 <convertADC12data>:
#define ADC1_VplaL1			4	//Plasma voltage L1
#define ADC2_VplaL2			5	//Plasma voltage L2

//Convert ADC1 & ADC2 data to voltages and current
float convertADC12data(uint32_t item, char **text)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
	float result = 0;
 8000dca:	f04f 0300 	mov.w	r3, #0
 8000dce:	60fb      	str	r3, [r7, #12]
* 3.3           *   (ADCData/65536.0)       *    1000
*   ^                   ^       ^                  ^
*   |                   |       |                  |
 * full scale V      Raw Data   Max ADC Value    Convert to mV
 */
	switch (item % (2*ADC12_NO_CHANNELS)) {
 8000dd0:	6879      	ldr	r1, [r7, #4]
 8000dd2:	4ba3      	ldr	r3, [pc, #652]	@ (8001060 <convertADC12data+0x2a0>)
 8000dd4:	fba3 2301 	umull	r2, r3, r3, r1
 8000dd8:	089a      	lsrs	r2, r3, #2
 8000dda:	4613      	mov	r3, r2
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	4413      	add	r3, r2
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	1aca      	subs	r2, r1, r3
 8000de4:	2a05      	cmp	r2, #5
 8000de6:	f200 8107 	bhi.w	8000ff8 <convertADC12data+0x238>
 8000dea:	a301      	add	r3, pc, #4	@ (adr r3, 8000df0 <convertADC12data+0x30>)
 8000dec:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8000df0:	08000e09 	.word	0x08000e09
 8000df4:	08000e2d 	.word	0x08000e2d
 8000df8:	08000e99 	.word	0x08000e99
 8000dfc:	08000ed5 	.word	0x08000ed5
 8000e00:	08000f0f 	.word	0x08000f0f
 8000e04:	08000f79 	.word	0x08000f79
		case ADC1_TIM1_CH1:
			result = sADC.adc12_data[item];
 8000e08:	4a96      	ldr	r2, [pc, #600]	@ (8001064 <convertADC12data+0x2a4>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e10:	ee07 3a90 	vmov	s15, r3
 8000e14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e18:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f000 80df 	beq.w	8000fe2 <convertADC12data+0x222>
				*text ="ADC1_TIM1_CH1";
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	4a90      	ldr	r2, [pc, #576]	@ (8001068 <convertADC12data+0x2a8>)
 8000e28:	601a      	str	r2, [r3, #0]
			break;
 8000e2a:	e0da      	b.n	8000fe2 <convertADC12data+0x222>

		case ADC2_Is:
			V = 3.3*(((float) sADC.adc12_data[item])/65536.0)*1000;
 8000e2c:	4a8d      	ldr	r2, [pc, #564]	@ (8001064 <convertADC12data+0x2a4>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e34:	ee07 3a90 	vmov	s15, r3
 8000e38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e3c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000e40:	ed9f 5b73 	vldr	d5, [pc, #460]	@ 8001010 <convertADC12data+0x250>
 8000e44:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e48:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 8001018 <convertADC12data+0x258>
 8000e4c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e50:	ed9f 6b73 	vldr	d6, [pc, #460]	@ 8001020 <convertADC12data+0x260>
 8000e54:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e58:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e5c:	edc7 7a02 	vstr	s15, [r7, #8]
			result =  2000*(V - 1.585714)/3.594286; //V;
 8000e60:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e64:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e68:	ed9f 6b6f 	vldr	d6, [pc, #444]	@ 8001028 <convertADC12data+0x268>
 8000e6c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e70:	ed9f 6b6f 	vldr	d6, [pc, #444]	@ 8001030 <convertADC12data+0x270>
 8000e74:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000e78:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 8001038 <convertADC12data+0x278>
 8000e7c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e80:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e84:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f000 80ab 	beq.w	8000fe6 <convertADC12data+0x226>
				*text ="ADC2_Is(mA)";
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	4a76      	ldr	r2, [pc, #472]	@ (800106c <convertADC12data+0x2ac>)
 8000e94:	601a      	str	r2, [r3, #0]
			break;
 8000e96:	e0a6      	b.n	8000fe6 <convertADC12data+0x226>

		case ADC1_VbriS1:
			result =  1000*((12.0+2000.0)/12.0)*3.3*(((float) sADC.adc12_data[item])/65536.0); // 3.3*(((float) sADC.adc12_data[item])/65536.0)*1000;
 8000e98:	4a72      	ldr	r2, [pc, #456]	@ (8001064 <convertADC12data+0x2a4>)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ea0:	ee07 3a90 	vmov	s15, r3
 8000ea4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ea8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000eac:	ed9f 5b58 	vldr	d5, [pc, #352]	@ 8001010 <convertADC12data+0x250>
 8000eb0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000eb4:	ed9f 6b62 	vldr	d6, [pc, #392]	@ 8001040 <convertADC12data+0x280>
 8000eb8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ebc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ec0:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f000 808f 	beq.w	8000fea <convertADC12data+0x22a>
				*text ="ADC1_VbriS1(mV)";
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	4a68      	ldr	r2, [pc, #416]	@ (8001070 <convertADC12data+0x2b0>)
 8000ed0:	601a      	str	r2, [r3, #0]
			break;
 8000ed2:	e08a      	b.n	8000fea <convertADC12data+0x22a>

		case ADC2_VbriS2:
			result =  1000*((12.0+2000.0)/12.0)*3.3*(((float) sADC.adc12_data[item])/65536.0); //3.3*(((float) sADC.adc12_data[item])/65536.0) * 1000;
 8000ed4:	4a63      	ldr	r2, [pc, #396]	@ (8001064 <convertADC12data+0x2a4>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000edc:	ee07 3a90 	vmov	s15, r3
 8000ee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ee4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000ee8:	ed9f 5b49 	vldr	d5, [pc, #292]	@ 8001010 <convertADC12data+0x250>
 8000eec:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ef0:	ed9f 6b53 	vldr	d6, [pc, #332]	@ 8001040 <convertADC12data+0x280>
 8000ef4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ef8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000efc:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d073      	beq.n	8000fee <convertADC12data+0x22e>
				*text ="ADC2_VbriS2(mV)";
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	4a5a      	ldr	r2, [pc, #360]	@ (8001074 <convertADC12data+0x2b4>)
 8000f0a:	601a      	str	r2, [r3, #0]
			break;
 8000f0c:	e06f      	b.n	8000fee <convertADC12data+0x22e>

		case ADC1_VplaL1:
			V = 3.3*(((float) sADC.adc12_data[item])/65536.0) * 1000;
 8000f0e:	4a55      	ldr	r2, [pc, #340]	@ (8001064 <convertADC12data+0x2a4>)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f16:	ee07 3a90 	vmov	s15, r3
 8000f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f1e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000f22:	ed9f 5b3b 	vldr	d5, [pc, #236]	@ 8001010 <convertADC12data+0x250>
 8000f26:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f2a:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 8001018 <convertADC12data+0x258>
 8000f2e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f32:	ed9f 6b3b 	vldr	d6, [pc, #236]	@ 8001020 <convertADC12data+0x260>
 8000f36:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f3a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f3e:	edc7 7a02 	vstr	s15, [r7, #8]
			result =  1E6*(V-1.648348)/0.999; //V;//
 8000f42:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f46:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f4a:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 8001048 <convertADC12data+0x288>
 8000f4e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000f52:	ed9f 6b3f 	vldr	d6, [pc, #252]	@ 8001050 <convertADC12data+0x290>
 8000f56:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000f5a:	ed9f 5b3f 	vldr	d5, [pc, #252]	@ 8001058 <convertADC12data+0x298>
 8000f5e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f62:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f66:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d040      	beq.n	8000ff2 <convertADC12data+0x232>
				*text ="ADC1_VplaL1(mV)";
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	4a41      	ldr	r2, [pc, #260]	@ (8001078 <convertADC12data+0x2b8>)
 8000f74:	601a      	str	r2, [r3, #0]
			break;
 8000f76:	e03c      	b.n	8000ff2 <convertADC12data+0x232>

		case ADC2_VplaL2:
			//V is the directly measured voltage from the ADC in mV
			V = 3.3*(((float) sADC.adc12_data[item])/65536.0) * 1000;
 8000f78:	4a3a      	ldr	r2, [pc, #232]	@ (8001064 <convertADC12data+0x2a4>)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f80:	ee07 3a90 	vmov	s15, r3
 8000f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f88:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000f8c:	ed9f 5b20 	vldr	d5, [pc, #128]	@ 8001010 <convertADC12data+0x250>
 8000f90:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f94:	ed9f 6b20 	vldr	d6, [pc, #128]	@ 8001018 <convertADC12data+0x258>
 8000f98:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f9c:	ed9f 6b20 	vldr	d6, [pc, #128]	@ 8001020 <convertADC12data+0x260>
 8000fa0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000fa4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fa8:	edc7 7a02 	vstr	s15, [r7, #8]
			//result is the True voltage at L2 (corrected for voltage divider)
			result =  1E6*(V-1.648348)/0.999;
 8000fac:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fb0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fb4:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 8001048 <convertADC12data+0x288>
 8000fb8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000fbc:	ed9f 6b24 	vldr	d6, [pc, #144]	@ 8001050 <convertADC12data+0x290>
 8000fc0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000fc4:	ed9f 5b24 	vldr	d5, [pc, #144]	@ 8001058 <convertADC12data+0x298>
 8000fc8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fcc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000fd0:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d00d      	beq.n	8000ff6 <convertADC12data+0x236>
				*text ="ADC2_VplaL2(mV)";
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	4a27      	ldr	r2, [pc, #156]	@ (800107c <convertADC12data+0x2bc>)
 8000fde:	601a      	str	r2, [r3, #0]
			break;
 8000fe0:	e009      	b.n	8000ff6 <convertADC12data+0x236>
			break;
 8000fe2:	bf00      	nop
 8000fe4:	e008      	b.n	8000ff8 <convertADC12data+0x238>
			break;
 8000fe6:	bf00      	nop
 8000fe8:	e006      	b.n	8000ff8 <convertADC12data+0x238>
			break;
 8000fea:	bf00      	nop
 8000fec:	e004      	b.n	8000ff8 <convertADC12data+0x238>
			break;
 8000fee:	bf00      	nop
 8000ff0:	e002      	b.n	8000ff8 <convertADC12data+0x238>
			break;
 8000ff2:	bf00      	nop
 8000ff4:	e000      	b.n	8000ff8 <convertADC12data+0x238>
			break;
 8000ff6:	bf00      	nop
	}

	return(result);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	ee07 3a90 	vmov	s15, r3
}
 8000ffe:	eeb0 0a67 	vmov.f32	s0, s15
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	f3af 8000 	nop.w
 8001010:	00000000 	.word	0x00000000
 8001014:	40f00000 	.word	0x40f00000
 8001018:	66666666 	.word	0x66666666
 800101c:	400a6666 	.word	0x400a6666
 8001020:	00000000 	.word	0x00000000
 8001024:	408f4000 	.word	0x408f4000
 8001028:	a4acf313 	.word	0xa4acf313
 800102c:	3ff95f15 	.word	0x3ff95f15
 8001030:	00000000 	.word	0x00000000
 8001034:	409f4000 	.word	0x409f4000
 8001038:	04b3c3e7 	.word	0x04b3c3e7
 800103c:	400cc119 	.word	0x400cc119
 8001040:	ffffffff 	.word	0xffffffff
 8001044:	4120e2a7 	.word	0x4120e2a7
 8001048:	2706d506 	.word	0x2706d506
 800104c:	3ffa5fa2 	.word	0x3ffa5fa2
 8001050:	00000000 	.word	0x00000000
 8001054:	412e8480 	.word	0x412e8480
 8001058:	d916872b 	.word	0xd916872b
 800105c:	3feff7ce 	.word	0x3feff7ce
 8001060:	aaaaaaab 	.word	0xaaaaaaab
 8001064:	24000330 	.word	0x24000330
 8001068:	08014a58 	.word	0x08014a58
 800106c:	08014a68 	.word	0x08014a68
 8001070:	08014a74 	.word	0x08014a74
 8001074:	08014a84 	.word	0x08014a84
 8001078:	08014a94 	.word	0x08014a94
 800107c:	08014aa4 	.word	0x08014aa4

08001080 <printADC12data>:

//Print measured ADC1 and ADC2 data on UART3
void printADC12data(void)
{
 8001080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001082:	b0f7      	sub	sp, #476	@ 0x1dc
 8001084:	af10      	add	r7, sp, #64	@ 0x40
	char *p_text[2*ADC12_NO_CHANNELS];
	float result[2*ADC12_NO_CHANNELS];

	if (debug == 1)
 8001086:	4ba0      	ldr	r3, [pc, #640]	@ (8001308 <printADC12data+0x288>)
 8001088:	881b      	ldrh	r3, [r3, #0]
 800108a:	2b01      	cmp	r3, #1
 800108c:	f040 8136 	bne.w	80012fc <printADC12data+0x27c>
	{
		printCR();
 8001090:	f7ff fb7a 	bl	8000788 <printCR>
		printNumber("No data: ", sADC.nADC12Read, 1);
 8001094:	4b9d      	ldr	r3, [pc, #628]	@ (800130c <printADC12data+0x28c>)
 8001096:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
 800109a:	b29b      	uxth	r3, r3
 800109c:	2201      	movs	r2, #1
 800109e:	4619      	mov	r1, r3
 80010a0:	489b      	ldr	r0, [pc, #620]	@ (8001310 <printADC12data+0x290>)
 80010a2:	f7ff fbc3 	bl	800082c <printNumber>
		for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i++)
 80010a6:	2300      	movs	r3, #0
 80010a8:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 80010ac:	e119      	b.n	80012e2 <printADC12data+0x262>
		{
			int ii = i % (2*ADC12_NO_CHANNELS);
 80010ae:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80010b2:	4b98      	ldr	r3, [pc, #608]	@ (8001314 <printADC12data+0x294>)
 80010b4:	fb83 3102 	smull	r3, r1, r3, r2
 80010b8:	17d3      	asrs	r3, r2, #31
 80010ba:	1ac9      	subs	r1, r1, r3
 80010bc:	460b      	mov	r3, r1
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	440b      	add	r3, r1
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
			result[ii] = convertADC12data(i, &p_text[ii]);
 80010ca:	f8d7 0194 	ldr.w	r0, [r7, #404]	@ 0x194
 80010ce:	f507 72bc 	add.w	r2, r7, #376	@ 0x178
 80010d2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	4413      	add	r3, r2
 80010da:	4619      	mov	r1, r3
 80010dc:	f7ff fe70 	bl	8000dc0 <convertADC12data>
 80010e0:	eef0 7a40 	vmov.f32	s15, s0
 80010e4:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80010ee:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80010f2:	4413      	add	r3, r2
 80010f4:	3b38      	subs	r3, #56	@ 0x38
 80010f6:	edc3 7a00 	vstr	s15, [r3]
			char text[300];
			if (ii == 5)
 80010fa:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80010fe:	2b05      	cmp	r3, #5
 8001100:	f040 80ea 	bne.w	80012d8 <printADC12data+0x258>
			{
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001104:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001108:	4a82      	ldr	r2, [pc, #520]	@ (8001314 <printADC12data+0x294>)
 800110a:	fb82 1203 	smull	r1, r2, r2, r3
 800110e:	17db      	asrs	r3, r3, #31
 8001110:	eba2 0c03 	sub.w	ip, r2, r3
						p_text[ii-5],                     sADC.adc12_data[i-5],
 8001114:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001118:	3b05      	subs	r3, #5
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8001120:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001124:	4413      	add	r3, r2
 8001126:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800112a:	62fb      	str	r3, [r7, #44]	@ 0x2c
						p_text[ii-5],                     sADC.adc12_data[i-5],
 800112c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001130:	3b05      	subs	r3, #5
 8001132:	4a76      	ldr	r2, [pc, #472]	@ (800130c <printADC12data+0x28c>)
 8001134:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001138:	62bb      	str	r3, [r7, #40]	@ 0x28
						p_text[ii-4], (int) result[ii-4], sADC.adc12_data[i-4],
 800113a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800113e:	3b04      	subs	r3, #4
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 8001146:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800114a:	18d3      	adds	r3, r2, r3
 800114c:	f853 5c20 	ldr.w	r5, [r3, #-32]
						p_text[ii-4], (int) result[ii-4], sADC.adc12_data[i-4],
 8001150:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001154:	3b04      	subs	r3, #4
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 800115c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001160:	18d3      	adds	r3, r2, r3
 8001162:	3b38      	subs	r3, #56	@ 0x38
 8001164:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001168:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800116c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
						p_text[ii-4], (int) result[ii-4], sADC.adc12_data[i-4],
 8001170:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001174:	3b04      	subs	r3, #4
 8001176:	4a65      	ldr	r2, [pc, #404]	@ (800130c <printADC12data+0x28c>)
 8001178:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 800117c:	623b      	str	r3, [r7, #32]
						p_text[ii-3], (int) result[ii-3], sADC.adc12_data[i-3],
 800117e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001182:	3b03      	subs	r3, #3
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 800118a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800118e:	18d3      	adds	r3, r2, r3
 8001190:	f853 6c20 	ldr.w	r6, [r3, #-32]
						p_text[ii-3], (int) result[ii-3], sADC.adc12_data[i-3],
 8001194:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001198:	3b03      	subs	r3, #3
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 80011a0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011a4:	18d3      	adds	r3, r2, r3
 80011a6:	3b38      	subs	r3, #56	@ 0x38
 80011a8:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80011ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b0:	edc7 7a07 	vstr	s15, [r7, #28]
						p_text[ii-3], (int) result[ii-3], sADC.adc12_data[i-3],
 80011b4:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80011b8:	3b03      	subs	r3, #3
 80011ba:	4a54      	ldr	r2, [pc, #336]	@ (800130c <printADC12data+0x28c>)
 80011bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80011c0:	61bb      	str	r3, [r7, #24]
						p_text[ii-2], (int) result[ii-2], sADC.adc12_data[i-2],
 80011c2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80011c6:	3b02      	subs	r3, #2
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 80011ce:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011d2:	18d3      	adds	r3, r2, r3
 80011d4:	f853 2c20 	ldr.w	r2, [r3, #-32]
 80011d8:	617a      	str	r2, [r7, #20]
						p_text[ii-2], (int) result[ii-2], sADC.adc12_data[i-2],
 80011da:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80011de:	3b02      	subs	r3, #2
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	f503 71b4 	add.w	r1, r3, #360	@ 0x168
 80011e6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011ea:	18cb      	adds	r3, r1, r3
 80011ec:	3b38      	subs	r3, #56	@ 0x38
 80011ee:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80011f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011f6:	edc7 7a04 	vstr	s15, [r7, #16]
						p_text[ii-2], (int) result[ii-2], sADC.adc12_data[i-2],
 80011fa:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80011fe:	3b02      	subs	r3, #2
 8001200:	4a42      	ldr	r2, [pc, #264]	@ (800130c <printADC12data+0x28c>)
 8001202:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001206:	60fb      	str	r3, [r7, #12]
						p_text[ii-1], (int) result[ii-1], sADC.adc12_data[i-1],
 8001208:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800120c:	3b01      	subs	r3, #1
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	f503 71b4 	add.w	r1, r3, #360	@ 0x168
 8001214:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001218:	18cb      	adds	r3, r1, r3
 800121a:	f853 1c20 	ldr.w	r1, [r3, #-32]
 800121e:	60b9      	str	r1, [r7, #8]
						p_text[ii-1], (int) result[ii-1], sADC.adc12_data[i-1],
 8001220:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001224:	3b01      	subs	r3, #1
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	f503 70b4 	add.w	r0, r3, #360	@ 0x168
 800122c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001230:	18c3      	adds	r3, r0, r3
 8001232:	3b38      	subs	r3, #56	@ 0x38
 8001234:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001238:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800123c:	edc7 7a01 	vstr	s15, [r7, #4]
						p_text[ii-1], (int) result[ii-1], sADC.adc12_data[i-1],
 8001240:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001244:	1e5a      	subs	r2, r3, #1
 8001246:	4b31      	ldr	r3, [pc, #196]	@ (800130c <printADC12data+0x28c>)
 8001248:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 800124c:	603b      	str	r3, [r7, #0]
 800124e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	f503 70b4 	add.w	r0, r3, #360	@ 0x168
 8001258:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800125c:	18c3      	adds	r3, r0, r3
 800125e:	f853 1c20 	ldr.w	r1, [r3, #-32]
						p_text[ii],   (int) result[ii],   sADC.adc12_data[i]);
 8001262:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	f503 70b4 	add.w	r0, r3, #360	@ 0x168
 800126c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001270:	18c3      	adds	r3, r0, r3
 8001272:	3b38      	subs	r3, #56	@ 0x38
 8001274:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001278:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800127c:	ee17 4a90 	vmov	r4, s15
						p_text[ii],   (int) result[ii],   sADC.adc12_data[i]);
 8001280:	4a22      	ldr	r2, [pc, #136]	@ (800130c <printADC12data+0x28c>)
 8001282:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001286:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 800128a:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 800128e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8001290:	940e      	str	r4, [sp, #56]	@ 0x38
 8001292:	910d      	str	r1, [sp, #52]	@ 0x34
 8001294:	683c      	ldr	r4, [r7, #0]
 8001296:	940c      	str	r4, [sp, #48]	@ 0x30
 8001298:	687c      	ldr	r4, [r7, #4]
 800129a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800129c:	68b9      	ldr	r1, [r7, #8]
 800129e:	910a      	str	r1, [sp, #40]	@ 0x28
 80012a0:	68f9      	ldr	r1, [r7, #12]
 80012a2:	9109      	str	r1, [sp, #36]	@ 0x24
 80012a4:	6939      	ldr	r1, [r7, #16]
 80012a6:	9108      	str	r1, [sp, #32]
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	9207      	str	r2, [sp, #28]
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	9206      	str	r2, [sp, #24]
 80012b0:	69fa      	ldr	r2, [r7, #28]
 80012b2:	9205      	str	r2, [sp, #20]
 80012b4:	9604      	str	r6, [sp, #16]
 80012b6:	6a3a      	ldr	r2, [r7, #32]
 80012b8:	9203      	str	r2, [sp, #12]
 80012ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012bc:	9202      	str	r2, [sp, #8]
 80012be:	9501      	str	r5, [sp, #4]
 80012c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012c2:	9200      	str	r2, [sp, #0]
 80012c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012c6:	4662      	mov	r2, ip
 80012c8:	4913      	ldr	r1, [pc, #76]	@ (8001318 <printADC12data+0x298>)
 80012ca:	f011 fa83 	bl	80127d4 <siprintf>
				printString(text);
 80012ce:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff fa68 	bl	80007a8 <printString>
		for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i++)
 80012d8:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80012dc:	3301      	adds	r3, #1
 80012de:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 80012e2:	4b0a      	ldr	r3, [pc, #40]	@ (800130c <printADC12data+0x28c>)
 80012e4:	f8d3 2708 	ldr.w	r2, [r3, #1800]	@ 0x708
 80012e8:	4613      	mov	r3, r2
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	4413      	add	r3, r2
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	461a      	mov	r2, r3
 80012f2:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80012f6:	429a      	cmp	r2, r3
 80012f8:	f63f aed9 	bhi.w	80010ae <printADC12data+0x2e>
			}
		}
	}
}
 80012fc:	bf00      	nop
 80012fe:	f507 77ce 	add.w	r7, r7, #412	@ 0x19c
 8001302:	46bd      	mov	sp, r7
 8001304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001306:	bf00      	nop
 8001308:	24000000 	.word	0x24000000
 800130c:	24000330 	.word	0x24000330
 8001310:	08014ab4 	.word	0x08014ab4
 8001314:	2aaaaaab 	.word	0x2aaaaaab
 8001318:	08014ac0 	.word	0x08014ac0

0800131c <freqCorrection>:

//Calculate frequency correction
//Returns 1 if a valid frequency correction is calculated, otherwise 0
uint8_t freqCorrection(int16_t *freqCorr)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08e      	sub	sp, #56	@ 0x38
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	int start_index=0;
 8001324:	2300      	movs	r3, #0
 8001326:	637b      	str	r3, [r7, #52]	@ 0x34
	int stop_index=0;
 8001328:	2300      	movs	r3, #0
 800132a:	633b      	str	r3, [r7, #48]	@ 0x30
	int number_of_lows=0;
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
	int lowDetected = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int highDetected = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	62bb      	str	r3, [r7, #40]	@ 0x28
	float min = 100000;
 8001338:	4b54      	ldr	r3, [pc, #336]	@ (800148c <freqCorrection+0x170>)
 800133a:	627b      	str	r3, [r7, #36]	@ 0x24
	float max = -100000;
 800133c:	4b54      	ldr	r3, [pc, #336]	@ (8001490 <freqCorrection+0x174>)
 800133e:	623b      	str	r3, [r7, #32]
	float norm = 0;
 8001340:	f04f 0300 	mov.w	r3, #0
 8001344:	61fb      	str	r3, [r7, #28]

	//Find when MOSFET branch is on (start and stop time)
	//Find minimum and maximum value of bridge current
 	for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i=i+6)
 8001346:	2300      	movs	r3, #0
 8001348:	61bb      	str	r3, [r7, #24]
 800134a:	e041      	b.n	80013d0 <freqCorrection+0xb4>
	{
		// Find minimum of bridge current
		float data = convertADC12data(i+ADC2_Is, NULL);
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	3301      	adds	r3, #1
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff fd34 	bl	8000dc0 <convertADC12data>
 8001358:	ed87 0a02 	vstr	s0, [r7, #8]
		if (data < min)
 800135c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001360:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001364:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800136c:	d501      	bpl.n	8001372 <freqCorrection+0x56>
		{
			min = data;
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	627b      	str	r3, [r7, #36]	@ 0x24
			//HAL_UART_Transmit(huart3, min);
			//printCR();
		}
		// Find maximum
		if (data > max)
 8001372:	ed97 7a02 	vldr	s14, [r7, #8]
 8001376:	edd7 7a08 	vldr	s15, [r7, #32]
 800137a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800137e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001382:	dd01      	ble.n	8001388 <freqCorrection+0x6c>
		{
			max = data;
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	623b      	str	r3, [r7, #32]
		}
		// Check for low
		if (!lowDetected && sADC.adc12_data[i+ADC1_TIM1_CH1] < 500)
 8001388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800138a:	2b00      	cmp	r3, #0
 800138c:	d10a      	bne.n	80013a4 <freqCorrection+0x88>
 800138e:	4a41      	ldr	r2, [pc, #260]	@ (8001494 <freqCorrection+0x178>)
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001396:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800139a:	d203      	bcs.n	80013a4 <freqCorrection+0x88>
		{
			//First low detected
			start_index = i; 		// Store index of first low detected
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	637b      	str	r3, [r7, #52]	@ 0x34
			lowDetected = 1;
 80013a0:	2301      	movs	r3, #1
 80013a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
		}
		//Check for high
		if (!highDetected && lowDetected && sADC.adc12_data[i+ADC1_TIM1_CH1] > 65000)
 80013a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d10f      	bne.n	80013ca <freqCorrection+0xae>
 80013aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d00c      	beq.n	80013ca <freqCorrection+0xae>
 80013b0:	4a38      	ldr	r2, [pc, #224]	@ (8001494 <freqCorrection+0x178>)
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013b8:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 80013bc:	4293      	cmp	r3, r2
 80013be:	d904      	bls.n	80013ca <freqCorrection+0xae>
		{
			//High after first low detected
			stop_index = i-6;		// Store index of last low
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	3b06      	subs	r3, #6
 80013c4:	633b      	str	r3, [r7, #48]	@ 0x30
			highDetected = 1;
 80013c6:	2301      	movs	r3, #1
 80013c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 	for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i=i+6)
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	3306      	adds	r3, #6
 80013ce:	61bb      	str	r3, [r7, #24]
 80013d0:	4b30      	ldr	r3, [pc, #192]	@ (8001494 <freqCorrection+0x178>)
 80013d2:	f8d3 2708 	ldr.w	r2, [r3, #1800]	@ 0x708
 80013d6:	4613      	mov	r3, r2
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	4413      	add	r3, r2
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	461a      	mov	r2, r3
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d8b2      	bhi.n	800134c <freqCorrection+0x30>
		}
	}

	// Check maximum and minimum difference
	norm = max - min;
 80013e6:	ed97 7a08 	vldr	s14, [r7, #32]
 80013ea:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80013ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013f2:	edc7 7a07 	vstr	s15, [r7, #28]
	if (norm < 10)
 80013f6:	edd7 7a07 	vldr	s15, [r7, #28]
 80013fa:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80013fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001406:	d501      	bpl.n	800140c <freqCorrection+0xf0>
		norm = max;
 8001408:	6a3b      	ldr	r3, [r7, #32]
 800140a:	61fb      	str	r3, [r7, #28]

	number_of_lows = (stop_index - start_index)/6 + 1;
 800140c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800140e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	4a21      	ldr	r2, [pc, #132]	@ (8001498 <freqCorrection+0x17c>)
 8001414:	fb82 1203 	smull	r1, r2, r2, r3
 8001418:	17db      	asrs	r3, r3, #31
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	3301      	adds	r3, #1
 800141e:	617b      	str	r3, [r7, #20]
	if (lowDetected && highDetected && (number_of_lows >= 5))
 8001420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001422:	2b00      	cmp	r3, #0
 8001424:	d02c      	beq.n	8001480 <freqCorrection+0x164>
 8001426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001428:	2b00      	cmp	r3, #0
 800142a:	d029      	beq.n	8001480 <freqCorrection+0x164>
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	2b04      	cmp	r3, #4
 8001430:	dd26      	ble.n	8001480 <freqCorrection+0x164>
	{
		float upper = convertADC12data(start_index+ADC2_Is+6, NULL);
 8001432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001434:	3307      	adds	r3, #7
 8001436:	2100      	movs	r1, #0
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff fcc1 	bl	8000dc0 <convertADC12data>
 800143e:	ed87 0a04 	vstr	s0, [r7, #16]
		float lower = convertADC12data(stop_index+ADC2_Is-6, NULL);
 8001442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001444:	3b05      	subs	r3, #5
 8001446:	2100      	movs	r1, #0
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff fcb9 	bl	8000dc0 <convertADC12data>
 800144e:	ed87 0a03 	vstr	s0, [r7, #12]
		*freqCorr = (int16_t) 1000*(upper - lower)/norm;
 8001452:	ed97 7a04 	vldr	s14, [r7, #16]
 8001456:	edd7 7a03 	vldr	s15, [r7, #12]
 800145a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800145e:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800149c <freqCorrection+0x180>
 8001462:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001466:	ed97 7a07 	vldr	s14, [r7, #28]
 800146a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800146e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001472:	ee17 3a90 	vmov	r3, s15
 8001476:	b21a      	sxth	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	801a      	strh	r2, [r3, #0]
		return(1);
 800147c:	2301      	movs	r3, #1
 800147e:	e000      	b.n	8001482 <freqCorrection+0x166>
	}
	else
		return(0);
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3738      	adds	r7, #56	@ 0x38
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	47c35000 	.word	0x47c35000
 8001490:	c7c35000 	.word	0xc7c35000
 8001494:	24000330 	.word	0x24000330
 8001498:	2aaaaaab 	.word	0x2aaaaaab
 800149c:	447a0000 	.word	0x447a0000

080014a0 <voltageCorrection>:


//Calculate voltage correction base on a desired RMS voltage
//Returns 1 if a valid frequency correction is calculated, otherwise 0
uint8_t voltageCorrection(int16_t Vdesired, int16_t *vCorr)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b088      	sub	sp, #32
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	6039      	str	r1, [r7, #0]
 80014aa:	80fb      	strh	r3, [r7, #6]
	float max = -100000;
 80014ac:	4b32      	ldr	r3, [pc, #200]	@ (8001578 <voltageCorrection+0xd8>)
 80014ae:	61fb      	str	r3, [r7, #28]

	//Find maximum value of bridge voltage
	for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i=i+6)
 80014b0:	2300      	movs	r3, #0
 80014b2:	61bb      	str	r3, [r7, #24]
 80014b4:	e031      	b.n	800151a <voltageCorrection+0x7a>
	{
		// Find minimum of bridge current
		float VL1 = convertADC12data(i+ADC1_VplaL1, NULL);
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	3304      	adds	r3, #4
 80014ba:	2100      	movs	r1, #0
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fc7f 	bl	8000dc0 <convertADC12data>
 80014c2:	ed87 0a05 	vstr	s0, [r7, #20]
		float VL2 = convertADC12data(i+ADC2_VplaL2, NULL);
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	3305      	adds	r3, #5
 80014ca:	2100      	movs	r1, #0
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff fc77 	bl	8000dc0 <convertADC12data>
 80014d2:	ed87 0a04 	vstr	s0, [r7, #16]
		float VL = VL1 - VL2;
 80014d6:	ed97 7a05 	vldr	s14, [r7, #20]
 80014da:	edd7 7a04 	vldr	s15, [r7, #16]
 80014de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014e2:	edc7 7a03 	vstr	s15, [r7, #12]
		VL = sqrt(2) * VL;
 80014e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80014ea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014ee:	ed9f 6b20 	vldr	d6, [pc, #128]	@ 8001570 <voltageCorrection+0xd0>
 80014f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80014f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014fa:	edc7 7a03 	vstr	s15, [r7, #12]
		if (VL > max)
 80014fe:	ed97 7a03 	vldr	s14, [r7, #12]
 8001502:	edd7 7a07 	vldr	s15, [r7, #28]
 8001506:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800150a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800150e:	dd01      	ble.n	8001514 <voltageCorrection+0x74>
		{
			max = VL;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	61fb      	str	r3, [r7, #28]
	for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i=i+6)
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	3306      	adds	r3, #6
 8001518:	61bb      	str	r3, [r7, #24]
 800151a:	4b18      	ldr	r3, [pc, #96]	@ (800157c <voltageCorrection+0xdc>)
 800151c:	f8d3 2708 	ldr.w	r2, [r3, #1800]	@ 0x708
 8001520:	4613      	mov	r3, r2
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	4413      	add	r3, r2
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	461a      	mov	r2, r3
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	429a      	cmp	r2, r3
 800152e:	d8c2      	bhi.n	80014b6 <voltageCorrection+0x16>
		}
	}
	*vCorr = (int16_t) (Vdesired-max)/100;
 8001530:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001534:	ee07 3a90 	vmov	s15, r3
 8001538:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800153c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001540:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001544:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001548:	ee17 3a90 	vmov	r3, s15
 800154c:	b21b      	sxth	r3, r3
 800154e:	4a0c      	ldr	r2, [pc, #48]	@ (8001580 <voltageCorrection+0xe0>)
 8001550:	fb82 1203 	smull	r1, r2, r2, r3
 8001554:	1152      	asrs	r2, r2, #5
 8001556:	17db      	asrs	r3, r3, #31
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	b21a      	sxth	r2, r3
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	801a      	strh	r2, [r3, #0]
	return 1;
 8001560:	2301      	movs	r3, #1
}
 8001562:	4618      	mov	r0, r3
 8001564:	3720      	adds	r7, #32
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	f3af 8000 	nop.w
 8001570:	667f3bcd 	.word	0x667f3bcd
 8001574:	3ff6a09e 	.word	0x3ff6a09e
 8001578:	c7c35000 	.word	0xc7c35000
 800157c:	24000330 	.word	0x24000330
 8001580:	51eb851f 	.word	0x51eb851f
 8001584:	00000000 	.word	0x00000000

08001588 <measureBridgePlasmaADC12>:


// Measure bridge current, plasma voltage, and bridge current using ADC1 and ADC2 for one period
// After the measurement is done the function doneMeasuringBridgePlasmaADC12 is called
void measureBridgePlasmaADC12(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_SET);

	//Calculate number of reads needed for one period
	sADC.nADC12Read = ((uint32_t) ((1/(float) sHbridge.frequency)/ADC12_GROUP_READTIME));//* 2; //Multiplied by two to grab two periods
 800158e:	4b24      	ldr	r3, [pc, #144]	@ (8001620 <measureBridgePlasmaADC12+0x98>)
 8001590:	885b      	ldrh	r3, [r3, #2]
 8001592:	ee07 3a90 	vmov	s15, r3
 8001596:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800159a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800159e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015a2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80015a6:	ed9f 5b1c 	vldr	d5, [pc, #112]	@ 8001618 <measureBridgePlasmaADC12+0x90>
 80015aa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80015ae:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80015b2:	ee17 2a90 	vmov	r2, s15
 80015b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001624 <measureBridgePlasmaADC12+0x9c>)
 80015b8:	f8c3 2708 	str.w	r2, [r3, #1800]	@ 0x708
	sADC.nADC12Read +=2; //Add to see the start of next period
 80015bc:	4b19      	ldr	r3, [pc, #100]	@ (8001624 <measureBridgePlasmaADC12+0x9c>)
 80015be:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
 80015c2:	3302      	adds	r3, #2
 80015c4:	4a17      	ldr	r2, [pc, #92]	@ (8001624 <measureBridgePlasmaADC12+0x9c>)
 80015c6:	f8c2 3708 	str.w	r3, [r2, #1800]	@ 0x708

	//Start ADC1 and ADC2 measurements
	if (sADC.nADC12Read <= ADC12_MAX_GROUP)
 80015ca:	4b16      	ldr	r3, [pc, #88]	@ (8001624 <measureBridgePlasmaADC12+0x9c>)
 80015cc:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
 80015d0:	2b64      	cmp	r3, #100	@ 0x64
 80015d2:	d81a      	bhi.n	800160a <measureBridgePlasmaADC12+0x82>
	{
		//Calculate the number DMA transfers needed
		uint32_t noDMARequests = ADC12_NO_CHANNELS*sADC.nADC12Read;
 80015d4:	4b13      	ldr	r3, [pc, #76]	@ (8001624 <measureBridgePlasmaADC12+0x9c>)
 80015d6:	f8d3 2708 	ldr.w	r2, [r3, #1800]	@ 0x708
 80015da:	4613      	mov	r3, r2
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	4413      	add	r3, r2
 80015e0:	607b      	str	r3, [r7, #4]

		// Start reading ADC1 and ADC2
		sADC.adc12_reading = 1;
 80015e2:	4b10      	ldr	r3, [pc, #64]	@ (8001624 <measureBridgePlasmaADC12+0x9c>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	f8a3 270e 	strh.w	r2, [r3, #1806]	@ 0x70e

		//This will start the ADC1 and ADC2 measurements when H-BRIDGE_B_CTRL (TIM1_CH1) goes from 0 to 1.
		//When the measurements are done doneMeasuringBridgePlasmaADC12 is called.
		HAL_StatusTypeDef HALresp = HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t *) sADC.adc12_data, noDMARequests);
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	490d      	ldr	r1, [pc, #52]	@ (8001624 <measureBridgePlasmaADC12+0x9c>)
 80015ee:	480e      	ldr	r0, [pc, #56]	@ (8001628 <measureBridgePlasmaADC12+0xa0>)
 80015f0:	f006 f9ae 	bl	8007950 <HAL_ADCEx_MultiModeStart_DMA>
 80015f4:	4603      	mov	r3, r0
 80015f6:	70fb      	strb	r3, [r7, #3]
		if (HALresp != HAL_OK)
 80015f8:	78fb      	ldrb	r3, [r7, #3]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d008      	beq.n	8001610 <measureBridgePlasmaADC12+0x88>
		{
			printHALErrorStatus(HALresp, "measureBridgePlasmaADC12");
 80015fe:	78fb      	ldrb	r3, [r7, #3]
 8001600:	490a      	ldr	r1, [pc, #40]	@ (800162c <measureBridgePlasmaADC12+0xa4>)
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff f958 	bl	80008b8 <printHALErrorStatus>
	}
	else
		printString("** ERROR ** pADC.nRead > ADC12_MAX_GROUP");

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
}
 8001608:	e002      	b.n	8001610 <measureBridgePlasmaADC12+0x88>
		printString("** ERROR ** pADC.nRead > ADC12_MAX_GROUP");
 800160a:	4809      	ldr	r0, [pc, #36]	@ (8001630 <measureBridgePlasmaADC12+0xa8>)
 800160c:	f7ff f8cc 	bl	80007a8 <printString>
}
 8001610:	bf00      	nop
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	a0b5ed8d 	.word	0xa0b5ed8d
 800161c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001620:	2400001c 	.word	0x2400001c
 8001624:	24000330 	.word	0x24000330
 8001628:	24000a88 	.word	0x24000a88
 800162c:	08014b18 	.word	0x08014b18
 8001630:	08014b34 	.word	0x08014b34

08001634 <doneMeasuringBridgePlasmaADC12>:

// Done measuring bridge current, plasma voltage, and bridge current
void doneMeasuringBridgePlasmaADC12(uint32_t errorCode)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	static uint32_t count = 0;

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_SET);

	count++;
 800163c:	4b22      	ldr	r3, [pc, #136]	@ (80016c8 <doneMeasuringBridgePlasmaADC12+0x94>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	3301      	adds	r3, #1
 8001642:	4a21      	ldr	r2, [pc, #132]	@ (80016c8 <doneMeasuringBridgePlasmaADC12+0x94>)
 8001644:	6013      	str	r3, [r2, #0]

	// Done reading ADC1 and ADC2
	sADC.adc12_reading = 0;
 8001646:	4b21      	ldr	r3, [pc, #132]	@ (80016cc <doneMeasuringBridgePlasmaADC12+0x98>)
 8001648:	2200      	movs	r2, #0
 800164a:	f8a3 270e 	strh.w	r2, [r3, #1806]	@ 0x70e

	if (errorCode == HAL_ADC_ERROR_NONE)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d128      	bne.n	80016a6 <doneMeasuringBridgePlasmaADC12+0x72>
	{
		if (sFlashConfig.mode == RUN_MODE)
 8001654:	4b1e      	ldr	r3, [pc, #120]	@ (80016d0 <doneMeasuringBridgePlasmaADC12+0x9c>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d12b      	bne.n	80016b4 <doneMeasuringBridgePlasmaADC12+0x80>

			//TODO Check plasma voltage VplaL1 and VplaL2 (To high? Not present?)
			//TODO Calculate plasma voltage Vrms, Vmax and Vmin

			//Adjust H-bridge frequency
			if (powerStatus == V500_ON)
 800165c:	4b1d      	ldr	r3, [pc, #116]	@ (80016d4 <doneMeasuringBridgePlasmaADC12+0xa0>)
 800165e:	881b      	ldrh	r3, [r3, #0]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d127      	bne.n	80016b4 <doneMeasuringBridgePlasmaADC12+0x80>
			{
				//Adjust H-bridge frequency
				int16_t freqCorr = 0;
 8001664:	2300      	movs	r3, #0
 8001666:	81fb      	strh	r3, [r7, #14]
				if (freqCorrection(&freqCorr))
 8001668:	f107 030e 	add.w	r3, r7, #14
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fe55 	bl	800131c <freqCorrection>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d008      	beq.n	800168a <doneMeasuringBridgePlasmaADC12+0x56>
					sHbridge.frequency += freqCorr;
 8001678:	4b17      	ldr	r3, [pc, #92]	@ (80016d8 <doneMeasuringBridgePlasmaADC12+0xa4>)
 800167a:	885a      	ldrh	r2, [r3, #2]
 800167c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001680:	b29b      	uxth	r3, r3
 8001682:	4413      	add	r3, r2
 8001684:	b29a      	uxth	r2, r3
 8001686:	4b14      	ldr	r3, [pc, #80]	@ (80016d8 <doneMeasuringBridgePlasmaADC12+0xa4>)
 8001688:	805a      	strh	r2, [r3, #2]
				//TODO Adjust H-bridge dead time
				//sHbridge.deadtime = new setting;
				programHbridge();
 800168a:	f7ff f9b5 	bl	80009f8 <programHbridge>
					HAL_Delay(1);	//Allow H-bridge to settle with new settings
 800168e:	2001      	movs	r0, #1
 8001690:	f003 fbbe 	bl	8004e10 <HAL_Delay>
				if (count % 2048)
 8001694:	4b0c      	ldr	r3, [pc, #48]	@ (80016c8 <doneMeasuringBridgePlasmaADC12+0x94>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800169c:	2b00      	cmp	r3, #0
 800169e:	d009      	beq.n	80016b4 <doneMeasuringBridgePlasmaADC12+0x80>
					printHbridgeData();
 80016a0:	f7ff f980 	bl	80009a4 <printHbridgeData>
 80016a4:	e006      	b.n	80016b4 <doneMeasuringBridgePlasmaADC12+0x80>
			}
		}
	}
	else
	{
		printNumber("ADC12 Error Code: ", errorCode, 1);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	2201      	movs	r2, #1
 80016ac:	4619      	mov	r1, r3
 80016ae:	480b      	ldr	r0, [pc, #44]	@ (80016dc <doneMeasuringBridgePlasmaADC12+0xa8>)
 80016b0:	f7ff f8bc 	bl	800082c <printNumber>
	}

	//Measure ADC3 voltages
	if (sFlashConfig.mode == RUN_MODE)
 80016b4:	4b06      	ldr	r3, [pc, #24]	@ (80016d0 <doneMeasuringBridgePlasmaADC12+0x9c>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d101      	bne.n	80016c0 <doneMeasuringBridgePlasmaADC12+0x8c>
		measureVoltagesTemperaturesADC3();
 80016bc:	f000 fb14 	bl	8001ce8 <measureVoltagesTemperaturesADC3>

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
}
 80016c0:	bf00      	nop
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	24000a4c 	.word	0x24000a4c
 80016cc:	24000330 	.word	0x24000330
 80016d0:	24000a48 	.word	0x24000a48
 80016d4:	24000a44 	.word	0x24000a44
 80016d8:	2400001c 	.word	0x2400001c
 80016dc:	08014b60 	.word	0x08014b60

080016e0 <printHbridgeDatalogging>:
// Print H-bridge data on UART3 formatted for CSV datalogging
// Prints: Hbridge Freq, Deadtime, Is, VplaL1, VplaL2, VbrS1, VbriS2
// Parameter:
//		startTime: denotes the system time when ADC measurement was started
static void printHbridgeDatalogging(uint32_t startTime, uint32_t stopTime)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	f5ad 6d8a 	sub.w	sp, sp, #1104	@ 0x450
 80016e6:	af0c      	add	r7, sp, #48	@ 0x30
 80016e8:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80016ec:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 80016f0:	6018      	str	r0, [r3, #0]
 80016f2:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 80016f6:	f5a3 6384 	sub.w	r3, r3, #1056	@ 0x420
 80016fa:	6019      	str	r1, [r3, #0]
	char s_output[1000];
	//Convert from ms to sec: time elapsed / number of adc reads
	//This assumes that the time taken for each adc read is approx. equal
	double interval = (double) (stopTime - startTime) / (double) sADC.nADC12Read;
 80016fc:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8001700:	f5a3 6284 	sub.w	r2, r3, #1056	@ 0x420
 8001704:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8001708:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 800170c:	6812      	ldr	r2, [r2, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	ee07 3a90 	vmov	s15, r3
 8001716:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 800171a:	4b5c      	ldr	r3, [pc, #368]	@ (800188c <printHbridgeDatalogging+0x1ac>)
 800171c:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
 8001720:	ee07 3a90 	vmov	s15, r3
 8001724:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001728:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800172c:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001730:	ed83 7b00 	vstr	d7, [r3]

	for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i=i+6)
 8001734:	2300      	movs	r3, #0
 8001736:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
 800173a:	e093      	b.n	8001864 <printHbridgeDatalogging+0x184>
		{
			//calculate time of current measurement (start time + ADC sample rate)
			//TODO: This is likely not exactly accurate. Better way to record time of measurement accounting for conversion/DMA time?
			double measTime = startTime + (interval * i);
 800173c:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8001740:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	ee07 3a90 	vmov	s15, r3
 800174a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800174e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8001752:	ee07 3a90 	vmov	s15, r3
 8001756:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800175a:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800175e:	ed93 7b00 	vldr	d7, [r3]
 8001762:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001766:	ee36 7b07 	vadd.f64	d7, d6, d7
 800176a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 800176e:	ed83 7b00 	vstr	d7, [r3]

			float Is = convertADC12data(i+ADC2_Is, NULL);
 8001772:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8001776:	3301      	adds	r3, #1
 8001778:	2100      	movs	r1, #0
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fb20 	bl	8000dc0 <convertADC12data>
 8001780:	f207 4304 	addw	r3, r7, #1028	@ 0x404
 8001784:	ed83 0a00 	vstr	s0, [r3]
			float VplaL1 = convertADC12data(i+ADC1_VplaL1, NULL);
 8001788:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 800178c:	3304      	adds	r3, #4
 800178e:	2100      	movs	r1, #0
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff fb15 	bl	8000dc0 <convertADC12data>
 8001796:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 800179a:	ed83 0a00 	vstr	s0, [r3]
			float VplaL2 = convertADC12data(i+ADC2_VplaL2, NULL);
 800179e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 80017a2:	3305      	adds	r3, #5
 80017a4:	2100      	movs	r1, #0
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff fb0a 	bl	8000dc0 <convertADC12data>
 80017ac:	ed87 0aff 	vstr	s0, [r7, #1020]	@ 0x3fc
			float VbriS1 = convertADC12data(i+ADC1_VbriS1, NULL);
 80017b0:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 80017b4:	3302      	adds	r3, #2
 80017b6:	2100      	movs	r1, #0
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fb01 	bl	8000dc0 <convertADC12data>
 80017be:	ed87 0afe 	vstr	s0, [r7, #1016]	@ 0x3f8
			float VbriS2 = convertADC12data(i+ADC2_VbriS2, NULL);
 80017c2:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 80017c6:	3303      	adds	r3, #3
 80017c8:	2100      	movs	r1, #0
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff faf8 	bl	8000dc0 <convertADC12data>
 80017d0:	ed87 0afd 	vstr	s0, [r7, #1012]	@ 0x3f4

			sprintf(s_output, "%.2lf,%u,%u,%f,%f,%f,%f,%f", measTime, sHbridge.frequency, sHbridge.deadtime,Is,VplaL1,VplaL2,VbriS1,VbriS2);
 80017d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001890 <printHbridgeDatalogging+0x1b0>)
 80017d6:	885b      	ldrh	r3, [r3, #2]
 80017d8:	461a      	mov	r2, r3
 80017da:	4b2d      	ldr	r3, [pc, #180]	@ (8001890 <printHbridgeDatalogging+0x1b0>)
 80017dc:	889b      	ldrh	r3, [r3, #4]
 80017de:	f207 4104 	addw	r1, r7, #1028	@ 0x404
 80017e2:	edd1 7a00 	vldr	s15, [r1]
 80017e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017ea:	f507 6180 	add.w	r1, r7, #1024	@ 0x400
 80017ee:	edd1 6a00 	vldr	s13, [r1]
 80017f2:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80017f6:	edd7 5aff 	vldr	s11, [r7, #1020]	@ 0x3fc
 80017fa:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 80017fe:	edd7 4afe 	vldr	s9, [r7, #1016]	@ 0x3f8
 8001802:	eeb7 4ae4 	vcvt.f64.f32	d4, s9
 8001806:	edd7 3afd 	vldr	s7, [r7, #1012]	@ 0x3f4
 800180a:	eeb7 3ae3 	vcvt.f64.f32	d3, s7
 800180e:	f107 000c 	add.w	r0, r7, #12
 8001812:	ed8d 3b0a 	vstr	d3, [sp, #40]	@ 0x28
 8001816:	ed8d 4b08 	vstr	d4, [sp, #32]
 800181a:	ed8d 5b06 	vstr	d5, [sp, #24]
 800181e:	ed8d 6b04 	vstr	d6, [sp, #16]
 8001822:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001826:	9301      	str	r3, [sp, #4]
 8001828:	9200      	str	r2, [sp, #0]
 800182a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 800182e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001832:	4918      	ldr	r1, [pc, #96]	@ (8001894 <printHbridgeDatalogging+0x1b4>)
 8001834:	f010 ffce 	bl	80127d4 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t *) s_output, strlen(s_output), 1000);
 8001838:	f107 030c 	add.w	r3, r7, #12
 800183c:	4618      	mov	r0, r3
 800183e:	f7fe fdc7 	bl	80003d0 <strlen>
 8001842:	4603      	mov	r3, r0
 8001844:	b29a      	uxth	r2, r3
 8001846:	f107 010c 	add.w	r1, r7, #12
 800184a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800184e:	4812      	ldr	r0, [pc, #72]	@ (8001898 <printHbridgeDatalogging+0x1b8>)
 8001850:	f00e ff03 	bl	801065a <HAL_UART_Transmit>
			printString("\n");
 8001854:	4811      	ldr	r0, [pc, #68]	@ (800189c <printHbridgeDatalogging+0x1bc>)
 8001856:	f7fe ffa7 	bl	80007a8 <printString>
	for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i=i+6)
 800185a:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 800185e:	3306      	adds	r3, #6
 8001860:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
 8001864:	4b09      	ldr	r3, [pc, #36]	@ (800188c <printHbridgeDatalogging+0x1ac>)
 8001866:	f8d3 2708 	ldr.w	r2, [r3, #1800]	@ 0x708
 800186a:	4613      	mov	r3, r2
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	4413      	add	r3, r2
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	461a      	mov	r2, r3
 8001874:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8001878:	429a      	cmp	r2, r3
 800187a:	f63f af5f 	bhi.w	800173c <printHbridgeDatalogging+0x5c>
		}
}
 800187e:	bf00      	nop
 8001880:	bf00      	nop
 8001882:	f507 6784 	add.w	r7, r7, #1056	@ 0x420
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	24000330 	.word	0x24000330
 8001890:	2400001c 	.word	0x2400001c
 8001894:	08014b74 	.word	0x08014b74
 8001898:	24000e38 	.word	0x24000e38
 800189c:	08014b90 	.word	0x08014b90

080018a0 <autoFreqAdj>:

// Automatically Correct the Drive Frequency until user presses any key
void autoFreqAdj(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
	char input;


	//printString("\n\r%Press any key to exit"); //Commented out to allow for automated remote serial control (datalogging)

	printString("Time(us),Freq (Hz),Deadtime (%),Bridge I,VplaL1,VplaL2,VbriS1,VbriS2");
 80018a6:	482c      	ldr	r0, [pc, #176]	@ (8001958 <autoFreqAdj+0xb8>)
 80018a8:	f7fe ff7e 	bl	80007a8 <printString>
	printCR();
 80018ac:	f7fe ff6c 	bl	8000788 <printCR>

	//Start timer24 which is used to time when each ADC measurement is captured
	HAL_TIM_Base_Start(&htim24);
 80018b0:	482a      	ldr	r0, [pc, #168]	@ (800195c <autoFreqAdj+0xbc>)
 80018b2:	f00d f8f5 	bl	800eaa0 <HAL_TIM_Base_Start>


	while (!(HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 1) == HAL_OK))
 80018b6:	e041      	b.n	800193c <autoFreqAdj+0x9c>
	{
		uint32_t startTime = __HAL_TIM_GET_COUNTER(&htim24);//TIM24->CNT;
 80018b8:	4b28      	ldr	r3, [pc, #160]	@ (800195c <autoFreqAdj+0xbc>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018be:	60fb      	str	r3, [r7, #12]
		measureBridgePlasmaADC12();
 80018c0:	f7ff fe62 	bl	8001588 <measureBridgePlasmaADC12>
		//Wait until ADC3 reading is done
		while (sADC.adc12_reading);
 80018c4:	bf00      	nop
 80018c6:	4b26      	ldr	r3, [pc, #152]	@ (8001960 <autoFreqAdj+0xc0>)
 80018c8:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	@ 0x70e
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f9      	bne.n	80018c6 <autoFreqAdj+0x26>
		uint32_t stopTime = __HAL_TIM_GET_COUNTER(&htim24);//TIM24->CNT;
 80018d2:	4b22      	ldr	r3, [pc, #136]	@ (800195c <autoFreqAdj+0xbc>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018d8:	60bb      	str	r3, [r7, #8]
		//printADC12data();

		//Calculate delta f
		int16_t freqCorr;
		freqCorrection(&freqCorr);
 80018da:	1d3b      	adds	r3, r7, #4
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff fd1d 	bl	800131c <freqCorrection>

		//char text[100];
		//sprintf(text, "\n\rFrequency correction: %i", (int) freqCorr);
		//printString(text);

		if (sHbridge.frequency + freqCorr > MAX_FREQUENCY) //GetUint16Input(&sHbridge.frequency, 1, MIN_FREQUENCY, MAX_FREQUENCY))
 80018e2:	4b20      	ldr	r3, [pc, #128]	@ (8001964 <autoFreqAdj+0xc4>)
 80018e4:	885b      	ldrh	r3, [r3, #2]
 80018e6:	461a      	mov	r2, r3
 80018e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80018ec:	4413      	add	r3, r2
 80018ee:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 80018f2:	4293      	cmp	r3, r2
 80018f4:	dd04      	ble.n	8001900 <autoFreqAdj+0x60>
		{   // Calculated freq is higher than max

			//sprintf(text, "\n\r%i is higher than max freq", (int) sHbridge.frequency + freqCorr);
			//printString(text);
			sHbridge.frequency = MAX_FREQUENCY;
 80018f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001964 <autoFreqAdj+0xc4>)
 80018f8:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 80018fc:	805a      	strh	r2, [r3, #2]
 80018fe:	e017      	b.n	8001930 <autoFreqAdj+0x90>
		}
		else if (sHbridge.frequency + freqCorr < MIN_FREQUENCY)
 8001900:	4b18      	ldr	r3, [pc, #96]	@ (8001964 <autoFreqAdj+0xc4>)
 8001902:	885b      	ldrh	r3, [r3, #2]
 8001904:	461a      	mov	r2, r3
 8001906:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800190a:	4413      	add	r3, r2
 800190c:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8001910:	4293      	cmp	r3, r2
 8001912:	dc04      	bgt.n	800191e <autoFreqAdj+0x7e>
		{
			//sprintf(text, "\n\r%i is lower than min freq", (int) sHbridge.frequency + freqCorr);
			//printString(text);

			sHbridge.frequency = MIN_FREQUENCY;
 8001914:	4b13      	ldr	r3, [pc, #76]	@ (8001964 <autoFreqAdj+0xc4>)
 8001916:	f643 2298 	movw	r2, #15000	@ 0x3a98
 800191a:	805a      	strh	r2, [r3, #2]
 800191c:	e008      	b.n	8001930 <autoFreqAdj+0x90>

		}
		else
		{
			sHbridge.frequency = sHbridge.frequency + freqCorr;
 800191e:	4b11      	ldr	r3, [pc, #68]	@ (8001964 <autoFreqAdj+0xc4>)
 8001920:	885a      	ldrh	r2, [r3, #2]
 8001922:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001926:	b29b      	uxth	r3, r3
 8001928:	4413      	add	r3, r2
 800192a:	b29a      	uxth	r2, r3
 800192c:	4b0d      	ldr	r3, [pc, #52]	@ (8001964 <autoFreqAdj+0xc4>)
 800192e:	805a      	strh	r2, [r3, #2]
		}

		programHbridge();
 8001930:	f7ff f862 	bl	80009f8 <programHbridge>

		//Print current ADC data
		printHbridgeDatalogging(startTime, stopTime);
 8001934:	68b9      	ldr	r1, [r7, #8]
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f7ff fed2 	bl	80016e0 <printHbridgeDatalogging>
	while (!(HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 1) == HAL_OK))
 800193c:	1df9      	adds	r1, r7, #7
 800193e:	2301      	movs	r3, #1
 8001940:	2201      	movs	r2, #1
 8001942:	4809      	ldr	r0, [pc, #36]	@ (8001968 <autoFreqAdj+0xc8>)
 8001944:	f00e ff17 	bl	8010776 <HAL_UART_Receive>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d1b4      	bne.n	80018b8 <autoFreqAdj+0x18>


	}
}
 800194e:	bf00      	nop
 8001950:	bf00      	nop
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	08014b94 	.word	0x08014b94
 800195c:	24001048 	.word	0x24001048
 8001960:	24000330 	.word	0x24000330
 8001964:	2400001c 	.word	0x2400001c
 8001968:	24000e38 	.word	0x24000e38

0800196c <autoVoltageAdj>:


void autoVoltageAdj(int16_t userVoltage)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	80fb      	strh	r3, [r7, #6]
	char input;


	//printString("\n\r%Press any key to exit"); //Commented out to allow for automated remote serial control (datalogging)

	printString("Time(us),Freq (Hz),Deadtime (%),Bridge I,VplaL1,VplaL2,VbriS1,VbriS2");
 8001976:	482c      	ldr	r0, [pc, #176]	@ (8001a28 <autoVoltageAdj+0xbc>)
 8001978:	f7fe ff16 	bl	80007a8 <printString>
	printCR();
 800197c:	f7fe ff04 	bl	8000788 <printCR>

	//Start timer24 which is used to time when each ADC measurement is captured
	HAL_TIM_Base_Start(&htim24);
 8001980:	482a      	ldr	r0, [pc, #168]	@ (8001a2c <autoVoltageAdj+0xc0>)
 8001982:	f00d f88d 	bl	800eaa0 <HAL_TIM_Base_Start>


	while (!(HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 1) == HAL_OK))
 8001986:	e03f      	b.n	8001a08 <autoVoltageAdj+0x9c>
	{
		uint32_t startTime = __HAL_TIM_GET_COUNTER(&htim24);//TIM24->CNT;
 8001988:	4b28      	ldr	r3, [pc, #160]	@ (8001a2c <autoVoltageAdj+0xc0>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800198e:	617b      	str	r3, [r7, #20]
		measureBridgePlasmaADC12();
 8001990:	f7ff fdfa 	bl	8001588 <measureBridgePlasmaADC12>
		//Wait until ADC3 reading is done
		while (sADC.adc12_reading);
 8001994:	bf00      	nop
 8001996:	4b26      	ldr	r3, [pc, #152]	@ (8001a30 <autoVoltageAdj+0xc4>)
 8001998:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	@ 0x70e
 800199c:	b29b      	uxth	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f9      	bne.n	8001996 <autoVoltageAdj+0x2a>
		uint32_t stopTime = __HAL_TIM_GET_COUNTER(&htim24);//TIM24->CNT;
 80019a2:	4b22      	ldr	r3, [pc, #136]	@ (8001a2c <autoVoltageAdj+0xc0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a8:	613b      	str	r3, [r7, #16]
		//printADC12data();

		//Calculate delta f
		int16_t voltageCorr;
		voltageCorrection(userVoltage, &voltageCorr);
 80019aa:	f107 020c 	add.w	r2, r7, #12
 80019ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff fd73 	bl	80014a0 <voltageCorrection>

		//char text[100];
		//sprintf(text, "\n\rFrequency correction: %i", (int) freqCorr);
		//printString(text);

		if (sHbridge.deadtime + voltageCorr > MAX_DEADTIME) //GetUint16Input(&sHbridge.frequency, 1, MIN_FREQUENCY, MAX_FREQUENCY))
 80019ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001a34 <autoVoltageAdj+0xc8>)
 80019bc:	889b      	ldrh	r3, [r3, #4]
 80019be:	461a      	mov	r2, r3
 80019c0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80019c4:	4413      	add	r3, r2
 80019c6:	2b28      	cmp	r3, #40	@ 0x28
 80019c8:	dd03      	ble.n	80019d2 <autoVoltageAdj+0x66>
		{   // Calculated freq is higher than max

			//sprintf(text, "\n\r%i is higher than max freq", (int) sHbridge.frequency + freqCorr);
			//printString(text);
			sHbridge.deadtime = MAX_DEADTIME;
 80019ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001a34 <autoVoltageAdj+0xc8>)
 80019cc:	2228      	movs	r2, #40	@ 0x28
 80019ce:	809a      	strh	r2, [r3, #4]
 80019d0:	e014      	b.n	80019fc <autoVoltageAdj+0x90>
		}
		else if (sHbridge.deadtime + voltageCorr < MIN_DEADTIME)
 80019d2:	4b18      	ldr	r3, [pc, #96]	@ (8001a34 <autoVoltageAdj+0xc8>)
 80019d4:	889b      	ldrh	r3, [r3, #4]
 80019d6:	461a      	mov	r2, r3
 80019d8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80019dc:	4413      	add	r3, r2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	dc03      	bgt.n	80019ea <autoVoltageAdj+0x7e>
		{
			//sprintf(text, "\n\r%i is lower than min freq", (int) sHbridge.frequency + freqCorr);
			//printString(text);

			sHbridge.deadtime = MIN_DEADTIME;
 80019e2:	4b14      	ldr	r3, [pc, #80]	@ (8001a34 <autoVoltageAdj+0xc8>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	809a      	strh	r2, [r3, #4]
 80019e8:	e008      	b.n	80019fc <autoVoltageAdj+0x90>

		}
		else
		{
			sHbridge.deadtime = sHbridge.deadtime + voltageCorr;
 80019ea:	4b12      	ldr	r3, [pc, #72]	@ (8001a34 <autoVoltageAdj+0xc8>)
 80019ec:	889a      	ldrh	r2, [r3, #4]
 80019ee:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	4413      	add	r3, r2
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001a34 <autoVoltageAdj+0xc8>)
 80019fa:	809a      	strh	r2, [r3, #4]
		}

		programHbridge();
 80019fc:	f7fe fffc 	bl	80009f8 <programHbridge>

		//Print current ADC data
		printHbridgeDatalogging(startTime, stopTime);
 8001a00:	6939      	ldr	r1, [r7, #16]
 8001a02:	6978      	ldr	r0, [r7, #20]
 8001a04:	f7ff fe6c 	bl	80016e0 <printHbridgeDatalogging>
	while (!(HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 1) == HAL_OK))
 8001a08:	f107 010f 	add.w	r1, r7, #15
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	2201      	movs	r2, #1
 8001a10:	4809      	ldr	r0, [pc, #36]	@ (8001a38 <autoVoltageAdj+0xcc>)
 8001a12:	f00e feb0 	bl	8010776 <HAL_UART_Receive>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1b5      	bne.n	8001988 <autoVoltageAdj+0x1c>


	}
}
 8001a1c:	bf00      	nop
 8001a1e:	bf00      	nop
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	08014b94 	.word	0x08014b94
 8001a2c:	24001048 	.word	0x24001048
 8001a30:	24000330 	.word	0x24000330
 8001a34:	2400001c 	.word	0x2400001c
 8001a38:	24000e38 	.word	0x24000e38
 8001a3c:	00000000 	.word	0x00000000

08001a40 <convertADC3data>:


//Convert ADC3 data to voltages
float convertADC3data(uint32_t item, char **text)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
	float result = 0;
 8001a4a:	f04f 0300 	mov.w	r3, #0
 8001a4e:	60fb      	str	r3, [r7, #12]

	switch (item) {
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b0a      	cmp	r3, #10
 8001a54:	f200 80c5 	bhi.w	8001be2 <convertADC3data+0x1a2>
 8001a58:	a201      	add	r2, pc, #4	@ (adr r2, 8001a60 <convertADC3data+0x20>)
 8001a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a5e:	bf00      	nop
 8001a60:	08001a8d 	.word	0x08001a8d
 8001a64:	08001abf 	.word	0x08001abf
 8001a68:	08001af1 	.word	0x08001af1
 8001a6c:	08001b23 	.word	0x08001b23
 8001a70:	08001b31 	.word	0x08001b31
 8001a74:	08001b6b 	.word	0x08001b6b
 8001a78:	08001b9d 	.word	0x08001b9d
 8001a7c:	08001bab 	.word	0x08001bab
 8001a80:	08001bb9 	.word	0x08001bb9
 8001a84:	08001bc7 	.word	0x08001bc7
 8001a88:	08001bd5 	.word	0x08001bd5
		case ADC3_VBAT:
			result =  1000*((9.76+169.0)/9.76)*3.3*(((float) sADC.adc3_data[ADC3_VBAT])/4096.0);
 8001a8c:	4b66      	ldr	r3, [pc, #408]	@ (8001c28 <convertADC3data+0x1e8>)
 8001a8e:	f8b3 34b0 	ldrh.w	r3, [r3, #1200]	@ 0x4b0
 8001a92:	ee07 3a90 	vmov	s15, r3
 8001a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a9a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001a9e:	ed9f 5b56 	vldr	d5, [pc, #344]	@ 8001bf8 <convertADC3data+0x1b8>
 8001aa2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001aa6:	ed9f 6b56 	vldr	d6, [pc, #344]	@ 8001c00 <convertADC3data+0x1c0>
 8001aaa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001aae:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001ab2:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_VBAT (mV)";
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	4a5c      	ldr	r2, [pc, #368]	@ (8001c2c <convertADC3data+0x1ec>)
 8001aba:	601a      	str	r2, [r3, #0]
			break;
 8001abc:	e091      	b.n	8001be2 <convertADC3data+0x1a2>
		case ADC3_15V:
			result =  1000*((30.0+120.0)/30.0)*3.3*(((float) sADC.adc3_data[ADC3_15V])/4096.0);
 8001abe:	4b5a      	ldr	r3, [pc, #360]	@ (8001c28 <convertADC3data+0x1e8>)
 8001ac0:	f8b3 34b2 	ldrh.w	r3, [r3, #1202]	@ 0x4b2
 8001ac4:	ee07 3a90 	vmov	s15, r3
 8001ac8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001acc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001ad0:	ed9f 5b49 	vldr	d5, [pc, #292]	@ 8001bf8 <convertADC3data+0x1b8>
 8001ad4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ad8:	ed9f 6b4b 	vldr	d6, [pc, #300]	@ 8001c08 <convertADC3data+0x1c8>
 8001adc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ae0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001ae4:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_15V (mV)";
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	4a51      	ldr	r2, [pc, #324]	@ (8001c30 <convertADC3data+0x1f0>)
 8001aec:	601a      	str	r2, [r3, #0]
			break;
 8001aee:	e078      	b.n	8001be2 <convertADC3data+0x1a2>
		case ADC3_3_3V:
			result =  1000*((30.0+3.0)/30.0)*3.3*(((float) sADC.adc3_data[ADC3_3_3V])/4096.0);
 8001af0:	4b4d      	ldr	r3, [pc, #308]	@ (8001c28 <convertADC3data+0x1e8>)
 8001af2:	f8b3 34b4 	ldrh.w	r3, [r3, #1204]	@ 0x4b4
 8001af6:	ee07 3a90 	vmov	s15, r3
 8001afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001afe:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001b02:	ed9f 5b3d 	vldr	d5, [pc, #244]	@ 8001bf8 <convertADC3data+0x1b8>
 8001b06:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b0a:	ed9f 6b41 	vldr	d6, [pc, #260]	@ 8001c10 <convertADC3data+0x1d0>
 8001b0e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001b12:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b16:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_3_3V (mV)";
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	4a45      	ldr	r2, [pc, #276]	@ (8001c34 <convertADC3data+0x1f4>)
 8001b1e:	601a      	str	r2, [r3, #0]
			break;
 8001b20:	e05f      	b.n	8001be2 <convertADC3data+0x1a2>
		case ADC3_NC3:
			result = 0;
 8001b22:	f04f 0300 	mov.w	r3, #0
 8001b26:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_NC3";
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	4a43      	ldr	r2, [pc, #268]	@ (8001c38 <convertADC3data+0x1f8>)
 8001b2c:	601a      	str	r2, [r3, #0]
			break;
 8001b2e:	e058      	b.n	8001be2 <convertADC3data+0x1a2>
		case ADC3_BridgeTemp:
			result = 1000*((float) sADC.adc3_data[ADC3_BridgeTemp])*3.3/4096.0;
 8001b30:	4b3d      	ldr	r3, [pc, #244]	@ (8001c28 <convertADC3data+0x1e8>)
 8001b32:	f8b3 34b8 	ldrh.w	r3, [r3, #1208]	@ 0x4b8
 8001b36:	ee07 3a90 	vmov	s15, r3
 8001b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b3e:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8001c3c <convertADC3data+0x1fc>
 8001b42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b46:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b4a:	ed9f 6b33 	vldr	d6, [pc, #204]	@ 8001c18 <convertADC3data+0x1d8>
 8001b4e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001b52:	ed9f 5b29 	vldr	d5, [pc, #164]	@ 8001bf8 <convertADC3data+0x1b8>
 8001b56:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b5a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b5e:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_BridgeTemp (mV)";
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	4a36      	ldr	r2, [pc, #216]	@ (8001c40 <convertADC3data+0x200>)
 8001b66:	601a      	str	r2, [r3, #0]
			break;
 8001b68:	e03b      	b.n	8001be2 <convertADC3data+0x1a2>
		case ADC3_500VDC:
			result =  1000*((12.0+2000.0)/12.0)*3.3*(((float) sADC.adc3_data[ADC3_500VDC])/4096.0);
 8001b6a:	4b2f      	ldr	r3, [pc, #188]	@ (8001c28 <convertADC3data+0x1e8>)
 8001b6c:	f8b3 34ba 	ldrh.w	r3, [r3, #1210]	@ 0x4ba
 8001b70:	ee07 3a90 	vmov	s15, r3
 8001b74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b78:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001b7c:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8001bf8 <convertADC3data+0x1b8>
 8001b80:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b84:	ed9f 6b26 	vldr	d6, [pc, #152]	@ 8001c20 <convertADC3data+0x1e0>
 8001b88:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001b8c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b90:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_500VDC (mV)";
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	4a2b      	ldr	r2, [pc, #172]	@ (8001c44 <convertADC3data+0x204>)
 8001b98:	601a      	str	r2, [r3, #0]
			break;
 8001b9a:	e022      	b.n	8001be2 <convertADC3data+0x1a2>
		case ADC3_Thermistor1:
			result = 0;
 8001b9c:	f04f 0300 	mov.w	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_Thermistor1";
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	4a28      	ldr	r2, [pc, #160]	@ (8001c48 <convertADC3data+0x208>)
 8001ba6:	601a      	str	r2, [r3, #0]
			break;
 8001ba8:	e01b      	b.n	8001be2 <convertADC3data+0x1a2>
		case ADC3_Thermistor2:
			result = 0;
 8001baa:	f04f 0300 	mov.w	r3, #0
 8001bae:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_Thermistor2";
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	4a26      	ldr	r2, [pc, #152]	@ (8001c4c <convertADC3data+0x20c>)
 8001bb4:	601a      	str	r2, [r3, #0]
			break;
 8001bb6:	e014      	b.n	8001be2 <convertADC3data+0x1a2>
		case ADC3_Thermistor3:
			result = 0;
 8001bb8:	f04f 0300 	mov.w	r3, #0
 8001bbc:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_Thermistor3";
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	4a23      	ldr	r2, [pc, #140]	@ (8001c50 <convertADC3data+0x210>)
 8001bc2:	601a      	str	r2, [r3, #0]
			break;
 8001bc4:	e00d      	b.n	8001be2 <convertADC3data+0x1a2>
		case ADC3_Thermistor4:
			result = 0;
 8001bc6:	f04f 0300 	mov.w	r3, #0
 8001bca:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_Thermistor4";
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	4a21      	ldr	r2, [pc, #132]	@ (8001c54 <convertADC3data+0x214>)
 8001bd0:	601a      	str	r2, [r3, #0]
			break;
 8001bd2:	e006      	b.n	8001be2 <convertADC3data+0x1a2>
		case ADC3_NC10:
			result = 0;
 8001bd4:	f04f 0300 	mov.w	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_NC10";
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	4a1e      	ldr	r2, [pc, #120]	@ (8001c58 <convertADC3data+0x218>)
 8001bde:	601a      	str	r2, [r3, #0]
			break;
 8001be0:	bf00      	nop
	}

	return(result);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	ee07 3a90 	vmov	s15, r3
}
 8001be8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	00000000 	.word	0x00000000
 8001bfc:	40b00000 	.word	0x40b00000
 8001c00:	9714fbcd 	.word	0x9714fbcd
 8001c04:	40ed832c 	.word	0x40ed832c
 8001c08:	00000000 	.word	0x00000000
 8001c0c:	40d01d00 	.word	0x40d01d00
 8001c10:	00000000 	.word	0x00000000
 8001c14:	40ac5c00 	.word	0x40ac5c00
 8001c18:	66666666 	.word	0x66666666
 8001c1c:	400a6666 	.word	0x400a6666
 8001c20:	ffffffff 	.word	0xffffffff
 8001c24:	4120e2a7 	.word	0x4120e2a7
 8001c28:	24000330 	.word	0x24000330
 8001c2c:	08014bdc 	.word	0x08014bdc
 8001c30:	08014bec 	.word	0x08014bec
 8001c34:	08014bfc 	.word	0x08014bfc
 8001c38:	08014c0c 	.word	0x08014c0c
 8001c3c:	447a0000 	.word	0x447a0000
 8001c40:	08014c18 	.word	0x08014c18
 8001c44:	08014c30 	.word	0x08014c30
 8001c48:	08014c44 	.word	0x08014c44
 8001c4c:	08014c58 	.word	0x08014c58
 8001c50:	08014c6c 	.word	0x08014c6c
 8001c54:	08014c80 	.word	0x08014c80
 8001c58:	08014c94 	.word	0x08014c94

08001c5c <printADC3data>:

//Print measured ADC3 data on UART3
void printADC3data(void)
{
 8001c5c:	b590      	push	{r4, r7, lr}
 8001c5e:	b09f      	sub	sp, #124	@ 0x7c
 8001c60:	af02      	add	r7, sp, #8
	if (debug == 1)
 8001c62:	4b1d      	ldr	r3, [pc, #116]	@ (8001cd8 <printADC3data+0x7c>)
 8001c64:	881b      	ldrh	r3, [r3, #0]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d131      	bne.n	8001cce <printADC3data+0x72>
	{
		printCR();
 8001c6a:	f7fe fd8d 	bl	8000788 <printCR>
		printNumber("No data: ", ADC3_DMA_REQUESTS, 1);
 8001c6e:	2201      	movs	r2, #1
 8001c70:	210b      	movs	r1, #11
 8001c72:	481a      	ldr	r0, [pc, #104]	@ (8001cdc <printADC3data+0x80>)
 8001c74:	f7fe fdda 	bl	800082c <printNumber>
		for (int i=0; i<ADC3_DMA_REQUESTS; i++)
 8001c78:	2300      	movs	r3, #0
 8001c7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001c7c:	e024      	b.n	8001cc8 <printADC3data+0x6c>
		{
			char text[100];
			char *p_text;
			float result = convertADC3data(i, &p_text);
 8001c7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c80:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8001c84:	4611      	mov	r1, r2
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff feda 	bl	8001a40 <convertADC3data>
 8001c8c:	ed87 0a1a 	vstr	s0, [r7, #104]	@ 0x68
			sprintf(text, "%2u %20s: %7u    (%6u)\n\r", i, p_text, (int) result, sADC.adc3_data[i]);
 8001c90:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001c92:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001c96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c9a:	ee17 4a90 	vmov	r4, s15
 8001c9e:	4910      	ldr	r1, [pc, #64]	@ (8001ce0 <printADC3data+0x84>)
 8001ca0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ca2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001ca6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001caa:	4638      	mov	r0, r7
 8001cac:	9301      	str	r3, [sp, #4]
 8001cae:	9400      	str	r4, [sp, #0]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001cb4:	490b      	ldr	r1, [pc, #44]	@ (8001ce4 <printADC3data+0x88>)
 8001cb6:	f010 fd8d 	bl	80127d4 <siprintf>
			printString(text);
 8001cba:	463b      	mov	r3, r7
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7fe fd73 	bl	80007a8 <printString>
		for (int i=0; i<ADC3_DMA_REQUESTS; i++)
 8001cc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001cc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001cca:	2b0a      	cmp	r3, #10
 8001ccc:	ddd7      	ble.n	8001c7e <printADC3data+0x22>
		}
	}
}
 8001cce:	bf00      	nop
 8001cd0:	3774      	adds	r7, #116	@ 0x74
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd90      	pop	{r4, r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	24000000 	.word	0x24000000
 8001cdc:	08014ab4 	.word	0x08014ab4
 8001ce0:	24000330 	.word	0x24000330
 8001ce4:	08014ca0 	.word	0x08014ca0

08001ce8 <measureVoltagesTemperaturesADC3>:

// Measure voltages and temperatures using ADC3
// After the measurement is done the function doneMeasuringVoltagesTemperaturesADC3 is called
void measureVoltagesTemperaturesADC3(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_SET);

	// This will start the measurement of voltages and temperatures using ADC3
	sADC.adc3_reading = 1; //Started to read ADC3
 8001cec:	4b05      	ldr	r3, [pc, #20]	@ (8001d04 <measureVoltagesTemperaturesADC3+0x1c>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f8a3 270c 	strh.w	r2, [r3, #1804]	@ 0x70c
	HAL_ADC_Start_DMA(&hadc3, (uint32_t *) sADC.adc3_data, ADC3_DMA_REQUESTS);
 8001cf4:	220b      	movs	r2, #11
 8001cf6:	4904      	ldr	r1, [pc, #16]	@ (8001d08 <measureVoltagesTemperaturesADC3+0x20>)
 8001cf8:	4804      	ldr	r0, [pc, #16]	@ (8001d0c <measureVoltagesTemperaturesADC3+0x24>)
 8001cfa:	f003 ff07 	bl	8005b0c <HAL_ADC_Start_DMA>

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	24000330 	.word	0x24000330
 8001d08:	240007e0 	.word	0x240007e0
 8001d0c:	24000b68 	.word	0x24000b68

08001d10 <doneMeasuringVoltagesTemperaturesADC3>:


// Done measuring voltages and temperatures
void doneMeasuringVoltagesTemperaturesADC3(uint32_t errorCode)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_SET);

	sADC.adc3_reading = 0; //Done reading ADC3
 8001d18:	4b0b      	ldr	r3, [pc, #44]	@ (8001d48 <doneMeasuringVoltagesTemperaturesADC3+0x38>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f8a3 270c 	strh.w	r2, [r3, #1804]	@ 0x70c

	if (errorCode == HAL_ADC_ERROR_NONE)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d006      	beq.n	8001d34 <doneMeasuringVoltagesTemperaturesADC3+0x24>
		// TODO Check temperatures

	}
	else
	{
		printNumber("ADC12 Error Code: ", errorCode, 1);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4807      	ldr	r0, [pc, #28]	@ (8001d4c <doneMeasuringVoltagesTemperaturesADC3+0x3c>)
 8001d30:	f7fe fd7c 	bl	800082c <printNumber>
	}


	//Start ADC1 and ADC2 measurements
	if (sFlashConfig.mode == RUN_MODE)
 8001d34:	4b06      	ldr	r3, [pc, #24]	@ (8001d50 <doneMeasuringVoltagesTemperaturesADC3+0x40>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d101      	bne.n	8001d40 <doneMeasuringVoltagesTemperaturesADC3+0x30>
		measureBridgePlasmaADC12();
 8001d3c:	f7ff fc24 	bl	8001588 <measureBridgePlasmaADC12>

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
}
 8001d40:	bf00      	nop
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	24000330 	.word	0x24000330
 8001d4c:	08014b60 	.word	0x08014b60
 8001d50:	24000a48 	.word	0x24000a48

08001d54 <GetNumber>:

// Get an integer number from UART3. If the number is valid, the function returns 1, otherwise 0.
static uint8_t GetNumber(int *number)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08a      	sub	sp, #40	@ 0x28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
	char input;
	char s_input[MAX_INPUT];
	int pos = 0;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	627b      	str	r3, [r7, #36]	@ 0x24
	//Wait for user input
	HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 100000);
 8001d60:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 8001d64:	4b2f      	ldr	r3, [pc, #188]	@ (8001e24 <GetNumber+0xd0>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	482f      	ldr	r0, [pc, #188]	@ (8001e28 <GetNumber+0xd4>)
 8001d6a:	f00e fd04 	bl	8010776 <HAL_UART_Receive>
	while (input != 13)
 8001d6e:	e039      	b.n	8001de4 <GetNumber+0x90>
	{
		// Backspace?
		if ((input == 127) && (pos > 0))
 8001d70:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001d74:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d76:	d10e      	bne.n	8001d96 <GetNumber+0x42>
 8001d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	dd0b      	ble.n	8001d96 <GetNumber+0x42>
		{
			// Delete digit
			HAL_UART_Transmit(&huart3, (uint8_t *) &input, 1, 1000);
 8001d7e:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 8001d82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d86:	2201      	movs	r2, #1
 8001d88:	4827      	ldr	r0, [pc, #156]	@ (8001e28 <GetNumber+0xd4>)
 8001d8a:	f00e fc66 	bl	801065a <HAL_UART_Transmit>
			pos--;
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d90:	3b01      	subs	r3, #1
 8001d92:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d94:	e018      	b.n	8001dc8 <GetNumber+0x74>
		}
		// A digit?
		else if ((input >= 48) && (input <=57))
 8001d96:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001d9a:	2b2f      	cmp	r3, #47	@ 0x2f
 8001d9c:	d914      	bls.n	8001dc8 <GetNumber+0x74>
 8001d9e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001da2:	2b39      	cmp	r3, #57	@ 0x39
 8001da4:	d810      	bhi.n	8001dc8 <GetNumber+0x74>
		{
			// Echo digit and store it
			HAL_UART_Transmit(&huart3, (uint8_t *) &input, 1, 1000);
 8001da6:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 8001daa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dae:	2201      	movs	r2, #1
 8001db0:	481d      	ldr	r0, [pc, #116]	@ (8001e28 <GetNumber+0xd4>)
 8001db2:	f00e fc52 	bl	801065a <HAL_UART_Transmit>
			s_input[pos++] = input;
 8001db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db8:	1c5a      	adds	r2, r3, #1
 8001dba:	627a      	str	r2, [r7, #36]	@ 0x24
 8001dbc:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001dc0:	3328      	adds	r3, #40	@ 0x28
 8001dc2:	443b      	add	r3, r7
 8001dc4:	f803 2c1c 	strb.w	r2, [r3, #-28]
		}

		// Get next character
		if (pos < MAX_INPUT-1)
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dca:	2b12      	cmp	r3, #18
 8001dcc:	dc07      	bgt.n	8001dde <GetNumber+0x8a>
		{
			HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 100000);
 8001dce:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 8001dd2:	4b14      	ldr	r3, [pc, #80]	@ (8001e24 <GetNumber+0xd0>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	4814      	ldr	r0, [pc, #80]	@ (8001e28 <GetNumber+0xd4>)
 8001dd8:	f00e fccd 	bl	8010776 <HAL_UART_Receive>
 8001ddc:	e002      	b.n	8001de4 <GetNumber+0x90>
		}
		else
		{
			input = 13; // Terminate while loop
 8001dde:	230d      	movs	r3, #13
 8001de0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	while (input != 13)
 8001de4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001de8:	2b0d      	cmp	r3, #13
 8001dea:	d1c1      	bne.n	8001d70 <GetNumber+0x1c>
		}
	}
	s_input[pos] = 0;
 8001dec:	f107 020c 	add.w	r2, r7, #12
 8001df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df2:	4413      	add	r3, r2
 8001df4:	2200      	movs	r2, #0
 8001df6:	701a      	strb	r2, [r3, #0]
	if (pos > 0)
 8001df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	dd07      	ble.n	8001e0e <GetNumber+0xba>
		*number = atoi(s_input);
 8001dfe:	f107 030c 	add.w	r3, r7, #12
 8001e02:	4618      	mov	r0, r3
 8001e04:	f00f ff0a 	bl	8011c1c <atoi>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	601a      	str	r2, [r3, #0]
	return(pos > 0);
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	bfcc      	ite	gt
 8001e14:	2301      	movgt	r3, #1
 8001e16:	2300      	movle	r3, #0
 8001e18:	b2db      	uxtb	r3, r3
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3728      	adds	r7, #40	@ 0x28
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	000186a0 	.word	0x000186a0
 8001e28:	24000e38 	.word	0x24000e38

08001e2c <GetUint16Input>:

// Get an 16bit unsigned number from UAR3 and validate the input againts min and max values
static uint8_t GetUint16Input(uint16_t *input, uint8_t bValidate, uint16_t min, uint16_t max)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b0a0      	sub	sp, #128	@ 0x80
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	4608      	mov	r0, r1
 8001e36:	4611      	mov	r1, r2
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	72fb      	strb	r3, [r7, #11]
 8001e3e:	460b      	mov	r3, r1
 8001e40:	813b      	strh	r3, [r7, #8]
 8001e42:	4613      	mov	r3, r2
 8001e44:	80fb      	strh	r3, [r7, #6]
	int number;
	char s_output[100];
	uint8_t result;

	result = GetNumber(&number);
 8001e46:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff ff82 	bl	8001d54 <GetNumber>
 8001e50:	4603      	mov	r3, r0
 8001e52:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (bValidate)
 8001e56:	7afb      	ldrb	r3, [r7, #11]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d02f      	beq.n	8001ebc <GetUint16Input+0x90>
	{
		if (result && (number >= min) && (number <= max))
 8001e5c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d013      	beq.n	8001e8c <GetUint16Input+0x60>
 8001e64:	893a      	ldrh	r2, [r7, #8]
 8001e66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	dc0f      	bgt.n	8001e8c <GetUint16Input+0x60>
 8001e6c:	88fa      	ldrh	r2, [r7, #6]
 8001e6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e70:	429a      	cmp	r2, r3
 8001e72:	db0b      	blt.n	8001e8c <GetUint16Input+0x60>
		{
			*input =  number;
 8001e74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, (uint8_t *) " - Ok\n\r", 7, 1000);
 8001e7c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e80:	2207      	movs	r2, #7
 8001e82:	4911      	ldr	r1, [pc, #68]	@ (8001ec8 <GetUint16Input+0x9c>)
 8001e84:	4811      	ldr	r0, [pc, #68]	@ (8001ecc <GetUint16Input+0xa0>)
 8001e86:	f00e fbe8 	bl	801065a <HAL_UART_Transmit>
 8001e8a:	e017      	b.n	8001ebc <GetUint16Input+0x90>
		}
		else
		{
			result = 0; //Indicate failure
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			sprintf(s_output, " - Invalid number, valid range %u - %u\n\r", min, max);
 8001e92:	893a      	ldrh	r2, [r7, #8]
 8001e94:	88fb      	ldrh	r3, [r7, #6]
 8001e96:	f107 0014 	add.w	r0, r7, #20
 8001e9a:	490d      	ldr	r1, [pc, #52]	@ (8001ed0 <GetUint16Input+0xa4>)
 8001e9c:	f010 fc9a 	bl	80127d4 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t *) s_output, strlen(s_output), 1000);
 8001ea0:	f107 0314 	add.w	r3, r7, #20
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7fe fa93 	bl	80003d0 <strlen>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	f107 0114 	add.w	r1, r7, #20
 8001eb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eb6:	4805      	ldr	r0, [pc, #20]	@ (8001ecc <GetUint16Input+0xa0>)
 8001eb8:	f00e fbcf 	bl	801065a <HAL_UART_Transmit>
		}
	}
	return(result);
 8001ebc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3780      	adds	r7, #128	@ 0x80
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	08014cbc 	.word	0x08014cbc
 8001ecc:	24000e38 	.word	0x24000e38
 8001ed0:	08014cc4 	.word	0x08014cc4

08001ed4 <HAL_ADC_ErrorCallback>:
//		*number = atoi(s_input);
//	return(pos > 0);
//}

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef* hadc)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
	// ADC1 is master and ADC2 is slave
	if (hadc->Instance == ADC1)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a0e      	ldr	r2, [pc, #56]	@ (8001f1c <HAL_ADC_ErrorCallback+0x48>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d108      	bne.n	8001ef8 <HAL_ADC_ErrorCallback+0x24>
	{
		printNumber("** ERROR ** ADC12 Error Code: ", hadc->ErrorCode, 1);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	2201      	movs	r2, #1
 8001eee:	4619      	mov	r1, r3
 8001ef0:	480b      	ldr	r0, [pc, #44]	@ (8001f20 <HAL_ADC_ErrorCallback+0x4c>)
 8001ef2:	f7fe fc9b 	bl	800082c <printNumber>
	}
	else if ((hadc->Instance == ADC3))
	{
		printNumber("** ERROR ** ADC3 Error Code: ", hadc->ErrorCode, 1);
	}
}
 8001ef6:	e00c      	b.n	8001f12 <HAL_ADC_ErrorCallback+0x3e>
	else if ((hadc->Instance == ADC3))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a09      	ldr	r2, [pc, #36]	@ (8001f24 <HAL_ADC_ErrorCallback+0x50>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d107      	bne.n	8001f12 <HAL_ADC_ErrorCallback+0x3e>
		printNumber("** ERROR ** ADC3 Error Code: ", hadc->ErrorCode, 1);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	2201      	movs	r2, #1
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4806      	ldr	r0, [pc, #24]	@ (8001f28 <HAL_ADC_ErrorCallback+0x54>)
 8001f0e:	f7fe fc8d 	bl	800082c <printNumber>
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40022000 	.word	0x40022000
 8001f20:	08014cf0 	.word	0x08014cf0
 8001f24:	58026000 	.word	0x58026000
 8001f28:	08014d10 	.word	0x08014d10

08001f2c <HAL_ADC_ConvCpltCallback>:

// ADC conversion and DMA transfer complete
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]

	// ADC1 is master and ADC2 is slave
	if (hadc->Instance == ADC1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a10      	ldr	r2, [pc, #64]	@ (8001f7c <HAL_ADC_ConvCpltCallback+0x50>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d105      	bne.n	8001f4a <HAL_ADC_ConvCpltCallback+0x1e>
	{
		//HAL_ADCEx_MultiModeStop_DMA(&hadc1);
		doneMeasuringBridgePlasmaADC12(hadc->ErrorCode);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff fb76 	bl	8001634 <doneMeasuringBridgePlasmaADC12>
	else
	{
		HAL_UART_Transmit(&huart3, (uint8_t *) "** ERROR ** Unknown ADC\n\r", 25, 1000);
		printCR();
	}
}
 8001f48:	e013      	b.n	8001f72 <HAL_ADC_ConvCpltCallback+0x46>
	else if (hadc->Instance == ADC3)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a0c      	ldr	r2, [pc, #48]	@ (8001f80 <HAL_ADC_ConvCpltCallback+0x54>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d105      	bne.n	8001f60 <HAL_ADC_ConvCpltCallback+0x34>
		doneMeasuringVoltagesTemperaturesADC3(hadc->ErrorCode);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff fed9 	bl	8001d10 <doneMeasuringVoltagesTemperaturesADC3>
}
 8001f5e:	e008      	b.n	8001f72 <HAL_ADC_ConvCpltCallback+0x46>
		HAL_UART_Transmit(&huart3, (uint8_t *) "** ERROR ** Unknown ADC\n\r", 25, 1000);
 8001f60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f64:	2219      	movs	r2, #25
 8001f66:	4907      	ldr	r1, [pc, #28]	@ (8001f84 <HAL_ADC_ConvCpltCallback+0x58>)
 8001f68:	4807      	ldr	r0, [pc, #28]	@ (8001f88 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001f6a:	f00e fb76 	bl	801065a <HAL_UART_Transmit>
		printCR();
 8001f6e:	f7fe fc0b 	bl	8000788 <printCR>
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40022000 	.word	0x40022000
 8001f80:	58026000 	.word	0x58026000
 8001f84:	08014d30 	.word	0x08014d30
 8001f88:	24000e38 	.word	0x24000e38

08001f8c <PowerOffLowSupplies>:
//Power Off Supplies in order3.3V switch and 15V
/**
 * returns 1 if power off unsuccessful. 0 on success
 */
char PowerOffLowSupplies(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
	char status;
	if (powerStatus == V500_OFF)
 8001f92:	4b14      	ldr	r3, [pc, #80]	@ (8001fe4 <PowerOffLowSupplies+0x58>)
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d118      	bne.n	8001fcc <PowerOffLowSupplies+0x40>
	{
		//Power off 3.3V switch voltage
		HAL_GPIO_WritePin(OUT_3V3_SWITCH_GPIO_Port, OUT_3V3_SWITCH_Pin, GPIO_PIN_SET);
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	4812      	ldr	r0, [pc, #72]	@ (8001fe8 <PowerOffLowSupplies+0x5c>)
 8001fa0:	f009 f96c 	bl	800b27c <HAL_GPIO_WritePin>
		supply_status.s3_3V = 0;
 8001fa4:	4b11      	ldr	r3, [pc, #68]	@ (8001fec <PowerOffLowSupplies+0x60>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	701a      	strb	r2, [r3, #0]
		HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001faa:	2001      	movs	r0, #1
 8001fac:	f002 ff30 	bl	8004e10 <HAL_Delay>

		//Power off 15V
		HAL_GPIO_WritePin(OUT_15V_ENABLE_GPIO_Port, OUT_15V_ENABLE_Pin, GPIO_PIN_SET);		//There is an inverter between MCU and the output, thus SET
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	2102      	movs	r1, #2
 8001fb4:	480c      	ldr	r0, [pc, #48]	@ (8001fe8 <PowerOffLowSupplies+0x5c>)
 8001fb6:	f009 f961 	bl	800b27c <HAL_GPIO_WritePin>
		supply_status.s15V = 0;
 8001fba:	4b0c      	ldr	r3, [pc, #48]	@ (8001fec <PowerOffLowSupplies+0x60>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	705a      	strb	r2, [r3, #1]
		HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	f002 ff25 	bl	8004e10 <HAL_Delay>
		status = 0;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	71fb      	strb	r3, [r7, #7]
 8001fca:	e006      	b.n	8001fda <PowerOffLowSupplies+0x4e>
	}
	else
	{
		printString("** ERROR ** PowerOffLowSupplies: 500V is On\n\r");
 8001fcc:	4808      	ldr	r0, [pc, #32]	@ (8001ff0 <PowerOffLowSupplies+0x64>)
 8001fce:	f7fe fbeb 	bl	80007a8 <printString>
		printCR();
 8001fd2:	f7fe fbd9 	bl	8000788 <printCR>
		status = 1;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	71fb      	strb	r3, [r7, #7]
	}
	return status;
 8001fda:	79fb      	ldrb	r3, [r7, #7]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	24000a44 	.word	0x24000a44
 8001fe8:	58020c00 	.word	0x58020c00
 8001fec:	24000a40 	.word	0x24000a40
 8001ff0:	08014d4c 	.word	0x08014d4c

08001ff4 <PowerOffHighSupplies>:
//Power Off Supply 500V
/**
 * Returns 1 if power off unsuccessful. 0 on success
 */
char PowerOffHighSupplies(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
	char status;
	//Make sure the H-bridge outputs are zero before turning off power
	stopHbridge();
 8001ff8:	f7fe fca6 	bl	8000948 <stopHbridge>

	//Power off 500V
	HAL_GPIO_WritePin(OUT_500V_ENABLE_GPIO_Port, OUT_500V_ENABLE_Pin, GPIO_PIN_SET);	//There is an inverter between MCU and the output, thus SET
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	2101      	movs	r1, #1
 8002000:	480d      	ldr	r0, [pc, #52]	@ (8002038 <PowerOffHighSupplies+0x44>)
 8002002:	f009 f93b 	bl	800b27c <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8002006:	2001      	movs	r0, #1
 8002008:	f002 ff02 	bl	8004e10 <HAL_Delay>

	//Disable Line Drive 1
	HAL_GPIO_WritePin(LINE_DRIVER1_ENABLE_GPIO_Port, LINE_DRIVER1_ENABLE_Pin, GPIO_PIN_SET);
 800200c:	2201      	movs	r2, #1
 800200e:	2104      	movs	r1, #4
 8002010:	480a      	ldr	r0, [pc, #40]	@ (800203c <PowerOffHighSupplies+0x48>)
 8002012:	f009 f933 	bl	800b27c <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8002016:	2001      	movs	r0, #1
 8002018:	f002 fefa 	bl	8004e10 <HAL_Delay>

	//Signal to robot controller all power supplies are inactive.
	HAL_GPIO_WritePin(LED_ACTIVE_GPIO_Port, LED_ACTIVE_Pin, GPIO_PIN_SET);			//There is an inverter between MCU and the output, thus SET
 800201c:	2201      	movs	r2, #1
 800201e:	2101      	movs	r1, #1
 8002020:	4807      	ldr	r0, [pc, #28]	@ (8002040 <PowerOffHighSupplies+0x4c>)
 8002022:	f009 f92b 	bl	800b27c <HAL_GPIO_WritePin>

	powerStatus = V500_OFF;
 8002026:	4b07      	ldr	r3, [pc, #28]	@ (8002044 <PowerOffHighSupplies+0x50>)
 8002028:	2200      	movs	r2, #0
 800202a:	801a      	strh	r2, [r3, #0]
	supply_status.sHV = 0;
 800202c:	4b06      	ldr	r3, [pc, #24]	@ (8002048 <PowerOffHighSupplies+0x54>)
 800202e:	2200      	movs	r2, #0
 8002030:	709a      	strb	r2, [r3, #2]
	return 0;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	bd80      	pop	{r7, pc}
 8002038:	58021800 	.word	0x58021800
 800203c:	58020400 	.word	0x58020400
 8002040:	58021000 	.word	0x58021000
 8002044:	24000a44 	.word	0x24000a44
 8002048:	24000a40 	.word	0x24000a40

0800204c <PowerOffSupplies>:

void PowerOffSupplies(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
	PowerOffHighSupplies();
 8002050:	f7ff ffd0 	bl	8001ff4 <PowerOffHighSupplies>
	PowerOffLowSupplies();
 8002054:	f7ff ff9a 	bl	8001f8c <PowerOffLowSupplies>
}
 8002058:	bf00      	nop
 800205a:	bd80      	pop	{r7, pc}

0800205c <PowerOnLowSupplies>:

//Power On Supplies in order 15V, 3.3V switch
//Returns 1 if the power up sequence was successful, and 0 if it failed
int PowerOnLowSupplies(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
	//Power on 15V
	//printString("\n\rPower on 15V - ");
	HAL_GPIO_WritePin(OUT_15V_ENABLE_GPIO_Port, OUT_15V_ENABLE_Pin, GPIO_PIN_RESET);	//There is an inverter between MCU and the output, thus RESET
 8002060:	2200      	movs	r2, #0
 8002062:	2102      	movs	r1, #2
 8002064:	4819      	ldr	r0, [pc, #100]	@ (80020cc <PowerOnLowSupplies+0x70>)
 8002066:	f009 f909 	bl	800b27c <HAL_GPIO_WritePin>
	printString("\n\rPower on 15V - ");
 800206a:	4819      	ldr	r0, [pc, #100]	@ (80020d0 <PowerOnLowSupplies+0x74>)
 800206c:	f7fe fb9c 	bl	80007a8 <printString>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8002070:	2001      	movs	r0, #1
 8002072:	f002 fecd 	bl	8004e10 <HAL_Delay>

	//Start reading ADC3 channels
	measureVoltagesTemperaturesADC3();
 8002076:	f7ff fe37 	bl	8001ce8 <measureVoltagesTemperaturesADC3>
	//Wait until ADC3 reading is done
	while (sADC.adc3_reading) ;
 800207a:	bf00      	nop
 800207c:	4b15      	ldr	r3, [pc, #84]	@ (80020d4 <PowerOnLowSupplies+0x78>)
 800207e:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	@ 0x70c
 8002082:	b29b      	uxth	r3, r3
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1f9      	bne.n	800207c <PowerOnLowSupplies+0x20>

	//Check 15V voltage
	if (sADC.adc3_data[ADC3_15V] >= sADC3threshold[ADC3_15V])
 8002088:	4b12      	ldr	r3, [pc, #72]	@ (80020d4 <PowerOnLowSupplies+0x78>)
 800208a:	f8b3 24b2 	ldrh.w	r2, [r3, #1202]	@ 0x4b2
 800208e:	4b12      	ldr	r3, [pc, #72]	@ (80020d8 <PowerOnLowSupplies+0x7c>)
 8002090:	885b      	ldrh	r3, [r3, #2]
 8002092:	429a      	cmp	r2, r3
 8002094:	d312      	bcc.n	80020bc <PowerOnLowSupplies+0x60>
	{
		printString("Ok");
 8002096:	4811      	ldr	r0, [pc, #68]	@ (80020dc <PowerOnLowSupplies+0x80>)
 8002098:	f7fe fb86 	bl	80007a8 <printString>
		supply_status.s15V = 1;
 800209c:	4b10      	ldr	r3, [pc, #64]	@ (80020e0 <PowerOnLowSupplies+0x84>)
 800209e:	2201      	movs	r2, #1
 80020a0:	705a      	strb	r2, [r3, #1]
		PowerOffLowSupplies();
		return(0);
	}

	//Power on 3.3V switch voltage
	printString("\n\rPower on 3.3V switch");
 80020a2:	4810      	ldr	r0, [pc, #64]	@ (80020e4 <PowerOnLowSupplies+0x88>)
 80020a4:	f7fe fb80 	bl	80007a8 <printString>
	HAL_GPIO_WritePin(OUT_3V3_SWITCH_GPIO_Port, OUT_3V3_SWITCH_Pin, GPIO_PIN_RESET);
 80020a8:	2200      	movs	r2, #0
 80020aa:	2101      	movs	r1, #1
 80020ac:	4807      	ldr	r0, [pc, #28]	@ (80020cc <PowerOnLowSupplies+0x70>)
 80020ae:	f009 f8e5 	bl	800b27c <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 80020b2:	2001      	movs	r0, #1
 80020b4:	f002 feac 	bl	8004e10 <HAL_Delay>

	return(1);
 80020b8:	2301      	movs	r3, #1
 80020ba:	e005      	b.n	80020c8 <PowerOnLowSupplies+0x6c>
		printString("Fail");
 80020bc:	480a      	ldr	r0, [pc, #40]	@ (80020e8 <PowerOnLowSupplies+0x8c>)
 80020be:	f7fe fb73 	bl	80007a8 <printString>
		PowerOffLowSupplies();
 80020c2:	f7ff ff63 	bl	8001f8c <PowerOffLowSupplies>
		return(0);
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	58020c00 	.word	0x58020c00
 80020d0:	08014d7c 	.word	0x08014d7c
 80020d4:	24000330 	.word	0x24000330
 80020d8:	24000004 	.word	0x24000004
 80020dc:	08014d90 	.word	0x08014d90
 80020e0:	24000a40 	.word	0x24000a40
 80020e4:	08014d9c 	.word	0x08014d9c
 80020e8:	08014d94 	.word	0x08014d94

080020ec <PowerOnHighSupplies>:

//Power On Supply 500V
//Returns 1 if the power up was successful, and 0 if it failed
int PowerOnHighSupplies(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
	stopHbridge(); 	//Make sure the H-bridge outputs are zero before enabling the line driver
 80020f0:	f7fe fc2a 	bl	8000948 <stopHbridge>

	//Enable Line Drive 1
	printString("\n\rEnable Line Drive 1");
 80020f4:	481d      	ldr	r0, [pc, #116]	@ (800216c <PowerOnHighSupplies+0x80>)
 80020f6:	f7fe fb57 	bl	80007a8 <printString>
	HAL_GPIO_WritePin(LINE_DRIVER1_ENABLE_GPIO_Port, LINE_DRIVER1_ENABLE_Pin, GPIO_PIN_RESET);
 80020fa:	2200      	movs	r2, #0
 80020fc:	2104      	movs	r1, #4
 80020fe:	481c      	ldr	r0, [pc, #112]	@ (8002170 <PowerOnHighSupplies+0x84>)
 8002100:	f009 f8bc 	bl	800b27c <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8002104:	2001      	movs	r0, #1
 8002106:	f002 fe83 	bl	8004e10 <HAL_Delay>

	//Power on 500V
	printString("\n\rPower on 500V - ");
 800210a:	481a      	ldr	r0, [pc, #104]	@ (8002174 <PowerOnHighSupplies+0x88>)
 800210c:	f7fe fb4c 	bl	80007a8 <printString>
	HAL_GPIO_WritePin(OUT_500V_ENABLE_GPIO_Port, OUT_500V_ENABLE_Pin, GPIO_PIN_RESET);	//There is an inverter between MCU and the output, thus RESET
 8002110:	2200      	movs	r2, #0
 8002112:	2101      	movs	r1, #1
 8002114:	4818      	ldr	r0, [pc, #96]	@ (8002178 <PowerOnHighSupplies+0x8c>)
 8002116:	f009 f8b1 	bl	800b27c <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 800211a:	2001      	movs	r0, #1
 800211c:	f002 fe78 	bl	8004e10 <HAL_Delay>

	//Start reading ADC3 channels
	measureVoltagesTemperaturesADC3();
 8002120:	f7ff fde2 	bl	8001ce8 <measureVoltagesTemperaturesADC3>
	//Wait until ADC reading is done
	while (sADC.adc3_reading) ;
 8002124:	bf00      	nop
 8002126:	4b15      	ldr	r3, [pc, #84]	@ (800217c <PowerOnHighSupplies+0x90>)
 8002128:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	@ 0x70c
 800212c:	b29b      	uxth	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f9      	bne.n	8002126 <PowerOnHighSupplies+0x3a>

	//Check 500V voltage
	if (sADC.adc3_data[ADC3_500VDC] >= sADC3threshold[ADC3_500VDC])
 8002132:	4b12      	ldr	r3, [pc, #72]	@ (800217c <PowerOnHighSupplies+0x90>)
 8002134:	f8b3 24ba 	ldrh.w	r2, [r3, #1210]	@ 0x4ba
 8002138:	4b11      	ldr	r3, [pc, #68]	@ (8002180 <PowerOnHighSupplies+0x94>)
 800213a:	895b      	ldrh	r3, [r3, #10]
 800213c:	429a      	cmp	r2, r3
 800213e:	d306      	bcc.n	800214e <PowerOnHighSupplies+0x62>
	{
		printString("Ok");
 8002140:	4810      	ldr	r0, [pc, #64]	@ (8002184 <PowerOnHighSupplies+0x98>)
 8002142:	f7fe fb31 	bl	80007a8 <printString>
		supply_status.sHV = 1;
 8002146:	4b10      	ldr	r3, [pc, #64]	@ (8002188 <PowerOnHighSupplies+0x9c>)
 8002148:	2201      	movs	r2, #1
 800214a:	709a      	strb	r2, [r3, #2]
 800214c:	e002      	b.n	8002154 <PowerOnHighSupplies+0x68>
	}
	else
	{
		//printString("Fail");
		printString("debug");
 800214e:	480f      	ldr	r0, [pc, #60]	@ (800218c <PowerOnHighSupplies+0xa0>)
 8002150:	f7fe fb2a 	bl	80007a8 <printString>
		//PowerOffHighSupplies();
		//return(0);
	}

	//Signal to robot controller all power supplies are active
	HAL_GPIO_WritePin(LED_ACTIVE_GPIO_Port, LED_ACTIVE_Pin, GPIO_PIN_RESET);	//There is an inverter between MCU and the output, thus RESET
 8002154:	2200      	movs	r2, #0
 8002156:	2101      	movs	r1, #1
 8002158:	480d      	ldr	r0, [pc, #52]	@ (8002190 <PowerOnHighSupplies+0xa4>)
 800215a:	f009 f88f 	bl	800b27c <HAL_GPIO_WritePin>

	powerStatus = V500_ON;
 800215e:	4b0d      	ldr	r3, [pc, #52]	@ (8002194 <PowerOnHighSupplies+0xa8>)
 8002160:	2201      	movs	r2, #1
 8002162:	801a      	strh	r2, [r3, #0]

	return(1);
 8002164:	2301      	movs	r3, #1
}
 8002166:	4618      	mov	r0, r3
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	08014db4 	.word	0x08014db4
 8002170:	58020400 	.word	0x58020400
 8002174:	08014dcc 	.word	0x08014dcc
 8002178:	58021800 	.word	0x58021800
 800217c:	24000330 	.word	0x24000330
 8002180:	24000004 	.word	0x24000004
 8002184:	08014d90 	.word	0x08014d90
 8002188:	24000a40 	.word	0x24000a40
 800218c:	08014de0 	.word	0x08014de0
 8002190:	58021000 	.word	0x58021000
 8002194:	24000a44 	.word	0x24000a44

08002198 <HAL_GPIO_EXTI_Callback>:


// GPIO interrupt handler
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	80fb      	strh	r3, [r7, #6]
	if (sFlashConfig.mode == RUN_MODE)
 80021a2:	4b07      	ldr	r3, [pc, #28]	@ (80021c0 <HAL_GPIO_EXTI_Callback+0x28>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d105      	bne.n	80021b6 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		// Power off request received
		if(GPIO_Pin == POWER_OFF_IRQ_Pin)
 80021aa:	88fb      	ldrh	r3, [r7, #6]
 80021ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80021b0:	d101      	bne.n	80021b6 <HAL_GPIO_EXTI_Callback+0x1e>
			PowerOffSupplies();
 80021b2:	f7ff ff4b 	bl	800204c <PowerOffSupplies>
	}
}
 80021b6:	bf00      	nop
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	24000a48 	.word	0x24000a48

080021c4 <InitializeConfigMenu>:

// Initialize the UART3 configuration menu
static void InitializeConfigMenu(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
	int item = 0;
 80021ca:	2300      	movs	r3, #0
 80021cc:	607b      	str	r3, [r7, #4]

	config_menu[item++] = "\n\rPlasma Driver Configuration Menu";
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	1c5a      	adds	r2, r3, #1
 80021d2:	607a      	str	r2, [r7, #4]
 80021d4:	4a0c      	ldr	r2, [pc, #48]	@ (8002208 <InitializeConfigMenu+0x44>)
 80021d6:	490d      	ldr	r1, [pc, #52]	@ (800220c <InitializeConfigMenu+0x48>)
 80021d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	config_menu[item++] = "   m: Change mode (Test/Run)";
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	1c5a      	adds	r2, r3, #1
 80021e0:	607a      	str	r2, [r7, #4]
 80021e2:	4a09      	ldr	r2, [pc, #36]	@ (8002208 <InitializeConfigMenu+0x44>)
 80021e4:	490a      	ldr	r1, [pc, #40]	@ (8002210 <InitializeConfigMenu+0x4c>)
 80021e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if (item > CONFIG_MENU_SIZE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	dd06      	ble.n	80021fe <InitializeConfigMenu+0x3a>
		HAL_UART_Transmit(&huart3, (uint8_t *) "\n\rIncrease CONFIG_MENU_SIZE", 20, 1000);
 80021f0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021f4:	2214      	movs	r2, #20
 80021f6:	4907      	ldr	r1, [pc, #28]	@ (8002214 <InitializeConfigMenu+0x50>)
 80021f8:	4807      	ldr	r0, [pc, #28]	@ (8002218 <InitializeConfigMenu+0x54>)
 80021fa:	f00e fa2e 	bl	801065a <HAL_UART_Transmit>

}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	24000328 	.word	0x24000328
 800220c:	08014de8 	.word	0x08014de8
 8002210:	08014e0c 	.word	0x08014e0c
 8002214:	08014e2c 	.word	0x08014e2c
 8002218:	24000e38 	.word	0x24000e38

0800221c <InitializeMenu>:

// Initialize the UART3 menu
static void InitializeMenu(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
	int item = 0;
 8002222:	2300      	movs	r3, #0
 8002224:	607b      	str	r3, [r7, #4]

	//Clear previous menu
	for (int i=0; i < MAX_MENU_SIZE; ++i)
 8002226:	2300      	movs	r3, #0
 8002228:	603b      	str	r3, [r7, #0]
 800222a:	e007      	b.n	800223c <InitializeMenu+0x20>
	{
		menu[i] = "";
 800222c:	4a4f      	ldr	r2, [pc, #316]	@ (800236c <InitializeMenu+0x150>)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	494f      	ldr	r1, [pc, #316]	@ (8002370 <InitializeMenu+0x154>)
 8002232:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i=0; i < MAX_MENU_SIZE; ++i)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	3301      	adds	r3, #1
 800223a:	603b      	str	r3, [r7, #0]
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	2b0d      	cmp	r3, #13
 8002240:	ddf4      	ble.n	800222c <InitializeMenu+0x10>
	}

	if (sFlashConfig.mode == TEST_MODE)
 8002242:	4b4c      	ldr	r3, [pc, #304]	@ (8002374 <InitializeMenu+0x158>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d162      	bne.n	8002310 <InitializeMenu+0xf4>
	{
		menu[item++] = "\n\rPlasma Driver TEST Menu";
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	1c5a      	adds	r2, r3, #1
 800224e:	607a      	str	r2, [r7, #4]
 8002250:	4a46      	ldr	r2, [pc, #280]	@ (800236c <InitializeMenu+0x150>)
 8002252:	4949      	ldr	r1, [pc, #292]	@ (8002378 <InitializeMenu+0x15c>)
 8002254:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   p: Power on supplies";
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	1c5a      	adds	r2, r3, #1
 800225c:	607a      	str	r2, [r7, #4]
 800225e:	4a43      	ldr	r2, [pc, #268]	@ (800236c <InitializeMenu+0x150>)
 8002260:	4946      	ldr	r1, [pc, #280]	@ (800237c <InitializeMenu+0x160>)
 8002262:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   o: Power off supplies";
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	1c5a      	adds	r2, r3, #1
 800226a:	607a      	str	r2, [r7, #4]
 800226c:	4a3f      	ldr	r2, [pc, #252]	@ (800236c <InitializeMenu+0x150>)
 800226e:	4944      	ldr	r1, [pc, #272]	@ (8002380 <InitializeMenu+0x164>)
 8002270:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   s: Start/stop driving H-Bridge";
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	1c5a      	adds	r2, r3, #1
 8002278:	607a      	str	r2, [r7, #4]
 800227a:	4a3c      	ldr	r2, [pc, #240]	@ (800236c <InitializeMenu+0x150>)
 800227c:	4941      	ldr	r1, [pc, #260]	@ (8002384 <InitializeMenu+0x168>)
 800227e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   f: Set H-bridge frequency (Hz)";
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	1c5a      	adds	r2, r3, #1
 8002286:	607a      	str	r2, [r7, #4]
 8002288:	4a38      	ldr	r2, [pc, #224]	@ (800236c <InitializeMenu+0x150>)
 800228a:	493f      	ldr	r1, [pc, #252]	@ (8002388 <InitializeMenu+0x16c>)
 800228c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   d: Set H-bridge dead time (%)";
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	1c5a      	adds	r2, r3, #1
 8002294:	607a      	str	r2, [r7, #4]
 8002296:	4a35      	ldr	r2, [pc, #212]	@ (800236c <InitializeMenu+0x150>)
 8002298:	493c      	ldr	r1, [pc, #240]	@ (800238c <InitializeMenu+0x170>)
 800229a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   a: Start ADC1 and ADC2 measurement";
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	607a      	str	r2, [r7, #4]
 80022a4:	4a31      	ldr	r2, [pc, #196]	@ (800236c <InitializeMenu+0x150>)
 80022a6:	493a      	ldr	r1, [pc, #232]	@ (8002390 <InitializeMenu+0x174>)
 80022a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   b: Start ADC3 measurement";
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	1c5a      	adds	r2, r3, #1
 80022b0:	607a      	str	r2, [r7, #4]
 80022b2:	4a2e      	ldr	r2, [pc, #184]	@ (800236c <InitializeMenu+0x150>)
 80022b4:	4937      	ldr	r1, [pc, #220]	@ (8002394 <InitializeMenu+0x178>)
 80022b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   q: Frequency correction";
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	1c5a      	adds	r2, r3, #1
 80022be:	607a      	str	r2, [r7, #4]
 80022c0:	4a2a      	ldr	r2, [pc, #168]	@ (800236c <InitializeMenu+0x150>)
 80022c2:	4935      	ldr	r1, [pc, #212]	@ (8002398 <InitializeMenu+0x17c>)
 80022c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   z: Debug output (On/Off)";
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	1c5a      	adds	r2, r3, #1
 80022cc:	607a      	str	r2, [r7, #4]
 80022ce:	4a27      	ldr	r2, [pc, #156]	@ (800236c <InitializeMenu+0x150>)
 80022d0:	4932      	ldr	r1, [pc, #200]	@ (800239c <InitializeMenu+0x180>)
 80022d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   c: Show/Change configuration";
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	1c5a      	adds	r2, r3, #1
 80022da:	607a      	str	r2, [r7, #4]
 80022dc:	4a23      	ldr	r2, [pc, #140]	@ (800236c <InitializeMenu+0x150>)
 80022de:	4930      	ldr	r1, [pc, #192]	@ (80023a0 <InitializeMenu+0x184>)
 80022e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   t: Test GPIO";
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	1c5a      	adds	r2, r3, #1
 80022e8:	607a      	str	r2, [r7, #4]
 80022ea:	4a20      	ldr	r2, [pc, #128]	@ (800236c <InitializeMenu+0x150>)
 80022ec:	492d      	ldr	r1, [pc, #180]	@ (80023a4 <InitializeMenu+0x188>)
 80022ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   y: Auto Frequency Adjustment";
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	1c5a      	adds	r2, r3, #1
 80022f6:	607a      	str	r2, [r7, #4]
 80022f8:	4a1c      	ldr	r2, [pc, #112]	@ (800236c <InitializeMenu+0x150>)
 80022fa:	492b      	ldr	r1, [pc, #172]	@ (80023a8 <InitializeMenu+0x18c>)
 80022fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   u: Auto Voltage Adjustment";
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	1c5a      	adds	r2, r3, #1
 8002304:	607a      	str	r2, [r7, #4]
 8002306:	4a19      	ldr	r2, [pc, #100]	@ (800236c <InitializeMenu+0x150>)
 8002308:	4928      	ldr	r1, [pc, #160]	@ (80023ac <InitializeMenu+0x190>)
 800230a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800230e:	e019      	b.n	8002344 <InitializeMenu+0x128>
	}
	else if ((sFlashConfig.mode == RUN_MODE))
 8002310:	4b18      	ldr	r3, [pc, #96]	@ (8002374 <InitializeMenu+0x158>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d10e      	bne.n	8002336 <InitializeMenu+0x11a>
	{
		menu[item++] = "\n\rPlasma Driver RUN Menu";
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	1c5a      	adds	r2, r3, #1
 800231c:	607a      	str	r2, [r7, #4]
 800231e:	4a13      	ldr	r2, [pc, #76]	@ (800236c <InitializeMenu+0x150>)
 8002320:	4923      	ldr	r1, [pc, #140]	@ (80023b0 <InitializeMenu+0x194>)
 8002322:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   c: Show/Change current configuration";
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	1c5a      	adds	r2, r3, #1
 800232a:	607a      	str	r2, [r7, #4]
 800232c:	4a0f      	ldr	r2, [pc, #60]	@ (800236c <InitializeMenu+0x150>)
 800232e:	4921      	ldr	r1, [pc, #132]	@ (80023b4 <InitializeMenu+0x198>)
 8002330:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8002334:	e006      	b.n	8002344 <InitializeMenu+0x128>
	}
	else
	{
		menu[item++] = "\n\rERROR SETTING UP MENU";
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	1c5a      	adds	r2, r3, #1
 800233a:	607a      	str	r2, [r7, #4]
 800233c:	4a0b      	ldr	r2, [pc, #44]	@ (800236c <InitializeMenu+0x150>)
 800233e:	491e      	ldr	r1, [pc, #120]	@ (80023b8 <InitializeMenu+0x19c>)
 8002340:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	menu_size = item;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	b29a      	uxth	r2, r3
 8002348:	4b1c      	ldr	r3, [pc, #112]	@ (80023bc <InitializeMenu+0x1a0>)
 800234a:	801a      	strh	r2, [r3, #0]

	if (menu_size> MAX_MENU_SIZE)
 800234c:	4b1b      	ldr	r3, [pc, #108]	@ (80023bc <InitializeMenu+0x1a0>)
 800234e:	881b      	ldrh	r3, [r3, #0]
 8002350:	2b0e      	cmp	r3, #14
 8002352:	d906      	bls.n	8002362 <InitializeMenu+0x146>
		HAL_UART_Transmit(&huart3, (uint8_t *) "\n\rIncrease MENU_SIZE", 20, 1000);
 8002354:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002358:	2214      	movs	r2, #20
 800235a:	4919      	ldr	r1, [pc, #100]	@ (80023c0 <InitializeMenu+0x1a4>)
 800235c:	4819      	ldr	r0, [pc, #100]	@ (80023c4 <InitializeMenu+0x1a8>)
 800235e:	f00e f97c 	bl	801065a <HAL_UART_Transmit>

}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	240002ec 	.word	0x240002ec
 8002370:	08014e48 	.word	0x08014e48
 8002374:	24000a48 	.word	0x24000a48
 8002378:	08014e4c 	.word	0x08014e4c
 800237c:	08014e68 	.word	0x08014e68
 8002380:	08014e80 	.word	0x08014e80
 8002384:	08014e9c 	.word	0x08014e9c
 8002388:	08014ec0 	.word	0x08014ec0
 800238c:	08014ee4 	.word	0x08014ee4
 8002390:	08014f08 	.word	0x08014f08
 8002394:	08014f30 	.word	0x08014f30
 8002398:	08014f50 	.word	0x08014f50
 800239c:	08014f6c 	.word	0x08014f6c
 80023a0:	08014f88 	.word	0x08014f88
 80023a4:	08014fa8 	.word	0x08014fa8
 80023a8:	08014fb8 	.word	0x08014fb8
 80023ac:	08014fd8 	.word	0x08014fd8
 80023b0:	08014ff8 	.word	0x08014ff8
 80023b4:	08015014 	.word	0x08015014
 80023b8:	0801503c 	.word	0x0801503c
 80023bc:	24000324 	.word	0x24000324
 80023c0:	08015054 	.word	0x08015054
 80023c4:	24000e38 	.word	0x24000e38

080023c8 <ShowChangeConfigFlash>:

// Show configuration. Add option to change configuration
void ShowChangeConfigFlash(void)
{
 80023c8:	b590      	push	{r4, r7, lr}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
	uint16_t aYes;
	uint16_t mode;
	char input;

	printConfigFlash();
 80023ce:	f7fe fa01 	bl	80007d4 <printConfigFlash>
	printString("\n\rChange configuration (0:No 1:Yes)? ");
 80023d2:	482e      	ldr	r0, [pc, #184]	@ (800248c <ShowChangeConfigFlash+0xc4>)
 80023d4:	f7fe f9e8 	bl	80007a8 <printString>
	if (GetUint16Input(&aYes, 1, 0, 1))
 80023d8:	f107 000a 	add.w	r0, r7, #10
 80023dc:	2301      	movs	r3, #1
 80023de:	2200      	movs	r2, #0
 80023e0:	2101      	movs	r1, #1
 80023e2:	f7ff fd23 	bl	8001e2c <GetUint16Input>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d04b      	beq.n	8002484 <ShowChangeConfigFlash+0xbc>
	{
		if (aYes)
 80023ec:	897b      	ldrh	r3, [r7, #10]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d048      	beq.n	8002484 <ShowChangeConfigFlash+0xbc>
		{
			for (int i=0; i<CONFIG_MENU_SIZE; i++)
 80023f2:	2300      	movs	r3, #0
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	e017      	b.n	8002428 <ShowChangeConfigFlash+0x60>
			{
				HAL_UART_Transmit(&huart3, (uint8_t *) config_menu[i], strlen(config_menu[i]), 1000);
 80023f8:	4a25      	ldr	r2, [pc, #148]	@ (8002490 <ShowChangeConfigFlash+0xc8>)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8002400:	4a23      	ldr	r2, [pc, #140]	@ (8002490 <ShowChangeConfigFlash+0xc8>)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002408:	4618      	mov	r0, r3
 800240a:	f7fd ffe1 	bl	80003d0 <strlen>
 800240e:	4603      	mov	r3, r0
 8002410:	b29a      	uxth	r2, r3
 8002412:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002416:	4621      	mov	r1, r4
 8002418:	481e      	ldr	r0, [pc, #120]	@ (8002494 <ShowChangeConfigFlash+0xcc>)
 800241a:	f00e f91e 	bl	801065a <HAL_UART_Transmit>
				printCR();
 800241e:	f7fe f9b3 	bl	8000788 <printCR>
			for (int i=0; i<CONFIG_MENU_SIZE; i++)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	3301      	adds	r3, #1
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2b01      	cmp	r3, #1
 800242c:	dde4      	ble.n	80023f8 <ShowChangeConfigFlash+0x30>
			}
			printCR();
 800242e:	f7fe f9ab 	bl	8000788 <printCR>

			//Wait for user input
			if (HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 60000) == HAL_OK)
 8002432:	1df9      	adds	r1, r7, #7
 8002434:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8002438:	2201      	movs	r2, #1
 800243a:	4816      	ldr	r0, [pc, #88]	@ (8002494 <ShowChangeConfigFlash+0xcc>)
 800243c:	f00e f99b 	bl	8010776 <HAL_UART_Receive>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d11e      	bne.n	8002484 <ShowChangeConfigFlash+0xbc>
			{
				switch (input)
 8002446:	79fb      	ldrb	r3, [r7, #7]
 8002448:	2b6d      	cmp	r3, #109	@ 0x6d
 800244a:	d11b      	bne.n	8002484 <ShowChangeConfigFlash+0xbc>
				{
					case 'm': //Change mode
						printString("\n\rChange mode (0:Test 1:Run)? ");
 800244c:	4812      	ldr	r0, [pc, #72]	@ (8002498 <ShowChangeConfigFlash+0xd0>)
 800244e:	f7fe f9ab 	bl	80007a8 <printString>
						if (GetUint16Input(&mode, 1, 0, 1))
 8002452:	f107 0008 	add.w	r0, r7, #8
 8002456:	2301      	movs	r3, #1
 8002458:	2200      	movs	r2, #0
 800245a:	2101      	movs	r1, #1
 800245c:	f7ff fce6 	bl	8001e2c <GetUint16Input>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d00d      	beq.n	8002482 <ShowChangeConfigFlash+0xba>
						{   // Data entry valid
							if (sFlashConfig.mode != mode)
 8002466:	4b0d      	ldr	r3, [pc, #52]	@ (800249c <ShowChangeConfigFlash+0xd4>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	461a      	mov	r2, r3
 800246c:	893b      	ldrh	r3, [r7, #8]
 800246e:	429a      	cmp	r2, r3
 8002470:	d007      	beq.n	8002482 <ShowChangeConfigFlash+0xba>
							{
								sFlashConfig.mode = mode;
 8002472:	893b      	ldrh	r3, [r7, #8]
 8002474:	b2da      	uxtb	r2, r3
 8002476:	4b09      	ldr	r3, [pc, #36]	@ (800249c <ShowChangeConfigFlash+0xd4>)
 8002478:	701a      	strb	r2, [r3, #0]
								InitializeMenu();
 800247a:	f7ff fecf 	bl	800221c <InitializeMenu>
								writeConfigFlash();
 800247e:	f7fe f939 	bl	80006f4 <writeConfigFlash>
							}
						}
					break;
 8002482:	bf00      	nop
				}
			}
		}
	}
}
 8002484:	bf00      	nop
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	bd90      	pop	{r4, r7, pc}
 800248c:	0801506c 	.word	0x0801506c
 8002490:	24000328 	.word	0x24000328
 8002494:	24000e38 	.word	0x24000e38
 8002498:	08015094 	.word	0x08015094
 800249c:	24000a48 	.word	0x24000a48

080024a0 <testGPIO>:

//Test GPIO settings
void testGPIO(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0

		printString("\n\rClear LED_GREEN");
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
		GetUint16Input(&aYes, 1, 0, 1);
*/
}
 80024a4:	bf00      	nop
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <RunModeAction>:

// Action table for the run mode menu
static void RunModeAction(char input)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b082      	sub	sp, #8
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	4603      	mov	r3, r0
 80024b6:	71fb      	strb	r3, [r7, #7]
	switch (input)
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	2b63      	cmp	r3, #99	@ 0x63
 80024bc:	d102      	bne.n	80024c4 <RunModeAction+0x16>
	{
		case 'c': //Show/Change current configuration
			ShowChangeConfigFlash();
 80024be:	f7ff ff83 	bl	80023c8 <ShowChangeConfigFlash>
			break;
 80024c2:	bf00      	nop
	}
}
 80024c4:	bf00      	nop
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <TestModeAction>:

// Action table for the test mode menu
static void TestModeAction(char input)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b09c      	sub	sp, #112	@ 0x70
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	71fb      	strb	r3, [r7, #7]
	switch (input)
 80024d6:	79fb      	ldrb	r3, [r7, #7]
 80024d8:	3b61      	subs	r3, #97	@ 0x61
 80024da:	2b19      	cmp	r3, #25
 80024dc:	f200 80fd 	bhi.w	80026da <TestModeAction+0x20e>
 80024e0:	a201      	add	r2, pc, #4	@ (adr r2, 80024e8 <TestModeAction+0x1c>)
 80024e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e6:	bf00      	nop
 80024e8:	08002587 	.word	0x08002587
 80024ec:	080025af 	.word	0x080025af
 80024f0:	0800268d 	.word	0x0800268d
 80024f4:	080025f1 	.word	0x080025f1
 80024f8:	080026db 	.word	0x080026db
 80024fc:	080025c7 	.word	0x080025c7
 8002500:	080026db 	.word	0x080026db
 8002504:	080026db 	.word	0x080026db
 8002508:	080026db 	.word	0x080026db
 800250c:	080026db 	.word	0x080026db
 8002510:	080026db 	.word	0x080026db
 8002514:	080026db 	.word	0x080026db
 8002518:	080026db 	.word	0x080026db
 800251c:	080026db 	.word	0x080026db
 8002520:	0800257b 	.word	0x0800257b
 8002524:	08002551 	.word	0x08002551
 8002528:	0800263d 	.word	0x0800263d
 800252c:	080026db 	.word	0x080026db
 8002530:	08002617 	.word	0x08002617
 8002534:	08002693 	.word	0x08002693
 8002538:	0800269f 	.word	0x0800269f
 800253c:	080026db 	.word	0x080026db
 8002540:	080026db 	.word	0x080026db
 8002544:	080026db 	.word	0x080026db
 8002548:	08002699 	.word	0x08002699
 800254c:	0800266b 	.word	0x0800266b
	{
		case 'p': //Power supplies on
			if (powerStatus == V500_OFF)
 8002550:	4b64      	ldr	r3, [pc, #400]	@ (80026e4 <TestModeAction+0x218>)
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d10c      	bne.n	8002572 <TestModeAction+0xa6>
			{
				if (PowerOnHighSupplies() == POWERON_FAILED)
 8002558:	f7ff fdc8 	bl	80020ec <PowerOnHighSupplies>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d103      	bne.n	800256a <TestModeAction+0x9e>
				{
					printString("\n\rPower on failed\n\r");
 8002562:	4861      	ldr	r0, [pc, #388]	@ (80026e8 <TestModeAction+0x21c>)
 8002564:	f7fe f920 	bl	80007a8 <printString>
			}
			else
			{
				printString("\n\rPower supplies are on\n\r");
			}
			break;
 8002568:	e0b7      	b.n	80026da <TestModeAction+0x20e>
					printString("\n\rPower on succeeded\n\r");
 800256a:	4860      	ldr	r0, [pc, #384]	@ (80026ec <TestModeAction+0x220>)
 800256c:	f7fe f91c 	bl	80007a8 <printString>
			break;
 8002570:	e0b3      	b.n	80026da <TestModeAction+0x20e>
				printString("\n\rPower supplies are on\n\r");
 8002572:	485f      	ldr	r0, [pc, #380]	@ (80026f0 <TestModeAction+0x224>)
 8002574:	f7fe f918 	bl	80007a8 <printString>
			break;
 8002578:	e0af      	b.n	80026da <TestModeAction+0x20e>

		case 'o': //Power supplies off
			printString("\n\rPower off supplies\n\r");
 800257a:	485e      	ldr	r0, [pc, #376]	@ (80026f4 <TestModeAction+0x228>)
 800257c:	f7fe f914 	bl	80007a8 <printString>
			PowerOffHighSupplies();
 8002580:	f7ff fd38 	bl	8001ff4 <PowerOffHighSupplies>
			break;
 8002584:	e0a9      	b.n	80026da <TestModeAction+0x20e>

		case 'a': //Start ADC1 and ADC2 analog voltage measurement
			if (sHbridge.on)
 8002586:	4b5c      	ldr	r3, [pc, #368]	@ (80026f8 <TestModeAction+0x22c>)
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00b      	beq.n	80025a6 <TestModeAction+0xda>
			{
				//Setup to read ADC1 and ADC2 channels
				//Reading will start at TIM1 CH1 0->1 interrupt
				measureBridgePlasmaADC12();
 800258e:	f7fe fffb 	bl	8001588 <measureBridgePlasmaADC12>
				//Wait until ADC3 reading is done
				while (sADC.adc12_reading) ;
 8002592:	bf00      	nop
 8002594:	4b59      	ldr	r3, [pc, #356]	@ (80026fc <TestModeAction+0x230>)
 8002596:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	@ 0x70e
 800259a:	b29b      	uxth	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1f9      	bne.n	8002594 <TestModeAction+0xc8>
				//Print ADC3 data on UART3
				printADC12data();
 80025a0:	f7fe fd6e 	bl	8001080 <printADC12data>
			}
			else
			{
				printString("\n\r ---- H-Bridge needs to be on");
			}
			break;
 80025a4:	e099      	b.n	80026da <TestModeAction+0x20e>
				printString("\n\r ---- H-Bridge needs to be on");
 80025a6:	4856      	ldr	r0, [pc, #344]	@ (8002700 <TestModeAction+0x234>)
 80025a8:	f7fe f8fe 	bl	80007a8 <printString>
			break;
 80025ac:	e095      	b.n	80026da <TestModeAction+0x20e>

		case 'b': //Start ADC3 analog voltage measurement
				//Start reading ADC3 channels
				measureVoltagesTemperaturesADC3();
 80025ae:	f7ff fb9b 	bl	8001ce8 <measureVoltagesTemperaturesADC3>
				//Wait until ADC3 reading is done
				while (sADC.adc3_reading) ;
 80025b2:	bf00      	nop
 80025b4:	4b51      	ldr	r3, [pc, #324]	@ (80026fc <TestModeAction+0x230>)
 80025b6:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	@ 0x70c
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1f9      	bne.n	80025b4 <TestModeAction+0xe8>
				//Print ADC3 data on UART3
				printADC3data();
 80025c0:	f7ff fb4c 	bl	8001c5c <printADC3data>
			break;
 80025c4:	e089      	b.n	80026da <TestModeAction+0x20e>

		case 'f': //Enter frequency (Hz)
			printHbridgeData();
 80025c6:	f7fe f9ed 	bl	80009a4 <printHbridgeData>
			printString("\n\rEnter frequency (Hz): ");
 80025ca:	484e      	ldr	r0, [pc, #312]	@ (8002704 <TestModeAction+0x238>)
 80025cc:	f7fe f8ec 	bl	80007a8 <printString>
			if (GetUint16Input(&sHbridge.frequency, 1, MIN_FREQUENCY, MAX_FREQUENCY))
 80025d0:	f64f 53e8 	movw	r3, #65000	@ 0xfde8
 80025d4:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80025d8:	2101      	movs	r1, #1
 80025da:	484b      	ldr	r0, [pc, #300]	@ (8002708 <TestModeAction+0x23c>)
 80025dc:	f7ff fc26 	bl	8001e2c <GetUint16Input>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d070      	beq.n	80026c8 <TestModeAction+0x1fc>
			{   // Data entry valid
				programHbridge();
 80025e6:	f7fe fa07 	bl	80009f8 <programHbridge>
				printHbridgeData();
 80025ea:	f7fe f9db 	bl	80009a4 <printHbridgeData>
			}
			break;
 80025ee:	e06b      	b.n	80026c8 <TestModeAction+0x1fc>

		case 'd': //Enter dead time (%)
			printHbridgeData();
 80025f0:	f7fe f9d8 	bl	80009a4 <printHbridgeData>
			printString("\n\rEnter dead time (%): ");
 80025f4:	4845      	ldr	r0, [pc, #276]	@ (800270c <TestModeAction+0x240>)
 80025f6:	f7fe f8d7 	bl	80007a8 <printString>
			if (GetUint16Input(&sHbridge.deadtime, 1, MIN_DEADTIME, MAX_DEADTIME))
 80025fa:	2328      	movs	r3, #40	@ 0x28
 80025fc:	2201      	movs	r2, #1
 80025fe:	2101      	movs	r1, #1
 8002600:	4843      	ldr	r0, [pc, #268]	@ (8002710 <TestModeAction+0x244>)
 8002602:	f7ff fc13 	bl	8001e2c <GetUint16Input>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d05f      	beq.n	80026cc <TestModeAction+0x200>
			{   // Data entry valid
				programHbridge();
 800260c:	f7fe f9f4 	bl	80009f8 <programHbridge>
				printHbridgeData();
 8002610:	f7fe f9c8 	bl	80009a4 <printHbridgeData>
			}
			break;
 8002614:	e05a      	b.n	80026cc <TestModeAction+0x200>

		case 's': //Start/stop driving H-bridge
			printHbridgeData();
 8002616:	f7fe f9c5 	bl	80009a4 <printHbridgeData>
			printString("\n\rDrive H-bridge 1:Yes 0:No : ");
 800261a:	483e      	ldr	r0, [pc, #248]	@ (8002714 <TestModeAction+0x248>)
 800261c:	f7fe f8c4 	bl	80007a8 <printString>
			if (GetUint16Input(&sHbridge.on, 1, 0, 1))
 8002620:	2301      	movs	r3, #1
 8002622:	2200      	movs	r2, #0
 8002624:	2101      	movs	r1, #1
 8002626:	4834      	ldr	r0, [pc, #208]	@ (80026f8 <TestModeAction+0x22c>)
 8002628:	f7ff fc00 	bl	8001e2c <GetUint16Input>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d04e      	beq.n	80026d0 <TestModeAction+0x204>
			{   // Data entry valid
				programHbridge();
 8002632:	f7fe f9e1 	bl	80009f8 <programHbridge>
				printHbridgeData();
 8002636:	f7fe f9b5 	bl	80009a4 <printHbridgeData>
			}
			break;
 800263a:	e049      	b.n	80026d0 <TestModeAction+0x204>

		case 'q': //Frequency correction
			int16_t freqCorr;
			if (freqCorrection(&freqCorr))
 800263c:	f107 036e 	add.w	r3, r7, #110	@ 0x6e
 8002640:	4618      	mov	r0, r3
 8002642:	f7fe fe6b 	bl	800131c <freqCorrection>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d043      	beq.n	80026d4 <TestModeAction+0x208>
			{
				char text[100];
				sprintf(text, "\n\rFrequency correction: %i", (int) freqCorr);
 800264c:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8002650:	461a      	mov	r2, r3
 8002652:	f107 0308 	add.w	r3, r7, #8
 8002656:	4930      	ldr	r1, [pc, #192]	@ (8002718 <TestModeAction+0x24c>)
 8002658:	4618      	mov	r0, r3
 800265a:	f010 f8bb 	bl	80127d4 <siprintf>
				printString(text);
 800265e:	f107 0308 	add.w	r3, r7, #8
 8002662:	4618      	mov	r0, r3
 8002664:	f7fe f8a0 	bl	80007a8 <printString>
			}
			break;
 8002668:	e034      	b.n	80026d4 <TestModeAction+0x208>

		case 'z': //Debug output
			printNumber("\n\rCurrent Debug output: ", debug, 0);
 800266a:	4b2c      	ldr	r3, [pc, #176]	@ (800271c <TestModeAction+0x250>)
 800266c:	881b      	ldrh	r3, [r3, #0]
 800266e:	2200      	movs	r2, #0
 8002670:	4619      	mov	r1, r3
 8002672:	482b      	ldr	r0, [pc, #172]	@ (8002720 <TestModeAction+0x254>)
 8002674:	f7fe f8da 	bl	800082c <printNumber>
			printString("\n\rSet Debug output 1:On 0:Off : ");
 8002678:	482a      	ldr	r0, [pc, #168]	@ (8002724 <TestModeAction+0x258>)
 800267a:	f7fe f895 	bl	80007a8 <printString>
			GetUint16Input(&debug, 1, 0, 1);
 800267e:	2301      	movs	r3, #1
 8002680:	2200      	movs	r2, #0
 8002682:	2101      	movs	r1, #1
 8002684:	4825      	ldr	r0, [pc, #148]	@ (800271c <TestModeAction+0x250>)
 8002686:	f7ff fbd1 	bl	8001e2c <GetUint16Input>
			break;
 800268a:	e026      	b.n	80026da <TestModeAction+0x20e>

		case 'c': //Show/Change current configuration
			ShowChangeConfigFlash();
 800268c:	f7ff fe9c 	bl	80023c8 <ShowChangeConfigFlash>
			break;
 8002690:	e023      	b.n	80026da <TestModeAction+0x20e>

		case 't': //Test GPIO
			testGPIO();
 8002692:	f7ff ff05 	bl	80024a0 <testGPIO>
			break;
 8002696:	e020      	b.n	80026da <TestModeAction+0x20e>

		case 'y': //Auto Freq Adjust
			autoFreqAdj();
 8002698:	f7ff f902 	bl	80018a0 <autoFreqAdj>
			break;
 800269c:	e01d      	b.n	80026da <TestModeAction+0x20e>
		case 'u': //Auto Freq Adjust
			printString("Desired Voltage: ");
 800269e:	4822      	ldr	r0, [pc, #136]	@ (8002728 <TestModeAction+0x25c>)
 80026a0:	f7fe f882 	bl	80007a8 <printString>
			uint16_t userVoltage;
			//Max and min valid voltages
			if (GetUint16Input(&userVoltage, 1, 0, 5000))
 80026a4:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 80026a8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80026ac:	2200      	movs	r2, #0
 80026ae:	2101      	movs	r1, #1
 80026b0:	f7ff fbbc 	bl	8001e2c <GetUint16Input>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00e      	beq.n	80026d8 <TestModeAction+0x20c>
			{   // Data entry valid
				autoVoltageAdj(userVoltage);
 80026ba:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80026be:	b21b      	sxth	r3, r3
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff f953 	bl	800196c <autoVoltageAdj>
			}
			break;
 80026c6:	e007      	b.n	80026d8 <TestModeAction+0x20c>
			break;
 80026c8:	bf00      	nop
 80026ca:	e006      	b.n	80026da <TestModeAction+0x20e>
			break;
 80026cc:	bf00      	nop
 80026ce:	e004      	b.n	80026da <TestModeAction+0x20e>
			break;
 80026d0:	bf00      	nop
 80026d2:	e002      	b.n	80026da <TestModeAction+0x20e>
			break;
 80026d4:	bf00      	nop
 80026d6:	e000      	b.n	80026da <TestModeAction+0x20e>
			break;
 80026d8:	bf00      	nop
	}
}
 80026da:	bf00      	nop
 80026dc:	3770      	adds	r7, #112	@ 0x70
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	24000a44 	.word	0x24000a44
 80026e8:	080150b4 	.word	0x080150b4
 80026ec:	080150c8 	.word	0x080150c8
 80026f0:	080150e0 	.word	0x080150e0
 80026f4:	080150fc 	.word	0x080150fc
 80026f8:	2400001c 	.word	0x2400001c
 80026fc:	24000330 	.word	0x24000330
 8002700:	08015114 	.word	0x08015114
 8002704:	08015134 	.word	0x08015134
 8002708:	2400001e 	.word	0x2400001e
 800270c:	08015150 	.word	0x08015150
 8002710:	24000020 	.word	0x24000020
 8002714:	08015168 	.word	0x08015168
 8002718:	08015188 	.word	0x08015188
 800271c:	24000000 	.word	0x24000000
 8002720:	080151a4 	.word	0x080151a4
 8002724:	080151c0 	.word	0x080151c0
 8002728:	080151e4 	.word	0x080151e4

0800272c <adjust_plasma>:

/**
 * Auto frequency and voltage adjustment routine modified for remote control via gui
 */
void adjust_plasma(char log, int voltage)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	4603      	mov	r3, r0
 8002734:	6039      	str	r1, [r7, #0]
 8002736:	71fb      	strb	r3, [r7, #7]

	//Start timer24 which is used to time when each ADC measurement is captured
	HAL_TIM_Base_Start(&htim24);
 8002738:	483c      	ldr	r0, [pc, #240]	@ (800282c <adjust_plasma+0x100>)
 800273a:	f00c f9b1 	bl	800eaa0 <HAL_TIM_Base_Start>


	uint32_t startTime = __HAL_TIM_GET_COUNTER(&htim24);//TIM24->CNT;
 800273e:	4b3b      	ldr	r3, [pc, #236]	@ (800282c <adjust_plasma+0x100>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002744:	617b      	str	r3, [r7, #20]
	measureBridgePlasmaADC12();
 8002746:	f7fe ff1f 	bl	8001588 <measureBridgePlasmaADC12>
	//Wait until ADC3 reading is done
	while (sADC.adc12_reading);
 800274a:	bf00      	nop
 800274c:	4b38      	ldr	r3, [pc, #224]	@ (8002830 <adjust_plasma+0x104>)
 800274e:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	@ 0x70e
 8002752:	b29b      	uxth	r3, r3
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1f9      	bne.n	800274c <adjust_plasma+0x20>
	uint32_t stopTime = __HAL_TIM_GET_COUNTER(&htim24);//TIM24->CNT;
 8002758:	4b34      	ldr	r3, [pc, #208]	@ (800282c <adjust_plasma+0x100>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275e:	613b      	str	r3, [r7, #16]


	//Calculate delta f
	int16_t freqCorr;
	freqCorrection(&freqCorr);
 8002760:	f107 030e 	add.w	r3, r7, #14
 8002764:	4618      	mov	r0, r3
 8002766:	f7fe fdd9 	bl	800131c <freqCorrection>



	if (sHbridge.frequency + freqCorr > MAX_FREQUENCY)
 800276a:	4b32      	ldr	r3, [pc, #200]	@ (8002834 <adjust_plasma+0x108>)
 800276c:	885b      	ldrh	r3, [r3, #2]
 800276e:	461a      	mov	r2, r3
 8002770:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002774:	4413      	add	r3, r2
 8002776:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 800277a:	4293      	cmp	r3, r2
 800277c:	dd04      	ble.n	8002788 <adjust_plasma+0x5c>
	{   // Calculated freq is higher than max
		sHbridge.frequency = MAX_FREQUENCY;
 800277e:	4b2d      	ldr	r3, [pc, #180]	@ (8002834 <adjust_plasma+0x108>)
 8002780:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 8002784:	805a      	strh	r2, [r3, #2]
 8002786:	e017      	b.n	80027b8 <adjust_plasma+0x8c>
	}
	else if (sHbridge.frequency + freqCorr < MIN_FREQUENCY)
 8002788:	4b2a      	ldr	r3, [pc, #168]	@ (8002834 <adjust_plasma+0x108>)
 800278a:	885b      	ldrh	r3, [r3, #2]
 800278c:	461a      	mov	r2, r3
 800278e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002792:	4413      	add	r3, r2
 8002794:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8002798:	4293      	cmp	r3, r2
 800279a:	dc04      	bgt.n	80027a6 <adjust_plasma+0x7a>
	{
		sHbridge.frequency = MIN_FREQUENCY;
 800279c:	4b25      	ldr	r3, [pc, #148]	@ (8002834 <adjust_plasma+0x108>)
 800279e:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80027a2:	805a      	strh	r2, [r3, #2]
 80027a4:	e008      	b.n	80027b8 <adjust_plasma+0x8c>
	}
	else
	{
		sHbridge.frequency = sHbridge.frequency + freqCorr;
 80027a6:	4b23      	ldr	r3, [pc, #140]	@ (8002834 <adjust_plasma+0x108>)
 80027a8:	885a      	ldrh	r2, [r3, #2]
 80027aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	4413      	add	r3, r2
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002834 <adjust_plasma+0x108>)
 80027b6:	805a      	strh	r2, [r3, #2]


	/*
	 * Voltage correction section
	 */
	if (voltage != -1) {
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80027be:	d028      	beq.n	8002812 <adjust_plasma+0xe6>
		int16_t voltageCorr;
		voltageCorrection(voltage, &voltageCorr);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	b21b      	sxth	r3, r3
 80027c4:	f107 020c 	add.w	r2, r7, #12
 80027c8:	4611      	mov	r1, r2
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fe fe68 	bl	80014a0 <voltageCorrection>


		if (sHbridge.deadtime + voltageCorr > MAX_DEADTIME)
 80027d0:	4b18      	ldr	r3, [pc, #96]	@ (8002834 <adjust_plasma+0x108>)
 80027d2:	889b      	ldrh	r3, [r3, #4]
 80027d4:	461a      	mov	r2, r3
 80027d6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80027da:	4413      	add	r3, r2
 80027dc:	2b28      	cmp	r3, #40	@ 0x28
 80027de:	dd03      	ble.n	80027e8 <adjust_plasma+0xbc>
		{   // Calculated voltage is higher than max
			sHbridge.deadtime = MAX_DEADTIME;
 80027e0:	4b14      	ldr	r3, [pc, #80]	@ (8002834 <adjust_plasma+0x108>)
 80027e2:	2228      	movs	r2, #40	@ 0x28
 80027e4:	809a      	strh	r2, [r3, #4]
 80027e6:	e014      	b.n	8002812 <adjust_plasma+0xe6>
		}
		else if (sHbridge.deadtime + voltageCorr < MIN_DEADTIME)
 80027e8:	4b12      	ldr	r3, [pc, #72]	@ (8002834 <adjust_plasma+0x108>)
 80027ea:	889b      	ldrh	r3, [r3, #4]
 80027ec:	461a      	mov	r2, r3
 80027ee:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80027f2:	4413      	add	r3, r2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	dc03      	bgt.n	8002800 <adjust_plasma+0xd4>
		{
			sHbridge.deadtime = MIN_DEADTIME;
 80027f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002834 <adjust_plasma+0x108>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	809a      	strh	r2, [r3, #4]
 80027fe:	e008      	b.n	8002812 <adjust_plasma+0xe6>
		}
		else
		{
			sHbridge.deadtime = sHbridge.deadtime + voltageCorr;
 8002800:	4b0c      	ldr	r3, [pc, #48]	@ (8002834 <adjust_plasma+0x108>)
 8002802:	889a      	ldrh	r2, [r3, #4]
 8002804:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002808:	b29b      	uxth	r3, r3
 800280a:	4413      	add	r3, r2
 800280c:	b29a      	uxth	r2, r3
 800280e:	4b09      	ldr	r3, [pc, #36]	@ (8002834 <adjust_plasma+0x108>)
 8002810:	809a      	strh	r2, [r3, #4]
		}
	}

	programHbridge();
 8002812:	f7fe f8f1 	bl	80009f8 <programHbridge>

	//Print current ADC data
	if (log == 1) {
 8002816:	79fb      	ldrb	r3, [r7, #7]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d103      	bne.n	8002824 <adjust_plasma+0xf8>
		printHbridgeDatalogging(startTime, stopTime);
 800281c:	6939      	ldr	r1, [r7, #16]
 800281e:	6978      	ldr	r0, [r7, #20]
 8002820:	f7fe ff5e 	bl	80016e0 <printHbridgeDatalogging>
	}


}
 8002824:	bf00      	nop
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	24001048 	.word	0x24001048
 8002830:	24000330 	.word	0x24000330
 8002834:	2400001c 	.word	0x2400001c

08002838 <start_plasma>:


/**
 * Starts plasma and writes the log header if applicable
 */
void start_plasma(char log_flag) {
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	4603      	mov	r3, r0
 8002840:	71fb      	strb	r3, [r7, #7]
	if (log_flag == 1) {
 8002842:	79fb      	ldrb	r3, [r7, #7]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d104      	bne.n	8002852 <start_plasma+0x1a>
		printString("Time(us),Freq (Hz),Deadtime (%),Bridge I,VplaL1,VplaL2,VbriS1,VbriS2");
 8002848:	480b      	ldr	r0, [pc, #44]	@ (8002878 <start_plasma+0x40>)
 800284a:	f7fd ffad 	bl	80007a8 <printString>
		printCR();
 800284e:	f7fd ff9b 	bl	8000788 <printCR>
	}

	PowerOnHighSupplies();
 8002852:	f7ff fc4b 	bl	80020ec <PowerOnHighSupplies>

	sHbridge.deadtime = 1;
 8002856:	4b09      	ldr	r3, [pc, #36]	@ (800287c <start_plasma+0x44>)
 8002858:	2201      	movs	r2, #1
 800285a:	809a      	strh	r2, [r3, #4]
	sHbridge.frequency = 45000;
 800285c:	4b07      	ldr	r3, [pc, #28]	@ (800287c <start_plasma+0x44>)
 800285e:	f64a 72c8 	movw	r2, #45000	@ 0xafc8
 8002862:	805a      	strh	r2, [r3, #2]
	sHbridge.on = 1;
 8002864:	4b05      	ldr	r3, [pc, #20]	@ (800287c <start_plasma+0x44>)
 8002866:	2201      	movs	r2, #1
 8002868:	801a      	strh	r2, [r3, #0]
	programHbridge();
 800286a:	f7fe f8c5 	bl	80009f8 <programHbridge>

}
 800286e:	bf00      	nop
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	08014b94 	.word	0x08014b94
 800287c:	2400001c 	.word	0x2400001c

08002880 <stop_plasma>:


/**
 * Shuts down plasma and places system in a safe state (powers down HV)
 */
void stop_plasma() {
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
	sHbridge.on = 0;
 8002884:	4b04      	ldr	r3, [pc, #16]	@ (8002898 <stop_plasma+0x18>)
 8002886:	2200      	movs	r2, #0
 8002888:	801a      	strh	r2, [r3, #0]
	programHbridge();
 800288a:	f7fe f8b5 	bl	80009f8 <programHbridge>
	PowerOffHighSupplies();
 800288e:	f7ff fbb1 	bl	8001ff4 <PowerOffHighSupplies>
}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	2400001c 	.word	0x2400001c

0800289c <init_rc_state>:
typedef struct rc_state rc_state;

/**
 * Creates and returns an initialized rc_state
 */
static rc_state init_rc_state() {
 800289c:	b490      	push	{r4, r7}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
	rc_state ret_state;
	ret_state.state = IDLE;
 80028a4:	2300      	movs	r3, #0
 80028a6:	723b      	strb	r3, [r7, #8]
	ret_state.logging = 0;
 80028a8:	2300      	movs	r3, #0
 80028aa:	727b      	strb	r3, [r7, #9]
	ret_state.log_rate = 0; //no limit on log rate
 80028ac:	2300      	movs	r3, #0
 80028ae:	60fb      	str	r3, [r7, #12]
	ret_state.rate_counter = 0;
 80028b0:	2300      	movs	r3, #0
 80028b2:	613b      	str	r3, [r7, #16]
	ret_state.voltage = -1; //-1 means no voltage correction
 80028b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80028b8:	617b      	str	r3, [r7, #20]

	return ret_state;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	461c      	mov	r4, r3
 80028be:	f107 0308 	add.w	r3, r7, #8
 80028c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc90      	pop	{r4, r7}
 80028d0:	4770      	bx	lr
	...

080028d4 <init_rc>:


/**
 * Print a string to UART acknowledging remote control
 */
static void init_rc() {
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
	printString("~");
 80028d8:	4802      	ldr	r0, [pc, #8]	@ (80028e4 <init_rc+0x10>)
 80028da:	f7fd ff65 	bl	80007a8 <printString>
}
 80028de:	bf00      	nop
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	080151f8 	.word	0x080151f8

080028e8 <querySupply>:

/**
 * Checks status of queried power supply. Prints status to UART
 */
static void querySupply(char *input) {
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
	if (strcmp(input, "15") == 0)
 80028f0:	491d      	ldr	r1, [pc, #116]	@ (8002968 <querySupply+0x80>)
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7fd fd0c 	bl	8000310 <strcmp>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10b      	bne.n	8002916 <querySupply+0x2e>
	{
		if (supply_status.s15V) {
 80028fe:	4b1b      	ldr	r3, [pc, #108]	@ (800296c <querySupply+0x84>)
 8002900:	785b      	ldrb	r3, [r3, #1]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <querySupply+0x26>
			printString("on");
 8002906:	481a      	ldr	r0, [pc, #104]	@ (8002970 <querySupply+0x88>)
 8002908:	f7fd ff4e 	bl	80007a8 <printString>
		} else {
			printString("off");
		}

	}
}
 800290c:	e028      	b.n	8002960 <querySupply+0x78>
			printString("off");
 800290e:	4819      	ldr	r0, [pc, #100]	@ (8002974 <querySupply+0x8c>)
 8002910:	f7fd ff4a 	bl	80007a8 <printString>
}
 8002914:	e024      	b.n	8002960 <querySupply+0x78>
	} else if (strcmp(input, "3.3") == 0) {
 8002916:	4918      	ldr	r1, [pc, #96]	@ (8002978 <querySupply+0x90>)
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f7fd fcf9 	bl	8000310 <strcmp>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10b      	bne.n	800293c <querySupply+0x54>
		if (supply_status.s3_3V) {
 8002924:	4b11      	ldr	r3, [pc, #68]	@ (800296c <querySupply+0x84>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d003      	beq.n	8002934 <querySupply+0x4c>
			printString("on");
 800292c:	4810      	ldr	r0, [pc, #64]	@ (8002970 <querySupply+0x88>)
 800292e:	f7fd ff3b 	bl	80007a8 <printString>
}
 8002932:	e015      	b.n	8002960 <querySupply+0x78>
			printString("off");
 8002934:	480f      	ldr	r0, [pc, #60]	@ (8002974 <querySupply+0x8c>)
 8002936:	f7fd ff37 	bl	80007a8 <printString>
}
 800293a:	e011      	b.n	8002960 <querySupply+0x78>
	} else if (strcmp(input, "hv") == 0) {
 800293c:	490f      	ldr	r1, [pc, #60]	@ (800297c <querySupply+0x94>)
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7fd fce6 	bl	8000310 <strcmp>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10a      	bne.n	8002960 <querySupply+0x78>
		if (supply_status.sHV) {
 800294a:	4b08      	ldr	r3, [pc, #32]	@ (800296c <querySupply+0x84>)
 800294c:	789b      	ldrb	r3, [r3, #2]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <querySupply+0x72>
			printString("on");
 8002952:	4807      	ldr	r0, [pc, #28]	@ (8002970 <querySupply+0x88>)
 8002954:	f7fd ff28 	bl	80007a8 <printString>
}
 8002958:	e002      	b.n	8002960 <querySupply+0x78>
			printString("off");
 800295a:	4806      	ldr	r0, [pc, #24]	@ (8002974 <querySupply+0x8c>)
 800295c:	f7fd ff24 	bl	80007a8 <printString>
}
 8002960:	bf00      	nop
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	080151fc 	.word	0x080151fc
 800296c:	24000a40 	.word	0x24000a40
 8002970:	08015200 	.word	0x08015200
 8002974:	08015204 	.word	0x08015204
 8002978:	08015208 	.word	0x08015208
 800297c:	0801520c 	.word	0x0801520c

08002980 <toggleSupply>:

/**
 * Toggles the specified supply, returns the new
 * status of the supply via a char = {0, 1}
 */
static char toggleSupply(char *input) {
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
	char status;
	if (strcmp(input, "lv") == 0)
 8002988:	4916      	ldr	r1, [pc, #88]	@ (80029e4 <toggleSupply+0x64>)
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7fd fcc0 	bl	8000310 <strcmp>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10d      	bne.n	80029b2 <toggleSupply+0x32>
	{
		if (supply_status.s3_3V) {
 8002996:	4b14      	ldr	r3, [pc, #80]	@ (80029e8 <toggleSupply+0x68>)
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d004      	beq.n	80029a8 <toggleSupply+0x28>
			status = PowerOffLowSupplies();
 800299e:	f7ff faf5 	bl	8001f8c <PowerOffLowSupplies>
 80029a2:	4603      	mov	r3, r0
 80029a4:	73fb      	strb	r3, [r7, #15]
 80029a6:	e018      	b.n	80029da <toggleSupply+0x5a>
		} else {
			status = PowerOnLowSupplies();
 80029a8:	f7ff fb58 	bl	800205c <PowerOnLowSupplies>
 80029ac:	4603      	mov	r3, r0
 80029ae:	73fb      	strb	r3, [r7, #15]
 80029b0:	e013      	b.n	80029da <toggleSupply+0x5a>
		}

	} else if (strcmp(input, "hv") == 0) {
 80029b2:	490e      	ldr	r1, [pc, #56]	@ (80029ec <toggleSupply+0x6c>)
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f7fd fcab 	bl	8000310 <strcmp>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d10c      	bne.n	80029da <toggleSupply+0x5a>
		if (supply_status.sHV) {
 80029c0:	4b09      	ldr	r3, [pc, #36]	@ (80029e8 <toggleSupply+0x68>)
 80029c2:	789b      	ldrb	r3, [r3, #2]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d004      	beq.n	80029d2 <toggleSupply+0x52>
			status = PowerOffHighSupplies();
 80029c8:	f7ff fb14 	bl	8001ff4 <PowerOffHighSupplies>
 80029cc:	4603      	mov	r3, r0
 80029ce:	73fb      	strb	r3, [r7, #15]
 80029d0:	e003      	b.n	80029da <toggleSupply+0x5a>
		} else {
			status = PowerOnHighSupplies();
 80029d2:	f7ff fb8b 	bl	80020ec <PowerOnHighSupplies>
 80029d6:	4603      	mov	r3, r0
 80029d8:	73fb      	strb	r3, [r7, #15]
		}

	}

	return status;
 80029da:	7bfb      	ldrb	r3, [r7, #15]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	08015210 	.word	0x08015210
 80029e8:	24000a40 	.word	0x24000a40
 80029ec:	0801520c 	.word	0x0801520c

080029f0 <remoteControl>:
/**
 * This routine is entered when the remote control signal is received
 * handles datalogging and accepting control commands from uart
 */
static void remoteControl()
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b0aa      	sub	sp, #168	@ 0xa8
 80029f4:	af00      	add	r7, sp, #0
	rc_state current_state = init_rc_state();
 80029f6:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff ff4e 	bl	800289c <init_rc_state>
	while (1)
	{
		char input[100];

		//Check for input and update state accordingly
		if (HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 1) == HAL_OK)
 8002a00:	4639      	mov	r1, r7
 8002a02:	2301      	movs	r3, #1
 8002a04:	2201      	movs	r2, #1
 8002a06:	48c7      	ldr	r0, [pc, #796]	@ (8002d24 <remoteControl+0x334>)
 8002a08:	f00d feb5 	bl	8010776 <HAL_UART_Receive>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f040 815a 	bne.w	8002cc8 <remoteControl+0x2d8>
		{
			switch (input[0])
 8002a14:	783b      	ldrb	r3, [r7, #0]
 8002a16:	3b61      	subs	r3, #97	@ 0x61
 8002a18:	2b1d      	cmp	r3, #29
 8002a1a:	f200 8155 	bhi.w	8002cc8 <remoteControl+0x2d8>
 8002a1e:	a201      	add	r2, pc, #4	@ (adr r2, 8002a24 <remoteControl+0x34>)
 8002a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a24:	08002c91 	.word	0x08002c91
 8002a28:	08002cc9 	.word	0x08002cc9
 8002a2c:	08002cc9 	.word	0x08002cc9
 8002a30:	08002b2d 	.word	0x08002b2d
 8002a34:	08002cc9 	.word	0x08002cc9
 8002a38:	08002c19 	.word	0x08002c19
 8002a3c:	08002cc9 	.word	0x08002cc9
 8002a40:	08002cc9 	.word	0x08002cc9
 8002a44:	08002cc9 	.word	0x08002cc9
 8002a48:	08002cc9 	.word	0x08002cc9
 8002a4c:	08002cc9 	.word	0x08002cc9
 8002a50:	08002c97 	.word	0x08002c97
 8002a54:	08002cc9 	.word	0x08002cc9
 8002a58:	08002cc9 	.word	0x08002cc9
 8002a5c:	08002cc9 	.word	0x08002cc9
 8002a60:	08002aa3 	.word	0x08002aa3
 8002a64:	08002cb3 	.word	0x08002cb3
 8002a68:	08002cc9 	.word	0x08002cc9
 8002a6c:	08002aef 	.word	0x08002aef
 8002a70:	08002cc9 	.word	0x08002cc9
 8002a74:	08002cc9 	.word	0x08002cc9
 8002a78:	08002bb3 	.word	0x08002bb3
 8002a7c:	08002cc9 	.word	0x08002cc9
 8002a80:	08002cc9 	.word	0x08002cc9
 8002a84:	08002cc9 	.word	0x08002cc9
 8002a88:	08002cc9 	.word	0x08002cc9
 8002a8c:	08002cc9 	.word	0x08002cc9
 8002a90:	08002cc9 	.word	0x08002cc9
 8002a94:	08002cc9 	.word	0x08002cc9
 8002a98:	08002a9d 	.word	0x08002a9d
			{
				//Initialization Query
				case '~':
					init_rc();
 8002a9c:	f7ff ff1a 	bl	80028d4 <init_rc>
					break;
 8002aa0:	e112      	b.n	8002cc8 <remoteControl+0x2d8>

				//power supply related query/command
				case 'p':
					char supply[3];
					supply[0] = input[1];
 8002aa2:	787b      	ldrb	r3, [r7, #1]
 8002aa4:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
					supply[1] = input[2];
 8002aa8:	78bb      	ldrb	r3, [r7, #2]
 8002aaa:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
					supply[2] = input[3];
 8002aae:	78fb      	ldrb	r3, [r7, #3]
 8002ab0:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
					if (input[1] == '?')
 8002ab4:	787b      	ldrb	r3, [r7, #1]
 8002ab6:	2b3f      	cmp	r3, #63	@ 0x3f
 8002ab8:	d105      	bne.n	8002ac6 <remoteControl+0xd6>
					{
						querySupply(supply);
 8002aba:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff ff12 	bl	80028e8 <querySupply>
							printString("on");
						} else {
							printString("off");
						}
					}
					break;
 8002ac4:	e0f9      	b.n	8002cba <remoteControl+0x2ca>
					} else if (input[1] ==  '!')
 8002ac6:	787b      	ldrb	r3, [r7, #1]
 8002ac8:	2b21      	cmp	r3, #33	@ 0x21
 8002aca:	f040 80f6 	bne.w	8002cba <remoteControl+0x2ca>
						if (toggleSupply(supply)) {
 8002ace:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff ff54 	bl	8002980 <toggleSupply>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <remoteControl+0xf6>
							printString("on");
 8002ade:	4892      	ldr	r0, [pc, #584]	@ (8002d28 <remoteControl+0x338>)
 8002ae0:	f7fd fe62 	bl	80007a8 <printString>
					break;
 8002ae4:	e0e9      	b.n	8002cba <remoteControl+0x2ca>
							printString("off");
 8002ae6:	4891      	ldr	r0, [pc, #580]	@ (8002d2c <remoteControl+0x33c>)
 8002ae8:	f7fd fe5e 	bl	80007a8 <printString>
					break;
 8002aec:	e0e5      	b.n	8002cba <remoteControl+0x2ca>

				//start plasma related command
				case 's':

					//Query plasma status
					if (input[1] == '?') {
 8002aee:	787b      	ldrb	r3, [r7, #1]
 8002af0:	2b3f      	cmp	r3, #63	@ 0x3f
 8002af2:	d10b      	bne.n	8002b0c <remoteControl+0x11c>
						if (current_state.state != IDLE) {
 8002af4:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d003      	beq.n	8002b04 <remoteControl+0x114>
							printString("on");
 8002afc:	488a      	ldr	r0, [pc, #552]	@ (8002d28 <remoteControl+0x338>)
 8002afe:	f7fd fe53 	bl	80007a8 <printString>
						} else {
							current_state.state = STOP;
						}
					}

					break;
 8002b02:	e0dc      	b.n	8002cbe <remoteControl+0x2ce>
							printString("off");
 8002b04:	4889      	ldr	r0, [pc, #548]	@ (8002d2c <remoteControl+0x33c>)
 8002b06:	f7fd fe4f 	bl	80007a8 <printString>
					break;
 8002b0a:	e0d8      	b.n	8002cbe <remoteControl+0x2ce>
					} else if (input[1] == '!') { //Toggle plasma state
 8002b0c:	787b      	ldrb	r3, [r7, #1]
 8002b0e:	2b21      	cmp	r3, #33	@ 0x21
 8002b10:	f040 80d5 	bne.w	8002cbe <remoteControl+0x2ce>
						if (current_state.state == IDLE) {
 8002b14:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d103      	bne.n	8002b24 <remoteControl+0x134>
							current_state.state = STRIKE;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
					break;
 8002b22:	e0cc      	b.n	8002cbe <remoteControl+0x2ce>
							current_state.state = STOP;
 8002b24:	2303      	movs	r3, #3
 8002b26:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
					break;
 8002b2a:	e0c8      	b.n	8002cbe <remoteControl+0x2ce>

				//query/modify deadtime
				case 'd':

					if (input[1] == '?'){
 8002b2c:	787b      	ldrb	r3, [r7, #1]
 8002b2e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002b30:	d10e      	bne.n	8002b50 <remoteControl+0x160>
						char output[2];
						sprintf(output, "%d", sHbridge.deadtime);
 8002b32:	4b7f      	ldr	r3, [pc, #508]	@ (8002d30 <remoteControl+0x340>)
 8002b34:	889b      	ldrh	r3, [r3, #4]
 8002b36:	461a      	mov	r2, r3
 8002b38:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8002b3c:	497d      	ldr	r1, [pc, #500]	@ (8002d34 <remoteControl+0x344>)
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f00f fe48 	bl	80127d4 <siprintf>
						printString(output);
 8002b44:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7fd fe2d 	bl	80007a8 <printString>
						break;
 8002b4e:	e0bb      	b.n	8002cc8 <remoteControl+0x2d8>
					} else if (input[1] == '!') {
 8002b50:	787b      	ldrb	r3, [r7, #1]
 8002b52:	2b21      	cmp	r3, #33	@ 0x21
 8002b54:	f040 80b5 	bne.w	8002cc2 <remoteControl+0x2d2>

						//Convert the string deadtime % input into an integer
						int new_deadtime;
						for (int i = 2; i < strlen(input)-2; i++) {
 8002b58:	2302      	movs	r3, #2
 8002b5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002b5e:	e016      	b.n	8002b8e <remoteControl+0x19e>
							new_deadtime += i * atoi(input[i]);
 8002b60:	463a      	mov	r2, r7
 8002b62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b66:	4413      	add	r3, r2
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f00f f856 	bl	8011c1c <atoi>
 8002b70:	4602      	mov	r2, r0
 8002b72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b76:	fb02 f303 	mul.w	r3, r2, r3
 8002b7a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8002b7e:	4413      	add	r3, r2
 8002b80:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
						for (int i = 2; i < strlen(input)-2; i++) {
 8002b84:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b88:	3301      	adds	r3, #1
 8002b8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002b8e:	463b      	mov	r3, r7
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7fd fc1d 	bl	80003d0 <strlen>
 8002b96:	4603      	mov	r3, r0
 8002b98:	1e9a      	subs	r2, r3, #2
 8002b9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d8de      	bhi.n	8002b60 <remoteControl+0x170>
						}

						sHbridge.deadtime = new_deadtime;
 8002ba2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	4b61      	ldr	r3, [pc, #388]	@ (8002d30 <remoteControl+0x340>)
 8002baa:	809a      	strh	r2, [r3, #4]
						programHbridge();
 8002bac:	f7fd ff24 	bl	80009f8 <programHbridge>
					}
					break;
 8002bb0:	e087      	b.n	8002cc2 <remoteControl+0x2d2>

				//query/set voltage
				case 'v':
					if (input[1] == '?') {
 8002bb2:	787b      	ldrb	r3, [r7, #1]
 8002bb4:	2b3f      	cmp	r3, #63	@ 0x3f
 8002bb6:	d10d      	bne.n	8002bd4 <remoteControl+0x1e4>
						char output[10];
						sprintf(output, "%d", current_state.voltage);
 8002bb8:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002bbc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002bc0:	495c      	ldr	r1, [pc, #368]	@ (8002d34 <remoteControl+0x344>)
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f00f fe06 	bl	80127d4 <siprintf>
						printString(output);
 8002bc8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fd fdeb 	bl	80007a8 <printString>
							new_voltage += i * atoi(input[i]);
						}
						current_state.voltage = new_voltage;
					}

					break;
 8002bd2:	e079      	b.n	8002cc8 <remoteControl+0x2d8>
						int i = 1;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
						while (input[i] != '\0') {
 8002bda:	e011      	b.n	8002c00 <remoteControl+0x210>
							new_voltage += i * atoi(input[i]);
 8002bdc:	463a      	mov	r2, r7
 8002bde:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002be2:	4413      	add	r3, r2
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f00f f818 	bl	8011c1c <atoi>
 8002bec:	4602      	mov	r2, r0
 8002bee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002bf2:	fb02 f303 	mul.w	r3, r2, r3
 8002bf6:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8002bfa:	4413      	add	r3, r2
 8002bfc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
						while (input[i] != '\0') {
 8002c00:	463a      	mov	r2, r7
 8002c02:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002c06:	4413      	add	r3, r2
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1e6      	bne.n	8002bdc <remoteControl+0x1ec>
						current_state.voltage = new_voltage;
 8002c0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
					break;
 8002c16:	e057      	b.n	8002cc8 <remoteControl+0x2d8>

				//query/set frequency
				case 'f':
					if (input[1] == '?') {
 8002c18:	787b      	ldrb	r3, [r7, #1]
 8002c1a:	2b3f      	cmp	r3, #63	@ 0x3f
 8002c1c:	d10e      	bne.n	8002c3c <remoteControl+0x24c>
						char output[5];
						sprintf(output, "%d", sHbridge.frequency);
 8002c1e:	4b44      	ldr	r3, [pc, #272]	@ (8002d30 <remoteControl+0x340>)
 8002c20:	885b      	ldrh	r3, [r3, #2]
 8002c22:	461a      	mov	r2, r3
 8002c24:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002c28:	4942      	ldr	r1, [pc, #264]	@ (8002d34 <remoteControl+0x344>)
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f00f fdd2 	bl	80127d4 <siprintf>
						printString(output);
 8002c30:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7fd fdb7 	bl	80007a8 <printString>
						}
						sHbridge.frequency = new_freq;
						programHbridge();
					}

					break;
 8002c3a:	e045      	b.n	8002cc8 <remoteControl+0x2d8>
						int i = 1;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
						while (input[i] != '\0') {
 8002c42:	e016      	b.n	8002c72 <remoteControl+0x282>
							new_freq += i * atoi(input[i]);
 8002c44:	463a      	mov	r2, r7
 8002c46:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c4a:	4413      	add	r3, r2
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f00e ffe4 	bl	8011c1c <atoi>
 8002c54:	4602      	mov	r2, r0
 8002c56:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c5a:	fb02 f303 	mul.w	r3, r2, r3
 8002c5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002c62:	4413      	add	r3, r2
 8002c64:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
							i++;
 8002c68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
						while (input[i] != '\0') {
 8002c72:	463a      	mov	r2, r7
 8002c74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c78:	4413      	add	r3, r2
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1e1      	bne.n	8002c44 <remoteControl+0x254>
						sHbridge.frequency = new_freq;
 8002c80:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	4b2a      	ldr	r3, [pc, #168]	@ (8002d30 <remoteControl+0x340>)
 8002c88:	805a      	strh	r2, [r3, #2]
						programHbridge();
 8002c8a:	f7fd feb5 	bl	80009f8 <programHbridge>
					break;
 8002c8e:	e01b      	b.n	8002cc8 <remoteControl+0x2d8>

				//query adc 3 (supplies/temp)
				case 'a':
					//TODO: this needs to use a modified function that prints csv format
					printADC3data();
 8002c90:	f7fe ffe4 	bl	8001c5c <printADC3data>
					break;
 8002c94:	e018      	b.n	8002cc8 <remoteControl+0x2d8>

				//modify datalogging flag
				case 'l':
					//Enable or disable datalogging flag in struct
					if (input[1] == '1') {
 8002c96:	787b      	ldrb	r3, [r7, #1]
 8002c98:	2b31      	cmp	r3, #49	@ 0x31
 8002c9a:	d103      	bne.n	8002ca4 <remoteControl+0x2b4>
						current_state.logging = 1;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
					} else if (input[1] == '0') {
						current_state.logging = 0;
					}
					break;
 8002ca2:	e010      	b.n	8002cc6 <remoteControl+0x2d6>
					} else if (input[1] == '0') {
 8002ca4:	787b      	ldrb	r3, [r7, #1]
 8002ca6:	2b30      	cmp	r3, #48	@ 0x30
 8002ca8:	d10d      	bne.n	8002cc6 <remoteControl+0x2d6>
						current_state.logging = 0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
					break;
 8002cb0:	e009      	b.n	8002cc6 <remoteControl+0x2d6>

				//Stop plasma (can also be stopped by toggling using 's!'
				case 'q':
					current_state.state = STOP;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
 8002cb8:	e006      	b.n	8002cc8 <remoteControl+0x2d8>
					break;
 8002cba:	bf00      	nop
 8002cbc:	e004      	b.n	8002cc8 <remoteControl+0x2d8>
					break;
 8002cbe:	bf00      	nop
 8002cc0:	e002      	b.n	8002cc8 <remoteControl+0x2d8>
					break;
 8002cc2:	bf00      	nop
 8002cc4:	e000      	b.n	8002cc8 <remoteControl+0x2d8>
					break;
 8002cc6:	bf00      	nop
			}

		}

		//Act on current state
		switch (current_state.state) {
 8002cc8:	f897 3080 	ldrb.w	r3, [r7, #128]	@ 0x80
 8002ccc:	2b03      	cmp	r3, #3
 8002cce:	f63f ae97 	bhi.w	8002a00 <remoteControl+0x10>
 8002cd2:	a201      	add	r2, pc, #4	@ (adr r2, 8002cd8 <remoteControl+0x2e8>)
 8002cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cd8:	08002a01 	.word	0x08002a01
 8002cdc:	08002cef 	.word	0x08002cef
 8002ce0:	08002d01 	.word	0x08002d01
 8002ce4:	08002ce9 	.word	0x08002ce9
			case IDLE:

				break;

			case STOP:
				stop_plasma();
 8002ce8:	f7ff fdca 	bl	8002880 <stop_plasma>
				break;
 8002cec:	e03b      	b.n	8002d66 <remoteControl+0x376>

			case STRIKE:
				start_plasma(current_state.logging);
 8002cee:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff fda0 	bl	8002838 <start_plasma>
				current_state.state = ACTIVE;
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
				break;
 8002cfe:	e032      	b.n	8002d66 <remoteControl+0x376>

			case ACTIVE:
				//This period will be logged (i.e. 'logging_rate' periods have passed since last log update
				if (current_state.rate_counter == current_state.log_rate) {
 8002d00:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8002d04:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d115      	bne.n	8002d38 <remoteControl+0x348>
					adjust_plasma(current_state.logging, current_state.voltage);
 8002d0c:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 8002d10:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002d14:	4611      	mov	r1, r2
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff fd08 	bl	800272c <adjust_plasma>
					current_state.rate_counter = 0;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002d22:	e015      	b.n	8002d50 <remoteControl+0x360>
 8002d24:	24000e38 	.word	0x24000e38
 8002d28:	08015200 	.word	0x08015200
 8002d2c:	08015204 	.word	0x08015204
 8002d30:	2400001c 	.word	0x2400001c
 8002d34:	08015214 	.word	0x08015214
				} else if (current_state.rate_counter != current_state.log_rate) {
 8002d38:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8002d3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d005      	beq.n	8002d50 <remoteControl+0x360>
					adjust_plasma(0, current_state.voltage);
 8002d44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d48:	4619      	mov	r1, r3
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	f7ff fcee 	bl	800272c <adjust_plasma>
				}


				//if a logging rate is specified, the couter is updated. other wise the counter remains at zero
				if (current_state.log_rate != 0) {
 8002d50:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d004      	beq.n	8002d62 <remoteControl+0x372>
					current_state.rate_counter++;
 8002d58:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
				}
				break;
 8002d62:	bf00      	nop
 8002d64:	e64c      	b.n	8002a00 <remoteControl+0x10>
	{
 8002d66:	e64b      	b.n	8002a00 <remoteControl+0x10>

08002d68 <PlasmaDriverMenu>:



// Print the plasma driver menu on UART3, and execute entered command.
static void PlasmaDriverMenu(void)
{
 8002d68:	b590      	push	{r4, r7, lr}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
	char input;

	//Wait for user input
	if (HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 1) == HAL_OK)
 8002d6e:	1cf9      	adds	r1, r7, #3
 8002d70:	2301      	movs	r3, #1
 8002d72:	2201      	movs	r2, #1
 8002d74:	4825      	ldr	r0, [pc, #148]	@ (8002e0c <PlasmaDriverMenu+0xa4>)
 8002d76:	f00d fcfe 	bl	8010776 <HAL_UART_Receive>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d141      	bne.n	8002e04 <PlasmaDriverMenu+0x9c>
	{
		// Return pressed -- Display Menu
		if (input == 13)
 8002d80:	78fb      	ldrb	r3, [r7, #3]
 8002d82:	2b0d      	cmp	r3, #13
 8002d84:	d123      	bne.n	8002dce <PlasmaDriverMenu+0x66>
		{
			for (int i=0; i<menu_size; i++)
 8002d86:	2300      	movs	r3, #0
 8002d88:	607b      	str	r3, [r7, #4]
 8002d8a:	e017      	b.n	8002dbc <PlasmaDriverMenu+0x54>
			{
				HAL_UART_Transmit(&huart3, (uint8_t *) menu[i], strlen(menu[i]), 1000);
 8002d8c:	4a20      	ldr	r2, [pc, #128]	@ (8002e10 <PlasmaDriverMenu+0xa8>)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8002d94:	4a1e      	ldr	r2, [pc, #120]	@ (8002e10 <PlasmaDriverMenu+0xa8>)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7fd fb17 	bl	80003d0 <strlen>
 8002da2:	4603      	mov	r3, r0
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002daa:	4621      	mov	r1, r4
 8002dac:	4817      	ldr	r0, [pc, #92]	@ (8002e0c <PlasmaDriverMenu+0xa4>)
 8002dae:	f00d fc54 	bl	801065a <HAL_UART_Transmit>
				printCR();
 8002db2:	f7fd fce9 	bl	8000788 <printCR>
			for (int i=0; i<menu_size; i++)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3301      	adds	r3, #1
 8002dba:	607b      	str	r3, [r7, #4]
 8002dbc:	4b15      	ldr	r3, [pc, #84]	@ (8002e14 <PlasmaDriverMenu+0xac>)
 8002dbe:	881b      	ldrh	r3, [r3, #0]
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	dbe1      	blt.n	8002d8c <PlasmaDriverMenu+0x24>
			}
			printCR();
 8002dc8:	f7fd fcde 	bl	8000788 <printCR>
				RunModeAction(input);
			else
				printString("\n\r*** ERROR *** Invalid mode");
		}
	}
}
 8002dcc:	e01a      	b.n	8002e04 <PlasmaDriverMenu+0x9c>
		else if (input == '~')
 8002dce:	78fb      	ldrb	r3, [r7, #3]
 8002dd0:	2b7e      	cmp	r3, #126	@ 0x7e
 8002dd2:	d102      	bne.n	8002dda <PlasmaDriverMenu+0x72>
			remoteControl();
 8002dd4:	f7ff fe0c 	bl	80029f0 <remoteControl>
}
 8002dd8:	e014      	b.n	8002e04 <PlasmaDriverMenu+0x9c>
			if (sFlashConfig.mode == TEST_MODE)
 8002dda:	4b0f      	ldr	r3, [pc, #60]	@ (8002e18 <PlasmaDriverMenu+0xb0>)
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d104      	bne.n	8002dec <PlasmaDriverMenu+0x84>
				TestModeAction(input);
 8002de2:	78fb      	ldrb	r3, [r7, #3]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff fb71 	bl	80024cc <TestModeAction>
}
 8002dea:	e00b      	b.n	8002e04 <PlasmaDriverMenu+0x9c>
			else if (sFlashConfig.mode == RUN_MODE)
 8002dec:	4b0a      	ldr	r3, [pc, #40]	@ (8002e18 <PlasmaDriverMenu+0xb0>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d104      	bne.n	8002dfe <PlasmaDriverMenu+0x96>
				RunModeAction(input);
 8002df4:	78fb      	ldrb	r3, [r7, #3]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff fb59 	bl	80024ae <RunModeAction>
}
 8002dfc:	e002      	b.n	8002e04 <PlasmaDriverMenu+0x9c>
				printString("\n\r*** ERROR *** Invalid mode");
 8002dfe:	4807      	ldr	r0, [pc, #28]	@ (8002e1c <PlasmaDriverMenu+0xb4>)
 8002e00:	f7fd fcd2 	bl	80007a8 <printString>
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd90      	pop	{r4, r7, pc}
 8002e0c:	24000e38 	.word	0x24000e38
 8002e10:	240002ec 	.word	0x240002ec
 8002e14:	24000324 	.word	0x24000324
 8002e18:	24000a48 	.word	0x24000a48
 8002e1c:	08015218 	.word	0x08015218

08002e20 <PlasmaDriverInit>:

// Initialize the plasma driver
void PlasmaDriverInit(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
	//Initialie power supply struct
	init_supply_struct();
 8002e24:	f7fd fc54 	bl	80006d0 <init_supply_struct>

	//Enable line driver 2 (HAL has initialized all GPIO)
	HAL_GPIO_WritePin(LINE_DRIVER2_ENABLE_GPIO_Port, LINE_DRIVER2_ENABLE_Pin, GPIO_PIN_RESET);  //Enable = Low
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002e2e:	4821      	ldr	r0, [pc, #132]	@ (8002eb4 <PlasmaDriverInit+0x94>)
 8002e30:	f008 fa24 	bl	800b27c <HAL_GPIO_WritePin>
	printString("\n\rEnable Line Drive 2");
 8002e34:	4820      	ldr	r0, [pc, #128]	@ (8002eb8 <PlasmaDriverInit+0x98>)
 8002e36:	f7fd fcb7 	bl	80007a8 <printString>

	//Power On Supplies in order 15V, 3.3V switch
	PowerOnLowSupplies();
 8002e3a:	f7ff f90f 	bl	800205c <PowerOnLowSupplies>

	//Read configuration from flash
	readConfigFlash();
 8002e3e:	f7fd fc93 	bl	8000768 <readConfigFlash>

	//Has the flash configuration been initialized?
	if (sFlashConfig.mode == 0xFF)
 8002e42:	4b1e      	ldr	r3, [pc, #120]	@ (8002ebc <PlasmaDriverInit+0x9c>)
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	2bff      	cmp	r3, #255	@ 0xff
 8002e48:	d107      	bne.n	8002e5a <PlasmaDriverInit+0x3a>
	{
		// write default configuration to flash
		if (writeConfigFlash() != 0)
 8002e4a:	f7fd fc53 	bl	80006f4 <writeConfigFlash>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d002      	beq.n	8002e5a <PlasmaDriverInit+0x3a>
			printString("\n\r*** ERROR FLASH");
 8002e54:	481a      	ldr	r0, [pc, #104]	@ (8002ec0 <PlasmaDriverInit+0xa0>)
 8002e56:	f7fd fca7 	bl	80007a8 <printString>
	}

	//Initialize menu and configuration menu
	InitializeMenu();
 8002e5a:	f7ff f9df 	bl	800221c <InitializeMenu>
	InitializeConfigMenu();
 8002e5e:	f7ff f9b1 	bl	80021c4 <InitializeConfigMenu>

	//Calibrate ADC1, ADC2 and ADC3
	printString("\n\rCalibrate ADC1, ADC2 and ADC3");
 8002e62:	4818      	ldr	r0, [pc, #96]	@ (8002ec4 <PlasmaDriverInit+0xa4>)
 8002e64:	f7fd fca0 	bl	80007a8 <printString>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8002e68:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	4816      	ldr	r0, [pc, #88]	@ (8002ec8 <PlasmaDriverInit+0xa8>)
 8002e70:	f004 fd0a 	bl	8007888 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8002e74:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8002e78:	2100      	movs	r1, #0
 8002e7a:	4814      	ldr	r0, [pc, #80]	@ (8002ecc <PlasmaDriverInit+0xac>)
 8002e7c:	f004 fd04 	bl	8007888 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8002e80:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8002e84:	2100      	movs	r1, #0
 8002e86:	4812      	ldr	r0, [pc, #72]	@ (8002ed0 <PlasmaDriverInit+0xb0>)
 8002e88:	f004 fcfe 	bl	8007888 <HAL_ADCEx_Calibration_Start>

	//Power On Supply 500V
	if (sFlashConfig.mode == RUN_MODE)
 8002e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002ebc <PlasmaDriverInit+0x9c>)
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d10d      	bne.n	8002eb0 <PlasmaDriverInit+0x90>
	{
		//POWER_OFF_IRQ needs to be high before powering On
		if (HAL_GPIO_ReadPin(POWER_OFF_IRQ_GPIO_Port, POWER_OFF_IRQ_Pin) == GPIO_PIN_RESET)		//There is an inverter between MCU and the input, thus check RESET
 8002e94:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e98:	480e      	ldr	r0, [pc, #56]	@ (8002ed4 <PlasmaDriverInit+0xb4>)
 8002e9a:	f008 f9d7 	bl	800b24c <HAL_GPIO_ReadPin>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d102      	bne.n	8002eaa <PlasmaDriverInit+0x8a>
			PowerOnHighSupplies();
 8002ea4:	f7ff f922 	bl	80020ec <PowerOnHighSupplies>
		else
		printString("\n\rPOWER_OFF_IRQ line is not high - 500V is not powered on");
	}
}
 8002ea8:	e002      	b.n	8002eb0 <PlasmaDriverInit+0x90>
		printString("\n\rPOWER_OFF_IRQ line is not high - 500V is not powered on");
 8002eaa:	480b      	ldr	r0, [pc, #44]	@ (8002ed8 <PlasmaDriverInit+0xb8>)
 8002eac:	f7fd fc7c 	bl	80007a8 <printString>
}
 8002eb0:	bf00      	nop
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	58020400 	.word	0x58020400
 8002eb8:	08015238 	.word	0x08015238
 8002ebc:	24000a48 	.word	0x24000a48
 8002ec0:	08015250 	.word	0x08015250
 8002ec4:	08015264 	.word	0x08015264
 8002ec8:	24000a88 	.word	0x24000a88
 8002ecc:	24000af8 	.word	0x24000af8
 8002ed0:	24000b68 	.word	0x24000b68
 8002ed4:	58021000 	.word	0x58021000
 8002ed8:	08015284 	.word	0x08015284

08002edc <PlasmaDoTask>:

// This command is called from a while loop, and will execute any needed task.
void PlasmaDoTask(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
	PlasmaDriverMenu(); //Check UART3 and execute command
 8002ee0:	f7ff ff42 	bl	8002d68 <PlasmaDriverMenu>

	if (sFlashConfig.mode == RUN_MODE)
 8002ee4:	4b0d      	ldr	r3, [pc, #52]	@ (8002f1c <PlasmaDoTask+0x40>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d114      	bne.n	8002f16 <PlasmaDoTask+0x3a>
	{
		//Check if robot controller requested the plasma On or Off
		if (HAL_GPIO_ReadPin(TURN_PLASMA_ON_GPIO_Port, TURN_PLASMA_ON_Pin) == GPIO_PIN_RESET)		//There is an inverter between MCU and the input, thus check RESET
 8002eec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002ef0:	480b      	ldr	r0, [pc, #44]	@ (8002f20 <PlasmaDoTask+0x44>)
 8002ef2:	f008 f9ab 	bl	800b24c <HAL_GPIO_ReadPin>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10c      	bne.n	8002f16 <PlasmaDoTask+0x3a>
		{
			if (powerStatus == V500_ON)
 8002efc:	4b09      	ldr	r3, [pc, #36]	@ (8002f24 <PlasmaDoTask+0x48>)
 8002efe:	881b      	ldrh	r3, [r3, #0]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d105      	bne.n	8002f10 <PlasmaDoTask+0x34>
			{
				//TODO: add auto frequency adjustment here. "RUN_MODE" is only used when the system is headless, i.e. not controlled over UART
				sHbridge.on = 1; // Turn Hbridge on
 8002f04:	4b08      	ldr	r3, [pc, #32]	@ (8002f28 <PlasmaDoTask+0x4c>)
 8002f06:	2201      	movs	r2, #1
 8002f08:	801a      	strh	r2, [r3, #0]
				programHbridge();
 8002f0a:	f7fd fd75 	bl	80009f8 <programHbridge>
			}
			else
				printString("\n\rUnable to turn H-bridge on, since 500V is not powered on");
		}
	}
}
 8002f0e:	e002      	b.n	8002f16 <PlasmaDoTask+0x3a>
				printString("\n\rUnable to turn H-bridge on, since 500V is not powered on");
 8002f10:	4806      	ldr	r0, [pc, #24]	@ (8002f2c <PlasmaDoTask+0x50>)
 8002f12:	f7fd fc49 	bl	80007a8 <printString>
}
 8002f16:	bf00      	nop
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	24000a48 	.word	0x24000a48
 8002f20:	58021000 	.word	0x58021000
 8002f24:	24000a44 	.word	0x24000a44
 8002f28:	2400001c 	.word	0x2400001c
 8002f2c:	080152c0 	.word	0x080152c0

08002f30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f34:	f001 feda 	bl	8004cec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f38:	f000 f828 	bl	8002f8c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002f3c:	f000 f896 	bl	800306c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f40:	f000 fea0 	bl	8003c84 <MX_GPIO_Init>
  MX_DMA_Init();
 8002f44:	f000 fe76 	bl	8003c34 <MX_DMA_Init>
  MX_TIM1_Init();
 8002f48:	f000 fc2a 	bl	80037a0 <MX_TIM1_Init>
  MX_ETH_Init();
 8002f4c:	f000 fb40 	bl	80035d0 <MX_ETH_Init>
  MX_ADC2_Init();
 8002f50:	f000 f95a 	bl	8003208 <MX_ADC2_Init>
  MX_USB_OTG_HS_USB_Init();
 8002f54:	f000 fe66 	bl	8003c24 <MX_USB_OTG_HS_USB_Init>
  MX_ADC3_Init();
 8002f58:	f000 f9fa 	bl	8003350 <MX_ADC3_Init>
  MX_USART3_UART_Init();
 8002f5c:	f000 fbd2 	bl	8003704 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8002f60:	f000 f8b4 	bl	80030cc <MX_ADC1_Init>
  MX_COMP2_Init();
 8002f64:	f000 fb06 	bl	8003574 <MX_COMP2_Init>
  MX_TIM2_Init();
 8002f68:	f000 fcac 	bl	80038c4 <MX_TIM2_Init>
  MX_LPUART1_UART_Init();
 8002f6c:	f000 fb7c 	bl	8003668 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 8002f70:	f000 fd02 	bl	8003978 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002f74:	f000 fd54 	bl	8003a20 <MX_TIM4_Init>
  MX_TIM15_Init();
 8002f78:	f000 fdac 	bl	8003ad4 <MX_TIM15_Init>
  MX_TIM24_Init();
 8002f7c:	f000 fe02 	bl	8003b84 <MX_TIM24_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  PlasmaDriverInit();  			//Initialize plasma driver
 8002f80:	f7ff ff4e 	bl	8002e20 <PlasmaDriverInit>


  while (1)
  {
	PlasmaDoTask();     	    //Handle plasma driver task
 8002f84:	f7ff ffaa 	bl	8002edc <PlasmaDoTask>
 8002f88:	e7fc      	b.n	8002f84 <main+0x54>
	...

08002f8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b09c      	sub	sp, #112	@ 0x70
 8002f90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f96:	224c      	movs	r2, #76	@ 0x4c
 8002f98:	2100      	movs	r1, #0
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f00f fc7d 	bl	801289a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fa0:	1d3b      	adds	r3, r7, #4
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f00f fc77 	bl	801289a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002fac:	2002      	movs	r0, #2
 8002fae:	f008 f999 	bl	800b2e4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	603b      	str	r3, [r7, #0]
 8002fb6:	4b2c      	ldr	r3, [pc, #176]	@ (8003068 <SystemClock_Config+0xdc>)
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	4a2b      	ldr	r2, [pc, #172]	@ (8003068 <SystemClock_Config+0xdc>)
 8002fbc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002fc0:	6193      	str	r3, [r2, #24]
 8002fc2:	4b29      	ldr	r3, [pc, #164]	@ (8003068 <SystemClock_Config+0xdc>)
 8002fc4:	699b      	ldr	r3, [r3, #24]
 8002fc6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002fca:	603b      	str	r3, [r7, #0]
 8002fcc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002fce:	bf00      	nop
 8002fd0:	4b25      	ldr	r3, [pc, #148]	@ (8003068 <SystemClock_Config+0xdc>)
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fdc:	d1f8      	bne.n	8002fd0 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8002fde:	2321      	movs	r3, #33	@ 0x21
 8002fe0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002fe2:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8002fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fec:	2302      	movs	r3, #2
 8002fee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002ff4:	2304      	movs	r3, #4
 8002ff6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8002ff8:	f240 1313 	movw	r3, #275	@ 0x113
 8002ffc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8002ffe:	2301      	movs	r3, #1
 8003000:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003002:	2304      	movs	r3, #4
 8003004:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003006:	2302      	movs	r3, #2
 8003008:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800300a:	2304      	movs	r3, #4
 800300c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800300e:	2300      	movs	r3, #0
 8003010:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003012:	2300      	movs	r3, #0
 8003014:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003016:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800301a:	4618      	mov	r0, r3
 800301c:	f008 f99c 	bl	800b358 <HAL_RCC_OscConfig>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8003026:	f000 ff9d 	bl	8003f64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800302a:	233f      	movs	r3, #63	@ 0x3f
 800302c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800302e:	2303      	movs	r3, #3
 8003030:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003032:	2300      	movs	r3, #0
 8003034:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003036:	2308      	movs	r3, #8
 8003038:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800303a:	2340      	movs	r3, #64	@ 0x40
 800303c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800303e:	2340      	movs	r3, #64	@ 0x40
 8003040:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV16;
 8003042:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8003046:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003048:	2340      	movs	r3, #64	@ 0x40
 800304a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800304c:	1d3b      	adds	r3, r7, #4
 800304e:	2103      	movs	r1, #3
 8003050:	4618      	mov	r0, r3
 8003052:	f008 fd5b 	bl	800bb0c <HAL_RCC_ClockConfig>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800305c:	f000 ff82 	bl	8003f64 <Error_Handler>
  }
}
 8003060:	bf00      	nop
 8003062:	3770      	adds	r7, #112	@ 0x70
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	58024800 	.word	0x58024800

0800306c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b0ae      	sub	sp, #184	@ 0xb8
 8003070:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003072:	463b      	mov	r3, r7
 8003074:	22b8      	movs	r2, #184	@ 0xb8
 8003076:	2100      	movs	r1, #0
 8003078:	4618      	mov	r0, r3
 800307a:	f00f fc0e 	bl	801289a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800307e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003082:	f04f 0300 	mov.w	r3, #0
 8003086:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 800308a:	2301      	movs	r3, #1
 800308c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 800308e:	2318      	movs	r3, #24
 8003090:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8003092:	2302      	movs	r3, #2
 8003094:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8003096:	2302      	movs	r3, #2
 8003098:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800309a:	2302      	movs	r3, #2
 800309c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800309e:	23c0      	movs	r3, #192	@ 0xc0
 80030a0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80030a2:	2300      	movs	r3, #0
 80030a4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80030a6:	2300      	movs	r3, #0
 80030a8:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80030aa:	2300      	movs	r3, #0
 80030ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030b0:	463b      	mov	r3, r7
 80030b2:	4618      	mov	r0, r3
 80030b4:	f009 f8b6 	bl	800c224 <HAL_RCCEx_PeriphCLKConfig>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80030be:	f000 ff51 	bl	8003f64 <Error_Handler>
  }
}
 80030c2:	bf00      	nop
 80030c4:	37b8      	adds	r7, #184	@ 0xb8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
	...

080030cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b08c      	sub	sp, #48	@ 0x30
 80030d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80030d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030d6:	2200      	movs	r2, #0
 80030d8:	601a      	str	r2, [r3, #0]
 80030da:	605a      	str	r2, [r3, #4]
 80030dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80030de:	463b      	mov	r3, r7
 80030e0:	2224      	movs	r2, #36	@ 0x24
 80030e2:	2100      	movs	r1, #0
 80030e4:	4618      	mov	r0, r3
 80030e6:	f00f fbd8 	bl	801289a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80030ea:	4b42      	ldr	r3, [pc, #264]	@ (80031f4 <MX_ADC1_Init+0x128>)
 80030ec:	4a42      	ldr	r2, [pc, #264]	@ (80031f8 <MX_ADC1_Init+0x12c>)
 80030ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80030f0:	4b40      	ldr	r3, [pc, #256]	@ (80031f4 <MX_ADC1_Init+0x128>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80030f6:	4b3f      	ldr	r3, [pc, #252]	@ (80031f4 <MX_ADC1_Init+0x128>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80030fc:	4b3d      	ldr	r3, [pc, #244]	@ (80031f4 <MX_ADC1_Init+0x128>)
 80030fe:	2201      	movs	r2, #1
 8003100:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003102:	4b3c      	ldr	r3, [pc, #240]	@ (80031f4 <MX_ADC1_Init+0x128>)
 8003104:	2208      	movs	r2, #8
 8003106:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003108:	4b3a      	ldr	r3, [pc, #232]	@ (80031f4 <MX_ADC1_Init+0x128>)
 800310a:	2200      	movs	r2, #0
 800310c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800310e:	4b39      	ldr	r3, [pc, #228]	@ (80031f4 <MX_ADC1_Init+0x128>)
 8003110:	2201      	movs	r2, #1
 8003112:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8003114:	4b37      	ldr	r3, [pc, #220]	@ (80031f4 <MX_ADC1_Init+0x128>)
 8003116:	2203      	movs	r2, #3
 8003118:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800311a:	4b36      	ldr	r3, [pc, #216]	@ (80031f4 <MX_ADC1_Init+0x128>)
 800311c:	2200      	movs	r2, #0
 800311e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC1;
 8003122:	4b34      	ldr	r3, [pc, #208]	@ (80031f4 <MX_ADC1_Init+0x128>)
 8003124:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003128:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800312a:	4b32      	ldr	r3, [pc, #200]	@ (80031f4 <MX_ADC1_Init+0x128>)
 800312c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003130:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 8003132:	4b30      	ldr	r3, [pc, #192]	@ (80031f4 <MX_ADC1_Init+0x128>)
 8003134:	2201      	movs	r2, #1
 8003136:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003138:	4b2e      	ldr	r3, [pc, #184]	@ (80031f4 <MX_ADC1_Init+0x128>)
 800313a:	2200      	movs	r2, #0
 800313c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800313e:	4b2d      	ldr	r3, [pc, #180]	@ (80031f4 <MX_ADC1_Init+0x128>)
 8003140:	2200      	movs	r2, #0
 8003142:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8003144:	4b2b      	ldr	r3, [pc, #172]	@ (80031f4 <MX_ADC1_Init+0x128>)
 8003146:	2200      	movs	r2, #0
 8003148:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800314c:	4829      	ldr	r0, [pc, #164]	@ (80031f4 <MX_ADC1_Init+0x128>)
 800314e:	f002 fad5 	bl	80056fc <HAL_ADC_Init>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d001      	beq.n	800315c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003158:	f000 ff04 	bl	8003f64 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 800315c:	2306      	movs	r3, #6
 800315e:	627b      	str	r3, [r7, #36]	@ 0x24
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 8003160:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003164:	62bb      	str	r3, [r7, #40]	@ 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8003166:	2300      	movs	r3, #0
 8003168:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800316a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800316e:	4619      	mov	r1, r3
 8003170:	4820      	ldr	r0, [pc, #128]	@ (80031f4 <MX_ADC1_Init+0x128>)
 8003172:	f004 fcd1 	bl	8007b18 <HAL_ADCEx_MultiModeConfigChannel>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 800317c:	f000 fef2 	bl	8003f64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8003180:	4b1e      	ldr	r3, [pc, #120]	@ (80031fc <MX_ADC1_Init+0x130>)
 8003182:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003184:	2306      	movs	r3, #6
 8003186:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 8003188:	2302      	movs	r3, #2
 800318a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800318c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8003190:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003192:	2304      	movs	r3, #4
 8003194:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003196:	2300      	movs	r3, #0
 8003198:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800319a:	2300      	movs	r3, #0
 800319c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80031a0:	463b      	mov	r3, r7
 80031a2:	4619      	mov	r1, r3
 80031a4:	4813      	ldr	r0, [pc, #76]	@ (80031f4 <MX_ADC1_Init+0x128>)
 80031a6:	f002 ffdb 	bl	8006160 <HAL_ADC_ConfigChannel>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 80031b0:	f000 fed8 	bl	8003f64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 80031b4:	4b12      	ldr	r3, [pc, #72]	@ (8003200 <MX_ADC1_Init+0x134>)
 80031b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80031b8:	230c      	movs	r3, #12
 80031ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80031bc:	463b      	mov	r3, r7
 80031be:	4619      	mov	r1, r3
 80031c0:	480c      	ldr	r0, [pc, #48]	@ (80031f4 <MX_ADC1_Init+0x128>)
 80031c2:	f002 ffcd 	bl	8006160 <HAL_ADC_ConfigChannel>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 80031cc:	f000 feca 	bl	8003f64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 80031d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003204 <MX_ADC1_Init+0x138>)
 80031d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80031d4:	2312      	movs	r3, #18
 80031d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80031d8:	463b      	mov	r3, r7
 80031da:	4619      	mov	r1, r3
 80031dc:	4805      	ldr	r0, [pc, #20]	@ (80031f4 <MX_ADC1_Init+0x128>)
 80031de:	f002 ffbf 	bl	8006160 <HAL_ADC_ConfigChannel>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 80031e8:	f000 febc 	bl	8003f64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80031ec:	bf00      	nop
 80031ee:	3730      	adds	r7, #48	@ 0x30
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	24000a88 	.word	0x24000a88
 80031f8:	40022000 	.word	0x40022000
 80031fc:	3ef08000 	.word	0x3ef08000
 8003200:	4b840000 	.word	0x4b840000
 8003204:	43210000 	.word	0x43210000

08003208 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b090      	sub	sp, #64	@ 0x40
 800320c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800320e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003212:	2200      	movs	r2, #0
 8003214:	601a      	str	r2, [r3, #0]
 8003216:	605a      	str	r2, [r3, #4]
 8003218:	609a      	str	r2, [r3, #8]
 800321a:	60da      	str	r2, [r3, #12]
 800321c:	611a      	str	r2, [r3, #16]
 800321e:	615a      	str	r2, [r3, #20]
 8003220:	619a      	str	r2, [r3, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003222:	463b      	mov	r3, r7
 8003224:	2224      	movs	r2, #36	@ 0x24
 8003226:	2100      	movs	r1, #0
 8003228:	4618      	mov	r0, r3
 800322a:	f00f fb36 	bl	801289a <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800322e:	4b42      	ldr	r3, [pc, #264]	@ (8003338 <MX_ADC2_Init+0x130>)
 8003230:	4a42      	ldr	r2, [pc, #264]	@ (800333c <MX_ADC2_Init+0x134>)
 8003232:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003234:	4b40      	ldr	r3, [pc, #256]	@ (8003338 <MX_ADC2_Init+0x130>)
 8003236:	2200      	movs	r2, #0
 8003238:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 800323a:	4b3f      	ldr	r3, [pc, #252]	@ (8003338 <MX_ADC2_Init+0x130>)
 800323c:	2200      	movs	r2, #0
 800323e:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003240:	4b3d      	ldr	r3, [pc, #244]	@ (8003338 <MX_ADC2_Init+0x130>)
 8003242:	2201      	movs	r2, #1
 8003244:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003246:	4b3c      	ldr	r3, [pc, #240]	@ (8003338 <MX_ADC2_Init+0x130>)
 8003248:	2208      	movs	r2, #8
 800324a:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800324c:	4b3a      	ldr	r3, [pc, #232]	@ (8003338 <MX_ADC2_Init+0x130>)
 800324e:	2200      	movs	r2, #0
 8003250:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8003252:	4b39      	ldr	r3, [pc, #228]	@ (8003338 <MX_ADC2_Init+0x130>)
 8003254:	2201      	movs	r2, #1
 8003256:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 3;
 8003258:	4b37      	ldr	r3, [pc, #220]	@ (8003338 <MX_ADC2_Init+0x130>)
 800325a:	2203      	movs	r2, #3
 800325c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800325e:	4b36      	ldr	r3, [pc, #216]	@ (8003338 <MX_ADC2_Init+0x130>)
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8003266:	4b34      	ldr	r3, [pc, #208]	@ (8003338 <MX_ADC2_Init+0x130>)
 8003268:	2200      	movs	r2, #0
 800326a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800326c:	4b32      	ldr	r3, [pc, #200]	@ (8003338 <MX_ADC2_Init+0x130>)
 800326e:	2200      	movs	r2, #0
 8003270:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8003272:	4b31      	ldr	r3, [pc, #196]	@ (8003338 <MX_ADC2_Init+0x130>)
 8003274:	2200      	movs	r2, #0
 8003276:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8003278:	4b2f      	ldr	r3, [pc, #188]	@ (8003338 <MX_ADC2_Init+0x130>)
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003280:	482d      	ldr	r0, [pc, #180]	@ (8003338 <MX_ADC2_Init+0x130>)
 8003282:	f002 fa3b 	bl	80056fc <HAL_ADC_Init>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 800328c:	f000 fe6a 	bl	8003f64 <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8003290:	4b2b      	ldr	r3, [pc, #172]	@ (8003340 <MX_ADC2_Init+0x138>)
 8003292:	627b      	str	r3, [r7, #36]	@ 0x24
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8003294:	f44f 0340 	mov.w	r3, #12582912	@ 0xc00000
 8003298:	62bb      	str	r3, [r7, #40]	@ 0x28
  AnalogWDGConfig.Channel = ADC_CHANNEL_3;
 800329a:	4b2a      	ldr	r3, [pc, #168]	@ (8003344 <MX_ADC2_Init+0x13c>)
 800329c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  AnalogWDGConfig.ITMode = DISABLE;
 800329e:	2300      	movs	r3, #0
 80032a0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  AnalogWDGConfig.HighThreshold = 0;
 80032a4:	2300      	movs	r3, #0
 80032a6:	637b      	str	r3, [r7, #52]	@ 0x34
  AnalogWDGConfig.LowThreshold = 0;
 80032a8:	2300      	movs	r3, #0
 80032aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 80032ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032b0:	4619      	mov	r1, r3
 80032b2:	4821      	ldr	r0, [pc, #132]	@ (8003338 <MX_ADC2_Init+0x130>)
 80032b4:	f003 fc80 	bl	8006bb8 <HAL_ADC_AnalogWDGConfig>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80032be:	f000 fe51 	bl	8003f64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80032c2:	4b20      	ldr	r3, [pc, #128]	@ (8003344 <MX_ADC2_Init+0x13c>)
 80032c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80032c6:	2306      	movs	r3, #6
 80032c8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 80032ca:	2302      	movs	r3, #2
 80032cc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80032ce:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80032d2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80032d4:	2304      	movs	r3, #4
 80032d6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80032d8:	2300      	movs	r3, #0
 80032da:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80032dc:	2300      	movs	r3, #0
 80032de:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80032e2:	463b      	mov	r3, r7
 80032e4:	4619      	mov	r1, r3
 80032e6:	4814      	ldr	r0, [pc, #80]	@ (8003338 <MX_ADC2_Init+0x130>)
 80032e8:	f002 ff3a 	bl	8006160 <HAL_ADC_ConfigChannel>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <MX_ADC2_Init+0xee>
  {
    Error_Handler();
 80032f2:	f000 fe37 	bl	8003f64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 80032f6:	4b14      	ldr	r3, [pc, #80]	@ (8003348 <MX_ADC2_Init+0x140>)
 80032f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80032fa:	230c      	movs	r3, #12
 80032fc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80032fe:	463b      	mov	r3, r7
 8003300:	4619      	mov	r1, r3
 8003302:	480d      	ldr	r0, [pc, #52]	@ (8003338 <MX_ADC2_Init+0x130>)
 8003304:	f002 ff2c 	bl	8006160 <HAL_ADC_ConfigChannel>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <MX_ADC2_Init+0x10a>
  {
    Error_Handler();
 800330e:	f000 fe29 	bl	8003f64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003312:	4b0e      	ldr	r3, [pc, #56]	@ (800334c <MX_ADC2_Init+0x144>)
 8003314:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003316:	2312      	movs	r3, #18
 8003318:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800331a:	463b      	mov	r3, r7
 800331c:	4619      	mov	r1, r3
 800331e:	4806      	ldr	r0, [pc, #24]	@ (8003338 <MX_ADC2_Init+0x130>)
 8003320:	f002 ff1e 	bl	8006160 <HAL_ADC_ConfigChannel>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <MX_ADC2_Init+0x126>
  {
    Error_Handler();
 800332a:	f000 fe1b 	bl	8003f64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800332e:	bf00      	nop
 8003330:	3740      	adds	r7, #64	@ 0x40
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	24000af8 	.word	0x24000af8
 800333c:	40022100 	.word	0x40022100
 8003340:	7dc00000 	.word	0x7dc00000
 8003344:	0c900008 	.word	0x0c900008
 8003348:	4fb80000 	.word	0x4fb80000
 800334c:	14f00020 	.word	0x14f00020

08003350 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b08a      	sub	sp, #40	@ 0x28
 8003354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003356:	1d3b      	adds	r3, r7, #4
 8003358:	2224      	movs	r2, #36	@ 0x24
 800335a:	2100      	movs	r1, #0
 800335c:	4618      	mov	r0, r3
 800335e:	f00f fa9c 	bl	801289a <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8003362:	4b78      	ldr	r3, [pc, #480]	@ (8003544 <MX_ADC3_Init+0x1f4>)
 8003364:	4a78      	ldr	r2, [pc, #480]	@ (8003548 <MX_ADC3_Init+0x1f8>)
 8003366:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003368:	4b76      	ldr	r3, [pc, #472]	@ (8003544 <MX_ADC3_Init+0x1f4>)
 800336a:	2200      	movs	r2, #0
 800336c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800336e:	4b75      	ldr	r3, [pc, #468]	@ (8003544 <MX_ADC3_Init+0x1f4>)
 8003370:	2208      	movs	r2, #8
 8003372:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8003374:	4b73      	ldr	r3, [pc, #460]	@ (8003544 <MX_ADC3_Init+0x1f4>)
 8003376:	2200      	movs	r2, #0
 8003378:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800337a:	4b72      	ldr	r3, [pc, #456]	@ (8003544 <MX_ADC3_Init+0x1f4>)
 800337c:	2201      	movs	r2, #1
 800337e:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003380:	4b70      	ldr	r3, [pc, #448]	@ (8003544 <MX_ADC3_Init+0x1f4>)
 8003382:	2208      	movs	r2, #8
 8003384:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8003386:	4b6f      	ldr	r3, [pc, #444]	@ (8003544 <MX_ADC3_Init+0x1f4>)
 8003388:	2200      	movs	r2, #0
 800338a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800338c:	4b6d      	ldr	r3, [pc, #436]	@ (8003544 <MX_ADC3_Init+0x1f4>)
 800338e:	2200      	movs	r2, #0
 8003390:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 11;
 8003392:	4b6c      	ldr	r3, [pc, #432]	@ (8003544 <MX_ADC3_Init+0x1f4>)
 8003394:	220b      	movs	r2, #11
 8003396:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003398:	4b6a      	ldr	r3, [pc, #424]	@ (8003544 <MX_ADC3_Init+0x1f4>)
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80033a0:	4b68      	ldr	r3, [pc, #416]	@ (8003544 <MX_ADC3_Init+0x1f4>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80033a6:	4b67      	ldr	r3, [pc, #412]	@ (8003544 <MX_ADC3_Init+0x1f4>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80033ac:	4b65      	ldr	r3, [pc, #404]	@ (8003544 <MX_ADC3_Init+0x1f4>)
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80033b4:	4b63      	ldr	r3, [pc, #396]	@ (8003544 <MX_ADC3_Init+0x1f4>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 80033ba:	4b62      	ldr	r3, [pc, #392]	@ (8003544 <MX_ADC3_Init+0x1f4>)
 80033bc:	2201      	movs	r2, #1
 80033be:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80033c0:	4b60      	ldr	r3, [pc, #384]	@ (8003544 <MX_ADC3_Init+0x1f4>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80033c6:	4b5f      	ldr	r3, [pc, #380]	@ (8003544 <MX_ADC3_Init+0x1f4>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 80033cc:	4b5d      	ldr	r3, [pc, #372]	@ (8003544 <MX_ADC3_Init+0x1f4>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80033d4:	485b      	ldr	r0, [pc, #364]	@ (8003544 <MX_ADC3_Init+0x1f4>)
 80033d6:	f002 f991 	bl	80056fc <HAL_ADC_Init>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 80033e0:	f000 fdc0 	bl	8003f64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80033e4:	2301      	movs	r3, #1
 80033e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80033e8:	2306      	movs	r3, #6
 80033ea:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_6CYCLES_5;
 80033ec:	2301      	movs	r3, #1
 80033ee:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80033f0:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80033f4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80033f6:	2304      	movs	r3, #4
 80033f8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80033fa:	2300      	movs	r3, #0
 80033fc:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 80033fe:	2300      	movs	r3, #0
 8003400:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003402:	1d3b      	adds	r3, r7, #4
 8003404:	4619      	mov	r1, r3
 8003406:	484f      	ldr	r0, [pc, #316]	@ (8003544 <MX_ADC3_Init+0x1f4>)
 8003408:	f002 feaa 	bl	8006160 <HAL_ADC_ConfigChannel>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <MX_ADC3_Init+0xc6>
  {
    Error_Handler();
 8003412:	f000 fda7 	bl	8003f64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003416:	4b4d      	ldr	r3, [pc, #308]	@ (800354c <MX_ADC3_Init+0x1fc>)
 8003418:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800341a:	230c      	movs	r3, #12
 800341c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800341e:	1d3b      	adds	r3, r7, #4
 8003420:	4619      	mov	r1, r3
 8003422:	4848      	ldr	r0, [pc, #288]	@ (8003544 <MX_ADC3_Init+0x1f4>)
 8003424:	f002 fe9c 	bl	8006160 <HAL_ADC_ConfigChannel>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <MX_ADC3_Init+0xe2>
  {
    Error_Handler();
 800342e:	f000 fd99 	bl	8003f64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003432:	4b47      	ldr	r3, [pc, #284]	@ (8003550 <MX_ADC3_Init+0x200>)
 8003434:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003436:	2312      	movs	r3, #18
 8003438:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800343a:	1d3b      	adds	r3, r7, #4
 800343c:	4619      	mov	r1, r3
 800343e:	4841      	ldr	r0, [pc, #260]	@ (8003544 <MX_ADC3_Init+0x1f4>)
 8003440:	f002 fe8e 	bl	8006160 <HAL_ADC_ConfigChannel>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <MX_ADC3_Init+0xfe>
  {
    Error_Handler();
 800344a:	f000 fd8b 	bl	8003f64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800344e:	4b41      	ldr	r3, [pc, #260]	@ (8003554 <MX_ADC3_Init+0x204>)
 8003450:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8003452:	2318      	movs	r3, #24
 8003454:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003456:	1d3b      	adds	r3, r7, #4
 8003458:	4619      	mov	r1, r3
 800345a:	483a      	ldr	r0, [pc, #232]	@ (8003544 <MX_ADC3_Init+0x1f4>)
 800345c:	f002 fe80 	bl	8006160 <HAL_ADC_ConfigChannel>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <MX_ADC3_Init+0x11a>
  {
    Error_Handler();
 8003466:	f000 fd7d 	bl	8003f64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800346a:	4b3b      	ldr	r3, [pc, #236]	@ (8003558 <MX_ADC3_Init+0x208>)
 800346c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800346e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003472:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003474:	1d3b      	adds	r3, r7, #4
 8003476:	4619      	mov	r1, r3
 8003478:	4832      	ldr	r0, [pc, #200]	@ (8003544 <MX_ADC3_Init+0x1f4>)
 800347a:	f002 fe71 	bl	8006160 <HAL_ADC_ConfigChannel>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d001      	beq.n	8003488 <MX_ADC3_Init+0x138>
  {
    Error_Handler();
 8003484:	f000 fd6e 	bl	8003f64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003488:	4b34      	ldr	r3, [pc, #208]	@ (800355c <MX_ADC3_Init+0x20c>)
 800348a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800348c:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8003490:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003492:	1d3b      	adds	r3, r7, #4
 8003494:	4619      	mov	r1, r3
 8003496:	482b      	ldr	r0, [pc, #172]	@ (8003544 <MX_ADC3_Init+0x1f4>)
 8003498:	f002 fe62 	bl	8006160 <HAL_ADC_ConfigChannel>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <MX_ADC3_Init+0x156>
  {
    Error_Handler();
 80034a2:	f000 fd5f 	bl	8003f64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80034a6:	4b2e      	ldr	r3, [pc, #184]	@ (8003560 <MX_ADC3_Init+0x210>)
 80034a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80034aa:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 80034ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80034b0:	1d3b      	adds	r3, r7, #4
 80034b2:	4619      	mov	r1, r3
 80034b4:	4823      	ldr	r0, [pc, #140]	@ (8003544 <MX_ADC3_Init+0x1f4>)
 80034b6:	f002 fe53 	bl	8006160 <HAL_ADC_ConfigChannel>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <MX_ADC3_Init+0x174>
  {
    Error_Handler();
 80034c0:	f000 fd50 	bl	8003f64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80034c4:	4b27      	ldr	r3, [pc, #156]	@ (8003564 <MX_ADC3_Init+0x214>)
 80034c6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80034c8:	f44f 7389 	mov.w	r3, #274	@ 0x112
 80034cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80034ce:	1d3b      	adds	r3, r7, #4
 80034d0:	4619      	mov	r1, r3
 80034d2:	481c      	ldr	r0, [pc, #112]	@ (8003544 <MX_ADC3_Init+0x1f4>)
 80034d4:	f002 fe44 	bl	8006160 <HAL_ADC_ConfigChannel>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <MX_ADC3_Init+0x192>
  {
    Error_Handler();
 80034de:	f000 fd41 	bl	8003f64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80034e2:	4b21      	ldr	r3, [pc, #132]	@ (8003568 <MX_ADC3_Init+0x218>)
 80034e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80034e6:	f44f 738c 	mov.w	r3, #280	@ 0x118
 80034ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80034ec:	1d3b      	adds	r3, r7, #4
 80034ee:	4619      	mov	r1, r3
 80034f0:	4814      	ldr	r0, [pc, #80]	@ (8003544 <MX_ADC3_Init+0x1f4>)
 80034f2:	f002 fe35 	bl	8006160 <HAL_ADC_ConfigChannel>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d001      	beq.n	8003500 <MX_ADC3_Init+0x1b0>
  {
    Error_Handler();
 80034fc:	f000 fd32 	bl	8003f64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003500:	4b1a      	ldr	r3, [pc, #104]	@ (800356c <MX_ADC3_Init+0x21c>)
 8003502:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8003504:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003508:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800350a:	1d3b      	adds	r3, r7, #4
 800350c:	4619      	mov	r1, r3
 800350e:	480d      	ldr	r0, [pc, #52]	@ (8003544 <MX_ADC3_Init+0x1f4>)
 8003510:	f002 fe26 	bl	8006160 <HAL_ADC_ConfigChannel>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <MX_ADC3_Init+0x1ce>
  {
    Error_Handler();
 800351a:	f000 fd23 	bl	8003f64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800351e:	4b14      	ldr	r3, [pc, #80]	@ (8003570 <MX_ADC3_Init+0x220>)
 8003520:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8003522:	f240 2306 	movw	r3, #518	@ 0x206
 8003526:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003528:	1d3b      	adds	r3, r7, #4
 800352a:	4619      	mov	r1, r3
 800352c:	4805      	ldr	r0, [pc, #20]	@ (8003544 <MX_ADC3_Init+0x1f4>)
 800352e:	f002 fe17 	bl	8006160 <HAL_ADC_ConfigChannel>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <MX_ADC3_Init+0x1ec>
  {
    Error_Handler();
 8003538:	f000 fd14 	bl	8003f64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800353c:	bf00      	nop
 800353e:	3728      	adds	r7, #40	@ 0x28
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	24000b68 	.word	0x24000b68
 8003548:	58026000 	.word	0x58026000
 800354c:	04300002 	.word	0x04300002
 8003550:	08600004 	.word	0x08600004
 8003554:	0c900008 	.word	0x0c900008
 8003558:	10c00010 	.word	0x10c00010
 800355c:	14f00020 	.word	0x14f00020
 8003560:	19200040 	.word	0x19200040
 8003564:	1d500080 	.word	0x1d500080
 8003568:	21800100 	.word	0x21800100
 800356c:	25b00200 	.word	0x25b00200
 8003570:	2a000400 	.word	0x2a000400

08003574 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8003578:	4b13      	ldr	r3, [pc, #76]	@ (80035c8 <MX_COMP2_Init+0x54>)
 800357a:	4a14      	ldr	r2, [pc, #80]	@ (80035cc <MX_COMP2_Init+0x58>)
 800357c:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 800357e:	4b12      	ldr	r3, [pc, #72]	@ (80035c8 <MX_COMP2_Init+0x54>)
 8003580:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8003584:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8003586:	4b10      	ldr	r3, [pc, #64]	@ (80035c8 <MX_COMP2_Init+0x54>)
 8003588:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800358c:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800358e:	4b0e      	ldr	r3, [pc, #56]	@ (80035c8 <MX_COMP2_Init+0x54>)
 8003590:	2200      	movs	r2, #0
 8003592:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8003594:	4b0c      	ldr	r3, [pc, #48]	@ (80035c8 <MX_COMP2_Init+0x54>)
 8003596:	2200      	movs	r2, #0
 8003598:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 800359a:	4b0b      	ldr	r3, [pc, #44]	@ (80035c8 <MX_COMP2_Init+0x54>)
 800359c:	2200      	movs	r2, #0
 800359e:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 80035a0:	4b09      	ldr	r3, [pc, #36]	@ (80035c8 <MX_COMP2_Init+0x54>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80035a6:	4b08      	ldr	r3, [pc, #32]	@ (80035c8 <MX_COMP2_Init+0x54>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80035ac:	4b06      	ldr	r3, [pc, #24]	@ (80035c8 <MX_COMP2_Init+0x54>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 80035b2:	4805      	ldr	r0, [pc, #20]	@ (80035c8 <MX_COMP2_Init+0x54>)
 80035b4:	f004 fb92 	bl	8007cdc <HAL_COMP_Init>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <MX_COMP2_Init+0x4e>
  {
    Error_Handler();
 80035be:	f000 fcd1 	bl	8003f64 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 80035c2:	bf00      	nop
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	24000cc8 	.word	0x24000cc8
 80035cc:	58003810 	.word	0x58003810

080035d0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80035d4:	4b1e      	ldr	r3, [pc, #120]	@ (8003650 <MX_ETH_Init+0x80>)
 80035d6:	4a1f      	ldr	r2, [pc, #124]	@ (8003654 <MX_ETH_Init+0x84>)
 80035d8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80035da:	4b1f      	ldr	r3, [pc, #124]	@ (8003658 <MX_ETH_Init+0x88>)
 80035dc:	2200      	movs	r2, #0
 80035de:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80035e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003658 <MX_ETH_Init+0x88>)
 80035e2:	2280      	movs	r2, #128	@ 0x80
 80035e4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80035e6:	4b1c      	ldr	r3, [pc, #112]	@ (8003658 <MX_ETH_Init+0x88>)
 80035e8:	22e1      	movs	r2, #225	@ 0xe1
 80035ea:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80035ec:	4b1a      	ldr	r3, [pc, #104]	@ (8003658 <MX_ETH_Init+0x88>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80035f2:	4b19      	ldr	r3, [pc, #100]	@ (8003658 <MX_ETH_Init+0x88>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80035f8:	4b17      	ldr	r3, [pc, #92]	@ (8003658 <MX_ETH_Init+0x88>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80035fe:	4b14      	ldr	r3, [pc, #80]	@ (8003650 <MX_ETH_Init+0x80>)
 8003600:	4a15      	ldr	r2, [pc, #84]	@ (8003658 <MX_ETH_Init+0x88>)
 8003602:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003604:	4b12      	ldr	r3, [pc, #72]	@ (8003650 <MX_ETH_Init+0x80>)
 8003606:	2201      	movs	r2, #1
 8003608:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800360a:	4b11      	ldr	r3, [pc, #68]	@ (8003650 <MX_ETH_Init+0x80>)
 800360c:	4a13      	ldr	r2, [pc, #76]	@ (800365c <MX_ETH_Init+0x8c>)
 800360e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8003610:	4b0f      	ldr	r3, [pc, #60]	@ (8003650 <MX_ETH_Init+0x80>)
 8003612:	4a13      	ldr	r2, [pc, #76]	@ (8003660 <MX_ETH_Init+0x90>)
 8003614:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8003616:	4b0e      	ldr	r3, [pc, #56]	@ (8003650 <MX_ETH_Init+0x80>)
 8003618:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800361c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800361e:	480c      	ldr	r0, [pc, #48]	@ (8003650 <MX_ETH_Init+0x80>)
 8003620:	f006 fe6a 	bl	800a2f8 <HAL_ETH_Init>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800362a:	f000 fc9b 	bl	8003f64 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800362e:	2238      	movs	r2, #56	@ 0x38
 8003630:	2100      	movs	r1, #0
 8003632:	480c      	ldr	r0, [pc, #48]	@ (8003664 <MX_ETH_Init+0x94>)
 8003634:	f00f f931 	bl	801289a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8003638:	4b0a      	ldr	r3, [pc, #40]	@ (8003664 <MX_ETH_Init+0x94>)
 800363a:	2221      	movs	r2, #33	@ 0x21
 800363c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800363e:	4b09      	ldr	r3, [pc, #36]	@ (8003664 <MX_ETH_Init+0x94>)
 8003640:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003644:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8003646:	4b07      	ldr	r3, [pc, #28]	@ (8003664 <MX_ETH_Init+0x94>)
 8003648:	2200      	movs	r2, #0
 800364a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800364c:	bf00      	nop
 800364e:	bd80      	pop	{r7, pc}
 8003650:	24000cf4 	.word	0x24000cf4
 8003654:	40028000 	.word	0x40028000
 8003658:	24001094 	.word	0x24001094
 800365c:	24000270 	.word	0x24000270
 8003660:	24000210 	.word	0x24000210
 8003664:	24000a50 	.word	0x24000a50

08003668 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800366c:	4b22      	ldr	r3, [pc, #136]	@ (80036f8 <MX_LPUART1_UART_Init+0x90>)
 800366e:	4a23      	ldr	r2, [pc, #140]	@ (80036fc <MX_LPUART1_UART_Init+0x94>)
 8003670:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8003672:	4b21      	ldr	r3, [pc, #132]	@ (80036f8 <MX_LPUART1_UART_Init+0x90>)
 8003674:	4a22      	ldr	r2, [pc, #136]	@ (8003700 <MX_LPUART1_UART_Init+0x98>)
 8003676:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003678:	4b1f      	ldr	r3, [pc, #124]	@ (80036f8 <MX_LPUART1_UART_Init+0x90>)
 800367a:	2200      	movs	r2, #0
 800367c:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800367e:	4b1e      	ldr	r3, [pc, #120]	@ (80036f8 <MX_LPUART1_UART_Init+0x90>)
 8003680:	2200      	movs	r2, #0
 8003682:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003684:	4b1c      	ldr	r3, [pc, #112]	@ (80036f8 <MX_LPUART1_UART_Init+0x90>)
 8003686:	2200      	movs	r2, #0
 8003688:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800368a:	4b1b      	ldr	r3, [pc, #108]	@ (80036f8 <MX_LPUART1_UART_Init+0x90>)
 800368c:	220c      	movs	r2, #12
 800368e:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003690:	4b19      	ldr	r3, [pc, #100]	@ (80036f8 <MX_LPUART1_UART_Init+0x90>)
 8003692:	2200      	movs	r2, #0
 8003694:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003696:	4b18      	ldr	r3, [pc, #96]	@ (80036f8 <MX_LPUART1_UART_Init+0x90>)
 8003698:	2200      	movs	r2, #0
 800369a:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800369c:	4b16      	ldr	r3, [pc, #88]	@ (80036f8 <MX_LPUART1_UART_Init+0x90>)
 800369e:	2200      	movs	r2, #0
 80036a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80036a2:	4b15      	ldr	r3, [pc, #84]	@ (80036f8 <MX_LPUART1_UART_Init+0x90>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80036a8:	4b13      	ldr	r3, [pc, #76]	@ (80036f8 <MX_LPUART1_UART_Init+0x90>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80036ae:	4812      	ldr	r0, [pc, #72]	@ (80036f8 <MX_LPUART1_UART_Init+0x90>)
 80036b0:	f00c ff83 	bl	80105ba <HAL_UART_Init>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 80036ba:	f000 fc53 	bl	8003f64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80036be:	2100      	movs	r1, #0
 80036c0:	480d      	ldr	r0, [pc, #52]	@ (80036f8 <MX_LPUART1_UART_Init+0x90>)
 80036c2:	f00e f9e0 	bl	8011a86 <HAL_UARTEx_SetTxFifoThreshold>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 80036cc:	f000 fc4a 	bl	8003f64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80036d0:	2100      	movs	r1, #0
 80036d2:	4809      	ldr	r0, [pc, #36]	@ (80036f8 <MX_LPUART1_UART_Init+0x90>)
 80036d4:	f00e fa15 	bl	8011b02 <HAL_UARTEx_SetRxFifoThreshold>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 80036de:	f000 fc41 	bl	8003f64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80036e2:	4805      	ldr	r0, [pc, #20]	@ (80036f8 <MX_LPUART1_UART_Init+0x90>)
 80036e4:	f00e f996 	bl	8011a14 <HAL_UARTEx_DisableFifoMode>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 80036ee:	f000 fc39 	bl	8003f64 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80036f2:	bf00      	nop
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	24000da4 	.word	0x24000da4
 80036fc:	58000c00 	.word	0x58000c00
 8003700:	00033324 	.word	0x00033324

08003704 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003708:	4b22      	ldr	r3, [pc, #136]	@ (8003794 <MX_USART3_UART_Init+0x90>)
 800370a:	4a23      	ldr	r2, [pc, #140]	@ (8003798 <MX_USART3_UART_Init+0x94>)
 800370c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 8593750;
 800370e:	4b21      	ldr	r3, [pc, #132]	@ (8003794 <MX_USART3_UART_Init+0x90>)
 8003710:	4a22      	ldr	r2, [pc, #136]	@ (800379c <MX_USART3_UART_Init+0x98>)
 8003712:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003714:	4b1f      	ldr	r3, [pc, #124]	@ (8003794 <MX_USART3_UART_Init+0x90>)
 8003716:	2200      	movs	r2, #0
 8003718:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800371a:	4b1e      	ldr	r3, [pc, #120]	@ (8003794 <MX_USART3_UART_Init+0x90>)
 800371c:	2200      	movs	r2, #0
 800371e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003720:	4b1c      	ldr	r3, [pc, #112]	@ (8003794 <MX_USART3_UART_Init+0x90>)
 8003722:	2200      	movs	r2, #0
 8003724:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003726:	4b1b      	ldr	r3, [pc, #108]	@ (8003794 <MX_USART3_UART_Init+0x90>)
 8003728:	220c      	movs	r2, #12
 800372a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800372c:	4b19      	ldr	r3, [pc, #100]	@ (8003794 <MX_USART3_UART_Init+0x90>)
 800372e:	2200      	movs	r2, #0
 8003730:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003732:	4b18      	ldr	r3, [pc, #96]	@ (8003794 <MX_USART3_UART_Init+0x90>)
 8003734:	2200      	movs	r2, #0
 8003736:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003738:	4b16      	ldr	r3, [pc, #88]	@ (8003794 <MX_USART3_UART_Init+0x90>)
 800373a:	2200      	movs	r2, #0
 800373c:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800373e:	4b15      	ldr	r3, [pc, #84]	@ (8003794 <MX_USART3_UART_Init+0x90>)
 8003740:	2200      	movs	r2, #0
 8003742:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003744:	4b13      	ldr	r3, [pc, #76]	@ (8003794 <MX_USART3_UART_Init+0x90>)
 8003746:	2200      	movs	r2, #0
 8003748:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800374a:	4812      	ldr	r0, [pc, #72]	@ (8003794 <MX_USART3_UART_Init+0x90>)
 800374c:	f00c ff35 	bl	80105ba <HAL_UART_Init>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8003756:	f000 fc05 	bl	8003f64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800375a:	2100      	movs	r1, #0
 800375c:	480d      	ldr	r0, [pc, #52]	@ (8003794 <MX_USART3_UART_Init+0x90>)
 800375e:	f00e f992 	bl	8011a86 <HAL_UARTEx_SetTxFifoThreshold>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8003768:	f000 fbfc 	bl	8003f64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800376c:	2100      	movs	r1, #0
 800376e:	4809      	ldr	r0, [pc, #36]	@ (8003794 <MX_USART3_UART_Init+0x90>)
 8003770:	f00e f9c7 	bl	8011b02 <HAL_UARTEx_SetRxFifoThreshold>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 800377a:	f000 fbf3 	bl	8003f64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800377e:	4805      	ldr	r0, [pc, #20]	@ (8003794 <MX_USART3_UART_Init+0x90>)
 8003780:	f00e f948 	bl	8011a14 <HAL_UARTEx_DisableFifoMode>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 800378a:	f000 fbeb 	bl	8003f64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800378e:	bf00      	nop
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	24000e38 	.word	0x24000e38
 8003798:	40004800 	.word	0x40004800
 800379c:	00832156 	.word	0x00832156

080037a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b098      	sub	sp, #96	@ 0x60
 80037a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037a6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80037aa:	2200      	movs	r2, #0
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	605a      	str	r2, [r3, #4]
 80037b0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80037b2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80037b6:	2200      	movs	r2, #0
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	605a      	str	r2, [r3, #4]
 80037bc:	609a      	str	r2, [r3, #8]
 80037be:	60da      	str	r2, [r3, #12]
 80037c0:	611a      	str	r2, [r3, #16]
 80037c2:	615a      	str	r2, [r3, #20]
 80037c4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80037c6:	1d3b      	adds	r3, r7, #4
 80037c8:	2234      	movs	r2, #52	@ 0x34
 80037ca:	2100      	movs	r1, #0
 80037cc:	4618      	mov	r0, r3
 80037ce:	f00f f864 	bl	801289a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80037d2:	4b3a      	ldr	r3, [pc, #232]	@ (80038bc <MX_TIM1_Init+0x11c>)
 80037d4:	4a3a      	ldr	r2, [pc, #232]	@ (80038c0 <MX_TIM1_Init+0x120>)
 80037d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80037d8:	4b38      	ldr	r3, [pc, #224]	@ (80038bc <MX_TIM1_Init+0x11c>)
 80037da:	2200      	movs	r2, #0
 80037dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037de:	4b37      	ldr	r3, [pc, #220]	@ (80038bc <MX_TIM1_Init+0x11c>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3240;
 80037e4:	4b35      	ldr	r3, [pc, #212]	@ (80038bc <MX_TIM1_Init+0x11c>)
 80037e6:	f640 42a8 	movw	r2, #3240	@ 0xca8
 80037ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037ec:	4b33      	ldr	r3, [pc, #204]	@ (80038bc <MX_TIM1_Init+0x11c>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80037f2:	4b32      	ldr	r3, [pc, #200]	@ (80038bc <MX_TIM1_Init+0x11c>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037f8:	4b30      	ldr	r3, [pc, #192]	@ (80038bc <MX_TIM1_Init+0x11c>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80037fe:	482f      	ldr	r0, [pc, #188]	@ (80038bc <MX_TIM1_Init+0x11c>)
 8003800:	f00b f9cc 	bl	800eb9c <HAL_TIM_PWM_Init>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d001      	beq.n	800380e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800380a:	f000 fbab 	bl	8003f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800380e:	2300      	movs	r3, #0
 8003810:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003812:	2300      	movs	r3, #0
 8003814:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003816:	2300      	movs	r3, #0
 8003818:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800381a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800381e:	4619      	mov	r1, r3
 8003820:	4826      	ldr	r0, [pc, #152]	@ (80038bc <MX_TIM1_Init+0x11c>)
 8003822:	f00c fd69 	bl	80102f8 <HAL_TIMEx_MasterConfigSynchronization>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800382c:	f000 fb9a 	bl	8003f64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003830:	2360      	movs	r3, #96	@ 0x60
 8003832:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 1620;
 8003834:	f240 6354 	movw	r3, #1620	@ 0x654
 8003838:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800383a:	2302      	movs	r3, #2
 800383c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 800383e:	2308      	movs	r3, #8
 8003840:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003842:	2300      	movs	r3, #0
 8003844:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8003846:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800384a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 800384c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003850:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003852:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003856:	2200      	movs	r2, #0
 8003858:	4619      	mov	r1, r3
 800385a:	4818      	ldr	r0, [pc, #96]	@ (80038bc <MX_TIM1_Init+0x11c>)
 800385c:	f00b fc9c 	bl	800f198 <HAL_TIM_PWM_ConfigChannel>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003866:	f000 fb7d 	bl	8003f64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800386a:	2300      	movs	r3, #0
 800386c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800386e:	2300      	movs	r3, #0
 8003870:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003872:	2300      	movs	r3, #0
 8003874:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0xFF;
 8003876:	23ff      	movs	r3, #255	@ 0xff
 8003878:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800387a:	2300      	movs	r3, #0
 800387c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800387e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003882:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003884:	2300      	movs	r3, #0
 8003886:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003888:	2300      	movs	r3, #0
 800388a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800388c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003890:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003892:	2300      	movs	r3, #0
 8003894:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003896:	2300      	movs	r3, #0
 8003898:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800389a:	1d3b      	adds	r3, r7, #4
 800389c:	4619      	mov	r1, r3
 800389e:	4807      	ldr	r0, [pc, #28]	@ (80038bc <MX_TIM1_Init+0x11c>)
 80038a0:	f00c fdc6 	bl	8010430 <HAL_TIMEx_ConfigBreakDeadTime>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80038aa:	f000 fb5b 	bl	8003f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80038ae:	4803      	ldr	r0, [pc, #12]	@ (80038bc <MX_TIM1_Init+0x11c>)
 80038b0:	f000 ffc8 	bl	8004844 <HAL_TIM_MspPostInit>

}
 80038b4:	bf00      	nop
 80038b6:	3760      	adds	r7, #96	@ 0x60
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	24000ecc 	.word	0x24000ecc
 80038c0:	40010000 	.word	0x40010000

080038c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b08a      	sub	sp, #40	@ 0x28
 80038c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038ca:	f107 031c 	add.w	r3, r7, #28
 80038ce:	2200      	movs	r2, #0
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	605a      	str	r2, [r3, #4]
 80038d4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80038d6:	463b      	mov	r3, r7
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]
 80038dc:	605a      	str	r2, [r3, #4]
 80038de:	609a      	str	r2, [r3, #8]
 80038e0:	60da      	str	r2, [r3, #12]
 80038e2:	611a      	str	r2, [r3, #16]
 80038e4:	615a      	str	r2, [r3, #20]
 80038e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80038e8:	4b22      	ldr	r3, [pc, #136]	@ (8003974 <MX_TIM2_Init+0xb0>)
 80038ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80038ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80038f0:	4b20      	ldr	r3, [pc, #128]	@ (8003974 <MX_TIM2_Init+0xb0>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038f6:	4b1f      	ldr	r3, [pc, #124]	@ (8003974 <MX_TIM2_Init+0xb0>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80038fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003974 <MX_TIM2_Init+0xb0>)
 80038fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003902:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003904:	4b1b      	ldr	r3, [pc, #108]	@ (8003974 <MX_TIM2_Init+0xb0>)
 8003906:	2200      	movs	r2, #0
 8003908:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800390a:	4b1a      	ldr	r3, [pc, #104]	@ (8003974 <MX_TIM2_Init+0xb0>)
 800390c:	2200      	movs	r2, #0
 800390e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003910:	4818      	ldr	r0, [pc, #96]	@ (8003974 <MX_TIM2_Init+0xb0>)
 8003912:	f00b f943 	bl	800eb9c <HAL_TIM_PWM_Init>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800391c:	f000 fb22 	bl	8003f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003920:	2300      	movs	r3, #0
 8003922:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003924:	2300      	movs	r3, #0
 8003926:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003928:	f107 031c 	add.w	r3, r7, #28
 800392c:	4619      	mov	r1, r3
 800392e:	4811      	ldr	r0, [pc, #68]	@ (8003974 <MX_TIM2_Init+0xb0>)
 8003930:	f00c fce2 	bl	80102f8 <HAL_TIMEx_MasterConfigSynchronization>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800393a:	f000 fb13 	bl	8003f64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800393e:	2360      	movs	r3, #96	@ 0x60
 8003940:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003942:	2300      	movs	r3, #0
 8003944:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003946:	2300      	movs	r3, #0
 8003948:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800394a:	2300      	movs	r3, #0
 800394c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800394e:	463b      	mov	r3, r7
 8003950:	2200      	movs	r2, #0
 8003952:	4619      	mov	r1, r3
 8003954:	4807      	ldr	r0, [pc, #28]	@ (8003974 <MX_TIM2_Init+0xb0>)
 8003956:	f00b fc1f 	bl	800f198 <HAL_TIM_PWM_ConfigChannel>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8003960:	f000 fb00 	bl	8003f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003964:	4803      	ldr	r0, [pc, #12]	@ (8003974 <MX_TIM2_Init+0xb0>)
 8003966:	f000 ff6d 	bl	8004844 <HAL_TIM_MspPostInit>

}
 800396a:	bf00      	nop
 800396c:	3728      	adds	r7, #40	@ 0x28
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	24000f18 	.word	0x24000f18

08003978 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b088      	sub	sp, #32
 800397c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800397e:	f107 0314 	add.w	r3, r7, #20
 8003982:	2200      	movs	r2, #0
 8003984:	601a      	str	r2, [r3, #0]
 8003986:	605a      	str	r2, [r3, #4]
 8003988:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800398a:	1d3b      	adds	r3, r7, #4
 800398c:	2200      	movs	r2, #0
 800398e:	601a      	str	r2, [r3, #0]
 8003990:	605a      	str	r2, [r3, #4]
 8003992:	609a      	str	r2, [r3, #8]
 8003994:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003996:	4b20      	ldr	r3, [pc, #128]	@ (8003a18 <MX_TIM3_Init+0xa0>)
 8003998:	4a20      	ldr	r2, [pc, #128]	@ (8003a1c <MX_TIM3_Init+0xa4>)
 800399a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800399c:	4b1e      	ldr	r3, [pc, #120]	@ (8003a18 <MX_TIM3_Init+0xa0>)
 800399e:	2200      	movs	r2, #0
 80039a0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039a2:	4b1d      	ldr	r3, [pc, #116]	@ (8003a18 <MX_TIM3_Init+0xa0>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80039a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003a18 <MX_TIM3_Init+0xa0>)
 80039aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80039ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039b0:	4b19      	ldr	r3, [pc, #100]	@ (8003a18 <MX_TIM3_Init+0xa0>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039b6:	4b18      	ldr	r3, [pc, #96]	@ (8003a18 <MX_TIM3_Init+0xa0>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80039bc:	4816      	ldr	r0, [pc, #88]	@ (8003a18 <MX_TIM3_Init+0xa0>)
 80039be:	f00b faf7 	bl	800efb0 <HAL_TIM_IC_Init>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80039c8:	f000 facc 	bl	8003f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039cc:	2300      	movs	r3, #0
 80039ce:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039d0:	2300      	movs	r3, #0
 80039d2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80039d4:	f107 0314 	add.w	r3, r7, #20
 80039d8:	4619      	mov	r1, r3
 80039da:	480f      	ldr	r0, [pc, #60]	@ (8003a18 <MX_TIM3_Init+0xa0>)
 80039dc:	f00c fc8c 	bl	80102f8 <HAL_TIMEx_MasterConfigSynchronization>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80039e6:	f000 fabd 	bl	8003f64 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80039ea:	2300      	movs	r3, #0
 80039ec:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80039ee:	2301      	movs	r3, #1
 80039f0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80039f2:	2300      	movs	r3, #0
 80039f4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80039f6:	2300      	movs	r3, #0
 80039f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80039fa:	1d3b      	adds	r3, r7, #4
 80039fc:	2200      	movs	r2, #0
 80039fe:	4619      	mov	r1, r3
 8003a00:	4805      	ldr	r0, [pc, #20]	@ (8003a18 <MX_TIM3_Init+0xa0>)
 8003a02:	f00b fb2c 	bl	800f05e <HAL_TIM_IC_ConfigChannel>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d001      	beq.n	8003a10 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003a0c:	f000 faaa 	bl	8003f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003a10:	bf00      	nop
 8003a12:	3720      	adds	r7, #32
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	24000f64 	.word	0x24000f64
 8003a1c:	40000400 	.word	0x40000400

08003a20 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b08a      	sub	sp, #40	@ 0x28
 8003a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a26:	f107 031c 	add.w	r3, r7, #28
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	601a      	str	r2, [r3, #0]
 8003a2e:	605a      	str	r2, [r3, #4]
 8003a30:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a32:	463b      	mov	r3, r7
 8003a34:	2200      	movs	r2, #0
 8003a36:	601a      	str	r2, [r3, #0]
 8003a38:	605a      	str	r2, [r3, #4]
 8003a3a:	609a      	str	r2, [r3, #8]
 8003a3c:	60da      	str	r2, [r3, #12]
 8003a3e:	611a      	str	r2, [r3, #16]
 8003a40:	615a      	str	r2, [r3, #20]
 8003a42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003a44:	4b21      	ldr	r3, [pc, #132]	@ (8003acc <MX_TIM4_Init+0xac>)
 8003a46:	4a22      	ldr	r2, [pc, #136]	@ (8003ad0 <MX_TIM4_Init+0xb0>)
 8003a48:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003a4a:	4b20      	ldr	r3, [pc, #128]	@ (8003acc <MX_TIM4_Init+0xac>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a50:	4b1e      	ldr	r3, [pc, #120]	@ (8003acc <MX_TIM4_Init+0xac>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003a56:	4b1d      	ldr	r3, [pc, #116]	@ (8003acc <MX_TIM4_Init+0xac>)
 8003a58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003a5c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a5e:	4b1b      	ldr	r3, [pc, #108]	@ (8003acc <MX_TIM4_Init+0xac>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a64:	4b19      	ldr	r3, [pc, #100]	@ (8003acc <MX_TIM4_Init+0xac>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003a6a:	4818      	ldr	r0, [pc, #96]	@ (8003acc <MX_TIM4_Init+0xac>)
 8003a6c:	f00b f896 	bl	800eb9c <HAL_TIM_PWM_Init>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8003a76:	f000 fa75 	bl	8003f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003a82:	f107 031c 	add.w	r3, r7, #28
 8003a86:	4619      	mov	r1, r3
 8003a88:	4810      	ldr	r0, [pc, #64]	@ (8003acc <MX_TIM4_Init+0xac>)
 8003a8a:	f00c fc35 	bl	80102f8 <HAL_TIMEx_MasterConfigSynchronization>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d001      	beq.n	8003a98 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8003a94:	f000 fa66 	bl	8003f64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a98:	2360      	movs	r3, #96	@ 0x60
 8003a9a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003aa8:	463b      	mov	r3, r7
 8003aaa:	2200      	movs	r2, #0
 8003aac:	4619      	mov	r1, r3
 8003aae:	4807      	ldr	r0, [pc, #28]	@ (8003acc <MX_TIM4_Init+0xac>)
 8003ab0:	f00b fb72 	bl	800f198 <HAL_TIM_PWM_ConfigChannel>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8003aba:	f000 fa53 	bl	8003f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003abe:	4803      	ldr	r0, [pc, #12]	@ (8003acc <MX_TIM4_Init+0xac>)
 8003ac0:	f000 fec0 	bl	8004844 <HAL_TIM_MspPostInit>

}
 8003ac4:	bf00      	nop
 8003ac6:	3728      	adds	r7, #40	@ 0x28
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	24000fb0 	.word	0x24000fb0
 8003ad0:	40000800 	.word	0x40000800

08003ad4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b088      	sub	sp, #32
 8003ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ada:	f107 0314 	add.w	r3, r7, #20
 8003ade:	2200      	movs	r2, #0
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	605a      	str	r2, [r3, #4]
 8003ae4:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003ae6:	1d3b      	adds	r3, r7, #4
 8003ae8:	2200      	movs	r2, #0
 8003aea:	601a      	str	r2, [r3, #0]
 8003aec:	605a      	str	r2, [r3, #4]
 8003aee:	609a      	str	r2, [r3, #8]
 8003af0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8003af2:	4b22      	ldr	r3, [pc, #136]	@ (8003b7c <MX_TIM15_Init+0xa8>)
 8003af4:	4a22      	ldr	r2, [pc, #136]	@ (8003b80 <MX_TIM15_Init+0xac>)
 8003af6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8003af8:	4b20      	ldr	r3, [pc, #128]	@ (8003b7c <MX_TIM15_Init+0xa8>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003afe:	4b1f      	ldr	r3, [pc, #124]	@ (8003b7c <MX_TIM15_Init+0xa8>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8003b04:	4b1d      	ldr	r3, [pc, #116]	@ (8003b7c <MX_TIM15_Init+0xa8>)
 8003b06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003b0a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b0c:	4b1b      	ldr	r3, [pc, #108]	@ (8003b7c <MX_TIM15_Init+0xa8>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8003b12:	4b1a      	ldr	r3, [pc, #104]	@ (8003b7c <MX_TIM15_Init+0xa8>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b18:	4b18      	ldr	r3, [pc, #96]	@ (8003b7c <MX_TIM15_Init+0xa8>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8003b1e:	4817      	ldr	r0, [pc, #92]	@ (8003b7c <MX_TIM15_Init+0xa8>)
 8003b20:	f00b fa46 	bl	800efb0 <HAL_TIM_IC_Init>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8003b2a:	f000 fa1b 	bl	8003f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b32:	2300      	movs	r3, #0
 8003b34:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8003b36:	f107 0314 	add.w	r3, r7, #20
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	480f      	ldr	r0, [pc, #60]	@ (8003b7c <MX_TIM15_Init+0xa8>)
 8003b3e:	f00c fbdb 	bl	80102f8 <HAL_TIMEx_MasterConfigSynchronization>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8003b48:	f000 fa0c 	bl	8003f64 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003b50:	2301      	movs	r3, #1
 8003b52:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003b54:	2300      	movs	r3, #0
 8003b56:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003b5c:	1d3b      	adds	r3, r7, #4
 8003b5e:	2200      	movs	r2, #0
 8003b60:	4619      	mov	r1, r3
 8003b62:	4806      	ldr	r0, [pc, #24]	@ (8003b7c <MX_TIM15_Init+0xa8>)
 8003b64:	f00b fa7b 	bl	800f05e <HAL_TIM_IC_ConfigChannel>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <MX_TIM15_Init+0x9e>
  {
    Error_Handler();
 8003b6e:	f000 f9f9 	bl	8003f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8003b72:	bf00      	nop
 8003b74:	3720      	adds	r7, #32
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	24000ffc 	.word	0x24000ffc
 8003b80:	40014000 	.word	0x40014000

08003b84 <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b088      	sub	sp, #32
 8003b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b8a:	f107 0310 	add.w	r3, r7, #16
 8003b8e:	2200      	movs	r2, #0
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	605a      	str	r2, [r3, #4]
 8003b94:	609a      	str	r2, [r3, #8]
 8003b96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b98:	1d3b      	adds	r3, r7, #4
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	601a      	str	r2, [r3, #0]
 8003b9e:	605a      	str	r2, [r3, #4]
 8003ba0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 8003ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8003c1c <MX_TIM24_Init+0x98>)
 8003ba4:	4a1e      	ldr	r2, [pc, #120]	@ (8003c20 <MX_TIM24_Init+0x9c>)
 8003ba6:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 275 - 1;
 8003ba8:	4b1c      	ldr	r3, [pc, #112]	@ (8003c1c <MX_TIM24_Init+0x98>)
 8003baa:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8003bae:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8003c1c <MX_TIM24_Init+0x98>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 8003bb6:	4b19      	ldr	r3, [pc, #100]	@ (8003c1c <MX_TIM24_Init+0x98>)
 8003bb8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003bbc:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bbe:	4b17      	ldr	r3, [pc, #92]	@ (8003c1c <MX_TIM24_Init+0x98>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003bc4:	4b15      	ldr	r3, [pc, #84]	@ (8003c1c <MX_TIM24_Init+0x98>)
 8003bc6:	2280      	movs	r2, #128	@ 0x80
 8003bc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 8003bca:	4814      	ldr	r0, [pc, #80]	@ (8003c1c <MX_TIM24_Init+0x98>)
 8003bcc:	f00a ff10 	bl	800e9f0 <HAL_TIM_Base_Init>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <MX_TIM24_Init+0x56>
  {
    Error_Handler();
 8003bd6:	f000 f9c5 	bl	8003f64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003bde:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 8003be0:	f107 0310 	add.w	r3, r7, #16
 8003be4:	4619      	mov	r1, r3
 8003be6:	480d      	ldr	r0, [pc, #52]	@ (8003c1c <MX_TIM24_Init+0x98>)
 8003be8:	f00b fbea 	bl	800f3c0 <HAL_TIM_ConfigClockSource>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <MX_TIM24_Init+0x72>
  {
    Error_Handler();
 8003bf2:	f000 f9b7 	bl	8003f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 8003bfe:	1d3b      	adds	r3, r7, #4
 8003c00:	4619      	mov	r1, r3
 8003c02:	4806      	ldr	r0, [pc, #24]	@ (8003c1c <MX_TIM24_Init+0x98>)
 8003c04:	f00c fb78 	bl	80102f8 <HAL_TIMEx_MasterConfigSynchronization>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <MX_TIM24_Init+0x8e>
  {
    Error_Handler();
 8003c0e:	f000 f9a9 	bl	8003f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 8003c12:	bf00      	nop
 8003c14:	3720      	adds	r7, #32
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	24001048 	.word	0x24001048
 8003c20:	4000e400 	.word	0x4000e400

08003c24 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8003c28:	bf00      	nop
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
	...

08003c34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003c3a:	4b11      	ldr	r3, [pc, #68]	@ (8003c80 <MX_DMA_Init+0x4c>)
 8003c3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003c40:	4a0f      	ldr	r2, [pc, #60]	@ (8003c80 <MX_DMA_Init+0x4c>)
 8003c42:	f043 0301 	orr.w	r3, r3, #1
 8003c46:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c80 <MX_DMA_Init+0x4c>)
 8003c4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	607b      	str	r3, [r7, #4]
 8003c56:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8003c58:	2200      	movs	r2, #0
 8003c5a:	2100      	movs	r1, #0
 8003c5c:	200c      	movs	r0, #12
 8003c5e:	f004 fa42 	bl	80080e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003c62:	200c      	movs	r0, #12
 8003c64:	f004 fa59 	bl	800811a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8003c68:	2200      	movs	r2, #0
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	200d      	movs	r0, #13
 8003c6e:	f004 fa3a 	bl	80080e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8003c72:	200d      	movs	r0, #13
 8003c74:	f004 fa51 	bl	800811a <HAL_NVIC_EnableIRQ>

}
 8003c78:	bf00      	nop
 8003c7a:	3708      	adds	r7, #8
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	58024400 	.word	0x58024400

08003c84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b08e      	sub	sp, #56	@ 0x38
 8003c88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c8e:	2200      	movs	r2, #0
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	605a      	str	r2, [r3, #4]
 8003c94:	609a      	str	r2, [r3, #8]
 8003c96:	60da      	str	r2, [r3, #12]
 8003c98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c9a:	4bab      	ldr	r3, [pc, #684]	@ (8003f48 <MX_GPIO_Init+0x2c4>)
 8003c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ca0:	4aa9      	ldr	r2, [pc, #676]	@ (8003f48 <MX_GPIO_Init+0x2c4>)
 8003ca2:	f043 0310 	orr.w	r3, r3, #16
 8003ca6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003caa:	4ba7      	ldr	r3, [pc, #668]	@ (8003f48 <MX_GPIO_Init+0x2c4>)
 8003cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003cb0:	f003 0310 	and.w	r3, r3, #16
 8003cb4:	623b      	str	r3, [r7, #32]
 8003cb6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cb8:	4ba3      	ldr	r3, [pc, #652]	@ (8003f48 <MX_GPIO_Init+0x2c4>)
 8003cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003cbe:	4aa2      	ldr	r2, [pc, #648]	@ (8003f48 <MX_GPIO_Init+0x2c4>)
 8003cc0:	f043 0304 	orr.w	r3, r3, #4
 8003cc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003cc8:	4b9f      	ldr	r3, [pc, #636]	@ (8003f48 <MX_GPIO_Init+0x2c4>)
 8003cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003cce:	f003 0304 	and.w	r3, r3, #4
 8003cd2:	61fb      	str	r3, [r7, #28]
 8003cd4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003cd6:	4b9c      	ldr	r3, [pc, #624]	@ (8003f48 <MX_GPIO_Init+0x2c4>)
 8003cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003cdc:	4a9a      	ldr	r2, [pc, #616]	@ (8003f48 <MX_GPIO_Init+0x2c4>)
 8003cde:	f043 0320 	orr.w	r3, r3, #32
 8003ce2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003ce6:	4b98      	ldr	r3, [pc, #608]	@ (8003f48 <MX_GPIO_Init+0x2c4>)
 8003ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003cec:	f003 0320 	and.w	r3, r3, #32
 8003cf0:	61bb      	str	r3, [r7, #24]
 8003cf2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003cf4:	4b94      	ldr	r3, [pc, #592]	@ (8003f48 <MX_GPIO_Init+0x2c4>)
 8003cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003cfa:	4a93      	ldr	r2, [pc, #588]	@ (8003f48 <MX_GPIO_Init+0x2c4>)
 8003cfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003d04:	4b90      	ldr	r3, [pc, #576]	@ (8003f48 <MX_GPIO_Init+0x2c4>)
 8003d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d0e:	617b      	str	r3, [r7, #20]
 8003d10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d12:	4b8d      	ldr	r3, [pc, #564]	@ (8003f48 <MX_GPIO_Init+0x2c4>)
 8003d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d18:	4a8b      	ldr	r2, [pc, #556]	@ (8003f48 <MX_GPIO_Init+0x2c4>)
 8003d1a:	f043 0301 	orr.w	r3, r3, #1
 8003d1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003d22:	4b89      	ldr	r3, [pc, #548]	@ (8003f48 <MX_GPIO_Init+0x2c4>)
 8003d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	613b      	str	r3, [r7, #16]
 8003d2e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d30:	4b85      	ldr	r3, [pc, #532]	@ (8003f48 <MX_GPIO_Init+0x2c4>)
 8003d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d36:	4a84      	ldr	r2, [pc, #528]	@ (8003f48 <MX_GPIO_Init+0x2c4>)
 8003d38:	f043 0302 	orr.w	r3, r3, #2
 8003d3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003d40:	4b81      	ldr	r3, [pc, #516]	@ (8003f48 <MX_GPIO_Init+0x2c4>)
 8003d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003d4e:	4b7e      	ldr	r3, [pc, #504]	@ (8003f48 <MX_GPIO_Init+0x2c4>)
 8003d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d54:	4a7c      	ldr	r2, [pc, #496]	@ (8003f48 <MX_GPIO_Init+0x2c4>)
 8003d56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003d5e:	4b7a      	ldr	r3, [pc, #488]	@ (8003f48 <MX_GPIO_Init+0x2c4>)
 8003d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d68:	60bb      	str	r3, [r7, #8]
 8003d6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d6c:	4b76      	ldr	r3, [pc, #472]	@ (8003f48 <MX_GPIO_Init+0x2c4>)
 8003d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d72:	4a75      	ldr	r2, [pc, #468]	@ (8003f48 <MX_GPIO_Init+0x2c4>)
 8003d74:	f043 0308 	orr.w	r3, r3, #8
 8003d78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003d7c:	4b72      	ldr	r3, [pc, #456]	@ (8003f48 <MX_GPIO_Init+0x2c4>)
 8003d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d82:	f003 0308 	and.w	r3, r3, #8
 8003d86:	607b      	str	r3, [r7, #4]
 8003d88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LINE_DRIVER1_ENABLE_Pin|LINE_DRIVER2_ENABLE_Pin, GPIO_PIN_SET);
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f640 0105 	movw	r1, #2053	@ 0x805
 8003d90:	486e      	ldr	r0, [pc, #440]	@ (8003f4c <MX_GPIO_Init+0x2c8>)
 8003d92:	f007 fa73 	bl	800b27c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
 8003d96:	2200      	movs	r2, #0
 8003d98:	2102      	movs	r1, #2
 8003d9a:	486d      	ldr	r0, [pc, #436]	@ (8003f50 <MX_GPIO_Init+0x2cc>)
 8003d9c:	f007 fa6e 	bl	800b27c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8003da0:	2200      	movs	r2, #0
 8003da2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003da6:	4869      	ldr	r0, [pc, #420]	@ (8003f4c <MX_GPIO_Init+0x2c8>)
 8003da8:	f007 fa68 	bl	800b27c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_3V3_SWITCH_GPIO_Port, OUT_3V3_SWITCH_Pin, GPIO_PIN_SET);
 8003dac:	2201      	movs	r2, #1
 8003dae:	2101      	movs	r1, #1
 8003db0:	4868      	ldr	r0, [pc, #416]	@ (8003f54 <MX_GPIO_Init+0x2d0>)
 8003db2:	f007 fa63 	bl	800b27c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ACTIVE_GPIO_Port, LED_ACTIVE_Pin, GPIO_PIN_SET);
 8003db6:	2201      	movs	r2, #1
 8003db8:	2101      	movs	r1, #1
 8003dba:	4867      	ldr	r0, [pc, #412]	@ (8003f58 <MX_GPIO_Init+0x2d4>)
 8003dbc:	f007 fa5e 	bl	800b27c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	2102      	movs	r1, #2
 8003dc4:	4864      	ldr	r0, [pc, #400]	@ (8003f58 <MX_GPIO_Init+0x2d4>)
 8003dc6:	f007 fa59 	bl	800b27c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003dca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003dce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003dd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ddc:	4619      	mov	r1, r3
 8003dde:	485f      	ldr	r0, [pc, #380]	@ (8003f5c <MX_GPIO_Init+0x2d8>)
 8003de0:	f007 f88c 	bl	800aefc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LINE_DRIVER1_ENABLE_Pin LINE_DRIVER2_ENABLE_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LINE_DRIVER1_ENABLE_Pin|LINE_DRIVER2_ENABLE_Pin|LED_RED_Pin;
 8003de4:	f644 0305 	movw	r3, #18437	@ 0x4805
 8003de8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dea:	2301      	movs	r3, #1
 8003dec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dee:	2300      	movs	r3, #0
 8003df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003df2:	2300      	movs	r3, #0
 8003df4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003df6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	4853      	ldr	r0, [pc, #332]	@ (8003f4c <MX_GPIO_Init+0x2c8>)
 8003dfe:	f007 f87d 	bl	800aefc <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_500V_ENABLE_Pin */
  GPIO_InitStruct.Pin = OUT_500V_ENABLE_Pin;
 8003e02:	2301      	movs	r3, #1
 8003e04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e06:	2300      	movs	r3, #0
 8003e08:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OUT_500V_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003e0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e12:	4619      	mov	r1, r3
 8003e14:	484e      	ldr	r0, [pc, #312]	@ (8003f50 <MX_GPIO_Init+0x2cc>)
 8003e16:	f007 f871 	bl	800aefc <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_OUTPUT_Pin */
  GPIO_InitStruct.Pin = TEST_OUTPUT_Pin;
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e22:	2300      	movs	r3, #0
 8003e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e26:	2300      	movs	r3, #0
 8003e28:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(TEST_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 8003e2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e2e:	4619      	mov	r1, r3
 8003e30:	4847      	ldr	r0, [pc, #284]	@ (8003f50 <MX_GPIO_Init+0x2cc>)
 8003e32:	f007 f863 	bl	800aefc <HAL_GPIO_Init>

  /*Configure GPIO pin : TURN_PLASMA_ON_Pin */
  GPIO_InitStruct.Pin = TURN_PLASMA_ON_Pin;
 8003e36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e40:	2300      	movs	r3, #0
 8003e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TURN_PLASMA_ON_GPIO_Port, &GPIO_InitStruct);
 8003e44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e48:	4619      	mov	r1, r3
 8003e4a:	4843      	ldr	r0, [pc, #268]	@ (8003f58 <MX_GPIO_Init+0x2d4>)
 8003e4c:	f007 f856 	bl	800aefc <HAL_GPIO_Init>

  /*Configure GPIO pin : INP_COMP_IRQ_Pin */
  GPIO_InitStruct.Pin = INP_COMP_IRQ_Pin;
 8003e50:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003e54:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003e56:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(INP_COMP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003e60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e64:	4619      	mov	r1, r3
 8003e66:	483c      	ldr	r0, [pc, #240]	@ (8003f58 <MX_GPIO_Init+0x2d4>)
 8003e68:	f007 f848 	bl	800aefc <HAL_GPIO_Init>

  /*Configure GPIO pin : POWER_OFF_IRQ_Pin */
  GPIO_InitStruct.Pin = POWER_OFF_IRQ_Pin;
 8003e6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003e72:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003e76:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(POWER_OFF_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003e7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e80:	4619      	mov	r1, r3
 8003e82:	4835      	ldr	r0, [pc, #212]	@ (8003f58 <MX_GPIO_Init+0x2d4>)
 8003e84:	f007 f83a 	bl	800aefc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8003e88:	2380      	movs	r3, #128	@ 0x80
 8003e8a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003e8c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003e90:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e92:	2300      	movs	r3, #0
 8003e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8003e96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	482c      	ldr	r0, [pc, #176]	@ (8003f50 <MX_GPIO_Init+0x2cc>)
 8003e9e:	f007 f82d 	bl	800aefc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8003ea2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003ea6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eac:	2300      	movs	r3, #0
 8003eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003eb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	482a      	ldr	r0, [pc, #168]	@ (8003f60 <MX_GPIO_Init+0x2dc>)
 8003eb8:	f007 f820 	bl	800aefc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8003ebc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ec0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8003ece:	230a      	movs	r3, #10
 8003ed0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8003ed2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4821      	ldr	r0, [pc, #132]	@ (8003f60 <MX_GPIO_Init+0x2dc>)
 8003eda:	f007 f80f 	bl	800aefc <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_3V3_SWITCH_Pin */
  GPIO_InitStruct.Pin = OUT_3V3_SWITCH_Pin;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eea:	2300      	movs	r3, #0
 8003eec:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(OUT_3V3_SWITCH_GPIO_Port, &GPIO_InitStruct);
 8003eee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	4817      	ldr	r0, [pc, #92]	@ (8003f54 <MX_GPIO_Init+0x2d0>)
 8003ef6:	f007 f801 	bl	800aefc <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_15V_ENABLE_Pin */
  GPIO_InitStruct.Pin = OUT_15V_ENABLE_Pin;
 8003efa:	2302      	movs	r3, #2
 8003efc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003efe:	2300      	movs	r3, #0
 8003f00:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f02:	2300      	movs	r3, #0
 8003f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OUT_15V_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003f06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	4811      	ldr	r0, [pc, #68]	@ (8003f54 <MX_GPIO_Init+0x2d0>)
 8003f0e:	f006 fff5 	bl	800aefc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_ACTIVE_Pin LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_ACTIVE_Pin|LED_YELLOW_Pin;
 8003f12:	2303      	movs	r3, #3
 8003f14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f16:	2301      	movs	r3, #1
 8003f18:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f26:	4619      	mov	r1, r3
 8003f28:	480b      	ldr	r0, [pc, #44]	@ (8003f58 <MX_GPIO_Init+0x2d4>)
 8003f2a:	f006 ffe7 	bl	800aefc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003f2e:	2200      	movs	r2, #0
 8003f30:	2100      	movs	r1, #0
 8003f32:	2028      	movs	r0, #40	@ 0x28
 8003f34:	f004 f8d7 	bl	80080e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003f38:	2028      	movs	r0, #40	@ 0x28
 8003f3a:	f004 f8ee 	bl	800811a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003f3e:	bf00      	nop
 8003f40:	3738      	adds	r7, #56	@ 0x38
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	58024400 	.word	0x58024400
 8003f4c:	58020400 	.word	0x58020400
 8003f50:	58021800 	.word	0x58021800
 8003f54:	58020c00 	.word	0x58020c00
 8003f58:	58021000 	.word	0x58021000
 8003f5c:	58020800 	.word	0x58020800
 8003f60:	58020000 	.word	0x58020000

08003f64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f64:	b480      	push	{r7}
 8003f66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003f68:	b672      	cpsid	i
}
 8003f6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003f6c:	bf00      	nop
 8003f6e:	e7fd      	b.n	8003f6c <Error_Handler+0x8>

08003f70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f76:	4b0a      	ldr	r3, [pc, #40]	@ (8003fa0 <HAL_MspInit+0x30>)
 8003f78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003f7c:	4a08      	ldr	r2, [pc, #32]	@ (8003fa0 <HAL_MspInit+0x30>)
 8003f7e:	f043 0302 	orr.w	r3, r3, #2
 8003f82:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003f86:	4b06      	ldr	r3, [pc, #24]	@ (8003fa0 <HAL_MspInit+0x30>)
 8003f88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	607b      	str	r3, [r7, #4]
 8003f92:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr
 8003fa0:	58024400 	.word	0x58024400

08003fa4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b090      	sub	sp, #64	@ 0x40
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	605a      	str	r2, [r3, #4]
 8003fb6:	609a      	str	r2, [r3, #8]
 8003fb8:	60da      	str	r2, [r3, #12]
 8003fba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4aaa      	ldr	r2, [pc, #680]	@ (800426c <HAL_ADC_MspInit+0x2c8>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d16b      	bne.n	800409e <HAL_ADC_MspInit+0xfa>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003fc6:	4baa      	ldr	r3, [pc, #680]	@ (8004270 <HAL_ADC_MspInit+0x2cc>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	3301      	adds	r3, #1
 8003fcc:	4aa8      	ldr	r2, [pc, #672]	@ (8004270 <HAL_ADC_MspInit+0x2cc>)
 8003fce:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003fd0:	4ba7      	ldr	r3, [pc, #668]	@ (8004270 <HAL_ADC_MspInit+0x2cc>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d10e      	bne.n	8003ff6 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003fd8:	4ba6      	ldr	r3, [pc, #664]	@ (8004274 <HAL_ADC_MspInit+0x2d0>)
 8003fda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003fde:	4aa5      	ldr	r2, [pc, #660]	@ (8004274 <HAL_ADC_MspInit+0x2d0>)
 8003fe0:	f043 0320 	orr.w	r3, r3, #32
 8003fe4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003fe8:	4ba2      	ldr	r3, [pc, #648]	@ (8004274 <HAL_ADC_MspInit+0x2d0>)
 8003fea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003fee:	f003 0320 	and.w	r3, r3, #32
 8003ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ff6:	4b9f      	ldr	r3, [pc, #636]	@ (8004274 <HAL_ADC_MspInit+0x2d0>)
 8003ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ffc:	4a9d      	ldr	r2, [pc, #628]	@ (8004274 <HAL_ADC_MspInit+0x2d0>)
 8003ffe:	f043 0301 	orr.w	r3, r3, #1
 8004002:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004006:	4b9b      	ldr	r3, [pc, #620]	@ (8004274 <HAL_ADC_MspInit+0x2d0>)
 8004008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	627b      	str	r3, [r7, #36]	@ 0x24
 8004012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP16
    PA3     ------> ADC1_INP15
    PA4     ------> ADC1_INP18
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8004014:	2319      	movs	r3, #25
 8004016:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004018:	2303      	movs	r3, #3
 800401a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800401c:	2300      	movs	r3, #0
 800401e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004020:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004024:	4619      	mov	r1, r3
 8004026:	4894      	ldr	r0, [pc, #592]	@ (8004278 <HAL_ADC_MspInit+0x2d4>)
 8004028:	f006 ff68 	bl	800aefc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream2;
 800402c:	4b93      	ldr	r3, [pc, #588]	@ (800427c <HAL_ADC_MspInit+0x2d8>)
 800402e:	4a94      	ldr	r2, [pc, #592]	@ (8004280 <HAL_ADC_MspInit+0x2dc>)
 8004030:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004032:	4b92      	ldr	r3, [pc, #584]	@ (800427c <HAL_ADC_MspInit+0x2d8>)
 8004034:	2209      	movs	r2, #9
 8004036:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004038:	4b90      	ldr	r3, [pc, #576]	@ (800427c <HAL_ADC_MspInit+0x2d8>)
 800403a:	2200      	movs	r2, #0
 800403c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800403e:	4b8f      	ldr	r3, [pc, #572]	@ (800427c <HAL_ADC_MspInit+0x2d8>)
 8004040:	2200      	movs	r2, #0
 8004042:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004044:	4b8d      	ldr	r3, [pc, #564]	@ (800427c <HAL_ADC_MspInit+0x2d8>)
 8004046:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800404a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800404c:	4b8b      	ldr	r3, [pc, #556]	@ (800427c <HAL_ADC_MspInit+0x2d8>)
 800404e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004052:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004054:	4b89      	ldr	r3, [pc, #548]	@ (800427c <HAL_ADC_MspInit+0x2d8>)
 8004056:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800405a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800405c:	4b87      	ldr	r3, [pc, #540]	@ (800427c <HAL_ADC_MspInit+0x2d8>)
 800405e:	2200      	movs	r2, #0
 8004060:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8004062:	4b86      	ldr	r3, [pc, #536]	@ (800427c <HAL_ADC_MspInit+0x2d8>)
 8004064:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004068:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800406a:	4b84      	ldr	r3, [pc, #528]	@ (800427c <HAL_ADC_MspInit+0x2d8>)
 800406c:	2200      	movs	r2, #0
 800406e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004070:	4882      	ldr	r0, [pc, #520]	@ (800427c <HAL_ADC_MspInit+0x2d8>)
 8004072:	f004 f86d 	bl	8008150 <HAL_DMA_Init>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <HAL_ADC_MspInit+0xdc>
    {
      Error_Handler();
 800407c:	f7ff ff72 	bl	8003f64 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a7e      	ldr	r2, [pc, #504]	@ (800427c <HAL_ADC_MspInit+0x2d8>)
 8004084:	659a      	str	r2, [r3, #88]	@ 0x58
 8004086:	4a7d      	ldr	r2, [pc, #500]	@ (800427c <HAL_ADC_MspInit+0x2d8>)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800408c:	2200      	movs	r2, #0
 800408e:	2100      	movs	r1, #0
 8004090:	2012      	movs	r0, #18
 8004092:	f004 f828 	bl	80080e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8004096:	2012      	movs	r0, #18
 8004098:	f004 f83f 	bl	800811a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800409c:	e0e2      	b.n	8004264 <HAL_ADC_MspInit+0x2c0>
  else if(hadc->Instance==ADC2)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a78      	ldr	r2, [pc, #480]	@ (8004284 <HAL_ADC_MspInit+0x2e0>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d156      	bne.n	8004156 <HAL_ADC_MspInit+0x1b2>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80040a8:	4b71      	ldr	r3, [pc, #452]	@ (8004270 <HAL_ADC_MspInit+0x2cc>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	3301      	adds	r3, #1
 80040ae:	4a70      	ldr	r2, [pc, #448]	@ (8004270 <HAL_ADC_MspInit+0x2cc>)
 80040b0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80040b2:	4b6f      	ldr	r3, [pc, #444]	@ (8004270 <HAL_ADC_MspInit+0x2cc>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d10e      	bne.n	80040d8 <HAL_ADC_MspInit+0x134>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80040ba:	4b6e      	ldr	r3, [pc, #440]	@ (8004274 <HAL_ADC_MspInit+0x2d0>)
 80040bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80040c0:	4a6c      	ldr	r2, [pc, #432]	@ (8004274 <HAL_ADC_MspInit+0x2d0>)
 80040c2:	f043 0320 	orr.w	r3, r3, #32
 80040c6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80040ca:	4b6a      	ldr	r3, [pc, #424]	@ (8004274 <HAL_ADC_MspInit+0x2d0>)
 80040cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80040d0:	f003 0320 	and.w	r3, r3, #32
 80040d4:	623b      	str	r3, [r7, #32]
 80040d6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040d8:	4b66      	ldr	r3, [pc, #408]	@ (8004274 <HAL_ADC_MspInit+0x2d0>)
 80040da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80040de:	4a65      	ldr	r2, [pc, #404]	@ (8004274 <HAL_ADC_MspInit+0x2d0>)
 80040e0:	f043 0301 	orr.w	r3, r3, #1
 80040e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80040e8:	4b62      	ldr	r3, [pc, #392]	@ (8004274 <HAL_ADC_MspInit+0x2d0>)
 80040ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	61fb      	str	r3, [r7, #28]
 80040f4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040f6:	4b5f      	ldr	r3, [pc, #380]	@ (8004274 <HAL_ADC_MspInit+0x2d0>)
 80040f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80040fc:	4a5d      	ldr	r2, [pc, #372]	@ (8004274 <HAL_ADC_MspInit+0x2d0>)
 80040fe:	f043 0302 	orr.w	r3, r3, #2
 8004102:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004106:	4b5b      	ldr	r3, [pc, #364]	@ (8004274 <HAL_ADC_MspInit+0x2d0>)
 8004108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	61bb      	str	r3, [r7, #24]
 8004112:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004114:	2360      	movs	r3, #96	@ 0x60
 8004116:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004118:	2303      	movs	r3, #3
 800411a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800411c:	2300      	movs	r3, #0
 800411e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004120:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004124:	4619      	mov	r1, r3
 8004126:	4854      	ldr	r0, [pc, #336]	@ (8004278 <HAL_ADC_MspInit+0x2d4>)
 8004128:	f006 fee8 	bl	800aefc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800412c:	2302      	movs	r3, #2
 800412e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004130:	2303      	movs	r3, #3
 8004132:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004134:	2300      	movs	r3, #0
 8004136:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004138:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800413c:	4619      	mov	r1, r3
 800413e:	4852      	ldr	r0, [pc, #328]	@ (8004288 <HAL_ADC_MspInit+0x2e4>)
 8004140:	f006 fedc 	bl	800aefc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8004144:	2200      	movs	r2, #0
 8004146:	2100      	movs	r1, #0
 8004148:	2012      	movs	r0, #18
 800414a:	f003 ffcc 	bl	80080e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800414e:	2012      	movs	r0, #18
 8004150:	f003 ffe3 	bl	800811a <HAL_NVIC_EnableIRQ>
}
 8004154:	e086      	b.n	8004264 <HAL_ADC_MspInit+0x2c0>
  else if(hadc->Instance==ADC3)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a4c      	ldr	r2, [pc, #304]	@ (800428c <HAL_ADC_MspInit+0x2e8>)
 800415c:	4293      	cmp	r3, r2
 800415e:	f040 8081 	bne.w	8004264 <HAL_ADC_MspInit+0x2c0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004162:	4b44      	ldr	r3, [pc, #272]	@ (8004274 <HAL_ADC_MspInit+0x2d0>)
 8004164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004168:	4a42      	ldr	r2, [pc, #264]	@ (8004274 <HAL_ADC_MspInit+0x2d0>)
 800416a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800416e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004172:	4b40      	ldr	r3, [pc, #256]	@ (8004274 <HAL_ADC_MspInit+0x2d0>)
 8004174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004178:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800417c:	617b      	str	r3, [r7, #20]
 800417e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004180:	4b3c      	ldr	r3, [pc, #240]	@ (8004274 <HAL_ADC_MspInit+0x2d0>)
 8004182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004186:	4a3b      	ldr	r2, [pc, #236]	@ (8004274 <HAL_ADC_MspInit+0x2d0>)
 8004188:	f043 0320 	orr.w	r3, r3, #32
 800418c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004190:	4b38      	ldr	r3, [pc, #224]	@ (8004274 <HAL_ADC_MspInit+0x2d0>)
 8004192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004196:	f003 0320 	and.w	r3, r3, #32
 800419a:	613b      	str	r3, [r7, #16]
 800419c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800419e:	4b35      	ldr	r3, [pc, #212]	@ (8004274 <HAL_ADC_MspInit+0x2d0>)
 80041a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80041a4:	4a33      	ldr	r2, [pc, #204]	@ (8004274 <HAL_ADC_MspInit+0x2d0>)
 80041a6:	f043 0304 	orr.w	r3, r3, #4
 80041aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80041ae:	4b31      	ldr	r3, [pc, #196]	@ (8004274 <HAL_ADC_MspInit+0x2d0>)
 80041b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80041b4:	f003 0304 	and.w	r3, r3, #4
 80041b8:	60fb      	str	r3, [r7, #12]
 80041ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80041bc:	f44f 63ff 	mov.w	r3, #2040	@ 0x7f8
 80041c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80041c2:	2303      	movs	r3, #3
 80041c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c6:	2300      	movs	r3, #0
 80041c8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80041ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80041ce:	4619      	mov	r1, r3
 80041d0:	482f      	ldr	r0, [pc, #188]	@ (8004290 <HAL_ADC_MspInit+0x2ec>)
 80041d2:	f006 fe93 	bl	800aefc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80041d6:	2301      	movs	r3, #1
 80041d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80041da:	2303      	movs	r3, #3
 80041dc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041de:	2300      	movs	r3, #0
 80041e0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80041e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80041e6:	4619      	mov	r1, r3
 80041e8:	482a      	ldr	r0, [pc, #168]	@ (8004294 <HAL_ADC_MspInit+0x2f0>)
 80041ea:	f006 fe87 	bl	800aefc <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80041ee:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 80041f2:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80041f6:	f000 fe43 	bl	8004e80 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80041fa:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 80041fe:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8004202:	f000 fe3d 	bl	8004e80 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8004206:	4b24      	ldr	r3, [pc, #144]	@ (8004298 <HAL_ADC_MspInit+0x2f4>)
 8004208:	4a24      	ldr	r2, [pc, #144]	@ (800429c <HAL_ADC_MspInit+0x2f8>)
 800420a:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800420c:	4b22      	ldr	r3, [pc, #136]	@ (8004298 <HAL_ADC_MspInit+0x2f4>)
 800420e:	2273      	movs	r2, #115	@ 0x73
 8004210:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004212:	4b21      	ldr	r3, [pc, #132]	@ (8004298 <HAL_ADC_MspInit+0x2f4>)
 8004214:	2200      	movs	r2, #0
 8004216:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8004218:	4b1f      	ldr	r3, [pc, #124]	@ (8004298 <HAL_ADC_MspInit+0x2f4>)
 800421a:	2200      	movs	r2, #0
 800421c:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800421e:	4b1e      	ldr	r3, [pc, #120]	@ (8004298 <HAL_ADC_MspInit+0x2f4>)
 8004220:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004224:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004226:	4b1c      	ldr	r3, [pc, #112]	@ (8004298 <HAL_ADC_MspInit+0x2f4>)
 8004228:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800422c:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800422e:	4b1a      	ldr	r3, [pc, #104]	@ (8004298 <HAL_ADC_MspInit+0x2f4>)
 8004230:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004234:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8004236:	4b18      	ldr	r3, [pc, #96]	@ (8004298 <HAL_ADC_MspInit+0x2f4>)
 8004238:	2200      	movs	r2, #0
 800423a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800423c:	4b16      	ldr	r3, [pc, #88]	@ (8004298 <HAL_ADC_MspInit+0x2f4>)
 800423e:	2200      	movs	r2, #0
 8004240:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004242:	4b15      	ldr	r3, [pc, #84]	@ (8004298 <HAL_ADC_MspInit+0x2f4>)
 8004244:	2200      	movs	r2, #0
 8004246:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8004248:	4813      	ldr	r0, [pc, #76]	@ (8004298 <HAL_ADC_MspInit+0x2f4>)
 800424a:	f003 ff81 	bl	8008150 <HAL_DMA_Init>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d001      	beq.n	8004258 <HAL_ADC_MspInit+0x2b4>
      Error_Handler();
 8004254:	f7ff fe86 	bl	8003f64 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a0f      	ldr	r2, [pc, #60]	@ (8004298 <HAL_ADC_MspInit+0x2f4>)
 800425c:	659a      	str	r2, [r3, #88]	@ 0x58
 800425e:	4a0e      	ldr	r2, [pc, #56]	@ (8004298 <HAL_ADC_MspInit+0x2f4>)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8004264:	bf00      	nop
 8004266:	3740      	adds	r7, #64	@ 0x40
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	40022000 	.word	0x40022000
 8004270:	2400109c 	.word	0x2400109c
 8004274:	58024400 	.word	0x58024400
 8004278:	58020000 	.word	0x58020000
 800427c:	24000bd8 	.word	0x24000bd8
 8004280:	40020040 	.word	0x40020040
 8004284:	40022100 	.word	0x40022100
 8004288:	58020400 	.word	0x58020400
 800428c:	58026000 	.word	0x58026000
 8004290:	58021400 	.word	0x58021400
 8004294:	58020800 	.word	0x58020800
 8004298:	24000c50 	.word	0x24000c50
 800429c:	40020028 	.word	0x40020028

080042a0 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b08a      	sub	sp, #40	@ 0x28
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042a8:	f107 0314 	add.w	r3, r7, #20
 80042ac:	2200      	movs	r2, #0
 80042ae:	601a      	str	r2, [r3, #0]
 80042b0:	605a      	str	r2, [r3, #4]
 80042b2:	609a      	str	r2, [r3, #8]
 80042b4:	60da      	str	r2, [r3, #12]
 80042b6:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a21      	ldr	r2, [pc, #132]	@ (8004344 <HAL_COMP_MspInit+0xa4>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d13b      	bne.n	800433a <HAL_COMP_MspInit+0x9a>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_COMP12_CLK_ENABLE();
 80042c2:	4b21      	ldr	r3, [pc, #132]	@ (8004348 <HAL_COMP_MspInit+0xa8>)
 80042c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80042c8:	4a1f      	ldr	r2, [pc, #124]	@ (8004348 <HAL_COMP_MspInit+0xa8>)
 80042ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80042ce:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80042d2:	4b1d      	ldr	r3, [pc, #116]	@ (8004348 <HAL_COMP_MspInit+0xa8>)
 80042d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80042d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042dc:	613b      	str	r3, [r7, #16]
 80042de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80042e0:	4b19      	ldr	r3, [pc, #100]	@ (8004348 <HAL_COMP_MspInit+0xa8>)
 80042e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80042e6:	4a18      	ldr	r2, [pc, #96]	@ (8004348 <HAL_COMP_MspInit+0xa8>)
 80042e8:	f043 0310 	orr.w	r3, r3, #16
 80042ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80042f0:	4b15      	ldr	r3, [pc, #84]	@ (8004348 <HAL_COMP_MspInit+0xa8>)
 80042f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80042f6:	f003 0310 	and.w	r3, r3, #16
 80042fa:	60fb      	str	r3, [r7, #12]
 80042fc:	68fb      	ldr	r3, [r7, #12]
    /**COMP2 GPIO Configuration
    PE7     ------> COMP2_INM
    PE11     ------> COMP2_INP
    PE13     ------> COMP2_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_11;
 80042fe:	f44f 6308 	mov.w	r3, #2176	@ 0x880
 8004302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004304:	2303      	movs	r3, #3
 8004306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004308:	2300      	movs	r3, #0
 800430a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800430c:	f107 0314 	add.w	r3, r7, #20
 8004310:	4619      	mov	r1, r3
 8004312:	480e      	ldr	r0, [pc, #56]	@ (800434c <HAL_COMP_MspInit+0xac>)
 8004314:	f006 fdf2 	bl	800aefc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004318:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800431c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800431e:	2302      	movs	r3, #2
 8004320:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004322:	2300      	movs	r3, #0
 8004324:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004326:	2300      	movs	r3, #0
 8004328:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_COMP2;
 800432a:	230d      	movs	r3, #13
 800432c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800432e:	f107 0314 	add.w	r3, r7, #20
 8004332:	4619      	mov	r1, r3
 8004334:	4805      	ldr	r0, [pc, #20]	@ (800434c <HAL_COMP_MspInit+0xac>)
 8004336:	f006 fde1 	bl	800aefc <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 800433a:	bf00      	nop
 800433c:	3728      	adds	r7, #40	@ 0x28
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	58003810 	.word	0x58003810
 8004348:	58024400 	.word	0x58024400
 800434c:	58021000 	.word	0x58021000

08004350 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b08e      	sub	sp, #56	@ 0x38
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004358:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800435c:	2200      	movs	r2, #0
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	605a      	str	r2, [r3, #4]
 8004362:	609a      	str	r2, [r3, #8]
 8004364:	60da      	str	r2, [r3, #12]
 8004366:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a59      	ldr	r2, [pc, #356]	@ (80044d4 <HAL_ETH_MspInit+0x184>)
 800436e:	4293      	cmp	r3, r2
 8004370:	f040 80ab 	bne.w	80044ca <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8004374:	4b58      	ldr	r3, [pc, #352]	@ (80044d8 <HAL_ETH_MspInit+0x188>)
 8004376:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800437a:	4a57      	ldr	r2, [pc, #348]	@ (80044d8 <HAL_ETH_MspInit+0x188>)
 800437c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004380:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004384:	4b54      	ldr	r3, [pc, #336]	@ (80044d8 <HAL_ETH_MspInit+0x188>)
 8004386:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800438a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800438e:	623b      	str	r3, [r7, #32]
 8004390:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8004392:	4b51      	ldr	r3, [pc, #324]	@ (80044d8 <HAL_ETH_MspInit+0x188>)
 8004394:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004398:	4a4f      	ldr	r2, [pc, #316]	@ (80044d8 <HAL_ETH_MspInit+0x188>)
 800439a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800439e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80043a2:	4b4d      	ldr	r3, [pc, #308]	@ (80044d8 <HAL_ETH_MspInit+0x188>)
 80043a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80043a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043ac:	61fb      	str	r3, [r7, #28]
 80043ae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80043b0:	4b49      	ldr	r3, [pc, #292]	@ (80044d8 <HAL_ETH_MspInit+0x188>)
 80043b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80043b6:	4a48      	ldr	r2, [pc, #288]	@ (80044d8 <HAL_ETH_MspInit+0x188>)
 80043b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043bc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80043c0:	4b45      	ldr	r3, [pc, #276]	@ (80044d8 <HAL_ETH_MspInit+0x188>)
 80043c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80043c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ca:	61bb      	str	r3, [r7, #24]
 80043cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043ce:	4b42      	ldr	r3, [pc, #264]	@ (80044d8 <HAL_ETH_MspInit+0x188>)
 80043d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80043d4:	4a40      	ldr	r2, [pc, #256]	@ (80044d8 <HAL_ETH_MspInit+0x188>)
 80043d6:	f043 0304 	orr.w	r3, r3, #4
 80043da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80043de:	4b3e      	ldr	r3, [pc, #248]	@ (80044d8 <HAL_ETH_MspInit+0x188>)
 80043e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80043e4:	f003 0304 	and.w	r3, r3, #4
 80043e8:	617b      	str	r3, [r7, #20]
 80043ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043ec:	4b3a      	ldr	r3, [pc, #232]	@ (80044d8 <HAL_ETH_MspInit+0x188>)
 80043ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80043f2:	4a39      	ldr	r2, [pc, #228]	@ (80044d8 <HAL_ETH_MspInit+0x188>)
 80043f4:	f043 0301 	orr.w	r3, r3, #1
 80043f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80043fc:	4b36      	ldr	r3, [pc, #216]	@ (80044d8 <HAL_ETH_MspInit+0x188>)
 80043fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	613b      	str	r3, [r7, #16]
 8004408:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800440a:	4b33      	ldr	r3, [pc, #204]	@ (80044d8 <HAL_ETH_MspInit+0x188>)
 800440c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004410:	4a31      	ldr	r2, [pc, #196]	@ (80044d8 <HAL_ETH_MspInit+0x188>)
 8004412:	f043 0302 	orr.w	r3, r3, #2
 8004416:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800441a:	4b2f      	ldr	r3, [pc, #188]	@ (80044d8 <HAL_ETH_MspInit+0x188>)
 800441c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	60fb      	str	r3, [r7, #12]
 8004426:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004428:	4b2b      	ldr	r3, [pc, #172]	@ (80044d8 <HAL_ETH_MspInit+0x188>)
 800442a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800442e:	4a2a      	ldr	r2, [pc, #168]	@ (80044d8 <HAL_ETH_MspInit+0x188>)
 8004430:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004434:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004438:	4b27      	ldr	r3, [pc, #156]	@ (80044d8 <HAL_ETH_MspInit+0x188>)
 800443a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800443e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004442:	60bb      	str	r3, [r7, #8]
 8004444:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004446:	2332      	movs	r3, #50	@ 0x32
 8004448:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800444a:	2302      	movs	r3, #2
 800444c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800444e:	2300      	movs	r3, #0
 8004450:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004452:	2300      	movs	r3, #0
 8004454:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004456:	230b      	movs	r3, #11
 8004458:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800445a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800445e:	4619      	mov	r1, r3
 8004460:	481e      	ldr	r0, [pc, #120]	@ (80044dc <HAL_ETH_MspInit+0x18c>)
 8004462:	f006 fd4b 	bl	800aefc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004466:	2386      	movs	r3, #134	@ 0x86
 8004468:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800446a:	2302      	movs	r3, #2
 800446c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800446e:	2300      	movs	r3, #0
 8004470:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004472:	2300      	movs	r3, #0
 8004474:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004476:	230b      	movs	r3, #11
 8004478:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800447a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800447e:	4619      	mov	r1, r3
 8004480:	4817      	ldr	r0, [pc, #92]	@ (80044e0 <HAL_ETH_MspInit+0x190>)
 8004482:	f006 fd3b 	bl	800aefc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004486:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800448a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800448c:	2302      	movs	r3, #2
 800448e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004490:	2300      	movs	r3, #0
 8004492:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004494:	2300      	movs	r3, #0
 8004496:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004498:	230b      	movs	r3, #11
 800449a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800449c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80044a0:	4619      	mov	r1, r3
 80044a2:	4810      	ldr	r0, [pc, #64]	@ (80044e4 <HAL_ETH_MspInit+0x194>)
 80044a4:	f006 fd2a 	bl	800aefc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80044a8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80044ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ae:	2302      	movs	r3, #2
 80044b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044b2:	2300      	movs	r3, #0
 80044b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044b6:	2300      	movs	r3, #0
 80044b8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80044ba:	230b      	movs	r3, #11
 80044bc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80044be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80044c2:	4619      	mov	r1, r3
 80044c4:	4808      	ldr	r0, [pc, #32]	@ (80044e8 <HAL_ETH_MspInit+0x198>)
 80044c6:	f006 fd19 	bl	800aefc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80044ca:	bf00      	nop
 80044cc:	3738      	adds	r7, #56	@ 0x38
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	40028000 	.word	0x40028000
 80044d8:	58024400 	.word	0x58024400
 80044dc:	58020800 	.word	0x58020800
 80044e0:	58020000 	.word	0x58020000
 80044e4:	58020400 	.word	0x58020400
 80044e8:	58021800 	.word	0x58021800

080044ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b0ba      	sub	sp, #232	@ 0xe8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044f4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80044f8:	2200      	movs	r2, #0
 80044fa:	601a      	str	r2, [r3, #0]
 80044fc:	605a      	str	r2, [r3, #4]
 80044fe:	609a      	str	r2, [r3, #8]
 8004500:	60da      	str	r2, [r3, #12]
 8004502:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004504:	f107 0318 	add.w	r3, r7, #24
 8004508:	22b8      	movs	r2, #184	@ 0xb8
 800450a:	2100      	movs	r1, #0
 800450c:	4618      	mov	r0, r3
 800450e:	f00e f9c4 	bl	801289a <memset>
  if(huart->Instance==LPUART1)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a4d      	ldr	r2, [pc, #308]	@ (800464c <HAL_UART_MspInit+0x160>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d146      	bne.n	80045aa <HAL_UART_MspInit+0xbe>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800451c:	f04f 0204 	mov.w	r2, #4
 8004520:	f04f 0300 	mov.w	r3, #0
 8004524:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 8004528:	2300      	movs	r3, #0
 800452a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800452e:	f107 0318 	add.w	r3, r7, #24
 8004532:	4618      	mov	r0, r3
 8004534:	f007 fe76 	bl	800c224 <HAL_RCCEx_PeriphCLKConfig>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800453e:	f7ff fd11 	bl	8003f64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8004542:	4b43      	ldr	r3, [pc, #268]	@ (8004650 <HAL_UART_MspInit+0x164>)
 8004544:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004548:	4a41      	ldr	r2, [pc, #260]	@ (8004650 <HAL_UART_MspInit+0x164>)
 800454a:	f043 0308 	orr.w	r3, r3, #8
 800454e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004552:	4b3f      	ldr	r3, [pc, #252]	@ (8004650 <HAL_UART_MspInit+0x164>)
 8004554:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004558:	f003 0308 	and.w	r3, r3, #8
 800455c:	617b      	str	r3, [r7, #20]
 800455e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004560:	4b3b      	ldr	r3, [pc, #236]	@ (8004650 <HAL_UART_MspInit+0x164>)
 8004562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004566:	4a3a      	ldr	r2, [pc, #232]	@ (8004650 <HAL_UART_MspInit+0x164>)
 8004568:	f043 0302 	orr.w	r3, r3, #2
 800456c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004570:	4b37      	ldr	r3, [pc, #220]	@ (8004650 <HAL_UART_MspInit+0x164>)
 8004572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	613b      	str	r3, [r7, #16]
 800457c:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB6     ------> LPUART1_TX
    PB7     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800457e:	23c0      	movs	r3, #192	@ 0xc0
 8004580:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004584:	2302      	movs	r3, #2
 8004586:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800458a:	2300      	movs	r3, #0
 800458c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004590:	2300      	movs	r3, #0
 8004592:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART;
 8004596:	2308      	movs	r3, #8
 8004598:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800459c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80045a0:	4619      	mov	r1, r3
 80045a2:	482c      	ldr	r0, [pc, #176]	@ (8004654 <HAL_UART_MspInit+0x168>)
 80045a4:	f006 fcaa 	bl	800aefc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80045a8:	e04b      	b.n	8004642 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART3)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a2a      	ldr	r2, [pc, #168]	@ (8004658 <HAL_UART_MspInit+0x16c>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d146      	bne.n	8004642 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80045b4:	f04f 0202 	mov.w	r2, #2
 80045b8:	f04f 0300 	mov.w	r3, #0
 80045bc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80045c0:	2300      	movs	r3, #0
 80045c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80045c6:	f107 0318 	add.w	r3, r7, #24
 80045ca:	4618      	mov	r0, r3
 80045cc:	f007 fe2a 	bl	800c224 <HAL_RCCEx_PeriphCLKConfig>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <HAL_UART_MspInit+0xee>
      Error_Handler();
 80045d6:	f7ff fcc5 	bl	8003f64 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80045da:	4b1d      	ldr	r3, [pc, #116]	@ (8004650 <HAL_UART_MspInit+0x164>)
 80045dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80045e0:	4a1b      	ldr	r2, [pc, #108]	@ (8004650 <HAL_UART_MspInit+0x164>)
 80045e2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045e6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80045ea:	4b19      	ldr	r3, [pc, #100]	@ (8004650 <HAL_UART_MspInit+0x164>)
 80045ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80045f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045f4:	60fb      	str	r3, [r7, #12]
 80045f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80045f8:	4b15      	ldr	r3, [pc, #84]	@ (8004650 <HAL_UART_MspInit+0x164>)
 80045fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80045fe:	4a14      	ldr	r2, [pc, #80]	@ (8004650 <HAL_UART_MspInit+0x164>)
 8004600:	f043 0308 	orr.w	r3, r3, #8
 8004604:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004608:	4b11      	ldr	r3, [pc, #68]	@ (8004650 <HAL_UART_MspInit+0x164>)
 800460a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800460e:	f003 0308 	and.w	r3, r3, #8
 8004612:	60bb      	str	r3, [r7, #8]
 8004614:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8004616:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800461a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800461e:	2302      	movs	r3, #2
 8004620:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004624:	2300      	movs	r3, #0
 8004626:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800462a:	2300      	movs	r3, #0
 800462c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004630:	2307      	movs	r3, #7
 8004632:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004636:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800463a:	4619      	mov	r1, r3
 800463c:	4807      	ldr	r0, [pc, #28]	@ (800465c <HAL_UART_MspInit+0x170>)
 800463e:	f006 fc5d 	bl	800aefc <HAL_GPIO_Init>
}
 8004642:	bf00      	nop
 8004644:	37e8      	adds	r7, #232	@ 0xe8
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	58000c00 	.word	0x58000c00
 8004650:	58024400 	.word	0x58024400
 8004654:	58020400 	.word	0x58020400
 8004658:	40004800 	.word	0x40004800
 800465c:	58020c00 	.word	0x58020c00

08004660 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004660:	b480      	push	{r7}
 8004662:	b087      	sub	sp, #28
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a20      	ldr	r2, [pc, #128]	@ (80046f0 <HAL_TIM_PWM_MspInit+0x90>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d10f      	bne.n	8004692 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004672:	4b20      	ldr	r3, [pc, #128]	@ (80046f4 <HAL_TIM_PWM_MspInit+0x94>)
 8004674:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004678:	4a1e      	ldr	r2, [pc, #120]	@ (80046f4 <HAL_TIM_PWM_MspInit+0x94>)
 800467a:	f043 0301 	orr.w	r3, r3, #1
 800467e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004682:	4b1c      	ldr	r3, [pc, #112]	@ (80046f4 <HAL_TIM_PWM_MspInit+0x94>)
 8004684:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004688:	f003 0301 	and.w	r3, r3, #1
 800468c:	617b      	str	r3, [r7, #20]
 800468e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004690:	e028      	b.n	80046e4 <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM2)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800469a:	d10f      	bne.n	80046bc <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800469c:	4b15      	ldr	r3, [pc, #84]	@ (80046f4 <HAL_TIM_PWM_MspInit+0x94>)
 800469e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80046a2:	4a14      	ldr	r2, [pc, #80]	@ (80046f4 <HAL_TIM_PWM_MspInit+0x94>)
 80046a4:	f043 0301 	orr.w	r3, r3, #1
 80046a8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80046ac:	4b11      	ldr	r3, [pc, #68]	@ (80046f4 <HAL_TIM_PWM_MspInit+0x94>)
 80046ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	613b      	str	r3, [r7, #16]
 80046b8:	693b      	ldr	r3, [r7, #16]
}
 80046ba:	e013      	b.n	80046e4 <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM4)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a0d      	ldr	r2, [pc, #52]	@ (80046f8 <HAL_TIM_PWM_MspInit+0x98>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d10e      	bne.n	80046e4 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80046c6:	4b0b      	ldr	r3, [pc, #44]	@ (80046f4 <HAL_TIM_PWM_MspInit+0x94>)
 80046c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80046cc:	4a09      	ldr	r2, [pc, #36]	@ (80046f4 <HAL_TIM_PWM_MspInit+0x94>)
 80046ce:	f043 0304 	orr.w	r3, r3, #4
 80046d2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80046d6:	4b07      	ldr	r3, [pc, #28]	@ (80046f4 <HAL_TIM_PWM_MspInit+0x94>)
 80046d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80046dc:	f003 0304 	and.w	r3, r3, #4
 80046e0:	60fb      	str	r3, [r7, #12]
 80046e2:	68fb      	ldr	r3, [r7, #12]
}
 80046e4:	bf00      	nop
 80046e6:	371c      	adds	r7, #28
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr
 80046f0:	40010000 	.word	0x40010000
 80046f4:	58024400 	.word	0x58024400
 80046f8:	40000800 	.word	0x40000800

080046fc <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b08c      	sub	sp, #48	@ 0x30
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004704:	f107 031c 	add.w	r3, r7, #28
 8004708:	2200      	movs	r2, #0
 800470a:	601a      	str	r2, [r3, #0]
 800470c:	605a      	str	r2, [r3, #4]
 800470e:	609a      	str	r2, [r3, #8]
 8004710:	60da      	str	r2, [r3, #12]
 8004712:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a34      	ldr	r2, [pc, #208]	@ (80047ec <HAL_TIM_IC_MspInit+0xf0>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d12e      	bne.n	800477c <HAL_TIM_IC_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800471e:	4b34      	ldr	r3, [pc, #208]	@ (80047f0 <HAL_TIM_IC_MspInit+0xf4>)
 8004720:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004724:	4a32      	ldr	r2, [pc, #200]	@ (80047f0 <HAL_TIM_IC_MspInit+0xf4>)
 8004726:	f043 0302 	orr.w	r3, r3, #2
 800472a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800472e:	4b30      	ldr	r3, [pc, #192]	@ (80047f0 <HAL_TIM_IC_MspInit+0xf4>)
 8004730:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	61bb      	str	r3, [r7, #24]
 800473a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800473c:	4b2c      	ldr	r3, [pc, #176]	@ (80047f0 <HAL_TIM_IC_MspInit+0xf4>)
 800473e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004742:	4a2b      	ldr	r2, [pc, #172]	@ (80047f0 <HAL_TIM_IC_MspInit+0xf4>)
 8004744:	f043 0304 	orr.w	r3, r3, #4
 8004748:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800474c:	4b28      	ldr	r3, [pc, #160]	@ (80047f0 <HAL_TIM_IC_MspInit+0xf4>)
 800474e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004752:	f003 0304 	and.w	r3, r3, #4
 8004756:	617b      	str	r3, [r7, #20]
 8004758:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800475a:	2340      	movs	r3, #64	@ 0x40
 800475c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800475e:	2302      	movs	r3, #2
 8004760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004762:	2301      	movs	r3, #1
 8004764:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004766:	2300      	movs	r3, #0
 8004768:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800476a:	2302      	movs	r3, #2
 800476c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800476e:	f107 031c 	add.w	r3, r7, #28
 8004772:	4619      	mov	r1, r3
 8004774:	481f      	ldr	r0, [pc, #124]	@ (80047f4 <HAL_TIM_IC_MspInit+0xf8>)
 8004776:	f006 fbc1 	bl	800aefc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800477a:	e032      	b.n	80047e2 <HAL_TIM_IC_MspInit+0xe6>
  else if(htim_ic->Instance==TIM15)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a1d      	ldr	r2, [pc, #116]	@ (80047f8 <HAL_TIM_IC_MspInit+0xfc>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d12d      	bne.n	80047e2 <HAL_TIM_IC_MspInit+0xe6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004786:	4b1a      	ldr	r3, [pc, #104]	@ (80047f0 <HAL_TIM_IC_MspInit+0xf4>)
 8004788:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800478c:	4a18      	ldr	r2, [pc, #96]	@ (80047f0 <HAL_TIM_IC_MspInit+0xf4>)
 800478e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004792:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004796:	4b16      	ldr	r3, [pc, #88]	@ (80047f0 <HAL_TIM_IC_MspInit+0xf4>)
 8004798:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800479c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047a0:	613b      	str	r3, [r7, #16]
 80047a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80047a4:	4b12      	ldr	r3, [pc, #72]	@ (80047f0 <HAL_TIM_IC_MspInit+0xf4>)
 80047a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80047aa:	4a11      	ldr	r2, [pc, #68]	@ (80047f0 <HAL_TIM_IC_MspInit+0xf4>)
 80047ac:	f043 0310 	orr.w	r3, r3, #16
 80047b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80047b4:	4b0e      	ldr	r3, [pc, #56]	@ (80047f0 <HAL_TIM_IC_MspInit+0xf4>)
 80047b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80047ba:	f003 0310 	and.w	r3, r3, #16
 80047be:	60fb      	str	r3, [r7, #12]
 80047c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80047c2:	2320      	movs	r3, #32
 80047c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047c6:	2302      	movs	r3, #2
 80047c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047ca:	2301      	movs	r3, #1
 80047cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047ce:	2300      	movs	r3, #0
 80047d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80047d2:	2304      	movs	r3, #4
 80047d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80047d6:	f107 031c 	add.w	r3, r7, #28
 80047da:	4619      	mov	r1, r3
 80047dc:	4807      	ldr	r0, [pc, #28]	@ (80047fc <HAL_TIM_IC_MspInit+0x100>)
 80047de:	f006 fb8d 	bl	800aefc <HAL_GPIO_Init>
}
 80047e2:	bf00      	nop
 80047e4:	3730      	adds	r7, #48	@ 0x30
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	40000400 	.word	0x40000400
 80047f0:	58024400 	.word	0x58024400
 80047f4:	58020800 	.word	0x58020800
 80047f8:	40014000 	.word	0x40014000
 80047fc:	58021000 	.word	0x58021000

08004800 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM24)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a0b      	ldr	r2, [pc, #44]	@ (800483c <HAL_TIM_Base_MspInit+0x3c>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d10e      	bne.n	8004830 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM24_MspInit 0 */

  /* USER CODE END TIM24_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM24_CLK_ENABLE();
 8004812:	4b0b      	ldr	r3, [pc, #44]	@ (8004840 <HAL_TIM_Base_MspInit+0x40>)
 8004814:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8004818:	4a09      	ldr	r2, [pc, #36]	@ (8004840 <HAL_TIM_Base_MspInit+0x40>)
 800481a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800481e:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8004822:	4b07      	ldr	r3, [pc, #28]	@ (8004840 <HAL_TIM_Base_MspInit+0x40>)
 8004824:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8004828:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800482c:	60fb      	str	r3, [r7, #12]
 800482e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 8004830:	bf00      	nop
 8004832:	3714      	adds	r7, #20
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr
 800483c:	4000e400 	.word	0x4000e400
 8004840:	58024400 	.word	0x58024400

08004844 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b08a      	sub	sp, #40	@ 0x28
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800484c:	f107 0314 	add.w	r3, r7, #20
 8004850:	2200      	movs	r2, #0
 8004852:	601a      	str	r2, [r3, #0]
 8004854:	605a      	str	r2, [r3, #4]
 8004856:	609a      	str	r2, [r3, #8]
 8004858:	60da      	str	r2, [r3, #12]
 800485a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a39      	ldr	r2, [pc, #228]	@ (8004948 <HAL_TIM_MspPostInit+0x104>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d120      	bne.n	80048a8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004866:	4b39      	ldr	r3, [pc, #228]	@ (800494c <HAL_TIM_MspPostInit+0x108>)
 8004868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800486c:	4a37      	ldr	r2, [pc, #220]	@ (800494c <HAL_TIM_MspPostInit+0x108>)
 800486e:	f043 0310 	orr.w	r3, r3, #16
 8004872:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004876:	4b35      	ldr	r3, [pc, #212]	@ (800494c <HAL_TIM_MspPostInit+0x108>)
 8004878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800487c:	f003 0310 	and.w	r3, r3, #16
 8004880:	613b      	str	r3, [r7, #16]
 8004882:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE8     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = TIM1_CH1N_Pin|TIM1_CH1_Pin;
 8004884:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800488a:	2302      	movs	r3, #2
 800488c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800488e:	2300      	movs	r3, #0
 8004890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004892:	2300      	movs	r3, #0
 8004894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004896:	2301      	movs	r3, #1
 8004898:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800489a:	f107 0314 	add.w	r3, r7, #20
 800489e:	4619      	mov	r1, r3
 80048a0:	482b      	ldr	r0, [pc, #172]	@ (8004950 <HAL_TIM_MspPostInit+0x10c>)
 80048a2:	f006 fb2b 	bl	800aefc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80048a6:	e04a      	b.n	800493e <HAL_TIM_MspPostInit+0xfa>
  else if(htim->Instance==TIM2)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048b0:	d120      	bne.n	80048f4 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048b2:	4b26      	ldr	r3, [pc, #152]	@ (800494c <HAL_TIM_MspPostInit+0x108>)
 80048b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80048b8:	4a24      	ldr	r2, [pc, #144]	@ (800494c <HAL_TIM_MspPostInit+0x108>)
 80048ba:	f043 0301 	orr.w	r3, r3, #1
 80048be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80048c2:	4b22      	ldr	r3, [pc, #136]	@ (800494c <HAL_TIM_MspPostInit+0x108>)
 80048c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	60fb      	str	r3, [r7, #12]
 80048ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80048d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80048d6:	2312      	movs	r3, #18
 80048d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048da:	2300      	movs	r3, #0
 80048dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048de:	2300      	movs	r3, #0
 80048e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80048e2:	2301      	movs	r3, #1
 80048e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048e6:	f107 0314 	add.w	r3, r7, #20
 80048ea:	4619      	mov	r1, r3
 80048ec:	4819      	ldr	r0, [pc, #100]	@ (8004954 <HAL_TIM_MspPostInit+0x110>)
 80048ee:	f006 fb05 	bl	800aefc <HAL_GPIO_Init>
}
 80048f2:	e024      	b.n	800493e <HAL_TIM_MspPostInit+0xfa>
  else if(htim->Instance==TIM4)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a17      	ldr	r2, [pc, #92]	@ (8004958 <HAL_TIM_MspPostInit+0x114>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d11f      	bne.n	800493e <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80048fe:	4b13      	ldr	r3, [pc, #76]	@ (800494c <HAL_TIM_MspPostInit+0x108>)
 8004900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004904:	4a11      	ldr	r2, [pc, #68]	@ (800494c <HAL_TIM_MspPostInit+0x108>)
 8004906:	f043 0308 	orr.w	r3, r3, #8
 800490a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800490e:	4b0f      	ldr	r3, [pc, #60]	@ (800494c <HAL_TIM_MspPostInit+0x108>)
 8004910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004914:	f003 0308 	and.w	r3, r3, #8
 8004918:	60bb      	str	r3, [r7, #8]
 800491a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800491c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004920:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004922:	2312      	movs	r3, #18
 8004924:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004926:	2300      	movs	r3, #0
 8004928:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800492a:	2300      	movs	r3, #0
 800492c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800492e:	2302      	movs	r3, #2
 8004930:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004932:	f107 0314 	add.w	r3, r7, #20
 8004936:	4619      	mov	r1, r3
 8004938:	4808      	ldr	r0, [pc, #32]	@ (800495c <HAL_TIM_MspPostInit+0x118>)
 800493a:	f006 fadf 	bl	800aefc <HAL_GPIO_Init>
}
 800493e:	bf00      	nop
 8004940:	3728      	adds	r7, #40	@ 0x28
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	40010000 	.word	0x40010000
 800494c:	58024400 	.word	0x58024400
 8004950:	58021000 	.word	0x58021000
 8004954:	58020000 	.word	0x58020000
 8004958:	40000800 	.word	0x40000800
 800495c:	58020c00 	.word	0x58020c00

08004960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004960:	b480      	push	{r7}
 8004962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004964:	bf00      	nop
 8004966:	e7fd      	b.n	8004964 <NMI_Handler+0x4>

08004968 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004968:	b480      	push	{r7}
 800496a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800496c:	bf00      	nop
 800496e:	e7fd      	b.n	800496c <HardFault_Handler+0x4>

08004970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004970:	b480      	push	{r7}
 8004972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004974:	bf00      	nop
 8004976:	e7fd      	b.n	8004974 <MemManage_Handler+0x4>

08004978 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004978:	b480      	push	{r7}
 800497a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800497c:	bf00      	nop
 800497e:	e7fd      	b.n	800497c <BusFault_Handler+0x4>

08004980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004980:	b480      	push	{r7}
 8004982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004984:	bf00      	nop
 8004986:	e7fd      	b.n	8004984 <UsageFault_Handler+0x4>

08004988 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004988:	b480      	push	{r7}
 800498a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800498c:	bf00      	nop
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004996:	b480      	push	{r7}
 8004998:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800499a:	bf00      	nop
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80049a4:	b480      	push	{r7}
 80049a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80049a8:	bf00      	nop
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049b6:	f000 fa0b 	bl	8004dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049ba:	bf00      	nop
 80049bc:	bd80      	pop	{r7, pc}
	...

080049c0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80049c4:	4802      	ldr	r0, [pc, #8]	@ (80049d0 <DMA1_Stream1_IRQHandler+0x10>)
 80049c6:	f004 f985 	bl	8008cd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80049ca:	bf00      	nop
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	24000c50 	.word	0x24000c50

080049d4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80049d8:	4802      	ldr	r0, [pc, #8]	@ (80049e4 <DMA1_Stream2_IRQHandler+0x10>)
 80049da:	f004 f97b 	bl	8008cd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80049de:	bf00      	nop
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	24000bd8 	.word	0x24000bd8

080049e8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80049ec:	4803      	ldr	r0, [pc, #12]	@ (80049fc <ADC_IRQHandler+0x14>)
 80049ee:	f001 f969 	bl	8005cc4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80049f2:	4803      	ldr	r0, [pc, #12]	@ (8004a00 <ADC_IRQHandler+0x18>)
 80049f4:	f001 f966 	bl	8005cc4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80049f8:	bf00      	nop
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	24000a88 	.word	0x24000a88
 8004a00:	24000af8 	.word	0x24000af8

08004a04 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INP_COMP_IRQ_Pin);
 8004a08:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8004a0c:	f006 fc4f 	bl	800b2ae <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(POWER_OFF_IRQ_Pin);
 8004a10:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004a14:	f006 fc4b 	bl	800b2ae <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004a18:	bf00      	nop
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	af00      	add	r7, sp, #0
  return 1;
 8004a20:	2301      	movs	r3, #1
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <_kill>:

int _kill(int pid, int sig)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004a36:	f00d ff91 	bl	801295c <__errno>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2216      	movs	r2, #22
 8004a3e:	601a      	str	r2, [r3, #0]
  return -1;
 8004a40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3708      	adds	r7, #8
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <_exit>:

void _exit (int status)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004a54:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f7ff ffe7 	bl	8004a2c <_kill>
  while (1) {}    /* Make sure we hang here */
 8004a5e:	bf00      	nop
 8004a60:	e7fd      	b.n	8004a5e <_exit+0x12>

08004a62 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b086      	sub	sp, #24
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	60f8      	str	r0, [r7, #12]
 8004a6a:	60b9      	str	r1, [r7, #8]
 8004a6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a6e:	2300      	movs	r3, #0
 8004a70:	617b      	str	r3, [r7, #20]
 8004a72:	e00a      	b.n	8004a8a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004a74:	f3af 8000 	nop.w
 8004a78:	4601      	mov	r1, r0
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	1c5a      	adds	r2, r3, #1
 8004a7e:	60ba      	str	r2, [r7, #8]
 8004a80:	b2ca      	uxtb	r2, r1
 8004a82:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	3301      	adds	r3, #1
 8004a88:	617b      	str	r3, [r7, #20]
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	dbf0      	blt.n	8004a74 <_read+0x12>
  }

  return len;
 8004a92:	687b      	ldr	r3, [r7, #4]
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3718      	adds	r7, #24
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	617b      	str	r3, [r7, #20]
 8004aac:	e009      	b.n	8004ac2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	1c5a      	adds	r2, r3, #1
 8004ab2:	60ba      	str	r2, [r7, #8]
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	3301      	adds	r3, #1
 8004ac0:	617b      	str	r3, [r7, #20]
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	dbf1      	blt.n	8004aae <_write+0x12>
  }
  return len;
 8004aca:	687b      	ldr	r3, [r7, #4]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3718      	adds	r7, #24
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <_close>:

int _close(int file)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004adc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004afc:	605a      	str	r2, [r3, #4]
  return 0;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <_isatty>:

int _isatty(int file)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004b14:	2301      	movs	r3, #1
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b085      	sub	sp, #20
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	60f8      	str	r0, [r7, #12]
 8004b2a:	60b9      	str	r1, [r7, #8]
 8004b2c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3714      	adds	r7, #20
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b086      	sub	sp, #24
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004b44:	4a14      	ldr	r2, [pc, #80]	@ (8004b98 <_sbrk+0x5c>)
 8004b46:	4b15      	ldr	r3, [pc, #84]	@ (8004b9c <_sbrk+0x60>)
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004b50:	4b13      	ldr	r3, [pc, #76]	@ (8004ba0 <_sbrk+0x64>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d102      	bne.n	8004b5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004b58:	4b11      	ldr	r3, [pc, #68]	@ (8004ba0 <_sbrk+0x64>)
 8004b5a:	4a12      	ldr	r2, [pc, #72]	@ (8004ba4 <_sbrk+0x68>)
 8004b5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004b5e:	4b10      	ldr	r3, [pc, #64]	@ (8004ba0 <_sbrk+0x64>)
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4413      	add	r3, r2
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d207      	bcs.n	8004b7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004b6c:	f00d fef6 	bl	801295c <__errno>
 8004b70:	4603      	mov	r3, r0
 8004b72:	220c      	movs	r2, #12
 8004b74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004b76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004b7a:	e009      	b.n	8004b90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004b7c:	4b08      	ldr	r3, [pc, #32]	@ (8004ba0 <_sbrk+0x64>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004b82:	4b07      	ldr	r3, [pc, #28]	@ (8004ba0 <_sbrk+0x64>)
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4413      	add	r3, r2
 8004b8a:	4a05      	ldr	r2, [pc, #20]	@ (8004ba0 <_sbrk+0x64>)
 8004b8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3718      	adds	r7, #24
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	24050000 	.word	0x24050000
 8004b9c:	00000400 	.word	0x00000400
 8004ba0:	240010a0 	.word	0x240010a0
 8004ba4:	24001210 	.word	0x24001210

08004ba8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004bac:	4b32      	ldr	r3, [pc, #200]	@ (8004c78 <SystemInit+0xd0>)
 8004bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bb2:	4a31      	ldr	r2, [pc, #196]	@ (8004c78 <SystemInit+0xd0>)
 8004bb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004bb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004bbc:	4b2f      	ldr	r3, [pc, #188]	@ (8004c7c <SystemInit+0xd4>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 030f 	and.w	r3, r3, #15
 8004bc4:	2b06      	cmp	r3, #6
 8004bc6:	d807      	bhi.n	8004bd8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004bc8:	4b2c      	ldr	r3, [pc, #176]	@ (8004c7c <SystemInit+0xd4>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f023 030f 	bic.w	r3, r3, #15
 8004bd0:	4a2a      	ldr	r2, [pc, #168]	@ (8004c7c <SystemInit+0xd4>)
 8004bd2:	f043 0307 	orr.w	r3, r3, #7
 8004bd6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004bd8:	4b29      	ldr	r3, [pc, #164]	@ (8004c80 <SystemInit+0xd8>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a28      	ldr	r2, [pc, #160]	@ (8004c80 <SystemInit+0xd8>)
 8004bde:	f043 0301 	orr.w	r3, r3, #1
 8004be2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004be4:	4b26      	ldr	r3, [pc, #152]	@ (8004c80 <SystemInit+0xd8>)
 8004be6:	2200      	movs	r2, #0
 8004be8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004bea:	4b25      	ldr	r3, [pc, #148]	@ (8004c80 <SystemInit+0xd8>)
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	4924      	ldr	r1, [pc, #144]	@ (8004c80 <SystemInit+0xd8>)
 8004bf0:	4b24      	ldr	r3, [pc, #144]	@ (8004c84 <SystemInit+0xdc>)
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004bf6:	4b21      	ldr	r3, [pc, #132]	@ (8004c7c <SystemInit+0xd4>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0308 	and.w	r3, r3, #8
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d007      	beq.n	8004c12 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004c02:	4b1e      	ldr	r3, [pc, #120]	@ (8004c7c <SystemInit+0xd4>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f023 030f 	bic.w	r3, r3, #15
 8004c0a:	4a1c      	ldr	r2, [pc, #112]	@ (8004c7c <SystemInit+0xd4>)
 8004c0c:	f043 0307 	orr.w	r3, r3, #7
 8004c10:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004c12:	4b1b      	ldr	r3, [pc, #108]	@ (8004c80 <SystemInit+0xd8>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004c18:	4b19      	ldr	r3, [pc, #100]	@ (8004c80 <SystemInit+0xd8>)
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004c1e:	4b18      	ldr	r3, [pc, #96]	@ (8004c80 <SystemInit+0xd8>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004c24:	4b16      	ldr	r3, [pc, #88]	@ (8004c80 <SystemInit+0xd8>)
 8004c26:	4a18      	ldr	r2, [pc, #96]	@ (8004c88 <SystemInit+0xe0>)
 8004c28:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004c2a:	4b15      	ldr	r3, [pc, #84]	@ (8004c80 <SystemInit+0xd8>)
 8004c2c:	4a17      	ldr	r2, [pc, #92]	@ (8004c8c <SystemInit+0xe4>)
 8004c2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004c30:	4b13      	ldr	r3, [pc, #76]	@ (8004c80 <SystemInit+0xd8>)
 8004c32:	4a17      	ldr	r2, [pc, #92]	@ (8004c90 <SystemInit+0xe8>)
 8004c34:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004c36:	4b12      	ldr	r3, [pc, #72]	@ (8004c80 <SystemInit+0xd8>)
 8004c38:	2200      	movs	r2, #0
 8004c3a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004c3c:	4b10      	ldr	r3, [pc, #64]	@ (8004c80 <SystemInit+0xd8>)
 8004c3e:	4a14      	ldr	r2, [pc, #80]	@ (8004c90 <SystemInit+0xe8>)
 8004c40:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004c42:	4b0f      	ldr	r3, [pc, #60]	@ (8004c80 <SystemInit+0xd8>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004c48:	4b0d      	ldr	r3, [pc, #52]	@ (8004c80 <SystemInit+0xd8>)
 8004c4a:	4a11      	ldr	r2, [pc, #68]	@ (8004c90 <SystemInit+0xe8>)
 8004c4c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8004c80 <SystemInit+0xd8>)
 8004c50:	2200      	movs	r2, #0
 8004c52:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004c54:	4b0a      	ldr	r3, [pc, #40]	@ (8004c80 <SystemInit+0xd8>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a09      	ldr	r2, [pc, #36]	@ (8004c80 <SystemInit+0xd8>)
 8004c5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c5e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004c60:	4b07      	ldr	r3, [pc, #28]	@ (8004c80 <SystemInit+0xd8>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004c66:	4b0b      	ldr	r3, [pc, #44]	@ (8004c94 <SystemInit+0xec>)
 8004c68:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8004c6c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004c6e:	bf00      	nop
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	e000ed00 	.word	0xe000ed00
 8004c7c:	52002000 	.word	0x52002000
 8004c80:	58024400 	.word	0x58024400
 8004c84:	eaf6ed7f 	.word	0xeaf6ed7f
 8004c88:	02020200 	.word	0x02020200
 8004c8c:	01ff0000 	.word	0x01ff0000
 8004c90:	01010280 	.word	0x01010280
 8004c94:	52004000 	.word	0x52004000

08004c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004c98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004cd0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004c9c:	f7ff ff84 	bl	8004ba8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004ca0:	480c      	ldr	r0, [pc, #48]	@ (8004cd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004ca2:	490d      	ldr	r1, [pc, #52]	@ (8004cd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004ca4:	4a0d      	ldr	r2, [pc, #52]	@ (8004cdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004ca6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ca8:	e002      	b.n	8004cb0 <LoopCopyDataInit>

08004caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004cae:	3304      	adds	r3, #4

08004cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004cb4:	d3f9      	bcc.n	8004caa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8004ce0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004cb8:	4c0a      	ldr	r4, [pc, #40]	@ (8004ce4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004cbc:	e001      	b.n	8004cc2 <LoopFillZerobss>

08004cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004cc0:	3204      	adds	r2, #4

08004cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004cc4:	d3fb      	bcc.n	8004cbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004cc6:	f00d fe4f 	bl	8012968 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004cca:	f7fe f931 	bl	8002f30 <main>
  bx  lr
 8004cce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004cd0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8004cd4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004cd8:	24000210 	.word	0x24000210
  ldr r2, =_sidata
 8004cdc:	080156e0 	.word	0x080156e0
  ldr r2, =_sbss
 8004ce0:	240002d0 	.word	0x240002d0
  ldr r4, =_ebss
 8004ce4:	24001210 	.word	0x24001210

08004ce8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004ce8:	e7fe      	b.n	8004ce8 <ADC3_IRQHandler>
	...

08004cec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004cf2:	2003      	movs	r0, #3
 8004cf4:	f003 f9ec 	bl	80080d0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004cf8:	f007 f8be 	bl	800be78 <HAL_RCC_GetSysClockFreq>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	4b15      	ldr	r3, [pc, #84]	@ (8004d54 <HAL_Init+0x68>)
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	0a1b      	lsrs	r3, r3, #8
 8004d04:	f003 030f 	and.w	r3, r3, #15
 8004d08:	4913      	ldr	r1, [pc, #76]	@ (8004d58 <HAL_Init+0x6c>)
 8004d0a:	5ccb      	ldrb	r3, [r1, r3]
 8004d0c:	f003 031f 	and.w	r3, r3, #31
 8004d10:	fa22 f303 	lsr.w	r3, r2, r3
 8004d14:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004d16:	4b0f      	ldr	r3, [pc, #60]	@ (8004d54 <HAL_Init+0x68>)
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	f003 030f 	and.w	r3, r3, #15
 8004d1e:	4a0e      	ldr	r2, [pc, #56]	@ (8004d58 <HAL_Init+0x6c>)
 8004d20:	5cd3      	ldrb	r3, [r2, r3]
 8004d22:	f003 031f 	and.w	r3, r3, #31
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	fa22 f303 	lsr.w	r3, r2, r3
 8004d2c:	4a0b      	ldr	r2, [pc, #44]	@ (8004d5c <HAL_Init+0x70>)
 8004d2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004d30:	4a0b      	ldr	r2, [pc, #44]	@ (8004d60 <HAL_Init+0x74>)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004d36:	2000      	movs	r0, #0
 8004d38:	f000 f814 	bl	8004d64 <HAL_InitTick>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d001      	beq.n	8004d46 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e002      	b.n	8004d4c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004d46:	f7ff f913 	bl	8003f70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3708      	adds	r7, #8
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	58024400 	.word	0x58024400
 8004d58:	080152fc 	.word	0x080152fc
 8004d5c:	2400003c 	.word	0x2400003c
 8004d60:	24000038 	.word	0x24000038

08004d64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004d6c:	4b15      	ldr	r3, [pc, #84]	@ (8004dc4 <HAL_InitTick+0x60>)
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d101      	bne.n	8004d78 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e021      	b.n	8004dbc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004d78:	4b13      	ldr	r3, [pc, #76]	@ (8004dc8 <HAL_InitTick+0x64>)
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	4b11      	ldr	r3, [pc, #68]	@ (8004dc4 <HAL_InitTick+0x60>)
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	4619      	mov	r1, r3
 8004d82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f003 f9d1 	bl	8008136 <HAL_SYSTICK_Config>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e00e      	b.n	8004dbc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2b0f      	cmp	r3, #15
 8004da2:	d80a      	bhi.n	8004dba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004da4:	2200      	movs	r2, #0
 8004da6:	6879      	ldr	r1, [r7, #4]
 8004da8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004dac:	f003 f99b 	bl	80080e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004db0:	4a06      	ldr	r2, [pc, #24]	@ (8004dcc <HAL_InitTick+0x68>)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
 8004db8:	e000      	b.n	8004dbc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3708      	adds	r7, #8
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	24000044 	.word	0x24000044
 8004dc8:	24000038 	.word	0x24000038
 8004dcc:	24000040 	.word	0x24000040

08004dd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004dd4:	4b06      	ldr	r3, [pc, #24]	@ (8004df0 <HAL_IncTick+0x20>)
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	461a      	mov	r2, r3
 8004dda:	4b06      	ldr	r3, [pc, #24]	@ (8004df4 <HAL_IncTick+0x24>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4413      	add	r3, r2
 8004de0:	4a04      	ldr	r2, [pc, #16]	@ (8004df4 <HAL_IncTick+0x24>)
 8004de2:	6013      	str	r3, [r2, #0]
}
 8004de4:	bf00      	nop
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	24000044 	.word	0x24000044
 8004df4:	240010a4 	.word	0x240010a4

08004df8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8004dfc:	4b03      	ldr	r3, [pc, #12]	@ (8004e0c <HAL_GetTick+0x14>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	240010a4 	.word	0x240010a4

08004e10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004e18:	f7ff ffee 	bl	8004df8 <HAL_GetTick>
 8004e1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e28:	d005      	beq.n	8004e36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8004e54 <HAL_Delay+0x44>)
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	4413      	add	r3, r2
 8004e34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004e36:	bf00      	nop
 8004e38:	f7ff ffde 	bl	8004df8 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d8f7      	bhi.n	8004e38 <HAL_Delay+0x28>
  {
  }
}
 8004e48:	bf00      	nop
 8004e4a:	bf00      	nop
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	24000044 	.word	0x24000044

08004e58 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8004e60:	4b06      	ldr	r3, [pc, #24]	@ (8004e7c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8004e68:	4904      	ldr	r1, [pc, #16]	@ (8004e7c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	604b      	str	r3, [r1, #4]
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr
 8004e7c:	58000400 	.word	0x58000400

08004e80 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8004e8a:	4b07      	ldr	r3, [pc, #28]	@ (8004ea8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	43db      	mvns	r3, r3
 8004e92:	401a      	ands	r2, r3
 8004e94:	4904      	ldr	r1, [pc, #16]	@ (8004ea8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	604b      	str	r3, [r1, #4]
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr
 8004ea8:	58000400 	.word	0x58000400

08004eac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	431a      	orrs	r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	609a      	str	r2, [r3, #8]
}
 8004ec6:	bf00      	nop
 8004ec8:	370c      	adds	r7, #12
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr

08004ed2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b083      	sub	sp, #12
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
 8004eda:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	609a      	str	r2, [r3, #8]
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b087      	sub	sp, #28
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	607a      	str	r2, [r7, #4]
 8004f20:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	3360      	adds	r3, #96	@ 0x60
 8004f26:	461a      	mov	r2, r3
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4413      	add	r3, r2
 8004f2e:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	4a10      	ldr	r2, [pc, #64]	@ (8004f74 <LL_ADC_SetOffset+0x60>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d10b      	bne.n	8004f50 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004f4e:	e00b      	b.n	8004f68 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	430b      	orrs	r3, r1
 8004f62:	431a      	orrs	r2, r3
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	601a      	str	r2, [r3, #0]
}
 8004f68:	bf00      	nop
 8004f6a:	371c      	adds	r7, #28
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr
 8004f74:	58026000 	.word	0x58026000

08004f78 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	3360      	adds	r3, #96	@ 0x60
 8004f86:	461a      	mov	r2, r3
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4413      	add	r3, r2
 8004f8e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3714      	adds	r7, #20
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	f003 031f 	and.w	r3, r3, #31
 8004fbe:	6879      	ldr	r1, [r7, #4]
 8004fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc4:	431a      	orrs	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	611a      	str	r2, [r3, #16]
}
 8004fca:	bf00      	nop
 8004fcc:	3714      	adds	r7, #20
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
	...

08004fd8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b087      	sub	sp, #28
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	4a0c      	ldr	r2, [pc, #48]	@ (8005018 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d00e      	beq.n	800500a <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	3360      	adds	r3, #96	@ 0x60
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	4413      	add	r3, r2
 8004ff8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	431a      	orrs	r2, r3
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	601a      	str	r2, [r3, #0]
  }
}
 800500a:	bf00      	nop
 800500c:	371c      	adds	r7, #28
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	58026000 	.word	0x58026000

0800501c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800501c:	b480      	push	{r7}
 800501e:	b087      	sub	sp, #28
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	4a0c      	ldr	r2, [pc, #48]	@ (800505c <LL_ADC_SetOffsetSaturation+0x40>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d10e      	bne.n	800504e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	3360      	adds	r3, #96	@ 0x60
 8005034:	461a      	mov	r2, r3
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4413      	add	r3, r2
 800503c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	431a      	orrs	r2, r3
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800504e:	bf00      	nop
 8005050:	371c      	adds	r7, #28
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	58026000 	.word	0x58026000

08005060 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005060:	b480      	push	{r7}
 8005062:	b087      	sub	sp, #28
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	4a0c      	ldr	r2, [pc, #48]	@ (80050a0 <LL_ADC_SetOffsetSign+0x40>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d10e      	bne.n	8005092 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	3360      	adds	r3, #96	@ 0x60
 8005078:	461a      	mov	r2, r3
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	4413      	add	r3, r2
 8005080:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	431a      	orrs	r2, r3
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8005092:	bf00      	nop
 8005094:	371c      	adds	r7, #28
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	58026000 	.word	0x58026000

080050a4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b087      	sub	sp, #28
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	3360      	adds	r3, #96	@ 0x60
 80050b4:	461a      	mov	r2, r3
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	4a0c      	ldr	r2, [pc, #48]	@ (80050f4 <LL_ADC_SetOffsetState+0x50>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d108      	bne.n	80050d8 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	431a      	orrs	r2, r3
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80050d6:	e007      	b.n	80050e8 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	431a      	orrs	r2, r3
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	601a      	str	r2, [r3, #0]
}
 80050e8:	bf00      	nop
 80050ea:	371c      	adds	r7, #28
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	58026000 	.word	0x58026000

080050f8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005108:	2b00      	cmp	r3, #0
 800510a:	d101      	bne.n	8005110 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800510c:	2301      	movs	r3, #1
 800510e:	e000      	b.n	8005112 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	370c      	adds	r7, #12
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr

0800511e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800511e:	b480      	push	{r7}
 8005120:	b087      	sub	sp, #28
 8005122:	af00      	add	r7, sp, #0
 8005124:	60f8      	str	r0, [r7, #12]
 8005126:	60b9      	str	r1, [r7, #8]
 8005128:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	3330      	adds	r3, #48	@ 0x30
 800512e:	461a      	mov	r2, r3
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	0a1b      	lsrs	r3, r3, #8
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	f003 030c 	and.w	r3, r3, #12
 800513a:	4413      	add	r3, r2
 800513c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	f003 031f 	and.w	r3, r3, #31
 8005148:	211f      	movs	r1, #31
 800514a:	fa01 f303 	lsl.w	r3, r1, r3
 800514e:	43db      	mvns	r3, r3
 8005150:	401a      	ands	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	0e9b      	lsrs	r3, r3, #26
 8005156:	f003 011f 	and.w	r1, r3, #31
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	f003 031f 	and.w	r3, r3, #31
 8005160:	fa01 f303 	lsl.w	r3, r1, r3
 8005164:	431a      	orrs	r2, r3
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800516a:	bf00      	nop
 800516c:	371c      	adds	r7, #28
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8005176:	b480      	push	{r7}
 8005178:	b083      	sub	sp, #12
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
 800517e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	f023 0203 	bic.w	r2, r3, #3
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	431a      	orrs	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	60da      	str	r2, [r3, #12]
}
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	f043 0201 	orr.w	r2, r3, #1
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	60da      	str	r2, [r3, #12]
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4a08      	ldr	r2, [pc, #32]	@ (80051ec <LL_ADC_REG_SetDMATransferMode+0x30>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d107      	bne.n	80051de <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	f023 0203 	bic.w	r2, r3, #3
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	431a      	orrs	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	60da      	str	r2, [r3, #12]
  }
}
 80051de:	bf00      	nop
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	58026000 	.word	0x58026000

080051f0 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051fc:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8005200:	2b00      	cmp	r3, #0
 8005202:	d101      	bne.n	8005208 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8005204:	2301      	movs	r3, #1
 8005206:	e000      	b.n	800520a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr

08005216 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005216:	b480      	push	{r7}
 8005218:	b087      	sub	sp, #28
 800521a:	af00      	add	r7, sp, #0
 800521c:	60f8      	str	r0, [r7, #12]
 800521e:	60b9      	str	r1, [r7, #8]
 8005220:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	3314      	adds	r3, #20
 8005226:	461a      	mov	r2, r3
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	0e5b      	lsrs	r3, r3, #25
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	f003 0304 	and.w	r3, r3, #4
 8005232:	4413      	add	r3, r2
 8005234:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	0d1b      	lsrs	r3, r3, #20
 800523e:	f003 031f 	and.w	r3, r3, #31
 8005242:	2107      	movs	r1, #7
 8005244:	fa01 f303 	lsl.w	r3, r1, r3
 8005248:	43db      	mvns	r3, r3
 800524a:	401a      	ands	r2, r3
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	0d1b      	lsrs	r3, r3, #20
 8005250:	f003 031f 	and.w	r3, r3, #31
 8005254:	6879      	ldr	r1, [r7, #4]
 8005256:	fa01 f303 	lsl.w	r3, r1, r3
 800525a:	431a      	orrs	r2, r3
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005260:	bf00      	nop
 8005262:	371c      	adds	r7, #28
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	4a1a      	ldr	r2, [pc, #104]	@ (80052e4 <LL_ADC_SetChannelSingleDiff+0x78>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d115      	bne.n	80052ac <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800528c:	43db      	mvns	r3, r3
 800528e:	401a      	ands	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f003 0318 	and.w	r3, r3, #24
 8005296:	4914      	ldr	r1, [pc, #80]	@ (80052e8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8005298:	40d9      	lsrs	r1, r3
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	400b      	ands	r3, r1
 800529e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052a2:	431a      	orrs	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80052aa:	e014      	b.n	80052d6 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052b8:	43db      	mvns	r3, r3
 80052ba:	401a      	ands	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f003 0318 	and.w	r3, r3, #24
 80052c2:	4909      	ldr	r1, [pc, #36]	@ (80052e8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80052c4:	40d9      	lsrs	r1, r3
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	400b      	ands	r3, r1
 80052ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052ce:	431a      	orrs	r2, r3
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 80052d6:	bf00      	nop
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	58026000 	.word	0x58026000
 80052e8:	000fffff 	.word	0x000fffff

080052ec <LL_ADC_SetAnalogWDMonitChannels>:
  *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
  *         (2) On STM32H7, parameter available only on ADC instance: ADC2.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b087      	sub	sp, #28
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	330c      	adds	r3, #12
 80052fc:	4618      	mov	r0, r3
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	0d1b      	lsrs	r3, r3, #20
 8005302:	f003 0103 	and.w	r1, r3, #3
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	f003 0201 	and.w	r2, r3, #1
 800530c:	4613      	mov	r3, r2
 800530e:	00db      	lsls	r3, r3, #3
 8005310:	4413      	add	r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	440b      	add	r3, r1
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	4403      	add	r3, r0
 800531a:	617b      	str	r3, [r7, #20]
                                                      + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	68b9      	ldr	r1, [r7, #8]
 8005322:	4b08      	ldr	r3, [pc, #32]	@ (8005344 <LL_ADC_SetAnalogWDMonitChannels+0x58>)
 8005324:	400b      	ands	r3, r1
 8005326:	43db      	mvns	r3, r3
 8005328:	401a      	ands	r2, r3
 800532a:	6879      	ldr	r1, [r7, #4]
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	400b      	ands	r3, r1
 8005330:	431a      	orrs	r2, r3
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 8005336:	bf00      	nop
 8005338:	371c      	adds	r7, #28
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	7dcfffff 	.word	0x7dcfffff

08005348 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdHighValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue, uint32_t AWDThresholdLowValue)
{
 8005348:	b480      	push	{r7}
 800534a:	b089      	sub	sp, #36	@ 0x24
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
 8005354:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  if (ADCx == ADC3)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	4a29      	ldr	r2, [pc, #164]	@ (8005400 <LL_ADC_ConfigAnalogWDThresholds+0xb8>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d115      	bne.n	800538a <LL_ADC_ConfigAnalogWDThresholds+0x42>
  {
    uint32_t __IO *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	3320      	adds	r3, #32
 8005362:	461a      	mov	r2, r3
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	0d1b      	lsrs	r3, r3, #20
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	f003 030c 	and.w	r3, r3, #12
 800536e:	4413      	add	r3, r2
 8005370:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 22f0 	and.w	r2, r3, #4026593280	@ 0xf000f000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	0419      	lsls	r1, r3, #16
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	430b      	orrs	r3, r1
 8005382:	431a      	orrs	r2, r3
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	601a      	str	r2, [r3, #0]
                                                         + (LL_ADC_AWD_THRESHOLD_HIGH));

    MODIFY_REG(*preg, ADC_LTR_LT, AWDThresholdLowValue);
    MODIFY_REG(*preg2, ADC_HTR_HT, AWDThresholdHighValue);
  }
}
 8005388:	e034      	b.n	80053f4 <LL_ADC_ConfigAnalogWDThresholds+0xac>
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS) * 2UL)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	3320      	adds	r3, #32
 800538e:	4618      	mov	r0, r3
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	0d1b      	lsrs	r3, r3, #20
 8005394:	f003 0103 	and.w	r1, r3, #3
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	f003 0201 	and.w	r2, r3, #1
 800539e:	4613      	mov	r3, r2
 80053a0:	011b      	lsls	r3, r3, #4
 80053a2:	4413      	add	r3, r2
 80053a4:	440b      	add	r3, r1
 80053a6:	005b      	lsls	r3, r3, #1
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	4403      	add	r3, r0
 80053ac:	61fb      	str	r3, [r7, #28]
    __IO uint32_t *preg2 = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS) * 2UL)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	3320      	adds	r3, #32
 80053b2:	4618      	mov	r0, r3
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	0d1b      	lsrs	r3, r3, #20
 80053b8:	f003 0103 	and.w	r1, r3, #3
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	f003 0201 	and.w	r2, r3, #1
 80053c2:	4613      	mov	r3, r2
 80053c4:	011b      	lsls	r3, r3, #4
 80053c6:	4413      	add	r3, r2
 80053c8:	440b      	add	r3, r1
 80053ca:	005b      	lsls	r3, r3, #1
 80053cc:	3301      	adds	r3, #1
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4403      	add	r3, r0
 80053d2:	61bb      	str	r3, [r7, #24]
    MODIFY_REG(*preg, ADC_LTR_LT, AWDThresholdLowValue);
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 427c 	and.w	r2, r3, #4227858432	@ 0xfc000000
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	431a      	orrs	r2, r3
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	601a      	str	r2, [r3, #0]
    MODIFY_REG(*preg2, ADC_HTR_HT, AWDThresholdHighValue);
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 427c 	and.w	r2, r3, #4227858432	@ 0xfc000000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	431a      	orrs	r2, r3
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	601a      	str	r2, [r3, #0]
}
 80053f4:	bf00      	nop
 80053f6:	3724      	adds	r7, #36	@ 0x24
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr
 8005400:	58026000 	.word	0x58026000

08005404 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f003 031f 	and.w	r3, r3, #31
}
 8005414:	4618      	mov	r0, r3
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8005430:	4618      	mov	r0, r3
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	689a      	ldr	r2, [r3, #8]
 8005448:	4b04      	ldr	r3, [pc, #16]	@ (800545c <LL_ADC_DisableDeepPowerDown+0x20>)
 800544a:	4013      	ands	r3, r2
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	6093      	str	r3, [r2, #8]
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr
 800545c:	5fffffc0 	.word	0x5fffffc0

08005460 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005470:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005474:	d101      	bne.n	800547a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005476:	2301      	movs	r3, #1
 8005478:	e000      	b.n	800547c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689a      	ldr	r2, [r3, #8]
 8005494:	4b05      	ldr	r3, [pc, #20]	@ (80054ac <LL_ADC_EnableInternalRegulator+0x24>)
 8005496:	4013      	ands	r3, r2
 8005498:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr
 80054ac:	6fffffc0 	.word	0x6fffffc0

080054b0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80054c4:	d101      	bne.n	80054ca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80054c6:	2301      	movs	r3, #1
 80054c8:	e000      	b.n	80054cc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689a      	ldr	r2, [r3, #8]
 80054e4:	4b05      	ldr	r3, [pc, #20]	@ (80054fc <LL_ADC_Enable+0x24>)
 80054e6:	4013      	ands	r3, r2
 80054e8:	f043 0201 	orr.w	r2, r3, #1
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr
 80054fc:	7fffffc0 	.word	0x7fffffc0

08005500 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	689a      	ldr	r2, [r3, #8]
 800550c:	4b05      	ldr	r3, [pc, #20]	@ (8005524 <LL_ADC_Disable+0x24>)
 800550e:	4013      	ands	r3, r2
 8005510:	f043 0202 	orr.w	r2, r3, #2
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005518:	bf00      	nop
 800551a:	370c      	adds	r7, #12
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr
 8005524:	7fffffc0 	.word	0x7fffffc0

08005528 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f003 0301 	and.w	r3, r3, #1
 8005538:	2b01      	cmp	r3, #1
 800553a:	d101      	bne.n	8005540 <LL_ADC_IsEnabled+0x18>
 800553c:	2301      	movs	r3, #1
 800553e:	e000      	b.n	8005542 <LL_ADC_IsEnabled+0x1a>
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	370c      	adds	r7, #12
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800554e:	b480      	push	{r7}
 8005550:	b083      	sub	sp, #12
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f003 0302 	and.w	r3, r3, #2
 800555e:	2b02      	cmp	r3, #2
 8005560:	d101      	bne.n	8005566 <LL_ADC_IsDisableOngoing+0x18>
 8005562:	2301      	movs	r3, #1
 8005564:	e000      	b.n	8005568 <LL_ADC_IsDisableOngoing+0x1a>
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689a      	ldr	r2, [r3, #8]
 8005580:	4b05      	ldr	r3, [pc, #20]	@ (8005598 <LL_ADC_REG_StartConversion+0x24>)
 8005582:	4013      	ands	r3, r2
 8005584:	f043 0204 	orr.w	r2, r3, #4
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr
 8005598:	7fffffc0 	.word	0x7fffffc0

0800559c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f003 0304 	and.w	r3, r3, #4
 80055ac:	2b04      	cmp	r3, #4
 80055ae:	d101      	bne.n	80055b4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80055b0:	2301      	movs	r3, #1
 80055b2:	e000      	b.n	80055b6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	370c      	adds	r7, #12
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr

080055c2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80055c2:	b480      	push	{r7}
 80055c4:	b083      	sub	sp, #12
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f003 0308 	and.w	r3, r3, #8
 80055d2:	2b08      	cmp	r3, #8
 80055d4:	d101      	bne.n	80055da <LL_ADC_INJ_IsConversionOngoing+0x18>
 80055d6:	2301      	movs	r3, #1
 80055d8:	e000      	b.n	80055dc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2280      	movs	r2, #128	@ 0x80
 80055f4:	601a      	str	r2, [r3, #0]
}
 80055f6:	bf00      	nop
 80055f8:	370c      	adds	r7, #12
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr

08005602 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 8005602:	b480      	push	{r7}
 8005604:	b083      	sub	sp, #12
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005610:	601a      	str	r2, [r3, #0]
}
 8005612:	bf00      	nop
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 800561e:	b480      	push	{r7}
 8005620:	b083      	sub	sp, #12
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800562c:	601a      	str	r2, [r3, #0]
}
 800562e:	bf00      	nop
 8005630:	370c      	adds	r7, #12
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 800563a:	b480      	push	{r7}
 800563c:	b083      	sub	sp, #12
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	605a      	str	r2, [r3, #4]
}
 800564e:	bf00      	nop
 8005650:	370c      	adds	r7, #12
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr

0800565a <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 800565a:	b480      	push	{r7}
 800565c:	b083      	sub	sp, #12
 800565e:	af00      	add	r7, sp, #0
 8005660:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	605a      	str	r2, [r3, #4]
}
 800566e:	bf00      	nop
 8005670:	370c      	adds	r7, #12
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr

0800567a <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 800567a:	b480      	push	{r7}
 800567c:	b083      	sub	sp, #12
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	605a      	str	r2, [r3, #4]
}
 800568e:	bf00      	nop
 8005690:	370c      	adds	r7, #12
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr

0800569a <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 800569a:	b480      	push	{r7}
 800569c:	b083      	sub	sp, #12
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	605a      	str	r2, [r3, #4]
}
 80056ae:	bf00      	nop
 80056b0:	370c      	adds	r7, #12
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr

080056ba <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 80056ba:	b480      	push	{r7}
 80056bc:	b083      	sub	sp, #12
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	605a      	str	r2, [r3, #4]
}
 80056ce:	bf00      	nop
 80056d0:	370c      	adds	r7, #12
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr

080056da <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 80056da:	b480      	push	{r7}
 80056dc:	b083      	sub	sp, #12
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	605a      	str	r2, [r3, #4]
}
 80056ee:	bf00      	nop
 80056f0:	370c      	adds	r7, #12
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
	...

080056fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80056fc:	b590      	push	{r4, r7, lr}
 80056fe:	b089      	sub	sp, #36	@ 0x24
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005704:	2300      	movs	r3, #0
 8005706:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005708:	2300      	movs	r3, #0
 800570a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d101      	bne.n	8005716 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e1ee      	b.n	8005af4 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005720:	2b00      	cmp	r3, #0
 8005722:	d109      	bne.n	8005738 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f7fe fc3d 	bl	8003fa4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4618      	mov	r0, r3
 800573e:	f7ff fe8f 	bl	8005460 <LL_ADC_IsDeepPowerDownEnabled>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d004      	beq.n	8005752 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4618      	mov	r0, r3
 800574e:	f7ff fe75 	bl	800543c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4618      	mov	r0, r3
 8005758:	f7ff feaa 	bl	80054b0 <LL_ADC_IsInternalRegulatorEnabled>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d114      	bne.n	800578c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4618      	mov	r0, r3
 8005768:	f7ff fe8e 	bl	8005488 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800576c:	4b8e      	ldr	r3, [pc, #568]	@ (80059a8 <HAL_ADC_Init+0x2ac>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	099b      	lsrs	r3, r3, #6
 8005772:	4a8e      	ldr	r2, [pc, #568]	@ (80059ac <HAL_ADC_Init+0x2b0>)
 8005774:	fba2 2303 	umull	r2, r3, r2, r3
 8005778:	099b      	lsrs	r3, r3, #6
 800577a:	3301      	adds	r3, #1
 800577c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800577e:	e002      	b.n	8005786 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	3b01      	subs	r3, #1
 8005784:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1f9      	bne.n	8005780 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4618      	mov	r0, r3
 8005792:	f7ff fe8d 	bl	80054b0 <LL_ADC_IsInternalRegulatorEnabled>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d10d      	bne.n	80057b8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057a0:	f043 0210 	orr.w	r2, r3, #16
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057ac:	f043 0201 	orr.w	r2, r3, #1
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4618      	mov	r0, r3
 80057be:	f7ff feed 	bl	800559c <LL_ADC_REG_IsConversionOngoing>
 80057c2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057c8:	f003 0310 	and.w	r3, r3, #16
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f040 8188 	bne.w	8005ae2 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f040 8184 	bne.w	8005ae2 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057de:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80057e2:	f043 0202 	orr.w	r2, r3, #2
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7ff fe9a 	bl	8005528 <LL_ADC_IsEnabled>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d136      	bne.n	8005868 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a6c      	ldr	r2, [pc, #432]	@ (80059b0 <HAL_ADC_Init+0x2b4>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d004      	beq.n	800580e <HAL_ADC_Init+0x112>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a6a      	ldr	r2, [pc, #424]	@ (80059b4 <HAL_ADC_Init+0x2b8>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d10e      	bne.n	800582c <HAL_ADC_Init+0x130>
 800580e:	4868      	ldr	r0, [pc, #416]	@ (80059b0 <HAL_ADC_Init+0x2b4>)
 8005810:	f7ff fe8a 	bl	8005528 <LL_ADC_IsEnabled>
 8005814:	4604      	mov	r4, r0
 8005816:	4867      	ldr	r0, [pc, #412]	@ (80059b4 <HAL_ADC_Init+0x2b8>)
 8005818:	f7ff fe86 	bl	8005528 <LL_ADC_IsEnabled>
 800581c:	4603      	mov	r3, r0
 800581e:	4323      	orrs	r3, r4
 8005820:	2b00      	cmp	r3, #0
 8005822:	bf0c      	ite	eq
 8005824:	2301      	moveq	r3, #1
 8005826:	2300      	movne	r3, #0
 8005828:	b2db      	uxtb	r3, r3
 800582a:	e008      	b.n	800583e <HAL_ADC_Init+0x142>
 800582c:	4862      	ldr	r0, [pc, #392]	@ (80059b8 <HAL_ADC_Init+0x2bc>)
 800582e:	f7ff fe7b 	bl	8005528 <LL_ADC_IsEnabled>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	bf0c      	ite	eq
 8005838:	2301      	moveq	r3, #1
 800583a:	2300      	movne	r3, #0
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d012      	beq.n	8005868 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a5a      	ldr	r2, [pc, #360]	@ (80059b0 <HAL_ADC_Init+0x2b4>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d004      	beq.n	8005856 <HAL_ADC_Init+0x15a>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a58      	ldr	r2, [pc, #352]	@ (80059b4 <HAL_ADC_Init+0x2b8>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d101      	bne.n	800585a <HAL_ADC_Init+0x15e>
 8005856:	4a59      	ldr	r2, [pc, #356]	@ (80059bc <HAL_ADC_Init+0x2c0>)
 8005858:	e000      	b.n	800585c <HAL_ADC_Init+0x160>
 800585a:	4a59      	ldr	r2, [pc, #356]	@ (80059c0 <HAL_ADC_Init+0x2c4>)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	4619      	mov	r1, r3
 8005862:	4610      	mov	r0, r2
 8005864:	f7ff fb22 	bl	8004eac <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a52      	ldr	r2, [pc, #328]	@ (80059b8 <HAL_ADC_Init+0x2bc>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d129      	bne.n	80058c6 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	7e5b      	ldrb	r3, [r3, #25]
 8005876:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800587c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8005882:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	2b08      	cmp	r3, #8
 800588a:	d013      	beq.n	80058b4 <HAL_ADC_Init+0x1b8>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	2b0c      	cmp	r3, #12
 8005892:	d00d      	beq.n	80058b0 <HAL_ADC_Init+0x1b4>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	2b1c      	cmp	r3, #28
 800589a:	d007      	beq.n	80058ac <HAL_ADC_Init+0x1b0>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	2b18      	cmp	r3, #24
 80058a2:	d101      	bne.n	80058a8 <HAL_ADC_Init+0x1ac>
 80058a4:	2318      	movs	r3, #24
 80058a6:	e006      	b.n	80058b6 <HAL_ADC_Init+0x1ba>
 80058a8:	2300      	movs	r3, #0
 80058aa:	e004      	b.n	80058b6 <HAL_ADC_Init+0x1ba>
 80058ac:	2310      	movs	r3, #16
 80058ae:	e002      	b.n	80058b6 <HAL_ADC_Init+0x1ba>
 80058b0:	2308      	movs	r3, #8
 80058b2:	e000      	b.n	80058b6 <HAL_ADC_Init+0x1ba>
 80058b4:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80058b6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058be:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80058c0:	4313      	orrs	r3, r2
 80058c2:	61bb      	str	r3, [r7, #24]
 80058c4:	e00e      	b.n	80058e4 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	7e5b      	ldrb	r3, [r3, #25]
 80058ca:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80058d0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80058d6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058de:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80058e0:	4313      	orrs	r3, r2
 80058e2:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d106      	bne.n	80058fc <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f2:	3b01      	subs	r3, #1
 80058f4:	045b      	lsls	r3, r3, #17
 80058f6:	69ba      	ldr	r2, [r7, #24]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005900:	2b00      	cmp	r3, #0
 8005902:	d009      	beq.n	8005918 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005908:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005910:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005912:	69ba      	ldr	r2, [r7, #24]
 8005914:	4313      	orrs	r3, r2
 8005916:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a26      	ldr	r2, [pc, #152]	@ (80059b8 <HAL_ADC_Init+0x2bc>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d115      	bne.n	800594e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68da      	ldr	r2, [r3, #12]
 8005928:	4b26      	ldr	r3, [pc, #152]	@ (80059c4 <HAL_ADC_Init+0x2c8>)
 800592a:	4013      	ands	r3, r2
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	6812      	ldr	r2, [r2, #0]
 8005930:	69b9      	ldr	r1, [r7, #24]
 8005932:	430b      	orrs	r3, r1
 8005934:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	691b      	ldr	r3, [r3, #16]
 800593c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	430a      	orrs	r2, r1
 800594a:	611a      	str	r2, [r3, #16]
 800594c:	e009      	b.n	8005962 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68da      	ldr	r2, [r3, #12]
 8005954:	4b1c      	ldr	r3, [pc, #112]	@ (80059c8 <HAL_ADC_Init+0x2cc>)
 8005956:	4013      	ands	r3, r2
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	6812      	ldr	r2, [r2, #0]
 800595c:	69b9      	ldr	r1, [r7, #24]
 800595e:	430b      	orrs	r3, r1
 8005960:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4618      	mov	r0, r3
 8005968:	f7ff fe18 	bl	800559c <LL_ADC_REG_IsConversionOngoing>
 800596c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4618      	mov	r0, r3
 8005974:	f7ff fe25 	bl	80055c2 <LL_ADC_INJ_IsConversionOngoing>
 8005978:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	2b00      	cmp	r3, #0
 800597e:	f040 808e 	bne.w	8005a9e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2b00      	cmp	r3, #0
 8005986:	f040 808a 	bne.w	8005a9e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a0a      	ldr	r2, [pc, #40]	@ (80059b8 <HAL_ADC_Init+0x2bc>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d11b      	bne.n	80059cc <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	7e1b      	ldrb	r3, [r3, #24]
 8005998:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80059a0:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80059a2:	4313      	orrs	r3, r2
 80059a4:	61bb      	str	r3, [r7, #24]
 80059a6:	e018      	b.n	80059da <HAL_ADC_Init+0x2de>
 80059a8:	24000038 	.word	0x24000038
 80059ac:	053e2d63 	.word	0x053e2d63
 80059b0:	40022000 	.word	0x40022000
 80059b4:	40022100 	.word	0x40022100
 80059b8:	58026000 	.word	0x58026000
 80059bc:	40022300 	.word	0x40022300
 80059c0:	58026300 	.word	0x58026300
 80059c4:	fff04007 	.word	0xfff04007
 80059c8:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	7e1b      	ldrb	r3, [r3, #24]
 80059d0:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 80059d6:	4313      	orrs	r3, r2
 80059d8:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68da      	ldr	r2, [r3, #12]
 80059e0:	4b46      	ldr	r3, [pc, #280]	@ (8005afc <HAL_ADC_Init+0x400>)
 80059e2:	4013      	ands	r3, r2
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	6812      	ldr	r2, [r2, #0]
 80059e8:	69b9      	ldr	r1, [r7, #24]
 80059ea:	430b      	orrs	r3, r1
 80059ec:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d137      	bne.n	8005a68 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059fc:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a3f      	ldr	r2, [pc, #252]	@ (8005b00 <HAL_ADC_Init+0x404>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d116      	bne.n	8005a36 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	691a      	ldr	r2, [r3, #16]
 8005a0e:	4b3d      	ldr	r3, [pc, #244]	@ (8005b04 <HAL_ADC_Init+0x408>)
 8005a10:	4013      	ands	r3, r2
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005a1a:	4311      	orrs	r1, r2
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005a20:	4311      	orrs	r1, r2
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005a26:	430a      	orrs	r2, r1
 8005a28:	431a      	orrs	r2, r3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f042 0201 	orr.w	r2, r2, #1
 8005a32:	611a      	str	r2, [r3, #16]
 8005a34:	e020      	b.n	8005a78 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	691a      	ldr	r2, [r3, #16]
 8005a3c:	4b32      	ldr	r3, [pc, #200]	@ (8005b08 <HAL_ADC_Init+0x40c>)
 8005a3e:	4013      	ands	r3, r2
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005a44:	3a01      	subs	r2, #1
 8005a46:	0411      	lsls	r1, r2, #16
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005a4c:	4311      	orrs	r1, r2
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005a52:	4311      	orrs	r1, r2
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	431a      	orrs	r2, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f042 0201 	orr.w	r2, r2, #1
 8005a64:	611a      	str	r2, [r3, #16]
 8005a66:	e007      	b.n	8005a78 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	691a      	ldr	r2, [r3, #16]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f022 0201 	bic.w	r2, r2, #1
 8005a76:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a1b      	ldr	r2, [pc, #108]	@ (8005b00 <HAL_ADC_Init+0x404>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d002      	beq.n	8005a9e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f001 fd99 	bl	80075d0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d10c      	bne.n	8005ac0 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aac:	f023 010f 	bic.w	r1, r3, #15
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	69db      	ldr	r3, [r3, #28]
 8005ab4:	1e5a      	subs	r2, r3, #1
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	631a      	str	r2, [r3, #48]	@ 0x30
 8005abe:	e007      	b.n	8005ad0 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f022 020f 	bic.w	r2, r2, #15
 8005ace:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ad4:	f023 0303 	bic.w	r3, r3, #3
 8005ad8:	f043 0201 	orr.w	r2, r3, #1
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	661a      	str	r2, [r3, #96]	@ 0x60
 8005ae0:	e007      	b.n	8005af2 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ae6:	f043 0210 	orr.w	r2, r3, #16
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005af2:	7ffb      	ldrb	r3, [r7, #31]
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3724      	adds	r7, #36	@ 0x24
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd90      	pop	{r4, r7, pc}
 8005afc:	ffffbffc 	.word	0xffffbffc
 8005b00:	58026000 	.word	0x58026000
 8005b04:	fc00f81f 	.word	0xfc00f81f
 8005b08:	fc00f81e 	.word	0xfc00f81e

08005b0c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b086      	sub	sp, #24
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a60      	ldr	r2, [pc, #384]	@ (8005ca0 <HAL_ADC_Start_DMA+0x194>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d004      	beq.n	8005b2c <HAL_ADC_Start_DMA+0x20>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a5f      	ldr	r2, [pc, #380]	@ (8005ca4 <HAL_ADC_Start_DMA+0x198>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d101      	bne.n	8005b30 <HAL_ADC_Start_DMA+0x24>
 8005b2c:	4b5e      	ldr	r3, [pc, #376]	@ (8005ca8 <HAL_ADC_Start_DMA+0x19c>)
 8005b2e:	e000      	b.n	8005b32 <HAL_ADC_Start_DMA+0x26>
 8005b30:	4b5e      	ldr	r3, [pc, #376]	@ (8005cac <HAL_ADC_Start_DMA+0x1a0>)
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7ff fc66 	bl	8005404 <LL_ADC_GetMultimode>
 8005b38:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7ff fd2c 	bl	800559c <LL_ADC_REG_IsConversionOngoing>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f040 80a2 	bne.w	8005c90 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d101      	bne.n	8005b5a <HAL_ADC_Start_DMA+0x4e>
 8005b56:	2302      	movs	r3, #2
 8005b58:	e09d      	b.n	8005c96 <HAL_ADC_Start_DMA+0x18a>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d006      	beq.n	8005b76 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	2b05      	cmp	r3, #5
 8005b6c:	d003      	beq.n	8005b76 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	2b09      	cmp	r3, #9
 8005b72:	f040 8086 	bne.w	8005c82 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f001 fbac 	bl	80072d4 <ADC_Enable>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005b80:	7dfb      	ldrb	r3, [r7, #23]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d178      	bne.n	8005c78 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005b8a:	4b49      	ldr	r3, [pc, #292]	@ (8005cb0 <HAL_ADC_Start_DMA+0x1a4>)
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a42      	ldr	r2, [pc, #264]	@ (8005ca4 <HAL_ADC_Start_DMA+0x198>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d002      	beq.n	8005ba6 <HAL_ADC_Start_DMA+0x9a>
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	e000      	b.n	8005ba8 <HAL_ADC_Start_DMA+0x9c>
 8005ba6:	4b3e      	ldr	r3, [pc, #248]	@ (8005ca0 <HAL_ADC_Start_DMA+0x194>)
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	6812      	ldr	r2, [r2, #0]
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d002      	beq.n	8005bb6 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d105      	bne.n	8005bc2 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bba:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bc6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d006      	beq.n	8005bdc <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bd2:	f023 0206 	bic.w	r2, r3, #6
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	665a      	str	r2, [r3, #100]	@ 0x64
 8005bda:	e002      	b.n	8005be2 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005be6:	4a33      	ldr	r2, [pc, #204]	@ (8005cb4 <HAL_ADC_Start_DMA+0x1a8>)
 8005be8:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bee:	4a32      	ldr	r2, [pc, #200]	@ (8005cb8 <HAL_ADC_Start_DMA+0x1ac>)
 8005bf0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bf6:	4a31      	ldr	r2, [pc, #196]	@ (8005cbc <HAL_ADC_Start_DMA+0x1b0>)
 8005bf8:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	221c      	movs	r2, #28
 8005c00:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	685a      	ldr	r2, [r3, #4]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f042 0210 	orr.w	r2, r2, #16
 8005c18:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a28      	ldr	r2, [pc, #160]	@ (8005cc0 <HAL_ADC_Start_DMA+0x1b4>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d10f      	bne.n	8005c44 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005c2e:	005b      	lsls	r3, r3, #1
 8005c30:	4619      	mov	r1, r3
 8005c32:	4610      	mov	r0, r2
 8005c34:	f7ff fac2 	bl	80051bc <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f7ff faad 	bl	800519c <LL_ADC_EnableDMAReq>
 8005c42:	e007      	b.n	8005c54 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	4610      	mov	r0, r2
 8005c50:	f7ff fa91 	bl	8005176 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	3340      	adds	r3, #64	@ 0x40
 8005c5e:	4619      	mov	r1, r3
 8005c60:	68ba      	ldr	r2, [r7, #8]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f002 fdcc 	bl	8008800 <HAL_DMA_Start_IT>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4618      	mov	r0, r3
 8005c72:	f7ff fc7f 	bl	8005574 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005c76:	e00d      	b.n	8005c94 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 8005c80:	e008      	b.n	8005c94 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8005c8e:	e001      	b.n	8005c94 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005c90:	2302      	movs	r3, #2
 8005c92:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005c94:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3718      	adds	r7, #24
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	40022000 	.word	0x40022000
 8005ca4:	40022100 	.word	0x40022100
 8005ca8:	40022300 	.word	0x40022300
 8005cac:	58026300 	.word	0x58026300
 8005cb0:	fffff0fe 	.word	0xfffff0fe
 8005cb4:	080074a7 	.word	0x080074a7
 8005cb8:	0800757f 	.word	0x0800757f
 8005cbc:	0800759b 	.word	0x0800759b
 8005cc0:	58026000 	.word	0x58026000

08005cc4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b08a      	sub	sp, #40	@ 0x28
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005ccc:	2300      	movs	r3, #0
 8005cce:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a87      	ldr	r2, [pc, #540]	@ (8005f04 <HAL_ADC_IRQHandler+0x240>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d004      	beq.n	8005cf4 <HAL_ADC_IRQHandler+0x30>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a86      	ldr	r2, [pc, #536]	@ (8005f08 <HAL_ADC_IRQHandler+0x244>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d101      	bne.n	8005cf8 <HAL_ADC_IRQHandler+0x34>
 8005cf4:	4b85      	ldr	r3, [pc, #532]	@ (8005f0c <HAL_ADC_IRQHandler+0x248>)
 8005cf6:	e000      	b.n	8005cfa <HAL_ADC_IRQHandler+0x36>
 8005cf8:	4b85      	ldr	r3, [pc, #532]	@ (8005f10 <HAL_ADC_IRQHandler+0x24c>)
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7ff fb82 	bl	8005404 <LL_ADC_GetMultimode>
 8005d00:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	f003 0302 	and.w	r3, r3, #2
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d017      	beq.n	8005d3c <HAL_ADC_IRQHandler+0x78>
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	f003 0302 	and.w	r3, r3, #2
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d012      	beq.n	8005d3c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d1a:	f003 0310 	and.w	r3, r3, #16
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d105      	bne.n	8005d2e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d26:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f001 fee8 	bl	8007b04 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2202      	movs	r2, #2
 8005d3a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	f003 0304 	and.w	r3, r3, #4
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d004      	beq.n	8005d50 <HAL_ADC_IRQHandler+0x8c>
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	f003 0304 	and.w	r3, r3, #4
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d10a      	bne.n	8005d66 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	f000 8083 	beq.w	8005e62 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	f003 0308 	and.w	r3, r3, #8
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d07d      	beq.n	8005e62 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d6a:	f003 0310 	and.w	r3, r3, #16
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d105      	bne.n	8005d7e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d76:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7ff f9b8 	bl	80050f8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d062      	beq.n	8005e54 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a5d      	ldr	r2, [pc, #372]	@ (8005f08 <HAL_ADC_IRQHandler+0x244>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d002      	beq.n	8005d9e <HAL_ADC_IRQHandler+0xda>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	e000      	b.n	8005da0 <HAL_ADC_IRQHandler+0xdc>
 8005d9e:	4b59      	ldr	r3, [pc, #356]	@ (8005f04 <HAL_ADC_IRQHandler+0x240>)
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	6812      	ldr	r2, [r2, #0]
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d008      	beq.n	8005dba <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d005      	beq.n	8005dba <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	2b05      	cmp	r3, #5
 8005db2:	d002      	beq.n	8005dba <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	2b09      	cmp	r3, #9
 8005db8:	d104      	bne.n	8005dc4 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	623b      	str	r3, [r7, #32]
 8005dc2:	e00c      	b.n	8005dde <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a4f      	ldr	r2, [pc, #316]	@ (8005f08 <HAL_ADC_IRQHandler+0x244>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d002      	beq.n	8005dd4 <HAL_ADC_IRQHandler+0x110>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	e000      	b.n	8005dd6 <HAL_ADC_IRQHandler+0x112>
 8005dd4:	4b4b      	ldr	r3, [pc, #300]	@ (8005f04 <HAL_ADC_IRQHandler+0x240>)
 8005dd6:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005dde:	6a3b      	ldr	r3, [r7, #32]
 8005de0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d135      	bne.n	8005e54 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0308 	and.w	r3, r3, #8
 8005df2:	2b08      	cmp	r3, #8
 8005df4:	d12e      	bne.n	8005e54 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f7ff fbce 	bl	800559c <LL_ADC_REG_IsConversionOngoing>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d11a      	bne.n	8005e3c <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	685a      	ldr	r2, [r3, #4]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f022 020c 	bic.w	r2, r2, #12
 8005e14:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e1a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d112      	bne.n	8005e54 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e32:	f043 0201 	orr.w	r2, r3, #1
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	661a      	str	r2, [r3, #96]	@ 0x60
 8005e3a:	e00b      	b.n	8005e54 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e40:	f043 0210 	orr.w	r2, r3, #16
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e4c:	f043 0201 	orr.w	r2, r3, #1
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f7fc f869 	bl	8001f2c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	220c      	movs	r2, #12
 8005e60:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	f003 0320 	and.w	r3, r3, #32
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d004      	beq.n	8005e76 <HAL_ADC_IRQHandler+0x1b2>
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	f003 0320 	and.w	r3, r3, #32
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10b      	bne.n	8005e8e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f000 80a0 	beq.w	8005fc2 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	f000 809a 	beq.w	8005fc2 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e92:	f003 0310 	and.w	r3, r3, #16
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d105      	bne.n	8005ea6 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e9e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f7ff f9a0 	bl	80051f0 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005eb0:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7ff f91e 	bl	80050f8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005ebc:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a11      	ldr	r2, [pc, #68]	@ (8005f08 <HAL_ADC_IRQHandler+0x244>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d002      	beq.n	8005ece <HAL_ADC_IRQHandler+0x20a>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	e000      	b.n	8005ed0 <HAL_ADC_IRQHandler+0x20c>
 8005ece:	4b0d      	ldr	r3, [pc, #52]	@ (8005f04 <HAL_ADC_IRQHandler+0x240>)
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	6812      	ldr	r2, [r2, #0]
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d008      	beq.n	8005eea <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d005      	beq.n	8005eea <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	2b06      	cmp	r3, #6
 8005ee2:	d002      	beq.n	8005eea <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	2b07      	cmp	r3, #7
 8005ee8:	d104      	bne.n	8005ef4 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	623b      	str	r3, [r7, #32]
 8005ef2:	e014      	b.n	8005f1e <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a03      	ldr	r2, [pc, #12]	@ (8005f08 <HAL_ADC_IRQHandler+0x244>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d00a      	beq.n	8005f14 <HAL_ADC_IRQHandler+0x250>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	e008      	b.n	8005f16 <HAL_ADC_IRQHandler+0x252>
 8005f04:	40022000 	.word	0x40022000
 8005f08:	40022100 	.word	0x40022100
 8005f0c:	40022300 	.word	0x40022300
 8005f10:	58026300 	.word	0x58026300
 8005f14:	4b84      	ldr	r3, [pc, #528]	@ (8006128 <HAL_ADC_IRQHandler+0x464>)
 8005f16:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d047      	beq.n	8005fb4 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005f24:	6a3b      	ldr	r3, [r7, #32]
 8005f26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d007      	beq.n	8005f3e <HAL_ADC_IRQHandler+0x27a>
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d03f      	beq.n	8005fb4 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005f34:	6a3b      	ldr	r3, [r7, #32]
 8005f36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d13a      	bne.n	8005fb4 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f48:	2b40      	cmp	r3, #64	@ 0x40
 8005f4a:	d133      	bne.n	8005fb4 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005f4c:	6a3b      	ldr	r3, [r7, #32]
 8005f4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d12e      	bne.n	8005fb4 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7ff fb31 	bl	80055c2 <LL_ADC_INJ_IsConversionOngoing>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d11a      	bne.n	8005f9c <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	685a      	ldr	r2, [r3, #4]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005f74:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f7a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d112      	bne.n	8005fb4 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f92:	f043 0201 	orr.w	r2, r3, #1
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	661a      	str	r2, [r3, #96]	@ 0x60
 8005f9a:	e00b      	b.n	8005fb4 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fa0:	f043 0210 	orr.w	r2, r3, #16
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fac:	f043 0201 	orr.w	r2, r3, #1
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f001 fd7d 	bl	8007ab4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2260      	movs	r2, #96	@ 0x60
 8005fc0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d011      	beq.n	8005ff0 <HAL_ADC_IRQHandler+0x32c>
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00c      	beq.n	8005ff0 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fda:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f8b2 	bl	800614c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2280      	movs	r2, #128	@ 0x80
 8005fee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d012      	beq.n	8006020 <HAL_ADC_IRQHandler+0x35c>
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00d      	beq.n	8006020 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006008:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f001 fd63 	bl	8007adc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800601e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006026:	2b00      	cmp	r3, #0
 8006028:	d012      	beq.n	8006050 <HAL_ADC_IRQHandler+0x38c>
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00d      	beq.n	8006050 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006038:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f001 fd55 	bl	8007af0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800604e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	f003 0310 	and.w	r3, r3, #16
 8006056:	2b00      	cmp	r3, #0
 8006058:	d043      	beq.n	80060e2 <HAL_ADC_IRQHandler+0x41e>
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	f003 0310 	and.w	r3, r3, #16
 8006060:	2b00      	cmp	r3, #0
 8006062:	d03e      	beq.n	80060e2 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006068:	2b00      	cmp	r3, #0
 800606a:	d102      	bne.n	8006072 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800606c:	2301      	movs	r3, #1
 800606e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006070:	e021      	b.n	80060b6 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d015      	beq.n	80060a4 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a2a      	ldr	r2, [pc, #168]	@ (8006128 <HAL_ADC_IRQHandler+0x464>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d004      	beq.n	800608c <HAL_ADC_IRQHandler+0x3c8>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a29      	ldr	r2, [pc, #164]	@ (800612c <HAL_ADC_IRQHandler+0x468>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d101      	bne.n	8006090 <HAL_ADC_IRQHandler+0x3cc>
 800608c:	4b28      	ldr	r3, [pc, #160]	@ (8006130 <HAL_ADC_IRQHandler+0x46c>)
 800608e:	e000      	b.n	8006092 <HAL_ADC_IRQHandler+0x3ce>
 8006090:	4b28      	ldr	r3, [pc, #160]	@ (8006134 <HAL_ADC_IRQHandler+0x470>)
 8006092:	4618      	mov	r0, r3
 8006094:	f7ff f9c4 	bl	8005420 <LL_ADC_GetMultiDMATransfer>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00b      	beq.n	80060b6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800609e:	2301      	movs	r3, #1
 80060a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80060a2:	e008      	b.n	80060b6 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	f003 0303 	and.w	r3, r3, #3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d001      	beq.n	80060b6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80060b2:	2301      	movs	r3, #1
 80060b4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80060b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d10e      	bne.n	80060da <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060c0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060cc:	f043 0202 	orr.w	r2, r3, #2
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f7fb fefd 	bl	8001ed4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2210      	movs	r2, #16
 80060e0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d018      	beq.n	800611e <HAL_ADC_IRQHandler+0x45a>
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d013      	beq.n	800611e <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060fa:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006106:	f043 0208 	orr.w	r2, r3, #8
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006116:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f001 fcd5 	bl	8007ac8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800611e:	bf00      	nop
 8006120:	3728      	adds	r7, #40	@ 0x28
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	40022000 	.word	0x40022000
 800612c:	40022100 	.word	0x40022100
 8006130:	40022300 	.word	0x40022300
 8006134:	58026300 	.word	0x58026300

08006138 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006140:	bf00      	nop
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006154:	bf00      	nop
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006160:	b590      	push	{r4, r7, lr}
 8006162:	b0b9      	sub	sp, #228	@ 0xe4
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800616a:	2300      	movs	r3, #0
 800616c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8006170:	2300      	movs	r3, #0
 8006172:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800617a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	4aa9      	ldr	r2, [pc, #676]	@ (8006428 <HAL_ADC_ConfigChannel+0x2c8>)
 8006182:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800618a:	2b01      	cmp	r3, #1
 800618c:	d102      	bne.n	8006194 <HAL_ADC_ConfigChannel+0x34>
 800618e:	2302      	movs	r3, #2
 8006190:	f000 bcfa 	b.w	8006b88 <HAL_ADC_ConfigChannel+0xa28>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4618      	mov	r0, r3
 80061a2:	f7ff f9fb 	bl	800559c <LL_ADC_REG_IsConversionOngoing>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f040 84de 	bne.w	8006b6a <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a9e      	ldr	r2, [pc, #632]	@ (800642c <HAL_ADC_ConfigChannel+0x2cc>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d033      	beq.n	8006220 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d108      	bne.n	80061d6 <HAL_ADC_ConfigChannel+0x76>
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	0e9b      	lsrs	r3, r3, #26
 80061ca:	f003 031f 	and.w	r3, r3, #31
 80061ce:	2201      	movs	r2, #1
 80061d0:	fa02 f303 	lsl.w	r3, r2, r3
 80061d4:	e01d      	b.n	8006212 <HAL_ADC_ConfigChannel+0xb2>
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80061e2:	fa93 f3a3 	rbit	r3, r3
 80061e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80061ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80061ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80061f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d101      	bne.n	80061fe <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 80061fa:	2320      	movs	r3, #32
 80061fc:	e004      	b.n	8006208 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 80061fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006202:	fab3 f383 	clz	r3, r3
 8006206:	b2db      	uxtb	r3, r3
 8006208:	f003 031f 	and.w	r3, r3, #31
 800620c:	2201      	movs	r2, #1
 800620e:	fa02 f303 	lsl.w	r3, r2, r3
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	6812      	ldr	r2, [r2, #0]
 8006216:	69d1      	ldr	r1, [r2, #28]
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	6812      	ldr	r2, [r2, #0]
 800621c:	430b      	orrs	r3, r1
 800621e:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6818      	ldr	r0, [r3, #0]
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	6859      	ldr	r1, [r3, #4]
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	461a      	mov	r2, r3
 800622e:	f7fe ff76 	bl	800511e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4618      	mov	r0, r3
 8006238:	f7ff f9b0 	bl	800559c <LL_ADC_REG_IsConversionOngoing>
 800623c:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4618      	mov	r0, r3
 8006246:	f7ff f9bc 	bl	80055c2 <LL_ADC_INJ_IsConversionOngoing>
 800624a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800624e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006252:	2b00      	cmp	r3, #0
 8006254:	f040 8270 	bne.w	8006738 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006258:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800625c:	2b00      	cmp	r3, #0
 800625e:	f040 826b 	bne.w	8006738 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6818      	ldr	r0, [r3, #0]
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	6819      	ldr	r1, [r3, #0]
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	461a      	mov	r2, r3
 8006270:	f7fe ffd1 	bl	8005216 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a6c      	ldr	r2, [pc, #432]	@ (800642c <HAL_ADC_ConfigChannel+0x2cc>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d10d      	bne.n	800629a <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	695a      	ldr	r2, [r3, #20]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	08db      	lsrs	r3, r3, #3
 800628a:	f003 0303 	and.w	r3, r3, #3
 800628e:	005b      	lsls	r3, r3, #1
 8006290:	fa02 f303 	lsl.w	r3, r2, r3
 8006294:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006298:	e032      	b.n	8006300 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800629a:	4b65      	ldr	r3, [pc, #404]	@ (8006430 <HAL_ADC_ConfigChannel+0x2d0>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80062a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062a6:	d10b      	bne.n	80062c0 <HAL_ADC_ConfigChannel+0x160>
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	695a      	ldr	r2, [r3, #20]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	089b      	lsrs	r3, r3, #2
 80062b4:	f003 0307 	and.w	r3, r3, #7
 80062b8:	005b      	lsls	r3, r3, #1
 80062ba:	fa02 f303 	lsl.w	r3, r2, r3
 80062be:	e01d      	b.n	80062fc <HAL_ADC_ConfigChannel+0x19c>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	f003 0310 	and.w	r3, r3, #16
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d10b      	bne.n	80062e6 <HAL_ADC_ConfigChannel+0x186>
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	695a      	ldr	r2, [r3, #20]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	089b      	lsrs	r3, r3, #2
 80062da:	f003 0307 	and.w	r3, r3, #7
 80062de:	005b      	lsls	r3, r3, #1
 80062e0:	fa02 f303 	lsl.w	r3, r2, r3
 80062e4:	e00a      	b.n	80062fc <HAL_ADC_ConfigChannel+0x19c>
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	695a      	ldr	r2, [r3, #20]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	089b      	lsrs	r3, r3, #2
 80062f2:	f003 0304 	and.w	r3, r3, #4
 80062f6:	005b      	lsls	r3, r3, #1
 80062f8:	fa02 f303 	lsl.w	r3, r2, r3
 80062fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	2b04      	cmp	r3, #4
 8006306:	d048      	beq.n	800639a <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6818      	ldr	r0, [r3, #0]
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	6919      	ldr	r1, [r3, #16]
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006318:	f7fe fdfc 	bl	8004f14 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a42      	ldr	r2, [pc, #264]	@ (800642c <HAL_ADC_ConfigChannel+0x2cc>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d119      	bne.n	800635a <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6818      	ldr	r0, [r3, #0]
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	6919      	ldr	r1, [r3, #16]
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	69db      	ldr	r3, [r3, #28]
 8006332:	461a      	mov	r2, r3
 8006334:	f7fe fe94 	bl	8005060 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6818      	ldr	r0, [r3, #0]
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	6919      	ldr	r1, [r3, #16]
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006346:	2b01      	cmp	r3, #1
 8006348:	d102      	bne.n	8006350 <HAL_ADC_ConfigChannel+0x1f0>
 800634a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800634e:	e000      	b.n	8006352 <HAL_ADC_ConfigChannel+0x1f2>
 8006350:	2300      	movs	r3, #0
 8006352:	461a      	mov	r2, r3
 8006354:	f7fe fe62 	bl	800501c <LL_ADC_SetOffsetSaturation>
 8006358:	e1ee      	b.n	8006738 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6818      	ldr	r0, [r3, #0]
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	6919      	ldr	r1, [r3, #16]
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006368:	2b01      	cmp	r3, #1
 800636a:	d102      	bne.n	8006372 <HAL_ADC_ConfigChannel+0x212>
 800636c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006370:	e000      	b.n	8006374 <HAL_ADC_ConfigChannel+0x214>
 8006372:	2300      	movs	r3, #0
 8006374:	461a      	mov	r2, r3
 8006376:	f7fe fe2f 	bl	8004fd8 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6818      	ldr	r0, [r3, #0]
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	6919      	ldr	r1, [r3, #16]
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	7e1b      	ldrb	r3, [r3, #24]
 8006386:	2b01      	cmp	r3, #1
 8006388:	d102      	bne.n	8006390 <HAL_ADC_ConfigChannel+0x230>
 800638a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800638e:	e000      	b.n	8006392 <HAL_ADC_ConfigChannel+0x232>
 8006390:	2300      	movs	r3, #0
 8006392:	461a      	mov	r2, r3
 8006394:	f7fe fe06 	bl	8004fa4 <LL_ADC_SetDataRightShift>
 8006398:	e1ce      	b.n	8006738 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a23      	ldr	r2, [pc, #140]	@ (800642c <HAL_ADC_ConfigChannel+0x2cc>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	f040 8181 	bne.w	80066a8 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2100      	movs	r1, #0
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7fe fde3 	bl	8004f78 <LL_ADC_GetOffsetChannel>
 80063b2:	4603      	mov	r3, r0
 80063b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d10a      	bne.n	80063d2 <HAL_ADC_ConfigChannel+0x272>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2100      	movs	r1, #0
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7fe fdd8 	bl	8004f78 <LL_ADC_GetOffsetChannel>
 80063c8:	4603      	mov	r3, r0
 80063ca:	0e9b      	lsrs	r3, r3, #26
 80063cc:	f003 021f 	and.w	r2, r3, #31
 80063d0:	e01e      	b.n	8006410 <HAL_ADC_ConfigChannel+0x2b0>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2100      	movs	r1, #0
 80063d8:	4618      	mov	r0, r3
 80063da:	f7fe fdcd 	bl	8004f78 <LL_ADC_GetOffsetChannel>
 80063de:	4603      	mov	r3, r0
 80063e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80063e8:	fa93 f3a3 	rbit	r3, r3
 80063ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 80063f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80063f4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 80063f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d101      	bne.n	8006404 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8006400:	2320      	movs	r3, #32
 8006402:	e004      	b.n	800640e <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8006404:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006408:	fab3 f383 	clz	r3, r3
 800640c:	b2db      	uxtb	r3, r3
 800640e:	461a      	mov	r2, r3
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006418:	2b00      	cmp	r3, #0
 800641a:	d10b      	bne.n	8006434 <HAL_ADC_ConfigChannel+0x2d4>
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	0e9b      	lsrs	r3, r3, #26
 8006422:	f003 031f 	and.w	r3, r3, #31
 8006426:	e01e      	b.n	8006466 <HAL_ADC_ConfigChannel+0x306>
 8006428:	47ff0000 	.word	0x47ff0000
 800642c:	58026000 	.word	0x58026000
 8006430:	5c001000 	.word	0x5c001000
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800643c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006440:	fa93 f3a3 	rbit	r3, r3
 8006444:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8006448:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800644c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8006450:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d101      	bne.n	800645c <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8006458:	2320      	movs	r3, #32
 800645a:	e004      	b.n	8006466 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 800645c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006460:	fab3 f383 	clz	r3, r3
 8006464:	b2db      	uxtb	r3, r3
 8006466:	429a      	cmp	r2, r3
 8006468:	d106      	bne.n	8006478 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2200      	movs	r2, #0
 8006470:	2100      	movs	r1, #0
 8006472:	4618      	mov	r0, r3
 8006474:	f7fe fe16 	bl	80050a4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2101      	movs	r1, #1
 800647e:	4618      	mov	r0, r3
 8006480:	f7fe fd7a 	bl	8004f78 <LL_ADC_GetOffsetChannel>
 8006484:	4603      	mov	r3, r0
 8006486:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800648a:	2b00      	cmp	r3, #0
 800648c:	d10a      	bne.n	80064a4 <HAL_ADC_ConfigChannel+0x344>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2101      	movs	r1, #1
 8006494:	4618      	mov	r0, r3
 8006496:	f7fe fd6f 	bl	8004f78 <LL_ADC_GetOffsetChannel>
 800649a:	4603      	mov	r3, r0
 800649c:	0e9b      	lsrs	r3, r3, #26
 800649e:	f003 021f 	and.w	r2, r3, #31
 80064a2:	e01e      	b.n	80064e2 <HAL_ADC_ConfigChannel+0x382>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	2101      	movs	r1, #1
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7fe fd64 	bl	8004f78 <LL_ADC_GetOffsetChannel>
 80064b0:	4603      	mov	r3, r0
 80064b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80064ba:	fa93 f3a3 	rbit	r3, r3
 80064be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80064c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80064c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80064ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d101      	bne.n	80064d6 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 80064d2:	2320      	movs	r3, #32
 80064d4:	e004      	b.n	80064e0 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 80064d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80064da:	fab3 f383 	clz	r3, r3
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	461a      	mov	r2, r3
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d105      	bne.n	80064fa <HAL_ADC_ConfigChannel+0x39a>
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	0e9b      	lsrs	r3, r3, #26
 80064f4:	f003 031f 	and.w	r3, r3, #31
 80064f8:	e018      	b.n	800652c <HAL_ADC_ConfigChannel+0x3cc>
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006502:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006506:	fa93 f3a3 	rbit	r3, r3
 800650a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800650e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006512:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8006516:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800651a:	2b00      	cmp	r3, #0
 800651c:	d101      	bne.n	8006522 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 800651e:	2320      	movs	r3, #32
 8006520:	e004      	b.n	800652c <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8006522:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006526:	fab3 f383 	clz	r3, r3
 800652a:	b2db      	uxtb	r3, r3
 800652c:	429a      	cmp	r2, r3
 800652e:	d106      	bne.n	800653e <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2200      	movs	r2, #0
 8006536:	2101      	movs	r1, #1
 8006538:	4618      	mov	r0, r3
 800653a:	f7fe fdb3 	bl	80050a4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2102      	movs	r1, #2
 8006544:	4618      	mov	r0, r3
 8006546:	f7fe fd17 	bl	8004f78 <LL_ADC_GetOffsetChannel>
 800654a:	4603      	mov	r3, r0
 800654c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006550:	2b00      	cmp	r3, #0
 8006552:	d10a      	bne.n	800656a <HAL_ADC_ConfigChannel+0x40a>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2102      	movs	r1, #2
 800655a:	4618      	mov	r0, r3
 800655c:	f7fe fd0c 	bl	8004f78 <LL_ADC_GetOffsetChannel>
 8006560:	4603      	mov	r3, r0
 8006562:	0e9b      	lsrs	r3, r3, #26
 8006564:	f003 021f 	and.w	r2, r3, #31
 8006568:	e01e      	b.n	80065a8 <HAL_ADC_ConfigChannel+0x448>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2102      	movs	r1, #2
 8006570:	4618      	mov	r0, r3
 8006572:	f7fe fd01 	bl	8004f78 <LL_ADC_GetOffsetChannel>
 8006576:	4603      	mov	r3, r0
 8006578:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800657c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006580:	fa93 f3a3 	rbit	r3, r3
 8006584:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8006588:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800658c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8006590:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006594:	2b00      	cmp	r3, #0
 8006596:	d101      	bne.n	800659c <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8006598:	2320      	movs	r3, #32
 800659a:	e004      	b.n	80065a6 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 800659c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80065a0:	fab3 f383 	clz	r3, r3
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	461a      	mov	r2, r3
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d105      	bne.n	80065c0 <HAL_ADC_ConfigChannel+0x460>
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	0e9b      	lsrs	r3, r3, #26
 80065ba:	f003 031f 	and.w	r3, r3, #31
 80065be:	e014      	b.n	80065ea <HAL_ADC_ConfigChannel+0x48a>
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80065c8:	fa93 f3a3 	rbit	r3, r3
 80065cc:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80065ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80065d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80065d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d101      	bne.n	80065e0 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 80065dc:	2320      	movs	r3, #32
 80065de:	e004      	b.n	80065ea <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 80065e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80065e4:	fab3 f383 	clz	r3, r3
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d106      	bne.n	80065fc <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2200      	movs	r2, #0
 80065f4:	2102      	movs	r1, #2
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7fe fd54 	bl	80050a4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2103      	movs	r1, #3
 8006602:	4618      	mov	r0, r3
 8006604:	f7fe fcb8 	bl	8004f78 <LL_ADC_GetOffsetChannel>
 8006608:	4603      	mov	r3, r0
 800660a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800660e:	2b00      	cmp	r3, #0
 8006610:	d10a      	bne.n	8006628 <HAL_ADC_ConfigChannel+0x4c8>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2103      	movs	r1, #3
 8006618:	4618      	mov	r0, r3
 800661a:	f7fe fcad 	bl	8004f78 <LL_ADC_GetOffsetChannel>
 800661e:	4603      	mov	r3, r0
 8006620:	0e9b      	lsrs	r3, r3, #26
 8006622:	f003 021f 	and.w	r2, r3, #31
 8006626:	e017      	b.n	8006658 <HAL_ADC_ConfigChannel+0x4f8>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2103      	movs	r1, #3
 800662e:	4618      	mov	r0, r3
 8006630:	f7fe fca2 	bl	8004f78 <LL_ADC_GetOffsetChannel>
 8006634:	4603      	mov	r3, r0
 8006636:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006638:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800663a:	fa93 f3a3 	rbit	r3, r3
 800663e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8006640:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006642:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8006644:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006646:	2b00      	cmp	r3, #0
 8006648:	d101      	bne.n	800664e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800664a:	2320      	movs	r3, #32
 800664c:	e003      	b.n	8006656 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800664e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006650:	fab3 f383 	clz	r3, r3
 8006654:	b2db      	uxtb	r3, r3
 8006656:	461a      	mov	r2, r3
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006660:	2b00      	cmp	r3, #0
 8006662:	d105      	bne.n	8006670 <HAL_ADC_ConfigChannel+0x510>
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	0e9b      	lsrs	r3, r3, #26
 800666a:	f003 031f 	and.w	r3, r3, #31
 800666e:	e011      	b.n	8006694 <HAL_ADC_ConfigChannel+0x534>
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006676:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006678:	fa93 f3a3 	rbit	r3, r3
 800667c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800667e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006680:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8006682:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006684:	2b00      	cmp	r3, #0
 8006686:	d101      	bne.n	800668c <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8006688:	2320      	movs	r3, #32
 800668a:	e003      	b.n	8006694 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 800668c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800668e:	fab3 f383 	clz	r3, r3
 8006692:	b2db      	uxtb	r3, r3
 8006694:	429a      	cmp	r2, r3
 8006696:	d14f      	bne.n	8006738 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2200      	movs	r2, #0
 800669e:	2103      	movs	r1, #3
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7fe fcff 	bl	80050a4 <LL_ADC_SetOffsetState>
 80066a6:	e047      	b.n	8006738 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	069b      	lsls	r3, r3, #26
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d107      	bne.n	80066cc <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80066ca:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80066d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	069b      	lsls	r3, r3, #26
 80066dc:	429a      	cmp	r2, r3
 80066de:	d107      	bne.n	80066f0 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80066ee:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80066f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	069b      	lsls	r3, r3, #26
 8006700:	429a      	cmp	r2, r3
 8006702:	d107      	bne.n	8006714 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8006712:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800671a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	069b      	lsls	r3, r3, #26
 8006724:	429a      	cmp	r2, r3
 8006726:	d107      	bne.n	8006738 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8006736:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4618      	mov	r0, r3
 800673e:	f7fe fef3 	bl	8005528 <LL_ADC_IsEnabled>
 8006742:	4603      	mov	r3, r0
 8006744:	2b00      	cmp	r3, #0
 8006746:	f040 8219 	bne.w	8006b7c <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6818      	ldr	r0, [r3, #0]
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	6819      	ldr	r1, [r3, #0]
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	461a      	mov	r2, r3
 8006758:	f7fe fd88 	bl	800526c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	4aa1      	ldr	r2, [pc, #644]	@ (80069e8 <HAL_ADC_ConfigChannel+0x888>)
 8006762:	4293      	cmp	r3, r2
 8006764:	f040 812e 	bne.w	80069c4 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006774:	2b00      	cmp	r3, #0
 8006776:	d10b      	bne.n	8006790 <HAL_ADC_ConfigChannel+0x630>
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	0e9b      	lsrs	r3, r3, #26
 800677e:	3301      	adds	r3, #1
 8006780:	f003 031f 	and.w	r3, r3, #31
 8006784:	2b09      	cmp	r3, #9
 8006786:	bf94      	ite	ls
 8006788:	2301      	movls	r3, #1
 800678a:	2300      	movhi	r3, #0
 800678c:	b2db      	uxtb	r3, r3
 800678e:	e019      	b.n	80067c4 <HAL_ADC_ConfigChannel+0x664>
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006796:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006798:	fa93 f3a3 	rbit	r3, r3
 800679c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800679e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80067a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d101      	bne.n	80067ac <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 80067a8:	2320      	movs	r3, #32
 80067aa:	e003      	b.n	80067b4 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 80067ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80067ae:	fab3 f383 	clz	r3, r3
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	3301      	adds	r3, #1
 80067b6:	f003 031f 	and.w	r3, r3, #31
 80067ba:	2b09      	cmp	r3, #9
 80067bc:	bf94      	ite	ls
 80067be:	2301      	movls	r3, #1
 80067c0:	2300      	movhi	r3, #0
 80067c2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d079      	beq.n	80068bc <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d107      	bne.n	80067e4 <HAL_ADC_ConfigChannel+0x684>
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	0e9b      	lsrs	r3, r3, #26
 80067da:	3301      	adds	r3, #1
 80067dc:	069b      	lsls	r3, r3, #26
 80067de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80067e2:	e015      	b.n	8006810 <HAL_ADC_ConfigChannel+0x6b0>
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067ec:	fa93 f3a3 	rbit	r3, r3
 80067f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80067f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067f4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80067f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d101      	bne.n	8006800 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80067fc:	2320      	movs	r3, #32
 80067fe:	e003      	b.n	8006808 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8006800:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006802:	fab3 f383 	clz	r3, r3
 8006806:	b2db      	uxtb	r3, r3
 8006808:	3301      	adds	r3, #1
 800680a:	069b      	lsls	r3, r3, #26
 800680c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006818:	2b00      	cmp	r3, #0
 800681a:	d109      	bne.n	8006830 <HAL_ADC_ConfigChannel+0x6d0>
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	0e9b      	lsrs	r3, r3, #26
 8006822:	3301      	adds	r3, #1
 8006824:	f003 031f 	and.w	r3, r3, #31
 8006828:	2101      	movs	r1, #1
 800682a:	fa01 f303 	lsl.w	r3, r1, r3
 800682e:	e017      	b.n	8006860 <HAL_ADC_ConfigChannel+0x700>
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006836:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006838:	fa93 f3a3 	rbit	r3, r3
 800683c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800683e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006840:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8006842:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006844:	2b00      	cmp	r3, #0
 8006846:	d101      	bne.n	800684c <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8006848:	2320      	movs	r3, #32
 800684a:	e003      	b.n	8006854 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 800684c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800684e:	fab3 f383 	clz	r3, r3
 8006852:	b2db      	uxtb	r3, r3
 8006854:	3301      	adds	r3, #1
 8006856:	f003 031f 	and.w	r3, r3, #31
 800685a:	2101      	movs	r1, #1
 800685c:	fa01 f303 	lsl.w	r3, r1, r3
 8006860:	ea42 0103 	orr.w	r1, r2, r3
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800686c:	2b00      	cmp	r3, #0
 800686e:	d10a      	bne.n	8006886 <HAL_ADC_ConfigChannel+0x726>
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	0e9b      	lsrs	r3, r3, #26
 8006876:	3301      	adds	r3, #1
 8006878:	f003 021f 	and.w	r2, r3, #31
 800687c:	4613      	mov	r3, r2
 800687e:	005b      	lsls	r3, r3, #1
 8006880:	4413      	add	r3, r2
 8006882:	051b      	lsls	r3, r3, #20
 8006884:	e018      	b.n	80068b8 <HAL_ADC_ConfigChannel+0x758>
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800688c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800688e:	fa93 f3a3 	rbit	r3, r3
 8006892:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8006894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006896:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8006898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800689a:	2b00      	cmp	r3, #0
 800689c:	d101      	bne.n	80068a2 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 800689e:	2320      	movs	r3, #32
 80068a0:	e003      	b.n	80068aa <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 80068a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068a4:	fab3 f383 	clz	r3, r3
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	3301      	adds	r3, #1
 80068ac:	f003 021f 	and.w	r2, r3, #31
 80068b0:	4613      	mov	r3, r2
 80068b2:	005b      	lsls	r3, r3, #1
 80068b4:	4413      	add	r3, r2
 80068b6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80068b8:	430b      	orrs	r3, r1
 80068ba:	e07e      	b.n	80069ba <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d107      	bne.n	80068d8 <HAL_ADC_ConfigChannel+0x778>
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	0e9b      	lsrs	r3, r3, #26
 80068ce:	3301      	adds	r3, #1
 80068d0:	069b      	lsls	r3, r3, #26
 80068d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80068d6:	e015      	b.n	8006904 <HAL_ADC_ConfigChannel+0x7a4>
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068e0:	fa93 f3a3 	rbit	r3, r3
 80068e4:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80068e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80068ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d101      	bne.n	80068f4 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 80068f0:	2320      	movs	r3, #32
 80068f2:	e003      	b.n	80068fc <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 80068f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068f6:	fab3 f383 	clz	r3, r3
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	3301      	adds	r3, #1
 80068fe:	069b      	lsls	r3, r3, #26
 8006900:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800690c:	2b00      	cmp	r3, #0
 800690e:	d109      	bne.n	8006924 <HAL_ADC_ConfigChannel+0x7c4>
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	0e9b      	lsrs	r3, r3, #26
 8006916:	3301      	adds	r3, #1
 8006918:	f003 031f 	and.w	r3, r3, #31
 800691c:	2101      	movs	r1, #1
 800691e:	fa01 f303 	lsl.w	r3, r1, r3
 8006922:	e017      	b.n	8006954 <HAL_ADC_ConfigChannel+0x7f4>
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	fa93 f3a3 	rbit	r3, r3
 8006930:	61bb      	str	r3, [r7, #24]
  return result;
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006936:	6a3b      	ldr	r3, [r7, #32]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d101      	bne.n	8006940 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 800693c:	2320      	movs	r3, #32
 800693e:	e003      	b.n	8006948 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8006940:	6a3b      	ldr	r3, [r7, #32]
 8006942:	fab3 f383 	clz	r3, r3
 8006946:	b2db      	uxtb	r3, r3
 8006948:	3301      	adds	r3, #1
 800694a:	f003 031f 	and.w	r3, r3, #31
 800694e:	2101      	movs	r1, #1
 8006950:	fa01 f303 	lsl.w	r3, r1, r3
 8006954:	ea42 0103 	orr.w	r1, r2, r3
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006960:	2b00      	cmp	r3, #0
 8006962:	d10d      	bne.n	8006980 <HAL_ADC_ConfigChannel+0x820>
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	0e9b      	lsrs	r3, r3, #26
 800696a:	3301      	adds	r3, #1
 800696c:	f003 021f 	and.w	r2, r3, #31
 8006970:	4613      	mov	r3, r2
 8006972:	005b      	lsls	r3, r3, #1
 8006974:	4413      	add	r3, r2
 8006976:	3b1e      	subs	r3, #30
 8006978:	051b      	lsls	r3, r3, #20
 800697a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800697e:	e01b      	b.n	80069b8 <HAL_ADC_ConfigChannel+0x858>
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	fa93 f3a3 	rbit	r3, r3
 800698c:	60fb      	str	r3, [r7, #12]
  return result;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d101      	bne.n	800699c <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8006998:	2320      	movs	r3, #32
 800699a:	e003      	b.n	80069a4 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	fab3 f383 	clz	r3, r3
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	3301      	adds	r3, #1
 80069a6:	f003 021f 	and.w	r2, r3, #31
 80069aa:	4613      	mov	r3, r2
 80069ac:	005b      	lsls	r3, r3, #1
 80069ae:	4413      	add	r3, r2
 80069b0:	3b1e      	subs	r3, #30
 80069b2:	051b      	lsls	r3, r3, #20
 80069b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80069b8:	430b      	orrs	r3, r1
 80069ba:	683a      	ldr	r2, [r7, #0]
 80069bc:	6892      	ldr	r2, [r2, #8]
 80069be:	4619      	mov	r1, r3
 80069c0:	f7fe fc29 	bl	8005216 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f280 80d7 	bge.w	8006b7c <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a06      	ldr	r2, [pc, #24]	@ (80069ec <HAL_ADC_ConfigChannel+0x88c>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d004      	beq.n	80069e2 <HAL_ADC_ConfigChannel+0x882>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a04      	ldr	r2, [pc, #16]	@ (80069f0 <HAL_ADC_ConfigChannel+0x890>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d10a      	bne.n	80069f8 <HAL_ADC_ConfigChannel+0x898>
 80069e2:	4b04      	ldr	r3, [pc, #16]	@ (80069f4 <HAL_ADC_ConfigChannel+0x894>)
 80069e4:	e009      	b.n	80069fa <HAL_ADC_ConfigChannel+0x89a>
 80069e6:	bf00      	nop
 80069e8:	47ff0000 	.word	0x47ff0000
 80069ec:	40022000 	.word	0x40022000
 80069f0:	40022100 	.word	0x40022100
 80069f4:	40022300 	.word	0x40022300
 80069f8:	4b65      	ldr	r3, [pc, #404]	@ (8006b90 <HAL_ADC_ConfigChannel+0xa30>)
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7fe fa7c 	bl	8004ef8 <LL_ADC_GetCommonPathInternalCh>
 8006a00:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a62      	ldr	r2, [pc, #392]	@ (8006b94 <HAL_ADC_ConfigChannel+0xa34>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d004      	beq.n	8006a18 <HAL_ADC_ConfigChannel+0x8b8>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a61      	ldr	r2, [pc, #388]	@ (8006b98 <HAL_ADC_ConfigChannel+0xa38>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d10e      	bne.n	8006a36 <HAL_ADC_ConfigChannel+0x8d6>
 8006a18:	485e      	ldr	r0, [pc, #376]	@ (8006b94 <HAL_ADC_ConfigChannel+0xa34>)
 8006a1a:	f7fe fd85 	bl	8005528 <LL_ADC_IsEnabled>
 8006a1e:	4604      	mov	r4, r0
 8006a20:	485d      	ldr	r0, [pc, #372]	@ (8006b98 <HAL_ADC_ConfigChannel+0xa38>)
 8006a22:	f7fe fd81 	bl	8005528 <LL_ADC_IsEnabled>
 8006a26:	4603      	mov	r3, r0
 8006a28:	4323      	orrs	r3, r4
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	bf0c      	ite	eq
 8006a2e:	2301      	moveq	r3, #1
 8006a30:	2300      	movne	r3, #0
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	e008      	b.n	8006a48 <HAL_ADC_ConfigChannel+0x8e8>
 8006a36:	4859      	ldr	r0, [pc, #356]	@ (8006b9c <HAL_ADC_ConfigChannel+0xa3c>)
 8006a38:	f7fe fd76 	bl	8005528 <LL_ADC_IsEnabled>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	bf0c      	ite	eq
 8006a42:	2301      	moveq	r3, #1
 8006a44:	2300      	movne	r3, #0
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f000 8084 	beq.w	8006b56 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a53      	ldr	r2, [pc, #332]	@ (8006ba0 <HAL_ADC_ConfigChannel+0xa40>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d132      	bne.n	8006abe <HAL_ADC_ConfigChannel+0x95e>
 8006a58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d12c      	bne.n	8006abe <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a4c      	ldr	r2, [pc, #304]	@ (8006b9c <HAL_ADC_ConfigChannel+0xa3c>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	f040 8086 	bne.w	8006b7c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a47      	ldr	r2, [pc, #284]	@ (8006b94 <HAL_ADC_ConfigChannel+0xa34>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d004      	beq.n	8006a84 <HAL_ADC_ConfigChannel+0x924>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a46      	ldr	r2, [pc, #280]	@ (8006b98 <HAL_ADC_ConfigChannel+0xa38>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d101      	bne.n	8006a88 <HAL_ADC_ConfigChannel+0x928>
 8006a84:	4a47      	ldr	r2, [pc, #284]	@ (8006ba4 <HAL_ADC_ConfigChannel+0xa44>)
 8006a86:	e000      	b.n	8006a8a <HAL_ADC_ConfigChannel+0x92a>
 8006a88:	4a41      	ldr	r2, [pc, #260]	@ (8006b90 <HAL_ADC_ConfigChannel+0xa30>)
 8006a8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a8e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006a92:	4619      	mov	r1, r3
 8006a94:	4610      	mov	r0, r2
 8006a96:	f7fe fa1c 	bl	8004ed2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006a9a:	4b43      	ldr	r3, [pc, #268]	@ (8006ba8 <HAL_ADC_ConfigChannel+0xa48>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	099b      	lsrs	r3, r3, #6
 8006aa0:	4a42      	ldr	r2, [pc, #264]	@ (8006bac <HAL_ADC_ConfigChannel+0xa4c>)
 8006aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8006aa6:	099b      	lsrs	r3, r3, #6
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	005b      	lsls	r3, r3, #1
 8006aac:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006aae:	e002      	b.n	8006ab6 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1f9      	bne.n	8006ab0 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006abc:	e05e      	b.n	8006b7c <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a3b      	ldr	r2, [pc, #236]	@ (8006bb0 <HAL_ADC_ConfigChannel+0xa50>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d120      	bne.n	8006b0a <HAL_ADC_ConfigChannel+0x9aa>
 8006ac8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006acc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d11a      	bne.n	8006b0a <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a30      	ldr	r2, [pc, #192]	@ (8006b9c <HAL_ADC_ConfigChannel+0xa3c>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d14e      	bne.n	8006b7c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a2c      	ldr	r2, [pc, #176]	@ (8006b94 <HAL_ADC_ConfigChannel+0xa34>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d004      	beq.n	8006af2 <HAL_ADC_ConfigChannel+0x992>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a2a      	ldr	r2, [pc, #168]	@ (8006b98 <HAL_ADC_ConfigChannel+0xa38>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d101      	bne.n	8006af6 <HAL_ADC_ConfigChannel+0x996>
 8006af2:	4a2c      	ldr	r2, [pc, #176]	@ (8006ba4 <HAL_ADC_ConfigChannel+0xa44>)
 8006af4:	e000      	b.n	8006af8 <HAL_ADC_ConfigChannel+0x998>
 8006af6:	4a26      	ldr	r2, [pc, #152]	@ (8006b90 <HAL_ADC_ConfigChannel+0xa30>)
 8006af8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006afc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b00:	4619      	mov	r1, r3
 8006b02:	4610      	mov	r0, r2
 8006b04:	f7fe f9e5 	bl	8004ed2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006b08:	e038      	b.n	8006b7c <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a29      	ldr	r2, [pc, #164]	@ (8006bb4 <HAL_ADC_ConfigChannel+0xa54>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d133      	bne.n	8006b7c <HAL_ADC_ConfigChannel+0xa1c>
 8006b14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006b18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d12d      	bne.n	8006b7c <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a1d      	ldr	r2, [pc, #116]	@ (8006b9c <HAL_ADC_ConfigChannel+0xa3c>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d128      	bne.n	8006b7c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a19      	ldr	r2, [pc, #100]	@ (8006b94 <HAL_ADC_ConfigChannel+0xa34>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d004      	beq.n	8006b3e <HAL_ADC_ConfigChannel+0x9de>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a17      	ldr	r2, [pc, #92]	@ (8006b98 <HAL_ADC_ConfigChannel+0xa38>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d101      	bne.n	8006b42 <HAL_ADC_ConfigChannel+0x9e2>
 8006b3e:	4a19      	ldr	r2, [pc, #100]	@ (8006ba4 <HAL_ADC_ConfigChannel+0xa44>)
 8006b40:	e000      	b.n	8006b44 <HAL_ADC_ConfigChannel+0x9e4>
 8006b42:	4a13      	ldr	r2, [pc, #76]	@ (8006b90 <HAL_ADC_ConfigChannel+0xa30>)
 8006b44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006b48:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	4610      	mov	r0, r2
 8006b50:	f7fe f9bf 	bl	8004ed2 <LL_ADC_SetCommonPathInternalCh>
 8006b54:	e012      	b.n	8006b7c <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b5a:	f043 0220 	orr.w	r2, r3, #32
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8006b68:	e008      	b.n	8006b7c <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b6e:	f043 0220 	orr.w	r2, r3, #32
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8006b84:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	37e4      	adds	r7, #228	@ 0xe4
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd90      	pop	{r4, r7, pc}
 8006b90:	58026300 	.word	0x58026300
 8006b94:	40022000 	.word	0x40022000
 8006b98:	40022100 	.word	0x40022100
 8006b9c:	58026000 	.word	0x58026000
 8006ba0:	c7520000 	.word	0xc7520000
 8006ba4:	40022300 	.word	0x40022300
 8006ba8:	24000038 	.word	0x24000038
 8006bac:	053e2d63 	.word	0x053e2d63
 8006bb0:	c3210000 	.word	0xc3210000
 8006bb4:	cb840000 	.word	0xcb840000

08006bb8 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b094      	sub	sp, #80	@ 0x50
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));

  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006bd0:	d003      	beq.n	8006bda <HAL_ADC_AnalogWDGConfig+0x22>
      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	685b      	ldr	r3, [r3, #4]
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8006bd6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
  }

#if defined(ADC_VER_V5_V90)

  if (hadc->Instance == ADC3)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a8c      	ldr	r2, [pc, #560]	@ (8006e10 <HAL_ADC_AnalogWDGConfig+0x258>)
 8006be0:	4293      	cmp	r3, r2
      assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
    }
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d101      	bne.n	8006bf0 <HAL_ADC_AnalogWDGConfig+0x38>
 8006bec:	2302      	movs	r3, #2
 8006bee:	e36b      	b.n	80072c8 <HAL_ADC_AnalogWDGConfig+0x710>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  /*  - Analog watchdog thresholds                                            */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f7fe fccd 	bl	800559c <LL_ADC_REG_IsConversionOngoing>
 8006c02:	6438      	str	r0, [r7, #64]	@ 0x40
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f7fe fcda 	bl	80055c2 <LL_ADC_INJ_IsConversionOngoing>
 8006c0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006c10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	f040 8349 	bne.w	80072aa <HAL_ADC_AnalogWDGConfig+0x6f2>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006c18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	f040 8345 	bne.w	80072aa <HAL_ADC_AnalogWDGConfig+0x6f2>
     )
  {
    /* Analog watchdog configuration */
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a7b      	ldr	r2, [pc, #492]	@ (8006e14 <HAL_ADC_AnalogWDGConfig+0x25c>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	f040 8131 	bne.w	8006e8e <HAL_ADC_AnalogWDGConfig+0x2d6>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (AnalogWDGConfig->WatchdogMode)
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 8006c34:	d034      	beq.n	8006ca0 <HAL_ADC_AnalogWDGConfig+0xe8>
 8006c36:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 8006c3a:	d856      	bhi.n	8006cea <HAL_ADC_AnalogWDGConfig+0x132>
 8006c3c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006c40:	d04b      	beq.n	8006cda <HAL_ADC_AnalogWDGConfig+0x122>
 8006c42:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006c46:	d850      	bhi.n	8006cea <HAL_ADC_AnalogWDGConfig+0x132>
 8006c48:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006c4c:	d01b      	beq.n	8006c86 <HAL_ADC_AnalogWDGConfig+0xce>
 8006c4e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006c52:	d84a      	bhi.n	8006cea <HAL_ADC_AnalogWDGConfig+0x132>
 8006c54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c58:	d037      	beq.n	8006cca <HAL_ADC_AnalogWDGConfig+0x112>
 8006c5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c5e:	d844      	bhi.n	8006cea <HAL_ADC_AnalogWDGConfig+0x132>
 8006c60:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006c64:	d029      	beq.n	8006cba <HAL_ADC_AnalogWDGConfig+0x102>
 8006c66:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006c6a:	d13e      	bne.n	8006cea <HAL_ADC_AnalogWDGConfig+0x132>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6818      	ldr	r0, [r3, #0]
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8006c78:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	4965      	ldr	r1, [pc, #404]	@ (8006e14 <HAL_ADC_AnalogWDGConfig+0x25c>)
 8006c80:	f7fe fb34 	bl	80052ec <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR));
          break;
 8006c84:	e039      	b.n	8006cfa <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6818      	ldr	r0, [r3, #0]
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8006c92:	f043 73a0 	orr.w	r3, r3, #20971520	@ 0x1400000
 8006c96:	461a      	mov	r2, r3
 8006c98:	495e      	ldr	r1, [pc, #376]	@ (8006e14 <HAL_ADC_AnalogWDGConfig+0x25c>)
 8006c9a:	f7fe fb27 	bl	80052ec <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_INJECTED));
          break;
 8006c9e:	e02c      	b.n	8006cfa <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6818      	ldr	r0, [r3, #0]
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8006cac:	f043 73e0 	orr.w	r3, r3, #29360128	@ 0x1c00000
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	4958      	ldr	r1, [pc, #352]	@ (8006e14 <HAL_ADC_AnalogWDGConfig+0x25c>)
 8006cb4:	f7fe fb1a 	bl	80052ec <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 8006cb8:	e01f      	b.n	8006cfa <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a56      	ldr	r2, [pc, #344]	@ (8006e18 <HAL_ADC_AnalogWDGConfig+0x260>)
 8006cc0:	4954      	ldr	r1, [pc, #336]	@ (8006e14 <HAL_ADC_AnalogWDGConfig+0x25c>)
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7fe fb12 	bl	80052ec <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006cc8:	e017      	b.n	8006cfa <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a53      	ldr	r2, [pc, #332]	@ (8006e1c <HAL_ADC_AnalogWDGConfig+0x264>)
 8006cd0:	4950      	ldr	r1, [pc, #320]	@ (8006e14 <HAL_ADC_AnalogWDGConfig+0x25c>)
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f7fe fb0a 	bl	80052ec <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006cd8:	e00f      	b.n	8006cfa <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a50      	ldr	r2, [pc, #320]	@ (8006e20 <HAL_ADC_AnalogWDGConfig+0x268>)
 8006ce0:	494c      	ldr	r1, [pc, #304]	@ (8006e14 <HAL_ADC_AnalogWDGConfig+0x25c>)
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f7fe fb02 	bl	80052ec <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006ce8:	e007      	b.n	8006cfa <HAL_ADC_AnalogWDGConfig+0x142>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	4948      	ldr	r1, [pc, #288]	@ (8006e14 <HAL_ADC_AnalogWDGConfig+0x25c>)
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7fe fafa 	bl	80052ec <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006cf8:	bf00      	nop
      }

      /* Shift the offset in function of the selected ADC resolution:         */
      /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
      /* are set to 0                                                         */
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8006cfa:	4b4a      	ldr	r3, [pc, #296]	@ (8006e24 <HAL_ADC_AnalogWDGConfig+0x26c>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006d02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d06:	d10b      	bne.n	8006d20 <HAL_ADC_AnalogWDGConfig+0x168>
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	691a      	ldr	r2, [r3, #16]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	089b      	lsrs	r3, r3, #2
 8006d14:	f003 0307 	and.w	r3, r3, #7
 8006d18:	005b      	lsls	r3, r3, #1
 8006d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d1e:	e01d      	b.n	8006d5c <HAL_ADC_AnalogWDGConfig+0x1a4>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	f003 0310 	and.w	r3, r3, #16
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d10b      	bne.n	8006d46 <HAL_ADC_AnalogWDGConfig+0x18e>
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	691a      	ldr	r2, [r3, #16]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	089b      	lsrs	r3, r3, #2
 8006d3a:	f003 0307 	and.w	r3, r3, #7
 8006d3e:	005b      	lsls	r3, r3, #1
 8006d40:	fa02 f303 	lsl.w	r3, r2, r3
 8006d44:	e00a      	b.n	8006d5c <HAL_ADC_AnalogWDGConfig+0x1a4>
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	691a      	ldr	r2, [r3, #16]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	089b      	lsrs	r3, r3, #2
 8006d52:	f003 0304 	and.w	r3, r3, #4
 8006d56:	005b      	lsls	r3, r3, #1
 8006d58:	fa02 f303 	lsl.w	r3, r2, r3
 8006d5c:	64bb      	str	r3, [r7, #72]	@ 0x48
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8006d5e:	4b31      	ldr	r3, [pc, #196]	@ (8006e24 <HAL_ADC_AnalogWDGConfig+0x26c>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006d66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d6a:	d10b      	bne.n	8006d84 <HAL_ADC_AnalogWDGConfig+0x1cc>
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	695a      	ldr	r2, [r3, #20]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	089b      	lsrs	r3, r3, #2
 8006d78:	f003 0307 	and.w	r3, r3, #7
 8006d7c:	005b      	lsls	r3, r3, #1
 8006d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d82:	e01d      	b.n	8006dc0 <HAL_ADC_AnalogWDGConfig+0x208>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	f003 0310 	and.w	r3, r3, #16
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d10b      	bne.n	8006daa <HAL_ADC_AnalogWDGConfig+0x1f2>
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	695a      	ldr	r2, [r3, #20]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	089b      	lsrs	r3, r3, #2
 8006d9e:	f003 0307 	and.w	r3, r3, #7
 8006da2:	005b      	lsls	r3, r3, #1
 8006da4:	fa02 f303 	lsl.w	r3, r2, r3
 8006da8:	e00a      	b.n	8006dc0 <HAL_ADC_AnalogWDGConfig+0x208>
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	695a      	ldr	r2, [r3, #20]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	089b      	lsrs	r3, r3, #2
 8006db6:	f003 0304 	and.w	r3, r3, #4
 8006dba:	005b      	lsls	r3, r3, #1
 8006dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc0:	647b      	str	r3, [r7, #68]	@ 0x44

      /* Set the high and low thresholds */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a12      	ldr	r2, [pc, #72]	@ (8006e10 <HAL_ADC_AnalogWDGConfig+0x258>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d131      	bne.n	8006e30 <HAL_ADC_AnalogWDGConfig+0x278>
      {
        MODIFY_REG(hadc->Instance->LTR1_TR1,
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	6a1b      	ldr	r3, [r3, #32]
 8006dd2:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	699a      	ldr	r2, [r3, #24]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	430a      	orrs	r2, r1
 8006de0:	621a      	str	r2, [r3, #32]
                   ADC3_TR1_AWDFILT,
                   AnalogWDGConfig->FilteringConfig);
        MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC3_TR1_LT1, tmpAWDLowThresholdShifted);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	6a1a      	ldr	r2, [r3, #32]
 8006de8:	4b0f      	ldr	r3, [pc, #60]	@ (8006e28 <HAL_ADC_AnalogWDGConfig+0x270>)
 8006dea:	4013      	ands	r3, r2
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	6812      	ldr	r2, [r2, #0]
 8006df0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006df2:	430b      	orrs	r3, r1
 8006df4:	6213      	str	r3, [r2, #32]
        MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC3_TR1_HT1, (tmpAWDHighThresholdShifted << ADC3_TR1_HT1_Pos));
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	6a1a      	ldr	r2, [r3, #32]
 8006dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8006e2c <HAL_ADC_AnalogWDGConfig+0x274>)
 8006dfe:	4013      	ands	r3, r2
 8006e00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e02:	0411      	lsls	r1, r2, #16
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	6812      	ldr	r2, [r2, #0]
 8006e08:	430b      	orrs	r3, r1
 8006e0a:	6213      	str	r3, [r2, #32]
 8006e0c:	e024      	b.n	8006e58 <HAL_ADC_AnalogWDGConfig+0x2a0>
 8006e0e:	bf00      	nop
 8006e10:	58026000 	.word	0x58026000
 8006e14:	7dc00000 	.word	0x7dc00000
 8006e18:	008fffff 	.word	0x008fffff
 8006e1c:	010fffff 	.word	0x010fffff
 8006e20:	018fffff 	.word	0x018fffff
 8006e24:	5c001000 	.word	0x5c001000
 8006e28:	fffff000 	.word	0xfffff000
 8006e2c:	f000ffff 	.word	0xf000ffff
      }
      else
      {

        MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	6a1b      	ldr	r3, [r3, #32]
 8006e36:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e40:	430a      	orrs	r2, r1
 8006e42:	621a      	str	r2, [r3, #32]
        MODIFY_REG(hadc->Instance->HTR1_TR2,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e4a:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e54:	430a      	orrs	r2, r1
 8006e56:	625a      	str	r2, [r3, #36]	@ 0x24
      MODIFY_REG(hadc->Instance->LTR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
      MODIFY_REG(hadc->Instance->HTR1,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
#endif

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e5c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4618      	mov	r0, r3
 8006e6a:	f7fe fbbd 	bl	80055e8 <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (AnalogWDGConfig->ITMode == ENABLE)
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	7b1b      	ldrb	r3, [r3, #12]
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d105      	bne.n	8006e82 <HAL_ADC_AnalogWDGConfig+0x2ca>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7fe fbdd 	bl	800563a <LL_ADC_EnableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006e80:	e21c      	b.n	80072bc <HAL_ADC_AnalogWDGConfig+0x704>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4618      	mov	r0, r3
 8006e88:	f7fe fc07 	bl	800569a <LL_ADC_DisableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006e8c:	e216      	b.n	80072bc <HAL_ADC_AnalogWDGConfig+0x704>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (AnalogWDGConfig->WatchdogMode)
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 8006e96:	d01f      	beq.n	8006ed8 <HAL_ADC_AnalogWDGConfig+0x320>
 8006e98:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 8006e9c:	f200 80f4 	bhi.w	8007088 <HAL_ADC_AnalogWDGConfig+0x4d0>
 8006ea0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006ea4:	d07d      	beq.n	8006fa2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 8006ea6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006eaa:	f200 80ed 	bhi.w	8007088 <HAL_ADC_AnalogWDGConfig+0x4d0>
 8006eae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006eb2:	d011      	beq.n	8006ed8 <HAL_ADC_AnalogWDGConfig+0x320>
 8006eb4:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006eb8:	f200 80e6 	bhi.w	8007088 <HAL_ADC_AnalogWDGConfig+0x4d0>
 8006ebc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ec0:	d06f      	beq.n	8006fa2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 8006ec2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ec6:	f200 80df 	bhi.w	8007088 <HAL_ADC_AnalogWDGConfig+0x4d0>
 8006eca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006ece:	d068      	beq.n	8006fa2 <HAL_ADC_AnalogWDGConfig+0x3ea>
 8006ed0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006ed4:	f040 80d8 	bne.w	8007088 <HAL_ADC_AnalogWDGConfig+0x4d0>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a9c      	ldr	r2, [pc, #624]	@ (8007150 <HAL_ADC_AnalogWDGConfig+0x598>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d12f      	bne.n	8006f42 <HAL_ADC_AnalogWDGConfig+0x38a>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d108      	bne.n	8006f00 <HAL_ADC_AnalogWDGConfig+0x348>
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	0e9b      	lsrs	r3, r3, #26
 8006ef4:	f003 031f 	and.w	r3, r3, #31
 8006ef8:	2201      	movs	r2, #1
 8006efa:	fa02 f303 	lsl.w	r3, r2, r3
 8006efe:	e016      	b.n	8006f2e <HAL_ADC_AnalogWDGConfig+0x376>
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f08:	fa93 f3a3 	rbit	r3, r3
 8006f0c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8006f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f10:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8006f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d101      	bne.n	8006f1c <HAL_ADC_AnalogWDGConfig+0x364>
    return 32U;
 8006f18:	2320      	movs	r3, #32
 8006f1a:	e003      	b.n	8006f24 <HAL_ADC_AnalogWDGConfig+0x36c>
  return __builtin_clz(value);
 8006f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f1e:	fab3 f383 	clz	r3, r3
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	f003 031f 	and.w	r3, r3, #31
 8006f28:	2201      	movs	r2, #1
 8006f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	6812      	ldr	r2, [r2, #0]
 8006f32:	f8d2 10a0 	ldr.w	r1, [r2, #160]	@ 0xa0
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	6812      	ldr	r2, [r2, #0]
 8006f3a:	430b      	orrs	r3, r1
 8006f3c:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 8006f40:	e0ab      	b.n	800709a <HAL_ADC_AnalogWDGConfig+0x4e2>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	689b      	ldr	r3, [r3, #8]
 8006f46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d108      	bne.n	8006f60 <HAL_ADC_AnalogWDGConfig+0x3a8>
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	0e9b      	lsrs	r3, r3, #26
 8006f54:	f003 031f 	and.w	r3, r3, #31
 8006f58:	2201      	movs	r2, #1
 8006f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f5e:	e016      	b.n	8006f8e <HAL_ADC_AnalogWDGConfig+0x3d6>
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f68:	fa93 f3a3 	rbit	r3, r3
 8006f6c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8006f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8006f72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d101      	bne.n	8006f7c <HAL_ADC_AnalogWDGConfig+0x3c4>
    return 32U;
 8006f78:	2320      	movs	r3, #32
 8006f7a:	e003      	b.n	8006f84 <HAL_ADC_AnalogWDGConfig+0x3cc>
  return __builtin_clz(value);
 8006f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f7e:	fab3 f383 	clz	r3, r3
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	f003 031f 	and.w	r3, r3, #31
 8006f88:	2201      	movs	r2, #1
 8006f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	6812      	ldr	r2, [r2, #0]
 8006f92:	f8d2 10a4 	ldr.w	r1, [r2, #164]	@ 0xa4
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	6812      	ldr	r2, [r2, #0]
 8006f9a:	430b      	orrs	r3, r1
 8006f9c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
          break;
 8006fa0:	e07b      	b.n	800709a <HAL_ADC_AnalogWDGConfig+0x4e2>
        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:

#if defined(ADC_VER_V5_V90)
          if (hadc->Instance == ADC3)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a6b      	ldr	r2, [pc, #428]	@ (8007154 <HAL_ADC_AnalogWDGConfig+0x59c>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d108      	bne.n	8006fbe <HAL_ADC_AnalogWDGConfig+0x406>
          {

            LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6818      	ldr	r0, [r3, #0]
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a68      	ldr	r2, [pc, #416]	@ (8007158 <HAL_ADC_AnalogWDGConfig+0x5a0>)
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	f7fe f998 	bl	80052ec <LL_ADC_SetAnalogWDMonitChannels>
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
            }
#if defined(ADC_VER_V5_V90)
          }
#endif  /*ADC_VER_V5_V90*/
          break;
 8006fbc:	e06d      	b.n	800709a <HAL_ADC_AnalogWDGConfig+0x4e2>
            if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a63      	ldr	r2, [pc, #396]	@ (8007150 <HAL_ADC_AnalogWDGConfig+0x598>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d12f      	bne.n	8007028 <HAL_ADC_AnalogWDGConfig+0x470>
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d108      	bne.n	8006fe6 <HAL_ADC_AnalogWDGConfig+0x42e>
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	0e9b      	lsrs	r3, r3, #26
 8006fda:	f003 031f 	and.w	r3, r3, #31
 8006fde:	2201      	movs	r2, #1
 8006fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe4:	e016      	b.n	8007014 <HAL_ADC_AnalogWDGConfig+0x45c>
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	fa93 f3a3 	rbit	r3, r3
 8006ff2:	61bb      	str	r3, [r7, #24]
  return result;
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006ff8:	6a3b      	ldr	r3, [r7, #32]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d101      	bne.n	8007002 <HAL_ADC_AnalogWDGConfig+0x44a>
    return 32U;
 8006ffe:	2320      	movs	r3, #32
 8007000:	e003      	b.n	800700a <HAL_ADC_AnalogWDGConfig+0x452>
  return __builtin_clz(value);
 8007002:	6a3b      	ldr	r3, [r7, #32]
 8007004:	fab3 f383 	clz	r3, r3
 8007008:	b2db      	uxtb	r3, r3
 800700a:	f003 031f 	and.w	r3, r3, #31
 800700e:	2201      	movs	r2, #1
 8007010:	fa02 f303 	lsl.w	r3, r2, r3
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	6812      	ldr	r2, [r2, #0]
 8007018:	f8d2 10a0 	ldr.w	r1, [r2, #160]	@ 0xa0
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	6812      	ldr	r2, [r2, #0]
 8007020:	430b      	orrs	r3, r1
 8007022:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
          break;
 8007026:	e038      	b.n	800709a <HAL_ADC_AnalogWDGConfig+0x4e2>
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007030:	2b00      	cmp	r3, #0
 8007032:	d108      	bne.n	8007046 <HAL_ADC_AnalogWDGConfig+0x48e>
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	0e9b      	lsrs	r3, r3, #26
 800703a:	f003 031f 	and.w	r3, r3, #31
 800703e:	2201      	movs	r2, #1
 8007040:	fa02 f303 	lsl.w	r3, r2, r3
 8007044:	e016      	b.n	8007074 <HAL_ADC_AnalogWDGConfig+0x4bc>
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	fa93 f3a3 	rbit	r3, r3
 8007052:	60fb      	str	r3, [r7, #12]
  return result;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d101      	bne.n	8007062 <HAL_ADC_AnalogWDGConfig+0x4aa>
    return 32U;
 800705e:	2320      	movs	r3, #32
 8007060:	e003      	b.n	800706a <HAL_ADC_AnalogWDGConfig+0x4b2>
  return __builtin_clz(value);
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	fab3 f383 	clz	r3, r3
 8007068:	b2db      	uxtb	r3, r3
 800706a:	f003 031f 	and.w	r3, r3, #31
 800706e:	2201      	movs	r2, #1
 8007070:	fa02 f303 	lsl.w	r3, r2, r3
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	6812      	ldr	r2, [r2, #0]
 8007078:	f8d2 10a4 	ldr.w	r1, [r2, #164]	@ 0xa4
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	6812      	ldr	r2, [r2, #0]
 8007080:	430b      	orrs	r3, r1
 8007082:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
          break;
 8007086:	e008      	b.n	800709a <HAL_ADC_AnalogWDGConfig+0x4e2>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6818      	ldr	r0, [r3, #0]
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2200      	movs	r2, #0
 8007092:	4619      	mov	r1, r3
 8007094:	f7fe f92a 	bl	80052ec <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8007098:	bf00      	nop
      }

      /* Shift the thresholds in function of the selected ADC resolution      */
      /* have to be left-aligned on bit 15, the LSB (right bits) are set to 0 */
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	f003 0310 	and.w	r3, r3, #16
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d10b      	bne.n	80070c0 <HAL_ADC_AnalogWDGConfig+0x508>
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	691a      	ldr	r2, [r3, #16]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	089b      	lsrs	r3, r3, #2
 80070b4:	f003 0307 	and.w	r3, r3, #7
 80070b8:	005b      	lsls	r3, r3, #1
 80070ba:	fa02 f303 	lsl.w	r3, r2, r3
 80070be:	e00a      	b.n	80070d6 <HAL_ADC_AnalogWDGConfig+0x51e>
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	691a      	ldr	r2, [r3, #16]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	089b      	lsrs	r3, r3, #2
 80070cc:	f003 0304 	and.w	r3, r3, #4
 80070d0:	005b      	lsls	r3, r3, #1
 80070d2:	fa02 f303 	lsl.w	r3, r2, r3
 80070d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	f003 0310 	and.w	r3, r3, #16
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d10b      	bne.n	80070fe <HAL_ADC_AnalogWDGConfig+0x546>
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	695a      	ldr	r2, [r3, #20]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	089b      	lsrs	r3, r3, #2
 80070f2:	f003 0307 	and.w	r3, r3, #7
 80070f6:	005b      	lsls	r3, r3, #1
 80070f8:	fa02 f303 	lsl.w	r3, r2, r3
 80070fc:	e00a      	b.n	8007114 <HAL_ADC_AnalogWDGConfig+0x55c>
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	695a      	ldr	r2, [r3, #20]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	089b      	lsrs	r3, r3, #2
 800710a:	f003 0304 	and.w	r3, r3, #4
 800710e:	005b      	lsls	r3, r3, #1
 8007110:	fa02 f303 	lsl.w	r3, r2, r3
 8007114:	647b      	str	r3, [r7, #68]	@ 0x44

#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a0e      	ldr	r2, [pc, #56]	@ (8007154 <HAL_ADC_AnalogWDGConfig+0x59c>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d153      	bne.n	80071c8 <HAL_ADC_AnalogWDGConfig+0x610>
      {

        /* Analog watchdog thresholds configuration */
        if (AnalogWDGConfig->WatchdogNumber != ADC_ANALOGWATCHDOG_1)
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a0d      	ldr	r2, [pc, #52]	@ (800715c <HAL_ADC_AnalogWDGConfig+0x5a4>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d045      	beq.n	80071b6 <HAL_ADC_AnalogWDGConfig+0x5fe>
        {
          /* Shift the offset with respect to the selected ADC resolution:        */
          /* Thresholds have to be left-aligned on bit 7, the LSB (right bits)    */
          /* are set to 0.                                                        */
          tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	f003 0310 	and.w	r3, r3, #16
 8007134:	2b00      	cmp	r3, #0
 8007136:	d113      	bne.n	8007160 <HAL_ADC_AnalogWDGConfig+0x5a8>
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	691a      	ldr	r2, [r3, #16]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68db      	ldr	r3, [r3, #12]
 8007142:	089b      	lsrs	r3, r3, #2
 8007144:	f003 0307 	and.w	r3, r3, #7
 8007148:	005b      	lsls	r3, r3, #1
 800714a:	fa02 f303 	lsl.w	r3, r2, r3
 800714e:	e012      	b.n	8007176 <HAL_ADC_AnalogWDGConfig+0x5be>
 8007150:	001fffff 	.word	0x001fffff
 8007154:	58026000 	.word	0x58026000
 8007158:	018fffff 	.word	0x018fffff
 800715c:	7dc00000 	.word	0x7dc00000
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	691a      	ldr	r2, [r3, #16]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	089b      	lsrs	r3, r3, #2
 800716c:	f003 0304 	and.w	r3, r3, #4
 8007170:	005b      	lsls	r3, r3, #1
 8007172:	fa02 f303 	lsl.w	r3, r2, r3
 8007176:	64bb      	str	r3, [r7, #72]	@ 0x48
          tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	f003 0310 	and.w	r3, r3, #16
 8007182:	2b00      	cmp	r3, #0
 8007184:	d10b      	bne.n	800719e <HAL_ADC_AnalogWDGConfig+0x5e6>
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	695a      	ldr	r2, [r3, #20]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	089b      	lsrs	r3, r3, #2
 8007192:	f003 0307 	and.w	r3, r3, #7
 8007196:	005b      	lsls	r3, r3, #1
 8007198:	fa02 f303 	lsl.w	r3, r2, r3
 800719c:	e00a      	b.n	80071b4 <HAL_ADC_AnalogWDGConfig+0x5fc>
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	695a      	ldr	r2, [r3, #20]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	089b      	lsrs	r3, r3, #2
 80071aa:	f003 0304 	and.w	r3, r3, #4
 80071ae:	005b      	lsls	r3, r3, #1
 80071b0:	fa02 f303 	lsl.w	r3, r2, r3
 80071b4:	647b      	str	r3, [r7, #68]	@ 0x44
        }

        /* Set ADC analog watchdog thresholds value of both thresholds high and low */
        LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted, tmpAWDLowThresholdShifted);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6818      	ldr	r0, [r3, #0]
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	6819      	ldr	r1, [r3, #0]
 80071be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80071c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80071c2:	f7fe f8c1 	bl	8005348 <LL_ADC_ConfigAnalogWDThresholds>
 80071c6:	e035      	b.n	8007234 <HAL_ADC_AnalogWDGConfig+0x67c>

      }
      else
      {

        if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a40      	ldr	r2, [pc, #256]	@ (80072d0 <HAL_ADC_AnalogWDGConfig+0x718>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d118      	bne.n	8007204 <HAL_ADC_AnalogWDGConfig+0x64c>
        {
          /* Set ADC analog watchdog thresholds value of both thresholds high and low */
          MODIFY_REG(hadc->Instance->LTR2_DIFSEL,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80071da:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80071e4:	430a      	orrs	r2, r1
 80071e6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
          MODIFY_REG(hadc->Instance->HTR2_CALFACT,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80071f2:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80071fc:	430a      	orrs	r2, r1
 80071fe:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
 8007202:	e017      	b.n	8007234 <HAL_ADC_AnalogWDGConfig+0x67c>
        }
        else
        {
          /* Set ADC analog watchdog thresholds value of both thresholds high and low */
          MODIFY_REG(hadc->Instance->LTR3_RES10,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800720c:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007216:	430a      	orrs	r2, r1
 8007218:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
          MODIFY_REG(hadc->Instance->HTR3_RES11,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007224:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800722e:	430a      	orrs	r2, r1
 8007230:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        MODIFY_REG(hadc->Instance->LTR3,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
        MODIFY_REG(hadc->Instance->HTR3,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
      }

#endif
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a25      	ldr	r2, [pc, #148]	@ (80072d0 <HAL_ADC_AnalogWDGConfig+0x718>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d11a      	bne.n	8007274 <HAL_ADC_AnalogWDGConfig+0x6bc>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007242:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4618      	mov	r0, r3
 8007250:	f7fe f9d7 	bl	8005602 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	7b1b      	ldrb	r3, [r3, #12]
 8007258:	2b01      	cmp	r3, #1
 800725a:	d105      	bne.n	8007268 <HAL_ADC_AnalogWDGConfig+0x6b0>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4618      	mov	r0, r3
 8007262:	f7fe f9fa 	bl	800565a <LL_ADC_EnableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8007266:	e029      	b.n	80072bc <HAL_ADC_AnalogWDGConfig+0x704>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4618      	mov	r0, r3
 800726e:	f7fe fa24 	bl	80056ba <LL_ADC_DisableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8007272:	e023      	b.n	80072bc <HAL_ADC_AnalogWDGConfig+0x704>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007278:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4618      	mov	r0, r3
 8007286:	f7fe f9ca 	bl	800561e <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	7b1b      	ldrb	r3, [r3, #12]
 800728e:	2b01      	cmp	r3, #1
 8007290:	d105      	bne.n	800729e <HAL_ADC_AnalogWDGConfig+0x6e6>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4618      	mov	r0, r3
 8007298:	f7fe f9ef 	bl	800567a <LL_ADC_EnableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800729c:	e00e      	b.n	80072bc <HAL_ADC_AnalogWDGConfig+0x704>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7fe fa19 	bl	80056da <LL_ADC_DisableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80072a8:	e008      	b.n	80072bc <HAL_ADC_AnalogWDGConfig+0x704>
  /* If a conversion is on going on ADC group regular or injected, no update  */
  /* could be done on neither of the AWD configuration structure parameters.  */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072ae:	f043 0220 	orr.w	r2, r3, #32
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80072c4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3750      	adds	r7, #80	@ 0x50
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	001fffff 	.word	0x001fffff

080072d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4618      	mov	r0, r3
 80072e2:	f7fe f921 	bl	8005528 <LL_ADC_IsEnabled>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d16e      	bne.n	80073ca <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	689a      	ldr	r2, [r3, #8]
 80072f2:	4b38      	ldr	r3, [pc, #224]	@ (80073d4 <ADC_Enable+0x100>)
 80072f4:	4013      	ands	r3, r2
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d00d      	beq.n	8007316 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072fe:	f043 0210 	orr.w	r2, r3, #16
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800730a:	f043 0201 	orr.w	r2, r3, #1
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	e05a      	b.n	80073cc <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4618      	mov	r0, r3
 800731c:	f7fe f8dc 	bl	80054d8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007320:	f7fd fd6a 	bl	8004df8 <HAL_GetTick>
 8007324:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a2b      	ldr	r2, [pc, #172]	@ (80073d8 <ADC_Enable+0x104>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d004      	beq.n	800733a <ADC_Enable+0x66>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a29      	ldr	r2, [pc, #164]	@ (80073dc <ADC_Enable+0x108>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d101      	bne.n	800733e <ADC_Enable+0x6a>
 800733a:	4b29      	ldr	r3, [pc, #164]	@ (80073e0 <ADC_Enable+0x10c>)
 800733c:	e000      	b.n	8007340 <ADC_Enable+0x6c>
 800733e:	4b29      	ldr	r3, [pc, #164]	@ (80073e4 <ADC_Enable+0x110>)
 8007340:	4618      	mov	r0, r3
 8007342:	f7fe f85f 	bl	8005404 <LL_ADC_GetMultimode>
 8007346:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a23      	ldr	r2, [pc, #140]	@ (80073dc <ADC_Enable+0x108>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d002      	beq.n	8007358 <ADC_Enable+0x84>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	e000      	b.n	800735a <ADC_Enable+0x86>
 8007358:	4b1f      	ldr	r3, [pc, #124]	@ (80073d8 <ADC_Enable+0x104>)
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	6812      	ldr	r2, [r2, #0]
 800735e:	4293      	cmp	r3, r2
 8007360:	d02c      	beq.n	80073bc <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d130      	bne.n	80073ca <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007368:	e028      	b.n	80073bc <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4618      	mov	r0, r3
 8007370:	f7fe f8da 	bl	8005528 <LL_ADC_IsEnabled>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d104      	bne.n	8007384 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4618      	mov	r0, r3
 8007380:	f7fe f8aa 	bl	80054d8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007384:	f7fd fd38 	bl	8004df8 <HAL_GetTick>
 8007388:	4602      	mov	r2, r0
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	1ad3      	subs	r3, r2, r3
 800738e:	2b02      	cmp	r3, #2
 8007390:	d914      	bls.n	80073bc <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 0301 	and.w	r3, r3, #1
 800739c:	2b01      	cmp	r3, #1
 800739e:	d00d      	beq.n	80073bc <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073a4:	f043 0210 	orr.w	r2, r3, #16
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073b0:	f043 0201 	orr.w	r2, r3, #1
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	e007      	b.n	80073cc <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 0301 	and.w	r3, r3, #1
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d1cf      	bne.n	800736a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80073ca:	2300      	movs	r3, #0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3710      	adds	r7, #16
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	8000003f 	.word	0x8000003f
 80073d8:	40022000 	.word	0x40022000
 80073dc:	40022100 	.word	0x40022100
 80073e0:	40022300 	.word	0x40022300
 80073e4:	58026300 	.word	0x58026300

080073e8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7fe f8aa 	bl	800554e <LL_ADC_IsDisableOngoing>
 80073fa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4618      	mov	r0, r3
 8007402:	f7fe f891 	bl	8005528 <LL_ADC_IsEnabled>
 8007406:	4603      	mov	r3, r0
 8007408:	2b00      	cmp	r3, #0
 800740a:	d047      	beq.n	800749c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d144      	bne.n	800749c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	f003 030d 	and.w	r3, r3, #13
 800741c:	2b01      	cmp	r3, #1
 800741e:	d10c      	bne.n	800743a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4618      	mov	r0, r3
 8007426:	f7fe f86b 	bl	8005500 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2203      	movs	r2, #3
 8007430:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007432:	f7fd fce1 	bl	8004df8 <HAL_GetTick>
 8007436:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007438:	e029      	b.n	800748e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800743e:	f043 0210 	orr.w	r2, r3, #16
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800744a:	f043 0201 	orr.w	r2, r3, #1
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	e023      	b.n	800749e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007456:	f7fd fccf 	bl	8004df8 <HAL_GetTick>
 800745a:	4602      	mov	r2, r0
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	1ad3      	subs	r3, r2, r3
 8007460:	2b02      	cmp	r3, #2
 8007462:	d914      	bls.n	800748e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	f003 0301 	and.w	r3, r3, #1
 800746e:	2b00      	cmp	r3, #0
 8007470:	d00d      	beq.n	800748e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007476:	f043 0210 	orr.w	r2, r3, #16
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007482:	f043 0201 	orr.w	r2, r3, #1
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e007      	b.n	800749e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	f003 0301 	and.w	r3, r3, #1
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1dc      	bne.n	8007456 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3710      	adds	r7, #16
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b084      	sub	sp, #16
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074b2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d14b      	bne.n	8007558 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074c4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f003 0308 	and.w	r3, r3, #8
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d021      	beq.n	800751e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4618      	mov	r0, r3
 80074e0:	f7fd fe0a 	bl	80050f8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d032      	beq.n	8007550 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d12b      	bne.n	8007550 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007508:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800750c:	2b00      	cmp	r3, #0
 800750e:	d11f      	bne.n	8007550 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007514:	f043 0201 	orr.w	r2, r3, #1
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	661a      	str	r2, [r3, #96]	@ 0x60
 800751c:	e018      	b.n	8007550 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	f003 0303 	and.w	r3, r3, #3
 8007528:	2b00      	cmp	r3, #0
 800752a:	d111      	bne.n	8007550 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007530:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800753c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007540:	2b00      	cmp	r3, #0
 8007542:	d105      	bne.n	8007550 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007548:	f043 0201 	orr.w	r2, r3, #1
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f7fa fceb 	bl	8001f2c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007556:	e00e      	b.n	8007576 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800755c:	f003 0310 	and.w	r3, r3, #16
 8007560:	2b00      	cmp	r3, #0
 8007562:	d003      	beq.n	800756c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	f7fa fcb5 	bl	8001ed4 <HAL_ADC_ErrorCallback>
}
 800756a:	e004      	b.n	8007576 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	4798      	blx	r3
}
 8007576:	bf00      	nop
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}

0800757e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b084      	sub	sp, #16
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800758a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800758c:	68f8      	ldr	r0, [r7, #12]
 800758e:	f7fe fdd3 	bl	8006138 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007592:	bf00      	nop
 8007594:	3710      	adds	r7, #16
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}

0800759a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800759a:	b580      	push	{r7, lr}
 800759c:	b084      	sub	sp, #16
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075a6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80075ac:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80075b8:	f043 0204 	orr.w	r2, r3, #4
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80075c0:	68f8      	ldr	r0, [r7, #12]
 80075c2:	f7fa fc87 	bl	8001ed4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80075c6:	bf00      	nop
 80075c8:	3710      	adds	r7, #16
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
	...

080075d0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a6c      	ldr	r2, [pc, #432]	@ (8007790 <ADC_ConfigureBoostMode+0x1c0>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d004      	beq.n	80075ec <ADC_ConfigureBoostMode+0x1c>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a6b      	ldr	r2, [pc, #428]	@ (8007794 <ADC_ConfigureBoostMode+0x1c4>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d109      	bne.n	8007600 <ADC_ConfigureBoostMode+0x30>
 80075ec:	4b6a      	ldr	r3, [pc, #424]	@ (8007798 <ADC_ConfigureBoostMode+0x1c8>)
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	bf14      	ite	ne
 80075f8:	2301      	movne	r3, #1
 80075fa:	2300      	moveq	r3, #0
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	e008      	b.n	8007612 <ADC_ConfigureBoostMode+0x42>
 8007600:	4b66      	ldr	r3, [pc, #408]	@ (800779c <ADC_ConfigureBoostMode+0x1cc>)
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007608:	2b00      	cmp	r3, #0
 800760a:	bf14      	ite	ne
 800760c:	2301      	movne	r3, #1
 800760e:	2300      	moveq	r3, #0
 8007610:	b2db      	uxtb	r3, r3
 8007612:	2b00      	cmp	r3, #0
 8007614:	d01c      	beq.n	8007650 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8007616:	f004 fda9 	bl	800c16c <HAL_RCC_GetHCLKFreq>
 800761a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007624:	d010      	beq.n	8007648 <ADC_ConfigureBoostMode+0x78>
 8007626:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800762a:	d873      	bhi.n	8007714 <ADC_ConfigureBoostMode+0x144>
 800762c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007630:	d002      	beq.n	8007638 <ADC_ConfigureBoostMode+0x68>
 8007632:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007636:	d16d      	bne.n	8007714 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	0c1b      	lsrs	r3, r3, #16
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	fbb2 f3f3 	udiv	r3, r2, r3
 8007644:	60fb      	str	r3, [r7, #12]
        break;
 8007646:	e068      	b.n	800771a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	089b      	lsrs	r3, r3, #2
 800764c:	60fb      	str	r3, [r7, #12]
        break;
 800764e:	e064      	b.n	800771a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8007650:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8007654:	f04f 0100 	mov.w	r1, #0
 8007658:	f005 ff84 	bl	800d564 <HAL_RCCEx_GetPeriphCLKFreq>
 800765c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8007666:	d051      	beq.n	800770c <ADC_ConfigureBoostMode+0x13c>
 8007668:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800766c:	d854      	bhi.n	8007718 <ADC_ConfigureBoostMode+0x148>
 800766e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8007672:	d047      	beq.n	8007704 <ADC_ConfigureBoostMode+0x134>
 8007674:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8007678:	d84e      	bhi.n	8007718 <ADC_ConfigureBoostMode+0x148>
 800767a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800767e:	d03d      	beq.n	80076fc <ADC_ConfigureBoostMode+0x12c>
 8007680:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8007684:	d848      	bhi.n	8007718 <ADC_ConfigureBoostMode+0x148>
 8007686:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800768a:	d033      	beq.n	80076f4 <ADC_ConfigureBoostMode+0x124>
 800768c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007690:	d842      	bhi.n	8007718 <ADC_ConfigureBoostMode+0x148>
 8007692:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8007696:	d029      	beq.n	80076ec <ADC_ConfigureBoostMode+0x11c>
 8007698:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800769c:	d83c      	bhi.n	8007718 <ADC_ConfigureBoostMode+0x148>
 800769e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80076a2:	d01a      	beq.n	80076da <ADC_ConfigureBoostMode+0x10a>
 80076a4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80076a8:	d836      	bhi.n	8007718 <ADC_ConfigureBoostMode+0x148>
 80076aa:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80076ae:	d014      	beq.n	80076da <ADC_ConfigureBoostMode+0x10a>
 80076b0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80076b4:	d830      	bhi.n	8007718 <ADC_ConfigureBoostMode+0x148>
 80076b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076ba:	d00e      	beq.n	80076da <ADC_ConfigureBoostMode+0x10a>
 80076bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076c0:	d82a      	bhi.n	8007718 <ADC_ConfigureBoostMode+0x148>
 80076c2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80076c6:	d008      	beq.n	80076da <ADC_ConfigureBoostMode+0x10a>
 80076c8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80076cc:	d824      	bhi.n	8007718 <ADC_ConfigureBoostMode+0x148>
 80076ce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80076d2:	d002      	beq.n	80076da <ADC_ConfigureBoostMode+0x10a>
 80076d4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80076d8:	d11e      	bne.n	8007718 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	0c9b      	lsrs	r3, r3, #18
 80076e0:	005b      	lsls	r3, r3, #1
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80076e8:	60fb      	str	r3, [r7, #12]
        break;
 80076ea:	e016      	b.n	800771a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	091b      	lsrs	r3, r3, #4
 80076f0:	60fb      	str	r3, [r7, #12]
        break;
 80076f2:	e012      	b.n	800771a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	095b      	lsrs	r3, r3, #5
 80076f8:	60fb      	str	r3, [r7, #12]
        break;
 80076fa:	e00e      	b.n	800771a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	099b      	lsrs	r3, r3, #6
 8007700:	60fb      	str	r3, [r7, #12]
        break;
 8007702:	e00a      	b.n	800771a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	09db      	lsrs	r3, r3, #7
 8007708:	60fb      	str	r3, [r7, #12]
        break;
 800770a:	e006      	b.n	800771a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	0a1b      	lsrs	r3, r3, #8
 8007710:	60fb      	str	r3, [r7, #12]
        break;
 8007712:	e002      	b.n	800771a <ADC_ConfigureBoostMode+0x14a>
        break;
 8007714:	bf00      	nop
 8007716:	e000      	b.n	800771a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8007718:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	085b      	lsrs	r3, r3, #1
 800771e:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	4a1f      	ldr	r2, [pc, #124]	@ (80077a0 <ADC_ConfigureBoostMode+0x1d0>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d808      	bhi.n	800773a <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	689a      	ldr	r2, [r3, #8]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007736:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8007738:	e025      	b.n	8007786 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	4a19      	ldr	r2, [pc, #100]	@ (80077a4 <ADC_ConfigureBoostMode+0x1d4>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d80a      	bhi.n	8007758 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007754:	609a      	str	r2, [r3, #8]
}
 8007756:	e016      	b.n	8007786 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	4a13      	ldr	r2, [pc, #76]	@ (80077a8 <ADC_ConfigureBoostMode+0x1d8>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d80a      	bhi.n	8007776 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007772:	609a      	str	r2, [r3, #8]
}
 8007774:	e007      	b.n	8007786 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	689a      	ldr	r2, [r3, #8]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8007784:	609a      	str	r2, [r3, #8]
}
 8007786:	bf00      	nop
 8007788:	3710      	adds	r7, #16
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	40022000 	.word	0x40022000
 8007794:	40022100 	.word	0x40022100
 8007798:	40022300 	.word	0x40022300
 800779c:	58026300 	.word	0x58026300
 80077a0:	005f5e10 	.word	0x005f5e10
 80077a4:	00bebc20 	.word	0x00bebc20
 80077a8:	017d7840 	.word	0x017d7840

080077ac <LL_ADC_IsEnabled>:
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	f003 0301 	and.w	r3, r3, #1
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d101      	bne.n	80077c4 <LL_ADC_IsEnabled+0x18>
 80077c0:	2301      	movs	r3, #1
 80077c2:	e000      	b.n	80077c6 <LL_ADC_IsEnabled+0x1a>
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	370c      	adds	r7, #12
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr
	...

080077d4 <LL_ADC_StartCalibration>:
{
 80077d4:	b480      	push	{r7}
 80077d6:	b085      	sub	sp, #20
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	689a      	ldr	r2, [r3, #8]
 80077e4:	4b09      	ldr	r3, [pc, #36]	@ (800780c <LL_ADC_StartCalibration+0x38>)
 80077e6:	4013      	ands	r3, r2
 80077e8:	68ba      	ldr	r2, [r7, #8]
 80077ea:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80077f4:	430a      	orrs	r2, r1
 80077f6:	4313      	orrs	r3, r2
 80077f8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	609a      	str	r2, [r3, #8]
}
 8007800:	bf00      	nop
 8007802:	3714      	adds	r7, #20
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr
 800780c:	3ffeffc0 	.word	0x3ffeffc0

08007810 <LL_ADC_IsCalibrationOnGoing>:
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007820:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007824:	d101      	bne.n	800782a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8007826:	2301      	movs	r3, #1
 8007828:	e000      	b.n	800782c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800782a:	2300      	movs	r3, #0
}
 800782c:	4618      	mov	r0, r3
 800782e:	370c      	adds	r7, #12
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <LL_ADC_REG_StartConversion>:
{
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	689a      	ldr	r2, [r3, #8]
 8007844:	4b05      	ldr	r3, [pc, #20]	@ (800785c <LL_ADC_REG_StartConversion+0x24>)
 8007846:	4013      	ands	r3, r2
 8007848:	f043 0204 	orr.w	r2, r3, #4
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	609a      	str	r2, [r3, #8]
}
 8007850:	bf00      	nop
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr
 800785c:	7fffffc0 	.word	0x7fffffc0

08007860 <LL_ADC_REG_IsConversionOngoing>:
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	f003 0304 	and.w	r3, r3, #4
 8007870:	2b04      	cmp	r3, #4
 8007872:	d101      	bne.n	8007878 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007874:	2301      	movs	r3, #1
 8007876:	e000      	b.n	800787a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007878:	2300      	movs	r3, #0
}
 800787a:	4618      	mov	r0, r3
 800787c:	370c      	adds	r7, #12
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr
	...

08007888 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b086      	sub	sp, #24
 800788c:	af00      	add	r7, sp, #0
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	60b9      	str	r1, [r7, #8]
 8007892:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8007894:	2300      	movs	r3, #0
 8007896:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d101      	bne.n	80078a6 <HAL_ADCEx_Calibration_Start+0x1e>
 80078a2:	2302      	movs	r3, #2
 80078a4:	e04c      	b.n	8007940 <HAL_ADCEx_Calibration_Start+0xb8>
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2201      	movs	r2, #1
 80078aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80078ae:	68f8      	ldr	r0, [r7, #12]
 80078b0:	f7ff fd9a 	bl	80073e8 <ADC_Disable>
 80078b4:	4603      	mov	r3, r0
 80078b6:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80078b8:	7dfb      	ldrb	r3, [r7, #23]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d135      	bne.n	800792a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80078c2:	4b21      	ldr	r3, [pc, #132]	@ (8007948 <HAL_ADCEx_Calibration_Start+0xc0>)
 80078c4:	4013      	ands	r3, r2
 80078c6:	f043 0202 	orr.w	r2, r3, #2
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	661a      	str	r2, [r3, #96]	@ 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	68b9      	ldr	r1, [r7, #8]
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7ff ff7c 	bl	80077d4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80078dc:	e014      	b.n	8007908 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	3301      	adds	r3, #1
 80078e2:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	4a19      	ldr	r2, [pc, #100]	@ (800794c <HAL_ADCEx_Calibration_Start+0xc4>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d30d      	bcc.n	8007908 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078f0:	f023 0312 	bic.w	r3, r3, #18
 80078f4:	f043 0210 	orr.w	r2, r3, #16
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8007904:	2301      	movs	r3, #1
 8007906:	e01b      	b.n	8007940 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4618      	mov	r0, r3
 800790e:	f7ff ff7f 	bl	8007810 <LL_ADC_IsCalibrationOnGoing>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1e2      	bne.n	80078de <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800791c:	f023 0303 	bic.w	r3, r3, #3
 8007920:	f043 0201 	orr.w	r2, r3, #1
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	661a      	str	r2, [r3, #96]	@ 0x60
 8007928:	e005      	b.n	8007936 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800792e:	f043 0210 	orr.w	r2, r3, #16
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2200      	movs	r2, #0
 800793a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800793e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007940:	4618      	mov	r0, r3
 8007942:	3718      	adds	r7, #24
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}
 8007948:	ffffeefd 	.word	0xffffeefd
 800794c:	25c3f800 	.word	0x25c3f800

08007950 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b0a2      	sub	sp, #136	@ 0x88
 8007954:	af00      	add	r7, sp, #0
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	60b9      	str	r1, [r7, #8]
 800795a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4618      	mov	r0, r3
 8007962:	f7ff ff7d 	bl	8007860 <LL_ADC_REG_IsConversionOngoing>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d001      	beq.n	8007970 <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 800796c:	2302      	movs	r3, #2
 800796e:	e08c      	b.n	8007a8a <HAL_ADCEx_MultiModeStart_DMA+0x13a>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007976:	2b01      	cmp	r3, #1
 8007978:	d101      	bne.n	800797e <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 800797a:	2302      	movs	r3, #2
 800797c:	e085      	b.n	8007a8a <HAL_ADCEx_MultiModeStart_DMA+0x13a>
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2201      	movs	r2, #1
 8007982:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8007986:	2300      	movs	r3, #0
 8007988:	673b      	str	r3, [r7, #112]	@ 0x70
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800798a:	2300      	movs	r3, #0
 800798c:	677b      	str	r3, [r7, #116]	@ 0x74
    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a40      	ldr	r2, [pc, #256]	@ (8007a94 <HAL_ADCEx_MultiModeStart_DMA+0x144>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d102      	bne.n	800799e <HAL_ADCEx_MultiModeStart_DMA+0x4e>
 8007998:	4b3f      	ldr	r3, [pc, #252]	@ (8007a98 <HAL_ADCEx_MultiModeStart_DMA+0x148>)
 800799a:	613b      	str	r3, [r7, #16]
 800799c:	e001      	b.n	80079a2 <HAL_ADCEx_MultiModeStart_DMA+0x52>
 800799e:	2300      	movs	r3, #0
 80079a0:	613b      	str	r3, [r7, #16]

    if (tmphadcSlave.Instance == NULL)
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d10b      	bne.n	80079c0 <HAL_ADCEx_MultiModeStart_DMA+0x70>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80079ac:	f043 0220 	orr.w	r2, r3, #32
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	e064      	b.n	8007a8a <HAL_ADCEx_MultiModeStart_DMA+0x13a>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 80079c0:	68f8      	ldr	r0, [r7, #12]
 80079c2:	f7ff fc87 	bl	80072d4 <ADC_Enable>
 80079c6:	4603      	mov	r3, r0
 80079c8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    if (tmp_hal_status == HAL_OK)
 80079cc:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d107      	bne.n	80079e4 <HAL_ADCEx_MultiModeStart_DMA+0x94>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 80079d4:	f107 0310 	add.w	r3, r7, #16
 80079d8:	4618      	mov	r0, r3
 80079da:	f7ff fc7b 	bl	80072d4 <ADC_Enable>
 80079de:	4603      	mov	r3, r0
 80079e0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 80079e4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d148      	bne.n	8007a7e <HAL_ADCEx_MultiModeStart_DMA+0x12e>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80079f0:	4b2a      	ldr	r3, [pc, #168]	@ (8007a9c <HAL_ADCEx_MultiModeStart_DMA+0x14c>)
 80079f2:	4013      	ands	r3, r2
 80079f4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	661a      	str	r2, [r3, #96]	@ 0x60
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2200      	movs	r2, #0
 8007a00:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a06:	4a26      	ldr	r2, [pc, #152]	@ (8007aa0 <HAL_ADCEx_MultiModeStart_DMA+0x150>)
 8007a08:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a0e:	4a25      	ldr	r2, [pc, #148]	@ (8007aa4 <HAL_ADCEx_MultiModeStart_DMA+0x154>)
 8007a10:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a16:	4a24      	ldr	r2, [pc, #144]	@ (8007aa8 <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 8007a18:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a1d      	ldr	r2, [pc, #116]	@ (8007a94 <HAL_ADCEx_MultiModeStart_DMA+0x144>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d004      	beq.n	8007a2e <HAL_ADCEx_MultiModeStart_DMA+0xde>
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a1b      	ldr	r2, [pc, #108]	@ (8007a98 <HAL_ADCEx_MultiModeStart_DMA+0x148>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d101      	bne.n	8007a32 <HAL_ADCEx_MultiModeStart_DMA+0xe2>
 8007a2e:	4b1f      	ldr	r3, [pc, #124]	@ (8007aac <HAL_ADCEx_MultiModeStart_DMA+0x15c>)
 8007a30:	e000      	b.n	8007a34 <HAL_ADCEx_MultiModeStart_DMA+0xe4>
 8007a32:	4b1f      	ldr	r3, [pc, #124]	@ (8007ab0 <HAL_ADCEx_MultiModeStart_DMA+0x160>)
 8007a34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	221c      	movs	r2, #28
 8007a3e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	685a      	ldr	r2, [r3, #4]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f042 0210 	orr.w	r2, r2, #16
 8007a56:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8007a5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007a60:	330c      	adds	r3, #12
 8007a62:	4619      	mov	r1, r3
 8007a64:	68ba      	ldr	r2, [r7, #8]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f000 feca 	bl	8008800 <HAL_DMA_Start_IT>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7ff fede 	bl	8007838 <LL_ADC_REG_StartConversion>
 8007a7c:	e003      	b.n	8007a86 <HAL_ADCEx_MultiModeStart_DMA+0x136>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2200      	movs	r2, #0
 8007a82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    }

    /* Return function status */
    return tmp_hal_status;
 8007a86:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
  }
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3788      	adds	r7, #136	@ 0x88
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	bf00      	nop
 8007a94:	40022000 	.word	0x40022000
 8007a98:	40022100 	.word	0x40022100
 8007a9c:	fffff0fe 	.word	0xfffff0fe
 8007aa0:	080074a7 	.word	0x080074a7
 8007aa4:	0800757f 	.word	0x0800757f
 8007aa8:	0800759b 	.word	0x0800759b
 8007aac:	40022300 	.word	0x40022300
 8007ab0:	58026300 	.word	0x58026300

08007ab4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b083      	sub	sp, #12
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8007abc:	bf00      	nop
 8007abe:	370c      	adds	r7, #12
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8007ad0:	bf00      	nop
 8007ad2:	370c      	adds	r7, #12
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8007ae4:	bf00      	nop
 8007ae6:	370c      	adds	r7, #12
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8007af8:	bf00      	nop
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8007b18:	b590      	push	{r4, r7, lr}
 8007b1a:	b0a3      	sub	sp, #140	@ 0x8c
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007b22:	2300      	movs	r3, #0
 8007b24:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d101      	bne.n	8007b36 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8007b32:	2302      	movs	r3, #2
 8007b34:	e0c1      	b.n	8007cba <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8007b42:	2300      	movs	r3, #0
 8007b44:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a5e      	ldr	r2, [pc, #376]	@ (8007cc4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d102      	bne.n	8007b56 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007b50:	4b5d      	ldr	r3, [pc, #372]	@ (8007cc8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007b52:	60fb      	str	r3, [r7, #12]
 8007b54:	e001      	b.n	8007b5a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8007b56:	2300      	movs	r3, #0
 8007b58:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d10b      	bne.n	8007b78 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b64:	f043 0220 	orr.w	r2, r3, #32
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	e0a0      	b.n	8007cba <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f7ff fe70 	bl	8007860 <LL_ADC_REG_IsConversionOngoing>
 8007b80:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f7ff fe69 	bl	8007860 <LL_ADC_REG_IsConversionOngoing>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	f040 8081 	bne.w	8007c98 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8007b96:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d17c      	bne.n	8007c98 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a48      	ldr	r2, [pc, #288]	@ (8007cc4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d004      	beq.n	8007bb2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a46      	ldr	r2, [pc, #280]	@ (8007cc8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d101      	bne.n	8007bb6 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8007bb2:	4b46      	ldr	r3, [pc, #280]	@ (8007ccc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8007bb4:	e000      	b.n	8007bb8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8007bb6:	4b46      	ldr	r3, [pc, #280]	@ (8007cd0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8007bb8:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d039      	beq.n	8007c36 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8007bc2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	431a      	orrs	r2, r3
 8007bd0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007bd2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a3a      	ldr	r2, [pc, #232]	@ (8007cc4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d004      	beq.n	8007be8 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a39      	ldr	r2, [pc, #228]	@ (8007cc8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d10e      	bne.n	8007c06 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8007be8:	4836      	ldr	r0, [pc, #216]	@ (8007cc4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007bea:	f7ff fddf 	bl	80077ac <LL_ADC_IsEnabled>
 8007bee:	4604      	mov	r4, r0
 8007bf0:	4835      	ldr	r0, [pc, #212]	@ (8007cc8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007bf2:	f7ff fddb 	bl	80077ac <LL_ADC_IsEnabled>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	4323      	orrs	r3, r4
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	bf0c      	ite	eq
 8007bfe:	2301      	moveq	r3, #1
 8007c00:	2300      	movne	r3, #0
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	e008      	b.n	8007c18 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8007c06:	4833      	ldr	r0, [pc, #204]	@ (8007cd4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8007c08:	f7ff fdd0 	bl	80077ac <LL_ADC_IsEnabled>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	bf0c      	ite	eq
 8007c12:	2301      	moveq	r3, #1
 8007c14:	2300      	movne	r3, #0
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d047      	beq.n	8007cac <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007c1c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007c1e:	689a      	ldr	r2, [r3, #8]
 8007c20:	4b2d      	ldr	r3, [pc, #180]	@ (8007cd8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8007c22:	4013      	ands	r3, r2
 8007c24:	683a      	ldr	r2, [r7, #0]
 8007c26:	6811      	ldr	r1, [r2, #0]
 8007c28:	683a      	ldr	r2, [r7, #0]
 8007c2a:	6892      	ldr	r2, [r2, #8]
 8007c2c:	430a      	orrs	r2, r1
 8007c2e:	431a      	orrs	r2, r3
 8007c30:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007c32:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007c34:	e03a      	b.n	8007cac <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8007c36:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007c3e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007c40:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a1f      	ldr	r2, [pc, #124]	@ (8007cc4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d004      	beq.n	8007c56 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a1d      	ldr	r2, [pc, #116]	@ (8007cc8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d10e      	bne.n	8007c74 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8007c56:	481b      	ldr	r0, [pc, #108]	@ (8007cc4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007c58:	f7ff fda8 	bl	80077ac <LL_ADC_IsEnabled>
 8007c5c:	4604      	mov	r4, r0
 8007c5e:	481a      	ldr	r0, [pc, #104]	@ (8007cc8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007c60:	f7ff fda4 	bl	80077ac <LL_ADC_IsEnabled>
 8007c64:	4603      	mov	r3, r0
 8007c66:	4323      	orrs	r3, r4
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	bf0c      	ite	eq
 8007c6c:	2301      	moveq	r3, #1
 8007c6e:	2300      	movne	r3, #0
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	e008      	b.n	8007c86 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8007c74:	4817      	ldr	r0, [pc, #92]	@ (8007cd4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8007c76:	f7ff fd99 	bl	80077ac <LL_ADC_IsEnabled>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	bf0c      	ite	eq
 8007c80:	2301      	moveq	r3, #1
 8007c82:	2300      	movne	r3, #0
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d010      	beq.n	8007cac <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007c8a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007c8c:	689a      	ldr	r2, [r3, #8]
 8007c8e:	4b12      	ldr	r3, [pc, #72]	@ (8007cd8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8007c90:	4013      	ands	r3, r2
 8007c92:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007c94:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007c96:	e009      	b.n	8007cac <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c9c:	f043 0220 	orr.w	r2, r3, #32
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8007caa:	e000      	b.n	8007cae <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007cac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8007cb6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	378c      	adds	r7, #140	@ 0x8c
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd90      	pop	{r4, r7, pc}
 8007cc2:	bf00      	nop
 8007cc4:	40022000 	.word	0x40022000
 8007cc8:	40022100 	.word	0x40022100
 8007ccc:	40022300 	.word	0x40022300
 8007cd0:	58026300 	.word	0x58026300
 8007cd4:	58026000 	.word	0x58026000
 8007cd8:	fffff0e0 	.word	0xfffff0e0

08007cdc <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b088      	sub	sp, #32
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d102      	bne.n	8007cf8 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	77fb      	strb	r3, [r7, #31]
 8007cf6:	e10e      	b.n	8007f16 <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d06:	d102      	bne.n	8007d0e <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	77fb      	strb	r3, [r7, #31]
 8007d0c:	e103      	b.n	8007f16 <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d109      	bne.n	8007d2e <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f7fc fab9 	bl	80042a0 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f003 0304 	and.w	r3, r3, #4
 8007d38:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8007d42:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 8007d48:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 8007d4e:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 8007d54:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	4b6e      	ldr	r3, [pc, #440]	@ (8007f20 <HAL_COMP_Init+0x244>)
 8007d66:	4013      	ands	r3, r2
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	6812      	ldr	r2, [r2, #0]
 8007d6c:	6979      	ldr	r1, [r7, #20]
 8007d6e:	430b      	orrs	r3, r1
 8007d70:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	2b10      	cmp	r3, #16
 8007d78:	d108      	bne.n	8007d8c <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f042 0210 	orr.w	r2, r2, #16
 8007d88:	601a      	str	r2, [r3, #0]
 8007d8a:	e007      	b.n	8007d9c <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f022 0210 	bic.w	r2, r2, #16
 8007d9a:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f003 0304 	and.w	r3, r3, #4
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d016      	beq.n	8007dd8 <HAL_COMP_Init+0xfc>
 8007daa:	69bb      	ldr	r3, [r7, #24]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d013      	beq.n	8007dd8 <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007db0:	4b5c      	ldr	r3, [pc, #368]	@ (8007f24 <HAL_COMP_Init+0x248>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	099b      	lsrs	r3, r3, #6
 8007db6:	4a5c      	ldr	r2, [pc, #368]	@ (8007f28 <HAL_COMP_Init+0x24c>)
 8007db8:	fba2 2303 	umull	r2, r3, r2, r3
 8007dbc:	099b      	lsrs	r3, r3, #6
 8007dbe:	1c5a      	adds	r2, r3, #1
 8007dc0:	4613      	mov	r3, r2
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	4413      	add	r3, r2
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 8007dca:	e002      	b.n	8007dd2 <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	3b01      	subs	r3, #1
 8007dd0:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d1f9      	bne.n	8007dcc <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a53      	ldr	r2, [pc, #332]	@ (8007f2c <HAL_COMP_Init+0x250>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d102      	bne.n	8007de8 <HAL_COMP_Init+0x10c>
 8007de2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8007de6:	e001      	b.n	8007dec <HAL_COMP_Init+0x110>
 8007de8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8007dec:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6a1b      	ldr	r3, [r3, #32]
 8007df2:	f003 0303 	and.w	r3, r3, #3
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d06d      	beq.n	8007ed6 <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a1b      	ldr	r3, [r3, #32]
 8007dfe:	f003 0310 	and.w	r3, r3, #16
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d008      	beq.n	8007e18 <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 8007e06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	600b      	str	r3, [r1, #0]
 8007e16:	e008      	b.n	8007e2a <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 8007e18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	43db      	mvns	r3, r3
 8007e22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007e26:	4013      	ands	r3, r2
 8007e28:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a1b      	ldr	r3, [r3, #32]
 8007e2e:	f003 0320 	and.w	r3, r3, #32
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d008      	beq.n	8007e48 <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 8007e36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e3a:	685a      	ldr	r2, [r3, #4]
 8007e3c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	604b      	str	r3, [r1, #4]
 8007e46:	e008      	b.n	8007e5a <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 8007e48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e4c:	685a      	ldr	r2, [r3, #4]
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	43db      	mvns	r3, r3
 8007e52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007e56:	4013      	ands	r3, r2
 8007e58:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 8007e5a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6a1b      	ldr	r3, [r3, #32]
 8007e68:	f003 0302 	and.w	r3, r3, #2
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00a      	beq.n	8007e86 <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 8007e70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e74:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8007e78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 8007e84:	e00a      	b.n	8007e9c <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 8007e86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e8a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	43db      	mvns	r3, r3
 8007e92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007e96:	4013      	ands	r3, r2
 8007e98:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6a1b      	ldr	r3, [r3, #32]
 8007ea0:	f003 0301 	and.w	r3, r3, #1
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d00a      	beq.n	8007ebe <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 8007ea8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007eac:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8007eb0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 8007ebc:	e021      	b.n	8007f02 <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 8007ebe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ec2:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	43db      	mvns	r3, r3
 8007eca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007ece:	4013      	ands	r3, r2
 8007ed0:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 8007ed4:	e015      	b.n	8007f02 <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 8007ed6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007eda:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	43db      	mvns	r3, r3
 8007ee2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 8007eec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ef0:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	43db      	mvns	r3, r3
 8007ef8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007efc:	4013      	ands	r3, r2
 8007efe:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d103      	bne.n	8007f16 <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2201      	movs	r2, #1
 8007f12:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
   
  }
  
  return status;
 8007f16:	7ffb      	ldrb	r3, [r7, #31]
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3720      	adds	r7, #32
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	f0e8cce1 	.word	0xf0e8cce1
 8007f24:	24000038 	.word	0x24000038
 8007f28:	053e2d63 	.word	0x053e2d63
 8007f2c:	5800380c 	.word	0x5800380c

08007f30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b085      	sub	sp, #20
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f003 0307 	and.w	r3, r3, #7
 8007f3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007f40:	4b0b      	ldr	r3, [pc, #44]	@ (8007f70 <__NVIC_SetPriorityGrouping+0x40>)
 8007f42:	68db      	ldr	r3, [r3, #12]
 8007f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007f46:	68ba      	ldr	r2, [r7, #8]
 8007f48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007f4c:	4013      	ands	r3, r2
 8007f4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007f58:	4b06      	ldr	r3, [pc, #24]	@ (8007f74 <__NVIC_SetPriorityGrouping+0x44>)
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007f5e:	4a04      	ldr	r2, [pc, #16]	@ (8007f70 <__NVIC_SetPriorityGrouping+0x40>)
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	60d3      	str	r3, [r2, #12]
}
 8007f64:	bf00      	nop
 8007f66:	3714      	adds	r7, #20
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr
 8007f70:	e000ed00 	.word	0xe000ed00
 8007f74:	05fa0000 	.word	0x05fa0000

08007f78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007f7c:	4b04      	ldr	r3, [pc, #16]	@ (8007f90 <__NVIC_GetPriorityGrouping+0x18>)
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	0a1b      	lsrs	r3, r3, #8
 8007f82:	f003 0307 	and.w	r3, r3, #7
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr
 8007f90:	e000ed00 	.word	0xe000ed00

08007f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b083      	sub	sp, #12
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007f9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	db0b      	blt.n	8007fbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007fa6:	88fb      	ldrh	r3, [r7, #6]
 8007fa8:	f003 021f 	and.w	r2, r3, #31
 8007fac:	4907      	ldr	r1, [pc, #28]	@ (8007fcc <__NVIC_EnableIRQ+0x38>)
 8007fae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007fb2:	095b      	lsrs	r3, r3, #5
 8007fb4:	2001      	movs	r0, #1
 8007fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8007fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007fbe:	bf00      	nop
 8007fc0:	370c      	adds	r7, #12
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr
 8007fca:	bf00      	nop
 8007fcc:	e000e100 	.word	0xe000e100

08007fd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	6039      	str	r1, [r7, #0]
 8007fda:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007fdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	db0a      	blt.n	8007ffa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	b2da      	uxtb	r2, r3
 8007fe8:	490c      	ldr	r1, [pc, #48]	@ (800801c <__NVIC_SetPriority+0x4c>)
 8007fea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007fee:	0112      	lsls	r2, r2, #4
 8007ff0:	b2d2      	uxtb	r2, r2
 8007ff2:	440b      	add	r3, r1
 8007ff4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007ff8:	e00a      	b.n	8008010 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	b2da      	uxtb	r2, r3
 8007ffe:	4908      	ldr	r1, [pc, #32]	@ (8008020 <__NVIC_SetPriority+0x50>)
 8008000:	88fb      	ldrh	r3, [r7, #6]
 8008002:	f003 030f 	and.w	r3, r3, #15
 8008006:	3b04      	subs	r3, #4
 8008008:	0112      	lsls	r2, r2, #4
 800800a:	b2d2      	uxtb	r2, r2
 800800c:	440b      	add	r3, r1
 800800e:	761a      	strb	r2, [r3, #24]
}
 8008010:	bf00      	nop
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr
 800801c:	e000e100 	.word	0xe000e100
 8008020:	e000ed00 	.word	0xe000ed00

08008024 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008024:	b480      	push	{r7}
 8008026:	b089      	sub	sp, #36	@ 0x24
 8008028:	af00      	add	r7, sp, #0
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f003 0307 	and.w	r3, r3, #7
 8008036:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008038:	69fb      	ldr	r3, [r7, #28]
 800803a:	f1c3 0307 	rsb	r3, r3, #7
 800803e:	2b04      	cmp	r3, #4
 8008040:	bf28      	it	cs
 8008042:	2304      	movcs	r3, #4
 8008044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008046:	69fb      	ldr	r3, [r7, #28]
 8008048:	3304      	adds	r3, #4
 800804a:	2b06      	cmp	r3, #6
 800804c:	d902      	bls.n	8008054 <NVIC_EncodePriority+0x30>
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	3b03      	subs	r3, #3
 8008052:	e000      	b.n	8008056 <NVIC_EncodePriority+0x32>
 8008054:	2300      	movs	r3, #0
 8008056:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008058:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800805c:	69bb      	ldr	r3, [r7, #24]
 800805e:	fa02 f303 	lsl.w	r3, r2, r3
 8008062:	43da      	mvns	r2, r3
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	401a      	ands	r2, r3
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800806c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	fa01 f303 	lsl.w	r3, r1, r3
 8008076:	43d9      	mvns	r1, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800807c:	4313      	orrs	r3, r2
         );
}
 800807e:	4618      	mov	r0, r3
 8008080:	3724      	adds	r7, #36	@ 0x24
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr
	...

0800808c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b082      	sub	sp, #8
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	3b01      	subs	r3, #1
 8008098:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800809c:	d301      	bcc.n	80080a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800809e:	2301      	movs	r3, #1
 80080a0:	e00f      	b.n	80080c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80080a2:	4a0a      	ldr	r2, [pc, #40]	@ (80080cc <SysTick_Config+0x40>)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	3b01      	subs	r3, #1
 80080a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80080aa:	210f      	movs	r1, #15
 80080ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80080b0:	f7ff ff8e 	bl	8007fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80080b4:	4b05      	ldr	r3, [pc, #20]	@ (80080cc <SysTick_Config+0x40>)
 80080b6:	2200      	movs	r2, #0
 80080b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80080ba:	4b04      	ldr	r3, [pc, #16]	@ (80080cc <SysTick_Config+0x40>)
 80080bc:	2207      	movs	r2, #7
 80080be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80080c0:	2300      	movs	r3, #0
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3708      	adds	r7, #8
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop
 80080cc:	e000e010 	.word	0xe000e010

080080d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f7ff ff29 	bl	8007f30 <__NVIC_SetPriorityGrouping>
}
 80080de:	bf00      	nop
 80080e0:	3708      	adds	r7, #8
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b086      	sub	sp, #24
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	4603      	mov	r3, r0
 80080ee:	60b9      	str	r1, [r7, #8]
 80080f0:	607a      	str	r2, [r7, #4]
 80080f2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80080f4:	f7ff ff40 	bl	8007f78 <__NVIC_GetPriorityGrouping>
 80080f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	68b9      	ldr	r1, [r7, #8]
 80080fe:	6978      	ldr	r0, [r7, #20]
 8008100:	f7ff ff90 	bl	8008024 <NVIC_EncodePriority>
 8008104:	4602      	mov	r2, r0
 8008106:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800810a:	4611      	mov	r1, r2
 800810c:	4618      	mov	r0, r3
 800810e:	f7ff ff5f 	bl	8007fd0 <__NVIC_SetPriority>
}
 8008112:	bf00      	nop
 8008114:	3718      	adds	r7, #24
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800811a:	b580      	push	{r7, lr}
 800811c:	b082      	sub	sp, #8
 800811e:	af00      	add	r7, sp, #0
 8008120:	4603      	mov	r3, r0
 8008122:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008124:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008128:	4618      	mov	r0, r3
 800812a:	f7ff ff33 	bl	8007f94 <__NVIC_EnableIRQ>
}
 800812e:	bf00      	nop
 8008130:	3708      	adds	r7, #8
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008136:	b580      	push	{r7, lr}
 8008138:	b082      	sub	sp, #8
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f7ff ffa4 	bl	800808c <SysTick_Config>
 8008144:	4603      	mov	r3, r0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3708      	adds	r7, #8
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
	...

08008150 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b086      	sub	sp, #24
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8008158:	f7fc fe4e 	bl	8004df8 <HAL_GetTick>
 800815c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d101      	bne.n	8008168 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8008164:	2301      	movs	r3, #1
 8008166:	e312      	b.n	800878e <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a66      	ldr	r2, [pc, #408]	@ (8008308 <HAL_DMA_Init+0x1b8>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d04a      	beq.n	8008208 <HAL_DMA_Init+0xb8>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a65      	ldr	r2, [pc, #404]	@ (800830c <HAL_DMA_Init+0x1bc>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d045      	beq.n	8008208 <HAL_DMA_Init+0xb8>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a63      	ldr	r2, [pc, #396]	@ (8008310 <HAL_DMA_Init+0x1c0>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d040      	beq.n	8008208 <HAL_DMA_Init+0xb8>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a62      	ldr	r2, [pc, #392]	@ (8008314 <HAL_DMA_Init+0x1c4>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d03b      	beq.n	8008208 <HAL_DMA_Init+0xb8>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a60      	ldr	r2, [pc, #384]	@ (8008318 <HAL_DMA_Init+0x1c8>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d036      	beq.n	8008208 <HAL_DMA_Init+0xb8>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a5f      	ldr	r2, [pc, #380]	@ (800831c <HAL_DMA_Init+0x1cc>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d031      	beq.n	8008208 <HAL_DMA_Init+0xb8>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a5d      	ldr	r2, [pc, #372]	@ (8008320 <HAL_DMA_Init+0x1d0>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d02c      	beq.n	8008208 <HAL_DMA_Init+0xb8>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a5c      	ldr	r2, [pc, #368]	@ (8008324 <HAL_DMA_Init+0x1d4>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d027      	beq.n	8008208 <HAL_DMA_Init+0xb8>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a5a      	ldr	r2, [pc, #360]	@ (8008328 <HAL_DMA_Init+0x1d8>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d022      	beq.n	8008208 <HAL_DMA_Init+0xb8>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a59      	ldr	r2, [pc, #356]	@ (800832c <HAL_DMA_Init+0x1dc>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d01d      	beq.n	8008208 <HAL_DMA_Init+0xb8>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a57      	ldr	r2, [pc, #348]	@ (8008330 <HAL_DMA_Init+0x1e0>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d018      	beq.n	8008208 <HAL_DMA_Init+0xb8>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a56      	ldr	r2, [pc, #344]	@ (8008334 <HAL_DMA_Init+0x1e4>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d013      	beq.n	8008208 <HAL_DMA_Init+0xb8>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a54      	ldr	r2, [pc, #336]	@ (8008338 <HAL_DMA_Init+0x1e8>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d00e      	beq.n	8008208 <HAL_DMA_Init+0xb8>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a53      	ldr	r2, [pc, #332]	@ (800833c <HAL_DMA_Init+0x1ec>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d009      	beq.n	8008208 <HAL_DMA_Init+0xb8>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a51      	ldr	r2, [pc, #324]	@ (8008340 <HAL_DMA_Init+0x1f0>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d004      	beq.n	8008208 <HAL_DMA_Init+0xb8>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a50      	ldr	r2, [pc, #320]	@ (8008344 <HAL_DMA_Init+0x1f4>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d101      	bne.n	800820c <HAL_DMA_Init+0xbc>
 8008208:	2301      	movs	r3, #1
 800820a:	e000      	b.n	800820e <HAL_DMA_Init+0xbe>
 800820c:	2300      	movs	r3, #0
 800820e:	2b00      	cmp	r3, #0
 8008210:	f000 813c 	beq.w	800848c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2202      	movs	r2, #2
 8008218:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a37      	ldr	r2, [pc, #220]	@ (8008308 <HAL_DMA_Init+0x1b8>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d04a      	beq.n	80082c4 <HAL_DMA_Init+0x174>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a36      	ldr	r2, [pc, #216]	@ (800830c <HAL_DMA_Init+0x1bc>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d045      	beq.n	80082c4 <HAL_DMA_Init+0x174>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a34      	ldr	r2, [pc, #208]	@ (8008310 <HAL_DMA_Init+0x1c0>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d040      	beq.n	80082c4 <HAL_DMA_Init+0x174>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a33      	ldr	r2, [pc, #204]	@ (8008314 <HAL_DMA_Init+0x1c4>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d03b      	beq.n	80082c4 <HAL_DMA_Init+0x174>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a31      	ldr	r2, [pc, #196]	@ (8008318 <HAL_DMA_Init+0x1c8>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d036      	beq.n	80082c4 <HAL_DMA_Init+0x174>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a30      	ldr	r2, [pc, #192]	@ (800831c <HAL_DMA_Init+0x1cc>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d031      	beq.n	80082c4 <HAL_DMA_Init+0x174>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a2e      	ldr	r2, [pc, #184]	@ (8008320 <HAL_DMA_Init+0x1d0>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d02c      	beq.n	80082c4 <HAL_DMA_Init+0x174>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a2d      	ldr	r2, [pc, #180]	@ (8008324 <HAL_DMA_Init+0x1d4>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d027      	beq.n	80082c4 <HAL_DMA_Init+0x174>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a2b      	ldr	r2, [pc, #172]	@ (8008328 <HAL_DMA_Init+0x1d8>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d022      	beq.n	80082c4 <HAL_DMA_Init+0x174>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a2a      	ldr	r2, [pc, #168]	@ (800832c <HAL_DMA_Init+0x1dc>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d01d      	beq.n	80082c4 <HAL_DMA_Init+0x174>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a28      	ldr	r2, [pc, #160]	@ (8008330 <HAL_DMA_Init+0x1e0>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d018      	beq.n	80082c4 <HAL_DMA_Init+0x174>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a27      	ldr	r2, [pc, #156]	@ (8008334 <HAL_DMA_Init+0x1e4>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d013      	beq.n	80082c4 <HAL_DMA_Init+0x174>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a25      	ldr	r2, [pc, #148]	@ (8008338 <HAL_DMA_Init+0x1e8>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d00e      	beq.n	80082c4 <HAL_DMA_Init+0x174>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a24      	ldr	r2, [pc, #144]	@ (800833c <HAL_DMA_Init+0x1ec>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d009      	beq.n	80082c4 <HAL_DMA_Init+0x174>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a22      	ldr	r2, [pc, #136]	@ (8008340 <HAL_DMA_Init+0x1f0>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d004      	beq.n	80082c4 <HAL_DMA_Init+0x174>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a21      	ldr	r2, [pc, #132]	@ (8008344 <HAL_DMA_Init+0x1f4>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d108      	bne.n	80082d6 <HAL_DMA_Init+0x186>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f022 0201 	bic.w	r2, r2, #1
 80082d2:	601a      	str	r2, [r3, #0]
 80082d4:	e007      	b.n	80082e6 <HAL_DMA_Init+0x196>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f022 0201 	bic.w	r2, r2, #1
 80082e4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80082e6:	e02f      	b.n	8008348 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80082e8:	f7fc fd86 	bl	8004df8 <HAL_GetTick>
 80082ec:	4602      	mov	r2, r0
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	1ad3      	subs	r3, r2, r3
 80082f2:	2b05      	cmp	r3, #5
 80082f4:	d928      	bls.n	8008348 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2220      	movs	r2, #32
 80082fa:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2203      	movs	r2, #3
 8008300:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	e242      	b.n	800878e <HAL_DMA_Init+0x63e>
 8008308:	40020010 	.word	0x40020010
 800830c:	40020028 	.word	0x40020028
 8008310:	40020040 	.word	0x40020040
 8008314:	40020058 	.word	0x40020058
 8008318:	40020070 	.word	0x40020070
 800831c:	40020088 	.word	0x40020088
 8008320:	400200a0 	.word	0x400200a0
 8008324:	400200b8 	.word	0x400200b8
 8008328:	40020410 	.word	0x40020410
 800832c:	40020428 	.word	0x40020428
 8008330:	40020440 	.word	0x40020440
 8008334:	40020458 	.word	0x40020458
 8008338:	40020470 	.word	0x40020470
 800833c:	40020488 	.word	0x40020488
 8008340:	400204a0 	.word	0x400204a0
 8008344:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f003 0301 	and.w	r3, r3, #1
 8008352:	2b00      	cmp	r3, #0
 8008354:	d1c8      	bne.n	80082e8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800835e:	697a      	ldr	r2, [r7, #20]
 8008360:	4b83      	ldr	r3, [pc, #524]	@ (8008570 <HAL_DMA_Init+0x420>)
 8008362:	4013      	ands	r3, r2
 8008364:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800836e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	691b      	ldr	r3, [r3, #16]
 8008374:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800837a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	699b      	ldr	r3, [r3, #24]
 8008380:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008386:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6a1b      	ldr	r3, [r3, #32]
 800838c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800838e:	697a      	ldr	r2, [r7, #20]
 8008390:	4313      	orrs	r3, r2
 8008392:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008398:	2b04      	cmp	r3, #4
 800839a:	d107      	bne.n	80083ac <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083a4:	4313      	orrs	r3, r2
 80083a6:	697a      	ldr	r2, [r7, #20]
 80083a8:	4313      	orrs	r3, r2
 80083aa:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	2b28      	cmp	r3, #40	@ 0x28
 80083b2:	d903      	bls.n	80083bc <HAL_DMA_Init+0x26c>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80083ba:	d91f      	bls.n	80083fc <HAL_DMA_Init+0x2ac>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	2b3e      	cmp	r3, #62	@ 0x3e
 80083c2:	d903      	bls.n	80083cc <HAL_DMA_Init+0x27c>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	2b42      	cmp	r3, #66	@ 0x42
 80083ca:	d917      	bls.n	80083fc <HAL_DMA_Init+0x2ac>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	2b46      	cmp	r3, #70	@ 0x46
 80083d2:	d903      	bls.n	80083dc <HAL_DMA_Init+0x28c>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	2b48      	cmp	r3, #72	@ 0x48
 80083da:	d90f      	bls.n	80083fc <HAL_DMA_Init+0x2ac>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	2b4e      	cmp	r3, #78	@ 0x4e
 80083e2:	d903      	bls.n	80083ec <HAL_DMA_Init+0x29c>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	2b52      	cmp	r3, #82	@ 0x52
 80083ea:	d907      	bls.n	80083fc <HAL_DMA_Init+0x2ac>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	2b73      	cmp	r3, #115	@ 0x73
 80083f2:	d905      	bls.n	8008400 <HAL_DMA_Init+0x2b0>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	2b77      	cmp	r3, #119	@ 0x77
 80083fa:	d801      	bhi.n	8008400 <HAL_DMA_Init+0x2b0>
 80083fc:	2301      	movs	r3, #1
 80083fe:	e000      	b.n	8008402 <HAL_DMA_Init+0x2b2>
 8008400:	2300      	movs	r3, #0
 8008402:	2b00      	cmp	r3, #0
 8008404:	d003      	beq.n	800840e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800840c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	697a      	ldr	r2, [r7, #20]
 8008414:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	695b      	ldr	r3, [r3, #20]
 800841c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	f023 0307 	bic.w	r3, r3, #7
 8008424:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800842a:	697a      	ldr	r2, [r7, #20]
 800842c:	4313      	orrs	r3, r2
 800842e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008434:	2b04      	cmp	r3, #4
 8008436:	d117      	bne.n	8008468 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800843c:	697a      	ldr	r2, [r7, #20]
 800843e:	4313      	orrs	r3, r2
 8008440:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008446:	2b00      	cmp	r3, #0
 8008448:	d00e      	beq.n	8008468 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f001 fdca 	bl	8009fe4 <DMA_CheckFifoParam>
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	d008      	beq.n	8008468 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2240      	movs	r2, #64	@ 0x40
 800845a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2201      	movs	r2, #1
 8008460:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8008464:	2301      	movs	r3, #1
 8008466:	e192      	b.n	800878e <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	697a      	ldr	r2, [r7, #20]
 800846e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f001 fd05 	bl	8009e80 <DMA_CalcBaseAndBitshift>
 8008476:	4603      	mov	r3, r0
 8008478:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800847e:	f003 031f 	and.w	r3, r3, #31
 8008482:	223f      	movs	r2, #63	@ 0x3f
 8008484:	409a      	lsls	r2, r3
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	609a      	str	r2, [r3, #8]
 800848a:	e0c8      	b.n	800861e <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a38      	ldr	r2, [pc, #224]	@ (8008574 <HAL_DMA_Init+0x424>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d022      	beq.n	80084dc <HAL_DMA_Init+0x38c>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a37      	ldr	r2, [pc, #220]	@ (8008578 <HAL_DMA_Init+0x428>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d01d      	beq.n	80084dc <HAL_DMA_Init+0x38c>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a35      	ldr	r2, [pc, #212]	@ (800857c <HAL_DMA_Init+0x42c>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d018      	beq.n	80084dc <HAL_DMA_Init+0x38c>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a34      	ldr	r2, [pc, #208]	@ (8008580 <HAL_DMA_Init+0x430>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d013      	beq.n	80084dc <HAL_DMA_Init+0x38c>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	4a32      	ldr	r2, [pc, #200]	@ (8008584 <HAL_DMA_Init+0x434>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d00e      	beq.n	80084dc <HAL_DMA_Init+0x38c>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a31      	ldr	r2, [pc, #196]	@ (8008588 <HAL_DMA_Init+0x438>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d009      	beq.n	80084dc <HAL_DMA_Init+0x38c>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a2f      	ldr	r2, [pc, #188]	@ (800858c <HAL_DMA_Init+0x43c>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d004      	beq.n	80084dc <HAL_DMA_Init+0x38c>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a2e      	ldr	r2, [pc, #184]	@ (8008590 <HAL_DMA_Init+0x440>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d101      	bne.n	80084e0 <HAL_DMA_Init+0x390>
 80084dc:	2301      	movs	r3, #1
 80084de:	e000      	b.n	80084e2 <HAL_DMA_Init+0x392>
 80084e0:	2300      	movs	r3, #0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	f000 8092 	beq.w	800860c <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a21      	ldr	r2, [pc, #132]	@ (8008574 <HAL_DMA_Init+0x424>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d021      	beq.n	8008536 <HAL_DMA_Init+0x3e6>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a20      	ldr	r2, [pc, #128]	@ (8008578 <HAL_DMA_Init+0x428>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d01c      	beq.n	8008536 <HAL_DMA_Init+0x3e6>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a1e      	ldr	r2, [pc, #120]	@ (800857c <HAL_DMA_Init+0x42c>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d017      	beq.n	8008536 <HAL_DMA_Init+0x3e6>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a1d      	ldr	r2, [pc, #116]	@ (8008580 <HAL_DMA_Init+0x430>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d012      	beq.n	8008536 <HAL_DMA_Init+0x3e6>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a1b      	ldr	r2, [pc, #108]	@ (8008584 <HAL_DMA_Init+0x434>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d00d      	beq.n	8008536 <HAL_DMA_Init+0x3e6>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a1a      	ldr	r2, [pc, #104]	@ (8008588 <HAL_DMA_Init+0x438>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d008      	beq.n	8008536 <HAL_DMA_Init+0x3e6>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a18      	ldr	r2, [pc, #96]	@ (800858c <HAL_DMA_Init+0x43c>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d003      	beq.n	8008536 <HAL_DMA_Init+0x3e6>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a17      	ldr	r2, [pc, #92]	@ (8008590 <HAL_DMA_Init+0x440>)
 8008534:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2202      	movs	r2, #2
 800853a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2200      	movs	r2, #0
 8008542:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800854e:	697a      	ldr	r2, [r7, #20]
 8008550:	4b10      	ldr	r3, [pc, #64]	@ (8008594 <HAL_DMA_Init+0x444>)
 8008552:	4013      	ands	r3, r2
 8008554:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	689b      	ldr	r3, [r3, #8]
 800855a:	2b40      	cmp	r3, #64	@ 0x40
 800855c:	d01c      	beq.n	8008598 <HAL_DMA_Init+0x448>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	2b80      	cmp	r3, #128	@ 0x80
 8008564:	d102      	bne.n	800856c <HAL_DMA_Init+0x41c>
 8008566:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800856a:	e016      	b.n	800859a <HAL_DMA_Init+0x44a>
 800856c:	2300      	movs	r3, #0
 800856e:	e014      	b.n	800859a <HAL_DMA_Init+0x44a>
 8008570:	fe10803f 	.word	0xfe10803f
 8008574:	58025408 	.word	0x58025408
 8008578:	5802541c 	.word	0x5802541c
 800857c:	58025430 	.word	0x58025430
 8008580:	58025444 	.word	0x58025444
 8008584:	58025458 	.word	0x58025458
 8008588:	5802546c 	.word	0x5802546c
 800858c:	58025480 	.word	0x58025480
 8008590:	58025494 	.word	0x58025494
 8008594:	fffe000f 	.word	0xfffe000f
 8008598:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	68d2      	ldr	r2, [r2, #12]
 800859e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80085a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	691b      	ldr	r3, [r3, #16]
 80085a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80085a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	695b      	ldr	r3, [r3, #20]
 80085ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80085b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	699b      	ldr	r3, [r3, #24]
 80085b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80085b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	69db      	ldr	r3, [r3, #28]
 80085be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80085c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6a1b      	ldr	r3, [r3, #32]
 80085c6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80085c8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80085ca:	697a      	ldr	r2, [r7, #20]
 80085cc:	4313      	orrs	r3, r2
 80085ce:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	697a      	ldr	r2, [r7, #20]
 80085d6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	461a      	mov	r2, r3
 80085de:	4b6e      	ldr	r3, [pc, #440]	@ (8008798 <HAL_DMA_Init+0x648>)
 80085e0:	4413      	add	r3, r2
 80085e2:	4a6e      	ldr	r2, [pc, #440]	@ (800879c <HAL_DMA_Init+0x64c>)
 80085e4:	fba2 2303 	umull	r2, r3, r2, r3
 80085e8:	091b      	lsrs	r3, r3, #4
 80085ea:	009a      	lsls	r2, r3, #2
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f001 fc45 	bl	8009e80 <DMA_CalcBaseAndBitshift>
 80085f6:	4603      	mov	r3, r0
 80085f8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085fe:	f003 031f 	and.w	r3, r3, #31
 8008602:	2201      	movs	r2, #1
 8008604:	409a      	lsls	r2, r3
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	605a      	str	r2, [r3, #4]
 800860a:	e008      	b.n	800861e <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2240      	movs	r2, #64	@ 0x40
 8008610:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2203      	movs	r2, #3
 8008616:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	e0b7      	b.n	800878e <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a5f      	ldr	r2, [pc, #380]	@ (80087a0 <HAL_DMA_Init+0x650>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d072      	beq.n	800870e <HAL_DMA_Init+0x5be>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a5d      	ldr	r2, [pc, #372]	@ (80087a4 <HAL_DMA_Init+0x654>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d06d      	beq.n	800870e <HAL_DMA_Init+0x5be>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a5c      	ldr	r2, [pc, #368]	@ (80087a8 <HAL_DMA_Init+0x658>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d068      	beq.n	800870e <HAL_DMA_Init+0x5be>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a5a      	ldr	r2, [pc, #360]	@ (80087ac <HAL_DMA_Init+0x65c>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d063      	beq.n	800870e <HAL_DMA_Init+0x5be>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a59      	ldr	r2, [pc, #356]	@ (80087b0 <HAL_DMA_Init+0x660>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d05e      	beq.n	800870e <HAL_DMA_Init+0x5be>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a57      	ldr	r2, [pc, #348]	@ (80087b4 <HAL_DMA_Init+0x664>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d059      	beq.n	800870e <HAL_DMA_Init+0x5be>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a56      	ldr	r2, [pc, #344]	@ (80087b8 <HAL_DMA_Init+0x668>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d054      	beq.n	800870e <HAL_DMA_Init+0x5be>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a54      	ldr	r2, [pc, #336]	@ (80087bc <HAL_DMA_Init+0x66c>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d04f      	beq.n	800870e <HAL_DMA_Init+0x5be>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a53      	ldr	r2, [pc, #332]	@ (80087c0 <HAL_DMA_Init+0x670>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d04a      	beq.n	800870e <HAL_DMA_Init+0x5be>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a51      	ldr	r2, [pc, #324]	@ (80087c4 <HAL_DMA_Init+0x674>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d045      	beq.n	800870e <HAL_DMA_Init+0x5be>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a50      	ldr	r2, [pc, #320]	@ (80087c8 <HAL_DMA_Init+0x678>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d040      	beq.n	800870e <HAL_DMA_Init+0x5be>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a4e      	ldr	r2, [pc, #312]	@ (80087cc <HAL_DMA_Init+0x67c>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d03b      	beq.n	800870e <HAL_DMA_Init+0x5be>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a4d      	ldr	r2, [pc, #308]	@ (80087d0 <HAL_DMA_Init+0x680>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d036      	beq.n	800870e <HAL_DMA_Init+0x5be>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a4b      	ldr	r2, [pc, #300]	@ (80087d4 <HAL_DMA_Init+0x684>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d031      	beq.n	800870e <HAL_DMA_Init+0x5be>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a4a      	ldr	r2, [pc, #296]	@ (80087d8 <HAL_DMA_Init+0x688>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d02c      	beq.n	800870e <HAL_DMA_Init+0x5be>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a48      	ldr	r2, [pc, #288]	@ (80087dc <HAL_DMA_Init+0x68c>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d027      	beq.n	800870e <HAL_DMA_Init+0x5be>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a47      	ldr	r2, [pc, #284]	@ (80087e0 <HAL_DMA_Init+0x690>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d022      	beq.n	800870e <HAL_DMA_Init+0x5be>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a45      	ldr	r2, [pc, #276]	@ (80087e4 <HAL_DMA_Init+0x694>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d01d      	beq.n	800870e <HAL_DMA_Init+0x5be>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a44      	ldr	r2, [pc, #272]	@ (80087e8 <HAL_DMA_Init+0x698>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d018      	beq.n	800870e <HAL_DMA_Init+0x5be>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a42      	ldr	r2, [pc, #264]	@ (80087ec <HAL_DMA_Init+0x69c>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d013      	beq.n	800870e <HAL_DMA_Init+0x5be>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a41      	ldr	r2, [pc, #260]	@ (80087f0 <HAL_DMA_Init+0x6a0>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d00e      	beq.n	800870e <HAL_DMA_Init+0x5be>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a3f      	ldr	r2, [pc, #252]	@ (80087f4 <HAL_DMA_Init+0x6a4>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d009      	beq.n	800870e <HAL_DMA_Init+0x5be>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a3e      	ldr	r2, [pc, #248]	@ (80087f8 <HAL_DMA_Init+0x6a8>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d004      	beq.n	800870e <HAL_DMA_Init+0x5be>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a3c      	ldr	r2, [pc, #240]	@ (80087fc <HAL_DMA_Init+0x6ac>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d101      	bne.n	8008712 <HAL_DMA_Init+0x5c2>
 800870e:	2301      	movs	r3, #1
 8008710:	e000      	b.n	8008714 <HAL_DMA_Init+0x5c4>
 8008712:	2300      	movs	r3, #0
 8008714:	2b00      	cmp	r3, #0
 8008716:	d032      	beq.n	800877e <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f001 fcdf 	bl	800a0dc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	2b80      	cmp	r3, #128	@ 0x80
 8008724:	d102      	bne.n	800872c <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	685a      	ldr	r2, [r3, #4]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008734:	b2d2      	uxtb	r2, r2
 8008736:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8008740:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d010      	beq.n	800876c <HAL_DMA_Init+0x61c>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	2b08      	cmp	r3, #8
 8008750:	d80c      	bhi.n	800876c <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f001 fd5c 	bl	800a210 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800875c:	2200      	movs	r2, #0
 800875e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008768:	605a      	str	r2, [r3, #4]
 800876a:	e008      	b.n	800877e <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2200      	movs	r2, #0
 8008770:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2200      	movs	r2, #0
 8008782:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2201      	movs	r2, #1
 8008788:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800878c:	2300      	movs	r3, #0
}
 800878e:	4618      	mov	r0, r3
 8008790:	3718      	adds	r7, #24
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}
 8008796:	bf00      	nop
 8008798:	a7fdabf8 	.word	0xa7fdabf8
 800879c:	cccccccd 	.word	0xcccccccd
 80087a0:	40020010 	.word	0x40020010
 80087a4:	40020028 	.word	0x40020028
 80087a8:	40020040 	.word	0x40020040
 80087ac:	40020058 	.word	0x40020058
 80087b0:	40020070 	.word	0x40020070
 80087b4:	40020088 	.word	0x40020088
 80087b8:	400200a0 	.word	0x400200a0
 80087bc:	400200b8 	.word	0x400200b8
 80087c0:	40020410 	.word	0x40020410
 80087c4:	40020428 	.word	0x40020428
 80087c8:	40020440 	.word	0x40020440
 80087cc:	40020458 	.word	0x40020458
 80087d0:	40020470 	.word	0x40020470
 80087d4:	40020488 	.word	0x40020488
 80087d8:	400204a0 	.word	0x400204a0
 80087dc:	400204b8 	.word	0x400204b8
 80087e0:	58025408 	.word	0x58025408
 80087e4:	5802541c 	.word	0x5802541c
 80087e8:	58025430 	.word	0x58025430
 80087ec:	58025444 	.word	0x58025444
 80087f0:	58025458 	.word	0x58025458
 80087f4:	5802546c 	.word	0x5802546c
 80087f8:	58025480 	.word	0x58025480
 80087fc:	58025494 	.word	0x58025494

08008800 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b086      	sub	sp, #24
 8008804:	af00      	add	r7, sp, #0
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	607a      	str	r2, [r7, #4]
 800880c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800880e:	2300      	movs	r3, #0
 8008810:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d101      	bne.n	800881c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8008818:	2301      	movs	r3, #1
 800881a:	e226      	b.n	8008c6a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008822:	2b01      	cmp	r3, #1
 8008824:	d101      	bne.n	800882a <HAL_DMA_Start_IT+0x2a>
 8008826:	2302      	movs	r3, #2
 8008828:	e21f      	b.n	8008c6a <HAL_DMA_Start_IT+0x46a>
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2201      	movs	r2, #1
 800882e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008838:	b2db      	uxtb	r3, r3
 800883a:	2b01      	cmp	r3, #1
 800883c:	f040 820a 	bne.w	8008c54 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2202      	movs	r2, #2
 8008844:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2200      	movs	r2, #0
 800884c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a68      	ldr	r2, [pc, #416]	@ (80089f4 <HAL_DMA_Start_IT+0x1f4>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d04a      	beq.n	80088ee <HAL_DMA_Start_IT+0xee>
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a66      	ldr	r2, [pc, #408]	@ (80089f8 <HAL_DMA_Start_IT+0x1f8>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d045      	beq.n	80088ee <HAL_DMA_Start_IT+0xee>
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a65      	ldr	r2, [pc, #404]	@ (80089fc <HAL_DMA_Start_IT+0x1fc>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d040      	beq.n	80088ee <HAL_DMA_Start_IT+0xee>
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a63      	ldr	r2, [pc, #396]	@ (8008a00 <HAL_DMA_Start_IT+0x200>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d03b      	beq.n	80088ee <HAL_DMA_Start_IT+0xee>
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a62      	ldr	r2, [pc, #392]	@ (8008a04 <HAL_DMA_Start_IT+0x204>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d036      	beq.n	80088ee <HAL_DMA_Start_IT+0xee>
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a60      	ldr	r2, [pc, #384]	@ (8008a08 <HAL_DMA_Start_IT+0x208>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d031      	beq.n	80088ee <HAL_DMA_Start_IT+0xee>
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a5f      	ldr	r2, [pc, #380]	@ (8008a0c <HAL_DMA_Start_IT+0x20c>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d02c      	beq.n	80088ee <HAL_DMA_Start_IT+0xee>
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a5d      	ldr	r2, [pc, #372]	@ (8008a10 <HAL_DMA_Start_IT+0x210>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d027      	beq.n	80088ee <HAL_DMA_Start_IT+0xee>
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a5c      	ldr	r2, [pc, #368]	@ (8008a14 <HAL_DMA_Start_IT+0x214>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d022      	beq.n	80088ee <HAL_DMA_Start_IT+0xee>
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a5a      	ldr	r2, [pc, #360]	@ (8008a18 <HAL_DMA_Start_IT+0x218>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d01d      	beq.n	80088ee <HAL_DMA_Start_IT+0xee>
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a59      	ldr	r2, [pc, #356]	@ (8008a1c <HAL_DMA_Start_IT+0x21c>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d018      	beq.n	80088ee <HAL_DMA_Start_IT+0xee>
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a57      	ldr	r2, [pc, #348]	@ (8008a20 <HAL_DMA_Start_IT+0x220>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d013      	beq.n	80088ee <HAL_DMA_Start_IT+0xee>
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a56      	ldr	r2, [pc, #344]	@ (8008a24 <HAL_DMA_Start_IT+0x224>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d00e      	beq.n	80088ee <HAL_DMA_Start_IT+0xee>
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a54      	ldr	r2, [pc, #336]	@ (8008a28 <HAL_DMA_Start_IT+0x228>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d009      	beq.n	80088ee <HAL_DMA_Start_IT+0xee>
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a53      	ldr	r2, [pc, #332]	@ (8008a2c <HAL_DMA_Start_IT+0x22c>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d004      	beq.n	80088ee <HAL_DMA_Start_IT+0xee>
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a51      	ldr	r2, [pc, #324]	@ (8008a30 <HAL_DMA_Start_IT+0x230>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d108      	bne.n	8008900 <HAL_DMA_Start_IT+0x100>
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	681a      	ldr	r2, [r3, #0]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f022 0201 	bic.w	r2, r2, #1
 80088fc:	601a      	str	r2, [r3, #0]
 80088fe:	e007      	b.n	8008910 <HAL_DMA_Start_IT+0x110>
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	681a      	ldr	r2, [r3, #0]
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f022 0201 	bic.w	r2, r2, #1
 800890e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	68b9      	ldr	r1, [r7, #8]
 8008916:	68f8      	ldr	r0, [r7, #12]
 8008918:	f001 f906 	bl	8009b28 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a34      	ldr	r2, [pc, #208]	@ (80089f4 <HAL_DMA_Start_IT+0x1f4>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d04a      	beq.n	80089bc <HAL_DMA_Start_IT+0x1bc>
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a33      	ldr	r2, [pc, #204]	@ (80089f8 <HAL_DMA_Start_IT+0x1f8>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d045      	beq.n	80089bc <HAL_DMA_Start_IT+0x1bc>
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a31      	ldr	r2, [pc, #196]	@ (80089fc <HAL_DMA_Start_IT+0x1fc>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d040      	beq.n	80089bc <HAL_DMA_Start_IT+0x1bc>
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a30      	ldr	r2, [pc, #192]	@ (8008a00 <HAL_DMA_Start_IT+0x200>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d03b      	beq.n	80089bc <HAL_DMA_Start_IT+0x1bc>
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a2e      	ldr	r2, [pc, #184]	@ (8008a04 <HAL_DMA_Start_IT+0x204>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d036      	beq.n	80089bc <HAL_DMA_Start_IT+0x1bc>
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4a2d      	ldr	r2, [pc, #180]	@ (8008a08 <HAL_DMA_Start_IT+0x208>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d031      	beq.n	80089bc <HAL_DMA_Start_IT+0x1bc>
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a2b      	ldr	r2, [pc, #172]	@ (8008a0c <HAL_DMA_Start_IT+0x20c>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d02c      	beq.n	80089bc <HAL_DMA_Start_IT+0x1bc>
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a2a      	ldr	r2, [pc, #168]	@ (8008a10 <HAL_DMA_Start_IT+0x210>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d027      	beq.n	80089bc <HAL_DMA_Start_IT+0x1bc>
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a28      	ldr	r2, [pc, #160]	@ (8008a14 <HAL_DMA_Start_IT+0x214>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d022      	beq.n	80089bc <HAL_DMA_Start_IT+0x1bc>
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a27      	ldr	r2, [pc, #156]	@ (8008a18 <HAL_DMA_Start_IT+0x218>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d01d      	beq.n	80089bc <HAL_DMA_Start_IT+0x1bc>
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a25      	ldr	r2, [pc, #148]	@ (8008a1c <HAL_DMA_Start_IT+0x21c>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d018      	beq.n	80089bc <HAL_DMA_Start_IT+0x1bc>
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a24      	ldr	r2, [pc, #144]	@ (8008a20 <HAL_DMA_Start_IT+0x220>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d013      	beq.n	80089bc <HAL_DMA_Start_IT+0x1bc>
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4a22      	ldr	r2, [pc, #136]	@ (8008a24 <HAL_DMA_Start_IT+0x224>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d00e      	beq.n	80089bc <HAL_DMA_Start_IT+0x1bc>
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a21      	ldr	r2, [pc, #132]	@ (8008a28 <HAL_DMA_Start_IT+0x228>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d009      	beq.n	80089bc <HAL_DMA_Start_IT+0x1bc>
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a1f      	ldr	r2, [pc, #124]	@ (8008a2c <HAL_DMA_Start_IT+0x22c>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d004      	beq.n	80089bc <HAL_DMA_Start_IT+0x1bc>
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a1e      	ldr	r2, [pc, #120]	@ (8008a30 <HAL_DMA_Start_IT+0x230>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d101      	bne.n	80089c0 <HAL_DMA_Start_IT+0x1c0>
 80089bc:	2301      	movs	r3, #1
 80089be:	e000      	b.n	80089c2 <HAL_DMA_Start_IT+0x1c2>
 80089c0:	2300      	movs	r3, #0
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d036      	beq.n	8008a34 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f023 021e 	bic.w	r2, r3, #30
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f042 0216 	orr.w	r2, r2, #22
 80089d8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d03e      	beq.n	8008a60 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f042 0208 	orr.w	r2, r2, #8
 80089f0:	601a      	str	r2, [r3, #0]
 80089f2:	e035      	b.n	8008a60 <HAL_DMA_Start_IT+0x260>
 80089f4:	40020010 	.word	0x40020010
 80089f8:	40020028 	.word	0x40020028
 80089fc:	40020040 	.word	0x40020040
 8008a00:	40020058 	.word	0x40020058
 8008a04:	40020070 	.word	0x40020070
 8008a08:	40020088 	.word	0x40020088
 8008a0c:	400200a0 	.word	0x400200a0
 8008a10:	400200b8 	.word	0x400200b8
 8008a14:	40020410 	.word	0x40020410
 8008a18:	40020428 	.word	0x40020428
 8008a1c:	40020440 	.word	0x40020440
 8008a20:	40020458 	.word	0x40020458
 8008a24:	40020470 	.word	0x40020470
 8008a28:	40020488 	.word	0x40020488
 8008a2c:	400204a0 	.word	0x400204a0
 8008a30:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f023 020e 	bic.w	r2, r3, #14
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f042 020a 	orr.w	r2, r2, #10
 8008a46:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d007      	beq.n	8008a60 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	681a      	ldr	r2, [r3, #0]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f042 0204 	orr.w	r2, r2, #4
 8008a5e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a83      	ldr	r2, [pc, #524]	@ (8008c74 <HAL_DMA_Start_IT+0x474>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d072      	beq.n	8008b50 <HAL_DMA_Start_IT+0x350>
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a82      	ldr	r2, [pc, #520]	@ (8008c78 <HAL_DMA_Start_IT+0x478>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d06d      	beq.n	8008b50 <HAL_DMA_Start_IT+0x350>
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a80      	ldr	r2, [pc, #512]	@ (8008c7c <HAL_DMA_Start_IT+0x47c>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d068      	beq.n	8008b50 <HAL_DMA_Start_IT+0x350>
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a7f      	ldr	r2, [pc, #508]	@ (8008c80 <HAL_DMA_Start_IT+0x480>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d063      	beq.n	8008b50 <HAL_DMA_Start_IT+0x350>
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a7d      	ldr	r2, [pc, #500]	@ (8008c84 <HAL_DMA_Start_IT+0x484>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d05e      	beq.n	8008b50 <HAL_DMA_Start_IT+0x350>
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a7c      	ldr	r2, [pc, #496]	@ (8008c88 <HAL_DMA_Start_IT+0x488>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d059      	beq.n	8008b50 <HAL_DMA_Start_IT+0x350>
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a7a      	ldr	r2, [pc, #488]	@ (8008c8c <HAL_DMA_Start_IT+0x48c>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d054      	beq.n	8008b50 <HAL_DMA_Start_IT+0x350>
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a79      	ldr	r2, [pc, #484]	@ (8008c90 <HAL_DMA_Start_IT+0x490>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d04f      	beq.n	8008b50 <HAL_DMA_Start_IT+0x350>
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a77      	ldr	r2, [pc, #476]	@ (8008c94 <HAL_DMA_Start_IT+0x494>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d04a      	beq.n	8008b50 <HAL_DMA_Start_IT+0x350>
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4a76      	ldr	r2, [pc, #472]	@ (8008c98 <HAL_DMA_Start_IT+0x498>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d045      	beq.n	8008b50 <HAL_DMA_Start_IT+0x350>
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a74      	ldr	r2, [pc, #464]	@ (8008c9c <HAL_DMA_Start_IT+0x49c>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d040      	beq.n	8008b50 <HAL_DMA_Start_IT+0x350>
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a73      	ldr	r2, [pc, #460]	@ (8008ca0 <HAL_DMA_Start_IT+0x4a0>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d03b      	beq.n	8008b50 <HAL_DMA_Start_IT+0x350>
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a71      	ldr	r2, [pc, #452]	@ (8008ca4 <HAL_DMA_Start_IT+0x4a4>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d036      	beq.n	8008b50 <HAL_DMA_Start_IT+0x350>
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a70      	ldr	r2, [pc, #448]	@ (8008ca8 <HAL_DMA_Start_IT+0x4a8>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d031      	beq.n	8008b50 <HAL_DMA_Start_IT+0x350>
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a6e      	ldr	r2, [pc, #440]	@ (8008cac <HAL_DMA_Start_IT+0x4ac>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d02c      	beq.n	8008b50 <HAL_DMA_Start_IT+0x350>
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a6d      	ldr	r2, [pc, #436]	@ (8008cb0 <HAL_DMA_Start_IT+0x4b0>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d027      	beq.n	8008b50 <HAL_DMA_Start_IT+0x350>
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a6b      	ldr	r2, [pc, #428]	@ (8008cb4 <HAL_DMA_Start_IT+0x4b4>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d022      	beq.n	8008b50 <HAL_DMA_Start_IT+0x350>
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a6a      	ldr	r2, [pc, #424]	@ (8008cb8 <HAL_DMA_Start_IT+0x4b8>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d01d      	beq.n	8008b50 <HAL_DMA_Start_IT+0x350>
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a68      	ldr	r2, [pc, #416]	@ (8008cbc <HAL_DMA_Start_IT+0x4bc>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d018      	beq.n	8008b50 <HAL_DMA_Start_IT+0x350>
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a67      	ldr	r2, [pc, #412]	@ (8008cc0 <HAL_DMA_Start_IT+0x4c0>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d013      	beq.n	8008b50 <HAL_DMA_Start_IT+0x350>
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a65      	ldr	r2, [pc, #404]	@ (8008cc4 <HAL_DMA_Start_IT+0x4c4>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d00e      	beq.n	8008b50 <HAL_DMA_Start_IT+0x350>
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a64      	ldr	r2, [pc, #400]	@ (8008cc8 <HAL_DMA_Start_IT+0x4c8>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d009      	beq.n	8008b50 <HAL_DMA_Start_IT+0x350>
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a62      	ldr	r2, [pc, #392]	@ (8008ccc <HAL_DMA_Start_IT+0x4cc>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d004      	beq.n	8008b50 <HAL_DMA_Start_IT+0x350>
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a61      	ldr	r2, [pc, #388]	@ (8008cd0 <HAL_DMA_Start_IT+0x4d0>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d101      	bne.n	8008b54 <HAL_DMA_Start_IT+0x354>
 8008b50:	2301      	movs	r3, #1
 8008b52:	e000      	b.n	8008b56 <HAL_DMA_Start_IT+0x356>
 8008b54:	2300      	movs	r3, #0
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d01a      	beq.n	8008b90 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d007      	beq.n	8008b78 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008b76:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d007      	beq.n	8008b90 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008b8e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a37      	ldr	r2, [pc, #220]	@ (8008c74 <HAL_DMA_Start_IT+0x474>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d04a      	beq.n	8008c30 <HAL_DMA_Start_IT+0x430>
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a36      	ldr	r2, [pc, #216]	@ (8008c78 <HAL_DMA_Start_IT+0x478>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d045      	beq.n	8008c30 <HAL_DMA_Start_IT+0x430>
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a34      	ldr	r2, [pc, #208]	@ (8008c7c <HAL_DMA_Start_IT+0x47c>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d040      	beq.n	8008c30 <HAL_DMA_Start_IT+0x430>
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4a33      	ldr	r2, [pc, #204]	@ (8008c80 <HAL_DMA_Start_IT+0x480>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d03b      	beq.n	8008c30 <HAL_DMA_Start_IT+0x430>
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a31      	ldr	r2, [pc, #196]	@ (8008c84 <HAL_DMA_Start_IT+0x484>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d036      	beq.n	8008c30 <HAL_DMA_Start_IT+0x430>
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a30      	ldr	r2, [pc, #192]	@ (8008c88 <HAL_DMA_Start_IT+0x488>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d031      	beq.n	8008c30 <HAL_DMA_Start_IT+0x430>
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a2e      	ldr	r2, [pc, #184]	@ (8008c8c <HAL_DMA_Start_IT+0x48c>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d02c      	beq.n	8008c30 <HAL_DMA_Start_IT+0x430>
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4a2d      	ldr	r2, [pc, #180]	@ (8008c90 <HAL_DMA_Start_IT+0x490>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d027      	beq.n	8008c30 <HAL_DMA_Start_IT+0x430>
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a2b      	ldr	r2, [pc, #172]	@ (8008c94 <HAL_DMA_Start_IT+0x494>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d022      	beq.n	8008c30 <HAL_DMA_Start_IT+0x430>
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4a2a      	ldr	r2, [pc, #168]	@ (8008c98 <HAL_DMA_Start_IT+0x498>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d01d      	beq.n	8008c30 <HAL_DMA_Start_IT+0x430>
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a28      	ldr	r2, [pc, #160]	@ (8008c9c <HAL_DMA_Start_IT+0x49c>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d018      	beq.n	8008c30 <HAL_DMA_Start_IT+0x430>
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a27      	ldr	r2, [pc, #156]	@ (8008ca0 <HAL_DMA_Start_IT+0x4a0>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d013      	beq.n	8008c30 <HAL_DMA_Start_IT+0x430>
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a25      	ldr	r2, [pc, #148]	@ (8008ca4 <HAL_DMA_Start_IT+0x4a4>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d00e      	beq.n	8008c30 <HAL_DMA_Start_IT+0x430>
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a24      	ldr	r2, [pc, #144]	@ (8008ca8 <HAL_DMA_Start_IT+0x4a8>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d009      	beq.n	8008c30 <HAL_DMA_Start_IT+0x430>
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a22      	ldr	r2, [pc, #136]	@ (8008cac <HAL_DMA_Start_IT+0x4ac>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d004      	beq.n	8008c30 <HAL_DMA_Start_IT+0x430>
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a21      	ldr	r2, [pc, #132]	@ (8008cb0 <HAL_DMA_Start_IT+0x4b0>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d108      	bne.n	8008c42 <HAL_DMA_Start_IT+0x442>
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f042 0201 	orr.w	r2, r2, #1
 8008c3e:	601a      	str	r2, [r3, #0]
 8008c40:	e012      	b.n	8008c68 <HAL_DMA_Start_IT+0x468>
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	681a      	ldr	r2, [r3, #0]
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f042 0201 	orr.w	r2, r2, #1
 8008c50:	601a      	str	r2, [r3, #0]
 8008c52:	e009      	b.n	8008c68 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008c5a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8008c64:	2301      	movs	r3, #1
 8008c66:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3718      	adds	r7, #24
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop
 8008c74:	40020010 	.word	0x40020010
 8008c78:	40020028 	.word	0x40020028
 8008c7c:	40020040 	.word	0x40020040
 8008c80:	40020058 	.word	0x40020058
 8008c84:	40020070 	.word	0x40020070
 8008c88:	40020088 	.word	0x40020088
 8008c8c:	400200a0 	.word	0x400200a0
 8008c90:	400200b8 	.word	0x400200b8
 8008c94:	40020410 	.word	0x40020410
 8008c98:	40020428 	.word	0x40020428
 8008c9c:	40020440 	.word	0x40020440
 8008ca0:	40020458 	.word	0x40020458
 8008ca4:	40020470 	.word	0x40020470
 8008ca8:	40020488 	.word	0x40020488
 8008cac:	400204a0 	.word	0x400204a0
 8008cb0:	400204b8 	.word	0x400204b8
 8008cb4:	58025408 	.word	0x58025408
 8008cb8:	5802541c 	.word	0x5802541c
 8008cbc:	58025430 	.word	0x58025430
 8008cc0:	58025444 	.word	0x58025444
 8008cc4:	58025458 	.word	0x58025458
 8008cc8:	5802546c 	.word	0x5802546c
 8008ccc:	58025480 	.word	0x58025480
 8008cd0:	58025494 	.word	0x58025494

08008cd4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b08a      	sub	sp, #40	@ 0x28
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008ce0:	4b67      	ldr	r3, [pc, #412]	@ (8008e80 <HAL_DMA_IRQHandler+0x1ac>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a67      	ldr	r2, [pc, #412]	@ (8008e84 <HAL_DMA_IRQHandler+0x1b0>)
 8008ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8008cea:	0a9b      	lsrs	r3, r3, #10
 8008cec:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cf2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cf8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8008cfa:	6a3b      	ldr	r3, [r7, #32]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8008d00:	69fb      	ldr	r3, [r7, #28]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a5f      	ldr	r2, [pc, #380]	@ (8008e88 <HAL_DMA_IRQHandler+0x1b4>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d04a      	beq.n	8008da6 <HAL_DMA_IRQHandler+0xd2>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a5d      	ldr	r2, [pc, #372]	@ (8008e8c <HAL_DMA_IRQHandler+0x1b8>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d045      	beq.n	8008da6 <HAL_DMA_IRQHandler+0xd2>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4a5c      	ldr	r2, [pc, #368]	@ (8008e90 <HAL_DMA_IRQHandler+0x1bc>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d040      	beq.n	8008da6 <HAL_DMA_IRQHandler+0xd2>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a5a      	ldr	r2, [pc, #360]	@ (8008e94 <HAL_DMA_IRQHandler+0x1c0>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d03b      	beq.n	8008da6 <HAL_DMA_IRQHandler+0xd2>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a59      	ldr	r2, [pc, #356]	@ (8008e98 <HAL_DMA_IRQHandler+0x1c4>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d036      	beq.n	8008da6 <HAL_DMA_IRQHandler+0xd2>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a57      	ldr	r2, [pc, #348]	@ (8008e9c <HAL_DMA_IRQHandler+0x1c8>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d031      	beq.n	8008da6 <HAL_DMA_IRQHandler+0xd2>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a56      	ldr	r2, [pc, #344]	@ (8008ea0 <HAL_DMA_IRQHandler+0x1cc>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d02c      	beq.n	8008da6 <HAL_DMA_IRQHandler+0xd2>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a54      	ldr	r2, [pc, #336]	@ (8008ea4 <HAL_DMA_IRQHandler+0x1d0>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d027      	beq.n	8008da6 <HAL_DMA_IRQHandler+0xd2>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a53      	ldr	r2, [pc, #332]	@ (8008ea8 <HAL_DMA_IRQHandler+0x1d4>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d022      	beq.n	8008da6 <HAL_DMA_IRQHandler+0xd2>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a51      	ldr	r2, [pc, #324]	@ (8008eac <HAL_DMA_IRQHandler+0x1d8>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d01d      	beq.n	8008da6 <HAL_DMA_IRQHandler+0xd2>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a50      	ldr	r2, [pc, #320]	@ (8008eb0 <HAL_DMA_IRQHandler+0x1dc>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d018      	beq.n	8008da6 <HAL_DMA_IRQHandler+0xd2>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a4e      	ldr	r2, [pc, #312]	@ (8008eb4 <HAL_DMA_IRQHandler+0x1e0>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d013      	beq.n	8008da6 <HAL_DMA_IRQHandler+0xd2>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a4d      	ldr	r2, [pc, #308]	@ (8008eb8 <HAL_DMA_IRQHandler+0x1e4>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d00e      	beq.n	8008da6 <HAL_DMA_IRQHandler+0xd2>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a4b      	ldr	r2, [pc, #300]	@ (8008ebc <HAL_DMA_IRQHandler+0x1e8>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d009      	beq.n	8008da6 <HAL_DMA_IRQHandler+0xd2>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a4a      	ldr	r2, [pc, #296]	@ (8008ec0 <HAL_DMA_IRQHandler+0x1ec>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d004      	beq.n	8008da6 <HAL_DMA_IRQHandler+0xd2>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a48      	ldr	r2, [pc, #288]	@ (8008ec4 <HAL_DMA_IRQHandler+0x1f0>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d101      	bne.n	8008daa <HAL_DMA_IRQHandler+0xd6>
 8008da6:	2301      	movs	r3, #1
 8008da8:	e000      	b.n	8008dac <HAL_DMA_IRQHandler+0xd8>
 8008daa:	2300      	movs	r3, #0
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	f000 842b 	beq.w	8009608 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008db6:	f003 031f 	and.w	r3, r3, #31
 8008dba:	2208      	movs	r2, #8
 8008dbc:	409a      	lsls	r2, r3
 8008dbe:	69bb      	ldr	r3, [r7, #24]
 8008dc0:	4013      	ands	r3, r2
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	f000 80a2 	beq.w	8008f0c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a2e      	ldr	r2, [pc, #184]	@ (8008e88 <HAL_DMA_IRQHandler+0x1b4>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d04a      	beq.n	8008e68 <HAL_DMA_IRQHandler+0x194>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a2d      	ldr	r2, [pc, #180]	@ (8008e8c <HAL_DMA_IRQHandler+0x1b8>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d045      	beq.n	8008e68 <HAL_DMA_IRQHandler+0x194>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a2b      	ldr	r2, [pc, #172]	@ (8008e90 <HAL_DMA_IRQHandler+0x1bc>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d040      	beq.n	8008e68 <HAL_DMA_IRQHandler+0x194>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a2a      	ldr	r2, [pc, #168]	@ (8008e94 <HAL_DMA_IRQHandler+0x1c0>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d03b      	beq.n	8008e68 <HAL_DMA_IRQHandler+0x194>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a28      	ldr	r2, [pc, #160]	@ (8008e98 <HAL_DMA_IRQHandler+0x1c4>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d036      	beq.n	8008e68 <HAL_DMA_IRQHandler+0x194>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a27      	ldr	r2, [pc, #156]	@ (8008e9c <HAL_DMA_IRQHandler+0x1c8>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d031      	beq.n	8008e68 <HAL_DMA_IRQHandler+0x194>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a25      	ldr	r2, [pc, #148]	@ (8008ea0 <HAL_DMA_IRQHandler+0x1cc>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d02c      	beq.n	8008e68 <HAL_DMA_IRQHandler+0x194>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a24      	ldr	r2, [pc, #144]	@ (8008ea4 <HAL_DMA_IRQHandler+0x1d0>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d027      	beq.n	8008e68 <HAL_DMA_IRQHandler+0x194>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a22      	ldr	r2, [pc, #136]	@ (8008ea8 <HAL_DMA_IRQHandler+0x1d4>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d022      	beq.n	8008e68 <HAL_DMA_IRQHandler+0x194>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a21      	ldr	r2, [pc, #132]	@ (8008eac <HAL_DMA_IRQHandler+0x1d8>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d01d      	beq.n	8008e68 <HAL_DMA_IRQHandler+0x194>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a1f      	ldr	r2, [pc, #124]	@ (8008eb0 <HAL_DMA_IRQHandler+0x1dc>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d018      	beq.n	8008e68 <HAL_DMA_IRQHandler+0x194>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a1e      	ldr	r2, [pc, #120]	@ (8008eb4 <HAL_DMA_IRQHandler+0x1e0>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d013      	beq.n	8008e68 <HAL_DMA_IRQHandler+0x194>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a1c      	ldr	r2, [pc, #112]	@ (8008eb8 <HAL_DMA_IRQHandler+0x1e4>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d00e      	beq.n	8008e68 <HAL_DMA_IRQHandler+0x194>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a1b      	ldr	r2, [pc, #108]	@ (8008ebc <HAL_DMA_IRQHandler+0x1e8>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d009      	beq.n	8008e68 <HAL_DMA_IRQHandler+0x194>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a19      	ldr	r2, [pc, #100]	@ (8008ec0 <HAL_DMA_IRQHandler+0x1ec>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d004      	beq.n	8008e68 <HAL_DMA_IRQHandler+0x194>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a18      	ldr	r2, [pc, #96]	@ (8008ec4 <HAL_DMA_IRQHandler+0x1f0>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d12f      	bne.n	8008ec8 <HAL_DMA_IRQHandler+0x1f4>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f003 0304 	and.w	r3, r3, #4
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	bf14      	ite	ne
 8008e76:	2301      	movne	r3, #1
 8008e78:	2300      	moveq	r3, #0
 8008e7a:	b2db      	uxtb	r3, r3
 8008e7c:	e02e      	b.n	8008edc <HAL_DMA_IRQHandler+0x208>
 8008e7e:	bf00      	nop
 8008e80:	24000038 	.word	0x24000038
 8008e84:	1b4e81b5 	.word	0x1b4e81b5
 8008e88:	40020010 	.word	0x40020010
 8008e8c:	40020028 	.word	0x40020028
 8008e90:	40020040 	.word	0x40020040
 8008e94:	40020058 	.word	0x40020058
 8008e98:	40020070 	.word	0x40020070
 8008e9c:	40020088 	.word	0x40020088
 8008ea0:	400200a0 	.word	0x400200a0
 8008ea4:	400200b8 	.word	0x400200b8
 8008ea8:	40020410 	.word	0x40020410
 8008eac:	40020428 	.word	0x40020428
 8008eb0:	40020440 	.word	0x40020440
 8008eb4:	40020458 	.word	0x40020458
 8008eb8:	40020470 	.word	0x40020470
 8008ebc:	40020488 	.word	0x40020488
 8008ec0:	400204a0 	.word	0x400204a0
 8008ec4:	400204b8 	.word	0x400204b8
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f003 0308 	and.w	r3, r3, #8
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	bf14      	ite	ne
 8008ed6:	2301      	movne	r3, #1
 8008ed8:	2300      	moveq	r3, #0
 8008eda:	b2db      	uxtb	r3, r3
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d015      	beq.n	8008f0c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	681a      	ldr	r2, [r3, #0]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f022 0204 	bic.w	r2, r2, #4
 8008eee:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008ef4:	f003 031f 	and.w	r3, r3, #31
 8008ef8:	2208      	movs	r2, #8
 8008efa:	409a      	lsls	r2, r3
 8008efc:	6a3b      	ldr	r3, [r7, #32]
 8008efe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f04:	f043 0201 	orr.w	r2, r3, #1
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f10:	f003 031f 	and.w	r3, r3, #31
 8008f14:	69ba      	ldr	r2, [r7, #24]
 8008f16:	fa22 f303 	lsr.w	r3, r2, r3
 8008f1a:	f003 0301 	and.w	r3, r3, #1
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d06e      	beq.n	8009000 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4a69      	ldr	r2, [pc, #420]	@ (80090cc <HAL_DMA_IRQHandler+0x3f8>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d04a      	beq.n	8008fc2 <HAL_DMA_IRQHandler+0x2ee>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a67      	ldr	r2, [pc, #412]	@ (80090d0 <HAL_DMA_IRQHandler+0x3fc>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d045      	beq.n	8008fc2 <HAL_DMA_IRQHandler+0x2ee>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a66      	ldr	r2, [pc, #408]	@ (80090d4 <HAL_DMA_IRQHandler+0x400>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d040      	beq.n	8008fc2 <HAL_DMA_IRQHandler+0x2ee>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a64      	ldr	r2, [pc, #400]	@ (80090d8 <HAL_DMA_IRQHandler+0x404>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d03b      	beq.n	8008fc2 <HAL_DMA_IRQHandler+0x2ee>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4a63      	ldr	r2, [pc, #396]	@ (80090dc <HAL_DMA_IRQHandler+0x408>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d036      	beq.n	8008fc2 <HAL_DMA_IRQHandler+0x2ee>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a61      	ldr	r2, [pc, #388]	@ (80090e0 <HAL_DMA_IRQHandler+0x40c>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d031      	beq.n	8008fc2 <HAL_DMA_IRQHandler+0x2ee>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a60      	ldr	r2, [pc, #384]	@ (80090e4 <HAL_DMA_IRQHandler+0x410>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d02c      	beq.n	8008fc2 <HAL_DMA_IRQHandler+0x2ee>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a5e      	ldr	r2, [pc, #376]	@ (80090e8 <HAL_DMA_IRQHandler+0x414>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d027      	beq.n	8008fc2 <HAL_DMA_IRQHandler+0x2ee>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a5d      	ldr	r2, [pc, #372]	@ (80090ec <HAL_DMA_IRQHandler+0x418>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d022      	beq.n	8008fc2 <HAL_DMA_IRQHandler+0x2ee>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a5b      	ldr	r2, [pc, #364]	@ (80090f0 <HAL_DMA_IRQHandler+0x41c>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d01d      	beq.n	8008fc2 <HAL_DMA_IRQHandler+0x2ee>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a5a      	ldr	r2, [pc, #360]	@ (80090f4 <HAL_DMA_IRQHandler+0x420>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d018      	beq.n	8008fc2 <HAL_DMA_IRQHandler+0x2ee>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a58      	ldr	r2, [pc, #352]	@ (80090f8 <HAL_DMA_IRQHandler+0x424>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d013      	beq.n	8008fc2 <HAL_DMA_IRQHandler+0x2ee>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a57      	ldr	r2, [pc, #348]	@ (80090fc <HAL_DMA_IRQHandler+0x428>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d00e      	beq.n	8008fc2 <HAL_DMA_IRQHandler+0x2ee>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a55      	ldr	r2, [pc, #340]	@ (8009100 <HAL_DMA_IRQHandler+0x42c>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d009      	beq.n	8008fc2 <HAL_DMA_IRQHandler+0x2ee>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a54      	ldr	r2, [pc, #336]	@ (8009104 <HAL_DMA_IRQHandler+0x430>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d004      	beq.n	8008fc2 <HAL_DMA_IRQHandler+0x2ee>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a52      	ldr	r2, [pc, #328]	@ (8009108 <HAL_DMA_IRQHandler+0x434>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d10a      	bne.n	8008fd8 <HAL_DMA_IRQHandler+0x304>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	695b      	ldr	r3, [r3, #20]
 8008fc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	bf14      	ite	ne
 8008fd0:	2301      	movne	r3, #1
 8008fd2:	2300      	moveq	r3, #0
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	e003      	b.n	8008fe0 <HAL_DMA_IRQHandler+0x30c>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	2300      	movs	r3, #0
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d00d      	beq.n	8009000 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008fe8:	f003 031f 	and.w	r3, r3, #31
 8008fec:	2201      	movs	r2, #1
 8008fee:	409a      	lsls	r2, r3
 8008ff0:	6a3b      	ldr	r3, [r7, #32]
 8008ff2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ff8:	f043 0202 	orr.w	r2, r3, #2
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009004:	f003 031f 	and.w	r3, r3, #31
 8009008:	2204      	movs	r2, #4
 800900a:	409a      	lsls	r2, r3
 800900c:	69bb      	ldr	r3, [r7, #24]
 800900e:	4013      	ands	r3, r2
 8009010:	2b00      	cmp	r3, #0
 8009012:	f000 808f 	beq.w	8009134 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a2c      	ldr	r2, [pc, #176]	@ (80090cc <HAL_DMA_IRQHandler+0x3f8>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d04a      	beq.n	80090b6 <HAL_DMA_IRQHandler+0x3e2>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a2a      	ldr	r2, [pc, #168]	@ (80090d0 <HAL_DMA_IRQHandler+0x3fc>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d045      	beq.n	80090b6 <HAL_DMA_IRQHandler+0x3e2>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a29      	ldr	r2, [pc, #164]	@ (80090d4 <HAL_DMA_IRQHandler+0x400>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d040      	beq.n	80090b6 <HAL_DMA_IRQHandler+0x3e2>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a27      	ldr	r2, [pc, #156]	@ (80090d8 <HAL_DMA_IRQHandler+0x404>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d03b      	beq.n	80090b6 <HAL_DMA_IRQHandler+0x3e2>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4a26      	ldr	r2, [pc, #152]	@ (80090dc <HAL_DMA_IRQHandler+0x408>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d036      	beq.n	80090b6 <HAL_DMA_IRQHandler+0x3e2>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a24      	ldr	r2, [pc, #144]	@ (80090e0 <HAL_DMA_IRQHandler+0x40c>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d031      	beq.n	80090b6 <HAL_DMA_IRQHandler+0x3e2>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a23      	ldr	r2, [pc, #140]	@ (80090e4 <HAL_DMA_IRQHandler+0x410>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d02c      	beq.n	80090b6 <HAL_DMA_IRQHandler+0x3e2>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a21      	ldr	r2, [pc, #132]	@ (80090e8 <HAL_DMA_IRQHandler+0x414>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d027      	beq.n	80090b6 <HAL_DMA_IRQHandler+0x3e2>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a20      	ldr	r2, [pc, #128]	@ (80090ec <HAL_DMA_IRQHandler+0x418>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d022      	beq.n	80090b6 <HAL_DMA_IRQHandler+0x3e2>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a1e      	ldr	r2, [pc, #120]	@ (80090f0 <HAL_DMA_IRQHandler+0x41c>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d01d      	beq.n	80090b6 <HAL_DMA_IRQHandler+0x3e2>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a1d      	ldr	r2, [pc, #116]	@ (80090f4 <HAL_DMA_IRQHandler+0x420>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d018      	beq.n	80090b6 <HAL_DMA_IRQHandler+0x3e2>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a1b      	ldr	r2, [pc, #108]	@ (80090f8 <HAL_DMA_IRQHandler+0x424>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d013      	beq.n	80090b6 <HAL_DMA_IRQHandler+0x3e2>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a1a      	ldr	r2, [pc, #104]	@ (80090fc <HAL_DMA_IRQHandler+0x428>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d00e      	beq.n	80090b6 <HAL_DMA_IRQHandler+0x3e2>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4a18      	ldr	r2, [pc, #96]	@ (8009100 <HAL_DMA_IRQHandler+0x42c>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d009      	beq.n	80090b6 <HAL_DMA_IRQHandler+0x3e2>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4a17      	ldr	r2, [pc, #92]	@ (8009104 <HAL_DMA_IRQHandler+0x430>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d004      	beq.n	80090b6 <HAL_DMA_IRQHandler+0x3e2>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a15      	ldr	r2, [pc, #84]	@ (8009108 <HAL_DMA_IRQHandler+0x434>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d12a      	bne.n	800910c <HAL_DMA_IRQHandler+0x438>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f003 0302 	and.w	r3, r3, #2
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	bf14      	ite	ne
 80090c4:	2301      	movne	r3, #1
 80090c6:	2300      	moveq	r3, #0
 80090c8:	b2db      	uxtb	r3, r3
 80090ca:	e023      	b.n	8009114 <HAL_DMA_IRQHandler+0x440>
 80090cc:	40020010 	.word	0x40020010
 80090d0:	40020028 	.word	0x40020028
 80090d4:	40020040 	.word	0x40020040
 80090d8:	40020058 	.word	0x40020058
 80090dc:	40020070 	.word	0x40020070
 80090e0:	40020088 	.word	0x40020088
 80090e4:	400200a0 	.word	0x400200a0
 80090e8:	400200b8 	.word	0x400200b8
 80090ec:	40020410 	.word	0x40020410
 80090f0:	40020428 	.word	0x40020428
 80090f4:	40020440 	.word	0x40020440
 80090f8:	40020458 	.word	0x40020458
 80090fc:	40020470 	.word	0x40020470
 8009100:	40020488 	.word	0x40020488
 8009104:	400204a0 	.word	0x400204a0
 8009108:	400204b8 	.word	0x400204b8
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	2300      	movs	r3, #0
 8009114:	2b00      	cmp	r3, #0
 8009116:	d00d      	beq.n	8009134 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800911c:	f003 031f 	and.w	r3, r3, #31
 8009120:	2204      	movs	r2, #4
 8009122:	409a      	lsls	r2, r3
 8009124:	6a3b      	ldr	r3, [r7, #32]
 8009126:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800912c:	f043 0204 	orr.w	r2, r3, #4
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009138:	f003 031f 	and.w	r3, r3, #31
 800913c:	2210      	movs	r2, #16
 800913e:	409a      	lsls	r2, r3
 8009140:	69bb      	ldr	r3, [r7, #24]
 8009142:	4013      	ands	r3, r2
 8009144:	2b00      	cmp	r3, #0
 8009146:	f000 80a6 	beq.w	8009296 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	4a85      	ldr	r2, [pc, #532]	@ (8009364 <HAL_DMA_IRQHandler+0x690>)
 8009150:	4293      	cmp	r3, r2
 8009152:	d04a      	beq.n	80091ea <HAL_DMA_IRQHandler+0x516>
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a83      	ldr	r2, [pc, #524]	@ (8009368 <HAL_DMA_IRQHandler+0x694>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d045      	beq.n	80091ea <HAL_DMA_IRQHandler+0x516>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4a82      	ldr	r2, [pc, #520]	@ (800936c <HAL_DMA_IRQHandler+0x698>)
 8009164:	4293      	cmp	r3, r2
 8009166:	d040      	beq.n	80091ea <HAL_DMA_IRQHandler+0x516>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a80      	ldr	r2, [pc, #512]	@ (8009370 <HAL_DMA_IRQHandler+0x69c>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d03b      	beq.n	80091ea <HAL_DMA_IRQHandler+0x516>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a7f      	ldr	r2, [pc, #508]	@ (8009374 <HAL_DMA_IRQHandler+0x6a0>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d036      	beq.n	80091ea <HAL_DMA_IRQHandler+0x516>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a7d      	ldr	r2, [pc, #500]	@ (8009378 <HAL_DMA_IRQHandler+0x6a4>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d031      	beq.n	80091ea <HAL_DMA_IRQHandler+0x516>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4a7c      	ldr	r2, [pc, #496]	@ (800937c <HAL_DMA_IRQHandler+0x6a8>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d02c      	beq.n	80091ea <HAL_DMA_IRQHandler+0x516>
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4a7a      	ldr	r2, [pc, #488]	@ (8009380 <HAL_DMA_IRQHandler+0x6ac>)
 8009196:	4293      	cmp	r3, r2
 8009198:	d027      	beq.n	80091ea <HAL_DMA_IRQHandler+0x516>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	4a79      	ldr	r2, [pc, #484]	@ (8009384 <HAL_DMA_IRQHandler+0x6b0>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d022      	beq.n	80091ea <HAL_DMA_IRQHandler+0x516>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4a77      	ldr	r2, [pc, #476]	@ (8009388 <HAL_DMA_IRQHandler+0x6b4>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d01d      	beq.n	80091ea <HAL_DMA_IRQHandler+0x516>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4a76      	ldr	r2, [pc, #472]	@ (800938c <HAL_DMA_IRQHandler+0x6b8>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d018      	beq.n	80091ea <HAL_DMA_IRQHandler+0x516>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4a74      	ldr	r2, [pc, #464]	@ (8009390 <HAL_DMA_IRQHandler+0x6bc>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d013      	beq.n	80091ea <HAL_DMA_IRQHandler+0x516>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a73      	ldr	r2, [pc, #460]	@ (8009394 <HAL_DMA_IRQHandler+0x6c0>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d00e      	beq.n	80091ea <HAL_DMA_IRQHandler+0x516>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a71      	ldr	r2, [pc, #452]	@ (8009398 <HAL_DMA_IRQHandler+0x6c4>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d009      	beq.n	80091ea <HAL_DMA_IRQHandler+0x516>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4a70      	ldr	r2, [pc, #448]	@ (800939c <HAL_DMA_IRQHandler+0x6c8>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d004      	beq.n	80091ea <HAL_DMA_IRQHandler+0x516>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a6e      	ldr	r2, [pc, #440]	@ (80093a0 <HAL_DMA_IRQHandler+0x6cc>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d10a      	bne.n	8009200 <HAL_DMA_IRQHandler+0x52c>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f003 0308 	and.w	r3, r3, #8
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	bf14      	ite	ne
 80091f8:	2301      	movne	r3, #1
 80091fa:	2300      	moveq	r3, #0
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	e009      	b.n	8009214 <HAL_DMA_IRQHandler+0x540>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f003 0304 	and.w	r3, r3, #4
 800920a:	2b00      	cmp	r3, #0
 800920c:	bf14      	ite	ne
 800920e:	2301      	movne	r3, #1
 8009210:	2300      	moveq	r3, #0
 8009212:	b2db      	uxtb	r3, r3
 8009214:	2b00      	cmp	r3, #0
 8009216:	d03e      	beq.n	8009296 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800921c:	f003 031f 	and.w	r3, r3, #31
 8009220:	2210      	movs	r2, #16
 8009222:	409a      	lsls	r2, r3
 8009224:	6a3b      	ldr	r3, [r7, #32]
 8009226:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009232:	2b00      	cmp	r3, #0
 8009234:	d018      	beq.n	8009268 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009240:	2b00      	cmp	r3, #0
 8009242:	d108      	bne.n	8009256 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009248:	2b00      	cmp	r3, #0
 800924a:	d024      	beq.n	8009296 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	4798      	blx	r3
 8009254:	e01f      	b.n	8009296 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800925a:	2b00      	cmp	r3, #0
 800925c:	d01b      	beq.n	8009296 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	4798      	blx	r3
 8009266:	e016      	b.n	8009296 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009272:	2b00      	cmp	r3, #0
 8009274:	d107      	bne.n	8009286 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	681a      	ldr	r2, [r3, #0]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f022 0208 	bic.w	r2, r2, #8
 8009284:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800928a:	2b00      	cmp	r3, #0
 800928c:	d003      	beq.n	8009296 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800929a:	f003 031f 	and.w	r3, r3, #31
 800929e:	2220      	movs	r2, #32
 80092a0:	409a      	lsls	r2, r3
 80092a2:	69bb      	ldr	r3, [r7, #24]
 80092a4:	4013      	ands	r3, r2
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	f000 8110 	beq.w	80094cc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a2c      	ldr	r2, [pc, #176]	@ (8009364 <HAL_DMA_IRQHandler+0x690>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d04a      	beq.n	800934c <HAL_DMA_IRQHandler+0x678>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a2b      	ldr	r2, [pc, #172]	@ (8009368 <HAL_DMA_IRQHandler+0x694>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d045      	beq.n	800934c <HAL_DMA_IRQHandler+0x678>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a29      	ldr	r2, [pc, #164]	@ (800936c <HAL_DMA_IRQHandler+0x698>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d040      	beq.n	800934c <HAL_DMA_IRQHandler+0x678>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a28      	ldr	r2, [pc, #160]	@ (8009370 <HAL_DMA_IRQHandler+0x69c>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d03b      	beq.n	800934c <HAL_DMA_IRQHandler+0x678>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a26      	ldr	r2, [pc, #152]	@ (8009374 <HAL_DMA_IRQHandler+0x6a0>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d036      	beq.n	800934c <HAL_DMA_IRQHandler+0x678>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a25      	ldr	r2, [pc, #148]	@ (8009378 <HAL_DMA_IRQHandler+0x6a4>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d031      	beq.n	800934c <HAL_DMA_IRQHandler+0x678>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4a23      	ldr	r2, [pc, #140]	@ (800937c <HAL_DMA_IRQHandler+0x6a8>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d02c      	beq.n	800934c <HAL_DMA_IRQHandler+0x678>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4a22      	ldr	r2, [pc, #136]	@ (8009380 <HAL_DMA_IRQHandler+0x6ac>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d027      	beq.n	800934c <HAL_DMA_IRQHandler+0x678>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a20      	ldr	r2, [pc, #128]	@ (8009384 <HAL_DMA_IRQHandler+0x6b0>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d022      	beq.n	800934c <HAL_DMA_IRQHandler+0x678>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4a1f      	ldr	r2, [pc, #124]	@ (8009388 <HAL_DMA_IRQHandler+0x6b4>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d01d      	beq.n	800934c <HAL_DMA_IRQHandler+0x678>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4a1d      	ldr	r2, [pc, #116]	@ (800938c <HAL_DMA_IRQHandler+0x6b8>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d018      	beq.n	800934c <HAL_DMA_IRQHandler+0x678>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4a1c      	ldr	r2, [pc, #112]	@ (8009390 <HAL_DMA_IRQHandler+0x6bc>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d013      	beq.n	800934c <HAL_DMA_IRQHandler+0x678>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4a1a      	ldr	r2, [pc, #104]	@ (8009394 <HAL_DMA_IRQHandler+0x6c0>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d00e      	beq.n	800934c <HAL_DMA_IRQHandler+0x678>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4a19      	ldr	r2, [pc, #100]	@ (8009398 <HAL_DMA_IRQHandler+0x6c4>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d009      	beq.n	800934c <HAL_DMA_IRQHandler+0x678>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4a17      	ldr	r2, [pc, #92]	@ (800939c <HAL_DMA_IRQHandler+0x6c8>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d004      	beq.n	800934c <HAL_DMA_IRQHandler+0x678>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4a16      	ldr	r2, [pc, #88]	@ (80093a0 <HAL_DMA_IRQHandler+0x6cc>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d12b      	bne.n	80093a4 <HAL_DMA_IRQHandler+0x6d0>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f003 0310 	and.w	r3, r3, #16
 8009356:	2b00      	cmp	r3, #0
 8009358:	bf14      	ite	ne
 800935a:	2301      	movne	r3, #1
 800935c:	2300      	moveq	r3, #0
 800935e:	b2db      	uxtb	r3, r3
 8009360:	e02a      	b.n	80093b8 <HAL_DMA_IRQHandler+0x6e4>
 8009362:	bf00      	nop
 8009364:	40020010 	.word	0x40020010
 8009368:	40020028 	.word	0x40020028
 800936c:	40020040 	.word	0x40020040
 8009370:	40020058 	.word	0x40020058
 8009374:	40020070 	.word	0x40020070
 8009378:	40020088 	.word	0x40020088
 800937c:	400200a0 	.word	0x400200a0
 8009380:	400200b8 	.word	0x400200b8
 8009384:	40020410 	.word	0x40020410
 8009388:	40020428 	.word	0x40020428
 800938c:	40020440 	.word	0x40020440
 8009390:	40020458 	.word	0x40020458
 8009394:	40020470 	.word	0x40020470
 8009398:	40020488 	.word	0x40020488
 800939c:	400204a0 	.word	0x400204a0
 80093a0:	400204b8 	.word	0x400204b8
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f003 0302 	and.w	r3, r3, #2
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	bf14      	ite	ne
 80093b2:	2301      	movne	r3, #1
 80093b4:	2300      	moveq	r3, #0
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	f000 8087 	beq.w	80094cc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80093c2:	f003 031f 	and.w	r3, r3, #31
 80093c6:	2220      	movs	r2, #32
 80093c8:	409a      	lsls	r2, r3
 80093ca:	6a3b      	ldr	r3, [r7, #32]
 80093cc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	2b04      	cmp	r3, #4
 80093d8:	d139      	bne.n	800944e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f022 0216 	bic.w	r2, r2, #22
 80093e8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	695a      	ldr	r2, [r3, #20]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80093f8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d103      	bne.n	800940a <HAL_DMA_IRQHandler+0x736>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009406:	2b00      	cmp	r3, #0
 8009408:	d007      	beq.n	800941a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	681a      	ldr	r2, [r3, #0]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f022 0208 	bic.w	r2, r2, #8
 8009418:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800941e:	f003 031f 	and.w	r3, r3, #31
 8009422:	223f      	movs	r2, #63	@ 0x3f
 8009424:	409a      	lsls	r2, r3
 8009426:	6a3b      	ldr	r3, [r7, #32]
 8009428:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2201      	movs	r2, #1
 800942e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2200      	movs	r2, #0
 8009436:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800943e:	2b00      	cmp	r3, #0
 8009440:	f000 834a 	beq.w	8009ad8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	4798      	blx	r3
          }
          return;
 800944c:	e344      	b.n	8009ad8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009458:	2b00      	cmp	r3, #0
 800945a:	d018      	beq.n	800948e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009466:	2b00      	cmp	r3, #0
 8009468:	d108      	bne.n	800947c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800946e:	2b00      	cmp	r3, #0
 8009470:	d02c      	beq.n	80094cc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	4798      	blx	r3
 800947a:	e027      	b.n	80094cc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009480:	2b00      	cmp	r3, #0
 8009482:	d023      	beq.n	80094cc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	4798      	blx	r3
 800948c:	e01e      	b.n	80094cc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009498:	2b00      	cmp	r3, #0
 800949a:	d10f      	bne.n	80094bc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	681a      	ldr	r2, [r3, #0]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f022 0210 	bic.w	r2, r2, #16
 80094aa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2201      	movs	r2, #1
 80094b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2200      	movs	r2, #0
 80094b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d003      	beq.n	80094cc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	f000 8306 	beq.w	8009ae2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094da:	f003 0301 	and.w	r3, r3, #1
 80094de:	2b00      	cmp	r3, #0
 80094e0:	f000 8088 	beq.w	80095f4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2204      	movs	r2, #4
 80094e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a7a      	ldr	r2, [pc, #488]	@ (80096dc <HAL_DMA_IRQHandler+0xa08>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d04a      	beq.n	800958c <HAL_DMA_IRQHandler+0x8b8>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a79      	ldr	r2, [pc, #484]	@ (80096e0 <HAL_DMA_IRQHandler+0xa0c>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d045      	beq.n	800958c <HAL_DMA_IRQHandler+0x8b8>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a77      	ldr	r2, [pc, #476]	@ (80096e4 <HAL_DMA_IRQHandler+0xa10>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d040      	beq.n	800958c <HAL_DMA_IRQHandler+0x8b8>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	4a76      	ldr	r2, [pc, #472]	@ (80096e8 <HAL_DMA_IRQHandler+0xa14>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d03b      	beq.n	800958c <HAL_DMA_IRQHandler+0x8b8>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4a74      	ldr	r2, [pc, #464]	@ (80096ec <HAL_DMA_IRQHandler+0xa18>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d036      	beq.n	800958c <HAL_DMA_IRQHandler+0x8b8>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4a73      	ldr	r2, [pc, #460]	@ (80096f0 <HAL_DMA_IRQHandler+0xa1c>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d031      	beq.n	800958c <HAL_DMA_IRQHandler+0x8b8>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a71      	ldr	r2, [pc, #452]	@ (80096f4 <HAL_DMA_IRQHandler+0xa20>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d02c      	beq.n	800958c <HAL_DMA_IRQHandler+0x8b8>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4a70      	ldr	r2, [pc, #448]	@ (80096f8 <HAL_DMA_IRQHandler+0xa24>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d027      	beq.n	800958c <HAL_DMA_IRQHandler+0x8b8>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a6e      	ldr	r2, [pc, #440]	@ (80096fc <HAL_DMA_IRQHandler+0xa28>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d022      	beq.n	800958c <HAL_DMA_IRQHandler+0x8b8>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a6d      	ldr	r2, [pc, #436]	@ (8009700 <HAL_DMA_IRQHandler+0xa2c>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d01d      	beq.n	800958c <HAL_DMA_IRQHandler+0x8b8>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a6b      	ldr	r2, [pc, #428]	@ (8009704 <HAL_DMA_IRQHandler+0xa30>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d018      	beq.n	800958c <HAL_DMA_IRQHandler+0x8b8>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4a6a      	ldr	r2, [pc, #424]	@ (8009708 <HAL_DMA_IRQHandler+0xa34>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d013      	beq.n	800958c <HAL_DMA_IRQHandler+0x8b8>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	4a68      	ldr	r2, [pc, #416]	@ (800970c <HAL_DMA_IRQHandler+0xa38>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d00e      	beq.n	800958c <HAL_DMA_IRQHandler+0x8b8>
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	4a67      	ldr	r2, [pc, #412]	@ (8009710 <HAL_DMA_IRQHandler+0xa3c>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d009      	beq.n	800958c <HAL_DMA_IRQHandler+0x8b8>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4a65      	ldr	r2, [pc, #404]	@ (8009714 <HAL_DMA_IRQHandler+0xa40>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d004      	beq.n	800958c <HAL_DMA_IRQHandler+0x8b8>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a64      	ldr	r2, [pc, #400]	@ (8009718 <HAL_DMA_IRQHandler+0xa44>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d108      	bne.n	800959e <HAL_DMA_IRQHandler+0x8ca>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f022 0201 	bic.w	r2, r2, #1
 800959a:	601a      	str	r2, [r3, #0]
 800959c:	e007      	b.n	80095ae <HAL_DMA_IRQHandler+0x8da>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	681a      	ldr	r2, [r3, #0]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f022 0201 	bic.w	r2, r2, #1
 80095ac:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	3301      	adds	r3, #1
 80095b2:	60fb      	str	r3, [r7, #12]
 80095b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d307      	bcc.n	80095ca <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f003 0301 	and.w	r3, r3, #1
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d1f2      	bne.n	80095ae <HAL_DMA_IRQHandler+0x8da>
 80095c8:	e000      	b.n	80095cc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80095ca:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f003 0301 	and.w	r3, r3, #1
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d004      	beq.n	80095e4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2203      	movs	r2, #3
 80095de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80095e2:	e003      	b.n	80095ec <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2201      	movs	r2, #1
 80095e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2200      	movs	r2, #0
 80095f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	f000 8272 	beq.w	8009ae2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	4798      	blx	r3
 8009606:	e26c      	b.n	8009ae2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4a43      	ldr	r2, [pc, #268]	@ (800971c <HAL_DMA_IRQHandler+0xa48>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d022      	beq.n	8009658 <HAL_DMA_IRQHandler+0x984>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a42      	ldr	r2, [pc, #264]	@ (8009720 <HAL_DMA_IRQHandler+0xa4c>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d01d      	beq.n	8009658 <HAL_DMA_IRQHandler+0x984>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a40      	ldr	r2, [pc, #256]	@ (8009724 <HAL_DMA_IRQHandler+0xa50>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d018      	beq.n	8009658 <HAL_DMA_IRQHandler+0x984>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a3f      	ldr	r2, [pc, #252]	@ (8009728 <HAL_DMA_IRQHandler+0xa54>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d013      	beq.n	8009658 <HAL_DMA_IRQHandler+0x984>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a3d      	ldr	r2, [pc, #244]	@ (800972c <HAL_DMA_IRQHandler+0xa58>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d00e      	beq.n	8009658 <HAL_DMA_IRQHandler+0x984>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a3c      	ldr	r2, [pc, #240]	@ (8009730 <HAL_DMA_IRQHandler+0xa5c>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d009      	beq.n	8009658 <HAL_DMA_IRQHandler+0x984>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a3a      	ldr	r2, [pc, #232]	@ (8009734 <HAL_DMA_IRQHandler+0xa60>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d004      	beq.n	8009658 <HAL_DMA_IRQHandler+0x984>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4a39      	ldr	r2, [pc, #228]	@ (8009738 <HAL_DMA_IRQHandler+0xa64>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d101      	bne.n	800965c <HAL_DMA_IRQHandler+0x988>
 8009658:	2301      	movs	r3, #1
 800965a:	e000      	b.n	800965e <HAL_DMA_IRQHandler+0x98a>
 800965c:	2300      	movs	r3, #0
 800965e:	2b00      	cmp	r3, #0
 8009660:	f000 823f 	beq.w	8009ae2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009670:	f003 031f 	and.w	r3, r3, #31
 8009674:	2204      	movs	r2, #4
 8009676:	409a      	lsls	r2, r3
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	4013      	ands	r3, r2
 800967c:	2b00      	cmp	r3, #0
 800967e:	f000 80cd 	beq.w	800981c <HAL_DMA_IRQHandler+0xb48>
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	f003 0304 	and.w	r3, r3, #4
 8009688:	2b00      	cmp	r3, #0
 800968a:	f000 80c7 	beq.w	800981c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009692:	f003 031f 	and.w	r3, r3, #31
 8009696:	2204      	movs	r2, #4
 8009698:	409a      	lsls	r2, r3
 800969a:	69fb      	ldr	r3, [r7, #28]
 800969c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d049      	beq.n	800973c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d109      	bne.n	80096c6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	f000 8210 	beq.w	8009adc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80096c4:	e20a      	b.n	8009adc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	f000 8206 	beq.w	8009adc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80096d8:	e200      	b.n	8009adc <HAL_DMA_IRQHandler+0xe08>
 80096da:	bf00      	nop
 80096dc:	40020010 	.word	0x40020010
 80096e0:	40020028 	.word	0x40020028
 80096e4:	40020040 	.word	0x40020040
 80096e8:	40020058 	.word	0x40020058
 80096ec:	40020070 	.word	0x40020070
 80096f0:	40020088 	.word	0x40020088
 80096f4:	400200a0 	.word	0x400200a0
 80096f8:	400200b8 	.word	0x400200b8
 80096fc:	40020410 	.word	0x40020410
 8009700:	40020428 	.word	0x40020428
 8009704:	40020440 	.word	0x40020440
 8009708:	40020458 	.word	0x40020458
 800970c:	40020470 	.word	0x40020470
 8009710:	40020488 	.word	0x40020488
 8009714:	400204a0 	.word	0x400204a0
 8009718:	400204b8 	.word	0x400204b8
 800971c:	58025408 	.word	0x58025408
 8009720:	5802541c 	.word	0x5802541c
 8009724:	58025430 	.word	0x58025430
 8009728:	58025444 	.word	0x58025444
 800972c:	58025458 	.word	0x58025458
 8009730:	5802546c 	.word	0x5802546c
 8009734:	58025480 	.word	0x58025480
 8009738:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	f003 0320 	and.w	r3, r3, #32
 8009742:	2b00      	cmp	r3, #0
 8009744:	d160      	bne.n	8009808 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	4a7f      	ldr	r2, [pc, #508]	@ (8009948 <HAL_DMA_IRQHandler+0xc74>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d04a      	beq.n	80097e6 <HAL_DMA_IRQHandler+0xb12>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a7d      	ldr	r2, [pc, #500]	@ (800994c <HAL_DMA_IRQHandler+0xc78>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d045      	beq.n	80097e6 <HAL_DMA_IRQHandler+0xb12>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4a7c      	ldr	r2, [pc, #496]	@ (8009950 <HAL_DMA_IRQHandler+0xc7c>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d040      	beq.n	80097e6 <HAL_DMA_IRQHandler+0xb12>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	4a7a      	ldr	r2, [pc, #488]	@ (8009954 <HAL_DMA_IRQHandler+0xc80>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d03b      	beq.n	80097e6 <HAL_DMA_IRQHandler+0xb12>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	4a79      	ldr	r2, [pc, #484]	@ (8009958 <HAL_DMA_IRQHandler+0xc84>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d036      	beq.n	80097e6 <HAL_DMA_IRQHandler+0xb12>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4a77      	ldr	r2, [pc, #476]	@ (800995c <HAL_DMA_IRQHandler+0xc88>)
 800977e:	4293      	cmp	r3, r2
 8009780:	d031      	beq.n	80097e6 <HAL_DMA_IRQHandler+0xb12>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4a76      	ldr	r2, [pc, #472]	@ (8009960 <HAL_DMA_IRQHandler+0xc8c>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d02c      	beq.n	80097e6 <HAL_DMA_IRQHandler+0xb12>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a74      	ldr	r2, [pc, #464]	@ (8009964 <HAL_DMA_IRQHandler+0xc90>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d027      	beq.n	80097e6 <HAL_DMA_IRQHandler+0xb12>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a73      	ldr	r2, [pc, #460]	@ (8009968 <HAL_DMA_IRQHandler+0xc94>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d022      	beq.n	80097e6 <HAL_DMA_IRQHandler+0xb12>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4a71      	ldr	r2, [pc, #452]	@ (800996c <HAL_DMA_IRQHandler+0xc98>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d01d      	beq.n	80097e6 <HAL_DMA_IRQHandler+0xb12>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4a70      	ldr	r2, [pc, #448]	@ (8009970 <HAL_DMA_IRQHandler+0xc9c>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d018      	beq.n	80097e6 <HAL_DMA_IRQHandler+0xb12>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4a6e      	ldr	r2, [pc, #440]	@ (8009974 <HAL_DMA_IRQHandler+0xca0>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d013      	beq.n	80097e6 <HAL_DMA_IRQHandler+0xb12>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	4a6d      	ldr	r2, [pc, #436]	@ (8009978 <HAL_DMA_IRQHandler+0xca4>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d00e      	beq.n	80097e6 <HAL_DMA_IRQHandler+0xb12>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	4a6b      	ldr	r2, [pc, #428]	@ (800997c <HAL_DMA_IRQHandler+0xca8>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d009      	beq.n	80097e6 <HAL_DMA_IRQHandler+0xb12>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4a6a      	ldr	r2, [pc, #424]	@ (8009980 <HAL_DMA_IRQHandler+0xcac>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d004      	beq.n	80097e6 <HAL_DMA_IRQHandler+0xb12>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a68      	ldr	r2, [pc, #416]	@ (8009984 <HAL_DMA_IRQHandler+0xcb0>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d108      	bne.n	80097f8 <HAL_DMA_IRQHandler+0xb24>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f022 0208 	bic.w	r2, r2, #8
 80097f4:	601a      	str	r2, [r3, #0]
 80097f6:	e007      	b.n	8009808 <HAL_DMA_IRQHandler+0xb34>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	681a      	ldr	r2, [r3, #0]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f022 0204 	bic.w	r2, r2, #4
 8009806:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800980c:	2b00      	cmp	r3, #0
 800980e:	f000 8165 	beq.w	8009adc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800981a:	e15f      	b.n	8009adc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009820:	f003 031f 	and.w	r3, r3, #31
 8009824:	2202      	movs	r2, #2
 8009826:	409a      	lsls	r2, r3
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	4013      	ands	r3, r2
 800982c:	2b00      	cmp	r3, #0
 800982e:	f000 80c5 	beq.w	80099bc <HAL_DMA_IRQHandler+0xce8>
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	f003 0302 	and.w	r3, r3, #2
 8009838:	2b00      	cmp	r3, #0
 800983a:	f000 80bf 	beq.w	80099bc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009842:	f003 031f 	and.w	r3, r3, #31
 8009846:	2202      	movs	r2, #2
 8009848:	409a      	lsls	r2, r3
 800984a:	69fb      	ldr	r3, [r7, #28]
 800984c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009854:	2b00      	cmp	r3, #0
 8009856:	d018      	beq.n	800988a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800985e:	2b00      	cmp	r3, #0
 8009860:	d109      	bne.n	8009876 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009866:	2b00      	cmp	r3, #0
 8009868:	f000 813a 	beq.w	8009ae0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009874:	e134      	b.n	8009ae0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800987a:	2b00      	cmp	r3, #0
 800987c:	f000 8130 	beq.w	8009ae0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009888:	e12a      	b.n	8009ae0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	f003 0320 	and.w	r3, r3, #32
 8009890:	2b00      	cmp	r3, #0
 8009892:	f040 8089 	bne.w	80099a8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a2b      	ldr	r2, [pc, #172]	@ (8009948 <HAL_DMA_IRQHandler+0xc74>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d04a      	beq.n	8009936 <HAL_DMA_IRQHandler+0xc62>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4a29      	ldr	r2, [pc, #164]	@ (800994c <HAL_DMA_IRQHandler+0xc78>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d045      	beq.n	8009936 <HAL_DMA_IRQHandler+0xc62>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4a28      	ldr	r2, [pc, #160]	@ (8009950 <HAL_DMA_IRQHandler+0xc7c>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d040      	beq.n	8009936 <HAL_DMA_IRQHandler+0xc62>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4a26      	ldr	r2, [pc, #152]	@ (8009954 <HAL_DMA_IRQHandler+0xc80>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d03b      	beq.n	8009936 <HAL_DMA_IRQHandler+0xc62>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4a25      	ldr	r2, [pc, #148]	@ (8009958 <HAL_DMA_IRQHandler+0xc84>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d036      	beq.n	8009936 <HAL_DMA_IRQHandler+0xc62>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4a23      	ldr	r2, [pc, #140]	@ (800995c <HAL_DMA_IRQHandler+0xc88>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d031      	beq.n	8009936 <HAL_DMA_IRQHandler+0xc62>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4a22      	ldr	r2, [pc, #136]	@ (8009960 <HAL_DMA_IRQHandler+0xc8c>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d02c      	beq.n	8009936 <HAL_DMA_IRQHandler+0xc62>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4a20      	ldr	r2, [pc, #128]	@ (8009964 <HAL_DMA_IRQHandler+0xc90>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d027      	beq.n	8009936 <HAL_DMA_IRQHandler+0xc62>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4a1f      	ldr	r2, [pc, #124]	@ (8009968 <HAL_DMA_IRQHandler+0xc94>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d022      	beq.n	8009936 <HAL_DMA_IRQHandler+0xc62>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4a1d      	ldr	r2, [pc, #116]	@ (800996c <HAL_DMA_IRQHandler+0xc98>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d01d      	beq.n	8009936 <HAL_DMA_IRQHandler+0xc62>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4a1c      	ldr	r2, [pc, #112]	@ (8009970 <HAL_DMA_IRQHandler+0xc9c>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d018      	beq.n	8009936 <HAL_DMA_IRQHandler+0xc62>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	4a1a      	ldr	r2, [pc, #104]	@ (8009974 <HAL_DMA_IRQHandler+0xca0>)
 800990a:	4293      	cmp	r3, r2
 800990c:	d013      	beq.n	8009936 <HAL_DMA_IRQHandler+0xc62>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4a19      	ldr	r2, [pc, #100]	@ (8009978 <HAL_DMA_IRQHandler+0xca4>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d00e      	beq.n	8009936 <HAL_DMA_IRQHandler+0xc62>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4a17      	ldr	r2, [pc, #92]	@ (800997c <HAL_DMA_IRQHandler+0xca8>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d009      	beq.n	8009936 <HAL_DMA_IRQHandler+0xc62>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	4a16      	ldr	r2, [pc, #88]	@ (8009980 <HAL_DMA_IRQHandler+0xcac>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d004      	beq.n	8009936 <HAL_DMA_IRQHandler+0xc62>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a14      	ldr	r2, [pc, #80]	@ (8009984 <HAL_DMA_IRQHandler+0xcb0>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d128      	bne.n	8009988 <HAL_DMA_IRQHandler+0xcb4>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f022 0214 	bic.w	r2, r2, #20
 8009944:	601a      	str	r2, [r3, #0]
 8009946:	e027      	b.n	8009998 <HAL_DMA_IRQHandler+0xcc4>
 8009948:	40020010 	.word	0x40020010
 800994c:	40020028 	.word	0x40020028
 8009950:	40020040 	.word	0x40020040
 8009954:	40020058 	.word	0x40020058
 8009958:	40020070 	.word	0x40020070
 800995c:	40020088 	.word	0x40020088
 8009960:	400200a0 	.word	0x400200a0
 8009964:	400200b8 	.word	0x400200b8
 8009968:	40020410 	.word	0x40020410
 800996c:	40020428 	.word	0x40020428
 8009970:	40020440 	.word	0x40020440
 8009974:	40020458 	.word	0x40020458
 8009978:	40020470 	.word	0x40020470
 800997c:	40020488 	.word	0x40020488
 8009980:	400204a0 	.word	0x400204a0
 8009984:	400204b8 	.word	0x400204b8
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	681a      	ldr	r2, [r3, #0]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f022 020a 	bic.w	r2, r2, #10
 8009996:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2201      	movs	r2, #1
 800999c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2200      	movs	r2, #0
 80099a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	f000 8097 	beq.w	8009ae0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80099ba:	e091      	b.n	8009ae0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80099c0:	f003 031f 	and.w	r3, r3, #31
 80099c4:	2208      	movs	r2, #8
 80099c6:	409a      	lsls	r2, r3
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	4013      	ands	r3, r2
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	f000 8088 	beq.w	8009ae2 <HAL_DMA_IRQHandler+0xe0e>
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	f003 0308 	and.w	r3, r3, #8
 80099d8:	2b00      	cmp	r3, #0
 80099da:	f000 8082 	beq.w	8009ae2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4a41      	ldr	r2, [pc, #260]	@ (8009ae8 <HAL_DMA_IRQHandler+0xe14>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d04a      	beq.n	8009a7e <HAL_DMA_IRQHandler+0xdaa>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a3f      	ldr	r2, [pc, #252]	@ (8009aec <HAL_DMA_IRQHandler+0xe18>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d045      	beq.n	8009a7e <HAL_DMA_IRQHandler+0xdaa>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4a3e      	ldr	r2, [pc, #248]	@ (8009af0 <HAL_DMA_IRQHandler+0xe1c>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d040      	beq.n	8009a7e <HAL_DMA_IRQHandler+0xdaa>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4a3c      	ldr	r2, [pc, #240]	@ (8009af4 <HAL_DMA_IRQHandler+0xe20>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d03b      	beq.n	8009a7e <HAL_DMA_IRQHandler+0xdaa>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4a3b      	ldr	r2, [pc, #236]	@ (8009af8 <HAL_DMA_IRQHandler+0xe24>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d036      	beq.n	8009a7e <HAL_DMA_IRQHandler+0xdaa>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4a39      	ldr	r2, [pc, #228]	@ (8009afc <HAL_DMA_IRQHandler+0xe28>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d031      	beq.n	8009a7e <HAL_DMA_IRQHandler+0xdaa>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	4a38      	ldr	r2, [pc, #224]	@ (8009b00 <HAL_DMA_IRQHandler+0xe2c>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d02c      	beq.n	8009a7e <HAL_DMA_IRQHandler+0xdaa>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4a36      	ldr	r2, [pc, #216]	@ (8009b04 <HAL_DMA_IRQHandler+0xe30>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d027      	beq.n	8009a7e <HAL_DMA_IRQHandler+0xdaa>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	4a35      	ldr	r2, [pc, #212]	@ (8009b08 <HAL_DMA_IRQHandler+0xe34>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d022      	beq.n	8009a7e <HAL_DMA_IRQHandler+0xdaa>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	4a33      	ldr	r2, [pc, #204]	@ (8009b0c <HAL_DMA_IRQHandler+0xe38>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d01d      	beq.n	8009a7e <HAL_DMA_IRQHandler+0xdaa>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	4a32      	ldr	r2, [pc, #200]	@ (8009b10 <HAL_DMA_IRQHandler+0xe3c>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d018      	beq.n	8009a7e <HAL_DMA_IRQHandler+0xdaa>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4a30      	ldr	r2, [pc, #192]	@ (8009b14 <HAL_DMA_IRQHandler+0xe40>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d013      	beq.n	8009a7e <HAL_DMA_IRQHandler+0xdaa>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4a2f      	ldr	r2, [pc, #188]	@ (8009b18 <HAL_DMA_IRQHandler+0xe44>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d00e      	beq.n	8009a7e <HAL_DMA_IRQHandler+0xdaa>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4a2d      	ldr	r2, [pc, #180]	@ (8009b1c <HAL_DMA_IRQHandler+0xe48>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d009      	beq.n	8009a7e <HAL_DMA_IRQHandler+0xdaa>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4a2c      	ldr	r2, [pc, #176]	@ (8009b20 <HAL_DMA_IRQHandler+0xe4c>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d004      	beq.n	8009a7e <HAL_DMA_IRQHandler+0xdaa>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a2a      	ldr	r2, [pc, #168]	@ (8009b24 <HAL_DMA_IRQHandler+0xe50>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d108      	bne.n	8009a90 <HAL_DMA_IRQHandler+0xdbc>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f022 021c 	bic.w	r2, r2, #28
 8009a8c:	601a      	str	r2, [r3, #0]
 8009a8e:	e007      	b.n	8009aa0 <HAL_DMA_IRQHandler+0xdcc>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	681a      	ldr	r2, [r3, #0]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f022 020e 	bic.w	r2, r2, #14
 8009a9e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009aa4:	f003 031f 	and.w	r3, r3, #31
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	409a      	lsls	r2, r3
 8009aac:	69fb      	ldr	r3, [r7, #28]
 8009aae:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2201      	movs	r2, #1
 8009aba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d009      	beq.n	8009ae2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	4798      	blx	r3
 8009ad6:	e004      	b.n	8009ae2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8009ad8:	bf00      	nop
 8009ada:	e002      	b.n	8009ae2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009adc:	bf00      	nop
 8009ade:	e000      	b.n	8009ae2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009ae0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009ae2:	3728      	adds	r7, #40	@ 0x28
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}
 8009ae8:	40020010 	.word	0x40020010
 8009aec:	40020028 	.word	0x40020028
 8009af0:	40020040 	.word	0x40020040
 8009af4:	40020058 	.word	0x40020058
 8009af8:	40020070 	.word	0x40020070
 8009afc:	40020088 	.word	0x40020088
 8009b00:	400200a0 	.word	0x400200a0
 8009b04:	400200b8 	.word	0x400200b8
 8009b08:	40020410 	.word	0x40020410
 8009b0c:	40020428 	.word	0x40020428
 8009b10:	40020440 	.word	0x40020440
 8009b14:	40020458 	.word	0x40020458
 8009b18:	40020470 	.word	0x40020470
 8009b1c:	40020488 	.word	0x40020488
 8009b20:	400204a0 	.word	0x400204a0
 8009b24:	400204b8 	.word	0x400204b8

08009b28 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b087      	sub	sp, #28
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	60f8      	str	r0, [r7, #12]
 8009b30:	60b9      	str	r1, [r7, #8]
 8009b32:	607a      	str	r2, [r7, #4]
 8009b34:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b3a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b40:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4a7f      	ldr	r2, [pc, #508]	@ (8009d44 <DMA_SetConfig+0x21c>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d072      	beq.n	8009c32 <DMA_SetConfig+0x10a>
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	4a7d      	ldr	r2, [pc, #500]	@ (8009d48 <DMA_SetConfig+0x220>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d06d      	beq.n	8009c32 <DMA_SetConfig+0x10a>
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	4a7c      	ldr	r2, [pc, #496]	@ (8009d4c <DMA_SetConfig+0x224>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d068      	beq.n	8009c32 <DMA_SetConfig+0x10a>
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a7a      	ldr	r2, [pc, #488]	@ (8009d50 <DMA_SetConfig+0x228>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d063      	beq.n	8009c32 <DMA_SetConfig+0x10a>
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4a79      	ldr	r2, [pc, #484]	@ (8009d54 <DMA_SetConfig+0x22c>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d05e      	beq.n	8009c32 <DMA_SetConfig+0x10a>
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	4a77      	ldr	r2, [pc, #476]	@ (8009d58 <DMA_SetConfig+0x230>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d059      	beq.n	8009c32 <DMA_SetConfig+0x10a>
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	4a76      	ldr	r2, [pc, #472]	@ (8009d5c <DMA_SetConfig+0x234>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d054      	beq.n	8009c32 <DMA_SetConfig+0x10a>
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a74      	ldr	r2, [pc, #464]	@ (8009d60 <DMA_SetConfig+0x238>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d04f      	beq.n	8009c32 <DMA_SetConfig+0x10a>
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4a73      	ldr	r2, [pc, #460]	@ (8009d64 <DMA_SetConfig+0x23c>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d04a      	beq.n	8009c32 <DMA_SetConfig+0x10a>
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a71      	ldr	r2, [pc, #452]	@ (8009d68 <DMA_SetConfig+0x240>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d045      	beq.n	8009c32 <DMA_SetConfig+0x10a>
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4a70      	ldr	r2, [pc, #448]	@ (8009d6c <DMA_SetConfig+0x244>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d040      	beq.n	8009c32 <DMA_SetConfig+0x10a>
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	4a6e      	ldr	r2, [pc, #440]	@ (8009d70 <DMA_SetConfig+0x248>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d03b      	beq.n	8009c32 <DMA_SetConfig+0x10a>
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	4a6d      	ldr	r2, [pc, #436]	@ (8009d74 <DMA_SetConfig+0x24c>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d036      	beq.n	8009c32 <DMA_SetConfig+0x10a>
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4a6b      	ldr	r2, [pc, #428]	@ (8009d78 <DMA_SetConfig+0x250>)
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d031      	beq.n	8009c32 <DMA_SetConfig+0x10a>
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	4a6a      	ldr	r2, [pc, #424]	@ (8009d7c <DMA_SetConfig+0x254>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d02c      	beq.n	8009c32 <DMA_SetConfig+0x10a>
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4a68      	ldr	r2, [pc, #416]	@ (8009d80 <DMA_SetConfig+0x258>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d027      	beq.n	8009c32 <DMA_SetConfig+0x10a>
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	4a67      	ldr	r2, [pc, #412]	@ (8009d84 <DMA_SetConfig+0x25c>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d022      	beq.n	8009c32 <DMA_SetConfig+0x10a>
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a65      	ldr	r2, [pc, #404]	@ (8009d88 <DMA_SetConfig+0x260>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d01d      	beq.n	8009c32 <DMA_SetConfig+0x10a>
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4a64      	ldr	r2, [pc, #400]	@ (8009d8c <DMA_SetConfig+0x264>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d018      	beq.n	8009c32 <DMA_SetConfig+0x10a>
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a62      	ldr	r2, [pc, #392]	@ (8009d90 <DMA_SetConfig+0x268>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d013      	beq.n	8009c32 <DMA_SetConfig+0x10a>
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	4a61      	ldr	r2, [pc, #388]	@ (8009d94 <DMA_SetConfig+0x26c>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d00e      	beq.n	8009c32 <DMA_SetConfig+0x10a>
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4a5f      	ldr	r2, [pc, #380]	@ (8009d98 <DMA_SetConfig+0x270>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d009      	beq.n	8009c32 <DMA_SetConfig+0x10a>
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	4a5e      	ldr	r2, [pc, #376]	@ (8009d9c <DMA_SetConfig+0x274>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d004      	beq.n	8009c32 <DMA_SetConfig+0x10a>
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4a5c      	ldr	r2, [pc, #368]	@ (8009da0 <DMA_SetConfig+0x278>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d101      	bne.n	8009c36 <DMA_SetConfig+0x10e>
 8009c32:	2301      	movs	r3, #1
 8009c34:	e000      	b.n	8009c38 <DMA_SetConfig+0x110>
 8009c36:	2300      	movs	r3, #0
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d00d      	beq.n	8009c58 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c40:	68fa      	ldr	r2, [r7, #12]
 8009c42:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8009c44:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d004      	beq.n	8009c58 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c52:	68fa      	ldr	r2, [r7, #12]
 8009c54:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009c56:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a39      	ldr	r2, [pc, #228]	@ (8009d44 <DMA_SetConfig+0x21c>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d04a      	beq.n	8009cf8 <DMA_SetConfig+0x1d0>
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a38      	ldr	r2, [pc, #224]	@ (8009d48 <DMA_SetConfig+0x220>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d045      	beq.n	8009cf8 <DMA_SetConfig+0x1d0>
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a36      	ldr	r2, [pc, #216]	@ (8009d4c <DMA_SetConfig+0x224>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d040      	beq.n	8009cf8 <DMA_SetConfig+0x1d0>
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4a35      	ldr	r2, [pc, #212]	@ (8009d50 <DMA_SetConfig+0x228>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d03b      	beq.n	8009cf8 <DMA_SetConfig+0x1d0>
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4a33      	ldr	r2, [pc, #204]	@ (8009d54 <DMA_SetConfig+0x22c>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d036      	beq.n	8009cf8 <DMA_SetConfig+0x1d0>
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4a32      	ldr	r2, [pc, #200]	@ (8009d58 <DMA_SetConfig+0x230>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d031      	beq.n	8009cf8 <DMA_SetConfig+0x1d0>
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a30      	ldr	r2, [pc, #192]	@ (8009d5c <DMA_SetConfig+0x234>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d02c      	beq.n	8009cf8 <DMA_SetConfig+0x1d0>
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4a2f      	ldr	r2, [pc, #188]	@ (8009d60 <DMA_SetConfig+0x238>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d027      	beq.n	8009cf8 <DMA_SetConfig+0x1d0>
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4a2d      	ldr	r2, [pc, #180]	@ (8009d64 <DMA_SetConfig+0x23c>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d022      	beq.n	8009cf8 <DMA_SetConfig+0x1d0>
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4a2c      	ldr	r2, [pc, #176]	@ (8009d68 <DMA_SetConfig+0x240>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d01d      	beq.n	8009cf8 <DMA_SetConfig+0x1d0>
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4a2a      	ldr	r2, [pc, #168]	@ (8009d6c <DMA_SetConfig+0x244>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d018      	beq.n	8009cf8 <DMA_SetConfig+0x1d0>
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4a29      	ldr	r2, [pc, #164]	@ (8009d70 <DMA_SetConfig+0x248>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d013      	beq.n	8009cf8 <DMA_SetConfig+0x1d0>
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a27      	ldr	r2, [pc, #156]	@ (8009d74 <DMA_SetConfig+0x24c>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d00e      	beq.n	8009cf8 <DMA_SetConfig+0x1d0>
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4a26      	ldr	r2, [pc, #152]	@ (8009d78 <DMA_SetConfig+0x250>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d009      	beq.n	8009cf8 <DMA_SetConfig+0x1d0>
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4a24      	ldr	r2, [pc, #144]	@ (8009d7c <DMA_SetConfig+0x254>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d004      	beq.n	8009cf8 <DMA_SetConfig+0x1d0>
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4a23      	ldr	r2, [pc, #140]	@ (8009d80 <DMA_SetConfig+0x258>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d101      	bne.n	8009cfc <DMA_SetConfig+0x1d4>
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	e000      	b.n	8009cfe <DMA_SetConfig+0x1d6>
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d059      	beq.n	8009db6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009d06:	f003 031f 	and.w	r3, r3, #31
 8009d0a:	223f      	movs	r2, #63	@ 0x3f
 8009d0c:	409a      	lsls	r2, r3
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	681a      	ldr	r2, [r3, #0]
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009d20:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	683a      	ldr	r2, [r7, #0]
 8009d28:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	689b      	ldr	r3, [r3, #8]
 8009d2e:	2b40      	cmp	r3, #64	@ 0x40
 8009d30:	d138      	bne.n	8009da4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	687a      	ldr	r2, [r7, #4]
 8009d38:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	68ba      	ldr	r2, [r7, #8]
 8009d40:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009d42:	e086      	b.n	8009e52 <DMA_SetConfig+0x32a>
 8009d44:	40020010 	.word	0x40020010
 8009d48:	40020028 	.word	0x40020028
 8009d4c:	40020040 	.word	0x40020040
 8009d50:	40020058 	.word	0x40020058
 8009d54:	40020070 	.word	0x40020070
 8009d58:	40020088 	.word	0x40020088
 8009d5c:	400200a0 	.word	0x400200a0
 8009d60:	400200b8 	.word	0x400200b8
 8009d64:	40020410 	.word	0x40020410
 8009d68:	40020428 	.word	0x40020428
 8009d6c:	40020440 	.word	0x40020440
 8009d70:	40020458 	.word	0x40020458
 8009d74:	40020470 	.word	0x40020470
 8009d78:	40020488 	.word	0x40020488
 8009d7c:	400204a0 	.word	0x400204a0
 8009d80:	400204b8 	.word	0x400204b8
 8009d84:	58025408 	.word	0x58025408
 8009d88:	5802541c 	.word	0x5802541c
 8009d8c:	58025430 	.word	0x58025430
 8009d90:	58025444 	.word	0x58025444
 8009d94:	58025458 	.word	0x58025458
 8009d98:	5802546c 	.word	0x5802546c
 8009d9c:	58025480 	.word	0x58025480
 8009da0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	68ba      	ldr	r2, [r7, #8]
 8009daa:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	687a      	ldr	r2, [r7, #4]
 8009db2:	60da      	str	r2, [r3, #12]
}
 8009db4:	e04d      	b.n	8009e52 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4a29      	ldr	r2, [pc, #164]	@ (8009e60 <DMA_SetConfig+0x338>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d022      	beq.n	8009e06 <DMA_SetConfig+0x2de>
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	4a27      	ldr	r2, [pc, #156]	@ (8009e64 <DMA_SetConfig+0x33c>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d01d      	beq.n	8009e06 <DMA_SetConfig+0x2de>
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	4a26      	ldr	r2, [pc, #152]	@ (8009e68 <DMA_SetConfig+0x340>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d018      	beq.n	8009e06 <DMA_SetConfig+0x2de>
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4a24      	ldr	r2, [pc, #144]	@ (8009e6c <DMA_SetConfig+0x344>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d013      	beq.n	8009e06 <DMA_SetConfig+0x2de>
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	4a23      	ldr	r2, [pc, #140]	@ (8009e70 <DMA_SetConfig+0x348>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d00e      	beq.n	8009e06 <DMA_SetConfig+0x2de>
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4a21      	ldr	r2, [pc, #132]	@ (8009e74 <DMA_SetConfig+0x34c>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d009      	beq.n	8009e06 <DMA_SetConfig+0x2de>
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4a20      	ldr	r2, [pc, #128]	@ (8009e78 <DMA_SetConfig+0x350>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d004      	beq.n	8009e06 <DMA_SetConfig+0x2de>
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4a1e      	ldr	r2, [pc, #120]	@ (8009e7c <DMA_SetConfig+0x354>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d101      	bne.n	8009e0a <DMA_SetConfig+0x2e2>
 8009e06:	2301      	movs	r3, #1
 8009e08:	e000      	b.n	8009e0c <DMA_SetConfig+0x2e4>
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d020      	beq.n	8009e52 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e14:	f003 031f 	and.w	r3, r3, #31
 8009e18:	2201      	movs	r2, #1
 8009e1a:	409a      	lsls	r2, r3
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	683a      	ldr	r2, [r7, #0]
 8009e26:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	689b      	ldr	r3, [r3, #8]
 8009e2c:	2b40      	cmp	r3, #64	@ 0x40
 8009e2e:	d108      	bne.n	8009e42 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	687a      	ldr	r2, [r7, #4]
 8009e36:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	68ba      	ldr	r2, [r7, #8]
 8009e3e:	60da      	str	r2, [r3, #12]
}
 8009e40:	e007      	b.n	8009e52 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	68ba      	ldr	r2, [r7, #8]
 8009e48:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	60da      	str	r2, [r3, #12]
}
 8009e52:	bf00      	nop
 8009e54:	371c      	adds	r7, #28
 8009e56:	46bd      	mov	sp, r7
 8009e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5c:	4770      	bx	lr
 8009e5e:	bf00      	nop
 8009e60:	58025408 	.word	0x58025408
 8009e64:	5802541c 	.word	0x5802541c
 8009e68:	58025430 	.word	0x58025430
 8009e6c:	58025444 	.word	0x58025444
 8009e70:	58025458 	.word	0x58025458
 8009e74:	5802546c 	.word	0x5802546c
 8009e78:	58025480 	.word	0x58025480
 8009e7c:	58025494 	.word	0x58025494

08009e80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b085      	sub	sp, #20
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a42      	ldr	r2, [pc, #264]	@ (8009f98 <DMA_CalcBaseAndBitshift+0x118>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d04a      	beq.n	8009f28 <DMA_CalcBaseAndBitshift+0xa8>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a41      	ldr	r2, [pc, #260]	@ (8009f9c <DMA_CalcBaseAndBitshift+0x11c>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d045      	beq.n	8009f28 <DMA_CalcBaseAndBitshift+0xa8>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4a3f      	ldr	r2, [pc, #252]	@ (8009fa0 <DMA_CalcBaseAndBitshift+0x120>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d040      	beq.n	8009f28 <DMA_CalcBaseAndBitshift+0xa8>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4a3e      	ldr	r2, [pc, #248]	@ (8009fa4 <DMA_CalcBaseAndBitshift+0x124>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d03b      	beq.n	8009f28 <DMA_CalcBaseAndBitshift+0xa8>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4a3c      	ldr	r2, [pc, #240]	@ (8009fa8 <DMA_CalcBaseAndBitshift+0x128>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d036      	beq.n	8009f28 <DMA_CalcBaseAndBitshift+0xa8>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4a3b      	ldr	r2, [pc, #236]	@ (8009fac <DMA_CalcBaseAndBitshift+0x12c>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d031      	beq.n	8009f28 <DMA_CalcBaseAndBitshift+0xa8>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4a39      	ldr	r2, [pc, #228]	@ (8009fb0 <DMA_CalcBaseAndBitshift+0x130>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d02c      	beq.n	8009f28 <DMA_CalcBaseAndBitshift+0xa8>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	4a38      	ldr	r2, [pc, #224]	@ (8009fb4 <DMA_CalcBaseAndBitshift+0x134>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d027      	beq.n	8009f28 <DMA_CalcBaseAndBitshift+0xa8>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	4a36      	ldr	r2, [pc, #216]	@ (8009fb8 <DMA_CalcBaseAndBitshift+0x138>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d022      	beq.n	8009f28 <DMA_CalcBaseAndBitshift+0xa8>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	4a35      	ldr	r2, [pc, #212]	@ (8009fbc <DMA_CalcBaseAndBitshift+0x13c>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d01d      	beq.n	8009f28 <DMA_CalcBaseAndBitshift+0xa8>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4a33      	ldr	r2, [pc, #204]	@ (8009fc0 <DMA_CalcBaseAndBitshift+0x140>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d018      	beq.n	8009f28 <DMA_CalcBaseAndBitshift+0xa8>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	4a32      	ldr	r2, [pc, #200]	@ (8009fc4 <DMA_CalcBaseAndBitshift+0x144>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d013      	beq.n	8009f28 <DMA_CalcBaseAndBitshift+0xa8>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	4a30      	ldr	r2, [pc, #192]	@ (8009fc8 <DMA_CalcBaseAndBitshift+0x148>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d00e      	beq.n	8009f28 <DMA_CalcBaseAndBitshift+0xa8>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	4a2f      	ldr	r2, [pc, #188]	@ (8009fcc <DMA_CalcBaseAndBitshift+0x14c>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d009      	beq.n	8009f28 <DMA_CalcBaseAndBitshift+0xa8>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4a2d      	ldr	r2, [pc, #180]	@ (8009fd0 <DMA_CalcBaseAndBitshift+0x150>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d004      	beq.n	8009f28 <DMA_CalcBaseAndBitshift+0xa8>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	4a2c      	ldr	r2, [pc, #176]	@ (8009fd4 <DMA_CalcBaseAndBitshift+0x154>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d101      	bne.n	8009f2c <DMA_CalcBaseAndBitshift+0xac>
 8009f28:	2301      	movs	r3, #1
 8009f2a:	e000      	b.n	8009f2e <DMA_CalcBaseAndBitshift+0xae>
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d024      	beq.n	8009f7c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	3b10      	subs	r3, #16
 8009f3a:	4a27      	ldr	r2, [pc, #156]	@ (8009fd8 <DMA_CalcBaseAndBitshift+0x158>)
 8009f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8009f40:	091b      	lsrs	r3, r3, #4
 8009f42:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f003 0307 	and.w	r3, r3, #7
 8009f4a:	4a24      	ldr	r2, [pc, #144]	@ (8009fdc <DMA_CalcBaseAndBitshift+0x15c>)
 8009f4c:	5cd3      	ldrb	r3, [r2, r3]
 8009f4e:	461a      	mov	r2, r3
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2b03      	cmp	r3, #3
 8009f58:	d908      	bls.n	8009f6c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	461a      	mov	r2, r3
 8009f60:	4b1f      	ldr	r3, [pc, #124]	@ (8009fe0 <DMA_CalcBaseAndBitshift+0x160>)
 8009f62:	4013      	ands	r3, r2
 8009f64:	1d1a      	adds	r2, r3, #4
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	659a      	str	r2, [r3, #88]	@ 0x58
 8009f6a:	e00d      	b.n	8009f88 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	461a      	mov	r2, r3
 8009f72:	4b1b      	ldr	r3, [pc, #108]	@ (8009fe0 <DMA_CalcBaseAndBitshift+0x160>)
 8009f74:	4013      	ands	r3, r2
 8009f76:	687a      	ldr	r2, [r7, #4]
 8009f78:	6593      	str	r3, [r2, #88]	@ 0x58
 8009f7a:	e005      	b.n	8009f88 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3714      	adds	r7, #20
 8009f90:	46bd      	mov	sp, r7
 8009f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f96:	4770      	bx	lr
 8009f98:	40020010 	.word	0x40020010
 8009f9c:	40020028 	.word	0x40020028
 8009fa0:	40020040 	.word	0x40020040
 8009fa4:	40020058 	.word	0x40020058
 8009fa8:	40020070 	.word	0x40020070
 8009fac:	40020088 	.word	0x40020088
 8009fb0:	400200a0 	.word	0x400200a0
 8009fb4:	400200b8 	.word	0x400200b8
 8009fb8:	40020410 	.word	0x40020410
 8009fbc:	40020428 	.word	0x40020428
 8009fc0:	40020440 	.word	0x40020440
 8009fc4:	40020458 	.word	0x40020458
 8009fc8:	40020470 	.word	0x40020470
 8009fcc:	40020488 	.word	0x40020488
 8009fd0:	400204a0 	.word	0x400204a0
 8009fd4:	400204b8 	.word	0x400204b8
 8009fd8:	aaaaaaab 	.word	0xaaaaaaab
 8009fdc:	0801530c 	.word	0x0801530c
 8009fe0:	fffffc00 	.word	0xfffffc00

08009fe4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b085      	sub	sp, #20
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009fec:	2300      	movs	r3, #0
 8009fee:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	699b      	ldr	r3, [r3, #24]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d120      	bne.n	800a03a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ffc:	2b03      	cmp	r3, #3
 8009ffe:	d858      	bhi.n	800a0b2 <DMA_CheckFifoParam+0xce>
 800a000:	a201      	add	r2, pc, #4	@ (adr r2, 800a008 <DMA_CheckFifoParam+0x24>)
 800a002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a006:	bf00      	nop
 800a008:	0800a019 	.word	0x0800a019
 800a00c:	0800a02b 	.word	0x0800a02b
 800a010:	0800a019 	.word	0x0800a019
 800a014:	0800a0b3 	.word	0x0800a0b3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a01c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a020:	2b00      	cmp	r3, #0
 800a022:	d048      	beq.n	800a0b6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800a024:	2301      	movs	r3, #1
 800a026:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a028:	e045      	b.n	800a0b6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a02e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800a032:	d142      	bne.n	800a0ba <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800a034:	2301      	movs	r3, #1
 800a036:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a038:	e03f      	b.n	800a0ba <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	699b      	ldr	r3, [r3, #24]
 800a03e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a042:	d123      	bne.n	800a08c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a048:	2b03      	cmp	r3, #3
 800a04a:	d838      	bhi.n	800a0be <DMA_CheckFifoParam+0xda>
 800a04c:	a201      	add	r2, pc, #4	@ (adr r2, 800a054 <DMA_CheckFifoParam+0x70>)
 800a04e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a052:	bf00      	nop
 800a054:	0800a065 	.word	0x0800a065
 800a058:	0800a06b 	.word	0x0800a06b
 800a05c:	0800a065 	.word	0x0800a065
 800a060:	0800a07d 	.word	0x0800a07d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800a064:	2301      	movs	r3, #1
 800a066:	73fb      	strb	r3, [r7, #15]
        break;
 800a068:	e030      	b.n	800a0cc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a06e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a072:	2b00      	cmp	r3, #0
 800a074:	d025      	beq.n	800a0c2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800a076:	2301      	movs	r3, #1
 800a078:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a07a:	e022      	b.n	800a0c2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a080:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800a084:	d11f      	bne.n	800a0c6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800a086:	2301      	movs	r3, #1
 800a088:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a08a:	e01c      	b.n	800a0c6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a090:	2b02      	cmp	r3, #2
 800a092:	d902      	bls.n	800a09a <DMA_CheckFifoParam+0xb6>
 800a094:	2b03      	cmp	r3, #3
 800a096:	d003      	beq.n	800a0a0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800a098:	e018      	b.n	800a0cc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800a09a:	2301      	movs	r3, #1
 800a09c:	73fb      	strb	r3, [r7, #15]
        break;
 800a09e:	e015      	b.n	800a0cc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d00e      	beq.n	800a0ca <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	73fb      	strb	r3, [r7, #15]
    break;
 800a0b0:	e00b      	b.n	800a0ca <DMA_CheckFifoParam+0xe6>
        break;
 800a0b2:	bf00      	nop
 800a0b4:	e00a      	b.n	800a0cc <DMA_CheckFifoParam+0xe8>
        break;
 800a0b6:	bf00      	nop
 800a0b8:	e008      	b.n	800a0cc <DMA_CheckFifoParam+0xe8>
        break;
 800a0ba:	bf00      	nop
 800a0bc:	e006      	b.n	800a0cc <DMA_CheckFifoParam+0xe8>
        break;
 800a0be:	bf00      	nop
 800a0c0:	e004      	b.n	800a0cc <DMA_CheckFifoParam+0xe8>
        break;
 800a0c2:	bf00      	nop
 800a0c4:	e002      	b.n	800a0cc <DMA_CheckFifoParam+0xe8>
        break;
 800a0c6:	bf00      	nop
 800a0c8:	e000      	b.n	800a0cc <DMA_CheckFifoParam+0xe8>
    break;
 800a0ca:	bf00      	nop
    }
  }

  return status;
 800a0cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3714      	adds	r7, #20
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr
 800a0da:	bf00      	nop

0800a0dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b085      	sub	sp, #20
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	4a38      	ldr	r2, [pc, #224]	@ (800a1d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d022      	beq.n	800a13a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4a36      	ldr	r2, [pc, #216]	@ (800a1d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d01d      	beq.n	800a13a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4a35      	ldr	r2, [pc, #212]	@ (800a1d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d018      	beq.n	800a13a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	4a33      	ldr	r2, [pc, #204]	@ (800a1dc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800a10e:	4293      	cmp	r3, r2
 800a110:	d013      	beq.n	800a13a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	4a32      	ldr	r2, [pc, #200]	@ (800a1e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d00e      	beq.n	800a13a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	4a30      	ldr	r2, [pc, #192]	@ (800a1e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d009      	beq.n	800a13a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	4a2f      	ldr	r2, [pc, #188]	@ (800a1e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d004      	beq.n	800a13a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a2d      	ldr	r2, [pc, #180]	@ (800a1ec <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d101      	bne.n	800a13e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800a13a:	2301      	movs	r3, #1
 800a13c:	e000      	b.n	800a140 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800a13e:	2300      	movs	r3, #0
 800a140:	2b00      	cmp	r3, #0
 800a142:	d01a      	beq.n	800a17a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	b2db      	uxtb	r3, r3
 800a14a:	3b08      	subs	r3, #8
 800a14c:	4a28      	ldr	r2, [pc, #160]	@ (800a1f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800a14e:	fba2 2303 	umull	r2, r3, r2, r3
 800a152:	091b      	lsrs	r3, r3, #4
 800a154:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800a156:	68fa      	ldr	r2, [r7, #12]
 800a158:	4b26      	ldr	r3, [pc, #152]	@ (800a1f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800a15a:	4413      	add	r3, r2
 800a15c:	009b      	lsls	r3, r3, #2
 800a15e:	461a      	mov	r2, r3
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	4a24      	ldr	r2, [pc, #144]	@ (800a1f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800a168:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f003 031f 	and.w	r3, r3, #31
 800a170:	2201      	movs	r2, #1
 800a172:	409a      	lsls	r2, r3
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800a178:	e024      	b.n	800a1c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	b2db      	uxtb	r3, r3
 800a180:	3b10      	subs	r3, #16
 800a182:	4a1e      	ldr	r2, [pc, #120]	@ (800a1fc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800a184:	fba2 2303 	umull	r2, r3, r2, r3
 800a188:	091b      	lsrs	r3, r3, #4
 800a18a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	4a1c      	ldr	r2, [pc, #112]	@ (800a200 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800a190:	4293      	cmp	r3, r2
 800a192:	d806      	bhi.n	800a1a2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	4a1b      	ldr	r2, [pc, #108]	@ (800a204 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d902      	bls.n	800a1a2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	3308      	adds	r3, #8
 800a1a0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800a1a2:	68fa      	ldr	r2, [r7, #12]
 800a1a4:	4b18      	ldr	r3, [pc, #96]	@ (800a208 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800a1a6:	4413      	add	r3, r2
 800a1a8:	009b      	lsls	r3, r3, #2
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	4a16      	ldr	r2, [pc, #88]	@ (800a20c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800a1b4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	f003 031f 	and.w	r3, r3, #31
 800a1bc:	2201      	movs	r2, #1
 800a1be:	409a      	lsls	r2, r3
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a1c4:	bf00      	nop
 800a1c6:	3714      	adds	r7, #20
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr
 800a1d0:	58025408 	.word	0x58025408
 800a1d4:	5802541c 	.word	0x5802541c
 800a1d8:	58025430 	.word	0x58025430
 800a1dc:	58025444 	.word	0x58025444
 800a1e0:	58025458 	.word	0x58025458
 800a1e4:	5802546c 	.word	0x5802546c
 800a1e8:	58025480 	.word	0x58025480
 800a1ec:	58025494 	.word	0x58025494
 800a1f0:	cccccccd 	.word	0xcccccccd
 800a1f4:	16009600 	.word	0x16009600
 800a1f8:	58025880 	.word	0x58025880
 800a1fc:	aaaaaaab 	.word	0xaaaaaaab
 800a200:	400204b8 	.word	0x400204b8
 800a204:	4002040f 	.word	0x4002040f
 800a208:	10008200 	.word	0x10008200
 800a20c:	40020880 	.word	0x40020880

0800a210 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a210:	b480      	push	{r7}
 800a212:	b085      	sub	sp, #20
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	685b      	ldr	r3, [r3, #4]
 800a21c:	b2db      	uxtb	r3, r3
 800a21e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d04a      	beq.n	800a2bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2b08      	cmp	r3, #8
 800a22a:	d847      	bhi.n	800a2bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	4a25      	ldr	r2, [pc, #148]	@ (800a2c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d022      	beq.n	800a27c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4a24      	ldr	r2, [pc, #144]	@ (800a2cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d01d      	beq.n	800a27c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4a22      	ldr	r2, [pc, #136]	@ (800a2d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d018      	beq.n	800a27c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	4a21      	ldr	r2, [pc, #132]	@ (800a2d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d013      	beq.n	800a27c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4a1f      	ldr	r2, [pc, #124]	@ (800a2d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d00e      	beq.n	800a27c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4a1e      	ldr	r2, [pc, #120]	@ (800a2dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d009      	beq.n	800a27c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	4a1c      	ldr	r2, [pc, #112]	@ (800a2e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d004      	beq.n	800a27c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4a1b      	ldr	r2, [pc, #108]	@ (800a2e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d101      	bne.n	800a280 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800a27c:	2301      	movs	r3, #1
 800a27e:	e000      	b.n	800a282 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800a280:	2300      	movs	r3, #0
 800a282:	2b00      	cmp	r3, #0
 800a284:	d00a      	beq.n	800a29c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800a286:	68fa      	ldr	r2, [r7, #12]
 800a288:	4b17      	ldr	r3, [pc, #92]	@ (800a2e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800a28a:	4413      	add	r3, r2
 800a28c:	009b      	lsls	r3, r3, #2
 800a28e:	461a      	mov	r2, r3
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	4a15      	ldr	r2, [pc, #84]	@ (800a2ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800a298:	671a      	str	r2, [r3, #112]	@ 0x70
 800a29a:	e009      	b.n	800a2b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a29c:	68fa      	ldr	r2, [r7, #12]
 800a29e:	4b14      	ldr	r3, [pc, #80]	@ (800a2f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800a2a0:	4413      	add	r3, r2
 800a2a2:	009b      	lsls	r3, r3, #2
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	4a11      	ldr	r2, [pc, #68]	@ (800a2f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800a2ae:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	3b01      	subs	r3, #1
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	409a      	lsls	r2, r3
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800a2bc:	bf00      	nop
 800a2be:	3714      	adds	r7, #20
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c6:	4770      	bx	lr
 800a2c8:	58025408 	.word	0x58025408
 800a2cc:	5802541c 	.word	0x5802541c
 800a2d0:	58025430 	.word	0x58025430
 800a2d4:	58025444 	.word	0x58025444
 800a2d8:	58025458 	.word	0x58025458
 800a2dc:	5802546c 	.word	0x5802546c
 800a2e0:	58025480 	.word	0x58025480
 800a2e4:	58025494 	.word	0x58025494
 800a2e8:	1600963f 	.word	0x1600963f
 800a2ec:	58025940 	.word	0x58025940
 800a2f0:	1000823f 	.word	0x1000823f
 800a2f4:	40020940 	.word	0x40020940

0800a2f8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b084      	sub	sp, #16
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d101      	bne.n	800a30a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800a306:	2301      	movs	r3, #1
 800a308:	e0cf      	b.n	800a4aa <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a310:	2b00      	cmp	r3, #0
 800a312:	d106      	bne.n	800a322 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2223      	movs	r2, #35	@ 0x23
 800a318:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f7fa f817 	bl	8004350 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a322:	4b64      	ldr	r3, [pc, #400]	@ (800a4b4 <HAL_ETH_Init+0x1bc>)
 800a324:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a328:	4a62      	ldr	r2, [pc, #392]	@ (800a4b4 <HAL_ETH_Init+0x1bc>)
 800a32a:	f043 0302 	orr.w	r3, r3, #2
 800a32e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800a332:	4b60      	ldr	r3, [pc, #384]	@ (800a4b4 <HAL_ETH_Init+0x1bc>)
 800a334:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a338:	f003 0302 	and.w	r3, r3, #2
 800a33c:	60bb      	str	r3, [r7, #8]
 800a33e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	7a1b      	ldrb	r3, [r3, #8]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d103      	bne.n	800a350 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800a348:	2000      	movs	r0, #0
 800a34a:	f7fa fd85 	bl	8004e58 <HAL_SYSCFG_ETHInterfaceSelect>
 800a34e:	e003      	b.n	800a358 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800a350:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800a354:	f7fa fd80 	bl	8004e58 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800a358:	4b57      	ldr	r3, [pc, #348]	@ (800a4b8 <HAL_ETH_Init+0x1c0>)
 800a35a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	687a      	ldr	r2, [r7, #4]
 800a368:	6812      	ldr	r2, [r2, #0]
 800a36a:	f043 0301 	orr.w	r3, r3, #1
 800a36e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a372:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a374:	f7fa fd40 	bl	8004df8 <HAL_GetTick>
 800a378:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800a37a:	e011      	b.n	800a3a0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800a37c:	f7fa fd3c 	bl	8004df8 <HAL_GetTick>
 800a380:	4602      	mov	r2, r0
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	1ad3      	subs	r3, r2, r3
 800a386:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800a38a:	d909      	bls.n	800a3a0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2204      	movs	r2, #4
 800a390:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	22e0      	movs	r2, #224	@ 0xe0
 800a398:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800a39c:	2301      	movs	r3, #1
 800a39e:	e084      	b.n	800a4aa <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f003 0301 	and.w	r3, r3, #1
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d1e4      	bne.n	800a37c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f000 f886 	bl	800a4c4 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800a3b8:	f001 fed8 	bl	800c16c <HAL_RCC_GetHCLKFreq>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	4a3f      	ldr	r2, [pc, #252]	@ (800a4bc <HAL_ETH_Init+0x1c4>)
 800a3c0:	fba2 2303 	umull	r2, r3, r2, r3
 800a3c4:	0c9a      	lsrs	r2, r3, #18
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	3a01      	subs	r2, #1
 800a3cc:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f000 fa71 	bl	800a8b8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a3de:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800a3e2:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800a3e6:	687a      	ldr	r2, [r7, #4]
 800a3e8:	6812      	ldr	r2, [r2, #0]
 800a3ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a3ee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a3f2:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	695b      	ldr	r3, [r3, #20]
 800a3fa:	f003 0303 	and.w	r3, r3, #3
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d009      	beq.n	800a416 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2201      	movs	r2, #1
 800a406:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	22e0      	movs	r2, #224	@ 0xe0
 800a40e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800a412:	2301      	movs	r3, #1
 800a414:	e049      	b.n	800a4aa <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a41e:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800a422:	4b27      	ldr	r3, [pc, #156]	@ (800a4c0 <HAL_ETH_Init+0x1c8>)
 800a424:	4013      	ands	r3, r2
 800a426:	687a      	ldr	r2, [r7, #4]
 800a428:	6952      	ldr	r2, [r2, #20]
 800a42a:	0051      	lsls	r1, r2, #1
 800a42c:	687a      	ldr	r2, [r7, #4]
 800a42e:	6812      	ldr	r2, [r2, #0]
 800a430:	430b      	orrs	r3, r1
 800a432:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a436:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f000 fad9 	bl	800a9f2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f000 fb1f 	bl	800aa84 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	685b      	ldr	r3, [r3, #4]
 800a44a:	3305      	adds	r3, #5
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	021a      	lsls	r2, r3, #8
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	3304      	adds	r3, #4
 800a456:	781b      	ldrb	r3, [r3, #0]
 800a458:	4619      	mov	r1, r3
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	430a      	orrs	r2, r1
 800a460:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	3303      	adds	r3, #3
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	061a      	lsls	r2, r3, #24
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	3302      	adds	r3, #2
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	041b      	lsls	r3, r3, #16
 800a478:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	3301      	adds	r3, #1
 800a480:	781b      	ldrb	r3, [r3, #0]
 800a482:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800a484:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	685b      	ldr	r3, [r3, #4]
 800a48a:	781b      	ldrb	r3, [r3, #0]
 800a48c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800a492:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800a494:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2200      	movs	r2, #0
 800a49c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2210      	movs	r2, #16
 800a4a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a4a8:	2300      	movs	r3, #0
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3710      	adds	r7, #16
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}
 800a4b2:	bf00      	nop
 800a4b4:	58024400 	.word	0x58024400
 800a4b8:	58000400 	.word	0x58000400
 800a4bc:	431bde83 	.word	0x431bde83
 800a4c0:	ffff8001 	.word	0xffff8001

0800a4c4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b084      	sub	sp, #16
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800a4d4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a4dc:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800a4de:	f001 fe45 	bl	800c16c <HAL_RCC_GetHCLKFreq>
 800a4e2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	4a1e      	ldr	r2, [pc, #120]	@ (800a560 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d908      	bls.n	800a4fe <HAL_ETH_SetMDIOClockRange+0x3a>
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	4a1d      	ldr	r2, [pc, #116]	@ (800a564 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d804      	bhi.n	800a4fe <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a4fa:	60fb      	str	r3, [r7, #12]
 800a4fc:	e027      	b.n	800a54e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	4a18      	ldr	r2, [pc, #96]	@ (800a564 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800a502:	4293      	cmp	r3, r2
 800a504:	d908      	bls.n	800a518 <HAL_ETH_SetMDIOClockRange+0x54>
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	4a17      	ldr	r2, [pc, #92]	@ (800a568 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d204      	bcs.n	800a518 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800a514:	60fb      	str	r3, [r7, #12]
 800a516:	e01a      	b.n	800a54e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	4a13      	ldr	r2, [pc, #76]	@ (800a568 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d303      	bcc.n	800a528 <HAL_ETH_SetMDIOClockRange+0x64>
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	4a12      	ldr	r2, [pc, #72]	@ (800a56c <HAL_ETH_SetMDIOClockRange+0xa8>)
 800a524:	4293      	cmp	r3, r2
 800a526:	d911      	bls.n	800a54c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	4a10      	ldr	r2, [pc, #64]	@ (800a56c <HAL_ETH_SetMDIOClockRange+0xa8>)
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d908      	bls.n	800a542 <HAL_ETH_SetMDIOClockRange+0x7e>
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	4a0f      	ldr	r2, [pc, #60]	@ (800a570 <HAL_ETH_SetMDIOClockRange+0xac>)
 800a534:	4293      	cmp	r3, r2
 800a536:	d804      	bhi.n	800a542 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a53e:	60fb      	str	r3, [r7, #12]
 800a540:	e005      	b.n	800a54e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a548:	60fb      	str	r3, [r7, #12]
 800a54a:	e000      	b.n	800a54e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800a54c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	68fa      	ldr	r2, [r7, #12]
 800a554:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800a558:	bf00      	nop
 800a55a:	3710      	adds	r7, #16
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}
 800a560:	01312cff 	.word	0x01312cff
 800a564:	02160ebf 	.word	0x02160ebf
 800a568:	03938700 	.word	0x03938700
 800a56c:	05f5e0ff 	.word	0x05f5e0ff
 800a570:	08f0d17f 	.word	0x08f0d17f

0800a574 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800a574:	b480      	push	{r7}
 800a576:	b085      	sub	sp, #20
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800a586:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	791b      	ldrb	r3, [r3, #4]
 800a58c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800a58e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	7b1b      	ldrb	r3, [r3, #12]
 800a594:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800a596:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	7b5b      	ldrb	r3, [r3, #13]
 800a59c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800a59e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	7b9b      	ldrb	r3, [r3, #14]
 800a5a4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800a5a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	7bdb      	ldrb	r3, [r3, #15]
 800a5ac:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800a5ae:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800a5b0:	683a      	ldr	r2, [r7, #0]
 800a5b2:	7c12      	ldrb	r2, [r2, #16]
 800a5b4:	2a00      	cmp	r2, #0
 800a5b6:	d102      	bne.n	800a5be <ETH_SetMACConfig+0x4a>
 800a5b8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800a5bc:	e000      	b.n	800a5c0 <ETH_SetMACConfig+0x4c>
 800a5be:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800a5c0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800a5c2:	683a      	ldr	r2, [r7, #0]
 800a5c4:	7c52      	ldrb	r2, [r2, #17]
 800a5c6:	2a00      	cmp	r2, #0
 800a5c8:	d102      	bne.n	800a5d0 <ETH_SetMACConfig+0x5c>
 800a5ca:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800a5ce:	e000      	b.n	800a5d2 <ETH_SetMACConfig+0x5e>
 800a5d0:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800a5d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	7c9b      	ldrb	r3, [r3, #18]
 800a5d8:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800a5da:	431a      	orrs	r2, r3
               macconf->Speed |
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800a5e0:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800a5e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	7f1b      	ldrb	r3, [r3, #28]
 800a5ec:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800a5ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	7f5b      	ldrb	r3, [r3, #29]
 800a5f4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800a5f6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800a5f8:	683a      	ldr	r2, [r7, #0]
 800a5fa:	7f92      	ldrb	r2, [r2, #30]
 800a5fc:	2a00      	cmp	r2, #0
 800a5fe:	d102      	bne.n	800a606 <ETH_SetMACConfig+0x92>
 800a600:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a604:	e000      	b.n	800a608 <ETH_SetMACConfig+0x94>
 800a606:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800a608:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	7fdb      	ldrb	r3, [r3, #31]
 800a60e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800a610:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800a612:	683a      	ldr	r2, [r7, #0]
 800a614:	f892 2020 	ldrb.w	r2, [r2, #32]
 800a618:	2a00      	cmp	r2, #0
 800a61a:	d102      	bne.n	800a622 <ETH_SetMACConfig+0xae>
 800a61c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a620:	e000      	b.n	800a624 <ETH_SetMACConfig+0xb0>
 800a622:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800a624:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800a62a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a632:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800a634:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800a63a:	4313      	orrs	r3, r2
 800a63c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	681a      	ldr	r2, [r3, #0]
 800a644:	4b56      	ldr	r3, [pc, #344]	@ (800a7a0 <ETH_SetMACConfig+0x22c>)
 800a646:	4013      	ands	r3, r2
 800a648:	687a      	ldr	r2, [r7, #4]
 800a64a:	6812      	ldr	r2, [r2, #0]
 800a64c:	68f9      	ldr	r1, [r7, #12]
 800a64e:	430b      	orrs	r3, r1
 800a650:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a656:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a65e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800a660:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a668:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800a66a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800a672:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800a674:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800a676:	683a      	ldr	r2, [r7, #0]
 800a678:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 800a67c:	2a00      	cmp	r2, #0
 800a67e:	d102      	bne.n	800a686 <ETH_SetMACConfig+0x112>
 800a680:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800a684:	e000      	b.n	800a688 <ETH_SetMACConfig+0x114>
 800a686:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800a688:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800a68e:	4313      	orrs	r3, r2
 800a690:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	685a      	ldr	r2, [r3, #4]
 800a698:	4b42      	ldr	r3, [pc, #264]	@ (800a7a4 <ETH_SetMACConfig+0x230>)
 800a69a:	4013      	ands	r3, r2
 800a69c:	687a      	ldr	r2, [r7, #4]
 800a69e:	6812      	ldr	r2, [r2, #0]
 800a6a0:	68f9      	ldr	r1, [r7, #12]
 800a6a2:	430b      	orrs	r3, r1
 800a6a4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a6ac:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	68da      	ldr	r2, [r3, #12]
 800a6bc:	4b3a      	ldr	r3, [pc, #232]	@ (800a7a8 <ETH_SetMACConfig+0x234>)
 800a6be:	4013      	ands	r3, r2
 800a6c0:	687a      	ldr	r2, [r7, #4]
 800a6c2:	6812      	ldr	r2, [r2, #0]
 800a6c4:	68f9      	ldr	r1, [r7, #12]
 800a6c6:	430b      	orrs	r3, r1
 800a6c8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800a6d0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800a6d6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800a6d8:	683a      	ldr	r2, [r7, #0]
 800a6da:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800a6de:	2a00      	cmp	r2, #0
 800a6e0:	d101      	bne.n	800a6e6 <ETH_SetMACConfig+0x172>
 800a6e2:	2280      	movs	r2, #128	@ 0x80
 800a6e4:	e000      	b.n	800a6e8 <ETH_SetMACConfig+0x174>
 800a6e6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800a6e8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a6ee:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a6fa:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 800a6fe:	4013      	ands	r3, r2
 800a700:	687a      	ldr	r2, [r7, #4]
 800a702:	6812      	ldr	r2, [r2, #0]
 800a704:	68f9      	ldr	r1, [r7, #12]
 800a706:	430b      	orrs	r3, r1
 800a708:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800a710:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800a718:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800a71a:	4313      	orrs	r3, r2
 800a71c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a726:	f023 0103 	bic.w	r1, r3, #3
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	68fa      	ldr	r2, [r7, #12]
 800a730:	430a      	orrs	r2, r1
 800a732:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 800a73e:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	430a      	orrs	r2, r1
 800a74c:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800a754:	683a      	ldr	r2, [r7, #0]
 800a756:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800a75a:	2a00      	cmp	r2, #0
 800a75c:	d101      	bne.n	800a762 <ETH_SetMACConfig+0x1ee>
 800a75e:	2240      	movs	r2, #64	@ 0x40
 800a760:	e000      	b.n	800a764 <ETH_SetMACConfig+0x1f0>
 800a762:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800a764:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800a76c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800a76e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800a776:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800a778:	4313      	orrs	r3, r2
 800a77a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 800a784:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	68fa      	ldr	r2, [r7, #12]
 800a78e:	430a      	orrs	r2, r1
 800a790:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 800a794:	bf00      	nop
 800a796:	3714      	adds	r7, #20
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr
 800a7a0:	00048083 	.word	0x00048083
 800a7a4:	c0f88000 	.word	0xc0f88000
 800a7a8:	fffffef0 	.word	0xfffffef0

0800a7ac <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b085      	sub	sp, #20
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
 800a7b4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a7be:	681a      	ldr	r2, [r3, #0]
 800a7c0:	4b38      	ldr	r3, [pc, #224]	@ (800a8a4 <ETH_SetDMAConfig+0xf8>)
 800a7c2:	4013      	ands	r3, r2
 800a7c4:	683a      	ldr	r2, [r7, #0]
 800a7c6:	6811      	ldr	r1, [r2, #0]
 800a7c8:	687a      	ldr	r2, [r7, #4]
 800a7ca:	6812      	ldr	r2, [r2, #0]
 800a7cc:	430b      	orrs	r3, r1
 800a7ce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a7d2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	791b      	ldrb	r3, [r3, #4]
 800a7d8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800a7de:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	7b1b      	ldrb	r3, [r3, #12]
 800a7e4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800a7e6:	4313      	orrs	r3, r2
 800a7e8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a7f2:	685a      	ldr	r2, [r3, #4]
 800a7f4:	4b2c      	ldr	r3, [pc, #176]	@ (800a8a8 <ETH_SetDMAConfig+0xfc>)
 800a7f6:	4013      	ands	r3, r2
 800a7f8:	687a      	ldr	r2, [r7, #4]
 800a7fa:	6812      	ldr	r2, [r2, #0]
 800a7fc:	68f9      	ldr	r1, [r7, #12]
 800a7fe:	430b      	orrs	r3, r1
 800a800:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a804:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	7b5b      	ldrb	r3, [r3, #13]
 800a80a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800a810:	4313      	orrs	r3, r2
 800a812:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a81c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 800a820:	4b22      	ldr	r3, [pc, #136]	@ (800a8ac <ETH_SetDMAConfig+0x100>)
 800a822:	4013      	ands	r3, r2
 800a824:	687a      	ldr	r2, [r7, #4]
 800a826:	6812      	ldr	r2, [r2, #0]
 800a828:	68f9      	ldr	r1, [r7, #12]
 800a82a:	430b      	orrs	r3, r1
 800a82c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a830:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	7d1b      	ldrb	r3, [r3, #20]
 800a83c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800a83e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	7f5b      	ldrb	r3, [r3, #29]
 800a844:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800a846:	4313      	orrs	r3, r2
 800a848:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a852:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800a856:	4b16      	ldr	r3, [pc, #88]	@ (800a8b0 <ETH_SetDMAConfig+0x104>)
 800a858:	4013      	ands	r3, r2
 800a85a:	687a      	ldr	r2, [r7, #4]
 800a85c:	6812      	ldr	r2, [r2, #0]
 800a85e:	68f9      	ldr	r1, [r7, #12]
 800a860:	430b      	orrs	r3, r1
 800a862:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a866:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	7f1b      	ldrb	r3, [r3, #28]
 800a86e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800a874:	4313      	orrs	r3, r2
 800a876:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a880:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800a884:	4b0b      	ldr	r3, [pc, #44]	@ (800a8b4 <ETH_SetDMAConfig+0x108>)
 800a886:	4013      	ands	r3, r2
 800a888:	687a      	ldr	r2, [r7, #4]
 800a88a:	6812      	ldr	r2, [r2, #0]
 800a88c:	68f9      	ldr	r1, [r7, #12]
 800a88e:	430b      	orrs	r3, r1
 800a890:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a894:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 800a898:	bf00      	nop
 800a89a:	3714      	adds	r7, #20
 800a89c:	46bd      	mov	sp, r7
 800a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a2:	4770      	bx	lr
 800a8a4:	ffff87fd 	.word	0xffff87fd
 800a8a8:	ffff2ffe 	.word	0xffff2ffe
 800a8ac:	fffec000 	.word	0xfffec000
 800a8b0:	ffc0efef 	.word	0xffc0efef
 800a8b4:	7fc0ffff 	.word	0x7fc0ffff

0800a8b8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b0a4      	sub	sp, #144	@ 0x90
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800a8f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a8f8:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800a900:	2300      	movs	r3, #0
 800a902:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800a904:	2300      	movs	r3, #0
 800a906:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800a90a:	2300      	movs	r3, #0
 800a90c:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800a910:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 800a914:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800a916:	2300      	movs	r3, #0
 800a918:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800a91c:	2300      	movs	r3, #0
 800a91e:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 800a920:	2301      	movs	r3, #1
 800a922:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800a926:	2300      	movs	r3, #0
 800a928:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800a92c:	2300      	movs	r3, #0
 800a92e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800a932:	2300      	movs	r3, #0
 800a934:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0;
 800a936:	2300      	movs	r3, #0
 800a938:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800a93a:	2300      	movs	r3, #0
 800a93c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800a93e:	2300      	movs	r3, #0
 800a940:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800a944:	2300      	movs	r3, #0
 800a946:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800a94a:	2301      	movs	r3, #1
 800a94c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800a950:	2320      	movs	r3, #32
 800a952:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800a956:	2301      	movs	r3, #1
 800a958:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800a95c:	2300      	movs	r3, #0
 800a95e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800a962:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800a966:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800a968:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a96c:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800a96e:	2300      	movs	r3, #0
 800a970:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800a974:	2302      	movs	r3, #2
 800a976:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800a97a:	2300      	movs	r3, #0
 800a97c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800a980:	2300      	movs	r3, #0
 800a982:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800a986:	2300      	movs	r3, #0
 800a988:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800a98c:	2301      	movs	r3, #1
 800a98e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800a992:	2300      	movs	r3, #0
 800a994:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800a996:	2301      	movs	r3, #1
 800a998:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800a99c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f7ff fde6 	bl	800a574 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800a9c2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a9c6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800a9cc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a9d0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800a9d8:	f44f 7306 	mov.w	r3, #536	@ 0x218
 800a9dc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800a9de:	f107 0308 	add.w	r3, r7, #8
 800a9e2:	4619      	mov	r1, r3
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f7ff fee1 	bl	800a7ac <ETH_SetDMAConfig>
}
 800a9ea:	bf00      	nop
 800a9ec:	3790      	adds	r7, #144	@ 0x90
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}

0800a9f2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800a9f2:	b480      	push	{r7}
 800a9f4:	b085      	sub	sp, #20
 800a9f6:	af00      	add	r7, sp, #0
 800a9f8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	60fb      	str	r3, [r7, #12]
 800a9fe:	e01d      	b.n	800aa3c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	68d9      	ldr	r1, [r3, #12]
 800aa04:	68fa      	ldr	r2, [r7, #12]
 800aa06:	4613      	mov	r3, r2
 800aa08:	005b      	lsls	r3, r3, #1
 800aa0a:	4413      	add	r3, r2
 800aa0c:	00db      	lsls	r3, r3, #3
 800aa0e:	440b      	add	r3, r1
 800aa10:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	2200      	movs	r2, #0
 800aa16:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	2200      	movs	r2, #0
 800aa22:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	2200      	movs	r2, #0
 800aa28:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800aa2a:	68b9      	ldr	r1, [r7, #8]
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	68fa      	ldr	r2, [r7, #12]
 800aa30:	3206      	adds	r2, #6
 800aa32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	3301      	adds	r3, #1
 800aa3a:	60fb      	str	r3, [r7, #12]
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2b03      	cmp	r3, #3
 800aa40:	d9de      	bls.n	800aa00 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2200      	movs	r2, #0
 800aa46:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa50:	461a      	mov	r2, r3
 800aa52:	2303      	movs	r3, #3
 800aa54:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	68da      	ldr	r2, [r3, #12]
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa64:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	68da      	ldr	r2, [r3, #12]
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa74:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 800aa78:	bf00      	nop
 800aa7a:	3714      	adds	r7, #20
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa82:	4770      	bx	lr

0800aa84 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b085      	sub	sp, #20
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	60fb      	str	r3, [r7, #12]
 800aa90:	e023      	b.n	800aada <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6919      	ldr	r1, [r3, #16]
 800aa96:	68fa      	ldr	r2, [r7, #12]
 800aa98:	4613      	mov	r3, r2
 800aa9a:	005b      	lsls	r3, r3, #1
 800aa9c:	4413      	add	r3, r2
 800aa9e:	00db      	lsls	r3, r3, #3
 800aaa0:	440b      	add	r3, r1
 800aaa2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	2200      	movs	r2, #0
 800aaae:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	2200      	movs	r2, #0
 800aab4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	2200      	movs	r2, #0
 800aaba:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	2200      	movs	r2, #0
 800aac0:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	2200      	movs	r2, #0
 800aac6:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800aac8:	68b9      	ldr	r1, [r7, #8]
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	68fa      	ldr	r2, [r7, #12]
 800aace:	3212      	adds	r2, #18
 800aad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	3301      	adds	r3, #1
 800aad8:	60fb      	str	r3, [r7, #12]
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	2b03      	cmp	r3, #3
 800aade:	d9d8      	bls.n	800aa92 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2200      	movs	r2, #0
 800aae4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2200      	movs	r2, #0
 800aaea:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2200      	movs	r2, #0
 800aafc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab06:	461a      	mov	r2, r3
 800ab08:	2303      	movs	r3, #3
 800ab0a:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	691a      	ldr	r2, [r3, #16]
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab1a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	691b      	ldr	r3, [r3, #16]
 800ab22:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab2e:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 800ab32:	bf00      	nop
 800ab34:	3714      	adds	r7, #20
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr
	...

0800ab40 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b08a      	sub	sp, #40	@ 0x28
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	60f8      	str	r0, [r7, #12]
 800ab48:	60b9      	str	r1, [r7, #8]
 800ab4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 800ab54:	2308      	movs	r3, #8
 800ab56:	76fb      	strb	r3, [r7, #27]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ab58:	4b2e      	ldr	r3, [pc, #184]	@ (800ac14 <HAL_FLASH_Program+0xd4>)
 800ab5a:	7d1b      	ldrb	r3, [r3, #20]
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	d101      	bne.n	800ab64 <HAL_FLASH_Program+0x24>
 800ab60:	2302      	movs	r3, #2
 800ab62:	e053      	b.n	800ac0c <HAL_FLASH_Program+0xcc>
 800ab64:	4b2b      	ldr	r3, [pc, #172]	@ (800ac14 <HAL_FLASH_Program+0xd4>)
 800ab66:	2201      	movs	r2, #1
 800ab68:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab70:	d315      	bcc.n	800ab9e <HAL_FLASH_Program+0x5e>
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 800ab78:	d211      	bcs.n	800ab9e <HAL_FLASH_Program+0x5e>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	617b      	str	r3, [r7, #20]
  {
    return HAL_ERROR;
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ab7e:	4b25      	ldr	r3, [pc, #148]	@ (800ac14 <HAL_FLASH_Program+0xd4>)
 800ab80:	2200      	movs	r2, #0
 800ab82:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800ab84:	6979      	ldr	r1, [r7, #20]
 800ab86:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800ab8a:	f000 f88d 	bl	800aca8 <FLASH_WaitForLastOperation>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if(status == HAL_OK)
 800ab94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d002      	beq.n	800aba2 <HAL_FLASH_Program+0x62>
 800ab9c:	e031      	b.n	800ac02 <HAL_FLASH_Program+0xc2>
    return HAL_ERROR;
 800ab9e:	2301      	movs	r3, #1
 800aba0:	e034      	b.n	800ac0c <HAL_FLASH_Program+0xcc>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 800aba2:	4b1d      	ldr	r3, [pc, #116]	@ (800ac18 <HAL_FLASH_Program+0xd8>)
 800aba4:	68db      	ldr	r3, [r3, #12]
 800aba6:	4a1c      	ldr	r2, [pc, #112]	@ (800ac18 <HAL_FLASH_Program+0xd8>)
 800aba8:	f043 0302 	orr.w	r3, r3, #2
 800abac:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("isb 0xF":::"memory");
 800abae:	f3bf 8f6f 	isb	sy
}
 800abb2:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800abb4:	f3bf 8f4f 	dsb	sy
}
 800abb8:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 800abba:	69fb      	ldr	r3, [r7, #28]
 800abbc:	681a      	ldr	r2, [r3, #0]
 800abbe:	6a3b      	ldr	r3, [r7, #32]
 800abc0:	601a      	str	r2, [r3, #0]
        dest_addr++;
 800abc2:	6a3b      	ldr	r3, [r7, #32]
 800abc4:	3304      	adds	r3, #4
 800abc6:	623b      	str	r3, [r7, #32]
        src_addr++;
 800abc8:	69fb      	ldr	r3, [r7, #28]
 800abca:	3304      	adds	r3, #4
 800abcc:	61fb      	str	r3, [r7, #28]
        row_index--;
 800abce:	7efb      	ldrb	r3, [r7, #27]
 800abd0:	3b01      	subs	r3, #1
 800abd2:	76fb      	strb	r3, [r7, #27]
     } while (row_index != 0U);
 800abd4:	7efb      	ldrb	r3, [r7, #27]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d1ef      	bne.n	800abba <HAL_FLASH_Program+0x7a>
  __ASM volatile ("isb 0xF":::"memory");
 800abda:	f3bf 8f6f 	isb	sy
}
 800abde:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800abe0:	f3bf 8f4f 	dsb	sy
}
 800abe4:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800abe6:	6979      	ldr	r1, [r7, #20]
 800abe8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800abec:	f000 f85c 	bl	800aca8 <FLASH_WaitForLastOperation>
 800abf0:	4603      	mov	r3, r0
 800abf2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* If the program operation is completed, disable the PG */
      CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 800abf6:	4b08      	ldr	r3, [pc, #32]	@ (800ac18 <HAL_FLASH_Program+0xd8>)
 800abf8:	68db      	ldr	r3, [r3, #12]
 800abfa:	4a07      	ldr	r2, [pc, #28]	@ (800ac18 <HAL_FLASH_Program+0xd8>)
 800abfc:	f023 0302 	bic.w	r3, r3, #2
 800ac00:	60d3      	str	r3, [r2, #12]
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ac02:	4b04      	ldr	r3, [pc, #16]	@ (800ac14 <HAL_FLASH_Program+0xd4>)
 800ac04:	2200      	movs	r2, #0
 800ac06:	751a      	strb	r2, [r3, #20]

  return status;
 800ac08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3728      	adds	r7, #40	@ 0x28
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}
 800ac14:	240010a8 	.word	0x240010a8
 800ac18:	52002000 	.word	0x52002000

0800ac1c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800ac20:	4b0c      	ldr	r3, [pc, #48]	@ (800ac54 <HAL_FLASH_Unlock+0x38>)
 800ac22:	68db      	ldr	r3, [r3, #12]
 800ac24:	f003 0301 	and.w	r3, r3, #1
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d00d      	beq.n	800ac48 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 800ac2c:	4b09      	ldr	r3, [pc, #36]	@ (800ac54 <HAL_FLASH_Unlock+0x38>)
 800ac2e:	4a0a      	ldr	r2, [pc, #40]	@ (800ac58 <HAL_FLASH_Unlock+0x3c>)
 800ac30:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 800ac32:	4b08      	ldr	r3, [pc, #32]	@ (800ac54 <HAL_FLASH_Unlock+0x38>)
 800ac34:	4a09      	ldr	r2, [pc, #36]	@ (800ac5c <HAL_FLASH_Unlock+0x40>)
 800ac36:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800ac38:	4b06      	ldr	r3, [pc, #24]	@ (800ac54 <HAL_FLASH_Unlock+0x38>)
 800ac3a:	68db      	ldr	r3, [r3, #12]
 800ac3c:	f003 0301 	and.w	r3, r3, #1
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d001      	beq.n	800ac48 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 800ac44:	2301      	movs	r3, #1
 800ac46:	e000      	b.n	800ac4a <HAL_FLASH_Unlock+0x2e>
      return HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800ac48:	2300      	movs	r3, #0
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac52:	4770      	bx	lr
 800ac54:	52002000 	.word	0x52002000
 800ac58:	45670123 	.word	0x45670123
 800ac5c:	cdef89ab 	.word	0xcdef89ab

0800ac60 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800ac60:	b480      	push	{r7}
 800ac62:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 800ac64:	4b09      	ldr	r3, [pc, #36]	@ (800ac8c <HAL_FLASH_Lock+0x2c>)
 800ac66:	68db      	ldr	r3, [r3, #12]
 800ac68:	4a08      	ldr	r2, [pc, #32]	@ (800ac8c <HAL_FLASH_Lock+0x2c>)
 800ac6a:	f043 0301 	orr.w	r3, r3, #1
 800ac6e:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 800ac70:	4b06      	ldr	r3, [pc, #24]	@ (800ac8c <HAL_FLASH_Lock+0x2c>)
 800ac72:	68db      	ldr	r3, [r3, #12]
 800ac74:	f003 0301 	and.w	r3, r3, #1
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d101      	bne.n	800ac80 <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	e000      	b.n	800ac82 <HAL_FLASH_Lock+0x22>
  {
    return HAL_ERROR;
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800ac80:	2300      	movs	r3, #0
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	46bd      	mov	sp, r7
 800ac86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8a:	4770      	bx	lr
 800ac8c:	52002000 	.word	0x52002000

0800ac90 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_DBECC_BANK2: Double Detection ECC on Bank 2
  *            @arg HAL_FLASH_ERROR_CRCRD_BANK2: CRC Read Error on Bank 2
*/

uint32_t HAL_FLASH_GetError(void)
{
 800ac90:	b480      	push	{r7}
 800ac92:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 800ac94:	4b03      	ldr	r3, [pc, #12]	@ (800aca4 <HAL_FLASH_GetError+0x14>)
 800ac96:	699b      	ldr	r3, [r3, #24]
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca0:	4770      	bx	lr
 800aca2:	bf00      	nop
 800aca4:	240010a8 	.word	0x240010a8

0800aca8 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b086      	sub	sp, #24
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 800acb2:	2304      	movs	r3, #4
 800acb4:	613b      	str	r3, [r7, #16]
  uint32_t errorflag = 0;
 800acb6:	2300      	movs	r3, #0
 800acb8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800acba:	f7fa f89d 	bl	8004df8 <HAL_GetTick>
 800acbe:	60f8      	str	r0, [r7, #12]
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800acc0:	e010      	b.n	800ace4 <FLASH_WaitForLastOperation+0x3c>
  {
    if(Timeout != HAL_MAX_DELAY)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800acc8:	d00c      	beq.n	800ace4 <FLASH_WaitForLastOperation+0x3c>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800acca:	f7fa f895 	bl	8004df8 <HAL_GetTick>
 800acce:	4602      	mov	r2, r0
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	1ad3      	subs	r3, r2, r3
 800acd4:	687a      	ldr	r2, [r7, #4]
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d302      	bcc.n	800ace0 <FLASH_WaitForLastOperation+0x38>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d101      	bne.n	800ace4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800ace0:	2303      	movs	r3, #3
 800ace2:	e02d      	b.n	800ad40 <FLASH_WaitForLastOperation+0x98>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800ace4:	4b18      	ldr	r3, [pc, #96]	@ (800ad48 <FLASH_WaitForLastOperation+0xa0>)
 800ace6:	691a      	ldr	r2, [r3, #16]
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	4013      	ands	r3, r2
 800acec:	693a      	ldr	r2, [r7, #16]
 800acee:	429a      	cmp	r2, r3
 800acf0:	d0e7      	beq.n	800acc2 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	2b01      	cmp	r3, #1
 800acf6:	d104      	bne.n	800ad02 <FLASH_WaitForLastOperation+0x5a>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 800acf8:	4b13      	ldr	r3, [pc, #76]	@ (800ad48 <FLASH_WaitForLastOperation+0xa0>)
 800acfa:	691a      	ldr	r2, [r3, #16]
 800acfc:	4b13      	ldr	r3, [pc, #76]	@ (800ad4c <FLASH_WaitForLastOperation+0xa4>)
 800acfe:	4013      	ands	r3, r2
 800ad00:	617b      	str	r3, [r7, #20]
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d00a      	beq.n	800ad22 <FLASH_WaitForLastOperation+0x7a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 800ad0c:	4b10      	ldr	r3, [pc, #64]	@ (800ad50 <FLASH_WaitForLastOperation+0xa8>)
 800ad0e:	699a      	ldr	r2, [r3, #24]
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	4313      	orrs	r3, r2
 800ad14:	4a0e      	ldr	r2, [pc, #56]	@ (800ad50 <FLASH_WaitForLastOperation+0xa8>)
 800ad16:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 800ad18:	4a0b      	ldr	r2, [pc, #44]	@ (800ad48 <FLASH_WaitForLastOperation+0xa0>)
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	6153      	str	r3, [r2, #20]

    return HAL_ERROR;
 800ad1e:	2301      	movs	r3, #1
 800ad20:	e00e      	b.n	800ad40 <FLASH_WaitForLastOperation+0x98>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	2b01      	cmp	r3, #1
 800ad26:	d10a      	bne.n	800ad3e <FLASH_WaitForLastOperation+0x96>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 800ad28:	4b07      	ldr	r3, [pc, #28]	@ (800ad48 <FLASH_WaitForLastOperation+0xa0>)
 800ad2a:	691b      	ldr	r3, [r3, #16]
 800ad2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ad30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad34:	d103      	bne.n	800ad3e <FLASH_WaitForLastOperation+0x96>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800ad36:	4b04      	ldr	r3, [pc, #16]	@ (800ad48 <FLASH_WaitForLastOperation+0xa0>)
 800ad38:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800ad3c:	615a      	str	r2, [r3, #20]
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800ad3e:	2300      	movs	r3, #0
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3718      	adds	r7, #24
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}
 800ad48:	52002000 	.word	0x52002000
 800ad4c:	17ee0000 	.word	0x17ee0000
 800ad50:	240010a8 	.word	0x240010a8

0800ad54 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b084      	sub	sp, #16
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ad62:	4b3f      	ldr	r3, [pc, #252]	@ (800ae60 <HAL_FLASHEx_Erase+0x10c>)
 800ad64:	7d1b      	ldrb	r3, [r3, #20]
 800ad66:	2b01      	cmp	r3, #1
 800ad68:	d101      	bne.n	800ad6e <HAL_FLASHEx_Erase+0x1a>
 800ad6a:	2302      	movs	r3, #2
 800ad6c:	e074      	b.n	800ae58 <HAL_FLASHEx_Erase+0x104>
 800ad6e:	4b3c      	ldr	r3, [pc, #240]	@ (800ae60 <HAL_FLASHEx_Erase+0x10c>)
 800ad70:	2201      	movs	r2, #1
 800ad72:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ad74:	4b3a      	ldr	r3, [pc, #232]	@ (800ae60 <HAL_FLASHEx_Erase+0x10c>)
 800ad76:	2200      	movs	r2, #0
 800ad78:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	685b      	ldr	r3, [r3, #4]
 800ad7e:	f003 0301 	and.w	r3, r3, #1
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d009      	beq.n	800ad9a <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800ad86:	2101      	movs	r1, #1
 800ad88:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800ad8c:	f7ff ff8c 	bl	800aca8 <FLASH_WaitForLastOperation>
 800ad90:	4603      	mov	r3, r0
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d001      	beq.n	800ad9a <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 800ad96:	2301      	movs	r3, #1
 800ad98:	73fb      	strb	r3, [r7, #15]
      status = HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 800ad9a:	7bfb      	ldrb	r3, [r7, #15]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d157      	bne.n	800ae50 <HAL_FLASHEx_Erase+0xfc>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	2b01      	cmp	r3, #1
 800ada6:	d11e      	bne.n	800ade6 <HAL_FLASHEx_Erase+0x92>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	691a      	ldr	r2, [r3, #16]
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	685b      	ldr	r3, [r3, #4]
 800adb0:	4619      	mov	r1, r3
 800adb2:	4610      	mov	r0, r2
 800adb4:	f000 f85a 	bl	800ae6c <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	685b      	ldr	r3, [r3, #4]
 800adbc:	f003 0301 	and.w	r3, r3, #1
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d045      	beq.n	800ae50 <HAL_FLASHEx_Erase+0xfc>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800adc4:	2101      	movs	r1, #1
 800adc6:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800adca:	f7ff ff6d 	bl	800aca8 <FLASH_WaitForLastOperation>
 800adce:	4603      	mov	r3, r0
 800add0:	2b00      	cmp	r3, #0
 800add2:	d001      	beq.n	800add8 <HAL_FLASHEx_Erase+0x84>
        {
          status = HAL_ERROR;
 800add4:	2301      	movs	r3, #1
 800add6:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 800add8:	4b22      	ldr	r3, [pc, #136]	@ (800ae64 <HAL_FLASHEx_Erase+0x110>)
 800adda:	68db      	ldr	r3, [r3, #12]
 800addc:	4a21      	ldr	r2, [pc, #132]	@ (800ae64 <HAL_FLASHEx_Erase+0x110>)
 800adde:	f023 0308 	bic.w	r3, r3, #8
 800ade2:	60d3      	str	r3, [r2, #12]
 800ade4:	e034      	b.n	800ae50 <HAL_FLASHEx_Erase+0xfc>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800adec:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	689b      	ldr	r3, [r3, #8]
 800adf2:	60bb      	str	r3, [r7, #8]
 800adf4:	e024      	b.n	800ae40 <HAL_FLASHEx_Erase+0xec>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6859      	ldr	r1, [r3, #4]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	691b      	ldr	r3, [r3, #16]
 800adfe:	461a      	mov	r2, r3
 800ae00:	68b8      	ldr	r0, [r7, #8]
 800ae02:	f000 f857 	bl	800aeb4 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	f003 0301 	and.w	r3, r3, #1
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d00c      	beq.n	800ae2c <HAL_FLASHEx_Erase+0xd8>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 800ae12:	2101      	movs	r1, #1
 800ae14:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800ae18:	f7ff ff46 	bl	800aca8 <FLASH_WaitForLastOperation>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800ae20:	4b10      	ldr	r3, [pc, #64]	@ (800ae64 <HAL_FLASHEx_Erase+0x110>)
 800ae22:	68da      	ldr	r2, [r3, #12]
 800ae24:	490f      	ldr	r1, [pc, #60]	@ (800ae64 <HAL_FLASHEx_Erase+0x110>)
 800ae26:	4b10      	ldr	r3, [pc, #64]	@ (800ae68 <HAL_FLASHEx_Erase+0x114>)
 800ae28:	4013      	ands	r3, r2
 800ae2a:	60cb      	str	r3, [r1, #12]
          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 800ae2c:	7bfb      	ldrb	r3, [r7, #15]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d003      	beq.n	800ae3a <HAL_FLASHEx_Erase+0xe6>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	68ba      	ldr	r2, [r7, #8]
 800ae36:	601a      	str	r2, [r3, #0]
          break;
 800ae38:	e00a      	b.n	800ae50 <HAL_FLASHEx_Erase+0xfc>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	3301      	adds	r3, #1
 800ae3e:	60bb      	str	r3, [r7, #8]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	68da      	ldr	r2, [r3, #12]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	689b      	ldr	r3, [r3, #8]
 800ae48:	4413      	add	r3, r2
 800ae4a:	68ba      	ldr	r2, [r7, #8]
 800ae4c:	429a      	cmp	r2, r3
 800ae4e:	d3d2      	bcc.n	800adf6 <HAL_FLASHEx_Erase+0xa2>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ae50:	4b03      	ldr	r3, [pc, #12]	@ (800ae60 <HAL_FLASHEx_Erase+0x10c>)
 800ae52:	2200      	movs	r2, #0
 800ae54:	751a      	strb	r2, [r3, #20]

  return status;
 800ae56:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3710      	adds	r7, #16
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}
 800ae60:	240010a8 	.word	0x240010a8
 800ae64:	52002000 	.word	0x52002000
 800ae68:	fffff8fb 	.word	0xfffff8fb

0800ae6c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b083      	sub	sp, #12
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	6039      	str	r1, [r7, #0]
  }
  else
#endif /* DUAL_BANK */
  {
    /* Proceed to erase Flash Bank  */
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	f003 0301 	and.w	r3, r3, #1
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d011      	beq.n	800aea4 <FLASH_MassErase+0x38>
    {
#if defined (FLASH_CR_PSIZE)
      /* Set Program/erase VoltageRange for Bank1 */
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800ae80:	4b0b      	ldr	r3, [pc, #44]	@ (800aeb0 <FLASH_MassErase+0x44>)
 800ae82:	68db      	ldr	r3, [r3, #12]
 800ae84:	4a0a      	ldr	r2, [pc, #40]	@ (800aeb0 <FLASH_MassErase+0x44>)
 800ae86:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800ae8a:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 800ae8c:	4b08      	ldr	r3, [pc, #32]	@ (800aeb0 <FLASH_MassErase+0x44>)
 800ae8e:	68da      	ldr	r2, [r3, #12]
 800ae90:	4907      	ldr	r1, [pc, #28]	@ (800aeb0 <FLASH_MassErase+0x44>)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	4313      	orrs	r3, r2
 800ae96:	60cb      	str	r3, [r1, #12]
#endif /* FLASH_CR_PSIZE */

      /* Erase Bank1 */
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 800ae98:	4b05      	ldr	r3, [pc, #20]	@ (800aeb0 <FLASH_MassErase+0x44>)
 800ae9a:	68db      	ldr	r3, [r3, #12]
 800ae9c:	4a04      	ldr	r2, [pc, #16]	@ (800aeb0 <FLASH_MassErase+0x44>)
 800ae9e:	f043 0388 	orr.w	r3, r3, #136	@ 0x88
 800aea2:	60d3      	str	r3, [r2, #12]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 800aea4:	bf00      	nop
 800aea6:	370c      	adds	r7, #12
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr
 800aeb0:	52002000 	.word	0x52002000

0800aeb4 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b085      	sub	sp, #20
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	60f8      	str	r0, [r7, #12]
 800aebc:	60b9      	str	r1, [r7, #8]
 800aebe:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	f003 0301 	and.w	r3, r3, #1
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d010      	beq.n	800aeec <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800aeca:	4b0b      	ldr	r3, [pc, #44]	@ (800aef8 <FLASH_Erase_Sector+0x44>)
 800aecc:	68db      	ldr	r3, [r3, #12]
 800aece:	4a0a      	ldr	r2, [pc, #40]	@ (800aef8 <FLASH_Erase_Sector+0x44>)
 800aed0:	f423 63e6 	bic.w	r3, r3, #1840	@ 0x730
 800aed4:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800aed6:	4b08      	ldr	r3, [pc, #32]	@ (800aef8 <FLASH_Erase_Sector+0x44>)
 800aed8:	68da      	ldr	r2, [r3, #12]
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	0219      	lsls	r1, r3, #8
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	430b      	orrs	r3, r1
 800aee2:	4313      	orrs	r3, r2
 800aee4:	4a04      	ldr	r2, [pc, #16]	@ (800aef8 <FLASH_Erase_Sector+0x44>)
 800aee6:	f043 0384 	orr.w	r3, r3, #132	@ 0x84
 800aeea:	60d3      	str	r3, [r2, #12]

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 800aeec:	bf00      	nop
 800aeee:	3714      	adds	r7, #20
 800aef0:	46bd      	mov	sp, r7
 800aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef6:	4770      	bx	lr
 800aef8:	52002000 	.word	0x52002000

0800aefc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800aefc:	b480      	push	{r7}
 800aefe:	b089      	sub	sp, #36	@ 0x24
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800af06:	2300      	movs	r3, #0
 800af08:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800af0a:	4b86      	ldr	r3, [pc, #536]	@ (800b124 <HAL_GPIO_Init+0x228>)
 800af0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800af0e:	e18c      	b.n	800b22a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	681a      	ldr	r2, [r3, #0]
 800af14:	2101      	movs	r1, #1
 800af16:	69fb      	ldr	r3, [r7, #28]
 800af18:	fa01 f303 	lsl.w	r3, r1, r3
 800af1c:	4013      	ands	r3, r2
 800af1e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	2b00      	cmp	r3, #0
 800af24:	f000 817e 	beq.w	800b224 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	685b      	ldr	r3, [r3, #4]
 800af2c:	f003 0303 	and.w	r3, r3, #3
 800af30:	2b01      	cmp	r3, #1
 800af32:	d005      	beq.n	800af40 <HAL_GPIO_Init+0x44>
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	685b      	ldr	r3, [r3, #4]
 800af38:	f003 0303 	and.w	r3, r3, #3
 800af3c:	2b02      	cmp	r3, #2
 800af3e:	d130      	bne.n	800afa2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	689b      	ldr	r3, [r3, #8]
 800af44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800af46:	69fb      	ldr	r3, [r7, #28]
 800af48:	005b      	lsls	r3, r3, #1
 800af4a:	2203      	movs	r2, #3
 800af4c:	fa02 f303 	lsl.w	r3, r2, r3
 800af50:	43db      	mvns	r3, r3
 800af52:	69ba      	ldr	r2, [r7, #24]
 800af54:	4013      	ands	r3, r2
 800af56:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	68da      	ldr	r2, [r3, #12]
 800af5c:	69fb      	ldr	r3, [r7, #28]
 800af5e:	005b      	lsls	r3, r3, #1
 800af60:	fa02 f303 	lsl.w	r3, r2, r3
 800af64:	69ba      	ldr	r2, [r7, #24]
 800af66:	4313      	orrs	r3, r2
 800af68:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	69ba      	ldr	r2, [r7, #24]
 800af6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	685b      	ldr	r3, [r3, #4]
 800af74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800af76:	2201      	movs	r2, #1
 800af78:	69fb      	ldr	r3, [r7, #28]
 800af7a:	fa02 f303 	lsl.w	r3, r2, r3
 800af7e:	43db      	mvns	r3, r3
 800af80:	69ba      	ldr	r2, [r7, #24]
 800af82:	4013      	ands	r3, r2
 800af84:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	685b      	ldr	r3, [r3, #4]
 800af8a:	091b      	lsrs	r3, r3, #4
 800af8c:	f003 0201 	and.w	r2, r3, #1
 800af90:	69fb      	ldr	r3, [r7, #28]
 800af92:	fa02 f303 	lsl.w	r3, r2, r3
 800af96:	69ba      	ldr	r2, [r7, #24]
 800af98:	4313      	orrs	r3, r2
 800af9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	69ba      	ldr	r2, [r7, #24]
 800afa0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	685b      	ldr	r3, [r3, #4]
 800afa6:	f003 0303 	and.w	r3, r3, #3
 800afaa:	2b03      	cmp	r3, #3
 800afac:	d017      	beq.n	800afde <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	68db      	ldr	r3, [r3, #12]
 800afb2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800afb4:	69fb      	ldr	r3, [r7, #28]
 800afb6:	005b      	lsls	r3, r3, #1
 800afb8:	2203      	movs	r2, #3
 800afba:	fa02 f303 	lsl.w	r3, r2, r3
 800afbe:	43db      	mvns	r3, r3
 800afc0:	69ba      	ldr	r2, [r7, #24]
 800afc2:	4013      	ands	r3, r2
 800afc4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	689a      	ldr	r2, [r3, #8]
 800afca:	69fb      	ldr	r3, [r7, #28]
 800afcc:	005b      	lsls	r3, r3, #1
 800afce:	fa02 f303 	lsl.w	r3, r2, r3
 800afd2:	69ba      	ldr	r2, [r7, #24]
 800afd4:	4313      	orrs	r3, r2
 800afd6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	69ba      	ldr	r2, [r7, #24]
 800afdc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	685b      	ldr	r3, [r3, #4]
 800afe2:	f003 0303 	and.w	r3, r3, #3
 800afe6:	2b02      	cmp	r3, #2
 800afe8:	d123      	bne.n	800b032 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800afea:	69fb      	ldr	r3, [r7, #28]
 800afec:	08da      	lsrs	r2, r3, #3
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	3208      	adds	r2, #8
 800aff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800aff8:	69fb      	ldr	r3, [r7, #28]
 800affa:	f003 0307 	and.w	r3, r3, #7
 800affe:	009b      	lsls	r3, r3, #2
 800b000:	220f      	movs	r2, #15
 800b002:	fa02 f303 	lsl.w	r3, r2, r3
 800b006:	43db      	mvns	r3, r3
 800b008:	69ba      	ldr	r2, [r7, #24]
 800b00a:	4013      	ands	r3, r2
 800b00c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	691a      	ldr	r2, [r3, #16]
 800b012:	69fb      	ldr	r3, [r7, #28]
 800b014:	f003 0307 	and.w	r3, r3, #7
 800b018:	009b      	lsls	r3, r3, #2
 800b01a:	fa02 f303 	lsl.w	r3, r2, r3
 800b01e:	69ba      	ldr	r2, [r7, #24]
 800b020:	4313      	orrs	r3, r2
 800b022:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b024:	69fb      	ldr	r3, [r7, #28]
 800b026:	08da      	lsrs	r2, r3, #3
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	3208      	adds	r2, #8
 800b02c:	69b9      	ldr	r1, [r7, #24]
 800b02e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800b038:	69fb      	ldr	r3, [r7, #28]
 800b03a:	005b      	lsls	r3, r3, #1
 800b03c:	2203      	movs	r2, #3
 800b03e:	fa02 f303 	lsl.w	r3, r2, r3
 800b042:	43db      	mvns	r3, r3
 800b044:	69ba      	ldr	r2, [r7, #24]
 800b046:	4013      	ands	r3, r2
 800b048:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	f003 0203 	and.w	r2, r3, #3
 800b052:	69fb      	ldr	r3, [r7, #28]
 800b054:	005b      	lsls	r3, r3, #1
 800b056:	fa02 f303 	lsl.w	r3, r2, r3
 800b05a:	69ba      	ldr	r2, [r7, #24]
 800b05c:	4313      	orrs	r3, r2
 800b05e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	69ba      	ldr	r2, [r7, #24]
 800b064:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	685b      	ldr	r3, [r3, #4]
 800b06a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b06e:	2b00      	cmp	r3, #0
 800b070:	f000 80d8 	beq.w	800b224 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b074:	4b2c      	ldr	r3, [pc, #176]	@ (800b128 <HAL_GPIO_Init+0x22c>)
 800b076:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b07a:	4a2b      	ldr	r2, [pc, #172]	@ (800b128 <HAL_GPIO_Init+0x22c>)
 800b07c:	f043 0302 	orr.w	r3, r3, #2
 800b080:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800b084:	4b28      	ldr	r3, [pc, #160]	@ (800b128 <HAL_GPIO_Init+0x22c>)
 800b086:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b08a:	f003 0302 	and.w	r3, r3, #2
 800b08e:	60fb      	str	r3, [r7, #12]
 800b090:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b092:	4a26      	ldr	r2, [pc, #152]	@ (800b12c <HAL_GPIO_Init+0x230>)
 800b094:	69fb      	ldr	r3, [r7, #28]
 800b096:	089b      	lsrs	r3, r3, #2
 800b098:	3302      	adds	r3, #2
 800b09a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b09e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800b0a0:	69fb      	ldr	r3, [r7, #28]
 800b0a2:	f003 0303 	and.w	r3, r3, #3
 800b0a6:	009b      	lsls	r3, r3, #2
 800b0a8:	220f      	movs	r2, #15
 800b0aa:	fa02 f303 	lsl.w	r3, r2, r3
 800b0ae:	43db      	mvns	r3, r3
 800b0b0:	69ba      	ldr	r2, [r7, #24]
 800b0b2:	4013      	ands	r3, r2
 800b0b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	4a1d      	ldr	r2, [pc, #116]	@ (800b130 <HAL_GPIO_Init+0x234>)
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d04a      	beq.n	800b154 <HAL_GPIO_Init+0x258>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	4a1c      	ldr	r2, [pc, #112]	@ (800b134 <HAL_GPIO_Init+0x238>)
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d02b      	beq.n	800b11e <HAL_GPIO_Init+0x222>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	4a1b      	ldr	r2, [pc, #108]	@ (800b138 <HAL_GPIO_Init+0x23c>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d025      	beq.n	800b11a <HAL_GPIO_Init+0x21e>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	4a1a      	ldr	r2, [pc, #104]	@ (800b13c <HAL_GPIO_Init+0x240>)
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d01f      	beq.n	800b116 <HAL_GPIO_Init+0x21a>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	4a19      	ldr	r2, [pc, #100]	@ (800b140 <HAL_GPIO_Init+0x244>)
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d019      	beq.n	800b112 <HAL_GPIO_Init+0x216>
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	4a18      	ldr	r2, [pc, #96]	@ (800b144 <HAL_GPIO_Init+0x248>)
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d013      	beq.n	800b10e <HAL_GPIO_Init+0x212>
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	4a17      	ldr	r2, [pc, #92]	@ (800b148 <HAL_GPIO_Init+0x24c>)
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	d00d      	beq.n	800b10a <HAL_GPIO_Init+0x20e>
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	4a16      	ldr	r2, [pc, #88]	@ (800b14c <HAL_GPIO_Init+0x250>)
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	d007      	beq.n	800b106 <HAL_GPIO_Init+0x20a>
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	4a15      	ldr	r2, [pc, #84]	@ (800b150 <HAL_GPIO_Init+0x254>)
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d101      	bne.n	800b102 <HAL_GPIO_Init+0x206>
 800b0fe:	2309      	movs	r3, #9
 800b100:	e029      	b.n	800b156 <HAL_GPIO_Init+0x25a>
 800b102:	230a      	movs	r3, #10
 800b104:	e027      	b.n	800b156 <HAL_GPIO_Init+0x25a>
 800b106:	2307      	movs	r3, #7
 800b108:	e025      	b.n	800b156 <HAL_GPIO_Init+0x25a>
 800b10a:	2306      	movs	r3, #6
 800b10c:	e023      	b.n	800b156 <HAL_GPIO_Init+0x25a>
 800b10e:	2305      	movs	r3, #5
 800b110:	e021      	b.n	800b156 <HAL_GPIO_Init+0x25a>
 800b112:	2304      	movs	r3, #4
 800b114:	e01f      	b.n	800b156 <HAL_GPIO_Init+0x25a>
 800b116:	2303      	movs	r3, #3
 800b118:	e01d      	b.n	800b156 <HAL_GPIO_Init+0x25a>
 800b11a:	2302      	movs	r3, #2
 800b11c:	e01b      	b.n	800b156 <HAL_GPIO_Init+0x25a>
 800b11e:	2301      	movs	r3, #1
 800b120:	e019      	b.n	800b156 <HAL_GPIO_Init+0x25a>
 800b122:	bf00      	nop
 800b124:	58000080 	.word	0x58000080
 800b128:	58024400 	.word	0x58024400
 800b12c:	58000400 	.word	0x58000400
 800b130:	58020000 	.word	0x58020000
 800b134:	58020400 	.word	0x58020400
 800b138:	58020800 	.word	0x58020800
 800b13c:	58020c00 	.word	0x58020c00
 800b140:	58021000 	.word	0x58021000
 800b144:	58021400 	.word	0x58021400
 800b148:	58021800 	.word	0x58021800
 800b14c:	58021c00 	.word	0x58021c00
 800b150:	58022400 	.word	0x58022400
 800b154:	2300      	movs	r3, #0
 800b156:	69fa      	ldr	r2, [r7, #28]
 800b158:	f002 0203 	and.w	r2, r2, #3
 800b15c:	0092      	lsls	r2, r2, #2
 800b15e:	4093      	lsls	r3, r2
 800b160:	69ba      	ldr	r2, [r7, #24]
 800b162:	4313      	orrs	r3, r2
 800b164:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b166:	4938      	ldr	r1, [pc, #224]	@ (800b248 <HAL_GPIO_Init+0x34c>)
 800b168:	69fb      	ldr	r3, [r7, #28]
 800b16a:	089b      	lsrs	r3, r3, #2
 800b16c:	3302      	adds	r3, #2
 800b16e:	69ba      	ldr	r2, [r7, #24]
 800b170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b174:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b17c:	693b      	ldr	r3, [r7, #16]
 800b17e:	43db      	mvns	r3, r3
 800b180:	69ba      	ldr	r2, [r7, #24]
 800b182:	4013      	ands	r3, r2
 800b184:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	685b      	ldr	r3, [r3, #4]
 800b18a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d003      	beq.n	800b19a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800b192:	69ba      	ldr	r2, [r7, #24]
 800b194:	693b      	ldr	r3, [r7, #16]
 800b196:	4313      	orrs	r3, r2
 800b198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800b19a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b19e:	69bb      	ldr	r3, [r7, #24]
 800b1a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800b1a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b1a6:	685b      	ldr	r3, [r3, #4]
 800b1a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	43db      	mvns	r3, r3
 800b1ae:	69ba      	ldr	r2, [r7, #24]
 800b1b0:	4013      	ands	r3, r2
 800b1b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	685b      	ldr	r3, [r3, #4]
 800b1b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d003      	beq.n	800b1c8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800b1c0:	69ba      	ldr	r2, [r7, #24]
 800b1c2:	693b      	ldr	r3, [r7, #16]
 800b1c4:	4313      	orrs	r3, r2
 800b1c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800b1c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b1cc:	69bb      	ldr	r3, [r7, #24]
 800b1ce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800b1d0:	697b      	ldr	r3, [r7, #20]
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	43db      	mvns	r3, r3
 800b1da:	69ba      	ldr	r2, [r7, #24]
 800b1dc:	4013      	ands	r3, r2
 800b1de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	685b      	ldr	r3, [r3, #4]
 800b1e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d003      	beq.n	800b1f4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800b1ec:	69ba      	ldr	r2, [r7, #24]
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	4313      	orrs	r3, r2
 800b1f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	69ba      	ldr	r2, [r7, #24]
 800b1f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	43db      	mvns	r3, r3
 800b204:	69ba      	ldr	r2, [r7, #24]
 800b206:	4013      	ands	r3, r2
 800b208:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	685b      	ldr	r3, [r3, #4]
 800b20e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b212:	2b00      	cmp	r3, #0
 800b214:	d003      	beq.n	800b21e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800b216:	69ba      	ldr	r2, [r7, #24]
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	4313      	orrs	r3, r2
 800b21c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	69ba      	ldr	r2, [r7, #24]
 800b222:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800b224:	69fb      	ldr	r3, [r7, #28]
 800b226:	3301      	adds	r3, #1
 800b228:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	681a      	ldr	r2, [r3, #0]
 800b22e:	69fb      	ldr	r3, [r7, #28]
 800b230:	fa22 f303 	lsr.w	r3, r2, r3
 800b234:	2b00      	cmp	r3, #0
 800b236:	f47f ae6b 	bne.w	800af10 <HAL_GPIO_Init+0x14>
  }
}
 800b23a:	bf00      	nop
 800b23c:	bf00      	nop
 800b23e:	3724      	adds	r7, #36	@ 0x24
 800b240:	46bd      	mov	sp, r7
 800b242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b246:	4770      	bx	lr
 800b248:	58000400 	.word	0x58000400

0800b24c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b085      	sub	sp, #20
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	460b      	mov	r3, r1
 800b256:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	691a      	ldr	r2, [r3, #16]
 800b25c:	887b      	ldrh	r3, [r7, #2]
 800b25e:	4013      	ands	r3, r2
 800b260:	2b00      	cmp	r3, #0
 800b262:	d002      	beq.n	800b26a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b264:	2301      	movs	r3, #1
 800b266:	73fb      	strb	r3, [r7, #15]
 800b268:	e001      	b.n	800b26e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b26a:	2300      	movs	r3, #0
 800b26c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b26e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b270:	4618      	mov	r0, r3
 800b272:	3714      	adds	r7, #20
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr

0800b27c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b083      	sub	sp, #12
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	460b      	mov	r3, r1
 800b286:	807b      	strh	r3, [r7, #2]
 800b288:	4613      	mov	r3, r2
 800b28a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b28c:	787b      	ldrb	r3, [r7, #1]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d003      	beq.n	800b29a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b292:	887a      	ldrh	r2, [r7, #2]
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800b298:	e003      	b.n	800b2a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b29a:	887b      	ldrh	r3, [r7, #2]
 800b29c:	041a      	lsls	r2, r3, #16
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	619a      	str	r2, [r3, #24]
}
 800b2a2:	bf00      	nop
 800b2a4:	370c      	adds	r7, #12
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ac:	4770      	bx	lr

0800b2ae <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800b2ae:	b580      	push	{r7, lr}
 800b2b0:	b082      	sub	sp, #8
 800b2b2:	af00      	add	r7, sp, #0
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800b2b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b2bc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800b2c0:	88fb      	ldrh	r3, [r7, #6]
 800b2c2:	4013      	ands	r3, r2
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d008      	beq.n	800b2da <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b2c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b2cc:	88fb      	ldrh	r3, [r7, #6]
 800b2ce:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b2d2:	88fb      	ldrh	r3, [r7, #6]
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f7f6 ff5f 	bl	8002198 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800b2da:	bf00      	nop
 800b2dc:	3708      	adds	r7, #8
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}
	...

0800b2e4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b084      	sub	sp, #16
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800b2ec:	4b19      	ldr	r3, [pc, #100]	@ (800b354 <HAL_PWREx_ConfigSupply+0x70>)
 800b2ee:	68db      	ldr	r3, [r3, #12]
 800b2f0:	f003 0304 	and.w	r3, r3, #4
 800b2f4:	2b04      	cmp	r3, #4
 800b2f6:	d00a      	beq.n	800b30e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b2f8:	4b16      	ldr	r3, [pc, #88]	@ (800b354 <HAL_PWREx_ConfigSupply+0x70>)
 800b2fa:	68db      	ldr	r3, [r3, #12]
 800b2fc:	f003 0307 	and.w	r3, r3, #7
 800b300:	687a      	ldr	r2, [r7, #4]
 800b302:	429a      	cmp	r2, r3
 800b304:	d001      	beq.n	800b30a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b306:	2301      	movs	r3, #1
 800b308:	e01f      	b.n	800b34a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800b30a:	2300      	movs	r3, #0
 800b30c:	e01d      	b.n	800b34a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b30e:	4b11      	ldr	r3, [pc, #68]	@ (800b354 <HAL_PWREx_ConfigSupply+0x70>)
 800b310:	68db      	ldr	r3, [r3, #12]
 800b312:	f023 0207 	bic.w	r2, r3, #7
 800b316:	490f      	ldr	r1, [pc, #60]	@ (800b354 <HAL_PWREx_ConfigSupply+0x70>)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	4313      	orrs	r3, r2
 800b31c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800b31e:	f7f9 fd6b 	bl	8004df8 <HAL_GetTick>
 800b322:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b324:	e009      	b.n	800b33a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b326:	f7f9 fd67 	bl	8004df8 <HAL_GetTick>
 800b32a:	4602      	mov	r2, r0
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	1ad3      	subs	r3, r2, r3
 800b330:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b334:	d901      	bls.n	800b33a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800b336:	2301      	movs	r3, #1
 800b338:	e007      	b.n	800b34a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b33a:	4b06      	ldr	r3, [pc, #24]	@ (800b354 <HAL_PWREx_ConfigSupply+0x70>)
 800b33c:	685b      	ldr	r3, [r3, #4]
 800b33e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b342:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b346:	d1ee      	bne.n	800b326 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800b348:	2300      	movs	r3, #0
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3710      	adds	r7, #16
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}
 800b352:	bf00      	nop
 800b354:	58024800 	.word	0x58024800

0800b358 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b08c      	sub	sp, #48	@ 0x30
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d101      	bne.n	800b36a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b366:	2301      	movs	r3, #1
 800b368:	e3c8      	b.n	800bafc <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f003 0301 	and.w	r3, r3, #1
 800b372:	2b00      	cmp	r3, #0
 800b374:	f000 8087 	beq.w	800b486 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b378:	4b88      	ldr	r3, [pc, #544]	@ (800b59c <HAL_RCC_OscConfig+0x244>)
 800b37a:	691b      	ldr	r3, [r3, #16]
 800b37c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b380:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b382:	4b86      	ldr	r3, [pc, #536]	@ (800b59c <HAL_RCC_OscConfig+0x244>)
 800b384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b386:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b38a:	2b10      	cmp	r3, #16
 800b38c:	d007      	beq.n	800b39e <HAL_RCC_OscConfig+0x46>
 800b38e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b390:	2b18      	cmp	r3, #24
 800b392:	d110      	bne.n	800b3b6 <HAL_RCC_OscConfig+0x5e>
 800b394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b396:	f003 0303 	and.w	r3, r3, #3
 800b39a:	2b02      	cmp	r3, #2
 800b39c:	d10b      	bne.n	800b3b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b39e:	4b7f      	ldr	r3, [pc, #508]	@ (800b59c <HAL_RCC_OscConfig+0x244>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d06c      	beq.n	800b484 <HAL_RCC_OscConfig+0x12c>
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	685b      	ldr	r3, [r3, #4]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d168      	bne.n	800b484 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	e3a2      	b.n	800bafc <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	685b      	ldr	r3, [r3, #4]
 800b3ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b3be:	d106      	bne.n	800b3ce <HAL_RCC_OscConfig+0x76>
 800b3c0:	4b76      	ldr	r3, [pc, #472]	@ (800b59c <HAL_RCC_OscConfig+0x244>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	4a75      	ldr	r2, [pc, #468]	@ (800b59c <HAL_RCC_OscConfig+0x244>)
 800b3c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b3ca:	6013      	str	r3, [r2, #0]
 800b3cc:	e02e      	b.n	800b42c <HAL_RCC_OscConfig+0xd4>
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	685b      	ldr	r3, [r3, #4]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d10c      	bne.n	800b3f0 <HAL_RCC_OscConfig+0x98>
 800b3d6:	4b71      	ldr	r3, [pc, #452]	@ (800b59c <HAL_RCC_OscConfig+0x244>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	4a70      	ldr	r2, [pc, #448]	@ (800b59c <HAL_RCC_OscConfig+0x244>)
 800b3dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b3e0:	6013      	str	r3, [r2, #0]
 800b3e2:	4b6e      	ldr	r3, [pc, #440]	@ (800b59c <HAL_RCC_OscConfig+0x244>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	4a6d      	ldr	r2, [pc, #436]	@ (800b59c <HAL_RCC_OscConfig+0x244>)
 800b3e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b3ec:	6013      	str	r3, [r2, #0]
 800b3ee:	e01d      	b.n	800b42c <HAL_RCC_OscConfig+0xd4>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	685b      	ldr	r3, [r3, #4]
 800b3f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b3f8:	d10c      	bne.n	800b414 <HAL_RCC_OscConfig+0xbc>
 800b3fa:	4b68      	ldr	r3, [pc, #416]	@ (800b59c <HAL_RCC_OscConfig+0x244>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	4a67      	ldr	r2, [pc, #412]	@ (800b59c <HAL_RCC_OscConfig+0x244>)
 800b400:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b404:	6013      	str	r3, [r2, #0]
 800b406:	4b65      	ldr	r3, [pc, #404]	@ (800b59c <HAL_RCC_OscConfig+0x244>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	4a64      	ldr	r2, [pc, #400]	@ (800b59c <HAL_RCC_OscConfig+0x244>)
 800b40c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b410:	6013      	str	r3, [r2, #0]
 800b412:	e00b      	b.n	800b42c <HAL_RCC_OscConfig+0xd4>
 800b414:	4b61      	ldr	r3, [pc, #388]	@ (800b59c <HAL_RCC_OscConfig+0x244>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	4a60      	ldr	r2, [pc, #384]	@ (800b59c <HAL_RCC_OscConfig+0x244>)
 800b41a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b41e:	6013      	str	r3, [r2, #0]
 800b420:	4b5e      	ldr	r3, [pc, #376]	@ (800b59c <HAL_RCC_OscConfig+0x244>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	4a5d      	ldr	r2, [pc, #372]	@ (800b59c <HAL_RCC_OscConfig+0x244>)
 800b426:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b42a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d013      	beq.n	800b45c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b434:	f7f9 fce0 	bl	8004df8 <HAL_GetTick>
 800b438:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b43a:	e008      	b.n	800b44e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b43c:	f7f9 fcdc 	bl	8004df8 <HAL_GetTick>
 800b440:	4602      	mov	r2, r0
 800b442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b444:	1ad3      	subs	r3, r2, r3
 800b446:	2b64      	cmp	r3, #100	@ 0x64
 800b448:	d901      	bls.n	800b44e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b44a:	2303      	movs	r3, #3
 800b44c:	e356      	b.n	800bafc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b44e:	4b53      	ldr	r3, [pc, #332]	@ (800b59c <HAL_RCC_OscConfig+0x244>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b456:	2b00      	cmp	r3, #0
 800b458:	d0f0      	beq.n	800b43c <HAL_RCC_OscConfig+0xe4>
 800b45a:	e014      	b.n	800b486 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b45c:	f7f9 fccc 	bl	8004df8 <HAL_GetTick>
 800b460:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b462:	e008      	b.n	800b476 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b464:	f7f9 fcc8 	bl	8004df8 <HAL_GetTick>
 800b468:	4602      	mov	r2, r0
 800b46a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b46c:	1ad3      	subs	r3, r2, r3
 800b46e:	2b64      	cmp	r3, #100	@ 0x64
 800b470:	d901      	bls.n	800b476 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b472:	2303      	movs	r3, #3
 800b474:	e342      	b.n	800bafc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b476:	4b49      	ldr	r3, [pc, #292]	@ (800b59c <HAL_RCC_OscConfig+0x244>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d1f0      	bne.n	800b464 <HAL_RCC_OscConfig+0x10c>
 800b482:	e000      	b.n	800b486 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f003 0302 	and.w	r3, r3, #2
 800b48e:	2b00      	cmp	r3, #0
 800b490:	f000 808c 	beq.w	800b5ac <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b494:	4b41      	ldr	r3, [pc, #260]	@ (800b59c <HAL_RCC_OscConfig+0x244>)
 800b496:	691b      	ldr	r3, [r3, #16]
 800b498:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b49c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b49e:	4b3f      	ldr	r3, [pc, #252]	@ (800b59c <HAL_RCC_OscConfig+0x244>)
 800b4a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4a2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b4a4:	6a3b      	ldr	r3, [r7, #32]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d007      	beq.n	800b4ba <HAL_RCC_OscConfig+0x162>
 800b4aa:	6a3b      	ldr	r3, [r7, #32]
 800b4ac:	2b18      	cmp	r3, #24
 800b4ae:	d137      	bne.n	800b520 <HAL_RCC_OscConfig+0x1c8>
 800b4b0:	69fb      	ldr	r3, [r7, #28]
 800b4b2:	f003 0303 	and.w	r3, r3, #3
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d132      	bne.n	800b520 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b4ba:	4b38      	ldr	r3, [pc, #224]	@ (800b59c <HAL_RCC_OscConfig+0x244>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f003 0304 	and.w	r3, r3, #4
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d005      	beq.n	800b4d2 <HAL_RCC_OscConfig+0x17a>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	68db      	ldr	r3, [r3, #12]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d101      	bne.n	800b4d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	e314      	b.n	800bafc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b4d2:	4b32      	ldr	r3, [pc, #200]	@ (800b59c <HAL_RCC_OscConfig+0x244>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f023 0219 	bic.w	r2, r3, #25
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	68db      	ldr	r3, [r3, #12]
 800b4de:	492f      	ldr	r1, [pc, #188]	@ (800b59c <HAL_RCC_OscConfig+0x244>)
 800b4e0:	4313      	orrs	r3, r2
 800b4e2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4e4:	f7f9 fc88 	bl	8004df8 <HAL_GetTick>
 800b4e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b4ea:	e008      	b.n	800b4fe <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b4ec:	f7f9 fc84 	bl	8004df8 <HAL_GetTick>
 800b4f0:	4602      	mov	r2, r0
 800b4f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4f4:	1ad3      	subs	r3, r2, r3
 800b4f6:	2b02      	cmp	r3, #2
 800b4f8:	d901      	bls.n	800b4fe <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800b4fa:	2303      	movs	r3, #3
 800b4fc:	e2fe      	b.n	800bafc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b4fe:	4b27      	ldr	r3, [pc, #156]	@ (800b59c <HAL_RCC_OscConfig+0x244>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f003 0304 	and.w	r3, r3, #4
 800b506:	2b00      	cmp	r3, #0
 800b508:	d0f0      	beq.n	800b4ec <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b50a:	4b24      	ldr	r3, [pc, #144]	@ (800b59c <HAL_RCC_OscConfig+0x244>)
 800b50c:	685b      	ldr	r3, [r3, #4]
 800b50e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	691b      	ldr	r3, [r3, #16]
 800b516:	061b      	lsls	r3, r3, #24
 800b518:	4920      	ldr	r1, [pc, #128]	@ (800b59c <HAL_RCC_OscConfig+0x244>)
 800b51a:	4313      	orrs	r3, r2
 800b51c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b51e:	e045      	b.n	800b5ac <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	68db      	ldr	r3, [r3, #12]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d026      	beq.n	800b576 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b528:	4b1c      	ldr	r3, [pc, #112]	@ (800b59c <HAL_RCC_OscConfig+0x244>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	f023 0219 	bic.w	r2, r3, #25
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	68db      	ldr	r3, [r3, #12]
 800b534:	4919      	ldr	r1, [pc, #100]	@ (800b59c <HAL_RCC_OscConfig+0x244>)
 800b536:	4313      	orrs	r3, r2
 800b538:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b53a:	f7f9 fc5d 	bl	8004df8 <HAL_GetTick>
 800b53e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b540:	e008      	b.n	800b554 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b542:	f7f9 fc59 	bl	8004df8 <HAL_GetTick>
 800b546:	4602      	mov	r2, r0
 800b548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b54a:	1ad3      	subs	r3, r2, r3
 800b54c:	2b02      	cmp	r3, #2
 800b54e:	d901      	bls.n	800b554 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800b550:	2303      	movs	r3, #3
 800b552:	e2d3      	b.n	800bafc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b554:	4b11      	ldr	r3, [pc, #68]	@ (800b59c <HAL_RCC_OscConfig+0x244>)
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	f003 0304 	and.w	r3, r3, #4
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d0f0      	beq.n	800b542 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b560:	4b0e      	ldr	r3, [pc, #56]	@ (800b59c <HAL_RCC_OscConfig+0x244>)
 800b562:	685b      	ldr	r3, [r3, #4]
 800b564:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	691b      	ldr	r3, [r3, #16]
 800b56c:	061b      	lsls	r3, r3, #24
 800b56e:	490b      	ldr	r1, [pc, #44]	@ (800b59c <HAL_RCC_OscConfig+0x244>)
 800b570:	4313      	orrs	r3, r2
 800b572:	604b      	str	r3, [r1, #4]
 800b574:	e01a      	b.n	800b5ac <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b576:	4b09      	ldr	r3, [pc, #36]	@ (800b59c <HAL_RCC_OscConfig+0x244>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	4a08      	ldr	r2, [pc, #32]	@ (800b59c <HAL_RCC_OscConfig+0x244>)
 800b57c:	f023 0301 	bic.w	r3, r3, #1
 800b580:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b582:	f7f9 fc39 	bl	8004df8 <HAL_GetTick>
 800b586:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b588:	e00a      	b.n	800b5a0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b58a:	f7f9 fc35 	bl	8004df8 <HAL_GetTick>
 800b58e:	4602      	mov	r2, r0
 800b590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b592:	1ad3      	subs	r3, r2, r3
 800b594:	2b02      	cmp	r3, #2
 800b596:	d903      	bls.n	800b5a0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800b598:	2303      	movs	r3, #3
 800b59a:	e2af      	b.n	800bafc <HAL_RCC_OscConfig+0x7a4>
 800b59c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b5a0:	4b96      	ldr	r3, [pc, #600]	@ (800b7fc <HAL_RCC_OscConfig+0x4a4>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f003 0304 	and.w	r3, r3, #4
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d1ee      	bne.n	800b58a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f003 0310 	and.w	r3, r3, #16
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d06a      	beq.n	800b68e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b5b8:	4b90      	ldr	r3, [pc, #576]	@ (800b7fc <HAL_RCC_OscConfig+0x4a4>)
 800b5ba:	691b      	ldr	r3, [r3, #16]
 800b5bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b5c0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b5c2:	4b8e      	ldr	r3, [pc, #568]	@ (800b7fc <HAL_RCC_OscConfig+0x4a4>)
 800b5c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5c6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b5c8:	69bb      	ldr	r3, [r7, #24]
 800b5ca:	2b08      	cmp	r3, #8
 800b5cc:	d007      	beq.n	800b5de <HAL_RCC_OscConfig+0x286>
 800b5ce:	69bb      	ldr	r3, [r7, #24]
 800b5d0:	2b18      	cmp	r3, #24
 800b5d2:	d11b      	bne.n	800b60c <HAL_RCC_OscConfig+0x2b4>
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	f003 0303 	and.w	r3, r3, #3
 800b5da:	2b01      	cmp	r3, #1
 800b5dc:	d116      	bne.n	800b60c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b5de:	4b87      	ldr	r3, [pc, #540]	@ (800b7fc <HAL_RCC_OscConfig+0x4a4>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d005      	beq.n	800b5f6 <HAL_RCC_OscConfig+0x29e>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	69db      	ldr	r3, [r3, #28]
 800b5ee:	2b80      	cmp	r3, #128	@ 0x80
 800b5f0:	d001      	beq.n	800b5f6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	e282      	b.n	800bafc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b5f6:	4b81      	ldr	r3, [pc, #516]	@ (800b7fc <HAL_RCC_OscConfig+0x4a4>)
 800b5f8:	68db      	ldr	r3, [r3, #12]
 800b5fa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6a1b      	ldr	r3, [r3, #32]
 800b602:	061b      	lsls	r3, r3, #24
 800b604:	497d      	ldr	r1, [pc, #500]	@ (800b7fc <HAL_RCC_OscConfig+0x4a4>)
 800b606:	4313      	orrs	r3, r2
 800b608:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b60a:	e040      	b.n	800b68e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	69db      	ldr	r3, [r3, #28]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d023      	beq.n	800b65c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800b614:	4b79      	ldr	r3, [pc, #484]	@ (800b7fc <HAL_RCC_OscConfig+0x4a4>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	4a78      	ldr	r2, [pc, #480]	@ (800b7fc <HAL_RCC_OscConfig+0x4a4>)
 800b61a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b61e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b620:	f7f9 fbea 	bl	8004df8 <HAL_GetTick>
 800b624:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b626:	e008      	b.n	800b63a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b628:	f7f9 fbe6 	bl	8004df8 <HAL_GetTick>
 800b62c:	4602      	mov	r2, r0
 800b62e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b630:	1ad3      	subs	r3, r2, r3
 800b632:	2b02      	cmp	r3, #2
 800b634:	d901      	bls.n	800b63a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800b636:	2303      	movs	r3, #3
 800b638:	e260      	b.n	800bafc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b63a:	4b70      	ldr	r3, [pc, #448]	@ (800b7fc <HAL_RCC_OscConfig+0x4a4>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b642:	2b00      	cmp	r3, #0
 800b644:	d0f0      	beq.n	800b628 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b646:	4b6d      	ldr	r3, [pc, #436]	@ (800b7fc <HAL_RCC_OscConfig+0x4a4>)
 800b648:	68db      	ldr	r3, [r3, #12]
 800b64a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6a1b      	ldr	r3, [r3, #32]
 800b652:	061b      	lsls	r3, r3, #24
 800b654:	4969      	ldr	r1, [pc, #420]	@ (800b7fc <HAL_RCC_OscConfig+0x4a4>)
 800b656:	4313      	orrs	r3, r2
 800b658:	60cb      	str	r3, [r1, #12]
 800b65a:	e018      	b.n	800b68e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800b65c:	4b67      	ldr	r3, [pc, #412]	@ (800b7fc <HAL_RCC_OscConfig+0x4a4>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	4a66      	ldr	r2, [pc, #408]	@ (800b7fc <HAL_RCC_OscConfig+0x4a4>)
 800b662:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b668:	f7f9 fbc6 	bl	8004df8 <HAL_GetTick>
 800b66c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b66e:	e008      	b.n	800b682 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b670:	f7f9 fbc2 	bl	8004df8 <HAL_GetTick>
 800b674:	4602      	mov	r2, r0
 800b676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b678:	1ad3      	subs	r3, r2, r3
 800b67a:	2b02      	cmp	r3, #2
 800b67c:	d901      	bls.n	800b682 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800b67e:	2303      	movs	r3, #3
 800b680:	e23c      	b.n	800bafc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b682:	4b5e      	ldr	r3, [pc, #376]	@ (800b7fc <HAL_RCC_OscConfig+0x4a4>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d1f0      	bne.n	800b670 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f003 0308 	and.w	r3, r3, #8
 800b696:	2b00      	cmp	r3, #0
 800b698:	d036      	beq.n	800b708 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	695b      	ldr	r3, [r3, #20]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d019      	beq.n	800b6d6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b6a2:	4b56      	ldr	r3, [pc, #344]	@ (800b7fc <HAL_RCC_OscConfig+0x4a4>)
 800b6a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b6a6:	4a55      	ldr	r2, [pc, #340]	@ (800b7fc <HAL_RCC_OscConfig+0x4a4>)
 800b6a8:	f043 0301 	orr.w	r3, r3, #1
 800b6ac:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b6ae:	f7f9 fba3 	bl	8004df8 <HAL_GetTick>
 800b6b2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b6b4:	e008      	b.n	800b6c8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b6b6:	f7f9 fb9f 	bl	8004df8 <HAL_GetTick>
 800b6ba:	4602      	mov	r2, r0
 800b6bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6be:	1ad3      	subs	r3, r2, r3
 800b6c0:	2b02      	cmp	r3, #2
 800b6c2:	d901      	bls.n	800b6c8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800b6c4:	2303      	movs	r3, #3
 800b6c6:	e219      	b.n	800bafc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b6c8:	4b4c      	ldr	r3, [pc, #304]	@ (800b7fc <HAL_RCC_OscConfig+0x4a4>)
 800b6ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b6cc:	f003 0302 	and.w	r3, r3, #2
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d0f0      	beq.n	800b6b6 <HAL_RCC_OscConfig+0x35e>
 800b6d4:	e018      	b.n	800b708 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b6d6:	4b49      	ldr	r3, [pc, #292]	@ (800b7fc <HAL_RCC_OscConfig+0x4a4>)
 800b6d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b6da:	4a48      	ldr	r2, [pc, #288]	@ (800b7fc <HAL_RCC_OscConfig+0x4a4>)
 800b6dc:	f023 0301 	bic.w	r3, r3, #1
 800b6e0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b6e2:	f7f9 fb89 	bl	8004df8 <HAL_GetTick>
 800b6e6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b6e8:	e008      	b.n	800b6fc <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b6ea:	f7f9 fb85 	bl	8004df8 <HAL_GetTick>
 800b6ee:	4602      	mov	r2, r0
 800b6f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6f2:	1ad3      	subs	r3, r2, r3
 800b6f4:	2b02      	cmp	r3, #2
 800b6f6:	d901      	bls.n	800b6fc <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800b6f8:	2303      	movs	r3, #3
 800b6fa:	e1ff      	b.n	800bafc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b6fc:	4b3f      	ldr	r3, [pc, #252]	@ (800b7fc <HAL_RCC_OscConfig+0x4a4>)
 800b6fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b700:	f003 0302 	and.w	r3, r3, #2
 800b704:	2b00      	cmp	r3, #0
 800b706:	d1f0      	bne.n	800b6ea <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f003 0320 	and.w	r3, r3, #32
 800b710:	2b00      	cmp	r3, #0
 800b712:	d036      	beq.n	800b782 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	699b      	ldr	r3, [r3, #24]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d019      	beq.n	800b750 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b71c:	4b37      	ldr	r3, [pc, #220]	@ (800b7fc <HAL_RCC_OscConfig+0x4a4>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	4a36      	ldr	r2, [pc, #216]	@ (800b7fc <HAL_RCC_OscConfig+0x4a4>)
 800b722:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800b726:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b728:	f7f9 fb66 	bl	8004df8 <HAL_GetTick>
 800b72c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b72e:	e008      	b.n	800b742 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b730:	f7f9 fb62 	bl	8004df8 <HAL_GetTick>
 800b734:	4602      	mov	r2, r0
 800b736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b738:	1ad3      	subs	r3, r2, r3
 800b73a:	2b02      	cmp	r3, #2
 800b73c:	d901      	bls.n	800b742 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800b73e:	2303      	movs	r3, #3
 800b740:	e1dc      	b.n	800bafc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b742:	4b2e      	ldr	r3, [pc, #184]	@ (800b7fc <HAL_RCC_OscConfig+0x4a4>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d0f0      	beq.n	800b730 <HAL_RCC_OscConfig+0x3d8>
 800b74e:	e018      	b.n	800b782 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b750:	4b2a      	ldr	r3, [pc, #168]	@ (800b7fc <HAL_RCC_OscConfig+0x4a4>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	4a29      	ldr	r2, [pc, #164]	@ (800b7fc <HAL_RCC_OscConfig+0x4a4>)
 800b756:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b75a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b75c:	f7f9 fb4c 	bl	8004df8 <HAL_GetTick>
 800b760:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b762:	e008      	b.n	800b776 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b764:	f7f9 fb48 	bl	8004df8 <HAL_GetTick>
 800b768:	4602      	mov	r2, r0
 800b76a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b76c:	1ad3      	subs	r3, r2, r3
 800b76e:	2b02      	cmp	r3, #2
 800b770:	d901      	bls.n	800b776 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800b772:	2303      	movs	r3, #3
 800b774:	e1c2      	b.n	800bafc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b776:	4b21      	ldr	r3, [pc, #132]	@ (800b7fc <HAL_RCC_OscConfig+0x4a4>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d1f0      	bne.n	800b764 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f003 0304 	and.w	r3, r3, #4
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	f000 8086 	beq.w	800b89c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b790:	4b1b      	ldr	r3, [pc, #108]	@ (800b800 <HAL_RCC_OscConfig+0x4a8>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	4a1a      	ldr	r2, [pc, #104]	@ (800b800 <HAL_RCC_OscConfig+0x4a8>)
 800b796:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b79a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b79c:	f7f9 fb2c 	bl	8004df8 <HAL_GetTick>
 800b7a0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b7a2:	e008      	b.n	800b7b6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b7a4:	f7f9 fb28 	bl	8004df8 <HAL_GetTick>
 800b7a8:	4602      	mov	r2, r0
 800b7aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7ac:	1ad3      	subs	r3, r2, r3
 800b7ae:	2b64      	cmp	r3, #100	@ 0x64
 800b7b0:	d901      	bls.n	800b7b6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800b7b2:	2303      	movs	r3, #3
 800b7b4:	e1a2      	b.n	800bafc <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b7b6:	4b12      	ldr	r3, [pc, #72]	@ (800b800 <HAL_RCC_OscConfig+0x4a8>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d0f0      	beq.n	800b7a4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	689b      	ldr	r3, [r3, #8]
 800b7c6:	2b01      	cmp	r3, #1
 800b7c8:	d106      	bne.n	800b7d8 <HAL_RCC_OscConfig+0x480>
 800b7ca:	4b0c      	ldr	r3, [pc, #48]	@ (800b7fc <HAL_RCC_OscConfig+0x4a4>)
 800b7cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b7ce:	4a0b      	ldr	r2, [pc, #44]	@ (800b7fc <HAL_RCC_OscConfig+0x4a4>)
 800b7d0:	f043 0301 	orr.w	r3, r3, #1
 800b7d4:	6713      	str	r3, [r2, #112]	@ 0x70
 800b7d6:	e032      	b.n	800b83e <HAL_RCC_OscConfig+0x4e6>
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	689b      	ldr	r3, [r3, #8]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d111      	bne.n	800b804 <HAL_RCC_OscConfig+0x4ac>
 800b7e0:	4b06      	ldr	r3, [pc, #24]	@ (800b7fc <HAL_RCC_OscConfig+0x4a4>)
 800b7e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b7e4:	4a05      	ldr	r2, [pc, #20]	@ (800b7fc <HAL_RCC_OscConfig+0x4a4>)
 800b7e6:	f023 0301 	bic.w	r3, r3, #1
 800b7ea:	6713      	str	r3, [r2, #112]	@ 0x70
 800b7ec:	4b03      	ldr	r3, [pc, #12]	@ (800b7fc <HAL_RCC_OscConfig+0x4a4>)
 800b7ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b7f0:	4a02      	ldr	r2, [pc, #8]	@ (800b7fc <HAL_RCC_OscConfig+0x4a4>)
 800b7f2:	f023 0304 	bic.w	r3, r3, #4
 800b7f6:	6713      	str	r3, [r2, #112]	@ 0x70
 800b7f8:	e021      	b.n	800b83e <HAL_RCC_OscConfig+0x4e6>
 800b7fa:	bf00      	nop
 800b7fc:	58024400 	.word	0x58024400
 800b800:	58024800 	.word	0x58024800
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	689b      	ldr	r3, [r3, #8]
 800b808:	2b05      	cmp	r3, #5
 800b80a:	d10c      	bne.n	800b826 <HAL_RCC_OscConfig+0x4ce>
 800b80c:	4b83      	ldr	r3, [pc, #524]	@ (800ba1c <HAL_RCC_OscConfig+0x6c4>)
 800b80e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b810:	4a82      	ldr	r2, [pc, #520]	@ (800ba1c <HAL_RCC_OscConfig+0x6c4>)
 800b812:	f043 0304 	orr.w	r3, r3, #4
 800b816:	6713      	str	r3, [r2, #112]	@ 0x70
 800b818:	4b80      	ldr	r3, [pc, #512]	@ (800ba1c <HAL_RCC_OscConfig+0x6c4>)
 800b81a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b81c:	4a7f      	ldr	r2, [pc, #508]	@ (800ba1c <HAL_RCC_OscConfig+0x6c4>)
 800b81e:	f043 0301 	orr.w	r3, r3, #1
 800b822:	6713      	str	r3, [r2, #112]	@ 0x70
 800b824:	e00b      	b.n	800b83e <HAL_RCC_OscConfig+0x4e6>
 800b826:	4b7d      	ldr	r3, [pc, #500]	@ (800ba1c <HAL_RCC_OscConfig+0x6c4>)
 800b828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b82a:	4a7c      	ldr	r2, [pc, #496]	@ (800ba1c <HAL_RCC_OscConfig+0x6c4>)
 800b82c:	f023 0301 	bic.w	r3, r3, #1
 800b830:	6713      	str	r3, [r2, #112]	@ 0x70
 800b832:	4b7a      	ldr	r3, [pc, #488]	@ (800ba1c <HAL_RCC_OscConfig+0x6c4>)
 800b834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b836:	4a79      	ldr	r2, [pc, #484]	@ (800ba1c <HAL_RCC_OscConfig+0x6c4>)
 800b838:	f023 0304 	bic.w	r3, r3, #4
 800b83c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	689b      	ldr	r3, [r3, #8]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d015      	beq.n	800b872 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b846:	f7f9 fad7 	bl	8004df8 <HAL_GetTick>
 800b84a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b84c:	e00a      	b.n	800b864 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b84e:	f7f9 fad3 	bl	8004df8 <HAL_GetTick>
 800b852:	4602      	mov	r2, r0
 800b854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b856:	1ad3      	subs	r3, r2, r3
 800b858:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d901      	bls.n	800b864 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800b860:	2303      	movs	r3, #3
 800b862:	e14b      	b.n	800bafc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b864:	4b6d      	ldr	r3, [pc, #436]	@ (800ba1c <HAL_RCC_OscConfig+0x6c4>)
 800b866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b868:	f003 0302 	and.w	r3, r3, #2
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d0ee      	beq.n	800b84e <HAL_RCC_OscConfig+0x4f6>
 800b870:	e014      	b.n	800b89c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b872:	f7f9 fac1 	bl	8004df8 <HAL_GetTick>
 800b876:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b878:	e00a      	b.n	800b890 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b87a:	f7f9 fabd 	bl	8004df8 <HAL_GetTick>
 800b87e:	4602      	mov	r2, r0
 800b880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b882:	1ad3      	subs	r3, r2, r3
 800b884:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b888:	4293      	cmp	r3, r2
 800b88a:	d901      	bls.n	800b890 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800b88c:	2303      	movs	r3, #3
 800b88e:	e135      	b.n	800bafc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b890:	4b62      	ldr	r3, [pc, #392]	@ (800ba1c <HAL_RCC_OscConfig+0x6c4>)
 800b892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b894:	f003 0302 	and.w	r3, r3, #2
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d1ee      	bne.n	800b87a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	f000 812a 	beq.w	800bafa <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b8a6:	4b5d      	ldr	r3, [pc, #372]	@ (800ba1c <HAL_RCC_OscConfig+0x6c4>)
 800b8a8:	691b      	ldr	r3, [r3, #16]
 800b8aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b8ae:	2b18      	cmp	r3, #24
 800b8b0:	f000 80ba 	beq.w	800ba28 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8b8:	2b02      	cmp	r3, #2
 800b8ba:	f040 8095 	bne.w	800b9e8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b8be:	4b57      	ldr	r3, [pc, #348]	@ (800ba1c <HAL_RCC_OscConfig+0x6c4>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	4a56      	ldr	r2, [pc, #344]	@ (800ba1c <HAL_RCC_OscConfig+0x6c4>)
 800b8c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b8c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8ca:	f7f9 fa95 	bl	8004df8 <HAL_GetTick>
 800b8ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b8d0:	e008      	b.n	800b8e4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b8d2:	f7f9 fa91 	bl	8004df8 <HAL_GetTick>
 800b8d6:	4602      	mov	r2, r0
 800b8d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8da:	1ad3      	subs	r3, r2, r3
 800b8dc:	2b02      	cmp	r3, #2
 800b8de:	d901      	bls.n	800b8e4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800b8e0:	2303      	movs	r3, #3
 800b8e2:	e10b      	b.n	800bafc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b8e4:	4b4d      	ldr	r3, [pc, #308]	@ (800ba1c <HAL_RCC_OscConfig+0x6c4>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d1f0      	bne.n	800b8d2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b8f0:	4b4a      	ldr	r3, [pc, #296]	@ (800ba1c <HAL_RCC_OscConfig+0x6c4>)
 800b8f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b8f4:	4b4a      	ldr	r3, [pc, #296]	@ (800ba20 <HAL_RCC_OscConfig+0x6c8>)
 800b8f6:	4013      	ands	r3, r2
 800b8f8:	687a      	ldr	r2, [r7, #4]
 800b8fa:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800b8fc:	687a      	ldr	r2, [r7, #4]
 800b8fe:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800b900:	0112      	lsls	r2, r2, #4
 800b902:	430a      	orrs	r2, r1
 800b904:	4945      	ldr	r1, [pc, #276]	@ (800ba1c <HAL_RCC_OscConfig+0x6c4>)
 800b906:	4313      	orrs	r3, r2
 800b908:	628b      	str	r3, [r1, #40]	@ 0x28
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b90e:	3b01      	subs	r3, #1
 800b910:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b918:	3b01      	subs	r3, #1
 800b91a:	025b      	lsls	r3, r3, #9
 800b91c:	b29b      	uxth	r3, r3
 800b91e:	431a      	orrs	r2, r3
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b924:	3b01      	subs	r3, #1
 800b926:	041b      	lsls	r3, r3, #16
 800b928:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b92c:	431a      	orrs	r2, r3
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b932:	3b01      	subs	r3, #1
 800b934:	061b      	lsls	r3, r3, #24
 800b936:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b93a:	4938      	ldr	r1, [pc, #224]	@ (800ba1c <HAL_RCC_OscConfig+0x6c4>)
 800b93c:	4313      	orrs	r3, r2
 800b93e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800b940:	4b36      	ldr	r3, [pc, #216]	@ (800ba1c <HAL_RCC_OscConfig+0x6c4>)
 800b942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b944:	4a35      	ldr	r2, [pc, #212]	@ (800ba1c <HAL_RCC_OscConfig+0x6c4>)
 800b946:	f023 0301 	bic.w	r3, r3, #1
 800b94a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b94c:	4b33      	ldr	r3, [pc, #204]	@ (800ba1c <HAL_RCC_OscConfig+0x6c4>)
 800b94e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b950:	4b34      	ldr	r3, [pc, #208]	@ (800ba24 <HAL_RCC_OscConfig+0x6cc>)
 800b952:	4013      	ands	r3, r2
 800b954:	687a      	ldr	r2, [r7, #4]
 800b956:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b958:	00d2      	lsls	r2, r2, #3
 800b95a:	4930      	ldr	r1, [pc, #192]	@ (800ba1c <HAL_RCC_OscConfig+0x6c4>)
 800b95c:	4313      	orrs	r3, r2
 800b95e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b960:	4b2e      	ldr	r3, [pc, #184]	@ (800ba1c <HAL_RCC_OscConfig+0x6c4>)
 800b962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b964:	f023 020c 	bic.w	r2, r3, #12
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b96c:	492b      	ldr	r1, [pc, #172]	@ (800ba1c <HAL_RCC_OscConfig+0x6c4>)
 800b96e:	4313      	orrs	r3, r2
 800b970:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b972:	4b2a      	ldr	r3, [pc, #168]	@ (800ba1c <HAL_RCC_OscConfig+0x6c4>)
 800b974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b976:	f023 0202 	bic.w	r2, r3, #2
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b97e:	4927      	ldr	r1, [pc, #156]	@ (800ba1c <HAL_RCC_OscConfig+0x6c4>)
 800b980:	4313      	orrs	r3, r2
 800b982:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b984:	4b25      	ldr	r3, [pc, #148]	@ (800ba1c <HAL_RCC_OscConfig+0x6c4>)
 800b986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b988:	4a24      	ldr	r2, [pc, #144]	@ (800ba1c <HAL_RCC_OscConfig+0x6c4>)
 800b98a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b98e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b990:	4b22      	ldr	r3, [pc, #136]	@ (800ba1c <HAL_RCC_OscConfig+0x6c4>)
 800b992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b994:	4a21      	ldr	r2, [pc, #132]	@ (800ba1c <HAL_RCC_OscConfig+0x6c4>)
 800b996:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b99a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b99c:	4b1f      	ldr	r3, [pc, #124]	@ (800ba1c <HAL_RCC_OscConfig+0x6c4>)
 800b99e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9a0:	4a1e      	ldr	r2, [pc, #120]	@ (800ba1c <HAL_RCC_OscConfig+0x6c4>)
 800b9a2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b9a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800b9a8:	4b1c      	ldr	r3, [pc, #112]	@ (800ba1c <HAL_RCC_OscConfig+0x6c4>)
 800b9aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9ac:	4a1b      	ldr	r2, [pc, #108]	@ (800ba1c <HAL_RCC_OscConfig+0x6c4>)
 800b9ae:	f043 0301 	orr.w	r3, r3, #1
 800b9b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b9b4:	4b19      	ldr	r3, [pc, #100]	@ (800ba1c <HAL_RCC_OscConfig+0x6c4>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	4a18      	ldr	r2, [pc, #96]	@ (800ba1c <HAL_RCC_OscConfig+0x6c4>)
 800b9ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b9be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9c0:	f7f9 fa1a 	bl	8004df8 <HAL_GetTick>
 800b9c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b9c6:	e008      	b.n	800b9da <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b9c8:	f7f9 fa16 	bl	8004df8 <HAL_GetTick>
 800b9cc:	4602      	mov	r2, r0
 800b9ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9d0:	1ad3      	subs	r3, r2, r3
 800b9d2:	2b02      	cmp	r3, #2
 800b9d4:	d901      	bls.n	800b9da <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800b9d6:	2303      	movs	r3, #3
 800b9d8:	e090      	b.n	800bafc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b9da:	4b10      	ldr	r3, [pc, #64]	@ (800ba1c <HAL_RCC_OscConfig+0x6c4>)
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d0f0      	beq.n	800b9c8 <HAL_RCC_OscConfig+0x670>
 800b9e6:	e088      	b.n	800bafa <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b9e8:	4b0c      	ldr	r3, [pc, #48]	@ (800ba1c <HAL_RCC_OscConfig+0x6c4>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	4a0b      	ldr	r2, [pc, #44]	@ (800ba1c <HAL_RCC_OscConfig+0x6c4>)
 800b9ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b9f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9f4:	f7f9 fa00 	bl	8004df8 <HAL_GetTick>
 800b9f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b9fa:	e008      	b.n	800ba0e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b9fc:	f7f9 f9fc 	bl	8004df8 <HAL_GetTick>
 800ba00:	4602      	mov	r2, r0
 800ba02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba04:	1ad3      	subs	r3, r2, r3
 800ba06:	2b02      	cmp	r3, #2
 800ba08:	d901      	bls.n	800ba0e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800ba0a:	2303      	movs	r3, #3
 800ba0c:	e076      	b.n	800bafc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ba0e:	4b03      	ldr	r3, [pc, #12]	@ (800ba1c <HAL_RCC_OscConfig+0x6c4>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d1f0      	bne.n	800b9fc <HAL_RCC_OscConfig+0x6a4>
 800ba1a:	e06e      	b.n	800bafa <HAL_RCC_OscConfig+0x7a2>
 800ba1c:	58024400 	.word	0x58024400
 800ba20:	fffffc0c 	.word	0xfffffc0c
 800ba24:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ba28:	4b36      	ldr	r3, [pc, #216]	@ (800bb04 <HAL_RCC_OscConfig+0x7ac>)
 800ba2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba2c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ba2e:	4b35      	ldr	r3, [pc, #212]	@ (800bb04 <HAL_RCC_OscConfig+0x7ac>)
 800ba30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba32:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba38:	2b01      	cmp	r3, #1
 800ba3a:	d031      	beq.n	800baa0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ba3c:	693b      	ldr	r3, [r7, #16]
 800ba3e:	f003 0203 	and.w	r2, r3, #3
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ba46:	429a      	cmp	r2, r3
 800ba48:	d12a      	bne.n	800baa0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	091b      	lsrs	r3, r3, #4
 800ba4e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ba56:	429a      	cmp	r2, r3
 800ba58:	d122      	bne.n	800baa0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba64:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ba66:	429a      	cmp	r2, r3
 800ba68:	d11a      	bne.n	800baa0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	0a5b      	lsrs	r3, r3, #9
 800ba6e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba76:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d111      	bne.n	800baa0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	0c1b      	lsrs	r3, r3, #16
 800ba80:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba88:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ba8a:	429a      	cmp	r2, r3
 800ba8c:	d108      	bne.n	800baa0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	0e1b      	lsrs	r3, r3, #24
 800ba92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba9a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ba9c:	429a      	cmp	r2, r3
 800ba9e:	d001      	beq.n	800baa4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800baa0:	2301      	movs	r3, #1
 800baa2:	e02b      	b.n	800bafc <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800baa4:	4b17      	ldr	r3, [pc, #92]	@ (800bb04 <HAL_RCC_OscConfig+0x7ac>)
 800baa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800baa8:	08db      	lsrs	r3, r3, #3
 800baaa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800baae:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bab4:	693a      	ldr	r2, [r7, #16]
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d01f      	beq.n	800bafa <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800baba:	4b12      	ldr	r3, [pc, #72]	@ (800bb04 <HAL_RCC_OscConfig+0x7ac>)
 800babc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800babe:	4a11      	ldr	r2, [pc, #68]	@ (800bb04 <HAL_RCC_OscConfig+0x7ac>)
 800bac0:	f023 0301 	bic.w	r3, r3, #1
 800bac4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800bac6:	f7f9 f997 	bl	8004df8 <HAL_GetTick>
 800baca:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800bacc:	bf00      	nop
 800bace:	f7f9 f993 	bl	8004df8 <HAL_GetTick>
 800bad2:	4602      	mov	r2, r0
 800bad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bad6:	4293      	cmp	r3, r2
 800bad8:	d0f9      	beq.n	800bace <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800bada:	4b0a      	ldr	r3, [pc, #40]	@ (800bb04 <HAL_RCC_OscConfig+0x7ac>)
 800badc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bade:	4b0a      	ldr	r3, [pc, #40]	@ (800bb08 <HAL_RCC_OscConfig+0x7b0>)
 800bae0:	4013      	ands	r3, r2
 800bae2:	687a      	ldr	r2, [r7, #4]
 800bae4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800bae6:	00d2      	lsls	r2, r2, #3
 800bae8:	4906      	ldr	r1, [pc, #24]	@ (800bb04 <HAL_RCC_OscConfig+0x7ac>)
 800baea:	4313      	orrs	r3, r2
 800baec:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800baee:	4b05      	ldr	r3, [pc, #20]	@ (800bb04 <HAL_RCC_OscConfig+0x7ac>)
 800baf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baf2:	4a04      	ldr	r2, [pc, #16]	@ (800bb04 <HAL_RCC_OscConfig+0x7ac>)
 800baf4:	f043 0301 	orr.w	r3, r3, #1
 800baf8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800bafa:	2300      	movs	r3, #0
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	3730      	adds	r7, #48	@ 0x30
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}
 800bb04:	58024400 	.word	0x58024400
 800bb08:	ffff0007 	.word	0xffff0007

0800bb0c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b086      	sub	sp, #24
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
 800bb14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d101      	bne.n	800bb20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	e19c      	b.n	800be5a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bb20:	4b8a      	ldr	r3, [pc, #552]	@ (800bd4c <HAL_RCC_ClockConfig+0x240>)
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	f003 030f 	and.w	r3, r3, #15
 800bb28:	683a      	ldr	r2, [r7, #0]
 800bb2a:	429a      	cmp	r2, r3
 800bb2c:	d910      	bls.n	800bb50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bb2e:	4b87      	ldr	r3, [pc, #540]	@ (800bd4c <HAL_RCC_ClockConfig+0x240>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	f023 020f 	bic.w	r2, r3, #15
 800bb36:	4985      	ldr	r1, [pc, #532]	@ (800bd4c <HAL_RCC_ClockConfig+0x240>)
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	4313      	orrs	r3, r2
 800bb3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bb3e:	4b83      	ldr	r3, [pc, #524]	@ (800bd4c <HAL_RCC_ClockConfig+0x240>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	f003 030f 	and.w	r3, r3, #15
 800bb46:	683a      	ldr	r2, [r7, #0]
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	d001      	beq.n	800bb50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	e184      	b.n	800be5a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	f003 0304 	and.w	r3, r3, #4
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d010      	beq.n	800bb7e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	691a      	ldr	r2, [r3, #16]
 800bb60:	4b7b      	ldr	r3, [pc, #492]	@ (800bd50 <HAL_RCC_ClockConfig+0x244>)
 800bb62:	699b      	ldr	r3, [r3, #24]
 800bb64:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800bb68:	429a      	cmp	r2, r3
 800bb6a:	d908      	bls.n	800bb7e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800bb6c:	4b78      	ldr	r3, [pc, #480]	@ (800bd50 <HAL_RCC_ClockConfig+0x244>)
 800bb6e:	699b      	ldr	r3, [r3, #24]
 800bb70:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	691b      	ldr	r3, [r3, #16]
 800bb78:	4975      	ldr	r1, [pc, #468]	@ (800bd50 <HAL_RCC_ClockConfig+0x244>)
 800bb7a:	4313      	orrs	r3, r2
 800bb7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	f003 0308 	and.w	r3, r3, #8
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d010      	beq.n	800bbac <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	695a      	ldr	r2, [r3, #20]
 800bb8e:	4b70      	ldr	r3, [pc, #448]	@ (800bd50 <HAL_RCC_ClockConfig+0x244>)
 800bb90:	69db      	ldr	r3, [r3, #28]
 800bb92:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800bb96:	429a      	cmp	r2, r3
 800bb98:	d908      	bls.n	800bbac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800bb9a:	4b6d      	ldr	r3, [pc, #436]	@ (800bd50 <HAL_RCC_ClockConfig+0x244>)
 800bb9c:	69db      	ldr	r3, [r3, #28]
 800bb9e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	695b      	ldr	r3, [r3, #20]
 800bba6:	496a      	ldr	r1, [pc, #424]	@ (800bd50 <HAL_RCC_ClockConfig+0x244>)
 800bba8:	4313      	orrs	r3, r2
 800bbaa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f003 0310 	and.w	r3, r3, #16
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d010      	beq.n	800bbda <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	699a      	ldr	r2, [r3, #24]
 800bbbc:	4b64      	ldr	r3, [pc, #400]	@ (800bd50 <HAL_RCC_ClockConfig+0x244>)
 800bbbe:	69db      	ldr	r3, [r3, #28]
 800bbc0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	d908      	bls.n	800bbda <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bbc8:	4b61      	ldr	r3, [pc, #388]	@ (800bd50 <HAL_RCC_ClockConfig+0x244>)
 800bbca:	69db      	ldr	r3, [r3, #28]
 800bbcc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	699b      	ldr	r3, [r3, #24]
 800bbd4:	495e      	ldr	r1, [pc, #376]	@ (800bd50 <HAL_RCC_ClockConfig+0x244>)
 800bbd6:	4313      	orrs	r3, r2
 800bbd8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f003 0320 	and.w	r3, r3, #32
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d010      	beq.n	800bc08 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	69da      	ldr	r2, [r3, #28]
 800bbea:	4b59      	ldr	r3, [pc, #356]	@ (800bd50 <HAL_RCC_ClockConfig+0x244>)
 800bbec:	6a1b      	ldr	r3, [r3, #32]
 800bbee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	d908      	bls.n	800bc08 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800bbf6:	4b56      	ldr	r3, [pc, #344]	@ (800bd50 <HAL_RCC_ClockConfig+0x244>)
 800bbf8:	6a1b      	ldr	r3, [r3, #32]
 800bbfa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	69db      	ldr	r3, [r3, #28]
 800bc02:	4953      	ldr	r1, [pc, #332]	@ (800bd50 <HAL_RCC_ClockConfig+0x244>)
 800bc04:	4313      	orrs	r3, r2
 800bc06:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f003 0302 	and.w	r3, r3, #2
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d010      	beq.n	800bc36 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	68da      	ldr	r2, [r3, #12]
 800bc18:	4b4d      	ldr	r3, [pc, #308]	@ (800bd50 <HAL_RCC_ClockConfig+0x244>)
 800bc1a:	699b      	ldr	r3, [r3, #24]
 800bc1c:	f003 030f 	and.w	r3, r3, #15
 800bc20:	429a      	cmp	r2, r3
 800bc22:	d908      	bls.n	800bc36 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bc24:	4b4a      	ldr	r3, [pc, #296]	@ (800bd50 <HAL_RCC_ClockConfig+0x244>)
 800bc26:	699b      	ldr	r3, [r3, #24]
 800bc28:	f023 020f 	bic.w	r2, r3, #15
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	68db      	ldr	r3, [r3, #12]
 800bc30:	4947      	ldr	r1, [pc, #284]	@ (800bd50 <HAL_RCC_ClockConfig+0x244>)
 800bc32:	4313      	orrs	r3, r2
 800bc34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f003 0301 	and.w	r3, r3, #1
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d055      	beq.n	800bcee <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800bc42:	4b43      	ldr	r3, [pc, #268]	@ (800bd50 <HAL_RCC_ClockConfig+0x244>)
 800bc44:	699b      	ldr	r3, [r3, #24]
 800bc46:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	689b      	ldr	r3, [r3, #8]
 800bc4e:	4940      	ldr	r1, [pc, #256]	@ (800bd50 <HAL_RCC_ClockConfig+0x244>)
 800bc50:	4313      	orrs	r3, r2
 800bc52:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	685b      	ldr	r3, [r3, #4]
 800bc58:	2b02      	cmp	r3, #2
 800bc5a:	d107      	bne.n	800bc6c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bc5c:	4b3c      	ldr	r3, [pc, #240]	@ (800bd50 <HAL_RCC_ClockConfig+0x244>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d121      	bne.n	800bcac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bc68:	2301      	movs	r3, #1
 800bc6a:	e0f6      	b.n	800be5a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	685b      	ldr	r3, [r3, #4]
 800bc70:	2b03      	cmp	r3, #3
 800bc72:	d107      	bne.n	800bc84 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bc74:	4b36      	ldr	r3, [pc, #216]	@ (800bd50 <HAL_RCC_ClockConfig+0x244>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d115      	bne.n	800bcac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bc80:	2301      	movs	r3, #1
 800bc82:	e0ea      	b.n	800be5a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	685b      	ldr	r3, [r3, #4]
 800bc88:	2b01      	cmp	r3, #1
 800bc8a:	d107      	bne.n	800bc9c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bc8c:	4b30      	ldr	r3, [pc, #192]	@ (800bd50 <HAL_RCC_ClockConfig+0x244>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d109      	bne.n	800bcac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bc98:	2301      	movs	r3, #1
 800bc9a:	e0de      	b.n	800be5a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bc9c:	4b2c      	ldr	r3, [pc, #176]	@ (800bd50 <HAL_RCC_ClockConfig+0x244>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f003 0304 	and.w	r3, r3, #4
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d101      	bne.n	800bcac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bca8:	2301      	movs	r3, #1
 800bcaa:	e0d6      	b.n	800be5a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800bcac:	4b28      	ldr	r3, [pc, #160]	@ (800bd50 <HAL_RCC_ClockConfig+0x244>)
 800bcae:	691b      	ldr	r3, [r3, #16]
 800bcb0:	f023 0207 	bic.w	r2, r3, #7
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	685b      	ldr	r3, [r3, #4]
 800bcb8:	4925      	ldr	r1, [pc, #148]	@ (800bd50 <HAL_RCC_ClockConfig+0x244>)
 800bcba:	4313      	orrs	r3, r2
 800bcbc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bcbe:	f7f9 f89b 	bl	8004df8 <HAL_GetTick>
 800bcc2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bcc4:	e00a      	b.n	800bcdc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bcc6:	f7f9 f897 	bl	8004df8 <HAL_GetTick>
 800bcca:	4602      	mov	r2, r0
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	1ad3      	subs	r3, r2, r3
 800bcd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bcd4:	4293      	cmp	r3, r2
 800bcd6:	d901      	bls.n	800bcdc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800bcd8:	2303      	movs	r3, #3
 800bcda:	e0be      	b.n	800be5a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bcdc:	4b1c      	ldr	r3, [pc, #112]	@ (800bd50 <HAL_RCC_ClockConfig+0x244>)
 800bcde:	691b      	ldr	r3, [r3, #16]
 800bce0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	685b      	ldr	r3, [r3, #4]
 800bce8:	00db      	lsls	r3, r3, #3
 800bcea:	429a      	cmp	r2, r3
 800bcec:	d1eb      	bne.n	800bcc6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f003 0302 	and.w	r3, r3, #2
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d010      	beq.n	800bd1c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	68da      	ldr	r2, [r3, #12]
 800bcfe:	4b14      	ldr	r3, [pc, #80]	@ (800bd50 <HAL_RCC_ClockConfig+0x244>)
 800bd00:	699b      	ldr	r3, [r3, #24]
 800bd02:	f003 030f 	and.w	r3, r3, #15
 800bd06:	429a      	cmp	r2, r3
 800bd08:	d208      	bcs.n	800bd1c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bd0a:	4b11      	ldr	r3, [pc, #68]	@ (800bd50 <HAL_RCC_ClockConfig+0x244>)
 800bd0c:	699b      	ldr	r3, [r3, #24]
 800bd0e:	f023 020f 	bic.w	r2, r3, #15
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	68db      	ldr	r3, [r3, #12]
 800bd16:	490e      	ldr	r1, [pc, #56]	@ (800bd50 <HAL_RCC_ClockConfig+0x244>)
 800bd18:	4313      	orrs	r3, r2
 800bd1a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bd1c:	4b0b      	ldr	r3, [pc, #44]	@ (800bd4c <HAL_RCC_ClockConfig+0x240>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	f003 030f 	and.w	r3, r3, #15
 800bd24:	683a      	ldr	r2, [r7, #0]
 800bd26:	429a      	cmp	r2, r3
 800bd28:	d214      	bcs.n	800bd54 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bd2a:	4b08      	ldr	r3, [pc, #32]	@ (800bd4c <HAL_RCC_ClockConfig+0x240>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	f023 020f 	bic.w	r2, r3, #15
 800bd32:	4906      	ldr	r1, [pc, #24]	@ (800bd4c <HAL_RCC_ClockConfig+0x240>)
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	4313      	orrs	r3, r2
 800bd38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bd3a:	4b04      	ldr	r3, [pc, #16]	@ (800bd4c <HAL_RCC_ClockConfig+0x240>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	f003 030f 	and.w	r3, r3, #15
 800bd42:	683a      	ldr	r2, [r7, #0]
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d005      	beq.n	800bd54 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800bd48:	2301      	movs	r3, #1
 800bd4a:	e086      	b.n	800be5a <HAL_RCC_ClockConfig+0x34e>
 800bd4c:	52002000 	.word	0x52002000
 800bd50:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f003 0304 	and.w	r3, r3, #4
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d010      	beq.n	800bd82 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	691a      	ldr	r2, [r3, #16]
 800bd64:	4b3f      	ldr	r3, [pc, #252]	@ (800be64 <HAL_RCC_ClockConfig+0x358>)
 800bd66:	699b      	ldr	r3, [r3, #24]
 800bd68:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800bd6c:	429a      	cmp	r2, r3
 800bd6e:	d208      	bcs.n	800bd82 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800bd70:	4b3c      	ldr	r3, [pc, #240]	@ (800be64 <HAL_RCC_ClockConfig+0x358>)
 800bd72:	699b      	ldr	r3, [r3, #24]
 800bd74:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	691b      	ldr	r3, [r3, #16]
 800bd7c:	4939      	ldr	r1, [pc, #228]	@ (800be64 <HAL_RCC_ClockConfig+0x358>)
 800bd7e:	4313      	orrs	r3, r2
 800bd80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	f003 0308 	and.w	r3, r3, #8
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d010      	beq.n	800bdb0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	695a      	ldr	r2, [r3, #20]
 800bd92:	4b34      	ldr	r3, [pc, #208]	@ (800be64 <HAL_RCC_ClockConfig+0x358>)
 800bd94:	69db      	ldr	r3, [r3, #28]
 800bd96:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800bd9a:	429a      	cmp	r2, r3
 800bd9c:	d208      	bcs.n	800bdb0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800bd9e:	4b31      	ldr	r3, [pc, #196]	@ (800be64 <HAL_RCC_ClockConfig+0x358>)
 800bda0:	69db      	ldr	r3, [r3, #28]
 800bda2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	695b      	ldr	r3, [r3, #20]
 800bdaa:	492e      	ldr	r1, [pc, #184]	@ (800be64 <HAL_RCC_ClockConfig+0x358>)
 800bdac:	4313      	orrs	r3, r2
 800bdae:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	f003 0310 	and.w	r3, r3, #16
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d010      	beq.n	800bdde <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	699a      	ldr	r2, [r3, #24]
 800bdc0:	4b28      	ldr	r3, [pc, #160]	@ (800be64 <HAL_RCC_ClockConfig+0x358>)
 800bdc2:	69db      	ldr	r3, [r3, #28]
 800bdc4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bdc8:	429a      	cmp	r2, r3
 800bdca:	d208      	bcs.n	800bdde <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bdcc:	4b25      	ldr	r3, [pc, #148]	@ (800be64 <HAL_RCC_ClockConfig+0x358>)
 800bdce:	69db      	ldr	r3, [r3, #28]
 800bdd0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	699b      	ldr	r3, [r3, #24]
 800bdd8:	4922      	ldr	r1, [pc, #136]	@ (800be64 <HAL_RCC_ClockConfig+0x358>)
 800bdda:	4313      	orrs	r3, r2
 800bddc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	f003 0320 	and.w	r3, r3, #32
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d010      	beq.n	800be0c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	69da      	ldr	r2, [r3, #28]
 800bdee:	4b1d      	ldr	r3, [pc, #116]	@ (800be64 <HAL_RCC_ClockConfig+0x358>)
 800bdf0:	6a1b      	ldr	r3, [r3, #32]
 800bdf2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800bdf6:	429a      	cmp	r2, r3
 800bdf8:	d208      	bcs.n	800be0c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800bdfa:	4b1a      	ldr	r3, [pc, #104]	@ (800be64 <HAL_RCC_ClockConfig+0x358>)
 800bdfc:	6a1b      	ldr	r3, [r3, #32]
 800bdfe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	69db      	ldr	r3, [r3, #28]
 800be06:	4917      	ldr	r1, [pc, #92]	@ (800be64 <HAL_RCC_ClockConfig+0x358>)
 800be08:	4313      	orrs	r3, r2
 800be0a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800be0c:	f000 f834 	bl	800be78 <HAL_RCC_GetSysClockFreq>
 800be10:	4602      	mov	r2, r0
 800be12:	4b14      	ldr	r3, [pc, #80]	@ (800be64 <HAL_RCC_ClockConfig+0x358>)
 800be14:	699b      	ldr	r3, [r3, #24]
 800be16:	0a1b      	lsrs	r3, r3, #8
 800be18:	f003 030f 	and.w	r3, r3, #15
 800be1c:	4912      	ldr	r1, [pc, #72]	@ (800be68 <HAL_RCC_ClockConfig+0x35c>)
 800be1e:	5ccb      	ldrb	r3, [r1, r3]
 800be20:	f003 031f 	and.w	r3, r3, #31
 800be24:	fa22 f303 	lsr.w	r3, r2, r3
 800be28:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800be2a:	4b0e      	ldr	r3, [pc, #56]	@ (800be64 <HAL_RCC_ClockConfig+0x358>)
 800be2c:	699b      	ldr	r3, [r3, #24]
 800be2e:	f003 030f 	and.w	r3, r3, #15
 800be32:	4a0d      	ldr	r2, [pc, #52]	@ (800be68 <HAL_RCC_ClockConfig+0x35c>)
 800be34:	5cd3      	ldrb	r3, [r2, r3]
 800be36:	f003 031f 	and.w	r3, r3, #31
 800be3a:	693a      	ldr	r2, [r7, #16]
 800be3c:	fa22 f303 	lsr.w	r3, r2, r3
 800be40:	4a0a      	ldr	r2, [pc, #40]	@ (800be6c <HAL_RCC_ClockConfig+0x360>)
 800be42:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800be44:	4a0a      	ldr	r2, [pc, #40]	@ (800be70 <HAL_RCC_ClockConfig+0x364>)
 800be46:	693b      	ldr	r3, [r7, #16]
 800be48:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800be4a:	4b0a      	ldr	r3, [pc, #40]	@ (800be74 <HAL_RCC_ClockConfig+0x368>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	4618      	mov	r0, r3
 800be50:	f7f8 ff88 	bl	8004d64 <HAL_InitTick>
 800be54:	4603      	mov	r3, r0
 800be56:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800be58:	7bfb      	ldrb	r3, [r7, #15]
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3718      	adds	r7, #24
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}
 800be62:	bf00      	nop
 800be64:	58024400 	.word	0x58024400
 800be68:	080152fc 	.word	0x080152fc
 800be6c:	2400003c 	.word	0x2400003c
 800be70:	24000038 	.word	0x24000038
 800be74:	24000040 	.word	0x24000040

0800be78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800be78:	b480      	push	{r7}
 800be7a:	b089      	sub	sp, #36	@ 0x24
 800be7c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800be7e:	4bb3      	ldr	r3, [pc, #716]	@ (800c14c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800be80:	691b      	ldr	r3, [r3, #16]
 800be82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800be86:	2b18      	cmp	r3, #24
 800be88:	f200 8155 	bhi.w	800c136 <HAL_RCC_GetSysClockFreq+0x2be>
 800be8c:	a201      	add	r2, pc, #4	@ (adr r2, 800be94 <HAL_RCC_GetSysClockFreq+0x1c>)
 800be8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be92:	bf00      	nop
 800be94:	0800bef9 	.word	0x0800bef9
 800be98:	0800c137 	.word	0x0800c137
 800be9c:	0800c137 	.word	0x0800c137
 800bea0:	0800c137 	.word	0x0800c137
 800bea4:	0800c137 	.word	0x0800c137
 800bea8:	0800c137 	.word	0x0800c137
 800beac:	0800c137 	.word	0x0800c137
 800beb0:	0800c137 	.word	0x0800c137
 800beb4:	0800bf1f 	.word	0x0800bf1f
 800beb8:	0800c137 	.word	0x0800c137
 800bebc:	0800c137 	.word	0x0800c137
 800bec0:	0800c137 	.word	0x0800c137
 800bec4:	0800c137 	.word	0x0800c137
 800bec8:	0800c137 	.word	0x0800c137
 800becc:	0800c137 	.word	0x0800c137
 800bed0:	0800c137 	.word	0x0800c137
 800bed4:	0800bf25 	.word	0x0800bf25
 800bed8:	0800c137 	.word	0x0800c137
 800bedc:	0800c137 	.word	0x0800c137
 800bee0:	0800c137 	.word	0x0800c137
 800bee4:	0800c137 	.word	0x0800c137
 800bee8:	0800c137 	.word	0x0800c137
 800beec:	0800c137 	.word	0x0800c137
 800bef0:	0800c137 	.word	0x0800c137
 800bef4:	0800bf2b 	.word	0x0800bf2b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bef8:	4b94      	ldr	r3, [pc, #592]	@ (800c14c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f003 0320 	and.w	r3, r3, #32
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d009      	beq.n	800bf18 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf04:	4b91      	ldr	r3, [pc, #580]	@ (800c14c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	08db      	lsrs	r3, r3, #3
 800bf0a:	f003 0303 	and.w	r3, r3, #3
 800bf0e:	4a90      	ldr	r2, [pc, #576]	@ (800c150 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800bf10:	fa22 f303 	lsr.w	r3, r2, r3
 800bf14:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800bf16:	e111      	b.n	800c13c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800bf18:	4b8d      	ldr	r3, [pc, #564]	@ (800c150 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800bf1a:	61bb      	str	r3, [r7, #24]
      break;
 800bf1c:	e10e      	b.n	800c13c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800bf1e:	4b8d      	ldr	r3, [pc, #564]	@ (800c154 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800bf20:	61bb      	str	r3, [r7, #24]
      break;
 800bf22:	e10b      	b.n	800c13c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800bf24:	4b8c      	ldr	r3, [pc, #560]	@ (800c158 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800bf26:	61bb      	str	r3, [r7, #24]
      break;
 800bf28:	e108      	b.n	800c13c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bf2a:	4b88      	ldr	r3, [pc, #544]	@ (800c14c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf2e:	f003 0303 	and.w	r3, r3, #3
 800bf32:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800bf34:	4b85      	ldr	r3, [pc, #532]	@ (800c14c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf38:	091b      	lsrs	r3, r3, #4
 800bf3a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bf3e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800bf40:	4b82      	ldr	r3, [pc, #520]	@ (800c14c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf44:	f003 0301 	and.w	r3, r3, #1
 800bf48:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bf4a:	4b80      	ldr	r3, [pc, #512]	@ (800c14c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf4e:	08db      	lsrs	r3, r3, #3
 800bf50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bf54:	68fa      	ldr	r2, [r7, #12]
 800bf56:	fb02 f303 	mul.w	r3, r2, r3
 800bf5a:	ee07 3a90 	vmov	s15, r3
 800bf5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf62:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800bf66:	693b      	ldr	r3, [r7, #16]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	f000 80e1 	beq.w	800c130 <HAL_RCC_GetSysClockFreq+0x2b8>
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	2b02      	cmp	r3, #2
 800bf72:	f000 8083 	beq.w	800c07c <HAL_RCC_GetSysClockFreq+0x204>
 800bf76:	697b      	ldr	r3, [r7, #20]
 800bf78:	2b02      	cmp	r3, #2
 800bf7a:	f200 80a1 	bhi.w	800c0c0 <HAL_RCC_GetSysClockFreq+0x248>
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d003      	beq.n	800bf8c <HAL_RCC_GetSysClockFreq+0x114>
 800bf84:	697b      	ldr	r3, [r7, #20]
 800bf86:	2b01      	cmp	r3, #1
 800bf88:	d056      	beq.n	800c038 <HAL_RCC_GetSysClockFreq+0x1c0>
 800bf8a:	e099      	b.n	800c0c0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf8c:	4b6f      	ldr	r3, [pc, #444]	@ (800c14c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f003 0320 	and.w	r3, r3, #32
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d02d      	beq.n	800bff4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf98:	4b6c      	ldr	r3, [pc, #432]	@ (800c14c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	08db      	lsrs	r3, r3, #3
 800bf9e:	f003 0303 	and.w	r3, r3, #3
 800bfa2:	4a6b      	ldr	r2, [pc, #428]	@ (800c150 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800bfa4:	fa22 f303 	lsr.w	r3, r2, r3
 800bfa8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	ee07 3a90 	vmov	s15, r3
 800bfb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	ee07 3a90 	vmov	s15, r3
 800bfba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfc2:	4b62      	ldr	r3, [pc, #392]	@ (800c14c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bfc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bfc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfca:	ee07 3a90 	vmov	s15, r3
 800bfce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfd2:	ed97 6a02 	vldr	s12, [r7, #8]
 800bfd6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800c15c <HAL_RCC_GetSysClockFreq+0x2e4>
 800bfda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfe2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bfe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfee:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800bff2:	e087      	b.n	800c104 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bff4:	693b      	ldr	r3, [r7, #16]
 800bff6:	ee07 3a90 	vmov	s15, r3
 800bffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bffe:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800c160 <HAL_RCC_GetSysClockFreq+0x2e8>
 800c002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c006:	4b51      	ldr	r3, [pc, #324]	@ (800c14c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c00a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c00e:	ee07 3a90 	vmov	s15, r3
 800c012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c016:	ed97 6a02 	vldr	s12, [r7, #8]
 800c01a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800c15c <HAL_RCC_GetSysClockFreq+0x2e4>
 800c01e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c026:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c02a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c02e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c032:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c036:	e065      	b.n	800c104 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	ee07 3a90 	vmov	s15, r3
 800c03e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c042:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800c164 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c04a:	4b40      	ldr	r3, [pc, #256]	@ (800c14c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c04c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c04e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c052:	ee07 3a90 	vmov	s15, r3
 800c056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c05a:	ed97 6a02 	vldr	s12, [r7, #8]
 800c05e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800c15c <HAL_RCC_GetSysClockFreq+0x2e4>
 800c062:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c066:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c06a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c06e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c072:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c076:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c07a:	e043      	b.n	800c104 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c07c:	693b      	ldr	r3, [r7, #16]
 800c07e:	ee07 3a90 	vmov	s15, r3
 800c082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c086:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800c168 <HAL_RCC_GetSysClockFreq+0x2f0>
 800c08a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c08e:	4b2f      	ldr	r3, [pc, #188]	@ (800c14c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c096:	ee07 3a90 	vmov	s15, r3
 800c09a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c09e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c0a2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800c15c <HAL_RCC_GetSysClockFreq+0x2e4>
 800c0a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c0b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c0be:	e021      	b.n	800c104 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c0c0:	693b      	ldr	r3, [r7, #16]
 800c0c2:	ee07 3a90 	vmov	s15, r3
 800c0c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0ca:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800c164 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c0ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0d2:	4b1e      	ldr	r3, [pc, #120]	@ (800c14c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c0d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0da:	ee07 3a90 	vmov	s15, r3
 800c0de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0e2:	ed97 6a02 	vldr	s12, [r7, #8]
 800c0e6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800c15c <HAL_RCC_GetSysClockFreq+0x2e4>
 800c0ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c0f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c102:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800c104:	4b11      	ldr	r3, [pc, #68]	@ (800c14c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c108:	0a5b      	lsrs	r3, r3, #9
 800c10a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c10e:	3301      	adds	r3, #1
 800c110:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	ee07 3a90 	vmov	s15, r3
 800c118:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c11c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c120:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c124:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c128:	ee17 3a90 	vmov	r3, s15
 800c12c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800c12e:	e005      	b.n	800c13c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800c130:	2300      	movs	r3, #0
 800c132:	61bb      	str	r3, [r7, #24]
      break;
 800c134:	e002      	b.n	800c13c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800c136:	4b07      	ldr	r3, [pc, #28]	@ (800c154 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c138:	61bb      	str	r3, [r7, #24]
      break;
 800c13a:	bf00      	nop
  }

  return sysclockfreq;
 800c13c:	69bb      	ldr	r3, [r7, #24]
}
 800c13e:	4618      	mov	r0, r3
 800c140:	3724      	adds	r7, #36	@ 0x24
 800c142:	46bd      	mov	sp, r7
 800c144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c148:	4770      	bx	lr
 800c14a:	bf00      	nop
 800c14c:	58024400 	.word	0x58024400
 800c150:	03d09000 	.word	0x03d09000
 800c154:	003d0900 	.word	0x003d0900
 800c158:	007a1200 	.word	0x007a1200
 800c15c:	46000000 	.word	0x46000000
 800c160:	4c742400 	.word	0x4c742400
 800c164:	4a742400 	.word	0x4a742400
 800c168:	4af42400 	.word	0x4af42400

0800c16c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b082      	sub	sp, #8
 800c170:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c172:	f7ff fe81 	bl	800be78 <HAL_RCC_GetSysClockFreq>
 800c176:	4602      	mov	r2, r0
 800c178:	4b10      	ldr	r3, [pc, #64]	@ (800c1bc <HAL_RCC_GetHCLKFreq+0x50>)
 800c17a:	699b      	ldr	r3, [r3, #24]
 800c17c:	0a1b      	lsrs	r3, r3, #8
 800c17e:	f003 030f 	and.w	r3, r3, #15
 800c182:	490f      	ldr	r1, [pc, #60]	@ (800c1c0 <HAL_RCC_GetHCLKFreq+0x54>)
 800c184:	5ccb      	ldrb	r3, [r1, r3]
 800c186:	f003 031f 	and.w	r3, r3, #31
 800c18a:	fa22 f303 	lsr.w	r3, r2, r3
 800c18e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c190:	4b0a      	ldr	r3, [pc, #40]	@ (800c1bc <HAL_RCC_GetHCLKFreq+0x50>)
 800c192:	699b      	ldr	r3, [r3, #24]
 800c194:	f003 030f 	and.w	r3, r3, #15
 800c198:	4a09      	ldr	r2, [pc, #36]	@ (800c1c0 <HAL_RCC_GetHCLKFreq+0x54>)
 800c19a:	5cd3      	ldrb	r3, [r2, r3]
 800c19c:	f003 031f 	and.w	r3, r3, #31
 800c1a0:	687a      	ldr	r2, [r7, #4]
 800c1a2:	fa22 f303 	lsr.w	r3, r2, r3
 800c1a6:	4a07      	ldr	r2, [pc, #28]	@ (800c1c4 <HAL_RCC_GetHCLKFreq+0x58>)
 800c1a8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c1aa:	4a07      	ldr	r2, [pc, #28]	@ (800c1c8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800c1b0:	4b04      	ldr	r3, [pc, #16]	@ (800c1c4 <HAL_RCC_GetHCLKFreq+0x58>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3708      	adds	r7, #8
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}
 800c1bc:	58024400 	.word	0x58024400
 800c1c0:	080152fc 	.word	0x080152fc
 800c1c4:	2400003c 	.word	0x2400003c
 800c1c8:	24000038 	.word	0x24000038

0800c1cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800c1d0:	f7ff ffcc 	bl	800c16c <HAL_RCC_GetHCLKFreq>
 800c1d4:	4602      	mov	r2, r0
 800c1d6:	4b06      	ldr	r3, [pc, #24]	@ (800c1f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c1d8:	69db      	ldr	r3, [r3, #28]
 800c1da:	091b      	lsrs	r3, r3, #4
 800c1dc:	f003 0307 	and.w	r3, r3, #7
 800c1e0:	4904      	ldr	r1, [pc, #16]	@ (800c1f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c1e2:	5ccb      	ldrb	r3, [r1, r3]
 800c1e4:	f003 031f 	and.w	r3, r3, #31
 800c1e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	bd80      	pop	{r7, pc}
 800c1f0:	58024400 	.word	0x58024400
 800c1f4:	080152fc 	.word	0x080152fc

0800c1f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800c1fc:	f7ff ffb6 	bl	800c16c <HAL_RCC_GetHCLKFreq>
 800c200:	4602      	mov	r2, r0
 800c202:	4b06      	ldr	r3, [pc, #24]	@ (800c21c <HAL_RCC_GetPCLK2Freq+0x24>)
 800c204:	69db      	ldr	r3, [r3, #28]
 800c206:	0a1b      	lsrs	r3, r3, #8
 800c208:	f003 0307 	and.w	r3, r3, #7
 800c20c:	4904      	ldr	r1, [pc, #16]	@ (800c220 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c20e:	5ccb      	ldrb	r3, [r1, r3]
 800c210:	f003 031f 	and.w	r3, r3, #31
 800c214:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800c218:	4618      	mov	r0, r3
 800c21a:	bd80      	pop	{r7, pc}
 800c21c:	58024400 	.word	0x58024400
 800c220:	080152fc 	.word	0x080152fc

0800c224 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c224:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c228:	b0c6      	sub	sp, #280	@ 0x118
 800c22a:	af00      	add	r7, sp, #0
 800c22c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c230:	2300      	movs	r3, #0
 800c232:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c236:	2300      	movs	r3, #0
 800c238:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c23c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c244:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800c248:	2500      	movs	r5, #0
 800c24a:	ea54 0305 	orrs.w	r3, r4, r5
 800c24e:	d049      	beq.n	800c2e4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800c250:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c254:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c256:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c25a:	d02f      	beq.n	800c2bc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800c25c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c260:	d828      	bhi.n	800c2b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c262:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c266:	d01a      	beq.n	800c29e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800c268:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c26c:	d822      	bhi.n	800c2b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d003      	beq.n	800c27a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800c272:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c276:	d007      	beq.n	800c288 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c278:	e01c      	b.n	800c2b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c27a:	4bab      	ldr	r3, [pc, #684]	@ (800c528 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c27c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c27e:	4aaa      	ldr	r2, [pc, #680]	@ (800c528 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c280:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c284:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c286:	e01a      	b.n	800c2be <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c288:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c28c:	3308      	adds	r3, #8
 800c28e:	2102      	movs	r1, #2
 800c290:	4618      	mov	r0, r3
 800c292:	f002 fa49 	bl	800e728 <RCCEx_PLL2_Config>
 800c296:	4603      	mov	r3, r0
 800c298:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c29c:	e00f      	b.n	800c2be <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c29e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2a2:	3328      	adds	r3, #40	@ 0x28
 800c2a4:	2102      	movs	r1, #2
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f002 faf0 	bl	800e88c <RCCEx_PLL3_Config>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c2b2:	e004      	b.n	800c2be <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c2b4:	2301      	movs	r3, #1
 800c2b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c2ba:	e000      	b.n	800c2be <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800c2bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c2be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d10a      	bne.n	800c2dc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c2c6:	4b98      	ldr	r3, [pc, #608]	@ (800c528 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c2c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c2ca:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c2ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c2d4:	4a94      	ldr	r2, [pc, #592]	@ (800c528 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c2d6:	430b      	orrs	r3, r1
 800c2d8:	6513      	str	r3, [r2, #80]	@ 0x50
 800c2da:	e003      	b.n	800c2e4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c2e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c2e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ec:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800c2f0:	f04f 0900 	mov.w	r9, #0
 800c2f4:	ea58 0309 	orrs.w	r3, r8, r9
 800c2f8:	d047      	beq.n	800c38a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800c2fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c300:	2b04      	cmp	r3, #4
 800c302:	d82a      	bhi.n	800c35a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800c304:	a201      	add	r2, pc, #4	@ (adr r2, 800c30c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800c306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c30a:	bf00      	nop
 800c30c:	0800c321 	.word	0x0800c321
 800c310:	0800c32f 	.word	0x0800c32f
 800c314:	0800c345 	.word	0x0800c345
 800c318:	0800c363 	.word	0x0800c363
 800c31c:	0800c363 	.word	0x0800c363
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c320:	4b81      	ldr	r3, [pc, #516]	@ (800c528 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c324:	4a80      	ldr	r2, [pc, #512]	@ (800c528 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c326:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c32a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c32c:	e01a      	b.n	800c364 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c32e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c332:	3308      	adds	r3, #8
 800c334:	2100      	movs	r1, #0
 800c336:	4618      	mov	r0, r3
 800c338:	f002 f9f6 	bl	800e728 <RCCEx_PLL2_Config>
 800c33c:	4603      	mov	r3, r0
 800c33e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c342:	e00f      	b.n	800c364 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c344:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c348:	3328      	adds	r3, #40	@ 0x28
 800c34a:	2100      	movs	r1, #0
 800c34c:	4618      	mov	r0, r3
 800c34e:	f002 fa9d 	bl	800e88c <RCCEx_PLL3_Config>
 800c352:	4603      	mov	r3, r0
 800c354:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c358:	e004      	b.n	800c364 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c35a:	2301      	movs	r3, #1
 800c35c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c360:	e000      	b.n	800c364 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800c362:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c364:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d10a      	bne.n	800c382 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c36c:	4b6e      	ldr	r3, [pc, #440]	@ (800c528 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c36e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c370:	f023 0107 	bic.w	r1, r3, #7
 800c374:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c37a:	4a6b      	ldr	r2, [pc, #428]	@ (800c528 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c37c:	430b      	orrs	r3, r1
 800c37e:	6513      	str	r3, [r2, #80]	@ 0x50
 800c380:	e003      	b.n	800c38a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c382:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c386:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800c38a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c392:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800c396:	f04f 0b00 	mov.w	fp, #0
 800c39a:	ea5a 030b 	orrs.w	r3, sl, fp
 800c39e:	d05b      	beq.n	800c458 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800c3a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c3a8:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800c3ac:	d03b      	beq.n	800c426 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800c3ae:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800c3b2:	d834      	bhi.n	800c41e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c3b4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c3b8:	d037      	beq.n	800c42a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800c3ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c3be:	d82e      	bhi.n	800c41e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c3c0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c3c4:	d033      	beq.n	800c42e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800c3c6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c3ca:	d828      	bhi.n	800c41e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c3cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c3d0:	d01a      	beq.n	800c408 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800c3d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c3d6:	d822      	bhi.n	800c41e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d003      	beq.n	800c3e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800c3dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c3e0:	d007      	beq.n	800c3f2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800c3e2:	e01c      	b.n	800c41e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3e4:	4b50      	ldr	r3, [pc, #320]	@ (800c528 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c3e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3e8:	4a4f      	ldr	r2, [pc, #316]	@ (800c528 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c3ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c3ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c3f0:	e01e      	b.n	800c430 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c3f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3f6:	3308      	adds	r3, #8
 800c3f8:	2100      	movs	r1, #0
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f002 f994 	bl	800e728 <RCCEx_PLL2_Config>
 800c400:	4603      	mov	r3, r0
 800c402:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800c406:	e013      	b.n	800c430 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c40c:	3328      	adds	r3, #40	@ 0x28
 800c40e:	2100      	movs	r1, #0
 800c410:	4618      	mov	r0, r3
 800c412:	f002 fa3b 	bl	800e88c <RCCEx_PLL3_Config>
 800c416:	4603      	mov	r3, r0
 800c418:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c41c:	e008      	b.n	800c430 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800c41e:	2301      	movs	r3, #1
 800c420:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c424:	e004      	b.n	800c430 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800c426:	bf00      	nop
 800c428:	e002      	b.n	800c430 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800c42a:	bf00      	nop
 800c42c:	e000      	b.n	800c430 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800c42e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c430:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c434:	2b00      	cmp	r3, #0
 800c436:	d10b      	bne.n	800c450 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800c438:	4b3b      	ldr	r3, [pc, #236]	@ (800c528 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c43a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c43c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800c440:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c444:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c448:	4a37      	ldr	r2, [pc, #220]	@ (800c528 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c44a:	430b      	orrs	r3, r1
 800c44c:	6593      	str	r3, [r2, #88]	@ 0x58
 800c44e:	e003      	b.n	800c458 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c450:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c454:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c458:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c460:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800c464:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800c468:	2300      	movs	r3, #0
 800c46a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800c46e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800c472:	460b      	mov	r3, r1
 800c474:	4313      	orrs	r3, r2
 800c476:	d05d      	beq.n	800c534 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800c478:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c47c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c480:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800c484:	d03b      	beq.n	800c4fe <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800c486:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800c48a:	d834      	bhi.n	800c4f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c48c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c490:	d037      	beq.n	800c502 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800c492:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c496:	d82e      	bhi.n	800c4f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c498:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c49c:	d033      	beq.n	800c506 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800c49e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c4a2:	d828      	bhi.n	800c4f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c4a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c4a8:	d01a      	beq.n	800c4e0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800c4aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c4ae:	d822      	bhi.n	800c4f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d003      	beq.n	800c4bc <HAL_RCCEx_PeriphCLKConfig+0x298>
 800c4b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c4b8:	d007      	beq.n	800c4ca <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800c4ba:	e01c      	b.n	800c4f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c4bc:	4b1a      	ldr	r3, [pc, #104]	@ (800c528 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c4be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4c0:	4a19      	ldr	r2, [pc, #100]	@ (800c528 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c4c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c4c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c4c8:	e01e      	b.n	800c508 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c4ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4ce:	3308      	adds	r3, #8
 800c4d0:	2100      	movs	r1, #0
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	f002 f928 	bl	800e728 <RCCEx_PLL2_Config>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800c4de:	e013      	b.n	800c508 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c4e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4e4:	3328      	adds	r3, #40	@ 0x28
 800c4e6:	2100      	movs	r1, #0
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f002 f9cf 	bl	800e88c <RCCEx_PLL3_Config>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c4f4:	e008      	b.n	800c508 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c4fc:	e004      	b.n	800c508 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800c4fe:	bf00      	nop
 800c500:	e002      	b.n	800c508 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800c502:	bf00      	nop
 800c504:	e000      	b.n	800c508 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800c506:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c508:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d10d      	bne.n	800c52c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800c510:	4b05      	ldr	r3, [pc, #20]	@ (800c528 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c514:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800c518:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c51c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c520:	4a01      	ldr	r2, [pc, #4]	@ (800c528 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c522:	430b      	orrs	r3, r1
 800c524:	6593      	str	r3, [r2, #88]	@ 0x58
 800c526:	e005      	b.n	800c534 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800c528:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c52c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c530:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800c534:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c53c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800c540:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800c544:	2300      	movs	r3, #0
 800c546:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c54a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800c54e:	460b      	mov	r3, r1
 800c550:	4313      	orrs	r3, r2
 800c552:	d03a      	beq.n	800c5ca <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800c554:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c55a:	2b30      	cmp	r3, #48	@ 0x30
 800c55c:	d01f      	beq.n	800c59e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800c55e:	2b30      	cmp	r3, #48	@ 0x30
 800c560:	d819      	bhi.n	800c596 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800c562:	2b20      	cmp	r3, #32
 800c564:	d00c      	beq.n	800c580 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800c566:	2b20      	cmp	r3, #32
 800c568:	d815      	bhi.n	800c596 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d019      	beq.n	800c5a2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800c56e:	2b10      	cmp	r3, #16
 800c570:	d111      	bne.n	800c596 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c572:	4baa      	ldr	r3, [pc, #680]	@ (800c81c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c576:	4aa9      	ldr	r2, [pc, #676]	@ (800c81c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c578:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c57c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800c57e:	e011      	b.n	800c5a4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c580:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c584:	3308      	adds	r3, #8
 800c586:	2102      	movs	r1, #2
 800c588:	4618      	mov	r0, r3
 800c58a:	f002 f8cd 	bl	800e728 <RCCEx_PLL2_Config>
 800c58e:	4603      	mov	r3, r0
 800c590:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800c594:	e006      	b.n	800c5a4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c596:	2301      	movs	r3, #1
 800c598:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c59c:	e002      	b.n	800c5a4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800c59e:	bf00      	nop
 800c5a0:	e000      	b.n	800c5a4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800c5a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c5a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d10a      	bne.n	800c5c2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800c5ac:	4b9b      	ldr	r3, [pc, #620]	@ (800c81c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c5ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c5b0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800c5b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c5ba:	4a98      	ldr	r2, [pc, #608]	@ (800c81c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c5bc:	430b      	orrs	r3, r1
 800c5be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c5c0:	e003      	b.n	800c5ca <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c5c6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c5ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800c5d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c5da:	2300      	movs	r3, #0
 800c5dc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c5e0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800c5e4:	460b      	mov	r3, r1
 800c5e6:	4313      	orrs	r3, r2
 800c5e8:	d051      	beq.n	800c68e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800c5ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c5f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c5f4:	d035      	beq.n	800c662 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800c5f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c5fa:	d82e      	bhi.n	800c65a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800c5fc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c600:	d031      	beq.n	800c666 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800c602:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c606:	d828      	bhi.n	800c65a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800c608:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c60c:	d01a      	beq.n	800c644 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800c60e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c612:	d822      	bhi.n	800c65a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800c614:	2b00      	cmp	r3, #0
 800c616:	d003      	beq.n	800c620 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800c618:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c61c:	d007      	beq.n	800c62e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800c61e:	e01c      	b.n	800c65a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c620:	4b7e      	ldr	r3, [pc, #504]	@ (800c81c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c624:	4a7d      	ldr	r2, [pc, #500]	@ (800c81c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c626:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c62a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c62c:	e01c      	b.n	800c668 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c62e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c632:	3308      	adds	r3, #8
 800c634:	2100      	movs	r1, #0
 800c636:	4618      	mov	r0, r3
 800c638:	f002 f876 	bl	800e728 <RCCEx_PLL2_Config>
 800c63c:	4603      	mov	r3, r0
 800c63e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c642:	e011      	b.n	800c668 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c648:	3328      	adds	r3, #40	@ 0x28
 800c64a:	2100      	movs	r1, #0
 800c64c:	4618      	mov	r0, r3
 800c64e:	f002 f91d 	bl	800e88c <RCCEx_PLL3_Config>
 800c652:	4603      	mov	r3, r0
 800c654:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c658:	e006      	b.n	800c668 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c65a:	2301      	movs	r3, #1
 800c65c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c660:	e002      	b.n	800c668 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800c662:	bf00      	nop
 800c664:	e000      	b.n	800c668 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800c666:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c668:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d10a      	bne.n	800c686 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800c670:	4b6a      	ldr	r3, [pc, #424]	@ (800c81c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c672:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c674:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800c678:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c67c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c67e:	4a67      	ldr	r2, [pc, #412]	@ (800c81c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c680:	430b      	orrs	r3, r1
 800c682:	6513      	str	r3, [r2, #80]	@ 0x50
 800c684:	e003      	b.n	800c68e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c686:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c68a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c68e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c696:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800c69a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c69e:	2300      	movs	r3, #0
 800c6a0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c6a4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800c6a8:	460b      	mov	r3, r1
 800c6aa:	4313      	orrs	r3, r2
 800c6ac:	d053      	beq.n	800c756 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800c6ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c6b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c6b8:	d033      	beq.n	800c722 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800c6ba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c6be:	d82c      	bhi.n	800c71a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c6c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c6c4:	d02f      	beq.n	800c726 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800c6c6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c6ca:	d826      	bhi.n	800c71a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c6cc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c6d0:	d02b      	beq.n	800c72a <HAL_RCCEx_PeriphCLKConfig+0x506>
 800c6d2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c6d6:	d820      	bhi.n	800c71a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c6d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c6dc:	d012      	beq.n	800c704 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800c6de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c6e2:	d81a      	bhi.n	800c71a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d022      	beq.n	800c72e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800c6e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c6ec:	d115      	bne.n	800c71a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c6ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6f2:	3308      	adds	r3, #8
 800c6f4:	2101      	movs	r1, #1
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f002 f816 	bl	800e728 <RCCEx_PLL2_Config>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800c702:	e015      	b.n	800c730 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c704:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c708:	3328      	adds	r3, #40	@ 0x28
 800c70a:	2101      	movs	r1, #1
 800c70c:	4618      	mov	r0, r3
 800c70e:	f002 f8bd 	bl	800e88c <RCCEx_PLL3_Config>
 800c712:	4603      	mov	r3, r0
 800c714:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800c718:	e00a      	b.n	800c730 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c71a:	2301      	movs	r3, #1
 800c71c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c720:	e006      	b.n	800c730 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c722:	bf00      	nop
 800c724:	e004      	b.n	800c730 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c726:	bf00      	nop
 800c728:	e002      	b.n	800c730 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c72a:	bf00      	nop
 800c72c:	e000      	b.n	800c730 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c72e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c730:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c734:	2b00      	cmp	r3, #0
 800c736:	d10a      	bne.n	800c74e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800c738:	4b38      	ldr	r3, [pc, #224]	@ (800c81c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c73a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c73c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800c740:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c744:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c746:	4a35      	ldr	r2, [pc, #212]	@ (800c81c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c748:	430b      	orrs	r3, r1
 800c74a:	6513      	str	r3, [r2, #80]	@ 0x50
 800c74c:	e003      	b.n	800c756 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c74e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c752:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c756:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c75e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800c762:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c766:	2300      	movs	r3, #0
 800c768:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c76c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800c770:	460b      	mov	r3, r1
 800c772:	4313      	orrs	r3, r2
 800c774:	d058      	beq.n	800c828 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800c776:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c77a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c77e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c782:	d033      	beq.n	800c7ec <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800c784:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c788:	d82c      	bhi.n	800c7e4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c78a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c78e:	d02f      	beq.n	800c7f0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800c790:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c794:	d826      	bhi.n	800c7e4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c796:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c79a:	d02b      	beq.n	800c7f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800c79c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c7a0:	d820      	bhi.n	800c7e4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c7a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c7a6:	d012      	beq.n	800c7ce <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800c7a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c7ac:	d81a      	bhi.n	800c7e4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d022      	beq.n	800c7f8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800c7b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c7b6:	d115      	bne.n	800c7e4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c7b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7bc:	3308      	adds	r3, #8
 800c7be:	2101      	movs	r1, #1
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	f001 ffb1 	bl	800e728 <RCCEx_PLL2_Config>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c7cc:	e015      	b.n	800c7fa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c7ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7d2:	3328      	adds	r3, #40	@ 0x28
 800c7d4:	2101      	movs	r1, #1
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	f002 f858 	bl	800e88c <RCCEx_PLL3_Config>
 800c7dc:	4603      	mov	r3, r0
 800c7de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c7e2:	e00a      	b.n	800c7fa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c7ea:	e006      	b.n	800c7fa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c7ec:	bf00      	nop
 800c7ee:	e004      	b.n	800c7fa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c7f0:	bf00      	nop
 800c7f2:	e002      	b.n	800c7fa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c7f4:	bf00      	nop
 800c7f6:	e000      	b.n	800c7fa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c7f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c7fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d10e      	bne.n	800c820 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c802:	4b06      	ldr	r3, [pc, #24]	@ (800c81c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c806:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c80a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c80e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c812:	4a02      	ldr	r2, [pc, #8]	@ (800c81c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c814:	430b      	orrs	r3, r1
 800c816:	6593      	str	r3, [r2, #88]	@ 0x58
 800c818:	e006      	b.n	800c828 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800c81a:	bf00      	nop
 800c81c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c820:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c824:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c828:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c830:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800c834:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c838:	2300      	movs	r3, #0
 800c83a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c83e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800c842:	460b      	mov	r3, r1
 800c844:	4313      	orrs	r3, r2
 800c846:	d037      	beq.n	800c8b8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800c848:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c84c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c84e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c852:	d00e      	beq.n	800c872 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800c854:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c858:	d816      	bhi.n	800c888 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d018      	beq.n	800c890 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800c85e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c862:	d111      	bne.n	800c888 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c864:	4bc4      	ldr	r3, [pc, #784]	@ (800cb78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c868:	4ac3      	ldr	r2, [pc, #780]	@ (800cb78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c86a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c86e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c870:	e00f      	b.n	800c892 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c872:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c876:	3308      	adds	r3, #8
 800c878:	2101      	movs	r1, #1
 800c87a:	4618      	mov	r0, r3
 800c87c:	f001 ff54 	bl	800e728 <RCCEx_PLL2_Config>
 800c880:	4603      	mov	r3, r0
 800c882:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c886:	e004      	b.n	800c892 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c888:	2301      	movs	r3, #1
 800c88a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c88e:	e000      	b.n	800c892 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800c890:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c892:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c896:	2b00      	cmp	r3, #0
 800c898:	d10a      	bne.n	800c8b0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c89a:	4bb7      	ldr	r3, [pc, #732]	@ (800cb78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c89c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c89e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800c8a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c8a8:	4ab3      	ldr	r2, [pc, #716]	@ (800cb78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c8aa:	430b      	orrs	r3, r1
 800c8ac:	6513      	str	r3, [r2, #80]	@ 0x50
 800c8ae:	e003      	b.n	800c8b8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c8b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c8b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8c0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800c8c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c8ce:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800c8d2:	460b      	mov	r3, r1
 800c8d4:	4313      	orrs	r3, r2
 800c8d6:	d039      	beq.n	800c94c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800c8d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c8de:	2b03      	cmp	r3, #3
 800c8e0:	d81c      	bhi.n	800c91c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800c8e2:	a201      	add	r2, pc, #4	@ (adr r2, 800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800c8e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8e8:	0800c925 	.word	0x0800c925
 800c8ec:	0800c8f9 	.word	0x0800c8f9
 800c8f0:	0800c907 	.word	0x0800c907
 800c8f4:	0800c925 	.word	0x0800c925
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c8f8:	4b9f      	ldr	r3, [pc, #636]	@ (800cb78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c8fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8fc:	4a9e      	ldr	r2, [pc, #632]	@ (800cb78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c8fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c902:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c904:	e00f      	b.n	800c926 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c906:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c90a:	3308      	adds	r3, #8
 800c90c:	2102      	movs	r1, #2
 800c90e:	4618      	mov	r0, r3
 800c910:	f001 ff0a 	bl	800e728 <RCCEx_PLL2_Config>
 800c914:	4603      	mov	r3, r0
 800c916:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c91a:	e004      	b.n	800c926 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c91c:	2301      	movs	r3, #1
 800c91e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c922:	e000      	b.n	800c926 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800c924:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c926:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d10a      	bne.n	800c944 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c92e:	4b92      	ldr	r3, [pc, #584]	@ (800cb78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c932:	f023 0103 	bic.w	r1, r3, #3
 800c936:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c93a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c93c:	4a8e      	ldr	r2, [pc, #568]	@ (800cb78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c93e:	430b      	orrs	r3, r1
 800c940:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c942:	e003      	b.n	800c94c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c944:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c948:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c94c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c954:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800c958:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c95c:	2300      	movs	r3, #0
 800c95e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c962:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c966:	460b      	mov	r3, r1
 800c968:	4313      	orrs	r3, r2
 800c96a:	f000 8099 	beq.w	800caa0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c96e:	4b83      	ldr	r3, [pc, #524]	@ (800cb7c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	4a82      	ldr	r2, [pc, #520]	@ (800cb7c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c974:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c978:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c97a:	f7f8 fa3d 	bl	8004df8 <HAL_GetTick>
 800c97e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c982:	e00b      	b.n	800c99c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c984:	f7f8 fa38 	bl	8004df8 <HAL_GetTick>
 800c988:	4602      	mov	r2, r0
 800c98a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c98e:	1ad3      	subs	r3, r2, r3
 800c990:	2b64      	cmp	r3, #100	@ 0x64
 800c992:	d903      	bls.n	800c99c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800c994:	2303      	movs	r3, #3
 800c996:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c99a:	e005      	b.n	800c9a8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c99c:	4b77      	ldr	r3, [pc, #476]	@ (800cb7c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d0ed      	beq.n	800c984 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800c9a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d173      	bne.n	800ca98 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c9b0:	4b71      	ldr	r3, [pc, #452]	@ (800cb78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c9b2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c9b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c9bc:	4053      	eors	r3, r2
 800c9be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d015      	beq.n	800c9f2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c9c6:	4b6c      	ldr	r3, [pc, #432]	@ (800cb78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c9c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c9ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c9ce:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c9d2:	4b69      	ldr	r3, [pc, #420]	@ (800cb78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c9d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c9d6:	4a68      	ldr	r2, [pc, #416]	@ (800cb78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c9d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c9dc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c9de:	4b66      	ldr	r3, [pc, #408]	@ (800cb78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c9e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c9e2:	4a65      	ldr	r2, [pc, #404]	@ (800cb78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c9e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c9e8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c9ea:	4a63      	ldr	r2, [pc, #396]	@ (800cb78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c9ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c9f0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c9f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c9fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c9fe:	d118      	bne.n	800ca32 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca00:	f7f8 f9fa 	bl	8004df8 <HAL_GetTick>
 800ca04:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ca08:	e00d      	b.n	800ca26 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ca0a:	f7f8 f9f5 	bl	8004df8 <HAL_GetTick>
 800ca0e:	4602      	mov	r2, r0
 800ca10:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800ca14:	1ad2      	subs	r2, r2, r3
 800ca16:	f241 3388 	movw	r3, #5000	@ 0x1388
 800ca1a:	429a      	cmp	r2, r3
 800ca1c:	d903      	bls.n	800ca26 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800ca1e:	2303      	movs	r3, #3
 800ca20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800ca24:	e005      	b.n	800ca32 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ca26:	4b54      	ldr	r3, [pc, #336]	@ (800cb78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ca28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ca2a:	f003 0302 	and.w	r3, r3, #2
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d0eb      	beq.n	800ca0a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800ca32:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d129      	bne.n	800ca8e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ca3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ca42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ca46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ca4a:	d10e      	bne.n	800ca6a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800ca4c:	4b4a      	ldr	r3, [pc, #296]	@ (800cb78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ca4e:	691b      	ldr	r3, [r3, #16]
 800ca50:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800ca54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ca5c:	091a      	lsrs	r2, r3, #4
 800ca5e:	4b48      	ldr	r3, [pc, #288]	@ (800cb80 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800ca60:	4013      	ands	r3, r2
 800ca62:	4a45      	ldr	r2, [pc, #276]	@ (800cb78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ca64:	430b      	orrs	r3, r1
 800ca66:	6113      	str	r3, [r2, #16]
 800ca68:	e005      	b.n	800ca76 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800ca6a:	4b43      	ldr	r3, [pc, #268]	@ (800cb78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ca6c:	691b      	ldr	r3, [r3, #16]
 800ca6e:	4a42      	ldr	r2, [pc, #264]	@ (800cb78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ca70:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ca74:	6113      	str	r3, [r2, #16]
 800ca76:	4b40      	ldr	r3, [pc, #256]	@ (800cb78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ca78:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800ca7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ca82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ca86:	4a3c      	ldr	r2, [pc, #240]	@ (800cb78 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ca88:	430b      	orrs	r3, r1
 800ca8a:	6713      	str	r3, [r2, #112]	@ 0x70
 800ca8c:	e008      	b.n	800caa0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ca8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ca92:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800ca96:	e003      	b.n	800caa0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ca9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800caa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800caa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa8:	f002 0301 	and.w	r3, r2, #1
 800caac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cab0:	2300      	movs	r3, #0
 800cab2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800cab6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800caba:	460b      	mov	r3, r1
 800cabc:	4313      	orrs	r3, r2
 800cabe:	f000 808f 	beq.w	800cbe0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800cac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cac6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cac8:	2b28      	cmp	r3, #40	@ 0x28
 800caca:	d871      	bhi.n	800cbb0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800cacc:	a201      	add	r2, pc, #4	@ (adr r2, 800cad4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800cace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cad2:	bf00      	nop
 800cad4:	0800cbb9 	.word	0x0800cbb9
 800cad8:	0800cbb1 	.word	0x0800cbb1
 800cadc:	0800cbb1 	.word	0x0800cbb1
 800cae0:	0800cbb1 	.word	0x0800cbb1
 800cae4:	0800cbb1 	.word	0x0800cbb1
 800cae8:	0800cbb1 	.word	0x0800cbb1
 800caec:	0800cbb1 	.word	0x0800cbb1
 800caf0:	0800cbb1 	.word	0x0800cbb1
 800caf4:	0800cb85 	.word	0x0800cb85
 800caf8:	0800cbb1 	.word	0x0800cbb1
 800cafc:	0800cbb1 	.word	0x0800cbb1
 800cb00:	0800cbb1 	.word	0x0800cbb1
 800cb04:	0800cbb1 	.word	0x0800cbb1
 800cb08:	0800cbb1 	.word	0x0800cbb1
 800cb0c:	0800cbb1 	.word	0x0800cbb1
 800cb10:	0800cbb1 	.word	0x0800cbb1
 800cb14:	0800cb9b 	.word	0x0800cb9b
 800cb18:	0800cbb1 	.word	0x0800cbb1
 800cb1c:	0800cbb1 	.word	0x0800cbb1
 800cb20:	0800cbb1 	.word	0x0800cbb1
 800cb24:	0800cbb1 	.word	0x0800cbb1
 800cb28:	0800cbb1 	.word	0x0800cbb1
 800cb2c:	0800cbb1 	.word	0x0800cbb1
 800cb30:	0800cbb1 	.word	0x0800cbb1
 800cb34:	0800cbb9 	.word	0x0800cbb9
 800cb38:	0800cbb1 	.word	0x0800cbb1
 800cb3c:	0800cbb1 	.word	0x0800cbb1
 800cb40:	0800cbb1 	.word	0x0800cbb1
 800cb44:	0800cbb1 	.word	0x0800cbb1
 800cb48:	0800cbb1 	.word	0x0800cbb1
 800cb4c:	0800cbb1 	.word	0x0800cbb1
 800cb50:	0800cbb1 	.word	0x0800cbb1
 800cb54:	0800cbb9 	.word	0x0800cbb9
 800cb58:	0800cbb1 	.word	0x0800cbb1
 800cb5c:	0800cbb1 	.word	0x0800cbb1
 800cb60:	0800cbb1 	.word	0x0800cbb1
 800cb64:	0800cbb1 	.word	0x0800cbb1
 800cb68:	0800cbb1 	.word	0x0800cbb1
 800cb6c:	0800cbb1 	.word	0x0800cbb1
 800cb70:	0800cbb1 	.word	0x0800cbb1
 800cb74:	0800cbb9 	.word	0x0800cbb9
 800cb78:	58024400 	.word	0x58024400
 800cb7c:	58024800 	.word	0x58024800
 800cb80:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cb84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb88:	3308      	adds	r3, #8
 800cb8a:	2101      	movs	r1, #1
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f001 fdcb 	bl	800e728 <RCCEx_PLL2_Config>
 800cb92:	4603      	mov	r3, r0
 800cb94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800cb98:	e00f      	b.n	800cbba <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cb9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb9e:	3328      	adds	r3, #40	@ 0x28
 800cba0:	2101      	movs	r1, #1
 800cba2:	4618      	mov	r0, r3
 800cba4:	f001 fe72 	bl	800e88c <RCCEx_PLL3_Config>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800cbae:	e004      	b.n	800cbba <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cbb0:	2301      	movs	r3, #1
 800cbb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cbb6:	e000      	b.n	800cbba <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800cbb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cbba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d10a      	bne.n	800cbd8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800cbc2:	4bbf      	ldr	r3, [pc, #764]	@ (800cec0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cbc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cbc6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800cbca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cbd0:	4abb      	ldr	r2, [pc, #748]	@ (800cec0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cbd2:	430b      	orrs	r3, r1
 800cbd4:	6553      	str	r3, [r2, #84]	@ 0x54
 800cbd6:	e003      	b.n	800cbe0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cbd8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cbdc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800cbe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe8:	f002 0302 	and.w	r3, r2, #2
 800cbec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cbf6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800cbfa:	460b      	mov	r3, r1
 800cbfc:	4313      	orrs	r3, r2
 800cbfe:	d041      	beq.n	800cc84 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800cc00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc06:	2b05      	cmp	r3, #5
 800cc08:	d824      	bhi.n	800cc54 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800cc0a:	a201      	add	r2, pc, #4	@ (adr r2, 800cc10 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800cc0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc10:	0800cc5d 	.word	0x0800cc5d
 800cc14:	0800cc29 	.word	0x0800cc29
 800cc18:	0800cc3f 	.word	0x0800cc3f
 800cc1c:	0800cc5d 	.word	0x0800cc5d
 800cc20:	0800cc5d 	.word	0x0800cc5d
 800cc24:	0800cc5d 	.word	0x0800cc5d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cc28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc2c:	3308      	adds	r3, #8
 800cc2e:	2101      	movs	r1, #1
 800cc30:	4618      	mov	r0, r3
 800cc32:	f001 fd79 	bl	800e728 <RCCEx_PLL2_Config>
 800cc36:	4603      	mov	r3, r0
 800cc38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800cc3c:	e00f      	b.n	800cc5e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cc3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc42:	3328      	adds	r3, #40	@ 0x28
 800cc44:	2101      	movs	r1, #1
 800cc46:	4618      	mov	r0, r3
 800cc48:	f001 fe20 	bl	800e88c <RCCEx_PLL3_Config>
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800cc52:	e004      	b.n	800cc5e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cc54:	2301      	movs	r3, #1
 800cc56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cc5a:	e000      	b.n	800cc5e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800cc5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cc5e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d10a      	bne.n	800cc7c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800cc66:	4b96      	ldr	r3, [pc, #600]	@ (800cec0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cc68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc6a:	f023 0107 	bic.w	r1, r3, #7
 800cc6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cc74:	4a92      	ldr	r2, [pc, #584]	@ (800cec0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cc76:	430b      	orrs	r3, r1
 800cc78:	6553      	str	r3, [r2, #84]	@ 0x54
 800cc7a:	e003      	b.n	800cc84 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc80:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cc84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc8c:	f002 0304 	and.w	r3, r2, #4
 800cc90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cc94:	2300      	movs	r3, #0
 800cc96:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cc9a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800cc9e:	460b      	mov	r3, r1
 800cca0:	4313      	orrs	r3, r2
 800cca2:	d044      	beq.n	800cd2e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800cca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cca8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ccac:	2b05      	cmp	r3, #5
 800ccae:	d825      	bhi.n	800ccfc <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800ccb0:	a201      	add	r2, pc, #4	@ (adr r2, 800ccb8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800ccb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccb6:	bf00      	nop
 800ccb8:	0800cd05 	.word	0x0800cd05
 800ccbc:	0800ccd1 	.word	0x0800ccd1
 800ccc0:	0800cce7 	.word	0x0800cce7
 800ccc4:	0800cd05 	.word	0x0800cd05
 800ccc8:	0800cd05 	.word	0x0800cd05
 800cccc:	0800cd05 	.word	0x0800cd05
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ccd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccd4:	3308      	adds	r3, #8
 800ccd6:	2101      	movs	r1, #1
 800ccd8:	4618      	mov	r0, r3
 800ccda:	f001 fd25 	bl	800e728 <RCCEx_PLL2_Config>
 800ccde:	4603      	mov	r3, r0
 800cce0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800cce4:	e00f      	b.n	800cd06 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cce6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccea:	3328      	adds	r3, #40	@ 0x28
 800ccec:	2101      	movs	r1, #1
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f001 fdcc 	bl	800e88c <RCCEx_PLL3_Config>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ccfa:	e004      	b.n	800cd06 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cd02:	e000      	b.n	800cd06 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800cd04:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cd06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d10b      	bne.n	800cd26 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800cd0e:	4b6c      	ldr	r3, [pc, #432]	@ (800cec0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cd10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd12:	f023 0107 	bic.w	r1, r3, #7
 800cd16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd1e:	4a68      	ldr	r2, [pc, #416]	@ (800cec0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cd20:	430b      	orrs	r3, r1
 800cd22:	6593      	str	r3, [r2, #88]	@ 0x58
 800cd24:	e003      	b.n	800cd2e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd26:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cd2a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800cd2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd36:	f002 0320 	and.w	r3, r2, #32
 800cd3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cd3e:	2300      	movs	r3, #0
 800cd40:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cd44:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800cd48:	460b      	mov	r3, r1
 800cd4a:	4313      	orrs	r3, r2
 800cd4c:	d055      	beq.n	800cdfa <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800cd4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cd56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cd5a:	d033      	beq.n	800cdc4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800cd5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cd60:	d82c      	bhi.n	800cdbc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800cd62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd66:	d02f      	beq.n	800cdc8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800cd68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd6c:	d826      	bhi.n	800cdbc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800cd6e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800cd72:	d02b      	beq.n	800cdcc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800cd74:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800cd78:	d820      	bhi.n	800cdbc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800cd7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cd7e:	d012      	beq.n	800cda6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800cd80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cd84:	d81a      	bhi.n	800cdbc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d022      	beq.n	800cdd0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800cd8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cd8e:	d115      	bne.n	800cdbc <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cd90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd94:	3308      	adds	r3, #8
 800cd96:	2100      	movs	r1, #0
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f001 fcc5 	bl	800e728 <RCCEx_PLL2_Config>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800cda4:	e015      	b.n	800cdd2 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cda6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdaa:	3328      	adds	r3, #40	@ 0x28
 800cdac:	2102      	movs	r1, #2
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f001 fd6c 	bl	800e88c <RCCEx_PLL3_Config>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800cdba:	e00a      	b.n	800cdd2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cdbc:	2301      	movs	r3, #1
 800cdbe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cdc2:	e006      	b.n	800cdd2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800cdc4:	bf00      	nop
 800cdc6:	e004      	b.n	800cdd2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800cdc8:	bf00      	nop
 800cdca:	e002      	b.n	800cdd2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800cdcc:	bf00      	nop
 800cdce:	e000      	b.n	800cdd2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800cdd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cdd2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d10b      	bne.n	800cdf2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cdda:	4b39      	ldr	r3, [pc, #228]	@ (800cec0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cdde:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800cde2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cde6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800cdea:	4a35      	ldr	r2, [pc, #212]	@ (800cec0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cdec:	430b      	orrs	r3, r1
 800cdee:	6553      	str	r3, [r2, #84]	@ 0x54
 800cdf0:	e003      	b.n	800cdfa <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cdf2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cdf6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800cdfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce02:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800ce06:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ce10:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800ce14:	460b      	mov	r3, r1
 800ce16:	4313      	orrs	r3, r2
 800ce18:	d058      	beq.n	800cecc <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800ce1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ce22:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800ce26:	d033      	beq.n	800ce90 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800ce28:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800ce2c:	d82c      	bhi.n	800ce88 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ce2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ce32:	d02f      	beq.n	800ce94 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800ce34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ce38:	d826      	bhi.n	800ce88 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ce3a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ce3e:	d02b      	beq.n	800ce98 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800ce40:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ce44:	d820      	bhi.n	800ce88 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ce46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ce4a:	d012      	beq.n	800ce72 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800ce4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ce50:	d81a      	bhi.n	800ce88 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d022      	beq.n	800ce9c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800ce56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ce5a:	d115      	bne.n	800ce88 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ce5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce60:	3308      	adds	r3, #8
 800ce62:	2100      	movs	r1, #0
 800ce64:	4618      	mov	r0, r3
 800ce66:	f001 fc5f 	bl	800e728 <RCCEx_PLL2_Config>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ce70:	e015      	b.n	800ce9e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ce72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce76:	3328      	adds	r3, #40	@ 0x28
 800ce78:	2102      	movs	r1, #2
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f001 fd06 	bl	800e88c <RCCEx_PLL3_Config>
 800ce80:	4603      	mov	r3, r0
 800ce82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ce86:	e00a      	b.n	800ce9e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ce88:	2301      	movs	r3, #1
 800ce8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ce8e:	e006      	b.n	800ce9e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ce90:	bf00      	nop
 800ce92:	e004      	b.n	800ce9e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ce94:	bf00      	nop
 800ce96:	e002      	b.n	800ce9e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ce98:	bf00      	nop
 800ce9a:	e000      	b.n	800ce9e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ce9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ce9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d10e      	bne.n	800cec4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800cea6:	4b06      	ldr	r3, [pc, #24]	@ (800cec0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ceaa:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800ceae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ceb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ceb6:	4a02      	ldr	r2, [pc, #8]	@ (800cec0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ceb8:	430b      	orrs	r3, r1
 800ceba:	6593      	str	r3, [r2, #88]	@ 0x58
 800cebc:	e006      	b.n	800cecc <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800cebe:	bf00      	nop
 800cec0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cec4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cec8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800cecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ced0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ced4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800ced8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cedc:	2300      	movs	r3, #0
 800cede:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cee2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800cee6:	460b      	mov	r3, r1
 800cee8:	4313      	orrs	r3, r2
 800ceea:	d055      	beq.n	800cf98 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800ceec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cef0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800cef4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800cef8:	d033      	beq.n	800cf62 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800cefa:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800cefe:	d82c      	bhi.n	800cf5a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800cf00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cf04:	d02f      	beq.n	800cf66 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800cf06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cf0a:	d826      	bhi.n	800cf5a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800cf0c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800cf10:	d02b      	beq.n	800cf6a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800cf12:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800cf16:	d820      	bhi.n	800cf5a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800cf18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cf1c:	d012      	beq.n	800cf44 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800cf1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cf22:	d81a      	bhi.n	800cf5a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d022      	beq.n	800cf6e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800cf28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cf2c:	d115      	bne.n	800cf5a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cf2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf32:	3308      	adds	r3, #8
 800cf34:	2100      	movs	r1, #0
 800cf36:	4618      	mov	r0, r3
 800cf38:	f001 fbf6 	bl	800e728 <RCCEx_PLL2_Config>
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800cf42:	e015      	b.n	800cf70 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cf44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf48:	3328      	adds	r3, #40	@ 0x28
 800cf4a:	2102      	movs	r1, #2
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	f001 fc9d 	bl	800e88c <RCCEx_PLL3_Config>
 800cf52:	4603      	mov	r3, r0
 800cf54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800cf58:	e00a      	b.n	800cf70 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cf60:	e006      	b.n	800cf70 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800cf62:	bf00      	nop
 800cf64:	e004      	b.n	800cf70 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800cf66:	bf00      	nop
 800cf68:	e002      	b.n	800cf70 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800cf6a:	bf00      	nop
 800cf6c:	e000      	b.n	800cf70 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800cf6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cf70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d10b      	bne.n	800cf90 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800cf78:	4ba0      	ldr	r3, [pc, #640]	@ (800d1fc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cf7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf7c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800cf80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf84:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800cf88:	4a9c      	ldr	r2, [pc, #624]	@ (800d1fc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cf8a:	430b      	orrs	r3, r1
 800cf8c:	6593      	str	r3, [r2, #88]	@ 0x58
 800cf8e:	e003      	b.n	800cf98 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cf94:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800cf98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa0:	f002 0308 	and.w	r3, r2, #8
 800cfa4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800cfae:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800cfb2:	460b      	mov	r3, r1
 800cfb4:	4313      	orrs	r3, r2
 800cfb6:	d01e      	beq.n	800cff6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800cfb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cfc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cfc4:	d10c      	bne.n	800cfe0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800cfc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfca:	3328      	adds	r3, #40	@ 0x28
 800cfcc:	2102      	movs	r1, #2
 800cfce:	4618      	mov	r0, r3
 800cfd0:	f001 fc5c 	bl	800e88c <RCCEx_PLL3_Config>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d002      	beq.n	800cfe0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800cfda:	2301      	movs	r3, #1
 800cfdc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800cfe0:	4b86      	ldr	r3, [pc, #536]	@ (800d1fc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cfe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cfe4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cfe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cff0:	4a82      	ldr	r2, [pc, #520]	@ (800d1fc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800cff2:	430b      	orrs	r3, r1
 800cff4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800cff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cffe:	f002 0310 	and.w	r3, r2, #16
 800d002:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d006:	2300      	movs	r3, #0
 800d008:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d00c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800d010:	460b      	mov	r3, r1
 800d012:	4313      	orrs	r3, r2
 800d014:	d01e      	beq.n	800d054 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800d016:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d01a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d01e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d022:	d10c      	bne.n	800d03e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d024:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d028:	3328      	adds	r3, #40	@ 0x28
 800d02a:	2102      	movs	r1, #2
 800d02c:	4618      	mov	r0, r3
 800d02e:	f001 fc2d 	bl	800e88c <RCCEx_PLL3_Config>
 800d032:	4603      	mov	r3, r0
 800d034:	2b00      	cmp	r3, #0
 800d036:	d002      	beq.n	800d03e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800d038:	2301      	movs	r3, #1
 800d03a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d03e:	4b6f      	ldr	r3, [pc, #444]	@ (800d1fc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d042:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d046:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d04a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d04e:	4a6b      	ldr	r2, [pc, #428]	@ (800d1fc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d050:	430b      	orrs	r3, r1
 800d052:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d054:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d05c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800d060:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d062:	2300      	movs	r3, #0
 800d064:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d066:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800d06a:	460b      	mov	r3, r1
 800d06c:	4313      	orrs	r3, r2
 800d06e:	d03e      	beq.n	800d0ee <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800d070:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d074:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d078:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d07c:	d022      	beq.n	800d0c4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800d07e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d082:	d81b      	bhi.n	800d0bc <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800d084:	2b00      	cmp	r3, #0
 800d086:	d003      	beq.n	800d090 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800d088:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d08c:	d00b      	beq.n	800d0a6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800d08e:	e015      	b.n	800d0bc <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d090:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d094:	3308      	adds	r3, #8
 800d096:	2100      	movs	r1, #0
 800d098:	4618      	mov	r0, r3
 800d09a:	f001 fb45 	bl	800e728 <RCCEx_PLL2_Config>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d0a4:	e00f      	b.n	800d0c6 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d0a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0aa:	3328      	adds	r3, #40	@ 0x28
 800d0ac:	2102      	movs	r1, #2
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f001 fbec 	bl	800e88c <RCCEx_PLL3_Config>
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d0ba:	e004      	b.n	800d0c6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d0bc:	2301      	movs	r3, #1
 800d0be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d0c2:	e000      	b.n	800d0c6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800d0c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d0c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d10b      	bne.n	800d0e6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d0ce:	4b4b      	ldr	r3, [pc, #300]	@ (800d1fc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d0d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d0d2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800d0d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d0de:	4a47      	ldr	r2, [pc, #284]	@ (800d1fc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d0e0:	430b      	orrs	r3, r1
 800d0e2:	6593      	str	r3, [r2, #88]	@ 0x58
 800d0e4:	e003      	b.n	800d0ee <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d0e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d0ea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800d0ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800d0fa:	673b      	str	r3, [r7, #112]	@ 0x70
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	677b      	str	r3, [r7, #116]	@ 0x74
 800d100:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800d104:	460b      	mov	r3, r1
 800d106:	4313      	orrs	r3, r2
 800d108:	d03b      	beq.n	800d182 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800d10a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d10e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d112:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d116:	d01f      	beq.n	800d158 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800d118:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d11c:	d818      	bhi.n	800d150 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800d11e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d122:	d003      	beq.n	800d12c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800d124:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d128:	d007      	beq.n	800d13a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800d12a:	e011      	b.n	800d150 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d12c:	4b33      	ldr	r3, [pc, #204]	@ (800d1fc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d12e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d130:	4a32      	ldr	r2, [pc, #200]	@ (800d1fc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d132:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d136:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800d138:	e00f      	b.n	800d15a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d13a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d13e:	3328      	adds	r3, #40	@ 0x28
 800d140:	2101      	movs	r1, #1
 800d142:	4618      	mov	r0, r3
 800d144:	f001 fba2 	bl	800e88c <RCCEx_PLL3_Config>
 800d148:	4603      	mov	r3, r0
 800d14a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800d14e:	e004      	b.n	800d15a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d150:	2301      	movs	r3, #1
 800d152:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d156:	e000      	b.n	800d15a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800d158:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d15a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d10b      	bne.n	800d17a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d162:	4b26      	ldr	r3, [pc, #152]	@ (800d1fc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d166:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800d16a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d16e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d172:	4a22      	ldr	r2, [pc, #136]	@ (800d1fc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d174:	430b      	orrs	r3, r1
 800d176:	6553      	str	r3, [r2, #84]	@ 0x54
 800d178:	e003      	b.n	800d182 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d17a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d17e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800d182:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d18a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800d18e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d190:	2300      	movs	r3, #0
 800d192:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d194:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800d198:	460b      	mov	r3, r1
 800d19a:	4313      	orrs	r3, r2
 800d19c:	d034      	beq.n	800d208 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800d19e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d003      	beq.n	800d1b0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800d1a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d1ac:	d007      	beq.n	800d1be <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800d1ae:	e011      	b.n	800d1d4 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d1b0:	4b12      	ldr	r3, [pc, #72]	@ (800d1fc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d1b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1b4:	4a11      	ldr	r2, [pc, #68]	@ (800d1fc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d1b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d1ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d1bc:	e00e      	b.n	800d1dc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d1be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1c2:	3308      	adds	r3, #8
 800d1c4:	2102      	movs	r1, #2
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f001 faae 	bl	800e728 <RCCEx_PLL2_Config>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d1d2:	e003      	b.n	800d1dc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800d1d4:	2301      	movs	r3, #1
 800d1d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d1da:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d1dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d10d      	bne.n	800d200 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800d1e4:	4b05      	ldr	r3, [pc, #20]	@ (800d1fc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d1e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d1e8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d1ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d1f2:	4a02      	ldr	r2, [pc, #8]	@ (800d1fc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d1f4:	430b      	orrs	r3, r1
 800d1f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d1f8:	e006      	b.n	800d208 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800d1fa:	bf00      	nop
 800d1fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d200:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d204:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d208:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d210:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800d214:	663b      	str	r3, [r7, #96]	@ 0x60
 800d216:	2300      	movs	r3, #0
 800d218:	667b      	str	r3, [r7, #100]	@ 0x64
 800d21a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800d21e:	460b      	mov	r3, r1
 800d220:	4313      	orrs	r3, r2
 800d222:	d00c      	beq.n	800d23e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d228:	3328      	adds	r3, #40	@ 0x28
 800d22a:	2102      	movs	r1, #2
 800d22c:	4618      	mov	r0, r3
 800d22e:	f001 fb2d 	bl	800e88c <RCCEx_PLL3_Config>
 800d232:	4603      	mov	r3, r0
 800d234:	2b00      	cmp	r3, #0
 800d236:	d002      	beq.n	800d23e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800d238:	2301      	movs	r3, #1
 800d23a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800d23e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d246:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800d24a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d24c:	2300      	movs	r3, #0
 800d24e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d250:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800d254:	460b      	mov	r3, r1
 800d256:	4313      	orrs	r3, r2
 800d258:	d036      	beq.n	800d2c8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800d25a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d25e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d260:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d264:	d018      	beq.n	800d298 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800d266:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d26a:	d811      	bhi.n	800d290 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800d26c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d270:	d014      	beq.n	800d29c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800d272:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d276:	d80b      	bhi.n	800d290 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d011      	beq.n	800d2a0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800d27c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d280:	d106      	bne.n	800d290 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d282:	4bb7      	ldr	r3, [pc, #732]	@ (800d560 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d286:	4ab6      	ldr	r2, [pc, #728]	@ (800d560 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d288:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d28c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800d28e:	e008      	b.n	800d2a2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d290:	2301      	movs	r3, #1
 800d292:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d296:	e004      	b.n	800d2a2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800d298:	bf00      	nop
 800d29a:	e002      	b.n	800d2a2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800d29c:	bf00      	nop
 800d29e:	e000      	b.n	800d2a2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800d2a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d2a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d10a      	bne.n	800d2c0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d2aa:	4bad      	ldr	r3, [pc, #692]	@ (800d560 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d2ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d2ae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d2b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d2b8:	4aa9      	ldr	r2, [pc, #676]	@ (800d560 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d2ba:	430b      	orrs	r3, r1
 800d2bc:	6553      	str	r3, [r2, #84]	@ 0x54
 800d2be:	e003      	b.n	800d2c8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d2c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d2c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d2c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2d0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800d2d4:	653b      	str	r3, [r7, #80]	@ 0x50
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	657b      	str	r3, [r7, #84]	@ 0x54
 800d2da:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800d2de:	460b      	mov	r3, r1
 800d2e0:	4313      	orrs	r3, r2
 800d2e2:	d009      	beq.n	800d2f8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d2e4:	4b9e      	ldr	r3, [pc, #632]	@ (800d560 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d2e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d2e8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d2ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d2f2:	4a9b      	ldr	r2, [pc, #620]	@ (800d560 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d2f4:	430b      	orrs	r3, r1
 800d2f6:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d2f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d300:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800d304:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d306:	2300      	movs	r3, #0
 800d308:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d30a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800d30e:	460b      	mov	r3, r1
 800d310:	4313      	orrs	r3, r2
 800d312:	d009      	beq.n	800d328 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d314:	4b92      	ldr	r3, [pc, #584]	@ (800d560 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d316:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d318:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800d31c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d320:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d322:	4a8f      	ldr	r2, [pc, #572]	@ (800d560 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d324:	430b      	orrs	r3, r1
 800d326:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800d328:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d330:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800d334:	643b      	str	r3, [r7, #64]	@ 0x40
 800d336:	2300      	movs	r3, #0
 800d338:	647b      	str	r3, [r7, #68]	@ 0x44
 800d33a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800d33e:	460b      	mov	r3, r1
 800d340:	4313      	orrs	r3, r2
 800d342:	d00e      	beq.n	800d362 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d344:	4b86      	ldr	r3, [pc, #536]	@ (800d560 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d346:	691b      	ldr	r3, [r3, #16]
 800d348:	4a85      	ldr	r2, [pc, #532]	@ (800d560 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d34a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800d34e:	6113      	str	r3, [r2, #16]
 800d350:	4b83      	ldr	r3, [pc, #524]	@ (800d560 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d352:	6919      	ldr	r1, [r3, #16]
 800d354:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d358:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d35c:	4a80      	ldr	r2, [pc, #512]	@ (800d560 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d35e:	430b      	orrs	r3, r1
 800d360:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800d362:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d36a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800d36e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d370:	2300      	movs	r3, #0
 800d372:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d374:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800d378:	460b      	mov	r3, r1
 800d37a:	4313      	orrs	r3, r2
 800d37c:	d009      	beq.n	800d392 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800d37e:	4b78      	ldr	r3, [pc, #480]	@ (800d560 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d382:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800d386:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d38a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d38c:	4a74      	ldr	r2, [pc, #464]	@ (800d560 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d38e:	430b      	orrs	r3, r1
 800d390:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d392:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d39a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800d39e:	633b      	str	r3, [r7, #48]	@ 0x30
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d3a4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800d3a8:	460b      	mov	r3, r1
 800d3aa:	4313      	orrs	r3, r2
 800d3ac:	d00a      	beq.n	800d3c4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d3ae:	4b6c      	ldr	r3, [pc, #432]	@ (800d560 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d3b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d3b2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800d3b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d3be:	4a68      	ldr	r2, [pc, #416]	@ (800d560 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d3c0:	430b      	orrs	r3, r1
 800d3c2:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800d3c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3cc:	2100      	movs	r1, #0
 800d3ce:	62b9      	str	r1, [r7, #40]	@ 0x28
 800d3d0:	f003 0301 	and.w	r3, r3, #1
 800d3d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d3d6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800d3da:	460b      	mov	r3, r1
 800d3dc:	4313      	orrs	r3, r2
 800d3de:	d011      	beq.n	800d404 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d3e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3e4:	3308      	adds	r3, #8
 800d3e6:	2100      	movs	r1, #0
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	f001 f99d 	bl	800e728 <RCCEx_PLL2_Config>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d3f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d003      	beq.n	800d404 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d3fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d400:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800d404:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d40c:	2100      	movs	r1, #0
 800d40e:	6239      	str	r1, [r7, #32]
 800d410:	f003 0302 	and.w	r3, r3, #2
 800d414:	627b      	str	r3, [r7, #36]	@ 0x24
 800d416:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d41a:	460b      	mov	r3, r1
 800d41c:	4313      	orrs	r3, r2
 800d41e:	d011      	beq.n	800d444 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d420:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d424:	3308      	adds	r3, #8
 800d426:	2101      	movs	r1, #1
 800d428:	4618      	mov	r0, r3
 800d42a:	f001 f97d 	bl	800e728 <RCCEx_PLL2_Config>
 800d42e:	4603      	mov	r3, r0
 800d430:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d434:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d003      	beq.n	800d444 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d43c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d440:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800d444:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d44c:	2100      	movs	r1, #0
 800d44e:	61b9      	str	r1, [r7, #24]
 800d450:	f003 0304 	and.w	r3, r3, #4
 800d454:	61fb      	str	r3, [r7, #28]
 800d456:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d45a:	460b      	mov	r3, r1
 800d45c:	4313      	orrs	r3, r2
 800d45e:	d011      	beq.n	800d484 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d460:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d464:	3308      	adds	r3, #8
 800d466:	2102      	movs	r1, #2
 800d468:	4618      	mov	r0, r3
 800d46a:	f001 f95d 	bl	800e728 <RCCEx_PLL2_Config>
 800d46e:	4603      	mov	r3, r0
 800d470:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d474:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d003      	beq.n	800d484 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d47c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d480:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800d484:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d48c:	2100      	movs	r1, #0
 800d48e:	6139      	str	r1, [r7, #16]
 800d490:	f003 0308 	and.w	r3, r3, #8
 800d494:	617b      	str	r3, [r7, #20]
 800d496:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800d49a:	460b      	mov	r3, r1
 800d49c:	4313      	orrs	r3, r2
 800d49e:	d011      	beq.n	800d4c4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d4a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4a4:	3328      	adds	r3, #40	@ 0x28
 800d4a6:	2100      	movs	r1, #0
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	f001 f9ef 	bl	800e88c <RCCEx_PLL3_Config>
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800d4b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d003      	beq.n	800d4c4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d4bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d4c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800d4c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4cc:	2100      	movs	r1, #0
 800d4ce:	60b9      	str	r1, [r7, #8]
 800d4d0:	f003 0310 	and.w	r3, r3, #16
 800d4d4:	60fb      	str	r3, [r7, #12]
 800d4d6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d4da:	460b      	mov	r3, r1
 800d4dc:	4313      	orrs	r3, r2
 800d4de:	d011      	beq.n	800d504 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d4e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4e4:	3328      	adds	r3, #40	@ 0x28
 800d4e6:	2101      	movs	r1, #1
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f001 f9cf 	bl	800e88c <RCCEx_PLL3_Config>
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d4f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d003      	beq.n	800d504 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d4fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d500:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800d504:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d50c:	2100      	movs	r1, #0
 800d50e:	6039      	str	r1, [r7, #0]
 800d510:	f003 0320 	and.w	r3, r3, #32
 800d514:	607b      	str	r3, [r7, #4]
 800d516:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d51a:	460b      	mov	r3, r1
 800d51c:	4313      	orrs	r3, r2
 800d51e:	d011      	beq.n	800d544 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d520:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d524:	3328      	adds	r3, #40	@ 0x28
 800d526:	2102      	movs	r1, #2
 800d528:	4618      	mov	r0, r3
 800d52a:	f001 f9af 	bl	800e88c <RCCEx_PLL3_Config>
 800d52e:	4603      	mov	r3, r0
 800d530:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d534:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d003      	beq.n	800d544 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d53c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d540:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800d544:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d101      	bne.n	800d550 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800d54c:	2300      	movs	r3, #0
 800d54e:	e000      	b.n	800d552 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800d550:	2301      	movs	r3, #1
}
 800d552:	4618      	mov	r0, r3
 800d554:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800d558:	46bd      	mov	sp, r7
 800d55a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d55e:	bf00      	nop
 800d560:	58024400 	.word	0x58024400

0800d564 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b090      	sub	sp, #64	@ 0x40
 800d568:	af00      	add	r7, sp, #0
 800d56a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800d56e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d572:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800d576:	430b      	orrs	r3, r1
 800d578:	f040 8094 	bne.w	800d6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800d57c:	4b9b      	ldr	r3, [pc, #620]	@ (800d7ec <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d57e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d580:	f003 0307 	and.w	r3, r3, #7
 800d584:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800d586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d588:	2b04      	cmp	r3, #4
 800d58a:	f200 8087 	bhi.w	800d69c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800d58e:	a201      	add	r2, pc, #4	@ (adr r2, 800d594 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800d590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d594:	0800d5a9 	.word	0x0800d5a9
 800d598:	0800d5d1 	.word	0x0800d5d1
 800d59c:	0800d5f9 	.word	0x0800d5f9
 800d5a0:	0800d695 	.word	0x0800d695
 800d5a4:	0800d621 	.word	0x0800d621
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d5a8:	4b90      	ldr	r3, [pc, #576]	@ (800d7ec <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d5b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d5b4:	d108      	bne.n	800d5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d5b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	f000 ff62 	bl	800e484 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d5c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d5c4:	f000 bc93 	b.w	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d5cc:	f000 bc8f 	b.w	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d5d0:	4b86      	ldr	r3, [pc, #536]	@ (800d7ec <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d5d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d5dc:	d108      	bne.n	800d5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d5de:	f107 0318 	add.w	r3, r7, #24
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f000 fca6 	bl	800df34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d5e8:	69bb      	ldr	r3, [r7, #24]
 800d5ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d5ec:	f000 bc7f 	b.w	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d5f4:	f000 bc7b 	b.w	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d5f8:	4b7c      	ldr	r3, [pc, #496]	@ (800d7ec <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d600:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d604:	d108      	bne.n	800d618 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d606:	f107 030c 	add.w	r3, r7, #12
 800d60a:	4618      	mov	r0, r3
 800d60c:	f000 fde6 	bl	800e1dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d614:	f000 bc6b 	b.w	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d618:	2300      	movs	r3, #0
 800d61a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d61c:	f000 bc67 	b.w	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d620:	4b72      	ldr	r3, [pc, #456]	@ (800d7ec <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d624:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d628:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d62a:	4b70      	ldr	r3, [pc, #448]	@ (800d7ec <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	f003 0304 	and.w	r3, r3, #4
 800d632:	2b04      	cmp	r3, #4
 800d634:	d10c      	bne.n	800d650 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800d636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d109      	bne.n	800d650 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d63c:	4b6b      	ldr	r3, [pc, #428]	@ (800d7ec <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	08db      	lsrs	r3, r3, #3
 800d642:	f003 0303 	and.w	r3, r3, #3
 800d646:	4a6a      	ldr	r2, [pc, #424]	@ (800d7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800d648:	fa22 f303 	lsr.w	r3, r2, r3
 800d64c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d64e:	e01f      	b.n	800d690 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d650:	4b66      	ldr	r3, [pc, #408]	@ (800d7ec <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d658:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d65c:	d106      	bne.n	800d66c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800d65e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d660:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d664:	d102      	bne.n	800d66c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d666:	4b63      	ldr	r3, [pc, #396]	@ (800d7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800d668:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d66a:	e011      	b.n	800d690 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d66c:	4b5f      	ldr	r3, [pc, #380]	@ (800d7ec <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d674:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d678:	d106      	bne.n	800d688 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800d67a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d67c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d680:	d102      	bne.n	800d688 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d682:	4b5d      	ldr	r3, [pc, #372]	@ (800d7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d684:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d686:	e003      	b.n	800d690 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d688:	2300      	movs	r3, #0
 800d68a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d68c:	f000 bc2f 	b.w	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d690:	f000 bc2d 	b.w	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d694:	4b59      	ldr	r3, [pc, #356]	@ (800d7fc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800d696:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d698:	f000 bc29 	b.w	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d69c:	2300      	movs	r3, #0
 800d69e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d6a0:	f000 bc25 	b.w	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800d6a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d6a8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800d6ac:	430b      	orrs	r3, r1
 800d6ae:	f040 80a7 	bne.w	800d800 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800d6b2:	4b4e      	ldr	r3, [pc, #312]	@ (800d7ec <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d6b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d6b6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800d6ba:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800d6bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6be:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d6c2:	d054      	beq.n	800d76e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800d6c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d6ca:	f200 808b 	bhi.w	800d7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800d6ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6d0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800d6d4:	f000 8083 	beq.w	800d7de <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800d6d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6da:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800d6de:	f200 8081 	bhi.w	800d7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800d6e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d6e8:	d02f      	beq.n	800d74a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800d6ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d6f0:	d878      	bhi.n	800d7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800d6f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d004      	beq.n	800d702 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800d6f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d6fe:	d012      	beq.n	800d726 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800d700:	e070      	b.n	800d7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d702:	4b3a      	ldr	r3, [pc, #232]	@ (800d7ec <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d70a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d70e:	d107      	bne.n	800d720 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d710:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d714:	4618      	mov	r0, r3
 800d716:	f000 feb5 	bl	800e484 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d71a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d71c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d71e:	e3e6      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d720:	2300      	movs	r3, #0
 800d722:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d724:	e3e3      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d726:	4b31      	ldr	r3, [pc, #196]	@ (800d7ec <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d72e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d732:	d107      	bne.n	800d744 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d734:	f107 0318 	add.w	r3, r7, #24
 800d738:	4618      	mov	r0, r3
 800d73a:	f000 fbfb 	bl	800df34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d73e:	69bb      	ldr	r3, [r7, #24]
 800d740:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d742:	e3d4      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d744:	2300      	movs	r3, #0
 800d746:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d748:	e3d1      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d74a:	4b28      	ldr	r3, [pc, #160]	@ (800d7ec <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d752:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d756:	d107      	bne.n	800d768 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d758:	f107 030c 	add.w	r3, r7, #12
 800d75c:	4618      	mov	r0, r3
 800d75e:	f000 fd3d 	bl	800e1dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d766:	e3c2      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d768:	2300      	movs	r3, #0
 800d76a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d76c:	e3bf      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d76e:	4b1f      	ldr	r3, [pc, #124]	@ (800d7ec <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d772:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d776:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d778:	4b1c      	ldr	r3, [pc, #112]	@ (800d7ec <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	f003 0304 	and.w	r3, r3, #4
 800d780:	2b04      	cmp	r3, #4
 800d782:	d10c      	bne.n	800d79e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800d784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d786:	2b00      	cmp	r3, #0
 800d788:	d109      	bne.n	800d79e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d78a:	4b18      	ldr	r3, [pc, #96]	@ (800d7ec <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	08db      	lsrs	r3, r3, #3
 800d790:	f003 0303 	and.w	r3, r3, #3
 800d794:	4a16      	ldr	r2, [pc, #88]	@ (800d7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800d796:	fa22 f303 	lsr.w	r3, r2, r3
 800d79a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d79c:	e01e      	b.n	800d7dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d79e:	4b13      	ldr	r3, [pc, #76]	@ (800d7ec <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d7a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d7aa:	d106      	bne.n	800d7ba <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800d7ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d7b2:	d102      	bne.n	800d7ba <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d7b4:	4b0f      	ldr	r3, [pc, #60]	@ (800d7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800d7b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d7b8:	e010      	b.n	800d7dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d7ba:	4b0c      	ldr	r3, [pc, #48]	@ (800d7ec <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d7c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d7c6:	d106      	bne.n	800d7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800d7c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d7ce:	d102      	bne.n	800d7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d7d0:	4b09      	ldr	r3, [pc, #36]	@ (800d7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d7d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d7d4:	e002      	b.n	800d7dc <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d7da:	e388      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d7dc:	e387      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d7de:	4b07      	ldr	r3, [pc, #28]	@ (800d7fc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800d7e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7e2:	e384      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7e8:	e381      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d7ea:	bf00      	nop
 800d7ec:	58024400 	.word	0x58024400
 800d7f0:	03d09000 	.word	0x03d09000
 800d7f4:	003d0900 	.word	0x003d0900
 800d7f8:	007a1200 	.word	0x007a1200
 800d7fc:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800d800:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d804:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800d808:	430b      	orrs	r3, r1
 800d80a:	f040 809c 	bne.w	800d946 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800d80e:	4b9e      	ldr	r3, [pc, #632]	@ (800da88 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d812:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800d816:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800d818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d81a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d81e:	d054      	beq.n	800d8ca <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800d820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d822:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d826:	f200 808b 	bhi.w	800d940 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800d82a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d82c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d830:	f000 8083 	beq.w	800d93a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800d834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d836:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d83a:	f200 8081 	bhi.w	800d940 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800d83e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d840:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d844:	d02f      	beq.n	800d8a6 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800d846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d848:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d84c:	d878      	bhi.n	800d940 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800d84e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d850:	2b00      	cmp	r3, #0
 800d852:	d004      	beq.n	800d85e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800d854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d856:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d85a:	d012      	beq.n	800d882 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800d85c:	e070      	b.n	800d940 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d85e:	4b8a      	ldr	r3, [pc, #552]	@ (800da88 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d866:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d86a:	d107      	bne.n	800d87c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d86c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d870:	4618      	mov	r0, r3
 800d872:	f000 fe07 	bl	800e484 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d878:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d87a:	e338      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d87c:	2300      	movs	r3, #0
 800d87e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d880:	e335      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d882:	4b81      	ldr	r3, [pc, #516]	@ (800da88 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d88a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d88e:	d107      	bne.n	800d8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d890:	f107 0318 	add.w	r3, r7, #24
 800d894:	4618      	mov	r0, r3
 800d896:	f000 fb4d 	bl	800df34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d89a:	69bb      	ldr	r3, [r7, #24]
 800d89c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d89e:	e326      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d8a4:	e323      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d8a6:	4b78      	ldr	r3, [pc, #480]	@ (800da88 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d8ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d8b2:	d107      	bne.n	800d8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d8b4:	f107 030c 	add.w	r3, r7, #12
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	f000 fc8f 	bl	800e1dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d8c2:	e314      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d8c8:	e311      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d8ca:	4b6f      	ldr	r3, [pc, #444]	@ (800da88 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d8cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d8ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d8d2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d8d4:	4b6c      	ldr	r3, [pc, #432]	@ (800da88 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	f003 0304 	and.w	r3, r3, #4
 800d8dc:	2b04      	cmp	r3, #4
 800d8de:	d10c      	bne.n	800d8fa <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800d8e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d109      	bne.n	800d8fa <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d8e6:	4b68      	ldr	r3, [pc, #416]	@ (800da88 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	08db      	lsrs	r3, r3, #3
 800d8ec:	f003 0303 	and.w	r3, r3, #3
 800d8f0:	4a66      	ldr	r2, [pc, #408]	@ (800da8c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800d8f2:	fa22 f303 	lsr.w	r3, r2, r3
 800d8f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d8f8:	e01e      	b.n	800d938 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d8fa:	4b63      	ldr	r3, [pc, #396]	@ (800da88 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d902:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d906:	d106      	bne.n	800d916 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800d908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d90a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d90e:	d102      	bne.n	800d916 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d910:	4b5f      	ldr	r3, [pc, #380]	@ (800da90 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800d912:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d914:	e010      	b.n	800d938 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d916:	4b5c      	ldr	r3, [pc, #368]	@ (800da88 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d91e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d922:	d106      	bne.n	800d932 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800d924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d926:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d92a:	d102      	bne.n	800d932 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d92c:	4b59      	ldr	r3, [pc, #356]	@ (800da94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d92e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d930:	e002      	b.n	800d938 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d932:	2300      	movs	r3, #0
 800d934:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d936:	e2da      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d938:	e2d9      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d93a:	4b57      	ldr	r3, [pc, #348]	@ (800da98 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800d93c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d93e:	e2d6      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d940:	2300      	movs	r3, #0
 800d942:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d944:	e2d3      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800d946:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d94a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800d94e:	430b      	orrs	r3, r1
 800d950:	f040 80a7 	bne.w	800daa2 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800d954:	4b4c      	ldr	r3, [pc, #304]	@ (800da88 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d956:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d958:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800d95c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d95e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d960:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d964:	d055      	beq.n	800da12 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800d966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d968:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d96c:	f200 8096 	bhi.w	800da9c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800d970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d972:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d976:	f000 8084 	beq.w	800da82 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800d97a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d97c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d980:	f200 808c 	bhi.w	800da9c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800d984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d986:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d98a:	d030      	beq.n	800d9ee <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800d98c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d98e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d992:	f200 8083 	bhi.w	800da9c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800d996:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d004      	beq.n	800d9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800d99c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d99e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d9a2:	d012      	beq.n	800d9ca <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800d9a4:	e07a      	b.n	800da9c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d9a6:	4b38      	ldr	r3, [pc, #224]	@ (800da88 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d9ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d9b2:	d107      	bne.n	800d9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d9b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	f000 fd63 	bl	800e484 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d9be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d9c2:	e294      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d9c8:	e291      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d9ca:	4b2f      	ldr	r3, [pc, #188]	@ (800da88 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d9d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d9d6:	d107      	bne.n	800d9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d9d8:	f107 0318 	add.w	r3, r7, #24
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f000 faa9 	bl	800df34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d9e2:	69bb      	ldr	r3, [r7, #24]
 800d9e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d9e6:	e282      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d9ec:	e27f      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d9ee:	4b26      	ldr	r3, [pc, #152]	@ (800da88 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d9f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d9fa:	d107      	bne.n	800da0c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d9fc:	f107 030c 	add.w	r3, r7, #12
 800da00:	4618      	mov	r0, r3
 800da02:	f000 fbeb 	bl	800e1dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800da0a:	e270      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800da0c:	2300      	movs	r3, #0
 800da0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800da10:	e26d      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800da12:	4b1d      	ldr	r3, [pc, #116]	@ (800da88 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800da14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800da16:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800da1a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800da1c:	4b1a      	ldr	r3, [pc, #104]	@ (800da88 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	f003 0304 	and.w	r3, r3, #4
 800da24:	2b04      	cmp	r3, #4
 800da26:	d10c      	bne.n	800da42 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800da28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d109      	bne.n	800da42 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800da2e:	4b16      	ldr	r3, [pc, #88]	@ (800da88 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	08db      	lsrs	r3, r3, #3
 800da34:	f003 0303 	and.w	r3, r3, #3
 800da38:	4a14      	ldr	r2, [pc, #80]	@ (800da8c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800da3a:	fa22 f303 	lsr.w	r3, r2, r3
 800da3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800da40:	e01e      	b.n	800da80 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800da42:	4b11      	ldr	r3, [pc, #68]	@ (800da88 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800da4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800da4e:	d106      	bne.n	800da5e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800da50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800da56:	d102      	bne.n	800da5e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800da58:	4b0d      	ldr	r3, [pc, #52]	@ (800da90 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800da5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800da5c:	e010      	b.n	800da80 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800da5e:	4b0a      	ldr	r3, [pc, #40]	@ (800da88 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800da66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800da6a:	d106      	bne.n	800da7a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800da6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800da72:	d102      	bne.n	800da7a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800da74:	4b07      	ldr	r3, [pc, #28]	@ (800da94 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800da76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800da78:	e002      	b.n	800da80 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800da7a:	2300      	movs	r3, #0
 800da7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800da7e:	e236      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800da80:	e235      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800da82:	4b05      	ldr	r3, [pc, #20]	@ (800da98 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800da84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800da86:	e232      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800da88:	58024400 	.word	0x58024400
 800da8c:	03d09000 	.word	0x03d09000
 800da90:	003d0900 	.word	0x003d0900
 800da94:	007a1200 	.word	0x007a1200
 800da98:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800da9c:	2300      	movs	r3, #0
 800da9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800daa0:	e225      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800daa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800daa6:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800daaa:	430b      	orrs	r3, r1
 800daac:	f040 8085 	bne.w	800dbba <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800dab0:	4b9c      	ldr	r3, [pc, #624]	@ (800dd24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dab2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dab4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800dab8:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800daba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dabc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800dac0:	d06b      	beq.n	800db9a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800dac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dac4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800dac8:	d874      	bhi.n	800dbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800daca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dacc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800dad0:	d056      	beq.n	800db80 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800dad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dad4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800dad8:	d86c      	bhi.n	800dbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800dada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dadc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800dae0:	d03b      	beq.n	800db5a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800dae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dae4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800dae8:	d864      	bhi.n	800dbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800daea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800daec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800daf0:	d021      	beq.n	800db36 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800daf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800daf4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800daf8:	d85c      	bhi.n	800dbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800dafa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d004      	beq.n	800db0a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800db00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800db06:	d004      	beq.n	800db12 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800db08:	e054      	b.n	800dbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800db0a:	f7fe fb5f 	bl	800c1cc <HAL_RCC_GetPCLK1Freq>
 800db0e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800db10:	e1ed      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800db12:	4b84      	ldr	r3, [pc, #528]	@ (800dd24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800db1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800db1e:	d107      	bne.n	800db30 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800db20:	f107 0318 	add.w	r3, r7, #24
 800db24:	4618      	mov	r0, r3
 800db26:	f000 fa05 	bl	800df34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800db2a:	69fb      	ldr	r3, [r7, #28]
 800db2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800db2e:	e1de      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800db30:	2300      	movs	r3, #0
 800db32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db34:	e1db      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800db36:	4b7b      	ldr	r3, [pc, #492]	@ (800dd24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800db3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800db42:	d107      	bne.n	800db54 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800db44:	f107 030c 	add.w	r3, r7, #12
 800db48:	4618      	mov	r0, r3
 800db4a:	f000 fb47 	bl	800e1dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800db4e:	693b      	ldr	r3, [r7, #16]
 800db50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800db52:	e1cc      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800db54:	2300      	movs	r3, #0
 800db56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db58:	e1c9      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800db5a:	4b72      	ldr	r3, [pc, #456]	@ (800dd24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	f003 0304 	and.w	r3, r3, #4
 800db62:	2b04      	cmp	r3, #4
 800db64:	d109      	bne.n	800db7a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800db66:	4b6f      	ldr	r3, [pc, #444]	@ (800dd24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	08db      	lsrs	r3, r3, #3
 800db6c:	f003 0303 	and.w	r3, r3, #3
 800db70:	4a6d      	ldr	r2, [pc, #436]	@ (800dd28 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800db72:	fa22 f303 	lsr.w	r3, r2, r3
 800db76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800db78:	e1b9      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800db7a:	2300      	movs	r3, #0
 800db7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db7e:	e1b6      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800db80:	4b68      	ldr	r3, [pc, #416]	@ (800dd24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800db88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800db8c:	d102      	bne.n	800db94 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800db8e:	4b67      	ldr	r3, [pc, #412]	@ (800dd2c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800db90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800db92:	e1ac      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800db94:	2300      	movs	r3, #0
 800db96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db98:	e1a9      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800db9a:	4b62      	ldr	r3, [pc, #392]	@ (800dd24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dba2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dba6:	d102      	bne.n	800dbae <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800dba8:	4b61      	ldr	r3, [pc, #388]	@ (800dd30 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800dbaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dbac:	e19f      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dbae:	2300      	movs	r3, #0
 800dbb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dbb2:	e19c      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dbb8:	e199      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800dbba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dbbe:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800dbc2:	430b      	orrs	r3, r1
 800dbc4:	d173      	bne.n	800dcae <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800dbc6:	4b57      	ldr	r3, [pc, #348]	@ (800dd24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dbc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dbca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800dbce:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800dbd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbd2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dbd6:	d02f      	beq.n	800dc38 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800dbd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbda:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dbde:	d863      	bhi.n	800dca8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800dbe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d004      	beq.n	800dbf0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800dbe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbe8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dbec:	d012      	beq.n	800dc14 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800dbee:	e05b      	b.n	800dca8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dbf0:	4b4c      	ldr	r3, [pc, #304]	@ (800dd24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dbf8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800dbfc:	d107      	bne.n	800dc0e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dbfe:	f107 0318 	add.w	r3, r7, #24
 800dc02:	4618      	mov	r0, r3
 800dc04:	f000 f996 	bl	800df34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800dc08:	69bb      	ldr	r3, [r7, #24]
 800dc0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dc0c:	e16f      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dc0e:	2300      	movs	r3, #0
 800dc10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc12:	e16c      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800dc14:	4b43      	ldr	r3, [pc, #268]	@ (800dd24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800dc1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dc20:	d107      	bne.n	800dc32 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dc22:	f107 030c 	add.w	r3, r7, #12
 800dc26:	4618      	mov	r0, r3
 800dc28:	f000 fad8 	bl	800e1dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800dc2c:	697b      	ldr	r3, [r7, #20]
 800dc2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dc30:	e15d      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dc32:	2300      	movs	r3, #0
 800dc34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc36:	e15a      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800dc38:	4b3a      	ldr	r3, [pc, #232]	@ (800dd24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dc3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dc3c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800dc40:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800dc42:	4b38      	ldr	r3, [pc, #224]	@ (800dd24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	f003 0304 	and.w	r3, r3, #4
 800dc4a:	2b04      	cmp	r3, #4
 800dc4c:	d10c      	bne.n	800dc68 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800dc4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d109      	bne.n	800dc68 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dc54:	4b33      	ldr	r3, [pc, #204]	@ (800dd24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	08db      	lsrs	r3, r3, #3
 800dc5a:	f003 0303 	and.w	r3, r3, #3
 800dc5e:	4a32      	ldr	r2, [pc, #200]	@ (800dd28 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800dc60:	fa22 f303 	lsr.w	r3, r2, r3
 800dc64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dc66:	e01e      	b.n	800dca6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800dc68:	4b2e      	ldr	r3, [pc, #184]	@ (800dd24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dc70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dc74:	d106      	bne.n	800dc84 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800dc76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dc7c:	d102      	bne.n	800dc84 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800dc7e:	4b2b      	ldr	r3, [pc, #172]	@ (800dd2c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800dc80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dc82:	e010      	b.n	800dca6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800dc84:	4b27      	ldr	r3, [pc, #156]	@ (800dd24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dc8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dc90:	d106      	bne.n	800dca0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800dc92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dc98:	d102      	bne.n	800dca0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800dc9a:	4b25      	ldr	r3, [pc, #148]	@ (800dd30 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800dc9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dc9e:	e002      	b.n	800dca6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800dca0:	2300      	movs	r3, #0
 800dca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800dca4:	e123      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800dca6:	e122      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800dca8:	2300      	movs	r3, #0
 800dcaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dcac:	e11f      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800dcae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dcb2:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800dcb6:	430b      	orrs	r3, r1
 800dcb8:	d13c      	bne.n	800dd34 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800dcba:	4b1a      	ldr	r3, [pc, #104]	@ (800dd24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dcbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dcbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800dcc2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800dcc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d004      	beq.n	800dcd4 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800dcca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dccc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dcd0:	d012      	beq.n	800dcf8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800dcd2:	e023      	b.n	800dd1c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800dcd4:	4b13      	ldr	r3, [pc, #76]	@ (800dd24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dcdc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dce0:	d107      	bne.n	800dcf2 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dce2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dce6:	4618      	mov	r0, r3
 800dce8:	f000 fbcc 	bl	800e484 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800dcec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dcf0:	e0fd      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dcf6:	e0fa      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dcf8:	4b0a      	ldr	r3, [pc, #40]	@ (800dd24 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dd00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800dd04:	d107      	bne.n	800dd16 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dd06:	f107 0318 	add.w	r3, r7, #24
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	f000 f912 	bl	800df34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800dd10:	6a3b      	ldr	r3, [r7, #32]
 800dd12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dd14:	e0eb      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dd16:	2300      	movs	r3, #0
 800dd18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd1a:	e0e8      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd20:	e0e5      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800dd22:	bf00      	nop
 800dd24:	58024400 	.word	0x58024400
 800dd28:	03d09000 	.word	0x03d09000
 800dd2c:	003d0900 	.word	0x003d0900
 800dd30:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800dd34:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd38:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800dd3c:	430b      	orrs	r3, r1
 800dd3e:	f040 8085 	bne.w	800de4c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800dd42:	4b6d      	ldr	r3, [pc, #436]	@ (800def8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800dd44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dd46:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800dd4a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800dd4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800dd52:	d06b      	beq.n	800de2c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800dd54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800dd5a:	d874      	bhi.n	800de46 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800dd5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd62:	d056      	beq.n	800de12 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800dd64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dd6a:	d86c      	bhi.n	800de46 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800dd6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd6e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800dd72:	d03b      	beq.n	800ddec <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800dd74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd76:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800dd7a:	d864      	bhi.n	800de46 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800dd7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dd82:	d021      	beq.n	800ddc8 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800dd84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dd8a:	d85c      	bhi.n	800de46 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800dd8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d004      	beq.n	800dd9c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800dd92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dd98:	d004      	beq.n	800dda4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800dd9a:	e054      	b.n	800de46 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800dd9c:	f000 f8b4 	bl	800df08 <HAL_RCCEx_GetD3PCLK1Freq>
 800dda0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dda2:	e0a4      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dda4:	4b54      	ldr	r3, [pc, #336]	@ (800def8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ddac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ddb0:	d107      	bne.n	800ddc2 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ddb2:	f107 0318 	add.w	r3, r7, #24
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	f000 f8bc 	bl	800df34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ddbc:	69fb      	ldr	r3, [r7, #28]
 800ddbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ddc0:	e095      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ddc6:	e092      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ddc8:	4b4b      	ldr	r3, [pc, #300]	@ (800def8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ddd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ddd4:	d107      	bne.n	800dde6 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ddd6:	f107 030c 	add.w	r3, r7, #12
 800ddda:	4618      	mov	r0, r3
 800dddc:	f000 f9fe 	bl	800e1dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800dde0:	693b      	ldr	r3, [r7, #16]
 800dde2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dde4:	e083      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dde6:	2300      	movs	r3, #0
 800dde8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ddea:	e080      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ddec:	4b42      	ldr	r3, [pc, #264]	@ (800def8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	f003 0304 	and.w	r3, r3, #4
 800ddf4:	2b04      	cmp	r3, #4
 800ddf6:	d109      	bne.n	800de0c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ddf8:	4b3f      	ldr	r3, [pc, #252]	@ (800def8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	08db      	lsrs	r3, r3, #3
 800ddfe:	f003 0303 	and.w	r3, r3, #3
 800de02:	4a3e      	ldr	r2, [pc, #248]	@ (800defc <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800de04:	fa22 f303 	lsr.w	r3, r2, r3
 800de08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800de0a:	e070      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800de0c:	2300      	movs	r3, #0
 800de0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de10:	e06d      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800de12:	4b39      	ldr	r3, [pc, #228]	@ (800def8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800de1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800de1e:	d102      	bne.n	800de26 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800de20:	4b37      	ldr	r3, [pc, #220]	@ (800df00 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800de22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800de24:	e063      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800de26:	2300      	movs	r3, #0
 800de28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de2a:	e060      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800de2c:	4b32      	ldr	r3, [pc, #200]	@ (800def8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800de34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800de38:	d102      	bne.n	800de40 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800de3a:	4b32      	ldr	r3, [pc, #200]	@ (800df04 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800de3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800de3e:	e056      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800de40:	2300      	movs	r3, #0
 800de42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de44:	e053      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800de46:	2300      	movs	r3, #0
 800de48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de4a:	e050      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800de4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de50:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800de54:	430b      	orrs	r3, r1
 800de56:	d148      	bne.n	800deea <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800de58:	4b27      	ldr	r3, [pc, #156]	@ (800def8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800de5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800de5c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800de60:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800de62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800de68:	d02a      	beq.n	800dec0 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800de6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800de70:	d838      	bhi.n	800dee4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800de72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de74:	2b00      	cmp	r3, #0
 800de76:	d004      	beq.n	800de82 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800de78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800de7e:	d00d      	beq.n	800de9c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800de80:	e030      	b.n	800dee4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800de82:	4b1d      	ldr	r3, [pc, #116]	@ (800def8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800de8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800de8e:	d102      	bne.n	800de96 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800de90:	4b1c      	ldr	r3, [pc, #112]	@ (800df04 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800de92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800de94:	e02b      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800de96:	2300      	movs	r3, #0
 800de98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de9a:	e028      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800de9c:	4b16      	ldr	r3, [pc, #88]	@ (800def8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dea4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dea8:	d107      	bne.n	800deba <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800deaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800deae:	4618      	mov	r0, r3
 800deb0:	f000 fae8 	bl	800e484 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800deb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800deb8:	e019      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800deba:	2300      	movs	r3, #0
 800debc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800debe:	e016      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dec0:	4b0d      	ldr	r3, [pc, #52]	@ (800def8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dec8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800decc:	d107      	bne.n	800dede <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dece:	f107 0318 	add.w	r3, r7, #24
 800ded2:	4618      	mov	r0, r3
 800ded4:	f000 f82e 	bl	800df34 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ded8:	69fb      	ldr	r3, [r7, #28]
 800deda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dedc:	e007      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dede:	2300      	movs	r3, #0
 800dee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dee2:	e004      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800dee4:	2300      	movs	r3, #0
 800dee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dee8:	e001      	b.n	800deee <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800deea:	2300      	movs	r3, #0
 800deec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800deee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800def0:	4618      	mov	r0, r3
 800def2:	3740      	adds	r7, #64	@ 0x40
 800def4:	46bd      	mov	sp, r7
 800def6:	bd80      	pop	{r7, pc}
 800def8:	58024400 	.word	0x58024400
 800defc:	03d09000 	.word	0x03d09000
 800df00:	003d0900 	.word	0x003d0900
 800df04:	007a1200 	.word	0x007a1200

0800df08 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800df0c:	f7fe f92e 	bl	800c16c <HAL_RCC_GetHCLKFreq>
 800df10:	4602      	mov	r2, r0
 800df12:	4b06      	ldr	r3, [pc, #24]	@ (800df2c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800df14:	6a1b      	ldr	r3, [r3, #32]
 800df16:	091b      	lsrs	r3, r3, #4
 800df18:	f003 0307 	and.w	r3, r3, #7
 800df1c:	4904      	ldr	r1, [pc, #16]	@ (800df30 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800df1e:	5ccb      	ldrb	r3, [r1, r3]
 800df20:	f003 031f 	and.w	r3, r3, #31
 800df24:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800df28:	4618      	mov	r0, r3
 800df2a:	bd80      	pop	{r7, pc}
 800df2c:	58024400 	.word	0x58024400
 800df30:	080152fc 	.word	0x080152fc

0800df34 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800df34:	b480      	push	{r7}
 800df36:	b089      	sub	sp, #36	@ 0x24
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800df3c:	4ba1      	ldr	r3, [pc, #644]	@ (800e1c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800df3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df40:	f003 0303 	and.w	r3, r3, #3
 800df44:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800df46:	4b9f      	ldr	r3, [pc, #636]	@ (800e1c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800df48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df4a:	0b1b      	lsrs	r3, r3, #12
 800df4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800df50:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800df52:	4b9c      	ldr	r3, [pc, #624]	@ (800e1c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800df54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df56:	091b      	lsrs	r3, r3, #4
 800df58:	f003 0301 	and.w	r3, r3, #1
 800df5c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800df5e:	4b99      	ldr	r3, [pc, #612]	@ (800e1c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800df60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df62:	08db      	lsrs	r3, r3, #3
 800df64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800df68:	693a      	ldr	r2, [r7, #16]
 800df6a:	fb02 f303 	mul.w	r3, r2, r3
 800df6e:	ee07 3a90 	vmov	s15, r3
 800df72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df76:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800df7a:	697b      	ldr	r3, [r7, #20]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	f000 8111 	beq.w	800e1a4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800df82:	69bb      	ldr	r3, [r7, #24]
 800df84:	2b02      	cmp	r3, #2
 800df86:	f000 8083 	beq.w	800e090 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800df8a:	69bb      	ldr	r3, [r7, #24]
 800df8c:	2b02      	cmp	r3, #2
 800df8e:	f200 80a1 	bhi.w	800e0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800df92:	69bb      	ldr	r3, [r7, #24]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d003      	beq.n	800dfa0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800df98:	69bb      	ldr	r3, [r7, #24]
 800df9a:	2b01      	cmp	r3, #1
 800df9c:	d056      	beq.n	800e04c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800df9e:	e099      	b.n	800e0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dfa0:	4b88      	ldr	r3, [pc, #544]	@ (800e1c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	f003 0320 	and.w	r3, r3, #32
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d02d      	beq.n	800e008 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dfac:	4b85      	ldr	r3, [pc, #532]	@ (800e1c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	08db      	lsrs	r3, r3, #3
 800dfb2:	f003 0303 	and.w	r3, r3, #3
 800dfb6:	4a84      	ldr	r2, [pc, #528]	@ (800e1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800dfb8:	fa22 f303 	lsr.w	r3, r2, r3
 800dfbc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800dfbe:	68bb      	ldr	r3, [r7, #8]
 800dfc0:	ee07 3a90 	vmov	s15, r3
 800dfc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dfc8:	697b      	ldr	r3, [r7, #20]
 800dfca:	ee07 3a90 	vmov	s15, r3
 800dfce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dfd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dfd6:	4b7b      	ldr	r3, [pc, #492]	@ (800e1c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dfd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dfda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dfde:	ee07 3a90 	vmov	s15, r3
 800dfe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dfe6:	ed97 6a03 	vldr	s12, [r7, #12]
 800dfea:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800e1cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800dfee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dff6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e002:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e006:	e087      	b.n	800e118 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e008:	697b      	ldr	r3, [r7, #20]
 800e00a:	ee07 3a90 	vmov	s15, r3
 800e00e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e012:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800e1d0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800e016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e01a:	4b6a      	ldr	r3, [pc, #424]	@ (800e1c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e01c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e01e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e022:	ee07 3a90 	vmov	s15, r3
 800e026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e02a:	ed97 6a03 	vldr	s12, [r7, #12]
 800e02e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800e1cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e03a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e03e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e042:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e046:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e04a:	e065      	b.n	800e118 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e04c:	697b      	ldr	r3, [r7, #20]
 800e04e:	ee07 3a90 	vmov	s15, r3
 800e052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e056:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800e1d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800e05a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e05e:	4b59      	ldr	r3, [pc, #356]	@ (800e1c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e066:	ee07 3a90 	vmov	s15, r3
 800e06a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e06e:	ed97 6a03 	vldr	s12, [r7, #12]
 800e072:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800e1cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e07a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e07e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e08a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e08e:	e043      	b.n	800e118 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e090:	697b      	ldr	r3, [r7, #20]
 800e092:	ee07 3a90 	vmov	s15, r3
 800e096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e09a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800e1d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800e09e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e0a2:	4b48      	ldr	r3, [pc, #288]	@ (800e1c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e0a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e0aa:	ee07 3a90 	vmov	s15, r3
 800e0ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e0b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800e0b6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800e1cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e0ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e0be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e0c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e0c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e0ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e0ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e0d2:	e021      	b.n	800e118 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e0d4:	697b      	ldr	r3, [r7, #20]
 800e0d6:	ee07 3a90 	vmov	s15, r3
 800e0da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e0de:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800e1d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800e0e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e0e6:	4b37      	ldr	r3, [pc, #220]	@ (800e1c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e0e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e0ee:	ee07 3a90 	vmov	s15, r3
 800e0f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e0f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800e0fa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800e1cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e0fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e106:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e10a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e10e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e112:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e116:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800e118:	4b2a      	ldr	r3, [pc, #168]	@ (800e1c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e11a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e11c:	0a5b      	lsrs	r3, r3, #9
 800e11e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e122:	ee07 3a90 	vmov	s15, r3
 800e126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e12a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e12e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e132:	edd7 6a07 	vldr	s13, [r7, #28]
 800e136:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e13a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e13e:	ee17 2a90 	vmov	r2, s15
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800e146:	4b1f      	ldr	r3, [pc, #124]	@ (800e1c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e14a:	0c1b      	lsrs	r3, r3, #16
 800e14c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e150:	ee07 3a90 	vmov	s15, r3
 800e154:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e158:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e15c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e160:	edd7 6a07 	vldr	s13, [r7, #28]
 800e164:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e168:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e16c:	ee17 2a90 	vmov	r2, s15
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800e174:	4b13      	ldr	r3, [pc, #76]	@ (800e1c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e178:	0e1b      	lsrs	r3, r3, #24
 800e17a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e17e:	ee07 3a90 	vmov	s15, r3
 800e182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e186:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e18a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e18e:	edd7 6a07 	vldr	s13, [r7, #28]
 800e192:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e196:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e19a:	ee17 2a90 	vmov	r2, s15
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800e1a2:	e008      	b.n	800e1b6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	609a      	str	r2, [r3, #8]
}
 800e1b6:	bf00      	nop
 800e1b8:	3724      	adds	r7, #36	@ 0x24
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c0:	4770      	bx	lr
 800e1c2:	bf00      	nop
 800e1c4:	58024400 	.word	0x58024400
 800e1c8:	03d09000 	.word	0x03d09000
 800e1cc:	46000000 	.word	0x46000000
 800e1d0:	4c742400 	.word	0x4c742400
 800e1d4:	4a742400 	.word	0x4a742400
 800e1d8:	4af42400 	.word	0x4af42400

0800e1dc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800e1dc:	b480      	push	{r7}
 800e1de:	b089      	sub	sp, #36	@ 0x24
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e1e4:	4ba1      	ldr	r3, [pc, #644]	@ (800e46c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e1e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1e8:	f003 0303 	and.w	r3, r3, #3
 800e1ec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800e1ee:	4b9f      	ldr	r3, [pc, #636]	@ (800e46c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e1f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1f2:	0d1b      	lsrs	r3, r3, #20
 800e1f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e1f8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800e1fa:	4b9c      	ldr	r3, [pc, #624]	@ (800e46c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e1fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1fe:	0a1b      	lsrs	r3, r3, #8
 800e200:	f003 0301 	and.w	r3, r3, #1
 800e204:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800e206:	4b99      	ldr	r3, [pc, #612]	@ (800e46c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e20a:	08db      	lsrs	r3, r3, #3
 800e20c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e210:	693a      	ldr	r2, [r7, #16]
 800e212:	fb02 f303 	mul.w	r3, r2, r3
 800e216:	ee07 3a90 	vmov	s15, r3
 800e21a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e21e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800e222:	697b      	ldr	r3, [r7, #20]
 800e224:	2b00      	cmp	r3, #0
 800e226:	f000 8111 	beq.w	800e44c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800e22a:	69bb      	ldr	r3, [r7, #24]
 800e22c:	2b02      	cmp	r3, #2
 800e22e:	f000 8083 	beq.w	800e338 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800e232:	69bb      	ldr	r3, [r7, #24]
 800e234:	2b02      	cmp	r3, #2
 800e236:	f200 80a1 	bhi.w	800e37c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800e23a:	69bb      	ldr	r3, [r7, #24]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d003      	beq.n	800e248 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800e240:	69bb      	ldr	r3, [r7, #24]
 800e242:	2b01      	cmp	r3, #1
 800e244:	d056      	beq.n	800e2f4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800e246:	e099      	b.n	800e37c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e248:	4b88      	ldr	r3, [pc, #544]	@ (800e46c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	f003 0320 	and.w	r3, r3, #32
 800e250:	2b00      	cmp	r3, #0
 800e252:	d02d      	beq.n	800e2b0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e254:	4b85      	ldr	r3, [pc, #532]	@ (800e46c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	08db      	lsrs	r3, r3, #3
 800e25a:	f003 0303 	and.w	r3, r3, #3
 800e25e:	4a84      	ldr	r2, [pc, #528]	@ (800e470 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800e260:	fa22 f303 	lsr.w	r3, r2, r3
 800e264:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e266:	68bb      	ldr	r3, [r7, #8]
 800e268:	ee07 3a90 	vmov	s15, r3
 800e26c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e270:	697b      	ldr	r3, [r7, #20]
 800e272:	ee07 3a90 	vmov	s15, r3
 800e276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e27a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e27e:	4b7b      	ldr	r3, [pc, #492]	@ (800e46c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e286:	ee07 3a90 	vmov	s15, r3
 800e28a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e28e:	ed97 6a03 	vldr	s12, [r7, #12]
 800e292:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800e474 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e29a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e29e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e2a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e2a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e2aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e2ae:	e087      	b.n	800e3c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e2b0:	697b      	ldr	r3, [r7, #20]
 800e2b2:	ee07 3a90 	vmov	s15, r3
 800e2b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e2ba:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800e478 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800e2be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e2c2:	4b6a      	ldr	r3, [pc, #424]	@ (800e46c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e2c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e2c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e2ca:	ee07 3a90 	vmov	s15, r3
 800e2ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e2d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800e2d6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800e474 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e2da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e2de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e2e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e2e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e2ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e2ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e2f2:	e065      	b.n	800e3c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e2f4:	697b      	ldr	r3, [r7, #20]
 800e2f6:	ee07 3a90 	vmov	s15, r3
 800e2fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e2fe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800e47c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e306:	4b59      	ldr	r3, [pc, #356]	@ (800e46c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e30a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e30e:	ee07 3a90 	vmov	s15, r3
 800e312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e316:	ed97 6a03 	vldr	s12, [r7, #12]
 800e31a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800e474 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e31e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e326:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e32a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e32e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e332:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e336:	e043      	b.n	800e3c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e338:	697b      	ldr	r3, [r7, #20]
 800e33a:	ee07 3a90 	vmov	s15, r3
 800e33e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e342:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800e480 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800e346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e34a:	4b48      	ldr	r3, [pc, #288]	@ (800e46c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e34c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e34e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e352:	ee07 3a90 	vmov	s15, r3
 800e356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e35a:	ed97 6a03 	vldr	s12, [r7, #12]
 800e35e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800e474 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e36a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e36e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e372:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e376:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e37a:	e021      	b.n	800e3c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e37c:	697b      	ldr	r3, [r7, #20]
 800e37e:	ee07 3a90 	vmov	s15, r3
 800e382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e386:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800e47c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e38a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e38e:	4b37      	ldr	r3, [pc, #220]	@ (800e46c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e396:	ee07 3a90 	vmov	s15, r3
 800e39a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e39e:	ed97 6a03 	vldr	s12, [r7, #12]
 800e3a2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800e474 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e3a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e3aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e3ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e3b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e3b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e3ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e3be:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800e3c0:	4b2a      	ldr	r3, [pc, #168]	@ (800e46c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e3c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e3c4:	0a5b      	lsrs	r3, r3, #9
 800e3c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e3ca:	ee07 3a90 	vmov	s15, r3
 800e3ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e3d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e3d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e3da:	edd7 6a07 	vldr	s13, [r7, #28]
 800e3de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e3e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e3e6:	ee17 2a90 	vmov	r2, s15
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800e3ee:	4b1f      	ldr	r3, [pc, #124]	@ (800e46c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e3f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e3f2:	0c1b      	lsrs	r3, r3, #16
 800e3f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e3f8:	ee07 3a90 	vmov	s15, r3
 800e3fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e400:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e404:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e408:	edd7 6a07 	vldr	s13, [r7, #28]
 800e40c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e410:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e414:	ee17 2a90 	vmov	r2, s15
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800e41c:	4b13      	ldr	r3, [pc, #76]	@ (800e46c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e41e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e420:	0e1b      	lsrs	r3, r3, #24
 800e422:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e426:	ee07 3a90 	vmov	s15, r3
 800e42a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e42e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e432:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e436:	edd7 6a07 	vldr	s13, [r7, #28]
 800e43a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e43e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e442:	ee17 2a90 	vmov	r2, s15
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800e44a:	e008      	b.n	800e45e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	2200      	movs	r2, #0
 800e450:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	2200      	movs	r2, #0
 800e456:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	2200      	movs	r2, #0
 800e45c:	609a      	str	r2, [r3, #8]
}
 800e45e:	bf00      	nop
 800e460:	3724      	adds	r7, #36	@ 0x24
 800e462:	46bd      	mov	sp, r7
 800e464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e468:	4770      	bx	lr
 800e46a:	bf00      	nop
 800e46c:	58024400 	.word	0x58024400
 800e470:	03d09000 	.word	0x03d09000
 800e474:	46000000 	.word	0x46000000
 800e478:	4c742400 	.word	0x4c742400
 800e47c:	4a742400 	.word	0x4a742400
 800e480:	4af42400 	.word	0x4af42400

0800e484 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800e484:	b480      	push	{r7}
 800e486:	b089      	sub	sp, #36	@ 0x24
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e48c:	4ba0      	ldr	r3, [pc, #640]	@ (800e710 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e48e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e490:	f003 0303 	and.w	r3, r3, #3
 800e494:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800e496:	4b9e      	ldr	r3, [pc, #632]	@ (800e710 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e49a:	091b      	lsrs	r3, r3, #4
 800e49c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e4a0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800e4a2:	4b9b      	ldr	r3, [pc, #620]	@ (800e710 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e4a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4a6:	f003 0301 	and.w	r3, r3, #1
 800e4aa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800e4ac:	4b98      	ldr	r3, [pc, #608]	@ (800e710 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e4ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e4b0:	08db      	lsrs	r3, r3, #3
 800e4b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e4b6:	693a      	ldr	r2, [r7, #16]
 800e4b8:	fb02 f303 	mul.w	r3, r2, r3
 800e4bc:	ee07 3a90 	vmov	s15, r3
 800e4c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e4c4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800e4c8:	697b      	ldr	r3, [r7, #20]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	f000 8111 	beq.w	800e6f2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800e4d0:	69bb      	ldr	r3, [r7, #24]
 800e4d2:	2b02      	cmp	r3, #2
 800e4d4:	f000 8083 	beq.w	800e5de <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800e4d8:	69bb      	ldr	r3, [r7, #24]
 800e4da:	2b02      	cmp	r3, #2
 800e4dc:	f200 80a1 	bhi.w	800e622 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800e4e0:	69bb      	ldr	r3, [r7, #24]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d003      	beq.n	800e4ee <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800e4e6:	69bb      	ldr	r3, [r7, #24]
 800e4e8:	2b01      	cmp	r3, #1
 800e4ea:	d056      	beq.n	800e59a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800e4ec:	e099      	b.n	800e622 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e4ee:	4b88      	ldr	r3, [pc, #544]	@ (800e710 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	f003 0320 	and.w	r3, r3, #32
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d02d      	beq.n	800e556 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e4fa:	4b85      	ldr	r3, [pc, #532]	@ (800e710 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	08db      	lsrs	r3, r3, #3
 800e500:	f003 0303 	and.w	r3, r3, #3
 800e504:	4a83      	ldr	r2, [pc, #524]	@ (800e714 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800e506:	fa22 f303 	lsr.w	r3, r2, r3
 800e50a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e50c:	68bb      	ldr	r3, [r7, #8]
 800e50e:	ee07 3a90 	vmov	s15, r3
 800e512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e516:	697b      	ldr	r3, [r7, #20]
 800e518:	ee07 3a90 	vmov	s15, r3
 800e51c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e520:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e524:	4b7a      	ldr	r3, [pc, #488]	@ (800e710 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e52c:	ee07 3a90 	vmov	s15, r3
 800e530:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e534:	ed97 6a03 	vldr	s12, [r7, #12]
 800e538:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800e718 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e53c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e540:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e544:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e548:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e54c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e550:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e554:	e087      	b.n	800e666 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e556:	697b      	ldr	r3, [r7, #20]
 800e558:	ee07 3a90 	vmov	s15, r3
 800e55c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e560:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800e71c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800e564:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e568:	4b69      	ldr	r3, [pc, #420]	@ (800e710 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e56a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e56c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e570:	ee07 3a90 	vmov	s15, r3
 800e574:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e578:	ed97 6a03 	vldr	s12, [r7, #12]
 800e57c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800e718 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e580:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e584:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e588:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e58c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e590:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e594:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e598:	e065      	b.n	800e666 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e59a:	697b      	ldr	r3, [r7, #20]
 800e59c:	ee07 3a90 	vmov	s15, r3
 800e5a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e5a4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800e720 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800e5a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e5ac:	4b58      	ldr	r3, [pc, #352]	@ (800e710 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e5ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e5b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5b4:	ee07 3a90 	vmov	s15, r3
 800e5b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e5bc:	ed97 6a03 	vldr	s12, [r7, #12]
 800e5c0:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800e718 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e5c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e5c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e5cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e5d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e5d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e5d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e5dc:	e043      	b.n	800e666 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e5de:	697b      	ldr	r3, [r7, #20]
 800e5e0:	ee07 3a90 	vmov	s15, r3
 800e5e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e5e8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800e724 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800e5ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e5f0:	4b47      	ldr	r3, [pc, #284]	@ (800e710 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e5f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e5f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5f8:	ee07 3a90 	vmov	s15, r3
 800e5fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e600:	ed97 6a03 	vldr	s12, [r7, #12]
 800e604:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800e718 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e608:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e60c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e610:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e614:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e618:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e61c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e620:	e021      	b.n	800e666 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e622:	697b      	ldr	r3, [r7, #20]
 800e624:	ee07 3a90 	vmov	s15, r3
 800e628:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e62c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800e71c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800e630:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e634:	4b36      	ldr	r3, [pc, #216]	@ (800e710 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e638:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e63c:	ee07 3a90 	vmov	s15, r3
 800e640:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e644:	ed97 6a03 	vldr	s12, [r7, #12]
 800e648:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800e718 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e64c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e650:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e654:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e658:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e65c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e660:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e664:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800e666:	4b2a      	ldr	r3, [pc, #168]	@ (800e710 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e66a:	0a5b      	lsrs	r3, r3, #9
 800e66c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e670:	ee07 3a90 	vmov	s15, r3
 800e674:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e678:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e67c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e680:	edd7 6a07 	vldr	s13, [r7, #28]
 800e684:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e688:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e68c:	ee17 2a90 	vmov	r2, s15
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800e694:	4b1e      	ldr	r3, [pc, #120]	@ (800e710 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e698:	0c1b      	lsrs	r3, r3, #16
 800e69a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e69e:	ee07 3a90 	vmov	s15, r3
 800e6a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e6a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e6aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e6ae:	edd7 6a07 	vldr	s13, [r7, #28]
 800e6b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e6b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e6ba:	ee17 2a90 	vmov	r2, s15
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800e6c2:	4b13      	ldr	r3, [pc, #76]	@ (800e710 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e6c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e6c6:	0e1b      	lsrs	r3, r3, #24
 800e6c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e6cc:	ee07 3a90 	vmov	s15, r3
 800e6d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e6d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e6d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e6dc:	edd7 6a07 	vldr	s13, [r7, #28]
 800e6e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e6e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e6e8:	ee17 2a90 	vmov	r2, s15
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800e6f0:	e008      	b.n	800e704 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	2200      	movs	r2, #0
 800e702:	609a      	str	r2, [r3, #8]
}
 800e704:	bf00      	nop
 800e706:	3724      	adds	r7, #36	@ 0x24
 800e708:	46bd      	mov	sp, r7
 800e70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70e:	4770      	bx	lr
 800e710:	58024400 	.word	0x58024400
 800e714:	03d09000 	.word	0x03d09000
 800e718:	46000000 	.word	0x46000000
 800e71c:	4c742400 	.word	0x4c742400
 800e720:	4a742400 	.word	0x4a742400
 800e724:	4af42400 	.word	0x4af42400

0800e728 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b084      	sub	sp, #16
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
 800e730:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e732:	2300      	movs	r3, #0
 800e734:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e736:	4b53      	ldr	r3, [pc, #332]	@ (800e884 <RCCEx_PLL2_Config+0x15c>)
 800e738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e73a:	f003 0303 	and.w	r3, r3, #3
 800e73e:	2b03      	cmp	r3, #3
 800e740:	d101      	bne.n	800e746 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800e742:	2301      	movs	r3, #1
 800e744:	e099      	b.n	800e87a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800e746:	4b4f      	ldr	r3, [pc, #316]	@ (800e884 <RCCEx_PLL2_Config+0x15c>)
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	4a4e      	ldr	r2, [pc, #312]	@ (800e884 <RCCEx_PLL2_Config+0x15c>)
 800e74c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e750:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e752:	f7f6 fb51 	bl	8004df8 <HAL_GetTick>
 800e756:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e758:	e008      	b.n	800e76c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e75a:	f7f6 fb4d 	bl	8004df8 <HAL_GetTick>
 800e75e:	4602      	mov	r2, r0
 800e760:	68bb      	ldr	r3, [r7, #8]
 800e762:	1ad3      	subs	r3, r2, r3
 800e764:	2b02      	cmp	r3, #2
 800e766:	d901      	bls.n	800e76c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e768:	2303      	movs	r3, #3
 800e76a:	e086      	b.n	800e87a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e76c:	4b45      	ldr	r3, [pc, #276]	@ (800e884 <RCCEx_PLL2_Config+0x15c>)
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e774:	2b00      	cmp	r3, #0
 800e776:	d1f0      	bne.n	800e75a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800e778:	4b42      	ldr	r3, [pc, #264]	@ (800e884 <RCCEx_PLL2_Config+0x15c>)
 800e77a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e77c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	031b      	lsls	r3, r3, #12
 800e786:	493f      	ldr	r1, [pc, #252]	@ (800e884 <RCCEx_PLL2_Config+0x15c>)
 800e788:	4313      	orrs	r3, r2
 800e78a:	628b      	str	r3, [r1, #40]	@ 0x28
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	685b      	ldr	r3, [r3, #4]
 800e790:	3b01      	subs	r3, #1
 800e792:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	689b      	ldr	r3, [r3, #8]
 800e79a:	3b01      	subs	r3, #1
 800e79c:	025b      	lsls	r3, r3, #9
 800e79e:	b29b      	uxth	r3, r3
 800e7a0:	431a      	orrs	r2, r3
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	68db      	ldr	r3, [r3, #12]
 800e7a6:	3b01      	subs	r3, #1
 800e7a8:	041b      	lsls	r3, r3, #16
 800e7aa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800e7ae:	431a      	orrs	r2, r3
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	691b      	ldr	r3, [r3, #16]
 800e7b4:	3b01      	subs	r3, #1
 800e7b6:	061b      	lsls	r3, r3, #24
 800e7b8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800e7bc:	4931      	ldr	r1, [pc, #196]	@ (800e884 <RCCEx_PLL2_Config+0x15c>)
 800e7be:	4313      	orrs	r3, r2
 800e7c0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800e7c2:	4b30      	ldr	r3, [pc, #192]	@ (800e884 <RCCEx_PLL2_Config+0x15c>)
 800e7c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7c6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	695b      	ldr	r3, [r3, #20]
 800e7ce:	492d      	ldr	r1, [pc, #180]	@ (800e884 <RCCEx_PLL2_Config+0x15c>)
 800e7d0:	4313      	orrs	r3, r2
 800e7d2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800e7d4:	4b2b      	ldr	r3, [pc, #172]	@ (800e884 <RCCEx_PLL2_Config+0x15c>)
 800e7d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7d8:	f023 0220 	bic.w	r2, r3, #32
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	699b      	ldr	r3, [r3, #24]
 800e7e0:	4928      	ldr	r1, [pc, #160]	@ (800e884 <RCCEx_PLL2_Config+0x15c>)
 800e7e2:	4313      	orrs	r3, r2
 800e7e4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800e7e6:	4b27      	ldr	r3, [pc, #156]	@ (800e884 <RCCEx_PLL2_Config+0x15c>)
 800e7e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7ea:	4a26      	ldr	r2, [pc, #152]	@ (800e884 <RCCEx_PLL2_Config+0x15c>)
 800e7ec:	f023 0310 	bic.w	r3, r3, #16
 800e7f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800e7f2:	4b24      	ldr	r3, [pc, #144]	@ (800e884 <RCCEx_PLL2_Config+0x15c>)
 800e7f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e7f6:	4b24      	ldr	r3, [pc, #144]	@ (800e888 <RCCEx_PLL2_Config+0x160>)
 800e7f8:	4013      	ands	r3, r2
 800e7fa:	687a      	ldr	r2, [r7, #4]
 800e7fc:	69d2      	ldr	r2, [r2, #28]
 800e7fe:	00d2      	lsls	r2, r2, #3
 800e800:	4920      	ldr	r1, [pc, #128]	@ (800e884 <RCCEx_PLL2_Config+0x15c>)
 800e802:	4313      	orrs	r3, r2
 800e804:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800e806:	4b1f      	ldr	r3, [pc, #124]	@ (800e884 <RCCEx_PLL2_Config+0x15c>)
 800e808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e80a:	4a1e      	ldr	r2, [pc, #120]	@ (800e884 <RCCEx_PLL2_Config+0x15c>)
 800e80c:	f043 0310 	orr.w	r3, r3, #16
 800e810:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e812:	683b      	ldr	r3, [r7, #0]
 800e814:	2b00      	cmp	r3, #0
 800e816:	d106      	bne.n	800e826 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800e818:	4b1a      	ldr	r3, [pc, #104]	@ (800e884 <RCCEx_PLL2_Config+0x15c>)
 800e81a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e81c:	4a19      	ldr	r2, [pc, #100]	@ (800e884 <RCCEx_PLL2_Config+0x15c>)
 800e81e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e822:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e824:	e00f      	b.n	800e846 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e826:	683b      	ldr	r3, [r7, #0]
 800e828:	2b01      	cmp	r3, #1
 800e82a:	d106      	bne.n	800e83a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800e82c:	4b15      	ldr	r3, [pc, #84]	@ (800e884 <RCCEx_PLL2_Config+0x15c>)
 800e82e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e830:	4a14      	ldr	r2, [pc, #80]	@ (800e884 <RCCEx_PLL2_Config+0x15c>)
 800e832:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e836:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e838:	e005      	b.n	800e846 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800e83a:	4b12      	ldr	r3, [pc, #72]	@ (800e884 <RCCEx_PLL2_Config+0x15c>)
 800e83c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e83e:	4a11      	ldr	r2, [pc, #68]	@ (800e884 <RCCEx_PLL2_Config+0x15c>)
 800e840:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800e844:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800e846:	4b0f      	ldr	r3, [pc, #60]	@ (800e884 <RCCEx_PLL2_Config+0x15c>)
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	4a0e      	ldr	r2, [pc, #56]	@ (800e884 <RCCEx_PLL2_Config+0x15c>)
 800e84c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e850:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e852:	f7f6 fad1 	bl	8004df8 <HAL_GetTick>
 800e856:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e858:	e008      	b.n	800e86c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e85a:	f7f6 facd 	bl	8004df8 <HAL_GetTick>
 800e85e:	4602      	mov	r2, r0
 800e860:	68bb      	ldr	r3, [r7, #8]
 800e862:	1ad3      	subs	r3, r2, r3
 800e864:	2b02      	cmp	r3, #2
 800e866:	d901      	bls.n	800e86c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e868:	2303      	movs	r3, #3
 800e86a:	e006      	b.n	800e87a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e86c:	4b05      	ldr	r3, [pc, #20]	@ (800e884 <RCCEx_PLL2_Config+0x15c>)
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e874:	2b00      	cmp	r3, #0
 800e876:	d0f0      	beq.n	800e85a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800e878:	7bfb      	ldrb	r3, [r7, #15]
}
 800e87a:	4618      	mov	r0, r3
 800e87c:	3710      	adds	r7, #16
 800e87e:	46bd      	mov	sp, r7
 800e880:	bd80      	pop	{r7, pc}
 800e882:	bf00      	nop
 800e884:	58024400 	.word	0x58024400
 800e888:	ffff0007 	.word	0xffff0007

0800e88c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b084      	sub	sp, #16
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
 800e894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e896:	2300      	movs	r3, #0
 800e898:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e89a:	4b53      	ldr	r3, [pc, #332]	@ (800e9e8 <RCCEx_PLL3_Config+0x15c>)
 800e89c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e89e:	f003 0303 	and.w	r3, r3, #3
 800e8a2:	2b03      	cmp	r3, #3
 800e8a4:	d101      	bne.n	800e8aa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800e8a6:	2301      	movs	r3, #1
 800e8a8:	e099      	b.n	800e9de <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800e8aa:	4b4f      	ldr	r3, [pc, #316]	@ (800e9e8 <RCCEx_PLL3_Config+0x15c>)
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	4a4e      	ldr	r2, [pc, #312]	@ (800e9e8 <RCCEx_PLL3_Config+0x15c>)
 800e8b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e8b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e8b6:	f7f6 fa9f 	bl	8004df8 <HAL_GetTick>
 800e8ba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e8bc:	e008      	b.n	800e8d0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e8be:	f7f6 fa9b 	bl	8004df8 <HAL_GetTick>
 800e8c2:	4602      	mov	r2, r0
 800e8c4:	68bb      	ldr	r3, [r7, #8]
 800e8c6:	1ad3      	subs	r3, r2, r3
 800e8c8:	2b02      	cmp	r3, #2
 800e8ca:	d901      	bls.n	800e8d0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e8cc:	2303      	movs	r3, #3
 800e8ce:	e086      	b.n	800e9de <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e8d0:	4b45      	ldr	r3, [pc, #276]	@ (800e9e8 <RCCEx_PLL3_Config+0x15c>)
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d1f0      	bne.n	800e8be <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800e8dc:	4b42      	ldr	r3, [pc, #264]	@ (800e9e8 <RCCEx_PLL3_Config+0x15c>)
 800e8de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e8e0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	051b      	lsls	r3, r3, #20
 800e8ea:	493f      	ldr	r1, [pc, #252]	@ (800e9e8 <RCCEx_PLL3_Config+0x15c>)
 800e8ec:	4313      	orrs	r3, r2
 800e8ee:	628b      	str	r3, [r1, #40]	@ 0x28
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	685b      	ldr	r3, [r3, #4]
 800e8f4:	3b01      	subs	r3, #1
 800e8f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	689b      	ldr	r3, [r3, #8]
 800e8fe:	3b01      	subs	r3, #1
 800e900:	025b      	lsls	r3, r3, #9
 800e902:	b29b      	uxth	r3, r3
 800e904:	431a      	orrs	r2, r3
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	68db      	ldr	r3, [r3, #12]
 800e90a:	3b01      	subs	r3, #1
 800e90c:	041b      	lsls	r3, r3, #16
 800e90e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800e912:	431a      	orrs	r2, r3
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	691b      	ldr	r3, [r3, #16]
 800e918:	3b01      	subs	r3, #1
 800e91a:	061b      	lsls	r3, r3, #24
 800e91c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800e920:	4931      	ldr	r1, [pc, #196]	@ (800e9e8 <RCCEx_PLL3_Config+0x15c>)
 800e922:	4313      	orrs	r3, r2
 800e924:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800e926:	4b30      	ldr	r3, [pc, #192]	@ (800e9e8 <RCCEx_PLL3_Config+0x15c>)
 800e928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e92a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	695b      	ldr	r3, [r3, #20]
 800e932:	492d      	ldr	r1, [pc, #180]	@ (800e9e8 <RCCEx_PLL3_Config+0x15c>)
 800e934:	4313      	orrs	r3, r2
 800e936:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800e938:	4b2b      	ldr	r3, [pc, #172]	@ (800e9e8 <RCCEx_PLL3_Config+0x15c>)
 800e93a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e93c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	699b      	ldr	r3, [r3, #24]
 800e944:	4928      	ldr	r1, [pc, #160]	@ (800e9e8 <RCCEx_PLL3_Config+0x15c>)
 800e946:	4313      	orrs	r3, r2
 800e948:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800e94a:	4b27      	ldr	r3, [pc, #156]	@ (800e9e8 <RCCEx_PLL3_Config+0x15c>)
 800e94c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e94e:	4a26      	ldr	r2, [pc, #152]	@ (800e9e8 <RCCEx_PLL3_Config+0x15c>)
 800e950:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e954:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800e956:	4b24      	ldr	r3, [pc, #144]	@ (800e9e8 <RCCEx_PLL3_Config+0x15c>)
 800e958:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e95a:	4b24      	ldr	r3, [pc, #144]	@ (800e9ec <RCCEx_PLL3_Config+0x160>)
 800e95c:	4013      	ands	r3, r2
 800e95e:	687a      	ldr	r2, [r7, #4]
 800e960:	69d2      	ldr	r2, [r2, #28]
 800e962:	00d2      	lsls	r2, r2, #3
 800e964:	4920      	ldr	r1, [pc, #128]	@ (800e9e8 <RCCEx_PLL3_Config+0x15c>)
 800e966:	4313      	orrs	r3, r2
 800e968:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800e96a:	4b1f      	ldr	r3, [pc, #124]	@ (800e9e8 <RCCEx_PLL3_Config+0x15c>)
 800e96c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e96e:	4a1e      	ldr	r2, [pc, #120]	@ (800e9e8 <RCCEx_PLL3_Config+0x15c>)
 800e970:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e974:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e976:	683b      	ldr	r3, [r7, #0]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d106      	bne.n	800e98a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800e97c:	4b1a      	ldr	r3, [pc, #104]	@ (800e9e8 <RCCEx_PLL3_Config+0x15c>)
 800e97e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e980:	4a19      	ldr	r2, [pc, #100]	@ (800e9e8 <RCCEx_PLL3_Config+0x15c>)
 800e982:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800e986:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e988:	e00f      	b.n	800e9aa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e98a:	683b      	ldr	r3, [r7, #0]
 800e98c:	2b01      	cmp	r3, #1
 800e98e:	d106      	bne.n	800e99e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800e990:	4b15      	ldr	r3, [pc, #84]	@ (800e9e8 <RCCEx_PLL3_Config+0x15c>)
 800e992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e994:	4a14      	ldr	r2, [pc, #80]	@ (800e9e8 <RCCEx_PLL3_Config+0x15c>)
 800e996:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800e99a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e99c:	e005      	b.n	800e9aa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800e99e:	4b12      	ldr	r3, [pc, #72]	@ (800e9e8 <RCCEx_PLL3_Config+0x15c>)
 800e9a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9a2:	4a11      	ldr	r2, [pc, #68]	@ (800e9e8 <RCCEx_PLL3_Config+0x15c>)
 800e9a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e9a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800e9aa:	4b0f      	ldr	r3, [pc, #60]	@ (800e9e8 <RCCEx_PLL3_Config+0x15c>)
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	4a0e      	ldr	r2, [pc, #56]	@ (800e9e8 <RCCEx_PLL3_Config+0x15c>)
 800e9b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e9b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e9b6:	f7f6 fa1f 	bl	8004df8 <HAL_GetTick>
 800e9ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e9bc:	e008      	b.n	800e9d0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e9be:	f7f6 fa1b 	bl	8004df8 <HAL_GetTick>
 800e9c2:	4602      	mov	r2, r0
 800e9c4:	68bb      	ldr	r3, [r7, #8]
 800e9c6:	1ad3      	subs	r3, r2, r3
 800e9c8:	2b02      	cmp	r3, #2
 800e9ca:	d901      	bls.n	800e9d0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e9cc:	2303      	movs	r3, #3
 800e9ce:	e006      	b.n	800e9de <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e9d0:	4b05      	ldr	r3, [pc, #20]	@ (800e9e8 <RCCEx_PLL3_Config+0x15c>)
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d0f0      	beq.n	800e9be <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800e9dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9de:	4618      	mov	r0, r3
 800e9e0:	3710      	adds	r7, #16
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	bd80      	pop	{r7, pc}
 800e9e6:	bf00      	nop
 800e9e8:	58024400 	.word	0x58024400
 800e9ec:	ffff0007 	.word	0xffff0007

0800e9f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	b082      	sub	sp, #8
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d101      	bne.n	800ea02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e9fe:	2301      	movs	r3, #1
 800ea00:	e049      	b.n	800ea96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ea08:	b2db      	uxtb	r3, r3
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d106      	bne.n	800ea1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	2200      	movs	r2, #0
 800ea12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ea16:	6878      	ldr	r0, [r7, #4]
 800ea18:	f7f5 fef2 	bl	8004800 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	2202      	movs	r2, #2
 800ea20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681a      	ldr	r2, [r3, #0]
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	3304      	adds	r3, #4
 800ea2c:	4619      	mov	r1, r3
 800ea2e:	4610      	mov	r0, r2
 800ea30:	f000 fdbe 	bl	800f5b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	2201      	movs	r2, #1
 800ea38:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	2201      	movs	r2, #1
 800ea40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	2201      	movs	r2, #1
 800ea48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	2201      	movs	r2, #1
 800ea50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	2201      	movs	r2, #1
 800ea58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	2201      	movs	r2, #1
 800ea60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	2201      	movs	r2, #1
 800ea68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	2201      	movs	r2, #1
 800ea70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	2201      	movs	r2, #1
 800ea78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	2201      	movs	r2, #1
 800ea80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	2201      	movs	r2, #1
 800ea88:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2201      	movs	r2, #1
 800ea90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ea94:	2300      	movs	r3, #0
}
 800ea96:	4618      	mov	r0, r3
 800ea98:	3708      	adds	r7, #8
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	bd80      	pop	{r7, pc}
	...

0800eaa0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800eaa0:	b480      	push	{r7}
 800eaa2:	b085      	sub	sp, #20
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800eaae:	b2db      	uxtb	r3, r3
 800eab0:	2b01      	cmp	r3, #1
 800eab2:	d001      	beq.n	800eab8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800eab4:	2301      	movs	r3, #1
 800eab6:	e056      	b.n	800eb66 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	2202      	movs	r2, #2
 800eabc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	4a2b      	ldr	r2, [pc, #172]	@ (800eb74 <HAL_TIM_Base_Start+0xd4>)
 800eac6:	4293      	cmp	r3, r2
 800eac8:	d02c      	beq.n	800eb24 <HAL_TIM_Base_Start+0x84>
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ead2:	d027      	beq.n	800eb24 <HAL_TIM_Base_Start+0x84>
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	4a27      	ldr	r2, [pc, #156]	@ (800eb78 <HAL_TIM_Base_Start+0xd8>)
 800eada:	4293      	cmp	r3, r2
 800eadc:	d022      	beq.n	800eb24 <HAL_TIM_Base_Start+0x84>
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	4a26      	ldr	r2, [pc, #152]	@ (800eb7c <HAL_TIM_Base_Start+0xdc>)
 800eae4:	4293      	cmp	r3, r2
 800eae6:	d01d      	beq.n	800eb24 <HAL_TIM_Base_Start+0x84>
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	4a24      	ldr	r2, [pc, #144]	@ (800eb80 <HAL_TIM_Base_Start+0xe0>)
 800eaee:	4293      	cmp	r3, r2
 800eaf0:	d018      	beq.n	800eb24 <HAL_TIM_Base_Start+0x84>
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	4a23      	ldr	r2, [pc, #140]	@ (800eb84 <HAL_TIM_Base_Start+0xe4>)
 800eaf8:	4293      	cmp	r3, r2
 800eafa:	d013      	beq.n	800eb24 <HAL_TIM_Base_Start+0x84>
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	4a21      	ldr	r2, [pc, #132]	@ (800eb88 <HAL_TIM_Base_Start+0xe8>)
 800eb02:	4293      	cmp	r3, r2
 800eb04:	d00e      	beq.n	800eb24 <HAL_TIM_Base_Start+0x84>
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	4a20      	ldr	r2, [pc, #128]	@ (800eb8c <HAL_TIM_Base_Start+0xec>)
 800eb0c:	4293      	cmp	r3, r2
 800eb0e:	d009      	beq.n	800eb24 <HAL_TIM_Base_Start+0x84>
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	4a1e      	ldr	r2, [pc, #120]	@ (800eb90 <HAL_TIM_Base_Start+0xf0>)
 800eb16:	4293      	cmp	r3, r2
 800eb18:	d004      	beq.n	800eb24 <HAL_TIM_Base_Start+0x84>
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	4a1d      	ldr	r2, [pc, #116]	@ (800eb94 <HAL_TIM_Base_Start+0xf4>)
 800eb20:	4293      	cmp	r3, r2
 800eb22:	d115      	bne.n	800eb50 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	689a      	ldr	r2, [r3, #8]
 800eb2a:	4b1b      	ldr	r3, [pc, #108]	@ (800eb98 <HAL_TIM_Base_Start+0xf8>)
 800eb2c:	4013      	ands	r3, r2
 800eb2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	2b06      	cmp	r3, #6
 800eb34:	d015      	beq.n	800eb62 <HAL_TIM_Base_Start+0xc2>
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800eb3c:	d011      	beq.n	800eb62 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	681a      	ldr	r2, [r3, #0]
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	f042 0201 	orr.w	r2, r2, #1
 800eb4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb4e:	e008      	b.n	800eb62 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	681a      	ldr	r2, [r3, #0]
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	f042 0201 	orr.w	r2, r2, #1
 800eb5e:	601a      	str	r2, [r3, #0]
 800eb60:	e000      	b.n	800eb64 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800eb64:	2300      	movs	r3, #0
}
 800eb66:	4618      	mov	r0, r3
 800eb68:	3714      	adds	r7, #20
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb70:	4770      	bx	lr
 800eb72:	bf00      	nop
 800eb74:	40010000 	.word	0x40010000
 800eb78:	40000400 	.word	0x40000400
 800eb7c:	40000800 	.word	0x40000800
 800eb80:	40000c00 	.word	0x40000c00
 800eb84:	40010400 	.word	0x40010400
 800eb88:	40001800 	.word	0x40001800
 800eb8c:	40014000 	.word	0x40014000
 800eb90:	4000e000 	.word	0x4000e000
 800eb94:	4000e400 	.word	0x4000e400
 800eb98:	00010007 	.word	0x00010007

0800eb9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b082      	sub	sp, #8
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d101      	bne.n	800ebae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ebaa:	2301      	movs	r3, #1
 800ebac:	e049      	b.n	800ec42 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ebb4:	b2db      	uxtb	r3, r3
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d106      	bne.n	800ebc8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ebc2:	6878      	ldr	r0, [r7, #4]
 800ebc4:	f7f5 fd4c 	bl	8004660 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	2202      	movs	r2, #2
 800ebcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681a      	ldr	r2, [r3, #0]
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	3304      	adds	r3, #4
 800ebd8:	4619      	mov	r1, r3
 800ebda:	4610      	mov	r0, r2
 800ebdc:	f000 fce8 	bl	800f5b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	2201      	movs	r2, #1
 800ebe4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2201      	movs	r2, #1
 800ebec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	2201      	movs	r2, #1
 800ebf4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2201      	movs	r2, #1
 800ebfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	2201      	movs	r2, #1
 800ec04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	2201      	movs	r2, #1
 800ec0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	2201      	movs	r2, #1
 800ec14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2201      	movs	r2, #1
 800ec1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	2201      	movs	r2, #1
 800ec24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2201      	movs	r2, #1
 800ec2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	2201      	movs	r2, #1
 800ec34:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	2201      	movs	r2, #1
 800ec3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ec40:	2300      	movs	r3, #0
}
 800ec42:	4618      	mov	r0, r3
 800ec44:	3708      	adds	r7, #8
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}
	...

0800ec4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b084      	sub	sp, #16
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
 800ec54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d109      	bne.n	800ec70 <HAL_TIM_PWM_Start+0x24>
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ec62:	b2db      	uxtb	r3, r3
 800ec64:	2b01      	cmp	r3, #1
 800ec66:	bf14      	ite	ne
 800ec68:	2301      	movne	r3, #1
 800ec6a:	2300      	moveq	r3, #0
 800ec6c:	b2db      	uxtb	r3, r3
 800ec6e:	e03c      	b.n	800ecea <HAL_TIM_PWM_Start+0x9e>
 800ec70:	683b      	ldr	r3, [r7, #0]
 800ec72:	2b04      	cmp	r3, #4
 800ec74:	d109      	bne.n	800ec8a <HAL_TIM_PWM_Start+0x3e>
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ec7c:	b2db      	uxtb	r3, r3
 800ec7e:	2b01      	cmp	r3, #1
 800ec80:	bf14      	ite	ne
 800ec82:	2301      	movne	r3, #1
 800ec84:	2300      	moveq	r3, #0
 800ec86:	b2db      	uxtb	r3, r3
 800ec88:	e02f      	b.n	800ecea <HAL_TIM_PWM_Start+0x9e>
 800ec8a:	683b      	ldr	r3, [r7, #0]
 800ec8c:	2b08      	cmp	r3, #8
 800ec8e:	d109      	bne.n	800eca4 <HAL_TIM_PWM_Start+0x58>
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ec96:	b2db      	uxtb	r3, r3
 800ec98:	2b01      	cmp	r3, #1
 800ec9a:	bf14      	ite	ne
 800ec9c:	2301      	movne	r3, #1
 800ec9e:	2300      	moveq	r3, #0
 800eca0:	b2db      	uxtb	r3, r3
 800eca2:	e022      	b.n	800ecea <HAL_TIM_PWM_Start+0x9e>
 800eca4:	683b      	ldr	r3, [r7, #0]
 800eca6:	2b0c      	cmp	r3, #12
 800eca8:	d109      	bne.n	800ecbe <HAL_TIM_PWM_Start+0x72>
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ecb0:	b2db      	uxtb	r3, r3
 800ecb2:	2b01      	cmp	r3, #1
 800ecb4:	bf14      	ite	ne
 800ecb6:	2301      	movne	r3, #1
 800ecb8:	2300      	moveq	r3, #0
 800ecba:	b2db      	uxtb	r3, r3
 800ecbc:	e015      	b.n	800ecea <HAL_TIM_PWM_Start+0x9e>
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	2b10      	cmp	r3, #16
 800ecc2:	d109      	bne.n	800ecd8 <HAL_TIM_PWM_Start+0x8c>
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ecca:	b2db      	uxtb	r3, r3
 800eccc:	2b01      	cmp	r3, #1
 800ecce:	bf14      	ite	ne
 800ecd0:	2301      	movne	r3, #1
 800ecd2:	2300      	moveq	r3, #0
 800ecd4:	b2db      	uxtb	r3, r3
 800ecd6:	e008      	b.n	800ecea <HAL_TIM_PWM_Start+0x9e>
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ecde:	b2db      	uxtb	r3, r3
 800ece0:	2b01      	cmp	r3, #1
 800ece2:	bf14      	ite	ne
 800ece4:	2301      	movne	r3, #1
 800ece6:	2300      	moveq	r3, #0
 800ece8:	b2db      	uxtb	r3, r3
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d001      	beq.n	800ecf2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800ecee:	2301      	movs	r3, #1
 800ecf0:	e0ab      	b.n	800ee4a <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ecf2:	683b      	ldr	r3, [r7, #0]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d104      	bne.n	800ed02 <HAL_TIM_PWM_Start+0xb6>
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	2202      	movs	r2, #2
 800ecfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ed00:	e023      	b.n	800ed4a <HAL_TIM_PWM_Start+0xfe>
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	2b04      	cmp	r3, #4
 800ed06:	d104      	bne.n	800ed12 <HAL_TIM_PWM_Start+0xc6>
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2202      	movs	r2, #2
 800ed0c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ed10:	e01b      	b.n	800ed4a <HAL_TIM_PWM_Start+0xfe>
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	2b08      	cmp	r3, #8
 800ed16:	d104      	bne.n	800ed22 <HAL_TIM_PWM_Start+0xd6>
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	2202      	movs	r2, #2
 800ed1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ed20:	e013      	b.n	800ed4a <HAL_TIM_PWM_Start+0xfe>
 800ed22:	683b      	ldr	r3, [r7, #0]
 800ed24:	2b0c      	cmp	r3, #12
 800ed26:	d104      	bne.n	800ed32 <HAL_TIM_PWM_Start+0xe6>
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2202      	movs	r2, #2
 800ed2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ed30:	e00b      	b.n	800ed4a <HAL_TIM_PWM_Start+0xfe>
 800ed32:	683b      	ldr	r3, [r7, #0]
 800ed34:	2b10      	cmp	r3, #16
 800ed36:	d104      	bne.n	800ed42 <HAL_TIM_PWM_Start+0xf6>
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	2202      	movs	r2, #2
 800ed3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ed40:	e003      	b.n	800ed4a <HAL_TIM_PWM_Start+0xfe>
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	2202      	movs	r2, #2
 800ed46:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	2201      	movs	r2, #1
 800ed50:	6839      	ldr	r1, [r7, #0]
 800ed52:	4618      	mov	r0, r3
 800ed54:	f001 f97c 	bl	8010050 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	4a3d      	ldr	r2, [pc, #244]	@ (800ee54 <HAL_TIM_PWM_Start+0x208>)
 800ed5e:	4293      	cmp	r3, r2
 800ed60:	d013      	beq.n	800ed8a <HAL_TIM_PWM_Start+0x13e>
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	4a3c      	ldr	r2, [pc, #240]	@ (800ee58 <HAL_TIM_PWM_Start+0x20c>)
 800ed68:	4293      	cmp	r3, r2
 800ed6a:	d00e      	beq.n	800ed8a <HAL_TIM_PWM_Start+0x13e>
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	4a3a      	ldr	r2, [pc, #232]	@ (800ee5c <HAL_TIM_PWM_Start+0x210>)
 800ed72:	4293      	cmp	r3, r2
 800ed74:	d009      	beq.n	800ed8a <HAL_TIM_PWM_Start+0x13e>
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	4a39      	ldr	r2, [pc, #228]	@ (800ee60 <HAL_TIM_PWM_Start+0x214>)
 800ed7c:	4293      	cmp	r3, r2
 800ed7e:	d004      	beq.n	800ed8a <HAL_TIM_PWM_Start+0x13e>
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	4a37      	ldr	r2, [pc, #220]	@ (800ee64 <HAL_TIM_PWM_Start+0x218>)
 800ed86:	4293      	cmp	r3, r2
 800ed88:	d101      	bne.n	800ed8e <HAL_TIM_PWM_Start+0x142>
 800ed8a:	2301      	movs	r3, #1
 800ed8c:	e000      	b.n	800ed90 <HAL_TIM_PWM_Start+0x144>
 800ed8e:	2300      	movs	r3, #0
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d007      	beq.n	800eda4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800eda2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	4a2a      	ldr	r2, [pc, #168]	@ (800ee54 <HAL_TIM_PWM_Start+0x208>)
 800edaa:	4293      	cmp	r3, r2
 800edac:	d02c      	beq.n	800ee08 <HAL_TIM_PWM_Start+0x1bc>
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800edb6:	d027      	beq.n	800ee08 <HAL_TIM_PWM_Start+0x1bc>
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	4a2a      	ldr	r2, [pc, #168]	@ (800ee68 <HAL_TIM_PWM_Start+0x21c>)
 800edbe:	4293      	cmp	r3, r2
 800edc0:	d022      	beq.n	800ee08 <HAL_TIM_PWM_Start+0x1bc>
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	4a29      	ldr	r2, [pc, #164]	@ (800ee6c <HAL_TIM_PWM_Start+0x220>)
 800edc8:	4293      	cmp	r3, r2
 800edca:	d01d      	beq.n	800ee08 <HAL_TIM_PWM_Start+0x1bc>
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	4a27      	ldr	r2, [pc, #156]	@ (800ee70 <HAL_TIM_PWM_Start+0x224>)
 800edd2:	4293      	cmp	r3, r2
 800edd4:	d018      	beq.n	800ee08 <HAL_TIM_PWM_Start+0x1bc>
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	4a1f      	ldr	r2, [pc, #124]	@ (800ee58 <HAL_TIM_PWM_Start+0x20c>)
 800eddc:	4293      	cmp	r3, r2
 800edde:	d013      	beq.n	800ee08 <HAL_TIM_PWM_Start+0x1bc>
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	4a23      	ldr	r2, [pc, #140]	@ (800ee74 <HAL_TIM_PWM_Start+0x228>)
 800ede6:	4293      	cmp	r3, r2
 800ede8:	d00e      	beq.n	800ee08 <HAL_TIM_PWM_Start+0x1bc>
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	4a1b      	ldr	r2, [pc, #108]	@ (800ee5c <HAL_TIM_PWM_Start+0x210>)
 800edf0:	4293      	cmp	r3, r2
 800edf2:	d009      	beq.n	800ee08 <HAL_TIM_PWM_Start+0x1bc>
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	4a1f      	ldr	r2, [pc, #124]	@ (800ee78 <HAL_TIM_PWM_Start+0x22c>)
 800edfa:	4293      	cmp	r3, r2
 800edfc:	d004      	beq.n	800ee08 <HAL_TIM_PWM_Start+0x1bc>
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	4a1e      	ldr	r2, [pc, #120]	@ (800ee7c <HAL_TIM_PWM_Start+0x230>)
 800ee04:	4293      	cmp	r3, r2
 800ee06:	d115      	bne.n	800ee34 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	689a      	ldr	r2, [r3, #8]
 800ee0e:	4b1c      	ldr	r3, [pc, #112]	@ (800ee80 <HAL_TIM_PWM_Start+0x234>)
 800ee10:	4013      	ands	r3, r2
 800ee12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	2b06      	cmp	r3, #6
 800ee18:	d015      	beq.n	800ee46 <HAL_TIM_PWM_Start+0x1fa>
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ee20:	d011      	beq.n	800ee46 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	681a      	ldr	r2, [r3, #0]
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	f042 0201 	orr.w	r2, r2, #1
 800ee30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ee32:	e008      	b.n	800ee46 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	681a      	ldr	r2, [r3, #0]
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	f042 0201 	orr.w	r2, r2, #1
 800ee42:	601a      	str	r2, [r3, #0]
 800ee44:	e000      	b.n	800ee48 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ee46:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ee48:	2300      	movs	r3, #0
}
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	3710      	adds	r7, #16
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd80      	pop	{r7, pc}
 800ee52:	bf00      	nop
 800ee54:	40010000 	.word	0x40010000
 800ee58:	40010400 	.word	0x40010400
 800ee5c:	40014000 	.word	0x40014000
 800ee60:	40014400 	.word	0x40014400
 800ee64:	40014800 	.word	0x40014800
 800ee68:	40000400 	.word	0x40000400
 800ee6c:	40000800 	.word	0x40000800
 800ee70:	40000c00 	.word	0x40000c00
 800ee74:	40001800 	.word	0x40001800
 800ee78:	4000e000 	.word	0x4000e000
 800ee7c:	4000e400 	.word	0x4000e400
 800ee80:	00010007 	.word	0x00010007

0800ee84 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b082      	sub	sp, #8
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
 800ee8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	2200      	movs	r2, #0
 800ee94:	6839      	ldr	r1, [r7, #0]
 800ee96:	4618      	mov	r0, r3
 800ee98:	f001 f8da 	bl	8010050 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	4a3e      	ldr	r2, [pc, #248]	@ (800ef9c <HAL_TIM_PWM_Stop+0x118>)
 800eea2:	4293      	cmp	r3, r2
 800eea4:	d013      	beq.n	800eece <HAL_TIM_PWM_Stop+0x4a>
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	4a3d      	ldr	r2, [pc, #244]	@ (800efa0 <HAL_TIM_PWM_Stop+0x11c>)
 800eeac:	4293      	cmp	r3, r2
 800eeae:	d00e      	beq.n	800eece <HAL_TIM_PWM_Stop+0x4a>
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	4a3b      	ldr	r2, [pc, #236]	@ (800efa4 <HAL_TIM_PWM_Stop+0x120>)
 800eeb6:	4293      	cmp	r3, r2
 800eeb8:	d009      	beq.n	800eece <HAL_TIM_PWM_Stop+0x4a>
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	4a3a      	ldr	r2, [pc, #232]	@ (800efa8 <HAL_TIM_PWM_Stop+0x124>)
 800eec0:	4293      	cmp	r3, r2
 800eec2:	d004      	beq.n	800eece <HAL_TIM_PWM_Stop+0x4a>
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	4a38      	ldr	r2, [pc, #224]	@ (800efac <HAL_TIM_PWM_Stop+0x128>)
 800eeca:	4293      	cmp	r3, r2
 800eecc:	d101      	bne.n	800eed2 <HAL_TIM_PWM_Stop+0x4e>
 800eece:	2301      	movs	r3, #1
 800eed0:	e000      	b.n	800eed4 <HAL_TIM_PWM_Stop+0x50>
 800eed2:	2300      	movs	r3, #0
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d017      	beq.n	800ef08 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	6a1a      	ldr	r2, [r3, #32]
 800eede:	f241 1311 	movw	r3, #4369	@ 0x1111
 800eee2:	4013      	ands	r3, r2
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d10f      	bne.n	800ef08 <HAL_TIM_PWM_Stop+0x84>
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	6a1a      	ldr	r2, [r3, #32]
 800eeee:	f240 4344 	movw	r3, #1092	@ 0x444
 800eef2:	4013      	ands	r3, r2
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d107      	bne.n	800ef08 <HAL_TIM_PWM_Stop+0x84>
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800ef06:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	6a1a      	ldr	r2, [r3, #32]
 800ef0e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ef12:	4013      	ands	r3, r2
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d10f      	bne.n	800ef38 <HAL_TIM_PWM_Stop+0xb4>
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	6a1a      	ldr	r2, [r3, #32]
 800ef1e:	f240 4344 	movw	r3, #1092	@ 0x444
 800ef22:	4013      	ands	r3, r2
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d107      	bne.n	800ef38 <HAL_TIM_PWM_Stop+0xb4>
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	681a      	ldr	r2, [r3, #0]
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	f022 0201 	bic.w	r2, r2, #1
 800ef36:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ef38:	683b      	ldr	r3, [r7, #0]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d104      	bne.n	800ef48 <HAL_TIM_PWM_Stop+0xc4>
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	2201      	movs	r2, #1
 800ef42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ef46:	e023      	b.n	800ef90 <HAL_TIM_PWM_Stop+0x10c>
 800ef48:	683b      	ldr	r3, [r7, #0]
 800ef4a:	2b04      	cmp	r3, #4
 800ef4c:	d104      	bne.n	800ef58 <HAL_TIM_PWM_Stop+0xd4>
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	2201      	movs	r2, #1
 800ef52:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ef56:	e01b      	b.n	800ef90 <HAL_TIM_PWM_Stop+0x10c>
 800ef58:	683b      	ldr	r3, [r7, #0]
 800ef5a:	2b08      	cmp	r3, #8
 800ef5c:	d104      	bne.n	800ef68 <HAL_TIM_PWM_Stop+0xe4>
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	2201      	movs	r2, #1
 800ef62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ef66:	e013      	b.n	800ef90 <HAL_TIM_PWM_Stop+0x10c>
 800ef68:	683b      	ldr	r3, [r7, #0]
 800ef6a:	2b0c      	cmp	r3, #12
 800ef6c:	d104      	bne.n	800ef78 <HAL_TIM_PWM_Stop+0xf4>
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	2201      	movs	r2, #1
 800ef72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ef76:	e00b      	b.n	800ef90 <HAL_TIM_PWM_Stop+0x10c>
 800ef78:	683b      	ldr	r3, [r7, #0]
 800ef7a:	2b10      	cmp	r3, #16
 800ef7c:	d104      	bne.n	800ef88 <HAL_TIM_PWM_Stop+0x104>
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	2201      	movs	r2, #1
 800ef82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ef86:	e003      	b.n	800ef90 <HAL_TIM_PWM_Stop+0x10c>
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	2201      	movs	r2, #1
 800ef8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800ef90:	2300      	movs	r3, #0
}
 800ef92:	4618      	mov	r0, r3
 800ef94:	3708      	adds	r7, #8
 800ef96:	46bd      	mov	sp, r7
 800ef98:	bd80      	pop	{r7, pc}
 800ef9a:	bf00      	nop
 800ef9c:	40010000 	.word	0x40010000
 800efa0:	40010400 	.word	0x40010400
 800efa4:	40014000 	.word	0x40014000
 800efa8:	40014400 	.word	0x40014400
 800efac:	40014800 	.word	0x40014800

0800efb0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b082      	sub	sp, #8
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d101      	bne.n	800efc2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800efbe:	2301      	movs	r3, #1
 800efc0:	e049      	b.n	800f056 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800efc8:	b2db      	uxtb	r3, r3
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d106      	bne.n	800efdc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	2200      	movs	r2, #0
 800efd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800efd6:	6878      	ldr	r0, [r7, #4]
 800efd8:	f7f5 fb90 	bl	80046fc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	2202      	movs	r2, #2
 800efe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681a      	ldr	r2, [r3, #0]
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	3304      	adds	r3, #4
 800efec:	4619      	mov	r1, r3
 800efee:	4610      	mov	r0, r2
 800eff0:	f000 fade 	bl	800f5b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	2201      	movs	r2, #1
 800eff8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	2201      	movs	r2, #1
 800f000:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	2201      	movs	r2, #1
 800f008:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	2201      	movs	r2, #1
 800f010:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	2201      	movs	r2, #1
 800f018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	2201      	movs	r2, #1
 800f020:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	2201      	movs	r2, #1
 800f028:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	2201      	movs	r2, #1
 800f030:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	2201      	movs	r2, #1
 800f038:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	2201      	movs	r2, #1
 800f040:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	2201      	movs	r2, #1
 800f048:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	2201      	movs	r2, #1
 800f050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f054:	2300      	movs	r3, #0
}
 800f056:	4618      	mov	r0, r3
 800f058:	3708      	adds	r7, #8
 800f05a:	46bd      	mov	sp, r7
 800f05c:	bd80      	pop	{r7, pc}

0800f05e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800f05e:	b580      	push	{r7, lr}
 800f060:	b086      	sub	sp, #24
 800f062:	af00      	add	r7, sp, #0
 800f064:	60f8      	str	r0, [r7, #12]
 800f066:	60b9      	str	r1, [r7, #8]
 800f068:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f06a:	2300      	movs	r3, #0
 800f06c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f074:	2b01      	cmp	r3, #1
 800f076:	d101      	bne.n	800f07c <HAL_TIM_IC_ConfigChannel+0x1e>
 800f078:	2302      	movs	r3, #2
 800f07a:	e088      	b.n	800f18e <HAL_TIM_IC_ConfigChannel+0x130>
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	2201      	movs	r2, #1
 800f080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	2b00      	cmp	r3, #0
 800f088:	d11b      	bne.n	800f0c2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800f08e:	68bb      	ldr	r3, [r7, #8]
 800f090:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800f092:	68bb      	ldr	r3, [r7, #8]
 800f094:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800f096:	68bb      	ldr	r3, [r7, #8]
 800f098:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800f09a:	f000 fe05 	bl	800fca8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	699a      	ldr	r2, [r3, #24]
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	f022 020c 	bic.w	r2, r2, #12
 800f0ac:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	6999      	ldr	r1, [r3, #24]
 800f0b4:	68bb      	ldr	r3, [r7, #8]
 800f0b6:	689a      	ldr	r2, [r3, #8]
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	430a      	orrs	r2, r1
 800f0be:	619a      	str	r2, [r3, #24]
 800f0c0:	e060      	b.n	800f184 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	2b04      	cmp	r3, #4
 800f0c6:	d11c      	bne.n	800f102 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800f0cc:	68bb      	ldr	r3, [r7, #8]
 800f0ce:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800f0d0:	68bb      	ldr	r3, [r7, #8]
 800f0d2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800f0d4:	68bb      	ldr	r3, [r7, #8]
 800f0d6:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800f0d8:	f000 fe95 	bl	800fe06 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	699a      	ldr	r2, [r3, #24]
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800f0ea:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	6999      	ldr	r1, [r3, #24]
 800f0f2:	68bb      	ldr	r3, [r7, #8]
 800f0f4:	689b      	ldr	r3, [r3, #8]
 800f0f6:	021a      	lsls	r2, r3, #8
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	430a      	orrs	r2, r1
 800f0fe:	619a      	str	r2, [r3, #24]
 800f100:	e040      	b.n	800f184 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	2b08      	cmp	r3, #8
 800f106:	d11b      	bne.n	800f140 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800f10c:	68bb      	ldr	r3, [r7, #8]
 800f10e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800f110:	68bb      	ldr	r3, [r7, #8]
 800f112:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800f114:	68bb      	ldr	r3, [r7, #8]
 800f116:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800f118:	f000 fee2 	bl	800fee0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	69da      	ldr	r2, [r3, #28]
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	f022 020c 	bic.w	r2, r2, #12
 800f12a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	69d9      	ldr	r1, [r3, #28]
 800f132:	68bb      	ldr	r3, [r7, #8]
 800f134:	689a      	ldr	r2, [r3, #8]
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	681b      	ldr	r3, [r3, #0]
 800f13a:	430a      	orrs	r2, r1
 800f13c:	61da      	str	r2, [r3, #28]
 800f13e:	e021      	b.n	800f184 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	2b0c      	cmp	r3, #12
 800f144:	d11c      	bne.n	800f180 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800f14a:	68bb      	ldr	r3, [r7, #8]
 800f14c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800f14e:	68bb      	ldr	r3, [r7, #8]
 800f150:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800f152:	68bb      	ldr	r3, [r7, #8]
 800f154:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800f156:	f000 feff 	bl	800ff58 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	69da      	ldr	r2, [r3, #28]
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800f168:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	69d9      	ldr	r1, [r3, #28]
 800f170:	68bb      	ldr	r3, [r7, #8]
 800f172:	689b      	ldr	r3, [r3, #8]
 800f174:	021a      	lsls	r2, r3, #8
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	430a      	orrs	r2, r1
 800f17c:	61da      	str	r2, [r3, #28]
 800f17e:	e001      	b.n	800f184 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800f180:	2301      	movs	r3, #1
 800f182:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	2200      	movs	r2, #0
 800f188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f18c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f18e:	4618      	mov	r0, r3
 800f190:	3718      	adds	r7, #24
 800f192:	46bd      	mov	sp, r7
 800f194:	bd80      	pop	{r7, pc}
	...

0800f198 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b086      	sub	sp, #24
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	60f8      	str	r0, [r7, #12]
 800f1a0:	60b9      	str	r1, [r7, #8]
 800f1a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f1ae:	2b01      	cmp	r3, #1
 800f1b0:	d101      	bne.n	800f1b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f1b2:	2302      	movs	r3, #2
 800f1b4:	e0ff      	b.n	800f3b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	2201      	movs	r2, #1
 800f1ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	2b14      	cmp	r3, #20
 800f1c2:	f200 80f0 	bhi.w	800f3a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f1c6:	a201      	add	r2, pc, #4	@ (adr r2, 800f1cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f1c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1cc:	0800f221 	.word	0x0800f221
 800f1d0:	0800f3a7 	.word	0x0800f3a7
 800f1d4:	0800f3a7 	.word	0x0800f3a7
 800f1d8:	0800f3a7 	.word	0x0800f3a7
 800f1dc:	0800f261 	.word	0x0800f261
 800f1e0:	0800f3a7 	.word	0x0800f3a7
 800f1e4:	0800f3a7 	.word	0x0800f3a7
 800f1e8:	0800f3a7 	.word	0x0800f3a7
 800f1ec:	0800f2a3 	.word	0x0800f2a3
 800f1f0:	0800f3a7 	.word	0x0800f3a7
 800f1f4:	0800f3a7 	.word	0x0800f3a7
 800f1f8:	0800f3a7 	.word	0x0800f3a7
 800f1fc:	0800f2e3 	.word	0x0800f2e3
 800f200:	0800f3a7 	.word	0x0800f3a7
 800f204:	0800f3a7 	.word	0x0800f3a7
 800f208:	0800f3a7 	.word	0x0800f3a7
 800f20c:	0800f325 	.word	0x0800f325
 800f210:	0800f3a7 	.word	0x0800f3a7
 800f214:	0800f3a7 	.word	0x0800f3a7
 800f218:	0800f3a7 	.word	0x0800f3a7
 800f21c:	0800f365 	.word	0x0800f365
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	68b9      	ldr	r1, [r7, #8]
 800f226:	4618      	mov	r0, r3
 800f228:	f000 fa68 	bl	800f6fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	699a      	ldr	r2, [r3, #24]
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	f042 0208 	orr.w	r2, r2, #8
 800f23a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	699a      	ldr	r2, [r3, #24]
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	f022 0204 	bic.w	r2, r2, #4
 800f24a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	6999      	ldr	r1, [r3, #24]
 800f252:	68bb      	ldr	r3, [r7, #8]
 800f254:	691a      	ldr	r2, [r3, #16]
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	430a      	orrs	r2, r1
 800f25c:	619a      	str	r2, [r3, #24]
      break;
 800f25e:	e0a5      	b.n	800f3ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	68b9      	ldr	r1, [r7, #8]
 800f266:	4618      	mov	r0, r3
 800f268:	f000 fad8 	bl	800f81c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	699a      	ldr	r2, [r3, #24]
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f27a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	699a      	ldr	r2, [r3, #24]
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f28a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	6999      	ldr	r1, [r3, #24]
 800f292:	68bb      	ldr	r3, [r7, #8]
 800f294:	691b      	ldr	r3, [r3, #16]
 800f296:	021a      	lsls	r2, r3, #8
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	430a      	orrs	r2, r1
 800f29e:	619a      	str	r2, [r3, #24]
      break;
 800f2a0:	e084      	b.n	800f3ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	68b9      	ldr	r1, [r7, #8]
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	f000 fb41 	bl	800f930 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	69da      	ldr	r2, [r3, #28]
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	f042 0208 	orr.w	r2, r2, #8
 800f2bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	69da      	ldr	r2, [r3, #28]
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	f022 0204 	bic.w	r2, r2, #4
 800f2cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	69d9      	ldr	r1, [r3, #28]
 800f2d4:	68bb      	ldr	r3, [r7, #8]
 800f2d6:	691a      	ldr	r2, [r3, #16]
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	430a      	orrs	r2, r1
 800f2de:	61da      	str	r2, [r3, #28]
      break;
 800f2e0:	e064      	b.n	800f3ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	68b9      	ldr	r1, [r7, #8]
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	f000 fba9 	bl	800fa40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	69da      	ldr	r2, [r3, #28]
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f2fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	69da      	ldr	r2, [r3, #28]
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f30c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	69d9      	ldr	r1, [r3, #28]
 800f314:	68bb      	ldr	r3, [r7, #8]
 800f316:	691b      	ldr	r3, [r3, #16]
 800f318:	021a      	lsls	r2, r3, #8
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	430a      	orrs	r2, r1
 800f320:	61da      	str	r2, [r3, #28]
      break;
 800f322:	e043      	b.n	800f3ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	68b9      	ldr	r1, [r7, #8]
 800f32a:	4618      	mov	r0, r3
 800f32c:	f000 fbf2 	bl	800fb14 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	f042 0208 	orr.w	r2, r2, #8
 800f33e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	f022 0204 	bic.w	r2, r2, #4
 800f34e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800f356:	68bb      	ldr	r3, [r7, #8]
 800f358:	691a      	ldr	r2, [r3, #16]
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	430a      	orrs	r2, r1
 800f360:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800f362:	e023      	b.n	800f3ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	68b9      	ldr	r1, [r7, #8]
 800f36a:	4618      	mov	r0, r3
 800f36c:	f000 fc36 	bl	800fbdc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f37e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f38e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800f396:	68bb      	ldr	r3, [r7, #8]
 800f398:	691b      	ldr	r3, [r3, #16]
 800f39a:	021a      	lsls	r2, r3, #8
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	430a      	orrs	r2, r1
 800f3a2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800f3a4:	e002      	b.n	800f3ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f3a6:	2301      	movs	r3, #1
 800f3a8:	75fb      	strb	r3, [r7, #23]
      break;
 800f3aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f3b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	3718      	adds	r7, #24
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	bd80      	pop	{r7, pc}
 800f3be:	bf00      	nop

0800f3c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	b084      	sub	sp, #16
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	6078      	str	r0, [r7, #4]
 800f3c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f3d4:	2b01      	cmp	r3, #1
 800f3d6:	d101      	bne.n	800f3dc <HAL_TIM_ConfigClockSource+0x1c>
 800f3d8:	2302      	movs	r3, #2
 800f3da:	e0dc      	b.n	800f596 <HAL_TIM_ConfigClockSource+0x1d6>
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	2201      	movs	r2, #1
 800f3e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	2202      	movs	r2, #2
 800f3e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	689b      	ldr	r3, [r3, #8]
 800f3f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f3f4:	68ba      	ldr	r2, [r7, #8]
 800f3f6:	4b6a      	ldr	r3, [pc, #424]	@ (800f5a0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800f3f8:	4013      	ands	r3, r2
 800f3fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f3fc:	68bb      	ldr	r3, [r7, #8]
 800f3fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f402:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	68ba      	ldr	r2, [r7, #8]
 800f40a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f40c:	683b      	ldr	r3, [r7, #0]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	4a64      	ldr	r2, [pc, #400]	@ (800f5a4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f412:	4293      	cmp	r3, r2
 800f414:	f000 80a9 	beq.w	800f56a <HAL_TIM_ConfigClockSource+0x1aa>
 800f418:	4a62      	ldr	r2, [pc, #392]	@ (800f5a4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f41a:	4293      	cmp	r3, r2
 800f41c:	f200 80ae 	bhi.w	800f57c <HAL_TIM_ConfigClockSource+0x1bc>
 800f420:	4a61      	ldr	r2, [pc, #388]	@ (800f5a8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f422:	4293      	cmp	r3, r2
 800f424:	f000 80a1 	beq.w	800f56a <HAL_TIM_ConfigClockSource+0x1aa>
 800f428:	4a5f      	ldr	r2, [pc, #380]	@ (800f5a8 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f42a:	4293      	cmp	r3, r2
 800f42c:	f200 80a6 	bhi.w	800f57c <HAL_TIM_ConfigClockSource+0x1bc>
 800f430:	4a5e      	ldr	r2, [pc, #376]	@ (800f5ac <HAL_TIM_ConfigClockSource+0x1ec>)
 800f432:	4293      	cmp	r3, r2
 800f434:	f000 8099 	beq.w	800f56a <HAL_TIM_ConfigClockSource+0x1aa>
 800f438:	4a5c      	ldr	r2, [pc, #368]	@ (800f5ac <HAL_TIM_ConfigClockSource+0x1ec>)
 800f43a:	4293      	cmp	r3, r2
 800f43c:	f200 809e 	bhi.w	800f57c <HAL_TIM_ConfigClockSource+0x1bc>
 800f440:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800f444:	f000 8091 	beq.w	800f56a <HAL_TIM_ConfigClockSource+0x1aa>
 800f448:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800f44c:	f200 8096 	bhi.w	800f57c <HAL_TIM_ConfigClockSource+0x1bc>
 800f450:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f454:	f000 8089 	beq.w	800f56a <HAL_TIM_ConfigClockSource+0x1aa>
 800f458:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f45c:	f200 808e 	bhi.w	800f57c <HAL_TIM_ConfigClockSource+0x1bc>
 800f460:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f464:	d03e      	beq.n	800f4e4 <HAL_TIM_ConfigClockSource+0x124>
 800f466:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f46a:	f200 8087 	bhi.w	800f57c <HAL_TIM_ConfigClockSource+0x1bc>
 800f46e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f472:	f000 8086 	beq.w	800f582 <HAL_TIM_ConfigClockSource+0x1c2>
 800f476:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f47a:	d87f      	bhi.n	800f57c <HAL_TIM_ConfigClockSource+0x1bc>
 800f47c:	2b70      	cmp	r3, #112	@ 0x70
 800f47e:	d01a      	beq.n	800f4b6 <HAL_TIM_ConfigClockSource+0xf6>
 800f480:	2b70      	cmp	r3, #112	@ 0x70
 800f482:	d87b      	bhi.n	800f57c <HAL_TIM_ConfigClockSource+0x1bc>
 800f484:	2b60      	cmp	r3, #96	@ 0x60
 800f486:	d050      	beq.n	800f52a <HAL_TIM_ConfigClockSource+0x16a>
 800f488:	2b60      	cmp	r3, #96	@ 0x60
 800f48a:	d877      	bhi.n	800f57c <HAL_TIM_ConfigClockSource+0x1bc>
 800f48c:	2b50      	cmp	r3, #80	@ 0x50
 800f48e:	d03c      	beq.n	800f50a <HAL_TIM_ConfigClockSource+0x14a>
 800f490:	2b50      	cmp	r3, #80	@ 0x50
 800f492:	d873      	bhi.n	800f57c <HAL_TIM_ConfigClockSource+0x1bc>
 800f494:	2b40      	cmp	r3, #64	@ 0x40
 800f496:	d058      	beq.n	800f54a <HAL_TIM_ConfigClockSource+0x18a>
 800f498:	2b40      	cmp	r3, #64	@ 0x40
 800f49a:	d86f      	bhi.n	800f57c <HAL_TIM_ConfigClockSource+0x1bc>
 800f49c:	2b30      	cmp	r3, #48	@ 0x30
 800f49e:	d064      	beq.n	800f56a <HAL_TIM_ConfigClockSource+0x1aa>
 800f4a0:	2b30      	cmp	r3, #48	@ 0x30
 800f4a2:	d86b      	bhi.n	800f57c <HAL_TIM_ConfigClockSource+0x1bc>
 800f4a4:	2b20      	cmp	r3, #32
 800f4a6:	d060      	beq.n	800f56a <HAL_TIM_ConfigClockSource+0x1aa>
 800f4a8:	2b20      	cmp	r3, #32
 800f4aa:	d867      	bhi.n	800f57c <HAL_TIM_ConfigClockSource+0x1bc>
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d05c      	beq.n	800f56a <HAL_TIM_ConfigClockSource+0x1aa>
 800f4b0:	2b10      	cmp	r3, #16
 800f4b2:	d05a      	beq.n	800f56a <HAL_TIM_ConfigClockSource+0x1aa>
 800f4b4:	e062      	b.n	800f57c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f4ba:	683b      	ldr	r3, [r7, #0]
 800f4bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f4be:	683b      	ldr	r3, [r7, #0]
 800f4c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f4c2:	683b      	ldr	r3, [r7, #0]
 800f4c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f4c6:	f000 fda3 	bl	8010010 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	689b      	ldr	r3, [r3, #8]
 800f4d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f4d2:	68bb      	ldr	r3, [r7, #8]
 800f4d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800f4d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	68ba      	ldr	r2, [r7, #8]
 800f4e0:	609a      	str	r2, [r3, #8]
      break;
 800f4e2:	e04f      	b.n	800f584 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f4ec:	683b      	ldr	r3, [r7, #0]
 800f4ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f4f0:	683b      	ldr	r3, [r7, #0]
 800f4f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f4f4:	f000 fd8c 	bl	8010010 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	689a      	ldr	r2, [r3, #8]
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f506:	609a      	str	r2, [r3, #8]
      break;
 800f508:	e03c      	b.n	800f584 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f50e:	683b      	ldr	r3, [r7, #0]
 800f510:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f512:	683b      	ldr	r3, [r7, #0]
 800f514:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f516:	461a      	mov	r2, r3
 800f518:	f000 fc46 	bl	800fda8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	2150      	movs	r1, #80	@ 0x50
 800f522:	4618      	mov	r0, r3
 800f524:	f000 fd56 	bl	800ffd4 <TIM_ITRx_SetConfig>
      break;
 800f528:	e02c      	b.n	800f584 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f52e:	683b      	ldr	r3, [r7, #0]
 800f530:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f532:	683b      	ldr	r3, [r7, #0]
 800f534:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f536:	461a      	mov	r2, r3
 800f538:	f000 fca2 	bl	800fe80 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	2160      	movs	r1, #96	@ 0x60
 800f542:	4618      	mov	r0, r3
 800f544:	f000 fd46 	bl	800ffd4 <TIM_ITRx_SetConfig>
      break;
 800f548:	e01c      	b.n	800f584 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f54e:	683b      	ldr	r3, [r7, #0]
 800f550:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f552:	683b      	ldr	r3, [r7, #0]
 800f554:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f556:	461a      	mov	r2, r3
 800f558:	f000 fc26 	bl	800fda8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	2140      	movs	r1, #64	@ 0x40
 800f562:	4618      	mov	r0, r3
 800f564:	f000 fd36 	bl	800ffd4 <TIM_ITRx_SetConfig>
      break;
 800f568:	e00c      	b.n	800f584 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	681a      	ldr	r2, [r3, #0]
 800f56e:	683b      	ldr	r3, [r7, #0]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	4619      	mov	r1, r3
 800f574:	4610      	mov	r0, r2
 800f576:	f000 fd2d 	bl	800ffd4 <TIM_ITRx_SetConfig>
      break;
 800f57a:	e003      	b.n	800f584 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800f57c:	2301      	movs	r3, #1
 800f57e:	73fb      	strb	r3, [r7, #15]
      break;
 800f580:	e000      	b.n	800f584 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800f582:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	2201      	movs	r2, #1
 800f588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	2200      	movs	r2, #0
 800f590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f594:	7bfb      	ldrb	r3, [r7, #15]
}
 800f596:	4618      	mov	r0, r3
 800f598:	3710      	adds	r7, #16
 800f59a:	46bd      	mov	sp, r7
 800f59c:	bd80      	pop	{r7, pc}
 800f59e:	bf00      	nop
 800f5a0:	ffceff88 	.word	0xffceff88
 800f5a4:	00100040 	.word	0x00100040
 800f5a8:	00100030 	.word	0x00100030
 800f5ac:	00100020 	.word	0x00100020

0800f5b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f5b0:	b480      	push	{r7}
 800f5b2:	b085      	sub	sp, #20
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]
 800f5b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	4a44      	ldr	r2, [pc, #272]	@ (800f6d4 <TIM_Base_SetConfig+0x124>)
 800f5c4:	4293      	cmp	r3, r2
 800f5c6:	d013      	beq.n	800f5f0 <TIM_Base_SetConfig+0x40>
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f5ce:	d00f      	beq.n	800f5f0 <TIM_Base_SetConfig+0x40>
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	4a41      	ldr	r2, [pc, #260]	@ (800f6d8 <TIM_Base_SetConfig+0x128>)
 800f5d4:	4293      	cmp	r3, r2
 800f5d6:	d00b      	beq.n	800f5f0 <TIM_Base_SetConfig+0x40>
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	4a40      	ldr	r2, [pc, #256]	@ (800f6dc <TIM_Base_SetConfig+0x12c>)
 800f5dc:	4293      	cmp	r3, r2
 800f5de:	d007      	beq.n	800f5f0 <TIM_Base_SetConfig+0x40>
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	4a3f      	ldr	r2, [pc, #252]	@ (800f6e0 <TIM_Base_SetConfig+0x130>)
 800f5e4:	4293      	cmp	r3, r2
 800f5e6:	d003      	beq.n	800f5f0 <TIM_Base_SetConfig+0x40>
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	4a3e      	ldr	r2, [pc, #248]	@ (800f6e4 <TIM_Base_SetConfig+0x134>)
 800f5ec:	4293      	cmp	r3, r2
 800f5ee:	d108      	bne.n	800f602 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f5f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f5f8:	683b      	ldr	r3, [r7, #0]
 800f5fa:	685b      	ldr	r3, [r3, #4]
 800f5fc:	68fa      	ldr	r2, [r7, #12]
 800f5fe:	4313      	orrs	r3, r2
 800f600:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	4a33      	ldr	r2, [pc, #204]	@ (800f6d4 <TIM_Base_SetConfig+0x124>)
 800f606:	4293      	cmp	r3, r2
 800f608:	d027      	beq.n	800f65a <TIM_Base_SetConfig+0xaa>
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f610:	d023      	beq.n	800f65a <TIM_Base_SetConfig+0xaa>
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	4a30      	ldr	r2, [pc, #192]	@ (800f6d8 <TIM_Base_SetConfig+0x128>)
 800f616:	4293      	cmp	r3, r2
 800f618:	d01f      	beq.n	800f65a <TIM_Base_SetConfig+0xaa>
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	4a2f      	ldr	r2, [pc, #188]	@ (800f6dc <TIM_Base_SetConfig+0x12c>)
 800f61e:	4293      	cmp	r3, r2
 800f620:	d01b      	beq.n	800f65a <TIM_Base_SetConfig+0xaa>
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	4a2e      	ldr	r2, [pc, #184]	@ (800f6e0 <TIM_Base_SetConfig+0x130>)
 800f626:	4293      	cmp	r3, r2
 800f628:	d017      	beq.n	800f65a <TIM_Base_SetConfig+0xaa>
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	4a2d      	ldr	r2, [pc, #180]	@ (800f6e4 <TIM_Base_SetConfig+0x134>)
 800f62e:	4293      	cmp	r3, r2
 800f630:	d013      	beq.n	800f65a <TIM_Base_SetConfig+0xaa>
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	4a2c      	ldr	r2, [pc, #176]	@ (800f6e8 <TIM_Base_SetConfig+0x138>)
 800f636:	4293      	cmp	r3, r2
 800f638:	d00f      	beq.n	800f65a <TIM_Base_SetConfig+0xaa>
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	4a2b      	ldr	r2, [pc, #172]	@ (800f6ec <TIM_Base_SetConfig+0x13c>)
 800f63e:	4293      	cmp	r3, r2
 800f640:	d00b      	beq.n	800f65a <TIM_Base_SetConfig+0xaa>
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	4a2a      	ldr	r2, [pc, #168]	@ (800f6f0 <TIM_Base_SetConfig+0x140>)
 800f646:	4293      	cmp	r3, r2
 800f648:	d007      	beq.n	800f65a <TIM_Base_SetConfig+0xaa>
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	4a29      	ldr	r2, [pc, #164]	@ (800f6f4 <TIM_Base_SetConfig+0x144>)
 800f64e:	4293      	cmp	r3, r2
 800f650:	d003      	beq.n	800f65a <TIM_Base_SetConfig+0xaa>
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	4a28      	ldr	r2, [pc, #160]	@ (800f6f8 <TIM_Base_SetConfig+0x148>)
 800f656:	4293      	cmp	r3, r2
 800f658:	d108      	bne.n	800f66c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f660:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f662:	683b      	ldr	r3, [r7, #0]
 800f664:	68db      	ldr	r3, [r3, #12]
 800f666:	68fa      	ldr	r2, [r7, #12]
 800f668:	4313      	orrs	r3, r2
 800f66a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f672:	683b      	ldr	r3, [r7, #0]
 800f674:	695b      	ldr	r3, [r3, #20]
 800f676:	4313      	orrs	r3, r2
 800f678:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	68fa      	ldr	r2, [r7, #12]
 800f67e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f680:	683b      	ldr	r3, [r7, #0]
 800f682:	689a      	ldr	r2, [r3, #8]
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f688:	683b      	ldr	r3, [r7, #0]
 800f68a:	681a      	ldr	r2, [r3, #0]
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	4a10      	ldr	r2, [pc, #64]	@ (800f6d4 <TIM_Base_SetConfig+0x124>)
 800f694:	4293      	cmp	r3, r2
 800f696:	d00f      	beq.n	800f6b8 <TIM_Base_SetConfig+0x108>
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	4a12      	ldr	r2, [pc, #72]	@ (800f6e4 <TIM_Base_SetConfig+0x134>)
 800f69c:	4293      	cmp	r3, r2
 800f69e:	d00b      	beq.n	800f6b8 <TIM_Base_SetConfig+0x108>
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	4a11      	ldr	r2, [pc, #68]	@ (800f6e8 <TIM_Base_SetConfig+0x138>)
 800f6a4:	4293      	cmp	r3, r2
 800f6a6:	d007      	beq.n	800f6b8 <TIM_Base_SetConfig+0x108>
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	4a10      	ldr	r2, [pc, #64]	@ (800f6ec <TIM_Base_SetConfig+0x13c>)
 800f6ac:	4293      	cmp	r3, r2
 800f6ae:	d003      	beq.n	800f6b8 <TIM_Base_SetConfig+0x108>
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	4a0f      	ldr	r2, [pc, #60]	@ (800f6f0 <TIM_Base_SetConfig+0x140>)
 800f6b4:	4293      	cmp	r3, r2
 800f6b6:	d103      	bne.n	800f6c0 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f6b8:	683b      	ldr	r3, [r7, #0]
 800f6ba:	691a      	ldr	r2, [r3, #16]
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	2201      	movs	r2, #1
 800f6c4:	615a      	str	r2, [r3, #20]
}
 800f6c6:	bf00      	nop
 800f6c8:	3714      	adds	r7, #20
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d0:	4770      	bx	lr
 800f6d2:	bf00      	nop
 800f6d4:	40010000 	.word	0x40010000
 800f6d8:	40000400 	.word	0x40000400
 800f6dc:	40000800 	.word	0x40000800
 800f6e0:	40000c00 	.word	0x40000c00
 800f6e4:	40010400 	.word	0x40010400
 800f6e8:	40014000 	.word	0x40014000
 800f6ec:	40014400 	.word	0x40014400
 800f6f0:	40014800 	.word	0x40014800
 800f6f4:	4000e000 	.word	0x4000e000
 800f6f8:	4000e400 	.word	0x4000e400

0800f6fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f6fc:	b480      	push	{r7}
 800f6fe:	b087      	sub	sp, #28
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]
 800f704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	6a1b      	ldr	r3, [r3, #32]
 800f70a:	f023 0201 	bic.w	r2, r3, #1
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	6a1b      	ldr	r3, [r3, #32]
 800f716:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	685b      	ldr	r3, [r3, #4]
 800f71c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	699b      	ldr	r3, [r3, #24]
 800f722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f724:	68fa      	ldr	r2, [r7, #12]
 800f726:	4b37      	ldr	r3, [pc, #220]	@ (800f804 <TIM_OC1_SetConfig+0x108>)
 800f728:	4013      	ands	r3, r2
 800f72a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	f023 0303 	bic.w	r3, r3, #3
 800f732:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f734:	683b      	ldr	r3, [r7, #0]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	68fa      	ldr	r2, [r7, #12]
 800f73a:	4313      	orrs	r3, r2
 800f73c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f73e:	697b      	ldr	r3, [r7, #20]
 800f740:	f023 0302 	bic.w	r3, r3, #2
 800f744:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f746:	683b      	ldr	r3, [r7, #0]
 800f748:	689b      	ldr	r3, [r3, #8]
 800f74a:	697a      	ldr	r2, [r7, #20]
 800f74c:	4313      	orrs	r3, r2
 800f74e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	4a2d      	ldr	r2, [pc, #180]	@ (800f808 <TIM_OC1_SetConfig+0x10c>)
 800f754:	4293      	cmp	r3, r2
 800f756:	d00f      	beq.n	800f778 <TIM_OC1_SetConfig+0x7c>
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	4a2c      	ldr	r2, [pc, #176]	@ (800f80c <TIM_OC1_SetConfig+0x110>)
 800f75c:	4293      	cmp	r3, r2
 800f75e:	d00b      	beq.n	800f778 <TIM_OC1_SetConfig+0x7c>
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	4a2b      	ldr	r2, [pc, #172]	@ (800f810 <TIM_OC1_SetConfig+0x114>)
 800f764:	4293      	cmp	r3, r2
 800f766:	d007      	beq.n	800f778 <TIM_OC1_SetConfig+0x7c>
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	4a2a      	ldr	r2, [pc, #168]	@ (800f814 <TIM_OC1_SetConfig+0x118>)
 800f76c:	4293      	cmp	r3, r2
 800f76e:	d003      	beq.n	800f778 <TIM_OC1_SetConfig+0x7c>
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	4a29      	ldr	r2, [pc, #164]	@ (800f818 <TIM_OC1_SetConfig+0x11c>)
 800f774:	4293      	cmp	r3, r2
 800f776:	d10c      	bne.n	800f792 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f778:	697b      	ldr	r3, [r7, #20]
 800f77a:	f023 0308 	bic.w	r3, r3, #8
 800f77e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f780:	683b      	ldr	r3, [r7, #0]
 800f782:	68db      	ldr	r3, [r3, #12]
 800f784:	697a      	ldr	r2, [r7, #20]
 800f786:	4313      	orrs	r3, r2
 800f788:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f78a:	697b      	ldr	r3, [r7, #20]
 800f78c:	f023 0304 	bic.w	r3, r3, #4
 800f790:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	4a1c      	ldr	r2, [pc, #112]	@ (800f808 <TIM_OC1_SetConfig+0x10c>)
 800f796:	4293      	cmp	r3, r2
 800f798:	d00f      	beq.n	800f7ba <TIM_OC1_SetConfig+0xbe>
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	4a1b      	ldr	r2, [pc, #108]	@ (800f80c <TIM_OC1_SetConfig+0x110>)
 800f79e:	4293      	cmp	r3, r2
 800f7a0:	d00b      	beq.n	800f7ba <TIM_OC1_SetConfig+0xbe>
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	4a1a      	ldr	r2, [pc, #104]	@ (800f810 <TIM_OC1_SetConfig+0x114>)
 800f7a6:	4293      	cmp	r3, r2
 800f7a8:	d007      	beq.n	800f7ba <TIM_OC1_SetConfig+0xbe>
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	4a19      	ldr	r2, [pc, #100]	@ (800f814 <TIM_OC1_SetConfig+0x118>)
 800f7ae:	4293      	cmp	r3, r2
 800f7b0:	d003      	beq.n	800f7ba <TIM_OC1_SetConfig+0xbe>
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	4a18      	ldr	r2, [pc, #96]	@ (800f818 <TIM_OC1_SetConfig+0x11c>)
 800f7b6:	4293      	cmp	r3, r2
 800f7b8:	d111      	bne.n	800f7de <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f7ba:	693b      	ldr	r3, [r7, #16]
 800f7bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f7c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f7c2:	693b      	ldr	r3, [r7, #16]
 800f7c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f7c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f7ca:	683b      	ldr	r3, [r7, #0]
 800f7cc:	695b      	ldr	r3, [r3, #20]
 800f7ce:	693a      	ldr	r2, [r7, #16]
 800f7d0:	4313      	orrs	r3, r2
 800f7d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f7d4:	683b      	ldr	r3, [r7, #0]
 800f7d6:	699b      	ldr	r3, [r3, #24]
 800f7d8:	693a      	ldr	r2, [r7, #16]
 800f7da:	4313      	orrs	r3, r2
 800f7dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	693a      	ldr	r2, [r7, #16]
 800f7e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	68fa      	ldr	r2, [r7, #12]
 800f7e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f7ea:	683b      	ldr	r3, [r7, #0]
 800f7ec:	685a      	ldr	r2, [r3, #4]
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	697a      	ldr	r2, [r7, #20]
 800f7f6:	621a      	str	r2, [r3, #32]
}
 800f7f8:	bf00      	nop
 800f7fa:	371c      	adds	r7, #28
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f802:	4770      	bx	lr
 800f804:	fffeff8f 	.word	0xfffeff8f
 800f808:	40010000 	.word	0x40010000
 800f80c:	40010400 	.word	0x40010400
 800f810:	40014000 	.word	0x40014000
 800f814:	40014400 	.word	0x40014400
 800f818:	40014800 	.word	0x40014800

0800f81c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f81c:	b480      	push	{r7}
 800f81e:	b087      	sub	sp, #28
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
 800f824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	6a1b      	ldr	r3, [r3, #32]
 800f82a:	f023 0210 	bic.w	r2, r3, #16
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	6a1b      	ldr	r3, [r3, #32]
 800f836:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	685b      	ldr	r3, [r3, #4]
 800f83c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	699b      	ldr	r3, [r3, #24]
 800f842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f844:	68fa      	ldr	r2, [r7, #12]
 800f846:	4b34      	ldr	r3, [pc, #208]	@ (800f918 <TIM_OC2_SetConfig+0xfc>)
 800f848:	4013      	ands	r3, r2
 800f84a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f852:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f854:	683b      	ldr	r3, [r7, #0]
 800f856:	681b      	ldr	r3, [r3, #0]
 800f858:	021b      	lsls	r3, r3, #8
 800f85a:	68fa      	ldr	r2, [r7, #12]
 800f85c:	4313      	orrs	r3, r2
 800f85e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f860:	697b      	ldr	r3, [r7, #20]
 800f862:	f023 0320 	bic.w	r3, r3, #32
 800f866:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f868:	683b      	ldr	r3, [r7, #0]
 800f86a:	689b      	ldr	r3, [r3, #8]
 800f86c:	011b      	lsls	r3, r3, #4
 800f86e:	697a      	ldr	r2, [r7, #20]
 800f870:	4313      	orrs	r3, r2
 800f872:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	4a29      	ldr	r2, [pc, #164]	@ (800f91c <TIM_OC2_SetConfig+0x100>)
 800f878:	4293      	cmp	r3, r2
 800f87a:	d003      	beq.n	800f884 <TIM_OC2_SetConfig+0x68>
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	4a28      	ldr	r2, [pc, #160]	@ (800f920 <TIM_OC2_SetConfig+0x104>)
 800f880:	4293      	cmp	r3, r2
 800f882:	d10d      	bne.n	800f8a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f884:	697b      	ldr	r3, [r7, #20]
 800f886:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f88a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f88c:	683b      	ldr	r3, [r7, #0]
 800f88e:	68db      	ldr	r3, [r3, #12]
 800f890:	011b      	lsls	r3, r3, #4
 800f892:	697a      	ldr	r2, [r7, #20]
 800f894:	4313      	orrs	r3, r2
 800f896:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f898:	697b      	ldr	r3, [r7, #20]
 800f89a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f89e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	4a1e      	ldr	r2, [pc, #120]	@ (800f91c <TIM_OC2_SetConfig+0x100>)
 800f8a4:	4293      	cmp	r3, r2
 800f8a6:	d00f      	beq.n	800f8c8 <TIM_OC2_SetConfig+0xac>
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	4a1d      	ldr	r2, [pc, #116]	@ (800f920 <TIM_OC2_SetConfig+0x104>)
 800f8ac:	4293      	cmp	r3, r2
 800f8ae:	d00b      	beq.n	800f8c8 <TIM_OC2_SetConfig+0xac>
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	4a1c      	ldr	r2, [pc, #112]	@ (800f924 <TIM_OC2_SetConfig+0x108>)
 800f8b4:	4293      	cmp	r3, r2
 800f8b6:	d007      	beq.n	800f8c8 <TIM_OC2_SetConfig+0xac>
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	4a1b      	ldr	r2, [pc, #108]	@ (800f928 <TIM_OC2_SetConfig+0x10c>)
 800f8bc:	4293      	cmp	r3, r2
 800f8be:	d003      	beq.n	800f8c8 <TIM_OC2_SetConfig+0xac>
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	4a1a      	ldr	r2, [pc, #104]	@ (800f92c <TIM_OC2_SetConfig+0x110>)
 800f8c4:	4293      	cmp	r3, r2
 800f8c6:	d113      	bne.n	800f8f0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f8c8:	693b      	ldr	r3, [r7, #16]
 800f8ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f8ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f8d0:	693b      	ldr	r3, [r7, #16]
 800f8d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f8d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f8d8:	683b      	ldr	r3, [r7, #0]
 800f8da:	695b      	ldr	r3, [r3, #20]
 800f8dc:	009b      	lsls	r3, r3, #2
 800f8de:	693a      	ldr	r2, [r7, #16]
 800f8e0:	4313      	orrs	r3, r2
 800f8e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f8e4:	683b      	ldr	r3, [r7, #0]
 800f8e6:	699b      	ldr	r3, [r3, #24]
 800f8e8:	009b      	lsls	r3, r3, #2
 800f8ea:	693a      	ldr	r2, [r7, #16]
 800f8ec:	4313      	orrs	r3, r2
 800f8ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	693a      	ldr	r2, [r7, #16]
 800f8f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	68fa      	ldr	r2, [r7, #12]
 800f8fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f8fc:	683b      	ldr	r3, [r7, #0]
 800f8fe:	685a      	ldr	r2, [r3, #4]
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	697a      	ldr	r2, [r7, #20]
 800f908:	621a      	str	r2, [r3, #32]
}
 800f90a:	bf00      	nop
 800f90c:	371c      	adds	r7, #28
 800f90e:	46bd      	mov	sp, r7
 800f910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f914:	4770      	bx	lr
 800f916:	bf00      	nop
 800f918:	feff8fff 	.word	0xfeff8fff
 800f91c:	40010000 	.word	0x40010000
 800f920:	40010400 	.word	0x40010400
 800f924:	40014000 	.word	0x40014000
 800f928:	40014400 	.word	0x40014400
 800f92c:	40014800 	.word	0x40014800

0800f930 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f930:	b480      	push	{r7}
 800f932:	b087      	sub	sp, #28
 800f934:	af00      	add	r7, sp, #0
 800f936:	6078      	str	r0, [r7, #4]
 800f938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	6a1b      	ldr	r3, [r3, #32]
 800f93e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	6a1b      	ldr	r3, [r3, #32]
 800f94a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	685b      	ldr	r3, [r3, #4]
 800f950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	69db      	ldr	r3, [r3, #28]
 800f956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f958:	68fa      	ldr	r2, [r7, #12]
 800f95a:	4b33      	ldr	r3, [pc, #204]	@ (800fa28 <TIM_OC3_SetConfig+0xf8>)
 800f95c:	4013      	ands	r3, r2
 800f95e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	f023 0303 	bic.w	r3, r3, #3
 800f966:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f968:	683b      	ldr	r3, [r7, #0]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	68fa      	ldr	r2, [r7, #12]
 800f96e:	4313      	orrs	r3, r2
 800f970:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f972:	697b      	ldr	r3, [r7, #20]
 800f974:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f978:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f97a:	683b      	ldr	r3, [r7, #0]
 800f97c:	689b      	ldr	r3, [r3, #8]
 800f97e:	021b      	lsls	r3, r3, #8
 800f980:	697a      	ldr	r2, [r7, #20]
 800f982:	4313      	orrs	r3, r2
 800f984:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	4a28      	ldr	r2, [pc, #160]	@ (800fa2c <TIM_OC3_SetConfig+0xfc>)
 800f98a:	4293      	cmp	r3, r2
 800f98c:	d003      	beq.n	800f996 <TIM_OC3_SetConfig+0x66>
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	4a27      	ldr	r2, [pc, #156]	@ (800fa30 <TIM_OC3_SetConfig+0x100>)
 800f992:	4293      	cmp	r3, r2
 800f994:	d10d      	bne.n	800f9b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f996:	697b      	ldr	r3, [r7, #20]
 800f998:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f99c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f99e:	683b      	ldr	r3, [r7, #0]
 800f9a0:	68db      	ldr	r3, [r3, #12]
 800f9a2:	021b      	lsls	r3, r3, #8
 800f9a4:	697a      	ldr	r2, [r7, #20]
 800f9a6:	4313      	orrs	r3, r2
 800f9a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f9aa:	697b      	ldr	r3, [r7, #20]
 800f9ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f9b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	4a1d      	ldr	r2, [pc, #116]	@ (800fa2c <TIM_OC3_SetConfig+0xfc>)
 800f9b6:	4293      	cmp	r3, r2
 800f9b8:	d00f      	beq.n	800f9da <TIM_OC3_SetConfig+0xaa>
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	4a1c      	ldr	r2, [pc, #112]	@ (800fa30 <TIM_OC3_SetConfig+0x100>)
 800f9be:	4293      	cmp	r3, r2
 800f9c0:	d00b      	beq.n	800f9da <TIM_OC3_SetConfig+0xaa>
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	4a1b      	ldr	r2, [pc, #108]	@ (800fa34 <TIM_OC3_SetConfig+0x104>)
 800f9c6:	4293      	cmp	r3, r2
 800f9c8:	d007      	beq.n	800f9da <TIM_OC3_SetConfig+0xaa>
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	4a1a      	ldr	r2, [pc, #104]	@ (800fa38 <TIM_OC3_SetConfig+0x108>)
 800f9ce:	4293      	cmp	r3, r2
 800f9d0:	d003      	beq.n	800f9da <TIM_OC3_SetConfig+0xaa>
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	4a19      	ldr	r2, [pc, #100]	@ (800fa3c <TIM_OC3_SetConfig+0x10c>)
 800f9d6:	4293      	cmp	r3, r2
 800f9d8:	d113      	bne.n	800fa02 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f9da:	693b      	ldr	r3, [r7, #16]
 800f9dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f9e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f9e2:	693b      	ldr	r3, [r7, #16]
 800f9e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f9e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f9ea:	683b      	ldr	r3, [r7, #0]
 800f9ec:	695b      	ldr	r3, [r3, #20]
 800f9ee:	011b      	lsls	r3, r3, #4
 800f9f0:	693a      	ldr	r2, [r7, #16]
 800f9f2:	4313      	orrs	r3, r2
 800f9f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f9f6:	683b      	ldr	r3, [r7, #0]
 800f9f8:	699b      	ldr	r3, [r3, #24]
 800f9fa:	011b      	lsls	r3, r3, #4
 800f9fc:	693a      	ldr	r2, [r7, #16]
 800f9fe:	4313      	orrs	r3, r2
 800fa00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	693a      	ldr	r2, [r7, #16]
 800fa06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	68fa      	ldr	r2, [r7, #12]
 800fa0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fa0e:	683b      	ldr	r3, [r7, #0]
 800fa10:	685a      	ldr	r2, [r3, #4]
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	697a      	ldr	r2, [r7, #20]
 800fa1a:	621a      	str	r2, [r3, #32]
}
 800fa1c:	bf00      	nop
 800fa1e:	371c      	adds	r7, #28
 800fa20:	46bd      	mov	sp, r7
 800fa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa26:	4770      	bx	lr
 800fa28:	fffeff8f 	.word	0xfffeff8f
 800fa2c:	40010000 	.word	0x40010000
 800fa30:	40010400 	.word	0x40010400
 800fa34:	40014000 	.word	0x40014000
 800fa38:	40014400 	.word	0x40014400
 800fa3c:	40014800 	.word	0x40014800

0800fa40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fa40:	b480      	push	{r7}
 800fa42:	b087      	sub	sp, #28
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
 800fa48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	6a1b      	ldr	r3, [r3, #32]
 800fa4e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	6a1b      	ldr	r3, [r3, #32]
 800fa5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	685b      	ldr	r3, [r3, #4]
 800fa60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	69db      	ldr	r3, [r3, #28]
 800fa66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fa68:	68fa      	ldr	r2, [r7, #12]
 800fa6a:	4b24      	ldr	r3, [pc, #144]	@ (800fafc <TIM_OC4_SetConfig+0xbc>)
 800fa6c:	4013      	ands	r3, r2
 800fa6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fa76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fa78:	683b      	ldr	r3, [r7, #0]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	021b      	lsls	r3, r3, #8
 800fa7e:	68fa      	ldr	r2, [r7, #12]
 800fa80:	4313      	orrs	r3, r2
 800fa82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fa84:	693b      	ldr	r3, [r7, #16]
 800fa86:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800fa8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fa8c:	683b      	ldr	r3, [r7, #0]
 800fa8e:	689b      	ldr	r3, [r3, #8]
 800fa90:	031b      	lsls	r3, r3, #12
 800fa92:	693a      	ldr	r2, [r7, #16]
 800fa94:	4313      	orrs	r3, r2
 800fa96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	4a19      	ldr	r2, [pc, #100]	@ (800fb00 <TIM_OC4_SetConfig+0xc0>)
 800fa9c:	4293      	cmp	r3, r2
 800fa9e:	d00f      	beq.n	800fac0 <TIM_OC4_SetConfig+0x80>
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	4a18      	ldr	r2, [pc, #96]	@ (800fb04 <TIM_OC4_SetConfig+0xc4>)
 800faa4:	4293      	cmp	r3, r2
 800faa6:	d00b      	beq.n	800fac0 <TIM_OC4_SetConfig+0x80>
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	4a17      	ldr	r2, [pc, #92]	@ (800fb08 <TIM_OC4_SetConfig+0xc8>)
 800faac:	4293      	cmp	r3, r2
 800faae:	d007      	beq.n	800fac0 <TIM_OC4_SetConfig+0x80>
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	4a16      	ldr	r2, [pc, #88]	@ (800fb0c <TIM_OC4_SetConfig+0xcc>)
 800fab4:	4293      	cmp	r3, r2
 800fab6:	d003      	beq.n	800fac0 <TIM_OC4_SetConfig+0x80>
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	4a15      	ldr	r2, [pc, #84]	@ (800fb10 <TIM_OC4_SetConfig+0xd0>)
 800fabc:	4293      	cmp	r3, r2
 800fabe:	d109      	bne.n	800fad4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fac0:	697b      	ldr	r3, [r7, #20]
 800fac2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800fac6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fac8:	683b      	ldr	r3, [r7, #0]
 800faca:	695b      	ldr	r3, [r3, #20]
 800facc:	019b      	lsls	r3, r3, #6
 800face:	697a      	ldr	r2, [r7, #20]
 800fad0:	4313      	orrs	r3, r2
 800fad2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	697a      	ldr	r2, [r7, #20]
 800fad8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	68fa      	ldr	r2, [r7, #12]
 800fade:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fae0:	683b      	ldr	r3, [r7, #0]
 800fae2:	685a      	ldr	r2, [r3, #4]
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	693a      	ldr	r2, [r7, #16]
 800faec:	621a      	str	r2, [r3, #32]
}
 800faee:	bf00      	nop
 800faf0:	371c      	adds	r7, #28
 800faf2:	46bd      	mov	sp, r7
 800faf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf8:	4770      	bx	lr
 800fafa:	bf00      	nop
 800fafc:	feff8fff 	.word	0xfeff8fff
 800fb00:	40010000 	.word	0x40010000
 800fb04:	40010400 	.word	0x40010400
 800fb08:	40014000 	.word	0x40014000
 800fb0c:	40014400 	.word	0x40014400
 800fb10:	40014800 	.word	0x40014800

0800fb14 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fb14:	b480      	push	{r7}
 800fb16:	b087      	sub	sp, #28
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
 800fb1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	6a1b      	ldr	r3, [r3, #32]
 800fb22:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	6a1b      	ldr	r3, [r3, #32]
 800fb2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	685b      	ldr	r3, [r3, #4]
 800fb34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fb3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fb3c:	68fa      	ldr	r2, [r7, #12]
 800fb3e:	4b21      	ldr	r3, [pc, #132]	@ (800fbc4 <TIM_OC5_SetConfig+0xb0>)
 800fb40:	4013      	ands	r3, r2
 800fb42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fb44:	683b      	ldr	r3, [r7, #0]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	68fa      	ldr	r2, [r7, #12]
 800fb4a:	4313      	orrs	r3, r2
 800fb4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fb4e:	693b      	ldr	r3, [r7, #16]
 800fb50:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800fb54:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fb56:	683b      	ldr	r3, [r7, #0]
 800fb58:	689b      	ldr	r3, [r3, #8]
 800fb5a:	041b      	lsls	r3, r3, #16
 800fb5c:	693a      	ldr	r2, [r7, #16]
 800fb5e:	4313      	orrs	r3, r2
 800fb60:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	4a18      	ldr	r2, [pc, #96]	@ (800fbc8 <TIM_OC5_SetConfig+0xb4>)
 800fb66:	4293      	cmp	r3, r2
 800fb68:	d00f      	beq.n	800fb8a <TIM_OC5_SetConfig+0x76>
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	4a17      	ldr	r2, [pc, #92]	@ (800fbcc <TIM_OC5_SetConfig+0xb8>)
 800fb6e:	4293      	cmp	r3, r2
 800fb70:	d00b      	beq.n	800fb8a <TIM_OC5_SetConfig+0x76>
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	4a16      	ldr	r2, [pc, #88]	@ (800fbd0 <TIM_OC5_SetConfig+0xbc>)
 800fb76:	4293      	cmp	r3, r2
 800fb78:	d007      	beq.n	800fb8a <TIM_OC5_SetConfig+0x76>
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	4a15      	ldr	r2, [pc, #84]	@ (800fbd4 <TIM_OC5_SetConfig+0xc0>)
 800fb7e:	4293      	cmp	r3, r2
 800fb80:	d003      	beq.n	800fb8a <TIM_OC5_SetConfig+0x76>
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	4a14      	ldr	r2, [pc, #80]	@ (800fbd8 <TIM_OC5_SetConfig+0xc4>)
 800fb86:	4293      	cmp	r3, r2
 800fb88:	d109      	bne.n	800fb9e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fb8a:	697b      	ldr	r3, [r7, #20]
 800fb8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fb90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fb92:	683b      	ldr	r3, [r7, #0]
 800fb94:	695b      	ldr	r3, [r3, #20]
 800fb96:	021b      	lsls	r3, r3, #8
 800fb98:	697a      	ldr	r2, [r7, #20]
 800fb9a:	4313      	orrs	r3, r2
 800fb9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	697a      	ldr	r2, [r7, #20]
 800fba2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	68fa      	ldr	r2, [r7, #12]
 800fba8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fbaa:	683b      	ldr	r3, [r7, #0]
 800fbac:	685a      	ldr	r2, [r3, #4]
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	693a      	ldr	r2, [r7, #16]
 800fbb6:	621a      	str	r2, [r3, #32]
}
 800fbb8:	bf00      	nop
 800fbba:	371c      	adds	r7, #28
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc2:	4770      	bx	lr
 800fbc4:	fffeff8f 	.word	0xfffeff8f
 800fbc8:	40010000 	.word	0x40010000
 800fbcc:	40010400 	.word	0x40010400
 800fbd0:	40014000 	.word	0x40014000
 800fbd4:	40014400 	.word	0x40014400
 800fbd8:	40014800 	.word	0x40014800

0800fbdc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fbdc:	b480      	push	{r7}
 800fbde:	b087      	sub	sp, #28
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
 800fbe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	6a1b      	ldr	r3, [r3, #32]
 800fbea:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	6a1b      	ldr	r3, [r3, #32]
 800fbf6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	685b      	ldr	r3, [r3, #4]
 800fbfc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fc02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fc04:	68fa      	ldr	r2, [r7, #12]
 800fc06:	4b22      	ldr	r3, [pc, #136]	@ (800fc90 <TIM_OC6_SetConfig+0xb4>)
 800fc08:	4013      	ands	r3, r2
 800fc0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fc0c:	683b      	ldr	r3, [r7, #0]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	021b      	lsls	r3, r3, #8
 800fc12:	68fa      	ldr	r2, [r7, #12]
 800fc14:	4313      	orrs	r3, r2
 800fc16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fc18:	693b      	ldr	r3, [r7, #16]
 800fc1a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800fc1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fc20:	683b      	ldr	r3, [r7, #0]
 800fc22:	689b      	ldr	r3, [r3, #8]
 800fc24:	051b      	lsls	r3, r3, #20
 800fc26:	693a      	ldr	r2, [r7, #16]
 800fc28:	4313      	orrs	r3, r2
 800fc2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	4a19      	ldr	r2, [pc, #100]	@ (800fc94 <TIM_OC6_SetConfig+0xb8>)
 800fc30:	4293      	cmp	r3, r2
 800fc32:	d00f      	beq.n	800fc54 <TIM_OC6_SetConfig+0x78>
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	4a18      	ldr	r2, [pc, #96]	@ (800fc98 <TIM_OC6_SetConfig+0xbc>)
 800fc38:	4293      	cmp	r3, r2
 800fc3a:	d00b      	beq.n	800fc54 <TIM_OC6_SetConfig+0x78>
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	4a17      	ldr	r2, [pc, #92]	@ (800fc9c <TIM_OC6_SetConfig+0xc0>)
 800fc40:	4293      	cmp	r3, r2
 800fc42:	d007      	beq.n	800fc54 <TIM_OC6_SetConfig+0x78>
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	4a16      	ldr	r2, [pc, #88]	@ (800fca0 <TIM_OC6_SetConfig+0xc4>)
 800fc48:	4293      	cmp	r3, r2
 800fc4a:	d003      	beq.n	800fc54 <TIM_OC6_SetConfig+0x78>
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	4a15      	ldr	r2, [pc, #84]	@ (800fca4 <TIM_OC6_SetConfig+0xc8>)
 800fc50:	4293      	cmp	r3, r2
 800fc52:	d109      	bne.n	800fc68 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fc54:	697b      	ldr	r3, [r7, #20]
 800fc56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800fc5a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fc5c:	683b      	ldr	r3, [r7, #0]
 800fc5e:	695b      	ldr	r3, [r3, #20]
 800fc60:	029b      	lsls	r3, r3, #10
 800fc62:	697a      	ldr	r2, [r7, #20]
 800fc64:	4313      	orrs	r3, r2
 800fc66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	697a      	ldr	r2, [r7, #20]
 800fc6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	68fa      	ldr	r2, [r7, #12]
 800fc72:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fc74:	683b      	ldr	r3, [r7, #0]
 800fc76:	685a      	ldr	r2, [r3, #4]
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	693a      	ldr	r2, [r7, #16]
 800fc80:	621a      	str	r2, [r3, #32]
}
 800fc82:	bf00      	nop
 800fc84:	371c      	adds	r7, #28
 800fc86:	46bd      	mov	sp, r7
 800fc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8c:	4770      	bx	lr
 800fc8e:	bf00      	nop
 800fc90:	feff8fff 	.word	0xfeff8fff
 800fc94:	40010000 	.word	0x40010000
 800fc98:	40010400 	.word	0x40010400
 800fc9c:	40014000 	.word	0x40014000
 800fca0:	40014400 	.word	0x40014400
 800fca4:	40014800 	.word	0x40014800

0800fca8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800fca8:	b480      	push	{r7}
 800fcaa:	b087      	sub	sp, #28
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	60f8      	str	r0, [r7, #12]
 800fcb0:	60b9      	str	r1, [r7, #8]
 800fcb2:	607a      	str	r2, [r7, #4]
 800fcb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	6a1b      	ldr	r3, [r3, #32]
 800fcba:	f023 0201 	bic.w	r2, r3, #1
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	699b      	ldr	r3, [r3, #24]
 800fcc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	6a1b      	ldr	r3, [r3, #32]
 800fccc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	4a2c      	ldr	r2, [pc, #176]	@ (800fd84 <TIM_TI1_SetConfig+0xdc>)
 800fcd2:	4293      	cmp	r3, r2
 800fcd4:	d023      	beq.n	800fd1e <TIM_TI1_SetConfig+0x76>
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fcdc:	d01f      	beq.n	800fd1e <TIM_TI1_SetConfig+0x76>
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	4a29      	ldr	r2, [pc, #164]	@ (800fd88 <TIM_TI1_SetConfig+0xe0>)
 800fce2:	4293      	cmp	r3, r2
 800fce4:	d01b      	beq.n	800fd1e <TIM_TI1_SetConfig+0x76>
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	4a28      	ldr	r2, [pc, #160]	@ (800fd8c <TIM_TI1_SetConfig+0xe4>)
 800fcea:	4293      	cmp	r3, r2
 800fcec:	d017      	beq.n	800fd1e <TIM_TI1_SetConfig+0x76>
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	4a27      	ldr	r2, [pc, #156]	@ (800fd90 <TIM_TI1_SetConfig+0xe8>)
 800fcf2:	4293      	cmp	r3, r2
 800fcf4:	d013      	beq.n	800fd1e <TIM_TI1_SetConfig+0x76>
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	4a26      	ldr	r2, [pc, #152]	@ (800fd94 <TIM_TI1_SetConfig+0xec>)
 800fcfa:	4293      	cmp	r3, r2
 800fcfc:	d00f      	beq.n	800fd1e <TIM_TI1_SetConfig+0x76>
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	4a25      	ldr	r2, [pc, #148]	@ (800fd98 <TIM_TI1_SetConfig+0xf0>)
 800fd02:	4293      	cmp	r3, r2
 800fd04:	d00b      	beq.n	800fd1e <TIM_TI1_SetConfig+0x76>
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	4a24      	ldr	r2, [pc, #144]	@ (800fd9c <TIM_TI1_SetConfig+0xf4>)
 800fd0a:	4293      	cmp	r3, r2
 800fd0c:	d007      	beq.n	800fd1e <TIM_TI1_SetConfig+0x76>
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	4a23      	ldr	r2, [pc, #140]	@ (800fda0 <TIM_TI1_SetConfig+0xf8>)
 800fd12:	4293      	cmp	r3, r2
 800fd14:	d003      	beq.n	800fd1e <TIM_TI1_SetConfig+0x76>
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	4a22      	ldr	r2, [pc, #136]	@ (800fda4 <TIM_TI1_SetConfig+0xfc>)
 800fd1a:	4293      	cmp	r3, r2
 800fd1c:	d101      	bne.n	800fd22 <TIM_TI1_SetConfig+0x7a>
 800fd1e:	2301      	movs	r3, #1
 800fd20:	e000      	b.n	800fd24 <TIM_TI1_SetConfig+0x7c>
 800fd22:	2300      	movs	r3, #0
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d008      	beq.n	800fd3a <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800fd28:	697b      	ldr	r3, [r7, #20]
 800fd2a:	f023 0303 	bic.w	r3, r3, #3
 800fd2e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800fd30:	697a      	ldr	r2, [r7, #20]
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	4313      	orrs	r3, r2
 800fd36:	617b      	str	r3, [r7, #20]
 800fd38:	e003      	b.n	800fd42 <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800fd3a:	697b      	ldr	r3, [r7, #20]
 800fd3c:	f043 0301 	orr.w	r3, r3, #1
 800fd40:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fd42:	697b      	ldr	r3, [r7, #20]
 800fd44:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800fd48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800fd4a:	683b      	ldr	r3, [r7, #0]
 800fd4c:	011b      	lsls	r3, r3, #4
 800fd4e:	b2db      	uxtb	r3, r3
 800fd50:	697a      	ldr	r2, [r7, #20]
 800fd52:	4313      	orrs	r3, r2
 800fd54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fd56:	693b      	ldr	r3, [r7, #16]
 800fd58:	f023 030a 	bic.w	r3, r3, #10
 800fd5c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800fd5e:	68bb      	ldr	r3, [r7, #8]
 800fd60:	f003 030a 	and.w	r3, r3, #10
 800fd64:	693a      	ldr	r2, [r7, #16]
 800fd66:	4313      	orrs	r3, r2
 800fd68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	697a      	ldr	r2, [r7, #20]
 800fd6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	693a      	ldr	r2, [r7, #16]
 800fd74:	621a      	str	r2, [r3, #32]
}
 800fd76:	bf00      	nop
 800fd78:	371c      	adds	r7, #28
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd80:	4770      	bx	lr
 800fd82:	bf00      	nop
 800fd84:	40010000 	.word	0x40010000
 800fd88:	40000400 	.word	0x40000400
 800fd8c:	40000800 	.word	0x40000800
 800fd90:	40000c00 	.word	0x40000c00
 800fd94:	40010400 	.word	0x40010400
 800fd98:	40001800 	.word	0x40001800
 800fd9c:	40014000 	.word	0x40014000
 800fda0:	4000e000 	.word	0x4000e000
 800fda4:	4000e400 	.word	0x4000e400

0800fda8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fda8:	b480      	push	{r7}
 800fdaa:	b087      	sub	sp, #28
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	60f8      	str	r0, [r7, #12]
 800fdb0:	60b9      	str	r1, [r7, #8]
 800fdb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	6a1b      	ldr	r3, [r3, #32]
 800fdb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	6a1b      	ldr	r3, [r3, #32]
 800fdbe:	f023 0201 	bic.w	r2, r3, #1
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	699b      	ldr	r3, [r3, #24]
 800fdca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fdcc:	693b      	ldr	r3, [r7, #16]
 800fdce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800fdd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	011b      	lsls	r3, r3, #4
 800fdd8:	693a      	ldr	r2, [r7, #16]
 800fdda:	4313      	orrs	r3, r2
 800fddc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fdde:	697b      	ldr	r3, [r7, #20]
 800fde0:	f023 030a 	bic.w	r3, r3, #10
 800fde4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fde6:	697a      	ldr	r2, [r7, #20]
 800fde8:	68bb      	ldr	r3, [r7, #8]
 800fdea:	4313      	orrs	r3, r2
 800fdec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	693a      	ldr	r2, [r7, #16]
 800fdf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	697a      	ldr	r2, [r7, #20]
 800fdf8:	621a      	str	r2, [r3, #32]
}
 800fdfa:	bf00      	nop
 800fdfc:	371c      	adds	r7, #28
 800fdfe:	46bd      	mov	sp, r7
 800fe00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe04:	4770      	bx	lr

0800fe06 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800fe06:	b480      	push	{r7}
 800fe08:	b087      	sub	sp, #28
 800fe0a:	af00      	add	r7, sp, #0
 800fe0c:	60f8      	str	r0, [r7, #12]
 800fe0e:	60b9      	str	r1, [r7, #8]
 800fe10:	607a      	str	r2, [r7, #4]
 800fe12:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	6a1b      	ldr	r3, [r3, #32]
 800fe18:	f023 0210 	bic.w	r2, r3, #16
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	699b      	ldr	r3, [r3, #24]
 800fe24:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	6a1b      	ldr	r3, [r3, #32]
 800fe2a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800fe2c:	697b      	ldr	r3, [r7, #20]
 800fe2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fe32:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	021b      	lsls	r3, r3, #8
 800fe38:	697a      	ldr	r2, [r7, #20]
 800fe3a:	4313      	orrs	r3, r2
 800fe3c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fe3e:	697b      	ldr	r3, [r7, #20]
 800fe40:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800fe44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800fe46:	683b      	ldr	r3, [r7, #0]
 800fe48:	031b      	lsls	r3, r3, #12
 800fe4a:	b29b      	uxth	r3, r3
 800fe4c:	697a      	ldr	r2, [r7, #20]
 800fe4e:	4313      	orrs	r3, r2
 800fe50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fe52:	693b      	ldr	r3, [r7, #16]
 800fe54:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800fe58:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800fe5a:	68bb      	ldr	r3, [r7, #8]
 800fe5c:	011b      	lsls	r3, r3, #4
 800fe5e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800fe62:	693a      	ldr	r2, [r7, #16]
 800fe64:	4313      	orrs	r3, r2
 800fe66:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	697a      	ldr	r2, [r7, #20]
 800fe6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	693a      	ldr	r2, [r7, #16]
 800fe72:	621a      	str	r2, [r3, #32]
}
 800fe74:	bf00      	nop
 800fe76:	371c      	adds	r7, #28
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7e:	4770      	bx	lr

0800fe80 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fe80:	b480      	push	{r7}
 800fe82:	b087      	sub	sp, #28
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	60f8      	str	r0, [r7, #12]
 800fe88:	60b9      	str	r1, [r7, #8]
 800fe8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	6a1b      	ldr	r3, [r3, #32]
 800fe90:	f023 0210 	bic.w	r2, r3, #16
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	699b      	ldr	r3, [r3, #24]
 800fe9c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	6a1b      	ldr	r3, [r3, #32]
 800fea2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fea4:	697b      	ldr	r3, [r7, #20]
 800fea6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800feaa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	031b      	lsls	r3, r3, #12
 800feb0:	697a      	ldr	r2, [r7, #20]
 800feb2:	4313      	orrs	r3, r2
 800feb4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800feb6:	693b      	ldr	r3, [r7, #16]
 800feb8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800febc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800febe:	68bb      	ldr	r3, [r7, #8]
 800fec0:	011b      	lsls	r3, r3, #4
 800fec2:	693a      	ldr	r2, [r7, #16]
 800fec4:	4313      	orrs	r3, r2
 800fec6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	697a      	ldr	r2, [r7, #20]
 800fecc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	693a      	ldr	r2, [r7, #16]
 800fed2:	621a      	str	r2, [r3, #32]
}
 800fed4:	bf00      	nop
 800fed6:	371c      	adds	r7, #28
 800fed8:	46bd      	mov	sp, r7
 800feda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fede:	4770      	bx	lr

0800fee0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800fee0:	b480      	push	{r7}
 800fee2:	b087      	sub	sp, #28
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	60f8      	str	r0, [r7, #12]
 800fee8:	60b9      	str	r1, [r7, #8]
 800feea:	607a      	str	r2, [r7, #4]
 800feec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	6a1b      	ldr	r3, [r3, #32]
 800fef2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800fefa:	68fb      	ldr	r3, [r7, #12]
 800fefc:	69db      	ldr	r3, [r3, #28]
 800fefe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	6a1b      	ldr	r3, [r3, #32]
 800ff04:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800ff06:	697b      	ldr	r3, [r7, #20]
 800ff08:	f023 0303 	bic.w	r3, r3, #3
 800ff0c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800ff0e:	697a      	ldr	r2, [r7, #20]
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	4313      	orrs	r3, r2
 800ff14:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800ff16:	697b      	ldr	r3, [r7, #20]
 800ff18:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ff1c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800ff1e:	683b      	ldr	r3, [r7, #0]
 800ff20:	011b      	lsls	r3, r3, #4
 800ff22:	b2db      	uxtb	r3, r3
 800ff24:	697a      	ldr	r2, [r7, #20]
 800ff26:	4313      	orrs	r3, r2
 800ff28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800ff2a:	693b      	ldr	r3, [r7, #16]
 800ff2c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800ff30:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800ff32:	68bb      	ldr	r3, [r7, #8]
 800ff34:	021b      	lsls	r3, r3, #8
 800ff36:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800ff3a:	693a      	ldr	r2, [r7, #16]
 800ff3c:	4313      	orrs	r3, r2
 800ff3e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	697a      	ldr	r2, [r7, #20]
 800ff44:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	693a      	ldr	r2, [r7, #16]
 800ff4a:	621a      	str	r2, [r3, #32]
}
 800ff4c:	bf00      	nop
 800ff4e:	371c      	adds	r7, #28
 800ff50:	46bd      	mov	sp, r7
 800ff52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff56:	4770      	bx	lr

0800ff58 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ff58:	b480      	push	{r7}
 800ff5a:	b087      	sub	sp, #28
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	60f8      	str	r0, [r7, #12]
 800ff60:	60b9      	str	r1, [r7, #8]
 800ff62:	607a      	str	r2, [r7, #4]
 800ff64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	6a1b      	ldr	r3, [r3, #32]
 800ff6a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	69db      	ldr	r3, [r3, #28]
 800ff76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	6a1b      	ldr	r3, [r3, #32]
 800ff7c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800ff7e:	697b      	ldr	r3, [r7, #20]
 800ff80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ff84:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	021b      	lsls	r3, r3, #8
 800ff8a:	697a      	ldr	r2, [r7, #20]
 800ff8c:	4313      	orrs	r3, r2
 800ff8e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800ff90:	697b      	ldr	r3, [r7, #20]
 800ff92:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ff96:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800ff98:	683b      	ldr	r3, [r7, #0]
 800ff9a:	031b      	lsls	r3, r3, #12
 800ff9c:	b29b      	uxth	r3, r3
 800ff9e:	697a      	ldr	r2, [r7, #20]
 800ffa0:	4313      	orrs	r3, r2
 800ffa2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800ffa4:	693b      	ldr	r3, [r7, #16]
 800ffa6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800ffaa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800ffac:	68bb      	ldr	r3, [r7, #8]
 800ffae:	031b      	lsls	r3, r3, #12
 800ffb0:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800ffb4:	693a      	ldr	r2, [r7, #16]
 800ffb6:	4313      	orrs	r3, r2
 800ffb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	697a      	ldr	r2, [r7, #20]
 800ffbe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	693a      	ldr	r2, [r7, #16]
 800ffc4:	621a      	str	r2, [r3, #32]
}
 800ffc6:	bf00      	nop
 800ffc8:	371c      	adds	r7, #28
 800ffca:	46bd      	mov	sp, r7
 800ffcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffd0:	4770      	bx	lr
	...

0800ffd4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ffd4:	b480      	push	{r7}
 800ffd6:	b085      	sub	sp, #20
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
 800ffdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	689b      	ldr	r3, [r3, #8]
 800ffe2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ffe4:	68fa      	ldr	r2, [r7, #12]
 800ffe6:	4b09      	ldr	r3, [pc, #36]	@ (801000c <TIM_ITRx_SetConfig+0x38>)
 800ffe8:	4013      	ands	r3, r2
 800ffea:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ffec:	683a      	ldr	r2, [r7, #0]
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	4313      	orrs	r3, r2
 800fff2:	f043 0307 	orr.w	r3, r3, #7
 800fff6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	68fa      	ldr	r2, [r7, #12]
 800fffc:	609a      	str	r2, [r3, #8]
}
 800fffe:	bf00      	nop
 8010000:	3714      	adds	r7, #20
 8010002:	46bd      	mov	sp, r7
 8010004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010008:	4770      	bx	lr
 801000a:	bf00      	nop
 801000c:	ffcfff8f 	.word	0xffcfff8f

08010010 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010010:	b480      	push	{r7}
 8010012:	b087      	sub	sp, #28
 8010014:	af00      	add	r7, sp, #0
 8010016:	60f8      	str	r0, [r7, #12]
 8010018:	60b9      	str	r1, [r7, #8]
 801001a:	607a      	str	r2, [r7, #4]
 801001c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	689b      	ldr	r3, [r3, #8]
 8010022:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010024:	697b      	ldr	r3, [r7, #20]
 8010026:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801002a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801002c:	683b      	ldr	r3, [r7, #0]
 801002e:	021a      	lsls	r2, r3, #8
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	431a      	orrs	r2, r3
 8010034:	68bb      	ldr	r3, [r7, #8]
 8010036:	4313      	orrs	r3, r2
 8010038:	697a      	ldr	r2, [r7, #20]
 801003a:	4313      	orrs	r3, r2
 801003c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	697a      	ldr	r2, [r7, #20]
 8010042:	609a      	str	r2, [r3, #8]
}
 8010044:	bf00      	nop
 8010046:	371c      	adds	r7, #28
 8010048:	46bd      	mov	sp, r7
 801004a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004e:	4770      	bx	lr

08010050 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010050:	b480      	push	{r7}
 8010052:	b087      	sub	sp, #28
 8010054:	af00      	add	r7, sp, #0
 8010056:	60f8      	str	r0, [r7, #12]
 8010058:	60b9      	str	r1, [r7, #8]
 801005a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801005c:	68bb      	ldr	r3, [r7, #8]
 801005e:	f003 031f 	and.w	r3, r3, #31
 8010062:	2201      	movs	r2, #1
 8010064:	fa02 f303 	lsl.w	r3, r2, r3
 8010068:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	6a1a      	ldr	r2, [r3, #32]
 801006e:	697b      	ldr	r3, [r7, #20]
 8010070:	43db      	mvns	r3, r3
 8010072:	401a      	ands	r2, r3
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	6a1a      	ldr	r2, [r3, #32]
 801007c:	68bb      	ldr	r3, [r7, #8]
 801007e:	f003 031f 	and.w	r3, r3, #31
 8010082:	6879      	ldr	r1, [r7, #4]
 8010084:	fa01 f303 	lsl.w	r3, r1, r3
 8010088:	431a      	orrs	r2, r3
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	621a      	str	r2, [r3, #32]
}
 801008e:	bf00      	nop
 8010090:	371c      	adds	r7, #28
 8010092:	46bd      	mov	sp, r7
 8010094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010098:	4770      	bx	lr
	...

0801009c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801009c:	b580      	push	{r7, lr}
 801009e:	b084      	sub	sp, #16
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
 80100a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80100a6:	683b      	ldr	r3, [r7, #0]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d109      	bne.n	80100c0 <HAL_TIMEx_PWMN_Start+0x24>
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80100b2:	b2db      	uxtb	r3, r3
 80100b4:	2b01      	cmp	r3, #1
 80100b6:	bf14      	ite	ne
 80100b8:	2301      	movne	r3, #1
 80100ba:	2300      	moveq	r3, #0
 80100bc:	b2db      	uxtb	r3, r3
 80100be:	e022      	b.n	8010106 <HAL_TIMEx_PWMN_Start+0x6a>
 80100c0:	683b      	ldr	r3, [r7, #0]
 80100c2:	2b04      	cmp	r3, #4
 80100c4:	d109      	bne.n	80100da <HAL_TIMEx_PWMN_Start+0x3e>
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80100cc:	b2db      	uxtb	r3, r3
 80100ce:	2b01      	cmp	r3, #1
 80100d0:	bf14      	ite	ne
 80100d2:	2301      	movne	r3, #1
 80100d4:	2300      	moveq	r3, #0
 80100d6:	b2db      	uxtb	r3, r3
 80100d8:	e015      	b.n	8010106 <HAL_TIMEx_PWMN_Start+0x6a>
 80100da:	683b      	ldr	r3, [r7, #0]
 80100dc:	2b08      	cmp	r3, #8
 80100de:	d109      	bne.n	80100f4 <HAL_TIMEx_PWMN_Start+0x58>
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80100e6:	b2db      	uxtb	r3, r3
 80100e8:	2b01      	cmp	r3, #1
 80100ea:	bf14      	ite	ne
 80100ec:	2301      	movne	r3, #1
 80100ee:	2300      	moveq	r3, #0
 80100f0:	b2db      	uxtb	r3, r3
 80100f2:	e008      	b.n	8010106 <HAL_TIMEx_PWMN_Start+0x6a>
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80100fa:	b2db      	uxtb	r3, r3
 80100fc:	2b01      	cmp	r3, #1
 80100fe:	bf14      	ite	ne
 8010100:	2301      	movne	r3, #1
 8010102:	2300      	moveq	r3, #0
 8010104:	b2db      	uxtb	r3, r3
 8010106:	2b00      	cmp	r3, #0
 8010108:	d001      	beq.n	801010e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 801010a:	2301      	movs	r3, #1
 801010c:	e07d      	b.n	801020a <HAL_TIMEx_PWMN_Start+0x16e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801010e:	683b      	ldr	r3, [r7, #0]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d104      	bne.n	801011e <HAL_TIMEx_PWMN_Start+0x82>
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	2202      	movs	r2, #2
 8010118:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801011c:	e013      	b.n	8010146 <HAL_TIMEx_PWMN_Start+0xaa>
 801011e:	683b      	ldr	r3, [r7, #0]
 8010120:	2b04      	cmp	r3, #4
 8010122:	d104      	bne.n	801012e <HAL_TIMEx_PWMN_Start+0x92>
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	2202      	movs	r2, #2
 8010128:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801012c:	e00b      	b.n	8010146 <HAL_TIMEx_PWMN_Start+0xaa>
 801012e:	683b      	ldr	r3, [r7, #0]
 8010130:	2b08      	cmp	r3, #8
 8010132:	d104      	bne.n	801013e <HAL_TIMEx_PWMN_Start+0xa2>
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	2202      	movs	r2, #2
 8010138:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801013c:	e003      	b.n	8010146 <HAL_TIMEx_PWMN_Start+0xaa>
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	2202      	movs	r2, #2
 8010142:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	2204      	movs	r2, #4
 801014c:	6839      	ldr	r1, [r7, #0]
 801014e:	4618      	mov	r0, r3
 8010150:	f000 fa0e 	bl	8010570 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8010162:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	4a2a      	ldr	r2, [pc, #168]	@ (8010214 <HAL_TIMEx_PWMN_Start+0x178>)
 801016a:	4293      	cmp	r3, r2
 801016c:	d02c      	beq.n	80101c8 <HAL_TIMEx_PWMN_Start+0x12c>
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010176:	d027      	beq.n	80101c8 <HAL_TIMEx_PWMN_Start+0x12c>
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	4a26      	ldr	r2, [pc, #152]	@ (8010218 <HAL_TIMEx_PWMN_Start+0x17c>)
 801017e:	4293      	cmp	r3, r2
 8010180:	d022      	beq.n	80101c8 <HAL_TIMEx_PWMN_Start+0x12c>
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	4a25      	ldr	r2, [pc, #148]	@ (801021c <HAL_TIMEx_PWMN_Start+0x180>)
 8010188:	4293      	cmp	r3, r2
 801018a:	d01d      	beq.n	80101c8 <HAL_TIMEx_PWMN_Start+0x12c>
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	4a23      	ldr	r2, [pc, #140]	@ (8010220 <HAL_TIMEx_PWMN_Start+0x184>)
 8010192:	4293      	cmp	r3, r2
 8010194:	d018      	beq.n	80101c8 <HAL_TIMEx_PWMN_Start+0x12c>
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	4a22      	ldr	r2, [pc, #136]	@ (8010224 <HAL_TIMEx_PWMN_Start+0x188>)
 801019c:	4293      	cmp	r3, r2
 801019e:	d013      	beq.n	80101c8 <HAL_TIMEx_PWMN_Start+0x12c>
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	4a20      	ldr	r2, [pc, #128]	@ (8010228 <HAL_TIMEx_PWMN_Start+0x18c>)
 80101a6:	4293      	cmp	r3, r2
 80101a8:	d00e      	beq.n	80101c8 <HAL_TIMEx_PWMN_Start+0x12c>
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	4a1f      	ldr	r2, [pc, #124]	@ (801022c <HAL_TIMEx_PWMN_Start+0x190>)
 80101b0:	4293      	cmp	r3, r2
 80101b2:	d009      	beq.n	80101c8 <HAL_TIMEx_PWMN_Start+0x12c>
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	4a1d      	ldr	r2, [pc, #116]	@ (8010230 <HAL_TIMEx_PWMN_Start+0x194>)
 80101ba:	4293      	cmp	r3, r2
 80101bc:	d004      	beq.n	80101c8 <HAL_TIMEx_PWMN_Start+0x12c>
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	4a1c      	ldr	r2, [pc, #112]	@ (8010234 <HAL_TIMEx_PWMN_Start+0x198>)
 80101c4:	4293      	cmp	r3, r2
 80101c6:	d115      	bne.n	80101f4 <HAL_TIMEx_PWMN_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	689a      	ldr	r2, [r3, #8]
 80101ce:	4b1a      	ldr	r3, [pc, #104]	@ (8010238 <HAL_TIMEx_PWMN_Start+0x19c>)
 80101d0:	4013      	ands	r3, r2
 80101d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	2b06      	cmp	r3, #6
 80101d8:	d015      	beq.n	8010206 <HAL_TIMEx_PWMN_Start+0x16a>
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80101e0:	d011      	beq.n	8010206 <HAL_TIMEx_PWMN_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	681a      	ldr	r2, [r3, #0]
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	f042 0201 	orr.w	r2, r2, #1
 80101f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80101f2:	e008      	b.n	8010206 <HAL_TIMEx_PWMN_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	681a      	ldr	r2, [r3, #0]
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	f042 0201 	orr.w	r2, r2, #1
 8010202:	601a      	str	r2, [r3, #0]
 8010204:	e000      	b.n	8010208 <HAL_TIMEx_PWMN_Start+0x16c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010206:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010208:	2300      	movs	r3, #0
}
 801020a:	4618      	mov	r0, r3
 801020c:	3710      	adds	r7, #16
 801020e:	46bd      	mov	sp, r7
 8010210:	bd80      	pop	{r7, pc}
 8010212:	bf00      	nop
 8010214:	40010000 	.word	0x40010000
 8010218:	40000400 	.word	0x40000400
 801021c:	40000800 	.word	0x40000800
 8010220:	40000c00 	.word	0x40000c00
 8010224:	40010400 	.word	0x40010400
 8010228:	40001800 	.word	0x40001800
 801022c:	40014000 	.word	0x40014000
 8010230:	4000e000 	.word	0x4000e000
 8010234:	4000e400 	.word	0x4000e400
 8010238:	00010007 	.word	0x00010007

0801023c <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801023c:	b580      	push	{r7, lr}
 801023e:	b082      	sub	sp, #8
 8010240:	af00      	add	r7, sp, #0
 8010242:	6078      	str	r0, [r7, #4]
 8010244:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	2200      	movs	r2, #0
 801024c:	6839      	ldr	r1, [r7, #0]
 801024e:	4618      	mov	r0, r3
 8010250:	f000 f98e 	bl	8010570 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	6a1a      	ldr	r2, [r3, #32]
 801025a:	f241 1311 	movw	r3, #4369	@ 0x1111
 801025e:	4013      	ands	r3, r2
 8010260:	2b00      	cmp	r3, #0
 8010262:	d10f      	bne.n	8010284 <HAL_TIMEx_PWMN_Stop+0x48>
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	6a1a      	ldr	r2, [r3, #32]
 801026a:	f240 4344 	movw	r3, #1092	@ 0x444
 801026e:	4013      	ands	r3, r2
 8010270:	2b00      	cmp	r3, #0
 8010272:	d107      	bne.n	8010284 <HAL_TIMEx_PWMN_Stop+0x48>
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8010282:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	6a1a      	ldr	r2, [r3, #32]
 801028a:	f241 1311 	movw	r3, #4369	@ 0x1111
 801028e:	4013      	ands	r3, r2
 8010290:	2b00      	cmp	r3, #0
 8010292:	d10f      	bne.n	80102b4 <HAL_TIMEx_PWMN_Stop+0x78>
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	6a1a      	ldr	r2, [r3, #32]
 801029a:	f240 4344 	movw	r3, #1092	@ 0x444
 801029e:	4013      	ands	r3, r2
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d107      	bne.n	80102b4 <HAL_TIMEx_PWMN_Stop+0x78>
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	681a      	ldr	r2, [r3, #0]
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	f022 0201 	bic.w	r2, r2, #1
 80102b2:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80102b4:	683b      	ldr	r3, [r7, #0]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d104      	bne.n	80102c4 <HAL_TIMEx_PWMN_Stop+0x88>
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	2201      	movs	r2, #1
 80102be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80102c2:	e013      	b.n	80102ec <HAL_TIMEx_PWMN_Stop+0xb0>
 80102c4:	683b      	ldr	r3, [r7, #0]
 80102c6:	2b04      	cmp	r3, #4
 80102c8:	d104      	bne.n	80102d4 <HAL_TIMEx_PWMN_Stop+0x98>
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	2201      	movs	r2, #1
 80102ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80102d2:	e00b      	b.n	80102ec <HAL_TIMEx_PWMN_Stop+0xb0>
 80102d4:	683b      	ldr	r3, [r7, #0]
 80102d6:	2b08      	cmp	r3, #8
 80102d8:	d104      	bne.n	80102e4 <HAL_TIMEx_PWMN_Stop+0xa8>
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	2201      	movs	r2, #1
 80102de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80102e2:	e003      	b.n	80102ec <HAL_TIMEx_PWMN_Stop+0xb0>
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	2201      	movs	r2, #1
 80102e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 80102ec:	2300      	movs	r3, #0
}
 80102ee:	4618      	mov	r0, r3
 80102f0:	3708      	adds	r7, #8
 80102f2:	46bd      	mov	sp, r7
 80102f4:	bd80      	pop	{r7, pc}
	...

080102f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80102f8:	b480      	push	{r7}
 80102fa:	b085      	sub	sp, #20
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	6078      	str	r0, [r7, #4]
 8010300:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010308:	2b01      	cmp	r3, #1
 801030a:	d101      	bne.n	8010310 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801030c:	2302      	movs	r3, #2
 801030e:	e077      	b.n	8010400 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	2201      	movs	r2, #1
 8010314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	2202      	movs	r2, #2
 801031c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	685b      	ldr	r3, [r3, #4]
 8010326:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	689b      	ldr	r3, [r3, #8]
 801032e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	4a35      	ldr	r2, [pc, #212]	@ (801040c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010336:	4293      	cmp	r3, r2
 8010338:	d004      	beq.n	8010344 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	4a34      	ldr	r2, [pc, #208]	@ (8010410 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010340:	4293      	cmp	r3, r2
 8010342:	d108      	bne.n	8010356 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 801034a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801034c:	683b      	ldr	r3, [r7, #0]
 801034e:	685b      	ldr	r3, [r3, #4]
 8010350:	68fa      	ldr	r2, [r7, #12]
 8010352:	4313      	orrs	r3, r2
 8010354:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801035c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801035e:	683b      	ldr	r3, [r7, #0]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	68fa      	ldr	r2, [r7, #12]
 8010364:	4313      	orrs	r3, r2
 8010366:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	68fa      	ldr	r2, [r7, #12]
 801036e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	4a25      	ldr	r2, [pc, #148]	@ (801040c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010376:	4293      	cmp	r3, r2
 8010378:	d02c      	beq.n	80103d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010382:	d027      	beq.n	80103d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	4a22      	ldr	r2, [pc, #136]	@ (8010414 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 801038a:	4293      	cmp	r3, r2
 801038c:	d022      	beq.n	80103d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	4a21      	ldr	r2, [pc, #132]	@ (8010418 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8010394:	4293      	cmp	r3, r2
 8010396:	d01d      	beq.n	80103d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	4a1f      	ldr	r2, [pc, #124]	@ (801041c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 801039e:	4293      	cmp	r3, r2
 80103a0:	d018      	beq.n	80103d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	4a1a      	ldr	r2, [pc, #104]	@ (8010410 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80103a8:	4293      	cmp	r3, r2
 80103aa:	d013      	beq.n	80103d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	4a1b      	ldr	r2, [pc, #108]	@ (8010420 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80103b2:	4293      	cmp	r3, r2
 80103b4:	d00e      	beq.n	80103d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	4a1a      	ldr	r2, [pc, #104]	@ (8010424 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80103bc:	4293      	cmp	r3, r2
 80103be:	d009      	beq.n	80103d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	4a18      	ldr	r2, [pc, #96]	@ (8010428 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80103c6:	4293      	cmp	r3, r2
 80103c8:	d004      	beq.n	80103d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	4a17      	ldr	r2, [pc, #92]	@ (801042c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80103d0:	4293      	cmp	r3, r2
 80103d2:	d10c      	bne.n	80103ee <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80103d4:	68bb      	ldr	r3, [r7, #8]
 80103d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80103da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80103dc:	683b      	ldr	r3, [r7, #0]
 80103de:	689b      	ldr	r3, [r3, #8]
 80103e0:	68ba      	ldr	r2, [r7, #8]
 80103e2:	4313      	orrs	r3, r2
 80103e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	68ba      	ldr	r2, [r7, #8]
 80103ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	2201      	movs	r2, #1
 80103f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	2200      	movs	r2, #0
 80103fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80103fe:	2300      	movs	r3, #0
}
 8010400:	4618      	mov	r0, r3
 8010402:	3714      	adds	r7, #20
 8010404:	46bd      	mov	sp, r7
 8010406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801040a:	4770      	bx	lr
 801040c:	40010000 	.word	0x40010000
 8010410:	40010400 	.word	0x40010400
 8010414:	40000400 	.word	0x40000400
 8010418:	40000800 	.word	0x40000800
 801041c:	40000c00 	.word	0x40000c00
 8010420:	40001800 	.word	0x40001800
 8010424:	40014000 	.word	0x40014000
 8010428:	4000e000 	.word	0x4000e000
 801042c:	4000e400 	.word	0x4000e400

08010430 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8010430:	b480      	push	{r7}
 8010432:	b085      	sub	sp, #20
 8010434:	af00      	add	r7, sp, #0
 8010436:	6078      	str	r0, [r7, #4]
 8010438:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801043a:	2300      	movs	r3, #0
 801043c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010444:	2b01      	cmp	r3, #1
 8010446:	d101      	bne.n	801044c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8010448:	2302      	movs	r3, #2
 801044a:	e087      	b.n	801055c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	2201      	movs	r2, #1
 8010450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801045a:	683b      	ldr	r3, [r7, #0]
 801045c:	68db      	ldr	r3, [r3, #12]
 801045e:	4313      	orrs	r3, r2
 8010460:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8010468:	683b      	ldr	r3, [r7, #0]
 801046a:	689b      	ldr	r3, [r3, #8]
 801046c:	4313      	orrs	r3, r2
 801046e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8010476:	683b      	ldr	r3, [r7, #0]
 8010478:	685b      	ldr	r3, [r3, #4]
 801047a:	4313      	orrs	r3, r2
 801047c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8010484:	683b      	ldr	r3, [r7, #0]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	4313      	orrs	r3, r2
 801048a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8010492:	683b      	ldr	r3, [r7, #0]
 8010494:	691b      	ldr	r3, [r3, #16]
 8010496:	4313      	orrs	r3, r2
 8010498:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80104a0:	683b      	ldr	r3, [r7, #0]
 80104a2:	695b      	ldr	r3, [r3, #20]
 80104a4:	4313      	orrs	r3, r2
 80104a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80104ae:	683b      	ldr	r3, [r7, #0]
 80104b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80104b2:	4313      	orrs	r3, r2
 80104b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80104bc:	683b      	ldr	r3, [r7, #0]
 80104be:	699b      	ldr	r3, [r3, #24]
 80104c0:	041b      	lsls	r3, r3, #16
 80104c2:	4313      	orrs	r3, r2
 80104c4:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	4a27      	ldr	r2, [pc, #156]	@ (8010568 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80104cc:	4293      	cmp	r3, r2
 80104ce:	d004      	beq.n	80104da <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	4a25      	ldr	r2, [pc, #148]	@ (801056c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80104d6:	4293      	cmp	r3, r2
 80104d8:	d106      	bne.n	80104e8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80104e0:	683b      	ldr	r3, [r7, #0]
 80104e2:	69db      	ldr	r3, [r3, #28]
 80104e4:	4313      	orrs	r3, r2
 80104e6:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	4a1e      	ldr	r2, [pc, #120]	@ (8010568 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80104ee:	4293      	cmp	r3, r2
 80104f0:	d004      	beq.n	80104fc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	4a1d      	ldr	r2, [pc, #116]	@ (801056c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80104f8:	4293      	cmp	r3, r2
 80104fa:	d126      	bne.n	801054a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8010502:	683b      	ldr	r3, [r7, #0]
 8010504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010506:	051b      	lsls	r3, r3, #20
 8010508:	4313      	orrs	r3, r2
 801050a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8010512:	683b      	ldr	r3, [r7, #0]
 8010514:	6a1b      	ldr	r3, [r3, #32]
 8010516:	4313      	orrs	r3, r2
 8010518:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8010520:	683b      	ldr	r3, [r7, #0]
 8010522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010524:	4313      	orrs	r3, r2
 8010526:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	4a0e      	ldr	r2, [pc, #56]	@ (8010568 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 801052e:	4293      	cmp	r3, r2
 8010530:	d004      	beq.n	801053c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	4a0d      	ldr	r2, [pc, #52]	@ (801056c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8010538:	4293      	cmp	r3, r2
 801053a:	d106      	bne.n	801054a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8010542:	683b      	ldr	r3, [r7, #0]
 8010544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010546:	4313      	orrs	r3, r2
 8010548:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	68fa      	ldr	r2, [r7, #12]
 8010550:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	2200      	movs	r2, #0
 8010556:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801055a:	2300      	movs	r3, #0
}
 801055c:	4618      	mov	r0, r3
 801055e:	3714      	adds	r7, #20
 8010560:	46bd      	mov	sp, r7
 8010562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010566:	4770      	bx	lr
 8010568:	40010000 	.word	0x40010000
 801056c:	40010400 	.word	0x40010400

08010570 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8010570:	b480      	push	{r7}
 8010572:	b087      	sub	sp, #28
 8010574:	af00      	add	r7, sp, #0
 8010576:	60f8      	str	r0, [r7, #12]
 8010578:	60b9      	str	r1, [r7, #8]
 801057a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801057c:	68bb      	ldr	r3, [r7, #8]
 801057e:	f003 031f 	and.w	r3, r3, #31
 8010582:	2204      	movs	r2, #4
 8010584:	fa02 f303 	lsl.w	r3, r2, r3
 8010588:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	6a1a      	ldr	r2, [r3, #32]
 801058e:	697b      	ldr	r3, [r7, #20]
 8010590:	43db      	mvns	r3, r3
 8010592:	401a      	ands	r2, r3
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	6a1a      	ldr	r2, [r3, #32]
 801059c:	68bb      	ldr	r3, [r7, #8]
 801059e:	f003 031f 	and.w	r3, r3, #31
 80105a2:	6879      	ldr	r1, [r7, #4]
 80105a4:	fa01 f303 	lsl.w	r3, r1, r3
 80105a8:	431a      	orrs	r2, r3
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	621a      	str	r2, [r3, #32]
}
 80105ae:	bf00      	nop
 80105b0:	371c      	adds	r7, #28
 80105b2:	46bd      	mov	sp, r7
 80105b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b8:	4770      	bx	lr

080105ba <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80105ba:	b580      	push	{r7, lr}
 80105bc:	b082      	sub	sp, #8
 80105be:	af00      	add	r7, sp, #0
 80105c0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d101      	bne.n	80105cc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80105c8:	2301      	movs	r3, #1
 80105ca:	e042      	b.n	8010652 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d106      	bne.n	80105e4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	2200      	movs	r2, #0
 80105da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80105de:	6878      	ldr	r0, [r7, #4]
 80105e0:	f7f3 ff84 	bl	80044ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	2224      	movs	r2, #36	@ 0x24
 80105e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	681a      	ldr	r2, [r3, #0]
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	f022 0201 	bic.w	r2, r2, #1
 80105fa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80105fc:	6878      	ldr	r0, [r7, #4]
 80105fe:	f000 f983 	bl	8010908 <UART_SetConfig>
 8010602:	4603      	mov	r3, r0
 8010604:	2b01      	cmp	r3, #1
 8010606:	d101      	bne.n	801060c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8010608:	2301      	movs	r3, #1
 801060a:	e022      	b.n	8010652 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010610:	2b00      	cmp	r3, #0
 8010612:	d002      	beq.n	801061a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8010614:	6878      	ldr	r0, [r7, #4]
 8010616:	f000 ffe3 	bl	80115e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	685a      	ldr	r2, [r3, #4]
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8010628:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	689a      	ldr	r2, [r3, #8]
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8010638:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	681a      	ldr	r2, [r3, #0]
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	f042 0201 	orr.w	r2, r2, #1
 8010648:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801064a:	6878      	ldr	r0, [r7, #4]
 801064c:	f001 f86a 	bl	8011724 <UART_CheckIdleState>
 8010650:	4603      	mov	r3, r0
}
 8010652:	4618      	mov	r0, r3
 8010654:	3708      	adds	r7, #8
 8010656:	46bd      	mov	sp, r7
 8010658:	bd80      	pop	{r7, pc}

0801065a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801065a:	b580      	push	{r7, lr}
 801065c:	b08a      	sub	sp, #40	@ 0x28
 801065e:	af02      	add	r7, sp, #8
 8010660:	60f8      	str	r0, [r7, #12]
 8010662:	60b9      	str	r1, [r7, #8]
 8010664:	603b      	str	r3, [r7, #0]
 8010666:	4613      	mov	r3, r2
 8010668:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010670:	2b20      	cmp	r3, #32
 8010672:	d17b      	bne.n	801076c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8010674:	68bb      	ldr	r3, [r7, #8]
 8010676:	2b00      	cmp	r3, #0
 8010678:	d002      	beq.n	8010680 <HAL_UART_Transmit+0x26>
 801067a:	88fb      	ldrh	r3, [r7, #6]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d101      	bne.n	8010684 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8010680:	2301      	movs	r3, #1
 8010682:	e074      	b.n	801076e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	2200      	movs	r2, #0
 8010688:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	2221      	movs	r2, #33	@ 0x21
 8010690:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010694:	f7f4 fbb0 	bl	8004df8 <HAL_GetTick>
 8010698:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	88fa      	ldrh	r2, [r7, #6]
 801069e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	88fa      	ldrh	r2, [r7, #6]
 80106a6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	689b      	ldr	r3, [r3, #8]
 80106ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80106b2:	d108      	bne.n	80106c6 <HAL_UART_Transmit+0x6c>
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	691b      	ldr	r3, [r3, #16]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d104      	bne.n	80106c6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80106bc:	2300      	movs	r3, #0
 80106be:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80106c0:	68bb      	ldr	r3, [r7, #8]
 80106c2:	61bb      	str	r3, [r7, #24]
 80106c4:	e003      	b.n	80106ce <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80106c6:	68bb      	ldr	r3, [r7, #8]
 80106c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80106ca:	2300      	movs	r3, #0
 80106cc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80106ce:	e030      	b.n	8010732 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80106d0:	683b      	ldr	r3, [r7, #0]
 80106d2:	9300      	str	r3, [sp, #0]
 80106d4:	697b      	ldr	r3, [r7, #20]
 80106d6:	2200      	movs	r2, #0
 80106d8:	2180      	movs	r1, #128	@ 0x80
 80106da:	68f8      	ldr	r0, [r7, #12]
 80106dc:	f001 f8cc 	bl	8011878 <UART_WaitOnFlagUntilTimeout>
 80106e0:	4603      	mov	r3, r0
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d005      	beq.n	80106f2 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	2220      	movs	r2, #32
 80106ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80106ee:	2303      	movs	r3, #3
 80106f0:	e03d      	b.n	801076e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80106f2:	69fb      	ldr	r3, [r7, #28]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d10b      	bne.n	8010710 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80106f8:	69bb      	ldr	r3, [r7, #24]
 80106fa:	881b      	ldrh	r3, [r3, #0]
 80106fc:	461a      	mov	r2, r3
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010706:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8010708:	69bb      	ldr	r3, [r7, #24]
 801070a:	3302      	adds	r3, #2
 801070c:	61bb      	str	r3, [r7, #24]
 801070e:	e007      	b.n	8010720 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010710:	69fb      	ldr	r3, [r7, #28]
 8010712:	781a      	ldrb	r2, [r3, #0]
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 801071a:	69fb      	ldr	r3, [r7, #28]
 801071c:	3301      	adds	r3, #1
 801071e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010726:	b29b      	uxth	r3, r3
 8010728:	3b01      	subs	r3, #1
 801072a:	b29a      	uxth	r2, r3
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8010738:	b29b      	uxth	r3, r3
 801073a:	2b00      	cmp	r3, #0
 801073c:	d1c8      	bne.n	80106d0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801073e:	683b      	ldr	r3, [r7, #0]
 8010740:	9300      	str	r3, [sp, #0]
 8010742:	697b      	ldr	r3, [r7, #20]
 8010744:	2200      	movs	r2, #0
 8010746:	2140      	movs	r1, #64	@ 0x40
 8010748:	68f8      	ldr	r0, [r7, #12]
 801074a:	f001 f895 	bl	8011878 <UART_WaitOnFlagUntilTimeout>
 801074e:	4603      	mov	r3, r0
 8010750:	2b00      	cmp	r3, #0
 8010752:	d005      	beq.n	8010760 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	2220      	movs	r2, #32
 8010758:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 801075c:	2303      	movs	r3, #3
 801075e:	e006      	b.n	801076e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	2220      	movs	r2, #32
 8010764:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8010768:	2300      	movs	r3, #0
 801076a:	e000      	b.n	801076e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801076c:	2302      	movs	r3, #2
  }
}
 801076e:	4618      	mov	r0, r3
 8010770:	3720      	adds	r7, #32
 8010772:	46bd      	mov	sp, r7
 8010774:	bd80      	pop	{r7, pc}

08010776 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010776:	b580      	push	{r7, lr}
 8010778:	b08a      	sub	sp, #40	@ 0x28
 801077a:	af02      	add	r7, sp, #8
 801077c:	60f8      	str	r0, [r7, #12]
 801077e:	60b9      	str	r1, [r7, #8]
 8010780:	603b      	str	r3, [r7, #0]
 8010782:	4613      	mov	r3, r2
 8010784:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801078c:	2b20      	cmp	r3, #32
 801078e:	f040 80b5 	bne.w	80108fc <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8010792:	68bb      	ldr	r3, [r7, #8]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d002      	beq.n	801079e <HAL_UART_Receive+0x28>
 8010798:	88fb      	ldrh	r3, [r7, #6]
 801079a:	2b00      	cmp	r3, #0
 801079c:	d101      	bne.n	80107a2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 801079e:	2301      	movs	r3, #1
 80107a0:	e0ad      	b.n	80108fe <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	2200      	movs	r2, #0
 80107a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	2222      	movs	r2, #34	@ 0x22
 80107ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	2200      	movs	r2, #0
 80107b6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80107b8:	f7f4 fb1e 	bl	8004df8 <HAL_GetTick>
 80107bc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	88fa      	ldrh	r2, [r7, #6]
 80107c2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	88fa      	ldrh	r2, [r7, #6]
 80107ca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	689b      	ldr	r3, [r3, #8]
 80107d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80107d6:	d10e      	bne.n	80107f6 <HAL_UART_Receive+0x80>
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	691b      	ldr	r3, [r3, #16]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d105      	bne.n	80107ec <HAL_UART_Receive+0x76>
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80107e6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80107ea:	e02d      	b.n	8010848 <HAL_UART_Receive+0xd2>
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	22ff      	movs	r2, #255	@ 0xff
 80107f0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80107f4:	e028      	b.n	8010848 <HAL_UART_Receive+0xd2>
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	689b      	ldr	r3, [r3, #8]
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d10d      	bne.n	801081a <HAL_UART_Receive+0xa4>
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	691b      	ldr	r3, [r3, #16]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d104      	bne.n	8010810 <HAL_UART_Receive+0x9a>
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	22ff      	movs	r2, #255	@ 0xff
 801080a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801080e:	e01b      	b.n	8010848 <HAL_UART_Receive+0xd2>
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	227f      	movs	r2, #127	@ 0x7f
 8010814:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010818:	e016      	b.n	8010848 <HAL_UART_Receive+0xd2>
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	689b      	ldr	r3, [r3, #8]
 801081e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010822:	d10d      	bne.n	8010840 <HAL_UART_Receive+0xca>
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	691b      	ldr	r3, [r3, #16]
 8010828:	2b00      	cmp	r3, #0
 801082a:	d104      	bne.n	8010836 <HAL_UART_Receive+0xc0>
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	227f      	movs	r2, #127	@ 0x7f
 8010830:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010834:	e008      	b.n	8010848 <HAL_UART_Receive+0xd2>
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	223f      	movs	r2, #63	@ 0x3f
 801083a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801083e:	e003      	b.n	8010848 <HAL_UART_Receive+0xd2>
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	2200      	movs	r2, #0
 8010844:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8010848:	68fb      	ldr	r3, [r7, #12]
 801084a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801084e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	689b      	ldr	r3, [r3, #8]
 8010854:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010858:	d108      	bne.n	801086c <HAL_UART_Receive+0xf6>
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	691b      	ldr	r3, [r3, #16]
 801085e:	2b00      	cmp	r3, #0
 8010860:	d104      	bne.n	801086c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8010862:	2300      	movs	r3, #0
 8010864:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8010866:	68bb      	ldr	r3, [r7, #8]
 8010868:	61bb      	str	r3, [r7, #24]
 801086a:	e003      	b.n	8010874 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 801086c:	68bb      	ldr	r3, [r7, #8]
 801086e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010870:	2300      	movs	r3, #0
 8010872:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8010874:	e036      	b.n	80108e4 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8010876:	683b      	ldr	r3, [r7, #0]
 8010878:	9300      	str	r3, [sp, #0]
 801087a:	697b      	ldr	r3, [r7, #20]
 801087c:	2200      	movs	r2, #0
 801087e:	2120      	movs	r1, #32
 8010880:	68f8      	ldr	r0, [r7, #12]
 8010882:	f000 fff9 	bl	8011878 <UART_WaitOnFlagUntilTimeout>
 8010886:	4603      	mov	r3, r0
 8010888:	2b00      	cmp	r3, #0
 801088a:	d005      	beq.n	8010898 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	2220      	movs	r2, #32
 8010890:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8010894:	2303      	movs	r3, #3
 8010896:	e032      	b.n	80108fe <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8010898:	69fb      	ldr	r3, [r7, #28]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d10c      	bne.n	80108b8 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80108a4:	b29a      	uxth	r2, r3
 80108a6:	8a7b      	ldrh	r3, [r7, #18]
 80108a8:	4013      	ands	r3, r2
 80108aa:	b29a      	uxth	r2, r3
 80108ac:	69bb      	ldr	r3, [r7, #24]
 80108ae:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80108b0:	69bb      	ldr	r3, [r7, #24]
 80108b2:	3302      	adds	r3, #2
 80108b4:	61bb      	str	r3, [r7, #24]
 80108b6:	e00c      	b.n	80108d2 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80108be:	b2da      	uxtb	r2, r3
 80108c0:	8a7b      	ldrh	r3, [r7, #18]
 80108c2:	b2db      	uxtb	r3, r3
 80108c4:	4013      	ands	r3, r2
 80108c6:	b2da      	uxtb	r2, r3
 80108c8:	69fb      	ldr	r3, [r7, #28]
 80108ca:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80108cc:	69fb      	ldr	r3, [r7, #28]
 80108ce:	3301      	adds	r3, #1
 80108d0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80108d8:	b29b      	uxth	r3, r3
 80108da:	3b01      	subs	r3, #1
 80108dc:	b29a      	uxth	r2, r3
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80108ea:	b29b      	uxth	r3, r3
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d1c2      	bne.n	8010876 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	2220      	movs	r2, #32
 80108f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80108f8:	2300      	movs	r3, #0
 80108fa:	e000      	b.n	80108fe <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80108fc:	2302      	movs	r3, #2
  }
}
 80108fe:	4618      	mov	r0, r3
 8010900:	3720      	adds	r7, #32
 8010902:	46bd      	mov	sp, r7
 8010904:	bd80      	pop	{r7, pc}
	...

08010908 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010908:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801090c:	b092      	sub	sp, #72	@ 0x48
 801090e:	af00      	add	r7, sp, #0
 8010910:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010912:	2300      	movs	r3, #0
 8010914:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010918:	697b      	ldr	r3, [r7, #20]
 801091a:	689a      	ldr	r2, [r3, #8]
 801091c:	697b      	ldr	r3, [r7, #20]
 801091e:	691b      	ldr	r3, [r3, #16]
 8010920:	431a      	orrs	r2, r3
 8010922:	697b      	ldr	r3, [r7, #20]
 8010924:	695b      	ldr	r3, [r3, #20]
 8010926:	431a      	orrs	r2, r3
 8010928:	697b      	ldr	r3, [r7, #20]
 801092a:	69db      	ldr	r3, [r3, #28]
 801092c:	4313      	orrs	r3, r2
 801092e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010930:	697b      	ldr	r3, [r7, #20]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	681a      	ldr	r2, [r3, #0]
 8010936:	4bbe      	ldr	r3, [pc, #760]	@ (8010c30 <UART_SetConfig+0x328>)
 8010938:	4013      	ands	r3, r2
 801093a:	697a      	ldr	r2, [r7, #20]
 801093c:	6812      	ldr	r2, [r2, #0]
 801093e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010940:	430b      	orrs	r3, r1
 8010942:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010944:	697b      	ldr	r3, [r7, #20]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	685b      	ldr	r3, [r3, #4]
 801094a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801094e:	697b      	ldr	r3, [r7, #20]
 8010950:	68da      	ldr	r2, [r3, #12]
 8010952:	697b      	ldr	r3, [r7, #20]
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	430a      	orrs	r2, r1
 8010958:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801095a:	697b      	ldr	r3, [r7, #20]
 801095c:	699b      	ldr	r3, [r3, #24]
 801095e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010960:	697b      	ldr	r3, [r7, #20]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	4ab3      	ldr	r2, [pc, #716]	@ (8010c34 <UART_SetConfig+0x32c>)
 8010966:	4293      	cmp	r3, r2
 8010968:	d004      	beq.n	8010974 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801096a:	697b      	ldr	r3, [r7, #20]
 801096c:	6a1b      	ldr	r3, [r3, #32]
 801096e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010970:	4313      	orrs	r3, r2
 8010972:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010974:	697b      	ldr	r3, [r7, #20]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	689a      	ldr	r2, [r3, #8]
 801097a:	4baf      	ldr	r3, [pc, #700]	@ (8010c38 <UART_SetConfig+0x330>)
 801097c:	4013      	ands	r3, r2
 801097e:	697a      	ldr	r2, [r7, #20]
 8010980:	6812      	ldr	r2, [r2, #0]
 8010982:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010984:	430b      	orrs	r3, r1
 8010986:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010988:	697b      	ldr	r3, [r7, #20]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801098e:	f023 010f 	bic.w	r1, r3, #15
 8010992:	697b      	ldr	r3, [r7, #20]
 8010994:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010996:	697b      	ldr	r3, [r7, #20]
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	430a      	orrs	r2, r1
 801099c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801099e:	697b      	ldr	r3, [r7, #20]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	4aa6      	ldr	r2, [pc, #664]	@ (8010c3c <UART_SetConfig+0x334>)
 80109a4:	4293      	cmp	r3, r2
 80109a6:	d177      	bne.n	8010a98 <UART_SetConfig+0x190>
 80109a8:	4ba5      	ldr	r3, [pc, #660]	@ (8010c40 <UART_SetConfig+0x338>)
 80109aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80109ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80109b0:	2b28      	cmp	r3, #40	@ 0x28
 80109b2:	d86d      	bhi.n	8010a90 <UART_SetConfig+0x188>
 80109b4:	a201      	add	r2, pc, #4	@ (adr r2, 80109bc <UART_SetConfig+0xb4>)
 80109b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109ba:	bf00      	nop
 80109bc:	08010a61 	.word	0x08010a61
 80109c0:	08010a91 	.word	0x08010a91
 80109c4:	08010a91 	.word	0x08010a91
 80109c8:	08010a91 	.word	0x08010a91
 80109cc:	08010a91 	.word	0x08010a91
 80109d0:	08010a91 	.word	0x08010a91
 80109d4:	08010a91 	.word	0x08010a91
 80109d8:	08010a91 	.word	0x08010a91
 80109dc:	08010a69 	.word	0x08010a69
 80109e0:	08010a91 	.word	0x08010a91
 80109e4:	08010a91 	.word	0x08010a91
 80109e8:	08010a91 	.word	0x08010a91
 80109ec:	08010a91 	.word	0x08010a91
 80109f0:	08010a91 	.word	0x08010a91
 80109f4:	08010a91 	.word	0x08010a91
 80109f8:	08010a91 	.word	0x08010a91
 80109fc:	08010a71 	.word	0x08010a71
 8010a00:	08010a91 	.word	0x08010a91
 8010a04:	08010a91 	.word	0x08010a91
 8010a08:	08010a91 	.word	0x08010a91
 8010a0c:	08010a91 	.word	0x08010a91
 8010a10:	08010a91 	.word	0x08010a91
 8010a14:	08010a91 	.word	0x08010a91
 8010a18:	08010a91 	.word	0x08010a91
 8010a1c:	08010a79 	.word	0x08010a79
 8010a20:	08010a91 	.word	0x08010a91
 8010a24:	08010a91 	.word	0x08010a91
 8010a28:	08010a91 	.word	0x08010a91
 8010a2c:	08010a91 	.word	0x08010a91
 8010a30:	08010a91 	.word	0x08010a91
 8010a34:	08010a91 	.word	0x08010a91
 8010a38:	08010a91 	.word	0x08010a91
 8010a3c:	08010a81 	.word	0x08010a81
 8010a40:	08010a91 	.word	0x08010a91
 8010a44:	08010a91 	.word	0x08010a91
 8010a48:	08010a91 	.word	0x08010a91
 8010a4c:	08010a91 	.word	0x08010a91
 8010a50:	08010a91 	.word	0x08010a91
 8010a54:	08010a91 	.word	0x08010a91
 8010a58:	08010a91 	.word	0x08010a91
 8010a5c:	08010a89 	.word	0x08010a89
 8010a60:	2301      	movs	r3, #1
 8010a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a66:	e326      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010a68:	2304      	movs	r3, #4
 8010a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a6e:	e322      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010a70:	2308      	movs	r3, #8
 8010a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a76:	e31e      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010a78:	2310      	movs	r3, #16
 8010a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a7e:	e31a      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010a80:	2320      	movs	r3, #32
 8010a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a86:	e316      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010a88:	2340      	movs	r3, #64	@ 0x40
 8010a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a8e:	e312      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010a90:	2380      	movs	r3, #128	@ 0x80
 8010a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a96:	e30e      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010a98:	697b      	ldr	r3, [r7, #20]
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	4a69      	ldr	r2, [pc, #420]	@ (8010c44 <UART_SetConfig+0x33c>)
 8010a9e:	4293      	cmp	r3, r2
 8010aa0:	d130      	bne.n	8010b04 <UART_SetConfig+0x1fc>
 8010aa2:	4b67      	ldr	r3, [pc, #412]	@ (8010c40 <UART_SetConfig+0x338>)
 8010aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010aa6:	f003 0307 	and.w	r3, r3, #7
 8010aaa:	2b05      	cmp	r3, #5
 8010aac:	d826      	bhi.n	8010afc <UART_SetConfig+0x1f4>
 8010aae:	a201      	add	r2, pc, #4	@ (adr r2, 8010ab4 <UART_SetConfig+0x1ac>)
 8010ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ab4:	08010acd 	.word	0x08010acd
 8010ab8:	08010ad5 	.word	0x08010ad5
 8010abc:	08010add 	.word	0x08010add
 8010ac0:	08010ae5 	.word	0x08010ae5
 8010ac4:	08010aed 	.word	0x08010aed
 8010ac8:	08010af5 	.word	0x08010af5
 8010acc:	2300      	movs	r3, #0
 8010ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ad2:	e2f0      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010ad4:	2304      	movs	r3, #4
 8010ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ada:	e2ec      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010adc:	2308      	movs	r3, #8
 8010ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ae2:	e2e8      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010ae4:	2310      	movs	r3, #16
 8010ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010aea:	e2e4      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010aec:	2320      	movs	r3, #32
 8010aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010af2:	e2e0      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010af4:	2340      	movs	r3, #64	@ 0x40
 8010af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010afa:	e2dc      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010afc:	2380      	movs	r3, #128	@ 0x80
 8010afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b02:	e2d8      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010b04:	697b      	ldr	r3, [r7, #20]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	4a4f      	ldr	r2, [pc, #316]	@ (8010c48 <UART_SetConfig+0x340>)
 8010b0a:	4293      	cmp	r3, r2
 8010b0c:	d130      	bne.n	8010b70 <UART_SetConfig+0x268>
 8010b0e:	4b4c      	ldr	r3, [pc, #304]	@ (8010c40 <UART_SetConfig+0x338>)
 8010b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010b12:	f003 0307 	and.w	r3, r3, #7
 8010b16:	2b05      	cmp	r3, #5
 8010b18:	d826      	bhi.n	8010b68 <UART_SetConfig+0x260>
 8010b1a:	a201      	add	r2, pc, #4	@ (adr r2, 8010b20 <UART_SetConfig+0x218>)
 8010b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b20:	08010b39 	.word	0x08010b39
 8010b24:	08010b41 	.word	0x08010b41
 8010b28:	08010b49 	.word	0x08010b49
 8010b2c:	08010b51 	.word	0x08010b51
 8010b30:	08010b59 	.word	0x08010b59
 8010b34:	08010b61 	.word	0x08010b61
 8010b38:	2300      	movs	r3, #0
 8010b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b3e:	e2ba      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010b40:	2304      	movs	r3, #4
 8010b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b46:	e2b6      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010b48:	2308      	movs	r3, #8
 8010b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b4e:	e2b2      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010b50:	2310      	movs	r3, #16
 8010b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b56:	e2ae      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010b58:	2320      	movs	r3, #32
 8010b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b5e:	e2aa      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010b60:	2340      	movs	r3, #64	@ 0x40
 8010b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b66:	e2a6      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010b68:	2380      	movs	r3, #128	@ 0x80
 8010b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b6e:	e2a2      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010b70:	697b      	ldr	r3, [r7, #20]
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	4a35      	ldr	r2, [pc, #212]	@ (8010c4c <UART_SetConfig+0x344>)
 8010b76:	4293      	cmp	r3, r2
 8010b78:	d130      	bne.n	8010bdc <UART_SetConfig+0x2d4>
 8010b7a:	4b31      	ldr	r3, [pc, #196]	@ (8010c40 <UART_SetConfig+0x338>)
 8010b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010b7e:	f003 0307 	and.w	r3, r3, #7
 8010b82:	2b05      	cmp	r3, #5
 8010b84:	d826      	bhi.n	8010bd4 <UART_SetConfig+0x2cc>
 8010b86:	a201      	add	r2, pc, #4	@ (adr r2, 8010b8c <UART_SetConfig+0x284>)
 8010b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b8c:	08010ba5 	.word	0x08010ba5
 8010b90:	08010bad 	.word	0x08010bad
 8010b94:	08010bb5 	.word	0x08010bb5
 8010b98:	08010bbd 	.word	0x08010bbd
 8010b9c:	08010bc5 	.word	0x08010bc5
 8010ba0:	08010bcd 	.word	0x08010bcd
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010baa:	e284      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010bac:	2304      	movs	r3, #4
 8010bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010bb2:	e280      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010bb4:	2308      	movs	r3, #8
 8010bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010bba:	e27c      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010bbc:	2310      	movs	r3, #16
 8010bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010bc2:	e278      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010bc4:	2320      	movs	r3, #32
 8010bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010bca:	e274      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010bcc:	2340      	movs	r3, #64	@ 0x40
 8010bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010bd2:	e270      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010bd4:	2380      	movs	r3, #128	@ 0x80
 8010bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010bda:	e26c      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010bdc:	697b      	ldr	r3, [r7, #20]
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	4a1b      	ldr	r2, [pc, #108]	@ (8010c50 <UART_SetConfig+0x348>)
 8010be2:	4293      	cmp	r3, r2
 8010be4:	d142      	bne.n	8010c6c <UART_SetConfig+0x364>
 8010be6:	4b16      	ldr	r3, [pc, #88]	@ (8010c40 <UART_SetConfig+0x338>)
 8010be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010bea:	f003 0307 	and.w	r3, r3, #7
 8010bee:	2b05      	cmp	r3, #5
 8010bf0:	d838      	bhi.n	8010c64 <UART_SetConfig+0x35c>
 8010bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8010bf8 <UART_SetConfig+0x2f0>)
 8010bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bf8:	08010c11 	.word	0x08010c11
 8010bfc:	08010c19 	.word	0x08010c19
 8010c00:	08010c21 	.word	0x08010c21
 8010c04:	08010c29 	.word	0x08010c29
 8010c08:	08010c55 	.word	0x08010c55
 8010c0c:	08010c5d 	.word	0x08010c5d
 8010c10:	2300      	movs	r3, #0
 8010c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c16:	e24e      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010c18:	2304      	movs	r3, #4
 8010c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c1e:	e24a      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010c20:	2308      	movs	r3, #8
 8010c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c26:	e246      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010c28:	2310      	movs	r3, #16
 8010c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c2e:	e242      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010c30:	cfff69f3 	.word	0xcfff69f3
 8010c34:	58000c00 	.word	0x58000c00
 8010c38:	11fff4ff 	.word	0x11fff4ff
 8010c3c:	40011000 	.word	0x40011000
 8010c40:	58024400 	.word	0x58024400
 8010c44:	40004400 	.word	0x40004400
 8010c48:	40004800 	.word	0x40004800
 8010c4c:	40004c00 	.word	0x40004c00
 8010c50:	40005000 	.word	0x40005000
 8010c54:	2320      	movs	r3, #32
 8010c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c5a:	e22c      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010c5c:	2340      	movs	r3, #64	@ 0x40
 8010c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c62:	e228      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010c64:	2380      	movs	r3, #128	@ 0x80
 8010c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c6a:	e224      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010c6c:	697b      	ldr	r3, [r7, #20]
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	4ab1      	ldr	r2, [pc, #708]	@ (8010f38 <UART_SetConfig+0x630>)
 8010c72:	4293      	cmp	r3, r2
 8010c74:	d176      	bne.n	8010d64 <UART_SetConfig+0x45c>
 8010c76:	4bb1      	ldr	r3, [pc, #708]	@ (8010f3c <UART_SetConfig+0x634>)
 8010c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010c7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010c7e:	2b28      	cmp	r3, #40	@ 0x28
 8010c80:	d86c      	bhi.n	8010d5c <UART_SetConfig+0x454>
 8010c82:	a201      	add	r2, pc, #4	@ (adr r2, 8010c88 <UART_SetConfig+0x380>)
 8010c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c88:	08010d2d 	.word	0x08010d2d
 8010c8c:	08010d5d 	.word	0x08010d5d
 8010c90:	08010d5d 	.word	0x08010d5d
 8010c94:	08010d5d 	.word	0x08010d5d
 8010c98:	08010d5d 	.word	0x08010d5d
 8010c9c:	08010d5d 	.word	0x08010d5d
 8010ca0:	08010d5d 	.word	0x08010d5d
 8010ca4:	08010d5d 	.word	0x08010d5d
 8010ca8:	08010d35 	.word	0x08010d35
 8010cac:	08010d5d 	.word	0x08010d5d
 8010cb0:	08010d5d 	.word	0x08010d5d
 8010cb4:	08010d5d 	.word	0x08010d5d
 8010cb8:	08010d5d 	.word	0x08010d5d
 8010cbc:	08010d5d 	.word	0x08010d5d
 8010cc0:	08010d5d 	.word	0x08010d5d
 8010cc4:	08010d5d 	.word	0x08010d5d
 8010cc8:	08010d3d 	.word	0x08010d3d
 8010ccc:	08010d5d 	.word	0x08010d5d
 8010cd0:	08010d5d 	.word	0x08010d5d
 8010cd4:	08010d5d 	.word	0x08010d5d
 8010cd8:	08010d5d 	.word	0x08010d5d
 8010cdc:	08010d5d 	.word	0x08010d5d
 8010ce0:	08010d5d 	.word	0x08010d5d
 8010ce4:	08010d5d 	.word	0x08010d5d
 8010ce8:	08010d45 	.word	0x08010d45
 8010cec:	08010d5d 	.word	0x08010d5d
 8010cf0:	08010d5d 	.word	0x08010d5d
 8010cf4:	08010d5d 	.word	0x08010d5d
 8010cf8:	08010d5d 	.word	0x08010d5d
 8010cfc:	08010d5d 	.word	0x08010d5d
 8010d00:	08010d5d 	.word	0x08010d5d
 8010d04:	08010d5d 	.word	0x08010d5d
 8010d08:	08010d4d 	.word	0x08010d4d
 8010d0c:	08010d5d 	.word	0x08010d5d
 8010d10:	08010d5d 	.word	0x08010d5d
 8010d14:	08010d5d 	.word	0x08010d5d
 8010d18:	08010d5d 	.word	0x08010d5d
 8010d1c:	08010d5d 	.word	0x08010d5d
 8010d20:	08010d5d 	.word	0x08010d5d
 8010d24:	08010d5d 	.word	0x08010d5d
 8010d28:	08010d55 	.word	0x08010d55
 8010d2c:	2301      	movs	r3, #1
 8010d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d32:	e1c0      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010d34:	2304      	movs	r3, #4
 8010d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d3a:	e1bc      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010d3c:	2308      	movs	r3, #8
 8010d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d42:	e1b8      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010d44:	2310      	movs	r3, #16
 8010d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d4a:	e1b4      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010d4c:	2320      	movs	r3, #32
 8010d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d52:	e1b0      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010d54:	2340      	movs	r3, #64	@ 0x40
 8010d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d5a:	e1ac      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010d5c:	2380      	movs	r3, #128	@ 0x80
 8010d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d62:	e1a8      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010d64:	697b      	ldr	r3, [r7, #20]
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	4a75      	ldr	r2, [pc, #468]	@ (8010f40 <UART_SetConfig+0x638>)
 8010d6a:	4293      	cmp	r3, r2
 8010d6c:	d130      	bne.n	8010dd0 <UART_SetConfig+0x4c8>
 8010d6e:	4b73      	ldr	r3, [pc, #460]	@ (8010f3c <UART_SetConfig+0x634>)
 8010d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010d72:	f003 0307 	and.w	r3, r3, #7
 8010d76:	2b05      	cmp	r3, #5
 8010d78:	d826      	bhi.n	8010dc8 <UART_SetConfig+0x4c0>
 8010d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8010d80 <UART_SetConfig+0x478>)
 8010d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d80:	08010d99 	.word	0x08010d99
 8010d84:	08010da1 	.word	0x08010da1
 8010d88:	08010da9 	.word	0x08010da9
 8010d8c:	08010db1 	.word	0x08010db1
 8010d90:	08010db9 	.word	0x08010db9
 8010d94:	08010dc1 	.word	0x08010dc1
 8010d98:	2300      	movs	r3, #0
 8010d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010d9e:	e18a      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010da0:	2304      	movs	r3, #4
 8010da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010da6:	e186      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010da8:	2308      	movs	r3, #8
 8010daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010dae:	e182      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010db0:	2310      	movs	r3, #16
 8010db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010db6:	e17e      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010db8:	2320      	movs	r3, #32
 8010dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010dbe:	e17a      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010dc0:	2340      	movs	r3, #64	@ 0x40
 8010dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010dc6:	e176      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010dc8:	2380      	movs	r3, #128	@ 0x80
 8010dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010dce:	e172      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010dd0:	697b      	ldr	r3, [r7, #20]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	4a5b      	ldr	r2, [pc, #364]	@ (8010f44 <UART_SetConfig+0x63c>)
 8010dd6:	4293      	cmp	r3, r2
 8010dd8:	d130      	bne.n	8010e3c <UART_SetConfig+0x534>
 8010dda:	4b58      	ldr	r3, [pc, #352]	@ (8010f3c <UART_SetConfig+0x634>)
 8010ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010dde:	f003 0307 	and.w	r3, r3, #7
 8010de2:	2b05      	cmp	r3, #5
 8010de4:	d826      	bhi.n	8010e34 <UART_SetConfig+0x52c>
 8010de6:	a201      	add	r2, pc, #4	@ (adr r2, 8010dec <UART_SetConfig+0x4e4>)
 8010de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dec:	08010e05 	.word	0x08010e05
 8010df0:	08010e0d 	.word	0x08010e0d
 8010df4:	08010e15 	.word	0x08010e15
 8010df8:	08010e1d 	.word	0x08010e1d
 8010dfc:	08010e25 	.word	0x08010e25
 8010e00:	08010e2d 	.word	0x08010e2d
 8010e04:	2300      	movs	r3, #0
 8010e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e0a:	e154      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010e0c:	2304      	movs	r3, #4
 8010e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e12:	e150      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010e14:	2308      	movs	r3, #8
 8010e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e1a:	e14c      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010e1c:	2310      	movs	r3, #16
 8010e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e22:	e148      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010e24:	2320      	movs	r3, #32
 8010e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e2a:	e144      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010e2c:	2340      	movs	r3, #64	@ 0x40
 8010e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e32:	e140      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010e34:	2380      	movs	r3, #128	@ 0x80
 8010e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010e3a:	e13c      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010e3c:	697b      	ldr	r3, [r7, #20]
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	4a41      	ldr	r2, [pc, #260]	@ (8010f48 <UART_SetConfig+0x640>)
 8010e42:	4293      	cmp	r3, r2
 8010e44:	f040 8082 	bne.w	8010f4c <UART_SetConfig+0x644>
 8010e48:	4b3c      	ldr	r3, [pc, #240]	@ (8010f3c <UART_SetConfig+0x634>)
 8010e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010e4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010e50:	2b28      	cmp	r3, #40	@ 0x28
 8010e52:	d86d      	bhi.n	8010f30 <UART_SetConfig+0x628>
 8010e54:	a201      	add	r2, pc, #4	@ (adr r2, 8010e5c <UART_SetConfig+0x554>)
 8010e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e5a:	bf00      	nop
 8010e5c:	08010f01 	.word	0x08010f01
 8010e60:	08010f31 	.word	0x08010f31
 8010e64:	08010f31 	.word	0x08010f31
 8010e68:	08010f31 	.word	0x08010f31
 8010e6c:	08010f31 	.word	0x08010f31
 8010e70:	08010f31 	.word	0x08010f31
 8010e74:	08010f31 	.word	0x08010f31
 8010e78:	08010f31 	.word	0x08010f31
 8010e7c:	08010f09 	.word	0x08010f09
 8010e80:	08010f31 	.word	0x08010f31
 8010e84:	08010f31 	.word	0x08010f31
 8010e88:	08010f31 	.word	0x08010f31
 8010e8c:	08010f31 	.word	0x08010f31
 8010e90:	08010f31 	.word	0x08010f31
 8010e94:	08010f31 	.word	0x08010f31
 8010e98:	08010f31 	.word	0x08010f31
 8010e9c:	08010f11 	.word	0x08010f11
 8010ea0:	08010f31 	.word	0x08010f31
 8010ea4:	08010f31 	.word	0x08010f31
 8010ea8:	08010f31 	.word	0x08010f31
 8010eac:	08010f31 	.word	0x08010f31
 8010eb0:	08010f31 	.word	0x08010f31
 8010eb4:	08010f31 	.word	0x08010f31
 8010eb8:	08010f31 	.word	0x08010f31
 8010ebc:	08010f19 	.word	0x08010f19
 8010ec0:	08010f31 	.word	0x08010f31
 8010ec4:	08010f31 	.word	0x08010f31
 8010ec8:	08010f31 	.word	0x08010f31
 8010ecc:	08010f31 	.word	0x08010f31
 8010ed0:	08010f31 	.word	0x08010f31
 8010ed4:	08010f31 	.word	0x08010f31
 8010ed8:	08010f31 	.word	0x08010f31
 8010edc:	08010f21 	.word	0x08010f21
 8010ee0:	08010f31 	.word	0x08010f31
 8010ee4:	08010f31 	.word	0x08010f31
 8010ee8:	08010f31 	.word	0x08010f31
 8010eec:	08010f31 	.word	0x08010f31
 8010ef0:	08010f31 	.word	0x08010f31
 8010ef4:	08010f31 	.word	0x08010f31
 8010ef8:	08010f31 	.word	0x08010f31
 8010efc:	08010f29 	.word	0x08010f29
 8010f00:	2301      	movs	r3, #1
 8010f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f06:	e0d6      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010f08:	2304      	movs	r3, #4
 8010f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f0e:	e0d2      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010f10:	2308      	movs	r3, #8
 8010f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f16:	e0ce      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010f18:	2310      	movs	r3, #16
 8010f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f1e:	e0ca      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010f20:	2320      	movs	r3, #32
 8010f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f26:	e0c6      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010f28:	2340      	movs	r3, #64	@ 0x40
 8010f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f2e:	e0c2      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010f30:	2380      	movs	r3, #128	@ 0x80
 8010f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f36:	e0be      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8010f38:	40011400 	.word	0x40011400
 8010f3c:	58024400 	.word	0x58024400
 8010f40:	40007800 	.word	0x40007800
 8010f44:	40007c00 	.word	0x40007c00
 8010f48:	40011800 	.word	0x40011800
 8010f4c:	697b      	ldr	r3, [r7, #20]
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	4aad      	ldr	r2, [pc, #692]	@ (8011208 <UART_SetConfig+0x900>)
 8010f52:	4293      	cmp	r3, r2
 8010f54:	d176      	bne.n	8011044 <UART_SetConfig+0x73c>
 8010f56:	4bad      	ldr	r3, [pc, #692]	@ (801120c <UART_SetConfig+0x904>)
 8010f58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010f5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010f5e:	2b28      	cmp	r3, #40	@ 0x28
 8010f60:	d86c      	bhi.n	801103c <UART_SetConfig+0x734>
 8010f62:	a201      	add	r2, pc, #4	@ (adr r2, 8010f68 <UART_SetConfig+0x660>)
 8010f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f68:	0801100d 	.word	0x0801100d
 8010f6c:	0801103d 	.word	0x0801103d
 8010f70:	0801103d 	.word	0x0801103d
 8010f74:	0801103d 	.word	0x0801103d
 8010f78:	0801103d 	.word	0x0801103d
 8010f7c:	0801103d 	.word	0x0801103d
 8010f80:	0801103d 	.word	0x0801103d
 8010f84:	0801103d 	.word	0x0801103d
 8010f88:	08011015 	.word	0x08011015
 8010f8c:	0801103d 	.word	0x0801103d
 8010f90:	0801103d 	.word	0x0801103d
 8010f94:	0801103d 	.word	0x0801103d
 8010f98:	0801103d 	.word	0x0801103d
 8010f9c:	0801103d 	.word	0x0801103d
 8010fa0:	0801103d 	.word	0x0801103d
 8010fa4:	0801103d 	.word	0x0801103d
 8010fa8:	0801101d 	.word	0x0801101d
 8010fac:	0801103d 	.word	0x0801103d
 8010fb0:	0801103d 	.word	0x0801103d
 8010fb4:	0801103d 	.word	0x0801103d
 8010fb8:	0801103d 	.word	0x0801103d
 8010fbc:	0801103d 	.word	0x0801103d
 8010fc0:	0801103d 	.word	0x0801103d
 8010fc4:	0801103d 	.word	0x0801103d
 8010fc8:	08011025 	.word	0x08011025
 8010fcc:	0801103d 	.word	0x0801103d
 8010fd0:	0801103d 	.word	0x0801103d
 8010fd4:	0801103d 	.word	0x0801103d
 8010fd8:	0801103d 	.word	0x0801103d
 8010fdc:	0801103d 	.word	0x0801103d
 8010fe0:	0801103d 	.word	0x0801103d
 8010fe4:	0801103d 	.word	0x0801103d
 8010fe8:	0801102d 	.word	0x0801102d
 8010fec:	0801103d 	.word	0x0801103d
 8010ff0:	0801103d 	.word	0x0801103d
 8010ff4:	0801103d 	.word	0x0801103d
 8010ff8:	0801103d 	.word	0x0801103d
 8010ffc:	0801103d 	.word	0x0801103d
 8011000:	0801103d 	.word	0x0801103d
 8011004:	0801103d 	.word	0x0801103d
 8011008:	08011035 	.word	0x08011035
 801100c:	2301      	movs	r3, #1
 801100e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011012:	e050      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8011014:	2304      	movs	r3, #4
 8011016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801101a:	e04c      	b.n	80110b6 <UART_SetConfig+0x7ae>
 801101c:	2308      	movs	r3, #8
 801101e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011022:	e048      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8011024:	2310      	movs	r3, #16
 8011026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801102a:	e044      	b.n	80110b6 <UART_SetConfig+0x7ae>
 801102c:	2320      	movs	r3, #32
 801102e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011032:	e040      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8011034:	2340      	movs	r3, #64	@ 0x40
 8011036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801103a:	e03c      	b.n	80110b6 <UART_SetConfig+0x7ae>
 801103c:	2380      	movs	r3, #128	@ 0x80
 801103e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011042:	e038      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8011044:	697b      	ldr	r3, [r7, #20]
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	4a71      	ldr	r2, [pc, #452]	@ (8011210 <UART_SetConfig+0x908>)
 801104a:	4293      	cmp	r3, r2
 801104c:	d130      	bne.n	80110b0 <UART_SetConfig+0x7a8>
 801104e:	4b6f      	ldr	r3, [pc, #444]	@ (801120c <UART_SetConfig+0x904>)
 8011050:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011052:	f003 0307 	and.w	r3, r3, #7
 8011056:	2b05      	cmp	r3, #5
 8011058:	d826      	bhi.n	80110a8 <UART_SetConfig+0x7a0>
 801105a:	a201      	add	r2, pc, #4	@ (adr r2, 8011060 <UART_SetConfig+0x758>)
 801105c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011060:	08011079 	.word	0x08011079
 8011064:	08011081 	.word	0x08011081
 8011068:	08011089 	.word	0x08011089
 801106c:	08011091 	.word	0x08011091
 8011070:	08011099 	.word	0x08011099
 8011074:	080110a1 	.word	0x080110a1
 8011078:	2302      	movs	r3, #2
 801107a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801107e:	e01a      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8011080:	2304      	movs	r3, #4
 8011082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011086:	e016      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8011088:	2308      	movs	r3, #8
 801108a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801108e:	e012      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8011090:	2310      	movs	r3, #16
 8011092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8011096:	e00e      	b.n	80110b6 <UART_SetConfig+0x7ae>
 8011098:	2320      	movs	r3, #32
 801109a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801109e:	e00a      	b.n	80110b6 <UART_SetConfig+0x7ae>
 80110a0:	2340      	movs	r3, #64	@ 0x40
 80110a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80110a6:	e006      	b.n	80110b6 <UART_SetConfig+0x7ae>
 80110a8:	2380      	movs	r3, #128	@ 0x80
 80110aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80110ae:	e002      	b.n	80110b6 <UART_SetConfig+0x7ae>
 80110b0:	2380      	movs	r3, #128	@ 0x80
 80110b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80110b6:	697b      	ldr	r3, [r7, #20]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	4a55      	ldr	r2, [pc, #340]	@ (8011210 <UART_SetConfig+0x908>)
 80110bc:	4293      	cmp	r3, r2
 80110be:	f040 80f8 	bne.w	80112b2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80110c2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80110c6:	2b20      	cmp	r3, #32
 80110c8:	dc46      	bgt.n	8011158 <UART_SetConfig+0x850>
 80110ca:	2b02      	cmp	r3, #2
 80110cc:	db75      	blt.n	80111ba <UART_SetConfig+0x8b2>
 80110ce:	3b02      	subs	r3, #2
 80110d0:	2b1e      	cmp	r3, #30
 80110d2:	d872      	bhi.n	80111ba <UART_SetConfig+0x8b2>
 80110d4:	a201      	add	r2, pc, #4	@ (adr r2, 80110dc <UART_SetConfig+0x7d4>)
 80110d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110da:	bf00      	nop
 80110dc:	0801115f 	.word	0x0801115f
 80110e0:	080111bb 	.word	0x080111bb
 80110e4:	08011167 	.word	0x08011167
 80110e8:	080111bb 	.word	0x080111bb
 80110ec:	080111bb 	.word	0x080111bb
 80110f0:	080111bb 	.word	0x080111bb
 80110f4:	08011177 	.word	0x08011177
 80110f8:	080111bb 	.word	0x080111bb
 80110fc:	080111bb 	.word	0x080111bb
 8011100:	080111bb 	.word	0x080111bb
 8011104:	080111bb 	.word	0x080111bb
 8011108:	080111bb 	.word	0x080111bb
 801110c:	080111bb 	.word	0x080111bb
 8011110:	080111bb 	.word	0x080111bb
 8011114:	08011187 	.word	0x08011187
 8011118:	080111bb 	.word	0x080111bb
 801111c:	080111bb 	.word	0x080111bb
 8011120:	080111bb 	.word	0x080111bb
 8011124:	080111bb 	.word	0x080111bb
 8011128:	080111bb 	.word	0x080111bb
 801112c:	080111bb 	.word	0x080111bb
 8011130:	080111bb 	.word	0x080111bb
 8011134:	080111bb 	.word	0x080111bb
 8011138:	080111bb 	.word	0x080111bb
 801113c:	080111bb 	.word	0x080111bb
 8011140:	080111bb 	.word	0x080111bb
 8011144:	080111bb 	.word	0x080111bb
 8011148:	080111bb 	.word	0x080111bb
 801114c:	080111bb 	.word	0x080111bb
 8011150:	080111bb 	.word	0x080111bb
 8011154:	080111ad 	.word	0x080111ad
 8011158:	2b40      	cmp	r3, #64	@ 0x40
 801115a:	d02a      	beq.n	80111b2 <UART_SetConfig+0x8aa>
 801115c:	e02d      	b.n	80111ba <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801115e:	f7fc fed3 	bl	800df08 <HAL_RCCEx_GetD3PCLK1Freq>
 8011162:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011164:	e02f      	b.n	80111c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011166:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801116a:	4618      	mov	r0, r3
 801116c:	f7fc fee2 	bl	800df34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011172:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011174:	e027      	b.n	80111c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011176:	f107 0318 	add.w	r3, r7, #24
 801117a:	4618      	mov	r0, r3
 801117c:	f7fd f82e 	bl	800e1dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011180:	69fb      	ldr	r3, [r7, #28]
 8011182:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011184:	e01f      	b.n	80111c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011186:	4b21      	ldr	r3, [pc, #132]	@ (801120c <UART_SetConfig+0x904>)
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	f003 0320 	and.w	r3, r3, #32
 801118e:	2b00      	cmp	r3, #0
 8011190:	d009      	beq.n	80111a6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011192:	4b1e      	ldr	r3, [pc, #120]	@ (801120c <UART_SetConfig+0x904>)
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	08db      	lsrs	r3, r3, #3
 8011198:	f003 0303 	and.w	r3, r3, #3
 801119c:	4a1d      	ldr	r2, [pc, #116]	@ (8011214 <UART_SetConfig+0x90c>)
 801119e:	fa22 f303 	lsr.w	r3, r2, r3
 80111a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80111a4:	e00f      	b.n	80111c6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80111a6:	4b1b      	ldr	r3, [pc, #108]	@ (8011214 <UART_SetConfig+0x90c>)
 80111a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80111aa:	e00c      	b.n	80111c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80111ac:	4b1a      	ldr	r3, [pc, #104]	@ (8011218 <UART_SetConfig+0x910>)
 80111ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80111b0:	e009      	b.n	80111c6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80111b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80111b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80111b8:	e005      	b.n	80111c6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80111ba:	2300      	movs	r3, #0
 80111bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80111be:	2301      	movs	r3, #1
 80111c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80111c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80111c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	f000 81ee 	beq.w	80115aa <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80111ce:	697b      	ldr	r3, [r7, #20]
 80111d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111d2:	4a12      	ldr	r2, [pc, #72]	@ (801121c <UART_SetConfig+0x914>)
 80111d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80111d8:	461a      	mov	r2, r3
 80111da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80111dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80111e0:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80111e2:	697b      	ldr	r3, [r7, #20]
 80111e4:	685a      	ldr	r2, [r3, #4]
 80111e6:	4613      	mov	r3, r2
 80111e8:	005b      	lsls	r3, r3, #1
 80111ea:	4413      	add	r3, r2
 80111ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80111ee:	429a      	cmp	r2, r3
 80111f0:	d305      	bcc.n	80111fe <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80111f2:	697b      	ldr	r3, [r7, #20]
 80111f4:	685b      	ldr	r3, [r3, #4]
 80111f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80111f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80111fa:	429a      	cmp	r2, r3
 80111fc:	d910      	bls.n	8011220 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80111fe:	2301      	movs	r3, #1
 8011200:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8011204:	e1d1      	b.n	80115aa <UART_SetConfig+0xca2>
 8011206:	bf00      	nop
 8011208:	40011c00 	.word	0x40011c00
 801120c:	58024400 	.word	0x58024400
 8011210:	58000c00 	.word	0x58000c00
 8011214:	03d09000 	.word	0x03d09000
 8011218:	003d0900 	.word	0x003d0900
 801121c:	08015314 	.word	0x08015314
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011220:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011222:	2200      	movs	r2, #0
 8011224:	60bb      	str	r3, [r7, #8]
 8011226:	60fa      	str	r2, [r7, #12]
 8011228:	697b      	ldr	r3, [r7, #20]
 801122a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801122c:	4ac0      	ldr	r2, [pc, #768]	@ (8011530 <UART_SetConfig+0xc28>)
 801122e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011232:	b29b      	uxth	r3, r3
 8011234:	2200      	movs	r2, #0
 8011236:	603b      	str	r3, [r7, #0]
 8011238:	607a      	str	r2, [r7, #4]
 801123a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801123e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011242:	f7ef f8cd 	bl	80003e0 <__aeabi_uldivmod>
 8011246:	4602      	mov	r2, r0
 8011248:	460b      	mov	r3, r1
 801124a:	4610      	mov	r0, r2
 801124c:	4619      	mov	r1, r3
 801124e:	f04f 0200 	mov.w	r2, #0
 8011252:	f04f 0300 	mov.w	r3, #0
 8011256:	020b      	lsls	r3, r1, #8
 8011258:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801125c:	0202      	lsls	r2, r0, #8
 801125e:	6979      	ldr	r1, [r7, #20]
 8011260:	6849      	ldr	r1, [r1, #4]
 8011262:	0849      	lsrs	r1, r1, #1
 8011264:	2000      	movs	r0, #0
 8011266:	460c      	mov	r4, r1
 8011268:	4605      	mov	r5, r0
 801126a:	eb12 0804 	adds.w	r8, r2, r4
 801126e:	eb43 0905 	adc.w	r9, r3, r5
 8011272:	697b      	ldr	r3, [r7, #20]
 8011274:	685b      	ldr	r3, [r3, #4]
 8011276:	2200      	movs	r2, #0
 8011278:	469a      	mov	sl, r3
 801127a:	4693      	mov	fp, r2
 801127c:	4652      	mov	r2, sl
 801127e:	465b      	mov	r3, fp
 8011280:	4640      	mov	r0, r8
 8011282:	4649      	mov	r1, r9
 8011284:	f7ef f8ac 	bl	80003e0 <__aeabi_uldivmod>
 8011288:	4602      	mov	r2, r0
 801128a:	460b      	mov	r3, r1
 801128c:	4613      	mov	r3, r2
 801128e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011292:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8011296:	d308      	bcc.n	80112aa <UART_SetConfig+0x9a2>
 8011298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801129a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801129e:	d204      	bcs.n	80112aa <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80112a0:	697b      	ldr	r3, [r7, #20]
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80112a6:	60da      	str	r2, [r3, #12]
 80112a8:	e17f      	b.n	80115aa <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80112aa:	2301      	movs	r3, #1
 80112ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80112b0:	e17b      	b.n	80115aa <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80112b2:	697b      	ldr	r3, [r7, #20]
 80112b4:	69db      	ldr	r3, [r3, #28]
 80112b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80112ba:	f040 80bd 	bne.w	8011438 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80112be:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80112c2:	2b20      	cmp	r3, #32
 80112c4:	dc48      	bgt.n	8011358 <UART_SetConfig+0xa50>
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	db7b      	blt.n	80113c2 <UART_SetConfig+0xaba>
 80112ca:	2b20      	cmp	r3, #32
 80112cc:	d879      	bhi.n	80113c2 <UART_SetConfig+0xaba>
 80112ce:	a201      	add	r2, pc, #4	@ (adr r2, 80112d4 <UART_SetConfig+0x9cc>)
 80112d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112d4:	0801135f 	.word	0x0801135f
 80112d8:	08011367 	.word	0x08011367
 80112dc:	080113c3 	.word	0x080113c3
 80112e0:	080113c3 	.word	0x080113c3
 80112e4:	0801136f 	.word	0x0801136f
 80112e8:	080113c3 	.word	0x080113c3
 80112ec:	080113c3 	.word	0x080113c3
 80112f0:	080113c3 	.word	0x080113c3
 80112f4:	0801137f 	.word	0x0801137f
 80112f8:	080113c3 	.word	0x080113c3
 80112fc:	080113c3 	.word	0x080113c3
 8011300:	080113c3 	.word	0x080113c3
 8011304:	080113c3 	.word	0x080113c3
 8011308:	080113c3 	.word	0x080113c3
 801130c:	080113c3 	.word	0x080113c3
 8011310:	080113c3 	.word	0x080113c3
 8011314:	0801138f 	.word	0x0801138f
 8011318:	080113c3 	.word	0x080113c3
 801131c:	080113c3 	.word	0x080113c3
 8011320:	080113c3 	.word	0x080113c3
 8011324:	080113c3 	.word	0x080113c3
 8011328:	080113c3 	.word	0x080113c3
 801132c:	080113c3 	.word	0x080113c3
 8011330:	080113c3 	.word	0x080113c3
 8011334:	080113c3 	.word	0x080113c3
 8011338:	080113c3 	.word	0x080113c3
 801133c:	080113c3 	.word	0x080113c3
 8011340:	080113c3 	.word	0x080113c3
 8011344:	080113c3 	.word	0x080113c3
 8011348:	080113c3 	.word	0x080113c3
 801134c:	080113c3 	.word	0x080113c3
 8011350:	080113c3 	.word	0x080113c3
 8011354:	080113b5 	.word	0x080113b5
 8011358:	2b40      	cmp	r3, #64	@ 0x40
 801135a:	d02e      	beq.n	80113ba <UART_SetConfig+0xab2>
 801135c:	e031      	b.n	80113c2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801135e:	f7fa ff35 	bl	800c1cc <HAL_RCC_GetPCLK1Freq>
 8011362:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011364:	e033      	b.n	80113ce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011366:	f7fa ff47 	bl	800c1f8 <HAL_RCC_GetPCLK2Freq>
 801136a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801136c:	e02f      	b.n	80113ce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801136e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011372:	4618      	mov	r0, r3
 8011374:	f7fc fdde 	bl	800df34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801137a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801137c:	e027      	b.n	80113ce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801137e:	f107 0318 	add.w	r3, r7, #24
 8011382:	4618      	mov	r0, r3
 8011384:	f7fc ff2a 	bl	800e1dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011388:	69fb      	ldr	r3, [r7, #28]
 801138a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801138c:	e01f      	b.n	80113ce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801138e:	4b69      	ldr	r3, [pc, #420]	@ (8011534 <UART_SetConfig+0xc2c>)
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	f003 0320 	and.w	r3, r3, #32
 8011396:	2b00      	cmp	r3, #0
 8011398:	d009      	beq.n	80113ae <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801139a:	4b66      	ldr	r3, [pc, #408]	@ (8011534 <UART_SetConfig+0xc2c>)
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	08db      	lsrs	r3, r3, #3
 80113a0:	f003 0303 	and.w	r3, r3, #3
 80113a4:	4a64      	ldr	r2, [pc, #400]	@ (8011538 <UART_SetConfig+0xc30>)
 80113a6:	fa22 f303 	lsr.w	r3, r2, r3
 80113aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80113ac:	e00f      	b.n	80113ce <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80113ae:	4b62      	ldr	r3, [pc, #392]	@ (8011538 <UART_SetConfig+0xc30>)
 80113b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80113b2:	e00c      	b.n	80113ce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80113b4:	4b61      	ldr	r3, [pc, #388]	@ (801153c <UART_SetConfig+0xc34>)
 80113b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80113b8:	e009      	b.n	80113ce <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80113ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80113be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80113c0:	e005      	b.n	80113ce <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80113c2:	2300      	movs	r3, #0
 80113c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80113c6:	2301      	movs	r3, #1
 80113c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80113cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80113ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	f000 80ea 	beq.w	80115aa <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80113d6:	697b      	ldr	r3, [r7, #20]
 80113d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113da:	4a55      	ldr	r2, [pc, #340]	@ (8011530 <UART_SetConfig+0xc28>)
 80113dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80113e0:	461a      	mov	r2, r3
 80113e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80113e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80113e8:	005a      	lsls	r2, r3, #1
 80113ea:	697b      	ldr	r3, [r7, #20]
 80113ec:	685b      	ldr	r3, [r3, #4]
 80113ee:	085b      	lsrs	r3, r3, #1
 80113f0:	441a      	add	r2, r3
 80113f2:	697b      	ldr	r3, [r7, #20]
 80113f4:	685b      	ldr	r3, [r3, #4]
 80113f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80113fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80113fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80113fe:	2b0f      	cmp	r3, #15
 8011400:	d916      	bls.n	8011430 <UART_SetConfig+0xb28>
 8011402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011404:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011408:	d212      	bcs.n	8011430 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801140a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801140c:	b29b      	uxth	r3, r3
 801140e:	f023 030f 	bic.w	r3, r3, #15
 8011412:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011416:	085b      	lsrs	r3, r3, #1
 8011418:	b29b      	uxth	r3, r3
 801141a:	f003 0307 	and.w	r3, r3, #7
 801141e:	b29a      	uxth	r2, r3
 8011420:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011422:	4313      	orrs	r3, r2
 8011424:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8011426:	697b      	ldr	r3, [r7, #20]
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801142c:	60da      	str	r2, [r3, #12]
 801142e:	e0bc      	b.n	80115aa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011430:	2301      	movs	r3, #1
 8011432:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8011436:	e0b8      	b.n	80115aa <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011438:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801143c:	2b20      	cmp	r3, #32
 801143e:	dc4b      	bgt.n	80114d8 <UART_SetConfig+0xbd0>
 8011440:	2b00      	cmp	r3, #0
 8011442:	f2c0 8087 	blt.w	8011554 <UART_SetConfig+0xc4c>
 8011446:	2b20      	cmp	r3, #32
 8011448:	f200 8084 	bhi.w	8011554 <UART_SetConfig+0xc4c>
 801144c:	a201      	add	r2, pc, #4	@ (adr r2, 8011454 <UART_SetConfig+0xb4c>)
 801144e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011452:	bf00      	nop
 8011454:	080114df 	.word	0x080114df
 8011458:	080114e7 	.word	0x080114e7
 801145c:	08011555 	.word	0x08011555
 8011460:	08011555 	.word	0x08011555
 8011464:	080114ef 	.word	0x080114ef
 8011468:	08011555 	.word	0x08011555
 801146c:	08011555 	.word	0x08011555
 8011470:	08011555 	.word	0x08011555
 8011474:	080114ff 	.word	0x080114ff
 8011478:	08011555 	.word	0x08011555
 801147c:	08011555 	.word	0x08011555
 8011480:	08011555 	.word	0x08011555
 8011484:	08011555 	.word	0x08011555
 8011488:	08011555 	.word	0x08011555
 801148c:	08011555 	.word	0x08011555
 8011490:	08011555 	.word	0x08011555
 8011494:	0801150f 	.word	0x0801150f
 8011498:	08011555 	.word	0x08011555
 801149c:	08011555 	.word	0x08011555
 80114a0:	08011555 	.word	0x08011555
 80114a4:	08011555 	.word	0x08011555
 80114a8:	08011555 	.word	0x08011555
 80114ac:	08011555 	.word	0x08011555
 80114b0:	08011555 	.word	0x08011555
 80114b4:	08011555 	.word	0x08011555
 80114b8:	08011555 	.word	0x08011555
 80114bc:	08011555 	.word	0x08011555
 80114c0:	08011555 	.word	0x08011555
 80114c4:	08011555 	.word	0x08011555
 80114c8:	08011555 	.word	0x08011555
 80114cc:	08011555 	.word	0x08011555
 80114d0:	08011555 	.word	0x08011555
 80114d4:	08011547 	.word	0x08011547
 80114d8:	2b40      	cmp	r3, #64	@ 0x40
 80114da:	d037      	beq.n	801154c <UART_SetConfig+0xc44>
 80114dc:	e03a      	b.n	8011554 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80114de:	f7fa fe75 	bl	800c1cc <HAL_RCC_GetPCLK1Freq>
 80114e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80114e4:	e03c      	b.n	8011560 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80114e6:	f7fa fe87 	bl	800c1f8 <HAL_RCC_GetPCLK2Freq>
 80114ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80114ec:	e038      	b.n	8011560 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80114ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80114f2:	4618      	mov	r0, r3
 80114f4:	f7fc fd1e 	bl	800df34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80114f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80114fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80114fc:	e030      	b.n	8011560 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80114fe:	f107 0318 	add.w	r3, r7, #24
 8011502:	4618      	mov	r0, r3
 8011504:	f7fc fe6a 	bl	800e1dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011508:	69fb      	ldr	r3, [r7, #28]
 801150a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801150c:	e028      	b.n	8011560 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801150e:	4b09      	ldr	r3, [pc, #36]	@ (8011534 <UART_SetConfig+0xc2c>)
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	f003 0320 	and.w	r3, r3, #32
 8011516:	2b00      	cmp	r3, #0
 8011518:	d012      	beq.n	8011540 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801151a:	4b06      	ldr	r3, [pc, #24]	@ (8011534 <UART_SetConfig+0xc2c>)
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	08db      	lsrs	r3, r3, #3
 8011520:	f003 0303 	and.w	r3, r3, #3
 8011524:	4a04      	ldr	r2, [pc, #16]	@ (8011538 <UART_SetConfig+0xc30>)
 8011526:	fa22 f303 	lsr.w	r3, r2, r3
 801152a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801152c:	e018      	b.n	8011560 <UART_SetConfig+0xc58>
 801152e:	bf00      	nop
 8011530:	08015314 	.word	0x08015314
 8011534:	58024400 	.word	0x58024400
 8011538:	03d09000 	.word	0x03d09000
 801153c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8011540:	4b24      	ldr	r3, [pc, #144]	@ (80115d4 <UART_SetConfig+0xccc>)
 8011542:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011544:	e00c      	b.n	8011560 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011546:	4b24      	ldr	r3, [pc, #144]	@ (80115d8 <UART_SetConfig+0xcd0>)
 8011548:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801154a:	e009      	b.n	8011560 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801154c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011550:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011552:	e005      	b.n	8011560 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8011554:	2300      	movs	r3, #0
 8011556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8011558:	2301      	movs	r3, #1
 801155a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801155e:	bf00      	nop
    }

    if (pclk != 0U)
 8011560:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011562:	2b00      	cmp	r3, #0
 8011564:	d021      	beq.n	80115aa <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011566:	697b      	ldr	r3, [r7, #20]
 8011568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801156a:	4a1c      	ldr	r2, [pc, #112]	@ (80115dc <UART_SetConfig+0xcd4>)
 801156c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011570:	461a      	mov	r2, r3
 8011572:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011574:	fbb3 f2f2 	udiv	r2, r3, r2
 8011578:	697b      	ldr	r3, [r7, #20]
 801157a:	685b      	ldr	r3, [r3, #4]
 801157c:	085b      	lsrs	r3, r3, #1
 801157e:	441a      	add	r2, r3
 8011580:	697b      	ldr	r3, [r7, #20]
 8011582:	685b      	ldr	r3, [r3, #4]
 8011584:	fbb2 f3f3 	udiv	r3, r2, r3
 8011588:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801158a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801158c:	2b0f      	cmp	r3, #15
 801158e:	d909      	bls.n	80115a4 <UART_SetConfig+0xc9c>
 8011590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011592:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011596:	d205      	bcs.n	80115a4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801159a:	b29a      	uxth	r2, r3
 801159c:	697b      	ldr	r3, [r7, #20]
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	60da      	str	r2, [r3, #12]
 80115a2:	e002      	b.n	80115aa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80115a4:	2301      	movs	r3, #1
 80115a6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80115aa:	697b      	ldr	r3, [r7, #20]
 80115ac:	2201      	movs	r2, #1
 80115ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80115b2:	697b      	ldr	r3, [r7, #20]
 80115b4:	2201      	movs	r2, #1
 80115b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80115ba:	697b      	ldr	r3, [r7, #20]
 80115bc:	2200      	movs	r2, #0
 80115be:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80115c0:	697b      	ldr	r3, [r7, #20]
 80115c2:	2200      	movs	r2, #0
 80115c4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80115c6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80115ca:	4618      	mov	r0, r3
 80115cc:	3748      	adds	r7, #72	@ 0x48
 80115ce:	46bd      	mov	sp, r7
 80115d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80115d4:	03d09000 	.word	0x03d09000
 80115d8:	003d0900 	.word	0x003d0900
 80115dc:	08015314 	.word	0x08015314

080115e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80115e0:	b480      	push	{r7}
 80115e2:	b083      	sub	sp, #12
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80115ec:	f003 0301 	and.w	r3, r3, #1
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d00a      	beq.n	801160a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	685b      	ldr	r3, [r3, #4]
 80115fa:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	430a      	orrs	r2, r1
 8011608:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801160e:	f003 0302 	and.w	r3, r3, #2
 8011612:	2b00      	cmp	r3, #0
 8011614:	d00a      	beq.n	801162c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	685b      	ldr	r3, [r3, #4]
 801161c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	430a      	orrs	r2, r1
 801162a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011630:	f003 0304 	and.w	r3, r3, #4
 8011634:	2b00      	cmp	r3, #0
 8011636:	d00a      	beq.n	801164e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	685b      	ldr	r3, [r3, #4]
 801163e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	430a      	orrs	r2, r1
 801164c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011652:	f003 0308 	and.w	r3, r3, #8
 8011656:	2b00      	cmp	r3, #0
 8011658:	d00a      	beq.n	8011670 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	685b      	ldr	r3, [r3, #4]
 8011660:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	430a      	orrs	r2, r1
 801166e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011674:	f003 0310 	and.w	r3, r3, #16
 8011678:	2b00      	cmp	r3, #0
 801167a:	d00a      	beq.n	8011692 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	689b      	ldr	r3, [r3, #8]
 8011682:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	430a      	orrs	r2, r1
 8011690:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011696:	f003 0320 	and.w	r3, r3, #32
 801169a:	2b00      	cmp	r3, #0
 801169c:	d00a      	beq.n	80116b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	689b      	ldr	r3, [r3, #8]
 80116a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	430a      	orrs	r2, r1
 80116b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80116b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d01a      	beq.n	80116f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	685b      	ldr	r3, [r3, #4]
 80116c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	430a      	orrs	r2, r1
 80116d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80116da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80116de:	d10a      	bne.n	80116f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	685b      	ldr	r3, [r3, #4]
 80116e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	430a      	orrs	r2, r1
 80116f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80116fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d00a      	beq.n	8011718 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	685b      	ldr	r3, [r3, #4]
 8011708:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	430a      	orrs	r2, r1
 8011716:	605a      	str	r2, [r3, #4]
  }
}
 8011718:	bf00      	nop
 801171a:	370c      	adds	r7, #12
 801171c:	46bd      	mov	sp, r7
 801171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011722:	4770      	bx	lr

08011724 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011724:	b580      	push	{r7, lr}
 8011726:	b098      	sub	sp, #96	@ 0x60
 8011728:	af02      	add	r7, sp, #8
 801172a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	2200      	movs	r2, #0
 8011730:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011734:	f7f3 fb60 	bl	8004df8 <HAL_GetTick>
 8011738:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	f003 0308 	and.w	r3, r3, #8
 8011744:	2b08      	cmp	r3, #8
 8011746:	d12f      	bne.n	80117a8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011748:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801174c:	9300      	str	r3, [sp, #0]
 801174e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011750:	2200      	movs	r2, #0
 8011752:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8011756:	6878      	ldr	r0, [r7, #4]
 8011758:	f000 f88e 	bl	8011878 <UART_WaitOnFlagUntilTimeout>
 801175c:	4603      	mov	r3, r0
 801175e:	2b00      	cmp	r3, #0
 8011760:	d022      	beq.n	80117a8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801176a:	e853 3f00 	ldrex	r3, [r3]
 801176e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011772:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011776:	653b      	str	r3, [r7, #80]	@ 0x50
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	461a      	mov	r2, r3
 801177e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011780:	647b      	str	r3, [r7, #68]	@ 0x44
 8011782:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011784:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011786:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011788:	e841 2300 	strex	r3, r2, [r1]
 801178c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801178e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011790:	2b00      	cmp	r3, #0
 8011792:	d1e6      	bne.n	8011762 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	2220      	movs	r2, #32
 8011798:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	2200      	movs	r2, #0
 80117a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80117a4:	2303      	movs	r3, #3
 80117a6:	e063      	b.n	8011870 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	f003 0304 	and.w	r3, r3, #4
 80117b2:	2b04      	cmp	r3, #4
 80117b4:	d149      	bne.n	801184a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80117b6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80117ba:	9300      	str	r3, [sp, #0]
 80117bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80117be:	2200      	movs	r2, #0
 80117c0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80117c4:	6878      	ldr	r0, [r7, #4]
 80117c6:	f000 f857 	bl	8011878 <UART_WaitOnFlagUntilTimeout>
 80117ca:	4603      	mov	r3, r0
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d03c      	beq.n	801184a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117d8:	e853 3f00 	ldrex	r3, [r3]
 80117dc:	623b      	str	r3, [r7, #32]
   return(result);
 80117de:	6a3b      	ldr	r3, [r7, #32]
 80117e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80117e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	461a      	mov	r2, r3
 80117ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80117ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80117f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80117f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80117f6:	e841 2300 	strex	r3, r2, [r1]
 80117fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80117fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d1e6      	bne.n	80117d0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	3308      	adds	r3, #8
 8011808:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801180a:	693b      	ldr	r3, [r7, #16]
 801180c:	e853 3f00 	ldrex	r3, [r3]
 8011810:	60fb      	str	r3, [r7, #12]
   return(result);
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	f023 0301 	bic.w	r3, r3, #1
 8011818:	64bb      	str	r3, [r7, #72]	@ 0x48
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	3308      	adds	r3, #8
 8011820:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011822:	61fa      	str	r2, [r7, #28]
 8011824:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011826:	69b9      	ldr	r1, [r7, #24]
 8011828:	69fa      	ldr	r2, [r7, #28]
 801182a:	e841 2300 	strex	r3, r2, [r1]
 801182e:	617b      	str	r3, [r7, #20]
   return(result);
 8011830:	697b      	ldr	r3, [r7, #20]
 8011832:	2b00      	cmp	r3, #0
 8011834:	d1e5      	bne.n	8011802 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	2220      	movs	r2, #32
 801183a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	2200      	movs	r2, #0
 8011842:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011846:	2303      	movs	r3, #3
 8011848:	e012      	b.n	8011870 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	2220      	movs	r2, #32
 801184e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	2220      	movs	r2, #32
 8011856:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	2200      	movs	r2, #0
 801185e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	2200      	movs	r2, #0
 8011864:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	2200      	movs	r2, #0
 801186a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801186e:	2300      	movs	r3, #0
}
 8011870:	4618      	mov	r0, r3
 8011872:	3758      	adds	r7, #88	@ 0x58
 8011874:	46bd      	mov	sp, r7
 8011876:	bd80      	pop	{r7, pc}

08011878 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011878:	b580      	push	{r7, lr}
 801187a:	b084      	sub	sp, #16
 801187c:	af00      	add	r7, sp, #0
 801187e:	60f8      	str	r0, [r7, #12]
 8011880:	60b9      	str	r1, [r7, #8]
 8011882:	603b      	str	r3, [r7, #0]
 8011884:	4613      	mov	r3, r2
 8011886:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011888:	e049      	b.n	801191e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801188a:	69bb      	ldr	r3, [r7, #24]
 801188c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011890:	d045      	beq.n	801191e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011892:	f7f3 fab1 	bl	8004df8 <HAL_GetTick>
 8011896:	4602      	mov	r2, r0
 8011898:	683b      	ldr	r3, [r7, #0]
 801189a:	1ad3      	subs	r3, r2, r3
 801189c:	69ba      	ldr	r2, [r7, #24]
 801189e:	429a      	cmp	r2, r3
 80118a0:	d302      	bcc.n	80118a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80118a2:	69bb      	ldr	r3, [r7, #24]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d101      	bne.n	80118ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80118a8:	2303      	movs	r3, #3
 80118aa:	e048      	b.n	801193e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	f003 0304 	and.w	r3, r3, #4
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d031      	beq.n	801191e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	69db      	ldr	r3, [r3, #28]
 80118c0:	f003 0308 	and.w	r3, r3, #8
 80118c4:	2b08      	cmp	r3, #8
 80118c6:	d110      	bne.n	80118ea <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	2208      	movs	r2, #8
 80118ce:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80118d0:	68f8      	ldr	r0, [r7, #12]
 80118d2:	f000 f839 	bl	8011948 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	2208      	movs	r2, #8
 80118da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	2200      	movs	r2, #0
 80118e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 80118e6:	2301      	movs	r3, #1
 80118e8:	e029      	b.n	801193e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	69db      	ldr	r3, [r3, #28]
 80118f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80118f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80118f8:	d111      	bne.n	801191e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011902:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011904:	68f8      	ldr	r0, [r7, #12]
 8011906:	f000 f81f 	bl	8011948 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	2220      	movs	r2, #32
 801190e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	2200      	movs	r2, #0
 8011916:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801191a:	2303      	movs	r3, #3
 801191c:	e00f      	b.n	801193e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	69da      	ldr	r2, [r3, #28]
 8011924:	68bb      	ldr	r3, [r7, #8]
 8011926:	4013      	ands	r3, r2
 8011928:	68ba      	ldr	r2, [r7, #8]
 801192a:	429a      	cmp	r2, r3
 801192c:	bf0c      	ite	eq
 801192e:	2301      	moveq	r3, #1
 8011930:	2300      	movne	r3, #0
 8011932:	b2db      	uxtb	r3, r3
 8011934:	461a      	mov	r2, r3
 8011936:	79fb      	ldrb	r3, [r7, #7]
 8011938:	429a      	cmp	r2, r3
 801193a:	d0a6      	beq.n	801188a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801193c:	2300      	movs	r3, #0
}
 801193e:	4618      	mov	r0, r3
 8011940:	3710      	adds	r7, #16
 8011942:	46bd      	mov	sp, r7
 8011944:	bd80      	pop	{r7, pc}
	...

08011948 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011948:	b480      	push	{r7}
 801194a:	b095      	sub	sp, #84	@ 0x54
 801194c:	af00      	add	r7, sp, #0
 801194e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011958:	e853 3f00 	ldrex	r3, [r3]
 801195c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801195e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011960:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011964:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	461a      	mov	r2, r3
 801196c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801196e:	643b      	str	r3, [r7, #64]	@ 0x40
 8011970:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011972:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011974:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011976:	e841 2300 	strex	r3, r2, [r1]
 801197a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801197c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801197e:	2b00      	cmp	r3, #0
 8011980:	d1e6      	bne.n	8011950 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	3308      	adds	r3, #8
 8011988:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801198a:	6a3b      	ldr	r3, [r7, #32]
 801198c:	e853 3f00 	ldrex	r3, [r3]
 8011990:	61fb      	str	r3, [r7, #28]
   return(result);
 8011992:	69fa      	ldr	r2, [r7, #28]
 8011994:	4b1e      	ldr	r3, [pc, #120]	@ (8011a10 <UART_EndRxTransfer+0xc8>)
 8011996:	4013      	ands	r3, r2
 8011998:	64bb      	str	r3, [r7, #72]	@ 0x48
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	3308      	adds	r3, #8
 80119a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80119a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80119a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80119a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80119aa:	e841 2300 	strex	r3, r2, [r1]
 80119ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80119b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d1e5      	bne.n	8011982 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80119ba:	2b01      	cmp	r3, #1
 80119bc:	d118      	bne.n	80119f0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	e853 3f00 	ldrex	r3, [r3]
 80119ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80119cc:	68bb      	ldr	r3, [r7, #8]
 80119ce:	f023 0310 	bic.w	r3, r3, #16
 80119d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	461a      	mov	r2, r3
 80119da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80119dc:	61bb      	str	r3, [r7, #24]
 80119de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119e0:	6979      	ldr	r1, [r7, #20]
 80119e2:	69ba      	ldr	r2, [r7, #24]
 80119e4:	e841 2300 	strex	r3, r2, [r1]
 80119e8:	613b      	str	r3, [r7, #16]
   return(result);
 80119ea:	693b      	ldr	r3, [r7, #16]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d1e6      	bne.n	80119be <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	2220      	movs	r2, #32
 80119f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	2200      	movs	r2, #0
 80119fc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	2200      	movs	r2, #0
 8011a02:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8011a04:	bf00      	nop
 8011a06:	3754      	adds	r7, #84	@ 0x54
 8011a08:	46bd      	mov	sp, r7
 8011a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a0e:	4770      	bx	lr
 8011a10:	effffffe 	.word	0xeffffffe

08011a14 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011a14:	b480      	push	{r7}
 8011a16:	b085      	sub	sp, #20
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011a22:	2b01      	cmp	r3, #1
 8011a24:	d101      	bne.n	8011a2a <HAL_UARTEx_DisableFifoMode+0x16>
 8011a26:	2302      	movs	r3, #2
 8011a28:	e027      	b.n	8011a7a <HAL_UARTEx_DisableFifoMode+0x66>
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	2201      	movs	r2, #1
 8011a2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	2224      	movs	r2, #36	@ 0x24
 8011a36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	681a      	ldr	r2, [r3, #0]
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	f022 0201 	bic.w	r2, r2, #1
 8011a50:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8011a58:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	2200      	movs	r2, #0
 8011a5e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	68fa      	ldr	r2, [r7, #12]
 8011a66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	2220      	movs	r2, #32
 8011a6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	2200      	movs	r2, #0
 8011a74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011a78:	2300      	movs	r3, #0
}
 8011a7a:	4618      	mov	r0, r3
 8011a7c:	3714      	adds	r7, #20
 8011a7e:	46bd      	mov	sp, r7
 8011a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a84:	4770      	bx	lr

08011a86 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011a86:	b580      	push	{r7, lr}
 8011a88:	b084      	sub	sp, #16
 8011a8a:	af00      	add	r7, sp, #0
 8011a8c:	6078      	str	r0, [r7, #4]
 8011a8e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011a96:	2b01      	cmp	r3, #1
 8011a98:	d101      	bne.n	8011a9e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011a9a:	2302      	movs	r3, #2
 8011a9c:	e02d      	b.n	8011afa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	2201      	movs	r2, #1
 8011aa2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	2224      	movs	r2, #36	@ 0x24
 8011aaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	681b      	ldr	r3, [r3, #0]
 8011aba:	681a      	ldr	r2, [r3, #0]
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	f022 0201 	bic.w	r2, r2, #1
 8011ac4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	689b      	ldr	r3, [r3, #8]
 8011acc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	683a      	ldr	r2, [r7, #0]
 8011ad6:	430a      	orrs	r2, r1
 8011ad8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011ada:	6878      	ldr	r0, [r7, #4]
 8011adc:	f000 f850 	bl	8011b80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	68fa      	ldr	r2, [r7, #12]
 8011ae6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	2220      	movs	r2, #32
 8011aec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	2200      	movs	r2, #0
 8011af4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011af8:	2300      	movs	r3, #0
}
 8011afa:	4618      	mov	r0, r3
 8011afc:	3710      	adds	r7, #16
 8011afe:	46bd      	mov	sp, r7
 8011b00:	bd80      	pop	{r7, pc}

08011b02 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011b02:	b580      	push	{r7, lr}
 8011b04:	b084      	sub	sp, #16
 8011b06:	af00      	add	r7, sp, #0
 8011b08:	6078      	str	r0, [r7, #4]
 8011b0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011b12:	2b01      	cmp	r3, #1
 8011b14:	d101      	bne.n	8011b1a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011b16:	2302      	movs	r3, #2
 8011b18:	e02d      	b.n	8011b76 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	2201      	movs	r2, #1
 8011b1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	2224      	movs	r2, #36	@ 0x24
 8011b26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	681a      	ldr	r2, [r3, #0]
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	f022 0201 	bic.w	r2, r2, #1
 8011b40:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	689b      	ldr	r3, [r3, #8]
 8011b48:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	683a      	ldr	r2, [r7, #0]
 8011b52:	430a      	orrs	r2, r1
 8011b54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011b56:	6878      	ldr	r0, [r7, #4]
 8011b58:	f000 f812 	bl	8011b80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	68fa      	ldr	r2, [r7, #12]
 8011b62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	2220      	movs	r2, #32
 8011b68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	2200      	movs	r2, #0
 8011b70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011b74:	2300      	movs	r3, #0
}
 8011b76:	4618      	mov	r0, r3
 8011b78:	3710      	adds	r7, #16
 8011b7a:	46bd      	mov	sp, r7
 8011b7c:	bd80      	pop	{r7, pc}
	...

08011b80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011b80:	b480      	push	{r7}
 8011b82:	b085      	sub	sp, #20
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d108      	bne.n	8011ba2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	2201      	movs	r2, #1
 8011b94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	2201      	movs	r2, #1
 8011b9c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011ba0:	e031      	b.n	8011c06 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011ba2:	2310      	movs	r3, #16
 8011ba4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011ba6:	2310      	movs	r3, #16
 8011ba8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	681b      	ldr	r3, [r3, #0]
 8011bae:	689b      	ldr	r3, [r3, #8]
 8011bb0:	0e5b      	lsrs	r3, r3, #25
 8011bb2:	b2db      	uxtb	r3, r3
 8011bb4:	f003 0307 	and.w	r3, r3, #7
 8011bb8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	689b      	ldr	r3, [r3, #8]
 8011bc0:	0f5b      	lsrs	r3, r3, #29
 8011bc2:	b2db      	uxtb	r3, r3
 8011bc4:	f003 0307 	and.w	r3, r3, #7
 8011bc8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011bca:	7bbb      	ldrb	r3, [r7, #14]
 8011bcc:	7b3a      	ldrb	r2, [r7, #12]
 8011bce:	4911      	ldr	r1, [pc, #68]	@ (8011c14 <UARTEx_SetNbDataToProcess+0x94>)
 8011bd0:	5c8a      	ldrb	r2, [r1, r2]
 8011bd2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011bd6:	7b3a      	ldrb	r2, [r7, #12]
 8011bd8:	490f      	ldr	r1, [pc, #60]	@ (8011c18 <UARTEx_SetNbDataToProcess+0x98>)
 8011bda:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011bdc:	fb93 f3f2 	sdiv	r3, r3, r2
 8011be0:	b29a      	uxth	r2, r3
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011be8:	7bfb      	ldrb	r3, [r7, #15]
 8011bea:	7b7a      	ldrb	r2, [r7, #13]
 8011bec:	4909      	ldr	r1, [pc, #36]	@ (8011c14 <UARTEx_SetNbDataToProcess+0x94>)
 8011bee:	5c8a      	ldrb	r2, [r1, r2]
 8011bf0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011bf4:	7b7a      	ldrb	r2, [r7, #13]
 8011bf6:	4908      	ldr	r1, [pc, #32]	@ (8011c18 <UARTEx_SetNbDataToProcess+0x98>)
 8011bf8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011bfa:	fb93 f3f2 	sdiv	r3, r3, r2
 8011bfe:	b29a      	uxth	r2, r3
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8011c06:	bf00      	nop
 8011c08:	3714      	adds	r7, #20
 8011c0a:	46bd      	mov	sp, r7
 8011c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c10:	4770      	bx	lr
 8011c12:	bf00      	nop
 8011c14:	0801532c 	.word	0x0801532c
 8011c18:	08015334 	.word	0x08015334

08011c1c <atoi>:
 8011c1c:	220a      	movs	r2, #10
 8011c1e:	2100      	movs	r1, #0
 8011c20:	f000 b894 	b.w	8011d4c <strtol>

08011c24 <__itoa>:
 8011c24:	1e93      	subs	r3, r2, #2
 8011c26:	2b22      	cmp	r3, #34	@ 0x22
 8011c28:	b510      	push	{r4, lr}
 8011c2a:	460c      	mov	r4, r1
 8011c2c:	d904      	bls.n	8011c38 <__itoa+0x14>
 8011c2e:	2300      	movs	r3, #0
 8011c30:	700b      	strb	r3, [r1, #0]
 8011c32:	461c      	mov	r4, r3
 8011c34:	4620      	mov	r0, r4
 8011c36:	bd10      	pop	{r4, pc}
 8011c38:	2a0a      	cmp	r2, #10
 8011c3a:	d109      	bne.n	8011c50 <__itoa+0x2c>
 8011c3c:	2800      	cmp	r0, #0
 8011c3e:	da07      	bge.n	8011c50 <__itoa+0x2c>
 8011c40:	232d      	movs	r3, #45	@ 0x2d
 8011c42:	700b      	strb	r3, [r1, #0]
 8011c44:	4240      	negs	r0, r0
 8011c46:	2101      	movs	r1, #1
 8011c48:	4421      	add	r1, r4
 8011c4a:	f000 f889 	bl	8011d60 <__utoa>
 8011c4e:	e7f1      	b.n	8011c34 <__itoa+0x10>
 8011c50:	2100      	movs	r1, #0
 8011c52:	e7f9      	b.n	8011c48 <__itoa+0x24>

08011c54 <itoa>:
 8011c54:	f7ff bfe6 	b.w	8011c24 <__itoa>

08011c58 <_strtol_l.constprop.0>:
 8011c58:	2b24      	cmp	r3, #36	@ 0x24
 8011c5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c5e:	4686      	mov	lr, r0
 8011c60:	4690      	mov	r8, r2
 8011c62:	d801      	bhi.n	8011c68 <_strtol_l.constprop.0+0x10>
 8011c64:	2b01      	cmp	r3, #1
 8011c66:	d106      	bne.n	8011c76 <_strtol_l.constprop.0+0x1e>
 8011c68:	f000 fe78 	bl	801295c <__errno>
 8011c6c:	2316      	movs	r3, #22
 8011c6e:	6003      	str	r3, [r0, #0]
 8011c70:	2000      	movs	r0, #0
 8011c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c76:	4834      	ldr	r0, [pc, #208]	@ (8011d48 <_strtol_l.constprop.0+0xf0>)
 8011c78:	460d      	mov	r5, r1
 8011c7a:	462a      	mov	r2, r5
 8011c7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011c80:	5d06      	ldrb	r6, [r0, r4]
 8011c82:	f016 0608 	ands.w	r6, r6, #8
 8011c86:	d1f8      	bne.n	8011c7a <_strtol_l.constprop.0+0x22>
 8011c88:	2c2d      	cmp	r4, #45	@ 0x2d
 8011c8a:	d12d      	bne.n	8011ce8 <_strtol_l.constprop.0+0x90>
 8011c8c:	782c      	ldrb	r4, [r5, #0]
 8011c8e:	2601      	movs	r6, #1
 8011c90:	1c95      	adds	r5, r2, #2
 8011c92:	f033 0210 	bics.w	r2, r3, #16
 8011c96:	d109      	bne.n	8011cac <_strtol_l.constprop.0+0x54>
 8011c98:	2c30      	cmp	r4, #48	@ 0x30
 8011c9a:	d12a      	bne.n	8011cf2 <_strtol_l.constprop.0+0x9a>
 8011c9c:	782a      	ldrb	r2, [r5, #0]
 8011c9e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011ca2:	2a58      	cmp	r2, #88	@ 0x58
 8011ca4:	d125      	bne.n	8011cf2 <_strtol_l.constprop.0+0x9a>
 8011ca6:	786c      	ldrb	r4, [r5, #1]
 8011ca8:	2310      	movs	r3, #16
 8011caa:	3502      	adds	r5, #2
 8011cac:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011cb0:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8011cb4:	2200      	movs	r2, #0
 8011cb6:	fbbc f9f3 	udiv	r9, ip, r3
 8011cba:	4610      	mov	r0, r2
 8011cbc:	fb03 ca19 	mls	sl, r3, r9, ip
 8011cc0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011cc4:	2f09      	cmp	r7, #9
 8011cc6:	d81b      	bhi.n	8011d00 <_strtol_l.constprop.0+0xa8>
 8011cc8:	463c      	mov	r4, r7
 8011cca:	42a3      	cmp	r3, r4
 8011ccc:	dd27      	ble.n	8011d1e <_strtol_l.constprop.0+0xc6>
 8011cce:	1c57      	adds	r7, r2, #1
 8011cd0:	d007      	beq.n	8011ce2 <_strtol_l.constprop.0+0x8a>
 8011cd2:	4581      	cmp	r9, r0
 8011cd4:	d320      	bcc.n	8011d18 <_strtol_l.constprop.0+0xc0>
 8011cd6:	d101      	bne.n	8011cdc <_strtol_l.constprop.0+0x84>
 8011cd8:	45a2      	cmp	sl, r4
 8011cda:	db1d      	blt.n	8011d18 <_strtol_l.constprop.0+0xc0>
 8011cdc:	fb00 4003 	mla	r0, r0, r3, r4
 8011ce0:	2201      	movs	r2, #1
 8011ce2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011ce6:	e7eb      	b.n	8011cc0 <_strtol_l.constprop.0+0x68>
 8011ce8:	2c2b      	cmp	r4, #43	@ 0x2b
 8011cea:	bf04      	itt	eq
 8011cec:	782c      	ldrbeq	r4, [r5, #0]
 8011cee:	1c95      	addeq	r5, r2, #2
 8011cf0:	e7cf      	b.n	8011c92 <_strtol_l.constprop.0+0x3a>
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d1da      	bne.n	8011cac <_strtol_l.constprop.0+0x54>
 8011cf6:	2c30      	cmp	r4, #48	@ 0x30
 8011cf8:	bf0c      	ite	eq
 8011cfa:	2308      	moveq	r3, #8
 8011cfc:	230a      	movne	r3, #10
 8011cfe:	e7d5      	b.n	8011cac <_strtol_l.constprop.0+0x54>
 8011d00:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011d04:	2f19      	cmp	r7, #25
 8011d06:	d801      	bhi.n	8011d0c <_strtol_l.constprop.0+0xb4>
 8011d08:	3c37      	subs	r4, #55	@ 0x37
 8011d0a:	e7de      	b.n	8011cca <_strtol_l.constprop.0+0x72>
 8011d0c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011d10:	2f19      	cmp	r7, #25
 8011d12:	d804      	bhi.n	8011d1e <_strtol_l.constprop.0+0xc6>
 8011d14:	3c57      	subs	r4, #87	@ 0x57
 8011d16:	e7d8      	b.n	8011cca <_strtol_l.constprop.0+0x72>
 8011d18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011d1c:	e7e1      	b.n	8011ce2 <_strtol_l.constprop.0+0x8a>
 8011d1e:	1c53      	adds	r3, r2, #1
 8011d20:	d108      	bne.n	8011d34 <_strtol_l.constprop.0+0xdc>
 8011d22:	2322      	movs	r3, #34	@ 0x22
 8011d24:	f8ce 3000 	str.w	r3, [lr]
 8011d28:	4660      	mov	r0, ip
 8011d2a:	f1b8 0f00 	cmp.w	r8, #0
 8011d2e:	d0a0      	beq.n	8011c72 <_strtol_l.constprop.0+0x1a>
 8011d30:	1e69      	subs	r1, r5, #1
 8011d32:	e006      	b.n	8011d42 <_strtol_l.constprop.0+0xea>
 8011d34:	b106      	cbz	r6, 8011d38 <_strtol_l.constprop.0+0xe0>
 8011d36:	4240      	negs	r0, r0
 8011d38:	f1b8 0f00 	cmp.w	r8, #0
 8011d3c:	d099      	beq.n	8011c72 <_strtol_l.constprop.0+0x1a>
 8011d3e:	2a00      	cmp	r2, #0
 8011d40:	d1f6      	bne.n	8011d30 <_strtol_l.constprop.0+0xd8>
 8011d42:	f8c8 1000 	str.w	r1, [r8]
 8011d46:	e794      	b.n	8011c72 <_strtol_l.constprop.0+0x1a>
 8011d48:	08015362 	.word	0x08015362

08011d4c <strtol>:
 8011d4c:	4613      	mov	r3, r2
 8011d4e:	460a      	mov	r2, r1
 8011d50:	4601      	mov	r1, r0
 8011d52:	4802      	ldr	r0, [pc, #8]	@ (8011d5c <strtol+0x10>)
 8011d54:	6800      	ldr	r0, [r0, #0]
 8011d56:	f7ff bf7f 	b.w	8011c58 <_strtol_l.constprop.0>
 8011d5a:	bf00      	nop
 8011d5c:	24000054 	.word	0x24000054

08011d60 <__utoa>:
 8011d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d62:	4c1f      	ldr	r4, [pc, #124]	@ (8011de0 <__utoa+0x80>)
 8011d64:	b08b      	sub	sp, #44	@ 0x2c
 8011d66:	4605      	mov	r5, r0
 8011d68:	460b      	mov	r3, r1
 8011d6a:	466e      	mov	r6, sp
 8011d6c:	f104 0c20 	add.w	ip, r4, #32
 8011d70:	6820      	ldr	r0, [r4, #0]
 8011d72:	6861      	ldr	r1, [r4, #4]
 8011d74:	4637      	mov	r7, r6
 8011d76:	c703      	stmia	r7!, {r0, r1}
 8011d78:	3408      	adds	r4, #8
 8011d7a:	4564      	cmp	r4, ip
 8011d7c:	463e      	mov	r6, r7
 8011d7e:	d1f7      	bne.n	8011d70 <__utoa+0x10>
 8011d80:	7921      	ldrb	r1, [r4, #4]
 8011d82:	7139      	strb	r1, [r7, #4]
 8011d84:	1e91      	subs	r1, r2, #2
 8011d86:	6820      	ldr	r0, [r4, #0]
 8011d88:	6038      	str	r0, [r7, #0]
 8011d8a:	2922      	cmp	r1, #34	@ 0x22
 8011d8c:	f04f 0100 	mov.w	r1, #0
 8011d90:	d904      	bls.n	8011d9c <__utoa+0x3c>
 8011d92:	7019      	strb	r1, [r3, #0]
 8011d94:	460b      	mov	r3, r1
 8011d96:	4618      	mov	r0, r3
 8011d98:	b00b      	add	sp, #44	@ 0x2c
 8011d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d9c:	1e58      	subs	r0, r3, #1
 8011d9e:	4684      	mov	ip, r0
 8011da0:	fbb5 f7f2 	udiv	r7, r5, r2
 8011da4:	fb02 5617 	mls	r6, r2, r7, r5
 8011da8:	3628      	adds	r6, #40	@ 0x28
 8011daa:	446e      	add	r6, sp
 8011dac:	460c      	mov	r4, r1
 8011dae:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8011db2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8011db6:	462e      	mov	r6, r5
 8011db8:	42b2      	cmp	r2, r6
 8011dba:	f101 0101 	add.w	r1, r1, #1
 8011dbe:	463d      	mov	r5, r7
 8011dc0:	d9ee      	bls.n	8011da0 <__utoa+0x40>
 8011dc2:	2200      	movs	r2, #0
 8011dc4:	545a      	strb	r2, [r3, r1]
 8011dc6:	1919      	adds	r1, r3, r4
 8011dc8:	1aa5      	subs	r5, r4, r2
 8011dca:	42aa      	cmp	r2, r5
 8011dcc:	dae3      	bge.n	8011d96 <__utoa+0x36>
 8011dce:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8011dd2:	780e      	ldrb	r6, [r1, #0]
 8011dd4:	7006      	strb	r6, [r0, #0]
 8011dd6:	3201      	adds	r2, #1
 8011dd8:	f801 5901 	strb.w	r5, [r1], #-1
 8011ddc:	e7f4      	b.n	8011dc8 <__utoa+0x68>
 8011dde:	bf00      	nop
 8011de0:	0801533c 	.word	0x0801533c

08011de4 <__cvt>:
 8011de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011de6:	ed2d 8b02 	vpush	{d8}
 8011dea:	eeb0 8b40 	vmov.f64	d8, d0
 8011dee:	b085      	sub	sp, #20
 8011df0:	4617      	mov	r7, r2
 8011df2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8011df4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011df6:	ee18 2a90 	vmov	r2, s17
 8011dfa:	f025 0520 	bic.w	r5, r5, #32
 8011dfe:	2a00      	cmp	r2, #0
 8011e00:	bfb6      	itet	lt
 8011e02:	222d      	movlt	r2, #45	@ 0x2d
 8011e04:	2200      	movge	r2, #0
 8011e06:	eeb1 8b40 	vneglt.f64	d8, d0
 8011e0a:	2d46      	cmp	r5, #70	@ 0x46
 8011e0c:	460c      	mov	r4, r1
 8011e0e:	701a      	strb	r2, [r3, #0]
 8011e10:	d004      	beq.n	8011e1c <__cvt+0x38>
 8011e12:	2d45      	cmp	r5, #69	@ 0x45
 8011e14:	d100      	bne.n	8011e18 <__cvt+0x34>
 8011e16:	3401      	adds	r4, #1
 8011e18:	2102      	movs	r1, #2
 8011e1a:	e000      	b.n	8011e1e <__cvt+0x3a>
 8011e1c:	2103      	movs	r1, #3
 8011e1e:	ab03      	add	r3, sp, #12
 8011e20:	9301      	str	r3, [sp, #4]
 8011e22:	ab02      	add	r3, sp, #8
 8011e24:	9300      	str	r3, [sp, #0]
 8011e26:	4622      	mov	r2, r4
 8011e28:	4633      	mov	r3, r6
 8011e2a:	eeb0 0b48 	vmov.f64	d0, d8
 8011e2e:	f000 fe53 	bl	8012ad8 <_dtoa_r>
 8011e32:	2d47      	cmp	r5, #71	@ 0x47
 8011e34:	d114      	bne.n	8011e60 <__cvt+0x7c>
 8011e36:	07fb      	lsls	r3, r7, #31
 8011e38:	d50a      	bpl.n	8011e50 <__cvt+0x6c>
 8011e3a:	1902      	adds	r2, r0, r4
 8011e3c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e44:	bf08      	it	eq
 8011e46:	9203      	streq	r2, [sp, #12]
 8011e48:	2130      	movs	r1, #48	@ 0x30
 8011e4a:	9b03      	ldr	r3, [sp, #12]
 8011e4c:	4293      	cmp	r3, r2
 8011e4e:	d319      	bcc.n	8011e84 <__cvt+0xa0>
 8011e50:	9b03      	ldr	r3, [sp, #12]
 8011e52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011e54:	1a1b      	subs	r3, r3, r0
 8011e56:	6013      	str	r3, [r2, #0]
 8011e58:	b005      	add	sp, #20
 8011e5a:	ecbd 8b02 	vpop	{d8}
 8011e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e60:	2d46      	cmp	r5, #70	@ 0x46
 8011e62:	eb00 0204 	add.w	r2, r0, r4
 8011e66:	d1e9      	bne.n	8011e3c <__cvt+0x58>
 8011e68:	7803      	ldrb	r3, [r0, #0]
 8011e6a:	2b30      	cmp	r3, #48	@ 0x30
 8011e6c:	d107      	bne.n	8011e7e <__cvt+0x9a>
 8011e6e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e76:	bf1c      	itt	ne
 8011e78:	f1c4 0401 	rsbne	r4, r4, #1
 8011e7c:	6034      	strne	r4, [r6, #0]
 8011e7e:	6833      	ldr	r3, [r6, #0]
 8011e80:	441a      	add	r2, r3
 8011e82:	e7db      	b.n	8011e3c <__cvt+0x58>
 8011e84:	1c5c      	adds	r4, r3, #1
 8011e86:	9403      	str	r4, [sp, #12]
 8011e88:	7019      	strb	r1, [r3, #0]
 8011e8a:	e7de      	b.n	8011e4a <__cvt+0x66>

08011e8c <__exponent>:
 8011e8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011e8e:	2900      	cmp	r1, #0
 8011e90:	bfba      	itte	lt
 8011e92:	4249      	neglt	r1, r1
 8011e94:	232d      	movlt	r3, #45	@ 0x2d
 8011e96:	232b      	movge	r3, #43	@ 0x2b
 8011e98:	2909      	cmp	r1, #9
 8011e9a:	7002      	strb	r2, [r0, #0]
 8011e9c:	7043      	strb	r3, [r0, #1]
 8011e9e:	dd29      	ble.n	8011ef4 <__exponent+0x68>
 8011ea0:	f10d 0307 	add.w	r3, sp, #7
 8011ea4:	461d      	mov	r5, r3
 8011ea6:	270a      	movs	r7, #10
 8011ea8:	461a      	mov	r2, r3
 8011eaa:	fbb1 f6f7 	udiv	r6, r1, r7
 8011eae:	fb07 1416 	mls	r4, r7, r6, r1
 8011eb2:	3430      	adds	r4, #48	@ 0x30
 8011eb4:	f802 4c01 	strb.w	r4, [r2, #-1]
 8011eb8:	460c      	mov	r4, r1
 8011eba:	2c63      	cmp	r4, #99	@ 0x63
 8011ebc:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8011ec0:	4631      	mov	r1, r6
 8011ec2:	dcf1      	bgt.n	8011ea8 <__exponent+0x1c>
 8011ec4:	3130      	adds	r1, #48	@ 0x30
 8011ec6:	1e94      	subs	r4, r2, #2
 8011ec8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011ecc:	1c41      	adds	r1, r0, #1
 8011ece:	4623      	mov	r3, r4
 8011ed0:	42ab      	cmp	r3, r5
 8011ed2:	d30a      	bcc.n	8011eea <__exponent+0x5e>
 8011ed4:	f10d 0309 	add.w	r3, sp, #9
 8011ed8:	1a9b      	subs	r3, r3, r2
 8011eda:	42ac      	cmp	r4, r5
 8011edc:	bf88      	it	hi
 8011ede:	2300      	movhi	r3, #0
 8011ee0:	3302      	adds	r3, #2
 8011ee2:	4403      	add	r3, r0
 8011ee4:	1a18      	subs	r0, r3, r0
 8011ee6:	b003      	add	sp, #12
 8011ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011eea:	f813 6b01 	ldrb.w	r6, [r3], #1
 8011eee:	f801 6f01 	strb.w	r6, [r1, #1]!
 8011ef2:	e7ed      	b.n	8011ed0 <__exponent+0x44>
 8011ef4:	2330      	movs	r3, #48	@ 0x30
 8011ef6:	3130      	adds	r1, #48	@ 0x30
 8011ef8:	7083      	strb	r3, [r0, #2]
 8011efa:	70c1      	strb	r1, [r0, #3]
 8011efc:	1d03      	adds	r3, r0, #4
 8011efe:	e7f1      	b.n	8011ee4 <__exponent+0x58>

08011f00 <_printf_float>:
 8011f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f04:	b08d      	sub	sp, #52	@ 0x34
 8011f06:	460c      	mov	r4, r1
 8011f08:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8011f0c:	4616      	mov	r6, r2
 8011f0e:	461f      	mov	r7, r3
 8011f10:	4605      	mov	r5, r0
 8011f12:	f000 fcd9 	bl	80128c8 <_localeconv_r>
 8011f16:	f8d0 b000 	ldr.w	fp, [r0]
 8011f1a:	4658      	mov	r0, fp
 8011f1c:	f7ee fa58 	bl	80003d0 <strlen>
 8011f20:	2300      	movs	r3, #0
 8011f22:	930a      	str	r3, [sp, #40]	@ 0x28
 8011f24:	f8d8 3000 	ldr.w	r3, [r8]
 8011f28:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011f2c:	6822      	ldr	r2, [r4, #0]
 8011f2e:	9005      	str	r0, [sp, #20]
 8011f30:	3307      	adds	r3, #7
 8011f32:	f023 0307 	bic.w	r3, r3, #7
 8011f36:	f103 0108 	add.w	r1, r3, #8
 8011f3a:	f8c8 1000 	str.w	r1, [r8]
 8011f3e:	ed93 0b00 	vldr	d0, [r3]
 8011f42:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80121a0 <_printf_float+0x2a0>
 8011f46:	eeb0 7bc0 	vabs.f64	d7, d0
 8011f4a:	eeb4 7b46 	vcmp.f64	d7, d6
 8011f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f52:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8011f56:	dd24      	ble.n	8011fa2 <_printf_float+0xa2>
 8011f58:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f60:	d502      	bpl.n	8011f68 <_printf_float+0x68>
 8011f62:	232d      	movs	r3, #45	@ 0x2d
 8011f64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011f68:	498f      	ldr	r1, [pc, #572]	@ (80121a8 <_printf_float+0x2a8>)
 8011f6a:	4b90      	ldr	r3, [pc, #576]	@ (80121ac <_printf_float+0x2ac>)
 8011f6c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8011f70:	bf94      	ite	ls
 8011f72:	4688      	movls	r8, r1
 8011f74:	4698      	movhi	r8, r3
 8011f76:	f022 0204 	bic.w	r2, r2, #4
 8011f7a:	2303      	movs	r3, #3
 8011f7c:	6123      	str	r3, [r4, #16]
 8011f7e:	6022      	str	r2, [r4, #0]
 8011f80:	f04f 0a00 	mov.w	sl, #0
 8011f84:	9700      	str	r7, [sp, #0]
 8011f86:	4633      	mov	r3, r6
 8011f88:	aa0b      	add	r2, sp, #44	@ 0x2c
 8011f8a:	4621      	mov	r1, r4
 8011f8c:	4628      	mov	r0, r5
 8011f8e:	f000 f9d1 	bl	8012334 <_printf_common>
 8011f92:	3001      	adds	r0, #1
 8011f94:	f040 8089 	bne.w	80120aa <_printf_float+0x1aa>
 8011f98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011f9c:	b00d      	add	sp, #52	@ 0x34
 8011f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fa2:	eeb4 0b40 	vcmp.f64	d0, d0
 8011fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011faa:	d709      	bvc.n	8011fc0 <_printf_float+0xc0>
 8011fac:	ee10 3a90 	vmov	r3, s1
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	bfbc      	itt	lt
 8011fb4:	232d      	movlt	r3, #45	@ 0x2d
 8011fb6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8011fba:	497d      	ldr	r1, [pc, #500]	@ (80121b0 <_printf_float+0x2b0>)
 8011fbc:	4b7d      	ldr	r3, [pc, #500]	@ (80121b4 <_printf_float+0x2b4>)
 8011fbe:	e7d5      	b.n	8011f6c <_printf_float+0x6c>
 8011fc0:	6863      	ldr	r3, [r4, #4]
 8011fc2:	1c59      	adds	r1, r3, #1
 8011fc4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8011fc8:	d139      	bne.n	801203e <_printf_float+0x13e>
 8011fca:	2306      	movs	r3, #6
 8011fcc:	6063      	str	r3, [r4, #4]
 8011fce:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8011fd2:	2300      	movs	r3, #0
 8011fd4:	6022      	str	r2, [r4, #0]
 8011fd6:	9303      	str	r3, [sp, #12]
 8011fd8:	ab0a      	add	r3, sp, #40	@ 0x28
 8011fda:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8011fde:	ab09      	add	r3, sp, #36	@ 0x24
 8011fe0:	9300      	str	r3, [sp, #0]
 8011fe2:	6861      	ldr	r1, [r4, #4]
 8011fe4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8011fe8:	4628      	mov	r0, r5
 8011fea:	f7ff fefb 	bl	8011de4 <__cvt>
 8011fee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8011ff2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011ff4:	4680      	mov	r8, r0
 8011ff6:	d129      	bne.n	801204c <_printf_float+0x14c>
 8011ff8:	1cc8      	adds	r0, r1, #3
 8011ffa:	db02      	blt.n	8012002 <_printf_float+0x102>
 8011ffc:	6863      	ldr	r3, [r4, #4]
 8011ffe:	4299      	cmp	r1, r3
 8012000:	dd41      	ble.n	8012086 <_printf_float+0x186>
 8012002:	f1a9 0902 	sub.w	r9, r9, #2
 8012006:	fa5f f989 	uxtb.w	r9, r9
 801200a:	3901      	subs	r1, #1
 801200c:	464a      	mov	r2, r9
 801200e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8012012:	9109      	str	r1, [sp, #36]	@ 0x24
 8012014:	f7ff ff3a 	bl	8011e8c <__exponent>
 8012018:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801201a:	1813      	adds	r3, r2, r0
 801201c:	2a01      	cmp	r2, #1
 801201e:	4682      	mov	sl, r0
 8012020:	6123      	str	r3, [r4, #16]
 8012022:	dc02      	bgt.n	801202a <_printf_float+0x12a>
 8012024:	6822      	ldr	r2, [r4, #0]
 8012026:	07d2      	lsls	r2, r2, #31
 8012028:	d501      	bpl.n	801202e <_printf_float+0x12e>
 801202a:	3301      	adds	r3, #1
 801202c:	6123      	str	r3, [r4, #16]
 801202e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8012032:	2b00      	cmp	r3, #0
 8012034:	d0a6      	beq.n	8011f84 <_printf_float+0x84>
 8012036:	232d      	movs	r3, #45	@ 0x2d
 8012038:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801203c:	e7a2      	b.n	8011f84 <_printf_float+0x84>
 801203e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012042:	d1c4      	bne.n	8011fce <_printf_float+0xce>
 8012044:	2b00      	cmp	r3, #0
 8012046:	d1c2      	bne.n	8011fce <_printf_float+0xce>
 8012048:	2301      	movs	r3, #1
 801204a:	e7bf      	b.n	8011fcc <_printf_float+0xcc>
 801204c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8012050:	d9db      	bls.n	801200a <_printf_float+0x10a>
 8012052:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8012056:	d118      	bne.n	801208a <_printf_float+0x18a>
 8012058:	2900      	cmp	r1, #0
 801205a:	6863      	ldr	r3, [r4, #4]
 801205c:	dd0b      	ble.n	8012076 <_printf_float+0x176>
 801205e:	6121      	str	r1, [r4, #16]
 8012060:	b913      	cbnz	r3, 8012068 <_printf_float+0x168>
 8012062:	6822      	ldr	r2, [r4, #0]
 8012064:	07d0      	lsls	r0, r2, #31
 8012066:	d502      	bpl.n	801206e <_printf_float+0x16e>
 8012068:	3301      	adds	r3, #1
 801206a:	440b      	add	r3, r1
 801206c:	6123      	str	r3, [r4, #16]
 801206e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012070:	f04f 0a00 	mov.w	sl, #0
 8012074:	e7db      	b.n	801202e <_printf_float+0x12e>
 8012076:	b913      	cbnz	r3, 801207e <_printf_float+0x17e>
 8012078:	6822      	ldr	r2, [r4, #0]
 801207a:	07d2      	lsls	r2, r2, #31
 801207c:	d501      	bpl.n	8012082 <_printf_float+0x182>
 801207e:	3302      	adds	r3, #2
 8012080:	e7f4      	b.n	801206c <_printf_float+0x16c>
 8012082:	2301      	movs	r3, #1
 8012084:	e7f2      	b.n	801206c <_printf_float+0x16c>
 8012086:	f04f 0967 	mov.w	r9, #103	@ 0x67
 801208a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801208c:	4299      	cmp	r1, r3
 801208e:	db05      	blt.n	801209c <_printf_float+0x19c>
 8012090:	6823      	ldr	r3, [r4, #0]
 8012092:	6121      	str	r1, [r4, #16]
 8012094:	07d8      	lsls	r0, r3, #31
 8012096:	d5ea      	bpl.n	801206e <_printf_float+0x16e>
 8012098:	1c4b      	adds	r3, r1, #1
 801209a:	e7e7      	b.n	801206c <_printf_float+0x16c>
 801209c:	2900      	cmp	r1, #0
 801209e:	bfd4      	ite	le
 80120a0:	f1c1 0202 	rsble	r2, r1, #2
 80120a4:	2201      	movgt	r2, #1
 80120a6:	4413      	add	r3, r2
 80120a8:	e7e0      	b.n	801206c <_printf_float+0x16c>
 80120aa:	6823      	ldr	r3, [r4, #0]
 80120ac:	055a      	lsls	r2, r3, #21
 80120ae:	d407      	bmi.n	80120c0 <_printf_float+0x1c0>
 80120b0:	6923      	ldr	r3, [r4, #16]
 80120b2:	4642      	mov	r2, r8
 80120b4:	4631      	mov	r1, r6
 80120b6:	4628      	mov	r0, r5
 80120b8:	47b8      	blx	r7
 80120ba:	3001      	adds	r0, #1
 80120bc:	d12a      	bne.n	8012114 <_printf_float+0x214>
 80120be:	e76b      	b.n	8011f98 <_printf_float+0x98>
 80120c0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80120c4:	f240 80e0 	bls.w	8012288 <_printf_float+0x388>
 80120c8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80120cc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80120d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120d4:	d133      	bne.n	801213e <_printf_float+0x23e>
 80120d6:	4a38      	ldr	r2, [pc, #224]	@ (80121b8 <_printf_float+0x2b8>)
 80120d8:	2301      	movs	r3, #1
 80120da:	4631      	mov	r1, r6
 80120dc:	4628      	mov	r0, r5
 80120de:	47b8      	blx	r7
 80120e0:	3001      	adds	r0, #1
 80120e2:	f43f af59 	beq.w	8011f98 <_printf_float+0x98>
 80120e6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80120ea:	4543      	cmp	r3, r8
 80120ec:	db02      	blt.n	80120f4 <_printf_float+0x1f4>
 80120ee:	6823      	ldr	r3, [r4, #0]
 80120f0:	07d8      	lsls	r0, r3, #31
 80120f2:	d50f      	bpl.n	8012114 <_printf_float+0x214>
 80120f4:	9b05      	ldr	r3, [sp, #20]
 80120f6:	465a      	mov	r2, fp
 80120f8:	4631      	mov	r1, r6
 80120fa:	4628      	mov	r0, r5
 80120fc:	47b8      	blx	r7
 80120fe:	3001      	adds	r0, #1
 8012100:	f43f af4a 	beq.w	8011f98 <_printf_float+0x98>
 8012104:	f04f 0900 	mov.w	r9, #0
 8012108:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 801210c:	f104 0a1a 	add.w	sl, r4, #26
 8012110:	45c8      	cmp	r8, r9
 8012112:	dc09      	bgt.n	8012128 <_printf_float+0x228>
 8012114:	6823      	ldr	r3, [r4, #0]
 8012116:	079b      	lsls	r3, r3, #30
 8012118:	f100 8107 	bmi.w	801232a <_printf_float+0x42a>
 801211c:	68e0      	ldr	r0, [r4, #12]
 801211e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012120:	4298      	cmp	r0, r3
 8012122:	bfb8      	it	lt
 8012124:	4618      	movlt	r0, r3
 8012126:	e739      	b.n	8011f9c <_printf_float+0x9c>
 8012128:	2301      	movs	r3, #1
 801212a:	4652      	mov	r2, sl
 801212c:	4631      	mov	r1, r6
 801212e:	4628      	mov	r0, r5
 8012130:	47b8      	blx	r7
 8012132:	3001      	adds	r0, #1
 8012134:	f43f af30 	beq.w	8011f98 <_printf_float+0x98>
 8012138:	f109 0901 	add.w	r9, r9, #1
 801213c:	e7e8      	b.n	8012110 <_printf_float+0x210>
 801213e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012140:	2b00      	cmp	r3, #0
 8012142:	dc3b      	bgt.n	80121bc <_printf_float+0x2bc>
 8012144:	4a1c      	ldr	r2, [pc, #112]	@ (80121b8 <_printf_float+0x2b8>)
 8012146:	2301      	movs	r3, #1
 8012148:	4631      	mov	r1, r6
 801214a:	4628      	mov	r0, r5
 801214c:	47b8      	blx	r7
 801214e:	3001      	adds	r0, #1
 8012150:	f43f af22 	beq.w	8011f98 <_printf_float+0x98>
 8012154:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012158:	ea59 0303 	orrs.w	r3, r9, r3
 801215c:	d102      	bne.n	8012164 <_printf_float+0x264>
 801215e:	6823      	ldr	r3, [r4, #0]
 8012160:	07d9      	lsls	r1, r3, #31
 8012162:	d5d7      	bpl.n	8012114 <_printf_float+0x214>
 8012164:	9b05      	ldr	r3, [sp, #20]
 8012166:	465a      	mov	r2, fp
 8012168:	4631      	mov	r1, r6
 801216a:	4628      	mov	r0, r5
 801216c:	47b8      	blx	r7
 801216e:	3001      	adds	r0, #1
 8012170:	f43f af12 	beq.w	8011f98 <_printf_float+0x98>
 8012174:	f04f 0a00 	mov.w	sl, #0
 8012178:	f104 0b1a 	add.w	fp, r4, #26
 801217c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801217e:	425b      	negs	r3, r3
 8012180:	4553      	cmp	r3, sl
 8012182:	dc01      	bgt.n	8012188 <_printf_float+0x288>
 8012184:	464b      	mov	r3, r9
 8012186:	e794      	b.n	80120b2 <_printf_float+0x1b2>
 8012188:	2301      	movs	r3, #1
 801218a:	465a      	mov	r2, fp
 801218c:	4631      	mov	r1, r6
 801218e:	4628      	mov	r0, r5
 8012190:	47b8      	blx	r7
 8012192:	3001      	adds	r0, #1
 8012194:	f43f af00 	beq.w	8011f98 <_printf_float+0x98>
 8012198:	f10a 0a01 	add.w	sl, sl, #1
 801219c:	e7ee      	b.n	801217c <_printf_float+0x27c>
 801219e:	bf00      	nop
 80121a0:	ffffffff 	.word	0xffffffff
 80121a4:	7fefffff 	.word	0x7fefffff
 80121a8:	08015462 	.word	0x08015462
 80121ac:	08015466 	.word	0x08015466
 80121b0:	0801546a 	.word	0x0801546a
 80121b4:	0801546e 	.word	0x0801546e
 80121b8:	08015472 	.word	0x08015472
 80121bc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80121be:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80121c2:	4553      	cmp	r3, sl
 80121c4:	bfa8      	it	ge
 80121c6:	4653      	movge	r3, sl
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	4699      	mov	r9, r3
 80121cc:	dc37      	bgt.n	801223e <_printf_float+0x33e>
 80121ce:	2300      	movs	r3, #0
 80121d0:	9307      	str	r3, [sp, #28]
 80121d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80121d6:	f104 021a 	add.w	r2, r4, #26
 80121da:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80121dc:	9907      	ldr	r1, [sp, #28]
 80121de:	9306      	str	r3, [sp, #24]
 80121e0:	eba3 0309 	sub.w	r3, r3, r9
 80121e4:	428b      	cmp	r3, r1
 80121e6:	dc31      	bgt.n	801224c <_printf_float+0x34c>
 80121e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80121ea:	459a      	cmp	sl, r3
 80121ec:	dc3b      	bgt.n	8012266 <_printf_float+0x366>
 80121ee:	6823      	ldr	r3, [r4, #0]
 80121f0:	07da      	lsls	r2, r3, #31
 80121f2:	d438      	bmi.n	8012266 <_printf_float+0x366>
 80121f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80121f6:	ebaa 0903 	sub.w	r9, sl, r3
 80121fa:	9b06      	ldr	r3, [sp, #24]
 80121fc:	ebaa 0303 	sub.w	r3, sl, r3
 8012200:	4599      	cmp	r9, r3
 8012202:	bfa8      	it	ge
 8012204:	4699      	movge	r9, r3
 8012206:	f1b9 0f00 	cmp.w	r9, #0
 801220a:	dc34      	bgt.n	8012276 <_printf_float+0x376>
 801220c:	f04f 0800 	mov.w	r8, #0
 8012210:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012214:	f104 0b1a 	add.w	fp, r4, #26
 8012218:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801221a:	ebaa 0303 	sub.w	r3, sl, r3
 801221e:	eba3 0309 	sub.w	r3, r3, r9
 8012222:	4543      	cmp	r3, r8
 8012224:	f77f af76 	ble.w	8012114 <_printf_float+0x214>
 8012228:	2301      	movs	r3, #1
 801222a:	465a      	mov	r2, fp
 801222c:	4631      	mov	r1, r6
 801222e:	4628      	mov	r0, r5
 8012230:	47b8      	blx	r7
 8012232:	3001      	adds	r0, #1
 8012234:	f43f aeb0 	beq.w	8011f98 <_printf_float+0x98>
 8012238:	f108 0801 	add.w	r8, r8, #1
 801223c:	e7ec      	b.n	8012218 <_printf_float+0x318>
 801223e:	4642      	mov	r2, r8
 8012240:	4631      	mov	r1, r6
 8012242:	4628      	mov	r0, r5
 8012244:	47b8      	blx	r7
 8012246:	3001      	adds	r0, #1
 8012248:	d1c1      	bne.n	80121ce <_printf_float+0x2ce>
 801224a:	e6a5      	b.n	8011f98 <_printf_float+0x98>
 801224c:	2301      	movs	r3, #1
 801224e:	4631      	mov	r1, r6
 8012250:	4628      	mov	r0, r5
 8012252:	9206      	str	r2, [sp, #24]
 8012254:	47b8      	blx	r7
 8012256:	3001      	adds	r0, #1
 8012258:	f43f ae9e 	beq.w	8011f98 <_printf_float+0x98>
 801225c:	9b07      	ldr	r3, [sp, #28]
 801225e:	9a06      	ldr	r2, [sp, #24]
 8012260:	3301      	adds	r3, #1
 8012262:	9307      	str	r3, [sp, #28]
 8012264:	e7b9      	b.n	80121da <_printf_float+0x2da>
 8012266:	9b05      	ldr	r3, [sp, #20]
 8012268:	465a      	mov	r2, fp
 801226a:	4631      	mov	r1, r6
 801226c:	4628      	mov	r0, r5
 801226e:	47b8      	blx	r7
 8012270:	3001      	adds	r0, #1
 8012272:	d1bf      	bne.n	80121f4 <_printf_float+0x2f4>
 8012274:	e690      	b.n	8011f98 <_printf_float+0x98>
 8012276:	9a06      	ldr	r2, [sp, #24]
 8012278:	464b      	mov	r3, r9
 801227a:	4442      	add	r2, r8
 801227c:	4631      	mov	r1, r6
 801227e:	4628      	mov	r0, r5
 8012280:	47b8      	blx	r7
 8012282:	3001      	adds	r0, #1
 8012284:	d1c2      	bne.n	801220c <_printf_float+0x30c>
 8012286:	e687      	b.n	8011f98 <_printf_float+0x98>
 8012288:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 801228c:	f1b9 0f01 	cmp.w	r9, #1
 8012290:	dc01      	bgt.n	8012296 <_printf_float+0x396>
 8012292:	07db      	lsls	r3, r3, #31
 8012294:	d536      	bpl.n	8012304 <_printf_float+0x404>
 8012296:	2301      	movs	r3, #1
 8012298:	4642      	mov	r2, r8
 801229a:	4631      	mov	r1, r6
 801229c:	4628      	mov	r0, r5
 801229e:	47b8      	blx	r7
 80122a0:	3001      	adds	r0, #1
 80122a2:	f43f ae79 	beq.w	8011f98 <_printf_float+0x98>
 80122a6:	9b05      	ldr	r3, [sp, #20]
 80122a8:	465a      	mov	r2, fp
 80122aa:	4631      	mov	r1, r6
 80122ac:	4628      	mov	r0, r5
 80122ae:	47b8      	blx	r7
 80122b0:	3001      	adds	r0, #1
 80122b2:	f43f ae71 	beq.w	8011f98 <_printf_float+0x98>
 80122b6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80122ba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80122be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122c2:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 80122c6:	d018      	beq.n	80122fa <_printf_float+0x3fa>
 80122c8:	464b      	mov	r3, r9
 80122ca:	f108 0201 	add.w	r2, r8, #1
 80122ce:	4631      	mov	r1, r6
 80122d0:	4628      	mov	r0, r5
 80122d2:	47b8      	blx	r7
 80122d4:	3001      	adds	r0, #1
 80122d6:	d10c      	bne.n	80122f2 <_printf_float+0x3f2>
 80122d8:	e65e      	b.n	8011f98 <_printf_float+0x98>
 80122da:	2301      	movs	r3, #1
 80122dc:	465a      	mov	r2, fp
 80122de:	4631      	mov	r1, r6
 80122e0:	4628      	mov	r0, r5
 80122e2:	47b8      	blx	r7
 80122e4:	3001      	adds	r0, #1
 80122e6:	f43f ae57 	beq.w	8011f98 <_printf_float+0x98>
 80122ea:	f108 0801 	add.w	r8, r8, #1
 80122ee:	45c8      	cmp	r8, r9
 80122f0:	dbf3      	blt.n	80122da <_printf_float+0x3da>
 80122f2:	4653      	mov	r3, sl
 80122f4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80122f8:	e6dc      	b.n	80120b4 <_printf_float+0x1b4>
 80122fa:	f04f 0800 	mov.w	r8, #0
 80122fe:	f104 0b1a 	add.w	fp, r4, #26
 8012302:	e7f4      	b.n	80122ee <_printf_float+0x3ee>
 8012304:	2301      	movs	r3, #1
 8012306:	4642      	mov	r2, r8
 8012308:	e7e1      	b.n	80122ce <_printf_float+0x3ce>
 801230a:	2301      	movs	r3, #1
 801230c:	464a      	mov	r2, r9
 801230e:	4631      	mov	r1, r6
 8012310:	4628      	mov	r0, r5
 8012312:	47b8      	blx	r7
 8012314:	3001      	adds	r0, #1
 8012316:	f43f ae3f 	beq.w	8011f98 <_printf_float+0x98>
 801231a:	f108 0801 	add.w	r8, r8, #1
 801231e:	68e3      	ldr	r3, [r4, #12]
 8012320:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012322:	1a5b      	subs	r3, r3, r1
 8012324:	4543      	cmp	r3, r8
 8012326:	dcf0      	bgt.n	801230a <_printf_float+0x40a>
 8012328:	e6f8      	b.n	801211c <_printf_float+0x21c>
 801232a:	f04f 0800 	mov.w	r8, #0
 801232e:	f104 0919 	add.w	r9, r4, #25
 8012332:	e7f4      	b.n	801231e <_printf_float+0x41e>

08012334 <_printf_common>:
 8012334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012338:	4616      	mov	r6, r2
 801233a:	4698      	mov	r8, r3
 801233c:	688a      	ldr	r2, [r1, #8]
 801233e:	690b      	ldr	r3, [r1, #16]
 8012340:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012344:	4293      	cmp	r3, r2
 8012346:	bfb8      	it	lt
 8012348:	4613      	movlt	r3, r2
 801234a:	6033      	str	r3, [r6, #0]
 801234c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012350:	4607      	mov	r7, r0
 8012352:	460c      	mov	r4, r1
 8012354:	b10a      	cbz	r2, 801235a <_printf_common+0x26>
 8012356:	3301      	adds	r3, #1
 8012358:	6033      	str	r3, [r6, #0]
 801235a:	6823      	ldr	r3, [r4, #0]
 801235c:	0699      	lsls	r1, r3, #26
 801235e:	bf42      	ittt	mi
 8012360:	6833      	ldrmi	r3, [r6, #0]
 8012362:	3302      	addmi	r3, #2
 8012364:	6033      	strmi	r3, [r6, #0]
 8012366:	6825      	ldr	r5, [r4, #0]
 8012368:	f015 0506 	ands.w	r5, r5, #6
 801236c:	d106      	bne.n	801237c <_printf_common+0x48>
 801236e:	f104 0a19 	add.w	sl, r4, #25
 8012372:	68e3      	ldr	r3, [r4, #12]
 8012374:	6832      	ldr	r2, [r6, #0]
 8012376:	1a9b      	subs	r3, r3, r2
 8012378:	42ab      	cmp	r3, r5
 801237a:	dc26      	bgt.n	80123ca <_printf_common+0x96>
 801237c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012380:	6822      	ldr	r2, [r4, #0]
 8012382:	3b00      	subs	r3, #0
 8012384:	bf18      	it	ne
 8012386:	2301      	movne	r3, #1
 8012388:	0692      	lsls	r2, r2, #26
 801238a:	d42b      	bmi.n	80123e4 <_printf_common+0xb0>
 801238c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012390:	4641      	mov	r1, r8
 8012392:	4638      	mov	r0, r7
 8012394:	47c8      	blx	r9
 8012396:	3001      	adds	r0, #1
 8012398:	d01e      	beq.n	80123d8 <_printf_common+0xa4>
 801239a:	6823      	ldr	r3, [r4, #0]
 801239c:	6922      	ldr	r2, [r4, #16]
 801239e:	f003 0306 	and.w	r3, r3, #6
 80123a2:	2b04      	cmp	r3, #4
 80123a4:	bf02      	ittt	eq
 80123a6:	68e5      	ldreq	r5, [r4, #12]
 80123a8:	6833      	ldreq	r3, [r6, #0]
 80123aa:	1aed      	subeq	r5, r5, r3
 80123ac:	68a3      	ldr	r3, [r4, #8]
 80123ae:	bf0c      	ite	eq
 80123b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80123b4:	2500      	movne	r5, #0
 80123b6:	4293      	cmp	r3, r2
 80123b8:	bfc4      	itt	gt
 80123ba:	1a9b      	subgt	r3, r3, r2
 80123bc:	18ed      	addgt	r5, r5, r3
 80123be:	2600      	movs	r6, #0
 80123c0:	341a      	adds	r4, #26
 80123c2:	42b5      	cmp	r5, r6
 80123c4:	d11a      	bne.n	80123fc <_printf_common+0xc8>
 80123c6:	2000      	movs	r0, #0
 80123c8:	e008      	b.n	80123dc <_printf_common+0xa8>
 80123ca:	2301      	movs	r3, #1
 80123cc:	4652      	mov	r2, sl
 80123ce:	4641      	mov	r1, r8
 80123d0:	4638      	mov	r0, r7
 80123d2:	47c8      	blx	r9
 80123d4:	3001      	adds	r0, #1
 80123d6:	d103      	bne.n	80123e0 <_printf_common+0xac>
 80123d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80123dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123e0:	3501      	adds	r5, #1
 80123e2:	e7c6      	b.n	8012372 <_printf_common+0x3e>
 80123e4:	18e1      	adds	r1, r4, r3
 80123e6:	1c5a      	adds	r2, r3, #1
 80123e8:	2030      	movs	r0, #48	@ 0x30
 80123ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80123ee:	4422      	add	r2, r4
 80123f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80123f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80123f8:	3302      	adds	r3, #2
 80123fa:	e7c7      	b.n	801238c <_printf_common+0x58>
 80123fc:	2301      	movs	r3, #1
 80123fe:	4622      	mov	r2, r4
 8012400:	4641      	mov	r1, r8
 8012402:	4638      	mov	r0, r7
 8012404:	47c8      	blx	r9
 8012406:	3001      	adds	r0, #1
 8012408:	d0e6      	beq.n	80123d8 <_printf_common+0xa4>
 801240a:	3601      	adds	r6, #1
 801240c:	e7d9      	b.n	80123c2 <_printf_common+0x8e>
	...

08012410 <_printf_i>:
 8012410:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012414:	7e0f      	ldrb	r7, [r1, #24]
 8012416:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012418:	2f78      	cmp	r7, #120	@ 0x78
 801241a:	4691      	mov	r9, r2
 801241c:	4680      	mov	r8, r0
 801241e:	460c      	mov	r4, r1
 8012420:	469a      	mov	sl, r3
 8012422:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012426:	d807      	bhi.n	8012438 <_printf_i+0x28>
 8012428:	2f62      	cmp	r7, #98	@ 0x62
 801242a:	d80a      	bhi.n	8012442 <_printf_i+0x32>
 801242c:	2f00      	cmp	r7, #0
 801242e:	f000 80d2 	beq.w	80125d6 <_printf_i+0x1c6>
 8012432:	2f58      	cmp	r7, #88	@ 0x58
 8012434:	f000 80b9 	beq.w	80125aa <_printf_i+0x19a>
 8012438:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801243c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012440:	e03a      	b.n	80124b8 <_printf_i+0xa8>
 8012442:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012446:	2b15      	cmp	r3, #21
 8012448:	d8f6      	bhi.n	8012438 <_printf_i+0x28>
 801244a:	a101      	add	r1, pc, #4	@ (adr r1, 8012450 <_printf_i+0x40>)
 801244c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012450:	080124a9 	.word	0x080124a9
 8012454:	080124bd 	.word	0x080124bd
 8012458:	08012439 	.word	0x08012439
 801245c:	08012439 	.word	0x08012439
 8012460:	08012439 	.word	0x08012439
 8012464:	08012439 	.word	0x08012439
 8012468:	080124bd 	.word	0x080124bd
 801246c:	08012439 	.word	0x08012439
 8012470:	08012439 	.word	0x08012439
 8012474:	08012439 	.word	0x08012439
 8012478:	08012439 	.word	0x08012439
 801247c:	080125bd 	.word	0x080125bd
 8012480:	080124e7 	.word	0x080124e7
 8012484:	08012577 	.word	0x08012577
 8012488:	08012439 	.word	0x08012439
 801248c:	08012439 	.word	0x08012439
 8012490:	080125df 	.word	0x080125df
 8012494:	08012439 	.word	0x08012439
 8012498:	080124e7 	.word	0x080124e7
 801249c:	08012439 	.word	0x08012439
 80124a0:	08012439 	.word	0x08012439
 80124a4:	0801257f 	.word	0x0801257f
 80124a8:	6833      	ldr	r3, [r6, #0]
 80124aa:	1d1a      	adds	r2, r3, #4
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	6032      	str	r2, [r6, #0]
 80124b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80124b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80124b8:	2301      	movs	r3, #1
 80124ba:	e09d      	b.n	80125f8 <_printf_i+0x1e8>
 80124bc:	6833      	ldr	r3, [r6, #0]
 80124be:	6820      	ldr	r0, [r4, #0]
 80124c0:	1d19      	adds	r1, r3, #4
 80124c2:	6031      	str	r1, [r6, #0]
 80124c4:	0606      	lsls	r6, r0, #24
 80124c6:	d501      	bpl.n	80124cc <_printf_i+0xbc>
 80124c8:	681d      	ldr	r5, [r3, #0]
 80124ca:	e003      	b.n	80124d4 <_printf_i+0xc4>
 80124cc:	0645      	lsls	r5, r0, #25
 80124ce:	d5fb      	bpl.n	80124c8 <_printf_i+0xb8>
 80124d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80124d4:	2d00      	cmp	r5, #0
 80124d6:	da03      	bge.n	80124e0 <_printf_i+0xd0>
 80124d8:	232d      	movs	r3, #45	@ 0x2d
 80124da:	426d      	negs	r5, r5
 80124dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80124e0:	4859      	ldr	r0, [pc, #356]	@ (8012648 <_printf_i+0x238>)
 80124e2:	230a      	movs	r3, #10
 80124e4:	e011      	b.n	801250a <_printf_i+0xfa>
 80124e6:	6821      	ldr	r1, [r4, #0]
 80124e8:	6833      	ldr	r3, [r6, #0]
 80124ea:	0608      	lsls	r0, r1, #24
 80124ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80124f0:	d402      	bmi.n	80124f8 <_printf_i+0xe8>
 80124f2:	0649      	lsls	r1, r1, #25
 80124f4:	bf48      	it	mi
 80124f6:	b2ad      	uxthmi	r5, r5
 80124f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80124fa:	4853      	ldr	r0, [pc, #332]	@ (8012648 <_printf_i+0x238>)
 80124fc:	6033      	str	r3, [r6, #0]
 80124fe:	bf14      	ite	ne
 8012500:	230a      	movne	r3, #10
 8012502:	2308      	moveq	r3, #8
 8012504:	2100      	movs	r1, #0
 8012506:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801250a:	6866      	ldr	r6, [r4, #4]
 801250c:	60a6      	str	r6, [r4, #8]
 801250e:	2e00      	cmp	r6, #0
 8012510:	bfa2      	ittt	ge
 8012512:	6821      	ldrge	r1, [r4, #0]
 8012514:	f021 0104 	bicge.w	r1, r1, #4
 8012518:	6021      	strge	r1, [r4, #0]
 801251a:	b90d      	cbnz	r5, 8012520 <_printf_i+0x110>
 801251c:	2e00      	cmp	r6, #0
 801251e:	d04b      	beq.n	80125b8 <_printf_i+0x1a8>
 8012520:	4616      	mov	r6, r2
 8012522:	fbb5 f1f3 	udiv	r1, r5, r3
 8012526:	fb03 5711 	mls	r7, r3, r1, r5
 801252a:	5dc7      	ldrb	r7, [r0, r7]
 801252c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012530:	462f      	mov	r7, r5
 8012532:	42bb      	cmp	r3, r7
 8012534:	460d      	mov	r5, r1
 8012536:	d9f4      	bls.n	8012522 <_printf_i+0x112>
 8012538:	2b08      	cmp	r3, #8
 801253a:	d10b      	bne.n	8012554 <_printf_i+0x144>
 801253c:	6823      	ldr	r3, [r4, #0]
 801253e:	07df      	lsls	r7, r3, #31
 8012540:	d508      	bpl.n	8012554 <_printf_i+0x144>
 8012542:	6923      	ldr	r3, [r4, #16]
 8012544:	6861      	ldr	r1, [r4, #4]
 8012546:	4299      	cmp	r1, r3
 8012548:	bfde      	ittt	le
 801254a:	2330      	movle	r3, #48	@ 0x30
 801254c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012550:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8012554:	1b92      	subs	r2, r2, r6
 8012556:	6122      	str	r2, [r4, #16]
 8012558:	f8cd a000 	str.w	sl, [sp]
 801255c:	464b      	mov	r3, r9
 801255e:	aa03      	add	r2, sp, #12
 8012560:	4621      	mov	r1, r4
 8012562:	4640      	mov	r0, r8
 8012564:	f7ff fee6 	bl	8012334 <_printf_common>
 8012568:	3001      	adds	r0, #1
 801256a:	d14a      	bne.n	8012602 <_printf_i+0x1f2>
 801256c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012570:	b004      	add	sp, #16
 8012572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012576:	6823      	ldr	r3, [r4, #0]
 8012578:	f043 0320 	orr.w	r3, r3, #32
 801257c:	6023      	str	r3, [r4, #0]
 801257e:	4833      	ldr	r0, [pc, #204]	@ (801264c <_printf_i+0x23c>)
 8012580:	2778      	movs	r7, #120	@ 0x78
 8012582:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012586:	6823      	ldr	r3, [r4, #0]
 8012588:	6831      	ldr	r1, [r6, #0]
 801258a:	061f      	lsls	r7, r3, #24
 801258c:	f851 5b04 	ldr.w	r5, [r1], #4
 8012590:	d402      	bmi.n	8012598 <_printf_i+0x188>
 8012592:	065f      	lsls	r7, r3, #25
 8012594:	bf48      	it	mi
 8012596:	b2ad      	uxthmi	r5, r5
 8012598:	6031      	str	r1, [r6, #0]
 801259a:	07d9      	lsls	r1, r3, #31
 801259c:	bf44      	itt	mi
 801259e:	f043 0320 	orrmi.w	r3, r3, #32
 80125a2:	6023      	strmi	r3, [r4, #0]
 80125a4:	b11d      	cbz	r5, 80125ae <_printf_i+0x19e>
 80125a6:	2310      	movs	r3, #16
 80125a8:	e7ac      	b.n	8012504 <_printf_i+0xf4>
 80125aa:	4827      	ldr	r0, [pc, #156]	@ (8012648 <_printf_i+0x238>)
 80125ac:	e7e9      	b.n	8012582 <_printf_i+0x172>
 80125ae:	6823      	ldr	r3, [r4, #0]
 80125b0:	f023 0320 	bic.w	r3, r3, #32
 80125b4:	6023      	str	r3, [r4, #0]
 80125b6:	e7f6      	b.n	80125a6 <_printf_i+0x196>
 80125b8:	4616      	mov	r6, r2
 80125ba:	e7bd      	b.n	8012538 <_printf_i+0x128>
 80125bc:	6833      	ldr	r3, [r6, #0]
 80125be:	6825      	ldr	r5, [r4, #0]
 80125c0:	6961      	ldr	r1, [r4, #20]
 80125c2:	1d18      	adds	r0, r3, #4
 80125c4:	6030      	str	r0, [r6, #0]
 80125c6:	062e      	lsls	r6, r5, #24
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	d501      	bpl.n	80125d0 <_printf_i+0x1c0>
 80125cc:	6019      	str	r1, [r3, #0]
 80125ce:	e002      	b.n	80125d6 <_printf_i+0x1c6>
 80125d0:	0668      	lsls	r0, r5, #25
 80125d2:	d5fb      	bpl.n	80125cc <_printf_i+0x1bc>
 80125d4:	8019      	strh	r1, [r3, #0]
 80125d6:	2300      	movs	r3, #0
 80125d8:	6123      	str	r3, [r4, #16]
 80125da:	4616      	mov	r6, r2
 80125dc:	e7bc      	b.n	8012558 <_printf_i+0x148>
 80125de:	6833      	ldr	r3, [r6, #0]
 80125e0:	1d1a      	adds	r2, r3, #4
 80125e2:	6032      	str	r2, [r6, #0]
 80125e4:	681e      	ldr	r6, [r3, #0]
 80125e6:	6862      	ldr	r2, [r4, #4]
 80125e8:	2100      	movs	r1, #0
 80125ea:	4630      	mov	r0, r6
 80125ec:	f7ed fea0 	bl	8000330 <memchr>
 80125f0:	b108      	cbz	r0, 80125f6 <_printf_i+0x1e6>
 80125f2:	1b80      	subs	r0, r0, r6
 80125f4:	6060      	str	r0, [r4, #4]
 80125f6:	6863      	ldr	r3, [r4, #4]
 80125f8:	6123      	str	r3, [r4, #16]
 80125fa:	2300      	movs	r3, #0
 80125fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012600:	e7aa      	b.n	8012558 <_printf_i+0x148>
 8012602:	6923      	ldr	r3, [r4, #16]
 8012604:	4632      	mov	r2, r6
 8012606:	4649      	mov	r1, r9
 8012608:	4640      	mov	r0, r8
 801260a:	47d0      	blx	sl
 801260c:	3001      	adds	r0, #1
 801260e:	d0ad      	beq.n	801256c <_printf_i+0x15c>
 8012610:	6823      	ldr	r3, [r4, #0]
 8012612:	079b      	lsls	r3, r3, #30
 8012614:	d413      	bmi.n	801263e <_printf_i+0x22e>
 8012616:	68e0      	ldr	r0, [r4, #12]
 8012618:	9b03      	ldr	r3, [sp, #12]
 801261a:	4298      	cmp	r0, r3
 801261c:	bfb8      	it	lt
 801261e:	4618      	movlt	r0, r3
 8012620:	e7a6      	b.n	8012570 <_printf_i+0x160>
 8012622:	2301      	movs	r3, #1
 8012624:	4632      	mov	r2, r6
 8012626:	4649      	mov	r1, r9
 8012628:	4640      	mov	r0, r8
 801262a:	47d0      	blx	sl
 801262c:	3001      	adds	r0, #1
 801262e:	d09d      	beq.n	801256c <_printf_i+0x15c>
 8012630:	3501      	adds	r5, #1
 8012632:	68e3      	ldr	r3, [r4, #12]
 8012634:	9903      	ldr	r1, [sp, #12]
 8012636:	1a5b      	subs	r3, r3, r1
 8012638:	42ab      	cmp	r3, r5
 801263a:	dcf2      	bgt.n	8012622 <_printf_i+0x212>
 801263c:	e7eb      	b.n	8012616 <_printf_i+0x206>
 801263e:	2500      	movs	r5, #0
 8012640:	f104 0619 	add.w	r6, r4, #25
 8012644:	e7f5      	b.n	8012632 <_printf_i+0x222>
 8012646:	bf00      	nop
 8012648:	08015474 	.word	0x08015474
 801264c:	08015485 	.word	0x08015485

08012650 <std>:
 8012650:	2300      	movs	r3, #0
 8012652:	b510      	push	{r4, lr}
 8012654:	4604      	mov	r4, r0
 8012656:	e9c0 3300 	strd	r3, r3, [r0]
 801265a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801265e:	6083      	str	r3, [r0, #8]
 8012660:	8181      	strh	r1, [r0, #12]
 8012662:	6643      	str	r3, [r0, #100]	@ 0x64
 8012664:	81c2      	strh	r2, [r0, #14]
 8012666:	6183      	str	r3, [r0, #24]
 8012668:	4619      	mov	r1, r3
 801266a:	2208      	movs	r2, #8
 801266c:	305c      	adds	r0, #92	@ 0x5c
 801266e:	f000 f914 	bl	801289a <memset>
 8012672:	4b0d      	ldr	r3, [pc, #52]	@ (80126a8 <std+0x58>)
 8012674:	6263      	str	r3, [r4, #36]	@ 0x24
 8012676:	4b0d      	ldr	r3, [pc, #52]	@ (80126ac <std+0x5c>)
 8012678:	62a3      	str	r3, [r4, #40]	@ 0x28
 801267a:	4b0d      	ldr	r3, [pc, #52]	@ (80126b0 <std+0x60>)
 801267c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801267e:	4b0d      	ldr	r3, [pc, #52]	@ (80126b4 <std+0x64>)
 8012680:	6323      	str	r3, [r4, #48]	@ 0x30
 8012682:	4b0d      	ldr	r3, [pc, #52]	@ (80126b8 <std+0x68>)
 8012684:	6224      	str	r4, [r4, #32]
 8012686:	429c      	cmp	r4, r3
 8012688:	d006      	beq.n	8012698 <std+0x48>
 801268a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801268e:	4294      	cmp	r4, r2
 8012690:	d002      	beq.n	8012698 <std+0x48>
 8012692:	33d0      	adds	r3, #208	@ 0xd0
 8012694:	429c      	cmp	r4, r3
 8012696:	d105      	bne.n	80126a4 <std+0x54>
 8012698:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801269c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80126a0:	f000 b986 	b.w	80129b0 <__retarget_lock_init_recursive>
 80126a4:	bd10      	pop	{r4, pc}
 80126a6:	bf00      	nop
 80126a8:	08012815 	.word	0x08012815
 80126ac:	08012837 	.word	0x08012837
 80126b0:	0801286f 	.word	0x0801286f
 80126b4:	08012893 	.word	0x08012893
 80126b8:	240010c4 	.word	0x240010c4

080126bc <stdio_exit_handler>:
 80126bc:	4a02      	ldr	r2, [pc, #8]	@ (80126c8 <stdio_exit_handler+0xc>)
 80126be:	4903      	ldr	r1, [pc, #12]	@ (80126cc <stdio_exit_handler+0x10>)
 80126c0:	4803      	ldr	r0, [pc, #12]	@ (80126d0 <stdio_exit_handler+0x14>)
 80126c2:	f000 b869 	b.w	8012798 <_fwalk_sglue>
 80126c6:	bf00      	nop
 80126c8:	24000048 	.word	0x24000048
 80126cc:	08014241 	.word	0x08014241
 80126d0:	24000058 	.word	0x24000058

080126d4 <cleanup_stdio>:
 80126d4:	6841      	ldr	r1, [r0, #4]
 80126d6:	4b0c      	ldr	r3, [pc, #48]	@ (8012708 <cleanup_stdio+0x34>)
 80126d8:	4299      	cmp	r1, r3
 80126da:	b510      	push	{r4, lr}
 80126dc:	4604      	mov	r4, r0
 80126de:	d001      	beq.n	80126e4 <cleanup_stdio+0x10>
 80126e0:	f001 fdae 	bl	8014240 <_fflush_r>
 80126e4:	68a1      	ldr	r1, [r4, #8]
 80126e6:	4b09      	ldr	r3, [pc, #36]	@ (801270c <cleanup_stdio+0x38>)
 80126e8:	4299      	cmp	r1, r3
 80126ea:	d002      	beq.n	80126f2 <cleanup_stdio+0x1e>
 80126ec:	4620      	mov	r0, r4
 80126ee:	f001 fda7 	bl	8014240 <_fflush_r>
 80126f2:	68e1      	ldr	r1, [r4, #12]
 80126f4:	4b06      	ldr	r3, [pc, #24]	@ (8012710 <cleanup_stdio+0x3c>)
 80126f6:	4299      	cmp	r1, r3
 80126f8:	d004      	beq.n	8012704 <cleanup_stdio+0x30>
 80126fa:	4620      	mov	r0, r4
 80126fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012700:	f001 bd9e 	b.w	8014240 <_fflush_r>
 8012704:	bd10      	pop	{r4, pc}
 8012706:	bf00      	nop
 8012708:	240010c4 	.word	0x240010c4
 801270c:	2400112c 	.word	0x2400112c
 8012710:	24001194 	.word	0x24001194

08012714 <global_stdio_init.part.0>:
 8012714:	b510      	push	{r4, lr}
 8012716:	4b0b      	ldr	r3, [pc, #44]	@ (8012744 <global_stdio_init.part.0+0x30>)
 8012718:	4c0b      	ldr	r4, [pc, #44]	@ (8012748 <global_stdio_init.part.0+0x34>)
 801271a:	4a0c      	ldr	r2, [pc, #48]	@ (801274c <global_stdio_init.part.0+0x38>)
 801271c:	601a      	str	r2, [r3, #0]
 801271e:	4620      	mov	r0, r4
 8012720:	2200      	movs	r2, #0
 8012722:	2104      	movs	r1, #4
 8012724:	f7ff ff94 	bl	8012650 <std>
 8012728:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801272c:	2201      	movs	r2, #1
 801272e:	2109      	movs	r1, #9
 8012730:	f7ff ff8e 	bl	8012650 <std>
 8012734:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012738:	2202      	movs	r2, #2
 801273a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801273e:	2112      	movs	r1, #18
 8012740:	f7ff bf86 	b.w	8012650 <std>
 8012744:	240011fc 	.word	0x240011fc
 8012748:	240010c4 	.word	0x240010c4
 801274c:	080126bd 	.word	0x080126bd

08012750 <__sfp_lock_acquire>:
 8012750:	4801      	ldr	r0, [pc, #4]	@ (8012758 <__sfp_lock_acquire+0x8>)
 8012752:	f000 b92e 	b.w	80129b2 <__retarget_lock_acquire_recursive>
 8012756:	bf00      	nop
 8012758:	24001205 	.word	0x24001205

0801275c <__sfp_lock_release>:
 801275c:	4801      	ldr	r0, [pc, #4]	@ (8012764 <__sfp_lock_release+0x8>)
 801275e:	f000 b929 	b.w	80129b4 <__retarget_lock_release_recursive>
 8012762:	bf00      	nop
 8012764:	24001205 	.word	0x24001205

08012768 <__sinit>:
 8012768:	b510      	push	{r4, lr}
 801276a:	4604      	mov	r4, r0
 801276c:	f7ff fff0 	bl	8012750 <__sfp_lock_acquire>
 8012770:	6a23      	ldr	r3, [r4, #32]
 8012772:	b11b      	cbz	r3, 801277c <__sinit+0x14>
 8012774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012778:	f7ff bff0 	b.w	801275c <__sfp_lock_release>
 801277c:	4b04      	ldr	r3, [pc, #16]	@ (8012790 <__sinit+0x28>)
 801277e:	6223      	str	r3, [r4, #32]
 8012780:	4b04      	ldr	r3, [pc, #16]	@ (8012794 <__sinit+0x2c>)
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	2b00      	cmp	r3, #0
 8012786:	d1f5      	bne.n	8012774 <__sinit+0xc>
 8012788:	f7ff ffc4 	bl	8012714 <global_stdio_init.part.0>
 801278c:	e7f2      	b.n	8012774 <__sinit+0xc>
 801278e:	bf00      	nop
 8012790:	080126d5 	.word	0x080126d5
 8012794:	240011fc 	.word	0x240011fc

08012798 <_fwalk_sglue>:
 8012798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801279c:	4607      	mov	r7, r0
 801279e:	4688      	mov	r8, r1
 80127a0:	4614      	mov	r4, r2
 80127a2:	2600      	movs	r6, #0
 80127a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80127a8:	f1b9 0901 	subs.w	r9, r9, #1
 80127ac:	d505      	bpl.n	80127ba <_fwalk_sglue+0x22>
 80127ae:	6824      	ldr	r4, [r4, #0]
 80127b0:	2c00      	cmp	r4, #0
 80127b2:	d1f7      	bne.n	80127a4 <_fwalk_sglue+0xc>
 80127b4:	4630      	mov	r0, r6
 80127b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127ba:	89ab      	ldrh	r3, [r5, #12]
 80127bc:	2b01      	cmp	r3, #1
 80127be:	d907      	bls.n	80127d0 <_fwalk_sglue+0x38>
 80127c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80127c4:	3301      	adds	r3, #1
 80127c6:	d003      	beq.n	80127d0 <_fwalk_sglue+0x38>
 80127c8:	4629      	mov	r1, r5
 80127ca:	4638      	mov	r0, r7
 80127cc:	47c0      	blx	r8
 80127ce:	4306      	orrs	r6, r0
 80127d0:	3568      	adds	r5, #104	@ 0x68
 80127d2:	e7e9      	b.n	80127a8 <_fwalk_sglue+0x10>

080127d4 <siprintf>:
 80127d4:	b40e      	push	{r1, r2, r3}
 80127d6:	b500      	push	{lr}
 80127d8:	b09c      	sub	sp, #112	@ 0x70
 80127da:	ab1d      	add	r3, sp, #116	@ 0x74
 80127dc:	9002      	str	r0, [sp, #8]
 80127de:	9006      	str	r0, [sp, #24]
 80127e0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80127e4:	4809      	ldr	r0, [pc, #36]	@ (801280c <siprintf+0x38>)
 80127e6:	9107      	str	r1, [sp, #28]
 80127e8:	9104      	str	r1, [sp, #16]
 80127ea:	4909      	ldr	r1, [pc, #36]	@ (8012810 <siprintf+0x3c>)
 80127ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80127f0:	9105      	str	r1, [sp, #20]
 80127f2:	6800      	ldr	r0, [r0, #0]
 80127f4:	9301      	str	r3, [sp, #4]
 80127f6:	a902      	add	r1, sp, #8
 80127f8:	f001 fba2 	bl	8013f40 <_svfiprintf_r>
 80127fc:	9b02      	ldr	r3, [sp, #8]
 80127fe:	2200      	movs	r2, #0
 8012800:	701a      	strb	r2, [r3, #0]
 8012802:	b01c      	add	sp, #112	@ 0x70
 8012804:	f85d eb04 	ldr.w	lr, [sp], #4
 8012808:	b003      	add	sp, #12
 801280a:	4770      	bx	lr
 801280c:	24000054 	.word	0x24000054
 8012810:	ffff0208 	.word	0xffff0208

08012814 <__sread>:
 8012814:	b510      	push	{r4, lr}
 8012816:	460c      	mov	r4, r1
 8012818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801281c:	f000 f87a 	bl	8012914 <_read_r>
 8012820:	2800      	cmp	r0, #0
 8012822:	bfab      	itete	ge
 8012824:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012826:	89a3      	ldrhlt	r3, [r4, #12]
 8012828:	181b      	addge	r3, r3, r0
 801282a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801282e:	bfac      	ite	ge
 8012830:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012832:	81a3      	strhlt	r3, [r4, #12]
 8012834:	bd10      	pop	{r4, pc}

08012836 <__swrite>:
 8012836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801283a:	461f      	mov	r7, r3
 801283c:	898b      	ldrh	r3, [r1, #12]
 801283e:	05db      	lsls	r3, r3, #23
 8012840:	4605      	mov	r5, r0
 8012842:	460c      	mov	r4, r1
 8012844:	4616      	mov	r6, r2
 8012846:	d505      	bpl.n	8012854 <__swrite+0x1e>
 8012848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801284c:	2302      	movs	r3, #2
 801284e:	2200      	movs	r2, #0
 8012850:	f000 f84e 	bl	80128f0 <_lseek_r>
 8012854:	89a3      	ldrh	r3, [r4, #12]
 8012856:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801285a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801285e:	81a3      	strh	r3, [r4, #12]
 8012860:	4632      	mov	r2, r6
 8012862:	463b      	mov	r3, r7
 8012864:	4628      	mov	r0, r5
 8012866:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801286a:	f000 b865 	b.w	8012938 <_write_r>

0801286e <__sseek>:
 801286e:	b510      	push	{r4, lr}
 8012870:	460c      	mov	r4, r1
 8012872:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012876:	f000 f83b 	bl	80128f0 <_lseek_r>
 801287a:	1c43      	adds	r3, r0, #1
 801287c:	89a3      	ldrh	r3, [r4, #12]
 801287e:	bf15      	itete	ne
 8012880:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012882:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012886:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801288a:	81a3      	strheq	r3, [r4, #12]
 801288c:	bf18      	it	ne
 801288e:	81a3      	strhne	r3, [r4, #12]
 8012890:	bd10      	pop	{r4, pc}

08012892 <__sclose>:
 8012892:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012896:	f000 b81b 	b.w	80128d0 <_close_r>

0801289a <memset>:
 801289a:	4402      	add	r2, r0
 801289c:	4603      	mov	r3, r0
 801289e:	4293      	cmp	r3, r2
 80128a0:	d100      	bne.n	80128a4 <memset+0xa>
 80128a2:	4770      	bx	lr
 80128a4:	f803 1b01 	strb.w	r1, [r3], #1
 80128a8:	e7f9      	b.n	801289e <memset+0x4>

080128aa <strcat>:
 80128aa:	b510      	push	{r4, lr}
 80128ac:	4602      	mov	r2, r0
 80128ae:	7814      	ldrb	r4, [r2, #0]
 80128b0:	4613      	mov	r3, r2
 80128b2:	3201      	adds	r2, #1
 80128b4:	2c00      	cmp	r4, #0
 80128b6:	d1fa      	bne.n	80128ae <strcat+0x4>
 80128b8:	3b01      	subs	r3, #1
 80128ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80128be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80128c2:	2a00      	cmp	r2, #0
 80128c4:	d1f9      	bne.n	80128ba <strcat+0x10>
 80128c6:	bd10      	pop	{r4, pc}

080128c8 <_localeconv_r>:
 80128c8:	4800      	ldr	r0, [pc, #0]	@ (80128cc <_localeconv_r+0x4>)
 80128ca:	4770      	bx	lr
 80128cc:	24000194 	.word	0x24000194

080128d0 <_close_r>:
 80128d0:	b538      	push	{r3, r4, r5, lr}
 80128d2:	4d06      	ldr	r5, [pc, #24]	@ (80128ec <_close_r+0x1c>)
 80128d4:	2300      	movs	r3, #0
 80128d6:	4604      	mov	r4, r0
 80128d8:	4608      	mov	r0, r1
 80128da:	602b      	str	r3, [r5, #0]
 80128dc:	f7f2 f8fa 	bl	8004ad4 <_close>
 80128e0:	1c43      	adds	r3, r0, #1
 80128e2:	d102      	bne.n	80128ea <_close_r+0x1a>
 80128e4:	682b      	ldr	r3, [r5, #0]
 80128e6:	b103      	cbz	r3, 80128ea <_close_r+0x1a>
 80128e8:	6023      	str	r3, [r4, #0]
 80128ea:	bd38      	pop	{r3, r4, r5, pc}
 80128ec:	24001200 	.word	0x24001200

080128f0 <_lseek_r>:
 80128f0:	b538      	push	{r3, r4, r5, lr}
 80128f2:	4d07      	ldr	r5, [pc, #28]	@ (8012910 <_lseek_r+0x20>)
 80128f4:	4604      	mov	r4, r0
 80128f6:	4608      	mov	r0, r1
 80128f8:	4611      	mov	r1, r2
 80128fa:	2200      	movs	r2, #0
 80128fc:	602a      	str	r2, [r5, #0]
 80128fe:	461a      	mov	r2, r3
 8012900:	f7f2 f90f 	bl	8004b22 <_lseek>
 8012904:	1c43      	adds	r3, r0, #1
 8012906:	d102      	bne.n	801290e <_lseek_r+0x1e>
 8012908:	682b      	ldr	r3, [r5, #0]
 801290a:	b103      	cbz	r3, 801290e <_lseek_r+0x1e>
 801290c:	6023      	str	r3, [r4, #0]
 801290e:	bd38      	pop	{r3, r4, r5, pc}
 8012910:	24001200 	.word	0x24001200

08012914 <_read_r>:
 8012914:	b538      	push	{r3, r4, r5, lr}
 8012916:	4d07      	ldr	r5, [pc, #28]	@ (8012934 <_read_r+0x20>)
 8012918:	4604      	mov	r4, r0
 801291a:	4608      	mov	r0, r1
 801291c:	4611      	mov	r1, r2
 801291e:	2200      	movs	r2, #0
 8012920:	602a      	str	r2, [r5, #0]
 8012922:	461a      	mov	r2, r3
 8012924:	f7f2 f89d 	bl	8004a62 <_read>
 8012928:	1c43      	adds	r3, r0, #1
 801292a:	d102      	bne.n	8012932 <_read_r+0x1e>
 801292c:	682b      	ldr	r3, [r5, #0]
 801292e:	b103      	cbz	r3, 8012932 <_read_r+0x1e>
 8012930:	6023      	str	r3, [r4, #0]
 8012932:	bd38      	pop	{r3, r4, r5, pc}
 8012934:	24001200 	.word	0x24001200

08012938 <_write_r>:
 8012938:	b538      	push	{r3, r4, r5, lr}
 801293a:	4d07      	ldr	r5, [pc, #28]	@ (8012958 <_write_r+0x20>)
 801293c:	4604      	mov	r4, r0
 801293e:	4608      	mov	r0, r1
 8012940:	4611      	mov	r1, r2
 8012942:	2200      	movs	r2, #0
 8012944:	602a      	str	r2, [r5, #0]
 8012946:	461a      	mov	r2, r3
 8012948:	f7f2 f8a8 	bl	8004a9c <_write>
 801294c:	1c43      	adds	r3, r0, #1
 801294e:	d102      	bne.n	8012956 <_write_r+0x1e>
 8012950:	682b      	ldr	r3, [r5, #0]
 8012952:	b103      	cbz	r3, 8012956 <_write_r+0x1e>
 8012954:	6023      	str	r3, [r4, #0]
 8012956:	bd38      	pop	{r3, r4, r5, pc}
 8012958:	24001200 	.word	0x24001200

0801295c <__errno>:
 801295c:	4b01      	ldr	r3, [pc, #4]	@ (8012964 <__errno+0x8>)
 801295e:	6818      	ldr	r0, [r3, #0]
 8012960:	4770      	bx	lr
 8012962:	bf00      	nop
 8012964:	24000054 	.word	0x24000054

08012968 <__libc_init_array>:
 8012968:	b570      	push	{r4, r5, r6, lr}
 801296a:	4d0d      	ldr	r5, [pc, #52]	@ (80129a0 <__libc_init_array+0x38>)
 801296c:	4c0d      	ldr	r4, [pc, #52]	@ (80129a4 <__libc_init_array+0x3c>)
 801296e:	1b64      	subs	r4, r4, r5
 8012970:	10a4      	asrs	r4, r4, #2
 8012972:	2600      	movs	r6, #0
 8012974:	42a6      	cmp	r6, r4
 8012976:	d109      	bne.n	801298c <__libc_init_array+0x24>
 8012978:	4d0b      	ldr	r5, [pc, #44]	@ (80129a8 <__libc_init_array+0x40>)
 801297a:	4c0c      	ldr	r4, [pc, #48]	@ (80129ac <__libc_init_array+0x44>)
 801297c:	f001 fffe 	bl	801497c <_init>
 8012980:	1b64      	subs	r4, r4, r5
 8012982:	10a4      	asrs	r4, r4, #2
 8012984:	2600      	movs	r6, #0
 8012986:	42a6      	cmp	r6, r4
 8012988:	d105      	bne.n	8012996 <__libc_init_array+0x2e>
 801298a:	bd70      	pop	{r4, r5, r6, pc}
 801298c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012990:	4798      	blx	r3
 8012992:	3601      	adds	r6, #1
 8012994:	e7ee      	b.n	8012974 <__libc_init_array+0xc>
 8012996:	f855 3b04 	ldr.w	r3, [r5], #4
 801299a:	4798      	blx	r3
 801299c:	3601      	adds	r6, #1
 801299e:	e7f2      	b.n	8012986 <__libc_init_array+0x1e>
 80129a0:	080156d8 	.word	0x080156d8
 80129a4:	080156d8 	.word	0x080156d8
 80129a8:	080156d8 	.word	0x080156d8
 80129ac:	080156dc 	.word	0x080156dc

080129b0 <__retarget_lock_init_recursive>:
 80129b0:	4770      	bx	lr

080129b2 <__retarget_lock_acquire_recursive>:
 80129b2:	4770      	bx	lr

080129b4 <__retarget_lock_release_recursive>:
 80129b4:	4770      	bx	lr

080129b6 <strcpy>:
 80129b6:	4603      	mov	r3, r0
 80129b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80129bc:	f803 2b01 	strb.w	r2, [r3], #1
 80129c0:	2a00      	cmp	r2, #0
 80129c2:	d1f9      	bne.n	80129b8 <strcpy+0x2>
 80129c4:	4770      	bx	lr

080129c6 <quorem>:
 80129c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129ca:	6903      	ldr	r3, [r0, #16]
 80129cc:	690c      	ldr	r4, [r1, #16]
 80129ce:	42a3      	cmp	r3, r4
 80129d0:	4607      	mov	r7, r0
 80129d2:	db7e      	blt.n	8012ad2 <quorem+0x10c>
 80129d4:	3c01      	subs	r4, #1
 80129d6:	f101 0814 	add.w	r8, r1, #20
 80129da:	00a3      	lsls	r3, r4, #2
 80129dc:	f100 0514 	add.w	r5, r0, #20
 80129e0:	9300      	str	r3, [sp, #0]
 80129e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80129e6:	9301      	str	r3, [sp, #4]
 80129e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80129ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80129f0:	3301      	adds	r3, #1
 80129f2:	429a      	cmp	r2, r3
 80129f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80129f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80129fc:	d32e      	bcc.n	8012a5c <quorem+0x96>
 80129fe:	f04f 0a00 	mov.w	sl, #0
 8012a02:	46c4      	mov	ip, r8
 8012a04:	46ae      	mov	lr, r5
 8012a06:	46d3      	mov	fp, sl
 8012a08:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012a0c:	b298      	uxth	r0, r3
 8012a0e:	fb06 a000 	mla	r0, r6, r0, sl
 8012a12:	0c02      	lsrs	r2, r0, #16
 8012a14:	0c1b      	lsrs	r3, r3, #16
 8012a16:	fb06 2303 	mla	r3, r6, r3, r2
 8012a1a:	f8de 2000 	ldr.w	r2, [lr]
 8012a1e:	b280      	uxth	r0, r0
 8012a20:	b292      	uxth	r2, r2
 8012a22:	1a12      	subs	r2, r2, r0
 8012a24:	445a      	add	r2, fp
 8012a26:	f8de 0000 	ldr.w	r0, [lr]
 8012a2a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012a2e:	b29b      	uxth	r3, r3
 8012a30:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8012a34:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8012a38:	b292      	uxth	r2, r2
 8012a3a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8012a3e:	45e1      	cmp	r9, ip
 8012a40:	f84e 2b04 	str.w	r2, [lr], #4
 8012a44:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8012a48:	d2de      	bcs.n	8012a08 <quorem+0x42>
 8012a4a:	9b00      	ldr	r3, [sp, #0]
 8012a4c:	58eb      	ldr	r3, [r5, r3]
 8012a4e:	b92b      	cbnz	r3, 8012a5c <quorem+0x96>
 8012a50:	9b01      	ldr	r3, [sp, #4]
 8012a52:	3b04      	subs	r3, #4
 8012a54:	429d      	cmp	r5, r3
 8012a56:	461a      	mov	r2, r3
 8012a58:	d32f      	bcc.n	8012aba <quorem+0xf4>
 8012a5a:	613c      	str	r4, [r7, #16]
 8012a5c:	4638      	mov	r0, r7
 8012a5e:	f001 f90b 	bl	8013c78 <__mcmp>
 8012a62:	2800      	cmp	r0, #0
 8012a64:	db25      	blt.n	8012ab2 <quorem+0xec>
 8012a66:	4629      	mov	r1, r5
 8012a68:	2000      	movs	r0, #0
 8012a6a:	f858 2b04 	ldr.w	r2, [r8], #4
 8012a6e:	f8d1 c000 	ldr.w	ip, [r1]
 8012a72:	fa1f fe82 	uxth.w	lr, r2
 8012a76:	fa1f f38c 	uxth.w	r3, ip
 8012a7a:	eba3 030e 	sub.w	r3, r3, lr
 8012a7e:	4403      	add	r3, r0
 8012a80:	0c12      	lsrs	r2, r2, #16
 8012a82:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8012a86:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8012a8a:	b29b      	uxth	r3, r3
 8012a8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012a90:	45c1      	cmp	r9, r8
 8012a92:	f841 3b04 	str.w	r3, [r1], #4
 8012a96:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012a9a:	d2e6      	bcs.n	8012a6a <quorem+0xa4>
 8012a9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012aa0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012aa4:	b922      	cbnz	r2, 8012ab0 <quorem+0xea>
 8012aa6:	3b04      	subs	r3, #4
 8012aa8:	429d      	cmp	r5, r3
 8012aaa:	461a      	mov	r2, r3
 8012aac:	d30b      	bcc.n	8012ac6 <quorem+0x100>
 8012aae:	613c      	str	r4, [r7, #16]
 8012ab0:	3601      	adds	r6, #1
 8012ab2:	4630      	mov	r0, r6
 8012ab4:	b003      	add	sp, #12
 8012ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012aba:	6812      	ldr	r2, [r2, #0]
 8012abc:	3b04      	subs	r3, #4
 8012abe:	2a00      	cmp	r2, #0
 8012ac0:	d1cb      	bne.n	8012a5a <quorem+0x94>
 8012ac2:	3c01      	subs	r4, #1
 8012ac4:	e7c6      	b.n	8012a54 <quorem+0x8e>
 8012ac6:	6812      	ldr	r2, [r2, #0]
 8012ac8:	3b04      	subs	r3, #4
 8012aca:	2a00      	cmp	r2, #0
 8012acc:	d1ef      	bne.n	8012aae <quorem+0xe8>
 8012ace:	3c01      	subs	r4, #1
 8012ad0:	e7ea      	b.n	8012aa8 <quorem+0xe2>
 8012ad2:	2000      	movs	r0, #0
 8012ad4:	e7ee      	b.n	8012ab4 <quorem+0xee>
	...

08012ad8 <_dtoa_r>:
 8012ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012adc:	ed2d 8b02 	vpush	{d8}
 8012ae0:	69c7      	ldr	r7, [r0, #28]
 8012ae2:	b091      	sub	sp, #68	@ 0x44
 8012ae4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012ae8:	ec55 4b10 	vmov	r4, r5, d0
 8012aec:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8012aee:	9107      	str	r1, [sp, #28]
 8012af0:	4681      	mov	r9, r0
 8012af2:	9209      	str	r2, [sp, #36]	@ 0x24
 8012af4:	930d      	str	r3, [sp, #52]	@ 0x34
 8012af6:	b97f      	cbnz	r7, 8012b18 <_dtoa_r+0x40>
 8012af8:	2010      	movs	r0, #16
 8012afa:	f000 fd8d 	bl	8013618 <malloc>
 8012afe:	4602      	mov	r2, r0
 8012b00:	f8c9 001c 	str.w	r0, [r9, #28]
 8012b04:	b920      	cbnz	r0, 8012b10 <_dtoa_r+0x38>
 8012b06:	4ba0      	ldr	r3, [pc, #640]	@ (8012d88 <_dtoa_r+0x2b0>)
 8012b08:	21ef      	movs	r1, #239	@ 0xef
 8012b0a:	48a0      	ldr	r0, [pc, #640]	@ (8012d8c <_dtoa_r+0x2b4>)
 8012b0c:	f001 fbf8 	bl	8014300 <__assert_func>
 8012b10:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012b14:	6007      	str	r7, [r0, #0]
 8012b16:	60c7      	str	r7, [r0, #12]
 8012b18:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012b1c:	6819      	ldr	r1, [r3, #0]
 8012b1e:	b159      	cbz	r1, 8012b38 <_dtoa_r+0x60>
 8012b20:	685a      	ldr	r2, [r3, #4]
 8012b22:	604a      	str	r2, [r1, #4]
 8012b24:	2301      	movs	r3, #1
 8012b26:	4093      	lsls	r3, r2
 8012b28:	608b      	str	r3, [r1, #8]
 8012b2a:	4648      	mov	r0, r9
 8012b2c:	f000 fe6a 	bl	8013804 <_Bfree>
 8012b30:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012b34:	2200      	movs	r2, #0
 8012b36:	601a      	str	r2, [r3, #0]
 8012b38:	1e2b      	subs	r3, r5, #0
 8012b3a:	bfbb      	ittet	lt
 8012b3c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012b40:	9303      	strlt	r3, [sp, #12]
 8012b42:	2300      	movge	r3, #0
 8012b44:	2201      	movlt	r2, #1
 8012b46:	bfac      	ite	ge
 8012b48:	6033      	strge	r3, [r6, #0]
 8012b4a:	6032      	strlt	r2, [r6, #0]
 8012b4c:	4b90      	ldr	r3, [pc, #576]	@ (8012d90 <_dtoa_r+0x2b8>)
 8012b4e:	9e03      	ldr	r6, [sp, #12]
 8012b50:	43b3      	bics	r3, r6
 8012b52:	d110      	bne.n	8012b76 <_dtoa_r+0x9e>
 8012b54:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012b56:	f242 730f 	movw	r3, #9999	@ 0x270f
 8012b5a:	6013      	str	r3, [r2, #0]
 8012b5c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8012b60:	4323      	orrs	r3, r4
 8012b62:	f000 84de 	beq.w	8013522 <_dtoa_r+0xa4a>
 8012b66:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012b68:	4f8a      	ldr	r7, [pc, #552]	@ (8012d94 <_dtoa_r+0x2bc>)
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	f000 84e0 	beq.w	8013530 <_dtoa_r+0xa58>
 8012b70:	1cfb      	adds	r3, r7, #3
 8012b72:	f000 bcdb 	b.w	801352c <_dtoa_r+0xa54>
 8012b76:	ed9d 8b02 	vldr	d8, [sp, #8]
 8012b7a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b82:	d10a      	bne.n	8012b9a <_dtoa_r+0xc2>
 8012b84:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012b86:	2301      	movs	r3, #1
 8012b88:	6013      	str	r3, [r2, #0]
 8012b8a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012b8c:	b113      	cbz	r3, 8012b94 <_dtoa_r+0xbc>
 8012b8e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8012b90:	4b81      	ldr	r3, [pc, #516]	@ (8012d98 <_dtoa_r+0x2c0>)
 8012b92:	6013      	str	r3, [r2, #0]
 8012b94:	4f81      	ldr	r7, [pc, #516]	@ (8012d9c <_dtoa_r+0x2c4>)
 8012b96:	f000 bccb 	b.w	8013530 <_dtoa_r+0xa58>
 8012b9a:	aa0e      	add	r2, sp, #56	@ 0x38
 8012b9c:	a90f      	add	r1, sp, #60	@ 0x3c
 8012b9e:	4648      	mov	r0, r9
 8012ba0:	eeb0 0b48 	vmov.f64	d0, d8
 8012ba4:	f001 f918 	bl	8013dd8 <__d2b>
 8012ba8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8012bac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012bae:	9001      	str	r0, [sp, #4]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d045      	beq.n	8012c40 <_dtoa_r+0x168>
 8012bb4:	eeb0 7b48 	vmov.f64	d7, d8
 8012bb8:	ee18 1a90 	vmov	r1, s17
 8012bbc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8012bc0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8012bc4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8012bc8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8012bcc:	2500      	movs	r5, #0
 8012bce:	ee07 1a90 	vmov	s15, r1
 8012bd2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8012bd6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8012d70 <_dtoa_r+0x298>
 8012bda:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012bde:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8012d78 <_dtoa_r+0x2a0>
 8012be2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8012be6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8012d80 <_dtoa_r+0x2a8>
 8012bea:	ee07 3a90 	vmov	s15, r3
 8012bee:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8012bf2:	eeb0 7b46 	vmov.f64	d7, d6
 8012bf6:	eea4 7b05 	vfma.f64	d7, d4, d5
 8012bfa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8012bfe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8012c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c06:	ee16 8a90 	vmov	r8, s13
 8012c0a:	d508      	bpl.n	8012c1e <_dtoa_r+0x146>
 8012c0c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8012c10:	eeb4 6b47 	vcmp.f64	d6, d7
 8012c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c18:	bf18      	it	ne
 8012c1a:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 8012c1e:	f1b8 0f16 	cmp.w	r8, #22
 8012c22:	d82b      	bhi.n	8012c7c <_dtoa_r+0x1a4>
 8012c24:	495e      	ldr	r1, [pc, #376]	@ (8012da0 <_dtoa_r+0x2c8>)
 8012c26:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8012c2a:	ed91 7b00 	vldr	d7, [r1]
 8012c2e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8012c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c36:	d501      	bpl.n	8012c3c <_dtoa_r+0x164>
 8012c38:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8012c3c:	2100      	movs	r1, #0
 8012c3e:	e01e      	b.n	8012c7e <_dtoa_r+0x1a6>
 8012c40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012c42:	4413      	add	r3, r2
 8012c44:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8012c48:	2920      	cmp	r1, #32
 8012c4a:	bfc1      	itttt	gt
 8012c4c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8012c50:	408e      	lslgt	r6, r1
 8012c52:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8012c56:	fa24 f101 	lsrgt.w	r1, r4, r1
 8012c5a:	bfd6      	itet	le
 8012c5c:	f1c1 0120 	rsble	r1, r1, #32
 8012c60:	4331      	orrgt	r1, r6
 8012c62:	fa04 f101 	lslle.w	r1, r4, r1
 8012c66:	ee07 1a90 	vmov	s15, r1
 8012c6a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012c6e:	3b01      	subs	r3, #1
 8012c70:	ee17 1a90 	vmov	r1, s15
 8012c74:	2501      	movs	r5, #1
 8012c76:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8012c7a:	e7a8      	b.n	8012bce <_dtoa_r+0xf6>
 8012c7c:	2101      	movs	r1, #1
 8012c7e:	1ad2      	subs	r2, r2, r3
 8012c80:	1e53      	subs	r3, r2, #1
 8012c82:	9306      	str	r3, [sp, #24]
 8012c84:	bf45      	ittet	mi
 8012c86:	f1c2 0301 	rsbmi	r3, r2, #1
 8012c8a:	9305      	strmi	r3, [sp, #20]
 8012c8c:	2300      	movpl	r3, #0
 8012c8e:	2300      	movmi	r3, #0
 8012c90:	bf4c      	ite	mi
 8012c92:	9306      	strmi	r3, [sp, #24]
 8012c94:	9305      	strpl	r3, [sp, #20]
 8012c96:	f1b8 0f00 	cmp.w	r8, #0
 8012c9a:	910c      	str	r1, [sp, #48]	@ 0x30
 8012c9c:	db18      	blt.n	8012cd0 <_dtoa_r+0x1f8>
 8012c9e:	9b06      	ldr	r3, [sp, #24]
 8012ca0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8012ca4:	4443      	add	r3, r8
 8012ca6:	9306      	str	r3, [sp, #24]
 8012ca8:	2300      	movs	r3, #0
 8012caa:	9a07      	ldr	r2, [sp, #28]
 8012cac:	2a09      	cmp	r2, #9
 8012cae:	d849      	bhi.n	8012d44 <_dtoa_r+0x26c>
 8012cb0:	2a05      	cmp	r2, #5
 8012cb2:	bfc4      	itt	gt
 8012cb4:	3a04      	subgt	r2, #4
 8012cb6:	9207      	strgt	r2, [sp, #28]
 8012cb8:	9a07      	ldr	r2, [sp, #28]
 8012cba:	f1a2 0202 	sub.w	r2, r2, #2
 8012cbe:	bfcc      	ite	gt
 8012cc0:	2400      	movgt	r4, #0
 8012cc2:	2401      	movle	r4, #1
 8012cc4:	2a03      	cmp	r2, #3
 8012cc6:	d848      	bhi.n	8012d5a <_dtoa_r+0x282>
 8012cc8:	e8df f002 	tbb	[pc, r2]
 8012ccc:	3a2c2e0b 	.word	0x3a2c2e0b
 8012cd0:	9b05      	ldr	r3, [sp, #20]
 8012cd2:	2200      	movs	r2, #0
 8012cd4:	eba3 0308 	sub.w	r3, r3, r8
 8012cd8:	9305      	str	r3, [sp, #20]
 8012cda:	920a      	str	r2, [sp, #40]	@ 0x28
 8012cdc:	f1c8 0300 	rsb	r3, r8, #0
 8012ce0:	e7e3      	b.n	8012caa <_dtoa_r+0x1d2>
 8012ce2:	2200      	movs	r2, #0
 8012ce4:	9208      	str	r2, [sp, #32]
 8012ce6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012ce8:	2a00      	cmp	r2, #0
 8012cea:	dc39      	bgt.n	8012d60 <_dtoa_r+0x288>
 8012cec:	f04f 0b01 	mov.w	fp, #1
 8012cf0:	46da      	mov	sl, fp
 8012cf2:	465a      	mov	r2, fp
 8012cf4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8012cf8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8012cfc:	2100      	movs	r1, #0
 8012cfe:	2004      	movs	r0, #4
 8012d00:	f100 0614 	add.w	r6, r0, #20
 8012d04:	4296      	cmp	r6, r2
 8012d06:	d930      	bls.n	8012d6a <_dtoa_r+0x292>
 8012d08:	6079      	str	r1, [r7, #4]
 8012d0a:	4648      	mov	r0, r9
 8012d0c:	9304      	str	r3, [sp, #16]
 8012d0e:	f000 fd39 	bl	8013784 <_Balloc>
 8012d12:	9b04      	ldr	r3, [sp, #16]
 8012d14:	4607      	mov	r7, r0
 8012d16:	2800      	cmp	r0, #0
 8012d18:	d146      	bne.n	8012da8 <_dtoa_r+0x2d0>
 8012d1a:	4b22      	ldr	r3, [pc, #136]	@ (8012da4 <_dtoa_r+0x2cc>)
 8012d1c:	4602      	mov	r2, r0
 8012d1e:	f240 11af 	movw	r1, #431	@ 0x1af
 8012d22:	e6f2      	b.n	8012b0a <_dtoa_r+0x32>
 8012d24:	2201      	movs	r2, #1
 8012d26:	e7dd      	b.n	8012ce4 <_dtoa_r+0x20c>
 8012d28:	2200      	movs	r2, #0
 8012d2a:	9208      	str	r2, [sp, #32]
 8012d2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012d2e:	eb08 0b02 	add.w	fp, r8, r2
 8012d32:	f10b 0a01 	add.w	sl, fp, #1
 8012d36:	4652      	mov	r2, sl
 8012d38:	2a01      	cmp	r2, #1
 8012d3a:	bfb8      	it	lt
 8012d3c:	2201      	movlt	r2, #1
 8012d3e:	e7db      	b.n	8012cf8 <_dtoa_r+0x220>
 8012d40:	2201      	movs	r2, #1
 8012d42:	e7f2      	b.n	8012d2a <_dtoa_r+0x252>
 8012d44:	2401      	movs	r4, #1
 8012d46:	2200      	movs	r2, #0
 8012d48:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8012d4c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8012d50:	2100      	movs	r1, #0
 8012d52:	46da      	mov	sl, fp
 8012d54:	2212      	movs	r2, #18
 8012d56:	9109      	str	r1, [sp, #36]	@ 0x24
 8012d58:	e7ce      	b.n	8012cf8 <_dtoa_r+0x220>
 8012d5a:	2201      	movs	r2, #1
 8012d5c:	9208      	str	r2, [sp, #32]
 8012d5e:	e7f5      	b.n	8012d4c <_dtoa_r+0x274>
 8012d60:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8012d64:	46da      	mov	sl, fp
 8012d66:	465a      	mov	r2, fp
 8012d68:	e7c6      	b.n	8012cf8 <_dtoa_r+0x220>
 8012d6a:	3101      	adds	r1, #1
 8012d6c:	0040      	lsls	r0, r0, #1
 8012d6e:	e7c7      	b.n	8012d00 <_dtoa_r+0x228>
 8012d70:	636f4361 	.word	0x636f4361
 8012d74:	3fd287a7 	.word	0x3fd287a7
 8012d78:	8b60c8b3 	.word	0x8b60c8b3
 8012d7c:	3fc68a28 	.word	0x3fc68a28
 8012d80:	509f79fb 	.word	0x509f79fb
 8012d84:	3fd34413 	.word	0x3fd34413
 8012d88:	080154a3 	.word	0x080154a3
 8012d8c:	080154ba 	.word	0x080154ba
 8012d90:	7ff00000 	.word	0x7ff00000
 8012d94:	0801549f 	.word	0x0801549f
 8012d98:	08015473 	.word	0x08015473
 8012d9c:	08015472 	.word	0x08015472
 8012da0:	080155b0 	.word	0x080155b0
 8012da4:	08015512 	.word	0x08015512
 8012da8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8012dac:	f1ba 0f0e 	cmp.w	sl, #14
 8012db0:	6010      	str	r0, [r2, #0]
 8012db2:	d86f      	bhi.n	8012e94 <_dtoa_r+0x3bc>
 8012db4:	2c00      	cmp	r4, #0
 8012db6:	d06d      	beq.n	8012e94 <_dtoa_r+0x3bc>
 8012db8:	f1b8 0f00 	cmp.w	r8, #0
 8012dbc:	f340 80c2 	ble.w	8012f44 <_dtoa_r+0x46c>
 8012dc0:	4aca      	ldr	r2, [pc, #808]	@ (80130ec <_dtoa_r+0x614>)
 8012dc2:	f008 010f 	and.w	r1, r8, #15
 8012dc6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8012dca:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8012dce:	ed92 7b00 	vldr	d7, [r2]
 8012dd2:	ea4f 1128 	mov.w	r1, r8, asr #4
 8012dd6:	f000 80a9 	beq.w	8012f2c <_dtoa_r+0x454>
 8012dda:	4ac5      	ldr	r2, [pc, #788]	@ (80130f0 <_dtoa_r+0x618>)
 8012ddc:	ed92 6b08 	vldr	d6, [r2, #32]
 8012de0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8012de4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012de8:	f001 010f 	and.w	r1, r1, #15
 8012dec:	2203      	movs	r2, #3
 8012dee:	48c0      	ldr	r0, [pc, #768]	@ (80130f0 <_dtoa_r+0x618>)
 8012df0:	2900      	cmp	r1, #0
 8012df2:	f040 809d 	bne.w	8012f30 <_dtoa_r+0x458>
 8012df6:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012dfa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012dfe:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012e02:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012e04:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012e08:	2900      	cmp	r1, #0
 8012e0a:	f000 80c1 	beq.w	8012f90 <_dtoa_r+0x4b8>
 8012e0e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8012e12:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e1a:	f140 80b9 	bpl.w	8012f90 <_dtoa_r+0x4b8>
 8012e1e:	f1ba 0f00 	cmp.w	sl, #0
 8012e22:	f000 80b5 	beq.w	8012f90 <_dtoa_r+0x4b8>
 8012e26:	f1bb 0f00 	cmp.w	fp, #0
 8012e2a:	dd31      	ble.n	8012e90 <_dtoa_r+0x3b8>
 8012e2c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8012e30:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012e34:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012e38:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8012e3c:	9104      	str	r1, [sp, #16]
 8012e3e:	3201      	adds	r2, #1
 8012e40:	465c      	mov	r4, fp
 8012e42:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012e46:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8012e4a:	ee07 2a90 	vmov	s15, r2
 8012e4e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012e52:	eea7 5b06 	vfma.f64	d5, d7, d6
 8012e56:	ee15 2a90 	vmov	r2, s11
 8012e5a:	ec51 0b15 	vmov	r0, r1, d5
 8012e5e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8012e62:	2c00      	cmp	r4, #0
 8012e64:	f040 8098 	bne.w	8012f98 <_dtoa_r+0x4c0>
 8012e68:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8012e6c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8012e70:	ec41 0b17 	vmov	d7, r0, r1
 8012e74:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e7c:	f300 8261 	bgt.w	8013342 <_dtoa_r+0x86a>
 8012e80:	eeb1 7b47 	vneg.f64	d7, d7
 8012e84:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e8c:	f100 80f5 	bmi.w	801307a <_dtoa_r+0x5a2>
 8012e90:	ed8d 8b02 	vstr	d8, [sp, #8]
 8012e94:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012e96:	2a00      	cmp	r2, #0
 8012e98:	f2c0 812c 	blt.w	80130f4 <_dtoa_r+0x61c>
 8012e9c:	f1b8 0f0e 	cmp.w	r8, #14
 8012ea0:	f300 8128 	bgt.w	80130f4 <_dtoa_r+0x61c>
 8012ea4:	4b91      	ldr	r3, [pc, #580]	@ (80130ec <_dtoa_r+0x614>)
 8012ea6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8012eaa:	ed93 6b00 	vldr	d6, [r3]
 8012eae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	da03      	bge.n	8012ebc <_dtoa_r+0x3e4>
 8012eb4:	f1ba 0f00 	cmp.w	sl, #0
 8012eb8:	f340 80d2 	ble.w	8013060 <_dtoa_r+0x588>
 8012ebc:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8012ec0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012ec4:	463e      	mov	r6, r7
 8012ec6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8012eca:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8012ece:	ee15 3a10 	vmov	r3, s10
 8012ed2:	3330      	adds	r3, #48	@ 0x30
 8012ed4:	f806 3b01 	strb.w	r3, [r6], #1
 8012ed8:	1bf3      	subs	r3, r6, r7
 8012eda:	459a      	cmp	sl, r3
 8012edc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012ee0:	eea3 7b46 	vfms.f64	d7, d3, d6
 8012ee4:	f040 80f8 	bne.w	80130d8 <_dtoa_r+0x600>
 8012ee8:	ee37 7b07 	vadd.f64	d7, d7, d7
 8012eec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ef4:	f300 80dd 	bgt.w	80130b2 <_dtoa_r+0x5da>
 8012ef8:	eeb4 7b46 	vcmp.f64	d7, d6
 8012efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f00:	d104      	bne.n	8012f0c <_dtoa_r+0x434>
 8012f02:	ee15 3a10 	vmov	r3, s10
 8012f06:	07db      	lsls	r3, r3, #31
 8012f08:	f100 80d3 	bmi.w	80130b2 <_dtoa_r+0x5da>
 8012f0c:	9901      	ldr	r1, [sp, #4]
 8012f0e:	4648      	mov	r0, r9
 8012f10:	f000 fc78 	bl	8013804 <_Bfree>
 8012f14:	2300      	movs	r3, #0
 8012f16:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012f18:	7033      	strb	r3, [r6, #0]
 8012f1a:	f108 0301 	add.w	r3, r8, #1
 8012f1e:	6013      	str	r3, [r2, #0]
 8012f20:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	f000 8304 	beq.w	8013530 <_dtoa_r+0xa58>
 8012f28:	601e      	str	r6, [r3, #0]
 8012f2a:	e301      	b.n	8013530 <_dtoa_r+0xa58>
 8012f2c:	2202      	movs	r2, #2
 8012f2e:	e75e      	b.n	8012dee <_dtoa_r+0x316>
 8012f30:	07cc      	lsls	r4, r1, #31
 8012f32:	d504      	bpl.n	8012f3e <_dtoa_r+0x466>
 8012f34:	ed90 6b00 	vldr	d6, [r0]
 8012f38:	3201      	adds	r2, #1
 8012f3a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012f3e:	1049      	asrs	r1, r1, #1
 8012f40:	3008      	adds	r0, #8
 8012f42:	e755      	b.n	8012df0 <_dtoa_r+0x318>
 8012f44:	d022      	beq.n	8012f8c <_dtoa_r+0x4b4>
 8012f46:	f1c8 0100 	rsb	r1, r8, #0
 8012f4a:	4a68      	ldr	r2, [pc, #416]	@ (80130ec <_dtoa_r+0x614>)
 8012f4c:	f001 000f 	and.w	r0, r1, #15
 8012f50:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012f54:	ed92 7b00 	vldr	d7, [r2]
 8012f58:	ee28 7b07 	vmul.f64	d7, d8, d7
 8012f5c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012f60:	4863      	ldr	r0, [pc, #396]	@ (80130f0 <_dtoa_r+0x618>)
 8012f62:	1109      	asrs	r1, r1, #4
 8012f64:	2400      	movs	r4, #0
 8012f66:	2202      	movs	r2, #2
 8012f68:	b929      	cbnz	r1, 8012f76 <_dtoa_r+0x49e>
 8012f6a:	2c00      	cmp	r4, #0
 8012f6c:	f43f af49 	beq.w	8012e02 <_dtoa_r+0x32a>
 8012f70:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012f74:	e745      	b.n	8012e02 <_dtoa_r+0x32a>
 8012f76:	07ce      	lsls	r6, r1, #31
 8012f78:	d505      	bpl.n	8012f86 <_dtoa_r+0x4ae>
 8012f7a:	ed90 6b00 	vldr	d6, [r0]
 8012f7e:	3201      	adds	r2, #1
 8012f80:	2401      	movs	r4, #1
 8012f82:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012f86:	1049      	asrs	r1, r1, #1
 8012f88:	3008      	adds	r0, #8
 8012f8a:	e7ed      	b.n	8012f68 <_dtoa_r+0x490>
 8012f8c:	2202      	movs	r2, #2
 8012f8e:	e738      	b.n	8012e02 <_dtoa_r+0x32a>
 8012f90:	f8cd 8010 	str.w	r8, [sp, #16]
 8012f94:	4654      	mov	r4, sl
 8012f96:	e754      	b.n	8012e42 <_dtoa_r+0x36a>
 8012f98:	4a54      	ldr	r2, [pc, #336]	@ (80130ec <_dtoa_r+0x614>)
 8012f9a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8012f9e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8012fa2:	9a08      	ldr	r2, [sp, #32]
 8012fa4:	ec41 0b17 	vmov	d7, r0, r1
 8012fa8:	443c      	add	r4, r7
 8012faa:	b34a      	cbz	r2, 8013000 <_dtoa_r+0x528>
 8012fac:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8012fb0:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8012fb4:	463e      	mov	r6, r7
 8012fb6:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8012fba:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8012fbe:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012fc2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012fc6:	ee14 2a90 	vmov	r2, s9
 8012fca:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012fce:	3230      	adds	r2, #48	@ 0x30
 8012fd0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012fd4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fdc:	f806 2b01 	strb.w	r2, [r6], #1
 8012fe0:	d438      	bmi.n	8013054 <_dtoa_r+0x57c>
 8012fe2:	ee32 5b46 	vsub.f64	d5, d2, d6
 8012fe6:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8012fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fee:	d462      	bmi.n	80130b6 <_dtoa_r+0x5de>
 8012ff0:	42a6      	cmp	r6, r4
 8012ff2:	f43f af4d 	beq.w	8012e90 <_dtoa_r+0x3b8>
 8012ff6:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012ffa:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012ffe:	e7e0      	b.n	8012fc2 <_dtoa_r+0x4ea>
 8013000:	4621      	mov	r1, r4
 8013002:	463e      	mov	r6, r7
 8013004:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013008:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801300c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013010:	ee14 2a90 	vmov	r2, s9
 8013014:	3230      	adds	r2, #48	@ 0x30
 8013016:	f806 2b01 	strb.w	r2, [r6], #1
 801301a:	42a6      	cmp	r6, r4
 801301c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013020:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013024:	d119      	bne.n	801305a <_dtoa_r+0x582>
 8013026:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801302a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801302e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8013032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013036:	dc3e      	bgt.n	80130b6 <_dtoa_r+0x5de>
 8013038:	ee35 5b47 	vsub.f64	d5, d5, d7
 801303c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8013040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013044:	f57f af24 	bpl.w	8012e90 <_dtoa_r+0x3b8>
 8013048:	460e      	mov	r6, r1
 801304a:	3901      	subs	r1, #1
 801304c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013050:	2b30      	cmp	r3, #48	@ 0x30
 8013052:	d0f9      	beq.n	8013048 <_dtoa_r+0x570>
 8013054:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013058:	e758      	b.n	8012f0c <_dtoa_r+0x434>
 801305a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801305e:	e7d5      	b.n	801300c <_dtoa_r+0x534>
 8013060:	d10b      	bne.n	801307a <_dtoa_r+0x5a2>
 8013062:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8013066:	ee26 6b07 	vmul.f64	d6, d6, d7
 801306a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801306e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013076:	f2c0 8161 	blt.w	801333c <_dtoa_r+0x864>
 801307a:	2400      	movs	r4, #0
 801307c:	4625      	mov	r5, r4
 801307e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013080:	43db      	mvns	r3, r3
 8013082:	9304      	str	r3, [sp, #16]
 8013084:	463e      	mov	r6, r7
 8013086:	f04f 0800 	mov.w	r8, #0
 801308a:	4621      	mov	r1, r4
 801308c:	4648      	mov	r0, r9
 801308e:	f000 fbb9 	bl	8013804 <_Bfree>
 8013092:	2d00      	cmp	r5, #0
 8013094:	d0de      	beq.n	8013054 <_dtoa_r+0x57c>
 8013096:	f1b8 0f00 	cmp.w	r8, #0
 801309a:	d005      	beq.n	80130a8 <_dtoa_r+0x5d0>
 801309c:	45a8      	cmp	r8, r5
 801309e:	d003      	beq.n	80130a8 <_dtoa_r+0x5d0>
 80130a0:	4641      	mov	r1, r8
 80130a2:	4648      	mov	r0, r9
 80130a4:	f000 fbae 	bl	8013804 <_Bfree>
 80130a8:	4629      	mov	r1, r5
 80130aa:	4648      	mov	r0, r9
 80130ac:	f000 fbaa 	bl	8013804 <_Bfree>
 80130b0:	e7d0      	b.n	8013054 <_dtoa_r+0x57c>
 80130b2:	f8cd 8010 	str.w	r8, [sp, #16]
 80130b6:	4633      	mov	r3, r6
 80130b8:	461e      	mov	r6, r3
 80130ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80130be:	2a39      	cmp	r2, #57	@ 0x39
 80130c0:	d106      	bne.n	80130d0 <_dtoa_r+0x5f8>
 80130c2:	429f      	cmp	r7, r3
 80130c4:	d1f8      	bne.n	80130b8 <_dtoa_r+0x5e0>
 80130c6:	9a04      	ldr	r2, [sp, #16]
 80130c8:	3201      	adds	r2, #1
 80130ca:	9204      	str	r2, [sp, #16]
 80130cc:	2230      	movs	r2, #48	@ 0x30
 80130ce:	703a      	strb	r2, [r7, #0]
 80130d0:	781a      	ldrb	r2, [r3, #0]
 80130d2:	3201      	adds	r2, #1
 80130d4:	701a      	strb	r2, [r3, #0]
 80130d6:	e7bd      	b.n	8013054 <_dtoa_r+0x57c>
 80130d8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80130dc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80130e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130e4:	f47f aeef 	bne.w	8012ec6 <_dtoa_r+0x3ee>
 80130e8:	e710      	b.n	8012f0c <_dtoa_r+0x434>
 80130ea:	bf00      	nop
 80130ec:	080155b0 	.word	0x080155b0
 80130f0:	08015588 	.word	0x08015588
 80130f4:	9908      	ldr	r1, [sp, #32]
 80130f6:	2900      	cmp	r1, #0
 80130f8:	f000 80e3 	beq.w	80132c2 <_dtoa_r+0x7ea>
 80130fc:	9907      	ldr	r1, [sp, #28]
 80130fe:	2901      	cmp	r1, #1
 8013100:	f300 80c8 	bgt.w	8013294 <_dtoa_r+0x7bc>
 8013104:	2d00      	cmp	r5, #0
 8013106:	f000 80c1 	beq.w	801328c <_dtoa_r+0x7b4>
 801310a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801310e:	9e05      	ldr	r6, [sp, #20]
 8013110:	461c      	mov	r4, r3
 8013112:	9304      	str	r3, [sp, #16]
 8013114:	9b05      	ldr	r3, [sp, #20]
 8013116:	4413      	add	r3, r2
 8013118:	9305      	str	r3, [sp, #20]
 801311a:	9b06      	ldr	r3, [sp, #24]
 801311c:	2101      	movs	r1, #1
 801311e:	4413      	add	r3, r2
 8013120:	4648      	mov	r0, r9
 8013122:	9306      	str	r3, [sp, #24]
 8013124:	f000 fc22 	bl	801396c <__i2b>
 8013128:	9b04      	ldr	r3, [sp, #16]
 801312a:	4605      	mov	r5, r0
 801312c:	b166      	cbz	r6, 8013148 <_dtoa_r+0x670>
 801312e:	9a06      	ldr	r2, [sp, #24]
 8013130:	2a00      	cmp	r2, #0
 8013132:	dd09      	ble.n	8013148 <_dtoa_r+0x670>
 8013134:	42b2      	cmp	r2, r6
 8013136:	9905      	ldr	r1, [sp, #20]
 8013138:	bfa8      	it	ge
 801313a:	4632      	movge	r2, r6
 801313c:	1a89      	subs	r1, r1, r2
 801313e:	9105      	str	r1, [sp, #20]
 8013140:	9906      	ldr	r1, [sp, #24]
 8013142:	1ab6      	subs	r6, r6, r2
 8013144:	1a8a      	subs	r2, r1, r2
 8013146:	9206      	str	r2, [sp, #24]
 8013148:	b1fb      	cbz	r3, 801318a <_dtoa_r+0x6b2>
 801314a:	9a08      	ldr	r2, [sp, #32]
 801314c:	2a00      	cmp	r2, #0
 801314e:	f000 80bc 	beq.w	80132ca <_dtoa_r+0x7f2>
 8013152:	b19c      	cbz	r4, 801317c <_dtoa_r+0x6a4>
 8013154:	4629      	mov	r1, r5
 8013156:	4622      	mov	r2, r4
 8013158:	4648      	mov	r0, r9
 801315a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801315c:	f000 fcc6 	bl	8013aec <__pow5mult>
 8013160:	9a01      	ldr	r2, [sp, #4]
 8013162:	4601      	mov	r1, r0
 8013164:	4605      	mov	r5, r0
 8013166:	4648      	mov	r0, r9
 8013168:	f000 fc16 	bl	8013998 <__multiply>
 801316c:	9901      	ldr	r1, [sp, #4]
 801316e:	9004      	str	r0, [sp, #16]
 8013170:	4648      	mov	r0, r9
 8013172:	f000 fb47 	bl	8013804 <_Bfree>
 8013176:	9a04      	ldr	r2, [sp, #16]
 8013178:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801317a:	9201      	str	r2, [sp, #4]
 801317c:	1b1a      	subs	r2, r3, r4
 801317e:	d004      	beq.n	801318a <_dtoa_r+0x6b2>
 8013180:	9901      	ldr	r1, [sp, #4]
 8013182:	4648      	mov	r0, r9
 8013184:	f000 fcb2 	bl	8013aec <__pow5mult>
 8013188:	9001      	str	r0, [sp, #4]
 801318a:	2101      	movs	r1, #1
 801318c:	4648      	mov	r0, r9
 801318e:	f000 fbed 	bl	801396c <__i2b>
 8013192:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013194:	4604      	mov	r4, r0
 8013196:	2b00      	cmp	r3, #0
 8013198:	f000 81d0 	beq.w	801353c <_dtoa_r+0xa64>
 801319c:	461a      	mov	r2, r3
 801319e:	4601      	mov	r1, r0
 80131a0:	4648      	mov	r0, r9
 80131a2:	f000 fca3 	bl	8013aec <__pow5mult>
 80131a6:	9b07      	ldr	r3, [sp, #28]
 80131a8:	2b01      	cmp	r3, #1
 80131aa:	4604      	mov	r4, r0
 80131ac:	f300 8095 	bgt.w	80132da <_dtoa_r+0x802>
 80131b0:	9b02      	ldr	r3, [sp, #8]
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	f040 808b 	bne.w	80132ce <_dtoa_r+0x7f6>
 80131b8:	9b03      	ldr	r3, [sp, #12]
 80131ba:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80131be:	2a00      	cmp	r2, #0
 80131c0:	f040 8087 	bne.w	80132d2 <_dtoa_r+0x7fa>
 80131c4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80131c8:	0d12      	lsrs	r2, r2, #20
 80131ca:	0512      	lsls	r2, r2, #20
 80131cc:	2a00      	cmp	r2, #0
 80131ce:	f000 8082 	beq.w	80132d6 <_dtoa_r+0x7fe>
 80131d2:	9b05      	ldr	r3, [sp, #20]
 80131d4:	3301      	adds	r3, #1
 80131d6:	9305      	str	r3, [sp, #20]
 80131d8:	9b06      	ldr	r3, [sp, #24]
 80131da:	3301      	adds	r3, #1
 80131dc:	9306      	str	r3, [sp, #24]
 80131de:	2301      	movs	r3, #1
 80131e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80131e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	f000 81af 	beq.w	8013548 <_dtoa_r+0xa70>
 80131ea:	6922      	ldr	r2, [r4, #16]
 80131ec:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80131f0:	6910      	ldr	r0, [r2, #16]
 80131f2:	f000 fb6f 	bl	80138d4 <__hi0bits>
 80131f6:	f1c0 0020 	rsb	r0, r0, #32
 80131fa:	9b06      	ldr	r3, [sp, #24]
 80131fc:	4418      	add	r0, r3
 80131fe:	f010 001f 	ands.w	r0, r0, #31
 8013202:	d076      	beq.n	80132f2 <_dtoa_r+0x81a>
 8013204:	f1c0 0220 	rsb	r2, r0, #32
 8013208:	2a04      	cmp	r2, #4
 801320a:	dd69      	ble.n	80132e0 <_dtoa_r+0x808>
 801320c:	9b05      	ldr	r3, [sp, #20]
 801320e:	f1c0 001c 	rsb	r0, r0, #28
 8013212:	4403      	add	r3, r0
 8013214:	9305      	str	r3, [sp, #20]
 8013216:	9b06      	ldr	r3, [sp, #24]
 8013218:	4406      	add	r6, r0
 801321a:	4403      	add	r3, r0
 801321c:	9306      	str	r3, [sp, #24]
 801321e:	9b05      	ldr	r3, [sp, #20]
 8013220:	2b00      	cmp	r3, #0
 8013222:	dd05      	ble.n	8013230 <_dtoa_r+0x758>
 8013224:	9901      	ldr	r1, [sp, #4]
 8013226:	461a      	mov	r2, r3
 8013228:	4648      	mov	r0, r9
 801322a:	f000 fcb9 	bl	8013ba0 <__lshift>
 801322e:	9001      	str	r0, [sp, #4]
 8013230:	9b06      	ldr	r3, [sp, #24]
 8013232:	2b00      	cmp	r3, #0
 8013234:	dd05      	ble.n	8013242 <_dtoa_r+0x76a>
 8013236:	4621      	mov	r1, r4
 8013238:	461a      	mov	r2, r3
 801323a:	4648      	mov	r0, r9
 801323c:	f000 fcb0 	bl	8013ba0 <__lshift>
 8013240:	4604      	mov	r4, r0
 8013242:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013244:	2b00      	cmp	r3, #0
 8013246:	d056      	beq.n	80132f6 <_dtoa_r+0x81e>
 8013248:	9801      	ldr	r0, [sp, #4]
 801324a:	4621      	mov	r1, r4
 801324c:	f000 fd14 	bl	8013c78 <__mcmp>
 8013250:	2800      	cmp	r0, #0
 8013252:	da50      	bge.n	80132f6 <_dtoa_r+0x81e>
 8013254:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8013258:	9304      	str	r3, [sp, #16]
 801325a:	9901      	ldr	r1, [sp, #4]
 801325c:	2300      	movs	r3, #0
 801325e:	220a      	movs	r2, #10
 8013260:	4648      	mov	r0, r9
 8013262:	f000 faf1 	bl	8013848 <__multadd>
 8013266:	9b08      	ldr	r3, [sp, #32]
 8013268:	9001      	str	r0, [sp, #4]
 801326a:	2b00      	cmp	r3, #0
 801326c:	f000 816e 	beq.w	801354c <_dtoa_r+0xa74>
 8013270:	4629      	mov	r1, r5
 8013272:	2300      	movs	r3, #0
 8013274:	220a      	movs	r2, #10
 8013276:	4648      	mov	r0, r9
 8013278:	f000 fae6 	bl	8013848 <__multadd>
 801327c:	f1bb 0f00 	cmp.w	fp, #0
 8013280:	4605      	mov	r5, r0
 8013282:	dc64      	bgt.n	801334e <_dtoa_r+0x876>
 8013284:	9b07      	ldr	r3, [sp, #28]
 8013286:	2b02      	cmp	r3, #2
 8013288:	dc3e      	bgt.n	8013308 <_dtoa_r+0x830>
 801328a:	e060      	b.n	801334e <_dtoa_r+0x876>
 801328c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801328e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8013292:	e73c      	b.n	801310e <_dtoa_r+0x636>
 8013294:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 8013298:	42a3      	cmp	r3, r4
 801329a:	bfbf      	itttt	lt
 801329c:	1ae2      	sublt	r2, r4, r3
 801329e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80132a0:	189b      	addlt	r3, r3, r2
 80132a2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 80132a4:	bfae      	itee	ge
 80132a6:	1b1c      	subge	r4, r3, r4
 80132a8:	4623      	movlt	r3, r4
 80132aa:	2400      	movlt	r4, #0
 80132ac:	f1ba 0f00 	cmp.w	sl, #0
 80132b0:	bfb5      	itete	lt
 80132b2:	9a05      	ldrlt	r2, [sp, #20]
 80132b4:	9e05      	ldrge	r6, [sp, #20]
 80132b6:	eba2 060a 	sublt.w	r6, r2, sl
 80132ba:	4652      	movge	r2, sl
 80132bc:	bfb8      	it	lt
 80132be:	2200      	movlt	r2, #0
 80132c0:	e727      	b.n	8013112 <_dtoa_r+0x63a>
 80132c2:	9e05      	ldr	r6, [sp, #20]
 80132c4:	9d08      	ldr	r5, [sp, #32]
 80132c6:	461c      	mov	r4, r3
 80132c8:	e730      	b.n	801312c <_dtoa_r+0x654>
 80132ca:	461a      	mov	r2, r3
 80132cc:	e758      	b.n	8013180 <_dtoa_r+0x6a8>
 80132ce:	2300      	movs	r3, #0
 80132d0:	e786      	b.n	80131e0 <_dtoa_r+0x708>
 80132d2:	9b02      	ldr	r3, [sp, #8]
 80132d4:	e784      	b.n	80131e0 <_dtoa_r+0x708>
 80132d6:	920b      	str	r2, [sp, #44]	@ 0x2c
 80132d8:	e783      	b.n	80131e2 <_dtoa_r+0x70a>
 80132da:	2300      	movs	r3, #0
 80132dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80132de:	e784      	b.n	80131ea <_dtoa_r+0x712>
 80132e0:	d09d      	beq.n	801321e <_dtoa_r+0x746>
 80132e2:	9b05      	ldr	r3, [sp, #20]
 80132e4:	321c      	adds	r2, #28
 80132e6:	4413      	add	r3, r2
 80132e8:	9305      	str	r3, [sp, #20]
 80132ea:	9b06      	ldr	r3, [sp, #24]
 80132ec:	4416      	add	r6, r2
 80132ee:	4413      	add	r3, r2
 80132f0:	e794      	b.n	801321c <_dtoa_r+0x744>
 80132f2:	4602      	mov	r2, r0
 80132f4:	e7f5      	b.n	80132e2 <_dtoa_r+0x80a>
 80132f6:	f1ba 0f00 	cmp.w	sl, #0
 80132fa:	f8cd 8010 	str.w	r8, [sp, #16]
 80132fe:	46d3      	mov	fp, sl
 8013300:	dc21      	bgt.n	8013346 <_dtoa_r+0x86e>
 8013302:	9b07      	ldr	r3, [sp, #28]
 8013304:	2b02      	cmp	r3, #2
 8013306:	dd1e      	ble.n	8013346 <_dtoa_r+0x86e>
 8013308:	f1bb 0f00 	cmp.w	fp, #0
 801330c:	f47f aeb7 	bne.w	801307e <_dtoa_r+0x5a6>
 8013310:	4621      	mov	r1, r4
 8013312:	465b      	mov	r3, fp
 8013314:	2205      	movs	r2, #5
 8013316:	4648      	mov	r0, r9
 8013318:	f000 fa96 	bl	8013848 <__multadd>
 801331c:	4601      	mov	r1, r0
 801331e:	4604      	mov	r4, r0
 8013320:	9801      	ldr	r0, [sp, #4]
 8013322:	f000 fca9 	bl	8013c78 <__mcmp>
 8013326:	2800      	cmp	r0, #0
 8013328:	f77f aea9 	ble.w	801307e <_dtoa_r+0x5a6>
 801332c:	463e      	mov	r6, r7
 801332e:	2331      	movs	r3, #49	@ 0x31
 8013330:	f806 3b01 	strb.w	r3, [r6], #1
 8013334:	9b04      	ldr	r3, [sp, #16]
 8013336:	3301      	adds	r3, #1
 8013338:	9304      	str	r3, [sp, #16]
 801333a:	e6a4      	b.n	8013086 <_dtoa_r+0x5ae>
 801333c:	f8cd 8010 	str.w	r8, [sp, #16]
 8013340:	4654      	mov	r4, sl
 8013342:	4625      	mov	r5, r4
 8013344:	e7f2      	b.n	801332c <_dtoa_r+0x854>
 8013346:	9b08      	ldr	r3, [sp, #32]
 8013348:	2b00      	cmp	r3, #0
 801334a:	f000 8103 	beq.w	8013554 <_dtoa_r+0xa7c>
 801334e:	2e00      	cmp	r6, #0
 8013350:	dd05      	ble.n	801335e <_dtoa_r+0x886>
 8013352:	4629      	mov	r1, r5
 8013354:	4632      	mov	r2, r6
 8013356:	4648      	mov	r0, r9
 8013358:	f000 fc22 	bl	8013ba0 <__lshift>
 801335c:	4605      	mov	r5, r0
 801335e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013360:	2b00      	cmp	r3, #0
 8013362:	d058      	beq.n	8013416 <_dtoa_r+0x93e>
 8013364:	6869      	ldr	r1, [r5, #4]
 8013366:	4648      	mov	r0, r9
 8013368:	f000 fa0c 	bl	8013784 <_Balloc>
 801336c:	4606      	mov	r6, r0
 801336e:	b928      	cbnz	r0, 801337c <_dtoa_r+0x8a4>
 8013370:	4b82      	ldr	r3, [pc, #520]	@ (801357c <_dtoa_r+0xaa4>)
 8013372:	4602      	mov	r2, r0
 8013374:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8013378:	f7ff bbc7 	b.w	8012b0a <_dtoa_r+0x32>
 801337c:	692a      	ldr	r2, [r5, #16]
 801337e:	3202      	adds	r2, #2
 8013380:	0092      	lsls	r2, r2, #2
 8013382:	f105 010c 	add.w	r1, r5, #12
 8013386:	300c      	adds	r0, #12
 8013388:	f000 ffac 	bl	80142e4 <memcpy>
 801338c:	2201      	movs	r2, #1
 801338e:	4631      	mov	r1, r6
 8013390:	4648      	mov	r0, r9
 8013392:	f000 fc05 	bl	8013ba0 <__lshift>
 8013396:	1c7b      	adds	r3, r7, #1
 8013398:	9305      	str	r3, [sp, #20]
 801339a:	eb07 030b 	add.w	r3, r7, fp
 801339e:	9309      	str	r3, [sp, #36]	@ 0x24
 80133a0:	9b02      	ldr	r3, [sp, #8]
 80133a2:	f003 0301 	and.w	r3, r3, #1
 80133a6:	46a8      	mov	r8, r5
 80133a8:	9308      	str	r3, [sp, #32]
 80133aa:	4605      	mov	r5, r0
 80133ac:	9b05      	ldr	r3, [sp, #20]
 80133ae:	9801      	ldr	r0, [sp, #4]
 80133b0:	4621      	mov	r1, r4
 80133b2:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80133b6:	f7ff fb06 	bl	80129c6 <quorem>
 80133ba:	4641      	mov	r1, r8
 80133bc:	9002      	str	r0, [sp, #8]
 80133be:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80133c2:	9801      	ldr	r0, [sp, #4]
 80133c4:	f000 fc58 	bl	8013c78 <__mcmp>
 80133c8:	462a      	mov	r2, r5
 80133ca:	9006      	str	r0, [sp, #24]
 80133cc:	4621      	mov	r1, r4
 80133ce:	4648      	mov	r0, r9
 80133d0:	f000 fc6e 	bl	8013cb0 <__mdiff>
 80133d4:	68c2      	ldr	r2, [r0, #12]
 80133d6:	4606      	mov	r6, r0
 80133d8:	b9fa      	cbnz	r2, 801341a <_dtoa_r+0x942>
 80133da:	4601      	mov	r1, r0
 80133dc:	9801      	ldr	r0, [sp, #4]
 80133de:	f000 fc4b 	bl	8013c78 <__mcmp>
 80133e2:	4602      	mov	r2, r0
 80133e4:	4631      	mov	r1, r6
 80133e6:	4648      	mov	r0, r9
 80133e8:	920a      	str	r2, [sp, #40]	@ 0x28
 80133ea:	f000 fa0b 	bl	8013804 <_Bfree>
 80133ee:	9b07      	ldr	r3, [sp, #28]
 80133f0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80133f2:	9e05      	ldr	r6, [sp, #20]
 80133f4:	ea43 0102 	orr.w	r1, r3, r2
 80133f8:	9b08      	ldr	r3, [sp, #32]
 80133fa:	4319      	orrs	r1, r3
 80133fc:	d10f      	bne.n	801341e <_dtoa_r+0x946>
 80133fe:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8013402:	d028      	beq.n	8013456 <_dtoa_r+0x97e>
 8013404:	9b06      	ldr	r3, [sp, #24]
 8013406:	2b00      	cmp	r3, #0
 8013408:	dd02      	ble.n	8013410 <_dtoa_r+0x938>
 801340a:	9b02      	ldr	r3, [sp, #8]
 801340c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8013410:	f88b a000 	strb.w	sl, [fp]
 8013414:	e639      	b.n	801308a <_dtoa_r+0x5b2>
 8013416:	4628      	mov	r0, r5
 8013418:	e7bd      	b.n	8013396 <_dtoa_r+0x8be>
 801341a:	2201      	movs	r2, #1
 801341c:	e7e2      	b.n	80133e4 <_dtoa_r+0x90c>
 801341e:	9b06      	ldr	r3, [sp, #24]
 8013420:	2b00      	cmp	r3, #0
 8013422:	db04      	blt.n	801342e <_dtoa_r+0x956>
 8013424:	9907      	ldr	r1, [sp, #28]
 8013426:	430b      	orrs	r3, r1
 8013428:	9908      	ldr	r1, [sp, #32]
 801342a:	430b      	orrs	r3, r1
 801342c:	d120      	bne.n	8013470 <_dtoa_r+0x998>
 801342e:	2a00      	cmp	r2, #0
 8013430:	ddee      	ble.n	8013410 <_dtoa_r+0x938>
 8013432:	9901      	ldr	r1, [sp, #4]
 8013434:	2201      	movs	r2, #1
 8013436:	4648      	mov	r0, r9
 8013438:	f000 fbb2 	bl	8013ba0 <__lshift>
 801343c:	4621      	mov	r1, r4
 801343e:	9001      	str	r0, [sp, #4]
 8013440:	f000 fc1a 	bl	8013c78 <__mcmp>
 8013444:	2800      	cmp	r0, #0
 8013446:	dc03      	bgt.n	8013450 <_dtoa_r+0x978>
 8013448:	d1e2      	bne.n	8013410 <_dtoa_r+0x938>
 801344a:	f01a 0f01 	tst.w	sl, #1
 801344e:	d0df      	beq.n	8013410 <_dtoa_r+0x938>
 8013450:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8013454:	d1d9      	bne.n	801340a <_dtoa_r+0x932>
 8013456:	2339      	movs	r3, #57	@ 0x39
 8013458:	f88b 3000 	strb.w	r3, [fp]
 801345c:	4633      	mov	r3, r6
 801345e:	461e      	mov	r6, r3
 8013460:	3b01      	subs	r3, #1
 8013462:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8013466:	2a39      	cmp	r2, #57	@ 0x39
 8013468:	d053      	beq.n	8013512 <_dtoa_r+0xa3a>
 801346a:	3201      	adds	r2, #1
 801346c:	701a      	strb	r2, [r3, #0]
 801346e:	e60c      	b.n	801308a <_dtoa_r+0x5b2>
 8013470:	2a00      	cmp	r2, #0
 8013472:	dd07      	ble.n	8013484 <_dtoa_r+0x9ac>
 8013474:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8013478:	d0ed      	beq.n	8013456 <_dtoa_r+0x97e>
 801347a:	f10a 0301 	add.w	r3, sl, #1
 801347e:	f88b 3000 	strb.w	r3, [fp]
 8013482:	e602      	b.n	801308a <_dtoa_r+0x5b2>
 8013484:	9b05      	ldr	r3, [sp, #20]
 8013486:	9a05      	ldr	r2, [sp, #20]
 8013488:	f803 ac01 	strb.w	sl, [r3, #-1]
 801348c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801348e:	4293      	cmp	r3, r2
 8013490:	d029      	beq.n	80134e6 <_dtoa_r+0xa0e>
 8013492:	9901      	ldr	r1, [sp, #4]
 8013494:	2300      	movs	r3, #0
 8013496:	220a      	movs	r2, #10
 8013498:	4648      	mov	r0, r9
 801349a:	f000 f9d5 	bl	8013848 <__multadd>
 801349e:	45a8      	cmp	r8, r5
 80134a0:	9001      	str	r0, [sp, #4]
 80134a2:	f04f 0300 	mov.w	r3, #0
 80134a6:	f04f 020a 	mov.w	r2, #10
 80134aa:	4641      	mov	r1, r8
 80134ac:	4648      	mov	r0, r9
 80134ae:	d107      	bne.n	80134c0 <_dtoa_r+0x9e8>
 80134b0:	f000 f9ca 	bl	8013848 <__multadd>
 80134b4:	4680      	mov	r8, r0
 80134b6:	4605      	mov	r5, r0
 80134b8:	9b05      	ldr	r3, [sp, #20]
 80134ba:	3301      	adds	r3, #1
 80134bc:	9305      	str	r3, [sp, #20]
 80134be:	e775      	b.n	80133ac <_dtoa_r+0x8d4>
 80134c0:	f000 f9c2 	bl	8013848 <__multadd>
 80134c4:	4629      	mov	r1, r5
 80134c6:	4680      	mov	r8, r0
 80134c8:	2300      	movs	r3, #0
 80134ca:	220a      	movs	r2, #10
 80134cc:	4648      	mov	r0, r9
 80134ce:	f000 f9bb 	bl	8013848 <__multadd>
 80134d2:	4605      	mov	r5, r0
 80134d4:	e7f0      	b.n	80134b8 <_dtoa_r+0x9e0>
 80134d6:	f1bb 0f00 	cmp.w	fp, #0
 80134da:	bfcc      	ite	gt
 80134dc:	465e      	movgt	r6, fp
 80134de:	2601      	movle	r6, #1
 80134e0:	443e      	add	r6, r7
 80134e2:	f04f 0800 	mov.w	r8, #0
 80134e6:	9901      	ldr	r1, [sp, #4]
 80134e8:	2201      	movs	r2, #1
 80134ea:	4648      	mov	r0, r9
 80134ec:	f000 fb58 	bl	8013ba0 <__lshift>
 80134f0:	4621      	mov	r1, r4
 80134f2:	9001      	str	r0, [sp, #4]
 80134f4:	f000 fbc0 	bl	8013c78 <__mcmp>
 80134f8:	2800      	cmp	r0, #0
 80134fa:	dcaf      	bgt.n	801345c <_dtoa_r+0x984>
 80134fc:	d102      	bne.n	8013504 <_dtoa_r+0xa2c>
 80134fe:	f01a 0f01 	tst.w	sl, #1
 8013502:	d1ab      	bne.n	801345c <_dtoa_r+0x984>
 8013504:	4633      	mov	r3, r6
 8013506:	461e      	mov	r6, r3
 8013508:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801350c:	2a30      	cmp	r2, #48	@ 0x30
 801350e:	d0fa      	beq.n	8013506 <_dtoa_r+0xa2e>
 8013510:	e5bb      	b.n	801308a <_dtoa_r+0x5b2>
 8013512:	429f      	cmp	r7, r3
 8013514:	d1a3      	bne.n	801345e <_dtoa_r+0x986>
 8013516:	9b04      	ldr	r3, [sp, #16]
 8013518:	3301      	adds	r3, #1
 801351a:	9304      	str	r3, [sp, #16]
 801351c:	2331      	movs	r3, #49	@ 0x31
 801351e:	703b      	strb	r3, [r7, #0]
 8013520:	e5b3      	b.n	801308a <_dtoa_r+0x5b2>
 8013522:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013524:	4f16      	ldr	r7, [pc, #88]	@ (8013580 <_dtoa_r+0xaa8>)
 8013526:	b11b      	cbz	r3, 8013530 <_dtoa_r+0xa58>
 8013528:	f107 0308 	add.w	r3, r7, #8
 801352c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801352e:	6013      	str	r3, [r2, #0]
 8013530:	4638      	mov	r0, r7
 8013532:	b011      	add	sp, #68	@ 0x44
 8013534:	ecbd 8b02 	vpop	{d8}
 8013538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801353c:	9b07      	ldr	r3, [sp, #28]
 801353e:	2b01      	cmp	r3, #1
 8013540:	f77f ae36 	ble.w	80131b0 <_dtoa_r+0x6d8>
 8013544:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013546:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013548:	2001      	movs	r0, #1
 801354a:	e656      	b.n	80131fa <_dtoa_r+0x722>
 801354c:	f1bb 0f00 	cmp.w	fp, #0
 8013550:	f77f aed7 	ble.w	8013302 <_dtoa_r+0x82a>
 8013554:	463e      	mov	r6, r7
 8013556:	9801      	ldr	r0, [sp, #4]
 8013558:	4621      	mov	r1, r4
 801355a:	f7ff fa34 	bl	80129c6 <quorem>
 801355e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8013562:	f806 ab01 	strb.w	sl, [r6], #1
 8013566:	1bf2      	subs	r2, r6, r7
 8013568:	4593      	cmp	fp, r2
 801356a:	ddb4      	ble.n	80134d6 <_dtoa_r+0x9fe>
 801356c:	9901      	ldr	r1, [sp, #4]
 801356e:	2300      	movs	r3, #0
 8013570:	220a      	movs	r2, #10
 8013572:	4648      	mov	r0, r9
 8013574:	f000 f968 	bl	8013848 <__multadd>
 8013578:	9001      	str	r0, [sp, #4]
 801357a:	e7ec      	b.n	8013556 <_dtoa_r+0xa7e>
 801357c:	08015512 	.word	0x08015512
 8013580:	08015496 	.word	0x08015496

08013584 <_free_r>:
 8013584:	b538      	push	{r3, r4, r5, lr}
 8013586:	4605      	mov	r5, r0
 8013588:	2900      	cmp	r1, #0
 801358a:	d041      	beq.n	8013610 <_free_r+0x8c>
 801358c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013590:	1f0c      	subs	r4, r1, #4
 8013592:	2b00      	cmp	r3, #0
 8013594:	bfb8      	it	lt
 8013596:	18e4      	addlt	r4, r4, r3
 8013598:	f000 f8e8 	bl	801376c <__malloc_lock>
 801359c:	4a1d      	ldr	r2, [pc, #116]	@ (8013614 <_free_r+0x90>)
 801359e:	6813      	ldr	r3, [r2, #0]
 80135a0:	b933      	cbnz	r3, 80135b0 <_free_r+0x2c>
 80135a2:	6063      	str	r3, [r4, #4]
 80135a4:	6014      	str	r4, [r2, #0]
 80135a6:	4628      	mov	r0, r5
 80135a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80135ac:	f000 b8e4 	b.w	8013778 <__malloc_unlock>
 80135b0:	42a3      	cmp	r3, r4
 80135b2:	d908      	bls.n	80135c6 <_free_r+0x42>
 80135b4:	6820      	ldr	r0, [r4, #0]
 80135b6:	1821      	adds	r1, r4, r0
 80135b8:	428b      	cmp	r3, r1
 80135ba:	bf01      	itttt	eq
 80135bc:	6819      	ldreq	r1, [r3, #0]
 80135be:	685b      	ldreq	r3, [r3, #4]
 80135c0:	1809      	addeq	r1, r1, r0
 80135c2:	6021      	streq	r1, [r4, #0]
 80135c4:	e7ed      	b.n	80135a2 <_free_r+0x1e>
 80135c6:	461a      	mov	r2, r3
 80135c8:	685b      	ldr	r3, [r3, #4]
 80135ca:	b10b      	cbz	r3, 80135d0 <_free_r+0x4c>
 80135cc:	42a3      	cmp	r3, r4
 80135ce:	d9fa      	bls.n	80135c6 <_free_r+0x42>
 80135d0:	6811      	ldr	r1, [r2, #0]
 80135d2:	1850      	adds	r0, r2, r1
 80135d4:	42a0      	cmp	r0, r4
 80135d6:	d10b      	bne.n	80135f0 <_free_r+0x6c>
 80135d8:	6820      	ldr	r0, [r4, #0]
 80135da:	4401      	add	r1, r0
 80135dc:	1850      	adds	r0, r2, r1
 80135de:	4283      	cmp	r3, r0
 80135e0:	6011      	str	r1, [r2, #0]
 80135e2:	d1e0      	bne.n	80135a6 <_free_r+0x22>
 80135e4:	6818      	ldr	r0, [r3, #0]
 80135e6:	685b      	ldr	r3, [r3, #4]
 80135e8:	6053      	str	r3, [r2, #4]
 80135ea:	4408      	add	r0, r1
 80135ec:	6010      	str	r0, [r2, #0]
 80135ee:	e7da      	b.n	80135a6 <_free_r+0x22>
 80135f0:	d902      	bls.n	80135f8 <_free_r+0x74>
 80135f2:	230c      	movs	r3, #12
 80135f4:	602b      	str	r3, [r5, #0]
 80135f6:	e7d6      	b.n	80135a6 <_free_r+0x22>
 80135f8:	6820      	ldr	r0, [r4, #0]
 80135fa:	1821      	adds	r1, r4, r0
 80135fc:	428b      	cmp	r3, r1
 80135fe:	bf04      	itt	eq
 8013600:	6819      	ldreq	r1, [r3, #0]
 8013602:	685b      	ldreq	r3, [r3, #4]
 8013604:	6063      	str	r3, [r4, #4]
 8013606:	bf04      	itt	eq
 8013608:	1809      	addeq	r1, r1, r0
 801360a:	6021      	streq	r1, [r4, #0]
 801360c:	6054      	str	r4, [r2, #4]
 801360e:	e7ca      	b.n	80135a6 <_free_r+0x22>
 8013610:	bd38      	pop	{r3, r4, r5, pc}
 8013612:	bf00      	nop
 8013614:	2400120c 	.word	0x2400120c

08013618 <malloc>:
 8013618:	4b02      	ldr	r3, [pc, #8]	@ (8013624 <malloc+0xc>)
 801361a:	4601      	mov	r1, r0
 801361c:	6818      	ldr	r0, [r3, #0]
 801361e:	f000 b825 	b.w	801366c <_malloc_r>
 8013622:	bf00      	nop
 8013624:	24000054 	.word	0x24000054

08013628 <sbrk_aligned>:
 8013628:	b570      	push	{r4, r5, r6, lr}
 801362a:	4e0f      	ldr	r6, [pc, #60]	@ (8013668 <sbrk_aligned+0x40>)
 801362c:	460c      	mov	r4, r1
 801362e:	6831      	ldr	r1, [r6, #0]
 8013630:	4605      	mov	r5, r0
 8013632:	b911      	cbnz	r1, 801363a <sbrk_aligned+0x12>
 8013634:	f000 fe46 	bl	80142c4 <_sbrk_r>
 8013638:	6030      	str	r0, [r6, #0]
 801363a:	4621      	mov	r1, r4
 801363c:	4628      	mov	r0, r5
 801363e:	f000 fe41 	bl	80142c4 <_sbrk_r>
 8013642:	1c43      	adds	r3, r0, #1
 8013644:	d103      	bne.n	801364e <sbrk_aligned+0x26>
 8013646:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801364a:	4620      	mov	r0, r4
 801364c:	bd70      	pop	{r4, r5, r6, pc}
 801364e:	1cc4      	adds	r4, r0, #3
 8013650:	f024 0403 	bic.w	r4, r4, #3
 8013654:	42a0      	cmp	r0, r4
 8013656:	d0f8      	beq.n	801364a <sbrk_aligned+0x22>
 8013658:	1a21      	subs	r1, r4, r0
 801365a:	4628      	mov	r0, r5
 801365c:	f000 fe32 	bl	80142c4 <_sbrk_r>
 8013660:	3001      	adds	r0, #1
 8013662:	d1f2      	bne.n	801364a <sbrk_aligned+0x22>
 8013664:	e7ef      	b.n	8013646 <sbrk_aligned+0x1e>
 8013666:	bf00      	nop
 8013668:	24001208 	.word	0x24001208

0801366c <_malloc_r>:
 801366c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013670:	1ccd      	adds	r5, r1, #3
 8013672:	f025 0503 	bic.w	r5, r5, #3
 8013676:	3508      	adds	r5, #8
 8013678:	2d0c      	cmp	r5, #12
 801367a:	bf38      	it	cc
 801367c:	250c      	movcc	r5, #12
 801367e:	2d00      	cmp	r5, #0
 8013680:	4606      	mov	r6, r0
 8013682:	db01      	blt.n	8013688 <_malloc_r+0x1c>
 8013684:	42a9      	cmp	r1, r5
 8013686:	d904      	bls.n	8013692 <_malloc_r+0x26>
 8013688:	230c      	movs	r3, #12
 801368a:	6033      	str	r3, [r6, #0]
 801368c:	2000      	movs	r0, #0
 801368e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013692:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013768 <_malloc_r+0xfc>
 8013696:	f000 f869 	bl	801376c <__malloc_lock>
 801369a:	f8d8 3000 	ldr.w	r3, [r8]
 801369e:	461c      	mov	r4, r3
 80136a0:	bb44      	cbnz	r4, 80136f4 <_malloc_r+0x88>
 80136a2:	4629      	mov	r1, r5
 80136a4:	4630      	mov	r0, r6
 80136a6:	f7ff ffbf 	bl	8013628 <sbrk_aligned>
 80136aa:	1c43      	adds	r3, r0, #1
 80136ac:	4604      	mov	r4, r0
 80136ae:	d158      	bne.n	8013762 <_malloc_r+0xf6>
 80136b0:	f8d8 4000 	ldr.w	r4, [r8]
 80136b4:	4627      	mov	r7, r4
 80136b6:	2f00      	cmp	r7, #0
 80136b8:	d143      	bne.n	8013742 <_malloc_r+0xd6>
 80136ba:	2c00      	cmp	r4, #0
 80136bc:	d04b      	beq.n	8013756 <_malloc_r+0xea>
 80136be:	6823      	ldr	r3, [r4, #0]
 80136c0:	4639      	mov	r1, r7
 80136c2:	4630      	mov	r0, r6
 80136c4:	eb04 0903 	add.w	r9, r4, r3
 80136c8:	f000 fdfc 	bl	80142c4 <_sbrk_r>
 80136cc:	4581      	cmp	r9, r0
 80136ce:	d142      	bne.n	8013756 <_malloc_r+0xea>
 80136d0:	6821      	ldr	r1, [r4, #0]
 80136d2:	1a6d      	subs	r5, r5, r1
 80136d4:	4629      	mov	r1, r5
 80136d6:	4630      	mov	r0, r6
 80136d8:	f7ff ffa6 	bl	8013628 <sbrk_aligned>
 80136dc:	3001      	adds	r0, #1
 80136de:	d03a      	beq.n	8013756 <_malloc_r+0xea>
 80136e0:	6823      	ldr	r3, [r4, #0]
 80136e2:	442b      	add	r3, r5
 80136e4:	6023      	str	r3, [r4, #0]
 80136e6:	f8d8 3000 	ldr.w	r3, [r8]
 80136ea:	685a      	ldr	r2, [r3, #4]
 80136ec:	bb62      	cbnz	r2, 8013748 <_malloc_r+0xdc>
 80136ee:	f8c8 7000 	str.w	r7, [r8]
 80136f2:	e00f      	b.n	8013714 <_malloc_r+0xa8>
 80136f4:	6822      	ldr	r2, [r4, #0]
 80136f6:	1b52      	subs	r2, r2, r5
 80136f8:	d420      	bmi.n	801373c <_malloc_r+0xd0>
 80136fa:	2a0b      	cmp	r2, #11
 80136fc:	d917      	bls.n	801372e <_malloc_r+0xc2>
 80136fe:	1961      	adds	r1, r4, r5
 8013700:	42a3      	cmp	r3, r4
 8013702:	6025      	str	r5, [r4, #0]
 8013704:	bf18      	it	ne
 8013706:	6059      	strne	r1, [r3, #4]
 8013708:	6863      	ldr	r3, [r4, #4]
 801370a:	bf08      	it	eq
 801370c:	f8c8 1000 	streq.w	r1, [r8]
 8013710:	5162      	str	r2, [r4, r5]
 8013712:	604b      	str	r3, [r1, #4]
 8013714:	4630      	mov	r0, r6
 8013716:	f000 f82f 	bl	8013778 <__malloc_unlock>
 801371a:	f104 000b 	add.w	r0, r4, #11
 801371e:	1d23      	adds	r3, r4, #4
 8013720:	f020 0007 	bic.w	r0, r0, #7
 8013724:	1ac2      	subs	r2, r0, r3
 8013726:	bf1c      	itt	ne
 8013728:	1a1b      	subne	r3, r3, r0
 801372a:	50a3      	strne	r3, [r4, r2]
 801372c:	e7af      	b.n	801368e <_malloc_r+0x22>
 801372e:	6862      	ldr	r2, [r4, #4]
 8013730:	42a3      	cmp	r3, r4
 8013732:	bf0c      	ite	eq
 8013734:	f8c8 2000 	streq.w	r2, [r8]
 8013738:	605a      	strne	r2, [r3, #4]
 801373a:	e7eb      	b.n	8013714 <_malloc_r+0xa8>
 801373c:	4623      	mov	r3, r4
 801373e:	6864      	ldr	r4, [r4, #4]
 8013740:	e7ae      	b.n	80136a0 <_malloc_r+0x34>
 8013742:	463c      	mov	r4, r7
 8013744:	687f      	ldr	r7, [r7, #4]
 8013746:	e7b6      	b.n	80136b6 <_malloc_r+0x4a>
 8013748:	461a      	mov	r2, r3
 801374a:	685b      	ldr	r3, [r3, #4]
 801374c:	42a3      	cmp	r3, r4
 801374e:	d1fb      	bne.n	8013748 <_malloc_r+0xdc>
 8013750:	2300      	movs	r3, #0
 8013752:	6053      	str	r3, [r2, #4]
 8013754:	e7de      	b.n	8013714 <_malloc_r+0xa8>
 8013756:	230c      	movs	r3, #12
 8013758:	6033      	str	r3, [r6, #0]
 801375a:	4630      	mov	r0, r6
 801375c:	f000 f80c 	bl	8013778 <__malloc_unlock>
 8013760:	e794      	b.n	801368c <_malloc_r+0x20>
 8013762:	6005      	str	r5, [r0, #0]
 8013764:	e7d6      	b.n	8013714 <_malloc_r+0xa8>
 8013766:	bf00      	nop
 8013768:	2400120c 	.word	0x2400120c

0801376c <__malloc_lock>:
 801376c:	4801      	ldr	r0, [pc, #4]	@ (8013774 <__malloc_lock+0x8>)
 801376e:	f7ff b920 	b.w	80129b2 <__retarget_lock_acquire_recursive>
 8013772:	bf00      	nop
 8013774:	24001204 	.word	0x24001204

08013778 <__malloc_unlock>:
 8013778:	4801      	ldr	r0, [pc, #4]	@ (8013780 <__malloc_unlock+0x8>)
 801377a:	f7ff b91b 	b.w	80129b4 <__retarget_lock_release_recursive>
 801377e:	bf00      	nop
 8013780:	24001204 	.word	0x24001204

08013784 <_Balloc>:
 8013784:	b570      	push	{r4, r5, r6, lr}
 8013786:	69c6      	ldr	r6, [r0, #28]
 8013788:	4604      	mov	r4, r0
 801378a:	460d      	mov	r5, r1
 801378c:	b976      	cbnz	r6, 80137ac <_Balloc+0x28>
 801378e:	2010      	movs	r0, #16
 8013790:	f7ff ff42 	bl	8013618 <malloc>
 8013794:	4602      	mov	r2, r0
 8013796:	61e0      	str	r0, [r4, #28]
 8013798:	b920      	cbnz	r0, 80137a4 <_Balloc+0x20>
 801379a:	4b18      	ldr	r3, [pc, #96]	@ (80137fc <_Balloc+0x78>)
 801379c:	4818      	ldr	r0, [pc, #96]	@ (8013800 <_Balloc+0x7c>)
 801379e:	216b      	movs	r1, #107	@ 0x6b
 80137a0:	f000 fdae 	bl	8014300 <__assert_func>
 80137a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80137a8:	6006      	str	r6, [r0, #0]
 80137aa:	60c6      	str	r6, [r0, #12]
 80137ac:	69e6      	ldr	r6, [r4, #28]
 80137ae:	68f3      	ldr	r3, [r6, #12]
 80137b0:	b183      	cbz	r3, 80137d4 <_Balloc+0x50>
 80137b2:	69e3      	ldr	r3, [r4, #28]
 80137b4:	68db      	ldr	r3, [r3, #12]
 80137b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80137ba:	b9b8      	cbnz	r0, 80137ec <_Balloc+0x68>
 80137bc:	2101      	movs	r1, #1
 80137be:	fa01 f605 	lsl.w	r6, r1, r5
 80137c2:	1d72      	adds	r2, r6, #5
 80137c4:	0092      	lsls	r2, r2, #2
 80137c6:	4620      	mov	r0, r4
 80137c8:	f000 fdb8 	bl	801433c <_calloc_r>
 80137cc:	b160      	cbz	r0, 80137e8 <_Balloc+0x64>
 80137ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80137d2:	e00e      	b.n	80137f2 <_Balloc+0x6e>
 80137d4:	2221      	movs	r2, #33	@ 0x21
 80137d6:	2104      	movs	r1, #4
 80137d8:	4620      	mov	r0, r4
 80137da:	f000 fdaf 	bl	801433c <_calloc_r>
 80137de:	69e3      	ldr	r3, [r4, #28]
 80137e0:	60f0      	str	r0, [r6, #12]
 80137e2:	68db      	ldr	r3, [r3, #12]
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d1e4      	bne.n	80137b2 <_Balloc+0x2e>
 80137e8:	2000      	movs	r0, #0
 80137ea:	bd70      	pop	{r4, r5, r6, pc}
 80137ec:	6802      	ldr	r2, [r0, #0]
 80137ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80137f2:	2300      	movs	r3, #0
 80137f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80137f8:	e7f7      	b.n	80137ea <_Balloc+0x66>
 80137fa:	bf00      	nop
 80137fc:	080154a3 	.word	0x080154a3
 8013800:	08015523 	.word	0x08015523

08013804 <_Bfree>:
 8013804:	b570      	push	{r4, r5, r6, lr}
 8013806:	69c6      	ldr	r6, [r0, #28]
 8013808:	4605      	mov	r5, r0
 801380a:	460c      	mov	r4, r1
 801380c:	b976      	cbnz	r6, 801382c <_Bfree+0x28>
 801380e:	2010      	movs	r0, #16
 8013810:	f7ff ff02 	bl	8013618 <malloc>
 8013814:	4602      	mov	r2, r0
 8013816:	61e8      	str	r0, [r5, #28]
 8013818:	b920      	cbnz	r0, 8013824 <_Bfree+0x20>
 801381a:	4b09      	ldr	r3, [pc, #36]	@ (8013840 <_Bfree+0x3c>)
 801381c:	4809      	ldr	r0, [pc, #36]	@ (8013844 <_Bfree+0x40>)
 801381e:	218f      	movs	r1, #143	@ 0x8f
 8013820:	f000 fd6e 	bl	8014300 <__assert_func>
 8013824:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013828:	6006      	str	r6, [r0, #0]
 801382a:	60c6      	str	r6, [r0, #12]
 801382c:	b13c      	cbz	r4, 801383e <_Bfree+0x3a>
 801382e:	69eb      	ldr	r3, [r5, #28]
 8013830:	6862      	ldr	r2, [r4, #4]
 8013832:	68db      	ldr	r3, [r3, #12]
 8013834:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013838:	6021      	str	r1, [r4, #0]
 801383a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801383e:	bd70      	pop	{r4, r5, r6, pc}
 8013840:	080154a3 	.word	0x080154a3
 8013844:	08015523 	.word	0x08015523

08013848 <__multadd>:
 8013848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801384c:	690d      	ldr	r5, [r1, #16]
 801384e:	4607      	mov	r7, r0
 8013850:	460c      	mov	r4, r1
 8013852:	461e      	mov	r6, r3
 8013854:	f101 0c14 	add.w	ip, r1, #20
 8013858:	2000      	movs	r0, #0
 801385a:	f8dc 3000 	ldr.w	r3, [ip]
 801385e:	b299      	uxth	r1, r3
 8013860:	fb02 6101 	mla	r1, r2, r1, r6
 8013864:	0c1e      	lsrs	r6, r3, #16
 8013866:	0c0b      	lsrs	r3, r1, #16
 8013868:	fb02 3306 	mla	r3, r2, r6, r3
 801386c:	b289      	uxth	r1, r1
 801386e:	3001      	adds	r0, #1
 8013870:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013874:	4285      	cmp	r5, r0
 8013876:	f84c 1b04 	str.w	r1, [ip], #4
 801387a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801387e:	dcec      	bgt.n	801385a <__multadd+0x12>
 8013880:	b30e      	cbz	r6, 80138c6 <__multadd+0x7e>
 8013882:	68a3      	ldr	r3, [r4, #8]
 8013884:	42ab      	cmp	r3, r5
 8013886:	dc19      	bgt.n	80138bc <__multadd+0x74>
 8013888:	6861      	ldr	r1, [r4, #4]
 801388a:	4638      	mov	r0, r7
 801388c:	3101      	adds	r1, #1
 801388e:	f7ff ff79 	bl	8013784 <_Balloc>
 8013892:	4680      	mov	r8, r0
 8013894:	b928      	cbnz	r0, 80138a2 <__multadd+0x5a>
 8013896:	4602      	mov	r2, r0
 8013898:	4b0c      	ldr	r3, [pc, #48]	@ (80138cc <__multadd+0x84>)
 801389a:	480d      	ldr	r0, [pc, #52]	@ (80138d0 <__multadd+0x88>)
 801389c:	21ba      	movs	r1, #186	@ 0xba
 801389e:	f000 fd2f 	bl	8014300 <__assert_func>
 80138a2:	6922      	ldr	r2, [r4, #16]
 80138a4:	3202      	adds	r2, #2
 80138a6:	f104 010c 	add.w	r1, r4, #12
 80138aa:	0092      	lsls	r2, r2, #2
 80138ac:	300c      	adds	r0, #12
 80138ae:	f000 fd19 	bl	80142e4 <memcpy>
 80138b2:	4621      	mov	r1, r4
 80138b4:	4638      	mov	r0, r7
 80138b6:	f7ff ffa5 	bl	8013804 <_Bfree>
 80138ba:	4644      	mov	r4, r8
 80138bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80138c0:	3501      	adds	r5, #1
 80138c2:	615e      	str	r6, [r3, #20]
 80138c4:	6125      	str	r5, [r4, #16]
 80138c6:	4620      	mov	r0, r4
 80138c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138cc:	08015512 	.word	0x08015512
 80138d0:	08015523 	.word	0x08015523

080138d4 <__hi0bits>:
 80138d4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80138d8:	4603      	mov	r3, r0
 80138da:	bf36      	itet	cc
 80138dc:	0403      	lslcc	r3, r0, #16
 80138de:	2000      	movcs	r0, #0
 80138e0:	2010      	movcc	r0, #16
 80138e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80138e6:	bf3c      	itt	cc
 80138e8:	021b      	lslcc	r3, r3, #8
 80138ea:	3008      	addcc	r0, #8
 80138ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80138f0:	bf3c      	itt	cc
 80138f2:	011b      	lslcc	r3, r3, #4
 80138f4:	3004      	addcc	r0, #4
 80138f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80138fa:	bf3c      	itt	cc
 80138fc:	009b      	lslcc	r3, r3, #2
 80138fe:	3002      	addcc	r0, #2
 8013900:	2b00      	cmp	r3, #0
 8013902:	db05      	blt.n	8013910 <__hi0bits+0x3c>
 8013904:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013908:	f100 0001 	add.w	r0, r0, #1
 801390c:	bf08      	it	eq
 801390e:	2020      	moveq	r0, #32
 8013910:	4770      	bx	lr

08013912 <__lo0bits>:
 8013912:	6803      	ldr	r3, [r0, #0]
 8013914:	4602      	mov	r2, r0
 8013916:	f013 0007 	ands.w	r0, r3, #7
 801391a:	d00b      	beq.n	8013934 <__lo0bits+0x22>
 801391c:	07d9      	lsls	r1, r3, #31
 801391e:	d421      	bmi.n	8013964 <__lo0bits+0x52>
 8013920:	0798      	lsls	r0, r3, #30
 8013922:	bf49      	itett	mi
 8013924:	085b      	lsrmi	r3, r3, #1
 8013926:	089b      	lsrpl	r3, r3, #2
 8013928:	2001      	movmi	r0, #1
 801392a:	6013      	strmi	r3, [r2, #0]
 801392c:	bf5c      	itt	pl
 801392e:	6013      	strpl	r3, [r2, #0]
 8013930:	2002      	movpl	r0, #2
 8013932:	4770      	bx	lr
 8013934:	b299      	uxth	r1, r3
 8013936:	b909      	cbnz	r1, 801393c <__lo0bits+0x2a>
 8013938:	0c1b      	lsrs	r3, r3, #16
 801393a:	2010      	movs	r0, #16
 801393c:	b2d9      	uxtb	r1, r3
 801393e:	b909      	cbnz	r1, 8013944 <__lo0bits+0x32>
 8013940:	3008      	adds	r0, #8
 8013942:	0a1b      	lsrs	r3, r3, #8
 8013944:	0719      	lsls	r1, r3, #28
 8013946:	bf04      	itt	eq
 8013948:	091b      	lsreq	r3, r3, #4
 801394a:	3004      	addeq	r0, #4
 801394c:	0799      	lsls	r1, r3, #30
 801394e:	bf04      	itt	eq
 8013950:	089b      	lsreq	r3, r3, #2
 8013952:	3002      	addeq	r0, #2
 8013954:	07d9      	lsls	r1, r3, #31
 8013956:	d403      	bmi.n	8013960 <__lo0bits+0x4e>
 8013958:	085b      	lsrs	r3, r3, #1
 801395a:	f100 0001 	add.w	r0, r0, #1
 801395e:	d003      	beq.n	8013968 <__lo0bits+0x56>
 8013960:	6013      	str	r3, [r2, #0]
 8013962:	4770      	bx	lr
 8013964:	2000      	movs	r0, #0
 8013966:	4770      	bx	lr
 8013968:	2020      	movs	r0, #32
 801396a:	4770      	bx	lr

0801396c <__i2b>:
 801396c:	b510      	push	{r4, lr}
 801396e:	460c      	mov	r4, r1
 8013970:	2101      	movs	r1, #1
 8013972:	f7ff ff07 	bl	8013784 <_Balloc>
 8013976:	4602      	mov	r2, r0
 8013978:	b928      	cbnz	r0, 8013986 <__i2b+0x1a>
 801397a:	4b05      	ldr	r3, [pc, #20]	@ (8013990 <__i2b+0x24>)
 801397c:	4805      	ldr	r0, [pc, #20]	@ (8013994 <__i2b+0x28>)
 801397e:	f240 1145 	movw	r1, #325	@ 0x145
 8013982:	f000 fcbd 	bl	8014300 <__assert_func>
 8013986:	2301      	movs	r3, #1
 8013988:	6144      	str	r4, [r0, #20]
 801398a:	6103      	str	r3, [r0, #16]
 801398c:	bd10      	pop	{r4, pc}
 801398e:	bf00      	nop
 8013990:	08015512 	.word	0x08015512
 8013994:	08015523 	.word	0x08015523

08013998 <__multiply>:
 8013998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801399c:	4614      	mov	r4, r2
 801399e:	690a      	ldr	r2, [r1, #16]
 80139a0:	6923      	ldr	r3, [r4, #16]
 80139a2:	429a      	cmp	r2, r3
 80139a4:	bfa8      	it	ge
 80139a6:	4623      	movge	r3, r4
 80139a8:	460f      	mov	r7, r1
 80139aa:	bfa4      	itt	ge
 80139ac:	460c      	movge	r4, r1
 80139ae:	461f      	movge	r7, r3
 80139b0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80139b4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80139b8:	68a3      	ldr	r3, [r4, #8]
 80139ba:	6861      	ldr	r1, [r4, #4]
 80139bc:	eb0a 0609 	add.w	r6, sl, r9
 80139c0:	42b3      	cmp	r3, r6
 80139c2:	b085      	sub	sp, #20
 80139c4:	bfb8      	it	lt
 80139c6:	3101      	addlt	r1, #1
 80139c8:	f7ff fedc 	bl	8013784 <_Balloc>
 80139cc:	b930      	cbnz	r0, 80139dc <__multiply+0x44>
 80139ce:	4602      	mov	r2, r0
 80139d0:	4b44      	ldr	r3, [pc, #272]	@ (8013ae4 <__multiply+0x14c>)
 80139d2:	4845      	ldr	r0, [pc, #276]	@ (8013ae8 <__multiply+0x150>)
 80139d4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80139d8:	f000 fc92 	bl	8014300 <__assert_func>
 80139dc:	f100 0514 	add.w	r5, r0, #20
 80139e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80139e4:	462b      	mov	r3, r5
 80139e6:	2200      	movs	r2, #0
 80139e8:	4543      	cmp	r3, r8
 80139ea:	d321      	bcc.n	8013a30 <__multiply+0x98>
 80139ec:	f107 0114 	add.w	r1, r7, #20
 80139f0:	f104 0214 	add.w	r2, r4, #20
 80139f4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80139f8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80139fc:	9302      	str	r3, [sp, #8]
 80139fe:	1b13      	subs	r3, r2, r4
 8013a00:	3b15      	subs	r3, #21
 8013a02:	f023 0303 	bic.w	r3, r3, #3
 8013a06:	3304      	adds	r3, #4
 8013a08:	f104 0715 	add.w	r7, r4, #21
 8013a0c:	42ba      	cmp	r2, r7
 8013a0e:	bf38      	it	cc
 8013a10:	2304      	movcc	r3, #4
 8013a12:	9301      	str	r3, [sp, #4]
 8013a14:	9b02      	ldr	r3, [sp, #8]
 8013a16:	9103      	str	r1, [sp, #12]
 8013a18:	428b      	cmp	r3, r1
 8013a1a:	d80c      	bhi.n	8013a36 <__multiply+0x9e>
 8013a1c:	2e00      	cmp	r6, #0
 8013a1e:	dd03      	ble.n	8013a28 <__multiply+0x90>
 8013a20:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d05b      	beq.n	8013ae0 <__multiply+0x148>
 8013a28:	6106      	str	r6, [r0, #16]
 8013a2a:	b005      	add	sp, #20
 8013a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a30:	f843 2b04 	str.w	r2, [r3], #4
 8013a34:	e7d8      	b.n	80139e8 <__multiply+0x50>
 8013a36:	f8b1 a000 	ldrh.w	sl, [r1]
 8013a3a:	f1ba 0f00 	cmp.w	sl, #0
 8013a3e:	d024      	beq.n	8013a8a <__multiply+0xf2>
 8013a40:	f104 0e14 	add.w	lr, r4, #20
 8013a44:	46a9      	mov	r9, r5
 8013a46:	f04f 0c00 	mov.w	ip, #0
 8013a4a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013a4e:	f8d9 3000 	ldr.w	r3, [r9]
 8013a52:	fa1f fb87 	uxth.w	fp, r7
 8013a56:	b29b      	uxth	r3, r3
 8013a58:	fb0a 330b 	mla	r3, sl, fp, r3
 8013a5c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013a60:	f8d9 7000 	ldr.w	r7, [r9]
 8013a64:	4463      	add	r3, ip
 8013a66:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013a6a:	fb0a c70b 	mla	r7, sl, fp, ip
 8013a6e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8013a72:	b29b      	uxth	r3, r3
 8013a74:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013a78:	4572      	cmp	r2, lr
 8013a7a:	f849 3b04 	str.w	r3, [r9], #4
 8013a7e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013a82:	d8e2      	bhi.n	8013a4a <__multiply+0xb2>
 8013a84:	9b01      	ldr	r3, [sp, #4]
 8013a86:	f845 c003 	str.w	ip, [r5, r3]
 8013a8a:	9b03      	ldr	r3, [sp, #12]
 8013a8c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013a90:	3104      	adds	r1, #4
 8013a92:	f1b9 0f00 	cmp.w	r9, #0
 8013a96:	d021      	beq.n	8013adc <__multiply+0x144>
 8013a98:	682b      	ldr	r3, [r5, #0]
 8013a9a:	f104 0c14 	add.w	ip, r4, #20
 8013a9e:	46ae      	mov	lr, r5
 8013aa0:	f04f 0a00 	mov.w	sl, #0
 8013aa4:	f8bc b000 	ldrh.w	fp, [ip]
 8013aa8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8013aac:	fb09 770b 	mla	r7, r9, fp, r7
 8013ab0:	4457      	add	r7, sl
 8013ab2:	b29b      	uxth	r3, r3
 8013ab4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013ab8:	f84e 3b04 	str.w	r3, [lr], #4
 8013abc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013ac0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013ac4:	f8be 3000 	ldrh.w	r3, [lr]
 8013ac8:	fb09 330a 	mla	r3, r9, sl, r3
 8013acc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013ad0:	4562      	cmp	r2, ip
 8013ad2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013ad6:	d8e5      	bhi.n	8013aa4 <__multiply+0x10c>
 8013ad8:	9f01      	ldr	r7, [sp, #4]
 8013ada:	51eb      	str	r3, [r5, r7]
 8013adc:	3504      	adds	r5, #4
 8013ade:	e799      	b.n	8013a14 <__multiply+0x7c>
 8013ae0:	3e01      	subs	r6, #1
 8013ae2:	e79b      	b.n	8013a1c <__multiply+0x84>
 8013ae4:	08015512 	.word	0x08015512
 8013ae8:	08015523 	.word	0x08015523

08013aec <__pow5mult>:
 8013aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013af0:	4615      	mov	r5, r2
 8013af2:	f012 0203 	ands.w	r2, r2, #3
 8013af6:	4607      	mov	r7, r0
 8013af8:	460e      	mov	r6, r1
 8013afa:	d007      	beq.n	8013b0c <__pow5mult+0x20>
 8013afc:	4c25      	ldr	r4, [pc, #148]	@ (8013b94 <__pow5mult+0xa8>)
 8013afe:	3a01      	subs	r2, #1
 8013b00:	2300      	movs	r3, #0
 8013b02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013b06:	f7ff fe9f 	bl	8013848 <__multadd>
 8013b0a:	4606      	mov	r6, r0
 8013b0c:	10ad      	asrs	r5, r5, #2
 8013b0e:	d03d      	beq.n	8013b8c <__pow5mult+0xa0>
 8013b10:	69fc      	ldr	r4, [r7, #28]
 8013b12:	b97c      	cbnz	r4, 8013b34 <__pow5mult+0x48>
 8013b14:	2010      	movs	r0, #16
 8013b16:	f7ff fd7f 	bl	8013618 <malloc>
 8013b1a:	4602      	mov	r2, r0
 8013b1c:	61f8      	str	r0, [r7, #28]
 8013b1e:	b928      	cbnz	r0, 8013b2c <__pow5mult+0x40>
 8013b20:	4b1d      	ldr	r3, [pc, #116]	@ (8013b98 <__pow5mult+0xac>)
 8013b22:	481e      	ldr	r0, [pc, #120]	@ (8013b9c <__pow5mult+0xb0>)
 8013b24:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013b28:	f000 fbea 	bl	8014300 <__assert_func>
 8013b2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013b30:	6004      	str	r4, [r0, #0]
 8013b32:	60c4      	str	r4, [r0, #12]
 8013b34:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013b38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013b3c:	b94c      	cbnz	r4, 8013b52 <__pow5mult+0x66>
 8013b3e:	f240 2171 	movw	r1, #625	@ 0x271
 8013b42:	4638      	mov	r0, r7
 8013b44:	f7ff ff12 	bl	801396c <__i2b>
 8013b48:	2300      	movs	r3, #0
 8013b4a:	f8c8 0008 	str.w	r0, [r8, #8]
 8013b4e:	4604      	mov	r4, r0
 8013b50:	6003      	str	r3, [r0, #0]
 8013b52:	f04f 0900 	mov.w	r9, #0
 8013b56:	07eb      	lsls	r3, r5, #31
 8013b58:	d50a      	bpl.n	8013b70 <__pow5mult+0x84>
 8013b5a:	4631      	mov	r1, r6
 8013b5c:	4622      	mov	r2, r4
 8013b5e:	4638      	mov	r0, r7
 8013b60:	f7ff ff1a 	bl	8013998 <__multiply>
 8013b64:	4631      	mov	r1, r6
 8013b66:	4680      	mov	r8, r0
 8013b68:	4638      	mov	r0, r7
 8013b6a:	f7ff fe4b 	bl	8013804 <_Bfree>
 8013b6e:	4646      	mov	r6, r8
 8013b70:	106d      	asrs	r5, r5, #1
 8013b72:	d00b      	beq.n	8013b8c <__pow5mult+0xa0>
 8013b74:	6820      	ldr	r0, [r4, #0]
 8013b76:	b938      	cbnz	r0, 8013b88 <__pow5mult+0x9c>
 8013b78:	4622      	mov	r2, r4
 8013b7a:	4621      	mov	r1, r4
 8013b7c:	4638      	mov	r0, r7
 8013b7e:	f7ff ff0b 	bl	8013998 <__multiply>
 8013b82:	6020      	str	r0, [r4, #0]
 8013b84:	f8c0 9000 	str.w	r9, [r0]
 8013b88:	4604      	mov	r4, r0
 8013b8a:	e7e4      	b.n	8013b56 <__pow5mult+0x6a>
 8013b8c:	4630      	mov	r0, r6
 8013b8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b92:	bf00      	nop
 8013b94:	0801557c 	.word	0x0801557c
 8013b98:	080154a3 	.word	0x080154a3
 8013b9c:	08015523 	.word	0x08015523

08013ba0 <__lshift>:
 8013ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ba4:	460c      	mov	r4, r1
 8013ba6:	6849      	ldr	r1, [r1, #4]
 8013ba8:	6923      	ldr	r3, [r4, #16]
 8013baa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013bae:	68a3      	ldr	r3, [r4, #8]
 8013bb0:	4607      	mov	r7, r0
 8013bb2:	4691      	mov	r9, r2
 8013bb4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013bb8:	f108 0601 	add.w	r6, r8, #1
 8013bbc:	42b3      	cmp	r3, r6
 8013bbe:	db0b      	blt.n	8013bd8 <__lshift+0x38>
 8013bc0:	4638      	mov	r0, r7
 8013bc2:	f7ff fddf 	bl	8013784 <_Balloc>
 8013bc6:	4605      	mov	r5, r0
 8013bc8:	b948      	cbnz	r0, 8013bde <__lshift+0x3e>
 8013bca:	4602      	mov	r2, r0
 8013bcc:	4b28      	ldr	r3, [pc, #160]	@ (8013c70 <__lshift+0xd0>)
 8013bce:	4829      	ldr	r0, [pc, #164]	@ (8013c74 <__lshift+0xd4>)
 8013bd0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013bd4:	f000 fb94 	bl	8014300 <__assert_func>
 8013bd8:	3101      	adds	r1, #1
 8013bda:	005b      	lsls	r3, r3, #1
 8013bdc:	e7ee      	b.n	8013bbc <__lshift+0x1c>
 8013bde:	2300      	movs	r3, #0
 8013be0:	f100 0114 	add.w	r1, r0, #20
 8013be4:	f100 0210 	add.w	r2, r0, #16
 8013be8:	4618      	mov	r0, r3
 8013bea:	4553      	cmp	r3, sl
 8013bec:	db33      	blt.n	8013c56 <__lshift+0xb6>
 8013bee:	6920      	ldr	r0, [r4, #16]
 8013bf0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013bf4:	f104 0314 	add.w	r3, r4, #20
 8013bf8:	f019 091f 	ands.w	r9, r9, #31
 8013bfc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013c00:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013c04:	d02b      	beq.n	8013c5e <__lshift+0xbe>
 8013c06:	f1c9 0e20 	rsb	lr, r9, #32
 8013c0a:	468a      	mov	sl, r1
 8013c0c:	2200      	movs	r2, #0
 8013c0e:	6818      	ldr	r0, [r3, #0]
 8013c10:	fa00 f009 	lsl.w	r0, r0, r9
 8013c14:	4310      	orrs	r0, r2
 8013c16:	f84a 0b04 	str.w	r0, [sl], #4
 8013c1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8013c1e:	459c      	cmp	ip, r3
 8013c20:	fa22 f20e 	lsr.w	r2, r2, lr
 8013c24:	d8f3      	bhi.n	8013c0e <__lshift+0x6e>
 8013c26:	ebac 0304 	sub.w	r3, ip, r4
 8013c2a:	3b15      	subs	r3, #21
 8013c2c:	f023 0303 	bic.w	r3, r3, #3
 8013c30:	3304      	adds	r3, #4
 8013c32:	f104 0015 	add.w	r0, r4, #21
 8013c36:	4584      	cmp	ip, r0
 8013c38:	bf38      	it	cc
 8013c3a:	2304      	movcc	r3, #4
 8013c3c:	50ca      	str	r2, [r1, r3]
 8013c3e:	b10a      	cbz	r2, 8013c44 <__lshift+0xa4>
 8013c40:	f108 0602 	add.w	r6, r8, #2
 8013c44:	3e01      	subs	r6, #1
 8013c46:	4638      	mov	r0, r7
 8013c48:	612e      	str	r6, [r5, #16]
 8013c4a:	4621      	mov	r1, r4
 8013c4c:	f7ff fdda 	bl	8013804 <_Bfree>
 8013c50:	4628      	mov	r0, r5
 8013c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c56:	f842 0f04 	str.w	r0, [r2, #4]!
 8013c5a:	3301      	adds	r3, #1
 8013c5c:	e7c5      	b.n	8013bea <__lshift+0x4a>
 8013c5e:	3904      	subs	r1, #4
 8013c60:	f853 2b04 	ldr.w	r2, [r3], #4
 8013c64:	f841 2f04 	str.w	r2, [r1, #4]!
 8013c68:	459c      	cmp	ip, r3
 8013c6a:	d8f9      	bhi.n	8013c60 <__lshift+0xc0>
 8013c6c:	e7ea      	b.n	8013c44 <__lshift+0xa4>
 8013c6e:	bf00      	nop
 8013c70:	08015512 	.word	0x08015512
 8013c74:	08015523 	.word	0x08015523

08013c78 <__mcmp>:
 8013c78:	690a      	ldr	r2, [r1, #16]
 8013c7a:	4603      	mov	r3, r0
 8013c7c:	6900      	ldr	r0, [r0, #16]
 8013c7e:	1a80      	subs	r0, r0, r2
 8013c80:	b530      	push	{r4, r5, lr}
 8013c82:	d10e      	bne.n	8013ca2 <__mcmp+0x2a>
 8013c84:	3314      	adds	r3, #20
 8013c86:	3114      	adds	r1, #20
 8013c88:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013c8c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013c90:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013c94:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013c98:	4295      	cmp	r5, r2
 8013c9a:	d003      	beq.n	8013ca4 <__mcmp+0x2c>
 8013c9c:	d205      	bcs.n	8013caa <__mcmp+0x32>
 8013c9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013ca2:	bd30      	pop	{r4, r5, pc}
 8013ca4:	42a3      	cmp	r3, r4
 8013ca6:	d3f3      	bcc.n	8013c90 <__mcmp+0x18>
 8013ca8:	e7fb      	b.n	8013ca2 <__mcmp+0x2a>
 8013caa:	2001      	movs	r0, #1
 8013cac:	e7f9      	b.n	8013ca2 <__mcmp+0x2a>
	...

08013cb0 <__mdiff>:
 8013cb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cb4:	4689      	mov	r9, r1
 8013cb6:	4606      	mov	r6, r0
 8013cb8:	4611      	mov	r1, r2
 8013cba:	4648      	mov	r0, r9
 8013cbc:	4614      	mov	r4, r2
 8013cbe:	f7ff ffdb 	bl	8013c78 <__mcmp>
 8013cc2:	1e05      	subs	r5, r0, #0
 8013cc4:	d112      	bne.n	8013cec <__mdiff+0x3c>
 8013cc6:	4629      	mov	r1, r5
 8013cc8:	4630      	mov	r0, r6
 8013cca:	f7ff fd5b 	bl	8013784 <_Balloc>
 8013cce:	4602      	mov	r2, r0
 8013cd0:	b928      	cbnz	r0, 8013cde <__mdiff+0x2e>
 8013cd2:	4b3f      	ldr	r3, [pc, #252]	@ (8013dd0 <__mdiff+0x120>)
 8013cd4:	f240 2137 	movw	r1, #567	@ 0x237
 8013cd8:	483e      	ldr	r0, [pc, #248]	@ (8013dd4 <__mdiff+0x124>)
 8013cda:	f000 fb11 	bl	8014300 <__assert_func>
 8013cde:	2301      	movs	r3, #1
 8013ce0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013ce4:	4610      	mov	r0, r2
 8013ce6:	b003      	add	sp, #12
 8013ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cec:	bfbc      	itt	lt
 8013cee:	464b      	movlt	r3, r9
 8013cf0:	46a1      	movlt	r9, r4
 8013cf2:	4630      	mov	r0, r6
 8013cf4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013cf8:	bfba      	itte	lt
 8013cfa:	461c      	movlt	r4, r3
 8013cfc:	2501      	movlt	r5, #1
 8013cfe:	2500      	movge	r5, #0
 8013d00:	f7ff fd40 	bl	8013784 <_Balloc>
 8013d04:	4602      	mov	r2, r0
 8013d06:	b918      	cbnz	r0, 8013d10 <__mdiff+0x60>
 8013d08:	4b31      	ldr	r3, [pc, #196]	@ (8013dd0 <__mdiff+0x120>)
 8013d0a:	f240 2145 	movw	r1, #581	@ 0x245
 8013d0e:	e7e3      	b.n	8013cd8 <__mdiff+0x28>
 8013d10:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013d14:	6926      	ldr	r6, [r4, #16]
 8013d16:	60c5      	str	r5, [r0, #12]
 8013d18:	f109 0310 	add.w	r3, r9, #16
 8013d1c:	f109 0514 	add.w	r5, r9, #20
 8013d20:	f104 0e14 	add.w	lr, r4, #20
 8013d24:	f100 0b14 	add.w	fp, r0, #20
 8013d28:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013d2c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013d30:	9301      	str	r3, [sp, #4]
 8013d32:	46d9      	mov	r9, fp
 8013d34:	f04f 0c00 	mov.w	ip, #0
 8013d38:	9b01      	ldr	r3, [sp, #4]
 8013d3a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013d3e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013d42:	9301      	str	r3, [sp, #4]
 8013d44:	fa1f f38a 	uxth.w	r3, sl
 8013d48:	4619      	mov	r1, r3
 8013d4a:	b283      	uxth	r3, r0
 8013d4c:	1acb      	subs	r3, r1, r3
 8013d4e:	0c00      	lsrs	r0, r0, #16
 8013d50:	4463      	add	r3, ip
 8013d52:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8013d56:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8013d5a:	b29b      	uxth	r3, r3
 8013d5c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013d60:	4576      	cmp	r6, lr
 8013d62:	f849 3b04 	str.w	r3, [r9], #4
 8013d66:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013d6a:	d8e5      	bhi.n	8013d38 <__mdiff+0x88>
 8013d6c:	1b33      	subs	r3, r6, r4
 8013d6e:	3b15      	subs	r3, #21
 8013d70:	f023 0303 	bic.w	r3, r3, #3
 8013d74:	3415      	adds	r4, #21
 8013d76:	3304      	adds	r3, #4
 8013d78:	42a6      	cmp	r6, r4
 8013d7a:	bf38      	it	cc
 8013d7c:	2304      	movcc	r3, #4
 8013d7e:	441d      	add	r5, r3
 8013d80:	445b      	add	r3, fp
 8013d82:	461e      	mov	r6, r3
 8013d84:	462c      	mov	r4, r5
 8013d86:	4544      	cmp	r4, r8
 8013d88:	d30e      	bcc.n	8013da8 <__mdiff+0xf8>
 8013d8a:	f108 0103 	add.w	r1, r8, #3
 8013d8e:	1b49      	subs	r1, r1, r5
 8013d90:	f021 0103 	bic.w	r1, r1, #3
 8013d94:	3d03      	subs	r5, #3
 8013d96:	45a8      	cmp	r8, r5
 8013d98:	bf38      	it	cc
 8013d9a:	2100      	movcc	r1, #0
 8013d9c:	440b      	add	r3, r1
 8013d9e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013da2:	b191      	cbz	r1, 8013dca <__mdiff+0x11a>
 8013da4:	6117      	str	r7, [r2, #16]
 8013da6:	e79d      	b.n	8013ce4 <__mdiff+0x34>
 8013da8:	f854 1b04 	ldr.w	r1, [r4], #4
 8013dac:	46e6      	mov	lr, ip
 8013dae:	0c08      	lsrs	r0, r1, #16
 8013db0:	fa1c fc81 	uxtah	ip, ip, r1
 8013db4:	4471      	add	r1, lr
 8013db6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8013dba:	b289      	uxth	r1, r1
 8013dbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013dc0:	f846 1b04 	str.w	r1, [r6], #4
 8013dc4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013dc8:	e7dd      	b.n	8013d86 <__mdiff+0xd6>
 8013dca:	3f01      	subs	r7, #1
 8013dcc:	e7e7      	b.n	8013d9e <__mdiff+0xee>
 8013dce:	bf00      	nop
 8013dd0:	08015512 	.word	0x08015512
 8013dd4:	08015523 	.word	0x08015523

08013dd8 <__d2b>:
 8013dd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013ddc:	460f      	mov	r7, r1
 8013dde:	2101      	movs	r1, #1
 8013de0:	ec59 8b10 	vmov	r8, r9, d0
 8013de4:	4616      	mov	r6, r2
 8013de6:	f7ff fccd 	bl	8013784 <_Balloc>
 8013dea:	4604      	mov	r4, r0
 8013dec:	b930      	cbnz	r0, 8013dfc <__d2b+0x24>
 8013dee:	4602      	mov	r2, r0
 8013df0:	4b23      	ldr	r3, [pc, #140]	@ (8013e80 <__d2b+0xa8>)
 8013df2:	4824      	ldr	r0, [pc, #144]	@ (8013e84 <__d2b+0xac>)
 8013df4:	f240 310f 	movw	r1, #783	@ 0x30f
 8013df8:	f000 fa82 	bl	8014300 <__assert_func>
 8013dfc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013e00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013e04:	b10d      	cbz	r5, 8013e0a <__d2b+0x32>
 8013e06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013e0a:	9301      	str	r3, [sp, #4]
 8013e0c:	f1b8 0300 	subs.w	r3, r8, #0
 8013e10:	d023      	beq.n	8013e5a <__d2b+0x82>
 8013e12:	4668      	mov	r0, sp
 8013e14:	9300      	str	r3, [sp, #0]
 8013e16:	f7ff fd7c 	bl	8013912 <__lo0bits>
 8013e1a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013e1e:	b1d0      	cbz	r0, 8013e56 <__d2b+0x7e>
 8013e20:	f1c0 0320 	rsb	r3, r0, #32
 8013e24:	fa02 f303 	lsl.w	r3, r2, r3
 8013e28:	430b      	orrs	r3, r1
 8013e2a:	40c2      	lsrs	r2, r0
 8013e2c:	6163      	str	r3, [r4, #20]
 8013e2e:	9201      	str	r2, [sp, #4]
 8013e30:	9b01      	ldr	r3, [sp, #4]
 8013e32:	61a3      	str	r3, [r4, #24]
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	bf0c      	ite	eq
 8013e38:	2201      	moveq	r2, #1
 8013e3a:	2202      	movne	r2, #2
 8013e3c:	6122      	str	r2, [r4, #16]
 8013e3e:	b1a5      	cbz	r5, 8013e6a <__d2b+0x92>
 8013e40:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8013e44:	4405      	add	r5, r0
 8013e46:	603d      	str	r5, [r7, #0]
 8013e48:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8013e4c:	6030      	str	r0, [r6, #0]
 8013e4e:	4620      	mov	r0, r4
 8013e50:	b003      	add	sp, #12
 8013e52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013e56:	6161      	str	r1, [r4, #20]
 8013e58:	e7ea      	b.n	8013e30 <__d2b+0x58>
 8013e5a:	a801      	add	r0, sp, #4
 8013e5c:	f7ff fd59 	bl	8013912 <__lo0bits>
 8013e60:	9b01      	ldr	r3, [sp, #4]
 8013e62:	6163      	str	r3, [r4, #20]
 8013e64:	3020      	adds	r0, #32
 8013e66:	2201      	movs	r2, #1
 8013e68:	e7e8      	b.n	8013e3c <__d2b+0x64>
 8013e6a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013e6e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8013e72:	6038      	str	r0, [r7, #0]
 8013e74:	6918      	ldr	r0, [r3, #16]
 8013e76:	f7ff fd2d 	bl	80138d4 <__hi0bits>
 8013e7a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013e7e:	e7e5      	b.n	8013e4c <__d2b+0x74>
 8013e80:	08015512 	.word	0x08015512
 8013e84:	08015523 	.word	0x08015523

08013e88 <__ssputs_r>:
 8013e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e8c:	688e      	ldr	r6, [r1, #8]
 8013e8e:	461f      	mov	r7, r3
 8013e90:	42be      	cmp	r6, r7
 8013e92:	680b      	ldr	r3, [r1, #0]
 8013e94:	4682      	mov	sl, r0
 8013e96:	460c      	mov	r4, r1
 8013e98:	4690      	mov	r8, r2
 8013e9a:	d82d      	bhi.n	8013ef8 <__ssputs_r+0x70>
 8013e9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013ea0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013ea4:	d026      	beq.n	8013ef4 <__ssputs_r+0x6c>
 8013ea6:	6965      	ldr	r5, [r4, #20]
 8013ea8:	6909      	ldr	r1, [r1, #16]
 8013eaa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013eae:	eba3 0901 	sub.w	r9, r3, r1
 8013eb2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013eb6:	1c7b      	adds	r3, r7, #1
 8013eb8:	444b      	add	r3, r9
 8013eba:	106d      	asrs	r5, r5, #1
 8013ebc:	429d      	cmp	r5, r3
 8013ebe:	bf38      	it	cc
 8013ec0:	461d      	movcc	r5, r3
 8013ec2:	0553      	lsls	r3, r2, #21
 8013ec4:	d527      	bpl.n	8013f16 <__ssputs_r+0x8e>
 8013ec6:	4629      	mov	r1, r5
 8013ec8:	f7ff fbd0 	bl	801366c <_malloc_r>
 8013ecc:	4606      	mov	r6, r0
 8013ece:	b360      	cbz	r0, 8013f2a <__ssputs_r+0xa2>
 8013ed0:	6921      	ldr	r1, [r4, #16]
 8013ed2:	464a      	mov	r2, r9
 8013ed4:	f000 fa06 	bl	80142e4 <memcpy>
 8013ed8:	89a3      	ldrh	r3, [r4, #12]
 8013eda:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013ede:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013ee2:	81a3      	strh	r3, [r4, #12]
 8013ee4:	6126      	str	r6, [r4, #16]
 8013ee6:	6165      	str	r5, [r4, #20]
 8013ee8:	444e      	add	r6, r9
 8013eea:	eba5 0509 	sub.w	r5, r5, r9
 8013eee:	6026      	str	r6, [r4, #0]
 8013ef0:	60a5      	str	r5, [r4, #8]
 8013ef2:	463e      	mov	r6, r7
 8013ef4:	42be      	cmp	r6, r7
 8013ef6:	d900      	bls.n	8013efa <__ssputs_r+0x72>
 8013ef8:	463e      	mov	r6, r7
 8013efa:	6820      	ldr	r0, [r4, #0]
 8013efc:	4632      	mov	r2, r6
 8013efe:	4641      	mov	r1, r8
 8013f00:	f000 f9c6 	bl	8014290 <memmove>
 8013f04:	68a3      	ldr	r3, [r4, #8]
 8013f06:	1b9b      	subs	r3, r3, r6
 8013f08:	60a3      	str	r3, [r4, #8]
 8013f0a:	6823      	ldr	r3, [r4, #0]
 8013f0c:	4433      	add	r3, r6
 8013f0e:	6023      	str	r3, [r4, #0]
 8013f10:	2000      	movs	r0, #0
 8013f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f16:	462a      	mov	r2, r5
 8013f18:	f000 fa36 	bl	8014388 <_realloc_r>
 8013f1c:	4606      	mov	r6, r0
 8013f1e:	2800      	cmp	r0, #0
 8013f20:	d1e0      	bne.n	8013ee4 <__ssputs_r+0x5c>
 8013f22:	6921      	ldr	r1, [r4, #16]
 8013f24:	4650      	mov	r0, sl
 8013f26:	f7ff fb2d 	bl	8013584 <_free_r>
 8013f2a:	230c      	movs	r3, #12
 8013f2c:	f8ca 3000 	str.w	r3, [sl]
 8013f30:	89a3      	ldrh	r3, [r4, #12]
 8013f32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013f36:	81a3      	strh	r3, [r4, #12]
 8013f38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013f3c:	e7e9      	b.n	8013f12 <__ssputs_r+0x8a>
	...

08013f40 <_svfiprintf_r>:
 8013f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f44:	4698      	mov	r8, r3
 8013f46:	898b      	ldrh	r3, [r1, #12]
 8013f48:	061b      	lsls	r3, r3, #24
 8013f4a:	b09d      	sub	sp, #116	@ 0x74
 8013f4c:	4607      	mov	r7, r0
 8013f4e:	460d      	mov	r5, r1
 8013f50:	4614      	mov	r4, r2
 8013f52:	d510      	bpl.n	8013f76 <_svfiprintf_r+0x36>
 8013f54:	690b      	ldr	r3, [r1, #16]
 8013f56:	b973      	cbnz	r3, 8013f76 <_svfiprintf_r+0x36>
 8013f58:	2140      	movs	r1, #64	@ 0x40
 8013f5a:	f7ff fb87 	bl	801366c <_malloc_r>
 8013f5e:	6028      	str	r0, [r5, #0]
 8013f60:	6128      	str	r0, [r5, #16]
 8013f62:	b930      	cbnz	r0, 8013f72 <_svfiprintf_r+0x32>
 8013f64:	230c      	movs	r3, #12
 8013f66:	603b      	str	r3, [r7, #0]
 8013f68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013f6c:	b01d      	add	sp, #116	@ 0x74
 8013f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f72:	2340      	movs	r3, #64	@ 0x40
 8013f74:	616b      	str	r3, [r5, #20]
 8013f76:	2300      	movs	r3, #0
 8013f78:	9309      	str	r3, [sp, #36]	@ 0x24
 8013f7a:	2320      	movs	r3, #32
 8013f7c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013f80:	f8cd 800c 	str.w	r8, [sp, #12]
 8013f84:	2330      	movs	r3, #48	@ 0x30
 8013f86:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014124 <_svfiprintf_r+0x1e4>
 8013f8a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013f8e:	f04f 0901 	mov.w	r9, #1
 8013f92:	4623      	mov	r3, r4
 8013f94:	469a      	mov	sl, r3
 8013f96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013f9a:	b10a      	cbz	r2, 8013fa0 <_svfiprintf_r+0x60>
 8013f9c:	2a25      	cmp	r2, #37	@ 0x25
 8013f9e:	d1f9      	bne.n	8013f94 <_svfiprintf_r+0x54>
 8013fa0:	ebba 0b04 	subs.w	fp, sl, r4
 8013fa4:	d00b      	beq.n	8013fbe <_svfiprintf_r+0x7e>
 8013fa6:	465b      	mov	r3, fp
 8013fa8:	4622      	mov	r2, r4
 8013faa:	4629      	mov	r1, r5
 8013fac:	4638      	mov	r0, r7
 8013fae:	f7ff ff6b 	bl	8013e88 <__ssputs_r>
 8013fb2:	3001      	adds	r0, #1
 8013fb4:	f000 80a7 	beq.w	8014106 <_svfiprintf_r+0x1c6>
 8013fb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013fba:	445a      	add	r2, fp
 8013fbc:	9209      	str	r2, [sp, #36]	@ 0x24
 8013fbe:	f89a 3000 	ldrb.w	r3, [sl]
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	f000 809f 	beq.w	8014106 <_svfiprintf_r+0x1c6>
 8013fc8:	2300      	movs	r3, #0
 8013fca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013fce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013fd2:	f10a 0a01 	add.w	sl, sl, #1
 8013fd6:	9304      	str	r3, [sp, #16]
 8013fd8:	9307      	str	r3, [sp, #28]
 8013fda:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013fde:	931a      	str	r3, [sp, #104]	@ 0x68
 8013fe0:	4654      	mov	r4, sl
 8013fe2:	2205      	movs	r2, #5
 8013fe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013fe8:	484e      	ldr	r0, [pc, #312]	@ (8014124 <_svfiprintf_r+0x1e4>)
 8013fea:	f7ec f9a1 	bl	8000330 <memchr>
 8013fee:	9a04      	ldr	r2, [sp, #16]
 8013ff0:	b9d8      	cbnz	r0, 801402a <_svfiprintf_r+0xea>
 8013ff2:	06d0      	lsls	r0, r2, #27
 8013ff4:	bf44      	itt	mi
 8013ff6:	2320      	movmi	r3, #32
 8013ff8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013ffc:	0711      	lsls	r1, r2, #28
 8013ffe:	bf44      	itt	mi
 8014000:	232b      	movmi	r3, #43	@ 0x2b
 8014002:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014006:	f89a 3000 	ldrb.w	r3, [sl]
 801400a:	2b2a      	cmp	r3, #42	@ 0x2a
 801400c:	d015      	beq.n	801403a <_svfiprintf_r+0xfa>
 801400e:	9a07      	ldr	r2, [sp, #28]
 8014010:	4654      	mov	r4, sl
 8014012:	2000      	movs	r0, #0
 8014014:	f04f 0c0a 	mov.w	ip, #10
 8014018:	4621      	mov	r1, r4
 801401a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801401e:	3b30      	subs	r3, #48	@ 0x30
 8014020:	2b09      	cmp	r3, #9
 8014022:	d94b      	bls.n	80140bc <_svfiprintf_r+0x17c>
 8014024:	b1b0      	cbz	r0, 8014054 <_svfiprintf_r+0x114>
 8014026:	9207      	str	r2, [sp, #28]
 8014028:	e014      	b.n	8014054 <_svfiprintf_r+0x114>
 801402a:	eba0 0308 	sub.w	r3, r0, r8
 801402e:	fa09 f303 	lsl.w	r3, r9, r3
 8014032:	4313      	orrs	r3, r2
 8014034:	9304      	str	r3, [sp, #16]
 8014036:	46a2      	mov	sl, r4
 8014038:	e7d2      	b.n	8013fe0 <_svfiprintf_r+0xa0>
 801403a:	9b03      	ldr	r3, [sp, #12]
 801403c:	1d19      	adds	r1, r3, #4
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	9103      	str	r1, [sp, #12]
 8014042:	2b00      	cmp	r3, #0
 8014044:	bfbb      	ittet	lt
 8014046:	425b      	neglt	r3, r3
 8014048:	f042 0202 	orrlt.w	r2, r2, #2
 801404c:	9307      	strge	r3, [sp, #28]
 801404e:	9307      	strlt	r3, [sp, #28]
 8014050:	bfb8      	it	lt
 8014052:	9204      	strlt	r2, [sp, #16]
 8014054:	7823      	ldrb	r3, [r4, #0]
 8014056:	2b2e      	cmp	r3, #46	@ 0x2e
 8014058:	d10a      	bne.n	8014070 <_svfiprintf_r+0x130>
 801405a:	7863      	ldrb	r3, [r4, #1]
 801405c:	2b2a      	cmp	r3, #42	@ 0x2a
 801405e:	d132      	bne.n	80140c6 <_svfiprintf_r+0x186>
 8014060:	9b03      	ldr	r3, [sp, #12]
 8014062:	1d1a      	adds	r2, r3, #4
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	9203      	str	r2, [sp, #12]
 8014068:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801406c:	3402      	adds	r4, #2
 801406e:	9305      	str	r3, [sp, #20]
 8014070:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014134 <_svfiprintf_r+0x1f4>
 8014074:	7821      	ldrb	r1, [r4, #0]
 8014076:	2203      	movs	r2, #3
 8014078:	4650      	mov	r0, sl
 801407a:	f7ec f959 	bl	8000330 <memchr>
 801407e:	b138      	cbz	r0, 8014090 <_svfiprintf_r+0x150>
 8014080:	9b04      	ldr	r3, [sp, #16]
 8014082:	eba0 000a 	sub.w	r0, r0, sl
 8014086:	2240      	movs	r2, #64	@ 0x40
 8014088:	4082      	lsls	r2, r0
 801408a:	4313      	orrs	r3, r2
 801408c:	3401      	adds	r4, #1
 801408e:	9304      	str	r3, [sp, #16]
 8014090:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014094:	4824      	ldr	r0, [pc, #144]	@ (8014128 <_svfiprintf_r+0x1e8>)
 8014096:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801409a:	2206      	movs	r2, #6
 801409c:	f7ec f948 	bl	8000330 <memchr>
 80140a0:	2800      	cmp	r0, #0
 80140a2:	d036      	beq.n	8014112 <_svfiprintf_r+0x1d2>
 80140a4:	4b21      	ldr	r3, [pc, #132]	@ (801412c <_svfiprintf_r+0x1ec>)
 80140a6:	bb1b      	cbnz	r3, 80140f0 <_svfiprintf_r+0x1b0>
 80140a8:	9b03      	ldr	r3, [sp, #12]
 80140aa:	3307      	adds	r3, #7
 80140ac:	f023 0307 	bic.w	r3, r3, #7
 80140b0:	3308      	adds	r3, #8
 80140b2:	9303      	str	r3, [sp, #12]
 80140b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80140b6:	4433      	add	r3, r6
 80140b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80140ba:	e76a      	b.n	8013f92 <_svfiprintf_r+0x52>
 80140bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80140c0:	460c      	mov	r4, r1
 80140c2:	2001      	movs	r0, #1
 80140c4:	e7a8      	b.n	8014018 <_svfiprintf_r+0xd8>
 80140c6:	2300      	movs	r3, #0
 80140c8:	3401      	adds	r4, #1
 80140ca:	9305      	str	r3, [sp, #20]
 80140cc:	4619      	mov	r1, r3
 80140ce:	f04f 0c0a 	mov.w	ip, #10
 80140d2:	4620      	mov	r0, r4
 80140d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80140d8:	3a30      	subs	r2, #48	@ 0x30
 80140da:	2a09      	cmp	r2, #9
 80140dc:	d903      	bls.n	80140e6 <_svfiprintf_r+0x1a6>
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d0c6      	beq.n	8014070 <_svfiprintf_r+0x130>
 80140e2:	9105      	str	r1, [sp, #20]
 80140e4:	e7c4      	b.n	8014070 <_svfiprintf_r+0x130>
 80140e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80140ea:	4604      	mov	r4, r0
 80140ec:	2301      	movs	r3, #1
 80140ee:	e7f0      	b.n	80140d2 <_svfiprintf_r+0x192>
 80140f0:	ab03      	add	r3, sp, #12
 80140f2:	9300      	str	r3, [sp, #0]
 80140f4:	462a      	mov	r2, r5
 80140f6:	4b0e      	ldr	r3, [pc, #56]	@ (8014130 <_svfiprintf_r+0x1f0>)
 80140f8:	a904      	add	r1, sp, #16
 80140fa:	4638      	mov	r0, r7
 80140fc:	f7fd ff00 	bl	8011f00 <_printf_float>
 8014100:	1c42      	adds	r2, r0, #1
 8014102:	4606      	mov	r6, r0
 8014104:	d1d6      	bne.n	80140b4 <_svfiprintf_r+0x174>
 8014106:	89ab      	ldrh	r3, [r5, #12]
 8014108:	065b      	lsls	r3, r3, #25
 801410a:	f53f af2d 	bmi.w	8013f68 <_svfiprintf_r+0x28>
 801410e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014110:	e72c      	b.n	8013f6c <_svfiprintf_r+0x2c>
 8014112:	ab03      	add	r3, sp, #12
 8014114:	9300      	str	r3, [sp, #0]
 8014116:	462a      	mov	r2, r5
 8014118:	4b05      	ldr	r3, [pc, #20]	@ (8014130 <_svfiprintf_r+0x1f0>)
 801411a:	a904      	add	r1, sp, #16
 801411c:	4638      	mov	r0, r7
 801411e:	f7fe f977 	bl	8012410 <_printf_i>
 8014122:	e7ed      	b.n	8014100 <_svfiprintf_r+0x1c0>
 8014124:	08015678 	.word	0x08015678
 8014128:	08015682 	.word	0x08015682
 801412c:	08011f01 	.word	0x08011f01
 8014130:	08013e89 	.word	0x08013e89
 8014134:	0801567e 	.word	0x0801567e

08014138 <__sflush_r>:
 8014138:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801413c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014140:	0716      	lsls	r6, r2, #28
 8014142:	4605      	mov	r5, r0
 8014144:	460c      	mov	r4, r1
 8014146:	d454      	bmi.n	80141f2 <__sflush_r+0xba>
 8014148:	684b      	ldr	r3, [r1, #4]
 801414a:	2b00      	cmp	r3, #0
 801414c:	dc02      	bgt.n	8014154 <__sflush_r+0x1c>
 801414e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014150:	2b00      	cmp	r3, #0
 8014152:	dd48      	ble.n	80141e6 <__sflush_r+0xae>
 8014154:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014156:	2e00      	cmp	r6, #0
 8014158:	d045      	beq.n	80141e6 <__sflush_r+0xae>
 801415a:	2300      	movs	r3, #0
 801415c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014160:	682f      	ldr	r7, [r5, #0]
 8014162:	6a21      	ldr	r1, [r4, #32]
 8014164:	602b      	str	r3, [r5, #0]
 8014166:	d030      	beq.n	80141ca <__sflush_r+0x92>
 8014168:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801416a:	89a3      	ldrh	r3, [r4, #12]
 801416c:	0759      	lsls	r1, r3, #29
 801416e:	d505      	bpl.n	801417c <__sflush_r+0x44>
 8014170:	6863      	ldr	r3, [r4, #4]
 8014172:	1ad2      	subs	r2, r2, r3
 8014174:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014176:	b10b      	cbz	r3, 801417c <__sflush_r+0x44>
 8014178:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801417a:	1ad2      	subs	r2, r2, r3
 801417c:	2300      	movs	r3, #0
 801417e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014180:	6a21      	ldr	r1, [r4, #32]
 8014182:	4628      	mov	r0, r5
 8014184:	47b0      	blx	r6
 8014186:	1c43      	adds	r3, r0, #1
 8014188:	89a3      	ldrh	r3, [r4, #12]
 801418a:	d106      	bne.n	801419a <__sflush_r+0x62>
 801418c:	6829      	ldr	r1, [r5, #0]
 801418e:	291d      	cmp	r1, #29
 8014190:	d82b      	bhi.n	80141ea <__sflush_r+0xb2>
 8014192:	4a2a      	ldr	r2, [pc, #168]	@ (801423c <__sflush_r+0x104>)
 8014194:	410a      	asrs	r2, r1
 8014196:	07d6      	lsls	r6, r2, #31
 8014198:	d427      	bmi.n	80141ea <__sflush_r+0xb2>
 801419a:	2200      	movs	r2, #0
 801419c:	6062      	str	r2, [r4, #4]
 801419e:	04d9      	lsls	r1, r3, #19
 80141a0:	6922      	ldr	r2, [r4, #16]
 80141a2:	6022      	str	r2, [r4, #0]
 80141a4:	d504      	bpl.n	80141b0 <__sflush_r+0x78>
 80141a6:	1c42      	adds	r2, r0, #1
 80141a8:	d101      	bne.n	80141ae <__sflush_r+0x76>
 80141aa:	682b      	ldr	r3, [r5, #0]
 80141ac:	b903      	cbnz	r3, 80141b0 <__sflush_r+0x78>
 80141ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80141b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80141b2:	602f      	str	r7, [r5, #0]
 80141b4:	b1b9      	cbz	r1, 80141e6 <__sflush_r+0xae>
 80141b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80141ba:	4299      	cmp	r1, r3
 80141bc:	d002      	beq.n	80141c4 <__sflush_r+0x8c>
 80141be:	4628      	mov	r0, r5
 80141c0:	f7ff f9e0 	bl	8013584 <_free_r>
 80141c4:	2300      	movs	r3, #0
 80141c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80141c8:	e00d      	b.n	80141e6 <__sflush_r+0xae>
 80141ca:	2301      	movs	r3, #1
 80141cc:	4628      	mov	r0, r5
 80141ce:	47b0      	blx	r6
 80141d0:	4602      	mov	r2, r0
 80141d2:	1c50      	adds	r0, r2, #1
 80141d4:	d1c9      	bne.n	801416a <__sflush_r+0x32>
 80141d6:	682b      	ldr	r3, [r5, #0]
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d0c6      	beq.n	801416a <__sflush_r+0x32>
 80141dc:	2b1d      	cmp	r3, #29
 80141de:	d001      	beq.n	80141e4 <__sflush_r+0xac>
 80141e0:	2b16      	cmp	r3, #22
 80141e2:	d11e      	bne.n	8014222 <__sflush_r+0xea>
 80141e4:	602f      	str	r7, [r5, #0]
 80141e6:	2000      	movs	r0, #0
 80141e8:	e022      	b.n	8014230 <__sflush_r+0xf8>
 80141ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80141ee:	b21b      	sxth	r3, r3
 80141f0:	e01b      	b.n	801422a <__sflush_r+0xf2>
 80141f2:	690f      	ldr	r7, [r1, #16]
 80141f4:	2f00      	cmp	r7, #0
 80141f6:	d0f6      	beq.n	80141e6 <__sflush_r+0xae>
 80141f8:	0793      	lsls	r3, r2, #30
 80141fa:	680e      	ldr	r6, [r1, #0]
 80141fc:	bf08      	it	eq
 80141fe:	694b      	ldreq	r3, [r1, #20]
 8014200:	600f      	str	r7, [r1, #0]
 8014202:	bf18      	it	ne
 8014204:	2300      	movne	r3, #0
 8014206:	eba6 0807 	sub.w	r8, r6, r7
 801420a:	608b      	str	r3, [r1, #8]
 801420c:	f1b8 0f00 	cmp.w	r8, #0
 8014210:	dde9      	ble.n	80141e6 <__sflush_r+0xae>
 8014212:	6a21      	ldr	r1, [r4, #32]
 8014214:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014216:	4643      	mov	r3, r8
 8014218:	463a      	mov	r2, r7
 801421a:	4628      	mov	r0, r5
 801421c:	47b0      	blx	r6
 801421e:	2800      	cmp	r0, #0
 8014220:	dc08      	bgt.n	8014234 <__sflush_r+0xfc>
 8014222:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014226:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801422a:	81a3      	strh	r3, [r4, #12]
 801422c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014234:	4407      	add	r7, r0
 8014236:	eba8 0800 	sub.w	r8, r8, r0
 801423a:	e7e7      	b.n	801420c <__sflush_r+0xd4>
 801423c:	dfbffffe 	.word	0xdfbffffe

08014240 <_fflush_r>:
 8014240:	b538      	push	{r3, r4, r5, lr}
 8014242:	690b      	ldr	r3, [r1, #16]
 8014244:	4605      	mov	r5, r0
 8014246:	460c      	mov	r4, r1
 8014248:	b913      	cbnz	r3, 8014250 <_fflush_r+0x10>
 801424a:	2500      	movs	r5, #0
 801424c:	4628      	mov	r0, r5
 801424e:	bd38      	pop	{r3, r4, r5, pc}
 8014250:	b118      	cbz	r0, 801425a <_fflush_r+0x1a>
 8014252:	6a03      	ldr	r3, [r0, #32]
 8014254:	b90b      	cbnz	r3, 801425a <_fflush_r+0x1a>
 8014256:	f7fe fa87 	bl	8012768 <__sinit>
 801425a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801425e:	2b00      	cmp	r3, #0
 8014260:	d0f3      	beq.n	801424a <_fflush_r+0xa>
 8014262:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014264:	07d0      	lsls	r0, r2, #31
 8014266:	d404      	bmi.n	8014272 <_fflush_r+0x32>
 8014268:	0599      	lsls	r1, r3, #22
 801426a:	d402      	bmi.n	8014272 <_fflush_r+0x32>
 801426c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801426e:	f7fe fba0 	bl	80129b2 <__retarget_lock_acquire_recursive>
 8014272:	4628      	mov	r0, r5
 8014274:	4621      	mov	r1, r4
 8014276:	f7ff ff5f 	bl	8014138 <__sflush_r>
 801427a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801427c:	07da      	lsls	r2, r3, #31
 801427e:	4605      	mov	r5, r0
 8014280:	d4e4      	bmi.n	801424c <_fflush_r+0xc>
 8014282:	89a3      	ldrh	r3, [r4, #12]
 8014284:	059b      	lsls	r3, r3, #22
 8014286:	d4e1      	bmi.n	801424c <_fflush_r+0xc>
 8014288:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801428a:	f7fe fb93 	bl	80129b4 <__retarget_lock_release_recursive>
 801428e:	e7dd      	b.n	801424c <_fflush_r+0xc>

08014290 <memmove>:
 8014290:	4288      	cmp	r0, r1
 8014292:	b510      	push	{r4, lr}
 8014294:	eb01 0402 	add.w	r4, r1, r2
 8014298:	d902      	bls.n	80142a0 <memmove+0x10>
 801429a:	4284      	cmp	r4, r0
 801429c:	4623      	mov	r3, r4
 801429e:	d807      	bhi.n	80142b0 <memmove+0x20>
 80142a0:	1e43      	subs	r3, r0, #1
 80142a2:	42a1      	cmp	r1, r4
 80142a4:	d008      	beq.n	80142b8 <memmove+0x28>
 80142a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80142aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80142ae:	e7f8      	b.n	80142a2 <memmove+0x12>
 80142b0:	4402      	add	r2, r0
 80142b2:	4601      	mov	r1, r0
 80142b4:	428a      	cmp	r2, r1
 80142b6:	d100      	bne.n	80142ba <memmove+0x2a>
 80142b8:	bd10      	pop	{r4, pc}
 80142ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80142be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80142c2:	e7f7      	b.n	80142b4 <memmove+0x24>

080142c4 <_sbrk_r>:
 80142c4:	b538      	push	{r3, r4, r5, lr}
 80142c6:	4d06      	ldr	r5, [pc, #24]	@ (80142e0 <_sbrk_r+0x1c>)
 80142c8:	2300      	movs	r3, #0
 80142ca:	4604      	mov	r4, r0
 80142cc:	4608      	mov	r0, r1
 80142ce:	602b      	str	r3, [r5, #0]
 80142d0:	f7f0 fc34 	bl	8004b3c <_sbrk>
 80142d4:	1c43      	adds	r3, r0, #1
 80142d6:	d102      	bne.n	80142de <_sbrk_r+0x1a>
 80142d8:	682b      	ldr	r3, [r5, #0]
 80142da:	b103      	cbz	r3, 80142de <_sbrk_r+0x1a>
 80142dc:	6023      	str	r3, [r4, #0]
 80142de:	bd38      	pop	{r3, r4, r5, pc}
 80142e0:	24001200 	.word	0x24001200

080142e4 <memcpy>:
 80142e4:	440a      	add	r2, r1
 80142e6:	4291      	cmp	r1, r2
 80142e8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80142ec:	d100      	bne.n	80142f0 <memcpy+0xc>
 80142ee:	4770      	bx	lr
 80142f0:	b510      	push	{r4, lr}
 80142f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80142f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80142fa:	4291      	cmp	r1, r2
 80142fc:	d1f9      	bne.n	80142f2 <memcpy+0xe>
 80142fe:	bd10      	pop	{r4, pc}

08014300 <__assert_func>:
 8014300:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014302:	4614      	mov	r4, r2
 8014304:	461a      	mov	r2, r3
 8014306:	4b09      	ldr	r3, [pc, #36]	@ (801432c <__assert_func+0x2c>)
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	4605      	mov	r5, r0
 801430c:	68d8      	ldr	r0, [r3, #12]
 801430e:	b954      	cbnz	r4, 8014326 <__assert_func+0x26>
 8014310:	4b07      	ldr	r3, [pc, #28]	@ (8014330 <__assert_func+0x30>)
 8014312:	461c      	mov	r4, r3
 8014314:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014318:	9100      	str	r1, [sp, #0]
 801431a:	462b      	mov	r3, r5
 801431c:	4905      	ldr	r1, [pc, #20]	@ (8014334 <__assert_func+0x34>)
 801431e:	f000 f86f 	bl	8014400 <fiprintf>
 8014322:	f000 f87f 	bl	8014424 <abort>
 8014326:	4b04      	ldr	r3, [pc, #16]	@ (8014338 <__assert_func+0x38>)
 8014328:	e7f4      	b.n	8014314 <__assert_func+0x14>
 801432a:	bf00      	nop
 801432c:	24000054 	.word	0x24000054
 8014330:	080156ce 	.word	0x080156ce
 8014334:	080156a0 	.word	0x080156a0
 8014338:	08015693 	.word	0x08015693

0801433c <_calloc_r>:
 801433c:	b570      	push	{r4, r5, r6, lr}
 801433e:	fba1 5402 	umull	r5, r4, r1, r2
 8014342:	b93c      	cbnz	r4, 8014354 <_calloc_r+0x18>
 8014344:	4629      	mov	r1, r5
 8014346:	f7ff f991 	bl	801366c <_malloc_r>
 801434a:	4606      	mov	r6, r0
 801434c:	b928      	cbnz	r0, 801435a <_calloc_r+0x1e>
 801434e:	2600      	movs	r6, #0
 8014350:	4630      	mov	r0, r6
 8014352:	bd70      	pop	{r4, r5, r6, pc}
 8014354:	220c      	movs	r2, #12
 8014356:	6002      	str	r2, [r0, #0]
 8014358:	e7f9      	b.n	801434e <_calloc_r+0x12>
 801435a:	462a      	mov	r2, r5
 801435c:	4621      	mov	r1, r4
 801435e:	f7fe fa9c 	bl	801289a <memset>
 8014362:	e7f5      	b.n	8014350 <_calloc_r+0x14>

08014364 <__ascii_mbtowc>:
 8014364:	b082      	sub	sp, #8
 8014366:	b901      	cbnz	r1, 801436a <__ascii_mbtowc+0x6>
 8014368:	a901      	add	r1, sp, #4
 801436a:	b142      	cbz	r2, 801437e <__ascii_mbtowc+0x1a>
 801436c:	b14b      	cbz	r3, 8014382 <__ascii_mbtowc+0x1e>
 801436e:	7813      	ldrb	r3, [r2, #0]
 8014370:	600b      	str	r3, [r1, #0]
 8014372:	7812      	ldrb	r2, [r2, #0]
 8014374:	1e10      	subs	r0, r2, #0
 8014376:	bf18      	it	ne
 8014378:	2001      	movne	r0, #1
 801437a:	b002      	add	sp, #8
 801437c:	4770      	bx	lr
 801437e:	4610      	mov	r0, r2
 8014380:	e7fb      	b.n	801437a <__ascii_mbtowc+0x16>
 8014382:	f06f 0001 	mvn.w	r0, #1
 8014386:	e7f8      	b.n	801437a <__ascii_mbtowc+0x16>

08014388 <_realloc_r>:
 8014388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801438c:	4680      	mov	r8, r0
 801438e:	4615      	mov	r5, r2
 8014390:	460c      	mov	r4, r1
 8014392:	b921      	cbnz	r1, 801439e <_realloc_r+0x16>
 8014394:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014398:	4611      	mov	r1, r2
 801439a:	f7ff b967 	b.w	801366c <_malloc_r>
 801439e:	b92a      	cbnz	r2, 80143ac <_realloc_r+0x24>
 80143a0:	f7ff f8f0 	bl	8013584 <_free_r>
 80143a4:	2400      	movs	r4, #0
 80143a6:	4620      	mov	r0, r4
 80143a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143ac:	f000 f841 	bl	8014432 <_malloc_usable_size_r>
 80143b0:	4285      	cmp	r5, r0
 80143b2:	4606      	mov	r6, r0
 80143b4:	d802      	bhi.n	80143bc <_realloc_r+0x34>
 80143b6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80143ba:	d8f4      	bhi.n	80143a6 <_realloc_r+0x1e>
 80143bc:	4629      	mov	r1, r5
 80143be:	4640      	mov	r0, r8
 80143c0:	f7ff f954 	bl	801366c <_malloc_r>
 80143c4:	4607      	mov	r7, r0
 80143c6:	2800      	cmp	r0, #0
 80143c8:	d0ec      	beq.n	80143a4 <_realloc_r+0x1c>
 80143ca:	42b5      	cmp	r5, r6
 80143cc:	462a      	mov	r2, r5
 80143ce:	4621      	mov	r1, r4
 80143d0:	bf28      	it	cs
 80143d2:	4632      	movcs	r2, r6
 80143d4:	f7ff ff86 	bl	80142e4 <memcpy>
 80143d8:	4621      	mov	r1, r4
 80143da:	4640      	mov	r0, r8
 80143dc:	f7ff f8d2 	bl	8013584 <_free_r>
 80143e0:	463c      	mov	r4, r7
 80143e2:	e7e0      	b.n	80143a6 <_realloc_r+0x1e>

080143e4 <__ascii_wctomb>:
 80143e4:	4603      	mov	r3, r0
 80143e6:	4608      	mov	r0, r1
 80143e8:	b141      	cbz	r1, 80143fc <__ascii_wctomb+0x18>
 80143ea:	2aff      	cmp	r2, #255	@ 0xff
 80143ec:	d904      	bls.n	80143f8 <__ascii_wctomb+0x14>
 80143ee:	228a      	movs	r2, #138	@ 0x8a
 80143f0:	601a      	str	r2, [r3, #0]
 80143f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80143f6:	4770      	bx	lr
 80143f8:	700a      	strb	r2, [r1, #0]
 80143fa:	2001      	movs	r0, #1
 80143fc:	4770      	bx	lr
	...

08014400 <fiprintf>:
 8014400:	b40e      	push	{r1, r2, r3}
 8014402:	b503      	push	{r0, r1, lr}
 8014404:	4601      	mov	r1, r0
 8014406:	ab03      	add	r3, sp, #12
 8014408:	4805      	ldr	r0, [pc, #20]	@ (8014420 <fiprintf+0x20>)
 801440a:	f853 2b04 	ldr.w	r2, [r3], #4
 801440e:	6800      	ldr	r0, [r0, #0]
 8014410:	9301      	str	r3, [sp, #4]
 8014412:	f000 f83f 	bl	8014494 <_vfiprintf_r>
 8014416:	b002      	add	sp, #8
 8014418:	f85d eb04 	ldr.w	lr, [sp], #4
 801441c:	b003      	add	sp, #12
 801441e:	4770      	bx	lr
 8014420:	24000054 	.word	0x24000054

08014424 <abort>:
 8014424:	b508      	push	{r3, lr}
 8014426:	2006      	movs	r0, #6
 8014428:	f000 fa08 	bl	801483c <raise>
 801442c:	2001      	movs	r0, #1
 801442e:	f7f0 fb0d 	bl	8004a4c <_exit>

08014432 <_malloc_usable_size_r>:
 8014432:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014436:	1f18      	subs	r0, r3, #4
 8014438:	2b00      	cmp	r3, #0
 801443a:	bfbc      	itt	lt
 801443c:	580b      	ldrlt	r3, [r1, r0]
 801443e:	18c0      	addlt	r0, r0, r3
 8014440:	4770      	bx	lr

08014442 <__sfputc_r>:
 8014442:	6893      	ldr	r3, [r2, #8]
 8014444:	3b01      	subs	r3, #1
 8014446:	2b00      	cmp	r3, #0
 8014448:	b410      	push	{r4}
 801444a:	6093      	str	r3, [r2, #8]
 801444c:	da08      	bge.n	8014460 <__sfputc_r+0x1e>
 801444e:	6994      	ldr	r4, [r2, #24]
 8014450:	42a3      	cmp	r3, r4
 8014452:	db01      	blt.n	8014458 <__sfputc_r+0x16>
 8014454:	290a      	cmp	r1, #10
 8014456:	d103      	bne.n	8014460 <__sfputc_r+0x1e>
 8014458:	f85d 4b04 	ldr.w	r4, [sp], #4
 801445c:	f000 b932 	b.w	80146c4 <__swbuf_r>
 8014460:	6813      	ldr	r3, [r2, #0]
 8014462:	1c58      	adds	r0, r3, #1
 8014464:	6010      	str	r0, [r2, #0]
 8014466:	7019      	strb	r1, [r3, #0]
 8014468:	4608      	mov	r0, r1
 801446a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801446e:	4770      	bx	lr

08014470 <__sfputs_r>:
 8014470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014472:	4606      	mov	r6, r0
 8014474:	460f      	mov	r7, r1
 8014476:	4614      	mov	r4, r2
 8014478:	18d5      	adds	r5, r2, r3
 801447a:	42ac      	cmp	r4, r5
 801447c:	d101      	bne.n	8014482 <__sfputs_r+0x12>
 801447e:	2000      	movs	r0, #0
 8014480:	e007      	b.n	8014492 <__sfputs_r+0x22>
 8014482:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014486:	463a      	mov	r2, r7
 8014488:	4630      	mov	r0, r6
 801448a:	f7ff ffda 	bl	8014442 <__sfputc_r>
 801448e:	1c43      	adds	r3, r0, #1
 8014490:	d1f3      	bne.n	801447a <__sfputs_r+0xa>
 8014492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014494 <_vfiprintf_r>:
 8014494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014498:	460d      	mov	r5, r1
 801449a:	b09d      	sub	sp, #116	@ 0x74
 801449c:	4614      	mov	r4, r2
 801449e:	4698      	mov	r8, r3
 80144a0:	4606      	mov	r6, r0
 80144a2:	b118      	cbz	r0, 80144ac <_vfiprintf_r+0x18>
 80144a4:	6a03      	ldr	r3, [r0, #32]
 80144a6:	b90b      	cbnz	r3, 80144ac <_vfiprintf_r+0x18>
 80144a8:	f7fe f95e 	bl	8012768 <__sinit>
 80144ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80144ae:	07d9      	lsls	r1, r3, #31
 80144b0:	d405      	bmi.n	80144be <_vfiprintf_r+0x2a>
 80144b2:	89ab      	ldrh	r3, [r5, #12]
 80144b4:	059a      	lsls	r2, r3, #22
 80144b6:	d402      	bmi.n	80144be <_vfiprintf_r+0x2a>
 80144b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80144ba:	f7fe fa7a 	bl	80129b2 <__retarget_lock_acquire_recursive>
 80144be:	89ab      	ldrh	r3, [r5, #12]
 80144c0:	071b      	lsls	r3, r3, #28
 80144c2:	d501      	bpl.n	80144c8 <_vfiprintf_r+0x34>
 80144c4:	692b      	ldr	r3, [r5, #16]
 80144c6:	b99b      	cbnz	r3, 80144f0 <_vfiprintf_r+0x5c>
 80144c8:	4629      	mov	r1, r5
 80144ca:	4630      	mov	r0, r6
 80144cc:	f000 f938 	bl	8014740 <__swsetup_r>
 80144d0:	b170      	cbz	r0, 80144f0 <_vfiprintf_r+0x5c>
 80144d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80144d4:	07dc      	lsls	r4, r3, #31
 80144d6:	d504      	bpl.n	80144e2 <_vfiprintf_r+0x4e>
 80144d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80144dc:	b01d      	add	sp, #116	@ 0x74
 80144de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144e2:	89ab      	ldrh	r3, [r5, #12]
 80144e4:	0598      	lsls	r0, r3, #22
 80144e6:	d4f7      	bmi.n	80144d8 <_vfiprintf_r+0x44>
 80144e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80144ea:	f7fe fa63 	bl	80129b4 <__retarget_lock_release_recursive>
 80144ee:	e7f3      	b.n	80144d8 <_vfiprintf_r+0x44>
 80144f0:	2300      	movs	r3, #0
 80144f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80144f4:	2320      	movs	r3, #32
 80144f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80144fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80144fe:	2330      	movs	r3, #48	@ 0x30
 8014500:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80146b0 <_vfiprintf_r+0x21c>
 8014504:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014508:	f04f 0901 	mov.w	r9, #1
 801450c:	4623      	mov	r3, r4
 801450e:	469a      	mov	sl, r3
 8014510:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014514:	b10a      	cbz	r2, 801451a <_vfiprintf_r+0x86>
 8014516:	2a25      	cmp	r2, #37	@ 0x25
 8014518:	d1f9      	bne.n	801450e <_vfiprintf_r+0x7a>
 801451a:	ebba 0b04 	subs.w	fp, sl, r4
 801451e:	d00b      	beq.n	8014538 <_vfiprintf_r+0xa4>
 8014520:	465b      	mov	r3, fp
 8014522:	4622      	mov	r2, r4
 8014524:	4629      	mov	r1, r5
 8014526:	4630      	mov	r0, r6
 8014528:	f7ff ffa2 	bl	8014470 <__sfputs_r>
 801452c:	3001      	adds	r0, #1
 801452e:	f000 80a7 	beq.w	8014680 <_vfiprintf_r+0x1ec>
 8014532:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014534:	445a      	add	r2, fp
 8014536:	9209      	str	r2, [sp, #36]	@ 0x24
 8014538:	f89a 3000 	ldrb.w	r3, [sl]
 801453c:	2b00      	cmp	r3, #0
 801453e:	f000 809f 	beq.w	8014680 <_vfiprintf_r+0x1ec>
 8014542:	2300      	movs	r3, #0
 8014544:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014548:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801454c:	f10a 0a01 	add.w	sl, sl, #1
 8014550:	9304      	str	r3, [sp, #16]
 8014552:	9307      	str	r3, [sp, #28]
 8014554:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014558:	931a      	str	r3, [sp, #104]	@ 0x68
 801455a:	4654      	mov	r4, sl
 801455c:	2205      	movs	r2, #5
 801455e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014562:	4853      	ldr	r0, [pc, #332]	@ (80146b0 <_vfiprintf_r+0x21c>)
 8014564:	f7eb fee4 	bl	8000330 <memchr>
 8014568:	9a04      	ldr	r2, [sp, #16]
 801456a:	b9d8      	cbnz	r0, 80145a4 <_vfiprintf_r+0x110>
 801456c:	06d1      	lsls	r1, r2, #27
 801456e:	bf44      	itt	mi
 8014570:	2320      	movmi	r3, #32
 8014572:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014576:	0713      	lsls	r3, r2, #28
 8014578:	bf44      	itt	mi
 801457a:	232b      	movmi	r3, #43	@ 0x2b
 801457c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014580:	f89a 3000 	ldrb.w	r3, [sl]
 8014584:	2b2a      	cmp	r3, #42	@ 0x2a
 8014586:	d015      	beq.n	80145b4 <_vfiprintf_r+0x120>
 8014588:	9a07      	ldr	r2, [sp, #28]
 801458a:	4654      	mov	r4, sl
 801458c:	2000      	movs	r0, #0
 801458e:	f04f 0c0a 	mov.w	ip, #10
 8014592:	4621      	mov	r1, r4
 8014594:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014598:	3b30      	subs	r3, #48	@ 0x30
 801459a:	2b09      	cmp	r3, #9
 801459c:	d94b      	bls.n	8014636 <_vfiprintf_r+0x1a2>
 801459e:	b1b0      	cbz	r0, 80145ce <_vfiprintf_r+0x13a>
 80145a0:	9207      	str	r2, [sp, #28]
 80145a2:	e014      	b.n	80145ce <_vfiprintf_r+0x13a>
 80145a4:	eba0 0308 	sub.w	r3, r0, r8
 80145a8:	fa09 f303 	lsl.w	r3, r9, r3
 80145ac:	4313      	orrs	r3, r2
 80145ae:	9304      	str	r3, [sp, #16]
 80145b0:	46a2      	mov	sl, r4
 80145b2:	e7d2      	b.n	801455a <_vfiprintf_r+0xc6>
 80145b4:	9b03      	ldr	r3, [sp, #12]
 80145b6:	1d19      	adds	r1, r3, #4
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	9103      	str	r1, [sp, #12]
 80145bc:	2b00      	cmp	r3, #0
 80145be:	bfbb      	ittet	lt
 80145c0:	425b      	neglt	r3, r3
 80145c2:	f042 0202 	orrlt.w	r2, r2, #2
 80145c6:	9307      	strge	r3, [sp, #28]
 80145c8:	9307      	strlt	r3, [sp, #28]
 80145ca:	bfb8      	it	lt
 80145cc:	9204      	strlt	r2, [sp, #16]
 80145ce:	7823      	ldrb	r3, [r4, #0]
 80145d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80145d2:	d10a      	bne.n	80145ea <_vfiprintf_r+0x156>
 80145d4:	7863      	ldrb	r3, [r4, #1]
 80145d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80145d8:	d132      	bne.n	8014640 <_vfiprintf_r+0x1ac>
 80145da:	9b03      	ldr	r3, [sp, #12]
 80145dc:	1d1a      	adds	r2, r3, #4
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	9203      	str	r2, [sp, #12]
 80145e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80145e6:	3402      	adds	r4, #2
 80145e8:	9305      	str	r3, [sp, #20]
 80145ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80146c0 <_vfiprintf_r+0x22c>
 80145ee:	7821      	ldrb	r1, [r4, #0]
 80145f0:	2203      	movs	r2, #3
 80145f2:	4650      	mov	r0, sl
 80145f4:	f7eb fe9c 	bl	8000330 <memchr>
 80145f8:	b138      	cbz	r0, 801460a <_vfiprintf_r+0x176>
 80145fa:	9b04      	ldr	r3, [sp, #16]
 80145fc:	eba0 000a 	sub.w	r0, r0, sl
 8014600:	2240      	movs	r2, #64	@ 0x40
 8014602:	4082      	lsls	r2, r0
 8014604:	4313      	orrs	r3, r2
 8014606:	3401      	adds	r4, #1
 8014608:	9304      	str	r3, [sp, #16]
 801460a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801460e:	4829      	ldr	r0, [pc, #164]	@ (80146b4 <_vfiprintf_r+0x220>)
 8014610:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014614:	2206      	movs	r2, #6
 8014616:	f7eb fe8b 	bl	8000330 <memchr>
 801461a:	2800      	cmp	r0, #0
 801461c:	d03f      	beq.n	801469e <_vfiprintf_r+0x20a>
 801461e:	4b26      	ldr	r3, [pc, #152]	@ (80146b8 <_vfiprintf_r+0x224>)
 8014620:	bb1b      	cbnz	r3, 801466a <_vfiprintf_r+0x1d6>
 8014622:	9b03      	ldr	r3, [sp, #12]
 8014624:	3307      	adds	r3, #7
 8014626:	f023 0307 	bic.w	r3, r3, #7
 801462a:	3308      	adds	r3, #8
 801462c:	9303      	str	r3, [sp, #12]
 801462e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014630:	443b      	add	r3, r7
 8014632:	9309      	str	r3, [sp, #36]	@ 0x24
 8014634:	e76a      	b.n	801450c <_vfiprintf_r+0x78>
 8014636:	fb0c 3202 	mla	r2, ip, r2, r3
 801463a:	460c      	mov	r4, r1
 801463c:	2001      	movs	r0, #1
 801463e:	e7a8      	b.n	8014592 <_vfiprintf_r+0xfe>
 8014640:	2300      	movs	r3, #0
 8014642:	3401      	adds	r4, #1
 8014644:	9305      	str	r3, [sp, #20]
 8014646:	4619      	mov	r1, r3
 8014648:	f04f 0c0a 	mov.w	ip, #10
 801464c:	4620      	mov	r0, r4
 801464e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014652:	3a30      	subs	r2, #48	@ 0x30
 8014654:	2a09      	cmp	r2, #9
 8014656:	d903      	bls.n	8014660 <_vfiprintf_r+0x1cc>
 8014658:	2b00      	cmp	r3, #0
 801465a:	d0c6      	beq.n	80145ea <_vfiprintf_r+0x156>
 801465c:	9105      	str	r1, [sp, #20]
 801465e:	e7c4      	b.n	80145ea <_vfiprintf_r+0x156>
 8014660:	fb0c 2101 	mla	r1, ip, r1, r2
 8014664:	4604      	mov	r4, r0
 8014666:	2301      	movs	r3, #1
 8014668:	e7f0      	b.n	801464c <_vfiprintf_r+0x1b8>
 801466a:	ab03      	add	r3, sp, #12
 801466c:	9300      	str	r3, [sp, #0]
 801466e:	462a      	mov	r2, r5
 8014670:	4b12      	ldr	r3, [pc, #72]	@ (80146bc <_vfiprintf_r+0x228>)
 8014672:	a904      	add	r1, sp, #16
 8014674:	4630      	mov	r0, r6
 8014676:	f7fd fc43 	bl	8011f00 <_printf_float>
 801467a:	4607      	mov	r7, r0
 801467c:	1c78      	adds	r0, r7, #1
 801467e:	d1d6      	bne.n	801462e <_vfiprintf_r+0x19a>
 8014680:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014682:	07d9      	lsls	r1, r3, #31
 8014684:	d405      	bmi.n	8014692 <_vfiprintf_r+0x1fe>
 8014686:	89ab      	ldrh	r3, [r5, #12]
 8014688:	059a      	lsls	r2, r3, #22
 801468a:	d402      	bmi.n	8014692 <_vfiprintf_r+0x1fe>
 801468c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801468e:	f7fe f991 	bl	80129b4 <__retarget_lock_release_recursive>
 8014692:	89ab      	ldrh	r3, [r5, #12]
 8014694:	065b      	lsls	r3, r3, #25
 8014696:	f53f af1f 	bmi.w	80144d8 <_vfiprintf_r+0x44>
 801469a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801469c:	e71e      	b.n	80144dc <_vfiprintf_r+0x48>
 801469e:	ab03      	add	r3, sp, #12
 80146a0:	9300      	str	r3, [sp, #0]
 80146a2:	462a      	mov	r2, r5
 80146a4:	4b05      	ldr	r3, [pc, #20]	@ (80146bc <_vfiprintf_r+0x228>)
 80146a6:	a904      	add	r1, sp, #16
 80146a8:	4630      	mov	r0, r6
 80146aa:	f7fd feb1 	bl	8012410 <_printf_i>
 80146ae:	e7e4      	b.n	801467a <_vfiprintf_r+0x1e6>
 80146b0:	08015678 	.word	0x08015678
 80146b4:	08015682 	.word	0x08015682
 80146b8:	08011f01 	.word	0x08011f01
 80146bc:	08014471 	.word	0x08014471
 80146c0:	0801567e 	.word	0x0801567e

080146c4 <__swbuf_r>:
 80146c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146c6:	460e      	mov	r6, r1
 80146c8:	4614      	mov	r4, r2
 80146ca:	4605      	mov	r5, r0
 80146cc:	b118      	cbz	r0, 80146d6 <__swbuf_r+0x12>
 80146ce:	6a03      	ldr	r3, [r0, #32]
 80146d0:	b90b      	cbnz	r3, 80146d6 <__swbuf_r+0x12>
 80146d2:	f7fe f849 	bl	8012768 <__sinit>
 80146d6:	69a3      	ldr	r3, [r4, #24]
 80146d8:	60a3      	str	r3, [r4, #8]
 80146da:	89a3      	ldrh	r3, [r4, #12]
 80146dc:	071a      	lsls	r2, r3, #28
 80146de:	d501      	bpl.n	80146e4 <__swbuf_r+0x20>
 80146e0:	6923      	ldr	r3, [r4, #16]
 80146e2:	b943      	cbnz	r3, 80146f6 <__swbuf_r+0x32>
 80146e4:	4621      	mov	r1, r4
 80146e6:	4628      	mov	r0, r5
 80146e8:	f000 f82a 	bl	8014740 <__swsetup_r>
 80146ec:	b118      	cbz	r0, 80146f6 <__swbuf_r+0x32>
 80146ee:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80146f2:	4638      	mov	r0, r7
 80146f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80146f6:	6823      	ldr	r3, [r4, #0]
 80146f8:	6922      	ldr	r2, [r4, #16]
 80146fa:	1a98      	subs	r0, r3, r2
 80146fc:	6963      	ldr	r3, [r4, #20]
 80146fe:	b2f6      	uxtb	r6, r6
 8014700:	4283      	cmp	r3, r0
 8014702:	4637      	mov	r7, r6
 8014704:	dc05      	bgt.n	8014712 <__swbuf_r+0x4e>
 8014706:	4621      	mov	r1, r4
 8014708:	4628      	mov	r0, r5
 801470a:	f7ff fd99 	bl	8014240 <_fflush_r>
 801470e:	2800      	cmp	r0, #0
 8014710:	d1ed      	bne.n	80146ee <__swbuf_r+0x2a>
 8014712:	68a3      	ldr	r3, [r4, #8]
 8014714:	3b01      	subs	r3, #1
 8014716:	60a3      	str	r3, [r4, #8]
 8014718:	6823      	ldr	r3, [r4, #0]
 801471a:	1c5a      	adds	r2, r3, #1
 801471c:	6022      	str	r2, [r4, #0]
 801471e:	701e      	strb	r6, [r3, #0]
 8014720:	6962      	ldr	r2, [r4, #20]
 8014722:	1c43      	adds	r3, r0, #1
 8014724:	429a      	cmp	r2, r3
 8014726:	d004      	beq.n	8014732 <__swbuf_r+0x6e>
 8014728:	89a3      	ldrh	r3, [r4, #12]
 801472a:	07db      	lsls	r3, r3, #31
 801472c:	d5e1      	bpl.n	80146f2 <__swbuf_r+0x2e>
 801472e:	2e0a      	cmp	r6, #10
 8014730:	d1df      	bne.n	80146f2 <__swbuf_r+0x2e>
 8014732:	4621      	mov	r1, r4
 8014734:	4628      	mov	r0, r5
 8014736:	f7ff fd83 	bl	8014240 <_fflush_r>
 801473a:	2800      	cmp	r0, #0
 801473c:	d0d9      	beq.n	80146f2 <__swbuf_r+0x2e>
 801473e:	e7d6      	b.n	80146ee <__swbuf_r+0x2a>

08014740 <__swsetup_r>:
 8014740:	b538      	push	{r3, r4, r5, lr}
 8014742:	4b29      	ldr	r3, [pc, #164]	@ (80147e8 <__swsetup_r+0xa8>)
 8014744:	4605      	mov	r5, r0
 8014746:	6818      	ldr	r0, [r3, #0]
 8014748:	460c      	mov	r4, r1
 801474a:	b118      	cbz	r0, 8014754 <__swsetup_r+0x14>
 801474c:	6a03      	ldr	r3, [r0, #32]
 801474e:	b90b      	cbnz	r3, 8014754 <__swsetup_r+0x14>
 8014750:	f7fe f80a 	bl	8012768 <__sinit>
 8014754:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014758:	0719      	lsls	r1, r3, #28
 801475a:	d422      	bmi.n	80147a2 <__swsetup_r+0x62>
 801475c:	06da      	lsls	r2, r3, #27
 801475e:	d407      	bmi.n	8014770 <__swsetup_r+0x30>
 8014760:	2209      	movs	r2, #9
 8014762:	602a      	str	r2, [r5, #0]
 8014764:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014768:	81a3      	strh	r3, [r4, #12]
 801476a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801476e:	e033      	b.n	80147d8 <__swsetup_r+0x98>
 8014770:	0758      	lsls	r0, r3, #29
 8014772:	d512      	bpl.n	801479a <__swsetup_r+0x5a>
 8014774:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014776:	b141      	cbz	r1, 801478a <__swsetup_r+0x4a>
 8014778:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801477c:	4299      	cmp	r1, r3
 801477e:	d002      	beq.n	8014786 <__swsetup_r+0x46>
 8014780:	4628      	mov	r0, r5
 8014782:	f7fe feff 	bl	8013584 <_free_r>
 8014786:	2300      	movs	r3, #0
 8014788:	6363      	str	r3, [r4, #52]	@ 0x34
 801478a:	89a3      	ldrh	r3, [r4, #12]
 801478c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014790:	81a3      	strh	r3, [r4, #12]
 8014792:	2300      	movs	r3, #0
 8014794:	6063      	str	r3, [r4, #4]
 8014796:	6923      	ldr	r3, [r4, #16]
 8014798:	6023      	str	r3, [r4, #0]
 801479a:	89a3      	ldrh	r3, [r4, #12]
 801479c:	f043 0308 	orr.w	r3, r3, #8
 80147a0:	81a3      	strh	r3, [r4, #12]
 80147a2:	6923      	ldr	r3, [r4, #16]
 80147a4:	b94b      	cbnz	r3, 80147ba <__swsetup_r+0x7a>
 80147a6:	89a3      	ldrh	r3, [r4, #12]
 80147a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80147ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80147b0:	d003      	beq.n	80147ba <__swsetup_r+0x7a>
 80147b2:	4621      	mov	r1, r4
 80147b4:	4628      	mov	r0, r5
 80147b6:	f000 f883 	bl	80148c0 <__smakebuf_r>
 80147ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80147be:	f013 0201 	ands.w	r2, r3, #1
 80147c2:	d00a      	beq.n	80147da <__swsetup_r+0x9a>
 80147c4:	2200      	movs	r2, #0
 80147c6:	60a2      	str	r2, [r4, #8]
 80147c8:	6962      	ldr	r2, [r4, #20]
 80147ca:	4252      	negs	r2, r2
 80147cc:	61a2      	str	r2, [r4, #24]
 80147ce:	6922      	ldr	r2, [r4, #16]
 80147d0:	b942      	cbnz	r2, 80147e4 <__swsetup_r+0xa4>
 80147d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80147d6:	d1c5      	bne.n	8014764 <__swsetup_r+0x24>
 80147d8:	bd38      	pop	{r3, r4, r5, pc}
 80147da:	0799      	lsls	r1, r3, #30
 80147dc:	bf58      	it	pl
 80147de:	6962      	ldrpl	r2, [r4, #20]
 80147e0:	60a2      	str	r2, [r4, #8]
 80147e2:	e7f4      	b.n	80147ce <__swsetup_r+0x8e>
 80147e4:	2000      	movs	r0, #0
 80147e6:	e7f7      	b.n	80147d8 <__swsetup_r+0x98>
 80147e8:	24000054 	.word	0x24000054

080147ec <_raise_r>:
 80147ec:	291f      	cmp	r1, #31
 80147ee:	b538      	push	{r3, r4, r5, lr}
 80147f0:	4605      	mov	r5, r0
 80147f2:	460c      	mov	r4, r1
 80147f4:	d904      	bls.n	8014800 <_raise_r+0x14>
 80147f6:	2316      	movs	r3, #22
 80147f8:	6003      	str	r3, [r0, #0]
 80147fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80147fe:	bd38      	pop	{r3, r4, r5, pc}
 8014800:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014802:	b112      	cbz	r2, 801480a <_raise_r+0x1e>
 8014804:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014808:	b94b      	cbnz	r3, 801481e <_raise_r+0x32>
 801480a:	4628      	mov	r0, r5
 801480c:	f000 f830 	bl	8014870 <_getpid_r>
 8014810:	4622      	mov	r2, r4
 8014812:	4601      	mov	r1, r0
 8014814:	4628      	mov	r0, r5
 8014816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801481a:	f000 b817 	b.w	801484c <_kill_r>
 801481e:	2b01      	cmp	r3, #1
 8014820:	d00a      	beq.n	8014838 <_raise_r+0x4c>
 8014822:	1c59      	adds	r1, r3, #1
 8014824:	d103      	bne.n	801482e <_raise_r+0x42>
 8014826:	2316      	movs	r3, #22
 8014828:	6003      	str	r3, [r0, #0]
 801482a:	2001      	movs	r0, #1
 801482c:	e7e7      	b.n	80147fe <_raise_r+0x12>
 801482e:	2100      	movs	r1, #0
 8014830:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014834:	4620      	mov	r0, r4
 8014836:	4798      	blx	r3
 8014838:	2000      	movs	r0, #0
 801483a:	e7e0      	b.n	80147fe <_raise_r+0x12>

0801483c <raise>:
 801483c:	4b02      	ldr	r3, [pc, #8]	@ (8014848 <raise+0xc>)
 801483e:	4601      	mov	r1, r0
 8014840:	6818      	ldr	r0, [r3, #0]
 8014842:	f7ff bfd3 	b.w	80147ec <_raise_r>
 8014846:	bf00      	nop
 8014848:	24000054 	.word	0x24000054

0801484c <_kill_r>:
 801484c:	b538      	push	{r3, r4, r5, lr}
 801484e:	4d07      	ldr	r5, [pc, #28]	@ (801486c <_kill_r+0x20>)
 8014850:	2300      	movs	r3, #0
 8014852:	4604      	mov	r4, r0
 8014854:	4608      	mov	r0, r1
 8014856:	4611      	mov	r1, r2
 8014858:	602b      	str	r3, [r5, #0]
 801485a:	f7f0 f8e7 	bl	8004a2c <_kill>
 801485e:	1c43      	adds	r3, r0, #1
 8014860:	d102      	bne.n	8014868 <_kill_r+0x1c>
 8014862:	682b      	ldr	r3, [r5, #0]
 8014864:	b103      	cbz	r3, 8014868 <_kill_r+0x1c>
 8014866:	6023      	str	r3, [r4, #0]
 8014868:	bd38      	pop	{r3, r4, r5, pc}
 801486a:	bf00      	nop
 801486c:	24001200 	.word	0x24001200

08014870 <_getpid_r>:
 8014870:	f7f0 b8d4 	b.w	8004a1c <_getpid>

08014874 <__swhatbuf_r>:
 8014874:	b570      	push	{r4, r5, r6, lr}
 8014876:	460c      	mov	r4, r1
 8014878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801487c:	2900      	cmp	r1, #0
 801487e:	b096      	sub	sp, #88	@ 0x58
 8014880:	4615      	mov	r5, r2
 8014882:	461e      	mov	r6, r3
 8014884:	da0d      	bge.n	80148a2 <__swhatbuf_r+0x2e>
 8014886:	89a3      	ldrh	r3, [r4, #12]
 8014888:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801488c:	f04f 0100 	mov.w	r1, #0
 8014890:	bf14      	ite	ne
 8014892:	2340      	movne	r3, #64	@ 0x40
 8014894:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014898:	2000      	movs	r0, #0
 801489a:	6031      	str	r1, [r6, #0]
 801489c:	602b      	str	r3, [r5, #0]
 801489e:	b016      	add	sp, #88	@ 0x58
 80148a0:	bd70      	pop	{r4, r5, r6, pc}
 80148a2:	466a      	mov	r2, sp
 80148a4:	f000 f848 	bl	8014938 <_fstat_r>
 80148a8:	2800      	cmp	r0, #0
 80148aa:	dbec      	blt.n	8014886 <__swhatbuf_r+0x12>
 80148ac:	9901      	ldr	r1, [sp, #4]
 80148ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80148b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80148b6:	4259      	negs	r1, r3
 80148b8:	4159      	adcs	r1, r3
 80148ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80148be:	e7eb      	b.n	8014898 <__swhatbuf_r+0x24>

080148c0 <__smakebuf_r>:
 80148c0:	898b      	ldrh	r3, [r1, #12]
 80148c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80148c4:	079d      	lsls	r5, r3, #30
 80148c6:	4606      	mov	r6, r0
 80148c8:	460c      	mov	r4, r1
 80148ca:	d507      	bpl.n	80148dc <__smakebuf_r+0x1c>
 80148cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80148d0:	6023      	str	r3, [r4, #0]
 80148d2:	6123      	str	r3, [r4, #16]
 80148d4:	2301      	movs	r3, #1
 80148d6:	6163      	str	r3, [r4, #20]
 80148d8:	b003      	add	sp, #12
 80148da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148dc:	ab01      	add	r3, sp, #4
 80148de:	466a      	mov	r2, sp
 80148e0:	f7ff ffc8 	bl	8014874 <__swhatbuf_r>
 80148e4:	9f00      	ldr	r7, [sp, #0]
 80148e6:	4605      	mov	r5, r0
 80148e8:	4639      	mov	r1, r7
 80148ea:	4630      	mov	r0, r6
 80148ec:	f7fe febe 	bl	801366c <_malloc_r>
 80148f0:	b948      	cbnz	r0, 8014906 <__smakebuf_r+0x46>
 80148f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80148f6:	059a      	lsls	r2, r3, #22
 80148f8:	d4ee      	bmi.n	80148d8 <__smakebuf_r+0x18>
 80148fa:	f023 0303 	bic.w	r3, r3, #3
 80148fe:	f043 0302 	orr.w	r3, r3, #2
 8014902:	81a3      	strh	r3, [r4, #12]
 8014904:	e7e2      	b.n	80148cc <__smakebuf_r+0xc>
 8014906:	89a3      	ldrh	r3, [r4, #12]
 8014908:	6020      	str	r0, [r4, #0]
 801490a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801490e:	81a3      	strh	r3, [r4, #12]
 8014910:	9b01      	ldr	r3, [sp, #4]
 8014912:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014916:	b15b      	cbz	r3, 8014930 <__smakebuf_r+0x70>
 8014918:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801491c:	4630      	mov	r0, r6
 801491e:	f000 f81d 	bl	801495c <_isatty_r>
 8014922:	b128      	cbz	r0, 8014930 <__smakebuf_r+0x70>
 8014924:	89a3      	ldrh	r3, [r4, #12]
 8014926:	f023 0303 	bic.w	r3, r3, #3
 801492a:	f043 0301 	orr.w	r3, r3, #1
 801492e:	81a3      	strh	r3, [r4, #12]
 8014930:	89a3      	ldrh	r3, [r4, #12]
 8014932:	431d      	orrs	r5, r3
 8014934:	81a5      	strh	r5, [r4, #12]
 8014936:	e7cf      	b.n	80148d8 <__smakebuf_r+0x18>

08014938 <_fstat_r>:
 8014938:	b538      	push	{r3, r4, r5, lr}
 801493a:	4d07      	ldr	r5, [pc, #28]	@ (8014958 <_fstat_r+0x20>)
 801493c:	2300      	movs	r3, #0
 801493e:	4604      	mov	r4, r0
 8014940:	4608      	mov	r0, r1
 8014942:	4611      	mov	r1, r2
 8014944:	602b      	str	r3, [r5, #0]
 8014946:	f7f0 f8d1 	bl	8004aec <_fstat>
 801494a:	1c43      	adds	r3, r0, #1
 801494c:	d102      	bne.n	8014954 <_fstat_r+0x1c>
 801494e:	682b      	ldr	r3, [r5, #0]
 8014950:	b103      	cbz	r3, 8014954 <_fstat_r+0x1c>
 8014952:	6023      	str	r3, [r4, #0]
 8014954:	bd38      	pop	{r3, r4, r5, pc}
 8014956:	bf00      	nop
 8014958:	24001200 	.word	0x24001200

0801495c <_isatty_r>:
 801495c:	b538      	push	{r3, r4, r5, lr}
 801495e:	4d06      	ldr	r5, [pc, #24]	@ (8014978 <_isatty_r+0x1c>)
 8014960:	2300      	movs	r3, #0
 8014962:	4604      	mov	r4, r0
 8014964:	4608      	mov	r0, r1
 8014966:	602b      	str	r3, [r5, #0]
 8014968:	f7f0 f8d0 	bl	8004b0c <_isatty>
 801496c:	1c43      	adds	r3, r0, #1
 801496e:	d102      	bne.n	8014976 <_isatty_r+0x1a>
 8014970:	682b      	ldr	r3, [r5, #0]
 8014972:	b103      	cbz	r3, 8014976 <_isatty_r+0x1a>
 8014974:	6023      	str	r3, [r4, #0]
 8014976:	bd38      	pop	{r3, r4, r5, pc}
 8014978:	24001200 	.word	0x24001200

0801497c <_init>:
 801497c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801497e:	bf00      	nop
 8014980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014982:	bc08      	pop	{r3}
 8014984:	469e      	mov	lr, r3
 8014986:	4770      	bx	lr

08014988 <_fini>:
 8014988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801498a:	bf00      	nop
 801498c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801498e:	bc08      	pop	{r3}
 8014990:	469e      	mov	lr, r3
 8014992:	4770      	bx	lr
