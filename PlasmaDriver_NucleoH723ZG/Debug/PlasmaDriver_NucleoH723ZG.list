
PlasmaDriver_NucleoH723ZG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011384  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ad4  08011654  08011654  00012654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012128  08012128  00013128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012130  08012130  00013130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08012134  08012134  00013134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000098  24000000  08012138  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000098  080121d0  00014098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000f8  08012230  000140f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ee8  24000158  08012290  00014158  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24001040  08012290  00015040  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00014158  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023831  00000000  00000000  00014186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003959  00000000  00000000  000379b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ac8  00000000  00000000  0003b310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014f7  00000000  00000000  0003cdd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00037407  00000000  00000000  0003e2cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021a89  00000000  00000000  000756d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016c4ca  00000000  00000000  0009715f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00203629  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ad0  00000000  00000000  0020366c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0020b13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000158 	.word	0x24000158
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801163c 	.word	0x0801163c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400015c 	.word	0x2400015c
 800030c:	0801163c 	.word	0x0801163c

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <writeConfigFlash>:
// Prototypes
void measureVoltagesTemperaturesADC3(void);

// Write configuration to flash
static uint32_t writeConfigFlash(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
	uint32_t faultySector;	//Contains error code for faulty sector
	uint32_t error_code = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]

	// Unlock Flash
	HAL_FLASH_Unlock();
 80006ba:	f009 fc8f 	bl	8009fdc <HAL_FLASH_Unlock>

	// Erase flash sector 7
	if (HAL_FLASHEx_Erase(&sFlashErase, &faultySector) == HAL_OK)
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	4619      	mov	r1, r3
 80006c2:	4815      	ldr	r0, [pc, #84]	@ (8000718 <writeConfigFlash+0x68>)
 80006c4:	f009 fd26 	bl	800a114 <HAL_FLASHEx_Erase>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d119      	bne.n	8000702 <writeConfigFlash+0x52>
	{
		for (uint32_t offset = 0; offset < sizeof(sFlashConfig); offset += FLASH_WORD)
 80006ce:	2300      	movs	r3, #0
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	e012      	b.n	80006fa <writeConfigFlash+0x4a>
		{
			// Program one flash word (8*4 bytes)
			if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, FLASH_SECTOR7_START_ADDR + offset, ((uint32_t) &sFlashConfig) + offset) != HAL_OK)
 80006d4:	68ba      	ldr	r2, [r7, #8]
 80006d6:	4b11      	ldr	r3, [pc, #68]	@ (800071c <writeConfigFlash+0x6c>)
 80006d8:	4413      	add	r3, r2
 80006da:	4911      	ldr	r1, [pc, #68]	@ (8000720 <writeConfigFlash+0x70>)
 80006dc:	68ba      	ldr	r2, [r7, #8]
 80006de:	440a      	add	r2, r1
 80006e0:	4619      	mov	r1, r3
 80006e2:	2001      	movs	r0, #1
 80006e4:	f009 fc0c 	bl	8009f00 <HAL_FLASH_Program>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d002      	beq.n	80006f4 <writeConfigFlash+0x44>
			{
				// Error during flash write
				error_code = HAL_FLASH_GetError();
 80006ee:	f009 fcaf 	bl	800a050 <HAL_FLASH_GetError>
 80006f2:	60f8      	str	r0, [r7, #12]
		for (uint32_t offset = 0; offset < sizeof(sFlashConfig); offset += FLASH_WORD)
 80006f4:	68bb      	ldr	r3, [r7, #8]
 80006f6:	3320      	adds	r3, #32
 80006f8:	60bb      	str	r3, [r7, #8]
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d0e9      	beq.n	80006d4 <writeConfigFlash+0x24>
 8000700:	e002      	b.n	8000708 <writeConfigFlash+0x58>
			}
		}
	}
	else
	{
		error_code = HAL_FLASH_GetError();
 8000702:	f009 fca5 	bl	800a050 <HAL_FLASH_GetError>
 8000706:	60f8      	str	r0, [r7, #12]
	}

	  // Lock Flash
	  HAL_FLASH_Lock();
 8000708:	f009 fc8a 	bl	800a020 <HAL_FLASH_Lock>

	  return error_code;
 800070c:	68fb      	ldr	r3, [r7, #12]
}
 800070e:	4618      	mov	r0, r3
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	24000024 	.word	0x24000024
 800071c:	080e0000 	.word	0x080e0000
 8000720:	240008c8 	.word	0x240008c8

08000724 <readConfigFlash>:

// Read configuration from flash
static void readConfigFlash(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
	// Read configuration from flash
	memcpy(&sFlashConfig, (void *) FLASH_SECTOR7_START_ADDR, sizeof(sFlashConfig));
 8000728:	4b04      	ldr	r3, [pc, #16]	@ (800073c <readConfigFlash+0x18>)
 800072a:	781a      	ldrb	r2, [r3, #0]
 800072c:	4b04      	ldr	r3, [pc, #16]	@ (8000740 <readConfigFlash+0x1c>)
 800072e:	701a      	strb	r2, [r3, #0]
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	080e0000 	.word	0x080e0000
 8000740:	240008c8 	.word	0x240008c8

08000744 <printCR>:

// Print CR
static void printCR(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart3, (uint8_t *) "\n\r", 2, 1000);
 8000748:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800074c:	2202      	movs	r2, #2
 800074e:	4903      	ldr	r1, [pc, #12]	@ (800075c <printCR+0x18>)
 8000750:	4803      	ldr	r0, [pc, #12]	@ (8000760 <printCR+0x1c>)
 8000752:	f00e fef6 	bl	800f542 <HAL_UART_Transmit>
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	08011654 	.word	0x08011654
 8000760:	24000cb8 	.word	0x24000cb8

08000764 <printString>:

// Print string on UART3
static void printString(char *str)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *) str, strlen(str), 1000);
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f7ff fdcf 	bl	8000310 <strlen>
 8000772:	4603      	mov	r3, r0
 8000774:	b29a      	uxth	r2, r3
 8000776:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800077a:	6879      	ldr	r1, [r7, #4]
 800077c:	4803      	ldr	r0, [pc, #12]	@ (800078c <printString+0x28>)
 800077e:	f00e fee0 	bl	800f542 <HAL_UART_Transmit>
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	24000cb8 	.word	0x24000cb8

08000790 <printConfigFlash>:

// Print configuration on UART3
static void printConfigFlash(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
	printString("\n\rCurrent configuration:");
 8000794:	480e      	ldr	r0, [pc, #56]	@ (80007d0 <printConfigFlash+0x40>)
 8000796:	f7ff ffe5 	bl	8000764 <printString>
	printString("\n\r  Mode = ");
 800079a:	480e      	ldr	r0, [pc, #56]	@ (80007d4 <printConfigFlash+0x44>)
 800079c:	f7ff ffe2 	bl	8000764 <printString>
	if (sFlashConfig.mode == TEST_MODE)
 80007a0:	4b0d      	ldr	r3, [pc, #52]	@ (80007d8 <printConfigFlash+0x48>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d103      	bne.n	80007b0 <printConfigFlash+0x20>
		printString("TEST");
 80007a8:	480c      	ldr	r0, [pc, #48]	@ (80007dc <printConfigFlash+0x4c>)
 80007aa:	f7ff ffdb 	bl	8000764 <printString>
 80007ae:	e00a      	b.n	80007c6 <printConfigFlash+0x36>
	else if (sFlashConfig.mode == RUN_MODE)
 80007b0:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <printConfigFlash+0x48>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d103      	bne.n	80007c0 <printConfigFlash+0x30>
		printString("RUN");
 80007b8:	4809      	ldr	r0, [pc, #36]	@ (80007e0 <printConfigFlash+0x50>)
 80007ba:	f7ff ffd3 	bl	8000764 <printString>
 80007be:	e002      	b.n	80007c6 <printConfigFlash+0x36>
	else
		printString("UNKNOWN");
 80007c0:	4808      	ldr	r0, [pc, #32]	@ (80007e4 <printConfigFlash+0x54>)
 80007c2:	f7ff ffcf 	bl	8000764 <printString>
	printCR();
 80007c6:	f7ff ffbd 	bl	8000744 <printCR>
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	08011658 	.word	0x08011658
 80007d4:	08011674 	.word	0x08011674
 80007d8:	240008c8 	.word	0x240008c8
 80007dc:	08011680 	.word	0x08011680
 80007e0:	08011688 	.word	0x08011688
 80007e4:	0801168c 	.word	0x0801168c

080007e8 <printNumber>:

// Print 16bit unsigned integer on UART3
static void printNumber(const char *text, uint16_t number, uint8_t CR)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b09e      	sub	sp, #120	@ 0x78
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	460b      	mov	r3, r1
 80007f2:	807b      	strh	r3, [r7, #2]
 80007f4:	4613      	mov	r3, r2
 80007f6:	707b      	strb	r3, [r7, #1]
	char s_output[100];
	char s_number[7];
	strcpy(s_output, text);
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	6879      	ldr	r1, [r7, #4]
 80007fe:	4618      	mov	r0, r3
 8000800:	f010 fac8 	bl	8010d94 <strcpy>
	itoa(number, s_number, 10);
 8000804:	887b      	ldrh	r3, [r7, #2]
 8000806:	f107 010c 	add.w	r1, r7, #12
 800080a:	220a      	movs	r2, #10
 800080c:	4618      	mov	r0, r3
 800080e:	f010 f995 	bl	8010b3c <itoa>
	strcat(s_output, s_number);
 8000812:	f107 020c 	add.w	r2, r7, #12
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4611      	mov	r1, r2
 800081c:	4618      	mov	r0, r3
 800081e:	f010 fa7d 	bl	8010d1c <strcat>
	if (CR)
 8000822:	787b      	ldrb	r3, [r7, #1]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d00e      	beq.n	8000846 <printNumber+0x5e>
	{
		strcat(s_output, "\n\r");
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff fd6f 	bl	8000310 <strlen>
 8000832:	4603      	mov	r3, r0
 8000834:	461a      	mov	r2, r3
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4413      	add	r3, r2
 800083c:	4a0b      	ldr	r2, [pc, #44]	@ (800086c <printNumber+0x84>)
 800083e:	8811      	ldrh	r1, [r2, #0]
 8000840:	7892      	ldrb	r2, [r2, #2]
 8000842:	8019      	strh	r1, [r3, #0]
 8000844:	709a      	strb	r2, [r3, #2]
	}
	HAL_UART_Transmit(&huart3, (uint8_t *) s_output, strlen(s_output), 1000);
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff fd60 	bl	8000310 <strlen>
 8000850:	4603      	mov	r3, r0
 8000852:	b29a      	uxth	r2, r3
 8000854:	f107 0114 	add.w	r1, r7, #20
 8000858:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800085c:	4804      	ldr	r0, [pc, #16]	@ (8000870 <printNumber+0x88>)
 800085e:	f00e fe70 	bl	800f542 <HAL_UART_Transmit>
}
 8000862:	bf00      	nop
 8000864:	3778      	adds	r7, #120	@ 0x78
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	08011654 	.word	0x08011654
 8000870:	24000cb8 	.word	0x24000cb8

08000874 <printHALErrorStatus>:

// Print HAL error status on UART3
static void	printHALErrorStatus(HAL_StatusTypeDef HALresp, const char *text)
{
 8000874:	b5b0      	push	{r4, r5, r7, lr}
 8000876:	b09c      	sub	sp, #112	@ 0x70
 8000878:	af00      	add	r7, sp, #0
 800087a:	4603      	mov	r3, r0
 800087c:	6039      	str	r1, [r7, #0]
 800087e:	71fb      	strb	r3, [r7, #7]
	char s_output[100];

	switch (HALresp)
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	2b03      	cmp	r3, #3
 8000884:	d828      	bhi.n	80008d8 <printHALErrorStatus+0x64>
 8000886:	a201      	add	r2, pc, #4	@ (adr r2, 800088c <printHALErrorStatus+0x18>)
 8000888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800088c:	080008d9 	.word	0x080008d9
 8000890:	0800089d 	.word	0x0800089d
 8000894:	080008b1 	.word	0x080008b1
 8000898:	080008c5 	.word	0x080008c5
	{
		case HAL_ERROR:
			strcpy(s_output, "** HAL ERROR **: ");
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	4a15      	ldr	r2, [pc, #84]	@ (80008f8 <printHALErrorStatus+0x84>)
 80008a2:	461c      	mov	r4, r3
 80008a4:	4615      	mov	r5, r2
 80008a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008aa:	682b      	ldr	r3, [r5, #0]
 80008ac:	8023      	strh	r3, [r4, #0]
		break;
 80008ae:	e013      	b.n	80008d8 <printHALErrorStatus+0x64>

		case HAL_BUSY:
			strcpy(s_output, "** HAL BUSY **: ");
 80008b0:	f107 030c 	add.w	r3, r7, #12
 80008b4:	4a11      	ldr	r2, [pc, #68]	@ (80008fc <printHALErrorStatus+0x88>)
 80008b6:	461c      	mov	r4, r3
 80008b8:	4615      	mov	r5, r2
 80008ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008be:	682b      	ldr	r3, [r5, #0]
 80008c0:	7023      	strb	r3, [r4, #0]
		break;
 80008c2:	e009      	b.n	80008d8 <printHALErrorStatus+0x64>

		case HAL_TIMEOUT:
			strcpy(s_output, "** HAL TIMEOUT **: ");
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000900 <printHALErrorStatus+0x8c>)
 80008ca:	461c      	mov	r4, r3
 80008cc:	4615      	mov	r5, r2
 80008ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008d2:	682b      	ldr	r3, [r5, #0]
 80008d4:	6023      	str	r3, [r4, #0]
		break;
 80008d6:	bf00      	nop

		case HAL_OK:
		break;
	}
	strcat(s_output, text);
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	6839      	ldr	r1, [r7, #0]
 80008de:	4618      	mov	r0, r3
 80008e0:	f010 fa1c 	bl	8010d1c <strcat>
	printString(s_output);
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ff3b 	bl	8000764 <printString>
}
 80008ee:	bf00      	nop
 80008f0:	3770      	adds	r7, #112	@ 0x70
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bdb0      	pop	{r4, r5, r7, pc}
 80008f6:	bf00      	nop
 80008f8:	08011694 	.word	0x08011694
 80008fc:	080116a8 	.word	0x080116a8
 8000900:	080116bc 	.word	0x080116bc

08000904 <stopHbridge>:

void stopHbridge(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]

	//Stop TIMER 1 PWM & interrupts
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);  //This will stop channel PWM1
 8000918:	2100      	movs	r1, #0
 800091a:	480f      	ldr	r0, [pc, #60]	@ (8000958 <stopHbridge+0x54>)
 800091c:	f00d fbbc 	bl	800e098 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1); //This will stop channel PWM1N
 8000920:	2100      	movs	r1, #0
 8000922:	480d      	ldr	r0, [pc, #52]	@ (8000958 <stopHbridge+0x54>)
 8000924:	f00e fbfe 	bl	800f124 <HAL_TIMEx_PWMN_Stop>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, TIM1_CH1N_Pin|TIM1_CH1_Pin, GPIO_PIN_SET);
 8000928:	2201      	movs	r2, #1
 800092a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800092e:	480b      	ldr	r0, [pc, #44]	@ (800095c <stopHbridge+0x58>)
 8000930:	f009 fe84 	bl	800a63c <HAL_GPIO_WritePin>
	/*Configure GPIO pins : LED_GREEN_Pin LINE_DRIVER1_ENABLE_Pin LINE_DRIVER2_ENABLE_Pin LED_RED_Pin */
	GPIO_InitStruct.Pin = TIM1_CH1N_Pin|TIM1_CH1_Pin;
 8000934:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000938:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093a:	2301      	movs	r3, #1
 800093c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	4619      	mov	r1, r3
 800094a:	4804      	ldr	r0, [pc, #16]	@ (800095c <stopHbridge+0x58>)
 800094c:	f009 fcb6 	bl	800a2bc <HAL_GPIO_Init>

}
 8000950:	bf00      	nop
 8000952:	3718      	adds	r7, #24
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	24000d4c 	.word	0x24000d4c
 800095c:	58021000 	.word	0x58021000

08000960 <printHbridgeData>:

// Print H-bridge data on UART3
static void printHbridgeData(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b09c      	sub	sp, #112	@ 0x70
 8000964:	af02      	add	r7, sp, #8
	char s_output[100];
	sprintf(s_output, "\n\rH-bridge 1=On 0=Off: %u, Frequency: %u (Hz), Dead time: %u (%%)\n\r", sHbridge.on, sHbridge.frequency, sHbridge.deadtime);
 8000966:	4b0f      	ldr	r3, [pc, #60]	@ (80009a4 <printHbridgeData+0x44>)
 8000968:	881b      	ldrh	r3, [r3, #0]
 800096a:	461a      	mov	r2, r3
 800096c:	4b0d      	ldr	r3, [pc, #52]	@ (80009a4 <printHbridgeData+0x44>)
 800096e:	885b      	ldrh	r3, [r3, #2]
 8000970:	4619      	mov	r1, r3
 8000972:	4b0c      	ldr	r3, [pc, #48]	@ (80009a4 <printHbridgeData+0x44>)
 8000974:	889b      	ldrh	r3, [r3, #4]
 8000976:	1d38      	adds	r0, r7, #4
 8000978:	9300      	str	r3, [sp, #0]
 800097a:	460b      	mov	r3, r1
 800097c:	490a      	ldr	r1, [pc, #40]	@ (80009a8 <printHbridgeData+0x48>)
 800097e:	f010 f9a5 	bl	8010ccc <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t *) s_output, strlen(s_output), 1000);
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff fcc3 	bl	8000310 <strlen>
 800098a:	4603      	mov	r3, r0
 800098c:	b29a      	uxth	r2, r3
 800098e:	1d39      	adds	r1, r7, #4
 8000990:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000994:	4805      	ldr	r0, [pc, #20]	@ (80009ac <printHbridgeData+0x4c>)
 8000996:	f00e fdd4 	bl	800f542 <HAL_UART_Transmit>
}
 800099a:	bf00      	nop
 800099c:	3768      	adds	r7, #104	@ 0x68
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	2400001c 	.word	0x2400001c
 80009a8:	080116d0 	.word	0x080116d0
 80009ac:	24000cb8 	.word	0x24000cb8

080009b0 <programHbridge>:

// Program TIMER 1 controlling the H-bridge
static void programHbridge(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b0a6      	sub	sp, #152	@ 0x98
 80009b4:	af00      	add	r7, sp, #0
	uint8_t DT, DTG;
	float tDTS = 1E6/((float) TIMER_BASE_CLOCK);  //Minimum step in usec
 80009b6:	4b96      	ldr	r3, [pc, #600]	@ (8000c10 <programHbridge+0x260>)
 80009b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	// TIMER 1 has already been initialized using HAL.
	// Program the H-bridge TIMER 1 - Clock TIMER_BASE_CLOCK

	// Calculate the period and duty cycle based on the frequency requested.
	timARR_f = ((float) TIMER_BASE_CLOCK) / ((float) sHbridge.frequency);
 80009bc:	4b95      	ldr	r3, [pc, #596]	@ (8000c14 <programHbridge+0x264>)
 80009be:	885b      	ldrh	r3, [r3, #2]
 80009c0:	ee07 3a90 	vmov	s15, r3
 80009c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009c8:	eddf 6a93 	vldr	s13, [pc, #588]	@ 8000c18 <programHbridge+0x268>
 80009cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009d0:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
	timARR = (uint32_t) (timARR_f + 0.5);							// Set period counter
 80009d4:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80009d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009dc:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 80009e0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80009e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80009e8:	ee17 3a90 	vmov	r3, s15
 80009ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	timCCR1 = timARR / 2;  											// 50% duty cycle
 80009f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80009f4:	085b      	lsrs	r3, r3, #1
 80009f6:	67fb      	str	r3, [r7, #124]	@ 0x7c

	// Print out the set frequency
	if (debug == 1)
 80009f8:	4b88      	ldr	r3, [pc, #544]	@ (8000c1c <programHbridge+0x26c>)
 80009fa:	881b      	ldrh	r3, [r3, #0]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d111      	bne.n	8000a24 <programHbridge+0x74>
	{
		value_int = ((uint32_t) TIMER_BASE_CLOCK) / timARR;
 8000a00:	4a87      	ldr	r2, [pc, #540]	@ (8000c20 <programHbridge+0x270>)
 8000a02:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a0a:	67bb      	str	r3, [r7, #120]	@ 0x78
		sprintf(s_output, "\n\rSet frequency (Hz): %lu\n\r", value_int);
 8000a0c:	f107 030c 	add.w	r3, r7, #12
 8000a10:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000a12:	4984      	ldr	r1, [pc, #528]	@ (8000c24 <programHbridge+0x274>)
 8000a14:	4618      	mov	r0, r3
 8000a16:	f010 f959 	bl	8010ccc <siprintf>
		printString(s_output);
 8000a1a:	f107 030c 	add.w	r3, r7, #12
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff fea0 	bl	8000764 <printString>
	//  DTG[7:5] = 10x => DT = (64 + DTG[5:0]) x tDTG with tDTG =2xtDTS.	 max (64 + 63)*2*tDTS  	: 3.7236 usec - 7.3890 usec
	//  DTG[7:5] = 110 => DT = (32 + DTG[4:0]) x tDTG with tDTG =8xtDTS.     max (32 + 31)*8*tDTS   : 7.4472 usec - 14.662 usec
	//  DTG[7:5] = 111 => DT = (32 + DTG[4:0]) x tDTG with tDTG = 16 x tDTS. max (32 + 31)*16*tDTS 	: 14.895 usec - 29.324 usec

	// Calculate dead time in usec
	req_dtime_us = (((float) sHbridge.deadtime))*(10000./(float) sHbridge.frequency);
 8000a24:	4b7b      	ldr	r3, [pc, #492]	@ (8000c14 <programHbridge+0x264>)
 8000a26:	889b      	ldrh	r3, [r3, #4]
 8000a28:	ee07 3a90 	vmov	s15, r3
 8000a2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a30:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000a34:	4b77      	ldr	r3, [pc, #476]	@ (8000c14 <programHbridge+0x264>)
 8000a36:	885b      	ldrh	r3, [r3, #2]
 8000a38:	ee07 3a90 	vmov	s15, r3
 8000a3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a40:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8000a44:	ed9f 4b70 	vldr	d4, [pc, #448]	@ 8000c08 <programHbridge+0x258>
 8000a48:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8000a4c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000a50:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000a54:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
		printString(s_output);
	}
*/

	// Minimum allowed dead time is 1 usec.
	if (req_dtime_us < 1.0)
 8000a58:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8000a5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000a60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a68:	d503      	bpl.n	8000a72 <programHbridge+0xc2>
		req_dtime_us = 1.0;
 8000a6a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000a6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

	if (req_dtime_us <= 127*tDTS) //3.6946
 8000a72:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000a76:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8000c28 <programHbridge+0x278>
 8000a7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a7e:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8000a82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a8a:	d81e      	bhi.n	8000aca <programHbridge+0x11a>
	{
		DT = (uint8_t) (req_dtime_us/tDTS + 0.5);
 8000a8c:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8000a90:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000a94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a98:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a9c:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000aa0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000aa4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000aa8:	edc7 7a01 	vstr	s15, [r7, #4]
 8000aac:	793b      	ldrb	r3, [r7, #4]
 8000aae:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		if (DT > 127)
 8000ab2:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	da02      	bge.n	8000ac0 <programHbridge+0x110>
			DT = 127;
 8000aba:	237f      	movs	r3, #127	@ 0x7f
 8000abc:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		DTG = DT;
 8000ac0:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000ac4:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000ac8:	e0bd      	b.n	8000c46 <programHbridge+0x296>
	}
	else if (req_dtime_us <= 127*2*tDTS) //7.3890
 8000aca:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000ace:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8000c2c <programHbridge+0x27c>
 8000ad2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ad6:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8000ada:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ae2:	d825      	bhi.n	8000b30 <programHbridge+0x180>
	{
		DT = (uint8_t) ((req_dtime_us/(2*tDTS)) - 64 + 0.5);
 8000ae4:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000ae8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000aec:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8000af0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000af4:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8000c30 <programHbridge+0x280>
 8000af8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000afc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b00:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000b04:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b08:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b0c:	edc7 7a01 	vstr	s15, [r7, #4]
 8000b10:	793b      	ldrb	r3, [r7, #4]
 8000b12:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		if (DT > 63)
 8000b16:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000b1a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b1c:	d902      	bls.n	8000b24 <programHbridge+0x174>
			DT = 63;
 8000b1e:	233f      	movs	r3, #63	@ 0x3f
 8000b20:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		DTG = DT + 0x80;
 8000b24:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000b28:	3b80      	subs	r3, #128	@ 0x80
 8000b2a:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000b2e:	e08a      	b.n	8000c46 <programHbridge+0x296>
	}
	else if (req_dtime_us <= 63*8*tDTS) //14.662
 8000b30:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000b34:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8000c34 <programHbridge+0x284>
 8000b38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b3c:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8000b40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b48:	d827      	bhi.n	8000b9a <programHbridge+0x1ea>
	{
		DT = (uint8_t) ((req_dtime_us/(8*tDTS)) - 32 + 0.5);
 8000b4a:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000b4e:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8000b52:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b56:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8000b5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b5e:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8000c38 <programHbridge+0x288>
 8000b62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000b66:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b6a:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000b6e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b72:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b76:	edc7 7a01 	vstr	s15, [r7, #4]
 8000b7a:	793b      	ldrb	r3, [r7, #4]
 8000b7c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		if (DT > 31)
 8000b80:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000b84:	2b1f      	cmp	r3, #31
 8000b86:	d902      	bls.n	8000b8e <programHbridge+0x1de>
			DT = 31;
 8000b88:	231f      	movs	r3, #31
 8000b8a:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		DTG = DT + 0xC0;
 8000b8e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000b92:	3b40      	subs	r3, #64	@ 0x40
 8000b94:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000b98:	e055      	b.n	8000c46 <programHbridge+0x296>
	}
	else if (req_dtime_us <= 63*16*tDTS) //29.324
 8000b9a:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000b9e:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8000c3c <programHbridge+0x28c>
 8000ba2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ba6:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8000baa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bb2:	d845      	bhi.n	8000c40 <programHbridge+0x290>
	{
		DT = (uint8_t) ((req_dtime_us/(16*tDTS)) - 32 + 0.5);
 8000bb4:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8000bb8:	eeb3 7a00 	vmov.f32	s14, #48	@ 0x41800000  16.0
 8000bbc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000bc0:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 8000bc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bc8:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8000c38 <programHbridge+0x288>
 8000bcc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000bd0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000bd4:	eeb6 6b00 	vmov.f64	d6, #96	@ 0x3f000000  0.5
 8000bd8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000bdc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000be0:	edc7 7a01 	vstr	s15, [r7, #4]
 8000be4:	793b      	ldrb	r3, [r7, #4]
 8000be6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		if (DT > 31)
 8000bea:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000bee:	2b1f      	cmp	r3, #31
 8000bf0:	d902      	bls.n	8000bf8 <programHbridge+0x248>
			DT = 31;
 8000bf2:	231f      	movs	r3, #31
 8000bf4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
		DTG = DT + 0xE0;
 8000bf8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000bfc:	3b20      	subs	r3, #32
 8000bfe:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
 8000c02:	e020      	b.n	8000c46 <programHbridge+0x296>
 8000c04:	f3af 8000 	nop.w
 8000c08:	00000000 	.word	0x00000000
 8000c0c:	40c38800 	.word	0x40c38800
 8000c10:	3cee500f 	.word	0x3cee500f
 8000c14:	2400001c 	.word	0x2400001c
 8000c18:	4c032156 	.word	0x4c032156
 8000c1c:	24000000 	.word	0x24000000
 8000c20:	020c8558 	.word	0x020c8558
 8000c24:	08011714 	.word	0x08011714
 8000c28:	42fe0000 	.word	0x42fe0000
 8000c2c:	437e0000 	.word	0x437e0000
 8000c30:	42800000 	.word	0x42800000
 8000c34:	43fc0000 	.word	0x43fc0000
 8000c38:	42000000 	.word	0x42000000
 8000c3c:	447c0000 	.word	0x447c0000
	}
	else
		DTG = 255;
 8000c40:	23ff      	movs	r3, #255	@ 0xff
 8000c42:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96

	uint32_t temp = TIM1->BDTR & 0xFFFFFF00;		//Mask out DTG
 8000c46:	4b54      	ldr	r3, [pc, #336]	@ (8000d98 <programHbridge+0x3e8>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c4a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000c4e:	677b      	str	r3, [r7, #116]	@ 0x74
	timBDTR = temp | DTG;							//Add new DTG
 8000c50:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000c54:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000c56:	4313      	orrs	r3, r2
 8000c58:	673b      	str	r3, [r7, #112]	@ 0x70

	//Change timer1 settings
	htim1.Init.Period = timARR;   // Updating internal structure for timer
 8000c5a:	4a50      	ldr	r2, [pc, #320]	@ (8000d9c <programHbridge+0x3ec>)
 8000c5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000c60:	60d3      	str	r3, [r2, #12]
	TIM1->ARR = timARR;			  // Update period
 8000c62:	4a4d      	ldr	r2, [pc, #308]	@ (8000d98 <programHbridge+0x3e8>)
 8000c64:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000c68:	62d3      	str	r3, [r2, #44]	@ 0x2c
	TIM1->CCR1 = timCCR1;		  // Update duty cycle
 8000c6a:	4a4b      	ldr	r2, [pc, #300]	@ (8000d98 <programHbridge+0x3e8>)
 8000c6c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000c6e:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM1->BDTR = timBDTR;	      // Update dead time
 8000c70:	4a49      	ldr	r2, [pc, #292]	@ (8000d98 <programHbridge+0x3e8>)
 8000c72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000c74:	6453      	str	r3, [r2, #68]	@ 0x44

	if (debug == 1) {
 8000c76:	4b4a      	ldr	r3, [pc, #296]	@ (8000da0 <programHbridge+0x3f0>)
 8000c78:	881b      	ldrh	r3, [r3, #0]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d16c      	bne.n	8000d58 <programHbridge+0x3a8>
		//sprintf(s_output, "ARR %lu CCR1 %lu BDTR %lu", timARR, timCCR1, timBDTR & 0xFF);
		//printString(s_output);

		float calcDT = 0;
 8000c7e:	f04f 0300 	mov.w	r3, #0
 8000c82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		//  DTG[7:5] = 0xx => DT = DTG[7:0] x tDTG with tDTG = tDTS.			 max 127*tDTS   		: 0.0000 usec - 3.6946 usec
		if ((DTG & 0x80) == 0) {
 8000c86:	f997 3096 	ldrsb.w	r3, [r7, #150]	@ 0x96
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	db0b      	blt.n	8000ca6 <programHbridge+0x2f6>
			calcDT = DTG*tDTS;
 8000c8e:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000c92:	ee07 3a90 	vmov	s15, r3
 8000c96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c9a:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ca2:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
		}
		//  DTG[7:5] = 10x => DT = (64 + DTG[5:0]) x tDTG with tDTG =2xtDTS.	 max (64 + 63)*2*tDTS  	: 3.7236 usec - 7.3890 usec
		if ((DTG & 0xC0) == 0x80) {
 8000ca6:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000caa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000cae:	2b80      	cmp	r3, #128	@ 0x80
 8000cb0:	d10f      	bne.n	8000cd2 <programHbridge+0x322>
			calcDT = (64 + (DTG & 0x3F))*2*tDTS;
 8000cb2:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000cb6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000cba:	3340      	adds	r3, #64	@ 0x40
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	ee07 3a90 	vmov	s15, r3
 8000cc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cc6:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cce:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
		}
		//  DTG[7:5] = 110 => DT = (32 + DTG[4:0]) x tDTG with tDTG =8xtDTS.     max (32 + 31)*8*tDTS   : 7.4472 usec - 14.662 usec
		if ((DTG & 0xE0) == 0xC0) {
 8000cd2:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000cd6:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000cda:	2bc0      	cmp	r3, #192	@ 0xc0
 8000cdc:	d10f      	bne.n	8000cfe <programHbridge+0x34e>
			calcDT = (32 + (DTG & 0x1F))*8*tDTS;
 8000cde:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000ce2:	f003 031f 	and.w	r3, r3, #31
 8000ce6:	3320      	adds	r3, #32
 8000ce8:	00db      	lsls	r3, r3, #3
 8000cea:	ee07 3a90 	vmov	s15, r3
 8000cee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cf2:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cfa:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
		}
		//  DTG[7:5] = 111 => DT = (32 + DTG[4:0]) x tDTG with tDTG = 16 x tDTS. max (32 + 31)*16*tDTS 	: 14.895 usec - 29.324 usec
		if ((DTG & 0xE0) == 0xE0) {
 8000cfe:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000d02:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8000d06:	2be0      	cmp	r3, #224	@ 0xe0
 8000d08:	d10f      	bne.n	8000d2a <programHbridge+0x37a>
			calcDT = (32 + (DTG & 0x1F))*16*tDTS;
 8000d0a:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8000d0e:	f003 031f 	and.w	r3, r3, #31
 8000d12:	3320      	adds	r3, #32
 8000d14:	011b      	lsls	r3, r3, #4
 8000d16:	ee07 3a90 	vmov	s15, r3
 8000d1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d1e:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8000d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d26:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
		}
		value_int = (uint32_t) 1000*calcDT;
 8000d2a:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8000d2e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8000da4 <programHbridge+0x3f4>
 8000d32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d3a:	ee17 3a90 	vmov	r3, s15
 8000d3e:	67bb      	str	r3, [r7, #120]	@ 0x78
		sprintf(s_output, "\n\rSet dead time: %lu (ns)\n\r", value_int);
 8000d40:	f107 030c 	add.w	r3, r7, #12
 8000d44:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000d46:	4918      	ldr	r1, [pc, #96]	@ (8000da8 <programHbridge+0x3f8>)
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f00f ffbf 	bl	8010ccc <siprintf>
		printString(s_output);
 8000d4e:	f107 030c 	add.w	r3, r7, #12
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff fd06 	bl	8000764 <printString>
	}

	//Start driving the H-bridge
	if (sHbridge.on && (TIM_CHANNEL_STATE_GET(&htim1, TIM_CHANNEL_1) == HAL_TIM_CHANNEL_STATE_READY))
 8000d58:	4b14      	ldr	r3, [pc, #80]	@ (8000dac <programHbridge+0x3fc>)
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d010      	beq.n	8000d82 <programHbridge+0x3d2>
 8000d60:	4b0e      	ldr	r3, [pc, #56]	@ (8000d9c <programHbridge+0x3ec>)
 8000d62:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d10a      	bne.n	8000d82 <programHbridge+0x3d2>
	{
		HAL_TIM_MspPostInit(&htim1);	//Setup GPIO for timer alternate function
 8000d6c:	480b      	ldr	r0, [pc, #44]	@ (8000d9c <programHbridge+0x3ec>)
 8000d6e:	f002 ffd9 	bl	8003d24 <HAL_TIM_MspPostInit>
		//Start TIMER 1 PWM & interrupts
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  //This will start channel PWM1
 8000d72:	2100      	movs	r1, #0
 8000d74:	4809      	ldr	r0, [pc, #36]	@ (8000d9c <programHbridge+0x3ec>)
 8000d76:	f00d f873 	bl	800de60 <HAL_TIM_PWM_Start>
		HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1); //This will start channel PWM1N
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4807      	ldr	r0, [pc, #28]	@ (8000d9c <programHbridge+0x3ec>)
 8000d7e:	f00e f901 	bl	800ef84 <HAL_TIMEx_PWMN_Start>
	}

	//Stop driving the H-bridge
	if (!sHbridge.on)
 8000d82:	4b0a      	ldr	r3, [pc, #40]	@ (8000dac <programHbridge+0x3fc>)
 8000d84:	881b      	ldrh	r3, [r3, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d101      	bne.n	8000d8e <programHbridge+0x3de>
	{
		stopHbridge();
 8000d8a:	f7ff fdbb 	bl	8000904 <stopHbridge>
	}

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);

}
 8000d8e:	bf00      	nop
 8000d90:	3798      	adds	r7, #152	@ 0x98
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40010000 	.word	0x40010000
 8000d9c:	24000d4c 	.word	0x24000d4c
 8000da0:	24000000 	.word	0x24000000
 8000da4:	447a0000 	.word	0x447a0000
 8000da8:	08011730 	.word	0x08011730
 8000dac:	2400001c 	.word	0x2400001c

08000db0 <convertADC12data>:
#define ADC1_VplaL1			4	//Plasma voltage L1
#define ADC2_VplaL2			5	//Plasma voltage L2

//Convert ADC1 & ADC2 data to voltages and current
float convertADC12data(uint32_t item, char **text)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
	float result = 0;
 8000dba:	f04f 0300 	mov.w	r3, #0
 8000dbe:	60fb      	str	r3, [r7, #12]
* 3.3           *   (ADCData/65536.0)       *    1000
*   ^                   ^       ^                  ^
*   |                   |       |                  |
 * full scale V      Raw Data   Max ADC Value    Convert to mV
 */
	switch (item % (2*ADC12_NO_CHANNELS)) {
 8000dc0:	6879      	ldr	r1, [r7, #4]
 8000dc2:	4b99      	ldr	r3, [pc, #612]	@ (8001028 <convertADC12data+0x278>)
 8000dc4:	fba3 2301 	umull	r2, r3, r3, r1
 8000dc8:	089a      	lsrs	r2, r3, #2
 8000dca:	4613      	mov	r3, r2
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	4413      	add	r3, r2
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	1aca      	subs	r2, r1, r3
 8000dd4:	2a05      	cmp	r2, #5
 8000dd6:	f200 80f4 	bhi.w	8000fc2 <convertADC12data+0x212>
 8000dda:	a301      	add	r3, pc, #4	@ (adr r3, 8000de0 <convertADC12data+0x30>)
 8000ddc:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8000de0:	08000df9 	.word	0x08000df9
 8000de4:	08000e1d 	.word	0x08000e1d
 8000de8:	08000e89 	.word	0x08000e89
 8000dec:	08000ec3 	.word	0x08000ec3
 8000df0:	08000efd 	.word	0x08000efd
 8000df4:	08000f67 	.word	0x08000f67
		case ADC1_TIM1_CH1:
			result = sADC.adc12_data[item];
 8000df8:	4a8c      	ldr	r2, [pc, #560]	@ (800102c <convertADC12data+0x27c>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e00:	ee07 3a90 	vmov	s15, r3
 8000e04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e08:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f000 80cc 	beq.w	8000fac <convertADC12data+0x1fc>
				*text ="ADC1_TIM1_CH1";
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	4a86      	ldr	r2, [pc, #536]	@ (8001030 <convertADC12data+0x280>)
 8000e18:	601a      	str	r2, [r3, #0]
			break;
 8000e1a:	e0c7      	b.n	8000fac <convertADC12data+0x1fc>

		case ADC2_Is:
			V = 3.3*(((float) sADC.adc12_data[item])/65536.0)*1000;
 8000e1c:	4a83      	ldr	r2, [pc, #524]	@ (800102c <convertADC12data+0x27c>)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e24:	ee07 3a90 	vmov	s15, r3
 8000e28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e2c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000e30:	ed9f 5b69 	vldr	d5, [pc, #420]	@ 8000fd8 <convertADC12data+0x228>
 8000e34:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e38:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8000fe0 <convertADC12data+0x230>
 8000e3c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e40:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 8000fe8 <convertADC12data+0x238>
 8000e44:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e48:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e4c:	edc7 7a02 	vstr	s15, [r7, #8]
			result =  2000*(V - 1.585714)/3.594286; //V;
 8000e50:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e54:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e58:	ed9f 6b65 	vldr	d6, [pc, #404]	@ 8000ff0 <convertADC12data+0x240>
 8000e5c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000e60:	ed9f 6b65 	vldr	d6, [pc, #404]	@ 8000ff8 <convertADC12data+0x248>
 8000e64:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000e68:	ed9f 5b65 	vldr	d5, [pc, #404]	@ 8001000 <convertADC12data+0x250>
 8000e6c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e70:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e74:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	f000 8098 	beq.w	8000fb0 <convertADC12data+0x200>
				*text ="ADC2_Is(mA)";
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	4a6c      	ldr	r2, [pc, #432]	@ (8001034 <convertADC12data+0x284>)
 8000e84:	601a      	str	r2, [r3, #0]
			break;
 8000e86:	e093      	b.n	8000fb0 <convertADC12data+0x200>

		case ADC1_VbriS1:
			result =  1000*((12.0+2000.0)/12.0)*3.3*(((float) sADC.adc12_data[item])/65536.0); // 3.3*(((float) sADC.adc12_data[item])/65536.0)*1000;
 8000e88:	4a68      	ldr	r2, [pc, #416]	@ (800102c <convertADC12data+0x27c>)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e90:	ee07 3a90 	vmov	s15, r3
 8000e94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e98:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000e9c:	ed9f 5b4e 	vldr	d5, [pc, #312]	@ 8000fd8 <convertADC12data+0x228>
 8000ea0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ea4:	ed9f 6b58 	vldr	d6, [pc, #352]	@ 8001008 <convertADC12data+0x258>
 8000ea8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000eac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000eb0:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d07c      	beq.n	8000fb4 <convertADC12data+0x204>
				*text ="ADC1_VbriS1(mV)";
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	4a5e      	ldr	r2, [pc, #376]	@ (8001038 <convertADC12data+0x288>)
 8000ebe:	601a      	str	r2, [r3, #0]
			break;
 8000ec0:	e078      	b.n	8000fb4 <convertADC12data+0x204>

		case ADC2_VbriS2:
			result =  1000*((12.0+2000.0)/12.0)*3.3*(((float) sADC.adc12_data[item])/65536.0); //3.3*(((float) sADC.adc12_data[item])/65536.0) * 1000;
 8000ec2:	4a5a      	ldr	r2, [pc, #360]	@ (800102c <convertADC12data+0x27c>)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000eca:	ee07 3a90 	vmov	s15, r3
 8000ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ed2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000ed6:	ed9f 5b40 	vldr	d5, [pc, #256]	@ 8000fd8 <convertADC12data+0x228>
 8000eda:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ede:	ed9f 6b4a 	vldr	d6, [pc, #296]	@ 8001008 <convertADC12data+0x258>
 8000ee2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ee6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000eea:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d061      	beq.n	8000fb8 <convertADC12data+0x208>
				*text ="ADC2_VbriS2(mV)";
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	4a51      	ldr	r2, [pc, #324]	@ (800103c <convertADC12data+0x28c>)
 8000ef8:	601a      	str	r2, [r3, #0]
			break;
 8000efa:	e05d      	b.n	8000fb8 <convertADC12data+0x208>

		case ADC1_VplaL1:
			V = 3.3*(((float) sADC.adc12_data[item])/65536.0) * 1000;
 8000efc:	4a4b      	ldr	r2, [pc, #300]	@ (800102c <convertADC12data+0x27c>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f04:	ee07 3a90 	vmov	s15, r3
 8000f08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f0c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000f10:	ed9f 5b31 	vldr	d5, [pc, #196]	@ 8000fd8 <convertADC12data+0x228>
 8000f14:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f18:	ed9f 6b31 	vldr	d6, [pc, #196]	@ 8000fe0 <convertADC12data+0x230>
 8000f1c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f20:	ed9f 6b31 	vldr	d6, [pc, #196]	@ 8000fe8 <convertADC12data+0x238>
 8000f24:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f28:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f2c:	edc7 7a02 	vstr	s15, [r7, #8]
			result =  1E6*(V-1.648348)/0.999; //V;//
 8000f30:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f34:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f38:	ed9f 6b35 	vldr	d6, [pc, #212]	@ 8001010 <convertADC12data+0x260>
 8000f3c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000f40:	ed9f 6b35 	vldr	d6, [pc, #212]	@ 8001018 <convertADC12data+0x268>
 8000f44:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000f48:	ed9f 5b35 	vldr	d5, [pc, #212]	@ 8001020 <convertADC12data+0x270>
 8000f4c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f50:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f54:	edc7 7a03 	vstr	s15, [r7, #12]
			if (text)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d02e      	beq.n	8000fbc <convertADC12data+0x20c>
				*text ="ADC1_VplaL1(mV)";
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	4a37      	ldr	r2, [pc, #220]	@ (8001040 <convertADC12data+0x290>)
 8000f62:	601a      	str	r2, [r3, #0]
			break;
 8000f64:	e02a      	b.n	8000fbc <convertADC12data+0x20c>

		case ADC2_VplaL2:
			//V is the directly measured voltage from the ADC in mV
			V = 3.3*(((float) sADC.adc12_data[item])/65536.0) * 1000;
 8000f66:	4a31      	ldr	r2, [pc, #196]	@ (800102c <convertADC12data+0x27c>)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f6e:	ee07 3a90 	vmov	s15, r3
 8000f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f76:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000f7a:	ed9f 5b17 	vldr	d5, [pc, #92]	@ 8000fd8 <convertADC12data+0x228>
 8000f7e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f82:	ed9f 6b17 	vldr	d6, [pc, #92]	@ 8000fe0 <convertADC12data+0x230>
 8000f86:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f8a:	ed9f 6b17 	vldr	d6, [pc, #92]	@ 8000fe8 <convertADC12data+0x238>
 8000f8e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f92:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f96:	edc7 7a02 	vstr	s15, [r7, #8]
			//result is the True voltage at L2 (corrected for voltage divider)
			result =  V;//1E6*(V-1.648348)/0.999;
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	60fb      	str	r3, [r7, #12]
			if (text)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d00d      	beq.n	8000fc0 <convertADC12data+0x210>
				*text ="ADC2_VplaL2(mV)";
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	4a27      	ldr	r2, [pc, #156]	@ (8001044 <convertADC12data+0x294>)
 8000fa8:	601a      	str	r2, [r3, #0]
			break;
 8000faa:	e009      	b.n	8000fc0 <convertADC12data+0x210>
			break;
 8000fac:	bf00      	nop
 8000fae:	e008      	b.n	8000fc2 <convertADC12data+0x212>
			break;
 8000fb0:	bf00      	nop
 8000fb2:	e006      	b.n	8000fc2 <convertADC12data+0x212>
			break;
 8000fb4:	bf00      	nop
 8000fb6:	e004      	b.n	8000fc2 <convertADC12data+0x212>
			break;
 8000fb8:	bf00      	nop
 8000fba:	e002      	b.n	8000fc2 <convertADC12data+0x212>
			break;
 8000fbc:	bf00      	nop
 8000fbe:	e000      	b.n	8000fc2 <convertADC12data+0x212>
			break;
 8000fc0:	bf00      	nop
	}

	return(result);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	ee07 3a90 	vmov	s15, r3
}
 8000fc8:	eeb0 0a67 	vmov.f32	s0, s15
 8000fcc:	3714      	adds	r7, #20
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	00000000 	.word	0x00000000
 8000fdc:	40f00000 	.word	0x40f00000
 8000fe0:	66666666 	.word	0x66666666
 8000fe4:	400a6666 	.word	0x400a6666
 8000fe8:	00000000 	.word	0x00000000
 8000fec:	408f4000 	.word	0x408f4000
 8000ff0:	a4acf313 	.word	0xa4acf313
 8000ff4:	3ff95f15 	.word	0x3ff95f15
 8000ff8:	00000000 	.word	0x00000000
 8000ffc:	409f4000 	.word	0x409f4000
 8001000:	04b3c3e7 	.word	0x04b3c3e7
 8001004:	400cc119 	.word	0x400cc119
 8001008:	ffffffff 	.word	0xffffffff
 800100c:	4120e2a7 	.word	0x4120e2a7
 8001010:	2706d506 	.word	0x2706d506
 8001014:	3ffa5fa2 	.word	0x3ffa5fa2
 8001018:	00000000 	.word	0x00000000
 800101c:	412e8480 	.word	0x412e8480
 8001020:	d916872b 	.word	0xd916872b
 8001024:	3feff7ce 	.word	0x3feff7ce
 8001028:	aaaaaaab 	.word	0xaaaaaaab
 800102c:	240001b4 	.word	0x240001b4
 8001030:	0801174c 	.word	0x0801174c
 8001034:	0801175c 	.word	0x0801175c
 8001038:	08011768 	.word	0x08011768
 800103c:	08011778 	.word	0x08011778
 8001040:	08011788 	.word	0x08011788
 8001044:	08011798 	.word	0x08011798

08001048 <printADC12data>:

//Print measured ADC1 and ADC2 data on UART3
void printADC12data(void)
{
 8001048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800104a:	b0f7      	sub	sp, #476	@ 0x1dc
 800104c:	af10      	add	r7, sp, #64	@ 0x40
	char *p_text[2*ADC12_NO_CHANNELS];
	float result[2*ADC12_NO_CHANNELS];

	if (debug == 1)
 800104e:	4ba0      	ldr	r3, [pc, #640]	@ (80012d0 <printADC12data+0x288>)
 8001050:	881b      	ldrh	r3, [r3, #0]
 8001052:	2b01      	cmp	r3, #1
 8001054:	f040 8136 	bne.w	80012c4 <printADC12data+0x27c>
	{
		printCR();
 8001058:	f7ff fb74 	bl	8000744 <printCR>
		printNumber("No data: ", sADC.nADC12Read, 1);
 800105c:	4b9d      	ldr	r3, [pc, #628]	@ (80012d4 <printADC12data+0x28c>)
 800105e:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
 8001062:	b29b      	uxth	r3, r3
 8001064:	2201      	movs	r2, #1
 8001066:	4619      	mov	r1, r3
 8001068:	489b      	ldr	r0, [pc, #620]	@ (80012d8 <printADC12data+0x290>)
 800106a:	f7ff fbbd 	bl	80007e8 <printNumber>
		for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i++)
 800106e:	2300      	movs	r3, #0
 8001070:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8001074:	e119      	b.n	80012aa <printADC12data+0x262>
		{
			int ii = i % (2*ADC12_NO_CHANNELS);
 8001076:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800107a:	4b98      	ldr	r3, [pc, #608]	@ (80012dc <printADC12data+0x294>)
 800107c:	fb83 3102 	smull	r3, r1, r3, r2
 8001080:	17d3      	asrs	r3, r2, #31
 8001082:	1ac9      	subs	r1, r1, r3
 8001084:	460b      	mov	r3, r1
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	440b      	add	r3, r1
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
			result[ii] = convertADC12data(i, &p_text[ii]);
 8001092:	f8d7 0194 	ldr.w	r0, [r7, #404]	@ 0x194
 8001096:	f507 72bc 	add.w	r2, r7, #376	@ 0x178
 800109a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4413      	add	r3, r2
 80010a2:	4619      	mov	r1, r3
 80010a4:	f7ff fe84 	bl	8000db0 <convertADC12data>
 80010a8:	eef0 7a40 	vmov.f32	s15, s0
 80010ac:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80010b6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80010ba:	4413      	add	r3, r2
 80010bc:	3b38      	subs	r3, #56	@ 0x38
 80010be:	edc3 7a00 	vstr	s15, [r3]
			char text[300];
			if (ii == 5)
 80010c2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80010c6:	2b05      	cmp	r3, #5
 80010c8:	f040 80ea 	bne.w	80012a0 <printADC12data+0x258>
			{
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80010cc:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80010d0:	4a82      	ldr	r2, [pc, #520]	@ (80012dc <printADC12data+0x294>)
 80010d2:	fb82 1203 	smull	r1, r2, r2, r3
 80010d6:	17db      	asrs	r3, r3, #31
 80010d8:	eba2 0c03 	sub.w	ip, r2, r3
						p_text[ii-5],                     sADC.adc12_data[i-5],
 80010dc:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80010e0:	3b05      	subs	r3, #5
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80010e8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80010ec:	4413      	add	r3, r2
 80010ee:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80010f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
						p_text[ii-5],                     sADC.adc12_data[i-5],
 80010f4:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80010f8:	3b05      	subs	r3, #5
 80010fa:	4a76      	ldr	r2, [pc, #472]	@ (80012d4 <printADC12data+0x28c>)
 80010fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001100:	62bb      	str	r3, [r7, #40]	@ 0x28
						p_text[ii-4], (int) result[ii-4], sADC.adc12_data[i-4],
 8001102:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001106:	3b04      	subs	r3, #4
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 800110e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001112:	18d3      	adds	r3, r2, r3
 8001114:	f853 5c20 	ldr.w	r5, [r3, #-32]
						p_text[ii-4], (int) result[ii-4], sADC.adc12_data[i-4],
 8001118:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800111c:	3b04      	subs	r3, #4
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 8001124:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001128:	18d3      	adds	r3, r2, r3
 800112a:	3b38      	subs	r3, #56	@ 0x38
 800112c:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001130:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001134:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
						p_text[ii-4], (int) result[ii-4], sADC.adc12_data[i-4],
 8001138:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800113c:	3b04      	subs	r3, #4
 800113e:	4a65      	ldr	r2, [pc, #404]	@ (80012d4 <printADC12data+0x28c>)
 8001140:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001144:	623b      	str	r3, [r7, #32]
						p_text[ii-3], (int) result[ii-3], sADC.adc12_data[i-3],
 8001146:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800114a:	3b03      	subs	r3, #3
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 8001152:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001156:	18d3      	adds	r3, r2, r3
 8001158:	f853 6c20 	ldr.w	r6, [r3, #-32]
						p_text[ii-3], (int) result[ii-3], sADC.adc12_data[i-3],
 800115c:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001160:	3b03      	subs	r3, #3
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 8001168:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800116c:	18d3      	adds	r3, r2, r3
 800116e:	3b38      	subs	r3, #56	@ 0x38
 8001170:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001178:	edc7 7a07 	vstr	s15, [r7, #28]
						p_text[ii-3], (int) result[ii-3], sADC.adc12_data[i-3],
 800117c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001180:	3b03      	subs	r3, #3
 8001182:	4a54      	ldr	r2, [pc, #336]	@ (80012d4 <printADC12data+0x28c>)
 8001184:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001188:	61bb      	str	r3, [r7, #24]
						p_text[ii-2], (int) result[ii-2], sADC.adc12_data[i-2],
 800118a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800118e:	3b02      	subs	r3, #2
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	f503 72b4 	add.w	r2, r3, #360	@ 0x168
 8001196:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800119a:	18d3      	adds	r3, r2, r3
 800119c:	f853 2c20 	ldr.w	r2, [r3, #-32]
 80011a0:	617a      	str	r2, [r7, #20]
						p_text[ii-2], (int) result[ii-2], sADC.adc12_data[i-2],
 80011a2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80011a6:	3b02      	subs	r3, #2
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	f503 71b4 	add.w	r1, r3, #360	@ 0x168
 80011ae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011b2:	18cb      	adds	r3, r1, r3
 80011b4:	3b38      	subs	r3, #56	@ 0x38
 80011b6:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80011ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011be:	edc7 7a04 	vstr	s15, [r7, #16]
						p_text[ii-2], (int) result[ii-2], sADC.adc12_data[i-2],
 80011c2:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80011c6:	3b02      	subs	r3, #2
 80011c8:	4a42      	ldr	r2, [pc, #264]	@ (80012d4 <printADC12data+0x28c>)
 80011ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80011ce:	60fb      	str	r3, [r7, #12]
						p_text[ii-1], (int) result[ii-1], sADC.adc12_data[i-1],
 80011d0:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80011d4:	3b01      	subs	r3, #1
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	f503 71b4 	add.w	r1, r3, #360	@ 0x168
 80011dc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011e0:	18cb      	adds	r3, r1, r3
 80011e2:	f853 1c20 	ldr.w	r1, [r3, #-32]
 80011e6:	60b9      	str	r1, [r7, #8]
						p_text[ii-1], (int) result[ii-1], sADC.adc12_data[i-1],
 80011e8:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80011ec:	3b01      	subs	r3, #1
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	f503 70b4 	add.w	r0, r3, #360	@ 0x168
 80011f4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011f8:	18c3      	adds	r3, r0, r3
 80011fa:	3b38      	subs	r3, #56	@ 0x38
 80011fc:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001200:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001204:	edc7 7a01 	vstr	s15, [r7, #4]
						p_text[ii-1], (int) result[ii-1], sADC.adc12_data[i-1],
 8001208:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800120c:	1e5a      	subs	r2, r3, #1
 800120e:	4b31      	ldr	r3, [pc, #196]	@ (80012d4 <printADC12data+0x28c>)
 8001210:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001214:	603b      	str	r3, [r7, #0]
 8001216:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	f503 70b4 	add.w	r0, r3, #360	@ 0x168
 8001220:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001224:	18c3      	adds	r3, r0, r3
 8001226:	f853 1c20 	ldr.w	r1, [r3, #-32]
						p_text[ii],   (int) result[ii],   sADC.adc12_data[i]);
 800122a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	f503 70b4 	add.w	r0, r3, #360	@ 0x168
 8001234:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001238:	18c3      	adds	r3, r0, r3
 800123a:	3b38      	subs	r3, #56	@ 0x38
 800123c:	edd3 7a00 	vldr	s15, [r3]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001240:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001244:	ee17 4a90 	vmov	r4, s15
						p_text[ii],   (int) result[ii],   sADC.adc12_data[i]);
 8001248:	4a22      	ldr	r2, [pc, #136]	@ (80012d4 <printADC12data+0x28c>)
 800124a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800124e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
				sprintf(text, "%2u ADC12: %s (%5u) %s %4i (%5u) %s %6i (%5u) %s %6i (%5u) %s %7i (%5u) %s %7i (%5u)\n\r", i / 6,
 8001252:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8001256:	930f      	str	r3, [sp, #60]	@ 0x3c
 8001258:	940e      	str	r4, [sp, #56]	@ 0x38
 800125a:	910d      	str	r1, [sp, #52]	@ 0x34
 800125c:	683c      	ldr	r4, [r7, #0]
 800125e:	940c      	str	r4, [sp, #48]	@ 0x30
 8001260:	687c      	ldr	r4, [r7, #4]
 8001262:	940b      	str	r4, [sp, #44]	@ 0x2c
 8001264:	68b9      	ldr	r1, [r7, #8]
 8001266:	910a      	str	r1, [sp, #40]	@ 0x28
 8001268:	68f9      	ldr	r1, [r7, #12]
 800126a:	9109      	str	r1, [sp, #36]	@ 0x24
 800126c:	6939      	ldr	r1, [r7, #16]
 800126e:	9108      	str	r1, [sp, #32]
 8001270:	697a      	ldr	r2, [r7, #20]
 8001272:	9207      	str	r2, [sp, #28]
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	9206      	str	r2, [sp, #24]
 8001278:	69fa      	ldr	r2, [r7, #28]
 800127a:	9205      	str	r2, [sp, #20]
 800127c:	9604      	str	r6, [sp, #16]
 800127e:	6a3a      	ldr	r2, [r7, #32]
 8001280:	9203      	str	r2, [sp, #12]
 8001282:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001284:	9202      	str	r2, [sp, #8]
 8001286:	9501      	str	r5, [sp, #4]
 8001288:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800128a:	9200      	str	r2, [sp, #0]
 800128c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800128e:	4662      	mov	r2, ip
 8001290:	4913      	ldr	r1, [pc, #76]	@ (80012e0 <printADC12data+0x298>)
 8001292:	f00f fd1b 	bl	8010ccc <siprintf>
				printString(text);
 8001296:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff fa62 	bl	8000764 <printString>
		for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i++)
 80012a0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80012a4:	3301      	adds	r3, #1
 80012a6:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 80012aa:	4b0a      	ldr	r3, [pc, #40]	@ (80012d4 <printADC12data+0x28c>)
 80012ac:	f8d3 2708 	ldr.w	r2, [r3, #1800]	@ 0x708
 80012b0:	4613      	mov	r3, r2
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	4413      	add	r3, r2
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	461a      	mov	r2, r3
 80012ba:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80012be:	429a      	cmp	r2, r3
 80012c0:	f63f aed9 	bhi.w	8001076 <printADC12data+0x2e>
			}
		}
	}
}
 80012c4:	bf00      	nop
 80012c6:	f507 77ce 	add.w	r7, r7, #412	@ 0x19c
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012ce:	bf00      	nop
 80012d0:	24000000 	.word	0x24000000
 80012d4:	240001b4 	.word	0x240001b4
 80012d8:	080117a8 	.word	0x080117a8
 80012dc:	2aaaaaab 	.word	0x2aaaaaab
 80012e0:	080117b4 	.word	0x080117b4

080012e4 <freqCorrection>:

//Calculate frequency correction
//Returns 1 if a valid frequency correction is calculated, otherwise 0
uint8_t freqCorrection(int16_t *freqCorr)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08e      	sub	sp, #56	@ 0x38
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	int start_index=0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	637b      	str	r3, [r7, #52]	@ 0x34
	int stop_index=0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	633b      	str	r3, [r7, #48]	@ 0x30
	int number_of_lows=0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]
	int lowDetected = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int highDetected = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	62bb      	str	r3, [r7, #40]	@ 0x28
	float min = 100000;
 8001300:	4b55      	ldr	r3, [pc, #340]	@ (8001458 <freqCorrection+0x174>)
 8001302:	627b      	str	r3, [r7, #36]	@ 0x24
	float max = -100000;
 8001304:	4b55      	ldr	r3, [pc, #340]	@ (800145c <freqCorrection+0x178>)
 8001306:	623b      	str	r3, [r7, #32]
	float norm = 0;
 8001308:	f04f 0300 	mov.w	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]

	//Find when MOSFET branch is on (start and stop time)
	//Find minimum and maximum value of bridge current
 	for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i=i+6)
 800130e:	2300      	movs	r3, #0
 8001310:	61bb      	str	r3, [r7, #24]
 8001312:	e043      	b.n	800139c <freqCorrection+0xb8>
	{
		// Find minimum of bridge current
		float data = convertADC12data(i+ADC2_Is, NULL);
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	3301      	adds	r3, #1
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fd48 	bl	8000db0 <convertADC12data>
 8001320:	ed87 0a02 	vstr	s0, [r7, #8]
		if (data < min)
 8001324:	ed97 7a02 	vldr	s14, [r7, #8]
 8001328:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800132c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001334:	d503      	bpl.n	800133e <freqCorrection+0x5a>
		{
			min = data;
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	627b      	str	r3, [r7, #36]	@ 0x24
			//HAL_UART_Transmit(huart3, min);
			printCR();
 800133a:	f7ff fa03 	bl	8000744 <printCR>
		}
		// Find maximum
		if (data > max)
 800133e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001342:	edd7 7a08 	vldr	s15, [r7, #32]
 8001346:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800134a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800134e:	dd01      	ble.n	8001354 <freqCorrection+0x70>
		{
			max = data;
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	623b      	str	r3, [r7, #32]
		}
		// Check for low
		if (!lowDetected && sADC.adc12_data[i+ADC1_TIM1_CH1] < 500)
 8001354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001356:	2b00      	cmp	r3, #0
 8001358:	d10a      	bne.n	8001370 <freqCorrection+0x8c>
 800135a:	4a41      	ldr	r2, [pc, #260]	@ (8001460 <freqCorrection+0x17c>)
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001362:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001366:	d203      	bcs.n	8001370 <freqCorrection+0x8c>
		{
			//First low detected
			start_index = i; 		// Store index of first low detected
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	637b      	str	r3, [r7, #52]	@ 0x34
			lowDetected = 1;
 800136c:	2301      	movs	r3, #1
 800136e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		}
		//Check for high
		if (!highDetected && lowDetected && sADC.adc12_data[i+ADC1_TIM1_CH1] > 65000)
 8001370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001372:	2b00      	cmp	r3, #0
 8001374:	d10f      	bne.n	8001396 <freqCorrection+0xb2>
 8001376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001378:	2b00      	cmp	r3, #0
 800137a:	d00c      	beq.n	8001396 <freqCorrection+0xb2>
 800137c:	4a38      	ldr	r2, [pc, #224]	@ (8001460 <freqCorrection+0x17c>)
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001384:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 8001388:	4293      	cmp	r3, r2
 800138a:	d904      	bls.n	8001396 <freqCorrection+0xb2>
		{
			//High after first low detected
			stop_index = i-6;		// Store index of last low
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	3b06      	subs	r3, #6
 8001390:	633b      	str	r3, [r7, #48]	@ 0x30
			highDetected = 1;
 8001392:	2301      	movs	r3, #1
 8001394:	62bb      	str	r3, [r7, #40]	@ 0x28
 	for (int i=0; i<2*ADC12_NO_CHANNELS*sADC.nADC12Read; i=i+6)
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	3306      	adds	r3, #6
 800139a:	61bb      	str	r3, [r7, #24]
 800139c:	4b30      	ldr	r3, [pc, #192]	@ (8001460 <freqCorrection+0x17c>)
 800139e:	f8d3 2708 	ldr.w	r2, [r3, #1800]	@ 0x708
 80013a2:	4613      	mov	r3, r2
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	4413      	add	r3, r2
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	461a      	mov	r2, r3
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d8b0      	bhi.n	8001314 <freqCorrection+0x30>
		}
	}

	// Check maximum and minimum difference
	norm = max - min;
 80013b2:	ed97 7a08 	vldr	s14, [r7, #32]
 80013b6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80013ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013be:	edc7 7a07 	vstr	s15, [r7, #28]
	if (norm < 10)
 80013c2:	edd7 7a07 	vldr	s15, [r7, #28]
 80013c6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80013ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d2:	d501      	bpl.n	80013d8 <freqCorrection+0xf4>
		norm = max;
 80013d4:	6a3b      	ldr	r3, [r7, #32]
 80013d6:	61fb      	str	r3, [r7, #28]

	number_of_lows = (stop_index - start_index)/6 + 1;
 80013d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80013da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	4a21      	ldr	r2, [pc, #132]	@ (8001464 <freqCorrection+0x180>)
 80013e0:	fb82 1203 	smull	r1, r2, r2, r3
 80013e4:	17db      	asrs	r3, r3, #31
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	3301      	adds	r3, #1
 80013ea:	617b      	str	r3, [r7, #20]
	if (lowDetected && highDetected && (number_of_lows >= 5))
 80013ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d02c      	beq.n	800144c <freqCorrection+0x168>
 80013f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d029      	beq.n	800144c <freqCorrection+0x168>
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	2b04      	cmp	r3, #4
 80013fc:	dd26      	ble.n	800144c <freqCorrection+0x168>
	{
		float upper = convertADC12data(start_index+ADC2_Is+6, NULL);
 80013fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001400:	3307      	adds	r3, #7
 8001402:	2100      	movs	r1, #0
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fcd3 	bl	8000db0 <convertADC12data>
 800140a:	ed87 0a04 	vstr	s0, [r7, #16]
		float lower = convertADC12data(stop_index+ADC2_Is-6, NULL);
 800140e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001410:	3b05      	subs	r3, #5
 8001412:	2100      	movs	r1, #0
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff fccb 	bl	8000db0 <convertADC12data>
 800141a:	ed87 0a03 	vstr	s0, [r7, #12]
		*freqCorr = (int16_t) 1000*(upper - lower)/norm;
 800141e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001422:	edd7 7a03 	vldr	s15, [r7, #12]
 8001426:	ee77 7a67 	vsub.f32	s15, s14, s15
 800142a:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001468 <freqCorrection+0x184>
 800142e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001432:	ed97 7a07 	vldr	s14, [r7, #28]
 8001436:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800143a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800143e:	ee17 3a90 	vmov	r3, s15
 8001442:	b21a      	sxth	r2, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	801a      	strh	r2, [r3, #0]
		return(1);
 8001448:	2301      	movs	r3, #1
 800144a:	e000      	b.n	800144e <freqCorrection+0x16a>
	}
	else
		return(0);
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3738      	adds	r7, #56	@ 0x38
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	47c35000 	.word	0x47c35000
 800145c:	c7c35000 	.word	0xc7c35000
 8001460:	240001b4 	.word	0x240001b4
 8001464:	2aaaaaab 	.word	0x2aaaaaab
 8001468:	447a0000 	.word	0x447a0000
 800146c:	00000000 	.word	0x00000000

08001470 <measureBridgePlasmaADC12>:


// Measure bridge current, plasma voltage, and bridge current using ADC1 and ADC2 for one period
// After the measurement is done the function doneMeasuringBridgePlasmaADC12 is called
void measureBridgePlasmaADC12(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_SET);

	//Calculate number of reads needed for one period
	sADC.nADC12Read = 2 * ((uint32_t) ((1/(float) sHbridge.frequency)/ADC12_GROUP_READTIME));
 8001476:	4b26      	ldr	r3, [pc, #152]	@ (8001510 <measureBridgePlasmaADC12+0xa0>)
 8001478:	885b      	ldrh	r3, [r3, #2]
 800147a:	ee07 3a90 	vmov	s15, r3
 800147e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001482:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001486:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800148a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800148e:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8001508 <measureBridgePlasmaADC12+0x98>
 8001492:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001496:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800149a:	ee17 3a90 	vmov	r3, s15
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	4a1c      	ldr	r2, [pc, #112]	@ (8001514 <measureBridgePlasmaADC12+0xa4>)
 80014a2:	f8c2 3708 	str.w	r3, [r2, #1800]	@ 0x708
	sADC.nADC12Read +=2; //Add to see the start of next period
 80014a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001514 <measureBridgePlasmaADC12+0xa4>)
 80014a8:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
 80014ac:	3302      	adds	r3, #2
 80014ae:	4a19      	ldr	r2, [pc, #100]	@ (8001514 <measureBridgePlasmaADC12+0xa4>)
 80014b0:	f8c2 3708 	str.w	r3, [r2, #1800]	@ 0x708

	//Start ADC1 and ADC2 measurements
	if (sADC.nADC12Read <= ADC12_MAX_GROUP)
 80014b4:	4b17      	ldr	r3, [pc, #92]	@ (8001514 <measureBridgePlasmaADC12+0xa4>)
 80014b6:	f8d3 3708 	ldr.w	r3, [r3, #1800]	@ 0x708
 80014ba:	2b64      	cmp	r3, #100	@ 0x64
 80014bc:	d81a      	bhi.n	80014f4 <measureBridgePlasmaADC12+0x84>
	{
		//Calculate the number DMA transfers needed
		uint32_t noDMARequests = ADC12_NO_CHANNELS*sADC.nADC12Read;
 80014be:	4b15      	ldr	r3, [pc, #84]	@ (8001514 <measureBridgePlasmaADC12+0xa4>)
 80014c0:	f8d3 2708 	ldr.w	r2, [r3, #1800]	@ 0x708
 80014c4:	4613      	mov	r3, r2
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	4413      	add	r3, r2
 80014ca:	607b      	str	r3, [r7, #4]

		// Start reading ADC1 and ADC2
		sADC.adc12_reading = 1;
 80014cc:	4b11      	ldr	r3, [pc, #68]	@ (8001514 <measureBridgePlasmaADC12+0xa4>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	f8a3 270e 	strh.w	r2, [r3, #1806]	@ 0x70e

		//This will start the ADC1 and ADC2 measurements when H-BRIDGE_B_CTRL (TIM1_CH1) goes from 0 to 1.
		//When the measurements are done doneMeasuringBridgePlasmaADC12 is called.
		HAL_StatusTypeDef HALresp = HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t *) sADC.adc12_data, noDMARequests);
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	490f      	ldr	r1, [pc, #60]	@ (8001514 <measureBridgePlasmaADC12+0xa4>)
 80014d8:	480f      	ldr	r0, [pc, #60]	@ (8001518 <measureBridgePlasmaADC12+0xa8>)
 80014da:	f005 fc19 	bl	8006d10 <HAL_ADCEx_MultiModeStart_DMA>
 80014de:	4603      	mov	r3, r0
 80014e0:	70fb      	strb	r3, [r7, #3]
		if (HALresp != HAL_OK)
 80014e2:	78fb      	ldrb	r3, [r7, #3]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d008      	beq.n	80014fa <measureBridgePlasmaADC12+0x8a>
		{
			printHALErrorStatus(HALresp, "measureBridgePlasmaADC12");
 80014e8:	78fb      	ldrb	r3, [r7, #3]
 80014ea:	490c      	ldr	r1, [pc, #48]	@ (800151c <measureBridgePlasmaADC12+0xac>)
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff f9c1 	bl	8000874 <printHALErrorStatus>
	}
	else
		printString("** ERROR ** pADC.nRead > ADC12_MAX_GROUP");

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
}
 80014f2:	e002      	b.n	80014fa <measureBridgePlasmaADC12+0x8a>
		printString("** ERROR ** pADC.nRead > ADC12_MAX_GROUP");
 80014f4:	480a      	ldr	r0, [pc, #40]	@ (8001520 <measureBridgePlasmaADC12+0xb0>)
 80014f6:	f7ff f935 	bl	8000764 <printString>
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	f3af 8000 	nop.w
 8001508:	a0b5ed8d 	.word	0xa0b5ed8d
 800150c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001510:	2400001c 	.word	0x2400001c
 8001514:	240001b4 	.word	0x240001b4
 8001518:	24000908 	.word	0x24000908
 800151c:	0801180c 	.word	0x0801180c
 8001520:	08011828 	.word	0x08011828

08001524 <doneMeasuringBridgePlasmaADC12>:

// Done measuring bridge current, plasma voltage, and bridge current
void doneMeasuringBridgePlasmaADC12(uint32_t errorCode)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
	static uint32_t count = 0;

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_SET);

	count++;
 800152c:	4b22      	ldr	r3, [pc, #136]	@ (80015b8 <doneMeasuringBridgePlasmaADC12+0x94>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	3301      	adds	r3, #1
 8001532:	4a21      	ldr	r2, [pc, #132]	@ (80015b8 <doneMeasuringBridgePlasmaADC12+0x94>)
 8001534:	6013      	str	r3, [r2, #0]

	// Done reading ADC1 and ADC2
	sADC.adc12_reading = 0;
 8001536:	4b21      	ldr	r3, [pc, #132]	@ (80015bc <doneMeasuringBridgePlasmaADC12+0x98>)
 8001538:	2200      	movs	r2, #0
 800153a:	f8a3 270e 	strh.w	r2, [r3, #1806]	@ 0x70e

	if (errorCode == HAL_ADC_ERROR_NONE)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d128      	bne.n	8001596 <doneMeasuringBridgePlasmaADC12+0x72>
	{
		if (sFlashConfig.mode == RUN_MODE)
 8001544:	4b1e      	ldr	r3, [pc, #120]	@ (80015c0 <doneMeasuringBridgePlasmaADC12+0x9c>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d12b      	bne.n	80015a4 <doneMeasuringBridgePlasmaADC12+0x80>

			//TODO Check plasma voltage VplaL1 and VplaL2 (To high? Not present?)
			//TODO Calculate plasma voltage Vrms, Vmax and Vmin

			//Adjust H-bridge frequency
			if (powerStatus == V500_ON)
 800154c:	4b1d      	ldr	r3, [pc, #116]	@ (80015c4 <doneMeasuringBridgePlasmaADC12+0xa0>)
 800154e:	881b      	ldrh	r3, [r3, #0]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d127      	bne.n	80015a4 <doneMeasuringBridgePlasmaADC12+0x80>
			{
				//Adjust H-bridge frequency
				int16_t freqCorr = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	81fb      	strh	r3, [r7, #14]
				if (freqCorrection(&freqCorr))
 8001558:	f107 030e 	add.w	r3, r7, #14
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fec1 	bl	80012e4 <freqCorrection>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d008      	beq.n	800157a <doneMeasuringBridgePlasmaADC12+0x56>
					sHbridge.frequency += freqCorr;
 8001568:	4b17      	ldr	r3, [pc, #92]	@ (80015c8 <doneMeasuringBridgePlasmaADC12+0xa4>)
 800156a:	885a      	ldrh	r2, [r3, #2]
 800156c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001570:	b29b      	uxth	r3, r3
 8001572:	4413      	add	r3, r2
 8001574:	b29a      	uxth	r2, r3
 8001576:	4b14      	ldr	r3, [pc, #80]	@ (80015c8 <doneMeasuringBridgePlasmaADC12+0xa4>)
 8001578:	805a      	strh	r2, [r3, #2]
				//TODO Adjust H-bridge dead time
				//sHbridge.deadtime = new setting;
				programHbridge();
 800157a:	f7ff fa19 	bl	80009b0 <programHbridge>
					HAL_Delay(1);	//Allow H-bridge to settle with new settings
 800157e:	2001      	movs	r0, #1
 8001580:	f002 fe26 	bl	80041d0 <HAL_Delay>
				if (count % 2048)
 8001584:	4b0c      	ldr	r3, [pc, #48]	@ (80015b8 <doneMeasuringBridgePlasmaADC12+0x94>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800158c:	2b00      	cmp	r3, #0
 800158e:	d009      	beq.n	80015a4 <doneMeasuringBridgePlasmaADC12+0x80>
					printHbridgeData();
 8001590:	f7ff f9e6 	bl	8000960 <printHbridgeData>
 8001594:	e006      	b.n	80015a4 <doneMeasuringBridgePlasmaADC12+0x80>
			}
		}
	}
	else
	{
		printNumber("ADC12 Error Code: ", errorCode, 1);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	b29b      	uxth	r3, r3
 800159a:	2201      	movs	r2, #1
 800159c:	4619      	mov	r1, r3
 800159e:	480b      	ldr	r0, [pc, #44]	@ (80015cc <doneMeasuringBridgePlasmaADC12+0xa8>)
 80015a0:	f7ff f922 	bl	80007e8 <printNumber>
	}

	//Measure ADC3 voltages
	if (sFlashConfig.mode == RUN_MODE)
 80015a4:	4b06      	ldr	r3, [pc, #24]	@ (80015c0 <doneMeasuringBridgePlasmaADC12+0x9c>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d101      	bne.n	80015b0 <doneMeasuringBridgePlasmaADC12+0x8c>
		measureVoltagesTemperaturesADC3();
 80015ac:	f000 f9ec 	bl	8001988 <measureVoltagesTemperaturesADC3>

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
}
 80015b0:	bf00      	nop
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	240008cc 	.word	0x240008cc
 80015bc:	240001b4 	.word	0x240001b4
 80015c0:	240008c8 	.word	0x240008c8
 80015c4:	240008c4 	.word	0x240008c4
 80015c8:	2400001c 	.word	0x2400001c
 80015cc:	08011854 	.word	0x08011854

080015d0 <autoFreqAdj>:

// Automatically Correct the Drive Frequency until user presses any key
void autoFreqAdj(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b09a      	sub	sp, #104	@ 0x68
 80015d4:	af00      	add	r7, sp, #0
	char input;

	printString("\n\r%Press any key to exit");
 80015d6:	483b      	ldr	r0, [pc, #236]	@ (80016c4 <autoFreqAdj+0xf4>)
 80015d8:	f7ff f8c4 	bl	8000764 <printString>

	while (!(HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 1) == HAL_OK))
 80015dc:	e062      	b.n	80016a4 <autoFreqAdj+0xd4>
	{
		measureBridgePlasmaADC12();
 80015de:	f7ff ff47 	bl	8001470 <measureBridgePlasmaADC12>
		//Wait until ADC3 reading is done
		while (sADC.adc12_reading);
 80015e2:	bf00      	nop
 80015e4:	4b38      	ldr	r3, [pc, #224]	@ (80016c8 <autoFreqAdj+0xf8>)
 80015e6:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	@ 0x70e
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1f9      	bne.n	80015e4 <autoFreqAdj+0x14>
		//printADC12data();

		int16_t freqCorr;
		freqCorrection(&freqCorr);
 80015f0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff fe75 	bl	80012e4 <freqCorrection>

		char text[100];
		sprintf(text, "\n\rFrequency correction: %i", (int) freqCorr);
 80015fa:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	@ 0x64
 80015fe:	461a      	mov	r2, r3
 8001600:	463b      	mov	r3, r7
 8001602:	4932      	ldr	r1, [pc, #200]	@ (80016cc <autoFreqAdj+0xfc>)
 8001604:	4618      	mov	r0, r3
 8001606:	f00f fb61 	bl	8010ccc <siprintf>
		printString(text);
 800160a:	463b      	mov	r3, r7
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff f8a9 	bl	8000764 <printString>

		if (sHbridge.frequency + freqCorr > MAX_FREQUENCY) //GetUint16Input(&sHbridge.frequency, 1, MIN_FREQUENCY, MAX_FREQUENCY))
 8001612:	4b2f      	ldr	r3, [pc, #188]	@ (80016d0 <autoFreqAdj+0x100>)
 8001614:	885b      	ldrh	r3, [r3, #2]
 8001616:	461a      	mov	r2, r3
 8001618:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	@ 0x64
 800161c:	4413      	add	r3, r2
 800161e:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 8001622:	4293      	cmp	r3, r2
 8001624:	dd13      	ble.n	800164e <autoFreqAdj+0x7e>
		{   // Calculated freq is higher than max

			sprintf(text, "\n\r%i is higher than max freq", (int) sHbridge.frequency + freqCorr);
 8001626:	4b2a      	ldr	r3, [pc, #168]	@ (80016d0 <autoFreqAdj+0x100>)
 8001628:	885b      	ldrh	r3, [r3, #2]
 800162a:	461a      	mov	r2, r3
 800162c:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	@ 0x64
 8001630:	441a      	add	r2, r3
 8001632:	463b      	mov	r3, r7
 8001634:	4927      	ldr	r1, [pc, #156]	@ (80016d4 <autoFreqAdj+0x104>)
 8001636:	4618      	mov	r0, r3
 8001638:	f00f fb48 	bl	8010ccc <siprintf>
			printString(text);
 800163c:	463b      	mov	r3, r7
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff f890 	bl	8000764 <printString>
			sHbridge.frequency = MAX_FREQUENCY;
 8001644:	4b22      	ldr	r3, [pc, #136]	@ (80016d0 <autoFreqAdj+0x100>)
 8001646:	f64f 52e8 	movw	r2, #65000	@ 0xfde8
 800164a:	805a      	strh	r2, [r3, #2]
 800164c:	e026      	b.n	800169c <autoFreqAdj+0xcc>
		}
		else if (sHbridge.frequency + freqCorr < MIN_FREQUENCY)
 800164e:	4b20      	ldr	r3, [pc, #128]	@ (80016d0 <autoFreqAdj+0x100>)
 8001650:	885b      	ldrh	r3, [r3, #2]
 8001652:	461a      	mov	r2, r3
 8001654:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	@ 0x64
 8001658:	4413      	add	r3, r2
 800165a:	f643 2297 	movw	r2, #14999	@ 0x3a97
 800165e:	4293      	cmp	r3, r2
 8001660:	dc13      	bgt.n	800168a <autoFreqAdj+0xba>
		{
			sprintf(text, "\n\r%i is lower than min freq", (int) sHbridge.frequency + freqCorr);
 8001662:	4b1b      	ldr	r3, [pc, #108]	@ (80016d0 <autoFreqAdj+0x100>)
 8001664:	885b      	ldrh	r3, [r3, #2]
 8001666:	461a      	mov	r2, r3
 8001668:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	@ 0x64
 800166c:	441a      	add	r2, r3
 800166e:	463b      	mov	r3, r7
 8001670:	4919      	ldr	r1, [pc, #100]	@ (80016d8 <autoFreqAdj+0x108>)
 8001672:	4618      	mov	r0, r3
 8001674:	f00f fb2a 	bl	8010ccc <siprintf>
			printString(text);
 8001678:	463b      	mov	r3, r7
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff f872 	bl	8000764 <printString>

			sHbridge.frequency = MIN_FREQUENCY;
 8001680:	4b13      	ldr	r3, [pc, #76]	@ (80016d0 <autoFreqAdj+0x100>)
 8001682:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8001686:	805a      	strh	r2, [r3, #2]
 8001688:	e008      	b.n	800169c <autoFreqAdj+0xcc>

		}
		else
		{
			sHbridge.frequency = sHbridge.frequency + freqCorr;
 800168a:	4b11      	ldr	r3, [pc, #68]	@ (80016d0 <autoFreqAdj+0x100>)
 800168c:	885a      	ldrh	r2, [r3, #2]
 800168e:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	@ 0x64
 8001692:	b29b      	uxth	r3, r3
 8001694:	4413      	add	r3, r2
 8001696:	b29a      	uxth	r2, r3
 8001698:	4b0d      	ldr	r3, [pc, #52]	@ (80016d0 <autoFreqAdj+0x100>)
 800169a:	805a      	strh	r2, [r3, #2]
		}

		programHbridge();
 800169c:	f7ff f988 	bl	80009b0 <programHbridge>
		printHbridgeData();
 80016a0:	f7ff f95e 	bl	8000960 <printHbridgeData>
	while (!(HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 1) == HAL_OK))
 80016a4:	f107 0167 	add.w	r1, r7, #103	@ 0x67
 80016a8:	2301      	movs	r3, #1
 80016aa:	2201      	movs	r2, #1
 80016ac:	480b      	ldr	r0, [pc, #44]	@ (80016dc <autoFreqAdj+0x10c>)
 80016ae:	f00d ffd6 	bl	800f65e <HAL_UART_Receive>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d192      	bne.n	80015de <autoFreqAdj+0xe>
	}
}
 80016b8:	bf00      	nop
 80016ba:	bf00      	nop
 80016bc:	3768      	adds	r7, #104	@ 0x68
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	08011868 	.word	0x08011868
 80016c8:	240001b4 	.word	0x240001b4
 80016cc:	08011884 	.word	0x08011884
 80016d0:	2400001c 	.word	0x2400001c
 80016d4:	080118a0 	.word	0x080118a0
 80016d8:	080118c0 	.word	0x080118c0
 80016dc:	24000cb8 	.word	0x24000cb8

080016e0 <convertADC3data>:

//Convert ADC3 data to voltages
float convertADC3data(uint32_t item, char **text)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
	float result = 0;
 80016ea:	f04f 0300 	mov.w	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]

	switch (item) {
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2b0a      	cmp	r3, #10
 80016f4:	f200 80c5 	bhi.w	8001882 <convertADC3data+0x1a2>
 80016f8:	a201      	add	r2, pc, #4	@ (adr r2, 8001700 <convertADC3data+0x20>)
 80016fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016fe:	bf00      	nop
 8001700:	0800172d 	.word	0x0800172d
 8001704:	0800175f 	.word	0x0800175f
 8001708:	08001791 	.word	0x08001791
 800170c:	080017c3 	.word	0x080017c3
 8001710:	080017d1 	.word	0x080017d1
 8001714:	0800180b 	.word	0x0800180b
 8001718:	0800183d 	.word	0x0800183d
 800171c:	0800184b 	.word	0x0800184b
 8001720:	08001859 	.word	0x08001859
 8001724:	08001867 	.word	0x08001867
 8001728:	08001875 	.word	0x08001875
		case ADC3_VBAT:
			result =  1000*((9.76+169.0)/9.76)*3.3*(((float) sADC.adc3_data[ADC3_VBAT])/4096.0);
 800172c:	4b66      	ldr	r3, [pc, #408]	@ (80018c8 <convertADC3data+0x1e8>)
 800172e:	f8b3 34b0 	ldrh.w	r3, [r3, #1200]	@ 0x4b0
 8001732:	ee07 3a90 	vmov	s15, r3
 8001736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800173a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800173e:	ed9f 5b56 	vldr	d5, [pc, #344]	@ 8001898 <convertADC3data+0x1b8>
 8001742:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001746:	ed9f 6b56 	vldr	d6, [pc, #344]	@ 80018a0 <convertADC3data+0x1c0>
 800174a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800174e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001752:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_VBAT (mV)";
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	4a5c      	ldr	r2, [pc, #368]	@ (80018cc <convertADC3data+0x1ec>)
 800175a:	601a      	str	r2, [r3, #0]
			break;
 800175c:	e091      	b.n	8001882 <convertADC3data+0x1a2>
		case ADC3_15V:
			result =  1000*((30.0+120.0)/30.0)*3.3*(((float) sADC.adc3_data[ADC3_15V])/4096.0);
 800175e:	4b5a      	ldr	r3, [pc, #360]	@ (80018c8 <convertADC3data+0x1e8>)
 8001760:	f8b3 34b2 	ldrh.w	r3, [r3, #1202]	@ 0x4b2
 8001764:	ee07 3a90 	vmov	s15, r3
 8001768:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800176c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001770:	ed9f 5b49 	vldr	d5, [pc, #292]	@ 8001898 <convertADC3data+0x1b8>
 8001774:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001778:	ed9f 6b4b 	vldr	d6, [pc, #300]	@ 80018a8 <convertADC3data+0x1c8>
 800177c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001780:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001784:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_15V (mV)";
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	4a51      	ldr	r2, [pc, #324]	@ (80018d0 <convertADC3data+0x1f0>)
 800178c:	601a      	str	r2, [r3, #0]
			break;
 800178e:	e078      	b.n	8001882 <convertADC3data+0x1a2>
		case ADC3_3_3V:
			result =  1000*((30.0+3.0)/30.0)*3.3*(((float) sADC.adc3_data[ADC3_3_3V])/4096.0);
 8001790:	4b4d      	ldr	r3, [pc, #308]	@ (80018c8 <convertADC3data+0x1e8>)
 8001792:	f8b3 34b4 	ldrh.w	r3, [r3, #1204]	@ 0x4b4
 8001796:	ee07 3a90 	vmov	s15, r3
 800179a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800179e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80017a2:	ed9f 5b3d 	vldr	d5, [pc, #244]	@ 8001898 <convertADC3data+0x1b8>
 80017a6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80017aa:	ed9f 6b41 	vldr	d6, [pc, #260]	@ 80018b0 <convertADC3data+0x1d0>
 80017ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80017b2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80017b6:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_3_3V (mV)";
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	4a45      	ldr	r2, [pc, #276]	@ (80018d4 <convertADC3data+0x1f4>)
 80017be:	601a      	str	r2, [r3, #0]
			break;
 80017c0:	e05f      	b.n	8001882 <convertADC3data+0x1a2>
		case ADC3_NC3:
			result = 0;
 80017c2:	f04f 0300 	mov.w	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_NC3";
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	4a43      	ldr	r2, [pc, #268]	@ (80018d8 <convertADC3data+0x1f8>)
 80017cc:	601a      	str	r2, [r3, #0]
			break;
 80017ce:	e058      	b.n	8001882 <convertADC3data+0x1a2>
		case ADC3_BridgeTemp:
			result = 1000*((float) sADC.adc3_data[ADC3_BridgeTemp])*3.3/4096.0;
 80017d0:	4b3d      	ldr	r3, [pc, #244]	@ (80018c8 <convertADC3data+0x1e8>)
 80017d2:	f8b3 34b8 	ldrh.w	r3, [r3, #1208]	@ 0x4b8
 80017d6:	ee07 3a90 	vmov	s15, r3
 80017da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017de:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80018dc <convertADC3data+0x1fc>
 80017e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017ea:	ed9f 6b33 	vldr	d6, [pc, #204]	@ 80018b8 <convertADC3data+0x1d8>
 80017ee:	ee27 6b06 	vmul.f64	d6, d7, d6
 80017f2:	ed9f 5b29 	vldr	d5, [pc, #164]	@ 8001898 <convertADC3data+0x1b8>
 80017f6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80017fa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80017fe:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_BridgeTemp (mV)";
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	4a36      	ldr	r2, [pc, #216]	@ (80018e0 <convertADC3data+0x200>)
 8001806:	601a      	str	r2, [r3, #0]
			break;
 8001808:	e03b      	b.n	8001882 <convertADC3data+0x1a2>
		case ADC3_500VDC:
			result =  1000*((12.0+2000.0)/12.0)*3.3*(((float) sADC.adc3_data[ADC3_500VDC])/4096.0);
 800180a:	4b2f      	ldr	r3, [pc, #188]	@ (80018c8 <convertADC3data+0x1e8>)
 800180c:	f8b3 34ba 	ldrh.w	r3, [r3, #1210]	@ 0x4ba
 8001810:	ee07 3a90 	vmov	s15, r3
 8001814:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001818:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800181c:	ed9f 5b1e 	vldr	d5, [pc, #120]	@ 8001898 <convertADC3data+0x1b8>
 8001820:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001824:	ed9f 6b26 	vldr	d6, [pc, #152]	@ 80018c0 <convertADC3data+0x1e0>
 8001828:	ee27 7b06 	vmul.f64	d7, d7, d6
 800182c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001830:	edc7 7a03 	vstr	s15, [r7, #12]
			*text ="ADC3_500VDC (mV)";
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	4a2b      	ldr	r2, [pc, #172]	@ (80018e4 <convertADC3data+0x204>)
 8001838:	601a      	str	r2, [r3, #0]
			break;
 800183a:	e022      	b.n	8001882 <convertADC3data+0x1a2>
		case ADC3_Thermistor1:
			result = 0;
 800183c:	f04f 0300 	mov.w	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_Thermistor1";
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	4a28      	ldr	r2, [pc, #160]	@ (80018e8 <convertADC3data+0x208>)
 8001846:	601a      	str	r2, [r3, #0]
			break;
 8001848:	e01b      	b.n	8001882 <convertADC3data+0x1a2>
		case ADC3_Thermistor2:
			result = 0;
 800184a:	f04f 0300 	mov.w	r3, #0
 800184e:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_Thermistor2";
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	4a26      	ldr	r2, [pc, #152]	@ (80018ec <convertADC3data+0x20c>)
 8001854:	601a      	str	r2, [r3, #0]
			break;
 8001856:	e014      	b.n	8001882 <convertADC3data+0x1a2>
		case ADC3_Thermistor3:
			result = 0;
 8001858:	f04f 0300 	mov.w	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_Thermistor3";
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	4a23      	ldr	r2, [pc, #140]	@ (80018f0 <convertADC3data+0x210>)
 8001862:	601a      	str	r2, [r3, #0]
			break;
 8001864:	e00d      	b.n	8001882 <convertADC3data+0x1a2>
		case ADC3_Thermistor4:
			result = 0;
 8001866:	f04f 0300 	mov.w	r3, #0
 800186a:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_Thermistor4";
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	4a21      	ldr	r2, [pc, #132]	@ (80018f4 <convertADC3data+0x214>)
 8001870:	601a      	str	r2, [r3, #0]
			break;
 8001872:	e006      	b.n	8001882 <convertADC3data+0x1a2>
		case ADC3_NC10:
			result = 0;
 8001874:	f04f 0300 	mov.w	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
			*text ="ADC3_NC10";
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	4a1e      	ldr	r2, [pc, #120]	@ (80018f8 <convertADC3data+0x218>)
 800187e:	601a      	str	r2, [r3, #0]
			break;
 8001880:	bf00      	nop
	}

	return(result);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	ee07 3a90 	vmov	s15, r3
}
 8001888:	eeb0 0a67 	vmov.f32	s0, s15
 800188c:	3714      	adds	r7, #20
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	00000000 	.word	0x00000000
 800189c:	40b00000 	.word	0x40b00000
 80018a0:	9714fbcd 	.word	0x9714fbcd
 80018a4:	40ed832c 	.word	0x40ed832c
 80018a8:	00000000 	.word	0x00000000
 80018ac:	40d01d00 	.word	0x40d01d00
 80018b0:	00000000 	.word	0x00000000
 80018b4:	40ac5c00 	.word	0x40ac5c00
 80018b8:	66666666 	.word	0x66666666
 80018bc:	400a6666 	.word	0x400a6666
 80018c0:	ffffffff 	.word	0xffffffff
 80018c4:	4120e2a7 	.word	0x4120e2a7
 80018c8:	240001b4 	.word	0x240001b4
 80018cc:	080118dc 	.word	0x080118dc
 80018d0:	080118ec 	.word	0x080118ec
 80018d4:	080118fc 	.word	0x080118fc
 80018d8:	0801190c 	.word	0x0801190c
 80018dc:	447a0000 	.word	0x447a0000
 80018e0:	08011918 	.word	0x08011918
 80018e4:	08011930 	.word	0x08011930
 80018e8:	08011944 	.word	0x08011944
 80018ec:	08011958 	.word	0x08011958
 80018f0:	0801196c 	.word	0x0801196c
 80018f4:	08011980 	.word	0x08011980
 80018f8:	08011994 	.word	0x08011994

080018fc <printADC3data>:

//Print measured ADC3 data on UART3
void printADC3data(void)
{
 80018fc:	b590      	push	{r4, r7, lr}
 80018fe:	b09f      	sub	sp, #124	@ 0x7c
 8001900:	af02      	add	r7, sp, #8
	if (debug == 1)
 8001902:	4b1d      	ldr	r3, [pc, #116]	@ (8001978 <printADC3data+0x7c>)
 8001904:	881b      	ldrh	r3, [r3, #0]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d131      	bne.n	800196e <printADC3data+0x72>
	{
		printCR();
 800190a:	f7fe ff1b 	bl	8000744 <printCR>
		printNumber("No data: ", ADC3_DMA_REQUESTS, 1);
 800190e:	2201      	movs	r2, #1
 8001910:	210b      	movs	r1, #11
 8001912:	481a      	ldr	r0, [pc, #104]	@ (800197c <printADC3data+0x80>)
 8001914:	f7fe ff68 	bl	80007e8 <printNumber>
		for (int i=0; i<ADC3_DMA_REQUESTS; i++)
 8001918:	2300      	movs	r3, #0
 800191a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800191c:	e024      	b.n	8001968 <printADC3data+0x6c>
		{
			char text[100];
			char *p_text;
			float result = convertADC3data(i, &p_text);
 800191e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001920:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8001924:	4611      	mov	r1, r2
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff feda 	bl	80016e0 <convertADC3data>
 800192c:	ed87 0a1a 	vstr	s0, [r7, #104]	@ 0x68
			sprintf(text, "%2u %20s: %7u    (%6u)\n\r", i, p_text, (int) result, sADC.adc3_data[i]);
 8001930:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001932:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8001936:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800193a:	ee17 4a90 	vmov	r4, s15
 800193e:	4910      	ldr	r1, [pc, #64]	@ (8001980 <printADC3data+0x84>)
 8001940:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001942:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001946:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800194a:	4638      	mov	r0, r7
 800194c:	9301      	str	r3, [sp, #4]
 800194e:	9400      	str	r4, [sp, #0]
 8001950:	4613      	mov	r3, r2
 8001952:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001954:	490b      	ldr	r1, [pc, #44]	@ (8001984 <printADC3data+0x88>)
 8001956:	f00f f9b9 	bl	8010ccc <siprintf>
			printString(text);
 800195a:	463b      	mov	r3, r7
 800195c:	4618      	mov	r0, r3
 800195e:	f7fe ff01 	bl	8000764 <printString>
		for (int i=0; i<ADC3_DMA_REQUESTS; i++)
 8001962:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001964:	3301      	adds	r3, #1
 8001966:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001968:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800196a:	2b0a      	cmp	r3, #10
 800196c:	ddd7      	ble.n	800191e <printADC3data+0x22>
		}
	}
}
 800196e:	bf00      	nop
 8001970:	3774      	adds	r7, #116	@ 0x74
 8001972:	46bd      	mov	sp, r7
 8001974:	bd90      	pop	{r4, r7, pc}
 8001976:	bf00      	nop
 8001978:	24000000 	.word	0x24000000
 800197c:	080117a8 	.word	0x080117a8
 8001980:	240001b4 	.word	0x240001b4
 8001984:	080119a0 	.word	0x080119a0

08001988 <measureVoltagesTemperaturesADC3>:

// Measure voltages and temperatures using ADC3
// After the measurement is done the function doneMeasuringVoltagesTemperaturesADC3 is called
void measureVoltagesTemperaturesADC3(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_SET);

	// This will start the measurement of voltages and temperatures using ADC3
	sADC.adc3_reading = 1; //Started to read ADC3
 800198c:	4b05      	ldr	r3, [pc, #20]	@ (80019a4 <measureVoltagesTemperaturesADC3+0x1c>)
 800198e:	2201      	movs	r2, #1
 8001990:	f8a3 270c 	strh.w	r2, [r3, #1804]	@ 0x70c
	HAL_ADC_Start_DMA(&hadc3, (uint32_t *) sADC.adc3_data, ADC3_DMA_REQUESTS);
 8001994:	220b      	movs	r2, #11
 8001996:	4904      	ldr	r1, [pc, #16]	@ (80019a8 <measureVoltagesTemperaturesADC3+0x20>)
 8001998:	4804      	ldr	r0, [pc, #16]	@ (80019ac <measureVoltagesTemperaturesADC3+0x24>)
 800199a:	f003 fa97 	bl	8004ecc <HAL_ADC_Start_DMA>

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	240001b4 	.word	0x240001b4
 80019a8:	24000664 	.word	0x24000664
 80019ac:	240009e8 	.word	0x240009e8

080019b0 <doneMeasuringVoltagesTemperaturesADC3>:


// Done measuring voltages and temperatures
void doneMeasuringVoltagesTemperaturesADC3(uint32_t errorCode)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_SET);

	sADC.adc3_reading = 0; //Done reading ADC3
 80019b8:	4b0b      	ldr	r3, [pc, #44]	@ (80019e8 <doneMeasuringVoltagesTemperaturesADC3+0x38>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	f8a3 270c 	strh.w	r2, [r3, #1804]	@ 0x70c

	if (errorCode == HAL_ADC_ERROR_NONE)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d006      	beq.n	80019d4 <doneMeasuringVoltagesTemperaturesADC3+0x24>
		// TODO Check temperatures

	}
	else
	{
		printNumber("ADC12 Error Code: ", errorCode, 1);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	2201      	movs	r2, #1
 80019cc:	4619      	mov	r1, r3
 80019ce:	4807      	ldr	r0, [pc, #28]	@ (80019ec <doneMeasuringVoltagesTemperaturesADC3+0x3c>)
 80019d0:	f7fe ff0a 	bl	80007e8 <printNumber>
	}


	//Start ADC1 and ADC2 measurements
	if (sFlashConfig.mode == RUN_MODE)
 80019d4:	4b06      	ldr	r3, [pc, #24]	@ (80019f0 <doneMeasuringVoltagesTemperaturesADC3+0x40>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d101      	bne.n	80019e0 <doneMeasuringVoltagesTemperaturesADC3+0x30>
		measureBridgePlasmaADC12();
 80019dc:	f7ff fd48 	bl	8001470 <measureBridgePlasmaADC12>

	//HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
}
 80019e0:	bf00      	nop
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	240001b4 	.word	0x240001b4
 80019ec:	08011854 	.word	0x08011854
 80019f0:	240008c8 	.word	0x240008c8

080019f4 <GetNumber>:

// Get an integer number from UART3. If the number is valid, the function returns 1, otherwise 0.
static uint8_t GetNumber(int *number)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08a      	sub	sp, #40	@ 0x28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
	char input;
	char s_input[MAX_INPUT];
	int pos = 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	627b      	str	r3, [r7, #36]	@ 0x24
	//Wait for user input
	HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 100000);
 8001a00:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 8001a04:	4b2f      	ldr	r3, [pc, #188]	@ (8001ac4 <GetNumber+0xd0>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	482f      	ldr	r0, [pc, #188]	@ (8001ac8 <GetNumber+0xd4>)
 8001a0a:	f00d fe28 	bl	800f65e <HAL_UART_Receive>
	while (input != 13)
 8001a0e:	e039      	b.n	8001a84 <GetNumber+0x90>
	{
		// Backspace?
		if ((input == 127) && (pos > 0))
 8001a10:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001a14:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a16:	d10e      	bne.n	8001a36 <GetNumber+0x42>
 8001a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	dd0b      	ble.n	8001a36 <GetNumber+0x42>
		{
			// Delete digit
			HAL_UART_Transmit(&huart3, (uint8_t *) &input, 1, 1000);
 8001a1e:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 8001a22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a26:	2201      	movs	r2, #1
 8001a28:	4827      	ldr	r0, [pc, #156]	@ (8001ac8 <GetNumber+0xd4>)
 8001a2a:	f00d fd8a 	bl	800f542 <HAL_UART_Transmit>
			pos--;
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a30:	3b01      	subs	r3, #1
 8001a32:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a34:	e018      	b.n	8001a68 <GetNumber+0x74>
		}
		// A digit?
		else if ((input >= 48) && (input <=57))
 8001a36:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001a3a:	2b2f      	cmp	r3, #47	@ 0x2f
 8001a3c:	d914      	bls.n	8001a68 <GetNumber+0x74>
 8001a3e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001a42:	2b39      	cmp	r3, #57	@ 0x39
 8001a44:	d810      	bhi.n	8001a68 <GetNumber+0x74>
		{
			// Echo digit and store it
			HAL_UART_Transmit(&huart3, (uint8_t *) &input, 1, 1000);
 8001a46:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 8001a4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a4e:	2201      	movs	r2, #1
 8001a50:	481d      	ldr	r0, [pc, #116]	@ (8001ac8 <GetNumber+0xd4>)
 8001a52:	f00d fd76 	bl	800f542 <HAL_UART_Transmit>
			s_input[pos++] = input;
 8001a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a58:	1c5a      	adds	r2, r3, #1
 8001a5a:	627a      	str	r2, [r7, #36]	@ 0x24
 8001a5c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001a60:	3328      	adds	r3, #40	@ 0x28
 8001a62:	443b      	add	r3, r7
 8001a64:	f803 2c1c 	strb.w	r2, [r3, #-28]
		}

		// Get next character
		if (pos < MAX_INPUT-1)
 8001a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6a:	2b12      	cmp	r3, #18
 8001a6c:	dc07      	bgt.n	8001a7e <GetNumber+0x8a>
		{
			HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 100000);
 8001a6e:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 8001a72:	4b14      	ldr	r3, [pc, #80]	@ (8001ac4 <GetNumber+0xd0>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	4814      	ldr	r0, [pc, #80]	@ (8001ac8 <GetNumber+0xd4>)
 8001a78:	f00d fdf1 	bl	800f65e <HAL_UART_Receive>
 8001a7c:	e002      	b.n	8001a84 <GetNumber+0x90>
		}
		else
		{
			input = 13; // Terminate while loop
 8001a7e:	230d      	movs	r3, #13
 8001a80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	while (input != 13)
 8001a84:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001a88:	2b0d      	cmp	r3, #13
 8001a8a:	d1c1      	bne.n	8001a10 <GetNumber+0x1c>
		}
	}
	s_input[pos] = 0;
 8001a8c:	f107 020c 	add.w	r2, r7, #12
 8001a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a92:	4413      	add	r3, r2
 8001a94:	2200      	movs	r2, #0
 8001a96:	701a      	strb	r2, [r3, #0]
	if (pos > 0)
 8001a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	dd07      	ble.n	8001aae <GetNumber+0xba>
		*number = atoi(s_input);
 8001a9e:	f107 030c 	add.w	r3, r7, #12
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f00f f82e 	bl	8010b04 <atoi>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	601a      	str	r2, [r3, #0]
	return(pos > 0);
 8001aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	bfcc      	ite	gt
 8001ab4:	2301      	movgt	r3, #1
 8001ab6:	2300      	movle	r3, #0
 8001ab8:	b2db      	uxtb	r3, r3
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3728      	adds	r7, #40	@ 0x28
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	000186a0 	.word	0x000186a0
 8001ac8:	24000cb8 	.word	0x24000cb8

08001acc <GetUint16Input>:

// Get an 16bit unsigned number from UAR3 and validate the input againts min and max values
static uint8_t GetUint16Input(uint16_t *input, uint8_t bValidate, uint16_t min, uint16_t max)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b0a0      	sub	sp, #128	@ 0x80
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	4608      	mov	r0, r1
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4603      	mov	r3, r0
 8001adc:	72fb      	strb	r3, [r7, #11]
 8001ade:	460b      	mov	r3, r1
 8001ae0:	813b      	strh	r3, [r7, #8]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	80fb      	strh	r3, [r7, #6]
	int number;
	char s_output[100];
	uint8_t result;

	result = GetNumber(&number);
 8001ae6:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff ff82 	bl	80019f4 <GetNumber>
 8001af0:	4603      	mov	r3, r0
 8001af2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (bValidate)
 8001af6:	7afb      	ldrb	r3, [r7, #11]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d02f      	beq.n	8001b5c <GetUint16Input+0x90>
	{
		if (result && (number >= min) && (number <= max))
 8001afc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d013      	beq.n	8001b2c <GetUint16Input+0x60>
 8001b04:	893a      	ldrh	r2, [r7, #8]
 8001b06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	dc0f      	bgt.n	8001b2c <GetUint16Input+0x60>
 8001b0c:	88fa      	ldrh	r2, [r7, #6]
 8001b0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001b10:	429a      	cmp	r2, r3
 8001b12:	db0b      	blt.n	8001b2c <GetUint16Input+0x60>
		{
			*input =  number;
 8001b14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001b16:	b29a      	uxth	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, (uint8_t *) " - Ok\n\r", 7, 1000);
 8001b1c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b20:	2207      	movs	r2, #7
 8001b22:	4911      	ldr	r1, [pc, #68]	@ (8001b68 <GetUint16Input+0x9c>)
 8001b24:	4811      	ldr	r0, [pc, #68]	@ (8001b6c <GetUint16Input+0xa0>)
 8001b26:	f00d fd0c 	bl	800f542 <HAL_UART_Transmit>
 8001b2a:	e017      	b.n	8001b5c <GetUint16Input+0x90>
		}
		else
		{
			result = 0; //Indicate failure
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			sprintf(s_output, " - Invalid number, valid range %u - %u\n\r", min, max);
 8001b32:	893a      	ldrh	r2, [r7, #8]
 8001b34:	88fb      	ldrh	r3, [r7, #6]
 8001b36:	f107 0014 	add.w	r0, r7, #20
 8001b3a:	490d      	ldr	r1, [pc, #52]	@ (8001b70 <GetUint16Input+0xa4>)
 8001b3c:	f00f f8c6 	bl	8010ccc <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t *) s_output, strlen(s_output), 1000);
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7fe fbe3 	bl	8000310 <strlen>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	f107 0114 	add.w	r1, r7, #20
 8001b52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b56:	4805      	ldr	r0, [pc, #20]	@ (8001b6c <GetUint16Input+0xa0>)
 8001b58:	f00d fcf3 	bl	800f542 <HAL_UART_Transmit>
		}
	}
	return(result);
 8001b5c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3780      	adds	r7, #128	@ 0x80
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	080119bc 	.word	0x080119bc
 8001b6c:	24000cb8 	.word	0x24000cb8
 8001b70:	080119c4 	.word	0x080119c4

08001b74 <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef* hadc)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
	// ADC1 is master and ADC2 is slave
	if (hadc->Instance == ADC1)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a0e      	ldr	r2, [pc, #56]	@ (8001bbc <HAL_ADC_ErrorCallback+0x48>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d108      	bne.n	8001b98 <HAL_ADC_ErrorCallback+0x24>
	{
		printNumber("** ERROR ** ADC12 Error Code: ", hadc->ErrorCode, 1);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	4619      	mov	r1, r3
 8001b90:	480b      	ldr	r0, [pc, #44]	@ (8001bc0 <HAL_ADC_ErrorCallback+0x4c>)
 8001b92:	f7fe fe29 	bl	80007e8 <printNumber>
	}
	else if ((hadc->Instance == ADC3))
	{
		printNumber("** ERROR ** ADC3 Error Code: ", hadc->ErrorCode, 1);
	}
}
 8001b96:	e00c      	b.n	8001bb2 <HAL_ADC_ErrorCallback+0x3e>
	else if ((hadc->Instance == ADC3))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a09      	ldr	r2, [pc, #36]	@ (8001bc4 <HAL_ADC_ErrorCallback+0x50>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d107      	bne.n	8001bb2 <HAL_ADC_ErrorCallback+0x3e>
		printNumber("** ERROR ** ADC3 Error Code: ", hadc->ErrorCode, 1);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	2201      	movs	r2, #1
 8001baa:	4619      	mov	r1, r3
 8001bac:	4806      	ldr	r0, [pc, #24]	@ (8001bc8 <HAL_ADC_ErrorCallback+0x54>)
 8001bae:	f7fe fe1b 	bl	80007e8 <printNumber>
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40022000 	.word	0x40022000
 8001bc0:	080119f0 	.word	0x080119f0
 8001bc4:	58026000 	.word	0x58026000
 8001bc8:	08011a10 	.word	0x08011a10

08001bcc <HAL_ADC_ConvCpltCallback>:

// ADC conversion and DMA transfer complete
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
	// ADC1 is master and ADC2 is slave
	if (hadc->Instance == ADC1)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a10      	ldr	r2, [pc, #64]	@ (8001c1c <HAL_ADC_ConvCpltCallback+0x50>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d105      	bne.n	8001bea <HAL_ADC_ConvCpltCallback+0x1e>
	{
		//HAL_ADCEx_MultiModeStop_DMA(&hadc1);
		doneMeasuringBridgePlasmaADC12(hadc->ErrorCode);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff fc9e 	bl	8001524 <doneMeasuringBridgePlasmaADC12>
	else
	{
		HAL_UART_Transmit(&huart3, (uint8_t *) "** ERROR ** Unknown ADC\n\r", 25, 1000);
		printCR();
	}
}
 8001be8:	e013      	b.n	8001c12 <HAL_ADC_ConvCpltCallback+0x46>
	else if (hadc->Instance == ADC3)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a0c      	ldr	r2, [pc, #48]	@ (8001c20 <HAL_ADC_ConvCpltCallback+0x54>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d105      	bne.n	8001c00 <HAL_ADC_ConvCpltCallback+0x34>
		doneMeasuringVoltagesTemperaturesADC3(hadc->ErrorCode);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fed9 	bl	80019b0 <doneMeasuringVoltagesTemperaturesADC3>
}
 8001bfe:	e008      	b.n	8001c12 <HAL_ADC_ConvCpltCallback+0x46>
		HAL_UART_Transmit(&huart3, (uint8_t *) "** ERROR ** Unknown ADC\n\r", 25, 1000);
 8001c00:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c04:	2219      	movs	r2, #25
 8001c06:	4907      	ldr	r1, [pc, #28]	@ (8001c24 <HAL_ADC_ConvCpltCallback+0x58>)
 8001c08:	4807      	ldr	r0, [pc, #28]	@ (8001c28 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001c0a:	f00d fc9a 	bl	800f542 <HAL_UART_Transmit>
		printCR();
 8001c0e:	f7fe fd99 	bl	8000744 <printCR>
}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40022000 	.word	0x40022000
 8001c20:	58026000 	.word	0x58026000
 8001c24:	08011a30 	.word	0x08011a30
 8001c28:	24000cb8 	.word	0x24000cb8

08001c2c <PowerOffLowSupplies>:

//Power Off Supplies in order3.3V switch and 15V
void PowerOffLowSupplies(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
	if (powerStatus == V500_OFF)
 8001c30:	4b0d      	ldr	r3, [pc, #52]	@ (8001c68 <PowerOffLowSupplies+0x3c>)
 8001c32:	881b      	ldrh	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d110      	bne.n	8001c5a <PowerOffLowSupplies+0x2e>
	{
		//Power off 3.3V switch voltage
		HAL_GPIO_WritePin(OUT_3V3_SWITCH_GPIO_Port, OUT_3V3_SWITCH_Pin, GPIO_PIN_SET);
 8001c38:	2201      	movs	r2, #1
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	480b      	ldr	r0, [pc, #44]	@ (8001c6c <PowerOffLowSupplies+0x40>)
 8001c3e:	f008 fcfd 	bl	800a63c <HAL_GPIO_WritePin>
		HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001c42:	2001      	movs	r0, #1
 8001c44:	f002 fac4 	bl	80041d0 <HAL_Delay>

		//Power off 15V
		HAL_GPIO_WritePin(OUT_15V_ENABLE_GPIO_Port, OUT_15V_ENABLE_Pin, GPIO_PIN_SET);		//There is an inverter between MCU and the output, thus SET
 8001c48:	2201      	movs	r2, #1
 8001c4a:	2102      	movs	r1, #2
 8001c4c:	4807      	ldr	r0, [pc, #28]	@ (8001c6c <PowerOffLowSupplies+0x40>)
 8001c4e:	f008 fcf5 	bl	800a63c <HAL_GPIO_WritePin>
		HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001c52:	2001      	movs	r0, #1
 8001c54:	f002 fabc 	bl	80041d0 <HAL_Delay>
	else
	{
		printString("** ERROR ** PowerOffLowSupplies: 500V is On\n\r");
		printCR();
	}
}
 8001c58:	e004      	b.n	8001c64 <PowerOffLowSupplies+0x38>
		printString("** ERROR ** PowerOffLowSupplies: 500V is On\n\r");
 8001c5a:	4805      	ldr	r0, [pc, #20]	@ (8001c70 <PowerOffLowSupplies+0x44>)
 8001c5c:	f7fe fd82 	bl	8000764 <printString>
		printCR();
 8001c60:	f7fe fd70 	bl	8000744 <printCR>
}
 8001c64:	bf00      	nop
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	240008c4 	.word	0x240008c4
 8001c6c:	58020c00 	.word	0x58020c00
 8001c70:	08011a4c 	.word	0x08011a4c

08001c74 <PowerOffHighSupplies>:


//Power Off Supply 500V
void PowerOffHighSupplies(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
	//Make sure the H-bridge outputs are zero before turning off power
	stopHbridge();
 8001c78:	f7fe fe44 	bl	8000904 <stopHbridge>

	//Power off 500V
	HAL_GPIO_WritePin(OUT_500V_ENABLE_GPIO_Port, OUT_500V_ENABLE_Pin, GPIO_PIN_SET);	//There is an inverter between MCU and the output, thus SET
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	2101      	movs	r1, #1
 8001c80:	480b      	ldr	r0, [pc, #44]	@ (8001cb0 <PowerOffHighSupplies+0x3c>)
 8001c82:	f008 fcdb 	bl	800a63c <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001c86:	2001      	movs	r0, #1
 8001c88:	f002 faa2 	bl	80041d0 <HAL_Delay>

	//Disable Line Drive 1
	HAL_GPIO_WritePin(LINE_DRIVER1_ENABLE_GPIO_Port, LINE_DRIVER1_ENABLE_Pin, GPIO_PIN_SET);
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	2104      	movs	r1, #4
 8001c90:	4808      	ldr	r0, [pc, #32]	@ (8001cb4 <PowerOffHighSupplies+0x40>)
 8001c92:	f008 fcd3 	bl	800a63c <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001c96:	2001      	movs	r0, #1
 8001c98:	f002 fa9a 	bl	80041d0 <HAL_Delay>

	//Signal to robot controller all power supplies are inactive.
	HAL_GPIO_WritePin(LED_ACTIVE_GPIO_Port, LED_ACTIVE_Pin, GPIO_PIN_SET);			//There is an inverter between MCU and the output, thus SET
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	4805      	ldr	r0, [pc, #20]	@ (8001cb8 <PowerOffHighSupplies+0x44>)
 8001ca2:	f008 fccb 	bl	800a63c <HAL_GPIO_WritePin>

	powerStatus = V500_OFF;
 8001ca6:	4b05      	ldr	r3, [pc, #20]	@ (8001cbc <PowerOffHighSupplies+0x48>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	801a      	strh	r2, [r3, #0]
}
 8001cac:	bf00      	nop
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	58021800 	.word	0x58021800
 8001cb4:	58020400 	.word	0x58020400
 8001cb8:	58021000 	.word	0x58021000
 8001cbc:	240008c4 	.word	0x240008c4

08001cc0 <PowerOffSupplies>:

void PowerOffSupplies(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
	PowerOffHighSupplies();
 8001cc4:	f7ff ffd6 	bl	8001c74 <PowerOffHighSupplies>
	PowerOffLowSupplies();
 8001cc8:	f7ff ffb0 	bl	8001c2c <PowerOffLowSupplies>
}
 8001ccc:	bf00      	nop
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <PowerOnLowSupplies>:

//Power On Supplies in order 15V, 3.3V switch
//Returns 1 if the power up sequence was successful, and 0 if it failed
int PowerOnLowSupplies(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
	//Power on 15V
	//printString("\n\rPower on 15V - ");
	HAL_GPIO_WritePin(OUT_15V_ENABLE_GPIO_Port, OUT_15V_ENABLE_Pin, GPIO_PIN_RESET);	//There is an inverter between MCU and the output, thus RESET
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	2102      	movs	r1, #2
 8001cd8:	4818      	ldr	r0, [pc, #96]	@ (8001d3c <PowerOnLowSupplies+0x6c>)
 8001cda:	f008 fcaf 	bl	800a63c <HAL_GPIO_WritePin>
	printString("\n\rPower on 15V - ");
 8001cde:	4818      	ldr	r0, [pc, #96]	@ (8001d40 <PowerOnLowSupplies+0x70>)
 8001ce0:	f7fe fd40 	bl	8000764 <printString>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	f002 fa73 	bl	80041d0 <HAL_Delay>

	//Start reading ADC3 channels
	measureVoltagesTemperaturesADC3();
 8001cea:	f7ff fe4d 	bl	8001988 <measureVoltagesTemperaturesADC3>
	//Wait until ADC3 reading is done
	while (sADC.adc3_reading) ;
 8001cee:	bf00      	nop
 8001cf0:	4b14      	ldr	r3, [pc, #80]	@ (8001d44 <PowerOnLowSupplies+0x74>)
 8001cf2:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	@ 0x70c
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1f9      	bne.n	8001cf0 <PowerOnLowSupplies+0x20>

	//Check 15V voltage
	if (sADC.adc3_data[ADC3_15V] >= sADC3threshold[ADC3_15V])
 8001cfc:	4b11      	ldr	r3, [pc, #68]	@ (8001d44 <PowerOnLowSupplies+0x74>)
 8001cfe:	f8b3 24b2 	ldrh.w	r2, [r3, #1202]	@ 0x4b2
 8001d02:	4b11      	ldr	r3, [pc, #68]	@ (8001d48 <PowerOnLowSupplies+0x78>)
 8001d04:	885b      	ldrh	r3, [r3, #2]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d30f      	bcc.n	8001d2a <PowerOnLowSupplies+0x5a>
		printString("Ok");
 8001d0a:	4810      	ldr	r0, [pc, #64]	@ (8001d4c <PowerOnLowSupplies+0x7c>)
 8001d0c:	f7fe fd2a 	bl	8000764 <printString>
		PowerOffLowSupplies();
		return(0);
	}

	//Power on 3.3V switch voltage
	printString("\n\rPower on 3.3V switch");
 8001d10:	480f      	ldr	r0, [pc, #60]	@ (8001d50 <PowerOnLowSupplies+0x80>)
 8001d12:	f7fe fd27 	bl	8000764 <printString>
	HAL_GPIO_WritePin(OUT_3V3_SWITCH_GPIO_Port, OUT_3V3_SWITCH_Pin, GPIO_PIN_RESET);
 8001d16:	2200      	movs	r2, #0
 8001d18:	2101      	movs	r1, #1
 8001d1a:	4808      	ldr	r0, [pc, #32]	@ (8001d3c <PowerOnLowSupplies+0x6c>)
 8001d1c:	f008 fc8e 	bl	800a63c <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001d20:	2001      	movs	r0, #1
 8001d22:	f002 fa55 	bl	80041d0 <HAL_Delay>

	return(1);
 8001d26:	2301      	movs	r3, #1
 8001d28:	e005      	b.n	8001d36 <PowerOnLowSupplies+0x66>
		printString("Fail");
 8001d2a:	480a      	ldr	r0, [pc, #40]	@ (8001d54 <PowerOnLowSupplies+0x84>)
 8001d2c:	f7fe fd1a 	bl	8000764 <printString>
		PowerOffLowSupplies();
 8001d30:	f7ff ff7c 	bl	8001c2c <PowerOffLowSupplies>
		return(0);
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	58020c00 	.word	0x58020c00
 8001d40:	08011a7c 	.word	0x08011a7c
 8001d44:	240001b4 	.word	0x240001b4
 8001d48:	24000004 	.word	0x24000004
 8001d4c:	08011a90 	.word	0x08011a90
 8001d50:	08011a9c 	.word	0x08011a9c
 8001d54:	08011a94 	.word	0x08011a94

08001d58 <PowerOnHighSupplies>:

//Power On Supply 500V
//Returns 1 if the power up was successful, and 0 if it failed
int PowerOnHighSupplies(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
	stopHbridge(); 	//Make sure the H-bridge outputs are zero before enabling the line driver
 8001d5c:	f7fe fdd2 	bl	8000904 <stopHbridge>

	//Enable Line Drive 1
	printString("\n\rEnable Line Drive 1");
 8001d60:	481b      	ldr	r0, [pc, #108]	@ (8001dd0 <PowerOnHighSupplies+0x78>)
 8001d62:	f7fe fcff 	bl	8000764 <printString>
	HAL_GPIO_WritePin(LINE_DRIVER1_ENABLE_GPIO_Port, LINE_DRIVER1_ENABLE_Pin, GPIO_PIN_RESET);
 8001d66:	2200      	movs	r2, #0
 8001d68:	2104      	movs	r1, #4
 8001d6a:	481a      	ldr	r0, [pc, #104]	@ (8001dd4 <PowerOnHighSupplies+0x7c>)
 8001d6c:	f008 fc66 	bl	800a63c <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001d70:	2001      	movs	r0, #1
 8001d72:	f002 fa2d 	bl	80041d0 <HAL_Delay>

	//Power on 500V
	printString("\n\rPower on 500V - ");
 8001d76:	4818      	ldr	r0, [pc, #96]	@ (8001dd8 <PowerOnHighSupplies+0x80>)
 8001d78:	f7fe fcf4 	bl	8000764 <printString>
	HAL_GPIO_WritePin(OUT_500V_ENABLE_GPIO_Port, OUT_500V_ENABLE_Pin, GPIO_PIN_RESET);	//There is an inverter between MCU and the output, thus RESET
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2101      	movs	r1, #1
 8001d80:	4816      	ldr	r0, [pc, #88]	@ (8001ddc <PowerOnHighSupplies+0x84>)
 8001d82:	f008 fc5b 	bl	800a63c <HAL_GPIO_WritePin>
	HAL_Delay(1);	//Wait 1msec  TODO - Might need to be changed
 8001d86:	2001      	movs	r0, #1
 8001d88:	f002 fa22 	bl	80041d0 <HAL_Delay>

	//Start reading ADC3 channels
	measureVoltagesTemperaturesADC3();
 8001d8c:	f7ff fdfc 	bl	8001988 <measureVoltagesTemperaturesADC3>
	//Wait until ADC reading is done
	while (sADC.adc3_reading) ;
 8001d90:	bf00      	nop
 8001d92:	4b13      	ldr	r3, [pc, #76]	@ (8001de0 <PowerOnHighSupplies+0x88>)
 8001d94:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	@ 0x70c
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f9      	bne.n	8001d92 <PowerOnHighSupplies+0x3a>

	//Check 500V voltage
	if (sADC.adc3_data[ADC3_500VDC] >= sADC3threshold[ADC3_500VDC])
 8001d9e:	4b10      	ldr	r3, [pc, #64]	@ (8001de0 <PowerOnHighSupplies+0x88>)
 8001da0:	f8b3 24ba 	ldrh.w	r2, [r3, #1210]	@ 0x4ba
 8001da4:	4b0f      	ldr	r3, [pc, #60]	@ (8001de4 <PowerOnHighSupplies+0x8c>)
 8001da6:	895b      	ldrh	r3, [r3, #10]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d303      	bcc.n	8001db4 <PowerOnHighSupplies+0x5c>
		printString("Ok");
 8001dac:	480e      	ldr	r0, [pc, #56]	@ (8001de8 <PowerOnHighSupplies+0x90>)
 8001dae:	f7fe fcd9 	bl	8000764 <printString>
 8001db2:	e002      	b.n	8001dba <PowerOnHighSupplies+0x62>
	else
	{
		//printString("Fail");
		printString("debug");
 8001db4:	480d      	ldr	r0, [pc, #52]	@ (8001dec <PowerOnHighSupplies+0x94>)
 8001db6:	f7fe fcd5 	bl	8000764 <printString>
		//PowerOffHighSupplies();
		//return(0);
	}

	//Signal to robot controller all power supplies are active
	HAL_GPIO_WritePin(LED_ACTIVE_GPIO_Port, LED_ACTIVE_Pin, GPIO_PIN_RESET);	//There is an inverter between MCU and the output, thus RESET
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	480c      	ldr	r0, [pc, #48]	@ (8001df0 <PowerOnHighSupplies+0x98>)
 8001dc0:	f008 fc3c 	bl	800a63c <HAL_GPIO_WritePin>

	powerStatus = V500_ON;
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001df4 <PowerOnHighSupplies+0x9c>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	801a      	strh	r2, [r3, #0]

	return(1);
 8001dca:	2301      	movs	r3, #1
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	08011ab4 	.word	0x08011ab4
 8001dd4:	58020400 	.word	0x58020400
 8001dd8:	08011acc 	.word	0x08011acc
 8001ddc:	58021800 	.word	0x58021800
 8001de0:	240001b4 	.word	0x240001b4
 8001de4:	24000004 	.word	0x24000004
 8001de8:	08011a90 	.word	0x08011a90
 8001dec:	08011ae0 	.word	0x08011ae0
 8001df0:	58021000 	.word	0x58021000
 8001df4:	240008c4 	.word	0x240008c4

08001df8 <HAL_GPIO_EXTI_Callback>:

// GPIO interrupt handler
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	80fb      	strh	r3, [r7, #6]
	if (sFlashConfig.mode == RUN_MODE)
 8001e02:	4b07      	ldr	r3, [pc, #28]	@ (8001e20 <HAL_GPIO_EXTI_Callback+0x28>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d105      	bne.n	8001e16 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		// Power off request received
		if(GPIO_Pin == POWER_OFF_IRQ_Pin)
 8001e0a:	88fb      	ldrh	r3, [r7, #6]
 8001e0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e10:	d101      	bne.n	8001e16 <HAL_GPIO_EXTI_Callback+0x1e>
			PowerOffSupplies();
 8001e12:	f7ff ff55 	bl	8001cc0 <PowerOffSupplies>
	}
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	240008c8 	.word	0x240008c8

08001e24 <InitializeConfigMenu>:

// Initialize the UART3 configuration menu
static void InitializeConfigMenu(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
	int item = 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	607b      	str	r3, [r7, #4]

	config_menu[item++] = "\n\rPlasma Driver Configuration Menu";
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	1c5a      	adds	r2, r3, #1
 8001e32:	607a      	str	r2, [r7, #4]
 8001e34:	4a0c      	ldr	r2, [pc, #48]	@ (8001e68 <InitializeConfigMenu+0x44>)
 8001e36:	490d      	ldr	r1, [pc, #52]	@ (8001e6c <InitializeConfigMenu+0x48>)
 8001e38:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	config_menu[item++] = "   m: Change mode (Test/Run)";
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	1c5a      	adds	r2, r3, #1
 8001e40:	607a      	str	r2, [r7, #4]
 8001e42:	4a09      	ldr	r2, [pc, #36]	@ (8001e68 <InitializeConfigMenu+0x44>)
 8001e44:	490a      	ldr	r1, [pc, #40]	@ (8001e70 <InitializeConfigMenu+0x4c>)
 8001e46:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if (item > CONFIG_MENU_SIZE)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	dd06      	ble.n	8001e5e <InitializeConfigMenu+0x3a>
		HAL_UART_Transmit(&huart3, (uint8_t *) "\n\rIncrease CONFIG_MENU_SIZE", 20, 1000);
 8001e50:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e54:	2214      	movs	r2, #20
 8001e56:	4907      	ldr	r1, [pc, #28]	@ (8001e74 <InitializeConfigMenu+0x50>)
 8001e58:	4807      	ldr	r0, [pc, #28]	@ (8001e78 <InitializeConfigMenu+0x54>)
 8001e5a:	f00d fb72 	bl	800f542 <HAL_UART_Transmit>

}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	240001ac 	.word	0x240001ac
 8001e6c:	08011ae8 	.word	0x08011ae8
 8001e70:	08011b0c 	.word	0x08011b0c
 8001e74:	08011b2c 	.word	0x08011b2c
 8001e78:	24000cb8 	.word	0x24000cb8

08001e7c <InitializeMenu>:

// Initialize the UART3 menu
static void InitializeMenu(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
	int item = 0;
 8001e82:	2300      	movs	r3, #0
 8001e84:	607b      	str	r3, [r7, #4]

	//Clear previous menu
	for (int i=0; i < MAX_MENU_SIZE; ++i)
 8001e86:	2300      	movs	r3, #0
 8001e88:	603b      	str	r3, [r7, #0]
 8001e8a:	e007      	b.n	8001e9c <InitializeMenu+0x20>
	{
		menu[i] = "";
 8001e8c:	4a4b      	ldr	r2, [pc, #300]	@ (8001fbc <InitializeMenu+0x140>)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	494b      	ldr	r1, [pc, #300]	@ (8001fc0 <InitializeMenu+0x144>)
 8001e92:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i=0; i < MAX_MENU_SIZE; ++i)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	603b      	str	r3, [r7, #0]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	2b0c      	cmp	r3, #12
 8001ea0:	ddf4      	ble.n	8001e8c <InitializeMenu+0x10>
	}

	if (sFlashConfig.mode == TEST_MODE)
 8001ea2:	4b48      	ldr	r3, [pc, #288]	@ (8001fc4 <InitializeMenu+0x148>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d15b      	bne.n	8001f62 <InitializeMenu+0xe6>
	{
		menu[item++] = "\n\rPlasma Driver TEST Menu";
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	1c5a      	adds	r2, r3, #1
 8001eae:	607a      	str	r2, [r7, #4]
 8001eb0:	4a42      	ldr	r2, [pc, #264]	@ (8001fbc <InitializeMenu+0x140>)
 8001eb2:	4945      	ldr	r1, [pc, #276]	@ (8001fc8 <InitializeMenu+0x14c>)
 8001eb4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   p: Power on supplies";
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	1c5a      	adds	r2, r3, #1
 8001ebc:	607a      	str	r2, [r7, #4]
 8001ebe:	4a3f      	ldr	r2, [pc, #252]	@ (8001fbc <InitializeMenu+0x140>)
 8001ec0:	4942      	ldr	r1, [pc, #264]	@ (8001fcc <InitializeMenu+0x150>)
 8001ec2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   o: Power off supplies";
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	1c5a      	adds	r2, r3, #1
 8001eca:	607a      	str	r2, [r7, #4]
 8001ecc:	4a3b      	ldr	r2, [pc, #236]	@ (8001fbc <InitializeMenu+0x140>)
 8001ece:	4940      	ldr	r1, [pc, #256]	@ (8001fd0 <InitializeMenu+0x154>)
 8001ed0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   s: Start/stop driving H-Bridge";
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	1c5a      	adds	r2, r3, #1
 8001ed8:	607a      	str	r2, [r7, #4]
 8001eda:	4a38      	ldr	r2, [pc, #224]	@ (8001fbc <InitializeMenu+0x140>)
 8001edc:	493d      	ldr	r1, [pc, #244]	@ (8001fd4 <InitializeMenu+0x158>)
 8001ede:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   f: Set H-bridge frequency (Hz)";
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	1c5a      	adds	r2, r3, #1
 8001ee6:	607a      	str	r2, [r7, #4]
 8001ee8:	4a34      	ldr	r2, [pc, #208]	@ (8001fbc <InitializeMenu+0x140>)
 8001eea:	493b      	ldr	r1, [pc, #236]	@ (8001fd8 <InitializeMenu+0x15c>)
 8001eec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   d: Set H-bridge dead time (%)";
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	1c5a      	adds	r2, r3, #1
 8001ef4:	607a      	str	r2, [r7, #4]
 8001ef6:	4a31      	ldr	r2, [pc, #196]	@ (8001fbc <InitializeMenu+0x140>)
 8001ef8:	4938      	ldr	r1, [pc, #224]	@ (8001fdc <InitializeMenu+0x160>)
 8001efa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   a: Start ADC1 and ADC2 measurement";
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	1c5a      	adds	r2, r3, #1
 8001f02:	607a      	str	r2, [r7, #4]
 8001f04:	4a2d      	ldr	r2, [pc, #180]	@ (8001fbc <InitializeMenu+0x140>)
 8001f06:	4936      	ldr	r1, [pc, #216]	@ (8001fe0 <InitializeMenu+0x164>)
 8001f08:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   b: Start ADC3 measurement";
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	1c5a      	adds	r2, r3, #1
 8001f10:	607a      	str	r2, [r7, #4]
 8001f12:	4a2a      	ldr	r2, [pc, #168]	@ (8001fbc <InitializeMenu+0x140>)
 8001f14:	4933      	ldr	r1, [pc, #204]	@ (8001fe4 <InitializeMenu+0x168>)
 8001f16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   q: Frequency correction";
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	1c5a      	adds	r2, r3, #1
 8001f1e:	607a      	str	r2, [r7, #4]
 8001f20:	4a26      	ldr	r2, [pc, #152]	@ (8001fbc <InitializeMenu+0x140>)
 8001f22:	4931      	ldr	r1, [pc, #196]	@ (8001fe8 <InitializeMenu+0x16c>)
 8001f24:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   z: Debug output (On/Off)";
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	1c5a      	adds	r2, r3, #1
 8001f2c:	607a      	str	r2, [r7, #4]
 8001f2e:	4a23      	ldr	r2, [pc, #140]	@ (8001fbc <InitializeMenu+0x140>)
 8001f30:	492e      	ldr	r1, [pc, #184]	@ (8001fec <InitializeMenu+0x170>)
 8001f32:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   c: Show/Change configuration";
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	1c5a      	adds	r2, r3, #1
 8001f3a:	607a      	str	r2, [r7, #4]
 8001f3c:	4a1f      	ldr	r2, [pc, #124]	@ (8001fbc <InitializeMenu+0x140>)
 8001f3e:	492c      	ldr	r1, [pc, #176]	@ (8001ff0 <InitializeMenu+0x174>)
 8001f40:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   t: Test GPIO";
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	1c5a      	adds	r2, r3, #1
 8001f48:	607a      	str	r2, [r7, #4]
 8001f4a:	4a1c      	ldr	r2, [pc, #112]	@ (8001fbc <InitializeMenu+0x140>)
 8001f4c:	4929      	ldr	r1, [pc, #164]	@ (8001ff4 <InitializeMenu+0x178>)
 8001f4e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   y: Auto Frequency Adjustment";
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	1c5a      	adds	r2, r3, #1
 8001f56:	607a      	str	r2, [r7, #4]
 8001f58:	4a18      	ldr	r2, [pc, #96]	@ (8001fbc <InitializeMenu+0x140>)
 8001f5a:	4927      	ldr	r1, [pc, #156]	@ (8001ff8 <InitializeMenu+0x17c>)
 8001f5c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001f60:	e019      	b.n	8001f96 <InitializeMenu+0x11a>
	}
	else if ((sFlashConfig.mode == RUN_MODE))
 8001f62:	4b18      	ldr	r3, [pc, #96]	@ (8001fc4 <InitializeMenu+0x148>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d10e      	bne.n	8001f88 <InitializeMenu+0x10c>
	{
		menu[item++] = "\n\rPlasma Driver RUN Menu";
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	1c5a      	adds	r2, r3, #1
 8001f6e:	607a      	str	r2, [r7, #4]
 8001f70:	4a12      	ldr	r2, [pc, #72]	@ (8001fbc <InitializeMenu+0x140>)
 8001f72:	4922      	ldr	r1, [pc, #136]	@ (8001ffc <InitializeMenu+0x180>)
 8001f74:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		menu[item++] = "   c: Show/Change current configuration";
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	1c5a      	adds	r2, r3, #1
 8001f7c:	607a      	str	r2, [r7, #4]
 8001f7e:	4a0f      	ldr	r2, [pc, #60]	@ (8001fbc <InitializeMenu+0x140>)
 8001f80:	491f      	ldr	r1, [pc, #124]	@ (8002000 <InitializeMenu+0x184>)
 8001f82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001f86:	e006      	b.n	8001f96 <InitializeMenu+0x11a>
	}
	else
	{
		menu[item++] = "\n\rERROR SETTING UP MENU";
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	1c5a      	adds	r2, r3, #1
 8001f8c:	607a      	str	r2, [r7, #4]
 8001f8e:	4a0b      	ldr	r2, [pc, #44]	@ (8001fbc <InitializeMenu+0x140>)
 8001f90:	491c      	ldr	r1, [pc, #112]	@ (8002004 <InitializeMenu+0x188>)
 8001f92:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	menu_size = item;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	4b1b      	ldr	r3, [pc, #108]	@ (8002008 <InitializeMenu+0x18c>)
 8001f9c:	801a      	strh	r2, [r3, #0]

	if (menu_size> MAX_MENU_SIZE)
 8001f9e:	4b1a      	ldr	r3, [pc, #104]	@ (8002008 <InitializeMenu+0x18c>)
 8001fa0:	881b      	ldrh	r3, [r3, #0]
 8001fa2:	2b0d      	cmp	r3, #13
 8001fa4:	d906      	bls.n	8001fb4 <InitializeMenu+0x138>
		HAL_UART_Transmit(&huart3, (uint8_t *) "\n\rIncrease MENU_SIZE", 20, 1000);
 8001fa6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001faa:	2214      	movs	r2, #20
 8001fac:	4917      	ldr	r1, [pc, #92]	@ (800200c <InitializeMenu+0x190>)
 8001fae:	4818      	ldr	r0, [pc, #96]	@ (8002010 <InitializeMenu+0x194>)
 8001fb0:	f00d fac7 	bl	800f542 <HAL_UART_Transmit>

}
 8001fb4:	bf00      	nop
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	24000174 	.word	0x24000174
 8001fc0:	08011b48 	.word	0x08011b48
 8001fc4:	240008c8 	.word	0x240008c8
 8001fc8:	08011b4c 	.word	0x08011b4c
 8001fcc:	08011b68 	.word	0x08011b68
 8001fd0:	08011b80 	.word	0x08011b80
 8001fd4:	08011b9c 	.word	0x08011b9c
 8001fd8:	08011bc0 	.word	0x08011bc0
 8001fdc:	08011be4 	.word	0x08011be4
 8001fe0:	08011c08 	.word	0x08011c08
 8001fe4:	08011c30 	.word	0x08011c30
 8001fe8:	08011c50 	.word	0x08011c50
 8001fec:	08011c6c 	.word	0x08011c6c
 8001ff0:	08011c88 	.word	0x08011c88
 8001ff4:	08011ca8 	.word	0x08011ca8
 8001ff8:	08011cb8 	.word	0x08011cb8
 8001ffc:	08011cd8 	.word	0x08011cd8
 8002000:	08011cf4 	.word	0x08011cf4
 8002004:	08011d1c 	.word	0x08011d1c
 8002008:	240001a8 	.word	0x240001a8
 800200c:	08011d34 	.word	0x08011d34
 8002010:	24000cb8 	.word	0x24000cb8

08002014 <ShowChangeConfigFlash>:

// Show configuration. Add option to change configuration
void ShowChangeConfigFlash(void)
{
 8002014:	b590      	push	{r4, r7, lr}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
	uint16_t aYes;
	uint16_t mode;
	char input;

	printConfigFlash();
 800201a:	f7fe fbb9 	bl	8000790 <printConfigFlash>
	printString("\n\rChange configuration (0:No 1:Yes)? ");
 800201e:	482e      	ldr	r0, [pc, #184]	@ (80020d8 <ShowChangeConfigFlash+0xc4>)
 8002020:	f7fe fba0 	bl	8000764 <printString>
	if (GetUint16Input(&aYes, 1, 0, 1))
 8002024:	f107 000a 	add.w	r0, r7, #10
 8002028:	2301      	movs	r3, #1
 800202a:	2200      	movs	r2, #0
 800202c:	2101      	movs	r1, #1
 800202e:	f7ff fd4d 	bl	8001acc <GetUint16Input>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d04b      	beq.n	80020d0 <ShowChangeConfigFlash+0xbc>
	{
		if (aYes)
 8002038:	897b      	ldrh	r3, [r7, #10]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d048      	beq.n	80020d0 <ShowChangeConfigFlash+0xbc>
		{
			for (int i=0; i<CONFIG_MENU_SIZE; i++)
 800203e:	2300      	movs	r3, #0
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	e017      	b.n	8002074 <ShowChangeConfigFlash+0x60>
			{
				HAL_UART_Transmit(&huart3, (uint8_t *) config_menu[i], strlen(config_menu[i]), 1000);
 8002044:	4a25      	ldr	r2, [pc, #148]	@ (80020dc <ShowChangeConfigFlash+0xc8>)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800204c:	4a23      	ldr	r2, [pc, #140]	@ (80020dc <ShowChangeConfigFlash+0xc8>)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002054:	4618      	mov	r0, r3
 8002056:	f7fe f95b 	bl	8000310 <strlen>
 800205a:	4603      	mov	r3, r0
 800205c:	b29a      	uxth	r2, r3
 800205e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002062:	4621      	mov	r1, r4
 8002064:	481e      	ldr	r0, [pc, #120]	@ (80020e0 <ShowChangeConfigFlash+0xcc>)
 8002066:	f00d fa6c 	bl	800f542 <HAL_UART_Transmit>
				printCR();
 800206a:	f7fe fb6b 	bl	8000744 <printCR>
			for (int i=0; i<CONFIG_MENU_SIZE; i++)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	3301      	adds	r3, #1
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2b01      	cmp	r3, #1
 8002078:	dde4      	ble.n	8002044 <ShowChangeConfigFlash+0x30>
			}
			printCR();
 800207a:	f7fe fb63 	bl	8000744 <printCR>

			//Wait for user input
			if (HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 60000) == HAL_OK)
 800207e:	1df9      	adds	r1, r7, #7
 8002080:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8002084:	2201      	movs	r2, #1
 8002086:	4816      	ldr	r0, [pc, #88]	@ (80020e0 <ShowChangeConfigFlash+0xcc>)
 8002088:	f00d fae9 	bl	800f65e <HAL_UART_Receive>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d11e      	bne.n	80020d0 <ShowChangeConfigFlash+0xbc>
			{
				switch (input)
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	2b6d      	cmp	r3, #109	@ 0x6d
 8002096:	d11b      	bne.n	80020d0 <ShowChangeConfigFlash+0xbc>
				{
					case 'm': //Change mode
						printString("\n\rChange mode (0:Test 1:Run)? ");
 8002098:	4812      	ldr	r0, [pc, #72]	@ (80020e4 <ShowChangeConfigFlash+0xd0>)
 800209a:	f7fe fb63 	bl	8000764 <printString>
						if (GetUint16Input(&mode, 1, 0, 1))
 800209e:	f107 0008 	add.w	r0, r7, #8
 80020a2:	2301      	movs	r3, #1
 80020a4:	2200      	movs	r2, #0
 80020a6:	2101      	movs	r1, #1
 80020a8:	f7ff fd10 	bl	8001acc <GetUint16Input>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00d      	beq.n	80020ce <ShowChangeConfigFlash+0xba>
						{   // Data entry valid
							if (sFlashConfig.mode != mode)
 80020b2:	4b0d      	ldr	r3, [pc, #52]	@ (80020e8 <ShowChangeConfigFlash+0xd4>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	461a      	mov	r2, r3
 80020b8:	893b      	ldrh	r3, [r7, #8]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d007      	beq.n	80020ce <ShowChangeConfigFlash+0xba>
							{
								sFlashConfig.mode = mode;
 80020be:	893b      	ldrh	r3, [r7, #8]
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	4b09      	ldr	r3, [pc, #36]	@ (80020e8 <ShowChangeConfigFlash+0xd4>)
 80020c4:	701a      	strb	r2, [r3, #0]
								InitializeMenu();
 80020c6:	f7ff fed9 	bl	8001e7c <InitializeMenu>
								writeConfigFlash();
 80020ca:	f7fe faf1 	bl	80006b0 <writeConfigFlash>
							}
						}
					break;
 80020ce:	bf00      	nop
				}
			}
		}
	}
}
 80020d0:	bf00      	nop
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd90      	pop	{r4, r7, pc}
 80020d8:	08011d4c 	.word	0x08011d4c
 80020dc:	240001ac 	.word	0x240001ac
 80020e0:	24000cb8 	.word	0x24000cb8
 80020e4:	08011d74 	.word	0x08011d74
 80020e8:	240008c8 	.word	0x240008c8

080020ec <testGPIO>:

//Test GPIO settings
void testGPIO(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0

		printString("\n\rClear LED_GREEN");
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
		GetUint16Input(&aYes, 1, 0, 1);
*/
}
 80020f0:	bf00      	nop
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <RunModeAction>:

// Action table for the run mode menu
static void RunModeAction(char input)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	4603      	mov	r3, r0
 8002102:	71fb      	strb	r3, [r7, #7]
	switch (input)
 8002104:	79fb      	ldrb	r3, [r7, #7]
 8002106:	2b63      	cmp	r3, #99	@ 0x63
 8002108:	d102      	bne.n	8002110 <RunModeAction+0x16>
	{
		case 'c': //Show/Change current configuration
			ShowChangeConfigFlash();
 800210a:	f7ff ff83 	bl	8002014 <ShowChangeConfigFlash>
			break;
 800210e:	bf00      	nop
	}
}
 8002110:	bf00      	nop
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <TestModeAction>:

// Action table for the test mode menu
static void TestModeAction(char input)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b09c      	sub	sp, #112	@ 0x70
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	71fb      	strb	r3, [r7, #7]
	switch (input)
 8002122:	79fb      	ldrb	r3, [r7, #7]
 8002124:	3b61      	subs	r3, #97	@ 0x61
 8002126:	2b19      	cmp	r3, #25
 8002128:	f200 80e6 	bhi.w	80022f8 <TestModeAction+0x1e0>
 800212c:	a201      	add	r2, pc, #4	@ (adr r2, 8002134 <TestModeAction+0x1c>)
 800212e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002132:	bf00      	nop
 8002134:	080021d3 	.word	0x080021d3
 8002138:	080021fb 	.word	0x080021fb
 800213c:	080022d9 	.word	0x080022d9
 8002140:	0800223d 	.word	0x0800223d
 8002144:	080022f9 	.word	0x080022f9
 8002148:	08002213 	.word	0x08002213
 800214c:	080022f9 	.word	0x080022f9
 8002150:	080022f9 	.word	0x080022f9
 8002154:	080022f9 	.word	0x080022f9
 8002158:	080022f9 	.word	0x080022f9
 800215c:	080022f9 	.word	0x080022f9
 8002160:	080022f9 	.word	0x080022f9
 8002164:	080022f9 	.word	0x080022f9
 8002168:	080022f9 	.word	0x080022f9
 800216c:	080021c7 	.word	0x080021c7
 8002170:	0800219d 	.word	0x0800219d
 8002174:	08002289 	.word	0x08002289
 8002178:	080022f9 	.word	0x080022f9
 800217c:	08002263 	.word	0x08002263
 8002180:	080022df 	.word	0x080022df
 8002184:	080022f9 	.word	0x080022f9
 8002188:	080022f9 	.word	0x080022f9
 800218c:	080022f9 	.word	0x080022f9
 8002190:	080022f9 	.word	0x080022f9
 8002194:	080022e5 	.word	0x080022e5
 8002198:	080022b7 	.word	0x080022b7
	{
		case 'p': //Power supplies on
			if (powerStatus == V500_OFF)
 800219c:	4b58      	ldr	r3, [pc, #352]	@ (8002300 <TestModeAction+0x1e8>)
 800219e:	881b      	ldrh	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d10c      	bne.n	80021be <TestModeAction+0xa6>
			{
				if (PowerOnHighSupplies() == POWERON_FAILED)
 80021a4:	f7ff fdd8 	bl	8001d58 <PowerOnHighSupplies>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d103      	bne.n	80021b6 <TestModeAction+0x9e>
				{
					printString("\n\rPower on failed\n\r");
 80021ae:	4855      	ldr	r0, [pc, #340]	@ (8002304 <TestModeAction+0x1ec>)
 80021b0:	f7fe fad8 	bl	8000764 <printString>
			}
			else
			{
				printString("\n\rPower supplies are on\n\r");
			}
			break;
 80021b4:	e0a0      	b.n	80022f8 <TestModeAction+0x1e0>
					printString("\n\rPower on succeeded\n\r");
 80021b6:	4854      	ldr	r0, [pc, #336]	@ (8002308 <TestModeAction+0x1f0>)
 80021b8:	f7fe fad4 	bl	8000764 <printString>
			break;
 80021bc:	e09c      	b.n	80022f8 <TestModeAction+0x1e0>
				printString("\n\rPower supplies are on\n\r");
 80021be:	4853      	ldr	r0, [pc, #332]	@ (800230c <TestModeAction+0x1f4>)
 80021c0:	f7fe fad0 	bl	8000764 <printString>
			break;
 80021c4:	e098      	b.n	80022f8 <TestModeAction+0x1e0>

		case 'o': //Power supplies off
			printString("\n\rPower off supplies\n\r");
 80021c6:	4852      	ldr	r0, [pc, #328]	@ (8002310 <TestModeAction+0x1f8>)
 80021c8:	f7fe facc 	bl	8000764 <printString>
			PowerOffHighSupplies();
 80021cc:	f7ff fd52 	bl	8001c74 <PowerOffHighSupplies>
			break;
 80021d0:	e092      	b.n	80022f8 <TestModeAction+0x1e0>

		case 'a': //Start ADC1 and ADC2 analog voltage measurement
			if (sHbridge.on)
 80021d2:	4b50      	ldr	r3, [pc, #320]	@ (8002314 <TestModeAction+0x1fc>)
 80021d4:	881b      	ldrh	r3, [r3, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00b      	beq.n	80021f2 <TestModeAction+0xda>
			{
				//Setup to read ADC1 and ADC2 channels
				//Reading will start at TIM1 CH1 0->1 interrupt
				measureBridgePlasmaADC12();
 80021da:	f7ff f949 	bl	8001470 <measureBridgePlasmaADC12>
				//Wait until ADC3 reading is done
				while (sADC.adc12_reading) ;
 80021de:	bf00      	nop
 80021e0:	4b4d      	ldr	r3, [pc, #308]	@ (8002318 <TestModeAction+0x200>)
 80021e2:	f8b3 370e 	ldrh.w	r3, [r3, #1806]	@ 0x70e
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1f9      	bne.n	80021e0 <TestModeAction+0xc8>
				//Print ADC3 data on UART3
				printADC12data();
 80021ec:	f7fe ff2c 	bl	8001048 <printADC12data>
			}
			else
			{
				printString("\n\r ---- H-Bridge needs to be on");
			}
			break;
 80021f0:	e082      	b.n	80022f8 <TestModeAction+0x1e0>
				printString("\n\r ---- H-Bridge needs to be on");
 80021f2:	484a      	ldr	r0, [pc, #296]	@ (800231c <TestModeAction+0x204>)
 80021f4:	f7fe fab6 	bl	8000764 <printString>
			break;
 80021f8:	e07e      	b.n	80022f8 <TestModeAction+0x1e0>

		case 'b': //Start ADC3 analog voltage measurement
				//Start reading ADC3 channels
				measureVoltagesTemperaturesADC3();
 80021fa:	f7ff fbc5 	bl	8001988 <measureVoltagesTemperaturesADC3>
				//Wait until ADC3 reading is done
				while (sADC.adc3_reading) ;
 80021fe:	bf00      	nop
 8002200:	4b45      	ldr	r3, [pc, #276]	@ (8002318 <TestModeAction+0x200>)
 8002202:	f8b3 370c 	ldrh.w	r3, [r3, #1804]	@ 0x70c
 8002206:	b29b      	uxth	r3, r3
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1f9      	bne.n	8002200 <TestModeAction+0xe8>
				//Print ADC3 data on UART3
				printADC3data();
 800220c:	f7ff fb76 	bl	80018fc <printADC3data>
			break;
 8002210:	e072      	b.n	80022f8 <TestModeAction+0x1e0>

		case 'f': //Enter frequency (Hz)
			printHbridgeData();
 8002212:	f7fe fba5 	bl	8000960 <printHbridgeData>
			printString("\n\rEnter frequency (Hz): ");
 8002216:	4842      	ldr	r0, [pc, #264]	@ (8002320 <TestModeAction+0x208>)
 8002218:	f7fe faa4 	bl	8000764 <printString>
			if (GetUint16Input(&sHbridge.frequency, 1, MIN_FREQUENCY, MAX_FREQUENCY))
 800221c:	f64f 53e8 	movw	r3, #65000	@ 0xfde8
 8002220:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8002224:	2101      	movs	r1, #1
 8002226:	483f      	ldr	r0, [pc, #252]	@ (8002324 <TestModeAction+0x20c>)
 8002228:	f7ff fc50 	bl	8001acc <GetUint16Input>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d05b      	beq.n	80022ea <TestModeAction+0x1d2>
			{   // Data entry valid
				programHbridge();
 8002232:	f7fe fbbd 	bl	80009b0 <programHbridge>
				printHbridgeData();
 8002236:	f7fe fb93 	bl	8000960 <printHbridgeData>
			}
			break;
 800223a:	e056      	b.n	80022ea <TestModeAction+0x1d2>

		case 'd': //Enter dead time (%)
			printHbridgeData();
 800223c:	f7fe fb90 	bl	8000960 <printHbridgeData>
			printString("\n\rEnter dead time (%): ");
 8002240:	4839      	ldr	r0, [pc, #228]	@ (8002328 <TestModeAction+0x210>)
 8002242:	f7fe fa8f 	bl	8000764 <printString>
			if (GetUint16Input(&sHbridge.deadtime, 1, MIN_DEADTIME, MAX_DEADTIME))
 8002246:	2328      	movs	r3, #40	@ 0x28
 8002248:	2201      	movs	r2, #1
 800224a:	2101      	movs	r1, #1
 800224c:	4837      	ldr	r0, [pc, #220]	@ (800232c <TestModeAction+0x214>)
 800224e:	f7ff fc3d 	bl	8001acc <GetUint16Input>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d04a      	beq.n	80022ee <TestModeAction+0x1d6>
			{   // Data entry valid
				programHbridge();
 8002258:	f7fe fbaa 	bl	80009b0 <programHbridge>
				printHbridgeData();
 800225c:	f7fe fb80 	bl	8000960 <printHbridgeData>
			}
			break;
 8002260:	e045      	b.n	80022ee <TestModeAction+0x1d6>

		case 's': //Start/stop driving H-bridge
			printHbridgeData();
 8002262:	f7fe fb7d 	bl	8000960 <printHbridgeData>
			printString("\n\rDrive H-bridge 1:Yes 0:No : ");
 8002266:	4832      	ldr	r0, [pc, #200]	@ (8002330 <TestModeAction+0x218>)
 8002268:	f7fe fa7c 	bl	8000764 <printString>
			if (GetUint16Input(&sHbridge.on, 1, 0, 1))
 800226c:	2301      	movs	r3, #1
 800226e:	2200      	movs	r2, #0
 8002270:	2101      	movs	r1, #1
 8002272:	4828      	ldr	r0, [pc, #160]	@ (8002314 <TestModeAction+0x1fc>)
 8002274:	f7ff fc2a 	bl	8001acc <GetUint16Input>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d039      	beq.n	80022f2 <TestModeAction+0x1da>
			{   // Data entry valid
				programHbridge();
 800227e:	f7fe fb97 	bl	80009b0 <programHbridge>
				printHbridgeData();
 8002282:	f7fe fb6d 	bl	8000960 <printHbridgeData>
			}
			break;
 8002286:	e034      	b.n	80022f2 <TestModeAction+0x1da>

		case 'q': //Frequency correction
			int16_t freqCorr;
			if (freqCorrection(&freqCorr))
 8002288:	f107 036e 	add.w	r3, r7, #110	@ 0x6e
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff f829 	bl	80012e4 <freqCorrection>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d02e      	beq.n	80022f6 <TestModeAction+0x1de>
			{
				char text[100];
				sprintf(text, "\n\rFrequency correction: %i", (int) freqCorr);
 8002298:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 800229c:	461a      	mov	r2, r3
 800229e:	f107 0308 	add.w	r3, r7, #8
 80022a2:	4924      	ldr	r1, [pc, #144]	@ (8002334 <TestModeAction+0x21c>)
 80022a4:	4618      	mov	r0, r3
 80022a6:	f00e fd11 	bl	8010ccc <siprintf>
				printString(text);
 80022aa:	f107 0308 	add.w	r3, r7, #8
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7fe fa58 	bl	8000764 <printString>
			}
			break;
 80022b4:	e01f      	b.n	80022f6 <TestModeAction+0x1de>

		case 'z': //Debug output
			printNumber("\n\rCurrent Debug output: ", debug, 0);
 80022b6:	4b20      	ldr	r3, [pc, #128]	@ (8002338 <TestModeAction+0x220>)
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	2200      	movs	r2, #0
 80022bc:	4619      	mov	r1, r3
 80022be:	481f      	ldr	r0, [pc, #124]	@ (800233c <TestModeAction+0x224>)
 80022c0:	f7fe fa92 	bl	80007e8 <printNumber>
			printString("\n\rSet Debug output 1:On 0:Off : ");
 80022c4:	481e      	ldr	r0, [pc, #120]	@ (8002340 <TestModeAction+0x228>)
 80022c6:	f7fe fa4d 	bl	8000764 <printString>
			GetUint16Input(&debug, 1, 0, 1);
 80022ca:	2301      	movs	r3, #1
 80022cc:	2200      	movs	r2, #0
 80022ce:	2101      	movs	r1, #1
 80022d0:	4819      	ldr	r0, [pc, #100]	@ (8002338 <TestModeAction+0x220>)
 80022d2:	f7ff fbfb 	bl	8001acc <GetUint16Input>
			break;
 80022d6:	e00f      	b.n	80022f8 <TestModeAction+0x1e0>

		case 'c': //Show/Change current configuration
			ShowChangeConfigFlash();
 80022d8:	f7ff fe9c 	bl	8002014 <ShowChangeConfigFlash>
			break;
 80022dc:	e00c      	b.n	80022f8 <TestModeAction+0x1e0>

		case 't': //Test GPIO
			testGPIO();
 80022de:	f7ff ff05 	bl	80020ec <testGPIO>
			break;
 80022e2:	e009      	b.n	80022f8 <TestModeAction+0x1e0>

		case 'y': //Auto Freq Adjust
			autoFreqAdj();
 80022e4:	f7ff f974 	bl	80015d0 <autoFreqAdj>
			break;
 80022e8:	e006      	b.n	80022f8 <TestModeAction+0x1e0>
			break;
 80022ea:	bf00      	nop
 80022ec:	e004      	b.n	80022f8 <TestModeAction+0x1e0>
			break;
 80022ee:	bf00      	nop
 80022f0:	e002      	b.n	80022f8 <TestModeAction+0x1e0>
			break;
 80022f2:	bf00      	nop
 80022f4:	e000      	b.n	80022f8 <TestModeAction+0x1e0>
			break;
 80022f6:	bf00      	nop
	}
}
 80022f8:	bf00      	nop
 80022fa:	3770      	adds	r7, #112	@ 0x70
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	240008c4 	.word	0x240008c4
 8002304:	08011d94 	.word	0x08011d94
 8002308:	08011da8 	.word	0x08011da8
 800230c:	08011dc0 	.word	0x08011dc0
 8002310:	08011ddc 	.word	0x08011ddc
 8002314:	2400001c 	.word	0x2400001c
 8002318:	240001b4 	.word	0x240001b4
 800231c:	08011df4 	.word	0x08011df4
 8002320:	08011e14 	.word	0x08011e14
 8002324:	2400001e 	.word	0x2400001e
 8002328:	08011e30 	.word	0x08011e30
 800232c:	24000020 	.word	0x24000020
 8002330:	08011e48 	.word	0x08011e48
 8002334:	08011884 	.word	0x08011884
 8002338:	24000000 	.word	0x24000000
 800233c:	08011e68 	.word	0x08011e68
 8002340:	08011e84 	.word	0x08011e84

08002344 <PlasmaDriverMenu>:

// Print the plasma driver menu on UART3, and execute entered command.
static void PlasmaDriverMenu(void)
{
 8002344:	b590      	push	{r4, r7, lr}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
	char input;

	//Wait for user input
	if (HAL_UART_Receive(&huart3, (uint8_t *) &input, 1, 1) == HAL_OK)
 800234a:	1cf9      	adds	r1, r7, #3
 800234c:	2301      	movs	r3, #1
 800234e:	2201      	movs	r2, #1
 8002350:	4822      	ldr	r0, [pc, #136]	@ (80023dc <PlasmaDriverMenu+0x98>)
 8002352:	f00d f984 	bl	800f65e <HAL_UART_Receive>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d13b      	bne.n	80023d4 <PlasmaDriverMenu+0x90>
	{
		// Return pressed -- Display Menu
		if (input == 13)
 800235c:	78fb      	ldrb	r3, [r7, #3]
 800235e:	2b0d      	cmp	r3, #13
 8002360:	d123      	bne.n	80023aa <PlasmaDriverMenu+0x66>
		{
			for (int i=0; i<menu_size; i++)
 8002362:	2300      	movs	r3, #0
 8002364:	607b      	str	r3, [r7, #4]
 8002366:	e017      	b.n	8002398 <PlasmaDriverMenu+0x54>
			{
				HAL_UART_Transmit(&huart3, (uint8_t *) menu[i], strlen(menu[i]), 1000);
 8002368:	4a1d      	ldr	r2, [pc, #116]	@ (80023e0 <PlasmaDriverMenu+0x9c>)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8002370:	4a1b      	ldr	r2, [pc, #108]	@ (80023e0 <PlasmaDriverMenu+0x9c>)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002378:	4618      	mov	r0, r3
 800237a:	f7fd ffc9 	bl	8000310 <strlen>
 800237e:	4603      	mov	r3, r0
 8002380:	b29a      	uxth	r2, r3
 8002382:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002386:	4621      	mov	r1, r4
 8002388:	4814      	ldr	r0, [pc, #80]	@ (80023dc <PlasmaDriverMenu+0x98>)
 800238a:	f00d f8da 	bl	800f542 <HAL_UART_Transmit>
				printCR();
 800238e:	f7fe f9d9 	bl	8000744 <printCR>
			for (int i=0; i<menu_size; i++)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3301      	adds	r3, #1
 8002396:	607b      	str	r3, [r7, #4]
 8002398:	4b12      	ldr	r3, [pc, #72]	@ (80023e4 <PlasmaDriverMenu+0xa0>)
 800239a:	881b      	ldrh	r3, [r3, #0]
 800239c:	461a      	mov	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4293      	cmp	r3, r2
 80023a2:	dbe1      	blt.n	8002368 <PlasmaDriverMenu+0x24>
			}
			printCR();
 80023a4:	f7fe f9ce 	bl	8000744 <printCR>
				RunModeAction(input);
			else
				printString("\n\r*** ERROR *** Invalid mode");
		}
	}
}
 80023a8:	e014      	b.n	80023d4 <PlasmaDriverMenu+0x90>
			if (sFlashConfig.mode == TEST_MODE)
 80023aa:	4b0f      	ldr	r3, [pc, #60]	@ (80023e8 <PlasmaDriverMenu+0xa4>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d104      	bne.n	80023bc <PlasmaDriverMenu+0x78>
				TestModeAction(input);
 80023b2:	78fb      	ldrb	r3, [r7, #3]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff feaf 	bl	8002118 <TestModeAction>
}
 80023ba:	e00b      	b.n	80023d4 <PlasmaDriverMenu+0x90>
			else if (sFlashConfig.mode == RUN_MODE)
 80023bc:	4b0a      	ldr	r3, [pc, #40]	@ (80023e8 <PlasmaDriverMenu+0xa4>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d104      	bne.n	80023ce <PlasmaDriverMenu+0x8a>
				RunModeAction(input);
 80023c4:	78fb      	ldrb	r3, [r7, #3]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7ff fe97 	bl	80020fa <RunModeAction>
}
 80023cc:	e002      	b.n	80023d4 <PlasmaDriverMenu+0x90>
				printString("\n\r*** ERROR *** Invalid mode");
 80023ce:	4807      	ldr	r0, [pc, #28]	@ (80023ec <PlasmaDriverMenu+0xa8>)
 80023d0:	f7fe f9c8 	bl	8000764 <printString>
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd90      	pop	{r4, r7, pc}
 80023dc:	24000cb8 	.word	0x24000cb8
 80023e0:	24000174 	.word	0x24000174
 80023e4:	240001a8 	.word	0x240001a8
 80023e8:	240008c8 	.word	0x240008c8
 80023ec:	08011ea8 	.word	0x08011ea8

080023f0 <PlasmaDriverInit>:

// Initialize the plasma driver
void PlasmaDriverInit(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
	//Enable line driver 2 (HAL has initialized all GPIO)
	HAL_GPIO_WritePin(LINE_DRIVER2_ENABLE_GPIO_Port, LINE_DRIVER2_ENABLE_Pin, GPIO_PIN_RESET);  //Enable = Low
 80023f4:	2200      	movs	r2, #0
 80023f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80023fa:	4821      	ldr	r0, [pc, #132]	@ (8002480 <PlasmaDriverInit+0x90>)
 80023fc:	f008 f91e 	bl	800a63c <HAL_GPIO_WritePin>
	printString("\n\rEnable Line Drive 2");
 8002400:	4820      	ldr	r0, [pc, #128]	@ (8002484 <PlasmaDriverInit+0x94>)
 8002402:	f7fe f9af 	bl	8000764 <printString>

	//Power On Supplies in order 15V, 3.3V switch
	PowerOnLowSupplies();
 8002406:	f7ff fc63 	bl	8001cd0 <PowerOnLowSupplies>

	//Read configuration from flash
	readConfigFlash();
 800240a:	f7fe f98b 	bl	8000724 <readConfigFlash>

	//Has the flash configuration been initialized?
	if (sFlashConfig.mode == 0xFF)
 800240e:	4b1e      	ldr	r3, [pc, #120]	@ (8002488 <PlasmaDriverInit+0x98>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2bff      	cmp	r3, #255	@ 0xff
 8002414:	d107      	bne.n	8002426 <PlasmaDriverInit+0x36>
	{
		// write default configuration to flash
		if (writeConfigFlash() != 0)
 8002416:	f7fe f94b 	bl	80006b0 <writeConfigFlash>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d002      	beq.n	8002426 <PlasmaDriverInit+0x36>
			printString("\n\r*** ERROR FLASH");
 8002420:	481a      	ldr	r0, [pc, #104]	@ (800248c <PlasmaDriverInit+0x9c>)
 8002422:	f7fe f99f 	bl	8000764 <printString>
	}

	//Initialize menu and configuration menu
	InitializeMenu();
 8002426:	f7ff fd29 	bl	8001e7c <InitializeMenu>
	InitializeConfigMenu();
 800242a:	f7ff fcfb 	bl	8001e24 <InitializeConfigMenu>

	//Calibrate ADC1, ADC2 and ADC3
	printString("\n\rCalibrate ADC1, ADC2 and ADC3");
 800242e:	4818      	ldr	r0, [pc, #96]	@ (8002490 <PlasmaDriverInit+0xa0>)
 8002430:	f7fe f998 	bl	8000764 <printString>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8002434:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8002438:	2100      	movs	r1, #0
 800243a:	4816      	ldr	r0, [pc, #88]	@ (8002494 <PlasmaDriverInit+0xa4>)
 800243c:	f004 fc04 	bl	8006c48 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8002440:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8002444:	2100      	movs	r1, #0
 8002446:	4814      	ldr	r0, [pc, #80]	@ (8002498 <PlasmaDriverInit+0xa8>)
 8002448:	f004 fbfe 	bl	8006c48 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 800244c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8002450:	2100      	movs	r1, #0
 8002452:	4812      	ldr	r0, [pc, #72]	@ (800249c <PlasmaDriverInit+0xac>)
 8002454:	f004 fbf8 	bl	8006c48 <HAL_ADCEx_Calibration_Start>

	//Power On Supply 500V
	if (sFlashConfig.mode == RUN_MODE)
 8002458:	4b0b      	ldr	r3, [pc, #44]	@ (8002488 <PlasmaDriverInit+0x98>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d10d      	bne.n	800247c <PlasmaDriverInit+0x8c>
	{
		//POWER_OFF_IRQ needs to be high before powering On
		if (HAL_GPIO_ReadPin(POWER_OFF_IRQ_GPIO_Port, POWER_OFF_IRQ_Pin) == GPIO_PIN_RESET)		//There is an inverter between MCU and the input, thus check RESET
 8002460:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002464:	480e      	ldr	r0, [pc, #56]	@ (80024a0 <PlasmaDriverInit+0xb0>)
 8002466:	f008 f8d1 	bl	800a60c <HAL_GPIO_ReadPin>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d102      	bne.n	8002476 <PlasmaDriverInit+0x86>
			PowerOnHighSupplies();
 8002470:	f7ff fc72 	bl	8001d58 <PowerOnHighSupplies>
		else
		printString("\n\rPOWER_OFF_IRQ line is not high - 500V is not powered on");
	}
}
 8002474:	e002      	b.n	800247c <PlasmaDriverInit+0x8c>
		printString("\n\rPOWER_OFF_IRQ line is not high - 500V is not powered on");
 8002476:	480b      	ldr	r0, [pc, #44]	@ (80024a4 <PlasmaDriverInit+0xb4>)
 8002478:	f7fe f974 	bl	8000764 <printString>
}
 800247c:	bf00      	nop
 800247e:	bd80      	pop	{r7, pc}
 8002480:	58020400 	.word	0x58020400
 8002484:	08011ec8 	.word	0x08011ec8
 8002488:	240008c8 	.word	0x240008c8
 800248c:	08011ee0 	.word	0x08011ee0
 8002490:	08011ef4 	.word	0x08011ef4
 8002494:	24000908 	.word	0x24000908
 8002498:	24000978 	.word	0x24000978
 800249c:	240009e8 	.word	0x240009e8
 80024a0:	58021000 	.word	0x58021000
 80024a4:	08011f14 	.word	0x08011f14

080024a8 <PlasmaDoTask>:

// This command is called from a while loop, and will execute any needed task.
void PlasmaDoTask(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
	PlasmaDriverMenu(); //Check UART3 and execute command
 80024ac:	f7ff ff4a 	bl	8002344 <PlasmaDriverMenu>

	if (sFlashConfig.mode == RUN_MODE)
 80024b0:	4b0d      	ldr	r3, [pc, #52]	@ (80024e8 <PlasmaDoTask+0x40>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d114      	bne.n	80024e2 <PlasmaDoTask+0x3a>
	{
		//Check if robot controller requested the plasma On or Off
		if (HAL_GPIO_ReadPin(TURN_PLASMA_ON_GPIO_Port, TURN_PLASMA_ON_Pin) == GPIO_PIN_RESET)		//There is an inverter between MCU and the input, thus check RESET
 80024b8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80024bc:	480b      	ldr	r0, [pc, #44]	@ (80024ec <PlasmaDoTask+0x44>)
 80024be:	f008 f8a5 	bl	800a60c <HAL_GPIO_ReadPin>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d10c      	bne.n	80024e2 <PlasmaDoTask+0x3a>
		{
			if (powerStatus == V500_ON)
 80024c8:	4b09      	ldr	r3, [pc, #36]	@ (80024f0 <PlasmaDoTask+0x48>)
 80024ca:	881b      	ldrh	r3, [r3, #0]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d105      	bne.n	80024dc <PlasmaDoTask+0x34>
			{
				sHbridge.on = 1; // Turn Hbridge on
 80024d0:	4b08      	ldr	r3, [pc, #32]	@ (80024f4 <PlasmaDoTask+0x4c>)
 80024d2:	2201      	movs	r2, #1
 80024d4:	801a      	strh	r2, [r3, #0]
				programHbridge();
 80024d6:	f7fe fa6b 	bl	80009b0 <programHbridge>
			}
			else
				printString("\n\rUnable to turn H-bridge on, since 500V is not powered on");
		}
	}
}
 80024da:	e002      	b.n	80024e2 <PlasmaDoTask+0x3a>
				printString("\n\rUnable to turn H-bridge on, since 500V is not powered on");
 80024dc:	4806      	ldr	r0, [pc, #24]	@ (80024f8 <PlasmaDoTask+0x50>)
 80024de:	f7fe f941 	bl	8000764 <printString>
}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	240008c8 	.word	0x240008c8
 80024ec:	58021000 	.word	0x58021000
 80024f0:	240008c4 	.word	0x240008c4
 80024f4:	2400001c 	.word	0x2400001c
 80024f8:	08011f50 	.word	0x08011f50

080024fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002500:	f001 fdd4 	bl	80040ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002504:	f000 f826 	bl	8002554 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002508:	f000 f894 	bl	8002634 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800250c:	f000 fe4c 	bl	80031a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002510:	f000 fe22 	bl	8003158 <MX_DMA_Init>
  MX_TIM1_Init();
 8002514:	f000 fc26 	bl	8002d64 <MX_TIM1_Init>
  MX_ETH_Init();
 8002518:	f000 fb3e 	bl	8002b98 <MX_ETH_Init>
  MX_ADC2_Init();
 800251c:	f000 f958 	bl	80027d0 <MX_ADC2_Init>
  MX_USB_OTG_HS_USB_Init();
 8002520:	f000 fe12 	bl	8003148 <MX_USB_OTG_HS_USB_Init>
  MX_ADC3_Init();
 8002524:	f000 f9f8 	bl	8002918 <MX_ADC3_Init>
  MX_USART3_UART_Init();
 8002528:	f000 fbd0 	bl	8002ccc <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800252c:	f000 f8b2 	bl	8002694 <MX_ADC1_Init>
  MX_COMP2_Init();
 8002530:	f000 fb04 	bl	8002b3c <MX_COMP2_Init>
  MX_TIM2_Init();
 8002534:	f000 fca8 	bl	8002e88 <MX_TIM2_Init>
  MX_LPUART1_UART_Init();
 8002538:	f000 fb7a 	bl	8002c30 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 800253c:	f000 fcfe 	bl	8002f3c <MX_TIM3_Init>
  MX_TIM4_Init();
 8002540:	f000 fd50 	bl	8002fe4 <MX_TIM4_Init>
  MX_TIM15_Init();
 8002544:	f000 fda8 	bl	8003098 <MX_TIM15_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  PlasmaDriverInit();  			//Initialize plasma driver
 8002548:	f7ff ff52 	bl	80023f0 <PlasmaDriverInit>
  while (1)
  {
	PlasmaDoTask();     	    //Handle plasma driver task
 800254c:	f7ff ffac 	bl	80024a8 <PlasmaDoTask>
 8002550:	e7fc      	b.n	800254c <main+0x50>
	...

08002554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b09c      	sub	sp, #112	@ 0x70
 8002558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800255a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800255e:	224c      	movs	r2, #76	@ 0x4c
 8002560:	2100      	movs	r1, #0
 8002562:	4618      	mov	r0, r3
 8002564:	f00e fbd2 	bl	8010d0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002568:	1d3b      	adds	r3, r7, #4
 800256a:	2220      	movs	r2, #32
 800256c:	2100      	movs	r1, #0
 800256e:	4618      	mov	r0, r3
 8002570:	f00e fbcc 	bl	8010d0c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002574:	2002      	movs	r0, #2
 8002576:	f008 f895 	bl	800a6a4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800257a:	2300      	movs	r3, #0
 800257c:	603b      	str	r3, [r7, #0]
 800257e:	4b2c      	ldr	r3, [pc, #176]	@ (8002630 <SystemClock_Config+0xdc>)
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	4a2b      	ldr	r2, [pc, #172]	@ (8002630 <SystemClock_Config+0xdc>)
 8002584:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002588:	6193      	str	r3, [r2, #24]
 800258a:	4b29      	ldr	r3, [pc, #164]	@ (8002630 <SystemClock_Config+0xdc>)
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002592:	603b      	str	r3, [r7, #0]
 8002594:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002596:	bf00      	nop
 8002598:	4b25      	ldr	r3, [pc, #148]	@ (8002630 <SystemClock_Config+0xdc>)
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025a4:	d1f8      	bne.n	8002598 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80025a6:	2321      	movs	r3, #33	@ 0x21
 80025a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80025aa:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80025ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80025b0:	2301      	movs	r3, #1
 80025b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025b4:	2302      	movs	r3, #2
 80025b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025b8:	2302      	movs	r3, #2
 80025ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80025bc:	2304      	movs	r3, #4
 80025be:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 80025c0:	f240 1313 	movw	r3, #275	@ 0x113
 80025c4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80025c6:	2301      	movs	r3, #1
 80025c8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80025ca:	2304      	movs	r3, #4
 80025cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80025ce:	2302      	movs	r3, #2
 80025d0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80025d2:	2304      	movs	r3, #4
 80025d4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80025d6:	2300      	movs	r3, #0
 80025d8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80025da:	2300      	movs	r3, #0
 80025dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025e2:	4618      	mov	r0, r3
 80025e4:	f008 f898 	bl	800a718 <HAL_RCC_OscConfig>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80025ee:	f000 ff4b 	bl	8003488 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025f2:	233f      	movs	r3, #63	@ 0x3f
 80025f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025f6:	2303      	movs	r3, #3
 80025f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80025fa:	2300      	movs	r3, #0
 80025fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80025fe:	2308      	movs	r3, #8
 8002600:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002602:	2340      	movs	r3, #64	@ 0x40
 8002604:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002606:	2340      	movs	r3, #64	@ 0x40
 8002608:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV16;
 800260a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800260e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002610:	2340      	movs	r3, #64	@ 0x40
 8002612:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002614:	1d3b      	adds	r3, r7, #4
 8002616:	2103      	movs	r1, #3
 8002618:	4618      	mov	r0, r3
 800261a:	f008 fc57 	bl	800aecc <HAL_RCC_ClockConfig>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002624:	f000 ff30 	bl	8003488 <Error_Handler>
  }
}
 8002628:	bf00      	nop
 800262a:	3770      	adds	r7, #112	@ 0x70
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	58024800 	.word	0x58024800

08002634 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b0ae      	sub	sp, #184	@ 0xb8
 8002638:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800263a:	463b      	mov	r3, r7
 800263c:	22b8      	movs	r2, #184	@ 0xb8
 800263e:	2100      	movs	r1, #0
 8002640:	4618      	mov	r0, r3
 8002642:	f00e fb63 	bl	8010d0c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002646:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800264a:	f04f 0300 	mov.w	r3, #0
 800264e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8002652:	2301      	movs	r3, #1
 8002654:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 8002656:	2318      	movs	r3, #24
 8002658:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800265a:	2302      	movs	r3, #2
 800265c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800265e:	2302      	movs	r3, #2
 8002660:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002662:	2302      	movs	r3, #2
 8002664:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8002666:	23c0      	movs	r3, #192	@ 0xc0
 8002668:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800266a:	2300      	movs	r3, #0
 800266c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800266e:	2300      	movs	r3, #0
 8002670:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8002672:	2300      	movs	r3, #0
 8002674:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002678:	463b      	mov	r3, r7
 800267a:	4618      	mov	r0, r3
 800267c:	f008 ffb2 	bl	800b5e4 <HAL_RCCEx_PeriphCLKConfig>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8002686:	f000 feff 	bl	8003488 <Error_Handler>
  }
}
 800268a:	bf00      	nop
 800268c:	37b8      	adds	r7, #184	@ 0xb8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
	...

08002694 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b08c      	sub	sp, #48	@ 0x30
 8002698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800269a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	605a      	str	r2, [r3, #4]
 80026a4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80026a6:	463b      	mov	r3, r7
 80026a8:	2224      	movs	r2, #36	@ 0x24
 80026aa:	2100      	movs	r1, #0
 80026ac:	4618      	mov	r0, r3
 80026ae:	f00e fb2d 	bl	8010d0c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80026b2:	4b42      	ldr	r3, [pc, #264]	@ (80027bc <MX_ADC1_Init+0x128>)
 80026b4:	4a42      	ldr	r2, [pc, #264]	@ (80027c0 <MX_ADC1_Init+0x12c>)
 80026b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80026b8:	4b40      	ldr	r3, [pc, #256]	@ (80027bc <MX_ADC1_Init+0x128>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80026be:	4b3f      	ldr	r3, [pc, #252]	@ (80027bc <MX_ADC1_Init+0x128>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80026c4:	4b3d      	ldr	r3, [pc, #244]	@ (80027bc <MX_ADC1_Init+0x128>)
 80026c6:	2201      	movs	r2, #1
 80026c8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80026ca:	4b3c      	ldr	r3, [pc, #240]	@ (80027bc <MX_ADC1_Init+0x128>)
 80026cc:	2208      	movs	r2, #8
 80026ce:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80026d0:	4b3a      	ldr	r3, [pc, #232]	@ (80027bc <MX_ADC1_Init+0x128>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80026d6:	4b39      	ldr	r3, [pc, #228]	@ (80027bc <MX_ADC1_Init+0x128>)
 80026d8:	2201      	movs	r2, #1
 80026da:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 80026dc:	4b37      	ldr	r3, [pc, #220]	@ (80027bc <MX_ADC1_Init+0x128>)
 80026de:	2203      	movs	r2, #3
 80026e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80026e2:	4b36      	ldr	r3, [pc, #216]	@ (80027bc <MX_ADC1_Init+0x128>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC1;
 80026ea:	4b34      	ldr	r3, [pc, #208]	@ (80027bc <MX_ADC1_Init+0x128>)
 80026ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80026f2:	4b32      	ldr	r3, [pc, #200]	@ (80027bc <MX_ADC1_Init+0x128>)
 80026f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 80026fa:	4b30      	ldr	r3, [pc, #192]	@ (80027bc <MX_ADC1_Init+0x128>)
 80026fc:	2201      	movs	r2, #1
 80026fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002700:	4b2e      	ldr	r3, [pc, #184]	@ (80027bc <MX_ADC1_Init+0x128>)
 8002702:	2200      	movs	r2, #0
 8002704:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002706:	4b2d      	ldr	r3, [pc, #180]	@ (80027bc <MX_ADC1_Init+0x128>)
 8002708:	2200      	movs	r2, #0
 800270a:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 800270c:	4b2b      	ldr	r3, [pc, #172]	@ (80027bc <MX_ADC1_Init+0x128>)
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002714:	4829      	ldr	r0, [pc, #164]	@ (80027bc <MX_ADC1_Init+0x128>)
 8002716:	f002 f9d1 	bl	8004abc <HAL_ADC_Init>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002720:	f000 feb2 	bl	8003488 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8002724:	2306      	movs	r3, #6
 8002726:	627b      	str	r3, [r7, #36]	@ 0x24
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_32_10_BITS;
 8002728:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800272c:	62bb      	str	r3, [r7, #40]	@ 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 800272e:	2300      	movs	r3, #0
 8002730:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002732:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002736:	4619      	mov	r1, r3
 8002738:	4820      	ldr	r0, [pc, #128]	@ (80027bc <MX_ADC1_Init+0x128>)
 800273a:	f004 fbcd 	bl	8006ed8 <HAL_ADCEx_MultiModeConfigChannel>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8002744:	f000 fea0 	bl	8003488 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002748:	4b1e      	ldr	r3, [pc, #120]	@ (80027c4 <MX_ADC1_Init+0x130>)
 800274a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800274c:	2306      	movs	r3, #6
 800274e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 8002750:	2302      	movs	r3, #2
 8002752:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002754:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8002758:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800275a:	2304      	movs	r3, #4
 800275c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800275e:	2300      	movs	r3, #0
 8002760:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8002762:	2300      	movs	r3, #0
 8002764:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002768:	463b      	mov	r3, r7
 800276a:	4619      	mov	r1, r3
 800276c:	4813      	ldr	r0, [pc, #76]	@ (80027bc <MX_ADC1_Init+0x128>)
 800276e:	f002 fed7 	bl	8005520 <HAL_ADC_ConfigChannel>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8002778:	f000 fe86 	bl	8003488 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 800277c:	4b12      	ldr	r3, [pc, #72]	@ (80027c8 <MX_ADC1_Init+0x134>)
 800277e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002780:	230c      	movs	r3, #12
 8002782:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002784:	463b      	mov	r3, r7
 8002786:	4619      	mov	r1, r3
 8002788:	480c      	ldr	r0, [pc, #48]	@ (80027bc <MX_ADC1_Init+0x128>)
 800278a:	f002 fec9 	bl	8005520 <HAL_ADC_ConfigChannel>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 8002794:	f000 fe78 	bl	8003488 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8002798:	4b0c      	ldr	r3, [pc, #48]	@ (80027cc <MX_ADC1_Init+0x138>)
 800279a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800279c:	2312      	movs	r3, #18
 800279e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80027a0:	463b      	mov	r3, r7
 80027a2:	4619      	mov	r1, r3
 80027a4:	4805      	ldr	r0, [pc, #20]	@ (80027bc <MX_ADC1_Init+0x128>)
 80027a6:	f002 febb 	bl	8005520 <HAL_ADC_ConfigChannel>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 80027b0:	f000 fe6a 	bl	8003488 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80027b4:	bf00      	nop
 80027b6:	3730      	adds	r7, #48	@ 0x30
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	24000908 	.word	0x24000908
 80027c0:	40022000 	.word	0x40022000
 80027c4:	3ef08000 	.word	0x3ef08000
 80027c8:	4b840000 	.word	0x4b840000
 80027cc:	43210000 	.word	0x43210000

080027d0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b090      	sub	sp, #64	@ 0x40
 80027d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80027d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	605a      	str	r2, [r3, #4]
 80027e0:	609a      	str	r2, [r3, #8]
 80027e2:	60da      	str	r2, [r3, #12]
 80027e4:	611a      	str	r2, [r3, #16]
 80027e6:	615a      	str	r2, [r3, #20]
 80027e8:	619a      	str	r2, [r3, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 80027ea:	463b      	mov	r3, r7
 80027ec:	2224      	movs	r2, #36	@ 0x24
 80027ee:	2100      	movs	r1, #0
 80027f0:	4618      	mov	r0, r3
 80027f2:	f00e fa8b 	bl	8010d0c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80027f6:	4b42      	ldr	r3, [pc, #264]	@ (8002900 <MX_ADC2_Init+0x130>)
 80027f8:	4a42      	ldr	r2, [pc, #264]	@ (8002904 <MX_ADC2_Init+0x134>)
 80027fa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80027fc:	4b40      	ldr	r3, [pc, #256]	@ (8002900 <MX_ADC2_Init+0x130>)
 80027fe:	2200      	movs	r2, #0
 8002800:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8002802:	4b3f      	ldr	r3, [pc, #252]	@ (8002900 <MX_ADC2_Init+0x130>)
 8002804:	2200      	movs	r2, #0
 8002806:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002808:	4b3d      	ldr	r3, [pc, #244]	@ (8002900 <MX_ADC2_Init+0x130>)
 800280a:	2201      	movs	r2, #1
 800280c:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800280e:	4b3c      	ldr	r3, [pc, #240]	@ (8002900 <MX_ADC2_Init+0x130>)
 8002810:	2208      	movs	r2, #8
 8002812:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002814:	4b3a      	ldr	r3, [pc, #232]	@ (8002900 <MX_ADC2_Init+0x130>)
 8002816:	2200      	movs	r2, #0
 8002818:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800281a:	4b39      	ldr	r3, [pc, #228]	@ (8002900 <MX_ADC2_Init+0x130>)
 800281c:	2201      	movs	r2, #1
 800281e:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 3;
 8002820:	4b37      	ldr	r3, [pc, #220]	@ (8002900 <MX_ADC2_Init+0x130>)
 8002822:	2203      	movs	r2, #3
 8002824:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002826:	4b36      	ldr	r3, [pc, #216]	@ (8002900 <MX_ADC2_Init+0x130>)
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800282e:	4b34      	ldr	r3, [pc, #208]	@ (8002900 <MX_ADC2_Init+0x130>)
 8002830:	2200      	movs	r2, #0
 8002832:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002834:	4b32      	ldr	r3, [pc, #200]	@ (8002900 <MX_ADC2_Init+0x130>)
 8002836:	2200      	movs	r2, #0
 8002838:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800283a:	4b31      	ldr	r3, [pc, #196]	@ (8002900 <MX_ADC2_Init+0x130>)
 800283c:	2200      	movs	r2, #0
 800283e:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8002840:	4b2f      	ldr	r3, [pc, #188]	@ (8002900 <MX_ADC2_Init+0x130>)
 8002842:	2200      	movs	r2, #0
 8002844:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002848:	482d      	ldr	r0, [pc, #180]	@ (8002900 <MX_ADC2_Init+0x130>)
 800284a:	f002 f937 	bl	8004abc <HAL_ADC_Init>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8002854:	f000 fe18 	bl	8003488 <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8002858:	4b2b      	ldr	r3, [pc, #172]	@ (8002908 <MX_ADC2_Init+0x138>)
 800285a:	627b      	str	r3, [r7, #36]	@ 0x24
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 800285c:	f44f 0340 	mov.w	r3, #12582912	@ 0xc00000
 8002860:	62bb      	str	r3, [r7, #40]	@ 0x28
  AnalogWDGConfig.Channel = ADC_CHANNEL_3;
 8002862:	4b2a      	ldr	r3, [pc, #168]	@ (800290c <MX_ADC2_Init+0x13c>)
 8002864:	62fb      	str	r3, [r7, #44]	@ 0x2c
  AnalogWDGConfig.ITMode = DISABLE;
 8002866:	2300      	movs	r3, #0
 8002868:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  AnalogWDGConfig.HighThreshold = 0;
 800286c:	2300      	movs	r3, #0
 800286e:	637b      	str	r3, [r7, #52]	@ 0x34
  AnalogWDGConfig.LowThreshold = 0;
 8002870:	2300      	movs	r3, #0
 8002872:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 8002874:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002878:	4619      	mov	r1, r3
 800287a:	4821      	ldr	r0, [pc, #132]	@ (8002900 <MX_ADC2_Init+0x130>)
 800287c:	f003 fb7c 	bl	8005f78 <HAL_ADC_AnalogWDGConfig>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 8002886:	f000 fdff 	bl	8003488 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800288a:	4b20      	ldr	r3, [pc, #128]	@ (800290c <MX_ADC2_Init+0x13c>)
 800288c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800288e:	2306      	movs	r3, #6
 8002890:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_8CYCLES_5;
 8002892:	2302      	movs	r3, #2
 8002894:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002896:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800289a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800289c:	2304      	movs	r3, #4
 800289e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80028a4:	2300      	movs	r3, #0
 80028a6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80028aa:	463b      	mov	r3, r7
 80028ac:	4619      	mov	r1, r3
 80028ae:	4814      	ldr	r0, [pc, #80]	@ (8002900 <MX_ADC2_Init+0x130>)
 80028b0:	f002 fe36 	bl	8005520 <HAL_ADC_ConfigChannel>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <MX_ADC2_Init+0xee>
  {
    Error_Handler();
 80028ba:	f000 fde5 	bl	8003488 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_19;
 80028be:	4b14      	ldr	r3, [pc, #80]	@ (8002910 <MX_ADC2_Init+0x140>)
 80028c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80028c2:	230c      	movs	r3, #12
 80028c4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80028c6:	463b      	mov	r3, r7
 80028c8:	4619      	mov	r1, r3
 80028ca:	480d      	ldr	r0, [pc, #52]	@ (8002900 <MX_ADC2_Init+0x130>)
 80028cc:	f002 fe28 	bl	8005520 <HAL_ADC_ConfigChannel>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <MX_ADC2_Init+0x10a>
  {
    Error_Handler();
 80028d6:	f000 fdd7 	bl	8003488 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80028da:	4b0e      	ldr	r3, [pc, #56]	@ (8002914 <MX_ADC2_Init+0x144>)
 80028dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80028de:	2312      	movs	r3, #18
 80028e0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80028e2:	463b      	mov	r3, r7
 80028e4:	4619      	mov	r1, r3
 80028e6:	4806      	ldr	r0, [pc, #24]	@ (8002900 <MX_ADC2_Init+0x130>)
 80028e8:	f002 fe1a 	bl	8005520 <HAL_ADC_ConfigChannel>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <MX_ADC2_Init+0x126>
  {
    Error_Handler();
 80028f2:	f000 fdc9 	bl	8003488 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80028f6:	bf00      	nop
 80028f8:	3740      	adds	r7, #64	@ 0x40
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	24000978 	.word	0x24000978
 8002904:	40022100 	.word	0x40022100
 8002908:	7dc00000 	.word	0x7dc00000
 800290c:	0c900008 	.word	0x0c900008
 8002910:	4fb80000 	.word	0x4fb80000
 8002914:	14f00020 	.word	0x14f00020

08002918 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b08a      	sub	sp, #40	@ 0x28
 800291c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800291e:	1d3b      	adds	r3, r7, #4
 8002920:	2224      	movs	r2, #36	@ 0x24
 8002922:	2100      	movs	r1, #0
 8002924:	4618      	mov	r0, r3
 8002926:	f00e f9f1 	bl	8010d0c <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800292a:	4b78      	ldr	r3, [pc, #480]	@ (8002b0c <MX_ADC3_Init+0x1f4>)
 800292c:	4a78      	ldr	r2, [pc, #480]	@ (8002b10 <MX_ADC3_Init+0x1f8>)
 800292e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002930:	4b76      	ldr	r3, [pc, #472]	@ (8002b0c <MX_ADC3_Init+0x1f4>)
 8002932:	2200      	movs	r2, #0
 8002934:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002936:	4b75      	ldr	r3, [pc, #468]	@ (8002b0c <MX_ADC3_Init+0x1f4>)
 8002938:	2208      	movs	r2, #8
 800293a:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 800293c:	4b73      	ldr	r3, [pc, #460]	@ (8002b0c <MX_ADC3_Init+0x1f4>)
 800293e:	2200      	movs	r2, #0
 8002940:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002942:	4b72      	ldr	r3, [pc, #456]	@ (8002b0c <MX_ADC3_Init+0x1f4>)
 8002944:	2201      	movs	r2, #1
 8002946:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002948:	4b70      	ldr	r3, [pc, #448]	@ (8002b0c <MX_ADC3_Init+0x1f4>)
 800294a:	2208      	movs	r2, #8
 800294c:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800294e:	4b6f      	ldr	r3, [pc, #444]	@ (8002b0c <MX_ADC3_Init+0x1f4>)
 8002950:	2200      	movs	r2, #0
 8002952:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8002954:	4b6d      	ldr	r3, [pc, #436]	@ (8002b0c <MX_ADC3_Init+0x1f4>)
 8002956:	2200      	movs	r2, #0
 8002958:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 11;
 800295a:	4b6c      	ldr	r3, [pc, #432]	@ (8002b0c <MX_ADC3_Init+0x1f4>)
 800295c:	220b      	movs	r2, #11
 800295e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002960:	4b6a      	ldr	r3, [pc, #424]	@ (8002b0c <MX_ADC3_Init+0x1f4>)
 8002962:	2200      	movs	r2, #0
 8002964:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002968:	4b68      	ldr	r3, [pc, #416]	@ (8002b0c <MX_ADC3_Init+0x1f4>)
 800296a:	2200      	movs	r2, #0
 800296c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800296e:	4b67      	ldr	r3, [pc, #412]	@ (8002b0c <MX_ADC3_Init+0x1f4>)
 8002970:	2200      	movs	r2, #0
 8002972:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8002974:	4b65      	ldr	r3, [pc, #404]	@ (8002b0c <MX_ADC3_Init+0x1f4>)
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 800297c:	4b63      	ldr	r3, [pc, #396]	@ (8002b0c <MX_ADC3_Init+0x1f4>)
 800297e:	2200      	movs	r2, #0
 8002980:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 8002982:	4b62      	ldr	r3, [pc, #392]	@ (8002b0c <MX_ADC3_Init+0x1f4>)
 8002984:	2201      	movs	r2, #1
 8002986:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002988:	4b60      	ldr	r3, [pc, #384]	@ (8002b0c <MX_ADC3_Init+0x1f4>)
 800298a:	2200      	movs	r2, #0
 800298c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800298e:	4b5f      	ldr	r3, [pc, #380]	@ (8002b0c <MX_ADC3_Init+0x1f4>)
 8002990:	2200      	movs	r2, #0
 8002992:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8002994:	4b5d      	ldr	r3, [pc, #372]	@ (8002b0c <MX_ADC3_Init+0x1f4>)
 8002996:	2200      	movs	r2, #0
 8002998:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800299c:	485b      	ldr	r0, [pc, #364]	@ (8002b0c <MX_ADC3_Init+0x1f4>)
 800299e:	f002 f88d 	bl	8004abc <HAL_ADC_Init>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 80029a8:	f000 fd6e 	bl	8003488 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80029ac:	2301      	movs	r3, #1
 80029ae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80029b0:	2306      	movs	r3, #6
 80029b2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_6CYCLES_5;
 80029b4:	2301      	movs	r3, #1
 80029b6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80029b8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80029bc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80029be:	2304      	movs	r3, #4
 80029c0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80029c2:	2300      	movs	r3, #0
 80029c4:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 80029c6:	2300      	movs	r3, #0
 80029c8:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80029ca:	1d3b      	adds	r3, r7, #4
 80029cc:	4619      	mov	r1, r3
 80029ce:	484f      	ldr	r0, [pc, #316]	@ (8002b0c <MX_ADC3_Init+0x1f4>)
 80029d0:	f002 fda6 	bl	8005520 <HAL_ADC_ConfigChannel>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <MX_ADC3_Init+0xc6>
  {
    Error_Handler();
 80029da:	f000 fd55 	bl	8003488 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80029de:	4b4d      	ldr	r3, [pc, #308]	@ (8002b14 <MX_ADC3_Init+0x1fc>)
 80029e0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80029e2:	230c      	movs	r3, #12
 80029e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80029e6:	1d3b      	adds	r3, r7, #4
 80029e8:	4619      	mov	r1, r3
 80029ea:	4848      	ldr	r0, [pc, #288]	@ (8002b0c <MX_ADC3_Init+0x1f4>)
 80029ec:	f002 fd98 	bl	8005520 <HAL_ADC_ConfigChannel>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <MX_ADC3_Init+0xe2>
  {
    Error_Handler();
 80029f6:	f000 fd47 	bl	8003488 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80029fa:	4b47      	ldr	r3, [pc, #284]	@ (8002b18 <MX_ADC3_Init+0x200>)
 80029fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80029fe:	2312      	movs	r3, #18
 8002a00:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002a02:	1d3b      	adds	r3, r7, #4
 8002a04:	4619      	mov	r1, r3
 8002a06:	4841      	ldr	r0, [pc, #260]	@ (8002b0c <MX_ADC3_Init+0x1f4>)
 8002a08:	f002 fd8a 	bl	8005520 <HAL_ADC_ConfigChannel>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <MX_ADC3_Init+0xfe>
  {
    Error_Handler();
 8002a12:	f000 fd39 	bl	8003488 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002a16:	4b41      	ldr	r3, [pc, #260]	@ (8002b1c <MX_ADC3_Init+0x204>)
 8002a18:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8002a1a:	2318      	movs	r3, #24
 8002a1c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002a1e:	1d3b      	adds	r3, r7, #4
 8002a20:	4619      	mov	r1, r3
 8002a22:	483a      	ldr	r0, [pc, #232]	@ (8002b0c <MX_ADC3_Init+0x1f4>)
 8002a24:	f002 fd7c 	bl	8005520 <HAL_ADC_ConfigChannel>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <MX_ADC3_Init+0x11a>
  {
    Error_Handler();
 8002a2e:	f000 fd2b 	bl	8003488 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002a32:	4b3b      	ldr	r3, [pc, #236]	@ (8002b20 <MX_ADC3_Init+0x208>)
 8002a34:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8002a36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a3a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002a3c:	1d3b      	adds	r3, r7, #4
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4832      	ldr	r0, [pc, #200]	@ (8002b0c <MX_ADC3_Init+0x1f4>)
 8002a42:	f002 fd6d 	bl	8005520 <HAL_ADC_ConfigChannel>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <MX_ADC3_Init+0x138>
  {
    Error_Handler();
 8002a4c:	f000 fd1c 	bl	8003488 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002a50:	4b34      	ldr	r3, [pc, #208]	@ (8002b24 <MX_ADC3_Init+0x20c>)
 8002a52:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8002a54:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8002a58:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002a5a:	1d3b      	adds	r3, r7, #4
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	482b      	ldr	r0, [pc, #172]	@ (8002b0c <MX_ADC3_Init+0x1f4>)
 8002a60:	f002 fd5e 	bl	8005520 <HAL_ADC_ConfigChannel>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <MX_ADC3_Init+0x156>
  {
    Error_Handler();
 8002a6a:	f000 fd0d 	bl	8003488 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002a6e:	4b2e      	ldr	r3, [pc, #184]	@ (8002b28 <MX_ADC3_Init+0x210>)
 8002a70:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8002a72:	f44f 7386 	mov.w	r3, #268	@ 0x10c
 8002a76:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002a78:	1d3b      	adds	r3, r7, #4
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4823      	ldr	r0, [pc, #140]	@ (8002b0c <MX_ADC3_Init+0x1f4>)
 8002a7e:	f002 fd4f 	bl	8005520 <HAL_ADC_ConfigChannel>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <MX_ADC3_Init+0x174>
  {
    Error_Handler();
 8002a88:	f000 fcfe 	bl	8003488 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002a8c:	4b27      	ldr	r3, [pc, #156]	@ (8002b2c <MX_ADC3_Init+0x214>)
 8002a8e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8002a90:	f44f 7389 	mov.w	r3, #274	@ 0x112
 8002a94:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002a96:	1d3b      	adds	r3, r7, #4
 8002a98:	4619      	mov	r1, r3
 8002a9a:	481c      	ldr	r0, [pc, #112]	@ (8002b0c <MX_ADC3_Init+0x1f4>)
 8002a9c:	f002 fd40 	bl	8005520 <HAL_ADC_ConfigChannel>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <MX_ADC3_Init+0x192>
  {
    Error_Handler();
 8002aa6:	f000 fcef 	bl	8003488 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002aaa:	4b21      	ldr	r3, [pc, #132]	@ (8002b30 <MX_ADC3_Init+0x218>)
 8002aac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8002aae:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8002ab2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002ab4:	1d3b      	adds	r3, r7, #4
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4814      	ldr	r0, [pc, #80]	@ (8002b0c <MX_ADC3_Init+0x1f4>)
 8002aba:	f002 fd31 	bl	8005520 <HAL_ADC_ConfigChannel>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <MX_ADC3_Init+0x1b0>
  {
    Error_Handler();
 8002ac4:	f000 fce0 	bl	8003488 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002ac8:	4b1a      	ldr	r3, [pc, #104]	@ (8002b34 <MX_ADC3_Init+0x21c>)
 8002aca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8002acc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ad0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002ad2:	1d3b      	adds	r3, r7, #4
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	480d      	ldr	r0, [pc, #52]	@ (8002b0c <MX_ADC3_Init+0x1f4>)
 8002ad8:	f002 fd22 	bl	8005520 <HAL_ADC_ConfigChannel>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <MX_ADC3_Init+0x1ce>
  {
    Error_Handler();
 8002ae2:	f000 fcd1 	bl	8003488 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002ae6:	4b14      	ldr	r3, [pc, #80]	@ (8002b38 <MX_ADC3_Init+0x220>)
 8002ae8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8002aea:	f240 2306 	movw	r3, #518	@ 0x206
 8002aee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002af0:	1d3b      	adds	r3, r7, #4
 8002af2:	4619      	mov	r1, r3
 8002af4:	4805      	ldr	r0, [pc, #20]	@ (8002b0c <MX_ADC3_Init+0x1f4>)
 8002af6:	f002 fd13 	bl	8005520 <HAL_ADC_ConfigChannel>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <MX_ADC3_Init+0x1ec>
  {
    Error_Handler();
 8002b00:	f000 fcc2 	bl	8003488 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002b04:	bf00      	nop
 8002b06:	3728      	adds	r7, #40	@ 0x28
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	240009e8 	.word	0x240009e8
 8002b10:	58026000 	.word	0x58026000
 8002b14:	04300002 	.word	0x04300002
 8002b18:	08600004 	.word	0x08600004
 8002b1c:	0c900008 	.word	0x0c900008
 8002b20:	10c00010 	.word	0x10c00010
 8002b24:	14f00020 	.word	0x14f00020
 8002b28:	19200040 	.word	0x19200040
 8002b2c:	1d500080 	.word	0x1d500080
 8002b30:	21800100 	.word	0x21800100
 8002b34:	25b00200 	.word	0x25b00200
 8002b38:	2a000400 	.word	0x2a000400

08002b3c <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8002b40:	4b13      	ldr	r3, [pc, #76]	@ (8002b90 <MX_COMP2_Init+0x54>)
 8002b42:	4a14      	ldr	r2, [pc, #80]	@ (8002b94 <MX_COMP2_Init+0x58>)
 8002b44:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_IO2;
 8002b46:	4b12      	ldr	r3, [pc, #72]	@ (8002b90 <MX_COMP2_Init+0x54>)
 8002b48:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8002b4c:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO2;
 8002b4e:	4b10      	ldr	r3, [pc, #64]	@ (8002b90 <MX_COMP2_Init+0x54>)
 8002b50:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002b54:	60da      	str	r2, [r3, #12]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8002b56:	4b0e      	ldr	r3, [pc, #56]	@ (8002b90 <MX_COMP2_Init+0x54>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	619a      	str	r2, [r3, #24]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8002b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b90 <MX_COMP2_Init+0x54>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	615a      	str	r2, [r3, #20]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8002b62:	4b0b      	ldr	r3, [pc, #44]	@ (8002b90 <MX_COMP2_Init+0x54>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	61da      	str	r2, [r3, #28]
  hcomp2.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 8002b68:	4b09      	ldr	r3, [pc, #36]	@ (8002b90 <MX_COMP2_Init+0x54>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 8002b6e:	4b08      	ldr	r3, [pc, #32]	@ (8002b90 <MX_COMP2_Init+0x54>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8002b74:	4b06      	ldr	r3, [pc, #24]	@ (8002b90 <MX_COMP2_Init+0x54>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	621a      	str	r2, [r3, #32]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8002b7a:	4805      	ldr	r0, [pc, #20]	@ (8002b90 <MX_COMP2_Init+0x54>)
 8002b7c:	f004 fa8e 	bl	800709c <HAL_COMP_Init>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <MX_COMP2_Init+0x4e>
  {
    Error_Handler();
 8002b86:	f000 fc7f 	bl	8003488 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8002b8a:	bf00      	nop
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	24000b48 	.word	0x24000b48
 8002b94:	58003810 	.word	0x58003810

08002b98 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8002b9c:	4b1e      	ldr	r3, [pc, #120]	@ (8002c18 <MX_ETH_Init+0x80>)
 8002b9e:	4a1f      	ldr	r2, [pc, #124]	@ (8002c1c <MX_ETH_Init+0x84>)
 8002ba0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8002ba2:	4b1f      	ldr	r3, [pc, #124]	@ (8002c20 <MX_ETH_Init+0x88>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8002ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8002c20 <MX_ETH_Init+0x88>)
 8002baa:	2280      	movs	r2, #128	@ 0x80
 8002bac:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8002bae:	4b1c      	ldr	r3, [pc, #112]	@ (8002c20 <MX_ETH_Init+0x88>)
 8002bb0:	22e1      	movs	r2, #225	@ 0xe1
 8002bb2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8002bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8002c20 <MX_ETH_Init+0x88>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8002bba:	4b19      	ldr	r3, [pc, #100]	@ (8002c20 <MX_ETH_Init+0x88>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8002bc0:	4b17      	ldr	r3, [pc, #92]	@ (8002c20 <MX_ETH_Init+0x88>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8002bc6:	4b14      	ldr	r3, [pc, #80]	@ (8002c18 <MX_ETH_Init+0x80>)
 8002bc8:	4a15      	ldr	r2, [pc, #84]	@ (8002c20 <MX_ETH_Init+0x88>)
 8002bca:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8002bcc:	4b12      	ldr	r3, [pc, #72]	@ (8002c18 <MX_ETH_Init+0x80>)
 8002bce:	2201      	movs	r2, #1
 8002bd0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8002bd2:	4b11      	ldr	r3, [pc, #68]	@ (8002c18 <MX_ETH_Init+0x80>)
 8002bd4:	4a13      	ldr	r2, [pc, #76]	@ (8002c24 <MX_ETH_Init+0x8c>)
 8002bd6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8002bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8002c18 <MX_ETH_Init+0x80>)
 8002bda:	4a13      	ldr	r2, [pc, #76]	@ (8002c28 <MX_ETH_Init+0x90>)
 8002bdc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8002bde:	4b0e      	ldr	r3, [pc, #56]	@ (8002c18 <MX_ETH_Init+0x80>)
 8002be0:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8002be4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8002be6:	480c      	ldr	r0, [pc, #48]	@ (8002c18 <MX_ETH_Init+0x80>)
 8002be8:	f006 fd66 	bl	80096b8 <HAL_ETH_Init>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8002bf2:	f000 fc49 	bl	8003488 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8002bf6:	2238      	movs	r2, #56	@ 0x38
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	480c      	ldr	r0, [pc, #48]	@ (8002c2c <MX_ETH_Init+0x94>)
 8002bfc:	f00e f886 	bl	8010d0c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8002c00:	4b0a      	ldr	r3, [pc, #40]	@ (8002c2c <MX_ETH_Init+0x94>)
 8002c02:	2221      	movs	r2, #33	@ 0x21
 8002c04:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8002c06:	4b09      	ldr	r3, [pc, #36]	@ (8002c2c <MX_ETH_Init+0x94>)
 8002c08:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002c0c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8002c0e:	4b07      	ldr	r3, [pc, #28]	@ (8002c2c <MX_ETH_Init+0x94>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8002c14:	bf00      	nop
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	24000b74 	.word	0x24000b74
 8002c1c:	40028000 	.word	0x40028000
 8002c20:	24000ec8 	.word	0x24000ec8
 8002c24:	240000f8 	.word	0x240000f8
 8002c28:	24000098 	.word	0x24000098
 8002c2c:	240008d0 	.word	0x240008d0

08002c30 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002c34:	4b22      	ldr	r3, [pc, #136]	@ (8002cc0 <MX_LPUART1_UART_Init+0x90>)
 8002c36:	4a23      	ldr	r2, [pc, #140]	@ (8002cc4 <MX_LPUART1_UART_Init+0x94>)
 8002c38:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8002c3a:	4b21      	ldr	r3, [pc, #132]	@ (8002cc0 <MX_LPUART1_UART_Init+0x90>)
 8002c3c:	4a22      	ldr	r2, [pc, #136]	@ (8002cc8 <MX_LPUART1_UART_Init+0x98>)
 8002c3e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c40:	4b1f      	ldr	r3, [pc, #124]	@ (8002cc0 <MX_LPUART1_UART_Init+0x90>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002c46:	4b1e      	ldr	r3, [pc, #120]	@ (8002cc0 <MX_LPUART1_UART_Init+0x90>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002c4c:	4b1c      	ldr	r3, [pc, #112]	@ (8002cc0 <MX_LPUART1_UART_Init+0x90>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002c52:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc0 <MX_LPUART1_UART_Init+0x90>)
 8002c54:	220c      	movs	r2, #12
 8002c56:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c58:	4b19      	ldr	r3, [pc, #100]	@ (8002cc0 <MX_LPUART1_UART_Init+0x90>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c5e:	4b18      	ldr	r3, [pc, #96]	@ (8002cc0 <MX_LPUART1_UART_Init+0x90>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c64:	4b16      	ldr	r3, [pc, #88]	@ (8002cc0 <MX_LPUART1_UART_Init+0x90>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c6a:	4b15      	ldr	r3, [pc, #84]	@ (8002cc0 <MX_LPUART1_UART_Init+0x90>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8002c70:	4b13      	ldr	r3, [pc, #76]	@ (8002cc0 <MX_LPUART1_UART_Init+0x90>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002c76:	4812      	ldr	r0, [pc, #72]	@ (8002cc0 <MX_LPUART1_UART_Init+0x90>)
 8002c78:	f00c fc13 	bl	800f4a2 <HAL_UART_Init>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8002c82:	f000 fc01 	bl	8003488 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c86:	2100      	movs	r1, #0
 8002c88:	480d      	ldr	r0, [pc, #52]	@ (8002cc0 <MX_LPUART1_UART_Init+0x90>)
 8002c8a:	f00d fe70 	bl	801096e <HAL_UARTEx_SetTxFifoThreshold>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8002c94:	f000 fbf8 	bl	8003488 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c98:	2100      	movs	r1, #0
 8002c9a:	4809      	ldr	r0, [pc, #36]	@ (8002cc0 <MX_LPUART1_UART_Init+0x90>)
 8002c9c:	f00d fea5 	bl	80109ea <HAL_UARTEx_SetRxFifoThreshold>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8002ca6:	f000 fbef 	bl	8003488 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002caa:	4805      	ldr	r0, [pc, #20]	@ (8002cc0 <MX_LPUART1_UART_Init+0x90>)
 8002cac:	f00d fe26 	bl	80108fc <HAL_UARTEx_DisableFifoMode>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8002cb6:	f000 fbe7 	bl	8003488 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002cba:	bf00      	nop
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	24000c24 	.word	0x24000c24
 8002cc4:	58000c00 	.word	0x58000c00
 8002cc8:	00033324 	.word	0x00033324

08002ccc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002cd0:	4b22      	ldr	r3, [pc, #136]	@ (8002d5c <MX_USART3_UART_Init+0x90>)
 8002cd2:	4a23      	ldr	r2, [pc, #140]	@ (8002d60 <MX_USART3_UART_Init+0x94>)
 8002cd4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002cd6:	4b21      	ldr	r3, [pc, #132]	@ (8002d5c <MX_USART3_UART_Init+0x90>)
 8002cd8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002cdc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002cde:	4b1f      	ldr	r3, [pc, #124]	@ (8002d5c <MX_USART3_UART_Init+0x90>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002ce4:	4b1d      	ldr	r3, [pc, #116]	@ (8002d5c <MX_USART3_UART_Init+0x90>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002cea:	4b1c      	ldr	r3, [pc, #112]	@ (8002d5c <MX_USART3_UART_Init+0x90>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8002d5c <MX_USART3_UART_Init+0x90>)
 8002cf2:	220c      	movs	r2, #12
 8002cf4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cf6:	4b19      	ldr	r3, [pc, #100]	@ (8002d5c <MX_USART3_UART_Init+0x90>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cfc:	4b17      	ldr	r3, [pc, #92]	@ (8002d5c <MX_USART3_UART_Init+0x90>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d02:	4b16      	ldr	r3, [pc, #88]	@ (8002d5c <MX_USART3_UART_Init+0x90>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d08:	4b14      	ldr	r3, [pc, #80]	@ (8002d5c <MX_USART3_UART_Init+0x90>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d0e:	4b13      	ldr	r3, [pc, #76]	@ (8002d5c <MX_USART3_UART_Init+0x90>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002d14:	4811      	ldr	r0, [pc, #68]	@ (8002d5c <MX_USART3_UART_Init+0x90>)
 8002d16:	f00c fbc4 	bl	800f4a2 <HAL_UART_Init>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002d20:	f000 fbb2 	bl	8003488 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d24:	2100      	movs	r1, #0
 8002d26:	480d      	ldr	r0, [pc, #52]	@ (8002d5c <MX_USART3_UART_Init+0x90>)
 8002d28:	f00d fe21 	bl	801096e <HAL_UARTEx_SetTxFifoThreshold>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002d32:	f000 fba9 	bl	8003488 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d36:	2100      	movs	r1, #0
 8002d38:	4808      	ldr	r0, [pc, #32]	@ (8002d5c <MX_USART3_UART_Init+0x90>)
 8002d3a:	f00d fe56 	bl	80109ea <HAL_UARTEx_SetRxFifoThreshold>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002d44:	f000 fba0 	bl	8003488 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002d48:	4804      	ldr	r0, [pc, #16]	@ (8002d5c <MX_USART3_UART_Init+0x90>)
 8002d4a:	f00d fdd7 	bl	80108fc <HAL_UARTEx_DisableFifoMode>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002d54:	f000 fb98 	bl	8003488 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002d58:	bf00      	nop
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	24000cb8 	.word	0x24000cb8
 8002d60:	40004800 	.word	0x40004800

08002d64 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b098      	sub	sp, #96	@ 0x60
 8002d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d6a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002d6e:	2200      	movs	r2, #0
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	605a      	str	r2, [r3, #4]
 8002d74:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d76:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	605a      	str	r2, [r3, #4]
 8002d80:	609a      	str	r2, [r3, #8]
 8002d82:	60da      	str	r2, [r3, #12]
 8002d84:	611a      	str	r2, [r3, #16]
 8002d86:	615a      	str	r2, [r3, #20]
 8002d88:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002d8a:	1d3b      	adds	r3, r7, #4
 8002d8c:	2234      	movs	r2, #52	@ 0x34
 8002d8e:	2100      	movs	r1, #0
 8002d90:	4618      	mov	r0, r3
 8002d92:	f00d ffbb 	bl	8010d0c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002d96:	4b3a      	ldr	r3, [pc, #232]	@ (8002e80 <MX_TIM1_Init+0x11c>)
 8002d98:	4a3a      	ldr	r2, [pc, #232]	@ (8002e84 <MX_TIM1_Init+0x120>)
 8002d9a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002d9c:	4b38      	ldr	r3, [pc, #224]	@ (8002e80 <MX_TIM1_Init+0x11c>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002da2:	4b37      	ldr	r3, [pc, #220]	@ (8002e80 <MX_TIM1_Init+0x11c>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3240;
 8002da8:	4b35      	ldr	r3, [pc, #212]	@ (8002e80 <MX_TIM1_Init+0x11c>)
 8002daa:	f640 42a8 	movw	r2, #3240	@ 0xca8
 8002dae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002db0:	4b33      	ldr	r3, [pc, #204]	@ (8002e80 <MX_TIM1_Init+0x11c>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002db6:	4b32      	ldr	r3, [pc, #200]	@ (8002e80 <MX_TIM1_Init+0x11c>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dbc:	4b30      	ldr	r3, [pc, #192]	@ (8002e80 <MX_TIM1_Init+0x11c>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002dc2:	482f      	ldr	r0, [pc, #188]	@ (8002e80 <MX_TIM1_Init+0x11c>)
 8002dc4:	f00a fff4 	bl	800ddb0 <HAL_TIM_PWM_Init>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002dce:	f000 fb5b 	bl	8003488 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002dde:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002de2:	4619      	mov	r1, r3
 8002de4:	4826      	ldr	r0, [pc, #152]	@ (8002e80 <MX_TIM1_Init+0x11c>)
 8002de6:	f00c f9fb 	bl	800f1e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002df0:	f000 fb4a 	bl	8003488 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002df4:	2360      	movs	r3, #96	@ 0x60
 8002df6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 1620;
 8002df8:	f240 6354 	movw	r3, #1620	@ 0x654
 8002dfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002dfe:	2302      	movs	r3, #2
 8002e00:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8002e02:	2308      	movs	r3, #8
 8002e04:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e06:	2300      	movs	r3, #0
 8002e08:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8002e0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8002e10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e14:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e16:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4818      	ldr	r0, [pc, #96]	@ (8002e80 <MX_TIM1_Init+0x11c>)
 8002e20:	f00b fac4 	bl	800e3ac <HAL_TIM_PWM_ConfigChannel>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002e2a:	f000 fb2d 	bl	8003488 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e32:	2300      	movs	r3, #0
 8002e34:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e36:	2300      	movs	r3, #0
 8002e38:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0xFF;
 8002e3a:	23ff      	movs	r3, #255	@ 0xff
 8002e3c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002e42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002e46:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002e50:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e54:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002e56:	2300      	movs	r3, #0
 8002e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002e5e:	1d3b      	adds	r3, r7, #4
 8002e60:	4619      	mov	r1, r3
 8002e62:	4807      	ldr	r0, [pc, #28]	@ (8002e80 <MX_TIM1_Init+0x11c>)
 8002e64:	f00c fa58 	bl	800f318 <HAL_TIMEx_ConfigBreakDeadTime>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8002e6e:	f000 fb0b 	bl	8003488 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002e72:	4803      	ldr	r0, [pc, #12]	@ (8002e80 <MX_TIM1_Init+0x11c>)
 8002e74:	f000 ff56 	bl	8003d24 <HAL_TIM_MspPostInit>

}
 8002e78:	bf00      	nop
 8002e7a:	3760      	adds	r7, #96	@ 0x60
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	24000d4c 	.word	0x24000d4c
 8002e84:	40010000 	.word	0x40010000

08002e88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08a      	sub	sp, #40	@ 0x28
 8002e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e8e:	f107 031c 	add.w	r3, r7, #28
 8002e92:	2200      	movs	r2, #0
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	605a      	str	r2, [r3, #4]
 8002e98:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e9a:	463b      	mov	r3, r7
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	605a      	str	r2, [r3, #4]
 8002ea2:	609a      	str	r2, [r3, #8]
 8002ea4:	60da      	str	r2, [r3, #12]
 8002ea6:	611a      	str	r2, [r3, #16]
 8002ea8:	615a      	str	r2, [r3, #20]
 8002eaa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002eac:	4b22      	ldr	r3, [pc, #136]	@ (8002f38 <MX_TIM2_Init+0xb0>)
 8002eae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002eb2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002eb4:	4b20      	ldr	r3, [pc, #128]	@ (8002f38 <MX_TIM2_Init+0xb0>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eba:	4b1f      	ldr	r3, [pc, #124]	@ (8002f38 <MX_TIM2_Init+0xb0>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8002f38 <MX_TIM2_Init+0xb0>)
 8002ec2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002ec6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8002f38 <MX_TIM2_Init+0xb0>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ece:	4b1a      	ldr	r3, [pc, #104]	@ (8002f38 <MX_TIM2_Init+0xb0>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002ed4:	4818      	ldr	r0, [pc, #96]	@ (8002f38 <MX_TIM2_Init+0xb0>)
 8002ed6:	f00a ff6b 	bl	800ddb0 <HAL_TIM_PWM_Init>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002ee0:	f000 fad2 	bl	8003488 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002eec:	f107 031c 	add.w	r3, r7, #28
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4811      	ldr	r0, [pc, #68]	@ (8002f38 <MX_TIM2_Init+0xb0>)
 8002ef4:	f00c f974 	bl	800f1e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8002efe:	f000 fac3 	bl	8003488 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f02:	2360      	movs	r3, #96	@ 0x60
 8002f04:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002f06:	2300      	movs	r3, #0
 8002f08:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f12:	463b      	mov	r3, r7
 8002f14:	2200      	movs	r2, #0
 8002f16:	4619      	mov	r1, r3
 8002f18:	4807      	ldr	r0, [pc, #28]	@ (8002f38 <MX_TIM2_Init+0xb0>)
 8002f1a:	f00b fa47 	bl	800e3ac <HAL_TIM_PWM_ConfigChannel>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002f24:	f000 fab0 	bl	8003488 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002f28:	4803      	ldr	r0, [pc, #12]	@ (8002f38 <MX_TIM2_Init+0xb0>)
 8002f2a:	f000 fefb 	bl	8003d24 <HAL_TIM_MspPostInit>

}
 8002f2e:	bf00      	nop
 8002f30:	3728      	adds	r7, #40	@ 0x28
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	24000d98 	.word	0x24000d98

08002f3c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b088      	sub	sp, #32
 8002f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f42:	f107 0314 	add.w	r3, r7, #20
 8002f46:	2200      	movs	r2, #0
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	605a      	str	r2, [r3, #4]
 8002f4c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002f4e:	1d3b      	adds	r3, r7, #4
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	605a      	str	r2, [r3, #4]
 8002f56:	609a      	str	r2, [r3, #8]
 8002f58:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002f5a:	4b20      	ldr	r3, [pc, #128]	@ (8002fdc <MX_TIM3_Init+0xa0>)
 8002f5c:	4a20      	ldr	r2, [pc, #128]	@ (8002fe0 <MX_TIM3_Init+0xa4>)
 8002f5e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002f60:	4b1e      	ldr	r3, [pc, #120]	@ (8002fdc <MX_TIM3_Init+0xa0>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f66:	4b1d      	ldr	r3, [pc, #116]	@ (8002fdc <MX_TIM3_Init+0xa0>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8002fdc <MX_TIM3_Init+0xa0>)
 8002f6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f72:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f74:	4b19      	ldr	r3, [pc, #100]	@ (8002fdc <MX_TIM3_Init+0xa0>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f7a:	4b18      	ldr	r3, [pc, #96]	@ (8002fdc <MX_TIM3_Init+0xa0>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002f80:	4816      	ldr	r0, [pc, #88]	@ (8002fdc <MX_TIM3_Init+0xa0>)
 8002f82:	f00b f91f 	bl	800e1c4 <HAL_TIM_IC_Init>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002f8c:	f000 fa7c 	bl	8003488 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f90:	2300      	movs	r3, #0
 8002f92:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f94:	2300      	movs	r3, #0
 8002f96:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f98:	f107 0314 	add.w	r3, r7, #20
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	480f      	ldr	r0, [pc, #60]	@ (8002fdc <MX_TIM3_Init+0xa0>)
 8002fa0:	f00c f91e 	bl	800f1e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8002faa:	f000 fa6d 	bl	8003488 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002fbe:	1d3b      	adds	r3, r7, #4
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4805      	ldr	r0, [pc, #20]	@ (8002fdc <MX_TIM3_Init+0xa0>)
 8002fc6:	f00b f954 	bl	800e272 <HAL_TIM_IC_ConfigChannel>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002fd0:	f000 fa5a 	bl	8003488 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002fd4:	bf00      	nop
 8002fd6:	3720      	adds	r7, #32
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	24000de4 	.word	0x24000de4
 8002fe0:	40000400 	.word	0x40000400

08002fe4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b08a      	sub	sp, #40	@ 0x28
 8002fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fea:	f107 031c 	add.w	r3, r7, #28
 8002fee:	2200      	movs	r2, #0
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	605a      	str	r2, [r3, #4]
 8002ff4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ff6:	463b      	mov	r3, r7
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	605a      	str	r2, [r3, #4]
 8002ffe:	609a      	str	r2, [r3, #8]
 8003000:	60da      	str	r2, [r3, #12]
 8003002:	611a      	str	r2, [r3, #16]
 8003004:	615a      	str	r2, [r3, #20]
 8003006:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003008:	4b21      	ldr	r3, [pc, #132]	@ (8003090 <MX_TIM4_Init+0xac>)
 800300a:	4a22      	ldr	r2, [pc, #136]	@ (8003094 <MX_TIM4_Init+0xb0>)
 800300c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800300e:	4b20      	ldr	r3, [pc, #128]	@ (8003090 <MX_TIM4_Init+0xac>)
 8003010:	2200      	movs	r2, #0
 8003012:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003014:	4b1e      	ldr	r3, [pc, #120]	@ (8003090 <MX_TIM4_Init+0xac>)
 8003016:	2200      	movs	r2, #0
 8003018:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800301a:	4b1d      	ldr	r3, [pc, #116]	@ (8003090 <MX_TIM4_Init+0xac>)
 800301c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003020:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003022:	4b1b      	ldr	r3, [pc, #108]	@ (8003090 <MX_TIM4_Init+0xac>)
 8003024:	2200      	movs	r2, #0
 8003026:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003028:	4b19      	ldr	r3, [pc, #100]	@ (8003090 <MX_TIM4_Init+0xac>)
 800302a:	2200      	movs	r2, #0
 800302c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800302e:	4818      	ldr	r0, [pc, #96]	@ (8003090 <MX_TIM4_Init+0xac>)
 8003030:	f00a febe 	bl	800ddb0 <HAL_TIM_PWM_Init>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800303a:	f000 fa25 	bl	8003488 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800303e:	2300      	movs	r3, #0
 8003040:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003042:	2300      	movs	r3, #0
 8003044:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003046:	f107 031c 	add.w	r3, r7, #28
 800304a:	4619      	mov	r1, r3
 800304c:	4810      	ldr	r0, [pc, #64]	@ (8003090 <MX_TIM4_Init+0xac>)
 800304e:	f00c f8c7 	bl	800f1e0 <HAL_TIMEx_MasterConfigSynchronization>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d001      	beq.n	800305c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8003058:	f000 fa16 	bl	8003488 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800305c:	2360      	movs	r3, #96	@ 0x60
 800305e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003060:	2300      	movs	r3, #0
 8003062:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003064:	2300      	movs	r3, #0
 8003066:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003068:	2300      	movs	r3, #0
 800306a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800306c:	463b      	mov	r3, r7
 800306e:	2200      	movs	r2, #0
 8003070:	4619      	mov	r1, r3
 8003072:	4807      	ldr	r0, [pc, #28]	@ (8003090 <MX_TIM4_Init+0xac>)
 8003074:	f00b f99a 	bl	800e3ac <HAL_TIM_PWM_ConfigChannel>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800307e:	f000 fa03 	bl	8003488 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003082:	4803      	ldr	r0, [pc, #12]	@ (8003090 <MX_TIM4_Init+0xac>)
 8003084:	f000 fe4e 	bl	8003d24 <HAL_TIM_MspPostInit>

}
 8003088:	bf00      	nop
 800308a:	3728      	adds	r7, #40	@ 0x28
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	24000e30 	.word	0x24000e30
 8003094:	40000800 	.word	0x40000800

08003098 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b088      	sub	sp, #32
 800309c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800309e:	f107 0314 	add.w	r3, r7, #20
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	605a      	str	r2, [r3, #4]
 80030a8:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80030aa:	1d3b      	adds	r3, r7, #4
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	605a      	str	r2, [r3, #4]
 80030b2:	609a      	str	r2, [r3, #8]
 80030b4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80030b6:	4b22      	ldr	r3, [pc, #136]	@ (8003140 <MX_TIM15_Init+0xa8>)
 80030b8:	4a22      	ldr	r2, [pc, #136]	@ (8003144 <MX_TIM15_Init+0xac>)
 80030ba:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80030bc:	4b20      	ldr	r3, [pc, #128]	@ (8003140 <MX_TIM15_Init+0xa8>)
 80030be:	2200      	movs	r2, #0
 80030c0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030c2:	4b1f      	ldr	r3, [pc, #124]	@ (8003140 <MX_TIM15_Init+0xa8>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80030c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003140 <MX_TIM15_Init+0xa8>)
 80030ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80030ce:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003140 <MX_TIM15_Init+0xa8>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80030d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003140 <MX_TIM15_Init+0xa8>)
 80030d8:	2200      	movs	r2, #0
 80030da:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030dc:	4b18      	ldr	r3, [pc, #96]	@ (8003140 <MX_TIM15_Init+0xa8>)
 80030de:	2200      	movs	r2, #0
 80030e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 80030e2:	4817      	ldr	r0, [pc, #92]	@ (8003140 <MX_TIM15_Init+0xa8>)
 80030e4:	f00b f86e 	bl	800e1c4 <HAL_TIM_IC_Init>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 80030ee:	f000 f9cb 	bl	8003488 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030f2:	2300      	movs	r3, #0
 80030f4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030f6:	2300      	movs	r3, #0
 80030f8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80030fa:	f107 0314 	add.w	r3, r7, #20
 80030fe:	4619      	mov	r1, r3
 8003100:	480f      	ldr	r0, [pc, #60]	@ (8003140 <MX_TIM15_Init+0xa8>)
 8003102:	f00c f86d 	bl	800f1e0 <HAL_TIMEx_MasterConfigSynchronization>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 800310c:	f000 f9bc 	bl	8003488 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003110:	2300      	movs	r3, #0
 8003112:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003114:	2301      	movs	r3, #1
 8003116:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003118:	2300      	movs	r3, #0
 800311a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800311c:	2300      	movs	r3, #0
 800311e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003120:	1d3b      	adds	r3, r7, #4
 8003122:	2200      	movs	r2, #0
 8003124:	4619      	mov	r1, r3
 8003126:	4806      	ldr	r0, [pc, #24]	@ (8003140 <MX_TIM15_Init+0xa8>)
 8003128:	f00b f8a3 	bl	800e272 <HAL_TIM_IC_ConfigChannel>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <MX_TIM15_Init+0x9e>
  {
    Error_Handler();
 8003132:	f000 f9a9 	bl	8003488 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8003136:	bf00      	nop
 8003138:	3720      	adds	r7, #32
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	24000e7c 	.word	0x24000e7c
 8003144:	40014000 	.word	0x40014000

08003148 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 800314c:	bf00      	nop
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
	...

08003158 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800315e:	4b11      	ldr	r3, [pc, #68]	@ (80031a4 <MX_DMA_Init+0x4c>)
 8003160:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003164:	4a0f      	ldr	r2, [pc, #60]	@ (80031a4 <MX_DMA_Init+0x4c>)
 8003166:	f043 0301 	orr.w	r3, r3, #1
 800316a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800316e:	4b0d      	ldr	r3, [pc, #52]	@ (80031a4 <MX_DMA_Init+0x4c>)
 8003170:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	607b      	str	r3, [r7, #4]
 800317a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800317c:	2200      	movs	r2, #0
 800317e:	2100      	movs	r1, #0
 8003180:	200c      	movs	r0, #12
 8003182:	f004 f990 	bl	80074a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003186:	200c      	movs	r0, #12
 8003188:	f004 f9a7 	bl	80074da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800318c:	2200      	movs	r2, #0
 800318e:	2100      	movs	r1, #0
 8003190:	200d      	movs	r0, #13
 8003192:	f004 f988 	bl	80074a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8003196:	200d      	movs	r0, #13
 8003198:	f004 f99f 	bl	80074da <HAL_NVIC_EnableIRQ>

}
 800319c:	bf00      	nop
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	58024400 	.word	0x58024400

080031a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b08e      	sub	sp, #56	@ 0x38
 80031ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031b2:	2200      	movs	r2, #0
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	605a      	str	r2, [r3, #4]
 80031b8:	609a      	str	r2, [r3, #8]
 80031ba:	60da      	str	r2, [r3, #12]
 80031bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80031be:	4bab      	ldr	r3, [pc, #684]	@ (800346c <MX_GPIO_Init+0x2c4>)
 80031c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031c4:	4aa9      	ldr	r2, [pc, #676]	@ (800346c <MX_GPIO_Init+0x2c4>)
 80031c6:	f043 0310 	orr.w	r3, r3, #16
 80031ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80031ce:	4ba7      	ldr	r3, [pc, #668]	@ (800346c <MX_GPIO_Init+0x2c4>)
 80031d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031d4:	f003 0310 	and.w	r3, r3, #16
 80031d8:	623b      	str	r3, [r7, #32]
 80031da:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031dc:	4ba3      	ldr	r3, [pc, #652]	@ (800346c <MX_GPIO_Init+0x2c4>)
 80031de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031e2:	4aa2      	ldr	r2, [pc, #648]	@ (800346c <MX_GPIO_Init+0x2c4>)
 80031e4:	f043 0304 	orr.w	r3, r3, #4
 80031e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80031ec:	4b9f      	ldr	r3, [pc, #636]	@ (800346c <MX_GPIO_Init+0x2c4>)
 80031ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031f2:	f003 0304 	and.w	r3, r3, #4
 80031f6:	61fb      	str	r3, [r7, #28]
 80031f8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80031fa:	4b9c      	ldr	r3, [pc, #624]	@ (800346c <MX_GPIO_Init+0x2c4>)
 80031fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003200:	4a9a      	ldr	r2, [pc, #616]	@ (800346c <MX_GPIO_Init+0x2c4>)
 8003202:	f043 0320 	orr.w	r3, r3, #32
 8003206:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800320a:	4b98      	ldr	r3, [pc, #608]	@ (800346c <MX_GPIO_Init+0x2c4>)
 800320c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003210:	f003 0320 	and.w	r3, r3, #32
 8003214:	61bb      	str	r3, [r7, #24]
 8003216:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003218:	4b94      	ldr	r3, [pc, #592]	@ (800346c <MX_GPIO_Init+0x2c4>)
 800321a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800321e:	4a93      	ldr	r2, [pc, #588]	@ (800346c <MX_GPIO_Init+0x2c4>)
 8003220:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003224:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003228:	4b90      	ldr	r3, [pc, #576]	@ (800346c <MX_GPIO_Init+0x2c4>)
 800322a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800322e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003232:	617b      	str	r3, [r7, #20]
 8003234:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003236:	4b8d      	ldr	r3, [pc, #564]	@ (800346c <MX_GPIO_Init+0x2c4>)
 8003238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800323c:	4a8b      	ldr	r2, [pc, #556]	@ (800346c <MX_GPIO_Init+0x2c4>)
 800323e:	f043 0301 	orr.w	r3, r3, #1
 8003242:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003246:	4b89      	ldr	r3, [pc, #548]	@ (800346c <MX_GPIO_Init+0x2c4>)
 8003248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	613b      	str	r3, [r7, #16]
 8003252:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003254:	4b85      	ldr	r3, [pc, #532]	@ (800346c <MX_GPIO_Init+0x2c4>)
 8003256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800325a:	4a84      	ldr	r2, [pc, #528]	@ (800346c <MX_GPIO_Init+0x2c4>)
 800325c:	f043 0302 	orr.w	r3, r3, #2
 8003260:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003264:	4b81      	ldr	r3, [pc, #516]	@ (800346c <MX_GPIO_Init+0x2c4>)
 8003266:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	60fb      	str	r3, [r7, #12]
 8003270:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003272:	4b7e      	ldr	r3, [pc, #504]	@ (800346c <MX_GPIO_Init+0x2c4>)
 8003274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003278:	4a7c      	ldr	r2, [pc, #496]	@ (800346c <MX_GPIO_Init+0x2c4>)
 800327a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800327e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003282:	4b7a      	ldr	r3, [pc, #488]	@ (800346c <MX_GPIO_Init+0x2c4>)
 8003284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800328c:	60bb      	str	r3, [r7, #8]
 800328e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003290:	4b76      	ldr	r3, [pc, #472]	@ (800346c <MX_GPIO_Init+0x2c4>)
 8003292:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003296:	4a75      	ldr	r2, [pc, #468]	@ (800346c <MX_GPIO_Init+0x2c4>)
 8003298:	f043 0308 	orr.w	r3, r3, #8
 800329c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80032a0:	4b72      	ldr	r3, [pc, #456]	@ (800346c <MX_GPIO_Init+0x2c4>)
 80032a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032a6:	f003 0308 	and.w	r3, r3, #8
 80032aa:	607b      	str	r3, [r7, #4]
 80032ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LINE_DRIVER1_ENABLE_Pin|LINE_DRIVER2_ENABLE_Pin, GPIO_PIN_SET);
 80032ae:	2201      	movs	r2, #1
 80032b0:	f640 0105 	movw	r1, #2053	@ 0x805
 80032b4:	486e      	ldr	r0, [pc, #440]	@ (8003470 <MX_GPIO_Init+0x2c8>)
 80032b6:	f007 f9c1 	bl	800a63c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_OUTPUT_GPIO_Port, TEST_OUTPUT_Pin, GPIO_PIN_RESET);
 80032ba:	2200      	movs	r2, #0
 80032bc:	2102      	movs	r1, #2
 80032be:	486d      	ldr	r0, [pc, #436]	@ (8003474 <MX_GPIO_Init+0x2cc>)
 80032c0:	f007 f9bc 	bl	800a63c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80032c4:	2200      	movs	r2, #0
 80032c6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80032ca:	4869      	ldr	r0, [pc, #420]	@ (8003470 <MX_GPIO_Init+0x2c8>)
 80032cc:	f007 f9b6 	bl	800a63c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_3V3_SWITCH_GPIO_Port, OUT_3V3_SWITCH_Pin, GPIO_PIN_SET);
 80032d0:	2201      	movs	r2, #1
 80032d2:	2101      	movs	r1, #1
 80032d4:	4868      	ldr	r0, [pc, #416]	@ (8003478 <MX_GPIO_Init+0x2d0>)
 80032d6:	f007 f9b1 	bl	800a63c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ACTIVE_GPIO_Port, LED_ACTIVE_Pin, GPIO_PIN_SET);
 80032da:	2201      	movs	r2, #1
 80032dc:	2101      	movs	r1, #1
 80032de:	4867      	ldr	r0, [pc, #412]	@ (800347c <MX_GPIO_Init+0x2d4>)
 80032e0:	f007 f9ac 	bl	800a63c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80032e4:	2200      	movs	r2, #0
 80032e6:	2102      	movs	r1, #2
 80032e8:	4864      	ldr	r0, [pc, #400]	@ (800347c <MX_GPIO_Init+0x2d4>)
 80032ea:	f007 f9a7 	bl	800a63c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80032ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80032f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032f4:	2300      	movs	r3, #0
 80032f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f8:	2300      	movs	r3, #0
 80032fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80032fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003300:	4619      	mov	r1, r3
 8003302:	485f      	ldr	r0, [pc, #380]	@ (8003480 <MX_GPIO_Init+0x2d8>)
 8003304:	f006 ffda 	bl	800a2bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LINE_DRIVER1_ENABLE_Pin LINE_DRIVER2_ENABLE_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LINE_DRIVER1_ENABLE_Pin|LINE_DRIVER2_ENABLE_Pin|LED_RED_Pin;
 8003308:	f644 0305 	movw	r3, #18437	@ 0x4805
 800330c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800330e:	2301      	movs	r3, #1
 8003310:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003312:	2300      	movs	r3, #0
 8003314:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003316:	2300      	movs	r3, #0
 8003318:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800331a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800331e:	4619      	mov	r1, r3
 8003320:	4853      	ldr	r0, [pc, #332]	@ (8003470 <MX_GPIO_Init+0x2c8>)
 8003322:	f006 ffcb 	bl	800a2bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_500V_ENABLE_Pin */
  GPIO_InitStruct.Pin = OUT_500V_ENABLE_Pin;
 8003326:	2301      	movs	r3, #1
 8003328:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800332a:	2300      	movs	r3, #0
 800332c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332e:	2300      	movs	r3, #0
 8003330:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OUT_500V_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003332:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003336:	4619      	mov	r1, r3
 8003338:	484e      	ldr	r0, [pc, #312]	@ (8003474 <MX_GPIO_Init+0x2cc>)
 800333a:	f006 ffbf 	bl	800a2bc <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_OUTPUT_Pin */
  GPIO_InitStruct.Pin = TEST_OUTPUT_Pin;
 800333e:	2302      	movs	r3, #2
 8003340:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003342:	2301      	movs	r3, #1
 8003344:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003346:	2300      	movs	r3, #0
 8003348:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800334a:	2300      	movs	r3, #0
 800334c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(TEST_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 800334e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003352:	4619      	mov	r1, r3
 8003354:	4847      	ldr	r0, [pc, #284]	@ (8003474 <MX_GPIO_Init+0x2cc>)
 8003356:	f006 ffb1 	bl	800a2bc <HAL_GPIO_Init>

  /*Configure GPIO pin : TURN_PLASMA_ON_Pin */
  GPIO_InitStruct.Pin = TURN_PLASMA_ON_Pin;
 800335a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800335e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003360:	2300      	movs	r3, #0
 8003362:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003364:	2300      	movs	r3, #0
 8003366:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TURN_PLASMA_ON_GPIO_Port, &GPIO_InitStruct);
 8003368:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800336c:	4619      	mov	r1, r3
 800336e:	4843      	ldr	r0, [pc, #268]	@ (800347c <MX_GPIO_Init+0x2d4>)
 8003370:	f006 ffa4 	bl	800a2bc <HAL_GPIO_Init>

  /*Configure GPIO pin : INP_COMP_IRQ_Pin */
  GPIO_InitStruct.Pin = INP_COMP_IRQ_Pin;
 8003374:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003378:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800337a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800337e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003380:	2300      	movs	r3, #0
 8003382:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(INP_COMP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003384:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003388:	4619      	mov	r1, r3
 800338a:	483c      	ldr	r0, [pc, #240]	@ (800347c <MX_GPIO_Init+0x2d4>)
 800338c:	f006 ff96 	bl	800a2bc <HAL_GPIO_Init>

  /*Configure GPIO pin : POWER_OFF_IRQ_Pin */
  GPIO_InitStruct.Pin = POWER_OFF_IRQ_Pin;
 8003390:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003394:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003396:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800339a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339c:	2300      	movs	r3, #0
 800339e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(POWER_OFF_IRQ_GPIO_Port, &GPIO_InitStruct);
 80033a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033a4:	4619      	mov	r1, r3
 80033a6:	4835      	ldr	r0, [pc, #212]	@ (800347c <MX_GPIO_Init+0x2d4>)
 80033a8:	f006 ff88 	bl	800a2bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80033ac:	2380      	movs	r3, #128	@ 0x80
 80033ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80033b0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80033b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b6:	2300      	movs	r3, #0
 80033b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80033ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033be:	4619      	mov	r1, r3
 80033c0:	482c      	ldr	r0, [pc, #176]	@ (8003474 <MX_GPIO_Init+0x2cc>)
 80033c2:	f006 ff7b 	bl	800a2bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80033c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80033ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033cc:	2300      	movs	r3, #0
 80033ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d0:	2300      	movs	r3, #0
 80033d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80033d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033d8:	4619      	mov	r1, r3
 80033da:	482a      	ldr	r0, [pc, #168]	@ (8003484 <MX_GPIO_Init+0x2dc>)
 80033dc:	f006 ff6e 	bl	800a2bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80033e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80033e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e6:	2302      	movs	r3, #2
 80033e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ea:	2300      	movs	r3, #0
 80033ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ee:	2300      	movs	r3, #0
 80033f0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80033f2:	230a      	movs	r3, #10
 80033f4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80033f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033fa:	4619      	mov	r1, r3
 80033fc:	4821      	ldr	r0, [pc, #132]	@ (8003484 <MX_GPIO_Init+0x2dc>)
 80033fe:	f006 ff5d 	bl	800a2bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_3V3_SWITCH_Pin */
  GPIO_InitStruct.Pin = OUT_3V3_SWITCH_Pin;
 8003402:	2301      	movs	r3, #1
 8003404:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003406:	2301      	movs	r3, #1
 8003408:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340a:	2300      	movs	r3, #0
 800340c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800340e:	2300      	movs	r3, #0
 8003410:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(OUT_3V3_SWITCH_GPIO_Port, &GPIO_InitStruct);
 8003412:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003416:	4619      	mov	r1, r3
 8003418:	4817      	ldr	r0, [pc, #92]	@ (8003478 <MX_GPIO_Init+0x2d0>)
 800341a:	f006 ff4f 	bl	800a2bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_15V_ENABLE_Pin */
  GPIO_InitStruct.Pin = OUT_15V_ENABLE_Pin;
 800341e:	2302      	movs	r3, #2
 8003420:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003422:	2300      	movs	r3, #0
 8003424:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003426:	2300      	movs	r3, #0
 8003428:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OUT_15V_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800342a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800342e:	4619      	mov	r1, r3
 8003430:	4811      	ldr	r0, [pc, #68]	@ (8003478 <MX_GPIO_Init+0x2d0>)
 8003432:	f006 ff43 	bl	800a2bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_ACTIVE_Pin LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_ACTIVE_Pin|LED_YELLOW_Pin;
 8003436:	2303      	movs	r3, #3
 8003438:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800343a:	2301      	movs	r3, #1
 800343c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343e:	2300      	movs	r3, #0
 8003440:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003442:	2300      	movs	r3, #0
 8003444:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003446:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800344a:	4619      	mov	r1, r3
 800344c:	480b      	ldr	r0, [pc, #44]	@ (800347c <MX_GPIO_Init+0x2d4>)
 800344e:	f006 ff35 	bl	800a2bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003452:	2200      	movs	r2, #0
 8003454:	2100      	movs	r1, #0
 8003456:	2028      	movs	r0, #40	@ 0x28
 8003458:	f004 f825 	bl	80074a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800345c:	2028      	movs	r0, #40	@ 0x28
 800345e:	f004 f83c 	bl	80074da <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003462:	bf00      	nop
 8003464:	3738      	adds	r7, #56	@ 0x38
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	58024400 	.word	0x58024400
 8003470:	58020400 	.word	0x58020400
 8003474:	58021800 	.word	0x58021800
 8003478:	58020c00 	.word	0x58020c00
 800347c:	58021000 	.word	0x58021000
 8003480:	58020800 	.word	0x58020800
 8003484:	58020000 	.word	0x58020000

08003488 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800348c:	b672      	cpsid	i
}
 800348e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003490:	bf00      	nop
 8003492:	e7fd      	b.n	8003490 <Error_Handler+0x8>

08003494 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800349a:	4b0a      	ldr	r3, [pc, #40]	@ (80034c4 <HAL_MspInit+0x30>)
 800349c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80034a0:	4a08      	ldr	r2, [pc, #32]	@ (80034c4 <HAL_MspInit+0x30>)
 80034a2:	f043 0302 	orr.w	r3, r3, #2
 80034a6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80034aa:	4b06      	ldr	r3, [pc, #24]	@ (80034c4 <HAL_MspInit+0x30>)
 80034ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	607b      	str	r3, [r7, #4]
 80034b6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034b8:	bf00      	nop
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	58024400 	.word	0x58024400

080034c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b090      	sub	sp, #64	@ 0x40
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	605a      	str	r2, [r3, #4]
 80034da:	609a      	str	r2, [r3, #8]
 80034dc:	60da      	str	r2, [r3, #12]
 80034de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4aaa      	ldr	r2, [pc, #680]	@ (8003790 <HAL_ADC_MspInit+0x2c8>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d16b      	bne.n	80035c2 <HAL_ADC_MspInit+0xfa>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80034ea:	4baa      	ldr	r3, [pc, #680]	@ (8003794 <HAL_ADC_MspInit+0x2cc>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	3301      	adds	r3, #1
 80034f0:	4aa8      	ldr	r2, [pc, #672]	@ (8003794 <HAL_ADC_MspInit+0x2cc>)
 80034f2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80034f4:	4ba7      	ldr	r3, [pc, #668]	@ (8003794 <HAL_ADC_MspInit+0x2cc>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d10e      	bne.n	800351a <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80034fc:	4ba6      	ldr	r3, [pc, #664]	@ (8003798 <HAL_ADC_MspInit+0x2d0>)
 80034fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003502:	4aa5      	ldr	r2, [pc, #660]	@ (8003798 <HAL_ADC_MspInit+0x2d0>)
 8003504:	f043 0320 	orr.w	r3, r3, #32
 8003508:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800350c:	4ba2      	ldr	r3, [pc, #648]	@ (8003798 <HAL_ADC_MspInit+0x2d0>)
 800350e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003512:	f003 0320 	and.w	r3, r3, #32
 8003516:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800351a:	4b9f      	ldr	r3, [pc, #636]	@ (8003798 <HAL_ADC_MspInit+0x2d0>)
 800351c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003520:	4a9d      	ldr	r2, [pc, #628]	@ (8003798 <HAL_ADC_MspInit+0x2d0>)
 8003522:	f043 0301 	orr.w	r3, r3, #1
 8003526:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800352a:	4b9b      	ldr	r3, [pc, #620]	@ (8003798 <HAL_ADC_MspInit+0x2d0>)
 800352c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	627b      	str	r3, [r7, #36]	@ 0x24
 8003536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_INP16
    PA3     ------> ADC1_INP15
    PA4     ------> ADC1_INP18
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8003538:	2319      	movs	r3, #25
 800353a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800353c:	2303      	movs	r3, #3
 800353e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003540:	2300      	movs	r3, #0
 8003542:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003544:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003548:	4619      	mov	r1, r3
 800354a:	4894      	ldr	r0, [pc, #592]	@ (800379c <HAL_ADC_MspInit+0x2d4>)
 800354c:	f006 feb6 	bl	800a2bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream2;
 8003550:	4b93      	ldr	r3, [pc, #588]	@ (80037a0 <HAL_ADC_MspInit+0x2d8>)
 8003552:	4a94      	ldr	r2, [pc, #592]	@ (80037a4 <HAL_ADC_MspInit+0x2dc>)
 8003554:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003556:	4b92      	ldr	r3, [pc, #584]	@ (80037a0 <HAL_ADC_MspInit+0x2d8>)
 8003558:	2209      	movs	r2, #9
 800355a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800355c:	4b90      	ldr	r3, [pc, #576]	@ (80037a0 <HAL_ADC_MspInit+0x2d8>)
 800355e:	2200      	movs	r2, #0
 8003560:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003562:	4b8f      	ldr	r3, [pc, #572]	@ (80037a0 <HAL_ADC_MspInit+0x2d8>)
 8003564:	2200      	movs	r2, #0
 8003566:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003568:	4b8d      	ldr	r3, [pc, #564]	@ (80037a0 <HAL_ADC_MspInit+0x2d8>)
 800356a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800356e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003570:	4b8b      	ldr	r3, [pc, #556]	@ (80037a0 <HAL_ADC_MspInit+0x2d8>)
 8003572:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003576:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003578:	4b89      	ldr	r3, [pc, #548]	@ (80037a0 <HAL_ADC_MspInit+0x2d8>)
 800357a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800357e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003580:	4b87      	ldr	r3, [pc, #540]	@ (80037a0 <HAL_ADC_MspInit+0x2d8>)
 8003582:	2200      	movs	r2, #0
 8003584:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8003586:	4b86      	ldr	r3, [pc, #536]	@ (80037a0 <HAL_ADC_MspInit+0x2d8>)
 8003588:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800358c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800358e:	4b84      	ldr	r3, [pc, #528]	@ (80037a0 <HAL_ADC_MspInit+0x2d8>)
 8003590:	2200      	movs	r2, #0
 8003592:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003594:	4882      	ldr	r0, [pc, #520]	@ (80037a0 <HAL_ADC_MspInit+0x2d8>)
 8003596:	f003 ffbb 	bl	8007510 <HAL_DMA_Init>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <HAL_ADC_MspInit+0xdc>
    {
      Error_Handler();
 80035a0:	f7ff ff72 	bl	8003488 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a7e      	ldr	r2, [pc, #504]	@ (80037a0 <HAL_ADC_MspInit+0x2d8>)
 80035a8:	659a      	str	r2, [r3, #88]	@ 0x58
 80035aa:	4a7d      	ldr	r2, [pc, #500]	@ (80037a0 <HAL_ADC_MspInit+0x2d8>)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80035b0:	2200      	movs	r2, #0
 80035b2:	2100      	movs	r1, #0
 80035b4:	2012      	movs	r0, #18
 80035b6:	f003 ff76 	bl	80074a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80035ba:	2012      	movs	r0, #18
 80035bc:	f003 ff8d 	bl	80074da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80035c0:	e0e2      	b.n	8003788 <HAL_ADC_MspInit+0x2c0>
  else if(hadc->Instance==ADC2)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a78      	ldr	r2, [pc, #480]	@ (80037a8 <HAL_ADC_MspInit+0x2e0>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d156      	bne.n	800367a <HAL_ADC_MspInit+0x1b2>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80035cc:	4b71      	ldr	r3, [pc, #452]	@ (8003794 <HAL_ADC_MspInit+0x2cc>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	3301      	adds	r3, #1
 80035d2:	4a70      	ldr	r2, [pc, #448]	@ (8003794 <HAL_ADC_MspInit+0x2cc>)
 80035d4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80035d6:	4b6f      	ldr	r3, [pc, #444]	@ (8003794 <HAL_ADC_MspInit+0x2cc>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d10e      	bne.n	80035fc <HAL_ADC_MspInit+0x134>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80035de:	4b6e      	ldr	r3, [pc, #440]	@ (8003798 <HAL_ADC_MspInit+0x2d0>)
 80035e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80035e4:	4a6c      	ldr	r2, [pc, #432]	@ (8003798 <HAL_ADC_MspInit+0x2d0>)
 80035e6:	f043 0320 	orr.w	r3, r3, #32
 80035ea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80035ee:	4b6a      	ldr	r3, [pc, #424]	@ (8003798 <HAL_ADC_MspInit+0x2d0>)
 80035f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80035f4:	f003 0320 	and.w	r3, r3, #32
 80035f8:	623b      	str	r3, [r7, #32]
 80035fa:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035fc:	4b66      	ldr	r3, [pc, #408]	@ (8003798 <HAL_ADC_MspInit+0x2d0>)
 80035fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003602:	4a65      	ldr	r2, [pc, #404]	@ (8003798 <HAL_ADC_MspInit+0x2d0>)
 8003604:	f043 0301 	orr.w	r3, r3, #1
 8003608:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800360c:	4b62      	ldr	r3, [pc, #392]	@ (8003798 <HAL_ADC_MspInit+0x2d0>)
 800360e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	61fb      	str	r3, [r7, #28]
 8003618:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800361a:	4b5f      	ldr	r3, [pc, #380]	@ (8003798 <HAL_ADC_MspInit+0x2d0>)
 800361c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003620:	4a5d      	ldr	r2, [pc, #372]	@ (8003798 <HAL_ADC_MspInit+0x2d0>)
 8003622:	f043 0302 	orr.w	r3, r3, #2
 8003626:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800362a:	4b5b      	ldr	r3, [pc, #364]	@ (8003798 <HAL_ADC_MspInit+0x2d0>)
 800362c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	61bb      	str	r3, [r7, #24]
 8003636:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003638:	2360      	movs	r3, #96	@ 0x60
 800363a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800363c:	2303      	movs	r3, #3
 800363e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003640:	2300      	movs	r3, #0
 8003642:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003644:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003648:	4619      	mov	r1, r3
 800364a:	4854      	ldr	r0, [pc, #336]	@ (800379c <HAL_ADC_MspInit+0x2d4>)
 800364c:	f006 fe36 	bl	800a2bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003650:	2302      	movs	r3, #2
 8003652:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003654:	2303      	movs	r3, #3
 8003656:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003658:	2300      	movs	r3, #0
 800365a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800365c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003660:	4619      	mov	r1, r3
 8003662:	4852      	ldr	r0, [pc, #328]	@ (80037ac <HAL_ADC_MspInit+0x2e4>)
 8003664:	f006 fe2a 	bl	800a2bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003668:	2200      	movs	r2, #0
 800366a:	2100      	movs	r1, #0
 800366c:	2012      	movs	r0, #18
 800366e:	f003 ff1a 	bl	80074a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003672:	2012      	movs	r0, #18
 8003674:	f003 ff31 	bl	80074da <HAL_NVIC_EnableIRQ>
}
 8003678:	e086      	b.n	8003788 <HAL_ADC_MspInit+0x2c0>
  else if(hadc->Instance==ADC3)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a4c      	ldr	r2, [pc, #304]	@ (80037b0 <HAL_ADC_MspInit+0x2e8>)
 8003680:	4293      	cmp	r3, r2
 8003682:	f040 8081 	bne.w	8003788 <HAL_ADC_MspInit+0x2c0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003686:	4b44      	ldr	r3, [pc, #272]	@ (8003798 <HAL_ADC_MspInit+0x2d0>)
 8003688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800368c:	4a42      	ldr	r2, [pc, #264]	@ (8003798 <HAL_ADC_MspInit+0x2d0>)
 800368e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003692:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003696:	4b40      	ldr	r3, [pc, #256]	@ (8003798 <HAL_ADC_MspInit+0x2d0>)
 8003698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800369c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036a0:	617b      	str	r3, [r7, #20]
 80036a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80036a4:	4b3c      	ldr	r3, [pc, #240]	@ (8003798 <HAL_ADC_MspInit+0x2d0>)
 80036a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036aa:	4a3b      	ldr	r2, [pc, #236]	@ (8003798 <HAL_ADC_MspInit+0x2d0>)
 80036ac:	f043 0320 	orr.w	r3, r3, #32
 80036b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80036b4:	4b38      	ldr	r3, [pc, #224]	@ (8003798 <HAL_ADC_MspInit+0x2d0>)
 80036b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036ba:	f003 0320 	and.w	r3, r3, #32
 80036be:	613b      	str	r3, [r7, #16]
 80036c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036c2:	4b35      	ldr	r3, [pc, #212]	@ (8003798 <HAL_ADC_MspInit+0x2d0>)
 80036c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036c8:	4a33      	ldr	r2, [pc, #204]	@ (8003798 <HAL_ADC_MspInit+0x2d0>)
 80036ca:	f043 0304 	orr.w	r3, r3, #4
 80036ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80036d2:	4b31      	ldr	r3, [pc, #196]	@ (8003798 <HAL_ADC_MspInit+0x2d0>)
 80036d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	60fb      	str	r3, [r7, #12]
 80036de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80036e0:	f44f 63ff 	mov.w	r3, #2040	@ 0x7f8
 80036e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036e6:	2303      	movs	r3, #3
 80036e8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ea:	2300      	movs	r3, #0
 80036ec:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80036ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036f2:	4619      	mov	r1, r3
 80036f4:	482f      	ldr	r0, [pc, #188]	@ (80037b4 <HAL_ADC_MspInit+0x2ec>)
 80036f6:	f006 fde1 	bl	800a2bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80036fa:	2301      	movs	r3, #1
 80036fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036fe:	2303      	movs	r3, #3
 8003700:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003702:	2300      	movs	r3, #0
 8003704:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003706:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800370a:	4619      	mov	r1, r3
 800370c:	482a      	ldr	r0, [pc, #168]	@ (80037b8 <HAL_ADC_MspInit+0x2f0>)
 800370e:	f006 fdd5 	bl	800a2bc <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8003712:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8003716:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800371a:	f000 fd91 	bl	8004240 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800371e:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 8003722:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8003726:	f000 fd8b 	bl	8004240 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 800372a:	4b24      	ldr	r3, [pc, #144]	@ (80037bc <HAL_ADC_MspInit+0x2f4>)
 800372c:	4a24      	ldr	r2, [pc, #144]	@ (80037c0 <HAL_ADC_MspInit+0x2f8>)
 800372e:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8003730:	4b22      	ldr	r3, [pc, #136]	@ (80037bc <HAL_ADC_MspInit+0x2f4>)
 8003732:	2273      	movs	r2, #115	@ 0x73
 8003734:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003736:	4b21      	ldr	r3, [pc, #132]	@ (80037bc <HAL_ADC_MspInit+0x2f4>)
 8003738:	2200      	movs	r2, #0
 800373a:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800373c:	4b1f      	ldr	r3, [pc, #124]	@ (80037bc <HAL_ADC_MspInit+0x2f4>)
 800373e:	2200      	movs	r2, #0
 8003740:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8003742:	4b1e      	ldr	r3, [pc, #120]	@ (80037bc <HAL_ADC_MspInit+0x2f4>)
 8003744:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003748:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800374a:	4b1c      	ldr	r3, [pc, #112]	@ (80037bc <HAL_ADC_MspInit+0x2f4>)
 800374c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003750:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003752:	4b1a      	ldr	r3, [pc, #104]	@ (80037bc <HAL_ADC_MspInit+0x2f4>)
 8003754:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003758:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 800375a:	4b18      	ldr	r3, [pc, #96]	@ (80037bc <HAL_ADC_MspInit+0x2f4>)
 800375c:	2200      	movs	r2, #0
 800375e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8003760:	4b16      	ldr	r3, [pc, #88]	@ (80037bc <HAL_ADC_MspInit+0x2f4>)
 8003762:	2200      	movs	r2, #0
 8003764:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003766:	4b15      	ldr	r3, [pc, #84]	@ (80037bc <HAL_ADC_MspInit+0x2f4>)
 8003768:	2200      	movs	r2, #0
 800376a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800376c:	4813      	ldr	r0, [pc, #76]	@ (80037bc <HAL_ADC_MspInit+0x2f4>)
 800376e:	f003 fecf 	bl	8007510 <HAL_DMA_Init>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <HAL_ADC_MspInit+0x2b4>
      Error_Handler();
 8003778:	f7ff fe86 	bl	8003488 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a0f      	ldr	r2, [pc, #60]	@ (80037bc <HAL_ADC_MspInit+0x2f4>)
 8003780:	659a      	str	r2, [r3, #88]	@ 0x58
 8003782:	4a0e      	ldr	r2, [pc, #56]	@ (80037bc <HAL_ADC_MspInit+0x2f4>)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003788:	bf00      	nop
 800378a:	3740      	adds	r7, #64	@ 0x40
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	40022000 	.word	0x40022000
 8003794:	24000ed0 	.word	0x24000ed0
 8003798:	58024400 	.word	0x58024400
 800379c:	58020000 	.word	0x58020000
 80037a0:	24000a58 	.word	0x24000a58
 80037a4:	40020040 	.word	0x40020040
 80037a8:	40022100 	.word	0x40022100
 80037ac:	58020400 	.word	0x58020400
 80037b0:	58026000 	.word	0x58026000
 80037b4:	58021400 	.word	0x58021400
 80037b8:	58020800 	.word	0x58020800
 80037bc:	24000ad0 	.word	0x24000ad0
 80037c0:	40020028 	.word	0x40020028

080037c4 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b08a      	sub	sp, #40	@ 0x28
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037cc:	f107 0314 	add.w	r3, r7, #20
 80037d0:	2200      	movs	r2, #0
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	605a      	str	r2, [r3, #4]
 80037d6:	609a      	str	r2, [r3, #8]
 80037d8:	60da      	str	r2, [r3, #12]
 80037da:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP2)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a21      	ldr	r2, [pc, #132]	@ (8003868 <HAL_COMP_MspInit+0xa4>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d13b      	bne.n	800385e <HAL_COMP_MspInit+0x9a>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_COMP12_CLK_ENABLE();
 80037e6:	4b21      	ldr	r3, [pc, #132]	@ (800386c <HAL_COMP_MspInit+0xa8>)
 80037e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80037ec:	4a1f      	ldr	r2, [pc, #124]	@ (800386c <HAL_COMP_MspInit+0xa8>)
 80037ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037f2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80037f6:	4b1d      	ldr	r3, [pc, #116]	@ (800386c <HAL_COMP_MspInit+0xa8>)
 80037f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80037fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003800:	613b      	str	r3, [r7, #16]
 8003802:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003804:	4b19      	ldr	r3, [pc, #100]	@ (800386c <HAL_COMP_MspInit+0xa8>)
 8003806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800380a:	4a18      	ldr	r2, [pc, #96]	@ (800386c <HAL_COMP_MspInit+0xa8>)
 800380c:	f043 0310 	orr.w	r3, r3, #16
 8003810:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003814:	4b15      	ldr	r3, [pc, #84]	@ (800386c <HAL_COMP_MspInit+0xa8>)
 8003816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800381a:	f003 0310 	and.w	r3, r3, #16
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	68fb      	ldr	r3, [r7, #12]
    /**COMP2 GPIO Configuration
    PE7     ------> COMP2_INM
    PE11     ------> COMP2_INP
    PE13     ------> COMP2_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_11;
 8003822:	f44f 6308 	mov.w	r3, #2176	@ 0x880
 8003826:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003828:	2303      	movs	r3, #3
 800382a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800382c:	2300      	movs	r3, #0
 800382e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003830:	f107 0314 	add.w	r3, r7, #20
 8003834:	4619      	mov	r1, r3
 8003836:	480e      	ldr	r0, [pc, #56]	@ (8003870 <HAL_COMP_MspInit+0xac>)
 8003838:	f006 fd40 	bl	800a2bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800383c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003840:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003842:	2302      	movs	r3, #2
 8003844:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003846:	2300      	movs	r3, #0
 8003848:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800384a:	2300      	movs	r3, #0
 800384c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_COMP2;
 800384e:	230d      	movs	r3, #13
 8003850:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003852:	f107 0314 	add.w	r3, r7, #20
 8003856:	4619      	mov	r1, r3
 8003858:	4805      	ldr	r0, [pc, #20]	@ (8003870 <HAL_COMP_MspInit+0xac>)
 800385a:	f006 fd2f 	bl	800a2bc <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 800385e:	bf00      	nop
 8003860:	3728      	adds	r7, #40	@ 0x28
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	58003810 	.word	0x58003810
 800386c:	58024400 	.word	0x58024400
 8003870:	58021000 	.word	0x58021000

08003874 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b08e      	sub	sp, #56	@ 0x38
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800387c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003880:	2200      	movs	r2, #0
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	605a      	str	r2, [r3, #4]
 8003886:	609a      	str	r2, [r3, #8]
 8003888:	60da      	str	r2, [r3, #12]
 800388a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a59      	ldr	r2, [pc, #356]	@ (80039f8 <HAL_ETH_MspInit+0x184>)
 8003892:	4293      	cmp	r3, r2
 8003894:	f040 80ab 	bne.w	80039ee <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8003898:	4b58      	ldr	r3, [pc, #352]	@ (80039fc <HAL_ETH_MspInit+0x188>)
 800389a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800389e:	4a57      	ldr	r2, [pc, #348]	@ (80039fc <HAL_ETH_MspInit+0x188>)
 80038a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038a4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80038a8:	4b54      	ldr	r3, [pc, #336]	@ (80039fc <HAL_ETH_MspInit+0x188>)
 80038aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80038ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038b2:	623b      	str	r3, [r7, #32]
 80038b4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80038b6:	4b51      	ldr	r3, [pc, #324]	@ (80039fc <HAL_ETH_MspInit+0x188>)
 80038b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80038bc:	4a4f      	ldr	r2, [pc, #316]	@ (80039fc <HAL_ETH_MspInit+0x188>)
 80038be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038c2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80038c6:	4b4d      	ldr	r3, [pc, #308]	@ (80039fc <HAL_ETH_MspInit+0x188>)
 80038c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80038cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038d0:	61fb      	str	r3, [r7, #28]
 80038d2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80038d4:	4b49      	ldr	r3, [pc, #292]	@ (80039fc <HAL_ETH_MspInit+0x188>)
 80038d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80038da:	4a48      	ldr	r2, [pc, #288]	@ (80039fc <HAL_ETH_MspInit+0x188>)
 80038dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038e0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80038e4:	4b45      	ldr	r3, [pc, #276]	@ (80039fc <HAL_ETH_MspInit+0x188>)
 80038e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80038ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ee:	61bb      	str	r3, [r7, #24]
 80038f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038f2:	4b42      	ldr	r3, [pc, #264]	@ (80039fc <HAL_ETH_MspInit+0x188>)
 80038f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038f8:	4a40      	ldr	r2, [pc, #256]	@ (80039fc <HAL_ETH_MspInit+0x188>)
 80038fa:	f043 0304 	orr.w	r3, r3, #4
 80038fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003902:	4b3e      	ldr	r3, [pc, #248]	@ (80039fc <HAL_ETH_MspInit+0x188>)
 8003904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	617b      	str	r3, [r7, #20]
 800390e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003910:	4b3a      	ldr	r3, [pc, #232]	@ (80039fc <HAL_ETH_MspInit+0x188>)
 8003912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003916:	4a39      	ldr	r2, [pc, #228]	@ (80039fc <HAL_ETH_MspInit+0x188>)
 8003918:	f043 0301 	orr.w	r3, r3, #1
 800391c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003920:	4b36      	ldr	r3, [pc, #216]	@ (80039fc <HAL_ETH_MspInit+0x188>)
 8003922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	613b      	str	r3, [r7, #16]
 800392c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800392e:	4b33      	ldr	r3, [pc, #204]	@ (80039fc <HAL_ETH_MspInit+0x188>)
 8003930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003934:	4a31      	ldr	r2, [pc, #196]	@ (80039fc <HAL_ETH_MspInit+0x188>)
 8003936:	f043 0302 	orr.w	r3, r3, #2
 800393a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800393e:	4b2f      	ldr	r3, [pc, #188]	@ (80039fc <HAL_ETH_MspInit+0x188>)
 8003940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	60fb      	str	r3, [r7, #12]
 800394a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800394c:	4b2b      	ldr	r3, [pc, #172]	@ (80039fc <HAL_ETH_MspInit+0x188>)
 800394e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003952:	4a2a      	ldr	r2, [pc, #168]	@ (80039fc <HAL_ETH_MspInit+0x188>)
 8003954:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003958:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800395c:	4b27      	ldr	r3, [pc, #156]	@ (80039fc <HAL_ETH_MspInit+0x188>)
 800395e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003966:	60bb      	str	r3, [r7, #8]
 8003968:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800396a:	2332      	movs	r3, #50	@ 0x32
 800396c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800396e:	2302      	movs	r3, #2
 8003970:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003972:	2300      	movs	r3, #0
 8003974:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003976:	2300      	movs	r3, #0
 8003978:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800397a:	230b      	movs	r3, #11
 800397c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800397e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003982:	4619      	mov	r1, r3
 8003984:	481e      	ldr	r0, [pc, #120]	@ (8003a00 <HAL_ETH_MspInit+0x18c>)
 8003986:	f006 fc99 	bl	800a2bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800398a:	2386      	movs	r3, #134	@ 0x86
 800398c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800398e:	2302      	movs	r3, #2
 8003990:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003992:	2300      	movs	r3, #0
 8003994:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003996:	2300      	movs	r3, #0
 8003998:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800399a:	230b      	movs	r3, #11
 800399c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800399e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039a2:	4619      	mov	r1, r3
 80039a4:	4817      	ldr	r0, [pc, #92]	@ (8003a04 <HAL_ETH_MspInit+0x190>)
 80039a6:	f006 fc89 	bl	800a2bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80039aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80039ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b0:	2302      	movs	r3, #2
 80039b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b4:	2300      	movs	r3, #0
 80039b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039b8:	2300      	movs	r3, #0
 80039ba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80039bc:	230b      	movs	r3, #11
 80039be:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80039c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039c4:	4619      	mov	r1, r3
 80039c6:	4810      	ldr	r0, [pc, #64]	@ (8003a08 <HAL_ETH_MspInit+0x194>)
 80039c8:	f006 fc78 	bl	800a2bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80039cc:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80039d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d2:	2302      	movs	r3, #2
 80039d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d6:	2300      	movs	r3, #0
 80039d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039da:	2300      	movs	r3, #0
 80039dc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80039de:	230b      	movs	r3, #11
 80039e0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80039e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039e6:	4619      	mov	r1, r3
 80039e8:	4808      	ldr	r0, [pc, #32]	@ (8003a0c <HAL_ETH_MspInit+0x198>)
 80039ea:	f006 fc67 	bl	800a2bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80039ee:	bf00      	nop
 80039f0:	3738      	adds	r7, #56	@ 0x38
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40028000 	.word	0x40028000
 80039fc:	58024400 	.word	0x58024400
 8003a00:	58020800 	.word	0x58020800
 8003a04:	58020000 	.word	0x58020000
 8003a08:	58020400 	.word	0x58020400
 8003a0c:	58021800 	.word	0x58021800

08003a10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b0ba      	sub	sp, #232	@ 0xe8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a18:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	605a      	str	r2, [r3, #4]
 8003a22:	609a      	str	r2, [r3, #8]
 8003a24:	60da      	str	r2, [r3, #12]
 8003a26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a28:	f107 0318 	add.w	r3, r7, #24
 8003a2c:	22b8      	movs	r2, #184	@ 0xb8
 8003a2e:	2100      	movs	r1, #0
 8003a30:	4618      	mov	r0, r3
 8003a32:	f00d f96b 	bl	8010d0c <memset>
  if(huart->Instance==LPUART1)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a4d      	ldr	r2, [pc, #308]	@ (8003b70 <HAL_UART_MspInit+0x160>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d146      	bne.n	8003ace <HAL_UART_MspInit+0xbe>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003a40:	f04f 0204 	mov.w	r2, #4
 8003a44:	f04f 0300 	mov.w	r3, #0
 8003a48:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a52:	f107 0318 	add.w	r3, r7, #24
 8003a56:	4618      	mov	r0, r3
 8003a58:	f007 fdc4 	bl	800b5e4 <HAL_RCCEx_PeriphCLKConfig>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003a62:	f7ff fd11 	bl	8003488 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003a66:	4b43      	ldr	r3, [pc, #268]	@ (8003b74 <HAL_UART_MspInit+0x164>)
 8003a68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003a6c:	4a41      	ldr	r2, [pc, #260]	@ (8003b74 <HAL_UART_MspInit+0x164>)
 8003a6e:	f043 0308 	orr.w	r3, r3, #8
 8003a72:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003a76:	4b3f      	ldr	r3, [pc, #252]	@ (8003b74 <HAL_UART_MspInit+0x164>)
 8003a78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003a7c:	f003 0308 	and.w	r3, r3, #8
 8003a80:	617b      	str	r3, [r7, #20]
 8003a82:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a84:	4b3b      	ldr	r3, [pc, #236]	@ (8003b74 <HAL_UART_MspInit+0x164>)
 8003a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a8a:	4a3a      	ldr	r2, [pc, #232]	@ (8003b74 <HAL_UART_MspInit+0x164>)
 8003a8c:	f043 0302 	orr.w	r3, r3, #2
 8003a90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003a94:	4b37      	ldr	r3, [pc, #220]	@ (8003b74 <HAL_UART_MspInit+0x164>)
 8003a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	613b      	str	r3, [r7, #16]
 8003aa0:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB6     ------> LPUART1_TX
    PB7     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003aa2:	23c0      	movs	r3, #192	@ 0xc0
 8003aa4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART;
 8003aba:	2308      	movs	r3, #8
 8003abc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ac0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	482c      	ldr	r0, [pc, #176]	@ (8003b78 <HAL_UART_MspInit+0x168>)
 8003ac8:	f006 fbf8 	bl	800a2bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003acc:	e04b      	b.n	8003b66 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART3)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a2a      	ldr	r2, [pc, #168]	@ (8003b7c <HAL_UART_MspInit+0x16c>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d146      	bne.n	8003b66 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003ad8:	f04f 0202 	mov.w	r2, #2
 8003adc:	f04f 0300 	mov.w	r3, #0
 8003ae0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003aea:	f107 0318 	add.w	r3, r7, #24
 8003aee:	4618      	mov	r0, r3
 8003af0:	f007 fd78 	bl	800b5e4 <HAL_RCCEx_PeriphCLKConfig>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <HAL_UART_MspInit+0xee>
      Error_Handler();
 8003afa:	f7ff fcc5 	bl	8003488 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003afe:	4b1d      	ldr	r3, [pc, #116]	@ (8003b74 <HAL_UART_MspInit+0x164>)
 8003b00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003b04:	4a1b      	ldr	r2, [pc, #108]	@ (8003b74 <HAL_UART_MspInit+0x164>)
 8003b06:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b0a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003b0e:	4b19      	ldr	r3, [pc, #100]	@ (8003b74 <HAL_UART_MspInit+0x164>)
 8003b10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003b14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b18:	60fb      	str	r3, [r7, #12]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b1c:	4b15      	ldr	r3, [pc, #84]	@ (8003b74 <HAL_UART_MspInit+0x164>)
 8003b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b22:	4a14      	ldr	r2, [pc, #80]	@ (8003b74 <HAL_UART_MspInit+0x164>)
 8003b24:	f043 0308 	orr.w	r3, r3, #8
 8003b28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003b2c:	4b11      	ldr	r3, [pc, #68]	@ (8003b74 <HAL_UART_MspInit+0x164>)
 8003b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	60bb      	str	r3, [r7, #8]
 8003b38:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8003b3a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003b3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b42:	2302      	movs	r3, #2
 8003b44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003b54:	2307      	movs	r3, #7
 8003b56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b5a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003b5e:	4619      	mov	r1, r3
 8003b60:	4807      	ldr	r0, [pc, #28]	@ (8003b80 <HAL_UART_MspInit+0x170>)
 8003b62:	f006 fbab 	bl	800a2bc <HAL_GPIO_Init>
}
 8003b66:	bf00      	nop
 8003b68:	37e8      	adds	r7, #232	@ 0xe8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	58000c00 	.word	0x58000c00
 8003b74:	58024400 	.word	0x58024400
 8003b78:	58020400 	.word	0x58020400
 8003b7c:	40004800 	.word	0x40004800
 8003b80:	58020c00 	.word	0x58020c00

08003b84 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b087      	sub	sp, #28
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a20      	ldr	r2, [pc, #128]	@ (8003c14 <HAL_TIM_PWM_MspInit+0x90>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d10f      	bne.n	8003bb6 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003b96:	4b20      	ldr	r3, [pc, #128]	@ (8003c18 <HAL_TIM_PWM_MspInit+0x94>)
 8003b98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b9c:	4a1e      	ldr	r2, [pc, #120]	@ (8003c18 <HAL_TIM_PWM_MspInit+0x94>)
 8003b9e:	f043 0301 	orr.w	r3, r3, #1
 8003ba2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003ba6:	4b1c      	ldr	r3, [pc, #112]	@ (8003c18 <HAL_TIM_PWM_MspInit+0x94>)
 8003ba8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	617b      	str	r3, [r7, #20]
 8003bb2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003bb4:	e028      	b.n	8003c08 <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM2)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bbe:	d10f      	bne.n	8003be0 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003bc0:	4b15      	ldr	r3, [pc, #84]	@ (8003c18 <HAL_TIM_PWM_MspInit+0x94>)
 8003bc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003bc6:	4a14      	ldr	r2, [pc, #80]	@ (8003c18 <HAL_TIM_PWM_MspInit+0x94>)
 8003bc8:	f043 0301 	orr.w	r3, r3, #1
 8003bcc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003bd0:	4b11      	ldr	r3, [pc, #68]	@ (8003c18 <HAL_TIM_PWM_MspInit+0x94>)
 8003bd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	613b      	str	r3, [r7, #16]
 8003bdc:	693b      	ldr	r3, [r7, #16]
}
 8003bde:	e013      	b.n	8003c08 <HAL_TIM_PWM_MspInit+0x84>
  else if(htim_pwm->Instance==TIM4)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a0d      	ldr	r2, [pc, #52]	@ (8003c1c <HAL_TIM_PWM_MspInit+0x98>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d10e      	bne.n	8003c08 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003bea:	4b0b      	ldr	r3, [pc, #44]	@ (8003c18 <HAL_TIM_PWM_MspInit+0x94>)
 8003bec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003bf0:	4a09      	ldr	r2, [pc, #36]	@ (8003c18 <HAL_TIM_PWM_MspInit+0x94>)
 8003bf2:	f043 0304 	orr.w	r3, r3, #4
 8003bf6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003bfa:	4b07      	ldr	r3, [pc, #28]	@ (8003c18 <HAL_TIM_PWM_MspInit+0x94>)
 8003bfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003c00:	f003 0304 	and.w	r3, r3, #4
 8003c04:	60fb      	str	r3, [r7, #12]
 8003c06:	68fb      	ldr	r3, [r7, #12]
}
 8003c08:	bf00      	nop
 8003c0a:	371c      	adds	r7, #28
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr
 8003c14:	40010000 	.word	0x40010000
 8003c18:	58024400 	.word	0x58024400
 8003c1c:	40000800 	.word	0x40000800

08003c20 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b08c      	sub	sp, #48	@ 0x30
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c28:	f107 031c 	add.w	r3, r7, #28
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	605a      	str	r2, [r3, #4]
 8003c32:	609a      	str	r2, [r3, #8]
 8003c34:	60da      	str	r2, [r3, #12]
 8003c36:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a34      	ldr	r2, [pc, #208]	@ (8003d10 <HAL_TIM_IC_MspInit+0xf0>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d12e      	bne.n	8003ca0 <HAL_TIM_IC_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003c42:	4b34      	ldr	r3, [pc, #208]	@ (8003d14 <HAL_TIM_IC_MspInit+0xf4>)
 8003c44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003c48:	4a32      	ldr	r2, [pc, #200]	@ (8003d14 <HAL_TIM_IC_MspInit+0xf4>)
 8003c4a:	f043 0302 	orr.w	r3, r3, #2
 8003c4e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003c52:	4b30      	ldr	r3, [pc, #192]	@ (8003d14 <HAL_TIM_IC_MspInit+0xf4>)
 8003c54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	61bb      	str	r3, [r7, #24]
 8003c5e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c60:	4b2c      	ldr	r3, [pc, #176]	@ (8003d14 <HAL_TIM_IC_MspInit+0xf4>)
 8003c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c66:	4a2b      	ldr	r2, [pc, #172]	@ (8003d14 <HAL_TIM_IC_MspInit+0xf4>)
 8003c68:	f043 0304 	orr.w	r3, r3, #4
 8003c6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003c70:	4b28      	ldr	r3, [pc, #160]	@ (8003d14 <HAL_TIM_IC_MspInit+0xf4>)
 8003c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c76:	f003 0304 	and.w	r3, r3, #4
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003c7e:	2340      	movs	r3, #64	@ 0x40
 8003c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c82:	2302      	movs	r3, #2
 8003c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c86:	2301      	movs	r3, #1
 8003c88:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003c8e:	2302      	movs	r3, #2
 8003c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c92:	f107 031c 	add.w	r3, r7, #28
 8003c96:	4619      	mov	r1, r3
 8003c98:	481f      	ldr	r0, [pc, #124]	@ (8003d18 <HAL_TIM_IC_MspInit+0xf8>)
 8003c9a:	f006 fb0f 	bl	800a2bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8003c9e:	e032      	b.n	8003d06 <HAL_TIM_IC_MspInit+0xe6>
  else if(htim_ic->Instance==TIM15)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a1d      	ldr	r2, [pc, #116]	@ (8003d1c <HAL_TIM_IC_MspInit+0xfc>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d12d      	bne.n	8003d06 <HAL_TIM_IC_MspInit+0xe6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003caa:	4b1a      	ldr	r3, [pc, #104]	@ (8003d14 <HAL_TIM_IC_MspInit+0xf4>)
 8003cac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cb0:	4a18      	ldr	r2, [pc, #96]	@ (8003d14 <HAL_TIM_IC_MspInit+0xf4>)
 8003cb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cb6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003cba:	4b16      	ldr	r3, [pc, #88]	@ (8003d14 <HAL_TIM_IC_MspInit+0xf4>)
 8003cbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003cc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cc4:	613b      	str	r3, [r7, #16]
 8003cc6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003cc8:	4b12      	ldr	r3, [pc, #72]	@ (8003d14 <HAL_TIM_IC_MspInit+0xf4>)
 8003cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003cce:	4a11      	ldr	r2, [pc, #68]	@ (8003d14 <HAL_TIM_IC_MspInit+0xf4>)
 8003cd0:	f043 0310 	orr.w	r3, r3, #16
 8003cd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8003d14 <HAL_TIM_IC_MspInit+0xf4>)
 8003cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003cde:	f003 0310 	and.w	r3, r3, #16
 8003ce2:	60fb      	str	r3, [r7, #12]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003ce6:	2320      	movs	r3, #32
 8003ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cea:	2302      	movs	r3, #2
 8003cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8003cf6:	2304      	movs	r3, #4
 8003cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003cfa:	f107 031c 	add.w	r3, r7, #28
 8003cfe:	4619      	mov	r1, r3
 8003d00:	4807      	ldr	r0, [pc, #28]	@ (8003d20 <HAL_TIM_IC_MspInit+0x100>)
 8003d02:	f006 fadb 	bl	800a2bc <HAL_GPIO_Init>
}
 8003d06:	bf00      	nop
 8003d08:	3730      	adds	r7, #48	@ 0x30
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	40000400 	.word	0x40000400
 8003d14:	58024400 	.word	0x58024400
 8003d18:	58020800 	.word	0x58020800
 8003d1c:	40014000 	.word	0x40014000
 8003d20:	58021000 	.word	0x58021000

08003d24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b08a      	sub	sp, #40	@ 0x28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d2c:	f107 0314 	add.w	r3, r7, #20
 8003d30:	2200      	movs	r2, #0
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	605a      	str	r2, [r3, #4]
 8003d36:	609a      	str	r2, [r3, #8]
 8003d38:	60da      	str	r2, [r3, #12]
 8003d3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a39      	ldr	r2, [pc, #228]	@ (8003e28 <HAL_TIM_MspPostInit+0x104>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d120      	bne.n	8003d88 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d46:	4b39      	ldr	r3, [pc, #228]	@ (8003e2c <HAL_TIM_MspPostInit+0x108>)
 8003d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d4c:	4a37      	ldr	r2, [pc, #220]	@ (8003e2c <HAL_TIM_MspPostInit+0x108>)
 8003d4e:	f043 0310 	orr.w	r3, r3, #16
 8003d52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003d56:	4b35      	ldr	r3, [pc, #212]	@ (8003e2c <HAL_TIM_MspPostInit+0x108>)
 8003d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d5c:	f003 0310 	and.w	r3, r3, #16
 8003d60:	613b      	str	r3, [r7, #16]
 8003d62:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE8     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = TIM1_CH1N_Pin|TIM1_CH1_Pin;
 8003d64:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d72:	2300      	movs	r3, #0
 8003d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003d76:	2301      	movs	r3, #1
 8003d78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003d7a:	f107 0314 	add.w	r3, r7, #20
 8003d7e:	4619      	mov	r1, r3
 8003d80:	482b      	ldr	r0, [pc, #172]	@ (8003e30 <HAL_TIM_MspPostInit+0x10c>)
 8003d82:	f006 fa9b 	bl	800a2bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003d86:	e04a      	b.n	8003e1e <HAL_TIM_MspPostInit+0xfa>
  else if(htim->Instance==TIM2)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d90:	d120      	bne.n	8003dd4 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d92:	4b26      	ldr	r3, [pc, #152]	@ (8003e2c <HAL_TIM_MspPostInit+0x108>)
 8003d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003d98:	4a24      	ldr	r2, [pc, #144]	@ (8003e2c <HAL_TIM_MspPostInit+0x108>)
 8003d9a:	f043 0301 	orr.w	r3, r3, #1
 8003d9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003da2:	4b22      	ldr	r3, [pc, #136]	@ (8003e2c <HAL_TIM_MspPostInit+0x108>)
 8003da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003da8:	f003 0301 	and.w	r3, r3, #1
 8003dac:	60fb      	str	r3, [r7, #12]
 8003dae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003db0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003db4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003db6:	2312      	movs	r3, #18
 8003db8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dc6:	f107 0314 	add.w	r3, r7, #20
 8003dca:	4619      	mov	r1, r3
 8003dcc:	4819      	ldr	r0, [pc, #100]	@ (8003e34 <HAL_TIM_MspPostInit+0x110>)
 8003dce:	f006 fa75 	bl	800a2bc <HAL_GPIO_Init>
}
 8003dd2:	e024      	b.n	8003e1e <HAL_TIM_MspPostInit+0xfa>
  else if(htim->Instance==TIM4)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a17      	ldr	r2, [pc, #92]	@ (8003e38 <HAL_TIM_MspPostInit+0x114>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d11f      	bne.n	8003e1e <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003dde:	4b13      	ldr	r3, [pc, #76]	@ (8003e2c <HAL_TIM_MspPostInit+0x108>)
 8003de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003de4:	4a11      	ldr	r2, [pc, #68]	@ (8003e2c <HAL_TIM_MspPostInit+0x108>)
 8003de6:	f043 0308 	orr.w	r3, r3, #8
 8003dea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003dee:	4b0f      	ldr	r3, [pc, #60]	@ (8003e2c <HAL_TIM_MspPostInit+0x108>)
 8003df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003df4:	f003 0308 	and.w	r3, r3, #8
 8003df8:	60bb      	str	r3, [r7, #8]
 8003dfa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003dfc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e02:	2312      	movs	r3, #18
 8003e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e06:	2300      	movs	r3, #0
 8003e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003e0e:	2302      	movs	r3, #2
 8003e10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e12:	f107 0314 	add.w	r3, r7, #20
 8003e16:	4619      	mov	r1, r3
 8003e18:	4808      	ldr	r0, [pc, #32]	@ (8003e3c <HAL_TIM_MspPostInit+0x118>)
 8003e1a:	f006 fa4f 	bl	800a2bc <HAL_GPIO_Init>
}
 8003e1e:	bf00      	nop
 8003e20:	3728      	adds	r7, #40	@ 0x28
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	40010000 	.word	0x40010000
 8003e2c:	58024400 	.word	0x58024400
 8003e30:	58021000 	.word	0x58021000
 8003e34:	58020000 	.word	0x58020000
 8003e38:	40000800 	.word	0x40000800
 8003e3c:	58020c00 	.word	0x58020c00

08003e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e44:	bf00      	nop
 8003e46:	e7fd      	b.n	8003e44 <NMI_Handler+0x4>

08003e48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e4c:	bf00      	nop
 8003e4e:	e7fd      	b.n	8003e4c <HardFault_Handler+0x4>

08003e50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e50:	b480      	push	{r7}
 8003e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e54:	bf00      	nop
 8003e56:	e7fd      	b.n	8003e54 <MemManage_Handler+0x4>

08003e58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e5c:	bf00      	nop
 8003e5e:	e7fd      	b.n	8003e5c <BusFault_Handler+0x4>

08003e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e60:	b480      	push	{r7}
 8003e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e64:	bf00      	nop
 8003e66:	e7fd      	b.n	8003e64 <UsageFault_Handler+0x4>

08003e68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e6c:	bf00      	nop
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr

08003e76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e76:	b480      	push	{r7}
 8003e78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e7a:	bf00      	nop
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e88:	bf00      	nop
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e96:	f000 f97b 	bl	8004190 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e9a:	bf00      	nop
 8003e9c:	bd80      	pop	{r7, pc}
	...

08003ea0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003ea4:	4802      	ldr	r0, [pc, #8]	@ (8003eb0 <DMA1_Stream1_IRQHandler+0x10>)
 8003ea6:	f004 f8f5 	bl	8008094 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003eaa:	bf00      	nop
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	24000ad0 	.word	0x24000ad0

08003eb4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003eb8:	4802      	ldr	r0, [pc, #8]	@ (8003ec4 <DMA1_Stream2_IRQHandler+0x10>)
 8003eba:	f004 f8eb 	bl	8008094 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003ebe:	bf00      	nop
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	24000a58 	.word	0x24000a58

08003ec8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003ecc:	4803      	ldr	r0, [pc, #12]	@ (8003edc <ADC_IRQHandler+0x14>)
 8003ece:	f001 f8d9 	bl	8005084 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8003ed2:	4803      	ldr	r0, [pc, #12]	@ (8003ee0 <ADC_IRQHandler+0x18>)
 8003ed4:	f001 f8d6 	bl	8005084 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003ed8:	bf00      	nop
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	24000908 	.word	0x24000908
 8003ee0:	24000978 	.word	0x24000978

08003ee4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INP_COMP_IRQ_Pin);
 8003ee8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003eec:	f006 fbbf 	bl	800a66e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(POWER_OFF_IRQ_Pin);
 8003ef0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8003ef4:	f006 fbbb 	bl	800a66e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003ef8:	bf00      	nop
 8003efa:	bd80      	pop	{r7, pc}

08003efc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f04:	4a14      	ldr	r2, [pc, #80]	@ (8003f58 <_sbrk+0x5c>)
 8003f06:	4b15      	ldr	r3, [pc, #84]	@ (8003f5c <_sbrk+0x60>)
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f10:	4b13      	ldr	r3, [pc, #76]	@ (8003f60 <_sbrk+0x64>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d102      	bne.n	8003f1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f18:	4b11      	ldr	r3, [pc, #68]	@ (8003f60 <_sbrk+0x64>)
 8003f1a:	4a12      	ldr	r2, [pc, #72]	@ (8003f64 <_sbrk+0x68>)
 8003f1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f1e:	4b10      	ldr	r3, [pc, #64]	@ (8003f60 <_sbrk+0x64>)
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4413      	add	r3, r2
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d207      	bcs.n	8003f3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f2c:	f00c ff06 	bl	8010d3c <__errno>
 8003f30:	4603      	mov	r3, r0
 8003f32:	220c      	movs	r2, #12
 8003f34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003f3a:	e009      	b.n	8003f50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f3c:	4b08      	ldr	r3, [pc, #32]	@ (8003f60 <_sbrk+0x64>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f42:	4b07      	ldr	r3, [pc, #28]	@ (8003f60 <_sbrk+0x64>)
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4413      	add	r3, r2
 8003f4a:	4a05      	ldr	r2, [pc, #20]	@ (8003f60 <_sbrk+0x64>)
 8003f4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3718      	adds	r7, #24
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	24050000 	.word	0x24050000
 8003f5c:	00000400 	.word	0x00000400
 8003f60:	24000ed4 	.word	0x24000ed4
 8003f64:	24001040 	.word	0x24001040

08003f68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003f6c:	4b32      	ldr	r3, [pc, #200]	@ (8004038 <SystemInit+0xd0>)
 8003f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f72:	4a31      	ldr	r2, [pc, #196]	@ (8004038 <SystemInit+0xd0>)
 8003f74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003f78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003f7c:	4b2f      	ldr	r3, [pc, #188]	@ (800403c <SystemInit+0xd4>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 030f 	and.w	r3, r3, #15
 8003f84:	2b06      	cmp	r3, #6
 8003f86:	d807      	bhi.n	8003f98 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003f88:	4b2c      	ldr	r3, [pc, #176]	@ (800403c <SystemInit+0xd4>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f023 030f 	bic.w	r3, r3, #15
 8003f90:	4a2a      	ldr	r2, [pc, #168]	@ (800403c <SystemInit+0xd4>)
 8003f92:	f043 0307 	orr.w	r3, r3, #7
 8003f96:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003f98:	4b29      	ldr	r3, [pc, #164]	@ (8004040 <SystemInit+0xd8>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a28      	ldr	r2, [pc, #160]	@ (8004040 <SystemInit+0xd8>)
 8003f9e:	f043 0301 	orr.w	r3, r3, #1
 8003fa2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003fa4:	4b26      	ldr	r3, [pc, #152]	@ (8004040 <SystemInit+0xd8>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003faa:	4b25      	ldr	r3, [pc, #148]	@ (8004040 <SystemInit+0xd8>)
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	4924      	ldr	r1, [pc, #144]	@ (8004040 <SystemInit+0xd8>)
 8003fb0:	4b24      	ldr	r3, [pc, #144]	@ (8004044 <SystemInit+0xdc>)
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003fb6:	4b21      	ldr	r3, [pc, #132]	@ (800403c <SystemInit+0xd4>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0308 	and.w	r3, r3, #8
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d007      	beq.n	8003fd2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003fc2:	4b1e      	ldr	r3, [pc, #120]	@ (800403c <SystemInit+0xd4>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f023 030f 	bic.w	r3, r3, #15
 8003fca:	4a1c      	ldr	r2, [pc, #112]	@ (800403c <SystemInit+0xd4>)
 8003fcc:	f043 0307 	orr.w	r3, r3, #7
 8003fd0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003fd2:	4b1b      	ldr	r3, [pc, #108]	@ (8004040 <SystemInit+0xd8>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003fd8:	4b19      	ldr	r3, [pc, #100]	@ (8004040 <SystemInit+0xd8>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003fde:	4b18      	ldr	r3, [pc, #96]	@ (8004040 <SystemInit+0xd8>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003fe4:	4b16      	ldr	r3, [pc, #88]	@ (8004040 <SystemInit+0xd8>)
 8003fe6:	4a18      	ldr	r2, [pc, #96]	@ (8004048 <SystemInit+0xe0>)
 8003fe8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003fea:	4b15      	ldr	r3, [pc, #84]	@ (8004040 <SystemInit+0xd8>)
 8003fec:	4a17      	ldr	r2, [pc, #92]	@ (800404c <SystemInit+0xe4>)
 8003fee:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003ff0:	4b13      	ldr	r3, [pc, #76]	@ (8004040 <SystemInit+0xd8>)
 8003ff2:	4a17      	ldr	r2, [pc, #92]	@ (8004050 <SystemInit+0xe8>)
 8003ff4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003ff6:	4b12      	ldr	r3, [pc, #72]	@ (8004040 <SystemInit+0xd8>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003ffc:	4b10      	ldr	r3, [pc, #64]	@ (8004040 <SystemInit+0xd8>)
 8003ffe:	4a14      	ldr	r2, [pc, #80]	@ (8004050 <SystemInit+0xe8>)
 8004000:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004002:	4b0f      	ldr	r3, [pc, #60]	@ (8004040 <SystemInit+0xd8>)
 8004004:	2200      	movs	r2, #0
 8004006:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004008:	4b0d      	ldr	r3, [pc, #52]	@ (8004040 <SystemInit+0xd8>)
 800400a:	4a11      	ldr	r2, [pc, #68]	@ (8004050 <SystemInit+0xe8>)
 800400c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800400e:	4b0c      	ldr	r3, [pc, #48]	@ (8004040 <SystemInit+0xd8>)
 8004010:	2200      	movs	r2, #0
 8004012:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004014:	4b0a      	ldr	r3, [pc, #40]	@ (8004040 <SystemInit+0xd8>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a09      	ldr	r2, [pc, #36]	@ (8004040 <SystemInit+0xd8>)
 800401a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800401e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004020:	4b07      	ldr	r3, [pc, #28]	@ (8004040 <SystemInit+0xd8>)
 8004022:	2200      	movs	r2, #0
 8004024:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004026:	4b0b      	ldr	r3, [pc, #44]	@ (8004054 <SystemInit+0xec>)
 8004028:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800402c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800402e:	bf00      	nop
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr
 8004038:	e000ed00 	.word	0xe000ed00
 800403c:	52002000 	.word	0x52002000
 8004040:	58024400 	.word	0x58024400
 8004044:	eaf6ed7f 	.word	0xeaf6ed7f
 8004048:	02020200 	.word	0x02020200
 800404c:	01ff0000 	.word	0x01ff0000
 8004050:	01010280 	.word	0x01010280
 8004054:	52004000 	.word	0x52004000

08004058 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004058:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004090 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800405c:	f7ff ff84 	bl	8003f68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004060:	480c      	ldr	r0, [pc, #48]	@ (8004094 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004062:	490d      	ldr	r1, [pc, #52]	@ (8004098 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004064:	4a0d      	ldr	r2, [pc, #52]	@ (800409c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004066:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004068:	e002      	b.n	8004070 <LoopCopyDataInit>

0800406a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800406a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800406c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800406e:	3304      	adds	r3, #4

08004070 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004070:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004072:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004074:	d3f9      	bcc.n	800406a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004076:	4a0a      	ldr	r2, [pc, #40]	@ (80040a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004078:	4c0a      	ldr	r4, [pc, #40]	@ (80040a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800407a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800407c:	e001      	b.n	8004082 <LoopFillZerobss>

0800407e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800407e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004080:	3204      	adds	r2, #4

08004082 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004082:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004084:	d3fb      	bcc.n	800407e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004086:	f00c fe5f 	bl	8010d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800408a:	f7fe fa37 	bl	80024fc <main>
  bx  lr
 800408e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004090:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8004094:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004098:	24000098 	.word	0x24000098
  ldr r2, =_sidata
 800409c:	08012138 	.word	0x08012138
  ldr r2, =_sbss
 80040a0:	24000158 	.word	0x24000158
  ldr r4, =_ebss
 80040a4:	24001040 	.word	0x24001040

080040a8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80040a8:	e7fe      	b.n	80040a8 <ADC3_IRQHandler>
	...

080040ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040b2:	2003      	movs	r0, #3
 80040b4:	f003 f9ec 	bl	8007490 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80040b8:	f007 f8be 	bl	800b238 <HAL_RCC_GetSysClockFreq>
 80040bc:	4602      	mov	r2, r0
 80040be:	4b15      	ldr	r3, [pc, #84]	@ (8004114 <HAL_Init+0x68>)
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	0a1b      	lsrs	r3, r3, #8
 80040c4:	f003 030f 	and.w	r3, r3, #15
 80040c8:	4913      	ldr	r1, [pc, #76]	@ (8004118 <HAL_Init+0x6c>)
 80040ca:	5ccb      	ldrb	r3, [r1, r3]
 80040cc:	f003 031f 	and.w	r3, r3, #31
 80040d0:	fa22 f303 	lsr.w	r3, r2, r3
 80040d4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80040d6:	4b0f      	ldr	r3, [pc, #60]	@ (8004114 <HAL_Init+0x68>)
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	f003 030f 	and.w	r3, r3, #15
 80040de:	4a0e      	ldr	r2, [pc, #56]	@ (8004118 <HAL_Init+0x6c>)
 80040e0:	5cd3      	ldrb	r3, [r2, r3]
 80040e2:	f003 031f 	and.w	r3, r3, #31
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	fa22 f303 	lsr.w	r3, r2, r3
 80040ec:	4a0b      	ldr	r2, [pc, #44]	@ (800411c <HAL_Init+0x70>)
 80040ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80040f0:	4a0b      	ldr	r2, [pc, #44]	@ (8004120 <HAL_Init+0x74>)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80040f6:	2000      	movs	r0, #0
 80040f8:	f000 f814 	bl	8004124 <HAL_InitTick>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e002      	b.n	800410c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004106:	f7ff f9c5 	bl	8003494 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3708      	adds	r7, #8
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	58024400 	.word	0x58024400
 8004118:	08011f8c 	.word	0x08011f8c
 800411c:	2400003c 	.word	0x2400003c
 8004120:	24000038 	.word	0x24000038

08004124 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800412c:	4b15      	ldr	r3, [pc, #84]	@ (8004184 <HAL_InitTick+0x60>)
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d101      	bne.n	8004138 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e021      	b.n	800417c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004138:	4b13      	ldr	r3, [pc, #76]	@ (8004188 <HAL_InitTick+0x64>)
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	4b11      	ldr	r3, [pc, #68]	@ (8004184 <HAL_InitTick+0x60>)
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	4619      	mov	r1, r3
 8004142:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004146:	fbb3 f3f1 	udiv	r3, r3, r1
 800414a:	fbb2 f3f3 	udiv	r3, r2, r3
 800414e:	4618      	mov	r0, r3
 8004150:	f003 f9d1 	bl	80074f6 <HAL_SYSTICK_Config>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e00e      	b.n	800417c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2b0f      	cmp	r3, #15
 8004162:	d80a      	bhi.n	800417a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004164:	2200      	movs	r2, #0
 8004166:	6879      	ldr	r1, [r7, #4]
 8004168:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800416c:	f003 f99b 	bl	80074a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004170:	4a06      	ldr	r2, [pc, #24]	@ (800418c <HAL_InitTick+0x68>)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004176:	2300      	movs	r3, #0
 8004178:	e000      	b.n	800417c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
}
 800417c:	4618      	mov	r0, r3
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	24000044 	.word	0x24000044
 8004188:	24000038 	.word	0x24000038
 800418c:	24000040 	.word	0x24000040

08004190 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004190:	b480      	push	{r7}
 8004192:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004194:	4b06      	ldr	r3, [pc, #24]	@ (80041b0 <HAL_IncTick+0x20>)
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	461a      	mov	r2, r3
 800419a:	4b06      	ldr	r3, [pc, #24]	@ (80041b4 <HAL_IncTick+0x24>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4413      	add	r3, r2
 80041a0:	4a04      	ldr	r2, [pc, #16]	@ (80041b4 <HAL_IncTick+0x24>)
 80041a2:	6013      	str	r3, [r2, #0]
}
 80041a4:	bf00      	nop
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	24000044 	.word	0x24000044
 80041b4:	24000ed8 	.word	0x24000ed8

080041b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041b8:	b480      	push	{r7}
 80041ba:	af00      	add	r7, sp, #0
  return uwTick;
 80041bc:	4b03      	ldr	r3, [pc, #12]	@ (80041cc <HAL_GetTick+0x14>)
 80041be:	681b      	ldr	r3, [r3, #0]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	24000ed8 	.word	0x24000ed8

080041d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041d8:	f7ff ffee 	bl	80041b8 <HAL_GetTick>
 80041dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041e8:	d005      	beq.n	80041f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004214 <HAL_Delay+0x44>)
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	461a      	mov	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	4413      	add	r3, r2
 80041f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80041f6:	bf00      	nop
 80041f8:	f7ff ffde 	bl	80041b8 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	429a      	cmp	r2, r3
 8004206:	d8f7      	bhi.n	80041f8 <HAL_Delay+0x28>
  {
  }
}
 8004208:	bf00      	nop
 800420a:	bf00      	nop
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	24000044 	.word	0x24000044

08004218 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8004220:	4b06      	ldr	r3, [pc, #24]	@ (800423c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8004228:	4904      	ldr	r1, [pc, #16]	@ (800423c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4313      	orrs	r3, r2
 800422e:	604b      	str	r3, [r1, #4]
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	58000400 	.word	0x58000400

08004240 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800424a:	4b07      	ldr	r3, [pc, #28]	@ (8004268 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800424c:	685a      	ldr	r2, [r3, #4]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	43db      	mvns	r3, r3
 8004252:	401a      	ands	r2, r3
 8004254:	4904      	ldr	r1, [pc, #16]	@ (8004268 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	4313      	orrs	r3, r2
 800425a:	604b      	str	r3, [r1, #4]
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr
 8004268:	58000400 	.word	0x58000400

0800426c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	431a      	orrs	r2, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	609a      	str	r2, [r3, #8]
}
 8004286:	bf00      	nop
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004292:	b480      	push	{r7}
 8004294:	b083      	sub	sp, #12
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
 800429a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	431a      	orrs	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	609a      	str	r2, [r3, #8]
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b087      	sub	sp, #28
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
 80042e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	3360      	adds	r3, #96	@ 0x60
 80042e6:	461a      	mov	r2, r3
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	4413      	add	r3, r2
 80042ee:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	4a10      	ldr	r2, [pc, #64]	@ (8004334 <LL_ADC_SetOffset+0x60>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d10b      	bne.n	8004310 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	4313      	orrs	r3, r2
 8004306:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800430e:	e00b      	b.n	8004328 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	430b      	orrs	r3, r1
 8004322:	431a      	orrs	r2, r3
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	601a      	str	r2, [r3, #0]
}
 8004328:	bf00      	nop
 800432a:	371c      	adds	r7, #28
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr
 8004334:	58026000 	.word	0x58026000

08004338 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	3360      	adds	r3, #96	@ 0x60
 8004346:	461a      	mov	r2, r3
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	4413      	add	r3, r2
 800434e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004358:	4618      	mov	r0, r3
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	f003 031f 	and.w	r3, r3, #31
 800437e:	6879      	ldr	r1, [r7, #4]
 8004380:	fa01 f303 	lsl.w	r3, r1, r3
 8004384:	431a      	orrs	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	611a      	str	r2, [r3, #16]
}
 800438a:	bf00      	nop
 800438c:	3714      	adds	r7, #20
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
	...

08004398 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004398:	b480      	push	{r7}
 800439a:	b087      	sub	sp, #28
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4a0c      	ldr	r2, [pc, #48]	@ (80043d8 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d00e      	beq.n	80043ca <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	3360      	adds	r3, #96	@ 0x60
 80043b0:	461a      	mov	r2, r3
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	4413      	add	r3, r2
 80043b8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	431a      	orrs	r2, r3
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	601a      	str	r2, [r3, #0]
  }
}
 80043ca:	bf00      	nop
 80043cc:	371c      	adds	r7, #28
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	58026000 	.word	0x58026000

080043dc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80043dc:	b480      	push	{r7}
 80043de:	b087      	sub	sp, #28
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	4a0c      	ldr	r2, [pc, #48]	@ (800441c <LL_ADC_SetOffsetSaturation+0x40>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d10e      	bne.n	800440e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	3360      	adds	r3, #96	@ 0x60
 80043f4:	461a      	mov	r2, r3
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4413      	add	r3, r2
 80043fc:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	431a      	orrs	r2, r3
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800440e:	bf00      	nop
 8004410:	371c      	adds	r7, #28
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	58026000 	.word	0x58026000

08004420 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004420:	b480      	push	{r7}
 8004422:	b087      	sub	sp, #28
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	4a0c      	ldr	r2, [pc, #48]	@ (8004460 <LL_ADC_SetOffsetSign+0x40>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d10e      	bne.n	8004452 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	3360      	adds	r3, #96	@ 0x60
 8004438:	461a      	mov	r2, r3
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	4413      	add	r3, r2
 8004440:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	431a      	orrs	r2, r3
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8004452:	bf00      	nop
 8004454:	371c      	adds	r7, #28
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	58026000 	.word	0x58026000

08004464 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004464:	b480      	push	{r7}
 8004466:	b087      	sub	sp, #28
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	3360      	adds	r3, #96	@ 0x60
 8004474:	461a      	mov	r2, r3
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4413      	add	r3, r2
 800447c:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	4a0c      	ldr	r2, [pc, #48]	@ (80044b4 <LL_ADC_SetOffsetState+0x50>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d108      	bne.n	8004498 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	431a      	orrs	r2, r3
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8004496:	e007      	b.n	80044a8 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	431a      	orrs	r2, r3
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	601a      	str	r2, [r3, #0]
}
 80044a8:	bf00      	nop
 80044aa:	371c      	adds	r7, #28
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr
 80044b4:	58026000 	.word	0x58026000

080044b8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d101      	bne.n	80044d0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80044cc:	2301      	movs	r3, #1
 80044ce:	e000      	b.n	80044d2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80044de:	b480      	push	{r7}
 80044e0:	b087      	sub	sp, #28
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	60f8      	str	r0, [r7, #12]
 80044e6:	60b9      	str	r1, [r7, #8]
 80044e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	3330      	adds	r3, #48	@ 0x30
 80044ee:	461a      	mov	r2, r3
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	0a1b      	lsrs	r3, r3, #8
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	f003 030c 	and.w	r3, r3, #12
 80044fa:	4413      	add	r3, r2
 80044fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	f003 031f 	and.w	r3, r3, #31
 8004508:	211f      	movs	r1, #31
 800450a:	fa01 f303 	lsl.w	r3, r1, r3
 800450e:	43db      	mvns	r3, r3
 8004510:	401a      	ands	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	0e9b      	lsrs	r3, r3, #26
 8004516:	f003 011f 	and.w	r1, r3, #31
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	f003 031f 	and.w	r3, r3, #31
 8004520:	fa01 f303 	lsl.w	r3, r1, r3
 8004524:	431a      	orrs	r2, r3
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800452a:	bf00      	nop
 800452c:	371c      	adds	r7, #28
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8004536:	b480      	push	{r7}
 8004538:	b083      	sub	sp, #12
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	f023 0203 	bic.w	r2, r3, #3
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	431a      	orrs	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	60da      	str	r2, [r3, #12]
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	f043 0201 	orr.w	r2, r3, #1
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	60da      	str	r2, [r3, #12]
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a08      	ldr	r2, [pc, #32]	@ (80045ac <LL_ADC_REG_SetDMATransferMode+0x30>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d107      	bne.n	800459e <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	f023 0203 	bic.w	r2, r3, #3
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	431a      	orrs	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	60da      	str	r2, [r3, #12]
  }
}
 800459e:	bf00      	nop
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	58026000 	.word	0x58026000

080045b0 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045bc:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d101      	bne.n	80045c8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80045c4:	2301      	movs	r3, #1
 80045c6:	e000      	b.n	80045ca <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	370c      	adds	r7, #12
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr

080045d6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80045d6:	b480      	push	{r7}
 80045d8:	b087      	sub	sp, #28
 80045da:	af00      	add	r7, sp, #0
 80045dc:	60f8      	str	r0, [r7, #12]
 80045de:	60b9      	str	r1, [r7, #8]
 80045e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	3314      	adds	r3, #20
 80045e6:	461a      	mov	r2, r3
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	0e5b      	lsrs	r3, r3, #25
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	f003 0304 	and.w	r3, r3, #4
 80045f2:	4413      	add	r3, r2
 80045f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	0d1b      	lsrs	r3, r3, #20
 80045fe:	f003 031f 	and.w	r3, r3, #31
 8004602:	2107      	movs	r1, #7
 8004604:	fa01 f303 	lsl.w	r3, r1, r3
 8004608:	43db      	mvns	r3, r3
 800460a:	401a      	ands	r2, r3
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	0d1b      	lsrs	r3, r3, #20
 8004610:	f003 031f 	and.w	r3, r3, #31
 8004614:	6879      	ldr	r1, [r7, #4]
 8004616:	fa01 f303 	lsl.w	r3, r1, r3
 800461a:	431a      	orrs	r2, r3
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004620:	bf00      	nop
 8004622:	371c      	adds	r7, #28
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800462c:	b480      	push	{r7}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4a1a      	ldr	r2, [pc, #104]	@ (80046a4 <LL_ADC_SetChannelSingleDiff+0x78>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d115      	bne.n	800466c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800464c:	43db      	mvns	r3, r3
 800464e:	401a      	ands	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f003 0318 	and.w	r3, r3, #24
 8004656:	4914      	ldr	r1, [pc, #80]	@ (80046a8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004658:	40d9      	lsrs	r1, r3
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	400b      	ands	r3, r1
 800465e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004662:	431a      	orrs	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800466a:	e014      	b.n	8004696 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004678:	43db      	mvns	r3, r3
 800467a:	401a      	ands	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f003 0318 	and.w	r3, r3, #24
 8004682:	4909      	ldr	r1, [pc, #36]	@ (80046a8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004684:	40d9      	lsrs	r1, r3
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	400b      	ands	r3, r1
 800468a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800468e:	431a      	orrs	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8004696:	bf00      	nop
 8004698:	3714      	adds	r7, #20
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	58026000 	.word	0x58026000
 80046a8:	000fffff 	.word	0x000fffff

080046ac <LL_ADC_SetAnalogWDMonitChannels>:
  *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
  *         (2) On STM32H7, parameter available only on ADC instance: ADC2.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b087      	sub	sp, #28
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	330c      	adds	r3, #12
 80046bc:	4618      	mov	r0, r3
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	0d1b      	lsrs	r3, r3, #20
 80046c2:	f003 0103 	and.w	r1, r3, #3
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	f003 0201 	and.w	r2, r3, #1
 80046cc:	4613      	mov	r3, r2
 80046ce:	00db      	lsls	r3, r3, #3
 80046d0:	4413      	add	r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	440b      	add	r3, r1
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	4403      	add	r3, r0
 80046da:	617b      	str	r3, [r7, #20]
                                                      + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	68b9      	ldr	r1, [r7, #8]
 80046e2:	4b08      	ldr	r3, [pc, #32]	@ (8004704 <LL_ADC_SetAnalogWDMonitChannels+0x58>)
 80046e4:	400b      	ands	r3, r1
 80046e6:	43db      	mvns	r3, r3
 80046e8:	401a      	ands	r2, r3
 80046ea:	6879      	ldr	r1, [r7, #4]
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	400b      	ands	r3, r1
 80046f0:	431a      	orrs	r2, r3
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 80046f6:	bf00      	nop
 80046f8:	371c      	adds	r7, #28
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	7dcfffff 	.word	0x7dcfffff

08004708 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdHighValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue, uint32_t AWDThresholdLowValue)
{
 8004708:	b480      	push	{r7}
 800470a:	b089      	sub	sp, #36	@ 0x24
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
 8004714:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  if (ADCx == ADC3)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4a29      	ldr	r2, [pc, #164]	@ (80047c0 <LL_ADC_ConfigAnalogWDThresholds+0xb8>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d115      	bne.n	800474a <LL_ADC_ConfigAnalogWDThresholds+0x42>
  {
    uint32_t __IO *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	3320      	adds	r3, #32
 8004722:	461a      	mov	r2, r3
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	0d1b      	lsrs	r3, r3, #20
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	f003 030c 	and.w	r3, r3, #12
 800472e:	4413      	add	r3, r2
 8004730:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 22f0 	and.w	r2, r3, #4026593280	@ 0xf000f000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	0419      	lsls	r1, r3, #16
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	430b      	orrs	r3, r1
 8004742:	431a      	orrs	r2, r3
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	601a      	str	r2, [r3, #0]
                                                         + (LL_ADC_AWD_THRESHOLD_HIGH));

    MODIFY_REG(*preg, ADC_LTR_LT, AWDThresholdLowValue);
    MODIFY_REG(*preg2, ADC_HTR_HT, AWDThresholdHighValue);
  }
}
 8004748:	e034      	b.n	80047b4 <LL_ADC_ConfigAnalogWDThresholds+0xac>
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS) * 2UL)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	3320      	adds	r3, #32
 800474e:	4618      	mov	r0, r3
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	0d1b      	lsrs	r3, r3, #20
 8004754:	f003 0103 	and.w	r1, r3, #3
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	f003 0201 	and.w	r2, r3, #1
 800475e:	4613      	mov	r3, r2
 8004760:	011b      	lsls	r3, r3, #4
 8004762:	4413      	add	r3, r2
 8004764:	440b      	add	r3, r1
 8004766:	005b      	lsls	r3, r3, #1
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4403      	add	r3, r0
 800476c:	61fb      	str	r3, [r7, #28]
    __IO uint32_t *preg2 = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS) * 2UL)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	3320      	adds	r3, #32
 8004772:	4618      	mov	r0, r3
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	0d1b      	lsrs	r3, r3, #20
 8004778:	f003 0103 	and.w	r1, r3, #3
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	f003 0201 	and.w	r2, r3, #1
 8004782:	4613      	mov	r3, r2
 8004784:	011b      	lsls	r3, r3, #4
 8004786:	4413      	add	r3, r2
 8004788:	440b      	add	r3, r1
 800478a:	005b      	lsls	r3, r3, #1
 800478c:	3301      	adds	r3, #1
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	4403      	add	r3, r0
 8004792:	61bb      	str	r3, [r7, #24]
    MODIFY_REG(*preg, ADC_LTR_LT, AWDThresholdLowValue);
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 427c 	and.w	r2, r3, #4227858432	@ 0xfc000000
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	431a      	orrs	r2, r3
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	601a      	str	r2, [r3, #0]
    MODIFY_REG(*preg2, ADC_HTR_HT, AWDThresholdHighValue);
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 427c 	and.w	r2, r3, #4227858432	@ 0xfc000000
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	431a      	orrs	r2, r3
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	601a      	str	r2, [r3, #0]
}
 80047b4:	bf00      	nop
 80047b6:	3724      	adds	r7, #36	@ 0x24
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr
 80047c0:	58026000 	.word	0x58026000

080047c4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f003 031f 	and.w	r3, r3, #31
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689a      	ldr	r2, [r3, #8]
 8004808:	4b04      	ldr	r3, [pc, #16]	@ (800481c <LL_ADC_DisableDeepPowerDown+0x20>)
 800480a:	4013      	ands	r3, r2
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	6093      	str	r3, [r2, #8]
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr
 800481c:	5fffffc0 	.word	0x5fffffc0

08004820 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004830:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004834:	d101      	bne.n	800483a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004836:	2301      	movs	r3, #1
 8004838:	e000      	b.n	800483c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689a      	ldr	r2, [r3, #8]
 8004854:	4b05      	ldr	r3, [pc, #20]	@ (800486c <LL_ADC_EnableInternalRegulator+0x24>)
 8004856:	4013      	ands	r3, r2
 8004858:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr
 800486c:	6fffffc0 	.word	0x6fffffc0

08004870 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004880:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004884:	d101      	bne.n	800488a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004886:	2301      	movs	r3, #1
 8004888:	e000      	b.n	800488c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689a      	ldr	r2, [r3, #8]
 80048a4:	4b05      	ldr	r3, [pc, #20]	@ (80048bc <LL_ADC_Enable+0x24>)
 80048a6:	4013      	ands	r3, r2
 80048a8:	f043 0201 	orr.w	r2, r3, #1
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr
 80048bc:	7fffffc0 	.word	0x7fffffc0

080048c0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689a      	ldr	r2, [r3, #8]
 80048cc:	4b05      	ldr	r3, [pc, #20]	@ (80048e4 <LL_ADC_Disable+0x24>)
 80048ce:	4013      	ands	r3, r2
 80048d0:	f043 0202 	orr.w	r2, r3, #2
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr
 80048e4:	7fffffc0 	.word	0x7fffffc0

080048e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d101      	bne.n	8004900 <LL_ADC_IsEnabled+0x18>
 80048fc:	2301      	movs	r3, #1
 80048fe:	e000      	b.n	8004902 <LL_ADC_IsEnabled+0x1a>
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	370c      	adds	r7, #12
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr

0800490e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800490e:	b480      	push	{r7}
 8004910:	b083      	sub	sp, #12
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b02      	cmp	r3, #2
 8004920:	d101      	bne.n	8004926 <LL_ADC_IsDisableOngoing+0x18>
 8004922:	2301      	movs	r3, #1
 8004924:	e000      	b.n	8004928 <LL_ADC_IsDisableOngoing+0x1a>
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689a      	ldr	r2, [r3, #8]
 8004940:	4b05      	ldr	r3, [pc, #20]	@ (8004958 <LL_ADC_REG_StartConversion+0x24>)
 8004942:	4013      	ands	r3, r2
 8004944:	f043 0204 	orr.w	r2, r3, #4
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	7fffffc0 	.word	0x7fffffc0

0800495c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f003 0304 	and.w	r3, r3, #4
 800496c:	2b04      	cmp	r3, #4
 800496e:	d101      	bne.n	8004974 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004970:	2301      	movs	r3, #1
 8004972:	e000      	b.n	8004976 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004982:	b480      	push	{r7}
 8004984:	b083      	sub	sp, #12
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f003 0308 	and.w	r3, r3, #8
 8004992:	2b08      	cmp	r3, #8
 8004994:	d101      	bne.n	800499a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004996:	2301      	movs	r3, #1
 8004998:	e000      	b.n	800499c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2280      	movs	r2, #128	@ 0x80
 80049b4:	601a      	str	r2, [r3, #0]
}
 80049b6:	bf00      	nop
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 80049c2:	b480      	push	{r7}
 80049c4:	b083      	sub	sp, #12
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80049d0:	601a      	str	r2, [r3, #0]
}
 80049d2:	bf00      	nop
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr

080049de <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 80049de:	b480      	push	{r7}
 80049e0:	b083      	sub	sp, #12
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049ec:	601a      	str	r2, [r3, #0]
}
 80049ee:	bf00      	nop
 80049f0:	370c      	adds	r7, #12
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr

080049fa <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 80049fa:	b480      	push	{r7}
 80049fc:	b083      	sub	sp, #12
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	605a      	str	r2, [r3, #4]
}
 8004a0e:	bf00      	nop
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b083      	sub	sp, #12
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	605a      	str	r2, [r3, #4]
}
 8004a2e:	bf00      	nop
 8004a30:	370c      	adds	r7, #12
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b083      	sub	sp, #12
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	605a      	str	r2, [r3, #4]
}
 8004a4e:	bf00      	nop
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr

08004a5a <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b083      	sub	sp, #12
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	605a      	str	r2, [r3, #4]
}
 8004a6e:	bf00      	nop
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b083      	sub	sp, #12
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	605a      	str	r2, [r3, #4]
}
 8004a8e:	bf00      	nop
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr

08004a9a <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	b083      	sub	sp, #12
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	605a      	str	r2, [r3, #4]
}
 8004aae:	bf00      	nop
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
	...

08004abc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004abc:	b590      	push	{r4, r7, lr}
 8004abe:	b089      	sub	sp, #36	@ 0x24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e1ee      	b.n	8004eb4 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d109      	bne.n	8004af8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f7fe fcef 	bl	80034c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7ff fe8f 	bl	8004820 <LL_ADC_IsDeepPowerDownEnabled>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d004      	beq.n	8004b12 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7ff fe75 	bl	80047fc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7ff feaa 	bl	8004870 <LL_ADC_IsInternalRegulatorEnabled>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d114      	bne.n	8004b4c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7ff fe8e 	bl	8004848 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004b2c:	4b8e      	ldr	r3, [pc, #568]	@ (8004d68 <HAL_ADC_Init+0x2ac>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	099b      	lsrs	r3, r3, #6
 8004b32:	4a8e      	ldr	r2, [pc, #568]	@ (8004d6c <HAL_ADC_Init+0x2b0>)
 8004b34:	fba2 2303 	umull	r2, r3, r2, r3
 8004b38:	099b      	lsrs	r3, r3, #6
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004b3e:	e002      	b.n	8004b46 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	3b01      	subs	r3, #1
 8004b44:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1f9      	bne.n	8004b40 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7ff fe8d 	bl	8004870 <LL_ADC_IsInternalRegulatorEnabled>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10d      	bne.n	8004b78 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b60:	f043 0210 	orr.w	r2, r3, #16
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b6c:	f043 0201 	orr.w	r2, r3, #1
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7ff feed 	bl	800495c <LL_ADC_REG_IsConversionOngoing>
 8004b82:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b88:	f003 0310 	and.w	r3, r3, #16
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f040 8188 	bne.w	8004ea2 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	f040 8184 	bne.w	8004ea2 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b9e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004ba2:	f043 0202 	orr.w	r2, r3, #2
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7ff fe9a 	bl	80048e8 <LL_ADC_IsEnabled>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d136      	bne.n	8004c28 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a6c      	ldr	r2, [pc, #432]	@ (8004d70 <HAL_ADC_Init+0x2b4>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d004      	beq.n	8004bce <HAL_ADC_Init+0x112>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a6a      	ldr	r2, [pc, #424]	@ (8004d74 <HAL_ADC_Init+0x2b8>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d10e      	bne.n	8004bec <HAL_ADC_Init+0x130>
 8004bce:	4868      	ldr	r0, [pc, #416]	@ (8004d70 <HAL_ADC_Init+0x2b4>)
 8004bd0:	f7ff fe8a 	bl	80048e8 <LL_ADC_IsEnabled>
 8004bd4:	4604      	mov	r4, r0
 8004bd6:	4867      	ldr	r0, [pc, #412]	@ (8004d74 <HAL_ADC_Init+0x2b8>)
 8004bd8:	f7ff fe86 	bl	80048e8 <LL_ADC_IsEnabled>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	4323      	orrs	r3, r4
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	bf0c      	ite	eq
 8004be4:	2301      	moveq	r3, #1
 8004be6:	2300      	movne	r3, #0
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	e008      	b.n	8004bfe <HAL_ADC_Init+0x142>
 8004bec:	4862      	ldr	r0, [pc, #392]	@ (8004d78 <HAL_ADC_Init+0x2bc>)
 8004bee:	f7ff fe7b 	bl	80048e8 <LL_ADC_IsEnabled>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	bf0c      	ite	eq
 8004bf8:	2301      	moveq	r3, #1
 8004bfa:	2300      	movne	r3, #0
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d012      	beq.n	8004c28 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a5a      	ldr	r2, [pc, #360]	@ (8004d70 <HAL_ADC_Init+0x2b4>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d004      	beq.n	8004c16 <HAL_ADC_Init+0x15a>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a58      	ldr	r2, [pc, #352]	@ (8004d74 <HAL_ADC_Init+0x2b8>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d101      	bne.n	8004c1a <HAL_ADC_Init+0x15e>
 8004c16:	4a59      	ldr	r2, [pc, #356]	@ (8004d7c <HAL_ADC_Init+0x2c0>)
 8004c18:	e000      	b.n	8004c1c <HAL_ADC_Init+0x160>
 8004c1a:	4a59      	ldr	r2, [pc, #356]	@ (8004d80 <HAL_ADC_Init+0x2c4>)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	4619      	mov	r1, r3
 8004c22:	4610      	mov	r0, r2
 8004c24:	f7ff fb22 	bl	800426c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a52      	ldr	r2, [pc, #328]	@ (8004d78 <HAL_ADC_Init+0x2bc>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d129      	bne.n	8004c86 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	7e5b      	ldrb	r3, [r3, #25]
 8004c36:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004c3c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8004c42:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	2b08      	cmp	r3, #8
 8004c4a:	d013      	beq.n	8004c74 <HAL_ADC_Init+0x1b8>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	2b0c      	cmp	r3, #12
 8004c52:	d00d      	beq.n	8004c70 <HAL_ADC_Init+0x1b4>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	2b1c      	cmp	r3, #28
 8004c5a:	d007      	beq.n	8004c6c <HAL_ADC_Init+0x1b0>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	2b18      	cmp	r3, #24
 8004c62:	d101      	bne.n	8004c68 <HAL_ADC_Init+0x1ac>
 8004c64:	2318      	movs	r3, #24
 8004c66:	e006      	b.n	8004c76 <HAL_ADC_Init+0x1ba>
 8004c68:	2300      	movs	r3, #0
 8004c6a:	e004      	b.n	8004c76 <HAL_ADC_Init+0x1ba>
 8004c6c:	2310      	movs	r3, #16
 8004c6e:	e002      	b.n	8004c76 <HAL_ADC_Init+0x1ba>
 8004c70:	2308      	movs	r3, #8
 8004c72:	e000      	b.n	8004c76 <HAL_ADC_Init+0x1ba>
 8004c74:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8004c76:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c7e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004c80:	4313      	orrs	r3, r2
 8004c82:	61bb      	str	r3, [r7, #24]
 8004c84:	e00e      	b.n	8004ca4 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	7e5b      	ldrb	r3, [r3, #25]
 8004c8a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004c90:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004c96:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c9e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d106      	bne.n	8004cbc <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	045b      	lsls	r3, r3, #17
 8004cb6:	69ba      	ldr	r2, [r7, #24]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d009      	beq.n	8004cd8 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cc8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cd0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004cd2:	69ba      	ldr	r2, [r7, #24]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a26      	ldr	r2, [pc, #152]	@ (8004d78 <HAL_ADC_Init+0x2bc>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d115      	bne.n	8004d0e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68da      	ldr	r2, [r3, #12]
 8004ce8:	4b26      	ldr	r3, [pc, #152]	@ (8004d84 <HAL_ADC_Init+0x2c8>)
 8004cea:	4013      	ands	r3, r2
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	6812      	ldr	r2, [r2, #0]
 8004cf0:	69b9      	ldr	r1, [r7, #24]
 8004cf2:	430b      	orrs	r3, r1
 8004cf4:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	611a      	str	r2, [r3, #16]
 8004d0c:	e009      	b.n	8004d22 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68da      	ldr	r2, [r3, #12]
 8004d14:	4b1c      	ldr	r3, [pc, #112]	@ (8004d88 <HAL_ADC_Init+0x2cc>)
 8004d16:	4013      	ands	r3, r2
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	6812      	ldr	r2, [r2, #0]
 8004d1c:	69b9      	ldr	r1, [r7, #24]
 8004d1e:	430b      	orrs	r3, r1
 8004d20:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7ff fe18 	bl	800495c <LL_ADC_REG_IsConversionOngoing>
 8004d2c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7ff fe25 	bl	8004982 <LL_ADC_INJ_IsConversionOngoing>
 8004d38:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f040 808e 	bne.w	8004e5e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f040 808a 	bne.w	8004e5e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a0a      	ldr	r2, [pc, #40]	@ (8004d78 <HAL_ADC_Init+0x2bc>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d11b      	bne.n	8004d8c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	7e1b      	ldrb	r3, [r3, #24]
 8004d58:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004d60:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8004d62:	4313      	orrs	r3, r2
 8004d64:	61bb      	str	r3, [r7, #24]
 8004d66:	e018      	b.n	8004d9a <HAL_ADC_Init+0x2de>
 8004d68:	24000038 	.word	0x24000038
 8004d6c:	053e2d63 	.word	0x053e2d63
 8004d70:	40022000 	.word	0x40022000
 8004d74:	40022100 	.word	0x40022100
 8004d78:	58026000 	.word	0x58026000
 8004d7c:	40022300 	.word	0x40022300
 8004d80:	58026300 	.word	0x58026300
 8004d84:	fff04007 	.word	0xfff04007
 8004d88:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	7e1b      	ldrb	r3, [r3, #24]
 8004d90:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8004d96:	4313      	orrs	r3, r2
 8004d98:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68da      	ldr	r2, [r3, #12]
 8004da0:	4b46      	ldr	r3, [pc, #280]	@ (8004ebc <HAL_ADC_Init+0x400>)
 8004da2:	4013      	ands	r3, r2
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	6812      	ldr	r2, [r2, #0]
 8004da8:	69b9      	ldr	r1, [r7, #24]
 8004daa:	430b      	orrs	r3, r1
 8004dac:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d137      	bne.n	8004e28 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dbc:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a3f      	ldr	r2, [pc, #252]	@ (8004ec0 <HAL_ADC_Init+0x404>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d116      	bne.n	8004df6 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	691a      	ldr	r2, [r3, #16]
 8004dce:	4b3d      	ldr	r3, [pc, #244]	@ (8004ec4 <HAL_ADC_Init+0x408>)
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004dda:	4311      	orrs	r1, r2
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004de0:	4311      	orrs	r1, r2
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004de6:	430a      	orrs	r2, r1
 8004de8:	431a      	orrs	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f042 0201 	orr.w	r2, r2, #1
 8004df2:	611a      	str	r2, [r3, #16]
 8004df4:	e020      	b.n	8004e38 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	691a      	ldr	r2, [r3, #16]
 8004dfc:	4b32      	ldr	r3, [pc, #200]	@ (8004ec8 <HAL_ADC_Init+0x40c>)
 8004dfe:	4013      	ands	r3, r2
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004e04:	3a01      	subs	r2, #1
 8004e06:	0411      	lsls	r1, r2, #16
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004e0c:	4311      	orrs	r1, r2
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004e12:	4311      	orrs	r1, r2
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	431a      	orrs	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f042 0201 	orr.w	r2, r2, #1
 8004e24:	611a      	str	r2, [r3, #16]
 8004e26:	e007      	b.n	8004e38 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	691a      	ldr	r2, [r3, #16]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f022 0201 	bic.w	r2, r2, #1
 8004e36:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a1b      	ldr	r2, [pc, #108]	@ (8004ec0 <HAL_ADC_Init+0x404>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d002      	beq.n	8004e5e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f001 fd99 	bl	8006990 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d10c      	bne.n	8004e80 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e6c:	f023 010f 	bic.w	r1, r3, #15
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	69db      	ldr	r3, [r3, #28]
 8004e74:	1e5a      	subs	r2, r3, #1
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e7e:	e007      	b.n	8004e90 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f022 020f 	bic.w	r2, r2, #15
 8004e8e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e94:	f023 0303 	bic.w	r3, r3, #3
 8004e98:	f043 0201 	orr.w	r2, r3, #1
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	661a      	str	r2, [r3, #96]	@ 0x60
 8004ea0:	e007      	b.n	8004eb2 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ea6:	f043 0210 	orr.w	r2, r3, #16
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004eb2:	7ffb      	ldrb	r3, [r7, #31]
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3724      	adds	r7, #36	@ 0x24
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd90      	pop	{r4, r7, pc}
 8004ebc:	ffffbffc 	.word	0xffffbffc
 8004ec0:	58026000 	.word	0x58026000
 8004ec4:	fc00f81f 	.word	0xfc00f81f
 8004ec8:	fc00f81e 	.word	0xfc00f81e

08004ecc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a60      	ldr	r2, [pc, #384]	@ (8005060 <HAL_ADC_Start_DMA+0x194>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d004      	beq.n	8004eec <HAL_ADC_Start_DMA+0x20>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a5f      	ldr	r2, [pc, #380]	@ (8005064 <HAL_ADC_Start_DMA+0x198>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d101      	bne.n	8004ef0 <HAL_ADC_Start_DMA+0x24>
 8004eec:	4b5e      	ldr	r3, [pc, #376]	@ (8005068 <HAL_ADC_Start_DMA+0x19c>)
 8004eee:	e000      	b.n	8004ef2 <HAL_ADC_Start_DMA+0x26>
 8004ef0:	4b5e      	ldr	r3, [pc, #376]	@ (800506c <HAL_ADC_Start_DMA+0x1a0>)
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7ff fc66 	bl	80047c4 <LL_ADC_GetMultimode>
 8004ef8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7ff fd2c 	bl	800495c <LL_ADC_REG_IsConversionOngoing>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	f040 80a2 	bne.w	8005050 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d101      	bne.n	8004f1a <HAL_ADC_Start_DMA+0x4e>
 8004f16:	2302      	movs	r3, #2
 8004f18:	e09d      	b.n	8005056 <HAL_ADC_Start_DMA+0x18a>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d006      	beq.n	8004f36 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	2b05      	cmp	r3, #5
 8004f2c:	d003      	beq.n	8004f36 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	2b09      	cmp	r3, #9
 8004f32:	f040 8086 	bne.w	8005042 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f001 fbac 	bl	8006694 <ADC_Enable>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004f40:	7dfb      	ldrb	r3, [r7, #23]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d178      	bne.n	8005038 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004f4a:	4b49      	ldr	r3, [pc, #292]	@ (8005070 <HAL_ADC_Start_DMA+0x1a4>)
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a42      	ldr	r2, [pc, #264]	@ (8005064 <HAL_ADC_Start_DMA+0x198>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d002      	beq.n	8004f66 <HAL_ADC_Start_DMA+0x9a>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	e000      	b.n	8004f68 <HAL_ADC_Start_DMA+0x9c>
 8004f66:	4b3e      	ldr	r3, [pc, #248]	@ (8005060 <HAL_ADC_Start_DMA+0x194>)
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	6812      	ldr	r2, [r2, #0]
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d002      	beq.n	8004f76 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d105      	bne.n	8004f82 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f7a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d006      	beq.n	8004f9c <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f92:	f023 0206 	bic.w	r2, r3, #6
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	665a      	str	r2, [r3, #100]	@ 0x64
 8004f9a:	e002      	b.n	8004fa2 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fa6:	4a33      	ldr	r2, [pc, #204]	@ (8005074 <HAL_ADC_Start_DMA+0x1a8>)
 8004fa8:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fae:	4a32      	ldr	r2, [pc, #200]	@ (8005078 <HAL_ADC_Start_DMA+0x1ac>)
 8004fb0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fb6:	4a31      	ldr	r2, [pc, #196]	@ (800507c <HAL_ADC_Start_DMA+0x1b0>)
 8004fb8:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	221c      	movs	r2, #28
 8004fc0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	685a      	ldr	r2, [r3, #4]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f042 0210 	orr.w	r2, r2, #16
 8004fd8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a28      	ldr	r2, [pc, #160]	@ (8005080 <HAL_ADC_Start_DMA+0x1b4>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d10f      	bne.n	8005004 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004fee:	005b      	lsls	r3, r3, #1
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	4610      	mov	r0, r2
 8004ff4:	f7ff fac2 	bl	800457c <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f7ff faad 	bl	800455c <LL_ADC_EnableDMAReq>
 8005002:	e007      	b.n	8005014 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800500c:	4619      	mov	r1, r3
 800500e:	4610      	mov	r0, r2
 8005010:	f7ff fa91 	bl	8004536 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	3340      	adds	r3, #64	@ 0x40
 800501e:	4619      	mov	r1, r3
 8005020:	68ba      	ldr	r2, [r7, #8]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f002 fdcc 	bl	8007bc0 <HAL_DMA_Start_IT>
 8005028:	4603      	mov	r3, r0
 800502a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4618      	mov	r0, r3
 8005032:	f7ff fc7f 	bl	8004934 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005036:	e00d      	b.n	8005054 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 8005040:	e008      	b.n	8005054 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800504e:	e001      	b.n	8005054 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005050:	2302      	movs	r3, #2
 8005052:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005054:	7dfb      	ldrb	r3, [r7, #23]
}
 8005056:	4618      	mov	r0, r3
 8005058:	3718      	adds	r7, #24
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	40022000 	.word	0x40022000
 8005064:	40022100 	.word	0x40022100
 8005068:	40022300 	.word	0x40022300
 800506c:	58026300 	.word	0x58026300
 8005070:	fffff0fe 	.word	0xfffff0fe
 8005074:	08006867 	.word	0x08006867
 8005078:	0800693f 	.word	0x0800693f
 800507c:	0800695b 	.word	0x0800695b
 8005080:	58026000 	.word	0x58026000

08005084 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b08a      	sub	sp, #40	@ 0x28
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800508c:	2300      	movs	r3, #0
 800508e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a87      	ldr	r2, [pc, #540]	@ (80052c4 <HAL_ADC_IRQHandler+0x240>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d004      	beq.n	80050b4 <HAL_ADC_IRQHandler+0x30>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a86      	ldr	r2, [pc, #536]	@ (80052c8 <HAL_ADC_IRQHandler+0x244>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d101      	bne.n	80050b8 <HAL_ADC_IRQHandler+0x34>
 80050b4:	4b85      	ldr	r3, [pc, #532]	@ (80052cc <HAL_ADC_IRQHandler+0x248>)
 80050b6:	e000      	b.n	80050ba <HAL_ADC_IRQHandler+0x36>
 80050b8:	4b85      	ldr	r3, [pc, #532]	@ (80052d0 <HAL_ADC_IRQHandler+0x24c>)
 80050ba:	4618      	mov	r0, r3
 80050bc:	f7ff fb82 	bl	80047c4 <LL_ADC_GetMultimode>
 80050c0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	f003 0302 	and.w	r3, r3, #2
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d017      	beq.n	80050fc <HAL_ADC_IRQHandler+0x78>
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d012      	beq.n	80050fc <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050da:	f003 0310 	and.w	r3, r3, #16
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d105      	bne.n	80050ee <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050e6:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	661a      	str	r2, [r3, #96]	@ 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f001 fee8 	bl	8006ec4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2202      	movs	r2, #2
 80050fa:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	f003 0304 	and.w	r3, r3, #4
 8005102:	2b00      	cmp	r3, #0
 8005104:	d004      	beq.n	8005110 <HAL_ADC_IRQHandler+0x8c>
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	f003 0304 	and.w	r3, r3, #4
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10a      	bne.n	8005126 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005116:	2b00      	cmp	r3, #0
 8005118:	f000 8083 	beq.w	8005222 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	f003 0308 	and.w	r3, r3, #8
 8005122:	2b00      	cmp	r3, #0
 8005124:	d07d      	beq.n	8005222 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800512a:	f003 0310 	and.w	r3, r3, #16
 800512e:	2b00      	cmp	r3, #0
 8005130:	d105      	bne.n	800513e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005136:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4618      	mov	r0, r3
 8005144:	f7ff f9b8 	bl	80044b8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d062      	beq.n	8005214 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a5d      	ldr	r2, [pc, #372]	@ (80052c8 <HAL_ADC_IRQHandler+0x244>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d002      	beq.n	800515e <HAL_ADC_IRQHandler+0xda>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	e000      	b.n	8005160 <HAL_ADC_IRQHandler+0xdc>
 800515e:	4b59      	ldr	r3, [pc, #356]	@ (80052c4 <HAL_ADC_IRQHandler+0x240>)
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	6812      	ldr	r2, [r2, #0]
 8005164:	4293      	cmp	r3, r2
 8005166:	d008      	beq.n	800517a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d005      	beq.n	800517a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	2b05      	cmp	r3, #5
 8005172:	d002      	beq.n	800517a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	2b09      	cmp	r3, #9
 8005178:	d104      	bne.n	8005184 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	623b      	str	r3, [r7, #32]
 8005182:	e00c      	b.n	800519e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a4f      	ldr	r2, [pc, #316]	@ (80052c8 <HAL_ADC_IRQHandler+0x244>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d002      	beq.n	8005194 <HAL_ADC_IRQHandler+0x110>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	e000      	b.n	8005196 <HAL_ADC_IRQHandler+0x112>
 8005194:	4b4b      	ldr	r3, [pc, #300]	@ (80052c4 <HAL_ADC_IRQHandler+0x240>)
 8005196:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800519e:	6a3b      	ldr	r3, [r7, #32]
 80051a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d135      	bne.n	8005214 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0308 	and.w	r3, r3, #8
 80051b2:	2b08      	cmp	r3, #8
 80051b4:	d12e      	bne.n	8005214 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7ff fbce 	bl	800495c <LL_ADC_REG_IsConversionOngoing>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d11a      	bne.n	80051fc <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f022 020c 	bic.w	r2, r2, #12
 80051d4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051da:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	661a      	str	r2, [r3, #96]	@ 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d112      	bne.n	8005214 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051f2:	f043 0201 	orr.w	r2, r3, #1
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	661a      	str	r2, [r3, #96]	@ 0x60
 80051fa:	e00b      	b.n	8005214 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005200:	f043 0210 	orr.w	r2, r3, #16
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800520c:	f043 0201 	orr.w	r2, r3, #1
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	665a      	str	r2, [r3, #100]	@ 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f7fc fcd9 	bl	8001bcc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	220c      	movs	r2, #12
 8005220:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	f003 0320 	and.w	r3, r3, #32
 8005228:	2b00      	cmp	r3, #0
 800522a:	d004      	beq.n	8005236 <HAL_ADC_IRQHandler+0x1b2>
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	f003 0320 	and.w	r3, r3, #32
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10b      	bne.n	800524e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800523c:	2b00      	cmp	r3, #0
 800523e:	f000 80a0 	beq.w	8005382 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005248:	2b00      	cmp	r3, #0
 800524a:	f000 809a 	beq.w	8005382 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005252:	f003 0310 	and.w	r3, r3, #16
 8005256:	2b00      	cmp	r3, #0
 8005258:	d105      	bne.n	8005266 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800525e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4618      	mov	r0, r3
 800526c:	f7ff f9a0 	bl	80045b0 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005270:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4618      	mov	r0, r3
 8005278:	f7ff f91e 	bl	80044b8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800527c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a11      	ldr	r2, [pc, #68]	@ (80052c8 <HAL_ADC_IRQHandler+0x244>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d002      	beq.n	800528e <HAL_ADC_IRQHandler+0x20a>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	e000      	b.n	8005290 <HAL_ADC_IRQHandler+0x20c>
 800528e:	4b0d      	ldr	r3, [pc, #52]	@ (80052c4 <HAL_ADC_IRQHandler+0x240>)
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	6812      	ldr	r2, [r2, #0]
 8005294:	4293      	cmp	r3, r2
 8005296:	d008      	beq.n	80052aa <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d005      	beq.n	80052aa <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	2b06      	cmp	r3, #6
 80052a2:	d002      	beq.n	80052aa <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	2b07      	cmp	r3, #7
 80052a8:	d104      	bne.n	80052b4 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	623b      	str	r3, [r7, #32]
 80052b2:	e014      	b.n	80052de <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a03      	ldr	r2, [pc, #12]	@ (80052c8 <HAL_ADC_IRQHandler+0x244>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d00a      	beq.n	80052d4 <HAL_ADC_IRQHandler+0x250>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	e008      	b.n	80052d6 <HAL_ADC_IRQHandler+0x252>
 80052c4:	40022000 	.word	0x40022000
 80052c8:	40022100 	.word	0x40022100
 80052cc:	40022300 	.word	0x40022300
 80052d0:	58026300 	.word	0x58026300
 80052d4:	4b84      	ldr	r3, [pc, #528]	@ (80054e8 <HAL_ADC_IRQHandler+0x464>)
 80052d6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d047      	beq.n	8005374 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80052e4:	6a3b      	ldr	r3, [r7, #32]
 80052e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d007      	beq.n	80052fe <HAL_ADC_IRQHandler+0x27a>
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d03f      	beq.n	8005374 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80052f4:	6a3b      	ldr	r3, [r7, #32]
 80052f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d13a      	bne.n	8005374 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005308:	2b40      	cmp	r3, #64	@ 0x40
 800530a:	d133      	bne.n	8005374 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800530c:	6a3b      	ldr	r3, [r7, #32]
 800530e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d12e      	bne.n	8005374 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4618      	mov	r0, r3
 800531c:	f7ff fb31 	bl	8004982 <LL_ADC_INJ_IsConversionOngoing>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d11a      	bne.n	800535c <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005334:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800533a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	661a      	str	r2, [r3, #96]	@ 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005346:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800534a:	2b00      	cmp	r3, #0
 800534c:	d112      	bne.n	8005374 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005352:	f043 0201 	orr.w	r2, r3, #1
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	661a      	str	r2, [r3, #96]	@ 0x60
 800535a:	e00b      	b.n	8005374 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005360:	f043 0210 	orr.w	r2, r3, #16
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	661a      	str	r2, [r3, #96]	@ 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800536c:	f043 0201 	orr.w	r2, r3, #1
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	665a      	str	r2, [r3, #100]	@ 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f001 fd7d 	bl	8006e74 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2260      	movs	r2, #96	@ 0x60
 8005380:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005388:	2b00      	cmp	r3, #0
 800538a:	d011      	beq.n	80053b0 <HAL_ADC_IRQHandler+0x32c>
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00c      	beq.n	80053b0 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800539a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f8b2 	bl	800550c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2280      	movs	r2, #128	@ 0x80
 80053ae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d012      	beq.n	80053e0 <HAL_ADC_IRQHandler+0x35c>
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00d      	beq.n	80053e0 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053c8:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f001 fd63 	bl	8006e9c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80053de:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d012      	beq.n	8005410 <HAL_ADC_IRQHandler+0x38c>
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00d      	beq.n	8005410 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053f8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f001 fd55 	bl	8006eb0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800540e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	f003 0310 	and.w	r3, r3, #16
 8005416:	2b00      	cmp	r3, #0
 8005418:	d043      	beq.n	80054a2 <HAL_ADC_IRQHandler+0x41e>
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	f003 0310 	and.w	r3, r3, #16
 8005420:	2b00      	cmp	r3, #0
 8005422:	d03e      	beq.n	80054a2 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005428:	2b00      	cmp	r3, #0
 800542a:	d102      	bne.n	8005432 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800542c:	2301      	movs	r3, #1
 800542e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005430:	e021      	b.n	8005476 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d015      	beq.n	8005464 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a2a      	ldr	r2, [pc, #168]	@ (80054e8 <HAL_ADC_IRQHandler+0x464>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d004      	beq.n	800544c <HAL_ADC_IRQHandler+0x3c8>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a29      	ldr	r2, [pc, #164]	@ (80054ec <HAL_ADC_IRQHandler+0x468>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d101      	bne.n	8005450 <HAL_ADC_IRQHandler+0x3cc>
 800544c:	4b28      	ldr	r3, [pc, #160]	@ (80054f0 <HAL_ADC_IRQHandler+0x46c>)
 800544e:	e000      	b.n	8005452 <HAL_ADC_IRQHandler+0x3ce>
 8005450:	4b28      	ldr	r3, [pc, #160]	@ (80054f4 <HAL_ADC_IRQHandler+0x470>)
 8005452:	4618      	mov	r0, r3
 8005454:	f7ff f9c4 	bl	80047e0 <LL_ADC_GetMultiDMATransfer>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00b      	beq.n	8005476 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800545e:	2301      	movs	r3, #1
 8005460:	627b      	str	r3, [r7, #36]	@ 0x24
 8005462:	e008      	b.n	8005476 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	f003 0303 	and.w	r3, r3, #3
 800546e:	2b00      	cmp	r3, #0
 8005470:	d001      	beq.n	8005476 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8005472:	2301      	movs	r3, #1
 8005474:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8005476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005478:	2b01      	cmp	r3, #1
 800547a:	d10e      	bne.n	800549a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005480:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800548c:	f043 0202 	orr.w	r2, r3, #2
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	665a      	str	r2, [r3, #100]	@ 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f7fc fb6d 	bl	8001b74 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2210      	movs	r2, #16
 80054a0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d018      	beq.n	80054de <HAL_ADC_IRQHandler+0x45a>
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d013      	beq.n	80054de <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054ba:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054c6:	f043 0208 	orr.w	r2, r3, #8
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80054d6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f001 fcd5 	bl	8006e88 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80054de:	bf00      	nop
 80054e0:	3728      	adds	r7, #40	@ 0x28
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	40022000 	.word	0x40022000
 80054ec:	40022100 	.word	0x40022100
 80054f0:	40022300 	.word	0x40022300
 80054f4:	58026300 	.word	0x58026300

080054f8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005520:	b590      	push	{r4, r7, lr}
 8005522:	b0b9      	sub	sp, #228	@ 0xe4
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800552a:	2300      	movs	r3, #0
 800552c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005530:	2300      	movs	r3, #0
 8005532:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800553a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	4aa9      	ldr	r2, [pc, #676]	@ (80057e8 <HAL_ADC_ConfigChannel+0x2c8>)
 8005542:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800554a:	2b01      	cmp	r3, #1
 800554c:	d102      	bne.n	8005554 <HAL_ADC_ConfigChannel+0x34>
 800554e:	2302      	movs	r3, #2
 8005550:	f000 bcfa 	b.w	8005f48 <HAL_ADC_ConfigChannel+0xa28>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4618      	mov	r0, r3
 8005562:	f7ff f9fb 	bl	800495c <LL_ADC_REG_IsConversionOngoing>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	f040 84de 	bne.w	8005f2a <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a9e      	ldr	r2, [pc, #632]	@ (80057ec <HAL_ADC_ConfigChannel+0x2cc>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d033      	beq.n	80055e0 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005580:	2b00      	cmp	r3, #0
 8005582:	d108      	bne.n	8005596 <HAL_ADC_ConfigChannel+0x76>
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	0e9b      	lsrs	r3, r3, #26
 800558a:	f003 031f 	and.w	r3, r3, #31
 800558e:	2201      	movs	r2, #1
 8005590:	fa02 f303 	lsl.w	r3, r2, r3
 8005594:	e01d      	b.n	80055d2 <HAL_ADC_ConfigChannel+0xb2>
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800559e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80055a2:	fa93 f3a3 	rbit	r3, r3
 80055a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80055aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80055ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80055b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d101      	bne.n	80055be <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 80055ba:	2320      	movs	r3, #32
 80055bc:	e004      	b.n	80055c8 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 80055be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80055c2:	fab3 f383 	clz	r3, r3
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	f003 031f 	and.w	r3, r3, #31
 80055cc:	2201      	movs	r2, #1
 80055ce:	fa02 f303 	lsl.w	r3, r2, r3
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	6812      	ldr	r2, [r2, #0]
 80055d6:	69d1      	ldr	r1, [r2, #28]
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	6812      	ldr	r2, [r2, #0]
 80055dc:	430b      	orrs	r3, r1
 80055de:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6818      	ldr	r0, [r3, #0]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	6859      	ldr	r1, [r3, #4]
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	461a      	mov	r2, r3
 80055ee:	f7fe ff76 	bl	80044de <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f7ff f9b0 	bl	800495c <LL_ADC_REG_IsConversionOngoing>
 80055fc:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4618      	mov	r0, r3
 8005606:	f7ff f9bc 	bl	8004982 <LL_ADC_INJ_IsConversionOngoing>
 800560a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800560e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005612:	2b00      	cmp	r3, #0
 8005614:	f040 8270 	bne.w	8005af8 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005618:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800561c:	2b00      	cmp	r3, #0
 800561e:	f040 826b 	bne.w	8005af8 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6818      	ldr	r0, [r3, #0]
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	6819      	ldr	r1, [r3, #0]
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	461a      	mov	r2, r3
 8005630:	f7fe ffd1 	bl	80045d6 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a6c      	ldr	r2, [pc, #432]	@ (80057ec <HAL_ADC_ConfigChannel+0x2cc>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d10d      	bne.n	800565a <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	695a      	ldr	r2, [r3, #20]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	08db      	lsrs	r3, r3, #3
 800564a:	f003 0303 	and.w	r3, r3, #3
 800564e:	005b      	lsls	r3, r3, #1
 8005650:	fa02 f303 	lsl.w	r3, r2, r3
 8005654:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005658:	e032      	b.n	80056c0 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800565a:	4b65      	ldr	r3, [pc, #404]	@ (80057f0 <HAL_ADC_ConfigChannel+0x2d0>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005662:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005666:	d10b      	bne.n	8005680 <HAL_ADC_ConfigChannel+0x160>
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	695a      	ldr	r2, [r3, #20]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	089b      	lsrs	r3, r3, #2
 8005674:	f003 0307 	and.w	r3, r3, #7
 8005678:	005b      	lsls	r3, r3, #1
 800567a:	fa02 f303 	lsl.w	r3, r2, r3
 800567e:	e01d      	b.n	80056bc <HAL_ADC_ConfigChannel+0x19c>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	f003 0310 	and.w	r3, r3, #16
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10b      	bne.n	80056a6 <HAL_ADC_ConfigChannel+0x186>
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	695a      	ldr	r2, [r3, #20]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	089b      	lsrs	r3, r3, #2
 800569a:	f003 0307 	and.w	r3, r3, #7
 800569e:	005b      	lsls	r3, r3, #1
 80056a0:	fa02 f303 	lsl.w	r3, r2, r3
 80056a4:	e00a      	b.n	80056bc <HAL_ADC_ConfigChannel+0x19c>
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	695a      	ldr	r2, [r3, #20]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	089b      	lsrs	r3, r3, #2
 80056b2:	f003 0304 	and.w	r3, r3, #4
 80056b6:	005b      	lsls	r3, r3, #1
 80056b8:	fa02 f303 	lsl.w	r3, r2, r3
 80056bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	2b04      	cmp	r3, #4
 80056c6:	d048      	beq.n	800575a <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6818      	ldr	r0, [r3, #0]
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	6919      	ldr	r1, [r3, #16]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80056d8:	f7fe fdfc 	bl	80042d4 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a42      	ldr	r2, [pc, #264]	@ (80057ec <HAL_ADC_ConfigChannel+0x2cc>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d119      	bne.n	800571a <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6818      	ldr	r0, [r3, #0]
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	6919      	ldr	r1, [r3, #16]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	461a      	mov	r2, r3
 80056f4:	f7fe fe94 	bl	8004420 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6818      	ldr	r0, [r3, #0]
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	6919      	ldr	r1, [r3, #16]
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005706:	2b01      	cmp	r3, #1
 8005708:	d102      	bne.n	8005710 <HAL_ADC_ConfigChannel+0x1f0>
 800570a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800570e:	e000      	b.n	8005712 <HAL_ADC_ConfigChannel+0x1f2>
 8005710:	2300      	movs	r3, #0
 8005712:	461a      	mov	r2, r3
 8005714:	f7fe fe62 	bl	80043dc <LL_ADC_SetOffsetSaturation>
 8005718:	e1ee      	b.n	8005af8 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6818      	ldr	r0, [r3, #0]
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	6919      	ldr	r1, [r3, #16]
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005728:	2b01      	cmp	r3, #1
 800572a:	d102      	bne.n	8005732 <HAL_ADC_ConfigChannel+0x212>
 800572c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005730:	e000      	b.n	8005734 <HAL_ADC_ConfigChannel+0x214>
 8005732:	2300      	movs	r3, #0
 8005734:	461a      	mov	r2, r3
 8005736:	f7fe fe2f 	bl	8004398 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6818      	ldr	r0, [r3, #0]
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	6919      	ldr	r1, [r3, #16]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	7e1b      	ldrb	r3, [r3, #24]
 8005746:	2b01      	cmp	r3, #1
 8005748:	d102      	bne.n	8005750 <HAL_ADC_ConfigChannel+0x230>
 800574a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800574e:	e000      	b.n	8005752 <HAL_ADC_ConfigChannel+0x232>
 8005750:	2300      	movs	r3, #0
 8005752:	461a      	mov	r2, r3
 8005754:	f7fe fe06 	bl	8004364 <LL_ADC_SetDataRightShift>
 8005758:	e1ce      	b.n	8005af8 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a23      	ldr	r2, [pc, #140]	@ (80057ec <HAL_ADC_ConfigChannel+0x2cc>)
 8005760:	4293      	cmp	r3, r2
 8005762:	f040 8181 	bne.w	8005a68 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2100      	movs	r1, #0
 800576c:	4618      	mov	r0, r3
 800576e:	f7fe fde3 	bl	8004338 <LL_ADC_GetOffsetChannel>
 8005772:	4603      	mov	r3, r0
 8005774:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005778:	2b00      	cmp	r3, #0
 800577a:	d10a      	bne.n	8005792 <HAL_ADC_ConfigChannel+0x272>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2100      	movs	r1, #0
 8005782:	4618      	mov	r0, r3
 8005784:	f7fe fdd8 	bl	8004338 <LL_ADC_GetOffsetChannel>
 8005788:	4603      	mov	r3, r0
 800578a:	0e9b      	lsrs	r3, r3, #26
 800578c:	f003 021f 	and.w	r2, r3, #31
 8005790:	e01e      	b.n	80057d0 <HAL_ADC_ConfigChannel+0x2b0>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2100      	movs	r1, #0
 8005798:	4618      	mov	r0, r3
 800579a:	f7fe fdcd 	bl	8004338 <LL_ADC_GetOffsetChannel>
 800579e:	4603      	mov	r3, r0
 80057a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80057a8:	fa93 f3a3 	rbit	r3, r3
 80057ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 80057b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80057b4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 80057b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d101      	bne.n	80057c4 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 80057c0:	2320      	movs	r3, #32
 80057c2:	e004      	b.n	80057ce <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 80057c4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80057c8:	fab3 f383 	clz	r3, r3
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	461a      	mov	r2, r3
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d10b      	bne.n	80057f4 <HAL_ADC_ConfigChannel+0x2d4>
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	0e9b      	lsrs	r3, r3, #26
 80057e2:	f003 031f 	and.w	r3, r3, #31
 80057e6:	e01e      	b.n	8005826 <HAL_ADC_ConfigChannel+0x306>
 80057e8:	47ff0000 	.word	0x47ff0000
 80057ec:	58026000 	.word	0x58026000
 80057f0:	5c001000 	.word	0x5c001000
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005800:	fa93 f3a3 	rbit	r3, r3
 8005804:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8005808:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800580c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8005810:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d101      	bne.n	800581c <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8005818:	2320      	movs	r3, #32
 800581a:	e004      	b.n	8005826 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 800581c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005820:	fab3 f383 	clz	r3, r3
 8005824:	b2db      	uxtb	r3, r3
 8005826:	429a      	cmp	r2, r3
 8005828:	d106      	bne.n	8005838 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2200      	movs	r2, #0
 8005830:	2100      	movs	r1, #0
 8005832:	4618      	mov	r0, r3
 8005834:	f7fe fe16 	bl	8004464 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2101      	movs	r1, #1
 800583e:	4618      	mov	r0, r3
 8005840:	f7fe fd7a 	bl	8004338 <LL_ADC_GetOffsetChannel>
 8005844:	4603      	mov	r3, r0
 8005846:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800584a:	2b00      	cmp	r3, #0
 800584c:	d10a      	bne.n	8005864 <HAL_ADC_ConfigChannel+0x344>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2101      	movs	r1, #1
 8005854:	4618      	mov	r0, r3
 8005856:	f7fe fd6f 	bl	8004338 <LL_ADC_GetOffsetChannel>
 800585a:	4603      	mov	r3, r0
 800585c:	0e9b      	lsrs	r3, r3, #26
 800585e:	f003 021f 	and.w	r2, r3, #31
 8005862:	e01e      	b.n	80058a2 <HAL_ADC_ConfigChannel+0x382>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	2101      	movs	r1, #1
 800586a:	4618      	mov	r0, r3
 800586c:	f7fe fd64 	bl	8004338 <LL_ADC_GetOffsetChannel>
 8005870:	4603      	mov	r3, r0
 8005872:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005876:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800587a:	fa93 f3a3 	rbit	r3, r3
 800587e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8005882:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005886:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800588a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8005892:	2320      	movs	r3, #32
 8005894:	e004      	b.n	80058a0 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8005896:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800589a:	fab3 f383 	clz	r3, r3
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	461a      	mov	r2, r3
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d105      	bne.n	80058ba <HAL_ADC_ConfigChannel+0x39a>
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	0e9b      	lsrs	r3, r3, #26
 80058b4:	f003 031f 	and.w	r3, r3, #31
 80058b8:	e018      	b.n	80058ec <HAL_ADC_ConfigChannel+0x3cc>
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80058c6:	fa93 f3a3 	rbit	r3, r3
 80058ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80058ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80058d2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80058d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d101      	bne.n	80058e2 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 80058de:	2320      	movs	r3, #32
 80058e0:	e004      	b.n	80058ec <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 80058e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80058e6:	fab3 f383 	clz	r3, r3
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d106      	bne.n	80058fe <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2200      	movs	r2, #0
 80058f6:	2101      	movs	r1, #1
 80058f8:	4618      	mov	r0, r3
 80058fa:	f7fe fdb3 	bl	8004464 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2102      	movs	r1, #2
 8005904:	4618      	mov	r0, r3
 8005906:	f7fe fd17 	bl	8004338 <LL_ADC_GetOffsetChannel>
 800590a:	4603      	mov	r3, r0
 800590c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10a      	bne.n	800592a <HAL_ADC_ConfigChannel+0x40a>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2102      	movs	r1, #2
 800591a:	4618      	mov	r0, r3
 800591c:	f7fe fd0c 	bl	8004338 <LL_ADC_GetOffsetChannel>
 8005920:	4603      	mov	r3, r0
 8005922:	0e9b      	lsrs	r3, r3, #26
 8005924:	f003 021f 	and.w	r2, r3, #31
 8005928:	e01e      	b.n	8005968 <HAL_ADC_ConfigChannel+0x448>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2102      	movs	r1, #2
 8005930:	4618      	mov	r0, r3
 8005932:	f7fe fd01 	bl	8004338 <LL_ADC_GetOffsetChannel>
 8005936:	4603      	mov	r3, r0
 8005938:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800593c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005940:	fa93 f3a3 	rbit	r3, r3
 8005944:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8005948:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800594c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8005950:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005954:	2b00      	cmp	r3, #0
 8005956:	d101      	bne.n	800595c <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8005958:	2320      	movs	r3, #32
 800595a:	e004      	b.n	8005966 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 800595c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005960:	fab3 f383 	clz	r3, r3
 8005964:	b2db      	uxtb	r3, r3
 8005966:	461a      	mov	r2, r3
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005970:	2b00      	cmp	r3, #0
 8005972:	d105      	bne.n	8005980 <HAL_ADC_ConfigChannel+0x460>
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	0e9b      	lsrs	r3, r3, #26
 800597a:	f003 031f 	and.w	r3, r3, #31
 800597e:	e014      	b.n	80059aa <HAL_ADC_ConfigChannel+0x48a>
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005986:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005988:	fa93 f3a3 	rbit	r3, r3
 800598c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800598e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005990:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8005994:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005998:	2b00      	cmp	r3, #0
 800599a:	d101      	bne.n	80059a0 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 800599c:	2320      	movs	r3, #32
 800599e:	e004      	b.n	80059aa <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 80059a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80059a4:	fab3 f383 	clz	r3, r3
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d106      	bne.n	80059bc <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2200      	movs	r2, #0
 80059b4:	2102      	movs	r1, #2
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fe fd54 	bl	8004464 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2103      	movs	r1, #3
 80059c2:	4618      	mov	r0, r3
 80059c4:	f7fe fcb8 	bl	8004338 <LL_ADC_GetOffsetChannel>
 80059c8:	4603      	mov	r3, r0
 80059ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d10a      	bne.n	80059e8 <HAL_ADC_ConfigChannel+0x4c8>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2103      	movs	r1, #3
 80059d8:	4618      	mov	r0, r3
 80059da:	f7fe fcad 	bl	8004338 <LL_ADC_GetOffsetChannel>
 80059de:	4603      	mov	r3, r0
 80059e0:	0e9b      	lsrs	r3, r3, #26
 80059e2:	f003 021f 	and.w	r2, r3, #31
 80059e6:	e017      	b.n	8005a18 <HAL_ADC_ConfigChannel+0x4f8>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2103      	movs	r1, #3
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7fe fca2 	bl	8004338 <LL_ADC_GetOffsetChannel>
 80059f4:	4603      	mov	r3, r0
 80059f6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80059fa:	fa93 f3a3 	rbit	r3, r3
 80059fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8005a00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a02:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8005a04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d101      	bne.n	8005a0e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8005a0a:	2320      	movs	r3, #32
 8005a0c:	e003      	b.n	8005a16 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8005a0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a10:	fab3 f383 	clz	r3, r3
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	461a      	mov	r2, r3
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d105      	bne.n	8005a30 <HAL_ADC_ConfigChannel+0x510>
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	0e9b      	lsrs	r3, r3, #26
 8005a2a:	f003 031f 	and.w	r3, r3, #31
 8005a2e:	e011      	b.n	8005a54 <HAL_ADC_ConfigChannel+0x534>
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a38:	fa93 f3a3 	rbit	r3, r3
 8005a3c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8005a3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005a40:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8005a42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d101      	bne.n	8005a4c <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8005a48:	2320      	movs	r3, #32
 8005a4a:	e003      	b.n	8005a54 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8005a4c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a4e:	fab3 f383 	clz	r3, r3
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d14f      	bne.n	8005af8 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	2103      	movs	r1, #3
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7fe fcff 	bl	8004464 <LL_ADC_SetOffsetState>
 8005a66:	e047      	b.n	8005af8 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a6e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	069b      	lsls	r3, r3, #26
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d107      	bne.n	8005a8c <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005a8a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a92:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	069b      	lsls	r3, r3, #26
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d107      	bne.n	8005ab0 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005aae:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ab6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	069b      	lsls	r3, r3, #26
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d107      	bne.n	8005ad4 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005ad2:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ada:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	069b      	lsls	r3, r3, #26
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d107      	bne.n	8005af8 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005af6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4618      	mov	r0, r3
 8005afe:	f7fe fef3 	bl	80048e8 <LL_ADC_IsEnabled>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f040 8219 	bne.w	8005f3c <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6818      	ldr	r0, [r3, #0]
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	6819      	ldr	r1, [r3, #0]
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	461a      	mov	r2, r3
 8005b18:	f7fe fd88 	bl	800462c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	4aa1      	ldr	r2, [pc, #644]	@ (8005da8 <HAL_ADC_ConfigChannel+0x888>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	f040 812e 	bne.w	8005d84 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10b      	bne.n	8005b50 <HAL_ADC_ConfigChannel+0x630>
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	0e9b      	lsrs	r3, r3, #26
 8005b3e:	3301      	adds	r3, #1
 8005b40:	f003 031f 	and.w	r3, r3, #31
 8005b44:	2b09      	cmp	r3, #9
 8005b46:	bf94      	ite	ls
 8005b48:	2301      	movls	r3, #1
 8005b4a:	2300      	movhi	r3, #0
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	e019      	b.n	8005b84 <HAL_ADC_ConfigChannel+0x664>
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005b58:	fa93 f3a3 	rbit	r3, r3
 8005b5c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8005b5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b60:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8005b62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d101      	bne.n	8005b6c <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8005b68:	2320      	movs	r3, #32
 8005b6a:	e003      	b.n	8005b74 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8005b6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b6e:	fab3 f383 	clz	r3, r3
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	3301      	adds	r3, #1
 8005b76:	f003 031f 	and.w	r3, r3, #31
 8005b7a:	2b09      	cmp	r3, #9
 8005b7c:	bf94      	ite	ls
 8005b7e:	2301      	movls	r3, #1
 8005b80:	2300      	movhi	r3, #0
 8005b82:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d079      	beq.n	8005c7c <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d107      	bne.n	8005ba4 <HAL_ADC_ConfigChannel+0x684>
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	0e9b      	lsrs	r3, r3, #26
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	069b      	lsls	r3, r3, #26
 8005b9e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005ba2:	e015      	b.n	8005bd0 <HAL_ADC_ConfigChannel+0x6b0>
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005baa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bac:	fa93 f3a3 	rbit	r3, r3
 8005bb0:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8005bb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bb4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8005bb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d101      	bne.n	8005bc0 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8005bbc:	2320      	movs	r3, #32
 8005bbe:	e003      	b.n	8005bc8 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8005bc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005bc2:	fab3 f383 	clz	r3, r3
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	3301      	adds	r3, #1
 8005bca:	069b      	lsls	r3, r3, #26
 8005bcc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d109      	bne.n	8005bf0 <HAL_ADC_ConfigChannel+0x6d0>
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	0e9b      	lsrs	r3, r3, #26
 8005be2:	3301      	adds	r3, #1
 8005be4:	f003 031f 	and.w	r3, r3, #31
 8005be8:	2101      	movs	r1, #1
 8005bea:	fa01 f303 	lsl.w	r3, r1, r3
 8005bee:	e017      	b.n	8005c20 <HAL_ADC_ConfigChannel+0x700>
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bf8:	fa93 f3a3 	rbit	r3, r3
 8005bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8005bfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c00:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8005c02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d101      	bne.n	8005c0c <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8005c08:	2320      	movs	r3, #32
 8005c0a:	e003      	b.n	8005c14 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8005c0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c0e:	fab3 f383 	clz	r3, r3
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	3301      	adds	r3, #1
 8005c16:	f003 031f 	and.w	r3, r3, #31
 8005c1a:	2101      	movs	r1, #1
 8005c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c20:	ea42 0103 	orr.w	r1, r2, r3
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d10a      	bne.n	8005c46 <HAL_ADC_ConfigChannel+0x726>
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	0e9b      	lsrs	r3, r3, #26
 8005c36:	3301      	adds	r3, #1
 8005c38:	f003 021f 	and.w	r2, r3, #31
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	005b      	lsls	r3, r3, #1
 8005c40:	4413      	add	r3, r2
 8005c42:	051b      	lsls	r3, r3, #20
 8005c44:	e018      	b.n	8005c78 <HAL_ADC_ConfigChannel+0x758>
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c4e:	fa93 f3a3 	rbit	r3, r3
 8005c52:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8005c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c56:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8005c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8005c5e:	2320      	movs	r3, #32
 8005c60:	e003      	b.n	8005c6a <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8005c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c64:	fab3 f383 	clz	r3, r3
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	f003 021f 	and.w	r2, r3, #31
 8005c70:	4613      	mov	r3, r2
 8005c72:	005b      	lsls	r3, r3, #1
 8005c74:	4413      	add	r3, r2
 8005c76:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005c78:	430b      	orrs	r3, r1
 8005c7a:	e07e      	b.n	8005d7a <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d107      	bne.n	8005c98 <HAL_ADC_ConfigChannel+0x778>
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	0e9b      	lsrs	r3, r3, #26
 8005c8e:	3301      	adds	r3, #1
 8005c90:	069b      	lsls	r3, r3, #26
 8005c92:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005c96:	e015      	b.n	8005cc4 <HAL_ADC_ConfigChannel+0x7a4>
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca0:	fa93 f3a3 	rbit	r3, r3
 8005ca4:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8005caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d101      	bne.n	8005cb4 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8005cb0:	2320      	movs	r3, #32
 8005cb2:	e003      	b.n	8005cbc <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8005cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cb6:	fab3 f383 	clz	r3, r3
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	069b      	lsls	r3, r3, #26
 8005cc0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d109      	bne.n	8005ce4 <HAL_ADC_ConfigChannel+0x7c4>
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	0e9b      	lsrs	r3, r3, #26
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	f003 031f 	and.w	r3, r3, #31
 8005cdc:	2101      	movs	r1, #1
 8005cde:	fa01 f303 	lsl.w	r3, r1, r3
 8005ce2:	e017      	b.n	8005d14 <HAL_ADC_ConfigChannel+0x7f4>
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	fa93 f3a3 	rbit	r3, r3
 8005cf0:	61bb      	str	r3, [r7, #24]
  return result;
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005cf6:	6a3b      	ldr	r3, [r7, #32]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d101      	bne.n	8005d00 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8005cfc:	2320      	movs	r3, #32
 8005cfe:	e003      	b.n	8005d08 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8005d00:	6a3b      	ldr	r3, [r7, #32]
 8005d02:	fab3 f383 	clz	r3, r3
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	3301      	adds	r3, #1
 8005d0a:	f003 031f 	and.w	r3, r3, #31
 8005d0e:	2101      	movs	r1, #1
 8005d10:	fa01 f303 	lsl.w	r3, r1, r3
 8005d14:	ea42 0103 	orr.w	r1, r2, r3
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d10d      	bne.n	8005d40 <HAL_ADC_ConfigChannel+0x820>
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	0e9b      	lsrs	r3, r3, #26
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	f003 021f 	and.w	r2, r3, #31
 8005d30:	4613      	mov	r3, r2
 8005d32:	005b      	lsls	r3, r3, #1
 8005d34:	4413      	add	r3, r2
 8005d36:	3b1e      	subs	r3, #30
 8005d38:	051b      	lsls	r3, r3, #20
 8005d3a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005d3e:	e01b      	b.n	8005d78 <HAL_ADC_ConfigChannel+0x858>
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	fa93 f3a3 	rbit	r3, r3
 8005d4c:	60fb      	str	r3, [r7, #12]
  return result;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d101      	bne.n	8005d5c <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8005d58:	2320      	movs	r3, #32
 8005d5a:	e003      	b.n	8005d64 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	fab3 f383 	clz	r3, r3
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	3301      	adds	r3, #1
 8005d66:	f003 021f 	and.w	r2, r3, #31
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	005b      	lsls	r3, r3, #1
 8005d6e:	4413      	add	r3, r2
 8005d70:	3b1e      	subs	r3, #30
 8005d72:	051b      	lsls	r3, r3, #20
 8005d74:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d78:	430b      	orrs	r3, r1
 8005d7a:	683a      	ldr	r2, [r7, #0]
 8005d7c:	6892      	ldr	r2, [r2, #8]
 8005d7e:	4619      	mov	r1, r3
 8005d80:	f7fe fc29 	bl	80045d6 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f280 80d7 	bge.w	8005f3c <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a06      	ldr	r2, [pc, #24]	@ (8005dac <HAL_ADC_ConfigChannel+0x88c>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d004      	beq.n	8005da2 <HAL_ADC_ConfigChannel+0x882>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a04      	ldr	r2, [pc, #16]	@ (8005db0 <HAL_ADC_ConfigChannel+0x890>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d10a      	bne.n	8005db8 <HAL_ADC_ConfigChannel+0x898>
 8005da2:	4b04      	ldr	r3, [pc, #16]	@ (8005db4 <HAL_ADC_ConfigChannel+0x894>)
 8005da4:	e009      	b.n	8005dba <HAL_ADC_ConfigChannel+0x89a>
 8005da6:	bf00      	nop
 8005da8:	47ff0000 	.word	0x47ff0000
 8005dac:	40022000 	.word	0x40022000
 8005db0:	40022100 	.word	0x40022100
 8005db4:	40022300 	.word	0x40022300
 8005db8:	4b65      	ldr	r3, [pc, #404]	@ (8005f50 <HAL_ADC_ConfigChannel+0xa30>)
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7fe fa7c 	bl	80042b8 <LL_ADC_GetCommonPathInternalCh>
 8005dc0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a62      	ldr	r2, [pc, #392]	@ (8005f54 <HAL_ADC_ConfigChannel+0xa34>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d004      	beq.n	8005dd8 <HAL_ADC_ConfigChannel+0x8b8>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a61      	ldr	r2, [pc, #388]	@ (8005f58 <HAL_ADC_ConfigChannel+0xa38>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d10e      	bne.n	8005df6 <HAL_ADC_ConfigChannel+0x8d6>
 8005dd8:	485e      	ldr	r0, [pc, #376]	@ (8005f54 <HAL_ADC_ConfigChannel+0xa34>)
 8005dda:	f7fe fd85 	bl	80048e8 <LL_ADC_IsEnabled>
 8005dde:	4604      	mov	r4, r0
 8005de0:	485d      	ldr	r0, [pc, #372]	@ (8005f58 <HAL_ADC_ConfigChannel+0xa38>)
 8005de2:	f7fe fd81 	bl	80048e8 <LL_ADC_IsEnabled>
 8005de6:	4603      	mov	r3, r0
 8005de8:	4323      	orrs	r3, r4
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	bf0c      	ite	eq
 8005dee:	2301      	moveq	r3, #1
 8005df0:	2300      	movne	r3, #0
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	e008      	b.n	8005e08 <HAL_ADC_ConfigChannel+0x8e8>
 8005df6:	4859      	ldr	r0, [pc, #356]	@ (8005f5c <HAL_ADC_ConfigChannel+0xa3c>)
 8005df8:	f7fe fd76 	bl	80048e8 <LL_ADC_IsEnabled>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	bf0c      	ite	eq
 8005e02:	2301      	moveq	r3, #1
 8005e04:	2300      	movne	r3, #0
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	f000 8084 	beq.w	8005f16 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a53      	ldr	r2, [pc, #332]	@ (8005f60 <HAL_ADC_ConfigChannel+0xa40>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d132      	bne.n	8005e7e <HAL_ADC_ConfigChannel+0x95e>
 8005e18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d12c      	bne.n	8005e7e <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a4c      	ldr	r2, [pc, #304]	@ (8005f5c <HAL_ADC_ConfigChannel+0xa3c>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	f040 8086 	bne.w	8005f3c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a47      	ldr	r2, [pc, #284]	@ (8005f54 <HAL_ADC_ConfigChannel+0xa34>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d004      	beq.n	8005e44 <HAL_ADC_ConfigChannel+0x924>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a46      	ldr	r2, [pc, #280]	@ (8005f58 <HAL_ADC_ConfigChannel+0xa38>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d101      	bne.n	8005e48 <HAL_ADC_ConfigChannel+0x928>
 8005e44:	4a47      	ldr	r2, [pc, #284]	@ (8005f64 <HAL_ADC_ConfigChannel+0xa44>)
 8005e46:	e000      	b.n	8005e4a <HAL_ADC_ConfigChannel+0x92a>
 8005e48:	4a41      	ldr	r2, [pc, #260]	@ (8005f50 <HAL_ADC_ConfigChannel+0xa30>)
 8005e4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e4e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005e52:	4619      	mov	r1, r3
 8005e54:	4610      	mov	r0, r2
 8005e56:	f7fe fa1c 	bl	8004292 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005e5a:	4b43      	ldr	r3, [pc, #268]	@ (8005f68 <HAL_ADC_ConfigChannel+0xa48>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	099b      	lsrs	r3, r3, #6
 8005e60:	4a42      	ldr	r2, [pc, #264]	@ (8005f6c <HAL_ADC_ConfigChannel+0xa4c>)
 8005e62:	fba2 2303 	umull	r2, r3, r2, r3
 8005e66:	099b      	lsrs	r3, r3, #6
 8005e68:	3301      	adds	r3, #1
 8005e6a:	005b      	lsls	r3, r3, #1
 8005e6c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005e6e:	e002      	b.n	8005e76 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	3b01      	subs	r3, #1
 8005e74:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d1f9      	bne.n	8005e70 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005e7c:	e05e      	b.n	8005f3c <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a3b      	ldr	r2, [pc, #236]	@ (8005f70 <HAL_ADC_ConfigChannel+0xa50>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d120      	bne.n	8005eca <HAL_ADC_ConfigChannel+0x9aa>
 8005e88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d11a      	bne.n	8005eca <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a30      	ldr	r2, [pc, #192]	@ (8005f5c <HAL_ADC_ConfigChannel+0xa3c>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d14e      	bne.n	8005f3c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a2c      	ldr	r2, [pc, #176]	@ (8005f54 <HAL_ADC_ConfigChannel+0xa34>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d004      	beq.n	8005eb2 <HAL_ADC_ConfigChannel+0x992>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a2a      	ldr	r2, [pc, #168]	@ (8005f58 <HAL_ADC_ConfigChannel+0xa38>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d101      	bne.n	8005eb6 <HAL_ADC_ConfigChannel+0x996>
 8005eb2:	4a2c      	ldr	r2, [pc, #176]	@ (8005f64 <HAL_ADC_ConfigChannel+0xa44>)
 8005eb4:	e000      	b.n	8005eb8 <HAL_ADC_ConfigChannel+0x998>
 8005eb6:	4a26      	ldr	r2, [pc, #152]	@ (8005f50 <HAL_ADC_ConfigChannel+0xa30>)
 8005eb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005ebc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	4610      	mov	r0, r2
 8005ec4:	f7fe f9e5 	bl	8004292 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005ec8:	e038      	b.n	8005f3c <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a29      	ldr	r2, [pc, #164]	@ (8005f74 <HAL_ADC_ConfigChannel+0xa54>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d133      	bne.n	8005f3c <HAL_ADC_ConfigChannel+0xa1c>
 8005ed4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005ed8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d12d      	bne.n	8005f3c <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a1d      	ldr	r2, [pc, #116]	@ (8005f5c <HAL_ADC_ConfigChannel+0xa3c>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d128      	bne.n	8005f3c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a19      	ldr	r2, [pc, #100]	@ (8005f54 <HAL_ADC_ConfigChannel+0xa34>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d004      	beq.n	8005efe <HAL_ADC_ConfigChannel+0x9de>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a17      	ldr	r2, [pc, #92]	@ (8005f58 <HAL_ADC_ConfigChannel+0xa38>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d101      	bne.n	8005f02 <HAL_ADC_ConfigChannel+0x9e2>
 8005efe:	4a19      	ldr	r2, [pc, #100]	@ (8005f64 <HAL_ADC_ConfigChannel+0xa44>)
 8005f00:	e000      	b.n	8005f04 <HAL_ADC_ConfigChannel+0x9e4>
 8005f02:	4a13      	ldr	r2, [pc, #76]	@ (8005f50 <HAL_ADC_ConfigChannel+0xa30>)
 8005f04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f08:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	4610      	mov	r0, r2
 8005f10:	f7fe f9bf 	bl	8004292 <LL_ADC_SetCommonPathInternalCh>
 8005f14:	e012      	b.n	8005f3c <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f1a:	f043 0220 	orr.w	r2, r3, #32
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8005f28:	e008      	b.n	8005f3c <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f2e:	f043 0220 	orr.w	r2, r3, #32
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005f44:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	37e4      	adds	r7, #228	@ 0xe4
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd90      	pop	{r4, r7, pc}
 8005f50:	58026300 	.word	0x58026300
 8005f54:	40022000 	.word	0x40022000
 8005f58:	40022100 	.word	0x40022100
 8005f5c:	58026000 	.word	0x58026000
 8005f60:	c7520000 	.word	0xc7520000
 8005f64:	40022300 	.word	0x40022300
 8005f68:	24000038 	.word	0x24000038
 8005f6c:	053e2d63 	.word	0x053e2d63
 8005f70:	c3210000 	.word	0xc3210000
 8005f74:	cb840000 	.word	0xcb840000

08005f78 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b094      	sub	sp, #80	@ 0x50
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f82:	2300      	movs	r3, #0
 8005f84:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));

  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005f90:	d003      	beq.n	8005f9a <HAL_ADC_AnalogWDGConfig+0x22>
      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8005f96:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
  }

#if defined(ADC_VER_V5_V90)

  if (hadc->Instance == ADC3)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a8c      	ldr	r2, [pc, #560]	@ (80061d0 <HAL_ADC_AnalogWDGConfig+0x258>)
 8005fa0:	4293      	cmp	r3, r2
      assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
    }
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d101      	bne.n	8005fb0 <HAL_ADC_AnalogWDGConfig+0x38>
 8005fac:	2302      	movs	r3, #2
 8005fae:	e36b      	b.n	8006688 <HAL_ADC_AnalogWDGConfig+0x710>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  /*  - Analog watchdog thresholds                                            */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f7fe fccd 	bl	800495c <LL_ADC_REG_IsConversionOngoing>
 8005fc2:	6438      	str	r0, [r7, #64]	@ 0x40
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f7fe fcda 	bl	8004982 <LL_ADC_INJ_IsConversionOngoing>
 8005fce:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005fd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	f040 8349 	bne.w	800666a <HAL_ADC_AnalogWDGConfig+0x6f2>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005fd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f040 8345 	bne.w	800666a <HAL_ADC_AnalogWDGConfig+0x6f2>
     )
  {
    /* Analog watchdog configuration */
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a7b      	ldr	r2, [pc, #492]	@ (80061d4 <HAL_ADC_AnalogWDGConfig+0x25c>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	f040 8131 	bne.w	800624e <HAL_ADC_AnalogWDGConfig+0x2d6>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (AnalogWDGConfig->WatchdogMode)
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 8005ff4:	d034      	beq.n	8006060 <HAL_ADC_AnalogWDGConfig+0xe8>
 8005ff6:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 8005ffa:	d856      	bhi.n	80060aa <HAL_ADC_AnalogWDGConfig+0x132>
 8005ffc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006000:	d04b      	beq.n	800609a <HAL_ADC_AnalogWDGConfig+0x122>
 8006002:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006006:	d850      	bhi.n	80060aa <HAL_ADC_AnalogWDGConfig+0x132>
 8006008:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800600c:	d01b      	beq.n	8006046 <HAL_ADC_AnalogWDGConfig+0xce>
 800600e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006012:	d84a      	bhi.n	80060aa <HAL_ADC_AnalogWDGConfig+0x132>
 8006014:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006018:	d037      	beq.n	800608a <HAL_ADC_AnalogWDGConfig+0x112>
 800601a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800601e:	d844      	bhi.n	80060aa <HAL_ADC_AnalogWDGConfig+0x132>
 8006020:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006024:	d029      	beq.n	800607a <HAL_ADC_AnalogWDGConfig+0x102>
 8006026:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800602a:	d13e      	bne.n	80060aa <HAL_ADC_AnalogWDGConfig+0x132>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6818      	ldr	r0, [r3, #0]
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8006038:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 800603c:	461a      	mov	r2, r3
 800603e:	4965      	ldr	r1, [pc, #404]	@ (80061d4 <HAL_ADC_AnalogWDGConfig+0x25c>)
 8006040:	f7fe fb34 	bl	80046ac <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR));
          break;
 8006044:	e039      	b.n	80060ba <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6818      	ldr	r0, [r3, #0]
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8006052:	f043 73a0 	orr.w	r3, r3, #20971520	@ 0x1400000
 8006056:	461a      	mov	r2, r3
 8006058:	495e      	ldr	r1, [pc, #376]	@ (80061d4 <HAL_ADC_AnalogWDGConfig+0x25c>)
 800605a:	f7fe fb27 	bl	80046ac <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_INJECTED));
          break;
 800605e:	e02c      	b.n	80060ba <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6818      	ldr	r0, [r3, #0]
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 800606c:	f043 73e0 	orr.w	r3, r3, #29360128	@ 0x1c00000
 8006070:	461a      	mov	r2, r3
 8006072:	4958      	ldr	r1, [pc, #352]	@ (80061d4 <HAL_ADC_AnalogWDGConfig+0x25c>)
 8006074:	f7fe fb1a 	bl	80046ac <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 8006078:	e01f      	b.n	80060ba <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a56      	ldr	r2, [pc, #344]	@ (80061d8 <HAL_ADC_AnalogWDGConfig+0x260>)
 8006080:	4954      	ldr	r1, [pc, #336]	@ (80061d4 <HAL_ADC_AnalogWDGConfig+0x25c>)
 8006082:	4618      	mov	r0, r3
 8006084:	f7fe fb12 	bl	80046ac <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006088:	e017      	b.n	80060ba <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a53      	ldr	r2, [pc, #332]	@ (80061dc <HAL_ADC_AnalogWDGConfig+0x264>)
 8006090:	4950      	ldr	r1, [pc, #320]	@ (80061d4 <HAL_ADC_AnalogWDGConfig+0x25c>)
 8006092:	4618      	mov	r0, r3
 8006094:	f7fe fb0a 	bl	80046ac <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006098:	e00f      	b.n	80060ba <HAL_ADC_AnalogWDGConfig+0x142>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a50      	ldr	r2, [pc, #320]	@ (80061e0 <HAL_ADC_AnalogWDGConfig+0x268>)
 80060a0:	494c      	ldr	r1, [pc, #304]	@ (80061d4 <HAL_ADC_AnalogWDGConfig+0x25c>)
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7fe fb02 	bl	80046ac <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80060a8:	e007      	b.n	80060ba <HAL_ADC_AnalogWDGConfig+0x142>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2200      	movs	r2, #0
 80060b0:	4948      	ldr	r1, [pc, #288]	@ (80061d4 <HAL_ADC_AnalogWDGConfig+0x25c>)
 80060b2:	4618      	mov	r0, r3
 80060b4:	f7fe fafa 	bl	80046ac <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80060b8:	bf00      	nop
      }

      /* Shift the offset in function of the selected ADC resolution:         */
      /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
      /* are set to 0                                                         */
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80060ba:	4b4a      	ldr	r3, [pc, #296]	@ (80061e4 <HAL_ADC_AnalogWDGConfig+0x26c>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80060c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060c6:	d10b      	bne.n	80060e0 <HAL_ADC_AnalogWDGConfig+0x168>
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	691a      	ldr	r2, [r3, #16]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	089b      	lsrs	r3, r3, #2
 80060d4:	f003 0307 	and.w	r3, r3, #7
 80060d8:	005b      	lsls	r3, r3, #1
 80060da:	fa02 f303 	lsl.w	r3, r2, r3
 80060de:	e01d      	b.n	800611c <HAL_ADC_AnalogWDGConfig+0x1a4>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	f003 0310 	and.w	r3, r3, #16
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10b      	bne.n	8006106 <HAL_ADC_AnalogWDGConfig+0x18e>
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	691a      	ldr	r2, [r3, #16]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	089b      	lsrs	r3, r3, #2
 80060fa:	f003 0307 	and.w	r3, r3, #7
 80060fe:	005b      	lsls	r3, r3, #1
 8006100:	fa02 f303 	lsl.w	r3, r2, r3
 8006104:	e00a      	b.n	800611c <HAL_ADC_AnalogWDGConfig+0x1a4>
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	691a      	ldr	r2, [r3, #16]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	089b      	lsrs	r3, r3, #2
 8006112:	f003 0304 	and.w	r3, r3, #4
 8006116:	005b      	lsls	r3, r3, #1
 8006118:	fa02 f303 	lsl.w	r3, r2, r3
 800611c:	64bb      	str	r3, [r7, #72]	@ 0x48
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 800611e:	4b31      	ldr	r3, [pc, #196]	@ (80061e4 <HAL_ADC_AnalogWDGConfig+0x26c>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006126:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800612a:	d10b      	bne.n	8006144 <HAL_ADC_AnalogWDGConfig+0x1cc>
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	695a      	ldr	r2, [r3, #20]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	089b      	lsrs	r3, r3, #2
 8006138:	f003 0307 	and.w	r3, r3, #7
 800613c:	005b      	lsls	r3, r3, #1
 800613e:	fa02 f303 	lsl.w	r3, r2, r3
 8006142:	e01d      	b.n	8006180 <HAL_ADC_AnalogWDGConfig+0x208>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	f003 0310 	and.w	r3, r3, #16
 800614e:	2b00      	cmp	r3, #0
 8006150:	d10b      	bne.n	800616a <HAL_ADC_AnalogWDGConfig+0x1f2>
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	695a      	ldr	r2, [r3, #20]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	089b      	lsrs	r3, r3, #2
 800615e:	f003 0307 	and.w	r3, r3, #7
 8006162:	005b      	lsls	r3, r3, #1
 8006164:	fa02 f303 	lsl.w	r3, r2, r3
 8006168:	e00a      	b.n	8006180 <HAL_ADC_AnalogWDGConfig+0x208>
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	695a      	ldr	r2, [r3, #20]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	089b      	lsrs	r3, r3, #2
 8006176:	f003 0304 	and.w	r3, r3, #4
 800617a:	005b      	lsls	r3, r3, #1
 800617c:	fa02 f303 	lsl.w	r3, r2, r3
 8006180:	647b      	str	r3, [r7, #68]	@ 0x44

      /* Set the high and low thresholds */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a12      	ldr	r2, [pc, #72]	@ (80061d0 <HAL_ADC_AnalogWDGConfig+0x258>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d131      	bne.n	80061f0 <HAL_ADC_AnalogWDGConfig+0x278>
      {
        MODIFY_REG(hadc->Instance->LTR1_TR1,
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	699a      	ldr	r2, [r3, #24]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	430a      	orrs	r2, r1
 80061a0:	621a      	str	r2, [r3, #32]
                   ADC3_TR1_AWDFILT,
                   AnalogWDGConfig->FilteringConfig);
        MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC3_TR1_LT1, tmpAWDLowThresholdShifted);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	6a1a      	ldr	r2, [r3, #32]
 80061a8:	4b0f      	ldr	r3, [pc, #60]	@ (80061e8 <HAL_ADC_AnalogWDGConfig+0x270>)
 80061aa:	4013      	ands	r3, r2
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	6812      	ldr	r2, [r2, #0]
 80061b0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80061b2:	430b      	orrs	r3, r1
 80061b4:	6213      	str	r3, [r2, #32]
        MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC3_TR1_HT1, (tmpAWDHighThresholdShifted << ADC3_TR1_HT1_Pos));
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	6a1a      	ldr	r2, [r3, #32]
 80061bc:	4b0b      	ldr	r3, [pc, #44]	@ (80061ec <HAL_ADC_AnalogWDGConfig+0x274>)
 80061be:	4013      	ands	r3, r2
 80061c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061c2:	0411      	lsls	r1, r2, #16
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	6812      	ldr	r2, [r2, #0]
 80061c8:	430b      	orrs	r3, r1
 80061ca:	6213      	str	r3, [r2, #32]
 80061cc:	e024      	b.n	8006218 <HAL_ADC_AnalogWDGConfig+0x2a0>
 80061ce:	bf00      	nop
 80061d0:	58026000 	.word	0x58026000
 80061d4:	7dc00000 	.word	0x7dc00000
 80061d8:	008fffff 	.word	0x008fffff
 80061dc:	010fffff 	.word	0x010fffff
 80061e0:	018fffff 	.word	0x018fffff
 80061e4:	5c001000 	.word	0x5c001000
 80061e8:	fffff000 	.word	0xfffff000
 80061ec:	f000ffff 	.word	0xf000ffff
      }
      else
      {

        MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006200:	430a      	orrs	r2, r1
 8006202:	621a      	str	r2, [r3, #32]
        MODIFY_REG(hadc->Instance->HTR1_TR2,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800620a:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006214:	430a      	orrs	r2, r1
 8006216:	625a      	str	r2, [r3, #36]	@ 0x24
      MODIFY_REG(hadc->Instance->LTR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
      MODIFY_REG(hadc->Instance->HTR1,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
#endif

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800621c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4618      	mov	r0, r3
 800622a:	f7fe fbbd 	bl	80049a8 <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (AnalogWDGConfig->ITMode == ENABLE)
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	7b1b      	ldrb	r3, [r3, #12]
 8006232:	2b01      	cmp	r3, #1
 8006234:	d105      	bne.n	8006242 <HAL_ADC_AnalogWDGConfig+0x2ca>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4618      	mov	r0, r3
 800623c:	f7fe fbdd 	bl	80049fa <LL_ADC_EnableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006240:	e21c      	b.n	800667c <HAL_ADC_AnalogWDGConfig+0x704>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4618      	mov	r0, r3
 8006248:	f7fe fc07 	bl	8004a5a <LL_ADC_DisableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800624c:	e216      	b.n	800667c <HAL_ADC_AnalogWDGConfig+0x704>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (AnalogWDGConfig->WatchdogMode)
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 8006256:	d01f      	beq.n	8006298 <HAL_ADC_AnalogWDGConfig+0x320>
 8006258:	f1b3 7fe0 	cmp.w	r3, #29360128	@ 0x1c00000
 800625c:	f200 80f4 	bhi.w	8006448 <HAL_ADC_AnalogWDGConfig+0x4d0>
 8006260:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006264:	d07d      	beq.n	8006362 <HAL_ADC_AnalogWDGConfig+0x3ea>
 8006266:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800626a:	f200 80ed 	bhi.w	8006448 <HAL_ADC_AnalogWDGConfig+0x4d0>
 800626e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006272:	d011      	beq.n	8006298 <HAL_ADC_AnalogWDGConfig+0x320>
 8006274:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006278:	f200 80e6 	bhi.w	8006448 <HAL_ADC_AnalogWDGConfig+0x4d0>
 800627c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006280:	d06f      	beq.n	8006362 <HAL_ADC_AnalogWDGConfig+0x3ea>
 8006282:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006286:	f200 80df 	bhi.w	8006448 <HAL_ADC_AnalogWDGConfig+0x4d0>
 800628a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800628e:	d068      	beq.n	8006362 <HAL_ADC_AnalogWDGConfig+0x3ea>
 8006290:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006294:	f040 80d8 	bne.w	8006448 <HAL_ADC_AnalogWDGConfig+0x4d0>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a9c      	ldr	r2, [pc, #624]	@ (8006510 <HAL_ADC_AnalogWDGConfig+0x598>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d12f      	bne.n	8006302 <HAL_ADC_AnalogWDGConfig+0x38a>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d108      	bne.n	80062c0 <HAL_ADC_AnalogWDGConfig+0x348>
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	0e9b      	lsrs	r3, r3, #26
 80062b4:	f003 031f 	and.w	r3, r3, #31
 80062b8:	2201      	movs	r2, #1
 80062ba:	fa02 f303 	lsl.w	r3, r2, r3
 80062be:	e016      	b.n	80062ee <HAL_ADC_AnalogWDGConfig+0x376>
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062c8:	fa93 f3a3 	rbit	r3, r3
 80062cc:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80062ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80062d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d101      	bne.n	80062dc <HAL_ADC_AnalogWDGConfig+0x364>
    return 32U;
 80062d8:	2320      	movs	r3, #32
 80062da:	e003      	b.n	80062e4 <HAL_ADC_AnalogWDGConfig+0x36c>
  return __builtin_clz(value);
 80062dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062de:	fab3 f383 	clz	r3, r3
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	f003 031f 	and.w	r3, r3, #31
 80062e8:	2201      	movs	r2, #1
 80062ea:	fa02 f303 	lsl.w	r3, r2, r3
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	6812      	ldr	r2, [r2, #0]
 80062f2:	f8d2 10a0 	ldr.w	r1, [r2, #160]	@ 0xa0
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	6812      	ldr	r2, [r2, #0]
 80062fa:	430b      	orrs	r3, r1
 80062fc:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 8006300:	e0ab      	b.n	800645a <HAL_ADC_AnalogWDGConfig+0x4e2>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800630a:	2b00      	cmp	r3, #0
 800630c:	d108      	bne.n	8006320 <HAL_ADC_AnalogWDGConfig+0x3a8>
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	0e9b      	lsrs	r3, r3, #26
 8006314:	f003 031f 	and.w	r3, r3, #31
 8006318:	2201      	movs	r2, #1
 800631a:	fa02 f303 	lsl.w	r3, r2, r3
 800631e:	e016      	b.n	800634e <HAL_ADC_AnalogWDGConfig+0x3d6>
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006328:	fa93 f3a3 	rbit	r3, r3
 800632c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800632e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006330:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8006332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006334:	2b00      	cmp	r3, #0
 8006336:	d101      	bne.n	800633c <HAL_ADC_AnalogWDGConfig+0x3c4>
    return 32U;
 8006338:	2320      	movs	r3, #32
 800633a:	e003      	b.n	8006344 <HAL_ADC_AnalogWDGConfig+0x3cc>
  return __builtin_clz(value);
 800633c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800633e:	fab3 f383 	clz	r3, r3
 8006342:	b2db      	uxtb	r3, r3
 8006344:	f003 031f 	and.w	r3, r3, #31
 8006348:	2201      	movs	r2, #1
 800634a:	fa02 f303 	lsl.w	r3, r2, r3
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	6812      	ldr	r2, [r2, #0]
 8006352:	f8d2 10a4 	ldr.w	r1, [r2, #164]	@ 0xa4
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	6812      	ldr	r2, [r2, #0]
 800635a:	430b      	orrs	r3, r1
 800635c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
          break;
 8006360:	e07b      	b.n	800645a <HAL_ADC_AnalogWDGConfig+0x4e2>
        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:

#if defined(ADC_VER_V5_V90)
          if (hadc->Instance == ADC3)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a6b      	ldr	r2, [pc, #428]	@ (8006514 <HAL_ADC_AnalogWDGConfig+0x59c>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d108      	bne.n	800637e <HAL_ADC_AnalogWDGConfig+0x406>
          {

            LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6818      	ldr	r0, [r3, #0]
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a68      	ldr	r2, [pc, #416]	@ (8006518 <HAL_ADC_AnalogWDGConfig+0x5a0>)
 8006376:	4619      	mov	r1, r3
 8006378:	f7fe f998 	bl	80046ac <LL_ADC_SetAnalogWDMonitChannels>
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
            }
#if defined(ADC_VER_V5_V90)
          }
#endif  /*ADC_VER_V5_V90*/
          break;
 800637c:	e06d      	b.n	800645a <HAL_ADC_AnalogWDGConfig+0x4e2>
            if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a63      	ldr	r2, [pc, #396]	@ (8006510 <HAL_ADC_AnalogWDGConfig+0x598>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d12f      	bne.n	80063e8 <HAL_ADC_AnalogWDGConfig+0x470>
              SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006390:	2b00      	cmp	r3, #0
 8006392:	d108      	bne.n	80063a6 <HAL_ADC_AnalogWDGConfig+0x42e>
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	0e9b      	lsrs	r3, r3, #26
 800639a:	f003 031f 	and.w	r3, r3, #31
 800639e:	2201      	movs	r2, #1
 80063a0:	fa02 f303 	lsl.w	r3, r2, r3
 80063a4:	e016      	b.n	80063d4 <HAL_ADC_AnalogWDGConfig+0x45c>
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	fa93 f3a3 	rbit	r3, r3
 80063b2:	61bb      	str	r3, [r7, #24]
  return result;
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80063b8:	6a3b      	ldr	r3, [r7, #32]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d101      	bne.n	80063c2 <HAL_ADC_AnalogWDGConfig+0x44a>
    return 32U;
 80063be:	2320      	movs	r3, #32
 80063c0:	e003      	b.n	80063ca <HAL_ADC_AnalogWDGConfig+0x452>
  return __builtin_clz(value);
 80063c2:	6a3b      	ldr	r3, [r7, #32]
 80063c4:	fab3 f383 	clz	r3, r3
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	f003 031f 	and.w	r3, r3, #31
 80063ce:	2201      	movs	r2, #1
 80063d0:	fa02 f303 	lsl.w	r3, r2, r3
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	6812      	ldr	r2, [r2, #0]
 80063d8:	f8d2 10a0 	ldr.w	r1, [r2, #160]	@ 0xa0
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	6812      	ldr	r2, [r2, #0]
 80063e0:	430b      	orrs	r3, r1
 80063e2:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
          break;
 80063e6:	e038      	b.n	800645a <HAL_ADC_AnalogWDGConfig+0x4e2>
              SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d108      	bne.n	8006406 <HAL_ADC_AnalogWDGConfig+0x48e>
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	0e9b      	lsrs	r3, r3, #26
 80063fa:	f003 031f 	and.w	r3, r3, #31
 80063fe:	2201      	movs	r2, #1
 8006400:	fa02 f303 	lsl.w	r3, r2, r3
 8006404:	e016      	b.n	8006434 <HAL_ADC_AnalogWDGConfig+0x4bc>
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	fa93 f3a3 	rbit	r3, r3
 8006412:	60fb      	str	r3, [r7, #12]
  return result;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d101      	bne.n	8006422 <HAL_ADC_AnalogWDGConfig+0x4aa>
    return 32U;
 800641e:	2320      	movs	r3, #32
 8006420:	e003      	b.n	800642a <HAL_ADC_AnalogWDGConfig+0x4b2>
  return __builtin_clz(value);
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	fab3 f383 	clz	r3, r3
 8006428:	b2db      	uxtb	r3, r3
 800642a:	f003 031f 	and.w	r3, r3, #31
 800642e:	2201      	movs	r2, #1
 8006430:	fa02 f303 	lsl.w	r3, r2, r3
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	6812      	ldr	r2, [r2, #0]
 8006438:	f8d2 10a4 	ldr.w	r1, [r2, #164]	@ 0xa4
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	6812      	ldr	r2, [r2, #0]
 8006440:	430b      	orrs	r3, r1
 8006442:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
          break;
 8006446:	e008      	b.n	800645a <HAL_ADC_AnalogWDGConfig+0x4e2>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6818      	ldr	r0, [r3, #0]
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2200      	movs	r2, #0
 8006452:	4619      	mov	r1, r3
 8006454:	f7fe f92a 	bl	80046ac <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8006458:	bf00      	nop
      }

      /* Shift the thresholds in function of the selected ADC resolution      */
      /* have to be left-aligned on bit 15, the LSB (right bits) are set to 0 */
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	f003 0310 	and.w	r3, r3, #16
 8006464:	2b00      	cmp	r3, #0
 8006466:	d10b      	bne.n	8006480 <HAL_ADC_AnalogWDGConfig+0x508>
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	691a      	ldr	r2, [r3, #16]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	089b      	lsrs	r3, r3, #2
 8006474:	f003 0307 	and.w	r3, r3, #7
 8006478:	005b      	lsls	r3, r3, #1
 800647a:	fa02 f303 	lsl.w	r3, r2, r3
 800647e:	e00a      	b.n	8006496 <HAL_ADC_AnalogWDGConfig+0x51e>
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	691a      	ldr	r2, [r3, #16]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	089b      	lsrs	r3, r3, #2
 800648c:	f003 0304 	and.w	r3, r3, #4
 8006490:	005b      	lsls	r3, r3, #1
 8006492:	fa02 f303 	lsl.w	r3, r2, r3
 8006496:	64bb      	str	r3, [r7, #72]	@ 0x48
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	f003 0310 	and.w	r3, r3, #16
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d10b      	bne.n	80064be <HAL_ADC_AnalogWDGConfig+0x546>
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	695a      	ldr	r2, [r3, #20]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	089b      	lsrs	r3, r3, #2
 80064b2:	f003 0307 	and.w	r3, r3, #7
 80064b6:	005b      	lsls	r3, r3, #1
 80064b8:	fa02 f303 	lsl.w	r3, r2, r3
 80064bc:	e00a      	b.n	80064d4 <HAL_ADC_AnalogWDGConfig+0x55c>
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	695a      	ldr	r2, [r3, #20]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	089b      	lsrs	r3, r3, #2
 80064ca:	f003 0304 	and.w	r3, r3, #4
 80064ce:	005b      	lsls	r3, r3, #1
 80064d0:	fa02 f303 	lsl.w	r3, r2, r3
 80064d4:	647b      	str	r3, [r7, #68]	@ 0x44

#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a0e      	ldr	r2, [pc, #56]	@ (8006514 <HAL_ADC_AnalogWDGConfig+0x59c>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d153      	bne.n	8006588 <HAL_ADC_AnalogWDGConfig+0x610>
      {

        /* Analog watchdog thresholds configuration */
        if (AnalogWDGConfig->WatchdogNumber != ADC_ANALOGWATCHDOG_1)
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a0d      	ldr	r2, [pc, #52]	@ (800651c <HAL_ADC_AnalogWDGConfig+0x5a4>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d045      	beq.n	8006576 <HAL_ADC_AnalogWDGConfig+0x5fe>
        {
          /* Shift the offset with respect to the selected ADC resolution:        */
          /* Thresholds have to be left-aligned on bit 7, the LSB (right bits)    */
          /* are set to 0.                                                        */
          tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	f003 0310 	and.w	r3, r3, #16
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d113      	bne.n	8006520 <HAL_ADC_AnalogWDGConfig+0x5a8>
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	691a      	ldr	r2, [r3, #16]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	089b      	lsrs	r3, r3, #2
 8006504:	f003 0307 	and.w	r3, r3, #7
 8006508:	005b      	lsls	r3, r3, #1
 800650a:	fa02 f303 	lsl.w	r3, r2, r3
 800650e:	e012      	b.n	8006536 <HAL_ADC_AnalogWDGConfig+0x5be>
 8006510:	001fffff 	.word	0x001fffff
 8006514:	58026000 	.word	0x58026000
 8006518:	018fffff 	.word	0x018fffff
 800651c:	7dc00000 	.word	0x7dc00000
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	691a      	ldr	r2, [r3, #16]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	089b      	lsrs	r3, r3, #2
 800652c:	f003 0304 	and.w	r3, r3, #4
 8006530:	005b      	lsls	r3, r3, #1
 8006532:	fa02 f303 	lsl.w	r3, r2, r3
 8006536:	64bb      	str	r3, [r7, #72]	@ 0x48
          tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	f003 0310 	and.w	r3, r3, #16
 8006542:	2b00      	cmp	r3, #0
 8006544:	d10b      	bne.n	800655e <HAL_ADC_AnalogWDGConfig+0x5e6>
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	695a      	ldr	r2, [r3, #20]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	089b      	lsrs	r3, r3, #2
 8006552:	f003 0307 	and.w	r3, r3, #7
 8006556:	005b      	lsls	r3, r3, #1
 8006558:	fa02 f303 	lsl.w	r3, r2, r3
 800655c:	e00a      	b.n	8006574 <HAL_ADC_AnalogWDGConfig+0x5fc>
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	695a      	ldr	r2, [r3, #20]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	089b      	lsrs	r3, r3, #2
 800656a:	f003 0304 	and.w	r3, r3, #4
 800656e:	005b      	lsls	r3, r3, #1
 8006570:	fa02 f303 	lsl.w	r3, r2, r3
 8006574:	647b      	str	r3, [r7, #68]	@ 0x44
        }

        /* Set ADC analog watchdog thresholds value of both thresholds high and low */
        LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted, tmpAWDLowThresholdShifted);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6818      	ldr	r0, [r3, #0]
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	6819      	ldr	r1, [r3, #0]
 800657e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006580:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006582:	f7fe f8c1 	bl	8004708 <LL_ADC_ConfigAnalogWDThresholds>
 8006586:	e035      	b.n	80065f4 <HAL_ADC_AnalogWDGConfig+0x67c>

      }
      else
      {

        if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a40      	ldr	r2, [pc, #256]	@ (8006690 <HAL_ADC_AnalogWDGConfig+0x718>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d118      	bne.n	80065c4 <HAL_ADC_AnalogWDGConfig+0x64c>
        {
          /* Set ADC analog watchdog thresholds value of both thresholds high and low */
          MODIFY_REG(hadc->Instance->LTR2_DIFSEL,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800659a:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065a4:	430a      	orrs	r2, r1
 80065a6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
          MODIFY_REG(hadc->Instance->HTR2_CALFACT,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80065b2:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065bc:	430a      	orrs	r2, r1
 80065be:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
 80065c2:	e017      	b.n	80065f4 <HAL_ADC_AnalogWDGConfig+0x67c>
        }
        else
        {
          /* Set ADC analog watchdog thresholds value of both thresholds high and low */
          MODIFY_REG(hadc->Instance->LTR3_RES10,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80065cc:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065d6:	430a      	orrs	r2, r1
 80065d8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
          MODIFY_REG(hadc->Instance->HTR3_RES11,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80065e4:	f003 417c 	and.w	r1, r3, #4227858432	@ 0xfc000000
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065ee:	430a      	orrs	r2, r1
 80065f0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        MODIFY_REG(hadc->Instance->LTR3,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
        MODIFY_REG(hadc->Instance->HTR3,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
      }

#endif
      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a25      	ldr	r2, [pc, #148]	@ (8006690 <HAL_ADC_AnalogWDGConfig+0x718>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d11a      	bne.n	8006634 <HAL_ADC_AnalogWDGConfig+0x6bc>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006602:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4618      	mov	r0, r3
 8006610:	f7fe f9d7 	bl	80049c2 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	7b1b      	ldrb	r3, [r3, #12]
 8006618:	2b01      	cmp	r3, #1
 800661a:	d105      	bne.n	8006628 <HAL_ADC_AnalogWDGConfig+0x6b0>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4618      	mov	r0, r3
 8006622:	f7fe f9fa 	bl	8004a1a <LL_ADC_EnableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006626:	e029      	b.n	800667c <HAL_ADC_AnalogWDGConfig+0x704>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4618      	mov	r0, r3
 800662e:	f7fe fa24 	bl	8004a7a <LL_ADC_DisableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006632:	e023      	b.n	800667c <HAL_ADC_AnalogWDGConfig+0x704>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006638:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4618      	mov	r0, r3
 8006646:	f7fe f9ca 	bl	80049de <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	7b1b      	ldrb	r3, [r3, #12]
 800664e:	2b01      	cmp	r3, #1
 8006650:	d105      	bne.n	800665e <HAL_ADC_AnalogWDGConfig+0x6e6>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4618      	mov	r0, r3
 8006658:	f7fe f9ef 	bl	8004a3a <LL_ADC_EnableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800665c:	e00e      	b.n	800667c <HAL_ADC_AnalogWDGConfig+0x704>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4618      	mov	r0, r3
 8006664:	f7fe fa19 	bl	8004a9a <LL_ADC_DisableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8006668:	e008      	b.n	800667c <HAL_ADC_AnalogWDGConfig+0x704>
  /* If a conversion is on going on ADC group regular or injected, no update  */
  /* could be done on neither of the AWD configuration structure parameters.  */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800666e:	f043 0220 	orr.w	r2, r3, #32
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8006684:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8006688:	4618      	mov	r0, r3
 800668a:	3750      	adds	r7, #80	@ 0x50
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	001fffff 	.word	0x001fffff

08006694 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b084      	sub	sp, #16
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7fe f921 	bl	80048e8 <LL_ADC_IsEnabled>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d16e      	bne.n	800678a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	689a      	ldr	r2, [r3, #8]
 80066b2:	4b38      	ldr	r3, [pc, #224]	@ (8006794 <ADC_Enable+0x100>)
 80066b4:	4013      	ands	r3, r2
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00d      	beq.n	80066d6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066be:	f043 0210 	orr.w	r2, r3, #16
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80066ca:	f043 0201 	orr.w	r2, r3, #1
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e05a      	b.n	800678c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4618      	mov	r0, r3
 80066dc:	f7fe f8dc 	bl	8004898 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80066e0:	f7fd fd6a 	bl	80041b8 <HAL_GetTick>
 80066e4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a2b      	ldr	r2, [pc, #172]	@ (8006798 <ADC_Enable+0x104>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d004      	beq.n	80066fa <ADC_Enable+0x66>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a29      	ldr	r2, [pc, #164]	@ (800679c <ADC_Enable+0x108>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d101      	bne.n	80066fe <ADC_Enable+0x6a>
 80066fa:	4b29      	ldr	r3, [pc, #164]	@ (80067a0 <ADC_Enable+0x10c>)
 80066fc:	e000      	b.n	8006700 <ADC_Enable+0x6c>
 80066fe:	4b29      	ldr	r3, [pc, #164]	@ (80067a4 <ADC_Enable+0x110>)
 8006700:	4618      	mov	r0, r3
 8006702:	f7fe f85f 	bl	80047c4 <LL_ADC_GetMultimode>
 8006706:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a23      	ldr	r2, [pc, #140]	@ (800679c <ADC_Enable+0x108>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d002      	beq.n	8006718 <ADC_Enable+0x84>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	e000      	b.n	800671a <ADC_Enable+0x86>
 8006718:	4b1f      	ldr	r3, [pc, #124]	@ (8006798 <ADC_Enable+0x104>)
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	6812      	ldr	r2, [r2, #0]
 800671e:	4293      	cmp	r3, r2
 8006720:	d02c      	beq.n	800677c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d130      	bne.n	800678a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006728:	e028      	b.n	800677c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4618      	mov	r0, r3
 8006730:	f7fe f8da 	bl	80048e8 <LL_ADC_IsEnabled>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d104      	bne.n	8006744 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4618      	mov	r0, r3
 8006740:	f7fe f8aa 	bl	8004898 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006744:	f7fd fd38 	bl	80041b8 <HAL_GetTick>
 8006748:	4602      	mov	r2, r0
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	1ad3      	subs	r3, r2, r3
 800674e:	2b02      	cmp	r3, #2
 8006750:	d914      	bls.n	800677c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 0301 	and.w	r3, r3, #1
 800675c:	2b01      	cmp	r3, #1
 800675e:	d00d      	beq.n	800677c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006764:	f043 0210 	orr.w	r2, r3, #16
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006770:	f043 0201 	orr.w	r2, r3, #1
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 8006778:	2301      	movs	r3, #1
 800677a:	e007      	b.n	800678c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0301 	and.w	r3, r3, #1
 8006786:	2b01      	cmp	r3, #1
 8006788:	d1cf      	bne.n	800672a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3710      	adds	r7, #16
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}
 8006794:	8000003f 	.word	0x8000003f
 8006798:	40022000 	.word	0x40022000
 800679c:	40022100 	.word	0x40022100
 80067a0:	40022300 	.word	0x40022300
 80067a4:	58026300 	.word	0x58026300

080067a8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4618      	mov	r0, r3
 80067b6:	f7fe f8aa 	bl	800490e <LL_ADC_IsDisableOngoing>
 80067ba:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4618      	mov	r0, r3
 80067c2:	f7fe f891 	bl	80048e8 <LL_ADC_IsEnabled>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d047      	beq.n	800685c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d144      	bne.n	800685c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	f003 030d 	and.w	r3, r3, #13
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d10c      	bne.n	80067fa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4618      	mov	r0, r3
 80067e6:	f7fe f86b 	bl	80048c0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2203      	movs	r2, #3
 80067f0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80067f2:	f7fd fce1 	bl	80041b8 <HAL_GetTick>
 80067f6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80067f8:	e029      	b.n	800684e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067fe:	f043 0210 	orr.w	r2, r3, #16
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800680a:	f043 0201 	orr.w	r2, r3, #1
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e023      	b.n	800685e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006816:	f7fd fccf 	bl	80041b8 <HAL_GetTick>
 800681a:	4602      	mov	r2, r0
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	1ad3      	subs	r3, r2, r3
 8006820:	2b02      	cmp	r3, #2
 8006822:	d914      	bls.n	800684e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	f003 0301 	and.w	r3, r3, #1
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00d      	beq.n	800684e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006836:	f043 0210 	orr.w	r2, r3, #16
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006842:	f043 0201 	orr.w	r2, r3, #1
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e007      	b.n	800685e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	f003 0301 	and.w	r3, r3, #1
 8006858:	2b00      	cmp	r3, #0
 800685a:	d1dc      	bne.n	8006816 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3710      	adds	r7, #16
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006866:	b580      	push	{r7, lr}
 8006868:	b084      	sub	sp, #16
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006872:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006878:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800687c:	2b00      	cmp	r3, #0
 800687e:	d14b      	bne.n	8006918 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006884:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 0308 	and.w	r3, r3, #8
 8006896:	2b00      	cmp	r3, #0
 8006898:	d021      	beq.n	80068de <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4618      	mov	r0, r3
 80068a0:	f7fd fe0a 	bl	80044b8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d032      	beq.n	8006910 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d12b      	bne.n	8006910 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d11f      	bne.n	8006910 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068d4:	f043 0201 	orr.w	r2, r3, #1
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	661a      	str	r2, [r3, #96]	@ 0x60
 80068dc:	e018      	b.n	8006910 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	f003 0303 	and.w	r3, r3, #3
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d111      	bne.n	8006910 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006900:	2b00      	cmp	r3, #0
 8006902:	d105      	bne.n	8006910 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006908:	f043 0201 	orr.w	r2, r3, #1
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f7fb f95b 	bl	8001bcc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006916:	e00e      	b.n	8006936 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800691c:	f003 0310 	and.w	r3, r3, #16
 8006920:	2b00      	cmp	r3, #0
 8006922:	d003      	beq.n	800692c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f7fb f925 	bl	8001b74 <HAL_ADC_ErrorCallback>
}
 800692a:	e004      	b.n	8006936 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	4798      	blx	r3
}
 8006936:	bf00      	nop
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}

0800693e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800693e:	b580      	push	{r7, lr}
 8006940:	b084      	sub	sp, #16
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800694a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800694c:	68f8      	ldr	r0, [r7, #12]
 800694e:	f7fe fdd3 	bl	80054f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006952:	bf00      	nop
 8006954:	3710      	adds	r7, #16
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}

0800695a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800695a:	b580      	push	{r7, lr}
 800695c:	b084      	sub	sp, #16
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006966:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800696c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006978:	f043 0204 	orr.w	r2, r3, #4
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006980:	68f8      	ldr	r0, [r7, #12]
 8006982:	f7fb f8f7 	bl	8001b74 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006986:	bf00      	nop
 8006988:	3710      	adds	r7, #16
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
	...

08006990 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a6c      	ldr	r2, [pc, #432]	@ (8006b50 <ADC_ConfigureBoostMode+0x1c0>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d004      	beq.n	80069ac <ADC_ConfigureBoostMode+0x1c>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a6b      	ldr	r2, [pc, #428]	@ (8006b54 <ADC_ConfigureBoostMode+0x1c4>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d109      	bne.n	80069c0 <ADC_ConfigureBoostMode+0x30>
 80069ac:	4b6a      	ldr	r3, [pc, #424]	@ (8006b58 <ADC_ConfigureBoostMode+0x1c8>)
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	bf14      	ite	ne
 80069b8:	2301      	movne	r3, #1
 80069ba:	2300      	moveq	r3, #0
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	e008      	b.n	80069d2 <ADC_ConfigureBoostMode+0x42>
 80069c0:	4b66      	ldr	r3, [pc, #408]	@ (8006b5c <ADC_ConfigureBoostMode+0x1cc>)
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	bf14      	ite	ne
 80069cc:	2301      	movne	r3, #1
 80069ce:	2300      	moveq	r3, #0
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d01c      	beq.n	8006a10 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80069d6:	f004 fda9 	bl	800b52c <HAL_RCC_GetHCLKFreq>
 80069da:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80069e4:	d010      	beq.n	8006a08 <ADC_ConfigureBoostMode+0x78>
 80069e6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80069ea:	d873      	bhi.n	8006ad4 <ADC_ConfigureBoostMode+0x144>
 80069ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069f0:	d002      	beq.n	80069f8 <ADC_ConfigureBoostMode+0x68>
 80069f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80069f6:	d16d      	bne.n	8006ad4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	0c1b      	lsrs	r3, r3, #16
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a04:	60fb      	str	r3, [r7, #12]
        break;
 8006a06:	e068      	b.n	8006ada <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	089b      	lsrs	r3, r3, #2
 8006a0c:	60fb      	str	r3, [r7, #12]
        break;
 8006a0e:	e064      	b.n	8006ada <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006a10:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8006a14:	f04f 0100 	mov.w	r1, #0
 8006a18:	f005 ff84 	bl	800c924 <HAL_RCCEx_GetPeriphCLKFreq>
 8006a1c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8006a26:	d051      	beq.n	8006acc <ADC_ConfigureBoostMode+0x13c>
 8006a28:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8006a2c:	d854      	bhi.n	8006ad8 <ADC_ConfigureBoostMode+0x148>
 8006a2e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8006a32:	d047      	beq.n	8006ac4 <ADC_ConfigureBoostMode+0x134>
 8006a34:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8006a38:	d84e      	bhi.n	8006ad8 <ADC_ConfigureBoostMode+0x148>
 8006a3a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8006a3e:	d03d      	beq.n	8006abc <ADC_ConfigureBoostMode+0x12c>
 8006a40:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8006a44:	d848      	bhi.n	8006ad8 <ADC_ConfigureBoostMode+0x148>
 8006a46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a4a:	d033      	beq.n	8006ab4 <ADC_ConfigureBoostMode+0x124>
 8006a4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a50:	d842      	bhi.n	8006ad8 <ADC_ConfigureBoostMode+0x148>
 8006a52:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8006a56:	d029      	beq.n	8006aac <ADC_ConfigureBoostMode+0x11c>
 8006a58:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8006a5c:	d83c      	bhi.n	8006ad8 <ADC_ConfigureBoostMode+0x148>
 8006a5e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006a62:	d01a      	beq.n	8006a9a <ADC_ConfigureBoostMode+0x10a>
 8006a64:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006a68:	d836      	bhi.n	8006ad8 <ADC_ConfigureBoostMode+0x148>
 8006a6a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006a6e:	d014      	beq.n	8006a9a <ADC_ConfigureBoostMode+0x10a>
 8006a70:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006a74:	d830      	bhi.n	8006ad8 <ADC_ConfigureBoostMode+0x148>
 8006a76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a7a:	d00e      	beq.n	8006a9a <ADC_ConfigureBoostMode+0x10a>
 8006a7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a80:	d82a      	bhi.n	8006ad8 <ADC_ConfigureBoostMode+0x148>
 8006a82:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006a86:	d008      	beq.n	8006a9a <ADC_ConfigureBoostMode+0x10a>
 8006a88:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006a8c:	d824      	bhi.n	8006ad8 <ADC_ConfigureBoostMode+0x148>
 8006a8e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006a92:	d002      	beq.n	8006a9a <ADC_ConfigureBoostMode+0x10a>
 8006a94:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006a98:	d11e      	bne.n	8006ad8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	0c9b      	lsrs	r3, r3, #18
 8006aa0:	005b      	lsls	r3, r3, #1
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aa8:	60fb      	str	r3, [r7, #12]
        break;
 8006aaa:	e016      	b.n	8006ada <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	091b      	lsrs	r3, r3, #4
 8006ab0:	60fb      	str	r3, [r7, #12]
        break;
 8006ab2:	e012      	b.n	8006ada <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	095b      	lsrs	r3, r3, #5
 8006ab8:	60fb      	str	r3, [r7, #12]
        break;
 8006aba:	e00e      	b.n	8006ada <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	099b      	lsrs	r3, r3, #6
 8006ac0:	60fb      	str	r3, [r7, #12]
        break;
 8006ac2:	e00a      	b.n	8006ada <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	09db      	lsrs	r3, r3, #7
 8006ac8:	60fb      	str	r3, [r7, #12]
        break;
 8006aca:	e006      	b.n	8006ada <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	0a1b      	lsrs	r3, r3, #8
 8006ad0:	60fb      	str	r3, [r7, #12]
        break;
 8006ad2:	e002      	b.n	8006ada <ADC_ConfigureBoostMode+0x14a>
        break;
 8006ad4:	bf00      	nop
 8006ad6:	e000      	b.n	8006ada <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8006ad8:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	085b      	lsrs	r3, r3, #1
 8006ade:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	4a1f      	ldr	r2, [pc, #124]	@ (8006b60 <ADC_ConfigureBoostMode+0x1d0>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d808      	bhi.n	8006afa <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	689a      	ldr	r2, [r3, #8]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006af6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006af8:	e025      	b.n	8006b46 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	4a19      	ldr	r2, [pc, #100]	@ (8006b64 <ADC_ConfigureBoostMode+0x1d4>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d80a      	bhi.n	8006b18 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006b14:	609a      	str	r2, [r3, #8]
}
 8006b16:	e016      	b.n	8006b46 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	4a13      	ldr	r2, [pc, #76]	@ (8006b68 <ADC_ConfigureBoostMode+0x1d8>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d80a      	bhi.n	8006b36 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b32:	609a      	str	r2, [r3, #8]
}
 8006b34:	e007      	b.n	8006b46 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	689a      	ldr	r2, [r3, #8]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8006b44:	609a      	str	r2, [r3, #8]
}
 8006b46:	bf00      	nop
 8006b48:	3710      	adds	r7, #16
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	40022000 	.word	0x40022000
 8006b54:	40022100 	.word	0x40022100
 8006b58:	40022300 	.word	0x40022300
 8006b5c:	58026300 	.word	0x58026300
 8006b60:	005f5e10 	.word	0x005f5e10
 8006b64:	00bebc20 	.word	0x00bebc20
 8006b68:	017d7840 	.word	0x017d7840

08006b6c <LL_ADC_IsEnabled>:
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	f003 0301 	and.w	r3, r3, #1
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d101      	bne.n	8006b84 <LL_ADC_IsEnabled+0x18>
 8006b80:	2301      	movs	r3, #1
 8006b82:	e000      	b.n	8006b86 <LL_ADC_IsEnabled+0x1a>
 8006b84:	2300      	movs	r3, #0
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	370c      	adds	r7, #12
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr
	...

08006b94 <LL_ADC_StartCalibration>:
{
 8006b94:	b480      	push	{r7}
 8006b96:	b085      	sub	sp, #20
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	689a      	ldr	r2, [r3, #8]
 8006ba4:	4b09      	ldr	r3, [pc, #36]	@ (8006bcc <LL_ADC_StartCalibration+0x38>)
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	68ba      	ldr	r2, [r7, #8]
 8006baa:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006bb4:	430a      	orrs	r2, r1
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	609a      	str	r2, [r3, #8]
}
 8006bc0:	bf00      	nop
 8006bc2:	3714      	adds	r7, #20
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr
 8006bcc:	3ffeffc0 	.word	0x3ffeffc0

08006bd0 <LL_ADC_IsCalibrationOnGoing>:
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006be0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006be4:	d101      	bne.n	8006bea <LL_ADC_IsCalibrationOnGoing+0x1a>
 8006be6:	2301      	movs	r3, #1
 8006be8:	e000      	b.n	8006bec <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006bea:	2300      	movs	r3, #0
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <LL_ADC_REG_StartConversion>:
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	689a      	ldr	r2, [r3, #8]
 8006c04:	4b05      	ldr	r3, [pc, #20]	@ (8006c1c <LL_ADC_REG_StartConversion+0x24>)
 8006c06:	4013      	ands	r3, r2
 8006c08:	f043 0204 	orr.w	r2, r3, #4
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	609a      	str	r2, [r3, #8]
}
 8006c10:	bf00      	nop
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr
 8006c1c:	7fffffc0 	.word	0x7fffffc0

08006c20 <LL_ADC_REG_IsConversionOngoing>:
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	f003 0304 	and.w	r3, r3, #4
 8006c30:	2b04      	cmp	r3, #4
 8006c32:	d101      	bne.n	8006c38 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006c34:	2301      	movs	r3, #1
 8006c36:	e000      	b.n	8006c3a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	370c      	adds	r7, #12
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr
	...

08006c48 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b086      	sub	sp, #24
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006c54:	2300      	movs	r3, #0
 8006c56:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d101      	bne.n	8006c66 <HAL_ADCEx_Calibration_Start+0x1e>
 8006c62:	2302      	movs	r3, #2
 8006c64:	e04c      	b.n	8006d00 <HAL_ADCEx_Calibration_Start+0xb8>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2201      	movs	r2, #1
 8006c6a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006c6e:	68f8      	ldr	r0, [r7, #12]
 8006c70:	f7ff fd9a 	bl	80067a8 <ADC_Disable>
 8006c74:	4603      	mov	r3, r0
 8006c76:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006c78:	7dfb      	ldrb	r3, [r7, #23]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d135      	bne.n	8006cea <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006c82:	4b21      	ldr	r3, [pc, #132]	@ (8006d08 <HAL_ADCEx_Calibration_Start+0xc0>)
 8006c84:	4013      	ands	r3, r2
 8006c86:	f043 0202 	orr.w	r2, r3, #2
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	661a      	str	r2, [r3, #96]	@ 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	68b9      	ldr	r1, [r7, #8]
 8006c96:	4618      	mov	r0, r3
 8006c98:	f7ff ff7c 	bl	8006b94 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006c9c:	e014      	b.n	8006cc8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	4a19      	ldr	r2, [pc, #100]	@ (8006d0c <HAL_ADCEx_Calibration_Start+0xc4>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d30d      	bcc.n	8006cc8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cb0:	f023 0312 	bic.w	r3, r3, #18
 8006cb4:	f043 0210 	orr.w	r2, r3, #16
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e01b      	b.n	8006d00 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7ff ff7f 	bl	8006bd0 <LL_ADC_IsCalibrationOnGoing>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d1e2      	bne.n	8006c9e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cdc:	f023 0303 	bic.w	r3, r3, #3
 8006ce0:	f043 0201 	orr.w	r2, r3, #1
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	661a      	str	r2, [r3, #96]	@ 0x60
 8006ce8:	e005      	b.n	8006cf6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cee:	f043 0210 	orr.w	r2, r3, #16
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8006cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3718      	adds	r7, #24
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	ffffeefd 	.word	0xffffeefd
 8006d0c:	25c3f800 	.word	0x25c3f800

08006d10 <HAL_ADCEx_MultiModeStart_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b0a2      	sub	sp, #136	@ 0x88
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4618      	mov	r0, r3
 8006d22:	f7ff ff7d 	bl	8006c20 <LL_ADC_REG_IsConversionOngoing>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d001      	beq.n	8006d30 <HAL_ADCEx_MultiModeStart_DMA+0x20>
  {
    return HAL_BUSY;
 8006d2c:	2302      	movs	r3, #2
 8006d2e:	e08c      	b.n	8006e4a <HAL_ADCEx_MultiModeStart_DMA+0x13a>
  }
  else
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d101      	bne.n	8006d3e <HAL_ADCEx_MultiModeStart_DMA+0x2e>
 8006d3a:	2302      	movs	r3, #2
 8006d3c:	e085      	b.n	8006e4a <HAL_ADCEx_MultiModeStart_DMA+0x13a>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2201      	movs	r2, #1
 8006d42:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006d46:	2300      	movs	r3, #0
 8006d48:	673b      	str	r3, [r7, #112]	@ 0x70
    tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	677b      	str	r3, [r7, #116]	@ 0x74
    /* Set a temporary handle of the ADC slave associated to the ADC master   */
    ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a40      	ldr	r2, [pc, #256]	@ (8006e54 <HAL_ADCEx_MultiModeStart_DMA+0x144>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d102      	bne.n	8006d5e <HAL_ADCEx_MultiModeStart_DMA+0x4e>
 8006d58:	4b3f      	ldr	r3, [pc, #252]	@ (8006e58 <HAL_ADCEx_MultiModeStart_DMA+0x148>)
 8006d5a:	613b      	str	r3, [r7, #16]
 8006d5c:	e001      	b.n	8006d62 <HAL_ADCEx_MultiModeStart_DMA+0x52>
 8006d5e:	2300      	movs	r3, #0
 8006d60:	613b      	str	r3, [r7, #16]

    if (tmphadcSlave.Instance == NULL)
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d10b      	bne.n	8006d80 <HAL_ADCEx_MultiModeStart_DMA+0x70>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d6c:	f043 0220 	orr.w	r2, r3, #32
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e064      	b.n	8006e4a <HAL_ADCEx_MultiModeStart_DMA+0x13a>
    }

    /* Enable the ADC peripherals: master and slave (in case if not already   */
    /* enabled previously)                                                    */
    tmp_hal_status = ADC_Enable(hadc);
 8006d80:	68f8      	ldr	r0, [r7, #12]
 8006d82:	f7ff fc87 	bl	8006694 <ADC_Enable>
 8006d86:	4603      	mov	r3, r0
 8006d88:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    if (tmp_hal_status == HAL_OK)
 8006d8c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d107      	bne.n	8006da4 <HAL_ADCEx_MultiModeStart_DMA+0x94>
    {
      tmp_hal_status = ADC_Enable(&tmphadcSlave);
 8006d94:	f107 0310 	add.w	r3, r7, #16
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7ff fc7b 	bl	8006694 <ADC_Enable>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    }

    /* Start multimode conversion of ADCs pair */
    if (tmp_hal_status == HAL_OK)
 8006da4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d148      	bne.n	8006e3e <HAL_ADCEx_MultiModeStart_DMA+0x12e>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006db0:	4b2a      	ldr	r3, [pc, #168]	@ (8006e5c <HAL_ADCEx_MultiModeStart_DMA+0x14c>)
 8006db2:	4013      	ands	r3, r2
 8006db4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	661a      	str	r2, [r3, #96]	@ 0x60
                        (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP),
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dc6:	4a26      	ldr	r2, [pc, #152]	@ (8006e60 <HAL_ADCEx_MultiModeStart_DMA+0x150>)
 8006dc8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dce:	4a25      	ldr	r2, [pc, #148]	@ (8006e64 <HAL_ADCEx_MultiModeStart_DMA+0x154>)
 8006dd0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dd6:	4a24      	ldr	r2, [pc, #144]	@ (8006e68 <HAL_ADCEx_MultiModeStart_DMA+0x158>)
 8006dd8:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Pointer to the common control register  */
      tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a1d      	ldr	r2, [pc, #116]	@ (8006e54 <HAL_ADCEx_MultiModeStart_DMA+0x144>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d004      	beq.n	8006dee <HAL_ADCEx_MultiModeStart_DMA+0xde>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a1b      	ldr	r2, [pc, #108]	@ (8006e58 <HAL_ADCEx_MultiModeStart_DMA+0x148>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d101      	bne.n	8006df2 <HAL_ADCEx_MultiModeStart_DMA+0xe2>
 8006dee:	4b1f      	ldr	r3, [pc, #124]	@ (8006e6c <HAL_ADCEx_MultiModeStart_DMA+0x15c>)
 8006df0:	e000      	b.n	8006df4 <HAL_ADCEx_MultiModeStart_DMA+0xe4>
 8006df2:	4b1f      	ldr	r3, [pc, #124]	@ (8006e70 <HAL_ADCEx_MultiModeStart_DMA+0x160>)
 8006df4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
      /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
      /* start (in case of SW start):                                           */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	221c      	movs	r2, #28
 8006dfe:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	685a      	ldr	r2, [r3, #4]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f042 0210 	orr.w	r2, r2, #16
 8006e16:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8006e1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006e20:	330c      	adds	r3, #12
 8006e22:	4619      	mov	r1, r3
 8006e24:	68ba      	ldr	r2, [r7, #8]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f000 feca 	bl	8007bc0 <HAL_DMA_Start_IT>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
      /* Enable conversion of regular group.                                    */
      /* If software start has been selected, conversion starts immediately.    */
      /* If external trigger has been selected, conversion will start at next   */
      /* trigger event.                                                         */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4618      	mov	r0, r3
 8006e38:	f7ff fede 	bl	8006bf8 <LL_ADC_REG_StartConversion>
 8006e3c:	e003      	b.n	8006e46 <HAL_ADCEx_MultiModeStart_DMA+0x136>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    }

    /* Return function status */
    return tmp_hal_status;
 8006e46:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
  }
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3788      	adds	r7, #136	@ 0x88
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	40022000 	.word	0x40022000
 8006e58:	40022100 	.word	0x40022100
 8006e5c:	fffff0fe 	.word	0xfffff0fe
 8006e60:	08006867 	.word	0x08006867
 8006e64:	0800693f 	.word	0x0800693f
 8006e68:	0800695b 	.word	0x0800695b
 8006e6c:	40022300 	.word	0x40022300
 8006e70:	58026300 	.word	0x58026300

08006e74 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b083      	sub	sp, #12
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006e7c:	bf00      	nop
 8006e7e:	370c      	adds	r7, #12
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006e90:	bf00      	nop
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006ea4:	bf00      	nop
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006eb8:	bf00      	nop
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006ecc:	bf00      	nop
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006ed8:	b590      	push	{r4, r7, lr}
 8006eda:	b0a3      	sub	sp, #140	@ 0x8c
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006eee:	2b01      	cmp	r3, #1
 8006ef0:	d101      	bne.n	8006ef6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006ef2:	2302      	movs	r3, #2
 8006ef4:	e0c1      	b.n	800707a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8006efe:	2300      	movs	r3, #0
 8006f00:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8006f02:	2300      	movs	r3, #0
 8006f04:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a5e      	ldr	r2, [pc, #376]	@ (8007084 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d102      	bne.n	8006f16 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006f10:	4b5d      	ldr	r3, [pc, #372]	@ (8007088 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006f12:	60fb      	str	r3, [r7, #12]
 8006f14:	e001      	b.n	8006f1a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006f16:	2300      	movs	r3, #0
 8006f18:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10b      	bne.n	8006f38 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f24:	f043 0220 	orr.w	r2, r3, #32
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	e0a0      	b.n	800707a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7ff fe70 	bl	8006c20 <LL_ADC_REG_IsConversionOngoing>
 8006f40:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7ff fe69 	bl	8006c20 <LL_ADC_REG_IsConversionOngoing>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	f040 8081 	bne.w	8007058 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006f56:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d17c      	bne.n	8007058 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a48      	ldr	r2, [pc, #288]	@ (8007084 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d004      	beq.n	8006f72 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a46      	ldr	r2, [pc, #280]	@ (8007088 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d101      	bne.n	8006f76 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8006f72:	4b46      	ldr	r3, [pc, #280]	@ (800708c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006f74:	e000      	b.n	8006f78 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8006f76:	4b46      	ldr	r3, [pc, #280]	@ (8007090 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8006f78:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d039      	beq.n	8006ff6 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006f82:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	431a      	orrs	r2, r3
 8006f90:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006f92:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a3a      	ldr	r2, [pc, #232]	@ (8007084 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d004      	beq.n	8006fa8 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a39      	ldr	r2, [pc, #228]	@ (8007088 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d10e      	bne.n	8006fc6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8006fa8:	4836      	ldr	r0, [pc, #216]	@ (8007084 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006faa:	f7ff fddf 	bl	8006b6c <LL_ADC_IsEnabled>
 8006fae:	4604      	mov	r4, r0
 8006fb0:	4835      	ldr	r0, [pc, #212]	@ (8007088 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006fb2:	f7ff fddb 	bl	8006b6c <LL_ADC_IsEnabled>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	4323      	orrs	r3, r4
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	bf0c      	ite	eq
 8006fbe:	2301      	moveq	r3, #1
 8006fc0:	2300      	movne	r3, #0
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	e008      	b.n	8006fd8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8006fc6:	4833      	ldr	r0, [pc, #204]	@ (8007094 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8006fc8:	f7ff fdd0 	bl	8006b6c <LL_ADC_IsEnabled>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	bf0c      	ite	eq
 8006fd2:	2301      	moveq	r3, #1
 8006fd4:	2300      	movne	r3, #0
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d047      	beq.n	800706c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006fdc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006fde:	689a      	ldr	r2, [r3, #8]
 8006fe0:	4b2d      	ldr	r3, [pc, #180]	@ (8007098 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006fe2:	4013      	ands	r3, r2
 8006fe4:	683a      	ldr	r2, [r7, #0]
 8006fe6:	6811      	ldr	r1, [r2, #0]
 8006fe8:	683a      	ldr	r2, [r7, #0]
 8006fea:	6892      	ldr	r2, [r2, #8]
 8006fec:	430a      	orrs	r2, r1
 8006fee:	431a      	orrs	r2, r3
 8006ff0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006ff2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006ff4:	e03a      	b.n	800706c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8006ff6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006ffe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007000:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a1f      	ldr	r2, [pc, #124]	@ (8007084 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d004      	beq.n	8007016 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a1d      	ldr	r2, [pc, #116]	@ (8007088 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d10e      	bne.n	8007034 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8007016:	481b      	ldr	r0, [pc, #108]	@ (8007084 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8007018:	f7ff fda8 	bl	8006b6c <LL_ADC_IsEnabled>
 800701c:	4604      	mov	r4, r0
 800701e:	481a      	ldr	r0, [pc, #104]	@ (8007088 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8007020:	f7ff fda4 	bl	8006b6c <LL_ADC_IsEnabled>
 8007024:	4603      	mov	r3, r0
 8007026:	4323      	orrs	r3, r4
 8007028:	2b00      	cmp	r3, #0
 800702a:	bf0c      	ite	eq
 800702c:	2301      	moveq	r3, #1
 800702e:	2300      	movne	r3, #0
 8007030:	b2db      	uxtb	r3, r3
 8007032:	e008      	b.n	8007046 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8007034:	4817      	ldr	r0, [pc, #92]	@ (8007094 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8007036:	f7ff fd99 	bl	8006b6c <LL_ADC_IsEnabled>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	bf0c      	ite	eq
 8007040:	2301      	moveq	r3, #1
 8007042:	2300      	movne	r3, #0
 8007044:	b2db      	uxtb	r3, r3
 8007046:	2b00      	cmp	r3, #0
 8007048:	d010      	beq.n	800706c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800704a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800704c:	689a      	ldr	r2, [r3, #8]
 800704e:	4b12      	ldr	r3, [pc, #72]	@ (8007098 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8007050:	4013      	ands	r3, r2
 8007052:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007054:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007056:	e009      	b.n	800706c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800705c:	f043 0220 	orr.w	r2, r3, #32
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800706a:	e000      	b.n	800706e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800706c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8007076:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 800707a:	4618      	mov	r0, r3
 800707c:	378c      	adds	r7, #140	@ 0x8c
 800707e:	46bd      	mov	sp, r7
 8007080:	bd90      	pop	{r4, r7, pc}
 8007082:	bf00      	nop
 8007084:	40022000 	.word	0x40022000
 8007088:	40022100 	.word	0x40022100
 800708c:	40022300 	.word	0x40022300
 8007090:	58026300 	.word	0x58026300
 8007094:	58026000 	.word	0x58026000
 8007098:	fffff0e0 	.word	0xfffff0e0

0800709c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b088      	sub	sp, #32
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr ;
  uint32_t exti_line ;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" is comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80070a4:	2300      	movs	r3, #0
 80070a6:	60fb      	str	r3, [r7, #12]

  HAL_StatusTypeDef status = HAL_OK;
 80070a8:	2300      	movs	r3, #0
 80070aa:	77fb      	strb	r3, [r7, #31]
  
  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d102      	bne.n	80070b8 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
 80070b4:	77fb      	strb	r3, [r7, #31]
 80070b6:	e10e      	b.n	80072d6 <HAL_COMP_Init+0x23a>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80070c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80070c6:	d102      	bne.n	80070ce <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	77fb      	strb	r3, [r7, #31]
 80070cc:	e103      	b.n	80072d6 <HAL_COMP_Init+0x23a>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRCE(hcomp->Init.BlankingSrce)); 
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d109      	bne.n	80070ee <HAL_COMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	  
	  /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
	 /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f7fc fb6b 	bl	80037c4 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 0304 	and.w	r3, r3, #4
 80070f8:	61bb      	str	r3, [r7, #24]
    /*     Set BLANKING bits according to hcomp->Init.BlankingSrce value       */
    /*     Set HYST bits according to hcomp->Init.Hysteresis value             */
    /*     Set POLARITY bit according to hcomp->Init.OutputPol value           */
    /*     Set POWERMODE bits according to hcomp->Init.Mode value              */
   
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	691a      	ldr	r2, [r3, #16]
              hcomp->Init.NonInvertingInput  |  \
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	68db      	ldr	r3, [r3, #12]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 8007102:	431a      	orrs	r2, r3
              hcomp->Init.BlankingSrce       |  \
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	69db      	ldr	r3, [r3, #28]
              hcomp->Init.NonInvertingInput  |  \
 8007108:	431a      	orrs	r2, r3
              hcomp->Init.Hysteresis         |  \
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	695b      	ldr	r3, [r3, #20]
              hcomp->Init.BlankingSrce       |  \
 800710e:	431a      	orrs	r2, r3
              hcomp->Init.OutputPol          |  \
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	699b      	ldr	r3, [r3, #24]
              hcomp->Init.Hysteresis         |  \
 8007114:	431a      	orrs	r2, r3
              hcomp->Init.Mode                );
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	689b      	ldr	r3, [r3, #8]
    tmp_csr = (hcomp->Init.InvertingInput    |  \
 800711a:	4313      	orrs	r3, r2
 800711c:	617b      	str	r3, [r7, #20]
               COMP_CFGRx_INP2SEL  | COMP_CFGRx_WINMODE  | COMP_CFGRx_POLARITY | COMP_CFGRx_HYST    |
               COMP_CFGRx_BLANKING | COMP_CFGRx_BRGEN    | COMP_CFGRx_SCALEN,
               tmp_csr
              );
#else
    MODIFY_REG(hcomp->Instance->CFGR,
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	4b6e      	ldr	r3, [pc, #440]	@ (80072e0 <HAL_COMP_Init+0x244>)
 8007126:	4013      	ands	r3, r2
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	6812      	ldr	r2, [r2, #0]
 800712c:	6979      	ldr	r1, [r7, #20]
 800712e:	430b      	orrs	r3, r1
 8007130:	6013      	str	r3, [r2, #0]
#endif
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	2b10      	cmp	r3, #16
 8007138:	d108      	bne.n	800714c <HAL_COMP_Init+0xb0>
    {
      SET_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f042 0210 	orr.w	r2, r2, #16
 8007148:	601a      	str	r2, [r3, #0]
 800714a:	e007      	b.n	800715c <HAL_COMP_Init+0xc0>
    }
    else
    {
      CLEAR_BIT(hcomp->Instance->CFGR, COMP_CFGRx_WINMODE);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f022 0210 	bic.w	r2, r2, #16
 800715a:	601a      	str	r2, [r3, #0]
    }
    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is enabled for the first time */
    if ((READ_BIT(hcomp->Instance->CFGR, COMP_CFGRx_SCALEN) != 0UL) &&
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 0304 	and.w	r3, r3, #4
 8007166:	2b00      	cmp	r3, #0
 8007168:	d016      	beq.n	8007198 <HAL_COMP_Init+0xfc>
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d013      	beq.n	8007198 <HAL_COMP_Init+0xfc>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.*/

     wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007170:	4b5c      	ldr	r3, [pc, #368]	@ (80072e4 <HAL_COMP_Init+0x248>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	099b      	lsrs	r3, r3, #6
 8007176:	4a5c      	ldr	r2, [pc, #368]	@ (80072e8 <HAL_COMP_Init+0x24c>)
 8007178:	fba2 2303 	umull	r2, r3, r2, r3
 800717c:	099b      	lsrs	r3, r3, #6
 800717e:	1c5a      	adds	r2, r3, #1
 8007180:	4613      	mov	r3, r2
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	4413      	add	r3, r2
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	60fb      	str	r3, [r7, #12]

     while(wait_loop_index != 0UL)
 800718a:	e002      	b.n	8007192 <HAL_COMP_Init+0xf6>
     {
       wait_loop_index --;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	3b01      	subs	r3, #1
 8007190:	60fb      	str	r3, [r7, #12]
     while(wait_loop_index != 0UL)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d1f9      	bne.n	800718c <HAL_COMP_Init+0xf0>
     }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a53      	ldr	r2, [pc, #332]	@ (80072ec <HAL_COMP_Init+0x250>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d102      	bne.n	80071a8 <HAL_COMP_Init+0x10c>
 80071a2:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80071a6:	e001      	b.n	80071ac <HAL_COMP_Init+0x110>
 80071a8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80071ac:	613b      	str	r3, [r7, #16]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL) 
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a1b      	ldr	r3, [r3, #32]
 80071b2:	f003 0303 	and.w	r3, r3, #3
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d06d      	beq.n	8007296 <HAL_COMP_Init+0x1fa>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a1b      	ldr	r3, [r3, #32]
 80071be:	f003 0310 	and.w	r3, r3, #16
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d008      	beq.n	80071d8 <HAL_COMP_Init+0x13c>
      {
        SET_BIT(EXTI->RTSR1, exti_line);
 80071c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	600b      	str	r3, [r1, #0]
 80071d6:	e008      	b.n	80071ea <HAL_COMP_Init+0x14e>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR1, exti_line);
 80071d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	43db      	mvns	r3, r3
 80071e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80071e6:	4013      	ands	r3, r2
 80071e8:	600b      	str	r3, [r1, #0]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a1b      	ldr	r3, [r3, #32]
 80071ee:	f003 0320 	and.w	r3, r3, #32
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d008      	beq.n	8007208 <HAL_COMP_Init+0x16c>
      {
        SET_BIT(EXTI->FTSR1, exti_line);
 80071f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071fa:	685a      	ldr	r2, [r3, #4]
 80071fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	4313      	orrs	r3, r2
 8007204:	604b      	str	r3, [r1, #4]
 8007206:	e008      	b.n	800721a <HAL_COMP_Init+0x17e>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR1, exti_line);
 8007208:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800720c:	685a      	ldr	r2, [r3, #4]
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	43db      	mvns	r3, r3
 8007212:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007216:	4013      	ands	r3, r2
 8007218:	604b      	str	r3, [r1, #4]
      }
     
#if !defined (CORE_CM4)
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR1, exti_line);
 800721a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6a1b      	ldr	r3, [r3, #32]
 8007228:	f003 0302 	and.w	r3, r3, #2
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00a      	beq.n	8007246 <HAL_COMP_Init+0x1aa>
      {
        SET_BIT(EXTI->EMR1, exti_line);
 8007230:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007234:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8007238:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	4313      	orrs	r3, r2
 8007240:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 8007244:	e00a      	b.n	800725c <HAL_COMP_Init+0x1c0>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR1, exti_line);
 8007246:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800724a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	43db      	mvns	r3, r3
 8007252:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007256:	4013      	ands	r3, r2
 8007258:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      }
      
       /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6a1b      	ldr	r3, [r3, #32]
 8007260:	f003 0301 	and.w	r3, r3, #1
 8007264:	2b00      	cmp	r3, #0
 8007266:	d00a      	beq.n	800727e <HAL_COMP_Init+0x1e2>
      {
        SET_BIT(EXTI->IMR1, exti_line);
 8007268:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800726c:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8007270:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007274:	693b      	ldr	r3, [r7, #16]
 8007276:	4313      	orrs	r3, r2
 8007278:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 800727c:	e021      	b.n	80072c2 <HAL_COMP_Init+0x226>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR1, exti_line);
 800727e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007282:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	43db      	mvns	r3, r3
 800728a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800728e:	4013      	ands	r3, r2
 8007290:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
 8007294:	e015      	b.n	80072c2 <HAL_COMP_Init+0x226>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR1, exti_line);
 8007296:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800729a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	43db      	mvns	r3, r3
 80072a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80072a6:	4013      	ands	r3, r2
 80072a8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR1, exti_line);
 80072ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072b0:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	43db      	mvns	r3, r3
 80072b8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80072bc:	4013      	ands	r3, r2
 80072be:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
    }
#endif
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80072c8:	b2db      	uxtb	r3, r3
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d103      	bne.n	80072d6 <HAL_COMP_Init+0x23a>
    {
     
      hcomp->State = HAL_COMP_STATE_READY;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2201      	movs	r2, #1
 80072d2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
   
  }
  
  return status;
 80072d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3720      	adds	r7, #32
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	f0e8cce1 	.word	0xf0e8cce1
 80072e4:	24000038 	.word	0x24000038
 80072e8:	053e2d63 	.word	0x053e2d63
 80072ec:	5800380c 	.word	0x5800380c

080072f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b085      	sub	sp, #20
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f003 0307 	and.w	r3, r3, #7
 80072fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007300:	4b0b      	ldr	r3, [pc, #44]	@ (8007330 <__NVIC_SetPriorityGrouping+0x40>)
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007306:	68ba      	ldr	r2, [r7, #8]
 8007308:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800730c:	4013      	ands	r3, r2
 800730e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007318:	4b06      	ldr	r3, [pc, #24]	@ (8007334 <__NVIC_SetPriorityGrouping+0x44>)
 800731a:	4313      	orrs	r3, r2
 800731c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800731e:	4a04      	ldr	r2, [pc, #16]	@ (8007330 <__NVIC_SetPriorityGrouping+0x40>)
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	60d3      	str	r3, [r2, #12]
}
 8007324:	bf00      	nop
 8007326:	3714      	adds	r7, #20
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr
 8007330:	e000ed00 	.word	0xe000ed00
 8007334:	05fa0000 	.word	0x05fa0000

08007338 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007338:	b480      	push	{r7}
 800733a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800733c:	4b04      	ldr	r3, [pc, #16]	@ (8007350 <__NVIC_GetPriorityGrouping+0x18>)
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	0a1b      	lsrs	r3, r3, #8
 8007342:	f003 0307 	and.w	r3, r3, #7
}
 8007346:	4618      	mov	r0, r3
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr
 8007350:	e000ed00 	.word	0xe000ed00

08007354 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007354:	b480      	push	{r7}
 8007356:	b083      	sub	sp, #12
 8007358:	af00      	add	r7, sp, #0
 800735a:	4603      	mov	r3, r0
 800735c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800735e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007362:	2b00      	cmp	r3, #0
 8007364:	db0b      	blt.n	800737e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007366:	88fb      	ldrh	r3, [r7, #6]
 8007368:	f003 021f 	and.w	r2, r3, #31
 800736c:	4907      	ldr	r1, [pc, #28]	@ (800738c <__NVIC_EnableIRQ+0x38>)
 800736e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007372:	095b      	lsrs	r3, r3, #5
 8007374:	2001      	movs	r0, #1
 8007376:	fa00 f202 	lsl.w	r2, r0, r2
 800737a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800737e:	bf00      	nop
 8007380:	370c      	adds	r7, #12
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
 800738a:	bf00      	nop
 800738c:	e000e100 	.word	0xe000e100

08007390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	4603      	mov	r3, r0
 8007398:	6039      	str	r1, [r7, #0]
 800739a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800739c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	db0a      	blt.n	80073ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	b2da      	uxtb	r2, r3
 80073a8:	490c      	ldr	r1, [pc, #48]	@ (80073dc <__NVIC_SetPriority+0x4c>)
 80073aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80073ae:	0112      	lsls	r2, r2, #4
 80073b0:	b2d2      	uxtb	r2, r2
 80073b2:	440b      	add	r3, r1
 80073b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80073b8:	e00a      	b.n	80073d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	b2da      	uxtb	r2, r3
 80073be:	4908      	ldr	r1, [pc, #32]	@ (80073e0 <__NVIC_SetPriority+0x50>)
 80073c0:	88fb      	ldrh	r3, [r7, #6]
 80073c2:	f003 030f 	and.w	r3, r3, #15
 80073c6:	3b04      	subs	r3, #4
 80073c8:	0112      	lsls	r2, r2, #4
 80073ca:	b2d2      	uxtb	r2, r2
 80073cc:	440b      	add	r3, r1
 80073ce:	761a      	strb	r2, [r3, #24]
}
 80073d0:	bf00      	nop
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr
 80073dc:	e000e100 	.word	0xe000e100
 80073e0:	e000ed00 	.word	0xe000ed00

080073e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b089      	sub	sp, #36	@ 0x24
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f003 0307 	and.w	r3, r3, #7
 80073f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	f1c3 0307 	rsb	r3, r3, #7
 80073fe:	2b04      	cmp	r3, #4
 8007400:	bf28      	it	cs
 8007402:	2304      	movcs	r3, #4
 8007404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	3304      	adds	r3, #4
 800740a:	2b06      	cmp	r3, #6
 800740c:	d902      	bls.n	8007414 <NVIC_EncodePriority+0x30>
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	3b03      	subs	r3, #3
 8007412:	e000      	b.n	8007416 <NVIC_EncodePriority+0x32>
 8007414:	2300      	movs	r3, #0
 8007416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007418:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	fa02 f303 	lsl.w	r3, r2, r3
 8007422:	43da      	mvns	r2, r3
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	401a      	ands	r2, r3
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800742c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	fa01 f303 	lsl.w	r3, r1, r3
 8007436:	43d9      	mvns	r1, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800743c:	4313      	orrs	r3, r2
         );
}
 800743e:	4618      	mov	r0, r3
 8007440:	3724      	adds	r7, #36	@ 0x24
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr
	...

0800744c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	3b01      	subs	r3, #1
 8007458:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800745c:	d301      	bcc.n	8007462 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800745e:	2301      	movs	r3, #1
 8007460:	e00f      	b.n	8007482 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007462:	4a0a      	ldr	r2, [pc, #40]	@ (800748c <SysTick_Config+0x40>)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	3b01      	subs	r3, #1
 8007468:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800746a:	210f      	movs	r1, #15
 800746c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007470:	f7ff ff8e 	bl	8007390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007474:	4b05      	ldr	r3, [pc, #20]	@ (800748c <SysTick_Config+0x40>)
 8007476:	2200      	movs	r2, #0
 8007478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800747a:	4b04      	ldr	r3, [pc, #16]	@ (800748c <SysTick_Config+0x40>)
 800747c:	2207      	movs	r2, #7
 800747e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	3708      	adds	r7, #8
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	e000e010 	.word	0xe000e010

08007490 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f7ff ff29 	bl	80072f0 <__NVIC_SetPriorityGrouping>
}
 800749e:	bf00      	nop
 80074a0:	3708      	adds	r7, #8
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80074a6:	b580      	push	{r7, lr}
 80074a8:	b086      	sub	sp, #24
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	4603      	mov	r3, r0
 80074ae:	60b9      	str	r1, [r7, #8]
 80074b0:	607a      	str	r2, [r7, #4]
 80074b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80074b4:	f7ff ff40 	bl	8007338 <__NVIC_GetPriorityGrouping>
 80074b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	68b9      	ldr	r1, [r7, #8]
 80074be:	6978      	ldr	r0, [r7, #20]
 80074c0:	f7ff ff90 	bl	80073e4 <NVIC_EncodePriority>
 80074c4:	4602      	mov	r2, r0
 80074c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80074ca:	4611      	mov	r1, r2
 80074cc:	4618      	mov	r0, r3
 80074ce:	f7ff ff5f 	bl	8007390 <__NVIC_SetPriority>
}
 80074d2:	bf00      	nop
 80074d4:	3718      	adds	r7, #24
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b082      	sub	sp, #8
 80074de:	af00      	add	r7, sp, #0
 80074e0:	4603      	mov	r3, r0
 80074e2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80074e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80074e8:	4618      	mov	r0, r3
 80074ea:	f7ff ff33 	bl	8007354 <__NVIC_EnableIRQ>
}
 80074ee:	bf00      	nop
 80074f0:	3708      	adds	r7, #8
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}

080074f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80074f6:	b580      	push	{r7, lr}
 80074f8:	b082      	sub	sp, #8
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f7ff ffa4 	bl	800744c <SysTick_Config>
 8007504:	4603      	mov	r3, r0
}
 8007506:	4618      	mov	r0, r3
 8007508:	3708      	adds	r7, #8
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
	...

08007510 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b086      	sub	sp, #24
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8007518:	f7fc fe4e 	bl	80041b8 <HAL_GetTick>
 800751c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d101      	bne.n	8007528 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8007524:	2301      	movs	r3, #1
 8007526:	e312      	b.n	8007b4e <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a66      	ldr	r2, [pc, #408]	@ (80076c8 <HAL_DMA_Init+0x1b8>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d04a      	beq.n	80075c8 <HAL_DMA_Init+0xb8>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a65      	ldr	r2, [pc, #404]	@ (80076cc <HAL_DMA_Init+0x1bc>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d045      	beq.n	80075c8 <HAL_DMA_Init+0xb8>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a63      	ldr	r2, [pc, #396]	@ (80076d0 <HAL_DMA_Init+0x1c0>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d040      	beq.n	80075c8 <HAL_DMA_Init+0xb8>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a62      	ldr	r2, [pc, #392]	@ (80076d4 <HAL_DMA_Init+0x1c4>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d03b      	beq.n	80075c8 <HAL_DMA_Init+0xb8>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a60      	ldr	r2, [pc, #384]	@ (80076d8 <HAL_DMA_Init+0x1c8>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d036      	beq.n	80075c8 <HAL_DMA_Init+0xb8>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a5f      	ldr	r2, [pc, #380]	@ (80076dc <HAL_DMA_Init+0x1cc>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d031      	beq.n	80075c8 <HAL_DMA_Init+0xb8>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a5d      	ldr	r2, [pc, #372]	@ (80076e0 <HAL_DMA_Init+0x1d0>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d02c      	beq.n	80075c8 <HAL_DMA_Init+0xb8>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a5c      	ldr	r2, [pc, #368]	@ (80076e4 <HAL_DMA_Init+0x1d4>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d027      	beq.n	80075c8 <HAL_DMA_Init+0xb8>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a5a      	ldr	r2, [pc, #360]	@ (80076e8 <HAL_DMA_Init+0x1d8>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d022      	beq.n	80075c8 <HAL_DMA_Init+0xb8>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a59      	ldr	r2, [pc, #356]	@ (80076ec <HAL_DMA_Init+0x1dc>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d01d      	beq.n	80075c8 <HAL_DMA_Init+0xb8>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a57      	ldr	r2, [pc, #348]	@ (80076f0 <HAL_DMA_Init+0x1e0>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d018      	beq.n	80075c8 <HAL_DMA_Init+0xb8>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a56      	ldr	r2, [pc, #344]	@ (80076f4 <HAL_DMA_Init+0x1e4>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d013      	beq.n	80075c8 <HAL_DMA_Init+0xb8>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a54      	ldr	r2, [pc, #336]	@ (80076f8 <HAL_DMA_Init+0x1e8>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d00e      	beq.n	80075c8 <HAL_DMA_Init+0xb8>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a53      	ldr	r2, [pc, #332]	@ (80076fc <HAL_DMA_Init+0x1ec>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d009      	beq.n	80075c8 <HAL_DMA_Init+0xb8>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a51      	ldr	r2, [pc, #324]	@ (8007700 <HAL_DMA_Init+0x1f0>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d004      	beq.n	80075c8 <HAL_DMA_Init+0xb8>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a50      	ldr	r2, [pc, #320]	@ (8007704 <HAL_DMA_Init+0x1f4>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d101      	bne.n	80075cc <HAL_DMA_Init+0xbc>
 80075c8:	2301      	movs	r3, #1
 80075ca:	e000      	b.n	80075ce <HAL_DMA_Init+0xbe>
 80075cc:	2300      	movs	r3, #0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	f000 813c 	beq.w	800784c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2202      	movs	r2, #2
 80075d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a37      	ldr	r2, [pc, #220]	@ (80076c8 <HAL_DMA_Init+0x1b8>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d04a      	beq.n	8007684 <HAL_DMA_Init+0x174>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a36      	ldr	r2, [pc, #216]	@ (80076cc <HAL_DMA_Init+0x1bc>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d045      	beq.n	8007684 <HAL_DMA_Init+0x174>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a34      	ldr	r2, [pc, #208]	@ (80076d0 <HAL_DMA_Init+0x1c0>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d040      	beq.n	8007684 <HAL_DMA_Init+0x174>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a33      	ldr	r2, [pc, #204]	@ (80076d4 <HAL_DMA_Init+0x1c4>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d03b      	beq.n	8007684 <HAL_DMA_Init+0x174>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a31      	ldr	r2, [pc, #196]	@ (80076d8 <HAL_DMA_Init+0x1c8>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d036      	beq.n	8007684 <HAL_DMA_Init+0x174>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a30      	ldr	r2, [pc, #192]	@ (80076dc <HAL_DMA_Init+0x1cc>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d031      	beq.n	8007684 <HAL_DMA_Init+0x174>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a2e      	ldr	r2, [pc, #184]	@ (80076e0 <HAL_DMA_Init+0x1d0>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d02c      	beq.n	8007684 <HAL_DMA_Init+0x174>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a2d      	ldr	r2, [pc, #180]	@ (80076e4 <HAL_DMA_Init+0x1d4>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d027      	beq.n	8007684 <HAL_DMA_Init+0x174>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a2b      	ldr	r2, [pc, #172]	@ (80076e8 <HAL_DMA_Init+0x1d8>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d022      	beq.n	8007684 <HAL_DMA_Init+0x174>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a2a      	ldr	r2, [pc, #168]	@ (80076ec <HAL_DMA_Init+0x1dc>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d01d      	beq.n	8007684 <HAL_DMA_Init+0x174>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a28      	ldr	r2, [pc, #160]	@ (80076f0 <HAL_DMA_Init+0x1e0>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d018      	beq.n	8007684 <HAL_DMA_Init+0x174>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a27      	ldr	r2, [pc, #156]	@ (80076f4 <HAL_DMA_Init+0x1e4>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d013      	beq.n	8007684 <HAL_DMA_Init+0x174>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a25      	ldr	r2, [pc, #148]	@ (80076f8 <HAL_DMA_Init+0x1e8>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d00e      	beq.n	8007684 <HAL_DMA_Init+0x174>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a24      	ldr	r2, [pc, #144]	@ (80076fc <HAL_DMA_Init+0x1ec>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d009      	beq.n	8007684 <HAL_DMA_Init+0x174>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a22      	ldr	r2, [pc, #136]	@ (8007700 <HAL_DMA_Init+0x1f0>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d004      	beq.n	8007684 <HAL_DMA_Init+0x174>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a21      	ldr	r2, [pc, #132]	@ (8007704 <HAL_DMA_Init+0x1f4>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d108      	bne.n	8007696 <HAL_DMA_Init+0x186>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f022 0201 	bic.w	r2, r2, #1
 8007692:	601a      	str	r2, [r3, #0]
 8007694:	e007      	b.n	80076a6 <HAL_DMA_Init+0x196>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f022 0201 	bic.w	r2, r2, #1
 80076a4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80076a6:	e02f      	b.n	8007708 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80076a8:	f7fc fd86 	bl	80041b8 <HAL_GetTick>
 80076ac:	4602      	mov	r2, r0
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	1ad3      	subs	r3, r2, r3
 80076b2:	2b05      	cmp	r3, #5
 80076b4:	d928      	bls.n	8007708 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2220      	movs	r2, #32
 80076ba:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2203      	movs	r2, #3
 80076c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	e242      	b.n	8007b4e <HAL_DMA_Init+0x63e>
 80076c8:	40020010 	.word	0x40020010
 80076cc:	40020028 	.word	0x40020028
 80076d0:	40020040 	.word	0x40020040
 80076d4:	40020058 	.word	0x40020058
 80076d8:	40020070 	.word	0x40020070
 80076dc:	40020088 	.word	0x40020088
 80076e0:	400200a0 	.word	0x400200a0
 80076e4:	400200b8 	.word	0x400200b8
 80076e8:	40020410 	.word	0x40020410
 80076ec:	40020428 	.word	0x40020428
 80076f0:	40020440 	.word	0x40020440
 80076f4:	40020458 	.word	0x40020458
 80076f8:	40020470 	.word	0x40020470
 80076fc:	40020488 	.word	0x40020488
 8007700:	400204a0 	.word	0x400204a0
 8007704:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f003 0301 	and.w	r3, r3, #1
 8007712:	2b00      	cmp	r3, #0
 8007714:	d1c8      	bne.n	80076a8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800771e:	697a      	ldr	r2, [r7, #20]
 8007720:	4b83      	ldr	r3, [pc, #524]	@ (8007930 <HAL_DMA_Init+0x420>)
 8007722:	4013      	ands	r3, r2
 8007724:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800772e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	691b      	ldr	r3, [r3, #16]
 8007734:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800773a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	699b      	ldr	r3, [r3, #24]
 8007740:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007746:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6a1b      	ldr	r3, [r3, #32]
 800774c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800774e:	697a      	ldr	r2, [r7, #20]
 8007750:	4313      	orrs	r3, r2
 8007752:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007758:	2b04      	cmp	r3, #4
 800775a:	d107      	bne.n	800776c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007764:	4313      	orrs	r3, r2
 8007766:	697a      	ldr	r2, [r7, #20]
 8007768:	4313      	orrs	r3, r2
 800776a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	2b28      	cmp	r3, #40	@ 0x28
 8007772:	d903      	bls.n	800777c <HAL_DMA_Init+0x26c>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	2b2e      	cmp	r3, #46	@ 0x2e
 800777a:	d91f      	bls.n	80077bc <HAL_DMA_Init+0x2ac>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	2b3e      	cmp	r3, #62	@ 0x3e
 8007782:	d903      	bls.n	800778c <HAL_DMA_Init+0x27c>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	2b42      	cmp	r3, #66	@ 0x42
 800778a:	d917      	bls.n	80077bc <HAL_DMA_Init+0x2ac>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	2b46      	cmp	r3, #70	@ 0x46
 8007792:	d903      	bls.n	800779c <HAL_DMA_Init+0x28c>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	2b48      	cmp	r3, #72	@ 0x48
 800779a:	d90f      	bls.n	80077bc <HAL_DMA_Init+0x2ac>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	2b4e      	cmp	r3, #78	@ 0x4e
 80077a2:	d903      	bls.n	80077ac <HAL_DMA_Init+0x29c>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	2b52      	cmp	r3, #82	@ 0x52
 80077aa:	d907      	bls.n	80077bc <HAL_DMA_Init+0x2ac>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	2b73      	cmp	r3, #115	@ 0x73
 80077b2:	d905      	bls.n	80077c0 <HAL_DMA_Init+0x2b0>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	2b77      	cmp	r3, #119	@ 0x77
 80077ba:	d801      	bhi.n	80077c0 <HAL_DMA_Init+0x2b0>
 80077bc:	2301      	movs	r3, #1
 80077be:	e000      	b.n	80077c2 <HAL_DMA_Init+0x2b2>
 80077c0:	2300      	movs	r3, #0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d003      	beq.n	80077ce <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80077cc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	697a      	ldr	r2, [r7, #20]
 80077d4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	695b      	ldr	r3, [r3, #20]
 80077dc:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	f023 0307 	bic.w	r3, r3, #7
 80077e4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ea:	697a      	ldr	r2, [r7, #20]
 80077ec:	4313      	orrs	r3, r2
 80077ee:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077f4:	2b04      	cmp	r3, #4
 80077f6:	d117      	bne.n	8007828 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077fc:	697a      	ldr	r2, [r7, #20]
 80077fe:	4313      	orrs	r3, r2
 8007800:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00e      	beq.n	8007828 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f001 fdca 	bl	80093a4 <DMA_CheckFifoParam>
 8007810:	4603      	mov	r3, r0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d008      	beq.n	8007828 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2240      	movs	r2, #64	@ 0x40
 800781a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	e192      	b.n	8007b4e <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	697a      	ldr	r2, [r7, #20]
 800782e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f001 fd05 	bl	8009240 <DMA_CalcBaseAndBitshift>
 8007836:	4603      	mov	r3, r0
 8007838:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800783e:	f003 031f 	and.w	r3, r3, #31
 8007842:	223f      	movs	r2, #63	@ 0x3f
 8007844:	409a      	lsls	r2, r3
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	609a      	str	r2, [r3, #8]
 800784a:	e0c8      	b.n	80079de <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a38      	ldr	r2, [pc, #224]	@ (8007934 <HAL_DMA_Init+0x424>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d022      	beq.n	800789c <HAL_DMA_Init+0x38c>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a37      	ldr	r2, [pc, #220]	@ (8007938 <HAL_DMA_Init+0x428>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d01d      	beq.n	800789c <HAL_DMA_Init+0x38c>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a35      	ldr	r2, [pc, #212]	@ (800793c <HAL_DMA_Init+0x42c>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d018      	beq.n	800789c <HAL_DMA_Init+0x38c>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a34      	ldr	r2, [pc, #208]	@ (8007940 <HAL_DMA_Init+0x430>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d013      	beq.n	800789c <HAL_DMA_Init+0x38c>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a32      	ldr	r2, [pc, #200]	@ (8007944 <HAL_DMA_Init+0x434>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d00e      	beq.n	800789c <HAL_DMA_Init+0x38c>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a31      	ldr	r2, [pc, #196]	@ (8007948 <HAL_DMA_Init+0x438>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d009      	beq.n	800789c <HAL_DMA_Init+0x38c>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a2f      	ldr	r2, [pc, #188]	@ (800794c <HAL_DMA_Init+0x43c>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d004      	beq.n	800789c <HAL_DMA_Init+0x38c>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a2e      	ldr	r2, [pc, #184]	@ (8007950 <HAL_DMA_Init+0x440>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d101      	bne.n	80078a0 <HAL_DMA_Init+0x390>
 800789c:	2301      	movs	r3, #1
 800789e:	e000      	b.n	80078a2 <HAL_DMA_Init+0x392>
 80078a0:	2300      	movs	r3, #0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	f000 8092 	beq.w	80079cc <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a21      	ldr	r2, [pc, #132]	@ (8007934 <HAL_DMA_Init+0x424>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d021      	beq.n	80078f6 <HAL_DMA_Init+0x3e6>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a20      	ldr	r2, [pc, #128]	@ (8007938 <HAL_DMA_Init+0x428>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d01c      	beq.n	80078f6 <HAL_DMA_Init+0x3e6>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a1e      	ldr	r2, [pc, #120]	@ (800793c <HAL_DMA_Init+0x42c>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d017      	beq.n	80078f6 <HAL_DMA_Init+0x3e6>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a1d      	ldr	r2, [pc, #116]	@ (8007940 <HAL_DMA_Init+0x430>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d012      	beq.n	80078f6 <HAL_DMA_Init+0x3e6>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a1b      	ldr	r2, [pc, #108]	@ (8007944 <HAL_DMA_Init+0x434>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d00d      	beq.n	80078f6 <HAL_DMA_Init+0x3e6>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a1a      	ldr	r2, [pc, #104]	@ (8007948 <HAL_DMA_Init+0x438>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d008      	beq.n	80078f6 <HAL_DMA_Init+0x3e6>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a18      	ldr	r2, [pc, #96]	@ (800794c <HAL_DMA_Init+0x43c>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d003      	beq.n	80078f6 <HAL_DMA_Init+0x3e6>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a17      	ldr	r2, [pc, #92]	@ (8007950 <HAL_DMA_Init+0x440>)
 80078f4:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2202      	movs	r2, #2
 80078fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800790e:	697a      	ldr	r2, [r7, #20]
 8007910:	4b10      	ldr	r3, [pc, #64]	@ (8007954 <HAL_DMA_Init+0x444>)
 8007912:	4013      	ands	r3, r2
 8007914:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	2b40      	cmp	r3, #64	@ 0x40
 800791c:	d01c      	beq.n	8007958 <HAL_DMA_Init+0x448>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	2b80      	cmp	r3, #128	@ 0x80
 8007924:	d102      	bne.n	800792c <HAL_DMA_Init+0x41c>
 8007926:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800792a:	e016      	b.n	800795a <HAL_DMA_Init+0x44a>
 800792c:	2300      	movs	r3, #0
 800792e:	e014      	b.n	800795a <HAL_DMA_Init+0x44a>
 8007930:	fe10803f 	.word	0xfe10803f
 8007934:	58025408 	.word	0x58025408
 8007938:	5802541c 	.word	0x5802541c
 800793c:	58025430 	.word	0x58025430
 8007940:	58025444 	.word	0x58025444
 8007944:	58025458 	.word	0x58025458
 8007948:	5802546c 	.word	0x5802546c
 800794c:	58025480 	.word	0x58025480
 8007950:	58025494 	.word	0x58025494
 8007954:	fffe000f 	.word	0xfffe000f
 8007958:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	68d2      	ldr	r2, [r2, #12]
 800795e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007960:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007968:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	695b      	ldr	r3, [r3, #20]
 800796e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007970:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	699b      	ldr	r3, [r3, #24]
 8007976:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007978:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	69db      	ldr	r3, [r3, #28]
 800797e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007980:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a1b      	ldr	r3, [r3, #32]
 8007986:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007988:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800798a:	697a      	ldr	r2, [r7, #20]
 800798c:	4313      	orrs	r3, r2
 800798e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	697a      	ldr	r2, [r7, #20]
 8007996:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	461a      	mov	r2, r3
 800799e:	4b6e      	ldr	r3, [pc, #440]	@ (8007b58 <HAL_DMA_Init+0x648>)
 80079a0:	4413      	add	r3, r2
 80079a2:	4a6e      	ldr	r2, [pc, #440]	@ (8007b5c <HAL_DMA_Init+0x64c>)
 80079a4:	fba2 2303 	umull	r2, r3, r2, r3
 80079a8:	091b      	lsrs	r3, r3, #4
 80079aa:	009a      	lsls	r2, r3, #2
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f001 fc45 	bl	8009240 <DMA_CalcBaseAndBitshift>
 80079b6:	4603      	mov	r3, r0
 80079b8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079be:	f003 031f 	and.w	r3, r3, #31
 80079c2:	2201      	movs	r2, #1
 80079c4:	409a      	lsls	r2, r3
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	605a      	str	r2, [r3, #4]
 80079ca:	e008      	b.n	80079de <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2240      	movs	r2, #64	@ 0x40
 80079d0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2203      	movs	r2, #3
 80079d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	e0b7      	b.n	8007b4e <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a5f      	ldr	r2, [pc, #380]	@ (8007b60 <HAL_DMA_Init+0x650>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d072      	beq.n	8007ace <HAL_DMA_Init+0x5be>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a5d      	ldr	r2, [pc, #372]	@ (8007b64 <HAL_DMA_Init+0x654>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d06d      	beq.n	8007ace <HAL_DMA_Init+0x5be>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a5c      	ldr	r2, [pc, #368]	@ (8007b68 <HAL_DMA_Init+0x658>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d068      	beq.n	8007ace <HAL_DMA_Init+0x5be>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a5a      	ldr	r2, [pc, #360]	@ (8007b6c <HAL_DMA_Init+0x65c>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d063      	beq.n	8007ace <HAL_DMA_Init+0x5be>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a59      	ldr	r2, [pc, #356]	@ (8007b70 <HAL_DMA_Init+0x660>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d05e      	beq.n	8007ace <HAL_DMA_Init+0x5be>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a57      	ldr	r2, [pc, #348]	@ (8007b74 <HAL_DMA_Init+0x664>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d059      	beq.n	8007ace <HAL_DMA_Init+0x5be>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a56      	ldr	r2, [pc, #344]	@ (8007b78 <HAL_DMA_Init+0x668>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d054      	beq.n	8007ace <HAL_DMA_Init+0x5be>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a54      	ldr	r2, [pc, #336]	@ (8007b7c <HAL_DMA_Init+0x66c>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d04f      	beq.n	8007ace <HAL_DMA_Init+0x5be>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a53      	ldr	r2, [pc, #332]	@ (8007b80 <HAL_DMA_Init+0x670>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d04a      	beq.n	8007ace <HAL_DMA_Init+0x5be>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a51      	ldr	r2, [pc, #324]	@ (8007b84 <HAL_DMA_Init+0x674>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d045      	beq.n	8007ace <HAL_DMA_Init+0x5be>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a50      	ldr	r2, [pc, #320]	@ (8007b88 <HAL_DMA_Init+0x678>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d040      	beq.n	8007ace <HAL_DMA_Init+0x5be>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a4e      	ldr	r2, [pc, #312]	@ (8007b8c <HAL_DMA_Init+0x67c>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d03b      	beq.n	8007ace <HAL_DMA_Init+0x5be>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a4d      	ldr	r2, [pc, #308]	@ (8007b90 <HAL_DMA_Init+0x680>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d036      	beq.n	8007ace <HAL_DMA_Init+0x5be>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a4b      	ldr	r2, [pc, #300]	@ (8007b94 <HAL_DMA_Init+0x684>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d031      	beq.n	8007ace <HAL_DMA_Init+0x5be>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a4a      	ldr	r2, [pc, #296]	@ (8007b98 <HAL_DMA_Init+0x688>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d02c      	beq.n	8007ace <HAL_DMA_Init+0x5be>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a48      	ldr	r2, [pc, #288]	@ (8007b9c <HAL_DMA_Init+0x68c>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d027      	beq.n	8007ace <HAL_DMA_Init+0x5be>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a47      	ldr	r2, [pc, #284]	@ (8007ba0 <HAL_DMA_Init+0x690>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d022      	beq.n	8007ace <HAL_DMA_Init+0x5be>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a45      	ldr	r2, [pc, #276]	@ (8007ba4 <HAL_DMA_Init+0x694>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d01d      	beq.n	8007ace <HAL_DMA_Init+0x5be>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a44      	ldr	r2, [pc, #272]	@ (8007ba8 <HAL_DMA_Init+0x698>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d018      	beq.n	8007ace <HAL_DMA_Init+0x5be>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a42      	ldr	r2, [pc, #264]	@ (8007bac <HAL_DMA_Init+0x69c>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d013      	beq.n	8007ace <HAL_DMA_Init+0x5be>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a41      	ldr	r2, [pc, #260]	@ (8007bb0 <HAL_DMA_Init+0x6a0>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d00e      	beq.n	8007ace <HAL_DMA_Init+0x5be>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a3f      	ldr	r2, [pc, #252]	@ (8007bb4 <HAL_DMA_Init+0x6a4>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d009      	beq.n	8007ace <HAL_DMA_Init+0x5be>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a3e      	ldr	r2, [pc, #248]	@ (8007bb8 <HAL_DMA_Init+0x6a8>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d004      	beq.n	8007ace <HAL_DMA_Init+0x5be>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a3c      	ldr	r2, [pc, #240]	@ (8007bbc <HAL_DMA_Init+0x6ac>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d101      	bne.n	8007ad2 <HAL_DMA_Init+0x5c2>
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e000      	b.n	8007ad4 <HAL_DMA_Init+0x5c4>
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d032      	beq.n	8007b3e <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f001 fcdf 	bl	800949c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	2b80      	cmp	r3, #128	@ 0x80
 8007ae4:	d102      	bne.n	8007aec <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	685a      	ldr	r2, [r3, #4]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007af4:	b2d2      	uxtb	r2, r2
 8007af6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007b00:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d010      	beq.n	8007b2c <HAL_DMA_Init+0x61c>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	2b08      	cmp	r3, #8
 8007b10:	d80c      	bhi.n	8007b2c <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f001 fd5c 	bl	80095d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007b28:	605a      	str	r2, [r3, #4]
 8007b2a:	e008      	b.n	8007b3e <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2201      	movs	r2, #1
 8007b48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3718      	adds	r7, #24
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	a7fdabf8 	.word	0xa7fdabf8
 8007b5c:	cccccccd 	.word	0xcccccccd
 8007b60:	40020010 	.word	0x40020010
 8007b64:	40020028 	.word	0x40020028
 8007b68:	40020040 	.word	0x40020040
 8007b6c:	40020058 	.word	0x40020058
 8007b70:	40020070 	.word	0x40020070
 8007b74:	40020088 	.word	0x40020088
 8007b78:	400200a0 	.word	0x400200a0
 8007b7c:	400200b8 	.word	0x400200b8
 8007b80:	40020410 	.word	0x40020410
 8007b84:	40020428 	.word	0x40020428
 8007b88:	40020440 	.word	0x40020440
 8007b8c:	40020458 	.word	0x40020458
 8007b90:	40020470 	.word	0x40020470
 8007b94:	40020488 	.word	0x40020488
 8007b98:	400204a0 	.word	0x400204a0
 8007b9c:	400204b8 	.word	0x400204b8
 8007ba0:	58025408 	.word	0x58025408
 8007ba4:	5802541c 	.word	0x5802541c
 8007ba8:	58025430 	.word	0x58025430
 8007bac:	58025444 	.word	0x58025444
 8007bb0:	58025458 	.word	0x58025458
 8007bb4:	5802546c 	.word	0x5802546c
 8007bb8:	58025480 	.word	0x58025480
 8007bbc:	58025494 	.word	0x58025494

08007bc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b086      	sub	sp, #24
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	607a      	str	r2, [r7, #4]
 8007bcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d101      	bne.n	8007bdc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e226      	b.n	800802a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d101      	bne.n	8007bea <HAL_DMA_Start_IT+0x2a>
 8007be6:	2302      	movs	r3, #2
 8007be8:	e21f      	b.n	800802a <HAL_DMA_Start_IT+0x46a>
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2201      	movs	r2, #1
 8007bee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	f040 820a 	bne.w	8008014 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2202      	movs	r2, #2
 8007c04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a68      	ldr	r2, [pc, #416]	@ (8007db4 <HAL_DMA_Start_IT+0x1f4>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d04a      	beq.n	8007cae <HAL_DMA_Start_IT+0xee>
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a66      	ldr	r2, [pc, #408]	@ (8007db8 <HAL_DMA_Start_IT+0x1f8>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d045      	beq.n	8007cae <HAL_DMA_Start_IT+0xee>
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a65      	ldr	r2, [pc, #404]	@ (8007dbc <HAL_DMA_Start_IT+0x1fc>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d040      	beq.n	8007cae <HAL_DMA_Start_IT+0xee>
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a63      	ldr	r2, [pc, #396]	@ (8007dc0 <HAL_DMA_Start_IT+0x200>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d03b      	beq.n	8007cae <HAL_DMA_Start_IT+0xee>
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a62      	ldr	r2, [pc, #392]	@ (8007dc4 <HAL_DMA_Start_IT+0x204>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d036      	beq.n	8007cae <HAL_DMA_Start_IT+0xee>
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a60      	ldr	r2, [pc, #384]	@ (8007dc8 <HAL_DMA_Start_IT+0x208>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d031      	beq.n	8007cae <HAL_DMA_Start_IT+0xee>
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a5f      	ldr	r2, [pc, #380]	@ (8007dcc <HAL_DMA_Start_IT+0x20c>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d02c      	beq.n	8007cae <HAL_DMA_Start_IT+0xee>
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a5d      	ldr	r2, [pc, #372]	@ (8007dd0 <HAL_DMA_Start_IT+0x210>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d027      	beq.n	8007cae <HAL_DMA_Start_IT+0xee>
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a5c      	ldr	r2, [pc, #368]	@ (8007dd4 <HAL_DMA_Start_IT+0x214>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d022      	beq.n	8007cae <HAL_DMA_Start_IT+0xee>
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a5a      	ldr	r2, [pc, #360]	@ (8007dd8 <HAL_DMA_Start_IT+0x218>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d01d      	beq.n	8007cae <HAL_DMA_Start_IT+0xee>
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a59      	ldr	r2, [pc, #356]	@ (8007ddc <HAL_DMA_Start_IT+0x21c>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d018      	beq.n	8007cae <HAL_DMA_Start_IT+0xee>
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a57      	ldr	r2, [pc, #348]	@ (8007de0 <HAL_DMA_Start_IT+0x220>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d013      	beq.n	8007cae <HAL_DMA_Start_IT+0xee>
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a56      	ldr	r2, [pc, #344]	@ (8007de4 <HAL_DMA_Start_IT+0x224>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d00e      	beq.n	8007cae <HAL_DMA_Start_IT+0xee>
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a54      	ldr	r2, [pc, #336]	@ (8007de8 <HAL_DMA_Start_IT+0x228>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d009      	beq.n	8007cae <HAL_DMA_Start_IT+0xee>
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a53      	ldr	r2, [pc, #332]	@ (8007dec <HAL_DMA_Start_IT+0x22c>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d004      	beq.n	8007cae <HAL_DMA_Start_IT+0xee>
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a51      	ldr	r2, [pc, #324]	@ (8007df0 <HAL_DMA_Start_IT+0x230>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d108      	bne.n	8007cc0 <HAL_DMA_Start_IT+0x100>
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f022 0201 	bic.w	r2, r2, #1
 8007cbc:	601a      	str	r2, [r3, #0]
 8007cbe:	e007      	b.n	8007cd0 <HAL_DMA_Start_IT+0x110>
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f022 0201 	bic.w	r2, r2, #1
 8007cce:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	68b9      	ldr	r1, [r7, #8]
 8007cd6:	68f8      	ldr	r0, [r7, #12]
 8007cd8:	f001 f906 	bl	8008ee8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a34      	ldr	r2, [pc, #208]	@ (8007db4 <HAL_DMA_Start_IT+0x1f4>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d04a      	beq.n	8007d7c <HAL_DMA_Start_IT+0x1bc>
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a33      	ldr	r2, [pc, #204]	@ (8007db8 <HAL_DMA_Start_IT+0x1f8>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d045      	beq.n	8007d7c <HAL_DMA_Start_IT+0x1bc>
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a31      	ldr	r2, [pc, #196]	@ (8007dbc <HAL_DMA_Start_IT+0x1fc>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d040      	beq.n	8007d7c <HAL_DMA_Start_IT+0x1bc>
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a30      	ldr	r2, [pc, #192]	@ (8007dc0 <HAL_DMA_Start_IT+0x200>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d03b      	beq.n	8007d7c <HAL_DMA_Start_IT+0x1bc>
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a2e      	ldr	r2, [pc, #184]	@ (8007dc4 <HAL_DMA_Start_IT+0x204>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d036      	beq.n	8007d7c <HAL_DMA_Start_IT+0x1bc>
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a2d      	ldr	r2, [pc, #180]	@ (8007dc8 <HAL_DMA_Start_IT+0x208>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d031      	beq.n	8007d7c <HAL_DMA_Start_IT+0x1bc>
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a2b      	ldr	r2, [pc, #172]	@ (8007dcc <HAL_DMA_Start_IT+0x20c>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d02c      	beq.n	8007d7c <HAL_DMA_Start_IT+0x1bc>
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a2a      	ldr	r2, [pc, #168]	@ (8007dd0 <HAL_DMA_Start_IT+0x210>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d027      	beq.n	8007d7c <HAL_DMA_Start_IT+0x1bc>
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a28      	ldr	r2, [pc, #160]	@ (8007dd4 <HAL_DMA_Start_IT+0x214>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d022      	beq.n	8007d7c <HAL_DMA_Start_IT+0x1bc>
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a27      	ldr	r2, [pc, #156]	@ (8007dd8 <HAL_DMA_Start_IT+0x218>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d01d      	beq.n	8007d7c <HAL_DMA_Start_IT+0x1bc>
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a25      	ldr	r2, [pc, #148]	@ (8007ddc <HAL_DMA_Start_IT+0x21c>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d018      	beq.n	8007d7c <HAL_DMA_Start_IT+0x1bc>
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a24      	ldr	r2, [pc, #144]	@ (8007de0 <HAL_DMA_Start_IT+0x220>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d013      	beq.n	8007d7c <HAL_DMA_Start_IT+0x1bc>
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a22      	ldr	r2, [pc, #136]	@ (8007de4 <HAL_DMA_Start_IT+0x224>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d00e      	beq.n	8007d7c <HAL_DMA_Start_IT+0x1bc>
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a21      	ldr	r2, [pc, #132]	@ (8007de8 <HAL_DMA_Start_IT+0x228>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d009      	beq.n	8007d7c <HAL_DMA_Start_IT+0x1bc>
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a1f      	ldr	r2, [pc, #124]	@ (8007dec <HAL_DMA_Start_IT+0x22c>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d004      	beq.n	8007d7c <HAL_DMA_Start_IT+0x1bc>
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a1e      	ldr	r2, [pc, #120]	@ (8007df0 <HAL_DMA_Start_IT+0x230>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d101      	bne.n	8007d80 <HAL_DMA_Start_IT+0x1c0>
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e000      	b.n	8007d82 <HAL_DMA_Start_IT+0x1c2>
 8007d80:	2300      	movs	r3, #0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d036      	beq.n	8007df4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f023 021e 	bic.w	r2, r3, #30
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f042 0216 	orr.w	r2, r2, #22
 8007d98:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d03e      	beq.n	8007e20 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f042 0208 	orr.w	r2, r2, #8
 8007db0:	601a      	str	r2, [r3, #0]
 8007db2:	e035      	b.n	8007e20 <HAL_DMA_Start_IT+0x260>
 8007db4:	40020010 	.word	0x40020010
 8007db8:	40020028 	.word	0x40020028
 8007dbc:	40020040 	.word	0x40020040
 8007dc0:	40020058 	.word	0x40020058
 8007dc4:	40020070 	.word	0x40020070
 8007dc8:	40020088 	.word	0x40020088
 8007dcc:	400200a0 	.word	0x400200a0
 8007dd0:	400200b8 	.word	0x400200b8
 8007dd4:	40020410 	.word	0x40020410
 8007dd8:	40020428 	.word	0x40020428
 8007ddc:	40020440 	.word	0x40020440
 8007de0:	40020458 	.word	0x40020458
 8007de4:	40020470 	.word	0x40020470
 8007de8:	40020488 	.word	0x40020488
 8007dec:	400204a0 	.word	0x400204a0
 8007df0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f023 020e 	bic.w	r2, r3, #14
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f042 020a 	orr.w	r2, r2, #10
 8007e06:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d007      	beq.n	8007e20 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f042 0204 	orr.w	r2, r2, #4
 8007e1e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a83      	ldr	r2, [pc, #524]	@ (8008034 <HAL_DMA_Start_IT+0x474>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d072      	beq.n	8007f10 <HAL_DMA_Start_IT+0x350>
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a82      	ldr	r2, [pc, #520]	@ (8008038 <HAL_DMA_Start_IT+0x478>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d06d      	beq.n	8007f10 <HAL_DMA_Start_IT+0x350>
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a80      	ldr	r2, [pc, #512]	@ (800803c <HAL_DMA_Start_IT+0x47c>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d068      	beq.n	8007f10 <HAL_DMA_Start_IT+0x350>
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a7f      	ldr	r2, [pc, #508]	@ (8008040 <HAL_DMA_Start_IT+0x480>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d063      	beq.n	8007f10 <HAL_DMA_Start_IT+0x350>
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a7d      	ldr	r2, [pc, #500]	@ (8008044 <HAL_DMA_Start_IT+0x484>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d05e      	beq.n	8007f10 <HAL_DMA_Start_IT+0x350>
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a7c      	ldr	r2, [pc, #496]	@ (8008048 <HAL_DMA_Start_IT+0x488>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d059      	beq.n	8007f10 <HAL_DMA_Start_IT+0x350>
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a7a      	ldr	r2, [pc, #488]	@ (800804c <HAL_DMA_Start_IT+0x48c>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d054      	beq.n	8007f10 <HAL_DMA_Start_IT+0x350>
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a79      	ldr	r2, [pc, #484]	@ (8008050 <HAL_DMA_Start_IT+0x490>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d04f      	beq.n	8007f10 <HAL_DMA_Start_IT+0x350>
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a77      	ldr	r2, [pc, #476]	@ (8008054 <HAL_DMA_Start_IT+0x494>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d04a      	beq.n	8007f10 <HAL_DMA_Start_IT+0x350>
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a76      	ldr	r2, [pc, #472]	@ (8008058 <HAL_DMA_Start_IT+0x498>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d045      	beq.n	8007f10 <HAL_DMA_Start_IT+0x350>
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a74      	ldr	r2, [pc, #464]	@ (800805c <HAL_DMA_Start_IT+0x49c>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d040      	beq.n	8007f10 <HAL_DMA_Start_IT+0x350>
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a73      	ldr	r2, [pc, #460]	@ (8008060 <HAL_DMA_Start_IT+0x4a0>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d03b      	beq.n	8007f10 <HAL_DMA_Start_IT+0x350>
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a71      	ldr	r2, [pc, #452]	@ (8008064 <HAL_DMA_Start_IT+0x4a4>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d036      	beq.n	8007f10 <HAL_DMA_Start_IT+0x350>
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a70      	ldr	r2, [pc, #448]	@ (8008068 <HAL_DMA_Start_IT+0x4a8>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d031      	beq.n	8007f10 <HAL_DMA_Start_IT+0x350>
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a6e      	ldr	r2, [pc, #440]	@ (800806c <HAL_DMA_Start_IT+0x4ac>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d02c      	beq.n	8007f10 <HAL_DMA_Start_IT+0x350>
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a6d      	ldr	r2, [pc, #436]	@ (8008070 <HAL_DMA_Start_IT+0x4b0>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d027      	beq.n	8007f10 <HAL_DMA_Start_IT+0x350>
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a6b      	ldr	r2, [pc, #428]	@ (8008074 <HAL_DMA_Start_IT+0x4b4>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d022      	beq.n	8007f10 <HAL_DMA_Start_IT+0x350>
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a6a      	ldr	r2, [pc, #424]	@ (8008078 <HAL_DMA_Start_IT+0x4b8>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d01d      	beq.n	8007f10 <HAL_DMA_Start_IT+0x350>
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a68      	ldr	r2, [pc, #416]	@ (800807c <HAL_DMA_Start_IT+0x4bc>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d018      	beq.n	8007f10 <HAL_DMA_Start_IT+0x350>
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a67      	ldr	r2, [pc, #412]	@ (8008080 <HAL_DMA_Start_IT+0x4c0>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d013      	beq.n	8007f10 <HAL_DMA_Start_IT+0x350>
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a65      	ldr	r2, [pc, #404]	@ (8008084 <HAL_DMA_Start_IT+0x4c4>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d00e      	beq.n	8007f10 <HAL_DMA_Start_IT+0x350>
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a64      	ldr	r2, [pc, #400]	@ (8008088 <HAL_DMA_Start_IT+0x4c8>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d009      	beq.n	8007f10 <HAL_DMA_Start_IT+0x350>
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a62      	ldr	r2, [pc, #392]	@ (800808c <HAL_DMA_Start_IT+0x4cc>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d004      	beq.n	8007f10 <HAL_DMA_Start_IT+0x350>
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a61      	ldr	r2, [pc, #388]	@ (8008090 <HAL_DMA_Start_IT+0x4d0>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d101      	bne.n	8007f14 <HAL_DMA_Start_IT+0x354>
 8007f10:	2301      	movs	r3, #1
 8007f12:	e000      	b.n	8007f16 <HAL_DMA_Start_IT+0x356>
 8007f14:	2300      	movs	r3, #0
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d01a      	beq.n	8007f50 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d007      	beq.n	8007f38 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f36:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d007      	beq.n	8007f50 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007f4e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a37      	ldr	r2, [pc, #220]	@ (8008034 <HAL_DMA_Start_IT+0x474>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d04a      	beq.n	8007ff0 <HAL_DMA_Start_IT+0x430>
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a36      	ldr	r2, [pc, #216]	@ (8008038 <HAL_DMA_Start_IT+0x478>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d045      	beq.n	8007ff0 <HAL_DMA_Start_IT+0x430>
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a34      	ldr	r2, [pc, #208]	@ (800803c <HAL_DMA_Start_IT+0x47c>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d040      	beq.n	8007ff0 <HAL_DMA_Start_IT+0x430>
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a33      	ldr	r2, [pc, #204]	@ (8008040 <HAL_DMA_Start_IT+0x480>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d03b      	beq.n	8007ff0 <HAL_DMA_Start_IT+0x430>
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a31      	ldr	r2, [pc, #196]	@ (8008044 <HAL_DMA_Start_IT+0x484>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d036      	beq.n	8007ff0 <HAL_DMA_Start_IT+0x430>
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a30      	ldr	r2, [pc, #192]	@ (8008048 <HAL_DMA_Start_IT+0x488>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d031      	beq.n	8007ff0 <HAL_DMA_Start_IT+0x430>
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a2e      	ldr	r2, [pc, #184]	@ (800804c <HAL_DMA_Start_IT+0x48c>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d02c      	beq.n	8007ff0 <HAL_DMA_Start_IT+0x430>
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a2d      	ldr	r2, [pc, #180]	@ (8008050 <HAL_DMA_Start_IT+0x490>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d027      	beq.n	8007ff0 <HAL_DMA_Start_IT+0x430>
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a2b      	ldr	r2, [pc, #172]	@ (8008054 <HAL_DMA_Start_IT+0x494>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d022      	beq.n	8007ff0 <HAL_DMA_Start_IT+0x430>
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a2a      	ldr	r2, [pc, #168]	@ (8008058 <HAL_DMA_Start_IT+0x498>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d01d      	beq.n	8007ff0 <HAL_DMA_Start_IT+0x430>
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a28      	ldr	r2, [pc, #160]	@ (800805c <HAL_DMA_Start_IT+0x49c>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d018      	beq.n	8007ff0 <HAL_DMA_Start_IT+0x430>
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a27      	ldr	r2, [pc, #156]	@ (8008060 <HAL_DMA_Start_IT+0x4a0>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d013      	beq.n	8007ff0 <HAL_DMA_Start_IT+0x430>
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a25      	ldr	r2, [pc, #148]	@ (8008064 <HAL_DMA_Start_IT+0x4a4>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d00e      	beq.n	8007ff0 <HAL_DMA_Start_IT+0x430>
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a24      	ldr	r2, [pc, #144]	@ (8008068 <HAL_DMA_Start_IT+0x4a8>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d009      	beq.n	8007ff0 <HAL_DMA_Start_IT+0x430>
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a22      	ldr	r2, [pc, #136]	@ (800806c <HAL_DMA_Start_IT+0x4ac>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d004      	beq.n	8007ff0 <HAL_DMA_Start_IT+0x430>
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a21      	ldr	r2, [pc, #132]	@ (8008070 <HAL_DMA_Start_IT+0x4b0>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d108      	bne.n	8008002 <HAL_DMA_Start_IT+0x442>
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f042 0201 	orr.w	r2, r2, #1
 8007ffe:	601a      	str	r2, [r3, #0]
 8008000:	e012      	b.n	8008028 <HAL_DMA_Start_IT+0x468>
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f042 0201 	orr.w	r2, r2, #1
 8008010:	601a      	str	r2, [r3, #0]
 8008012:	e009      	b.n	8008028 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800801a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2200      	movs	r2, #0
 8008020:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8008024:	2301      	movs	r3, #1
 8008026:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008028:	7dfb      	ldrb	r3, [r7, #23]
}
 800802a:	4618      	mov	r0, r3
 800802c:	3718      	adds	r7, #24
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	40020010 	.word	0x40020010
 8008038:	40020028 	.word	0x40020028
 800803c:	40020040 	.word	0x40020040
 8008040:	40020058 	.word	0x40020058
 8008044:	40020070 	.word	0x40020070
 8008048:	40020088 	.word	0x40020088
 800804c:	400200a0 	.word	0x400200a0
 8008050:	400200b8 	.word	0x400200b8
 8008054:	40020410 	.word	0x40020410
 8008058:	40020428 	.word	0x40020428
 800805c:	40020440 	.word	0x40020440
 8008060:	40020458 	.word	0x40020458
 8008064:	40020470 	.word	0x40020470
 8008068:	40020488 	.word	0x40020488
 800806c:	400204a0 	.word	0x400204a0
 8008070:	400204b8 	.word	0x400204b8
 8008074:	58025408 	.word	0x58025408
 8008078:	5802541c 	.word	0x5802541c
 800807c:	58025430 	.word	0x58025430
 8008080:	58025444 	.word	0x58025444
 8008084:	58025458 	.word	0x58025458
 8008088:	5802546c 	.word	0x5802546c
 800808c:	58025480 	.word	0x58025480
 8008090:	58025494 	.word	0x58025494

08008094 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b08a      	sub	sp, #40	@ 0x28
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800809c:	2300      	movs	r3, #0
 800809e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80080a0:	4b67      	ldr	r3, [pc, #412]	@ (8008240 <HAL_DMA_IRQHandler+0x1ac>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a67      	ldr	r2, [pc, #412]	@ (8008244 <HAL_DMA_IRQHandler+0x1b0>)
 80080a6:	fba2 2303 	umull	r2, r3, r2, r3
 80080aa:	0a9b      	lsrs	r3, r3, #10
 80080ac:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080b2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080b8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80080ba:	6a3b      	ldr	r3, [r7, #32]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a5f      	ldr	r2, [pc, #380]	@ (8008248 <HAL_DMA_IRQHandler+0x1b4>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d04a      	beq.n	8008166 <HAL_DMA_IRQHandler+0xd2>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a5d      	ldr	r2, [pc, #372]	@ (800824c <HAL_DMA_IRQHandler+0x1b8>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d045      	beq.n	8008166 <HAL_DMA_IRQHandler+0xd2>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a5c      	ldr	r2, [pc, #368]	@ (8008250 <HAL_DMA_IRQHandler+0x1bc>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d040      	beq.n	8008166 <HAL_DMA_IRQHandler+0xd2>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a5a      	ldr	r2, [pc, #360]	@ (8008254 <HAL_DMA_IRQHandler+0x1c0>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d03b      	beq.n	8008166 <HAL_DMA_IRQHandler+0xd2>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a59      	ldr	r2, [pc, #356]	@ (8008258 <HAL_DMA_IRQHandler+0x1c4>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d036      	beq.n	8008166 <HAL_DMA_IRQHandler+0xd2>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a57      	ldr	r2, [pc, #348]	@ (800825c <HAL_DMA_IRQHandler+0x1c8>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d031      	beq.n	8008166 <HAL_DMA_IRQHandler+0xd2>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a56      	ldr	r2, [pc, #344]	@ (8008260 <HAL_DMA_IRQHandler+0x1cc>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d02c      	beq.n	8008166 <HAL_DMA_IRQHandler+0xd2>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a54      	ldr	r2, [pc, #336]	@ (8008264 <HAL_DMA_IRQHandler+0x1d0>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d027      	beq.n	8008166 <HAL_DMA_IRQHandler+0xd2>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a53      	ldr	r2, [pc, #332]	@ (8008268 <HAL_DMA_IRQHandler+0x1d4>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d022      	beq.n	8008166 <HAL_DMA_IRQHandler+0xd2>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a51      	ldr	r2, [pc, #324]	@ (800826c <HAL_DMA_IRQHandler+0x1d8>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d01d      	beq.n	8008166 <HAL_DMA_IRQHandler+0xd2>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a50      	ldr	r2, [pc, #320]	@ (8008270 <HAL_DMA_IRQHandler+0x1dc>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d018      	beq.n	8008166 <HAL_DMA_IRQHandler+0xd2>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a4e      	ldr	r2, [pc, #312]	@ (8008274 <HAL_DMA_IRQHandler+0x1e0>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d013      	beq.n	8008166 <HAL_DMA_IRQHandler+0xd2>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a4d      	ldr	r2, [pc, #308]	@ (8008278 <HAL_DMA_IRQHandler+0x1e4>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d00e      	beq.n	8008166 <HAL_DMA_IRQHandler+0xd2>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a4b      	ldr	r2, [pc, #300]	@ (800827c <HAL_DMA_IRQHandler+0x1e8>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d009      	beq.n	8008166 <HAL_DMA_IRQHandler+0xd2>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a4a      	ldr	r2, [pc, #296]	@ (8008280 <HAL_DMA_IRQHandler+0x1ec>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d004      	beq.n	8008166 <HAL_DMA_IRQHandler+0xd2>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a48      	ldr	r2, [pc, #288]	@ (8008284 <HAL_DMA_IRQHandler+0x1f0>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d101      	bne.n	800816a <HAL_DMA_IRQHandler+0xd6>
 8008166:	2301      	movs	r3, #1
 8008168:	e000      	b.n	800816c <HAL_DMA_IRQHandler+0xd8>
 800816a:	2300      	movs	r3, #0
 800816c:	2b00      	cmp	r3, #0
 800816e:	f000 842b 	beq.w	80089c8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008176:	f003 031f 	and.w	r3, r3, #31
 800817a:	2208      	movs	r2, #8
 800817c:	409a      	lsls	r2, r3
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	4013      	ands	r3, r2
 8008182:	2b00      	cmp	r3, #0
 8008184:	f000 80a2 	beq.w	80082cc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a2e      	ldr	r2, [pc, #184]	@ (8008248 <HAL_DMA_IRQHandler+0x1b4>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d04a      	beq.n	8008228 <HAL_DMA_IRQHandler+0x194>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a2d      	ldr	r2, [pc, #180]	@ (800824c <HAL_DMA_IRQHandler+0x1b8>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d045      	beq.n	8008228 <HAL_DMA_IRQHandler+0x194>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a2b      	ldr	r2, [pc, #172]	@ (8008250 <HAL_DMA_IRQHandler+0x1bc>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d040      	beq.n	8008228 <HAL_DMA_IRQHandler+0x194>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a2a      	ldr	r2, [pc, #168]	@ (8008254 <HAL_DMA_IRQHandler+0x1c0>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d03b      	beq.n	8008228 <HAL_DMA_IRQHandler+0x194>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a28      	ldr	r2, [pc, #160]	@ (8008258 <HAL_DMA_IRQHandler+0x1c4>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d036      	beq.n	8008228 <HAL_DMA_IRQHandler+0x194>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a27      	ldr	r2, [pc, #156]	@ (800825c <HAL_DMA_IRQHandler+0x1c8>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d031      	beq.n	8008228 <HAL_DMA_IRQHandler+0x194>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a25      	ldr	r2, [pc, #148]	@ (8008260 <HAL_DMA_IRQHandler+0x1cc>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d02c      	beq.n	8008228 <HAL_DMA_IRQHandler+0x194>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a24      	ldr	r2, [pc, #144]	@ (8008264 <HAL_DMA_IRQHandler+0x1d0>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d027      	beq.n	8008228 <HAL_DMA_IRQHandler+0x194>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a22      	ldr	r2, [pc, #136]	@ (8008268 <HAL_DMA_IRQHandler+0x1d4>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d022      	beq.n	8008228 <HAL_DMA_IRQHandler+0x194>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a21      	ldr	r2, [pc, #132]	@ (800826c <HAL_DMA_IRQHandler+0x1d8>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d01d      	beq.n	8008228 <HAL_DMA_IRQHandler+0x194>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a1f      	ldr	r2, [pc, #124]	@ (8008270 <HAL_DMA_IRQHandler+0x1dc>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d018      	beq.n	8008228 <HAL_DMA_IRQHandler+0x194>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a1e      	ldr	r2, [pc, #120]	@ (8008274 <HAL_DMA_IRQHandler+0x1e0>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d013      	beq.n	8008228 <HAL_DMA_IRQHandler+0x194>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a1c      	ldr	r2, [pc, #112]	@ (8008278 <HAL_DMA_IRQHandler+0x1e4>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d00e      	beq.n	8008228 <HAL_DMA_IRQHandler+0x194>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a1b      	ldr	r2, [pc, #108]	@ (800827c <HAL_DMA_IRQHandler+0x1e8>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d009      	beq.n	8008228 <HAL_DMA_IRQHandler+0x194>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a19      	ldr	r2, [pc, #100]	@ (8008280 <HAL_DMA_IRQHandler+0x1ec>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d004      	beq.n	8008228 <HAL_DMA_IRQHandler+0x194>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4a18      	ldr	r2, [pc, #96]	@ (8008284 <HAL_DMA_IRQHandler+0x1f0>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d12f      	bne.n	8008288 <HAL_DMA_IRQHandler+0x1f4>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f003 0304 	and.w	r3, r3, #4
 8008232:	2b00      	cmp	r3, #0
 8008234:	bf14      	ite	ne
 8008236:	2301      	movne	r3, #1
 8008238:	2300      	moveq	r3, #0
 800823a:	b2db      	uxtb	r3, r3
 800823c:	e02e      	b.n	800829c <HAL_DMA_IRQHandler+0x208>
 800823e:	bf00      	nop
 8008240:	24000038 	.word	0x24000038
 8008244:	1b4e81b5 	.word	0x1b4e81b5
 8008248:	40020010 	.word	0x40020010
 800824c:	40020028 	.word	0x40020028
 8008250:	40020040 	.word	0x40020040
 8008254:	40020058 	.word	0x40020058
 8008258:	40020070 	.word	0x40020070
 800825c:	40020088 	.word	0x40020088
 8008260:	400200a0 	.word	0x400200a0
 8008264:	400200b8 	.word	0x400200b8
 8008268:	40020410 	.word	0x40020410
 800826c:	40020428 	.word	0x40020428
 8008270:	40020440 	.word	0x40020440
 8008274:	40020458 	.word	0x40020458
 8008278:	40020470 	.word	0x40020470
 800827c:	40020488 	.word	0x40020488
 8008280:	400204a0 	.word	0x400204a0
 8008284:	400204b8 	.word	0x400204b8
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f003 0308 	and.w	r3, r3, #8
 8008292:	2b00      	cmp	r3, #0
 8008294:	bf14      	ite	ne
 8008296:	2301      	movne	r3, #1
 8008298:	2300      	moveq	r3, #0
 800829a:	b2db      	uxtb	r3, r3
 800829c:	2b00      	cmp	r3, #0
 800829e:	d015      	beq.n	80082cc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f022 0204 	bic.w	r2, r2, #4
 80082ae:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082b4:	f003 031f 	and.w	r3, r3, #31
 80082b8:	2208      	movs	r2, #8
 80082ba:	409a      	lsls	r2, r3
 80082bc:	6a3b      	ldr	r3, [r7, #32]
 80082be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082c4:	f043 0201 	orr.w	r2, r3, #1
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082d0:	f003 031f 	and.w	r3, r3, #31
 80082d4:	69ba      	ldr	r2, [r7, #24]
 80082d6:	fa22 f303 	lsr.w	r3, r2, r3
 80082da:	f003 0301 	and.w	r3, r3, #1
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d06e      	beq.n	80083c0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a69      	ldr	r2, [pc, #420]	@ (800848c <HAL_DMA_IRQHandler+0x3f8>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d04a      	beq.n	8008382 <HAL_DMA_IRQHandler+0x2ee>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a67      	ldr	r2, [pc, #412]	@ (8008490 <HAL_DMA_IRQHandler+0x3fc>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d045      	beq.n	8008382 <HAL_DMA_IRQHandler+0x2ee>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a66      	ldr	r2, [pc, #408]	@ (8008494 <HAL_DMA_IRQHandler+0x400>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d040      	beq.n	8008382 <HAL_DMA_IRQHandler+0x2ee>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a64      	ldr	r2, [pc, #400]	@ (8008498 <HAL_DMA_IRQHandler+0x404>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d03b      	beq.n	8008382 <HAL_DMA_IRQHandler+0x2ee>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a63      	ldr	r2, [pc, #396]	@ (800849c <HAL_DMA_IRQHandler+0x408>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d036      	beq.n	8008382 <HAL_DMA_IRQHandler+0x2ee>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a61      	ldr	r2, [pc, #388]	@ (80084a0 <HAL_DMA_IRQHandler+0x40c>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d031      	beq.n	8008382 <HAL_DMA_IRQHandler+0x2ee>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a60      	ldr	r2, [pc, #384]	@ (80084a4 <HAL_DMA_IRQHandler+0x410>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d02c      	beq.n	8008382 <HAL_DMA_IRQHandler+0x2ee>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a5e      	ldr	r2, [pc, #376]	@ (80084a8 <HAL_DMA_IRQHandler+0x414>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d027      	beq.n	8008382 <HAL_DMA_IRQHandler+0x2ee>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a5d      	ldr	r2, [pc, #372]	@ (80084ac <HAL_DMA_IRQHandler+0x418>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d022      	beq.n	8008382 <HAL_DMA_IRQHandler+0x2ee>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a5b      	ldr	r2, [pc, #364]	@ (80084b0 <HAL_DMA_IRQHandler+0x41c>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d01d      	beq.n	8008382 <HAL_DMA_IRQHandler+0x2ee>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a5a      	ldr	r2, [pc, #360]	@ (80084b4 <HAL_DMA_IRQHandler+0x420>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d018      	beq.n	8008382 <HAL_DMA_IRQHandler+0x2ee>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a58      	ldr	r2, [pc, #352]	@ (80084b8 <HAL_DMA_IRQHandler+0x424>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d013      	beq.n	8008382 <HAL_DMA_IRQHandler+0x2ee>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a57      	ldr	r2, [pc, #348]	@ (80084bc <HAL_DMA_IRQHandler+0x428>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d00e      	beq.n	8008382 <HAL_DMA_IRQHandler+0x2ee>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a55      	ldr	r2, [pc, #340]	@ (80084c0 <HAL_DMA_IRQHandler+0x42c>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d009      	beq.n	8008382 <HAL_DMA_IRQHandler+0x2ee>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a54      	ldr	r2, [pc, #336]	@ (80084c4 <HAL_DMA_IRQHandler+0x430>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d004      	beq.n	8008382 <HAL_DMA_IRQHandler+0x2ee>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a52      	ldr	r2, [pc, #328]	@ (80084c8 <HAL_DMA_IRQHandler+0x434>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d10a      	bne.n	8008398 <HAL_DMA_IRQHandler+0x304>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	695b      	ldr	r3, [r3, #20]
 8008388:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800838c:	2b00      	cmp	r3, #0
 800838e:	bf14      	ite	ne
 8008390:	2301      	movne	r3, #1
 8008392:	2300      	moveq	r3, #0
 8008394:	b2db      	uxtb	r3, r3
 8008396:	e003      	b.n	80083a0 <HAL_DMA_IRQHandler+0x30c>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	2300      	movs	r3, #0
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00d      	beq.n	80083c0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083a8:	f003 031f 	and.w	r3, r3, #31
 80083ac:	2201      	movs	r2, #1
 80083ae:	409a      	lsls	r2, r3
 80083b0:	6a3b      	ldr	r3, [r7, #32]
 80083b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083b8:	f043 0202 	orr.w	r2, r3, #2
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083c4:	f003 031f 	and.w	r3, r3, #31
 80083c8:	2204      	movs	r2, #4
 80083ca:	409a      	lsls	r2, r3
 80083cc:	69bb      	ldr	r3, [r7, #24]
 80083ce:	4013      	ands	r3, r2
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	f000 808f 	beq.w	80084f4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a2c      	ldr	r2, [pc, #176]	@ (800848c <HAL_DMA_IRQHandler+0x3f8>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d04a      	beq.n	8008476 <HAL_DMA_IRQHandler+0x3e2>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a2a      	ldr	r2, [pc, #168]	@ (8008490 <HAL_DMA_IRQHandler+0x3fc>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d045      	beq.n	8008476 <HAL_DMA_IRQHandler+0x3e2>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a29      	ldr	r2, [pc, #164]	@ (8008494 <HAL_DMA_IRQHandler+0x400>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d040      	beq.n	8008476 <HAL_DMA_IRQHandler+0x3e2>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a27      	ldr	r2, [pc, #156]	@ (8008498 <HAL_DMA_IRQHandler+0x404>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d03b      	beq.n	8008476 <HAL_DMA_IRQHandler+0x3e2>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a26      	ldr	r2, [pc, #152]	@ (800849c <HAL_DMA_IRQHandler+0x408>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d036      	beq.n	8008476 <HAL_DMA_IRQHandler+0x3e2>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a24      	ldr	r2, [pc, #144]	@ (80084a0 <HAL_DMA_IRQHandler+0x40c>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d031      	beq.n	8008476 <HAL_DMA_IRQHandler+0x3e2>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a23      	ldr	r2, [pc, #140]	@ (80084a4 <HAL_DMA_IRQHandler+0x410>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d02c      	beq.n	8008476 <HAL_DMA_IRQHandler+0x3e2>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a21      	ldr	r2, [pc, #132]	@ (80084a8 <HAL_DMA_IRQHandler+0x414>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d027      	beq.n	8008476 <HAL_DMA_IRQHandler+0x3e2>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a20      	ldr	r2, [pc, #128]	@ (80084ac <HAL_DMA_IRQHandler+0x418>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d022      	beq.n	8008476 <HAL_DMA_IRQHandler+0x3e2>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a1e      	ldr	r2, [pc, #120]	@ (80084b0 <HAL_DMA_IRQHandler+0x41c>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d01d      	beq.n	8008476 <HAL_DMA_IRQHandler+0x3e2>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a1d      	ldr	r2, [pc, #116]	@ (80084b4 <HAL_DMA_IRQHandler+0x420>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d018      	beq.n	8008476 <HAL_DMA_IRQHandler+0x3e2>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a1b      	ldr	r2, [pc, #108]	@ (80084b8 <HAL_DMA_IRQHandler+0x424>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d013      	beq.n	8008476 <HAL_DMA_IRQHandler+0x3e2>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a1a      	ldr	r2, [pc, #104]	@ (80084bc <HAL_DMA_IRQHandler+0x428>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d00e      	beq.n	8008476 <HAL_DMA_IRQHandler+0x3e2>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a18      	ldr	r2, [pc, #96]	@ (80084c0 <HAL_DMA_IRQHandler+0x42c>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d009      	beq.n	8008476 <HAL_DMA_IRQHandler+0x3e2>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a17      	ldr	r2, [pc, #92]	@ (80084c4 <HAL_DMA_IRQHandler+0x430>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d004      	beq.n	8008476 <HAL_DMA_IRQHandler+0x3e2>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a15      	ldr	r2, [pc, #84]	@ (80084c8 <HAL_DMA_IRQHandler+0x434>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d12a      	bne.n	80084cc <HAL_DMA_IRQHandler+0x438>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f003 0302 	and.w	r3, r3, #2
 8008480:	2b00      	cmp	r3, #0
 8008482:	bf14      	ite	ne
 8008484:	2301      	movne	r3, #1
 8008486:	2300      	moveq	r3, #0
 8008488:	b2db      	uxtb	r3, r3
 800848a:	e023      	b.n	80084d4 <HAL_DMA_IRQHandler+0x440>
 800848c:	40020010 	.word	0x40020010
 8008490:	40020028 	.word	0x40020028
 8008494:	40020040 	.word	0x40020040
 8008498:	40020058 	.word	0x40020058
 800849c:	40020070 	.word	0x40020070
 80084a0:	40020088 	.word	0x40020088
 80084a4:	400200a0 	.word	0x400200a0
 80084a8:	400200b8 	.word	0x400200b8
 80084ac:	40020410 	.word	0x40020410
 80084b0:	40020428 	.word	0x40020428
 80084b4:	40020440 	.word	0x40020440
 80084b8:	40020458 	.word	0x40020458
 80084bc:	40020470 	.word	0x40020470
 80084c0:	40020488 	.word	0x40020488
 80084c4:	400204a0 	.word	0x400204a0
 80084c8:	400204b8 	.word	0x400204b8
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	2300      	movs	r3, #0
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d00d      	beq.n	80084f4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084dc:	f003 031f 	and.w	r3, r3, #31
 80084e0:	2204      	movs	r2, #4
 80084e2:	409a      	lsls	r2, r3
 80084e4:	6a3b      	ldr	r3, [r7, #32]
 80084e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084ec:	f043 0204 	orr.w	r2, r3, #4
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084f8:	f003 031f 	and.w	r3, r3, #31
 80084fc:	2210      	movs	r2, #16
 80084fe:	409a      	lsls	r2, r3
 8008500:	69bb      	ldr	r3, [r7, #24]
 8008502:	4013      	ands	r3, r2
 8008504:	2b00      	cmp	r3, #0
 8008506:	f000 80a6 	beq.w	8008656 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a85      	ldr	r2, [pc, #532]	@ (8008724 <HAL_DMA_IRQHandler+0x690>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d04a      	beq.n	80085aa <HAL_DMA_IRQHandler+0x516>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a83      	ldr	r2, [pc, #524]	@ (8008728 <HAL_DMA_IRQHandler+0x694>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d045      	beq.n	80085aa <HAL_DMA_IRQHandler+0x516>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a82      	ldr	r2, [pc, #520]	@ (800872c <HAL_DMA_IRQHandler+0x698>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d040      	beq.n	80085aa <HAL_DMA_IRQHandler+0x516>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a80      	ldr	r2, [pc, #512]	@ (8008730 <HAL_DMA_IRQHandler+0x69c>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d03b      	beq.n	80085aa <HAL_DMA_IRQHandler+0x516>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a7f      	ldr	r2, [pc, #508]	@ (8008734 <HAL_DMA_IRQHandler+0x6a0>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d036      	beq.n	80085aa <HAL_DMA_IRQHandler+0x516>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a7d      	ldr	r2, [pc, #500]	@ (8008738 <HAL_DMA_IRQHandler+0x6a4>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d031      	beq.n	80085aa <HAL_DMA_IRQHandler+0x516>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a7c      	ldr	r2, [pc, #496]	@ (800873c <HAL_DMA_IRQHandler+0x6a8>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d02c      	beq.n	80085aa <HAL_DMA_IRQHandler+0x516>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a7a      	ldr	r2, [pc, #488]	@ (8008740 <HAL_DMA_IRQHandler+0x6ac>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d027      	beq.n	80085aa <HAL_DMA_IRQHandler+0x516>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a79      	ldr	r2, [pc, #484]	@ (8008744 <HAL_DMA_IRQHandler+0x6b0>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d022      	beq.n	80085aa <HAL_DMA_IRQHandler+0x516>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a77      	ldr	r2, [pc, #476]	@ (8008748 <HAL_DMA_IRQHandler+0x6b4>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d01d      	beq.n	80085aa <HAL_DMA_IRQHandler+0x516>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a76      	ldr	r2, [pc, #472]	@ (800874c <HAL_DMA_IRQHandler+0x6b8>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d018      	beq.n	80085aa <HAL_DMA_IRQHandler+0x516>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a74      	ldr	r2, [pc, #464]	@ (8008750 <HAL_DMA_IRQHandler+0x6bc>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d013      	beq.n	80085aa <HAL_DMA_IRQHandler+0x516>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a73      	ldr	r2, [pc, #460]	@ (8008754 <HAL_DMA_IRQHandler+0x6c0>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d00e      	beq.n	80085aa <HAL_DMA_IRQHandler+0x516>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a71      	ldr	r2, [pc, #452]	@ (8008758 <HAL_DMA_IRQHandler+0x6c4>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d009      	beq.n	80085aa <HAL_DMA_IRQHandler+0x516>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a70      	ldr	r2, [pc, #448]	@ (800875c <HAL_DMA_IRQHandler+0x6c8>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d004      	beq.n	80085aa <HAL_DMA_IRQHandler+0x516>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a6e      	ldr	r2, [pc, #440]	@ (8008760 <HAL_DMA_IRQHandler+0x6cc>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d10a      	bne.n	80085c0 <HAL_DMA_IRQHandler+0x52c>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f003 0308 	and.w	r3, r3, #8
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	bf14      	ite	ne
 80085b8:	2301      	movne	r3, #1
 80085ba:	2300      	moveq	r3, #0
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	e009      	b.n	80085d4 <HAL_DMA_IRQHandler+0x540>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f003 0304 	and.w	r3, r3, #4
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	bf14      	ite	ne
 80085ce:	2301      	movne	r3, #1
 80085d0:	2300      	moveq	r3, #0
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d03e      	beq.n	8008656 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085dc:	f003 031f 	and.w	r3, r3, #31
 80085e0:	2210      	movs	r2, #16
 80085e2:	409a      	lsls	r2, r3
 80085e4:	6a3b      	ldr	r3, [r7, #32]
 80085e6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d018      	beq.n	8008628 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008600:	2b00      	cmp	r3, #0
 8008602:	d108      	bne.n	8008616 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008608:	2b00      	cmp	r3, #0
 800860a:	d024      	beq.n	8008656 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	4798      	blx	r3
 8008614:	e01f      	b.n	8008656 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800861a:	2b00      	cmp	r3, #0
 800861c:	d01b      	beq.n	8008656 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	4798      	blx	r3
 8008626:	e016      	b.n	8008656 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008632:	2b00      	cmp	r3, #0
 8008634:	d107      	bne.n	8008646 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f022 0208 	bic.w	r2, r2, #8
 8008644:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800864a:	2b00      	cmp	r3, #0
 800864c:	d003      	beq.n	8008656 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800865a:	f003 031f 	and.w	r3, r3, #31
 800865e:	2220      	movs	r2, #32
 8008660:	409a      	lsls	r2, r3
 8008662:	69bb      	ldr	r3, [r7, #24]
 8008664:	4013      	ands	r3, r2
 8008666:	2b00      	cmp	r3, #0
 8008668:	f000 8110 	beq.w	800888c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a2c      	ldr	r2, [pc, #176]	@ (8008724 <HAL_DMA_IRQHandler+0x690>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d04a      	beq.n	800870c <HAL_DMA_IRQHandler+0x678>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a2b      	ldr	r2, [pc, #172]	@ (8008728 <HAL_DMA_IRQHandler+0x694>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d045      	beq.n	800870c <HAL_DMA_IRQHandler+0x678>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a29      	ldr	r2, [pc, #164]	@ (800872c <HAL_DMA_IRQHandler+0x698>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d040      	beq.n	800870c <HAL_DMA_IRQHandler+0x678>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a28      	ldr	r2, [pc, #160]	@ (8008730 <HAL_DMA_IRQHandler+0x69c>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d03b      	beq.n	800870c <HAL_DMA_IRQHandler+0x678>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a26      	ldr	r2, [pc, #152]	@ (8008734 <HAL_DMA_IRQHandler+0x6a0>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d036      	beq.n	800870c <HAL_DMA_IRQHandler+0x678>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a25      	ldr	r2, [pc, #148]	@ (8008738 <HAL_DMA_IRQHandler+0x6a4>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d031      	beq.n	800870c <HAL_DMA_IRQHandler+0x678>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a23      	ldr	r2, [pc, #140]	@ (800873c <HAL_DMA_IRQHandler+0x6a8>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d02c      	beq.n	800870c <HAL_DMA_IRQHandler+0x678>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a22      	ldr	r2, [pc, #136]	@ (8008740 <HAL_DMA_IRQHandler+0x6ac>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d027      	beq.n	800870c <HAL_DMA_IRQHandler+0x678>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a20      	ldr	r2, [pc, #128]	@ (8008744 <HAL_DMA_IRQHandler+0x6b0>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d022      	beq.n	800870c <HAL_DMA_IRQHandler+0x678>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a1f      	ldr	r2, [pc, #124]	@ (8008748 <HAL_DMA_IRQHandler+0x6b4>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d01d      	beq.n	800870c <HAL_DMA_IRQHandler+0x678>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a1d      	ldr	r2, [pc, #116]	@ (800874c <HAL_DMA_IRQHandler+0x6b8>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d018      	beq.n	800870c <HAL_DMA_IRQHandler+0x678>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a1c      	ldr	r2, [pc, #112]	@ (8008750 <HAL_DMA_IRQHandler+0x6bc>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d013      	beq.n	800870c <HAL_DMA_IRQHandler+0x678>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a1a      	ldr	r2, [pc, #104]	@ (8008754 <HAL_DMA_IRQHandler+0x6c0>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d00e      	beq.n	800870c <HAL_DMA_IRQHandler+0x678>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a19      	ldr	r2, [pc, #100]	@ (8008758 <HAL_DMA_IRQHandler+0x6c4>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d009      	beq.n	800870c <HAL_DMA_IRQHandler+0x678>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a17      	ldr	r2, [pc, #92]	@ (800875c <HAL_DMA_IRQHandler+0x6c8>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d004      	beq.n	800870c <HAL_DMA_IRQHandler+0x678>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a16      	ldr	r2, [pc, #88]	@ (8008760 <HAL_DMA_IRQHandler+0x6cc>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d12b      	bne.n	8008764 <HAL_DMA_IRQHandler+0x6d0>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f003 0310 	and.w	r3, r3, #16
 8008716:	2b00      	cmp	r3, #0
 8008718:	bf14      	ite	ne
 800871a:	2301      	movne	r3, #1
 800871c:	2300      	moveq	r3, #0
 800871e:	b2db      	uxtb	r3, r3
 8008720:	e02a      	b.n	8008778 <HAL_DMA_IRQHandler+0x6e4>
 8008722:	bf00      	nop
 8008724:	40020010 	.word	0x40020010
 8008728:	40020028 	.word	0x40020028
 800872c:	40020040 	.word	0x40020040
 8008730:	40020058 	.word	0x40020058
 8008734:	40020070 	.word	0x40020070
 8008738:	40020088 	.word	0x40020088
 800873c:	400200a0 	.word	0x400200a0
 8008740:	400200b8 	.word	0x400200b8
 8008744:	40020410 	.word	0x40020410
 8008748:	40020428 	.word	0x40020428
 800874c:	40020440 	.word	0x40020440
 8008750:	40020458 	.word	0x40020458
 8008754:	40020470 	.word	0x40020470
 8008758:	40020488 	.word	0x40020488
 800875c:	400204a0 	.word	0x400204a0
 8008760:	400204b8 	.word	0x400204b8
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f003 0302 	and.w	r3, r3, #2
 800876e:	2b00      	cmp	r3, #0
 8008770:	bf14      	ite	ne
 8008772:	2301      	movne	r3, #1
 8008774:	2300      	moveq	r3, #0
 8008776:	b2db      	uxtb	r3, r3
 8008778:	2b00      	cmp	r3, #0
 800877a:	f000 8087 	beq.w	800888c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008782:	f003 031f 	and.w	r3, r3, #31
 8008786:	2220      	movs	r2, #32
 8008788:	409a      	lsls	r2, r3
 800878a:	6a3b      	ldr	r3, [r7, #32]
 800878c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008794:	b2db      	uxtb	r3, r3
 8008796:	2b04      	cmp	r3, #4
 8008798:	d139      	bne.n	800880e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f022 0216 	bic.w	r2, r2, #22
 80087a8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	695a      	ldr	r2, [r3, #20]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80087b8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d103      	bne.n	80087ca <HAL_DMA_IRQHandler+0x736>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d007      	beq.n	80087da <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f022 0208 	bic.w	r2, r2, #8
 80087d8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087de:	f003 031f 	and.w	r3, r3, #31
 80087e2:	223f      	movs	r2, #63	@ 0x3f
 80087e4:	409a      	lsls	r2, r3
 80087e6:	6a3b      	ldr	r3, [r7, #32]
 80087e8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2201      	movs	r2, #1
 80087ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087fe:	2b00      	cmp	r3, #0
 8008800:	f000 834a 	beq.w	8008e98 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	4798      	blx	r3
          }
          return;
 800880c:	e344      	b.n	8008e98 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008818:	2b00      	cmp	r3, #0
 800881a:	d018      	beq.n	800884e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008826:	2b00      	cmp	r3, #0
 8008828:	d108      	bne.n	800883c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800882e:	2b00      	cmp	r3, #0
 8008830:	d02c      	beq.n	800888c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	4798      	blx	r3
 800883a:	e027      	b.n	800888c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008840:	2b00      	cmp	r3, #0
 8008842:	d023      	beq.n	800888c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	4798      	blx	r3
 800884c:	e01e      	b.n	800888c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008858:	2b00      	cmp	r3, #0
 800885a:	d10f      	bne.n	800887c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f022 0210 	bic.w	r2, r2, #16
 800886a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2201      	movs	r2, #1
 8008870:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008880:	2b00      	cmp	r3, #0
 8008882:	d003      	beq.n	800888c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008890:	2b00      	cmp	r3, #0
 8008892:	f000 8306 	beq.w	8008ea2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800889a:	f003 0301 	and.w	r3, r3, #1
 800889e:	2b00      	cmp	r3, #0
 80088a0:	f000 8088 	beq.w	80089b4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2204      	movs	r2, #4
 80088a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a7a      	ldr	r2, [pc, #488]	@ (8008a9c <HAL_DMA_IRQHandler+0xa08>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d04a      	beq.n	800894c <HAL_DMA_IRQHandler+0x8b8>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a79      	ldr	r2, [pc, #484]	@ (8008aa0 <HAL_DMA_IRQHandler+0xa0c>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d045      	beq.n	800894c <HAL_DMA_IRQHandler+0x8b8>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a77      	ldr	r2, [pc, #476]	@ (8008aa4 <HAL_DMA_IRQHandler+0xa10>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d040      	beq.n	800894c <HAL_DMA_IRQHandler+0x8b8>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a76      	ldr	r2, [pc, #472]	@ (8008aa8 <HAL_DMA_IRQHandler+0xa14>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d03b      	beq.n	800894c <HAL_DMA_IRQHandler+0x8b8>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a74      	ldr	r2, [pc, #464]	@ (8008aac <HAL_DMA_IRQHandler+0xa18>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d036      	beq.n	800894c <HAL_DMA_IRQHandler+0x8b8>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a73      	ldr	r2, [pc, #460]	@ (8008ab0 <HAL_DMA_IRQHandler+0xa1c>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d031      	beq.n	800894c <HAL_DMA_IRQHandler+0x8b8>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a71      	ldr	r2, [pc, #452]	@ (8008ab4 <HAL_DMA_IRQHandler+0xa20>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d02c      	beq.n	800894c <HAL_DMA_IRQHandler+0x8b8>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a70      	ldr	r2, [pc, #448]	@ (8008ab8 <HAL_DMA_IRQHandler+0xa24>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d027      	beq.n	800894c <HAL_DMA_IRQHandler+0x8b8>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a6e      	ldr	r2, [pc, #440]	@ (8008abc <HAL_DMA_IRQHandler+0xa28>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d022      	beq.n	800894c <HAL_DMA_IRQHandler+0x8b8>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a6d      	ldr	r2, [pc, #436]	@ (8008ac0 <HAL_DMA_IRQHandler+0xa2c>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d01d      	beq.n	800894c <HAL_DMA_IRQHandler+0x8b8>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a6b      	ldr	r2, [pc, #428]	@ (8008ac4 <HAL_DMA_IRQHandler+0xa30>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d018      	beq.n	800894c <HAL_DMA_IRQHandler+0x8b8>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4a6a      	ldr	r2, [pc, #424]	@ (8008ac8 <HAL_DMA_IRQHandler+0xa34>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d013      	beq.n	800894c <HAL_DMA_IRQHandler+0x8b8>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a68      	ldr	r2, [pc, #416]	@ (8008acc <HAL_DMA_IRQHandler+0xa38>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d00e      	beq.n	800894c <HAL_DMA_IRQHandler+0x8b8>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a67      	ldr	r2, [pc, #412]	@ (8008ad0 <HAL_DMA_IRQHandler+0xa3c>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d009      	beq.n	800894c <HAL_DMA_IRQHandler+0x8b8>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a65      	ldr	r2, [pc, #404]	@ (8008ad4 <HAL_DMA_IRQHandler+0xa40>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d004      	beq.n	800894c <HAL_DMA_IRQHandler+0x8b8>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a64      	ldr	r2, [pc, #400]	@ (8008ad8 <HAL_DMA_IRQHandler+0xa44>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d108      	bne.n	800895e <HAL_DMA_IRQHandler+0x8ca>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	681a      	ldr	r2, [r3, #0]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f022 0201 	bic.w	r2, r2, #1
 800895a:	601a      	str	r2, [r3, #0]
 800895c:	e007      	b.n	800896e <HAL_DMA_IRQHandler+0x8da>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f022 0201 	bic.w	r2, r2, #1
 800896c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	3301      	adds	r3, #1
 8008972:	60fb      	str	r3, [r7, #12]
 8008974:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008976:	429a      	cmp	r2, r3
 8008978:	d307      	bcc.n	800898a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f003 0301 	and.w	r3, r3, #1
 8008984:	2b00      	cmp	r3, #0
 8008986:	d1f2      	bne.n	800896e <HAL_DMA_IRQHandler+0x8da>
 8008988:	e000      	b.n	800898c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800898a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f003 0301 	and.w	r3, r3, #1
 8008996:	2b00      	cmp	r3, #0
 8008998:	d004      	beq.n	80089a4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2203      	movs	r2, #3
 800899e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80089a2:	e003      	b.n	80089ac <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2201      	movs	r2, #1
 80089a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2200      	movs	r2, #0
 80089b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	f000 8272 	beq.w	8008ea2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	4798      	blx	r3
 80089c6:	e26c      	b.n	8008ea2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a43      	ldr	r2, [pc, #268]	@ (8008adc <HAL_DMA_IRQHandler+0xa48>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d022      	beq.n	8008a18 <HAL_DMA_IRQHandler+0x984>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a42      	ldr	r2, [pc, #264]	@ (8008ae0 <HAL_DMA_IRQHandler+0xa4c>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d01d      	beq.n	8008a18 <HAL_DMA_IRQHandler+0x984>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a40      	ldr	r2, [pc, #256]	@ (8008ae4 <HAL_DMA_IRQHandler+0xa50>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d018      	beq.n	8008a18 <HAL_DMA_IRQHandler+0x984>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a3f      	ldr	r2, [pc, #252]	@ (8008ae8 <HAL_DMA_IRQHandler+0xa54>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d013      	beq.n	8008a18 <HAL_DMA_IRQHandler+0x984>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a3d      	ldr	r2, [pc, #244]	@ (8008aec <HAL_DMA_IRQHandler+0xa58>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d00e      	beq.n	8008a18 <HAL_DMA_IRQHandler+0x984>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a3c      	ldr	r2, [pc, #240]	@ (8008af0 <HAL_DMA_IRQHandler+0xa5c>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d009      	beq.n	8008a18 <HAL_DMA_IRQHandler+0x984>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a3a      	ldr	r2, [pc, #232]	@ (8008af4 <HAL_DMA_IRQHandler+0xa60>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d004      	beq.n	8008a18 <HAL_DMA_IRQHandler+0x984>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a39      	ldr	r2, [pc, #228]	@ (8008af8 <HAL_DMA_IRQHandler+0xa64>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d101      	bne.n	8008a1c <HAL_DMA_IRQHandler+0x988>
 8008a18:	2301      	movs	r3, #1
 8008a1a:	e000      	b.n	8008a1e <HAL_DMA_IRQHandler+0x98a>
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	f000 823f 	beq.w	8008ea2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a30:	f003 031f 	and.w	r3, r3, #31
 8008a34:	2204      	movs	r2, #4
 8008a36:	409a      	lsls	r2, r3
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	4013      	ands	r3, r2
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	f000 80cd 	beq.w	8008bdc <HAL_DMA_IRQHandler+0xb48>
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	f003 0304 	and.w	r3, r3, #4
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	f000 80c7 	beq.w	8008bdc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a52:	f003 031f 	and.w	r3, r3, #31
 8008a56:	2204      	movs	r2, #4
 8008a58:	409a      	lsls	r2, r3
 8008a5a:	69fb      	ldr	r3, [r7, #28]
 8008a5c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d049      	beq.n	8008afc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d109      	bne.n	8008a86 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	f000 8210 	beq.w	8008e9c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008a84:	e20a      	b.n	8008e9c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	f000 8206 	beq.w	8008e9c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008a98:	e200      	b.n	8008e9c <HAL_DMA_IRQHandler+0xe08>
 8008a9a:	bf00      	nop
 8008a9c:	40020010 	.word	0x40020010
 8008aa0:	40020028 	.word	0x40020028
 8008aa4:	40020040 	.word	0x40020040
 8008aa8:	40020058 	.word	0x40020058
 8008aac:	40020070 	.word	0x40020070
 8008ab0:	40020088 	.word	0x40020088
 8008ab4:	400200a0 	.word	0x400200a0
 8008ab8:	400200b8 	.word	0x400200b8
 8008abc:	40020410 	.word	0x40020410
 8008ac0:	40020428 	.word	0x40020428
 8008ac4:	40020440 	.word	0x40020440
 8008ac8:	40020458 	.word	0x40020458
 8008acc:	40020470 	.word	0x40020470
 8008ad0:	40020488 	.word	0x40020488
 8008ad4:	400204a0 	.word	0x400204a0
 8008ad8:	400204b8 	.word	0x400204b8
 8008adc:	58025408 	.word	0x58025408
 8008ae0:	5802541c 	.word	0x5802541c
 8008ae4:	58025430 	.word	0x58025430
 8008ae8:	58025444 	.word	0x58025444
 8008aec:	58025458 	.word	0x58025458
 8008af0:	5802546c 	.word	0x5802546c
 8008af4:	58025480 	.word	0x58025480
 8008af8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	f003 0320 	and.w	r3, r3, #32
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d160      	bne.n	8008bc8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a7f      	ldr	r2, [pc, #508]	@ (8008d08 <HAL_DMA_IRQHandler+0xc74>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d04a      	beq.n	8008ba6 <HAL_DMA_IRQHandler+0xb12>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a7d      	ldr	r2, [pc, #500]	@ (8008d0c <HAL_DMA_IRQHandler+0xc78>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d045      	beq.n	8008ba6 <HAL_DMA_IRQHandler+0xb12>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a7c      	ldr	r2, [pc, #496]	@ (8008d10 <HAL_DMA_IRQHandler+0xc7c>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d040      	beq.n	8008ba6 <HAL_DMA_IRQHandler+0xb12>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a7a      	ldr	r2, [pc, #488]	@ (8008d14 <HAL_DMA_IRQHandler+0xc80>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d03b      	beq.n	8008ba6 <HAL_DMA_IRQHandler+0xb12>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a79      	ldr	r2, [pc, #484]	@ (8008d18 <HAL_DMA_IRQHandler+0xc84>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d036      	beq.n	8008ba6 <HAL_DMA_IRQHandler+0xb12>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a77      	ldr	r2, [pc, #476]	@ (8008d1c <HAL_DMA_IRQHandler+0xc88>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d031      	beq.n	8008ba6 <HAL_DMA_IRQHandler+0xb12>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a76      	ldr	r2, [pc, #472]	@ (8008d20 <HAL_DMA_IRQHandler+0xc8c>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d02c      	beq.n	8008ba6 <HAL_DMA_IRQHandler+0xb12>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a74      	ldr	r2, [pc, #464]	@ (8008d24 <HAL_DMA_IRQHandler+0xc90>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d027      	beq.n	8008ba6 <HAL_DMA_IRQHandler+0xb12>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a73      	ldr	r2, [pc, #460]	@ (8008d28 <HAL_DMA_IRQHandler+0xc94>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d022      	beq.n	8008ba6 <HAL_DMA_IRQHandler+0xb12>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a71      	ldr	r2, [pc, #452]	@ (8008d2c <HAL_DMA_IRQHandler+0xc98>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d01d      	beq.n	8008ba6 <HAL_DMA_IRQHandler+0xb12>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a70      	ldr	r2, [pc, #448]	@ (8008d30 <HAL_DMA_IRQHandler+0xc9c>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d018      	beq.n	8008ba6 <HAL_DMA_IRQHandler+0xb12>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a6e      	ldr	r2, [pc, #440]	@ (8008d34 <HAL_DMA_IRQHandler+0xca0>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d013      	beq.n	8008ba6 <HAL_DMA_IRQHandler+0xb12>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a6d      	ldr	r2, [pc, #436]	@ (8008d38 <HAL_DMA_IRQHandler+0xca4>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d00e      	beq.n	8008ba6 <HAL_DMA_IRQHandler+0xb12>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a6b      	ldr	r2, [pc, #428]	@ (8008d3c <HAL_DMA_IRQHandler+0xca8>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d009      	beq.n	8008ba6 <HAL_DMA_IRQHandler+0xb12>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a6a      	ldr	r2, [pc, #424]	@ (8008d40 <HAL_DMA_IRQHandler+0xcac>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d004      	beq.n	8008ba6 <HAL_DMA_IRQHandler+0xb12>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a68      	ldr	r2, [pc, #416]	@ (8008d44 <HAL_DMA_IRQHandler+0xcb0>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d108      	bne.n	8008bb8 <HAL_DMA_IRQHandler+0xb24>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f022 0208 	bic.w	r2, r2, #8
 8008bb4:	601a      	str	r2, [r3, #0]
 8008bb6:	e007      	b.n	8008bc8 <HAL_DMA_IRQHandler+0xb34>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	681a      	ldr	r2, [r3, #0]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f022 0204 	bic.w	r2, r2, #4
 8008bc6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	f000 8165 	beq.w	8008e9c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008bda:	e15f      	b.n	8008e9c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008be0:	f003 031f 	and.w	r3, r3, #31
 8008be4:	2202      	movs	r2, #2
 8008be6:	409a      	lsls	r2, r3
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	4013      	ands	r3, r2
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	f000 80c5 	beq.w	8008d7c <HAL_DMA_IRQHandler+0xce8>
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	f003 0302 	and.w	r3, r3, #2
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	f000 80bf 	beq.w	8008d7c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c02:	f003 031f 	and.w	r3, r3, #31
 8008c06:	2202      	movs	r2, #2
 8008c08:	409a      	lsls	r2, r3
 8008c0a:	69fb      	ldr	r3, [r7, #28]
 8008c0c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d018      	beq.n	8008c4a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d109      	bne.n	8008c36 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	f000 813a 	beq.w	8008ea0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008c34:	e134      	b.n	8008ea0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	f000 8130 	beq.w	8008ea0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008c48:	e12a      	b.n	8008ea0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	f003 0320 	and.w	r3, r3, #32
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	f040 8089 	bne.w	8008d68 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a2b      	ldr	r2, [pc, #172]	@ (8008d08 <HAL_DMA_IRQHandler+0xc74>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d04a      	beq.n	8008cf6 <HAL_DMA_IRQHandler+0xc62>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a29      	ldr	r2, [pc, #164]	@ (8008d0c <HAL_DMA_IRQHandler+0xc78>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d045      	beq.n	8008cf6 <HAL_DMA_IRQHandler+0xc62>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a28      	ldr	r2, [pc, #160]	@ (8008d10 <HAL_DMA_IRQHandler+0xc7c>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d040      	beq.n	8008cf6 <HAL_DMA_IRQHandler+0xc62>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a26      	ldr	r2, [pc, #152]	@ (8008d14 <HAL_DMA_IRQHandler+0xc80>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d03b      	beq.n	8008cf6 <HAL_DMA_IRQHandler+0xc62>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a25      	ldr	r2, [pc, #148]	@ (8008d18 <HAL_DMA_IRQHandler+0xc84>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d036      	beq.n	8008cf6 <HAL_DMA_IRQHandler+0xc62>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a23      	ldr	r2, [pc, #140]	@ (8008d1c <HAL_DMA_IRQHandler+0xc88>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d031      	beq.n	8008cf6 <HAL_DMA_IRQHandler+0xc62>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4a22      	ldr	r2, [pc, #136]	@ (8008d20 <HAL_DMA_IRQHandler+0xc8c>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d02c      	beq.n	8008cf6 <HAL_DMA_IRQHandler+0xc62>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a20      	ldr	r2, [pc, #128]	@ (8008d24 <HAL_DMA_IRQHandler+0xc90>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d027      	beq.n	8008cf6 <HAL_DMA_IRQHandler+0xc62>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4a1f      	ldr	r2, [pc, #124]	@ (8008d28 <HAL_DMA_IRQHandler+0xc94>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d022      	beq.n	8008cf6 <HAL_DMA_IRQHandler+0xc62>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a1d      	ldr	r2, [pc, #116]	@ (8008d2c <HAL_DMA_IRQHandler+0xc98>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d01d      	beq.n	8008cf6 <HAL_DMA_IRQHandler+0xc62>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a1c      	ldr	r2, [pc, #112]	@ (8008d30 <HAL_DMA_IRQHandler+0xc9c>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d018      	beq.n	8008cf6 <HAL_DMA_IRQHandler+0xc62>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4a1a      	ldr	r2, [pc, #104]	@ (8008d34 <HAL_DMA_IRQHandler+0xca0>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d013      	beq.n	8008cf6 <HAL_DMA_IRQHandler+0xc62>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	4a19      	ldr	r2, [pc, #100]	@ (8008d38 <HAL_DMA_IRQHandler+0xca4>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d00e      	beq.n	8008cf6 <HAL_DMA_IRQHandler+0xc62>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	4a17      	ldr	r2, [pc, #92]	@ (8008d3c <HAL_DMA_IRQHandler+0xca8>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d009      	beq.n	8008cf6 <HAL_DMA_IRQHandler+0xc62>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a16      	ldr	r2, [pc, #88]	@ (8008d40 <HAL_DMA_IRQHandler+0xcac>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d004      	beq.n	8008cf6 <HAL_DMA_IRQHandler+0xc62>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	4a14      	ldr	r2, [pc, #80]	@ (8008d44 <HAL_DMA_IRQHandler+0xcb0>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d128      	bne.n	8008d48 <HAL_DMA_IRQHandler+0xcb4>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f022 0214 	bic.w	r2, r2, #20
 8008d04:	601a      	str	r2, [r3, #0]
 8008d06:	e027      	b.n	8008d58 <HAL_DMA_IRQHandler+0xcc4>
 8008d08:	40020010 	.word	0x40020010
 8008d0c:	40020028 	.word	0x40020028
 8008d10:	40020040 	.word	0x40020040
 8008d14:	40020058 	.word	0x40020058
 8008d18:	40020070 	.word	0x40020070
 8008d1c:	40020088 	.word	0x40020088
 8008d20:	400200a0 	.word	0x400200a0
 8008d24:	400200b8 	.word	0x400200b8
 8008d28:	40020410 	.word	0x40020410
 8008d2c:	40020428 	.word	0x40020428
 8008d30:	40020440 	.word	0x40020440
 8008d34:	40020458 	.word	0x40020458
 8008d38:	40020470 	.word	0x40020470
 8008d3c:	40020488 	.word	0x40020488
 8008d40:	400204a0 	.word	0x400204a0
 8008d44:	400204b8 	.word	0x400204b8
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f022 020a 	bic.w	r2, r2, #10
 8008d56:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2200      	movs	r2, #0
 8008d64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	f000 8097 	beq.w	8008ea0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008d7a:	e091      	b.n	8008ea0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d80:	f003 031f 	and.w	r3, r3, #31
 8008d84:	2208      	movs	r2, #8
 8008d86:	409a      	lsls	r2, r3
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	4013      	ands	r3, r2
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	f000 8088 	beq.w	8008ea2 <HAL_DMA_IRQHandler+0xe0e>
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	f003 0308 	and.w	r3, r3, #8
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	f000 8082 	beq.w	8008ea2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a41      	ldr	r2, [pc, #260]	@ (8008ea8 <HAL_DMA_IRQHandler+0xe14>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d04a      	beq.n	8008e3e <HAL_DMA_IRQHandler+0xdaa>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a3f      	ldr	r2, [pc, #252]	@ (8008eac <HAL_DMA_IRQHandler+0xe18>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d045      	beq.n	8008e3e <HAL_DMA_IRQHandler+0xdaa>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4a3e      	ldr	r2, [pc, #248]	@ (8008eb0 <HAL_DMA_IRQHandler+0xe1c>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d040      	beq.n	8008e3e <HAL_DMA_IRQHandler+0xdaa>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a3c      	ldr	r2, [pc, #240]	@ (8008eb4 <HAL_DMA_IRQHandler+0xe20>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d03b      	beq.n	8008e3e <HAL_DMA_IRQHandler+0xdaa>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a3b      	ldr	r2, [pc, #236]	@ (8008eb8 <HAL_DMA_IRQHandler+0xe24>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d036      	beq.n	8008e3e <HAL_DMA_IRQHandler+0xdaa>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4a39      	ldr	r2, [pc, #228]	@ (8008ebc <HAL_DMA_IRQHandler+0xe28>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d031      	beq.n	8008e3e <HAL_DMA_IRQHandler+0xdaa>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4a38      	ldr	r2, [pc, #224]	@ (8008ec0 <HAL_DMA_IRQHandler+0xe2c>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d02c      	beq.n	8008e3e <HAL_DMA_IRQHandler+0xdaa>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a36      	ldr	r2, [pc, #216]	@ (8008ec4 <HAL_DMA_IRQHandler+0xe30>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d027      	beq.n	8008e3e <HAL_DMA_IRQHandler+0xdaa>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a35      	ldr	r2, [pc, #212]	@ (8008ec8 <HAL_DMA_IRQHandler+0xe34>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d022      	beq.n	8008e3e <HAL_DMA_IRQHandler+0xdaa>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a33      	ldr	r2, [pc, #204]	@ (8008ecc <HAL_DMA_IRQHandler+0xe38>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d01d      	beq.n	8008e3e <HAL_DMA_IRQHandler+0xdaa>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a32      	ldr	r2, [pc, #200]	@ (8008ed0 <HAL_DMA_IRQHandler+0xe3c>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d018      	beq.n	8008e3e <HAL_DMA_IRQHandler+0xdaa>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a30      	ldr	r2, [pc, #192]	@ (8008ed4 <HAL_DMA_IRQHandler+0xe40>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d013      	beq.n	8008e3e <HAL_DMA_IRQHandler+0xdaa>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a2f      	ldr	r2, [pc, #188]	@ (8008ed8 <HAL_DMA_IRQHandler+0xe44>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d00e      	beq.n	8008e3e <HAL_DMA_IRQHandler+0xdaa>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a2d      	ldr	r2, [pc, #180]	@ (8008edc <HAL_DMA_IRQHandler+0xe48>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d009      	beq.n	8008e3e <HAL_DMA_IRQHandler+0xdaa>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a2c      	ldr	r2, [pc, #176]	@ (8008ee0 <HAL_DMA_IRQHandler+0xe4c>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d004      	beq.n	8008e3e <HAL_DMA_IRQHandler+0xdaa>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a2a      	ldr	r2, [pc, #168]	@ (8008ee4 <HAL_DMA_IRQHandler+0xe50>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d108      	bne.n	8008e50 <HAL_DMA_IRQHandler+0xdbc>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f022 021c 	bic.w	r2, r2, #28
 8008e4c:	601a      	str	r2, [r3, #0]
 8008e4e:	e007      	b.n	8008e60 <HAL_DMA_IRQHandler+0xdcc>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	681a      	ldr	r2, [r3, #0]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f022 020e 	bic.w	r2, r2, #14
 8008e5e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e64:	f003 031f 	and.w	r3, r3, #31
 8008e68:	2201      	movs	r2, #1
 8008e6a:	409a      	lsls	r2, r3
 8008e6c:	69fb      	ldr	r3, [r7, #28]
 8008e6e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2201      	movs	r2, #1
 8008e74:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2201      	movs	r2, #1
 8008e7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2200      	movs	r2, #0
 8008e82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d009      	beq.n	8008ea2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	4798      	blx	r3
 8008e96:	e004      	b.n	8008ea2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008e98:	bf00      	nop
 8008e9a:	e002      	b.n	8008ea2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008e9c:	bf00      	nop
 8008e9e:	e000      	b.n	8008ea2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008ea0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008ea2:	3728      	adds	r7, #40	@ 0x28
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	bd80      	pop	{r7, pc}
 8008ea8:	40020010 	.word	0x40020010
 8008eac:	40020028 	.word	0x40020028
 8008eb0:	40020040 	.word	0x40020040
 8008eb4:	40020058 	.word	0x40020058
 8008eb8:	40020070 	.word	0x40020070
 8008ebc:	40020088 	.word	0x40020088
 8008ec0:	400200a0 	.word	0x400200a0
 8008ec4:	400200b8 	.word	0x400200b8
 8008ec8:	40020410 	.word	0x40020410
 8008ecc:	40020428 	.word	0x40020428
 8008ed0:	40020440 	.word	0x40020440
 8008ed4:	40020458 	.word	0x40020458
 8008ed8:	40020470 	.word	0x40020470
 8008edc:	40020488 	.word	0x40020488
 8008ee0:	400204a0 	.word	0x400204a0
 8008ee4:	400204b8 	.word	0x400204b8

08008ee8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b087      	sub	sp, #28
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	60f8      	str	r0, [r7, #12]
 8008ef0:	60b9      	str	r1, [r7, #8]
 8008ef2:	607a      	str	r2, [r7, #4]
 8008ef4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008efa:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f00:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a7f      	ldr	r2, [pc, #508]	@ (8009104 <DMA_SetConfig+0x21c>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d072      	beq.n	8008ff2 <DMA_SetConfig+0x10a>
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a7d      	ldr	r2, [pc, #500]	@ (8009108 <DMA_SetConfig+0x220>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d06d      	beq.n	8008ff2 <DMA_SetConfig+0x10a>
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a7c      	ldr	r2, [pc, #496]	@ (800910c <DMA_SetConfig+0x224>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d068      	beq.n	8008ff2 <DMA_SetConfig+0x10a>
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a7a      	ldr	r2, [pc, #488]	@ (8009110 <DMA_SetConfig+0x228>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d063      	beq.n	8008ff2 <DMA_SetConfig+0x10a>
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a79      	ldr	r2, [pc, #484]	@ (8009114 <DMA_SetConfig+0x22c>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d05e      	beq.n	8008ff2 <DMA_SetConfig+0x10a>
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a77      	ldr	r2, [pc, #476]	@ (8009118 <DMA_SetConfig+0x230>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d059      	beq.n	8008ff2 <DMA_SetConfig+0x10a>
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a76      	ldr	r2, [pc, #472]	@ (800911c <DMA_SetConfig+0x234>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d054      	beq.n	8008ff2 <DMA_SetConfig+0x10a>
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a74      	ldr	r2, [pc, #464]	@ (8009120 <DMA_SetConfig+0x238>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d04f      	beq.n	8008ff2 <DMA_SetConfig+0x10a>
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a73      	ldr	r2, [pc, #460]	@ (8009124 <DMA_SetConfig+0x23c>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d04a      	beq.n	8008ff2 <DMA_SetConfig+0x10a>
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a71      	ldr	r2, [pc, #452]	@ (8009128 <DMA_SetConfig+0x240>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d045      	beq.n	8008ff2 <DMA_SetConfig+0x10a>
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a70      	ldr	r2, [pc, #448]	@ (800912c <DMA_SetConfig+0x244>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d040      	beq.n	8008ff2 <DMA_SetConfig+0x10a>
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a6e      	ldr	r2, [pc, #440]	@ (8009130 <DMA_SetConfig+0x248>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d03b      	beq.n	8008ff2 <DMA_SetConfig+0x10a>
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a6d      	ldr	r2, [pc, #436]	@ (8009134 <DMA_SetConfig+0x24c>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d036      	beq.n	8008ff2 <DMA_SetConfig+0x10a>
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a6b      	ldr	r2, [pc, #428]	@ (8009138 <DMA_SetConfig+0x250>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d031      	beq.n	8008ff2 <DMA_SetConfig+0x10a>
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a6a      	ldr	r2, [pc, #424]	@ (800913c <DMA_SetConfig+0x254>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d02c      	beq.n	8008ff2 <DMA_SetConfig+0x10a>
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a68      	ldr	r2, [pc, #416]	@ (8009140 <DMA_SetConfig+0x258>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d027      	beq.n	8008ff2 <DMA_SetConfig+0x10a>
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4a67      	ldr	r2, [pc, #412]	@ (8009144 <DMA_SetConfig+0x25c>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d022      	beq.n	8008ff2 <DMA_SetConfig+0x10a>
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a65      	ldr	r2, [pc, #404]	@ (8009148 <DMA_SetConfig+0x260>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d01d      	beq.n	8008ff2 <DMA_SetConfig+0x10a>
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a64      	ldr	r2, [pc, #400]	@ (800914c <DMA_SetConfig+0x264>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d018      	beq.n	8008ff2 <DMA_SetConfig+0x10a>
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4a62      	ldr	r2, [pc, #392]	@ (8009150 <DMA_SetConfig+0x268>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d013      	beq.n	8008ff2 <DMA_SetConfig+0x10a>
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a61      	ldr	r2, [pc, #388]	@ (8009154 <DMA_SetConfig+0x26c>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d00e      	beq.n	8008ff2 <DMA_SetConfig+0x10a>
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a5f      	ldr	r2, [pc, #380]	@ (8009158 <DMA_SetConfig+0x270>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d009      	beq.n	8008ff2 <DMA_SetConfig+0x10a>
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a5e      	ldr	r2, [pc, #376]	@ (800915c <DMA_SetConfig+0x274>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d004      	beq.n	8008ff2 <DMA_SetConfig+0x10a>
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4a5c      	ldr	r2, [pc, #368]	@ (8009160 <DMA_SetConfig+0x278>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d101      	bne.n	8008ff6 <DMA_SetConfig+0x10e>
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	e000      	b.n	8008ff8 <DMA_SetConfig+0x110>
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d00d      	beq.n	8009018 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009000:	68fa      	ldr	r2, [r7, #12]
 8009002:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8009004:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800900a:	2b00      	cmp	r3, #0
 800900c:	d004      	beq.n	8009018 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009012:	68fa      	ldr	r2, [r7, #12]
 8009014:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009016:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4a39      	ldr	r2, [pc, #228]	@ (8009104 <DMA_SetConfig+0x21c>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d04a      	beq.n	80090b8 <DMA_SetConfig+0x1d0>
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4a38      	ldr	r2, [pc, #224]	@ (8009108 <DMA_SetConfig+0x220>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d045      	beq.n	80090b8 <DMA_SetConfig+0x1d0>
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a36      	ldr	r2, [pc, #216]	@ (800910c <DMA_SetConfig+0x224>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d040      	beq.n	80090b8 <DMA_SetConfig+0x1d0>
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	4a35      	ldr	r2, [pc, #212]	@ (8009110 <DMA_SetConfig+0x228>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d03b      	beq.n	80090b8 <DMA_SetConfig+0x1d0>
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4a33      	ldr	r2, [pc, #204]	@ (8009114 <DMA_SetConfig+0x22c>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d036      	beq.n	80090b8 <DMA_SetConfig+0x1d0>
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	4a32      	ldr	r2, [pc, #200]	@ (8009118 <DMA_SetConfig+0x230>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d031      	beq.n	80090b8 <DMA_SetConfig+0x1d0>
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a30      	ldr	r2, [pc, #192]	@ (800911c <DMA_SetConfig+0x234>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d02c      	beq.n	80090b8 <DMA_SetConfig+0x1d0>
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a2f      	ldr	r2, [pc, #188]	@ (8009120 <DMA_SetConfig+0x238>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d027      	beq.n	80090b8 <DMA_SetConfig+0x1d0>
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a2d      	ldr	r2, [pc, #180]	@ (8009124 <DMA_SetConfig+0x23c>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d022      	beq.n	80090b8 <DMA_SetConfig+0x1d0>
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a2c      	ldr	r2, [pc, #176]	@ (8009128 <DMA_SetConfig+0x240>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d01d      	beq.n	80090b8 <DMA_SetConfig+0x1d0>
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a2a      	ldr	r2, [pc, #168]	@ (800912c <DMA_SetConfig+0x244>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d018      	beq.n	80090b8 <DMA_SetConfig+0x1d0>
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a29      	ldr	r2, [pc, #164]	@ (8009130 <DMA_SetConfig+0x248>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d013      	beq.n	80090b8 <DMA_SetConfig+0x1d0>
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a27      	ldr	r2, [pc, #156]	@ (8009134 <DMA_SetConfig+0x24c>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d00e      	beq.n	80090b8 <DMA_SetConfig+0x1d0>
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a26      	ldr	r2, [pc, #152]	@ (8009138 <DMA_SetConfig+0x250>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d009      	beq.n	80090b8 <DMA_SetConfig+0x1d0>
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a24      	ldr	r2, [pc, #144]	@ (800913c <DMA_SetConfig+0x254>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d004      	beq.n	80090b8 <DMA_SetConfig+0x1d0>
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a23      	ldr	r2, [pc, #140]	@ (8009140 <DMA_SetConfig+0x258>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d101      	bne.n	80090bc <DMA_SetConfig+0x1d4>
 80090b8:	2301      	movs	r3, #1
 80090ba:	e000      	b.n	80090be <DMA_SetConfig+0x1d6>
 80090bc:	2300      	movs	r3, #0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d059      	beq.n	8009176 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090c6:	f003 031f 	and.w	r3, r3, #31
 80090ca:	223f      	movs	r2, #63	@ 0x3f
 80090cc:	409a      	lsls	r2, r3
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	681a      	ldr	r2, [r3, #0]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80090e0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	683a      	ldr	r2, [r7, #0]
 80090e8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	689b      	ldr	r3, [r3, #8]
 80090ee:	2b40      	cmp	r3, #64	@ 0x40
 80090f0:	d138      	bne.n	8009164 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	687a      	ldr	r2, [r7, #4]
 80090f8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	68ba      	ldr	r2, [r7, #8]
 8009100:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009102:	e086      	b.n	8009212 <DMA_SetConfig+0x32a>
 8009104:	40020010 	.word	0x40020010
 8009108:	40020028 	.word	0x40020028
 800910c:	40020040 	.word	0x40020040
 8009110:	40020058 	.word	0x40020058
 8009114:	40020070 	.word	0x40020070
 8009118:	40020088 	.word	0x40020088
 800911c:	400200a0 	.word	0x400200a0
 8009120:	400200b8 	.word	0x400200b8
 8009124:	40020410 	.word	0x40020410
 8009128:	40020428 	.word	0x40020428
 800912c:	40020440 	.word	0x40020440
 8009130:	40020458 	.word	0x40020458
 8009134:	40020470 	.word	0x40020470
 8009138:	40020488 	.word	0x40020488
 800913c:	400204a0 	.word	0x400204a0
 8009140:	400204b8 	.word	0x400204b8
 8009144:	58025408 	.word	0x58025408
 8009148:	5802541c 	.word	0x5802541c
 800914c:	58025430 	.word	0x58025430
 8009150:	58025444 	.word	0x58025444
 8009154:	58025458 	.word	0x58025458
 8009158:	5802546c 	.word	0x5802546c
 800915c:	58025480 	.word	0x58025480
 8009160:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	68ba      	ldr	r2, [r7, #8]
 800916a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	60da      	str	r2, [r3, #12]
}
 8009174:	e04d      	b.n	8009212 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a29      	ldr	r2, [pc, #164]	@ (8009220 <DMA_SetConfig+0x338>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d022      	beq.n	80091c6 <DMA_SetConfig+0x2de>
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a27      	ldr	r2, [pc, #156]	@ (8009224 <DMA_SetConfig+0x33c>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d01d      	beq.n	80091c6 <DMA_SetConfig+0x2de>
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a26      	ldr	r2, [pc, #152]	@ (8009228 <DMA_SetConfig+0x340>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d018      	beq.n	80091c6 <DMA_SetConfig+0x2de>
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a24      	ldr	r2, [pc, #144]	@ (800922c <DMA_SetConfig+0x344>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d013      	beq.n	80091c6 <DMA_SetConfig+0x2de>
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4a23      	ldr	r2, [pc, #140]	@ (8009230 <DMA_SetConfig+0x348>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d00e      	beq.n	80091c6 <DMA_SetConfig+0x2de>
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a21      	ldr	r2, [pc, #132]	@ (8009234 <DMA_SetConfig+0x34c>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d009      	beq.n	80091c6 <DMA_SetConfig+0x2de>
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4a20      	ldr	r2, [pc, #128]	@ (8009238 <DMA_SetConfig+0x350>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d004      	beq.n	80091c6 <DMA_SetConfig+0x2de>
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a1e      	ldr	r2, [pc, #120]	@ (800923c <DMA_SetConfig+0x354>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d101      	bne.n	80091ca <DMA_SetConfig+0x2e2>
 80091c6:	2301      	movs	r3, #1
 80091c8:	e000      	b.n	80091cc <DMA_SetConfig+0x2e4>
 80091ca:	2300      	movs	r3, #0
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d020      	beq.n	8009212 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80091d4:	f003 031f 	and.w	r3, r3, #31
 80091d8:	2201      	movs	r2, #1
 80091da:	409a      	lsls	r2, r3
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	683a      	ldr	r2, [r7, #0]
 80091e6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	689b      	ldr	r3, [r3, #8]
 80091ec:	2b40      	cmp	r3, #64	@ 0x40
 80091ee:	d108      	bne.n	8009202 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	68ba      	ldr	r2, [r7, #8]
 80091fe:	60da      	str	r2, [r3, #12]
}
 8009200:	e007      	b.n	8009212 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	68ba      	ldr	r2, [r7, #8]
 8009208:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	60da      	str	r2, [r3, #12]
}
 8009212:	bf00      	nop
 8009214:	371c      	adds	r7, #28
 8009216:	46bd      	mov	sp, r7
 8009218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921c:	4770      	bx	lr
 800921e:	bf00      	nop
 8009220:	58025408 	.word	0x58025408
 8009224:	5802541c 	.word	0x5802541c
 8009228:	58025430 	.word	0x58025430
 800922c:	58025444 	.word	0x58025444
 8009230:	58025458 	.word	0x58025458
 8009234:	5802546c 	.word	0x5802546c
 8009238:	58025480 	.word	0x58025480
 800923c:	58025494 	.word	0x58025494

08009240 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009240:	b480      	push	{r7}
 8009242:	b085      	sub	sp, #20
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4a42      	ldr	r2, [pc, #264]	@ (8009358 <DMA_CalcBaseAndBitshift+0x118>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d04a      	beq.n	80092e8 <DMA_CalcBaseAndBitshift+0xa8>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4a41      	ldr	r2, [pc, #260]	@ (800935c <DMA_CalcBaseAndBitshift+0x11c>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d045      	beq.n	80092e8 <DMA_CalcBaseAndBitshift+0xa8>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a3f      	ldr	r2, [pc, #252]	@ (8009360 <DMA_CalcBaseAndBitshift+0x120>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d040      	beq.n	80092e8 <DMA_CalcBaseAndBitshift+0xa8>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a3e      	ldr	r2, [pc, #248]	@ (8009364 <DMA_CalcBaseAndBitshift+0x124>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d03b      	beq.n	80092e8 <DMA_CalcBaseAndBitshift+0xa8>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a3c      	ldr	r2, [pc, #240]	@ (8009368 <DMA_CalcBaseAndBitshift+0x128>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d036      	beq.n	80092e8 <DMA_CalcBaseAndBitshift+0xa8>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a3b      	ldr	r2, [pc, #236]	@ (800936c <DMA_CalcBaseAndBitshift+0x12c>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d031      	beq.n	80092e8 <DMA_CalcBaseAndBitshift+0xa8>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a39      	ldr	r2, [pc, #228]	@ (8009370 <DMA_CalcBaseAndBitshift+0x130>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d02c      	beq.n	80092e8 <DMA_CalcBaseAndBitshift+0xa8>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4a38      	ldr	r2, [pc, #224]	@ (8009374 <DMA_CalcBaseAndBitshift+0x134>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d027      	beq.n	80092e8 <DMA_CalcBaseAndBitshift+0xa8>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a36      	ldr	r2, [pc, #216]	@ (8009378 <DMA_CalcBaseAndBitshift+0x138>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d022      	beq.n	80092e8 <DMA_CalcBaseAndBitshift+0xa8>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4a35      	ldr	r2, [pc, #212]	@ (800937c <DMA_CalcBaseAndBitshift+0x13c>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d01d      	beq.n	80092e8 <DMA_CalcBaseAndBitshift+0xa8>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a33      	ldr	r2, [pc, #204]	@ (8009380 <DMA_CalcBaseAndBitshift+0x140>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d018      	beq.n	80092e8 <DMA_CalcBaseAndBitshift+0xa8>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a32      	ldr	r2, [pc, #200]	@ (8009384 <DMA_CalcBaseAndBitshift+0x144>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d013      	beq.n	80092e8 <DMA_CalcBaseAndBitshift+0xa8>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a30      	ldr	r2, [pc, #192]	@ (8009388 <DMA_CalcBaseAndBitshift+0x148>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d00e      	beq.n	80092e8 <DMA_CalcBaseAndBitshift+0xa8>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a2f      	ldr	r2, [pc, #188]	@ (800938c <DMA_CalcBaseAndBitshift+0x14c>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d009      	beq.n	80092e8 <DMA_CalcBaseAndBitshift+0xa8>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a2d      	ldr	r2, [pc, #180]	@ (8009390 <DMA_CalcBaseAndBitshift+0x150>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d004      	beq.n	80092e8 <DMA_CalcBaseAndBitshift+0xa8>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a2c      	ldr	r2, [pc, #176]	@ (8009394 <DMA_CalcBaseAndBitshift+0x154>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d101      	bne.n	80092ec <DMA_CalcBaseAndBitshift+0xac>
 80092e8:	2301      	movs	r3, #1
 80092ea:	e000      	b.n	80092ee <DMA_CalcBaseAndBitshift+0xae>
 80092ec:	2300      	movs	r3, #0
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d024      	beq.n	800933c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	b2db      	uxtb	r3, r3
 80092f8:	3b10      	subs	r3, #16
 80092fa:	4a27      	ldr	r2, [pc, #156]	@ (8009398 <DMA_CalcBaseAndBitshift+0x158>)
 80092fc:	fba2 2303 	umull	r2, r3, r2, r3
 8009300:	091b      	lsrs	r3, r3, #4
 8009302:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f003 0307 	and.w	r3, r3, #7
 800930a:	4a24      	ldr	r2, [pc, #144]	@ (800939c <DMA_CalcBaseAndBitshift+0x15c>)
 800930c:	5cd3      	ldrb	r3, [r2, r3]
 800930e:	461a      	mov	r2, r3
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2b03      	cmp	r3, #3
 8009318:	d908      	bls.n	800932c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	461a      	mov	r2, r3
 8009320:	4b1f      	ldr	r3, [pc, #124]	@ (80093a0 <DMA_CalcBaseAndBitshift+0x160>)
 8009322:	4013      	ands	r3, r2
 8009324:	1d1a      	adds	r2, r3, #4
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	659a      	str	r2, [r3, #88]	@ 0x58
 800932a:	e00d      	b.n	8009348 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	461a      	mov	r2, r3
 8009332:	4b1b      	ldr	r3, [pc, #108]	@ (80093a0 <DMA_CalcBaseAndBitshift+0x160>)
 8009334:	4013      	ands	r3, r2
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	6593      	str	r3, [r2, #88]	@ 0x58
 800933a:	e005      	b.n	8009348 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800934c:	4618      	mov	r0, r3
 800934e:	3714      	adds	r7, #20
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr
 8009358:	40020010 	.word	0x40020010
 800935c:	40020028 	.word	0x40020028
 8009360:	40020040 	.word	0x40020040
 8009364:	40020058 	.word	0x40020058
 8009368:	40020070 	.word	0x40020070
 800936c:	40020088 	.word	0x40020088
 8009370:	400200a0 	.word	0x400200a0
 8009374:	400200b8 	.word	0x400200b8
 8009378:	40020410 	.word	0x40020410
 800937c:	40020428 	.word	0x40020428
 8009380:	40020440 	.word	0x40020440
 8009384:	40020458 	.word	0x40020458
 8009388:	40020470 	.word	0x40020470
 800938c:	40020488 	.word	0x40020488
 8009390:	400204a0 	.word	0x400204a0
 8009394:	400204b8 	.word	0x400204b8
 8009398:	aaaaaaab 	.word	0xaaaaaaab
 800939c:	08011f9c 	.word	0x08011f9c
 80093a0:	fffffc00 	.word	0xfffffc00

080093a4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b085      	sub	sp, #20
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80093ac:	2300      	movs	r3, #0
 80093ae:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	699b      	ldr	r3, [r3, #24]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d120      	bne.n	80093fa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093bc:	2b03      	cmp	r3, #3
 80093be:	d858      	bhi.n	8009472 <DMA_CheckFifoParam+0xce>
 80093c0:	a201      	add	r2, pc, #4	@ (adr r2, 80093c8 <DMA_CheckFifoParam+0x24>)
 80093c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093c6:	bf00      	nop
 80093c8:	080093d9 	.word	0x080093d9
 80093cc:	080093eb 	.word	0x080093eb
 80093d0:	080093d9 	.word	0x080093d9
 80093d4:	08009473 	.word	0x08009473
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d048      	beq.n	8009476 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80093e4:	2301      	movs	r3, #1
 80093e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80093e8:	e045      	b.n	8009476 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093ee:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80093f2:	d142      	bne.n	800947a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80093f4:	2301      	movs	r3, #1
 80093f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80093f8:	e03f      	b.n	800947a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	699b      	ldr	r3, [r3, #24]
 80093fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009402:	d123      	bne.n	800944c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009408:	2b03      	cmp	r3, #3
 800940a:	d838      	bhi.n	800947e <DMA_CheckFifoParam+0xda>
 800940c:	a201      	add	r2, pc, #4	@ (adr r2, 8009414 <DMA_CheckFifoParam+0x70>)
 800940e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009412:	bf00      	nop
 8009414:	08009425 	.word	0x08009425
 8009418:	0800942b 	.word	0x0800942b
 800941c:	08009425 	.word	0x08009425
 8009420:	0800943d 	.word	0x0800943d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009424:	2301      	movs	r3, #1
 8009426:	73fb      	strb	r3, [r7, #15]
        break;
 8009428:	e030      	b.n	800948c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800942e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009432:	2b00      	cmp	r3, #0
 8009434:	d025      	beq.n	8009482 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8009436:	2301      	movs	r3, #1
 8009438:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800943a:	e022      	b.n	8009482 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009440:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8009444:	d11f      	bne.n	8009486 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8009446:	2301      	movs	r3, #1
 8009448:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800944a:	e01c      	b.n	8009486 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009450:	2b02      	cmp	r3, #2
 8009452:	d902      	bls.n	800945a <DMA_CheckFifoParam+0xb6>
 8009454:	2b03      	cmp	r3, #3
 8009456:	d003      	beq.n	8009460 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009458:	e018      	b.n	800948c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800945a:	2301      	movs	r3, #1
 800945c:	73fb      	strb	r3, [r7, #15]
        break;
 800945e:	e015      	b.n	800948c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009464:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009468:	2b00      	cmp	r3, #0
 800946a:	d00e      	beq.n	800948a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800946c:	2301      	movs	r3, #1
 800946e:	73fb      	strb	r3, [r7, #15]
    break;
 8009470:	e00b      	b.n	800948a <DMA_CheckFifoParam+0xe6>
        break;
 8009472:	bf00      	nop
 8009474:	e00a      	b.n	800948c <DMA_CheckFifoParam+0xe8>
        break;
 8009476:	bf00      	nop
 8009478:	e008      	b.n	800948c <DMA_CheckFifoParam+0xe8>
        break;
 800947a:	bf00      	nop
 800947c:	e006      	b.n	800948c <DMA_CheckFifoParam+0xe8>
        break;
 800947e:	bf00      	nop
 8009480:	e004      	b.n	800948c <DMA_CheckFifoParam+0xe8>
        break;
 8009482:	bf00      	nop
 8009484:	e002      	b.n	800948c <DMA_CheckFifoParam+0xe8>
        break;
 8009486:	bf00      	nop
 8009488:	e000      	b.n	800948c <DMA_CheckFifoParam+0xe8>
    break;
 800948a:	bf00      	nop
    }
  }

  return status;
 800948c:	7bfb      	ldrb	r3, [r7, #15]
}
 800948e:	4618      	mov	r0, r3
 8009490:	3714      	adds	r7, #20
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr
 800949a:	bf00      	nop

0800949c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800949c:	b480      	push	{r7}
 800949e:	b085      	sub	sp, #20
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4a38      	ldr	r2, [pc, #224]	@ (8009590 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d022      	beq.n	80094fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a36      	ldr	r2, [pc, #216]	@ (8009594 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d01d      	beq.n	80094fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4a35      	ldr	r2, [pc, #212]	@ (8009598 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d018      	beq.n	80094fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a33      	ldr	r2, [pc, #204]	@ (800959c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d013      	beq.n	80094fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a32      	ldr	r2, [pc, #200]	@ (80095a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d00e      	beq.n	80094fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a30      	ldr	r2, [pc, #192]	@ (80095a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d009      	beq.n	80094fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a2f      	ldr	r2, [pc, #188]	@ (80095a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d004      	beq.n	80094fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4a2d      	ldr	r2, [pc, #180]	@ (80095ac <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d101      	bne.n	80094fe <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80094fa:	2301      	movs	r3, #1
 80094fc:	e000      	b.n	8009500 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80094fe:	2300      	movs	r3, #0
 8009500:	2b00      	cmp	r3, #0
 8009502:	d01a      	beq.n	800953a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	b2db      	uxtb	r3, r3
 800950a:	3b08      	subs	r3, #8
 800950c:	4a28      	ldr	r2, [pc, #160]	@ (80095b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800950e:	fba2 2303 	umull	r2, r3, r2, r3
 8009512:	091b      	lsrs	r3, r3, #4
 8009514:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009516:	68fa      	ldr	r2, [r7, #12]
 8009518:	4b26      	ldr	r3, [pc, #152]	@ (80095b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800951a:	4413      	add	r3, r2
 800951c:	009b      	lsls	r3, r3, #2
 800951e:	461a      	mov	r2, r3
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	4a24      	ldr	r2, [pc, #144]	@ (80095b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009528:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f003 031f 	and.w	r3, r3, #31
 8009530:	2201      	movs	r2, #1
 8009532:	409a      	lsls	r2, r3
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009538:	e024      	b.n	8009584 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	b2db      	uxtb	r3, r3
 8009540:	3b10      	subs	r3, #16
 8009542:	4a1e      	ldr	r2, [pc, #120]	@ (80095bc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009544:	fba2 2303 	umull	r2, r3, r2, r3
 8009548:	091b      	lsrs	r3, r3, #4
 800954a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	4a1c      	ldr	r2, [pc, #112]	@ (80095c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d806      	bhi.n	8009562 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	4a1b      	ldr	r2, [pc, #108]	@ (80095c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d902      	bls.n	8009562 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	3308      	adds	r3, #8
 8009560:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009562:	68fa      	ldr	r2, [r7, #12]
 8009564:	4b18      	ldr	r3, [pc, #96]	@ (80095c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009566:	4413      	add	r3, r2
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	461a      	mov	r2, r3
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	4a16      	ldr	r2, [pc, #88]	@ (80095cc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009574:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	f003 031f 	and.w	r3, r3, #31
 800957c:	2201      	movs	r2, #1
 800957e:	409a      	lsls	r2, r3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8009584:	bf00      	nop
 8009586:	3714      	adds	r7, #20
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr
 8009590:	58025408 	.word	0x58025408
 8009594:	5802541c 	.word	0x5802541c
 8009598:	58025430 	.word	0x58025430
 800959c:	58025444 	.word	0x58025444
 80095a0:	58025458 	.word	0x58025458
 80095a4:	5802546c 	.word	0x5802546c
 80095a8:	58025480 	.word	0x58025480
 80095ac:	58025494 	.word	0x58025494
 80095b0:	cccccccd 	.word	0xcccccccd
 80095b4:	16009600 	.word	0x16009600
 80095b8:	58025880 	.word	0x58025880
 80095bc:	aaaaaaab 	.word	0xaaaaaaab
 80095c0:	400204b8 	.word	0x400204b8
 80095c4:	4002040f 	.word	0x4002040f
 80095c8:	10008200 	.word	0x10008200
 80095cc:	40020880 	.word	0x40020880

080095d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b085      	sub	sp, #20
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	685b      	ldr	r3, [r3, #4]
 80095dc:	b2db      	uxtb	r3, r3
 80095de:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d04a      	beq.n	800967c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2b08      	cmp	r3, #8
 80095ea:	d847      	bhi.n	800967c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4a25      	ldr	r2, [pc, #148]	@ (8009688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d022      	beq.n	800963c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4a24      	ldr	r2, [pc, #144]	@ (800968c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d01d      	beq.n	800963c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a22      	ldr	r2, [pc, #136]	@ (8009690 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d018      	beq.n	800963c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4a21      	ldr	r2, [pc, #132]	@ (8009694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d013      	beq.n	800963c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4a1f      	ldr	r2, [pc, #124]	@ (8009698 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d00e      	beq.n	800963c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4a1e      	ldr	r2, [pc, #120]	@ (800969c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d009      	beq.n	800963c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a1c      	ldr	r2, [pc, #112]	@ (80096a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d004      	beq.n	800963c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a1b      	ldr	r2, [pc, #108]	@ (80096a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d101      	bne.n	8009640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800963c:	2301      	movs	r3, #1
 800963e:	e000      	b.n	8009642 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009640:	2300      	movs	r3, #0
 8009642:	2b00      	cmp	r3, #0
 8009644:	d00a      	beq.n	800965c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009646:	68fa      	ldr	r2, [r7, #12]
 8009648:	4b17      	ldr	r3, [pc, #92]	@ (80096a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800964a:	4413      	add	r3, r2
 800964c:	009b      	lsls	r3, r3, #2
 800964e:	461a      	mov	r2, r3
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	4a15      	ldr	r2, [pc, #84]	@ (80096ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009658:	671a      	str	r2, [r3, #112]	@ 0x70
 800965a:	e009      	b.n	8009670 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800965c:	68fa      	ldr	r2, [r7, #12]
 800965e:	4b14      	ldr	r3, [pc, #80]	@ (80096b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009660:	4413      	add	r3, r2
 8009662:	009b      	lsls	r3, r3, #2
 8009664:	461a      	mov	r2, r3
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	4a11      	ldr	r2, [pc, #68]	@ (80096b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800966e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	3b01      	subs	r3, #1
 8009674:	2201      	movs	r2, #1
 8009676:	409a      	lsls	r2, r3
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800967c:	bf00      	nop
 800967e:	3714      	adds	r7, #20
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr
 8009688:	58025408 	.word	0x58025408
 800968c:	5802541c 	.word	0x5802541c
 8009690:	58025430 	.word	0x58025430
 8009694:	58025444 	.word	0x58025444
 8009698:	58025458 	.word	0x58025458
 800969c:	5802546c 	.word	0x5802546c
 80096a0:	58025480 	.word	0x58025480
 80096a4:	58025494 	.word	0x58025494
 80096a8:	1600963f 	.word	0x1600963f
 80096ac:	58025940 	.word	0x58025940
 80096b0:	1000823f 	.word	0x1000823f
 80096b4:	40020940 	.word	0x40020940

080096b8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b084      	sub	sp, #16
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d101      	bne.n	80096ca <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80096c6:	2301      	movs	r3, #1
 80096c8:	e0cf      	b.n	800986a <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d106      	bne.n	80096e2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2223      	movs	r2, #35	@ 0x23
 80096d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f7fa f8c9 	bl	8003874 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80096e2:	4b64      	ldr	r3, [pc, #400]	@ (8009874 <HAL_ETH_Init+0x1bc>)
 80096e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80096e8:	4a62      	ldr	r2, [pc, #392]	@ (8009874 <HAL_ETH_Init+0x1bc>)
 80096ea:	f043 0302 	orr.w	r3, r3, #2
 80096ee:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80096f2:	4b60      	ldr	r3, [pc, #384]	@ (8009874 <HAL_ETH_Init+0x1bc>)
 80096f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80096f8:	f003 0302 	and.w	r3, r3, #2
 80096fc:	60bb      	str	r3, [r7, #8]
 80096fe:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	7a1b      	ldrb	r3, [r3, #8]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d103      	bne.n	8009710 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8009708:	2000      	movs	r0, #0
 800970a:	f7fa fd85 	bl	8004218 <HAL_SYSCFG_ETHInterfaceSelect>
 800970e:	e003      	b.n	8009718 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8009710:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8009714:	f7fa fd80 	bl	8004218 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8009718:	4b57      	ldr	r3, [pc, #348]	@ (8009878 <HAL_ETH_Init+0x1c0>)
 800971a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	687a      	ldr	r2, [r7, #4]
 8009728:	6812      	ldr	r2, [r2, #0]
 800972a:	f043 0301 	orr.w	r3, r3, #1
 800972e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009732:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009734:	f7fa fd40 	bl	80041b8 <HAL_GetTick>
 8009738:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800973a:	e011      	b.n	8009760 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800973c:	f7fa fd3c 	bl	80041b8 <HAL_GetTick>
 8009740:	4602      	mov	r2, r0
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	1ad3      	subs	r3, r2, r3
 8009746:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800974a:	d909      	bls.n	8009760 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2204      	movs	r2, #4
 8009750:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	22e0      	movs	r2, #224	@ 0xe0
 8009758:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800975c:	2301      	movs	r3, #1
 800975e:	e084      	b.n	800986a <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f003 0301 	and.w	r3, r3, #1
 800976e:	2b00      	cmp	r3, #0
 8009770:	d1e4      	bne.n	800973c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 f886 	bl	8009884 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8009778:	f001 fed8 	bl	800b52c <HAL_RCC_GetHCLKFreq>
 800977c:	4603      	mov	r3, r0
 800977e:	4a3f      	ldr	r2, [pc, #252]	@ (800987c <HAL_ETH_Init+0x1c4>)
 8009780:	fba2 2303 	umull	r2, r3, r2, r3
 8009784:	0c9a      	lsrs	r2, r3, #18
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	3a01      	subs	r2, #1
 800978c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f000 fa71 	bl	8009c78 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800979e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80097a2:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80097a6:	687a      	ldr	r2, [r7, #4]
 80097a8:	6812      	ldr	r2, [r2, #0]
 80097aa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80097ae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80097b2:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	695b      	ldr	r3, [r3, #20]
 80097ba:	f003 0303 	and.w	r3, r3, #3
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d009      	beq.n	80097d6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2201      	movs	r2, #1
 80097c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	22e0      	movs	r2, #224	@ 0xe0
 80097ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80097d2:	2301      	movs	r3, #1
 80097d4:	e049      	b.n	800986a <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80097de:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80097e2:	4b27      	ldr	r3, [pc, #156]	@ (8009880 <HAL_ETH_Init+0x1c8>)
 80097e4:	4013      	ands	r3, r2
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	6952      	ldr	r2, [r2, #20]
 80097ea:	0051      	lsls	r1, r2, #1
 80097ec:	687a      	ldr	r2, [r7, #4]
 80097ee:	6812      	ldr	r2, [r2, #0]
 80097f0:	430b      	orrs	r3, r1
 80097f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80097f6:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 fad9 	bl	8009db2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f000 fb1f 	bl	8009e44 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	3305      	adds	r3, #5
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	021a      	lsls	r2, r3, #8
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	3304      	adds	r3, #4
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	4619      	mov	r1, r3
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	430a      	orrs	r2, r1
 8009820:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	3303      	adds	r3, #3
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	061a      	lsls	r2, r3, #24
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	3302      	adds	r3, #2
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	041b      	lsls	r3, r3, #16
 8009838:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	3301      	adds	r3, #1
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009844:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	781b      	ldrb	r3, [r3, #0]
 800984c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8009852:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009854:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2200      	movs	r2, #0
 800985c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2210      	movs	r2, #16
 8009864:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009868:	2300      	movs	r3, #0
}
 800986a:	4618      	mov	r0, r3
 800986c:	3710      	adds	r7, #16
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
 8009872:	bf00      	nop
 8009874:	58024400 	.word	0x58024400
 8009878:	58000400 	.word	0x58000400
 800987c:	431bde83 	.word	0x431bde83
 8009880:	ffff8001 	.word	0xffff8001

08009884 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8009894:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800989c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800989e:	f001 fe45 	bl	800b52c <HAL_RCC_GetHCLKFreq>
 80098a2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	4a1e      	ldr	r2, [pc, #120]	@ (8009920 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d908      	bls.n	80098be <HAL_ETH_SetMDIOClockRange+0x3a>
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	4a1d      	ldr	r2, [pc, #116]	@ (8009924 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d804      	bhi.n	80098be <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80098ba:	60fb      	str	r3, [r7, #12]
 80098bc:	e027      	b.n	800990e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	4a18      	ldr	r2, [pc, #96]	@ (8009924 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d908      	bls.n	80098d8 <HAL_ETH_SetMDIOClockRange+0x54>
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	4a17      	ldr	r2, [pc, #92]	@ (8009928 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d204      	bcs.n	80098d8 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80098d4:	60fb      	str	r3, [r7, #12]
 80098d6:	e01a      	b.n	800990e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	4a13      	ldr	r2, [pc, #76]	@ (8009928 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d303      	bcc.n	80098e8 <HAL_ETH_SetMDIOClockRange+0x64>
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	4a12      	ldr	r2, [pc, #72]	@ (800992c <HAL_ETH_SetMDIOClockRange+0xa8>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d911      	bls.n	800990c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	4a10      	ldr	r2, [pc, #64]	@ (800992c <HAL_ETH_SetMDIOClockRange+0xa8>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d908      	bls.n	8009902 <HAL_ETH_SetMDIOClockRange+0x7e>
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	4a0f      	ldr	r2, [pc, #60]	@ (8009930 <HAL_ETH_SetMDIOClockRange+0xac>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d804      	bhi.n	8009902 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80098fe:	60fb      	str	r3, [r7, #12]
 8009900:	e005      	b.n	800990e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009908:	60fb      	str	r3, [r7, #12]
 800990a:	e000      	b.n	800990e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800990c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	68fa      	ldr	r2, [r7, #12]
 8009914:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8009918:	bf00      	nop
 800991a:	3710      	adds	r7, #16
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}
 8009920:	01312cff 	.word	0x01312cff
 8009924:	02160ebf 	.word	0x02160ebf
 8009928:	03938700 	.word	0x03938700
 800992c:	05f5e0ff 	.word	0x05f5e0ff
 8009930:	08f0d17f 	.word	0x08f0d17f

08009934 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8009934:	b480      	push	{r7}
 8009936:	b085      	sub	sp, #20
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8009946:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	791b      	ldrb	r3, [r3, #4]
 800994c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800994e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	7b1b      	ldrb	r3, [r3, #12]
 8009954:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8009956:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	7b5b      	ldrb	r3, [r3, #13]
 800995c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800995e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	7b9b      	ldrb	r3, [r3, #14]
 8009964:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8009966:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	7bdb      	ldrb	r3, [r3, #15]
 800996c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800996e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8009970:	683a      	ldr	r2, [r7, #0]
 8009972:	7c12      	ldrb	r2, [r2, #16]
 8009974:	2a00      	cmp	r2, #0
 8009976:	d102      	bne.n	800997e <ETH_SetMACConfig+0x4a>
 8009978:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800997c:	e000      	b.n	8009980 <ETH_SetMACConfig+0x4c>
 800997e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8009980:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8009982:	683a      	ldr	r2, [r7, #0]
 8009984:	7c52      	ldrb	r2, [r2, #17]
 8009986:	2a00      	cmp	r2, #0
 8009988:	d102      	bne.n	8009990 <ETH_SetMACConfig+0x5c>
 800998a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800998e:	e000      	b.n	8009992 <ETH_SetMACConfig+0x5e>
 8009990:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8009992:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	7c9b      	ldrb	r3, [r3, #18]
 8009998:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800999a:	431a      	orrs	r2, r3
               macconf->Speed |
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80099a0:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80099a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	7f1b      	ldrb	r3, [r3, #28]
 80099ac:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80099ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	7f5b      	ldrb	r3, [r3, #29]
 80099b4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80099b6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80099b8:	683a      	ldr	r2, [r7, #0]
 80099ba:	7f92      	ldrb	r2, [r2, #30]
 80099bc:	2a00      	cmp	r2, #0
 80099be:	d102      	bne.n	80099c6 <ETH_SetMACConfig+0x92>
 80099c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80099c4:	e000      	b.n	80099c8 <ETH_SetMACConfig+0x94>
 80099c6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80099c8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	7fdb      	ldrb	r3, [r3, #31]
 80099ce:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80099d0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80099d2:	683a      	ldr	r2, [r7, #0]
 80099d4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80099d8:	2a00      	cmp	r2, #0
 80099da:	d102      	bne.n	80099e2 <ETH_SetMACConfig+0xae>
 80099dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80099e0:	e000      	b.n	80099e4 <ETH_SetMACConfig+0xb0>
 80099e2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80099e4:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80099ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80099f2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80099f4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80099fa:	4313      	orrs	r3, r2
 80099fc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	681a      	ldr	r2, [r3, #0]
 8009a04:	4b56      	ldr	r3, [pc, #344]	@ (8009b60 <ETH_SetMACConfig+0x22c>)
 8009a06:	4013      	ands	r3, r2
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	6812      	ldr	r2, [r2, #0]
 8009a0c:	68f9      	ldr	r1, [r7, #12]
 8009a0e:	430b      	orrs	r3, r1
 8009a10:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a16:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009a1e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8009a20:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009a28:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8009a2a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009a32:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8009a34:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8009a36:	683a      	ldr	r2, [r7, #0]
 8009a38:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8009a3c:	2a00      	cmp	r2, #0
 8009a3e:	d102      	bne.n	8009a46 <ETH_SetMACConfig+0x112>
 8009a40:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8009a44:	e000      	b.n	8009a48 <ETH_SetMACConfig+0x114>
 8009a46:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8009a48:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	685a      	ldr	r2, [r3, #4]
 8009a58:	4b42      	ldr	r3, [pc, #264]	@ (8009b64 <ETH_SetMACConfig+0x230>)
 8009a5a:	4013      	ands	r3, r2
 8009a5c:	687a      	ldr	r2, [r7, #4]
 8009a5e:	6812      	ldr	r2, [r2, #0]
 8009a60:	68f9      	ldr	r1, [r7, #12]
 8009a62:	430b      	orrs	r3, r1
 8009a64:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009a6c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8009a72:	4313      	orrs	r3, r2
 8009a74:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	68da      	ldr	r2, [r3, #12]
 8009a7c:	4b3a      	ldr	r3, [pc, #232]	@ (8009b68 <ETH_SetMACConfig+0x234>)
 8009a7e:	4013      	ands	r3, r2
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	6812      	ldr	r2, [r2, #0]
 8009a84:	68f9      	ldr	r1, [r7, #12]
 8009a86:	430b      	orrs	r3, r1
 8009a88:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8009a90:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8009a96:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8009a98:	683a      	ldr	r2, [r7, #0]
 8009a9a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8009a9e:	2a00      	cmp	r2, #0
 8009aa0:	d101      	bne.n	8009aa6 <ETH_SetMACConfig+0x172>
 8009aa2:	2280      	movs	r2, #128	@ 0x80
 8009aa4:	e000      	b.n	8009aa8 <ETH_SetMACConfig+0x174>
 8009aa6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8009aa8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009aae:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009aba:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8009abe:	4013      	ands	r3, r2
 8009ac0:	687a      	ldr	r2, [r7, #4]
 8009ac2:	6812      	ldr	r2, [r2, #0]
 8009ac4:	68f9      	ldr	r1, [r7, #12]
 8009ac6:	430b      	orrs	r3, r1
 8009ac8:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8009ad0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8009ad8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8009ada:	4313      	orrs	r3, r2
 8009adc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ae6:	f023 0103 	bic.w	r1, r3, #3
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	68fa      	ldr	r2, [r7, #12]
 8009af0:	430a      	orrs	r2, r1
 8009af2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8009afe:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	430a      	orrs	r2, r1
 8009b0c:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8009b14:	683a      	ldr	r2, [r7, #0]
 8009b16:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8009b1a:	2a00      	cmp	r2, #0
 8009b1c:	d101      	bne.n	8009b22 <ETH_SetMACConfig+0x1ee>
 8009b1e:	2240      	movs	r2, #64	@ 0x40
 8009b20:	e000      	b.n	8009b24 <ETH_SetMACConfig+0x1f0>
 8009b22:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8009b24:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8009b2c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8009b2e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8009b36:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8009b44:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	68fa      	ldr	r2, [r7, #12]
 8009b4e:	430a      	orrs	r2, r1
 8009b50:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8009b54:	bf00      	nop
 8009b56:	3714      	adds	r7, #20
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr
 8009b60:	00048083 	.word	0x00048083
 8009b64:	c0f88000 	.word	0xc0f88000
 8009b68:	fffffef0 	.word	0xfffffef0

08009b6c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b085      	sub	sp, #20
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b7e:	681a      	ldr	r2, [r3, #0]
 8009b80:	4b38      	ldr	r3, [pc, #224]	@ (8009c64 <ETH_SetDMAConfig+0xf8>)
 8009b82:	4013      	ands	r3, r2
 8009b84:	683a      	ldr	r2, [r7, #0]
 8009b86:	6811      	ldr	r1, [r2, #0]
 8009b88:	687a      	ldr	r2, [r7, #4]
 8009b8a:	6812      	ldr	r2, [r2, #0]
 8009b8c:	430b      	orrs	r3, r1
 8009b8e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009b92:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	791b      	ldrb	r3, [r3, #4]
 8009b98:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8009b9e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	7b1b      	ldrb	r3, [r3, #12]
 8009ba4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009bb2:	685a      	ldr	r2, [r3, #4]
 8009bb4:	4b2c      	ldr	r3, [pc, #176]	@ (8009c68 <ETH_SetDMAConfig+0xfc>)
 8009bb6:	4013      	ands	r3, r2
 8009bb8:	687a      	ldr	r2, [r7, #4]
 8009bba:	6812      	ldr	r2, [r2, #0]
 8009bbc:	68f9      	ldr	r1, [r7, #12]
 8009bbe:	430b      	orrs	r3, r1
 8009bc0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009bc4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	7b5b      	ldrb	r3, [r3, #13]
 8009bca:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009bdc:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8009be0:	4b22      	ldr	r3, [pc, #136]	@ (8009c6c <ETH_SetDMAConfig+0x100>)
 8009be2:	4013      	ands	r3, r2
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	6812      	ldr	r2, [r2, #0]
 8009be8:	68f9      	ldr	r1, [r7, #12]
 8009bea:	430b      	orrs	r3, r1
 8009bec:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009bf0:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	7d1b      	ldrb	r3, [r3, #20]
 8009bfc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8009bfe:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	7f5b      	ldrb	r3, [r3, #29]
 8009c04:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8009c06:	4313      	orrs	r3, r2
 8009c08:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c12:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8009c16:	4b16      	ldr	r3, [pc, #88]	@ (8009c70 <ETH_SetDMAConfig+0x104>)
 8009c18:	4013      	ands	r3, r2
 8009c1a:	687a      	ldr	r2, [r7, #4]
 8009c1c:	6812      	ldr	r2, [r2, #0]
 8009c1e:	68f9      	ldr	r1, [r7, #12]
 8009c20:	430b      	orrs	r3, r1
 8009c22:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009c26:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	7f1b      	ldrb	r3, [r3, #28]
 8009c2e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8009c34:	4313      	orrs	r3, r2
 8009c36:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c40:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8009c44:	4b0b      	ldr	r3, [pc, #44]	@ (8009c74 <ETH_SetDMAConfig+0x108>)
 8009c46:	4013      	ands	r3, r2
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	6812      	ldr	r2, [r2, #0]
 8009c4c:	68f9      	ldr	r1, [r7, #12]
 8009c4e:	430b      	orrs	r3, r1
 8009c50:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009c54:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8009c58:	bf00      	nop
 8009c5a:	3714      	adds	r7, #20
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr
 8009c64:	ffff87fd 	.word	0xffff87fd
 8009c68:	ffff2ffe 	.word	0xffff2ffe
 8009c6c:	fffec000 	.word	0xfffec000
 8009c70:	ffc0efef 	.word	0xffc0efef
 8009c74:	7fc0ffff 	.word	0x7fc0ffff

08009c78 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b0a4      	sub	sp, #144	@ 0x90
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8009c80:	2301      	movs	r3, #1
 8009c82:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8009c86:	2300      	movs	r3, #0
 8009c88:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8009c90:	2300      	movs	r3, #0
 8009c92:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8009c96:	2301      	movs	r3, #1
 8009c98:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8009cb4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009cb8:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8009cd0:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8009cd4:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8009cec:	2300      	movs	r3, #0
 8009cee:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8009d04:	2300      	movs	r3, #0
 8009d06:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8009d10:	2320      	movs	r3, #32
 8009d12:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8009d16:	2301      	movs	r3, #1
 8009d18:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8009d22:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8009d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8009d28:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009d2c:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8009d34:	2302      	movs	r3, #2
 8009d36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8009d40:	2300      	movs	r3, #0
 8009d42:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8009d46:	2300      	movs	r3, #0
 8009d48:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8009d52:	2300      	movs	r3, #0
 8009d54:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8009d56:	2301      	movs	r3, #1
 8009d58:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8009d5c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009d60:	4619      	mov	r1, r3
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f7ff fde6 	bl	8009934 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8009d68:	2301      	movs	r3, #1
 8009d6a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8009d70:	2300      	movs	r3, #0
 8009d72:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8009d74:	2300      	movs	r3, #0
 8009d76:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8009d82:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009d86:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8009d8c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009d90:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8009d92:	2300      	movs	r3, #0
 8009d94:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8009d98:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8009d9c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8009d9e:	f107 0308 	add.w	r3, r7, #8
 8009da2:	4619      	mov	r1, r3
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f7ff fee1 	bl	8009b6c <ETH_SetDMAConfig>
}
 8009daa:	bf00      	nop
 8009dac:	3790      	adds	r7, #144	@ 0x90
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}

08009db2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8009db2:	b480      	push	{r7}
 8009db4:	b085      	sub	sp, #20
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8009dba:	2300      	movs	r3, #0
 8009dbc:	60fb      	str	r3, [r7, #12]
 8009dbe:	e01d      	b.n	8009dfc <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	68d9      	ldr	r1, [r3, #12]
 8009dc4:	68fa      	ldr	r2, [r7, #12]
 8009dc6:	4613      	mov	r3, r2
 8009dc8:	005b      	lsls	r3, r3, #1
 8009dca:	4413      	add	r3, r2
 8009dcc:	00db      	lsls	r3, r3, #3
 8009dce:	440b      	add	r3, r1
 8009dd0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	2200      	movs	r2, #0
 8009de2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	2200      	movs	r2, #0
 8009de8:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8009dea:	68b9      	ldr	r1, [r7, #8]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	68fa      	ldr	r2, [r7, #12]
 8009df0:	3206      	adds	r2, #6
 8009df2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	3301      	adds	r3, #1
 8009dfa:	60fb      	str	r3, [r7, #12]
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2b03      	cmp	r3, #3
 8009e00:	d9de      	bls.n	8009dc0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2200      	movs	r2, #0
 8009e06:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e10:	461a      	mov	r2, r3
 8009e12:	2303      	movs	r3, #3
 8009e14:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	68da      	ldr	r2, [r3, #12]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e24:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	68da      	ldr	r2, [r3, #12]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e34:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8009e38:	bf00      	nop
 8009e3a:	3714      	adds	r7, #20
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr

08009e44 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b085      	sub	sp, #20
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	60fb      	str	r3, [r7, #12]
 8009e50:	e023      	b.n	8009e9a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6919      	ldr	r1, [r3, #16]
 8009e56:	68fa      	ldr	r2, [r7, #12]
 8009e58:	4613      	mov	r3, r2
 8009e5a:	005b      	lsls	r3, r3, #1
 8009e5c:	4413      	add	r3, r2
 8009e5e:	00db      	lsls	r3, r3, #3
 8009e60:	440b      	add	r3, r1
 8009e62:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	2200      	movs	r2, #0
 8009e68:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	2200      	movs	r2, #0
 8009e74:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	2200      	movs	r2, #0
 8009e86:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8009e88:	68b9      	ldr	r1, [r7, #8]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	68fa      	ldr	r2, [r7, #12]
 8009e8e:	3212      	adds	r2, #18
 8009e90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	3301      	adds	r3, #1
 8009e98:	60fb      	str	r3, [r7, #12]
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	2b03      	cmp	r3, #3
 8009e9e:	d9d8      	bls.n	8009e52 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	2303      	movs	r3, #3
 8009eca:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	691a      	ldr	r2, [r3, #16]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009eda:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	691b      	ldr	r3, [r3, #16]
 8009ee2:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009eee:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8009ef2:	bf00      	nop
 8009ef4:	3714      	adds	r7, #20
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efc:	4770      	bx	lr
	...

08009f00 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b08a      	sub	sp, #40	@ 0x28
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	60f8      	str	r0, [r7, #12]
 8009f08:	60b9      	str	r1, [r7, #8]
 8009f0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 8009f14:	2308      	movs	r3, #8
 8009f16:	76fb      	strb	r3, [r7, #27]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009f18:	4b2e      	ldr	r3, [pc, #184]	@ (8009fd4 <HAL_FLASH_Program+0xd4>)
 8009f1a:	7d1b      	ldrb	r3, [r3, #20]
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	d101      	bne.n	8009f24 <HAL_FLASH_Program+0x24>
 8009f20:	2302      	movs	r3, #2
 8009f22:	e053      	b.n	8009fcc <HAL_FLASH_Program+0xcc>
 8009f24:	4b2b      	ldr	r3, [pc, #172]	@ (8009fd4 <HAL_FLASH_Program+0xd4>)
 8009f26:	2201      	movs	r2, #1
 8009f28:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 8009f2a:	68bb      	ldr	r3, [r7, #8]
 8009f2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009f30:	d315      	bcc.n	8009f5e <HAL_FLASH_Program+0x5e>
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 8009f38:	d211      	bcs.n	8009f5e <HAL_FLASH_Program+0x5e>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	617b      	str	r3, [r7, #20]
  {
    return HAL_ERROR;
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009f3e:	4b25      	ldr	r3, [pc, #148]	@ (8009fd4 <HAL_FLASH_Program+0xd4>)
 8009f40:	2200      	movs	r2, #0
 8009f42:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8009f44:	6979      	ldr	r1, [r7, #20]
 8009f46:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8009f4a:	f000 f88d 	bl	800a068 <FLASH_WaitForLastOperation>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if(status == HAL_OK)
 8009f54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d002      	beq.n	8009f62 <HAL_FLASH_Program+0x62>
 8009f5c:	e031      	b.n	8009fc2 <HAL_FLASH_Program+0xc2>
    return HAL_ERROR;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	e034      	b.n	8009fcc <HAL_FLASH_Program+0xcc>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 8009f62:	4b1d      	ldr	r3, [pc, #116]	@ (8009fd8 <HAL_FLASH_Program+0xd8>)
 8009f64:	68db      	ldr	r3, [r3, #12]
 8009f66:	4a1c      	ldr	r2, [pc, #112]	@ (8009fd8 <HAL_FLASH_Program+0xd8>)
 8009f68:	f043 0302 	orr.w	r3, r3, #2
 8009f6c:	60d3      	str	r3, [r2, #12]
  __ASM volatile ("isb 0xF":::"memory");
 8009f6e:	f3bf 8f6f 	isb	sy
}
 8009f72:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8009f74:	f3bf 8f4f 	dsb	sy
}
 8009f78:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 8009f7a:	69fb      	ldr	r3, [r7, #28]
 8009f7c:	681a      	ldr	r2, [r3, #0]
 8009f7e:	6a3b      	ldr	r3, [r7, #32]
 8009f80:	601a      	str	r2, [r3, #0]
        dest_addr++;
 8009f82:	6a3b      	ldr	r3, [r7, #32]
 8009f84:	3304      	adds	r3, #4
 8009f86:	623b      	str	r3, [r7, #32]
        src_addr++;
 8009f88:	69fb      	ldr	r3, [r7, #28]
 8009f8a:	3304      	adds	r3, #4
 8009f8c:	61fb      	str	r3, [r7, #28]
        row_index--;
 8009f8e:	7efb      	ldrb	r3, [r7, #27]
 8009f90:	3b01      	subs	r3, #1
 8009f92:	76fb      	strb	r3, [r7, #27]
     } while (row_index != 0U);
 8009f94:	7efb      	ldrb	r3, [r7, #27]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d1ef      	bne.n	8009f7a <HAL_FLASH_Program+0x7a>
  __ASM volatile ("isb 0xF":::"memory");
 8009f9a:	f3bf 8f6f 	isb	sy
}
 8009f9e:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8009fa0:	f3bf 8f4f 	dsb	sy
}
 8009fa4:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8009fa6:	6979      	ldr	r1, [r7, #20]
 8009fa8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8009fac:	f000 f85c 	bl	800a068 <FLASH_WaitForLastOperation>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* If the program operation is completed, disable the PG */
      CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 8009fb6:	4b08      	ldr	r3, [pc, #32]	@ (8009fd8 <HAL_FLASH_Program+0xd8>)
 8009fb8:	68db      	ldr	r3, [r3, #12]
 8009fba:	4a07      	ldr	r2, [pc, #28]	@ (8009fd8 <HAL_FLASH_Program+0xd8>)
 8009fbc:	f023 0302 	bic.w	r3, r3, #2
 8009fc0:	60d3      	str	r3, [r2, #12]
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009fc2:	4b04      	ldr	r3, [pc, #16]	@ (8009fd4 <HAL_FLASH_Program+0xd4>)
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	751a      	strb	r2, [r3, #20]

  return status;
 8009fc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3728      	adds	r7, #40	@ 0x28
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}
 8009fd4:	24000edc 	.word	0x24000edc
 8009fd8:	52002000 	.word	0x52002000

08009fdc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8009fe0:	4b0c      	ldr	r3, [pc, #48]	@ (800a014 <HAL_FLASH_Unlock+0x38>)
 8009fe2:	68db      	ldr	r3, [r3, #12]
 8009fe4:	f003 0301 	and.w	r3, r3, #1
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d00d      	beq.n	800a008 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 8009fec:	4b09      	ldr	r3, [pc, #36]	@ (800a014 <HAL_FLASH_Unlock+0x38>)
 8009fee:	4a0a      	ldr	r2, [pc, #40]	@ (800a018 <HAL_FLASH_Unlock+0x3c>)
 8009ff0:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 8009ff2:	4b08      	ldr	r3, [pc, #32]	@ (800a014 <HAL_FLASH_Unlock+0x38>)
 8009ff4:	4a09      	ldr	r2, [pc, #36]	@ (800a01c <HAL_FLASH_Unlock+0x40>)
 8009ff6:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8009ff8:	4b06      	ldr	r3, [pc, #24]	@ (800a014 <HAL_FLASH_Unlock+0x38>)
 8009ffa:	68db      	ldr	r3, [r3, #12]
 8009ffc:	f003 0301 	and.w	r3, r3, #1
 800a000:	2b00      	cmp	r3, #0
 800a002:	d001      	beq.n	800a008 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 800a004:	2301      	movs	r3, #1
 800a006:	e000      	b.n	800a00a <HAL_FLASH_Unlock+0x2e>
      return HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800a008:	2300      	movs	r3, #0
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr
 800a014:	52002000 	.word	0x52002000
 800a018:	45670123 	.word	0x45670123
 800a01c:	cdef89ab 	.word	0xcdef89ab

0800a020 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800a020:	b480      	push	{r7}
 800a022:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Control Register access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 800a024:	4b09      	ldr	r3, [pc, #36]	@ (800a04c <HAL_FLASH_Lock+0x2c>)
 800a026:	68db      	ldr	r3, [r3, #12]
 800a028:	4a08      	ldr	r2, [pc, #32]	@ (800a04c <HAL_FLASH_Lock+0x2c>)
 800a02a:	f043 0301 	orr.w	r3, r3, #1
 800a02e:	60d3      	str	r3, [r2, #12]

  /* Verify Flash Bank1 is locked */
  if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) == 0U)
 800a030:	4b06      	ldr	r3, [pc, #24]	@ (800a04c <HAL_FLASH_Lock+0x2c>)
 800a032:	68db      	ldr	r3, [r3, #12]
 800a034:	f003 0301 	and.w	r3, r3, #1
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d101      	bne.n	800a040 <HAL_FLASH_Lock+0x20>
  {
    return HAL_ERROR;
 800a03c:	2301      	movs	r3, #1
 800a03e:	e000      	b.n	800a042 <HAL_FLASH_Lock+0x22>
  {
    return HAL_ERROR;
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800a040:	2300      	movs	r3, #0
}
 800a042:	4618      	mov	r0, r3
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr
 800a04c:	52002000 	.word	0x52002000

0800a050 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_DBECC_BANK2: Double Detection ECC on Bank 2
  *            @arg HAL_FLASH_ERROR_CRCRD_BANK2: CRC Read Error on Bank 2
*/

uint32_t HAL_FLASH_GetError(void)
{
 800a050:	b480      	push	{r7}
 800a052:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 800a054:	4b03      	ldr	r3, [pc, #12]	@ (800a064 <HAL_FLASH_GetError+0x14>)
 800a056:	699b      	ldr	r3, [r3, #24]
}
 800a058:	4618      	mov	r0, r3
 800a05a:	46bd      	mov	sp, r7
 800a05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a060:	4770      	bx	lr
 800a062:	bf00      	nop
 800a064:	24000edc 	.word	0x24000edc

0800a068 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b086      	sub	sp, #24
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 800a072:	2304      	movs	r3, #4
 800a074:	613b      	str	r3, [r7, #16]
  uint32_t errorflag = 0;
 800a076:	2300      	movs	r3, #0
 800a078:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a07a:	f7fa f89d 	bl	80041b8 <HAL_GetTick>
 800a07e:	60f8      	str	r0, [r7, #12]
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800a080:	e010      	b.n	800a0a4 <FLASH_WaitForLastOperation+0x3c>
  {
    if(Timeout != HAL_MAX_DELAY)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a088:	d00c      	beq.n	800a0a4 <FLASH_WaitForLastOperation+0x3c>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a08a:	f7fa f895 	bl	80041b8 <HAL_GetTick>
 800a08e:	4602      	mov	r2, r0
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	1ad3      	subs	r3, r2, r3
 800a094:	687a      	ldr	r2, [r7, #4]
 800a096:	429a      	cmp	r2, r3
 800a098:	d302      	bcc.n	800a0a0 <FLASH_WaitForLastOperation+0x38>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d101      	bne.n	800a0a4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800a0a0:	2303      	movs	r3, #3
 800a0a2:	e02d      	b.n	800a100 <FLASH_WaitForLastOperation+0x98>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800a0a4:	4b18      	ldr	r3, [pc, #96]	@ (800a108 <FLASH_WaitForLastOperation+0xa0>)
 800a0a6:	691a      	ldr	r2, [r3, #16]
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	4013      	ands	r3, r2
 800a0ac:	693a      	ldr	r2, [r7, #16]
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	d0e7      	beq.n	800a082 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d104      	bne.n	800a0c2 <FLASH_WaitForLastOperation+0x5a>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 800a0b8:	4b13      	ldr	r3, [pc, #76]	@ (800a108 <FLASH_WaitForLastOperation+0xa0>)
 800a0ba:	691a      	ldr	r2, [r3, #16]
 800a0bc:	4b13      	ldr	r3, [pc, #76]	@ (800a10c <FLASH_WaitForLastOperation+0xa4>)
 800a0be:	4013      	ands	r3, r2
 800a0c0:	617b      	str	r3, [r7, #20]
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d00a      	beq.n	800a0e2 <FLASH_WaitForLastOperation+0x7a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 800a0cc:	4b10      	ldr	r3, [pc, #64]	@ (800a110 <FLASH_WaitForLastOperation+0xa8>)
 800a0ce:	699a      	ldr	r2, [r3, #24]
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	4a0e      	ldr	r2, [pc, #56]	@ (800a110 <FLASH_WaitForLastOperation+0xa8>)
 800a0d6:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 800a0d8:	4a0b      	ldr	r2, [pc, #44]	@ (800a108 <FLASH_WaitForLastOperation+0xa0>)
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	6153      	str	r3, [r2, #20]

    return HAL_ERROR;
 800a0de:	2301      	movs	r3, #1
 800a0e0:	e00e      	b.n	800a100 <FLASH_WaitForLastOperation+0x98>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	2b01      	cmp	r3, #1
 800a0e6:	d10a      	bne.n	800a0fe <FLASH_WaitForLastOperation+0x96>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 800a0e8:	4b07      	ldr	r3, [pc, #28]	@ (800a108 <FLASH_WaitForLastOperation+0xa0>)
 800a0ea:	691b      	ldr	r3, [r3, #16]
 800a0ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a0f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a0f4:	d103      	bne.n	800a0fe <FLASH_WaitForLastOperation+0x96>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800a0f6:	4b04      	ldr	r3, [pc, #16]	@ (800a108 <FLASH_WaitForLastOperation+0xa0>)
 800a0f8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800a0fc:	615a      	str	r2, [r3, #20]
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800a0fe:	2300      	movs	r3, #0
}
 800a100:	4618      	mov	r0, r3
 800a102:	3718      	adds	r7, #24
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}
 800a108:	52002000 	.word	0x52002000
 800a10c:	17ee0000 	.word	0x17ee0000
 800a110:	24000edc 	.word	0x24000edc

0800a114 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a11e:	2300      	movs	r3, #0
 800a120:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a122:	4b3f      	ldr	r3, [pc, #252]	@ (800a220 <HAL_FLASHEx_Erase+0x10c>)
 800a124:	7d1b      	ldrb	r3, [r3, #20]
 800a126:	2b01      	cmp	r3, #1
 800a128:	d101      	bne.n	800a12e <HAL_FLASHEx_Erase+0x1a>
 800a12a:	2302      	movs	r3, #2
 800a12c:	e074      	b.n	800a218 <HAL_FLASHEx_Erase+0x104>
 800a12e:	4b3c      	ldr	r3, [pc, #240]	@ (800a220 <HAL_FLASHEx_Erase+0x10c>)
 800a130:	2201      	movs	r2, #1
 800a132:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a134:	4b3a      	ldr	r3, [pc, #232]	@ (800a220 <HAL_FLASHEx_Erase+0x10c>)
 800a136:	2200      	movs	r2, #0
 800a138:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	f003 0301 	and.w	r3, r3, #1
 800a142:	2b00      	cmp	r3, #0
 800a144:	d009      	beq.n	800a15a <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800a146:	2101      	movs	r1, #1
 800a148:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800a14c:	f7ff ff8c 	bl	800a068 <FLASH_WaitForLastOperation>
 800a150:	4603      	mov	r3, r0
 800a152:	2b00      	cmp	r3, #0
 800a154:	d001      	beq.n	800a15a <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 800a156:	2301      	movs	r3, #1
 800a158:	73fb      	strb	r3, [r7, #15]
      status = HAL_ERROR;
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 800a15a:	7bfb      	ldrb	r3, [r7, #15]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d157      	bne.n	800a210 <HAL_FLASHEx_Erase+0xfc>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	2b01      	cmp	r3, #1
 800a166:	d11e      	bne.n	800a1a6 <HAL_FLASHEx_Erase+0x92>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	691a      	ldr	r2, [r3, #16]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	4619      	mov	r1, r3
 800a172:	4610      	mov	r0, r2
 800a174:	f000 f85a 	bl	800a22c <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	685b      	ldr	r3, [r3, #4]
 800a17c:	f003 0301 	and.w	r3, r3, #1
 800a180:	2b00      	cmp	r3, #0
 800a182:	d045      	beq.n	800a210 <HAL_FLASHEx_Erase+0xfc>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800a184:	2101      	movs	r1, #1
 800a186:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800a18a:	f7ff ff6d 	bl	800a068 <FLASH_WaitForLastOperation>
 800a18e:	4603      	mov	r3, r0
 800a190:	2b00      	cmp	r3, #0
 800a192:	d001      	beq.n	800a198 <HAL_FLASHEx_Erase+0x84>
        {
          status = HAL_ERROR;
 800a194:	2301      	movs	r3, #1
 800a196:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 800a198:	4b22      	ldr	r3, [pc, #136]	@ (800a224 <HAL_FLASHEx_Erase+0x110>)
 800a19a:	68db      	ldr	r3, [r3, #12]
 800a19c:	4a21      	ldr	r2, [pc, #132]	@ (800a224 <HAL_FLASHEx_Erase+0x110>)
 800a19e:	f023 0308 	bic.w	r3, r3, #8
 800a1a2:	60d3      	str	r3, [r2, #12]
 800a1a4:	e034      	b.n	800a210 <HAL_FLASHEx_Erase+0xfc>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a1ac:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	689b      	ldr	r3, [r3, #8]
 800a1b2:	60bb      	str	r3, [r7, #8]
 800a1b4:	e024      	b.n	800a200 <HAL_FLASHEx_Erase+0xec>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6859      	ldr	r1, [r3, #4]
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	691b      	ldr	r3, [r3, #16]
 800a1be:	461a      	mov	r2, r3
 800a1c0:	68b8      	ldr	r0, [r7, #8]
 800a1c2:	f000 f857 	bl	800a274 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	685b      	ldr	r3, [r3, #4]
 800a1ca:	f003 0301 	and.w	r3, r3, #1
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d00c      	beq.n	800a1ec <HAL_FLASHEx_Erase+0xd8>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 800a1d2:	2101      	movs	r1, #1
 800a1d4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800a1d8:	f7ff ff46 	bl	800a068 <FLASH_WaitForLastOperation>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800a1e0:	4b10      	ldr	r3, [pc, #64]	@ (800a224 <HAL_FLASHEx_Erase+0x110>)
 800a1e2:	68da      	ldr	r2, [r3, #12]
 800a1e4:	490f      	ldr	r1, [pc, #60]	@ (800a224 <HAL_FLASHEx_Erase+0x110>)
 800a1e6:	4b10      	ldr	r3, [pc, #64]	@ (800a228 <HAL_FLASHEx_Erase+0x114>)
 800a1e8:	4013      	ands	r3, r2
 800a1ea:	60cb      	str	r3, [r1, #12]
          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 800a1ec:	7bfb      	ldrb	r3, [r7, #15]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d003      	beq.n	800a1fa <HAL_FLASHEx_Erase+0xe6>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	68ba      	ldr	r2, [r7, #8]
 800a1f6:	601a      	str	r2, [r3, #0]
          break;
 800a1f8:	e00a      	b.n	800a210 <HAL_FLASHEx_Erase+0xfc>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	3301      	adds	r3, #1
 800a1fe:	60bb      	str	r3, [r7, #8]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	68da      	ldr	r2, [r3, #12]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	689b      	ldr	r3, [r3, #8]
 800a208:	4413      	add	r3, r2
 800a20a:	68ba      	ldr	r2, [r7, #8]
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d3d2      	bcc.n	800a1b6 <HAL_FLASHEx_Erase+0xa2>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a210:	4b03      	ldr	r3, [pc, #12]	@ (800a220 <HAL_FLASHEx_Erase+0x10c>)
 800a212:	2200      	movs	r2, #0
 800a214:	751a      	strb	r2, [r3, #20]

  return status;
 800a216:	7bfb      	ldrb	r3, [r7, #15]
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3710      	adds	r7, #16
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}
 800a220:	24000edc 	.word	0x24000edc
 800a224:	52002000 	.word	0x52002000
 800a228:	fffff8fb 	.word	0xfffff8fb

0800a22c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b083      	sub	sp, #12
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	6039      	str	r1, [r7, #0]
  }
  else
#endif /* DUAL_BANK */
  {
    /* Proceed to erase Flash Bank  */
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	f003 0301 	and.w	r3, r3, #1
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d011      	beq.n	800a264 <FLASH_MassErase+0x38>
    {
#if defined (FLASH_CR_PSIZE)
      /* Set Program/erase VoltageRange for Bank1 */
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800a240:	4b0b      	ldr	r3, [pc, #44]	@ (800a270 <FLASH_MassErase+0x44>)
 800a242:	68db      	ldr	r3, [r3, #12]
 800a244:	4a0a      	ldr	r2, [pc, #40]	@ (800a270 <FLASH_MassErase+0x44>)
 800a246:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800a24a:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 800a24c:	4b08      	ldr	r3, [pc, #32]	@ (800a270 <FLASH_MassErase+0x44>)
 800a24e:	68da      	ldr	r2, [r3, #12]
 800a250:	4907      	ldr	r1, [pc, #28]	@ (800a270 <FLASH_MassErase+0x44>)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	4313      	orrs	r3, r2
 800a256:	60cb      	str	r3, [r1, #12]
#endif /* FLASH_CR_PSIZE */

      /* Erase Bank1 */
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 800a258:	4b05      	ldr	r3, [pc, #20]	@ (800a270 <FLASH_MassErase+0x44>)
 800a25a:	68db      	ldr	r3, [r3, #12]
 800a25c:	4a04      	ldr	r2, [pc, #16]	@ (800a270 <FLASH_MassErase+0x44>)
 800a25e:	f043 0388 	orr.w	r3, r3, #136	@ 0x88
 800a262:	60d3      	str	r3, [r2, #12]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 800a264:	bf00      	nop
 800a266:	370c      	adds	r7, #12
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr
 800a270:	52002000 	.word	0x52002000

0800a274 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 800a274:	b480      	push	{r7}
 800a276:	b085      	sub	sp, #20
 800a278:	af00      	add	r7, sp, #0
 800a27a:	60f8      	str	r0, [r7, #12]
 800a27c:	60b9      	str	r1, [r7, #8]
 800a27e:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	f003 0301 	and.w	r3, r3, #1
 800a286:	2b00      	cmp	r3, #0
 800a288:	d010      	beq.n	800a2ac <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800a28a:	4b0b      	ldr	r3, [pc, #44]	@ (800a2b8 <FLASH_Erase_Sector+0x44>)
 800a28c:	68db      	ldr	r3, [r3, #12]
 800a28e:	4a0a      	ldr	r2, [pc, #40]	@ (800a2b8 <FLASH_Erase_Sector+0x44>)
 800a290:	f423 63e6 	bic.w	r3, r3, #1840	@ 0x730
 800a294:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800a296:	4b08      	ldr	r3, [pc, #32]	@ (800a2b8 <FLASH_Erase_Sector+0x44>)
 800a298:	68da      	ldr	r2, [r3, #12]
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	0219      	lsls	r1, r3, #8
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	430b      	orrs	r3, r1
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	4a04      	ldr	r2, [pc, #16]	@ (800a2b8 <FLASH_Erase_Sector+0x44>)
 800a2a6:	f043 0384 	orr.w	r3, r3, #132	@ 0x84
 800a2aa:	60d3      	str	r3, [r2, #12]

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 800a2ac:	bf00      	nop
 800a2ae:	3714      	adds	r7, #20
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr
 800a2b8:	52002000 	.word	0x52002000

0800a2bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b089      	sub	sp, #36	@ 0x24
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a2ca:	4b86      	ldr	r3, [pc, #536]	@ (800a4e4 <HAL_GPIO_Init+0x228>)
 800a2cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a2ce:	e18c      	b.n	800a5ea <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	681a      	ldr	r2, [r3, #0]
 800a2d4:	2101      	movs	r1, #1
 800a2d6:	69fb      	ldr	r3, [r7, #28]
 800a2d8:	fa01 f303 	lsl.w	r3, r1, r3
 800a2dc:	4013      	ands	r3, r2
 800a2de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	f000 817e 	beq.w	800a5e4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	f003 0303 	and.w	r3, r3, #3
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	d005      	beq.n	800a300 <HAL_GPIO_Init+0x44>
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	685b      	ldr	r3, [r3, #4]
 800a2f8:	f003 0303 	and.w	r3, r3, #3
 800a2fc:	2b02      	cmp	r3, #2
 800a2fe:	d130      	bne.n	800a362 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	689b      	ldr	r3, [r3, #8]
 800a304:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a306:	69fb      	ldr	r3, [r7, #28]
 800a308:	005b      	lsls	r3, r3, #1
 800a30a:	2203      	movs	r2, #3
 800a30c:	fa02 f303 	lsl.w	r3, r2, r3
 800a310:	43db      	mvns	r3, r3
 800a312:	69ba      	ldr	r2, [r7, #24]
 800a314:	4013      	ands	r3, r2
 800a316:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	68da      	ldr	r2, [r3, #12]
 800a31c:	69fb      	ldr	r3, [r7, #28]
 800a31e:	005b      	lsls	r3, r3, #1
 800a320:	fa02 f303 	lsl.w	r3, r2, r3
 800a324:	69ba      	ldr	r2, [r7, #24]
 800a326:	4313      	orrs	r3, r2
 800a328:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	69ba      	ldr	r2, [r7, #24]
 800a32e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a336:	2201      	movs	r2, #1
 800a338:	69fb      	ldr	r3, [r7, #28]
 800a33a:	fa02 f303 	lsl.w	r3, r2, r3
 800a33e:	43db      	mvns	r3, r3
 800a340:	69ba      	ldr	r2, [r7, #24]
 800a342:	4013      	ands	r3, r2
 800a344:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	685b      	ldr	r3, [r3, #4]
 800a34a:	091b      	lsrs	r3, r3, #4
 800a34c:	f003 0201 	and.w	r2, r3, #1
 800a350:	69fb      	ldr	r3, [r7, #28]
 800a352:	fa02 f303 	lsl.w	r3, r2, r3
 800a356:	69ba      	ldr	r2, [r7, #24]
 800a358:	4313      	orrs	r3, r2
 800a35a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	69ba      	ldr	r2, [r7, #24]
 800a360:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	f003 0303 	and.w	r3, r3, #3
 800a36a:	2b03      	cmp	r3, #3
 800a36c:	d017      	beq.n	800a39e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	68db      	ldr	r3, [r3, #12]
 800a372:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a374:	69fb      	ldr	r3, [r7, #28]
 800a376:	005b      	lsls	r3, r3, #1
 800a378:	2203      	movs	r2, #3
 800a37a:	fa02 f303 	lsl.w	r3, r2, r3
 800a37e:	43db      	mvns	r3, r3
 800a380:	69ba      	ldr	r2, [r7, #24]
 800a382:	4013      	ands	r3, r2
 800a384:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	689a      	ldr	r2, [r3, #8]
 800a38a:	69fb      	ldr	r3, [r7, #28]
 800a38c:	005b      	lsls	r3, r3, #1
 800a38e:	fa02 f303 	lsl.w	r3, r2, r3
 800a392:	69ba      	ldr	r2, [r7, #24]
 800a394:	4313      	orrs	r3, r2
 800a396:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	69ba      	ldr	r2, [r7, #24]
 800a39c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	685b      	ldr	r3, [r3, #4]
 800a3a2:	f003 0303 	and.w	r3, r3, #3
 800a3a6:	2b02      	cmp	r3, #2
 800a3a8:	d123      	bne.n	800a3f2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a3aa:	69fb      	ldr	r3, [r7, #28]
 800a3ac:	08da      	lsrs	r2, r3, #3
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	3208      	adds	r2, #8
 800a3b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a3b8:	69fb      	ldr	r3, [r7, #28]
 800a3ba:	f003 0307 	and.w	r3, r3, #7
 800a3be:	009b      	lsls	r3, r3, #2
 800a3c0:	220f      	movs	r2, #15
 800a3c2:	fa02 f303 	lsl.w	r3, r2, r3
 800a3c6:	43db      	mvns	r3, r3
 800a3c8:	69ba      	ldr	r2, [r7, #24]
 800a3ca:	4013      	ands	r3, r2
 800a3cc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	691a      	ldr	r2, [r3, #16]
 800a3d2:	69fb      	ldr	r3, [r7, #28]
 800a3d4:	f003 0307 	and.w	r3, r3, #7
 800a3d8:	009b      	lsls	r3, r3, #2
 800a3da:	fa02 f303 	lsl.w	r3, r2, r3
 800a3de:	69ba      	ldr	r2, [r7, #24]
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a3e4:	69fb      	ldr	r3, [r7, #28]
 800a3e6:	08da      	lsrs	r2, r3, #3
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	3208      	adds	r2, #8
 800a3ec:	69b9      	ldr	r1, [r7, #24]
 800a3ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a3f8:	69fb      	ldr	r3, [r7, #28]
 800a3fa:	005b      	lsls	r3, r3, #1
 800a3fc:	2203      	movs	r2, #3
 800a3fe:	fa02 f303 	lsl.w	r3, r2, r3
 800a402:	43db      	mvns	r3, r3
 800a404:	69ba      	ldr	r2, [r7, #24]
 800a406:	4013      	ands	r3, r2
 800a408:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	f003 0203 	and.w	r2, r3, #3
 800a412:	69fb      	ldr	r3, [r7, #28]
 800a414:	005b      	lsls	r3, r3, #1
 800a416:	fa02 f303 	lsl.w	r3, r2, r3
 800a41a:	69ba      	ldr	r2, [r7, #24]
 800a41c:	4313      	orrs	r3, r2
 800a41e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	69ba      	ldr	r2, [r7, #24]
 800a424:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a42e:	2b00      	cmp	r3, #0
 800a430:	f000 80d8 	beq.w	800a5e4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a434:	4b2c      	ldr	r3, [pc, #176]	@ (800a4e8 <HAL_GPIO_Init+0x22c>)
 800a436:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a43a:	4a2b      	ldr	r2, [pc, #172]	@ (800a4e8 <HAL_GPIO_Init+0x22c>)
 800a43c:	f043 0302 	orr.w	r3, r3, #2
 800a440:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800a444:	4b28      	ldr	r3, [pc, #160]	@ (800a4e8 <HAL_GPIO_Init+0x22c>)
 800a446:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a44a:	f003 0302 	and.w	r3, r3, #2
 800a44e:	60fb      	str	r3, [r7, #12]
 800a450:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a452:	4a26      	ldr	r2, [pc, #152]	@ (800a4ec <HAL_GPIO_Init+0x230>)
 800a454:	69fb      	ldr	r3, [r7, #28]
 800a456:	089b      	lsrs	r3, r3, #2
 800a458:	3302      	adds	r3, #2
 800a45a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a45e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a460:	69fb      	ldr	r3, [r7, #28]
 800a462:	f003 0303 	and.w	r3, r3, #3
 800a466:	009b      	lsls	r3, r3, #2
 800a468:	220f      	movs	r2, #15
 800a46a:	fa02 f303 	lsl.w	r3, r2, r3
 800a46e:	43db      	mvns	r3, r3
 800a470:	69ba      	ldr	r2, [r7, #24]
 800a472:	4013      	ands	r3, r2
 800a474:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	4a1d      	ldr	r2, [pc, #116]	@ (800a4f0 <HAL_GPIO_Init+0x234>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d04a      	beq.n	800a514 <HAL_GPIO_Init+0x258>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	4a1c      	ldr	r2, [pc, #112]	@ (800a4f4 <HAL_GPIO_Init+0x238>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d02b      	beq.n	800a4de <HAL_GPIO_Init+0x222>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	4a1b      	ldr	r2, [pc, #108]	@ (800a4f8 <HAL_GPIO_Init+0x23c>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d025      	beq.n	800a4da <HAL_GPIO_Init+0x21e>
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	4a1a      	ldr	r2, [pc, #104]	@ (800a4fc <HAL_GPIO_Init+0x240>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d01f      	beq.n	800a4d6 <HAL_GPIO_Init+0x21a>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	4a19      	ldr	r2, [pc, #100]	@ (800a500 <HAL_GPIO_Init+0x244>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d019      	beq.n	800a4d2 <HAL_GPIO_Init+0x216>
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	4a18      	ldr	r2, [pc, #96]	@ (800a504 <HAL_GPIO_Init+0x248>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d013      	beq.n	800a4ce <HAL_GPIO_Init+0x212>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	4a17      	ldr	r2, [pc, #92]	@ (800a508 <HAL_GPIO_Init+0x24c>)
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d00d      	beq.n	800a4ca <HAL_GPIO_Init+0x20e>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	4a16      	ldr	r2, [pc, #88]	@ (800a50c <HAL_GPIO_Init+0x250>)
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d007      	beq.n	800a4c6 <HAL_GPIO_Init+0x20a>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	4a15      	ldr	r2, [pc, #84]	@ (800a510 <HAL_GPIO_Init+0x254>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d101      	bne.n	800a4c2 <HAL_GPIO_Init+0x206>
 800a4be:	2309      	movs	r3, #9
 800a4c0:	e029      	b.n	800a516 <HAL_GPIO_Init+0x25a>
 800a4c2:	230a      	movs	r3, #10
 800a4c4:	e027      	b.n	800a516 <HAL_GPIO_Init+0x25a>
 800a4c6:	2307      	movs	r3, #7
 800a4c8:	e025      	b.n	800a516 <HAL_GPIO_Init+0x25a>
 800a4ca:	2306      	movs	r3, #6
 800a4cc:	e023      	b.n	800a516 <HAL_GPIO_Init+0x25a>
 800a4ce:	2305      	movs	r3, #5
 800a4d0:	e021      	b.n	800a516 <HAL_GPIO_Init+0x25a>
 800a4d2:	2304      	movs	r3, #4
 800a4d4:	e01f      	b.n	800a516 <HAL_GPIO_Init+0x25a>
 800a4d6:	2303      	movs	r3, #3
 800a4d8:	e01d      	b.n	800a516 <HAL_GPIO_Init+0x25a>
 800a4da:	2302      	movs	r3, #2
 800a4dc:	e01b      	b.n	800a516 <HAL_GPIO_Init+0x25a>
 800a4de:	2301      	movs	r3, #1
 800a4e0:	e019      	b.n	800a516 <HAL_GPIO_Init+0x25a>
 800a4e2:	bf00      	nop
 800a4e4:	58000080 	.word	0x58000080
 800a4e8:	58024400 	.word	0x58024400
 800a4ec:	58000400 	.word	0x58000400
 800a4f0:	58020000 	.word	0x58020000
 800a4f4:	58020400 	.word	0x58020400
 800a4f8:	58020800 	.word	0x58020800
 800a4fc:	58020c00 	.word	0x58020c00
 800a500:	58021000 	.word	0x58021000
 800a504:	58021400 	.word	0x58021400
 800a508:	58021800 	.word	0x58021800
 800a50c:	58021c00 	.word	0x58021c00
 800a510:	58022400 	.word	0x58022400
 800a514:	2300      	movs	r3, #0
 800a516:	69fa      	ldr	r2, [r7, #28]
 800a518:	f002 0203 	and.w	r2, r2, #3
 800a51c:	0092      	lsls	r2, r2, #2
 800a51e:	4093      	lsls	r3, r2
 800a520:	69ba      	ldr	r2, [r7, #24]
 800a522:	4313      	orrs	r3, r2
 800a524:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a526:	4938      	ldr	r1, [pc, #224]	@ (800a608 <HAL_GPIO_Init+0x34c>)
 800a528:	69fb      	ldr	r3, [r7, #28]
 800a52a:	089b      	lsrs	r3, r3, #2
 800a52c:	3302      	adds	r3, #2
 800a52e:	69ba      	ldr	r2, [r7, #24]
 800a530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a534:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	43db      	mvns	r3, r3
 800a540:	69ba      	ldr	r2, [r7, #24]
 800a542:	4013      	ands	r3, r2
 800a544:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	685b      	ldr	r3, [r3, #4]
 800a54a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d003      	beq.n	800a55a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800a552:	69ba      	ldr	r2, [r7, #24]
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	4313      	orrs	r3, r2
 800a558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800a55a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a55e:	69bb      	ldr	r3, [r7, #24]
 800a560:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a562:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a566:	685b      	ldr	r3, [r3, #4]
 800a568:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	43db      	mvns	r3, r3
 800a56e:	69ba      	ldr	r2, [r7, #24]
 800a570:	4013      	ands	r3, r2
 800a572:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	685b      	ldr	r3, [r3, #4]
 800a578:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d003      	beq.n	800a588 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800a580:	69ba      	ldr	r2, [r7, #24]
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	4313      	orrs	r3, r2
 800a586:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800a588:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a58c:	69bb      	ldr	r3, [r7, #24]
 800a58e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	685b      	ldr	r3, [r3, #4]
 800a594:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	43db      	mvns	r3, r3
 800a59a:	69ba      	ldr	r2, [r7, #24]
 800a59c:	4013      	ands	r3, r2
 800a59e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d003      	beq.n	800a5b4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800a5ac:	69ba      	ldr	r2, [r7, #24]
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	4313      	orrs	r3, r2
 800a5b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	69ba      	ldr	r2, [r7, #24]
 800a5b8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	43db      	mvns	r3, r3
 800a5c4:	69ba      	ldr	r2, [r7, #24]
 800a5c6:	4013      	ands	r3, r2
 800a5c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	685b      	ldr	r3, [r3, #4]
 800a5ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d003      	beq.n	800a5de <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800a5d6:	69ba      	ldr	r2, [r7, #24]
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	69ba      	ldr	r2, [r7, #24]
 800a5e2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800a5e4:	69fb      	ldr	r3, [r7, #28]
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	69fb      	ldr	r3, [r7, #28]
 800a5f0:	fa22 f303 	lsr.w	r3, r2, r3
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	f47f ae6b 	bne.w	800a2d0 <HAL_GPIO_Init+0x14>
  }
}
 800a5fa:	bf00      	nop
 800a5fc:	bf00      	nop
 800a5fe:	3724      	adds	r7, #36	@ 0x24
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr
 800a608:	58000400 	.word	0x58000400

0800a60c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b085      	sub	sp, #20
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	460b      	mov	r3, r1
 800a616:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	691a      	ldr	r2, [r3, #16]
 800a61c:	887b      	ldrh	r3, [r7, #2]
 800a61e:	4013      	ands	r3, r2
 800a620:	2b00      	cmp	r3, #0
 800a622:	d002      	beq.n	800a62a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a624:	2301      	movs	r3, #1
 800a626:	73fb      	strb	r3, [r7, #15]
 800a628:	e001      	b.n	800a62e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a62a:	2300      	movs	r3, #0
 800a62c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a62e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a630:	4618      	mov	r0, r3
 800a632:	3714      	adds	r7, #20
 800a634:	46bd      	mov	sp, r7
 800a636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63a:	4770      	bx	lr

0800a63c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b083      	sub	sp, #12
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	460b      	mov	r3, r1
 800a646:	807b      	strh	r3, [r7, #2]
 800a648:	4613      	mov	r3, r2
 800a64a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a64c:	787b      	ldrb	r3, [r7, #1]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d003      	beq.n	800a65a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a652:	887a      	ldrh	r2, [r7, #2]
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800a658:	e003      	b.n	800a662 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a65a:	887b      	ldrh	r3, [r7, #2]
 800a65c:	041a      	lsls	r2, r3, #16
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	619a      	str	r2, [r3, #24]
}
 800a662:	bf00      	nop
 800a664:	370c      	adds	r7, #12
 800a666:	46bd      	mov	sp, r7
 800a668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66c:	4770      	bx	lr

0800a66e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a66e:	b580      	push	{r7, lr}
 800a670:	b082      	sub	sp, #8
 800a672:	af00      	add	r7, sp, #0
 800a674:	4603      	mov	r3, r0
 800a676:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800a678:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a67c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800a680:	88fb      	ldrh	r3, [r7, #6]
 800a682:	4013      	ands	r3, r2
 800a684:	2b00      	cmp	r3, #0
 800a686:	d008      	beq.n	800a69a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a688:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a68c:	88fb      	ldrh	r3, [r7, #6]
 800a68e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a692:	88fb      	ldrh	r3, [r7, #6]
 800a694:	4618      	mov	r0, r3
 800a696:	f7f7 fbaf 	bl	8001df8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800a69a:	bf00      	nop
 800a69c:	3708      	adds	r7, #8
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}
	...

0800a6a4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b084      	sub	sp, #16
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a6ac:	4b19      	ldr	r3, [pc, #100]	@ (800a714 <HAL_PWREx_ConfigSupply+0x70>)
 800a6ae:	68db      	ldr	r3, [r3, #12]
 800a6b0:	f003 0304 	and.w	r3, r3, #4
 800a6b4:	2b04      	cmp	r3, #4
 800a6b6:	d00a      	beq.n	800a6ce <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a6b8:	4b16      	ldr	r3, [pc, #88]	@ (800a714 <HAL_PWREx_ConfigSupply+0x70>)
 800a6ba:	68db      	ldr	r3, [r3, #12]
 800a6bc:	f003 0307 	and.w	r3, r3, #7
 800a6c0:	687a      	ldr	r2, [r7, #4]
 800a6c2:	429a      	cmp	r2, r3
 800a6c4:	d001      	beq.n	800a6ca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	e01f      	b.n	800a70a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	e01d      	b.n	800a70a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a6ce:	4b11      	ldr	r3, [pc, #68]	@ (800a714 <HAL_PWREx_ConfigSupply+0x70>)
 800a6d0:	68db      	ldr	r3, [r3, #12]
 800a6d2:	f023 0207 	bic.w	r2, r3, #7
 800a6d6:	490f      	ldr	r1, [pc, #60]	@ (800a714 <HAL_PWREx_ConfigSupply+0x70>)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a6de:	f7f9 fd6b 	bl	80041b8 <HAL_GetTick>
 800a6e2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a6e4:	e009      	b.n	800a6fa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a6e6:	f7f9 fd67 	bl	80041b8 <HAL_GetTick>
 800a6ea:	4602      	mov	r2, r0
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	1ad3      	subs	r3, r2, r3
 800a6f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a6f4:	d901      	bls.n	800a6fa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	e007      	b.n	800a70a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a6fa:	4b06      	ldr	r3, [pc, #24]	@ (800a714 <HAL_PWREx_ConfigSupply+0x70>)
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a702:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a706:	d1ee      	bne.n	800a6e6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a708:	2300      	movs	r3, #0
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3710      	adds	r7, #16
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}
 800a712:	bf00      	nop
 800a714:	58024800 	.word	0x58024800

0800a718 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b08c      	sub	sp, #48	@ 0x30
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d101      	bne.n	800a72a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a726:	2301      	movs	r3, #1
 800a728:	e3c8      	b.n	800aebc <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f003 0301 	and.w	r3, r3, #1
 800a732:	2b00      	cmp	r3, #0
 800a734:	f000 8087 	beq.w	800a846 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a738:	4b88      	ldr	r3, [pc, #544]	@ (800a95c <HAL_RCC_OscConfig+0x244>)
 800a73a:	691b      	ldr	r3, [r3, #16]
 800a73c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a740:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a742:	4b86      	ldr	r3, [pc, #536]	@ (800a95c <HAL_RCC_OscConfig+0x244>)
 800a744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a746:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a74a:	2b10      	cmp	r3, #16
 800a74c:	d007      	beq.n	800a75e <HAL_RCC_OscConfig+0x46>
 800a74e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a750:	2b18      	cmp	r3, #24
 800a752:	d110      	bne.n	800a776 <HAL_RCC_OscConfig+0x5e>
 800a754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a756:	f003 0303 	and.w	r3, r3, #3
 800a75a:	2b02      	cmp	r3, #2
 800a75c:	d10b      	bne.n	800a776 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a75e:	4b7f      	ldr	r3, [pc, #508]	@ (800a95c <HAL_RCC_OscConfig+0x244>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a766:	2b00      	cmp	r3, #0
 800a768:	d06c      	beq.n	800a844 <HAL_RCC_OscConfig+0x12c>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	685b      	ldr	r3, [r3, #4]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d168      	bne.n	800a844 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a772:	2301      	movs	r3, #1
 800a774:	e3a2      	b.n	800aebc <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	685b      	ldr	r3, [r3, #4]
 800a77a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a77e:	d106      	bne.n	800a78e <HAL_RCC_OscConfig+0x76>
 800a780:	4b76      	ldr	r3, [pc, #472]	@ (800a95c <HAL_RCC_OscConfig+0x244>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	4a75      	ldr	r2, [pc, #468]	@ (800a95c <HAL_RCC_OscConfig+0x244>)
 800a786:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a78a:	6013      	str	r3, [r2, #0]
 800a78c:	e02e      	b.n	800a7ec <HAL_RCC_OscConfig+0xd4>
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	685b      	ldr	r3, [r3, #4]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d10c      	bne.n	800a7b0 <HAL_RCC_OscConfig+0x98>
 800a796:	4b71      	ldr	r3, [pc, #452]	@ (800a95c <HAL_RCC_OscConfig+0x244>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	4a70      	ldr	r2, [pc, #448]	@ (800a95c <HAL_RCC_OscConfig+0x244>)
 800a79c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a7a0:	6013      	str	r3, [r2, #0]
 800a7a2:	4b6e      	ldr	r3, [pc, #440]	@ (800a95c <HAL_RCC_OscConfig+0x244>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	4a6d      	ldr	r2, [pc, #436]	@ (800a95c <HAL_RCC_OscConfig+0x244>)
 800a7a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a7ac:	6013      	str	r3, [r2, #0]
 800a7ae:	e01d      	b.n	800a7ec <HAL_RCC_OscConfig+0xd4>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	685b      	ldr	r3, [r3, #4]
 800a7b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a7b8:	d10c      	bne.n	800a7d4 <HAL_RCC_OscConfig+0xbc>
 800a7ba:	4b68      	ldr	r3, [pc, #416]	@ (800a95c <HAL_RCC_OscConfig+0x244>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4a67      	ldr	r2, [pc, #412]	@ (800a95c <HAL_RCC_OscConfig+0x244>)
 800a7c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a7c4:	6013      	str	r3, [r2, #0]
 800a7c6:	4b65      	ldr	r3, [pc, #404]	@ (800a95c <HAL_RCC_OscConfig+0x244>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	4a64      	ldr	r2, [pc, #400]	@ (800a95c <HAL_RCC_OscConfig+0x244>)
 800a7cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a7d0:	6013      	str	r3, [r2, #0]
 800a7d2:	e00b      	b.n	800a7ec <HAL_RCC_OscConfig+0xd4>
 800a7d4:	4b61      	ldr	r3, [pc, #388]	@ (800a95c <HAL_RCC_OscConfig+0x244>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	4a60      	ldr	r2, [pc, #384]	@ (800a95c <HAL_RCC_OscConfig+0x244>)
 800a7da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a7de:	6013      	str	r3, [r2, #0]
 800a7e0:	4b5e      	ldr	r3, [pc, #376]	@ (800a95c <HAL_RCC_OscConfig+0x244>)
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	4a5d      	ldr	r2, [pc, #372]	@ (800a95c <HAL_RCC_OscConfig+0x244>)
 800a7e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a7ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	685b      	ldr	r3, [r3, #4]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d013      	beq.n	800a81c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7f4:	f7f9 fce0 	bl	80041b8 <HAL_GetTick>
 800a7f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a7fa:	e008      	b.n	800a80e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a7fc:	f7f9 fcdc 	bl	80041b8 <HAL_GetTick>
 800a800:	4602      	mov	r2, r0
 800a802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a804:	1ad3      	subs	r3, r2, r3
 800a806:	2b64      	cmp	r3, #100	@ 0x64
 800a808:	d901      	bls.n	800a80e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a80a:	2303      	movs	r3, #3
 800a80c:	e356      	b.n	800aebc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a80e:	4b53      	ldr	r3, [pc, #332]	@ (800a95c <HAL_RCC_OscConfig+0x244>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a816:	2b00      	cmp	r3, #0
 800a818:	d0f0      	beq.n	800a7fc <HAL_RCC_OscConfig+0xe4>
 800a81a:	e014      	b.n	800a846 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a81c:	f7f9 fccc 	bl	80041b8 <HAL_GetTick>
 800a820:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a822:	e008      	b.n	800a836 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a824:	f7f9 fcc8 	bl	80041b8 <HAL_GetTick>
 800a828:	4602      	mov	r2, r0
 800a82a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a82c:	1ad3      	subs	r3, r2, r3
 800a82e:	2b64      	cmp	r3, #100	@ 0x64
 800a830:	d901      	bls.n	800a836 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a832:	2303      	movs	r3, #3
 800a834:	e342      	b.n	800aebc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a836:	4b49      	ldr	r3, [pc, #292]	@ (800a95c <HAL_RCC_OscConfig+0x244>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d1f0      	bne.n	800a824 <HAL_RCC_OscConfig+0x10c>
 800a842:	e000      	b.n	800a846 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a844:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f003 0302 	and.w	r3, r3, #2
 800a84e:	2b00      	cmp	r3, #0
 800a850:	f000 808c 	beq.w	800a96c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a854:	4b41      	ldr	r3, [pc, #260]	@ (800a95c <HAL_RCC_OscConfig+0x244>)
 800a856:	691b      	ldr	r3, [r3, #16]
 800a858:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a85c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a85e:	4b3f      	ldr	r3, [pc, #252]	@ (800a95c <HAL_RCC_OscConfig+0x244>)
 800a860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a862:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a864:	6a3b      	ldr	r3, [r7, #32]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d007      	beq.n	800a87a <HAL_RCC_OscConfig+0x162>
 800a86a:	6a3b      	ldr	r3, [r7, #32]
 800a86c:	2b18      	cmp	r3, #24
 800a86e:	d137      	bne.n	800a8e0 <HAL_RCC_OscConfig+0x1c8>
 800a870:	69fb      	ldr	r3, [r7, #28]
 800a872:	f003 0303 	and.w	r3, r3, #3
 800a876:	2b00      	cmp	r3, #0
 800a878:	d132      	bne.n	800a8e0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a87a:	4b38      	ldr	r3, [pc, #224]	@ (800a95c <HAL_RCC_OscConfig+0x244>)
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	f003 0304 	and.w	r3, r3, #4
 800a882:	2b00      	cmp	r3, #0
 800a884:	d005      	beq.n	800a892 <HAL_RCC_OscConfig+0x17a>
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	68db      	ldr	r3, [r3, #12]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d101      	bne.n	800a892 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a88e:	2301      	movs	r3, #1
 800a890:	e314      	b.n	800aebc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a892:	4b32      	ldr	r3, [pc, #200]	@ (800a95c <HAL_RCC_OscConfig+0x244>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f023 0219 	bic.w	r2, r3, #25
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	68db      	ldr	r3, [r3, #12]
 800a89e:	492f      	ldr	r1, [pc, #188]	@ (800a95c <HAL_RCC_OscConfig+0x244>)
 800a8a0:	4313      	orrs	r3, r2
 800a8a2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8a4:	f7f9 fc88 	bl	80041b8 <HAL_GetTick>
 800a8a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a8aa:	e008      	b.n	800a8be <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a8ac:	f7f9 fc84 	bl	80041b8 <HAL_GetTick>
 800a8b0:	4602      	mov	r2, r0
 800a8b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8b4:	1ad3      	subs	r3, r2, r3
 800a8b6:	2b02      	cmp	r3, #2
 800a8b8:	d901      	bls.n	800a8be <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800a8ba:	2303      	movs	r3, #3
 800a8bc:	e2fe      	b.n	800aebc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a8be:	4b27      	ldr	r3, [pc, #156]	@ (800a95c <HAL_RCC_OscConfig+0x244>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f003 0304 	and.w	r3, r3, #4
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d0f0      	beq.n	800a8ac <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a8ca:	4b24      	ldr	r3, [pc, #144]	@ (800a95c <HAL_RCC_OscConfig+0x244>)
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	691b      	ldr	r3, [r3, #16]
 800a8d6:	061b      	lsls	r3, r3, #24
 800a8d8:	4920      	ldr	r1, [pc, #128]	@ (800a95c <HAL_RCC_OscConfig+0x244>)
 800a8da:	4313      	orrs	r3, r2
 800a8dc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a8de:	e045      	b.n	800a96c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	68db      	ldr	r3, [r3, #12]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d026      	beq.n	800a936 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a8e8:	4b1c      	ldr	r3, [pc, #112]	@ (800a95c <HAL_RCC_OscConfig+0x244>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f023 0219 	bic.w	r2, r3, #25
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	68db      	ldr	r3, [r3, #12]
 800a8f4:	4919      	ldr	r1, [pc, #100]	@ (800a95c <HAL_RCC_OscConfig+0x244>)
 800a8f6:	4313      	orrs	r3, r2
 800a8f8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8fa:	f7f9 fc5d 	bl	80041b8 <HAL_GetTick>
 800a8fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a900:	e008      	b.n	800a914 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a902:	f7f9 fc59 	bl	80041b8 <HAL_GetTick>
 800a906:	4602      	mov	r2, r0
 800a908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a90a:	1ad3      	subs	r3, r2, r3
 800a90c:	2b02      	cmp	r3, #2
 800a90e:	d901      	bls.n	800a914 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800a910:	2303      	movs	r3, #3
 800a912:	e2d3      	b.n	800aebc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a914:	4b11      	ldr	r3, [pc, #68]	@ (800a95c <HAL_RCC_OscConfig+0x244>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f003 0304 	and.w	r3, r3, #4
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d0f0      	beq.n	800a902 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a920:	4b0e      	ldr	r3, [pc, #56]	@ (800a95c <HAL_RCC_OscConfig+0x244>)
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	691b      	ldr	r3, [r3, #16]
 800a92c:	061b      	lsls	r3, r3, #24
 800a92e:	490b      	ldr	r1, [pc, #44]	@ (800a95c <HAL_RCC_OscConfig+0x244>)
 800a930:	4313      	orrs	r3, r2
 800a932:	604b      	str	r3, [r1, #4]
 800a934:	e01a      	b.n	800a96c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a936:	4b09      	ldr	r3, [pc, #36]	@ (800a95c <HAL_RCC_OscConfig+0x244>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	4a08      	ldr	r2, [pc, #32]	@ (800a95c <HAL_RCC_OscConfig+0x244>)
 800a93c:	f023 0301 	bic.w	r3, r3, #1
 800a940:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a942:	f7f9 fc39 	bl	80041b8 <HAL_GetTick>
 800a946:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a948:	e00a      	b.n	800a960 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a94a:	f7f9 fc35 	bl	80041b8 <HAL_GetTick>
 800a94e:	4602      	mov	r2, r0
 800a950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a952:	1ad3      	subs	r3, r2, r3
 800a954:	2b02      	cmp	r3, #2
 800a956:	d903      	bls.n	800a960 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a958:	2303      	movs	r3, #3
 800a95a:	e2af      	b.n	800aebc <HAL_RCC_OscConfig+0x7a4>
 800a95c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a960:	4b96      	ldr	r3, [pc, #600]	@ (800abbc <HAL_RCC_OscConfig+0x4a4>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f003 0304 	and.w	r3, r3, #4
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d1ee      	bne.n	800a94a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f003 0310 	and.w	r3, r3, #16
 800a974:	2b00      	cmp	r3, #0
 800a976:	d06a      	beq.n	800aa4e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a978:	4b90      	ldr	r3, [pc, #576]	@ (800abbc <HAL_RCC_OscConfig+0x4a4>)
 800a97a:	691b      	ldr	r3, [r3, #16]
 800a97c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a980:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a982:	4b8e      	ldr	r3, [pc, #568]	@ (800abbc <HAL_RCC_OscConfig+0x4a4>)
 800a984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a986:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a988:	69bb      	ldr	r3, [r7, #24]
 800a98a:	2b08      	cmp	r3, #8
 800a98c:	d007      	beq.n	800a99e <HAL_RCC_OscConfig+0x286>
 800a98e:	69bb      	ldr	r3, [r7, #24]
 800a990:	2b18      	cmp	r3, #24
 800a992:	d11b      	bne.n	800a9cc <HAL_RCC_OscConfig+0x2b4>
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	f003 0303 	and.w	r3, r3, #3
 800a99a:	2b01      	cmp	r3, #1
 800a99c:	d116      	bne.n	800a9cc <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a99e:	4b87      	ldr	r3, [pc, #540]	@ (800abbc <HAL_RCC_OscConfig+0x4a4>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d005      	beq.n	800a9b6 <HAL_RCC_OscConfig+0x29e>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	69db      	ldr	r3, [r3, #28]
 800a9ae:	2b80      	cmp	r3, #128	@ 0x80
 800a9b0:	d001      	beq.n	800a9b6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	e282      	b.n	800aebc <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a9b6:	4b81      	ldr	r3, [pc, #516]	@ (800abbc <HAL_RCC_OscConfig+0x4a4>)
 800a9b8:	68db      	ldr	r3, [r3, #12]
 800a9ba:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6a1b      	ldr	r3, [r3, #32]
 800a9c2:	061b      	lsls	r3, r3, #24
 800a9c4:	497d      	ldr	r1, [pc, #500]	@ (800abbc <HAL_RCC_OscConfig+0x4a4>)
 800a9c6:	4313      	orrs	r3, r2
 800a9c8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a9ca:	e040      	b.n	800aa4e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	69db      	ldr	r3, [r3, #28]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d023      	beq.n	800aa1c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a9d4:	4b79      	ldr	r3, [pc, #484]	@ (800abbc <HAL_RCC_OscConfig+0x4a4>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	4a78      	ldr	r2, [pc, #480]	@ (800abbc <HAL_RCC_OscConfig+0x4a4>)
 800a9da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9e0:	f7f9 fbea 	bl	80041b8 <HAL_GetTick>
 800a9e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a9e6:	e008      	b.n	800a9fa <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a9e8:	f7f9 fbe6 	bl	80041b8 <HAL_GetTick>
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9f0:	1ad3      	subs	r3, r2, r3
 800a9f2:	2b02      	cmp	r3, #2
 800a9f4:	d901      	bls.n	800a9fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a9f6:	2303      	movs	r3, #3
 800a9f8:	e260      	b.n	800aebc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a9fa:	4b70      	ldr	r3, [pc, #448]	@ (800abbc <HAL_RCC_OscConfig+0x4a4>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d0f0      	beq.n	800a9e8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800aa06:	4b6d      	ldr	r3, [pc, #436]	@ (800abbc <HAL_RCC_OscConfig+0x4a4>)
 800aa08:	68db      	ldr	r3, [r3, #12]
 800aa0a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6a1b      	ldr	r3, [r3, #32]
 800aa12:	061b      	lsls	r3, r3, #24
 800aa14:	4969      	ldr	r1, [pc, #420]	@ (800abbc <HAL_RCC_OscConfig+0x4a4>)
 800aa16:	4313      	orrs	r3, r2
 800aa18:	60cb      	str	r3, [r1, #12]
 800aa1a:	e018      	b.n	800aa4e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800aa1c:	4b67      	ldr	r3, [pc, #412]	@ (800abbc <HAL_RCC_OscConfig+0x4a4>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	4a66      	ldr	r2, [pc, #408]	@ (800abbc <HAL_RCC_OscConfig+0x4a4>)
 800aa22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aa26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa28:	f7f9 fbc6 	bl	80041b8 <HAL_GetTick>
 800aa2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800aa2e:	e008      	b.n	800aa42 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800aa30:	f7f9 fbc2 	bl	80041b8 <HAL_GetTick>
 800aa34:	4602      	mov	r2, r0
 800aa36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa38:	1ad3      	subs	r3, r2, r3
 800aa3a:	2b02      	cmp	r3, #2
 800aa3c:	d901      	bls.n	800aa42 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800aa3e:	2303      	movs	r3, #3
 800aa40:	e23c      	b.n	800aebc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800aa42:	4b5e      	ldr	r3, [pc, #376]	@ (800abbc <HAL_RCC_OscConfig+0x4a4>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d1f0      	bne.n	800aa30 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f003 0308 	and.w	r3, r3, #8
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d036      	beq.n	800aac8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	695b      	ldr	r3, [r3, #20]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d019      	beq.n	800aa96 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aa62:	4b56      	ldr	r3, [pc, #344]	@ (800abbc <HAL_RCC_OscConfig+0x4a4>)
 800aa64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa66:	4a55      	ldr	r2, [pc, #340]	@ (800abbc <HAL_RCC_OscConfig+0x4a4>)
 800aa68:	f043 0301 	orr.w	r3, r3, #1
 800aa6c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa6e:	f7f9 fba3 	bl	80041b8 <HAL_GetTick>
 800aa72:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800aa74:	e008      	b.n	800aa88 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa76:	f7f9 fb9f 	bl	80041b8 <HAL_GetTick>
 800aa7a:	4602      	mov	r2, r0
 800aa7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa7e:	1ad3      	subs	r3, r2, r3
 800aa80:	2b02      	cmp	r3, #2
 800aa82:	d901      	bls.n	800aa88 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800aa84:	2303      	movs	r3, #3
 800aa86:	e219      	b.n	800aebc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800aa88:	4b4c      	ldr	r3, [pc, #304]	@ (800abbc <HAL_RCC_OscConfig+0x4a4>)
 800aa8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa8c:	f003 0302 	and.w	r3, r3, #2
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d0f0      	beq.n	800aa76 <HAL_RCC_OscConfig+0x35e>
 800aa94:	e018      	b.n	800aac8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aa96:	4b49      	ldr	r3, [pc, #292]	@ (800abbc <HAL_RCC_OscConfig+0x4a4>)
 800aa98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa9a:	4a48      	ldr	r2, [pc, #288]	@ (800abbc <HAL_RCC_OscConfig+0x4a4>)
 800aa9c:	f023 0301 	bic.w	r3, r3, #1
 800aaa0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aaa2:	f7f9 fb89 	bl	80041b8 <HAL_GetTick>
 800aaa6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800aaa8:	e008      	b.n	800aabc <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aaaa:	f7f9 fb85 	bl	80041b8 <HAL_GetTick>
 800aaae:	4602      	mov	r2, r0
 800aab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aab2:	1ad3      	subs	r3, r2, r3
 800aab4:	2b02      	cmp	r3, #2
 800aab6:	d901      	bls.n	800aabc <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800aab8:	2303      	movs	r3, #3
 800aaba:	e1ff      	b.n	800aebc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800aabc:	4b3f      	ldr	r3, [pc, #252]	@ (800abbc <HAL_RCC_OscConfig+0x4a4>)
 800aabe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aac0:	f003 0302 	and.w	r3, r3, #2
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d1f0      	bne.n	800aaaa <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f003 0320 	and.w	r3, r3, #32
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d036      	beq.n	800ab42 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	699b      	ldr	r3, [r3, #24]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d019      	beq.n	800ab10 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800aadc:	4b37      	ldr	r3, [pc, #220]	@ (800abbc <HAL_RCC_OscConfig+0x4a4>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4a36      	ldr	r2, [pc, #216]	@ (800abbc <HAL_RCC_OscConfig+0x4a4>)
 800aae2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800aae6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800aae8:	f7f9 fb66 	bl	80041b8 <HAL_GetTick>
 800aaec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800aaee:	e008      	b.n	800ab02 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aaf0:	f7f9 fb62 	bl	80041b8 <HAL_GetTick>
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaf8:	1ad3      	subs	r3, r2, r3
 800aafa:	2b02      	cmp	r3, #2
 800aafc:	d901      	bls.n	800ab02 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800aafe:	2303      	movs	r3, #3
 800ab00:	e1dc      	b.n	800aebc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ab02:	4b2e      	ldr	r3, [pc, #184]	@ (800abbc <HAL_RCC_OscConfig+0x4a4>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d0f0      	beq.n	800aaf0 <HAL_RCC_OscConfig+0x3d8>
 800ab0e:	e018      	b.n	800ab42 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ab10:	4b2a      	ldr	r3, [pc, #168]	@ (800abbc <HAL_RCC_OscConfig+0x4a4>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	4a29      	ldr	r2, [pc, #164]	@ (800abbc <HAL_RCC_OscConfig+0x4a4>)
 800ab16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ab1a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ab1c:	f7f9 fb4c 	bl	80041b8 <HAL_GetTick>
 800ab20:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ab22:	e008      	b.n	800ab36 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ab24:	f7f9 fb48 	bl	80041b8 <HAL_GetTick>
 800ab28:	4602      	mov	r2, r0
 800ab2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab2c:	1ad3      	subs	r3, r2, r3
 800ab2e:	2b02      	cmp	r3, #2
 800ab30:	d901      	bls.n	800ab36 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800ab32:	2303      	movs	r3, #3
 800ab34:	e1c2      	b.n	800aebc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ab36:	4b21      	ldr	r3, [pc, #132]	@ (800abbc <HAL_RCC_OscConfig+0x4a4>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d1f0      	bne.n	800ab24 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f003 0304 	and.w	r3, r3, #4
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	f000 8086 	beq.w	800ac5c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ab50:	4b1b      	ldr	r3, [pc, #108]	@ (800abc0 <HAL_RCC_OscConfig+0x4a8>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	4a1a      	ldr	r2, [pc, #104]	@ (800abc0 <HAL_RCC_OscConfig+0x4a8>)
 800ab56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ab5a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ab5c:	f7f9 fb2c 	bl	80041b8 <HAL_GetTick>
 800ab60:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ab62:	e008      	b.n	800ab76 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab64:	f7f9 fb28 	bl	80041b8 <HAL_GetTick>
 800ab68:	4602      	mov	r2, r0
 800ab6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab6c:	1ad3      	subs	r3, r2, r3
 800ab6e:	2b64      	cmp	r3, #100	@ 0x64
 800ab70:	d901      	bls.n	800ab76 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800ab72:	2303      	movs	r3, #3
 800ab74:	e1a2      	b.n	800aebc <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ab76:	4b12      	ldr	r3, [pc, #72]	@ (800abc0 <HAL_RCC_OscConfig+0x4a8>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d0f0      	beq.n	800ab64 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	689b      	ldr	r3, [r3, #8]
 800ab86:	2b01      	cmp	r3, #1
 800ab88:	d106      	bne.n	800ab98 <HAL_RCC_OscConfig+0x480>
 800ab8a:	4b0c      	ldr	r3, [pc, #48]	@ (800abbc <HAL_RCC_OscConfig+0x4a4>)
 800ab8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab8e:	4a0b      	ldr	r2, [pc, #44]	@ (800abbc <HAL_RCC_OscConfig+0x4a4>)
 800ab90:	f043 0301 	orr.w	r3, r3, #1
 800ab94:	6713      	str	r3, [r2, #112]	@ 0x70
 800ab96:	e032      	b.n	800abfe <HAL_RCC_OscConfig+0x4e6>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	689b      	ldr	r3, [r3, #8]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d111      	bne.n	800abc4 <HAL_RCC_OscConfig+0x4ac>
 800aba0:	4b06      	ldr	r3, [pc, #24]	@ (800abbc <HAL_RCC_OscConfig+0x4a4>)
 800aba2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aba4:	4a05      	ldr	r2, [pc, #20]	@ (800abbc <HAL_RCC_OscConfig+0x4a4>)
 800aba6:	f023 0301 	bic.w	r3, r3, #1
 800abaa:	6713      	str	r3, [r2, #112]	@ 0x70
 800abac:	4b03      	ldr	r3, [pc, #12]	@ (800abbc <HAL_RCC_OscConfig+0x4a4>)
 800abae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abb0:	4a02      	ldr	r2, [pc, #8]	@ (800abbc <HAL_RCC_OscConfig+0x4a4>)
 800abb2:	f023 0304 	bic.w	r3, r3, #4
 800abb6:	6713      	str	r3, [r2, #112]	@ 0x70
 800abb8:	e021      	b.n	800abfe <HAL_RCC_OscConfig+0x4e6>
 800abba:	bf00      	nop
 800abbc:	58024400 	.word	0x58024400
 800abc0:	58024800 	.word	0x58024800
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	689b      	ldr	r3, [r3, #8]
 800abc8:	2b05      	cmp	r3, #5
 800abca:	d10c      	bne.n	800abe6 <HAL_RCC_OscConfig+0x4ce>
 800abcc:	4b83      	ldr	r3, [pc, #524]	@ (800addc <HAL_RCC_OscConfig+0x6c4>)
 800abce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abd0:	4a82      	ldr	r2, [pc, #520]	@ (800addc <HAL_RCC_OscConfig+0x6c4>)
 800abd2:	f043 0304 	orr.w	r3, r3, #4
 800abd6:	6713      	str	r3, [r2, #112]	@ 0x70
 800abd8:	4b80      	ldr	r3, [pc, #512]	@ (800addc <HAL_RCC_OscConfig+0x6c4>)
 800abda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abdc:	4a7f      	ldr	r2, [pc, #508]	@ (800addc <HAL_RCC_OscConfig+0x6c4>)
 800abde:	f043 0301 	orr.w	r3, r3, #1
 800abe2:	6713      	str	r3, [r2, #112]	@ 0x70
 800abe4:	e00b      	b.n	800abfe <HAL_RCC_OscConfig+0x4e6>
 800abe6:	4b7d      	ldr	r3, [pc, #500]	@ (800addc <HAL_RCC_OscConfig+0x6c4>)
 800abe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abea:	4a7c      	ldr	r2, [pc, #496]	@ (800addc <HAL_RCC_OscConfig+0x6c4>)
 800abec:	f023 0301 	bic.w	r3, r3, #1
 800abf0:	6713      	str	r3, [r2, #112]	@ 0x70
 800abf2:	4b7a      	ldr	r3, [pc, #488]	@ (800addc <HAL_RCC_OscConfig+0x6c4>)
 800abf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abf6:	4a79      	ldr	r2, [pc, #484]	@ (800addc <HAL_RCC_OscConfig+0x6c4>)
 800abf8:	f023 0304 	bic.w	r3, r3, #4
 800abfc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	689b      	ldr	r3, [r3, #8]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d015      	beq.n	800ac32 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac06:	f7f9 fad7 	bl	80041b8 <HAL_GetTick>
 800ac0a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ac0c:	e00a      	b.n	800ac24 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac0e:	f7f9 fad3 	bl	80041b8 <HAL_GetTick>
 800ac12:	4602      	mov	r2, r0
 800ac14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac16:	1ad3      	subs	r3, r2, r3
 800ac18:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d901      	bls.n	800ac24 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800ac20:	2303      	movs	r3, #3
 800ac22:	e14b      	b.n	800aebc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ac24:	4b6d      	ldr	r3, [pc, #436]	@ (800addc <HAL_RCC_OscConfig+0x6c4>)
 800ac26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac28:	f003 0302 	and.w	r3, r3, #2
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d0ee      	beq.n	800ac0e <HAL_RCC_OscConfig+0x4f6>
 800ac30:	e014      	b.n	800ac5c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac32:	f7f9 fac1 	bl	80041b8 <HAL_GetTick>
 800ac36:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ac38:	e00a      	b.n	800ac50 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac3a:	f7f9 fabd 	bl	80041b8 <HAL_GetTick>
 800ac3e:	4602      	mov	r2, r0
 800ac40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac42:	1ad3      	subs	r3, r2, r3
 800ac44:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d901      	bls.n	800ac50 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800ac4c:	2303      	movs	r3, #3
 800ac4e:	e135      	b.n	800aebc <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ac50:	4b62      	ldr	r3, [pc, #392]	@ (800addc <HAL_RCC_OscConfig+0x6c4>)
 800ac52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac54:	f003 0302 	and.w	r3, r3, #2
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d1ee      	bne.n	800ac3a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	f000 812a 	beq.w	800aeba <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ac66:	4b5d      	ldr	r3, [pc, #372]	@ (800addc <HAL_RCC_OscConfig+0x6c4>)
 800ac68:	691b      	ldr	r3, [r3, #16]
 800ac6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ac6e:	2b18      	cmp	r3, #24
 800ac70:	f000 80ba 	beq.w	800ade8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac78:	2b02      	cmp	r3, #2
 800ac7a:	f040 8095 	bne.w	800ada8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac7e:	4b57      	ldr	r3, [pc, #348]	@ (800addc <HAL_RCC_OscConfig+0x6c4>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	4a56      	ldr	r2, [pc, #344]	@ (800addc <HAL_RCC_OscConfig+0x6c4>)
 800ac84:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ac88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac8a:	f7f9 fa95 	bl	80041b8 <HAL_GetTick>
 800ac8e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ac90:	e008      	b.n	800aca4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac92:	f7f9 fa91 	bl	80041b8 <HAL_GetTick>
 800ac96:	4602      	mov	r2, r0
 800ac98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac9a:	1ad3      	subs	r3, r2, r3
 800ac9c:	2b02      	cmp	r3, #2
 800ac9e:	d901      	bls.n	800aca4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800aca0:	2303      	movs	r3, #3
 800aca2:	e10b      	b.n	800aebc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aca4:	4b4d      	ldr	r3, [pc, #308]	@ (800addc <HAL_RCC_OscConfig+0x6c4>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800acac:	2b00      	cmp	r3, #0
 800acae:	d1f0      	bne.n	800ac92 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800acb0:	4b4a      	ldr	r3, [pc, #296]	@ (800addc <HAL_RCC_OscConfig+0x6c4>)
 800acb2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800acb4:	4b4a      	ldr	r3, [pc, #296]	@ (800ade0 <HAL_RCC_OscConfig+0x6c8>)
 800acb6:	4013      	ands	r3, r2
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800acbc:	687a      	ldr	r2, [r7, #4]
 800acbe:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800acc0:	0112      	lsls	r2, r2, #4
 800acc2:	430a      	orrs	r2, r1
 800acc4:	4945      	ldr	r1, [pc, #276]	@ (800addc <HAL_RCC_OscConfig+0x6c4>)
 800acc6:	4313      	orrs	r3, r2
 800acc8:	628b      	str	r3, [r1, #40]	@ 0x28
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acce:	3b01      	subs	r3, #1
 800acd0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acd8:	3b01      	subs	r3, #1
 800acda:	025b      	lsls	r3, r3, #9
 800acdc:	b29b      	uxth	r3, r3
 800acde:	431a      	orrs	r2, r3
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ace4:	3b01      	subs	r3, #1
 800ace6:	041b      	lsls	r3, r3, #16
 800ace8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800acec:	431a      	orrs	r2, r3
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acf2:	3b01      	subs	r3, #1
 800acf4:	061b      	lsls	r3, r3, #24
 800acf6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800acfa:	4938      	ldr	r1, [pc, #224]	@ (800addc <HAL_RCC_OscConfig+0x6c4>)
 800acfc:	4313      	orrs	r3, r2
 800acfe:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800ad00:	4b36      	ldr	r3, [pc, #216]	@ (800addc <HAL_RCC_OscConfig+0x6c4>)
 800ad02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad04:	4a35      	ldr	r2, [pc, #212]	@ (800addc <HAL_RCC_OscConfig+0x6c4>)
 800ad06:	f023 0301 	bic.w	r3, r3, #1
 800ad0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ad0c:	4b33      	ldr	r3, [pc, #204]	@ (800addc <HAL_RCC_OscConfig+0x6c4>)
 800ad0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ad10:	4b34      	ldr	r3, [pc, #208]	@ (800ade4 <HAL_RCC_OscConfig+0x6cc>)
 800ad12:	4013      	ands	r3, r2
 800ad14:	687a      	ldr	r2, [r7, #4]
 800ad16:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ad18:	00d2      	lsls	r2, r2, #3
 800ad1a:	4930      	ldr	r1, [pc, #192]	@ (800addc <HAL_RCC_OscConfig+0x6c4>)
 800ad1c:	4313      	orrs	r3, r2
 800ad1e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ad20:	4b2e      	ldr	r3, [pc, #184]	@ (800addc <HAL_RCC_OscConfig+0x6c4>)
 800ad22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad24:	f023 020c 	bic.w	r2, r3, #12
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad2c:	492b      	ldr	r1, [pc, #172]	@ (800addc <HAL_RCC_OscConfig+0x6c4>)
 800ad2e:	4313      	orrs	r3, r2
 800ad30:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ad32:	4b2a      	ldr	r3, [pc, #168]	@ (800addc <HAL_RCC_OscConfig+0x6c4>)
 800ad34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad36:	f023 0202 	bic.w	r2, r3, #2
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad3e:	4927      	ldr	r1, [pc, #156]	@ (800addc <HAL_RCC_OscConfig+0x6c4>)
 800ad40:	4313      	orrs	r3, r2
 800ad42:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ad44:	4b25      	ldr	r3, [pc, #148]	@ (800addc <HAL_RCC_OscConfig+0x6c4>)
 800ad46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad48:	4a24      	ldr	r2, [pc, #144]	@ (800addc <HAL_RCC_OscConfig+0x6c4>)
 800ad4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ad4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad50:	4b22      	ldr	r3, [pc, #136]	@ (800addc <HAL_RCC_OscConfig+0x6c4>)
 800ad52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad54:	4a21      	ldr	r2, [pc, #132]	@ (800addc <HAL_RCC_OscConfig+0x6c4>)
 800ad56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ad5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ad5c:	4b1f      	ldr	r3, [pc, #124]	@ (800addc <HAL_RCC_OscConfig+0x6c4>)
 800ad5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad60:	4a1e      	ldr	r2, [pc, #120]	@ (800addc <HAL_RCC_OscConfig+0x6c4>)
 800ad62:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ad66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800ad68:	4b1c      	ldr	r3, [pc, #112]	@ (800addc <HAL_RCC_OscConfig+0x6c4>)
 800ad6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad6c:	4a1b      	ldr	r2, [pc, #108]	@ (800addc <HAL_RCC_OscConfig+0x6c4>)
 800ad6e:	f043 0301 	orr.w	r3, r3, #1
 800ad72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ad74:	4b19      	ldr	r3, [pc, #100]	@ (800addc <HAL_RCC_OscConfig+0x6c4>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4a18      	ldr	r2, [pc, #96]	@ (800addc <HAL_RCC_OscConfig+0x6c4>)
 800ad7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ad7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad80:	f7f9 fa1a 	bl	80041b8 <HAL_GetTick>
 800ad84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ad86:	e008      	b.n	800ad9a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad88:	f7f9 fa16 	bl	80041b8 <HAL_GetTick>
 800ad8c:	4602      	mov	r2, r0
 800ad8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad90:	1ad3      	subs	r3, r2, r3
 800ad92:	2b02      	cmp	r3, #2
 800ad94:	d901      	bls.n	800ad9a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800ad96:	2303      	movs	r3, #3
 800ad98:	e090      	b.n	800aebc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ad9a:	4b10      	ldr	r3, [pc, #64]	@ (800addc <HAL_RCC_OscConfig+0x6c4>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d0f0      	beq.n	800ad88 <HAL_RCC_OscConfig+0x670>
 800ada6:	e088      	b.n	800aeba <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ada8:	4b0c      	ldr	r3, [pc, #48]	@ (800addc <HAL_RCC_OscConfig+0x6c4>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	4a0b      	ldr	r2, [pc, #44]	@ (800addc <HAL_RCC_OscConfig+0x6c4>)
 800adae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800adb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800adb4:	f7f9 fa00 	bl	80041b8 <HAL_GetTick>
 800adb8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800adba:	e008      	b.n	800adce <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800adbc:	f7f9 f9fc 	bl	80041b8 <HAL_GetTick>
 800adc0:	4602      	mov	r2, r0
 800adc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adc4:	1ad3      	subs	r3, r2, r3
 800adc6:	2b02      	cmp	r3, #2
 800adc8:	d901      	bls.n	800adce <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800adca:	2303      	movs	r3, #3
 800adcc:	e076      	b.n	800aebc <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800adce:	4b03      	ldr	r3, [pc, #12]	@ (800addc <HAL_RCC_OscConfig+0x6c4>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800add6:	2b00      	cmp	r3, #0
 800add8:	d1f0      	bne.n	800adbc <HAL_RCC_OscConfig+0x6a4>
 800adda:	e06e      	b.n	800aeba <HAL_RCC_OscConfig+0x7a2>
 800addc:	58024400 	.word	0x58024400
 800ade0:	fffffc0c 	.word	0xfffffc0c
 800ade4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ade8:	4b36      	ldr	r3, [pc, #216]	@ (800aec4 <HAL_RCC_OscConfig+0x7ac>)
 800adea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adec:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800adee:	4b35      	ldr	r3, [pc, #212]	@ (800aec4 <HAL_RCC_OscConfig+0x7ac>)
 800adf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adf2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adf8:	2b01      	cmp	r3, #1
 800adfa:	d031      	beq.n	800ae60 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	f003 0203 	and.w	r2, r3, #3
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ae06:	429a      	cmp	r2, r3
 800ae08:	d12a      	bne.n	800ae60 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	091b      	lsrs	r3, r3, #4
 800ae0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ae16:	429a      	cmp	r2, r3
 800ae18:	d122      	bne.n	800ae60 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae24:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d11a      	bne.n	800ae60 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	0a5b      	lsrs	r3, r3, #9
 800ae2e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae36:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	d111      	bne.n	800ae60 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	0c1b      	lsrs	r3, r3, #16
 800ae40:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae48:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d108      	bne.n	800ae60 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	0e1b      	lsrs	r3, r3, #24
 800ae52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae5a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d001      	beq.n	800ae64 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800ae60:	2301      	movs	r3, #1
 800ae62:	e02b      	b.n	800aebc <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ae64:	4b17      	ldr	r3, [pc, #92]	@ (800aec4 <HAL_RCC_OscConfig+0x7ac>)
 800ae66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae68:	08db      	lsrs	r3, r3, #3
 800ae6a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae6e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ae74:	693a      	ldr	r2, [r7, #16]
 800ae76:	429a      	cmp	r2, r3
 800ae78:	d01f      	beq.n	800aeba <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800ae7a:	4b12      	ldr	r3, [pc, #72]	@ (800aec4 <HAL_RCC_OscConfig+0x7ac>)
 800ae7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae7e:	4a11      	ldr	r2, [pc, #68]	@ (800aec4 <HAL_RCC_OscConfig+0x7ac>)
 800ae80:	f023 0301 	bic.w	r3, r3, #1
 800ae84:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ae86:	f7f9 f997 	bl	80041b8 <HAL_GetTick>
 800ae8a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800ae8c:	bf00      	nop
 800ae8e:	f7f9 f993 	bl	80041b8 <HAL_GetTick>
 800ae92:	4602      	mov	r2, r0
 800ae94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d0f9      	beq.n	800ae8e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ae9a:	4b0a      	ldr	r3, [pc, #40]	@ (800aec4 <HAL_RCC_OscConfig+0x7ac>)
 800ae9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ae9e:	4b0a      	ldr	r3, [pc, #40]	@ (800aec8 <HAL_RCC_OscConfig+0x7b0>)
 800aea0:	4013      	ands	r3, r2
 800aea2:	687a      	ldr	r2, [r7, #4]
 800aea4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800aea6:	00d2      	lsls	r2, r2, #3
 800aea8:	4906      	ldr	r1, [pc, #24]	@ (800aec4 <HAL_RCC_OscConfig+0x7ac>)
 800aeaa:	4313      	orrs	r3, r2
 800aeac:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800aeae:	4b05      	ldr	r3, [pc, #20]	@ (800aec4 <HAL_RCC_OscConfig+0x7ac>)
 800aeb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeb2:	4a04      	ldr	r2, [pc, #16]	@ (800aec4 <HAL_RCC_OscConfig+0x7ac>)
 800aeb4:	f043 0301 	orr.w	r3, r3, #1
 800aeb8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800aeba:	2300      	movs	r3, #0
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	3730      	adds	r7, #48	@ 0x30
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}
 800aec4:	58024400 	.word	0x58024400
 800aec8:	ffff0007 	.word	0xffff0007

0800aecc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b086      	sub	sp, #24
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d101      	bne.n	800aee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aedc:	2301      	movs	r3, #1
 800aede:	e19c      	b.n	800b21a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800aee0:	4b8a      	ldr	r3, [pc, #552]	@ (800b10c <HAL_RCC_ClockConfig+0x240>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f003 030f 	and.w	r3, r3, #15
 800aee8:	683a      	ldr	r2, [r7, #0]
 800aeea:	429a      	cmp	r2, r3
 800aeec:	d910      	bls.n	800af10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aeee:	4b87      	ldr	r3, [pc, #540]	@ (800b10c <HAL_RCC_ClockConfig+0x240>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f023 020f 	bic.w	r2, r3, #15
 800aef6:	4985      	ldr	r1, [pc, #532]	@ (800b10c <HAL_RCC_ClockConfig+0x240>)
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	4313      	orrs	r3, r2
 800aefc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aefe:	4b83      	ldr	r3, [pc, #524]	@ (800b10c <HAL_RCC_ClockConfig+0x240>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f003 030f 	and.w	r3, r3, #15
 800af06:	683a      	ldr	r2, [r7, #0]
 800af08:	429a      	cmp	r2, r3
 800af0a:	d001      	beq.n	800af10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800af0c:	2301      	movs	r3, #1
 800af0e:	e184      	b.n	800b21a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f003 0304 	and.w	r3, r3, #4
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d010      	beq.n	800af3e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	691a      	ldr	r2, [r3, #16]
 800af20:	4b7b      	ldr	r3, [pc, #492]	@ (800b110 <HAL_RCC_ClockConfig+0x244>)
 800af22:	699b      	ldr	r3, [r3, #24]
 800af24:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800af28:	429a      	cmp	r2, r3
 800af2a:	d908      	bls.n	800af3e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800af2c:	4b78      	ldr	r3, [pc, #480]	@ (800b110 <HAL_RCC_ClockConfig+0x244>)
 800af2e:	699b      	ldr	r3, [r3, #24]
 800af30:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	691b      	ldr	r3, [r3, #16]
 800af38:	4975      	ldr	r1, [pc, #468]	@ (800b110 <HAL_RCC_ClockConfig+0x244>)
 800af3a:	4313      	orrs	r3, r2
 800af3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f003 0308 	and.w	r3, r3, #8
 800af46:	2b00      	cmp	r3, #0
 800af48:	d010      	beq.n	800af6c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	695a      	ldr	r2, [r3, #20]
 800af4e:	4b70      	ldr	r3, [pc, #448]	@ (800b110 <HAL_RCC_ClockConfig+0x244>)
 800af50:	69db      	ldr	r3, [r3, #28]
 800af52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800af56:	429a      	cmp	r2, r3
 800af58:	d908      	bls.n	800af6c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800af5a:	4b6d      	ldr	r3, [pc, #436]	@ (800b110 <HAL_RCC_ClockConfig+0x244>)
 800af5c:	69db      	ldr	r3, [r3, #28]
 800af5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	695b      	ldr	r3, [r3, #20]
 800af66:	496a      	ldr	r1, [pc, #424]	@ (800b110 <HAL_RCC_ClockConfig+0x244>)
 800af68:	4313      	orrs	r3, r2
 800af6a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f003 0310 	and.w	r3, r3, #16
 800af74:	2b00      	cmp	r3, #0
 800af76:	d010      	beq.n	800af9a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	699a      	ldr	r2, [r3, #24]
 800af7c:	4b64      	ldr	r3, [pc, #400]	@ (800b110 <HAL_RCC_ClockConfig+0x244>)
 800af7e:	69db      	ldr	r3, [r3, #28]
 800af80:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800af84:	429a      	cmp	r2, r3
 800af86:	d908      	bls.n	800af9a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800af88:	4b61      	ldr	r3, [pc, #388]	@ (800b110 <HAL_RCC_ClockConfig+0x244>)
 800af8a:	69db      	ldr	r3, [r3, #28]
 800af8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	699b      	ldr	r3, [r3, #24]
 800af94:	495e      	ldr	r1, [pc, #376]	@ (800b110 <HAL_RCC_ClockConfig+0x244>)
 800af96:	4313      	orrs	r3, r2
 800af98:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f003 0320 	and.w	r3, r3, #32
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d010      	beq.n	800afc8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	69da      	ldr	r2, [r3, #28]
 800afaa:	4b59      	ldr	r3, [pc, #356]	@ (800b110 <HAL_RCC_ClockConfig+0x244>)
 800afac:	6a1b      	ldr	r3, [r3, #32]
 800afae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800afb2:	429a      	cmp	r2, r3
 800afb4:	d908      	bls.n	800afc8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800afb6:	4b56      	ldr	r3, [pc, #344]	@ (800b110 <HAL_RCC_ClockConfig+0x244>)
 800afb8:	6a1b      	ldr	r3, [r3, #32]
 800afba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	69db      	ldr	r3, [r3, #28]
 800afc2:	4953      	ldr	r1, [pc, #332]	@ (800b110 <HAL_RCC_ClockConfig+0x244>)
 800afc4:	4313      	orrs	r3, r2
 800afc6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f003 0302 	and.w	r3, r3, #2
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d010      	beq.n	800aff6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	68da      	ldr	r2, [r3, #12]
 800afd8:	4b4d      	ldr	r3, [pc, #308]	@ (800b110 <HAL_RCC_ClockConfig+0x244>)
 800afda:	699b      	ldr	r3, [r3, #24]
 800afdc:	f003 030f 	and.w	r3, r3, #15
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d908      	bls.n	800aff6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800afe4:	4b4a      	ldr	r3, [pc, #296]	@ (800b110 <HAL_RCC_ClockConfig+0x244>)
 800afe6:	699b      	ldr	r3, [r3, #24]
 800afe8:	f023 020f 	bic.w	r2, r3, #15
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	68db      	ldr	r3, [r3, #12]
 800aff0:	4947      	ldr	r1, [pc, #284]	@ (800b110 <HAL_RCC_ClockConfig+0x244>)
 800aff2:	4313      	orrs	r3, r2
 800aff4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f003 0301 	and.w	r3, r3, #1
 800affe:	2b00      	cmp	r3, #0
 800b000:	d055      	beq.n	800b0ae <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b002:	4b43      	ldr	r3, [pc, #268]	@ (800b110 <HAL_RCC_ClockConfig+0x244>)
 800b004:	699b      	ldr	r3, [r3, #24]
 800b006:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	689b      	ldr	r3, [r3, #8]
 800b00e:	4940      	ldr	r1, [pc, #256]	@ (800b110 <HAL_RCC_ClockConfig+0x244>)
 800b010:	4313      	orrs	r3, r2
 800b012:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	685b      	ldr	r3, [r3, #4]
 800b018:	2b02      	cmp	r3, #2
 800b01a:	d107      	bne.n	800b02c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b01c:	4b3c      	ldr	r3, [pc, #240]	@ (800b110 <HAL_RCC_ClockConfig+0x244>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b024:	2b00      	cmp	r3, #0
 800b026:	d121      	bne.n	800b06c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b028:	2301      	movs	r3, #1
 800b02a:	e0f6      	b.n	800b21a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	2b03      	cmp	r3, #3
 800b032:	d107      	bne.n	800b044 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b034:	4b36      	ldr	r3, [pc, #216]	@ (800b110 <HAL_RCC_ClockConfig+0x244>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d115      	bne.n	800b06c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b040:	2301      	movs	r3, #1
 800b042:	e0ea      	b.n	800b21a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	685b      	ldr	r3, [r3, #4]
 800b048:	2b01      	cmp	r3, #1
 800b04a:	d107      	bne.n	800b05c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b04c:	4b30      	ldr	r3, [pc, #192]	@ (800b110 <HAL_RCC_ClockConfig+0x244>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b054:	2b00      	cmp	r3, #0
 800b056:	d109      	bne.n	800b06c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b058:	2301      	movs	r3, #1
 800b05a:	e0de      	b.n	800b21a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b05c:	4b2c      	ldr	r3, [pc, #176]	@ (800b110 <HAL_RCC_ClockConfig+0x244>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f003 0304 	and.w	r3, r3, #4
 800b064:	2b00      	cmp	r3, #0
 800b066:	d101      	bne.n	800b06c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b068:	2301      	movs	r3, #1
 800b06a:	e0d6      	b.n	800b21a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b06c:	4b28      	ldr	r3, [pc, #160]	@ (800b110 <HAL_RCC_ClockConfig+0x244>)
 800b06e:	691b      	ldr	r3, [r3, #16]
 800b070:	f023 0207 	bic.w	r2, r3, #7
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	685b      	ldr	r3, [r3, #4]
 800b078:	4925      	ldr	r1, [pc, #148]	@ (800b110 <HAL_RCC_ClockConfig+0x244>)
 800b07a:	4313      	orrs	r3, r2
 800b07c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b07e:	f7f9 f89b 	bl	80041b8 <HAL_GetTick>
 800b082:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b084:	e00a      	b.n	800b09c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b086:	f7f9 f897 	bl	80041b8 <HAL_GetTick>
 800b08a:	4602      	mov	r2, r0
 800b08c:	697b      	ldr	r3, [r7, #20]
 800b08e:	1ad3      	subs	r3, r2, r3
 800b090:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b094:	4293      	cmp	r3, r2
 800b096:	d901      	bls.n	800b09c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b098:	2303      	movs	r3, #3
 800b09a:	e0be      	b.n	800b21a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b09c:	4b1c      	ldr	r3, [pc, #112]	@ (800b110 <HAL_RCC_ClockConfig+0x244>)
 800b09e:	691b      	ldr	r3, [r3, #16]
 800b0a0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	685b      	ldr	r3, [r3, #4]
 800b0a8:	00db      	lsls	r3, r3, #3
 800b0aa:	429a      	cmp	r2, r3
 800b0ac:	d1eb      	bne.n	800b086 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f003 0302 	and.w	r3, r3, #2
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d010      	beq.n	800b0dc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	68da      	ldr	r2, [r3, #12]
 800b0be:	4b14      	ldr	r3, [pc, #80]	@ (800b110 <HAL_RCC_ClockConfig+0x244>)
 800b0c0:	699b      	ldr	r3, [r3, #24]
 800b0c2:	f003 030f 	and.w	r3, r3, #15
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	d208      	bcs.n	800b0dc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b0ca:	4b11      	ldr	r3, [pc, #68]	@ (800b110 <HAL_RCC_ClockConfig+0x244>)
 800b0cc:	699b      	ldr	r3, [r3, #24]
 800b0ce:	f023 020f 	bic.w	r2, r3, #15
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	68db      	ldr	r3, [r3, #12]
 800b0d6:	490e      	ldr	r1, [pc, #56]	@ (800b110 <HAL_RCC_ClockConfig+0x244>)
 800b0d8:	4313      	orrs	r3, r2
 800b0da:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b0dc:	4b0b      	ldr	r3, [pc, #44]	@ (800b10c <HAL_RCC_ClockConfig+0x240>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f003 030f 	and.w	r3, r3, #15
 800b0e4:	683a      	ldr	r2, [r7, #0]
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d214      	bcs.n	800b114 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b0ea:	4b08      	ldr	r3, [pc, #32]	@ (800b10c <HAL_RCC_ClockConfig+0x240>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f023 020f 	bic.w	r2, r3, #15
 800b0f2:	4906      	ldr	r1, [pc, #24]	@ (800b10c <HAL_RCC_ClockConfig+0x240>)
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	4313      	orrs	r3, r2
 800b0f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b0fa:	4b04      	ldr	r3, [pc, #16]	@ (800b10c <HAL_RCC_ClockConfig+0x240>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f003 030f 	and.w	r3, r3, #15
 800b102:	683a      	ldr	r2, [r7, #0]
 800b104:	429a      	cmp	r2, r3
 800b106:	d005      	beq.n	800b114 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b108:	2301      	movs	r3, #1
 800b10a:	e086      	b.n	800b21a <HAL_RCC_ClockConfig+0x34e>
 800b10c:	52002000 	.word	0x52002000
 800b110:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f003 0304 	and.w	r3, r3, #4
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d010      	beq.n	800b142 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	691a      	ldr	r2, [r3, #16]
 800b124:	4b3f      	ldr	r3, [pc, #252]	@ (800b224 <HAL_RCC_ClockConfig+0x358>)
 800b126:	699b      	ldr	r3, [r3, #24]
 800b128:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b12c:	429a      	cmp	r2, r3
 800b12e:	d208      	bcs.n	800b142 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b130:	4b3c      	ldr	r3, [pc, #240]	@ (800b224 <HAL_RCC_ClockConfig+0x358>)
 800b132:	699b      	ldr	r3, [r3, #24]
 800b134:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	691b      	ldr	r3, [r3, #16]
 800b13c:	4939      	ldr	r1, [pc, #228]	@ (800b224 <HAL_RCC_ClockConfig+0x358>)
 800b13e:	4313      	orrs	r3, r2
 800b140:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f003 0308 	and.w	r3, r3, #8
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d010      	beq.n	800b170 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	695a      	ldr	r2, [r3, #20]
 800b152:	4b34      	ldr	r3, [pc, #208]	@ (800b224 <HAL_RCC_ClockConfig+0x358>)
 800b154:	69db      	ldr	r3, [r3, #28]
 800b156:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d208      	bcs.n	800b170 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b15e:	4b31      	ldr	r3, [pc, #196]	@ (800b224 <HAL_RCC_ClockConfig+0x358>)
 800b160:	69db      	ldr	r3, [r3, #28]
 800b162:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	695b      	ldr	r3, [r3, #20]
 800b16a:	492e      	ldr	r1, [pc, #184]	@ (800b224 <HAL_RCC_ClockConfig+0x358>)
 800b16c:	4313      	orrs	r3, r2
 800b16e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f003 0310 	and.w	r3, r3, #16
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d010      	beq.n	800b19e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	699a      	ldr	r2, [r3, #24]
 800b180:	4b28      	ldr	r3, [pc, #160]	@ (800b224 <HAL_RCC_ClockConfig+0x358>)
 800b182:	69db      	ldr	r3, [r3, #28]
 800b184:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b188:	429a      	cmp	r2, r3
 800b18a:	d208      	bcs.n	800b19e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b18c:	4b25      	ldr	r3, [pc, #148]	@ (800b224 <HAL_RCC_ClockConfig+0x358>)
 800b18e:	69db      	ldr	r3, [r3, #28]
 800b190:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	699b      	ldr	r3, [r3, #24]
 800b198:	4922      	ldr	r1, [pc, #136]	@ (800b224 <HAL_RCC_ClockConfig+0x358>)
 800b19a:	4313      	orrs	r3, r2
 800b19c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f003 0320 	and.w	r3, r3, #32
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d010      	beq.n	800b1cc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	69da      	ldr	r2, [r3, #28]
 800b1ae:	4b1d      	ldr	r3, [pc, #116]	@ (800b224 <HAL_RCC_ClockConfig+0x358>)
 800b1b0:	6a1b      	ldr	r3, [r3, #32]
 800b1b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b1b6:	429a      	cmp	r2, r3
 800b1b8:	d208      	bcs.n	800b1cc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b1ba:	4b1a      	ldr	r3, [pc, #104]	@ (800b224 <HAL_RCC_ClockConfig+0x358>)
 800b1bc:	6a1b      	ldr	r3, [r3, #32]
 800b1be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	69db      	ldr	r3, [r3, #28]
 800b1c6:	4917      	ldr	r1, [pc, #92]	@ (800b224 <HAL_RCC_ClockConfig+0x358>)
 800b1c8:	4313      	orrs	r3, r2
 800b1ca:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b1cc:	f000 f834 	bl	800b238 <HAL_RCC_GetSysClockFreq>
 800b1d0:	4602      	mov	r2, r0
 800b1d2:	4b14      	ldr	r3, [pc, #80]	@ (800b224 <HAL_RCC_ClockConfig+0x358>)
 800b1d4:	699b      	ldr	r3, [r3, #24]
 800b1d6:	0a1b      	lsrs	r3, r3, #8
 800b1d8:	f003 030f 	and.w	r3, r3, #15
 800b1dc:	4912      	ldr	r1, [pc, #72]	@ (800b228 <HAL_RCC_ClockConfig+0x35c>)
 800b1de:	5ccb      	ldrb	r3, [r1, r3]
 800b1e0:	f003 031f 	and.w	r3, r3, #31
 800b1e4:	fa22 f303 	lsr.w	r3, r2, r3
 800b1e8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b1ea:	4b0e      	ldr	r3, [pc, #56]	@ (800b224 <HAL_RCC_ClockConfig+0x358>)
 800b1ec:	699b      	ldr	r3, [r3, #24]
 800b1ee:	f003 030f 	and.w	r3, r3, #15
 800b1f2:	4a0d      	ldr	r2, [pc, #52]	@ (800b228 <HAL_RCC_ClockConfig+0x35c>)
 800b1f4:	5cd3      	ldrb	r3, [r2, r3]
 800b1f6:	f003 031f 	and.w	r3, r3, #31
 800b1fa:	693a      	ldr	r2, [r7, #16]
 800b1fc:	fa22 f303 	lsr.w	r3, r2, r3
 800b200:	4a0a      	ldr	r2, [pc, #40]	@ (800b22c <HAL_RCC_ClockConfig+0x360>)
 800b202:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b204:	4a0a      	ldr	r2, [pc, #40]	@ (800b230 <HAL_RCC_ClockConfig+0x364>)
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b20a:	4b0a      	ldr	r3, [pc, #40]	@ (800b234 <HAL_RCC_ClockConfig+0x368>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	4618      	mov	r0, r3
 800b210:	f7f8 ff88 	bl	8004124 <HAL_InitTick>
 800b214:	4603      	mov	r3, r0
 800b216:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b218:	7bfb      	ldrb	r3, [r7, #15]
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3718      	adds	r7, #24
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
 800b222:	bf00      	nop
 800b224:	58024400 	.word	0x58024400
 800b228:	08011f8c 	.word	0x08011f8c
 800b22c:	2400003c 	.word	0x2400003c
 800b230:	24000038 	.word	0x24000038
 800b234:	24000040 	.word	0x24000040

0800b238 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b238:	b480      	push	{r7}
 800b23a:	b089      	sub	sp, #36	@ 0x24
 800b23c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b23e:	4bb3      	ldr	r3, [pc, #716]	@ (800b50c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b240:	691b      	ldr	r3, [r3, #16]
 800b242:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b246:	2b18      	cmp	r3, #24
 800b248:	f200 8155 	bhi.w	800b4f6 <HAL_RCC_GetSysClockFreq+0x2be>
 800b24c:	a201      	add	r2, pc, #4	@ (adr r2, 800b254 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b24e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b252:	bf00      	nop
 800b254:	0800b2b9 	.word	0x0800b2b9
 800b258:	0800b4f7 	.word	0x0800b4f7
 800b25c:	0800b4f7 	.word	0x0800b4f7
 800b260:	0800b4f7 	.word	0x0800b4f7
 800b264:	0800b4f7 	.word	0x0800b4f7
 800b268:	0800b4f7 	.word	0x0800b4f7
 800b26c:	0800b4f7 	.word	0x0800b4f7
 800b270:	0800b4f7 	.word	0x0800b4f7
 800b274:	0800b2df 	.word	0x0800b2df
 800b278:	0800b4f7 	.word	0x0800b4f7
 800b27c:	0800b4f7 	.word	0x0800b4f7
 800b280:	0800b4f7 	.word	0x0800b4f7
 800b284:	0800b4f7 	.word	0x0800b4f7
 800b288:	0800b4f7 	.word	0x0800b4f7
 800b28c:	0800b4f7 	.word	0x0800b4f7
 800b290:	0800b4f7 	.word	0x0800b4f7
 800b294:	0800b2e5 	.word	0x0800b2e5
 800b298:	0800b4f7 	.word	0x0800b4f7
 800b29c:	0800b4f7 	.word	0x0800b4f7
 800b2a0:	0800b4f7 	.word	0x0800b4f7
 800b2a4:	0800b4f7 	.word	0x0800b4f7
 800b2a8:	0800b4f7 	.word	0x0800b4f7
 800b2ac:	0800b4f7 	.word	0x0800b4f7
 800b2b0:	0800b4f7 	.word	0x0800b4f7
 800b2b4:	0800b2eb 	.word	0x0800b2eb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2b8:	4b94      	ldr	r3, [pc, #592]	@ (800b50c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f003 0320 	and.w	r3, r3, #32
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d009      	beq.n	800b2d8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b2c4:	4b91      	ldr	r3, [pc, #580]	@ (800b50c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	08db      	lsrs	r3, r3, #3
 800b2ca:	f003 0303 	and.w	r3, r3, #3
 800b2ce:	4a90      	ldr	r2, [pc, #576]	@ (800b510 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b2d0:	fa22 f303 	lsr.w	r3, r2, r3
 800b2d4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b2d6:	e111      	b.n	800b4fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b2d8:	4b8d      	ldr	r3, [pc, #564]	@ (800b510 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b2da:	61bb      	str	r3, [r7, #24]
      break;
 800b2dc:	e10e      	b.n	800b4fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b2de:	4b8d      	ldr	r3, [pc, #564]	@ (800b514 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b2e0:	61bb      	str	r3, [r7, #24]
      break;
 800b2e2:	e10b      	b.n	800b4fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b2e4:	4b8c      	ldr	r3, [pc, #560]	@ (800b518 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b2e6:	61bb      	str	r3, [r7, #24]
      break;
 800b2e8:	e108      	b.n	800b4fc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b2ea:	4b88      	ldr	r3, [pc, #544]	@ (800b50c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2ee:	f003 0303 	and.w	r3, r3, #3
 800b2f2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b2f4:	4b85      	ldr	r3, [pc, #532]	@ (800b50c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2f8:	091b      	lsrs	r3, r3, #4
 800b2fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b2fe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b300:	4b82      	ldr	r3, [pc, #520]	@ (800b50c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b304:	f003 0301 	and.w	r3, r3, #1
 800b308:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b30a:	4b80      	ldr	r3, [pc, #512]	@ (800b50c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b30c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b30e:	08db      	lsrs	r3, r3, #3
 800b310:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b314:	68fa      	ldr	r2, [r7, #12]
 800b316:	fb02 f303 	mul.w	r3, r2, r3
 800b31a:	ee07 3a90 	vmov	s15, r3
 800b31e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b322:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	f000 80e1 	beq.w	800b4f0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	2b02      	cmp	r3, #2
 800b332:	f000 8083 	beq.w	800b43c <HAL_RCC_GetSysClockFreq+0x204>
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	2b02      	cmp	r3, #2
 800b33a:	f200 80a1 	bhi.w	800b480 <HAL_RCC_GetSysClockFreq+0x248>
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d003      	beq.n	800b34c <HAL_RCC_GetSysClockFreq+0x114>
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	2b01      	cmp	r3, #1
 800b348:	d056      	beq.n	800b3f8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b34a:	e099      	b.n	800b480 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b34c:	4b6f      	ldr	r3, [pc, #444]	@ (800b50c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f003 0320 	and.w	r3, r3, #32
 800b354:	2b00      	cmp	r3, #0
 800b356:	d02d      	beq.n	800b3b4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b358:	4b6c      	ldr	r3, [pc, #432]	@ (800b50c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	08db      	lsrs	r3, r3, #3
 800b35e:	f003 0303 	and.w	r3, r3, #3
 800b362:	4a6b      	ldr	r2, [pc, #428]	@ (800b510 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b364:	fa22 f303 	lsr.w	r3, r2, r3
 800b368:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	ee07 3a90 	vmov	s15, r3
 800b370:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	ee07 3a90 	vmov	s15, r3
 800b37a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b37e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b382:	4b62      	ldr	r3, [pc, #392]	@ (800b50c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b38a:	ee07 3a90 	vmov	s15, r3
 800b38e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b392:	ed97 6a02 	vldr	s12, [r7, #8]
 800b396:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800b51c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b39a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b39e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3ae:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b3b2:	e087      	b.n	800b4c4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b3b4:	693b      	ldr	r3, [r7, #16]
 800b3b6:	ee07 3a90 	vmov	s15, r3
 800b3ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3be:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800b520 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b3c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3c6:	4b51      	ldr	r3, [pc, #324]	@ (800b50c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3ce:	ee07 3a90 	vmov	s15, r3
 800b3d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3d6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b3da:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800b51c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b3de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b3f6:	e065      	b.n	800b4c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	ee07 3a90 	vmov	s15, r3
 800b3fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b402:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800b524 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b40a:	4b40      	ldr	r3, [pc, #256]	@ (800b50c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b40c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b40e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b412:	ee07 3a90 	vmov	s15, r3
 800b416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b41a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b41e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800b51c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b42a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b42e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b432:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b436:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b43a:	e043      	b.n	800b4c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	ee07 3a90 	vmov	s15, r3
 800b442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b446:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800b528 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b44a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b44e:	4b2f      	ldr	r3, [pc, #188]	@ (800b50c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b456:	ee07 3a90 	vmov	s15, r3
 800b45a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b45e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b462:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800b51c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b46a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b46e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b47a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b47e:	e021      	b.n	800b4c4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	ee07 3a90 	vmov	s15, r3
 800b486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b48a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800b524 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b48e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b492:	4b1e      	ldr	r3, [pc, #120]	@ (800b50c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b49a:	ee07 3a90 	vmov	s15, r3
 800b49e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4a2:	ed97 6a02 	vldr	s12, [r7, #8]
 800b4a6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800b51c <HAL_RCC_GetSysClockFreq+0x2e4>
 800b4aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b4b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b4c2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b4c4:	4b11      	ldr	r3, [pc, #68]	@ (800b50c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4c8:	0a5b      	lsrs	r3, r3, #9
 800b4ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b4ce:	3301      	adds	r3, #1
 800b4d0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	ee07 3a90 	vmov	s15, r3
 800b4d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b4dc:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4e8:	ee17 3a90 	vmov	r3, s15
 800b4ec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b4ee:	e005      	b.n	800b4fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	61bb      	str	r3, [r7, #24]
      break;
 800b4f4:	e002      	b.n	800b4fc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b4f6:	4b07      	ldr	r3, [pc, #28]	@ (800b514 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b4f8:	61bb      	str	r3, [r7, #24]
      break;
 800b4fa:	bf00      	nop
  }

  return sysclockfreq;
 800b4fc:	69bb      	ldr	r3, [r7, #24]
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3724      	adds	r7, #36	@ 0x24
 800b502:	46bd      	mov	sp, r7
 800b504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b508:	4770      	bx	lr
 800b50a:	bf00      	nop
 800b50c:	58024400 	.word	0x58024400
 800b510:	03d09000 	.word	0x03d09000
 800b514:	003d0900 	.word	0x003d0900
 800b518:	007a1200 	.word	0x007a1200
 800b51c:	46000000 	.word	0x46000000
 800b520:	4c742400 	.word	0x4c742400
 800b524:	4a742400 	.word	0x4a742400
 800b528:	4af42400 	.word	0x4af42400

0800b52c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b082      	sub	sp, #8
 800b530:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b532:	f7ff fe81 	bl	800b238 <HAL_RCC_GetSysClockFreq>
 800b536:	4602      	mov	r2, r0
 800b538:	4b10      	ldr	r3, [pc, #64]	@ (800b57c <HAL_RCC_GetHCLKFreq+0x50>)
 800b53a:	699b      	ldr	r3, [r3, #24]
 800b53c:	0a1b      	lsrs	r3, r3, #8
 800b53e:	f003 030f 	and.w	r3, r3, #15
 800b542:	490f      	ldr	r1, [pc, #60]	@ (800b580 <HAL_RCC_GetHCLKFreq+0x54>)
 800b544:	5ccb      	ldrb	r3, [r1, r3]
 800b546:	f003 031f 	and.w	r3, r3, #31
 800b54a:	fa22 f303 	lsr.w	r3, r2, r3
 800b54e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b550:	4b0a      	ldr	r3, [pc, #40]	@ (800b57c <HAL_RCC_GetHCLKFreq+0x50>)
 800b552:	699b      	ldr	r3, [r3, #24]
 800b554:	f003 030f 	and.w	r3, r3, #15
 800b558:	4a09      	ldr	r2, [pc, #36]	@ (800b580 <HAL_RCC_GetHCLKFreq+0x54>)
 800b55a:	5cd3      	ldrb	r3, [r2, r3]
 800b55c:	f003 031f 	and.w	r3, r3, #31
 800b560:	687a      	ldr	r2, [r7, #4]
 800b562:	fa22 f303 	lsr.w	r3, r2, r3
 800b566:	4a07      	ldr	r2, [pc, #28]	@ (800b584 <HAL_RCC_GetHCLKFreq+0x58>)
 800b568:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b56a:	4a07      	ldr	r2, [pc, #28]	@ (800b588 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b570:	4b04      	ldr	r3, [pc, #16]	@ (800b584 <HAL_RCC_GetHCLKFreq+0x58>)
 800b572:	681b      	ldr	r3, [r3, #0]
}
 800b574:	4618      	mov	r0, r3
 800b576:	3708      	adds	r7, #8
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}
 800b57c:	58024400 	.word	0x58024400
 800b580:	08011f8c 	.word	0x08011f8c
 800b584:	2400003c 	.word	0x2400003c
 800b588:	24000038 	.word	0x24000038

0800b58c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b590:	f7ff ffcc 	bl	800b52c <HAL_RCC_GetHCLKFreq>
 800b594:	4602      	mov	r2, r0
 800b596:	4b06      	ldr	r3, [pc, #24]	@ (800b5b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b598:	69db      	ldr	r3, [r3, #28]
 800b59a:	091b      	lsrs	r3, r3, #4
 800b59c:	f003 0307 	and.w	r3, r3, #7
 800b5a0:	4904      	ldr	r1, [pc, #16]	@ (800b5b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b5a2:	5ccb      	ldrb	r3, [r1, r3]
 800b5a4:	f003 031f 	and.w	r3, r3, #31
 800b5a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	bd80      	pop	{r7, pc}
 800b5b0:	58024400 	.word	0x58024400
 800b5b4:	08011f8c 	.word	0x08011f8c

0800b5b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b5bc:	f7ff ffb6 	bl	800b52c <HAL_RCC_GetHCLKFreq>
 800b5c0:	4602      	mov	r2, r0
 800b5c2:	4b06      	ldr	r3, [pc, #24]	@ (800b5dc <HAL_RCC_GetPCLK2Freq+0x24>)
 800b5c4:	69db      	ldr	r3, [r3, #28]
 800b5c6:	0a1b      	lsrs	r3, r3, #8
 800b5c8:	f003 0307 	and.w	r3, r3, #7
 800b5cc:	4904      	ldr	r1, [pc, #16]	@ (800b5e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b5ce:	5ccb      	ldrb	r3, [r1, r3]
 800b5d0:	f003 031f 	and.w	r3, r3, #31
 800b5d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	bd80      	pop	{r7, pc}
 800b5dc:	58024400 	.word	0x58024400
 800b5e0:	08011f8c 	.word	0x08011f8c

0800b5e4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b5e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b5e8:	b0c6      	sub	sp, #280	@ 0x118
 800b5ea:	af00      	add	r7, sp, #0
 800b5ec:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b5fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b604:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800b608:	2500      	movs	r5, #0
 800b60a:	ea54 0305 	orrs.w	r3, r4, r5
 800b60e:	d049      	beq.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b610:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b614:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b616:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b61a:	d02f      	beq.n	800b67c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b61c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b620:	d828      	bhi.n	800b674 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b622:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b626:	d01a      	beq.n	800b65e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b628:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b62c:	d822      	bhi.n	800b674 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d003      	beq.n	800b63a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b632:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b636:	d007      	beq.n	800b648 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b638:	e01c      	b.n	800b674 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b63a:	4bab      	ldr	r3, [pc, #684]	@ (800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b63c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b63e:	4aaa      	ldr	r2, [pc, #680]	@ (800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b640:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b644:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b646:	e01a      	b.n	800b67e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b648:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b64c:	3308      	adds	r3, #8
 800b64e:	2102      	movs	r1, #2
 800b650:	4618      	mov	r0, r3
 800b652:	f002 fa49 	bl	800dae8 <RCCEx_PLL2_Config>
 800b656:	4603      	mov	r3, r0
 800b658:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b65c:	e00f      	b.n	800b67e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b65e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b662:	3328      	adds	r3, #40	@ 0x28
 800b664:	2102      	movs	r1, #2
 800b666:	4618      	mov	r0, r3
 800b668:	f002 faf0 	bl	800dc4c <RCCEx_PLL3_Config>
 800b66c:	4603      	mov	r3, r0
 800b66e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b672:	e004      	b.n	800b67e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b674:	2301      	movs	r3, #1
 800b676:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b67a:	e000      	b.n	800b67e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b67c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b67e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b682:	2b00      	cmp	r3, #0
 800b684:	d10a      	bne.n	800b69c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b686:	4b98      	ldr	r3, [pc, #608]	@ (800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b688:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b68a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b68e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b692:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b694:	4a94      	ldr	r2, [pc, #592]	@ (800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b696:	430b      	orrs	r3, r1
 800b698:	6513      	str	r3, [r2, #80]	@ 0x50
 800b69a:	e003      	b.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b69c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b6a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b6a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ac:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800b6b0:	f04f 0900 	mov.w	r9, #0
 800b6b4:	ea58 0309 	orrs.w	r3, r8, r9
 800b6b8:	d047      	beq.n	800b74a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b6ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b6c0:	2b04      	cmp	r3, #4
 800b6c2:	d82a      	bhi.n	800b71a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b6c4:	a201      	add	r2, pc, #4	@ (adr r2, 800b6cc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b6c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6ca:	bf00      	nop
 800b6cc:	0800b6e1 	.word	0x0800b6e1
 800b6d0:	0800b6ef 	.word	0x0800b6ef
 800b6d4:	0800b705 	.word	0x0800b705
 800b6d8:	0800b723 	.word	0x0800b723
 800b6dc:	0800b723 	.word	0x0800b723
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6e0:	4b81      	ldr	r3, [pc, #516]	@ (800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b6e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6e4:	4a80      	ldr	r2, [pc, #512]	@ (800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b6e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b6ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b6ec:	e01a      	b.n	800b724 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b6ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6f2:	3308      	adds	r3, #8
 800b6f4:	2100      	movs	r1, #0
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f002 f9f6 	bl	800dae8 <RCCEx_PLL2_Config>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b702:	e00f      	b.n	800b724 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b704:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b708:	3328      	adds	r3, #40	@ 0x28
 800b70a:	2100      	movs	r1, #0
 800b70c:	4618      	mov	r0, r3
 800b70e:	f002 fa9d 	bl	800dc4c <RCCEx_PLL3_Config>
 800b712:	4603      	mov	r3, r0
 800b714:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b718:	e004      	b.n	800b724 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b71a:	2301      	movs	r3, #1
 800b71c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b720:	e000      	b.n	800b724 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b722:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b724:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d10a      	bne.n	800b742 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b72c:	4b6e      	ldr	r3, [pc, #440]	@ (800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b72e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b730:	f023 0107 	bic.w	r1, r3, #7
 800b734:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b73a:	4a6b      	ldr	r2, [pc, #428]	@ (800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b73c:	430b      	orrs	r3, r1
 800b73e:	6513      	str	r3, [r2, #80]	@ 0x50
 800b740:	e003      	b.n	800b74a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b742:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b746:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b74a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b752:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800b756:	f04f 0b00 	mov.w	fp, #0
 800b75a:	ea5a 030b 	orrs.w	r3, sl, fp
 800b75e:	d05b      	beq.n	800b818 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b760:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b764:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b768:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800b76c:	d03b      	beq.n	800b7e6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800b76e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800b772:	d834      	bhi.n	800b7de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b774:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b778:	d037      	beq.n	800b7ea <HAL_RCCEx_PeriphCLKConfig+0x206>
 800b77a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b77e:	d82e      	bhi.n	800b7de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b780:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b784:	d033      	beq.n	800b7ee <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800b786:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800b78a:	d828      	bhi.n	800b7de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b78c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b790:	d01a      	beq.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800b792:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b796:	d822      	bhi.n	800b7de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d003      	beq.n	800b7a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800b79c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b7a0:	d007      	beq.n	800b7b2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800b7a2:	e01c      	b.n	800b7de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7a4:	4b50      	ldr	r3, [pc, #320]	@ (800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b7a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7a8:	4a4f      	ldr	r2, [pc, #316]	@ (800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b7aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b7ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b7b0:	e01e      	b.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b7b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7b6:	3308      	adds	r3, #8
 800b7b8:	2100      	movs	r1, #0
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f002 f994 	bl	800dae8 <RCCEx_PLL2_Config>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b7c6:	e013      	b.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b7c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7cc:	3328      	adds	r3, #40	@ 0x28
 800b7ce:	2100      	movs	r1, #0
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f002 fa3b 	bl	800dc4c <RCCEx_PLL3_Config>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b7dc:	e008      	b.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b7de:	2301      	movs	r3, #1
 800b7e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b7e4:	e004      	b.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b7e6:	bf00      	nop
 800b7e8:	e002      	b.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b7ea:	bf00      	nop
 800b7ec:	e000      	b.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b7ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d10b      	bne.n	800b810 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b7f8:	4b3b      	ldr	r3, [pc, #236]	@ (800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b7fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b7fc:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800b800:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b804:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b808:	4a37      	ldr	r2, [pc, #220]	@ (800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b80a:	430b      	orrs	r3, r1
 800b80c:	6593      	str	r3, [r2, #88]	@ 0x58
 800b80e:	e003      	b.n	800b818 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b810:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b814:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b818:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b820:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800b824:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b828:	2300      	movs	r3, #0
 800b82a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b82e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800b832:	460b      	mov	r3, r1
 800b834:	4313      	orrs	r3, r2
 800b836:	d05d      	beq.n	800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b83c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b840:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800b844:	d03b      	beq.n	800b8be <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800b846:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800b84a:	d834      	bhi.n	800b8b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b84c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b850:	d037      	beq.n	800b8c2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800b852:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b856:	d82e      	bhi.n	800b8b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b858:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b85c:	d033      	beq.n	800b8c6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800b85e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800b862:	d828      	bhi.n	800b8b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b864:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b868:	d01a      	beq.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800b86a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b86e:	d822      	bhi.n	800b8b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b870:	2b00      	cmp	r3, #0
 800b872:	d003      	beq.n	800b87c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800b874:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b878:	d007      	beq.n	800b88a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800b87a:	e01c      	b.n	800b8b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b87c:	4b1a      	ldr	r3, [pc, #104]	@ (800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b87e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b880:	4a19      	ldr	r2, [pc, #100]	@ (800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b882:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b886:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b888:	e01e      	b.n	800b8c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b88a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b88e:	3308      	adds	r3, #8
 800b890:	2100      	movs	r1, #0
 800b892:	4618      	mov	r0, r3
 800b894:	f002 f928 	bl	800dae8 <RCCEx_PLL2_Config>
 800b898:	4603      	mov	r3, r0
 800b89a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b89e:	e013      	b.n	800b8c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b8a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8a4:	3328      	adds	r3, #40	@ 0x28
 800b8a6:	2100      	movs	r1, #0
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f002 f9cf 	bl	800dc4c <RCCEx_PLL3_Config>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b8b4:	e008      	b.n	800b8c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b8bc:	e004      	b.n	800b8c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b8be:	bf00      	nop
 800b8c0:	e002      	b.n	800b8c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b8c2:	bf00      	nop
 800b8c4:	e000      	b.n	800b8c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b8c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d10d      	bne.n	800b8ec <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b8d0:	4b05      	ldr	r3, [pc, #20]	@ (800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b8d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b8d4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800b8d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800b8e0:	4a01      	ldr	r2, [pc, #4]	@ (800b8e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b8e2:	430b      	orrs	r3, r1
 800b8e4:	6593      	str	r3, [r2, #88]	@ 0x58
 800b8e6:	e005      	b.n	800b8f4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800b8e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b8f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b8f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8fc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800b900:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b904:	2300      	movs	r3, #0
 800b906:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b90a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800b90e:	460b      	mov	r3, r1
 800b910:	4313      	orrs	r3, r2
 800b912:	d03a      	beq.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800b914:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b91a:	2b30      	cmp	r3, #48	@ 0x30
 800b91c:	d01f      	beq.n	800b95e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800b91e:	2b30      	cmp	r3, #48	@ 0x30
 800b920:	d819      	bhi.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800b922:	2b20      	cmp	r3, #32
 800b924:	d00c      	beq.n	800b940 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800b926:	2b20      	cmp	r3, #32
 800b928:	d815      	bhi.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d019      	beq.n	800b962 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b92e:	2b10      	cmp	r3, #16
 800b930:	d111      	bne.n	800b956 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b932:	4baa      	ldr	r3, [pc, #680]	@ (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b936:	4aa9      	ldr	r2, [pc, #676]	@ (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b938:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b93c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b93e:	e011      	b.n	800b964 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b940:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b944:	3308      	adds	r3, #8
 800b946:	2102      	movs	r1, #2
 800b948:	4618      	mov	r0, r3
 800b94a:	f002 f8cd 	bl	800dae8 <RCCEx_PLL2_Config>
 800b94e:	4603      	mov	r3, r0
 800b950:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b954:	e006      	b.n	800b964 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b956:	2301      	movs	r3, #1
 800b958:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800b95c:	e002      	b.n	800b964 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800b95e:	bf00      	nop
 800b960:	e000      	b.n	800b964 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800b962:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b964:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d10a      	bne.n	800b982 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b96c:	4b9b      	ldr	r3, [pc, #620]	@ (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b96e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b970:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800b974:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b97a:	4a98      	ldr	r2, [pc, #608]	@ (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b97c:	430b      	orrs	r3, r1
 800b97e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b980:	e003      	b.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b982:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800b986:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b98a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b992:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800b996:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b99a:	2300      	movs	r3, #0
 800b99c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b9a0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800b9a4:	460b      	mov	r3, r1
 800b9a6:	4313      	orrs	r3, r2
 800b9a8:	d051      	beq.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b9aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b9b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b9b4:	d035      	beq.n	800ba22 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800b9b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b9ba:	d82e      	bhi.n	800ba1a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b9bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b9c0:	d031      	beq.n	800ba26 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800b9c2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b9c6:	d828      	bhi.n	800ba1a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b9c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b9cc:	d01a      	beq.n	800ba04 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800b9ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b9d2:	d822      	bhi.n	800ba1a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d003      	beq.n	800b9e0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800b9d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b9dc:	d007      	beq.n	800b9ee <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800b9de:	e01c      	b.n	800ba1a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9e0:	4b7e      	ldr	r3, [pc, #504]	@ (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b9e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9e4:	4a7d      	ldr	r2, [pc, #500]	@ (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b9e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b9ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b9ec:	e01c      	b.n	800ba28 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b9ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9f2:	3308      	adds	r3, #8
 800b9f4:	2100      	movs	r1, #0
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f002 f876 	bl	800dae8 <RCCEx_PLL2_Config>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ba02:	e011      	b.n	800ba28 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ba04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba08:	3328      	adds	r3, #40	@ 0x28
 800ba0a:	2100      	movs	r1, #0
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f002 f91d 	bl	800dc4c <RCCEx_PLL3_Config>
 800ba12:	4603      	mov	r3, r0
 800ba14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ba18:	e006      	b.n	800ba28 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ba20:	e002      	b.n	800ba28 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800ba22:	bf00      	nop
 800ba24:	e000      	b.n	800ba28 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800ba26:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d10a      	bne.n	800ba46 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ba30:	4b6a      	ldr	r3, [pc, #424]	@ (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba34:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800ba38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba3e:	4a67      	ldr	r2, [pc, #412]	@ (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba40:	430b      	orrs	r3, r1
 800ba42:	6513      	str	r3, [r2, #80]	@ 0x50
 800ba44:	e003      	b.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba46:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ba4a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ba4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba56:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800ba5a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ba5e:	2300      	movs	r3, #0
 800ba60:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ba64:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800ba68:	460b      	mov	r3, r1
 800ba6a:	4313      	orrs	r3, r2
 800ba6c:	d053      	beq.n	800bb16 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800ba6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ba74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ba78:	d033      	beq.n	800bae2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800ba7a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ba7e:	d82c      	bhi.n	800bada <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ba80:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ba84:	d02f      	beq.n	800bae6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800ba86:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ba8a:	d826      	bhi.n	800bada <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ba8c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ba90:	d02b      	beq.n	800baea <HAL_RCCEx_PeriphCLKConfig+0x506>
 800ba92:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ba96:	d820      	bhi.n	800bada <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ba98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ba9c:	d012      	beq.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800ba9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800baa2:	d81a      	bhi.n	800bada <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d022      	beq.n	800baee <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800baa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800baac:	d115      	bne.n	800bada <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800baae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bab2:	3308      	adds	r3, #8
 800bab4:	2101      	movs	r1, #1
 800bab6:	4618      	mov	r0, r3
 800bab8:	f002 f816 	bl	800dae8 <RCCEx_PLL2_Config>
 800babc:	4603      	mov	r3, r0
 800babe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bac2:	e015      	b.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bac8:	3328      	adds	r3, #40	@ 0x28
 800baca:	2101      	movs	r1, #1
 800bacc:	4618      	mov	r0, r3
 800bace:	f002 f8bd 	bl	800dc4c <RCCEx_PLL3_Config>
 800bad2:	4603      	mov	r3, r0
 800bad4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bad8:	e00a      	b.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bada:	2301      	movs	r3, #1
 800badc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bae0:	e006      	b.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bae2:	bf00      	nop
 800bae4:	e004      	b.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bae6:	bf00      	nop
 800bae8:	e002      	b.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800baea:	bf00      	nop
 800baec:	e000      	b.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800baee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800baf0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d10a      	bne.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800baf8:	4b38      	ldr	r3, [pc, #224]	@ (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bafa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bafc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800bb00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bb06:	4a35      	ldr	r2, [pc, #212]	@ (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bb08:	430b      	orrs	r3, r1
 800bb0a:	6513      	str	r3, [r2, #80]	@ 0x50
 800bb0c:	e003      	b.n	800bb16 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb0e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bb12:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bb16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb1e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800bb22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bb26:	2300      	movs	r3, #0
 800bb28:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800bb2c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800bb30:	460b      	mov	r3, r1
 800bb32:	4313      	orrs	r3, r2
 800bb34:	d058      	beq.n	800bbe8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800bb36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb3a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800bb3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bb42:	d033      	beq.n	800bbac <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800bb44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bb48:	d82c      	bhi.n	800bba4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bb4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb4e:	d02f      	beq.n	800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800bb50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb54:	d826      	bhi.n	800bba4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bb56:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bb5a:	d02b      	beq.n	800bbb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800bb5c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bb60:	d820      	bhi.n	800bba4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bb62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bb66:	d012      	beq.n	800bb8e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800bb68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bb6c:	d81a      	bhi.n	800bba4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d022      	beq.n	800bbb8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800bb72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bb76:	d115      	bne.n	800bba4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bb78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb7c:	3308      	adds	r3, #8
 800bb7e:	2101      	movs	r1, #1
 800bb80:	4618      	mov	r0, r3
 800bb82:	f001 ffb1 	bl	800dae8 <RCCEx_PLL2_Config>
 800bb86:	4603      	mov	r3, r0
 800bb88:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bb8c:	e015      	b.n	800bbba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bb8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb92:	3328      	adds	r3, #40	@ 0x28
 800bb94:	2101      	movs	r1, #1
 800bb96:	4618      	mov	r0, r3
 800bb98:	f002 f858 	bl	800dc4c <RCCEx_PLL3_Config>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bba2:	e00a      	b.n	800bbba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800bba4:	2301      	movs	r3, #1
 800bba6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bbaa:	e006      	b.n	800bbba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bbac:	bf00      	nop
 800bbae:	e004      	b.n	800bbba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bbb0:	bf00      	nop
 800bbb2:	e002      	b.n	800bbba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bbb4:	bf00      	nop
 800bbb6:	e000      	b.n	800bbba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bbb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d10e      	bne.n	800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bbc2:	4b06      	ldr	r3, [pc, #24]	@ (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bbc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bbc6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800bbca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800bbd2:	4a02      	ldr	r2, [pc, #8]	@ (800bbdc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bbd4:	430b      	orrs	r3, r1
 800bbd6:	6593      	str	r3, [r2, #88]	@ 0x58
 800bbd8:	e006      	b.n	800bbe8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800bbda:	bf00      	nop
 800bbdc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbe0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bbe4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bbe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800bbf4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800bbfe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800bc02:	460b      	mov	r3, r1
 800bc04:	4313      	orrs	r3, r2
 800bc06:	d037      	beq.n	800bc78 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800bc08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bc0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bc12:	d00e      	beq.n	800bc32 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800bc14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bc18:	d816      	bhi.n	800bc48 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d018      	beq.n	800bc50 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800bc1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bc22:	d111      	bne.n	800bc48 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc24:	4bc4      	ldr	r3, [pc, #784]	@ (800bf38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc28:	4ac3      	ldr	r2, [pc, #780]	@ (800bf38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bc2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bc30:	e00f      	b.n	800bc52 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bc32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc36:	3308      	adds	r3, #8
 800bc38:	2101      	movs	r1, #1
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f001 ff54 	bl	800dae8 <RCCEx_PLL2_Config>
 800bc40:	4603      	mov	r3, r0
 800bc42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bc46:	e004      	b.n	800bc52 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc48:	2301      	movs	r3, #1
 800bc4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bc4e:	e000      	b.n	800bc52 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800bc50:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc52:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d10a      	bne.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bc5a:	4bb7      	ldr	r3, [pc, #732]	@ (800bf38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc5e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800bc62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bc68:	4ab3      	ldr	r2, [pc, #716]	@ (800bf38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bc6a:	430b      	orrs	r3, r1
 800bc6c:	6513      	str	r3, [r2, #80]	@ 0x50
 800bc6e:	e003      	b.n	800bc78 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bc74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bc78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc80:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800bc84:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bc88:	2300      	movs	r3, #0
 800bc8a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800bc8e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800bc92:	460b      	mov	r3, r1
 800bc94:	4313      	orrs	r3, r2
 800bc96:	d039      	beq.n	800bd0c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800bc98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bc9e:	2b03      	cmp	r3, #3
 800bca0:	d81c      	bhi.n	800bcdc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800bca2:	a201      	add	r2, pc, #4	@ (adr r2, 800bca8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800bca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bca8:	0800bce5 	.word	0x0800bce5
 800bcac:	0800bcb9 	.word	0x0800bcb9
 800bcb0:	0800bcc7 	.word	0x0800bcc7
 800bcb4:	0800bce5 	.word	0x0800bce5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bcb8:	4b9f      	ldr	r3, [pc, #636]	@ (800bf38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bcba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcbc:	4a9e      	ldr	r2, [pc, #632]	@ (800bf38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bcbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bcc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bcc4:	e00f      	b.n	800bce6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bcc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcca:	3308      	adds	r3, #8
 800bccc:	2102      	movs	r1, #2
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f001 ff0a 	bl	800dae8 <RCCEx_PLL2_Config>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bcda:	e004      	b.n	800bce6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bcdc:	2301      	movs	r3, #1
 800bcde:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bce2:	e000      	b.n	800bce6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800bce4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bce6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d10a      	bne.n	800bd04 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bcee:	4b92      	ldr	r3, [pc, #584]	@ (800bf38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bcf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bcf2:	f023 0103 	bic.w	r1, r3, #3
 800bcf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bcfc:	4a8e      	ldr	r2, [pc, #568]	@ (800bf38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bcfe:	430b      	orrs	r3, r1
 800bd00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800bd02:	e003      	b.n	800bd0c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bd08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bd0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd14:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800bd18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bd22:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800bd26:	460b      	mov	r3, r1
 800bd28:	4313      	orrs	r3, r2
 800bd2a:	f000 8099 	beq.w	800be60 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bd2e:	4b83      	ldr	r3, [pc, #524]	@ (800bf3c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	4a82      	ldr	r2, [pc, #520]	@ (800bf3c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bd34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bd38:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bd3a:	f7f8 fa3d 	bl	80041b8 <HAL_GetTick>
 800bd3e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bd42:	e00b      	b.n	800bd5c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bd44:	f7f8 fa38 	bl	80041b8 <HAL_GetTick>
 800bd48:	4602      	mov	r2, r0
 800bd4a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800bd4e:	1ad3      	subs	r3, r2, r3
 800bd50:	2b64      	cmp	r3, #100	@ 0x64
 800bd52:	d903      	bls.n	800bd5c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800bd54:	2303      	movs	r3, #3
 800bd56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bd5a:	e005      	b.n	800bd68 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bd5c:	4b77      	ldr	r3, [pc, #476]	@ (800bf3c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d0ed      	beq.n	800bd44 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800bd68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d173      	bne.n	800be58 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bd70:	4b71      	ldr	r3, [pc, #452]	@ (800bf38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd72:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800bd74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bd7c:	4053      	eors	r3, r2
 800bd7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d015      	beq.n	800bdb2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bd86:	4b6c      	ldr	r3, [pc, #432]	@ (800bf38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bd8e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800bd92:	4b69      	ldr	r3, [pc, #420]	@ (800bf38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bd96:	4a68      	ldr	r2, [pc, #416]	@ (800bf38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bd9c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bd9e:	4b66      	ldr	r3, [pc, #408]	@ (800bf38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bda0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bda2:	4a65      	ldr	r2, [pc, #404]	@ (800bf38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bda4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bda8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bdaa:	4a63      	ldr	r2, [pc, #396]	@ (800bf38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bdb0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bdb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bdba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bdbe:	d118      	bne.n	800bdf2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bdc0:	f7f8 f9fa 	bl	80041b8 <HAL_GetTick>
 800bdc4:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bdc8:	e00d      	b.n	800bde6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bdca:	f7f8 f9f5 	bl	80041b8 <HAL_GetTick>
 800bdce:	4602      	mov	r2, r0
 800bdd0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800bdd4:	1ad2      	subs	r2, r2, r3
 800bdd6:	f241 3388 	movw	r3, #5000	@ 0x1388
 800bdda:	429a      	cmp	r2, r3
 800bddc:	d903      	bls.n	800bde6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800bdde:	2303      	movs	r3, #3
 800bde0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800bde4:	e005      	b.n	800bdf2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bde6:	4b54      	ldr	r3, [pc, #336]	@ (800bf38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bde8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bdea:	f003 0302 	and.w	r3, r3, #2
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d0eb      	beq.n	800bdca <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800bdf2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d129      	bne.n	800be4e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bdfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdfe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800be02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800be06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800be0a:	d10e      	bne.n	800be2a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800be0c:	4b4a      	ldr	r3, [pc, #296]	@ (800bf38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be0e:	691b      	ldr	r3, [r3, #16]
 800be10:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800be14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800be1c:	091a      	lsrs	r2, r3, #4
 800be1e:	4b48      	ldr	r3, [pc, #288]	@ (800bf40 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800be20:	4013      	ands	r3, r2
 800be22:	4a45      	ldr	r2, [pc, #276]	@ (800bf38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be24:	430b      	orrs	r3, r1
 800be26:	6113      	str	r3, [r2, #16]
 800be28:	e005      	b.n	800be36 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800be2a:	4b43      	ldr	r3, [pc, #268]	@ (800bf38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be2c:	691b      	ldr	r3, [r3, #16]
 800be2e:	4a42      	ldr	r2, [pc, #264]	@ (800bf38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be30:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800be34:	6113      	str	r3, [r2, #16]
 800be36:	4b40      	ldr	r3, [pc, #256]	@ (800bf38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be38:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800be3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800be42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800be46:	4a3c      	ldr	r2, [pc, #240]	@ (800bf38 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be48:	430b      	orrs	r3, r1
 800be4a:	6713      	str	r3, [r2, #112]	@ 0x70
 800be4c:	e008      	b.n	800be60 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800be4e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800be52:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800be56:	e003      	b.n	800be60 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800be5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800be60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be68:	f002 0301 	and.w	r3, r2, #1
 800be6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800be70:	2300      	movs	r3, #0
 800be72:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800be76:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800be7a:	460b      	mov	r3, r1
 800be7c:	4313      	orrs	r3, r2
 800be7e:	f000 808f 	beq.w	800bfa0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800be82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800be88:	2b28      	cmp	r3, #40	@ 0x28
 800be8a:	d871      	bhi.n	800bf70 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800be8c:	a201      	add	r2, pc, #4	@ (adr r2, 800be94 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800be8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be92:	bf00      	nop
 800be94:	0800bf79 	.word	0x0800bf79
 800be98:	0800bf71 	.word	0x0800bf71
 800be9c:	0800bf71 	.word	0x0800bf71
 800bea0:	0800bf71 	.word	0x0800bf71
 800bea4:	0800bf71 	.word	0x0800bf71
 800bea8:	0800bf71 	.word	0x0800bf71
 800beac:	0800bf71 	.word	0x0800bf71
 800beb0:	0800bf71 	.word	0x0800bf71
 800beb4:	0800bf45 	.word	0x0800bf45
 800beb8:	0800bf71 	.word	0x0800bf71
 800bebc:	0800bf71 	.word	0x0800bf71
 800bec0:	0800bf71 	.word	0x0800bf71
 800bec4:	0800bf71 	.word	0x0800bf71
 800bec8:	0800bf71 	.word	0x0800bf71
 800becc:	0800bf71 	.word	0x0800bf71
 800bed0:	0800bf71 	.word	0x0800bf71
 800bed4:	0800bf5b 	.word	0x0800bf5b
 800bed8:	0800bf71 	.word	0x0800bf71
 800bedc:	0800bf71 	.word	0x0800bf71
 800bee0:	0800bf71 	.word	0x0800bf71
 800bee4:	0800bf71 	.word	0x0800bf71
 800bee8:	0800bf71 	.word	0x0800bf71
 800beec:	0800bf71 	.word	0x0800bf71
 800bef0:	0800bf71 	.word	0x0800bf71
 800bef4:	0800bf79 	.word	0x0800bf79
 800bef8:	0800bf71 	.word	0x0800bf71
 800befc:	0800bf71 	.word	0x0800bf71
 800bf00:	0800bf71 	.word	0x0800bf71
 800bf04:	0800bf71 	.word	0x0800bf71
 800bf08:	0800bf71 	.word	0x0800bf71
 800bf0c:	0800bf71 	.word	0x0800bf71
 800bf10:	0800bf71 	.word	0x0800bf71
 800bf14:	0800bf79 	.word	0x0800bf79
 800bf18:	0800bf71 	.word	0x0800bf71
 800bf1c:	0800bf71 	.word	0x0800bf71
 800bf20:	0800bf71 	.word	0x0800bf71
 800bf24:	0800bf71 	.word	0x0800bf71
 800bf28:	0800bf71 	.word	0x0800bf71
 800bf2c:	0800bf71 	.word	0x0800bf71
 800bf30:	0800bf71 	.word	0x0800bf71
 800bf34:	0800bf79 	.word	0x0800bf79
 800bf38:	58024400 	.word	0x58024400
 800bf3c:	58024800 	.word	0x58024800
 800bf40:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bf44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf48:	3308      	adds	r3, #8
 800bf4a:	2101      	movs	r1, #1
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f001 fdcb 	bl	800dae8 <RCCEx_PLL2_Config>
 800bf52:	4603      	mov	r3, r0
 800bf54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bf58:	e00f      	b.n	800bf7a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bf5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf5e:	3328      	adds	r3, #40	@ 0x28
 800bf60:	2101      	movs	r1, #1
 800bf62:	4618      	mov	r0, r3
 800bf64:	f001 fe72 	bl	800dc4c <RCCEx_PLL3_Config>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bf6e:	e004      	b.n	800bf7a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf70:	2301      	movs	r3, #1
 800bf72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bf76:	e000      	b.n	800bf7a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800bf78:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf7a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d10a      	bne.n	800bf98 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bf82:	4bbf      	ldr	r3, [pc, #764]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bf84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf86:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800bf8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf8e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bf90:	4abb      	ldr	r2, [pc, #748]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bf92:	430b      	orrs	r3, r1
 800bf94:	6553      	str	r3, [r2, #84]	@ 0x54
 800bf96:	e003      	b.n	800bfa0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bf9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bfa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa8:	f002 0302 	and.w	r3, r2, #2
 800bfac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bfb6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800bfba:	460b      	mov	r3, r1
 800bfbc:	4313      	orrs	r3, r2
 800bfbe:	d041      	beq.n	800c044 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800bfc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bfc6:	2b05      	cmp	r3, #5
 800bfc8:	d824      	bhi.n	800c014 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800bfca:	a201      	add	r2, pc, #4	@ (adr r2, 800bfd0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800bfcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfd0:	0800c01d 	.word	0x0800c01d
 800bfd4:	0800bfe9 	.word	0x0800bfe9
 800bfd8:	0800bfff 	.word	0x0800bfff
 800bfdc:	0800c01d 	.word	0x0800c01d
 800bfe0:	0800c01d 	.word	0x0800c01d
 800bfe4:	0800c01d 	.word	0x0800c01d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bfe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfec:	3308      	adds	r3, #8
 800bfee:	2101      	movs	r1, #1
 800bff0:	4618      	mov	r0, r3
 800bff2:	f001 fd79 	bl	800dae8 <RCCEx_PLL2_Config>
 800bff6:	4603      	mov	r3, r0
 800bff8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bffc:	e00f      	b.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c002:	3328      	adds	r3, #40	@ 0x28
 800c004:	2101      	movs	r1, #1
 800c006:	4618      	mov	r0, r3
 800c008:	f001 fe20 	bl	800dc4c <RCCEx_PLL3_Config>
 800c00c:	4603      	mov	r3, r0
 800c00e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c012:	e004      	b.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c014:	2301      	movs	r3, #1
 800c016:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c01a:	e000      	b.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800c01c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c01e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c022:	2b00      	cmp	r3, #0
 800c024:	d10a      	bne.n	800c03c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c026:	4b96      	ldr	r3, [pc, #600]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c028:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c02a:	f023 0107 	bic.w	r1, r3, #7
 800c02e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c032:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c034:	4a92      	ldr	r2, [pc, #584]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c036:	430b      	orrs	r3, r1
 800c038:	6553      	str	r3, [r2, #84]	@ 0x54
 800c03a:	e003      	b.n	800c044 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c03c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c040:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c04c:	f002 0304 	and.w	r3, r2, #4
 800c050:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c054:	2300      	movs	r3, #0
 800c056:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c05a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c05e:	460b      	mov	r3, r1
 800c060:	4313      	orrs	r3, r2
 800c062:	d044      	beq.n	800c0ee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c06c:	2b05      	cmp	r3, #5
 800c06e:	d825      	bhi.n	800c0bc <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800c070:	a201      	add	r2, pc, #4	@ (adr r2, 800c078 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800c072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c076:	bf00      	nop
 800c078:	0800c0c5 	.word	0x0800c0c5
 800c07c:	0800c091 	.word	0x0800c091
 800c080:	0800c0a7 	.word	0x0800c0a7
 800c084:	0800c0c5 	.word	0x0800c0c5
 800c088:	0800c0c5 	.word	0x0800c0c5
 800c08c:	0800c0c5 	.word	0x0800c0c5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c090:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c094:	3308      	adds	r3, #8
 800c096:	2101      	movs	r1, #1
 800c098:	4618      	mov	r0, r3
 800c09a:	f001 fd25 	bl	800dae8 <RCCEx_PLL2_Config>
 800c09e:	4603      	mov	r3, r0
 800c0a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c0a4:	e00f      	b.n	800c0c6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c0a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0aa:	3328      	adds	r3, #40	@ 0x28
 800c0ac:	2101      	movs	r1, #1
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f001 fdcc 	bl	800dc4c <RCCEx_PLL3_Config>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c0ba:	e004      	b.n	800c0c6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c0bc:	2301      	movs	r3, #1
 800c0be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c0c2:	e000      	b.n	800c0c6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800c0c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c0c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d10b      	bne.n	800c0e6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c0ce:	4b6c      	ldr	r3, [pc, #432]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c0d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0d2:	f023 0107 	bic.w	r1, r3, #7
 800c0d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0de:	4a68      	ldr	r2, [pc, #416]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c0e0:	430b      	orrs	r3, r1
 800c0e2:	6593      	str	r3, [r2, #88]	@ 0x58
 800c0e4:	e003      	b.n	800c0ee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0e6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c0ea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c0ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f6:	f002 0320 	and.w	r3, r2, #32
 800c0fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c0fe:	2300      	movs	r3, #0
 800c100:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c104:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800c108:	460b      	mov	r3, r1
 800c10a:	4313      	orrs	r3, r2
 800c10c:	d055      	beq.n	800c1ba <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c10e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c112:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c116:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c11a:	d033      	beq.n	800c184 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800c11c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c120:	d82c      	bhi.n	800c17c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c122:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c126:	d02f      	beq.n	800c188 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800c128:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c12c:	d826      	bhi.n	800c17c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c12e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c132:	d02b      	beq.n	800c18c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800c134:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c138:	d820      	bhi.n	800c17c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c13a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c13e:	d012      	beq.n	800c166 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800c140:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c144:	d81a      	bhi.n	800c17c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c146:	2b00      	cmp	r3, #0
 800c148:	d022      	beq.n	800c190 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c14a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c14e:	d115      	bne.n	800c17c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c150:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c154:	3308      	adds	r3, #8
 800c156:	2100      	movs	r1, #0
 800c158:	4618      	mov	r0, r3
 800c15a:	f001 fcc5 	bl	800dae8 <RCCEx_PLL2_Config>
 800c15e:	4603      	mov	r3, r0
 800c160:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c164:	e015      	b.n	800c192 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c166:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c16a:	3328      	adds	r3, #40	@ 0x28
 800c16c:	2102      	movs	r1, #2
 800c16e:	4618      	mov	r0, r3
 800c170:	f001 fd6c 	bl	800dc4c <RCCEx_PLL3_Config>
 800c174:	4603      	mov	r3, r0
 800c176:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c17a:	e00a      	b.n	800c192 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c17c:	2301      	movs	r3, #1
 800c17e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c182:	e006      	b.n	800c192 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c184:	bf00      	nop
 800c186:	e004      	b.n	800c192 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c188:	bf00      	nop
 800c18a:	e002      	b.n	800c192 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c18c:	bf00      	nop
 800c18e:	e000      	b.n	800c192 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c190:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c192:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c196:	2b00      	cmp	r3, #0
 800c198:	d10b      	bne.n	800c1b2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c19a:	4b39      	ldr	r3, [pc, #228]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c19c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c19e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c1a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c1aa:	4a35      	ldr	r2, [pc, #212]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c1ac:	430b      	orrs	r3, r1
 800c1ae:	6553      	str	r3, [r2, #84]	@ 0x54
 800c1b0:	e003      	b.n	800c1ba <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c1b6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c1ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800c1c6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c1d0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800c1d4:	460b      	mov	r3, r1
 800c1d6:	4313      	orrs	r3, r2
 800c1d8:	d058      	beq.n	800c28c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c1da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c1e2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c1e6:	d033      	beq.n	800c250 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800c1e8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c1ec:	d82c      	bhi.n	800c248 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c1ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c1f2:	d02f      	beq.n	800c254 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c1f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c1f8:	d826      	bhi.n	800c248 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c1fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c1fe:	d02b      	beq.n	800c258 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c200:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c204:	d820      	bhi.n	800c248 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c206:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c20a:	d012      	beq.n	800c232 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800c20c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c210:	d81a      	bhi.n	800c248 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c212:	2b00      	cmp	r3, #0
 800c214:	d022      	beq.n	800c25c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c216:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c21a:	d115      	bne.n	800c248 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c21c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c220:	3308      	adds	r3, #8
 800c222:	2100      	movs	r1, #0
 800c224:	4618      	mov	r0, r3
 800c226:	f001 fc5f 	bl	800dae8 <RCCEx_PLL2_Config>
 800c22a:	4603      	mov	r3, r0
 800c22c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c230:	e015      	b.n	800c25e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c232:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c236:	3328      	adds	r3, #40	@ 0x28
 800c238:	2102      	movs	r1, #2
 800c23a:	4618      	mov	r0, r3
 800c23c:	f001 fd06 	bl	800dc4c <RCCEx_PLL3_Config>
 800c240:	4603      	mov	r3, r0
 800c242:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c246:	e00a      	b.n	800c25e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c248:	2301      	movs	r3, #1
 800c24a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c24e:	e006      	b.n	800c25e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c250:	bf00      	nop
 800c252:	e004      	b.n	800c25e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c254:	bf00      	nop
 800c256:	e002      	b.n	800c25e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c258:	bf00      	nop
 800c25a:	e000      	b.n	800c25e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c25c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c25e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c262:	2b00      	cmp	r3, #0
 800c264:	d10e      	bne.n	800c284 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c266:	4b06      	ldr	r3, [pc, #24]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c26a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800c26e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c272:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c276:	4a02      	ldr	r2, [pc, #8]	@ (800c280 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c278:	430b      	orrs	r3, r1
 800c27a:	6593      	str	r3, [r2, #88]	@ 0x58
 800c27c:	e006      	b.n	800c28c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800c27e:	bf00      	nop
 800c280:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c284:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c288:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c28c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c294:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800c298:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c29c:	2300      	movs	r3, #0
 800c29e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c2a2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800c2a6:	460b      	mov	r3, r1
 800c2a8:	4313      	orrs	r3, r2
 800c2aa:	d055      	beq.n	800c358 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c2ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c2b4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c2b8:	d033      	beq.n	800c322 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800c2ba:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c2be:	d82c      	bhi.n	800c31a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c2c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c2c4:	d02f      	beq.n	800c326 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c2c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c2ca:	d826      	bhi.n	800c31a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c2cc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c2d0:	d02b      	beq.n	800c32a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c2d2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c2d6:	d820      	bhi.n	800c31a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c2d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c2dc:	d012      	beq.n	800c304 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800c2de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c2e2:	d81a      	bhi.n	800c31a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d022      	beq.n	800c32e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c2e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c2ec:	d115      	bne.n	800c31a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c2ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2f2:	3308      	adds	r3, #8
 800c2f4:	2100      	movs	r1, #0
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f001 fbf6 	bl	800dae8 <RCCEx_PLL2_Config>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c302:	e015      	b.n	800c330 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c304:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c308:	3328      	adds	r3, #40	@ 0x28
 800c30a:	2102      	movs	r1, #2
 800c30c:	4618      	mov	r0, r3
 800c30e:	f001 fc9d 	bl	800dc4c <RCCEx_PLL3_Config>
 800c312:	4603      	mov	r3, r0
 800c314:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c318:	e00a      	b.n	800c330 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c31a:	2301      	movs	r3, #1
 800c31c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c320:	e006      	b.n	800c330 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c322:	bf00      	nop
 800c324:	e004      	b.n	800c330 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c326:	bf00      	nop
 800c328:	e002      	b.n	800c330 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c32a:	bf00      	nop
 800c32c:	e000      	b.n	800c330 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c32e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c330:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c334:	2b00      	cmp	r3, #0
 800c336:	d10b      	bne.n	800c350 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c338:	4ba0      	ldr	r3, [pc, #640]	@ (800c5bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c33a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c33c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800c340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c344:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c348:	4a9c      	ldr	r2, [pc, #624]	@ (800c5bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c34a:	430b      	orrs	r3, r1
 800c34c:	6593      	str	r3, [r2, #88]	@ 0x58
 800c34e:	e003      	b.n	800c358 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c350:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c354:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800c358:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c360:	f002 0308 	and.w	r3, r2, #8
 800c364:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c368:	2300      	movs	r3, #0
 800c36a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c36e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800c372:	460b      	mov	r3, r1
 800c374:	4313      	orrs	r3, r2
 800c376:	d01e      	beq.n	800c3b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800c378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c37c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c380:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c384:	d10c      	bne.n	800c3a0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c386:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c38a:	3328      	adds	r3, #40	@ 0x28
 800c38c:	2102      	movs	r1, #2
 800c38e:	4618      	mov	r0, r3
 800c390:	f001 fc5c 	bl	800dc4c <RCCEx_PLL3_Config>
 800c394:	4603      	mov	r3, r0
 800c396:	2b00      	cmp	r3, #0
 800c398:	d002      	beq.n	800c3a0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800c39a:	2301      	movs	r3, #1
 800c39c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800c3a0:	4b86      	ldr	r3, [pc, #536]	@ (800c5bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c3a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3a4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c3a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c3b0:	4a82      	ldr	r2, [pc, #520]	@ (800c5bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c3b2:	430b      	orrs	r3, r1
 800c3b4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c3b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3be:	f002 0310 	and.w	r3, r2, #16
 800c3c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c3cc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800c3d0:	460b      	mov	r3, r1
 800c3d2:	4313      	orrs	r3, r2
 800c3d4:	d01e      	beq.n	800c414 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c3d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c3de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c3e2:	d10c      	bne.n	800c3fe <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c3e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3e8:	3328      	adds	r3, #40	@ 0x28
 800c3ea:	2102      	movs	r1, #2
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f001 fc2d 	bl	800dc4c <RCCEx_PLL3_Config>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d002      	beq.n	800c3fe <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c3fe:	4b6f      	ldr	r3, [pc, #444]	@ (800c5bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c402:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c406:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c40a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c40e:	4a6b      	ldr	r2, [pc, #428]	@ (800c5bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c410:	430b      	orrs	r3, r1
 800c412:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c414:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c41c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800c420:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c422:	2300      	movs	r3, #0
 800c424:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c426:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800c42a:	460b      	mov	r3, r1
 800c42c:	4313      	orrs	r3, r2
 800c42e:	d03e      	beq.n	800c4ae <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c430:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c434:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c438:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c43c:	d022      	beq.n	800c484 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c43e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c442:	d81b      	bhi.n	800c47c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800c444:	2b00      	cmp	r3, #0
 800c446:	d003      	beq.n	800c450 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800c448:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c44c:	d00b      	beq.n	800c466 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800c44e:	e015      	b.n	800c47c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c450:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c454:	3308      	adds	r3, #8
 800c456:	2100      	movs	r1, #0
 800c458:	4618      	mov	r0, r3
 800c45a:	f001 fb45 	bl	800dae8 <RCCEx_PLL2_Config>
 800c45e:	4603      	mov	r3, r0
 800c460:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c464:	e00f      	b.n	800c486 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c466:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c46a:	3328      	adds	r3, #40	@ 0x28
 800c46c:	2102      	movs	r1, #2
 800c46e:	4618      	mov	r0, r3
 800c470:	f001 fbec 	bl	800dc4c <RCCEx_PLL3_Config>
 800c474:	4603      	mov	r3, r0
 800c476:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c47a:	e004      	b.n	800c486 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c47c:	2301      	movs	r3, #1
 800c47e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c482:	e000      	b.n	800c486 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800c484:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c486:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d10b      	bne.n	800c4a6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c48e:	4b4b      	ldr	r3, [pc, #300]	@ (800c5bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c492:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800c496:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c49a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c49e:	4a47      	ldr	r2, [pc, #284]	@ (800c5bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c4a0:	430b      	orrs	r3, r1
 800c4a2:	6593      	str	r3, [r2, #88]	@ 0x58
 800c4a4:	e003      	b.n	800c4ae <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c4aa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c4ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800c4ba:	673b      	str	r3, [r7, #112]	@ 0x70
 800c4bc:	2300      	movs	r3, #0
 800c4be:	677b      	str	r3, [r7, #116]	@ 0x74
 800c4c0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800c4c4:	460b      	mov	r3, r1
 800c4c6:	4313      	orrs	r3, r2
 800c4c8:	d03b      	beq.n	800c542 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c4ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c4d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c4d6:	d01f      	beq.n	800c518 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c4d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c4dc:	d818      	bhi.n	800c510 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800c4de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c4e2:	d003      	beq.n	800c4ec <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800c4e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c4e8:	d007      	beq.n	800c4fa <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800c4ea:	e011      	b.n	800c510 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c4ec:	4b33      	ldr	r3, [pc, #204]	@ (800c5bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c4ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4f0:	4a32      	ldr	r2, [pc, #200]	@ (800c5bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c4f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c4f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c4f8:	e00f      	b.n	800c51a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c4fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4fe:	3328      	adds	r3, #40	@ 0x28
 800c500:	2101      	movs	r1, #1
 800c502:	4618      	mov	r0, r3
 800c504:	f001 fba2 	bl	800dc4c <RCCEx_PLL3_Config>
 800c508:	4603      	mov	r3, r0
 800c50a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800c50e:	e004      	b.n	800c51a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c510:	2301      	movs	r3, #1
 800c512:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c516:	e000      	b.n	800c51a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800c518:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c51a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d10b      	bne.n	800c53a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c522:	4b26      	ldr	r3, [pc, #152]	@ (800c5bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c526:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c52a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c52e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c532:	4a22      	ldr	r2, [pc, #136]	@ (800c5bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c534:	430b      	orrs	r3, r1
 800c536:	6553      	str	r3, [r2, #84]	@ 0x54
 800c538:	e003      	b.n	800c542 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c53a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c53e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c542:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c54a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800c54e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c550:	2300      	movs	r3, #0
 800c552:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c554:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800c558:	460b      	mov	r3, r1
 800c55a:	4313      	orrs	r3, r2
 800c55c:	d034      	beq.n	800c5c8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c55e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c562:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c564:	2b00      	cmp	r3, #0
 800c566:	d003      	beq.n	800c570 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800c568:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c56c:	d007      	beq.n	800c57e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800c56e:	e011      	b.n	800c594 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c570:	4b12      	ldr	r3, [pc, #72]	@ (800c5bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c574:	4a11      	ldr	r2, [pc, #68]	@ (800c5bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c576:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c57a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c57c:	e00e      	b.n	800c59c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c57e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c582:	3308      	adds	r3, #8
 800c584:	2102      	movs	r1, #2
 800c586:	4618      	mov	r0, r3
 800c588:	f001 faae 	bl	800dae8 <RCCEx_PLL2_Config>
 800c58c:	4603      	mov	r3, r0
 800c58e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c592:	e003      	b.n	800c59c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800c594:	2301      	movs	r3, #1
 800c596:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c59a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c59c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d10d      	bne.n	800c5c0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c5a4:	4b05      	ldr	r3, [pc, #20]	@ (800c5bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c5a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c5a8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c5ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c5b2:	4a02      	ldr	r2, [pc, #8]	@ (800c5bc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c5b4:	430b      	orrs	r3, r1
 800c5b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c5b8:	e006      	b.n	800c5c8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800c5ba:	bf00      	nop
 800c5bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c5c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c5c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800c5d4:	663b      	str	r3, [r7, #96]	@ 0x60
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	667b      	str	r3, [r7, #100]	@ 0x64
 800c5da:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800c5de:	460b      	mov	r3, r1
 800c5e0:	4313      	orrs	r3, r2
 800c5e2:	d00c      	beq.n	800c5fe <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c5e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5e8:	3328      	adds	r3, #40	@ 0x28
 800c5ea:	2102      	movs	r1, #2
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f001 fb2d 	bl	800dc4c <RCCEx_PLL3_Config>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d002      	beq.n	800c5fe <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800c5f8:	2301      	movs	r3, #1
 800c5fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c5fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c606:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800c60a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c60c:	2300      	movs	r3, #0
 800c60e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c610:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800c614:	460b      	mov	r3, r1
 800c616:	4313      	orrs	r3, r2
 800c618:	d036      	beq.n	800c688 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c61a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c61e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c620:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c624:	d018      	beq.n	800c658 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800c626:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c62a:	d811      	bhi.n	800c650 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c62c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c630:	d014      	beq.n	800c65c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800c632:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c636:	d80b      	bhi.n	800c650 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d011      	beq.n	800c660 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800c63c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c640:	d106      	bne.n	800c650 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c642:	4bb7      	ldr	r3, [pc, #732]	@ (800c920 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c646:	4ab6      	ldr	r2, [pc, #728]	@ (800c920 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c648:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c64c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c64e:	e008      	b.n	800c662 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c650:	2301      	movs	r3, #1
 800c652:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c656:	e004      	b.n	800c662 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c658:	bf00      	nop
 800c65a:	e002      	b.n	800c662 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c65c:	bf00      	nop
 800c65e:	e000      	b.n	800c662 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c660:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c662:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c666:	2b00      	cmp	r3, #0
 800c668:	d10a      	bne.n	800c680 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c66a:	4bad      	ldr	r3, [pc, #692]	@ (800c920 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c66c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c66e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c672:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c676:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c678:	4aa9      	ldr	r2, [pc, #676]	@ (800c920 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c67a:	430b      	orrs	r3, r1
 800c67c:	6553      	str	r3, [r2, #84]	@ 0x54
 800c67e:	e003      	b.n	800c688 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c680:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c684:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c690:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800c694:	653b      	str	r3, [r7, #80]	@ 0x50
 800c696:	2300      	movs	r3, #0
 800c698:	657b      	str	r3, [r7, #84]	@ 0x54
 800c69a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800c69e:	460b      	mov	r3, r1
 800c6a0:	4313      	orrs	r3, r2
 800c6a2:	d009      	beq.n	800c6b8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c6a4:	4b9e      	ldr	r3, [pc, #632]	@ (800c920 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c6a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c6a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c6ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c6b2:	4a9b      	ldr	r2, [pc, #620]	@ (800c920 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c6b4:	430b      	orrs	r3, r1
 800c6b6:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c6b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800c6c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c6ca:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800c6ce:	460b      	mov	r3, r1
 800c6d0:	4313      	orrs	r3, r2
 800c6d2:	d009      	beq.n	800c6e8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c6d4:	4b92      	ldr	r3, [pc, #584]	@ (800c920 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c6d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c6d8:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800c6dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800c6e2:	4a8f      	ldr	r2, [pc, #572]	@ (800c920 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c6e4:	430b      	orrs	r3, r1
 800c6e6:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c6e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800c6f4:	643b      	str	r3, [r7, #64]	@ 0x40
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	647b      	str	r3, [r7, #68]	@ 0x44
 800c6fa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800c6fe:	460b      	mov	r3, r1
 800c700:	4313      	orrs	r3, r2
 800c702:	d00e      	beq.n	800c722 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c704:	4b86      	ldr	r3, [pc, #536]	@ (800c920 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c706:	691b      	ldr	r3, [r3, #16]
 800c708:	4a85      	ldr	r2, [pc, #532]	@ (800c920 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c70a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c70e:	6113      	str	r3, [r2, #16]
 800c710:	4b83      	ldr	r3, [pc, #524]	@ (800c920 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c712:	6919      	ldr	r1, [r3, #16]
 800c714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c718:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c71c:	4a80      	ldr	r2, [pc, #512]	@ (800c920 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c71e:	430b      	orrs	r3, r1
 800c720:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c72a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800c72e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c730:	2300      	movs	r3, #0
 800c732:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c734:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800c738:	460b      	mov	r3, r1
 800c73a:	4313      	orrs	r3, r2
 800c73c:	d009      	beq.n	800c752 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c73e:	4b78      	ldr	r3, [pc, #480]	@ (800c920 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c742:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800c746:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c74a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c74c:	4a74      	ldr	r2, [pc, #464]	@ (800c920 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c74e:	430b      	orrs	r3, r1
 800c750:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c752:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c75a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800c75e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c760:	2300      	movs	r3, #0
 800c762:	637b      	str	r3, [r7, #52]	@ 0x34
 800c764:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800c768:	460b      	mov	r3, r1
 800c76a:	4313      	orrs	r3, r2
 800c76c:	d00a      	beq.n	800c784 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c76e:	4b6c      	ldr	r3, [pc, #432]	@ (800c920 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c772:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800c776:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c77a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c77e:	4a68      	ldr	r2, [pc, #416]	@ (800c920 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c780:	430b      	orrs	r3, r1
 800c782:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c784:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c78c:	2100      	movs	r1, #0
 800c78e:	62b9      	str	r1, [r7, #40]	@ 0x28
 800c790:	f003 0301 	and.w	r3, r3, #1
 800c794:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c796:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800c79a:	460b      	mov	r3, r1
 800c79c:	4313      	orrs	r3, r2
 800c79e:	d011      	beq.n	800c7c4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c7a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7a4:	3308      	adds	r3, #8
 800c7a6:	2100      	movs	r1, #0
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f001 f99d 	bl	800dae8 <RCCEx_PLL2_Config>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c7b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d003      	beq.n	800c7c4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c7c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c7c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7cc:	2100      	movs	r1, #0
 800c7ce:	6239      	str	r1, [r7, #32]
 800c7d0:	f003 0302 	and.w	r3, r3, #2
 800c7d4:	627b      	str	r3, [r7, #36]	@ 0x24
 800c7d6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c7da:	460b      	mov	r3, r1
 800c7dc:	4313      	orrs	r3, r2
 800c7de:	d011      	beq.n	800c804 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c7e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7e4:	3308      	adds	r3, #8
 800c7e6:	2101      	movs	r1, #1
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f001 f97d 	bl	800dae8 <RCCEx_PLL2_Config>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c7f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d003      	beq.n	800c804 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c800:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c804:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c80c:	2100      	movs	r1, #0
 800c80e:	61b9      	str	r1, [r7, #24]
 800c810:	f003 0304 	and.w	r3, r3, #4
 800c814:	61fb      	str	r3, [r7, #28]
 800c816:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c81a:	460b      	mov	r3, r1
 800c81c:	4313      	orrs	r3, r2
 800c81e:	d011      	beq.n	800c844 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c820:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c824:	3308      	adds	r3, #8
 800c826:	2102      	movs	r1, #2
 800c828:	4618      	mov	r0, r3
 800c82a:	f001 f95d 	bl	800dae8 <RCCEx_PLL2_Config>
 800c82e:	4603      	mov	r3, r0
 800c830:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c834:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d003      	beq.n	800c844 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c83c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c840:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c844:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c84c:	2100      	movs	r1, #0
 800c84e:	6139      	str	r1, [r7, #16]
 800c850:	f003 0308 	and.w	r3, r3, #8
 800c854:	617b      	str	r3, [r7, #20]
 800c856:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c85a:	460b      	mov	r3, r1
 800c85c:	4313      	orrs	r3, r2
 800c85e:	d011      	beq.n	800c884 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c860:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c864:	3328      	adds	r3, #40	@ 0x28
 800c866:	2100      	movs	r1, #0
 800c868:	4618      	mov	r0, r3
 800c86a:	f001 f9ef 	bl	800dc4c <RCCEx_PLL3_Config>
 800c86e:	4603      	mov	r3, r0
 800c870:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800c874:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d003      	beq.n	800c884 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c87c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c880:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c884:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c88c:	2100      	movs	r1, #0
 800c88e:	60b9      	str	r1, [r7, #8]
 800c890:	f003 0310 	and.w	r3, r3, #16
 800c894:	60fb      	str	r3, [r7, #12]
 800c896:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c89a:	460b      	mov	r3, r1
 800c89c:	4313      	orrs	r3, r2
 800c89e:	d011      	beq.n	800c8c4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c8a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8a4:	3328      	adds	r3, #40	@ 0x28
 800c8a6:	2101      	movs	r1, #1
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	f001 f9cf 	bl	800dc4c <RCCEx_PLL3_Config>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c8b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d003      	beq.n	800c8c4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c8c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c8c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8cc:	2100      	movs	r1, #0
 800c8ce:	6039      	str	r1, [r7, #0]
 800c8d0:	f003 0320 	and.w	r3, r3, #32
 800c8d4:	607b      	str	r3, [r7, #4]
 800c8d6:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c8da:	460b      	mov	r3, r1
 800c8dc:	4313      	orrs	r3, r2
 800c8de:	d011      	beq.n	800c904 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c8e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8e4:	3328      	adds	r3, #40	@ 0x28
 800c8e6:	2102      	movs	r1, #2
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	f001 f9af 	bl	800dc4c <RCCEx_PLL3_Config>
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800c8f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d003      	beq.n	800c904 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c900:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800c904:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d101      	bne.n	800c910 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800c90c:	2300      	movs	r3, #0
 800c90e:	e000      	b.n	800c912 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800c910:	2301      	movs	r3, #1
}
 800c912:	4618      	mov	r0, r3
 800c914:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800c918:	46bd      	mov	sp, r7
 800c91a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c91e:	bf00      	nop
 800c920:	58024400 	.word	0x58024400

0800c924 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b090      	sub	sp, #64	@ 0x40
 800c928:	af00      	add	r7, sp, #0
 800c92a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c92e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c932:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800c936:	430b      	orrs	r3, r1
 800c938:	f040 8094 	bne.w	800ca64 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c93c:	4b9b      	ldr	r3, [pc, #620]	@ (800cbac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c93e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c940:	f003 0307 	and.w	r3, r3, #7
 800c944:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800c946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c948:	2b04      	cmp	r3, #4
 800c94a:	f200 8087 	bhi.w	800ca5c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c94e:	a201      	add	r2, pc, #4	@ (adr r2, 800c954 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c954:	0800c969 	.word	0x0800c969
 800c958:	0800c991 	.word	0x0800c991
 800c95c:	0800c9b9 	.word	0x0800c9b9
 800c960:	0800ca55 	.word	0x0800ca55
 800c964:	0800c9e1 	.word	0x0800c9e1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c968:	4b90      	ldr	r3, [pc, #576]	@ (800cbac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c970:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c974:	d108      	bne.n	800c988 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c976:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c97a:	4618      	mov	r0, r3
 800c97c:	f000 ff62 	bl	800d844 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c982:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c984:	f000 bc93 	b.w	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c988:	2300      	movs	r3, #0
 800c98a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c98c:	f000 bc8f 	b.w	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c990:	4b86      	ldr	r3, [pc, #536]	@ (800cbac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c998:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c99c:	d108      	bne.n	800c9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c99e:	f107 0318 	add.w	r3, r7, #24
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f000 fca6 	bl	800d2f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c9a8:	69bb      	ldr	r3, [r7, #24]
 800c9aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9ac:	f000 bc7f 	b.w	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9b4:	f000 bc7b 	b.w	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c9b8:	4b7c      	ldr	r3, [pc, #496]	@ (800cbac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c9c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c9c4:	d108      	bne.n	800c9d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c9c6:	f107 030c 	add.w	r3, r7, #12
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f000 fde6 	bl	800d59c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9d4:	f000 bc6b 	b.w	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c9dc:	f000 bc67 	b.w	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c9e0:	4b72      	ldr	r3, [pc, #456]	@ (800cbac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c9e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c9e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800c9e8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c9ea:	4b70      	ldr	r3, [pc, #448]	@ (800cbac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	f003 0304 	and.w	r3, r3, #4
 800c9f2:	2b04      	cmp	r3, #4
 800c9f4:	d10c      	bne.n	800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c9f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d109      	bne.n	800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c9fc:	4b6b      	ldr	r3, [pc, #428]	@ (800cbac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	08db      	lsrs	r3, r3, #3
 800ca02:	f003 0303 	and.w	r3, r3, #3
 800ca06:	4a6a      	ldr	r2, [pc, #424]	@ (800cbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800ca08:	fa22 f303 	lsr.w	r3, r2, r3
 800ca0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca0e:	e01f      	b.n	800ca50 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ca10:	4b66      	ldr	r3, [pc, #408]	@ (800cbac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ca18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ca1c:	d106      	bne.n	800ca2c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800ca1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ca24:	d102      	bne.n	800ca2c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ca26:	4b63      	ldr	r3, [pc, #396]	@ (800cbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800ca28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca2a:	e011      	b.n	800ca50 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ca2c:	4b5f      	ldr	r3, [pc, #380]	@ (800cbac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ca34:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ca38:	d106      	bne.n	800ca48 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800ca3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ca40:	d102      	bne.n	800ca48 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ca42:	4b5d      	ldr	r3, [pc, #372]	@ (800cbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ca44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca46:	e003      	b.n	800ca50 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ca4c:	f000 bc2f 	b.w	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ca50:	f000 bc2d 	b.w	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ca54:	4b59      	ldr	r3, [pc, #356]	@ (800cbbc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ca56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca58:	f000 bc29 	b.w	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca60:	f000 bc25 	b.w	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800ca64:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca68:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800ca6c:	430b      	orrs	r3, r1
 800ca6e:	f040 80a7 	bne.w	800cbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800ca72:	4b4e      	ldr	r3, [pc, #312]	@ (800cbac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ca74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca76:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800ca7a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ca7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca7e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ca82:	d054      	beq.n	800cb2e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800ca84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca86:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ca8a:	f200 808b 	bhi.w	800cba4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ca8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca90:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ca94:	f000 8083 	beq.w	800cb9e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800ca98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca9a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ca9e:	f200 8081 	bhi.w	800cba4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800caa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caa4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800caa8:	d02f      	beq.n	800cb0a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800caaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cab0:	d878      	bhi.n	800cba4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800cab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d004      	beq.n	800cac2 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800cab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cabe:	d012      	beq.n	800cae6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800cac0:	e070      	b.n	800cba4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cac2:	4b3a      	ldr	r3, [pc, #232]	@ (800cbac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800caca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cace:	d107      	bne.n	800cae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cad0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cad4:	4618      	mov	r0, r3
 800cad6:	f000 feb5 	bl	800d844 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cadc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cade:	e3e6      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cae0:	2300      	movs	r3, #0
 800cae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cae4:	e3e3      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cae6:	4b31      	ldr	r3, [pc, #196]	@ (800cbac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800caee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800caf2:	d107      	bne.n	800cb04 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800caf4:	f107 0318 	add.w	r3, r7, #24
 800caf8:	4618      	mov	r0, r3
 800cafa:	f000 fbfb 	bl	800d2f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cafe:	69bb      	ldr	r3, [r7, #24]
 800cb00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb02:	e3d4      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cb04:	2300      	movs	r3, #0
 800cb06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb08:	e3d1      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cb0a:	4b28      	ldr	r3, [pc, #160]	@ (800cbac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cb12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cb16:	d107      	bne.n	800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb18:	f107 030c 	add.w	r3, r7, #12
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	f000 fd3d 	bl	800d59c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb26:	e3c2      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb2c:	e3bf      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cb2e:	4b1f      	ldr	r3, [pc, #124]	@ (800cbac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cb32:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800cb36:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cb38:	4b1c      	ldr	r3, [pc, #112]	@ (800cbac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	f003 0304 	and.w	r3, r3, #4
 800cb40:	2b04      	cmp	r3, #4
 800cb42:	d10c      	bne.n	800cb5e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800cb44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d109      	bne.n	800cb5e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb4a:	4b18      	ldr	r3, [pc, #96]	@ (800cbac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	08db      	lsrs	r3, r3, #3
 800cb50:	f003 0303 	and.w	r3, r3, #3
 800cb54:	4a16      	ldr	r2, [pc, #88]	@ (800cbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800cb56:	fa22 f303 	lsr.w	r3, r2, r3
 800cb5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cb5c:	e01e      	b.n	800cb9c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cb5e:	4b13      	ldr	r3, [pc, #76]	@ (800cbac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cb66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cb6a:	d106      	bne.n	800cb7a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800cb6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cb72:	d102      	bne.n	800cb7a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cb74:	4b0f      	ldr	r3, [pc, #60]	@ (800cbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800cb76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cb78:	e010      	b.n	800cb9c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cb7a:	4b0c      	ldr	r3, [pc, #48]	@ (800cbac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cb82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cb86:	d106      	bne.n	800cb96 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800cb88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cb8e:	d102      	bne.n	800cb96 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cb90:	4b09      	ldr	r3, [pc, #36]	@ (800cbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cb92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cb94:	e002      	b.n	800cb9c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cb96:	2300      	movs	r3, #0
 800cb98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800cb9a:	e388      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cb9c:	e387      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cb9e:	4b07      	ldr	r3, [pc, #28]	@ (800cbbc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800cba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cba2:	e384      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800cba4:	2300      	movs	r3, #0
 800cba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cba8:	e381      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cbaa:	bf00      	nop
 800cbac:	58024400 	.word	0x58024400
 800cbb0:	03d09000 	.word	0x03d09000
 800cbb4:	003d0900 	.word	0x003d0900
 800cbb8:	007a1200 	.word	0x007a1200
 800cbbc:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800cbc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbc4:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800cbc8:	430b      	orrs	r3, r1
 800cbca:	f040 809c 	bne.w	800cd06 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800cbce:	4b9e      	ldr	r3, [pc, #632]	@ (800ce48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cbd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cbd2:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800cbd6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800cbd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbda:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cbde:	d054      	beq.n	800cc8a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800cbe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbe2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cbe6:	f200 808b 	bhi.w	800cd00 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800cbea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800cbf0:	f000 8083 	beq.w	800ccfa <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800cbf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbf6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800cbfa:	f200 8081 	bhi.w	800cd00 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800cbfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc00:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cc04:	d02f      	beq.n	800cc66 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800cc06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cc0c:	d878      	bhi.n	800cd00 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800cc0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d004      	beq.n	800cc1e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800cc14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cc1a:	d012      	beq.n	800cc42 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800cc1c:	e070      	b.n	800cd00 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cc1e:	4b8a      	ldr	r3, [pc, #552]	@ (800ce48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cc26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cc2a:	d107      	bne.n	800cc3c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cc2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cc30:	4618      	mov	r0, r3
 800cc32:	f000 fe07 	bl	800d844 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cc36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc3a:	e338      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc40:	e335      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cc42:	4b81      	ldr	r3, [pc, #516]	@ (800ce48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cc4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cc4e:	d107      	bne.n	800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc50:	f107 0318 	add.w	r3, r7, #24
 800cc54:	4618      	mov	r0, r3
 800cc56:	f000 fb4d 	bl	800d2f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cc5a:	69bb      	ldr	r3, [r7, #24]
 800cc5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc5e:	e326      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cc60:	2300      	movs	r3, #0
 800cc62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc64:	e323      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cc66:	4b78      	ldr	r3, [pc, #480]	@ (800ce48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cc6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cc72:	d107      	bne.n	800cc84 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc74:	f107 030c 	add.w	r3, r7, #12
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f000 fc8f 	bl	800d59c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc82:	e314      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cc84:	2300      	movs	r3, #0
 800cc86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc88:	e311      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cc8a:	4b6f      	ldr	r3, [pc, #444]	@ (800ce48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cc8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cc8e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800cc92:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cc94:	4b6c      	ldr	r3, [pc, #432]	@ (800ce48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	f003 0304 	and.w	r3, r3, #4
 800cc9c:	2b04      	cmp	r3, #4
 800cc9e:	d10c      	bne.n	800ccba <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800cca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d109      	bne.n	800ccba <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cca6:	4b68      	ldr	r3, [pc, #416]	@ (800ce48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	08db      	lsrs	r3, r3, #3
 800ccac:	f003 0303 	and.w	r3, r3, #3
 800ccb0:	4a66      	ldr	r2, [pc, #408]	@ (800ce4c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800ccb2:	fa22 f303 	lsr.w	r3, r2, r3
 800ccb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ccb8:	e01e      	b.n	800ccf8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ccba:	4b63      	ldr	r3, [pc, #396]	@ (800ce48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ccc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ccc6:	d106      	bne.n	800ccd6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800ccc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ccce:	d102      	bne.n	800ccd6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ccd0:	4b5f      	ldr	r3, [pc, #380]	@ (800ce50 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800ccd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ccd4:	e010      	b.n	800ccf8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ccd6:	4b5c      	ldr	r3, [pc, #368]	@ (800ce48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ccde:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cce2:	d106      	bne.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800cce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cce6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ccea:	d102      	bne.n	800ccf2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ccec:	4b59      	ldr	r3, [pc, #356]	@ (800ce54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ccee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ccf0:	e002      	b.n	800ccf8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ccf6:	e2da      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ccf8:	e2d9      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ccfa:	4b57      	ldr	r3, [pc, #348]	@ (800ce58 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ccfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ccfe:	e2d6      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800cd00:	2300      	movs	r3, #0
 800cd02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd04:	e2d3      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800cd06:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd0a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800cd0e:	430b      	orrs	r3, r1
 800cd10:	f040 80a7 	bne.w	800ce62 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800cd14:	4b4c      	ldr	r3, [pc, #304]	@ (800ce48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cd16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd18:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800cd1c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800cd1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cd24:	d055      	beq.n	800cdd2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800cd26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cd2c:	f200 8096 	bhi.w	800ce5c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800cd30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd32:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cd36:	f000 8084 	beq.w	800ce42 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800cd3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd3c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800cd40:	f200 808c 	bhi.w	800ce5c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800cd44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cd4a:	d030      	beq.n	800cdae <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800cd4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cd52:	f200 8083 	bhi.w	800ce5c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800cd56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d004      	beq.n	800cd66 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800cd5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd62:	d012      	beq.n	800cd8a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800cd64:	e07a      	b.n	800ce5c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cd66:	4b38      	ldr	r3, [pc, #224]	@ (800ce48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cd6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cd72:	d107      	bne.n	800cd84 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cd74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f000 fd63 	bl	800d844 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cd7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd82:	e294      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cd84:	2300      	movs	r3, #0
 800cd86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd88:	e291      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cd8a:	4b2f      	ldr	r3, [pc, #188]	@ (800ce48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cd92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cd96:	d107      	bne.n	800cda8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd98:	f107 0318 	add.w	r3, r7, #24
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f000 faa9 	bl	800d2f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cda2:	69bb      	ldr	r3, [r7, #24]
 800cda4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cda6:	e282      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cda8:	2300      	movs	r3, #0
 800cdaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cdac:	e27f      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cdae:	4b26      	ldr	r3, [pc, #152]	@ (800ce48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cdb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cdba:	d107      	bne.n	800cdcc <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cdbc:	f107 030c 	add.w	r3, r7, #12
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f000 fbeb 	bl	800d59c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdca:	e270      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cdcc:	2300      	movs	r3, #0
 800cdce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cdd0:	e26d      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cdd2:	4b1d      	ldr	r3, [pc, #116]	@ (800ce48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cdd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cdd6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800cdda:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cddc:	4b1a      	ldr	r3, [pc, #104]	@ (800ce48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	f003 0304 	and.w	r3, r3, #4
 800cde4:	2b04      	cmp	r3, #4
 800cde6:	d10c      	bne.n	800ce02 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800cde8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d109      	bne.n	800ce02 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cdee:	4b16      	ldr	r3, [pc, #88]	@ (800ce48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	08db      	lsrs	r3, r3, #3
 800cdf4:	f003 0303 	and.w	r3, r3, #3
 800cdf8:	4a14      	ldr	r2, [pc, #80]	@ (800ce4c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800cdfa:	fa22 f303 	lsr.w	r3, r2, r3
 800cdfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ce00:	e01e      	b.n	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ce02:	4b11      	ldr	r3, [pc, #68]	@ (800ce48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ce0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ce0e:	d106      	bne.n	800ce1e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800ce10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ce16:	d102      	bne.n	800ce1e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ce18:	4b0d      	ldr	r3, [pc, #52]	@ (800ce50 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800ce1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ce1c:	e010      	b.n	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ce1e:	4b0a      	ldr	r3, [pc, #40]	@ (800ce48 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ce26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ce2a:	d106      	bne.n	800ce3a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800ce2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ce32:	d102      	bne.n	800ce3a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ce34:	4b07      	ldr	r3, [pc, #28]	@ (800ce54 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ce36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ce38:	e002      	b.n	800ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ce3e:	e236      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ce40:	e235      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ce42:	4b05      	ldr	r3, [pc, #20]	@ (800ce58 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ce44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce46:	e232      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ce48:	58024400 	.word	0x58024400
 800ce4c:	03d09000 	.word	0x03d09000
 800ce50:	003d0900 	.word	0x003d0900
 800ce54:	007a1200 	.word	0x007a1200
 800ce58:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce60:	e225      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ce62:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce66:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800ce6a:	430b      	orrs	r3, r1
 800ce6c:	f040 8085 	bne.w	800cf7a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ce70:	4b9c      	ldr	r3, [pc, #624]	@ (800d0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ce72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce74:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800ce78:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800ce7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ce80:	d06b      	beq.n	800cf5a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800ce82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ce88:	d874      	bhi.n	800cf74 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ce8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce8c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ce90:	d056      	beq.n	800cf40 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800ce92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce94:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ce98:	d86c      	bhi.n	800cf74 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ce9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce9c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cea0:	d03b      	beq.n	800cf1a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800cea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cea4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cea8:	d864      	bhi.n	800cf74 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ceaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ceac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ceb0:	d021      	beq.n	800cef6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800ceb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ceb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ceb8:	d85c      	bhi.n	800cf74 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800ceba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d004      	beq.n	800ceca <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800cec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cec2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cec6:	d004      	beq.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800cec8:	e054      	b.n	800cf74 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800ceca:	f7fe fb5f 	bl	800b58c <HAL_RCC_GetPCLK1Freq>
 800cece:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ced0:	e1ed      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ced2:	4b84      	ldr	r3, [pc, #528]	@ (800d0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ceda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cede:	d107      	bne.n	800cef0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cee0:	f107 0318 	add.w	r3, r7, #24
 800cee4:	4618      	mov	r0, r3
 800cee6:	f000 fa05 	bl	800d2f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ceea:	69fb      	ldr	r3, [r7, #28]
 800ceec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ceee:	e1de      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cef0:	2300      	movs	r3, #0
 800cef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cef4:	e1db      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cef6:	4b7b      	ldr	r3, [pc, #492]	@ (800d0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cefe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cf02:	d107      	bne.n	800cf14 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf04:	f107 030c 	add.w	r3, r7, #12
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f000 fb47 	bl	800d59c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cf0e:	693b      	ldr	r3, [r7, #16]
 800cf10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf12:	e1cc      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf14:	2300      	movs	r3, #0
 800cf16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf18:	e1c9      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cf1a:	4b72      	ldr	r3, [pc, #456]	@ (800d0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	f003 0304 	and.w	r3, r3, #4
 800cf22:	2b04      	cmp	r3, #4
 800cf24:	d109      	bne.n	800cf3a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf26:	4b6f      	ldr	r3, [pc, #444]	@ (800d0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	08db      	lsrs	r3, r3, #3
 800cf2c:	f003 0303 	and.w	r3, r3, #3
 800cf30:	4a6d      	ldr	r2, [pc, #436]	@ (800d0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800cf32:	fa22 f303 	lsr.w	r3, r2, r3
 800cf36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf38:	e1b9      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf3e:	e1b6      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cf40:	4b68      	ldr	r3, [pc, #416]	@ (800d0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cf48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cf4c:	d102      	bne.n	800cf54 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800cf4e:	4b67      	ldr	r3, [pc, #412]	@ (800d0ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800cf50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf52:	e1ac      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf54:	2300      	movs	r3, #0
 800cf56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf58:	e1a9      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cf5a:	4b62      	ldr	r3, [pc, #392]	@ (800d0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cf62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cf66:	d102      	bne.n	800cf6e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800cf68:	4b61      	ldr	r3, [pc, #388]	@ (800d0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800cf6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf6c:	e19f      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf72:	e19c      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800cf74:	2300      	movs	r3, #0
 800cf76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf78:	e199      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800cf7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf7e:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800cf82:	430b      	orrs	r3, r1
 800cf84:	d173      	bne.n	800d06e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800cf86:	4b57      	ldr	r3, [pc, #348]	@ (800d0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cf88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf8a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800cf8e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800cf90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cf96:	d02f      	beq.n	800cff8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800cf98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cf9e:	d863      	bhi.n	800d068 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800cfa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d004      	beq.n	800cfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800cfa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cfac:	d012      	beq.n	800cfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800cfae:	e05b      	b.n	800d068 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cfb0:	4b4c      	ldr	r3, [pc, #304]	@ (800d0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cfb8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cfbc:	d107      	bne.n	800cfce <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cfbe:	f107 0318 	add.w	r3, r7, #24
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	f000 f996 	bl	800d2f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cfc8:	69bb      	ldr	r3, [r7, #24]
 800cfca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfcc:	e16f      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cfce:	2300      	movs	r3, #0
 800cfd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cfd2:	e16c      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cfd4:	4b43      	ldr	r3, [pc, #268]	@ (800d0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cfdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cfe0:	d107      	bne.n	800cff2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cfe2:	f107 030c 	add.w	r3, r7, #12
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f000 fad8 	bl	800d59c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800cfec:	697b      	ldr	r3, [r7, #20]
 800cfee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cff0:	e15d      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cff2:	2300      	movs	r3, #0
 800cff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cff6:	e15a      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cff8:	4b3a      	ldr	r3, [pc, #232]	@ (800d0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cffa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cffc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d000:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d002:	4b38      	ldr	r3, [pc, #224]	@ (800d0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	f003 0304 	and.w	r3, r3, #4
 800d00a:	2b04      	cmp	r3, #4
 800d00c:	d10c      	bne.n	800d028 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800d00e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d010:	2b00      	cmp	r3, #0
 800d012:	d109      	bne.n	800d028 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d014:	4b33      	ldr	r3, [pc, #204]	@ (800d0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	08db      	lsrs	r3, r3, #3
 800d01a:	f003 0303 	and.w	r3, r3, #3
 800d01e:	4a32      	ldr	r2, [pc, #200]	@ (800d0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800d020:	fa22 f303 	lsr.w	r3, r2, r3
 800d024:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d026:	e01e      	b.n	800d066 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d028:	4b2e      	ldr	r3, [pc, #184]	@ (800d0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d030:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d034:	d106      	bne.n	800d044 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800d036:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d038:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d03c:	d102      	bne.n	800d044 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d03e:	4b2b      	ldr	r3, [pc, #172]	@ (800d0ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800d040:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d042:	e010      	b.n	800d066 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d044:	4b27      	ldr	r3, [pc, #156]	@ (800d0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d04c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d050:	d106      	bne.n	800d060 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800d052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d054:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d058:	d102      	bne.n	800d060 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d05a:	4b25      	ldr	r3, [pc, #148]	@ (800d0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800d05c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d05e:	e002      	b.n	800d066 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d060:	2300      	movs	r3, #0
 800d062:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d064:	e123      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d066:	e122      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d068:	2300      	movs	r3, #0
 800d06a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d06c:	e11f      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d06e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d072:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800d076:	430b      	orrs	r3, r1
 800d078:	d13c      	bne.n	800d0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800d07a:	4b1a      	ldr	r3, [pc, #104]	@ (800d0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d07c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d07e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d082:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d086:	2b00      	cmp	r3, #0
 800d088:	d004      	beq.n	800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800d08a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d08c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d090:	d012      	beq.n	800d0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800d092:	e023      	b.n	800d0dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d094:	4b13      	ldr	r3, [pc, #76]	@ (800d0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d09c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d0a0:	d107      	bne.n	800d0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d0a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f000 fbcc 	bl	800d844 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d0ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0b0:	e0fd      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d0b6:	e0fa      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d0b8:	4b0a      	ldr	r3, [pc, #40]	@ (800d0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d0c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d0c4:	d107      	bne.n	800d0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d0c6:	f107 0318 	add.w	r3, r7, #24
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f000 f912 	bl	800d2f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d0d0:	6a3b      	ldr	r3, [r7, #32]
 800d0d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0d4:	e0eb      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d0da:	e0e8      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d0dc:	2300      	movs	r3, #0
 800d0de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d0e0:	e0e5      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d0e2:	bf00      	nop
 800d0e4:	58024400 	.word	0x58024400
 800d0e8:	03d09000 	.word	0x03d09000
 800d0ec:	003d0900 	.word	0x003d0900
 800d0f0:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800d0f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0f8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800d0fc:	430b      	orrs	r3, r1
 800d0fe:	f040 8085 	bne.w	800d20c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800d102:	4b6d      	ldr	r3, [pc, #436]	@ (800d2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d106:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800d10a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d10c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d10e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d112:	d06b      	beq.n	800d1ec <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800d114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d116:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d11a:	d874      	bhi.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d11c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d11e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d122:	d056      	beq.n	800d1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800d124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d126:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d12a:	d86c      	bhi.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d12c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d12e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d132:	d03b      	beq.n	800d1ac <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800d134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d136:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d13a:	d864      	bhi.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d13c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d13e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d142:	d021      	beq.n	800d188 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800d144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d146:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d14a:	d85c      	bhi.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d14c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d004      	beq.n	800d15c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800d152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d154:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d158:	d004      	beq.n	800d164 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800d15a:	e054      	b.n	800d206 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800d15c:	f000 f8b4 	bl	800d2c8 <HAL_RCCEx_GetD3PCLK1Freq>
 800d160:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d162:	e0a4      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d164:	4b54      	ldr	r3, [pc, #336]	@ (800d2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d16c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d170:	d107      	bne.n	800d182 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d172:	f107 0318 	add.w	r3, r7, #24
 800d176:	4618      	mov	r0, r3
 800d178:	f000 f8bc 	bl	800d2f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d17c:	69fb      	ldr	r3, [r7, #28]
 800d17e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d180:	e095      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d182:	2300      	movs	r3, #0
 800d184:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d186:	e092      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d188:	4b4b      	ldr	r3, [pc, #300]	@ (800d2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d190:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d194:	d107      	bne.n	800d1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d196:	f107 030c 	add.w	r3, r7, #12
 800d19a:	4618      	mov	r0, r3
 800d19c:	f000 f9fe 	bl	800d59c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d1a0:	693b      	ldr	r3, [r7, #16]
 800d1a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d1a4:	e083      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1aa:	e080      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d1ac:	4b42      	ldr	r3, [pc, #264]	@ (800d2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	f003 0304 	and.w	r3, r3, #4
 800d1b4:	2b04      	cmp	r3, #4
 800d1b6:	d109      	bne.n	800d1cc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d1b8:	4b3f      	ldr	r3, [pc, #252]	@ (800d2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	08db      	lsrs	r3, r3, #3
 800d1be:	f003 0303 	and.w	r3, r3, #3
 800d1c2:	4a3e      	ldr	r2, [pc, #248]	@ (800d2bc <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800d1c4:	fa22 f303 	lsr.w	r3, r2, r3
 800d1c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d1ca:	e070      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1d0:	e06d      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d1d2:	4b39      	ldr	r3, [pc, #228]	@ (800d2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d1da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d1de:	d102      	bne.n	800d1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800d1e0:	4b37      	ldr	r3, [pc, #220]	@ (800d2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d1e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d1e4:	e063      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1ea:	e060      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d1ec:	4b32      	ldr	r3, [pc, #200]	@ (800d2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d1f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d1f8:	d102      	bne.n	800d200 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800d1fa:	4b32      	ldr	r3, [pc, #200]	@ (800d2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d1fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d1fe:	e056      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d200:	2300      	movs	r3, #0
 800d202:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d204:	e053      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800d206:	2300      	movs	r3, #0
 800d208:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d20a:	e050      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d20c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d210:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800d214:	430b      	orrs	r3, r1
 800d216:	d148      	bne.n	800d2aa <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800d218:	4b27      	ldr	r3, [pc, #156]	@ (800d2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d21a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d21c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d220:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d224:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d228:	d02a      	beq.n	800d280 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800d22a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d22c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d230:	d838      	bhi.n	800d2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800d232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d234:	2b00      	cmp	r3, #0
 800d236:	d004      	beq.n	800d242 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800d238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d23a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d23e:	d00d      	beq.n	800d25c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800d240:	e030      	b.n	800d2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d242:	4b1d      	ldr	r3, [pc, #116]	@ (800d2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d24a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d24e:	d102      	bne.n	800d256 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800d250:	4b1c      	ldr	r3, [pc, #112]	@ (800d2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d254:	e02b      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d256:	2300      	movs	r3, #0
 800d258:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d25a:	e028      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d25c:	4b16      	ldr	r3, [pc, #88]	@ (800d2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d264:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d268:	d107      	bne.n	800d27a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d26a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d26e:	4618      	mov	r0, r3
 800d270:	f000 fae8 	bl	800d844 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d278:	e019      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d27a:	2300      	movs	r3, #0
 800d27c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d27e:	e016      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d280:	4b0d      	ldr	r3, [pc, #52]	@ (800d2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d288:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d28c:	d107      	bne.n	800d29e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d28e:	f107 0318 	add.w	r3, r7, #24
 800d292:	4618      	mov	r0, r3
 800d294:	f000 f82e 	bl	800d2f4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d298:	69fb      	ldr	r3, [r7, #28]
 800d29a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d29c:	e007      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d2a2:	e004      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d2a8:	e001      	b.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800d2ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	3740      	adds	r7, #64	@ 0x40
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}
 800d2b8:	58024400 	.word	0x58024400
 800d2bc:	03d09000 	.word	0x03d09000
 800d2c0:	003d0900 	.word	0x003d0900
 800d2c4:	007a1200 	.word	0x007a1200

0800d2c8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d2cc:	f7fe f92e 	bl	800b52c <HAL_RCC_GetHCLKFreq>
 800d2d0:	4602      	mov	r2, r0
 800d2d2:	4b06      	ldr	r3, [pc, #24]	@ (800d2ec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d2d4:	6a1b      	ldr	r3, [r3, #32]
 800d2d6:	091b      	lsrs	r3, r3, #4
 800d2d8:	f003 0307 	and.w	r3, r3, #7
 800d2dc:	4904      	ldr	r1, [pc, #16]	@ (800d2f0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d2de:	5ccb      	ldrb	r3, [r1, r3]
 800d2e0:	f003 031f 	and.w	r3, r3, #31
 800d2e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	bd80      	pop	{r7, pc}
 800d2ec:	58024400 	.word	0x58024400
 800d2f0:	08011f8c 	.word	0x08011f8c

0800d2f4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d2f4:	b480      	push	{r7}
 800d2f6:	b089      	sub	sp, #36	@ 0x24
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d2fc:	4ba1      	ldr	r3, [pc, #644]	@ (800d584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d2fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d300:	f003 0303 	and.w	r3, r3, #3
 800d304:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d306:	4b9f      	ldr	r3, [pc, #636]	@ (800d584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d30a:	0b1b      	lsrs	r3, r3, #12
 800d30c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d310:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d312:	4b9c      	ldr	r3, [pc, #624]	@ (800d584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d316:	091b      	lsrs	r3, r3, #4
 800d318:	f003 0301 	and.w	r3, r3, #1
 800d31c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d31e:	4b99      	ldr	r3, [pc, #612]	@ (800d584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d322:	08db      	lsrs	r3, r3, #3
 800d324:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d328:	693a      	ldr	r2, [r7, #16]
 800d32a:	fb02 f303 	mul.w	r3, r2, r3
 800d32e:	ee07 3a90 	vmov	s15, r3
 800d332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d336:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d33a:	697b      	ldr	r3, [r7, #20]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	f000 8111 	beq.w	800d564 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d342:	69bb      	ldr	r3, [r7, #24]
 800d344:	2b02      	cmp	r3, #2
 800d346:	f000 8083 	beq.w	800d450 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d34a:	69bb      	ldr	r3, [r7, #24]
 800d34c:	2b02      	cmp	r3, #2
 800d34e:	f200 80a1 	bhi.w	800d494 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d352:	69bb      	ldr	r3, [r7, #24]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d003      	beq.n	800d360 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d358:	69bb      	ldr	r3, [r7, #24]
 800d35a:	2b01      	cmp	r3, #1
 800d35c:	d056      	beq.n	800d40c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d35e:	e099      	b.n	800d494 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d360:	4b88      	ldr	r3, [pc, #544]	@ (800d584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	f003 0320 	and.w	r3, r3, #32
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d02d      	beq.n	800d3c8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d36c:	4b85      	ldr	r3, [pc, #532]	@ (800d584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	08db      	lsrs	r3, r3, #3
 800d372:	f003 0303 	and.w	r3, r3, #3
 800d376:	4a84      	ldr	r2, [pc, #528]	@ (800d588 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d378:	fa22 f303 	lsr.w	r3, r2, r3
 800d37c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	ee07 3a90 	vmov	s15, r3
 800d384:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d388:	697b      	ldr	r3, [r7, #20]
 800d38a:	ee07 3a90 	vmov	s15, r3
 800d38e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d396:	4b7b      	ldr	r3, [pc, #492]	@ (800d584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d39a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d39e:	ee07 3a90 	vmov	s15, r3
 800d3a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3aa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800d58c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d3ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d3ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d3c6:	e087      	b.n	800d4d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d3c8:	697b      	ldr	r3, [r7, #20]
 800d3ca:	ee07 3a90 	vmov	s15, r3
 800d3ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3d2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800d590 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d3d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3da:	4b6a      	ldr	r3, [pc, #424]	@ (800d584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d3dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3e2:	ee07 3a90 	vmov	s15, r3
 800d3e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3ee:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800d58c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d3f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d3fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d402:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d406:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d40a:	e065      	b.n	800d4d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d40c:	697b      	ldr	r3, [r7, #20]
 800d40e:	ee07 3a90 	vmov	s15, r3
 800d412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d416:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800d594 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d41a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d41e:	4b59      	ldr	r3, [pc, #356]	@ (800d584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d426:	ee07 3a90 	vmov	s15, r3
 800d42a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d42e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d432:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800d58c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d43a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d43e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d44a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d44e:	e043      	b.n	800d4d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d450:	697b      	ldr	r3, [r7, #20]
 800d452:	ee07 3a90 	vmov	s15, r3
 800d456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d45a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800d598 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d45e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d462:	4b48      	ldr	r3, [pc, #288]	@ (800d584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d46a:	ee07 3a90 	vmov	s15, r3
 800d46e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d472:	ed97 6a03 	vldr	s12, [r7, #12]
 800d476:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800d58c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d47a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d47e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d482:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d48a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d48e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d492:	e021      	b.n	800d4d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d494:	697b      	ldr	r3, [r7, #20]
 800d496:	ee07 3a90 	vmov	s15, r3
 800d49a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d49e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800d594 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d4a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4a6:	4b37      	ldr	r3, [pc, #220]	@ (800d584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4ae:	ee07 3a90 	vmov	s15, r3
 800d4b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d4ba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800d58c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d4be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d4ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d4d6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d4d8:	4b2a      	ldr	r3, [pc, #168]	@ (800d584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4dc:	0a5b      	lsrs	r3, r3, #9
 800d4de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d4e2:	ee07 3a90 	vmov	s15, r3
 800d4e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d4ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d4f2:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4fe:	ee17 2a90 	vmov	r2, s15
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d506:	4b1f      	ldr	r3, [pc, #124]	@ (800d584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d50a:	0c1b      	lsrs	r3, r3, #16
 800d50c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d510:	ee07 3a90 	vmov	s15, r3
 800d514:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d518:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d51c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d520:	edd7 6a07 	vldr	s13, [r7, #28]
 800d524:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d528:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d52c:	ee17 2a90 	vmov	r2, s15
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d534:	4b13      	ldr	r3, [pc, #76]	@ (800d584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d538:	0e1b      	lsrs	r3, r3, #24
 800d53a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d53e:	ee07 3a90 	vmov	s15, r3
 800d542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d546:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d54a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d54e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d552:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d556:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d55a:	ee17 2a90 	vmov	r2, s15
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d562:	e008      	b.n	800d576 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2200      	movs	r2, #0
 800d568:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	2200      	movs	r2, #0
 800d56e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2200      	movs	r2, #0
 800d574:	609a      	str	r2, [r3, #8]
}
 800d576:	bf00      	nop
 800d578:	3724      	adds	r7, #36	@ 0x24
 800d57a:	46bd      	mov	sp, r7
 800d57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d580:	4770      	bx	lr
 800d582:	bf00      	nop
 800d584:	58024400 	.word	0x58024400
 800d588:	03d09000 	.word	0x03d09000
 800d58c:	46000000 	.word	0x46000000
 800d590:	4c742400 	.word	0x4c742400
 800d594:	4a742400 	.word	0x4a742400
 800d598:	4af42400 	.word	0x4af42400

0800d59c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d59c:	b480      	push	{r7}
 800d59e:	b089      	sub	sp, #36	@ 0x24
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d5a4:	4ba1      	ldr	r3, [pc, #644]	@ (800d82c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5a8:	f003 0303 	and.w	r3, r3, #3
 800d5ac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d5ae:	4b9f      	ldr	r3, [pc, #636]	@ (800d82c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5b2:	0d1b      	lsrs	r3, r3, #20
 800d5b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d5b8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d5ba:	4b9c      	ldr	r3, [pc, #624]	@ (800d82c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5be:	0a1b      	lsrs	r3, r3, #8
 800d5c0:	f003 0301 	and.w	r3, r3, #1
 800d5c4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d5c6:	4b99      	ldr	r3, [pc, #612]	@ (800d82c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d5ca:	08db      	lsrs	r3, r3, #3
 800d5cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d5d0:	693a      	ldr	r2, [r7, #16]
 800d5d2:	fb02 f303 	mul.w	r3, r2, r3
 800d5d6:	ee07 3a90 	vmov	s15, r3
 800d5da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	f000 8111 	beq.w	800d80c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d5ea:	69bb      	ldr	r3, [r7, #24]
 800d5ec:	2b02      	cmp	r3, #2
 800d5ee:	f000 8083 	beq.w	800d6f8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d5f2:	69bb      	ldr	r3, [r7, #24]
 800d5f4:	2b02      	cmp	r3, #2
 800d5f6:	f200 80a1 	bhi.w	800d73c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d5fa:	69bb      	ldr	r3, [r7, #24]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d003      	beq.n	800d608 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d600:	69bb      	ldr	r3, [r7, #24]
 800d602:	2b01      	cmp	r3, #1
 800d604:	d056      	beq.n	800d6b4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d606:	e099      	b.n	800d73c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d608:	4b88      	ldr	r3, [pc, #544]	@ (800d82c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	f003 0320 	and.w	r3, r3, #32
 800d610:	2b00      	cmp	r3, #0
 800d612:	d02d      	beq.n	800d670 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d614:	4b85      	ldr	r3, [pc, #532]	@ (800d82c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	08db      	lsrs	r3, r3, #3
 800d61a:	f003 0303 	and.w	r3, r3, #3
 800d61e:	4a84      	ldr	r2, [pc, #528]	@ (800d830 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d620:	fa22 f303 	lsr.w	r3, r2, r3
 800d624:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d626:	68bb      	ldr	r3, [r7, #8]
 800d628:	ee07 3a90 	vmov	s15, r3
 800d62c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d630:	697b      	ldr	r3, [r7, #20]
 800d632:	ee07 3a90 	vmov	s15, r3
 800d636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d63a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d63e:	4b7b      	ldr	r3, [pc, #492]	@ (800d82c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d646:	ee07 3a90 	vmov	s15, r3
 800d64a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d64e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d652:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800d834 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d65a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d65e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d66a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d66e:	e087      	b.n	800d780 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d670:	697b      	ldr	r3, [r7, #20]
 800d672:	ee07 3a90 	vmov	s15, r3
 800d676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d67a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800d838 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d67e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d682:	4b6a      	ldr	r3, [pc, #424]	@ (800d82c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d68a:	ee07 3a90 	vmov	s15, r3
 800d68e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d692:	ed97 6a03 	vldr	s12, [r7, #12]
 800d696:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800d834 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d69a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d69e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d6a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d6b2:	e065      	b.n	800d780 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d6b4:	697b      	ldr	r3, [r7, #20]
 800d6b6:	ee07 3a90 	vmov	s15, r3
 800d6ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6be:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800d83c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d6c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6c6:	4b59      	ldr	r3, [pc, #356]	@ (800d82c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d6c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6ce:	ee07 3a90 	vmov	s15, r3
 800d6d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6da:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800d834 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d6de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d6ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d6f6:	e043      	b.n	800d780 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d6f8:	697b      	ldr	r3, [r7, #20]
 800d6fa:	ee07 3a90 	vmov	s15, r3
 800d6fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d702:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800d840 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d70a:	4b48      	ldr	r3, [pc, #288]	@ (800d82c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d70c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d70e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d712:	ee07 3a90 	vmov	s15, r3
 800d716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d71a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d71e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800d834 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d72a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d72e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d732:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d736:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d73a:	e021      	b.n	800d780 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d73c:	697b      	ldr	r3, [r7, #20]
 800d73e:	ee07 3a90 	vmov	s15, r3
 800d742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d746:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800d83c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d74a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d74e:	4b37      	ldr	r3, [pc, #220]	@ (800d82c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d756:	ee07 3a90 	vmov	s15, r3
 800d75a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d75e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d762:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800d834 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d76a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d76e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d77a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d77e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d780:	4b2a      	ldr	r3, [pc, #168]	@ (800d82c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d784:	0a5b      	lsrs	r3, r3, #9
 800d786:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d78a:	ee07 3a90 	vmov	s15, r3
 800d78e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d792:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d796:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d79a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d79e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7a6:	ee17 2a90 	vmov	r2, s15
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d7ae:	4b1f      	ldr	r3, [pc, #124]	@ (800d82c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d7b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7b2:	0c1b      	lsrs	r3, r3, #16
 800d7b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d7b8:	ee07 3a90 	vmov	s15, r3
 800d7bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d7c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d7c8:	edd7 6a07 	vldr	s13, [r7, #28]
 800d7cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7d4:	ee17 2a90 	vmov	r2, s15
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d7dc:	4b13      	ldr	r3, [pc, #76]	@ (800d82c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d7de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7e0:	0e1b      	lsrs	r3, r3, #24
 800d7e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d7e6:	ee07 3a90 	vmov	s15, r3
 800d7ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d7f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d7f6:	edd7 6a07 	vldr	s13, [r7, #28]
 800d7fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d802:	ee17 2a90 	vmov	r2, s15
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d80a:	e008      	b.n	800d81e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2200      	movs	r2, #0
 800d810:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2200      	movs	r2, #0
 800d816:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2200      	movs	r2, #0
 800d81c:	609a      	str	r2, [r3, #8]
}
 800d81e:	bf00      	nop
 800d820:	3724      	adds	r7, #36	@ 0x24
 800d822:	46bd      	mov	sp, r7
 800d824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d828:	4770      	bx	lr
 800d82a:	bf00      	nop
 800d82c:	58024400 	.word	0x58024400
 800d830:	03d09000 	.word	0x03d09000
 800d834:	46000000 	.word	0x46000000
 800d838:	4c742400 	.word	0x4c742400
 800d83c:	4a742400 	.word	0x4a742400
 800d840:	4af42400 	.word	0x4af42400

0800d844 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d844:	b480      	push	{r7}
 800d846:	b089      	sub	sp, #36	@ 0x24
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d84c:	4ba0      	ldr	r3, [pc, #640]	@ (800dad0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d84e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d850:	f003 0303 	and.w	r3, r3, #3
 800d854:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d856:	4b9e      	ldr	r3, [pc, #632]	@ (800dad0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d85a:	091b      	lsrs	r3, r3, #4
 800d85c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d860:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d862:	4b9b      	ldr	r3, [pc, #620]	@ (800dad0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d866:	f003 0301 	and.w	r3, r3, #1
 800d86a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d86c:	4b98      	ldr	r3, [pc, #608]	@ (800dad0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d86e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d870:	08db      	lsrs	r3, r3, #3
 800d872:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d876:	693a      	ldr	r2, [r7, #16]
 800d878:	fb02 f303 	mul.w	r3, r2, r3
 800d87c:	ee07 3a90 	vmov	s15, r3
 800d880:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d884:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d888:	697b      	ldr	r3, [r7, #20]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	f000 8111 	beq.w	800dab2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d890:	69bb      	ldr	r3, [r7, #24]
 800d892:	2b02      	cmp	r3, #2
 800d894:	f000 8083 	beq.w	800d99e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d898:	69bb      	ldr	r3, [r7, #24]
 800d89a:	2b02      	cmp	r3, #2
 800d89c:	f200 80a1 	bhi.w	800d9e2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d8a0:	69bb      	ldr	r3, [r7, #24]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d003      	beq.n	800d8ae <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d8a6:	69bb      	ldr	r3, [r7, #24]
 800d8a8:	2b01      	cmp	r3, #1
 800d8aa:	d056      	beq.n	800d95a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d8ac:	e099      	b.n	800d9e2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d8ae:	4b88      	ldr	r3, [pc, #544]	@ (800dad0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	f003 0320 	and.w	r3, r3, #32
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d02d      	beq.n	800d916 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d8ba:	4b85      	ldr	r3, [pc, #532]	@ (800dad0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	08db      	lsrs	r3, r3, #3
 800d8c0:	f003 0303 	and.w	r3, r3, #3
 800d8c4:	4a83      	ldr	r2, [pc, #524]	@ (800dad4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d8c6:	fa22 f303 	lsr.w	r3, r2, r3
 800d8ca:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d8cc:	68bb      	ldr	r3, [r7, #8]
 800d8ce:	ee07 3a90 	vmov	s15, r3
 800d8d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d8d6:	697b      	ldr	r3, [r7, #20]
 800d8d8:	ee07 3a90 	vmov	s15, r3
 800d8dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d8e4:	4b7a      	ldr	r3, [pc, #488]	@ (800dad0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d8e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d8e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8ec:	ee07 3a90 	vmov	s15, r3
 800d8f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d8f4:	ed97 6a03 	vldr	s12, [r7, #12]
 800d8f8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800dad8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d8fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d900:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d904:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d908:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d90c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d910:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d914:	e087      	b.n	800da26 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d916:	697b      	ldr	r3, [r7, #20]
 800d918:	ee07 3a90 	vmov	s15, r3
 800d91c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d920:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800dadc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d924:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d928:	4b69      	ldr	r3, [pc, #420]	@ (800dad0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d92a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d92c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d930:	ee07 3a90 	vmov	s15, r3
 800d934:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d938:	ed97 6a03 	vldr	s12, [r7, #12]
 800d93c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800dad8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d940:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d944:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d948:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d94c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d950:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d954:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d958:	e065      	b.n	800da26 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d95a:	697b      	ldr	r3, [r7, #20]
 800d95c:	ee07 3a90 	vmov	s15, r3
 800d960:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d964:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800dae0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d968:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d96c:	4b58      	ldr	r3, [pc, #352]	@ (800dad0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d96e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d974:	ee07 3a90 	vmov	s15, r3
 800d978:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d97c:	ed97 6a03 	vldr	s12, [r7, #12]
 800d980:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800dad8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d984:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d988:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d98c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d990:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d994:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d998:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d99c:	e043      	b.n	800da26 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d99e:	697b      	ldr	r3, [r7, #20]
 800d9a0:	ee07 3a90 	vmov	s15, r3
 800d9a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9a8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800dae4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d9ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9b0:	4b47      	ldr	r3, [pc, #284]	@ (800dad0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d9b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9b8:	ee07 3a90 	vmov	s15, r3
 800d9bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9c0:	ed97 6a03 	vldr	s12, [r7, #12]
 800d9c4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800dad8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d9c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d9d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d9e0:	e021      	b.n	800da26 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d9e2:	697b      	ldr	r3, [r7, #20]
 800d9e4:	ee07 3a90 	vmov	s15, r3
 800d9e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9ec:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800dadc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d9f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9f4:	4b36      	ldr	r3, [pc, #216]	@ (800dad0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d9f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9fc:	ee07 3a90 	vmov	s15, r3
 800da00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da04:	ed97 6a03 	vldr	s12, [r7, #12]
 800da08:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800dad8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800da0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da14:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800da18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da20:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da24:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800da26:	4b2a      	ldr	r3, [pc, #168]	@ (800dad0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da2a:	0a5b      	lsrs	r3, r3, #9
 800da2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800da30:	ee07 3a90 	vmov	s15, r3
 800da34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800da3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800da40:	edd7 6a07 	vldr	s13, [r7, #28]
 800da44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da4c:	ee17 2a90 	vmov	r2, s15
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800da54:	4b1e      	ldr	r3, [pc, #120]	@ (800dad0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da58:	0c1b      	lsrs	r3, r3, #16
 800da5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800da5e:	ee07 3a90 	vmov	s15, r3
 800da62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800da6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800da6e:	edd7 6a07 	vldr	s13, [r7, #28]
 800da72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da7a:	ee17 2a90 	vmov	r2, s15
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800da82:	4b13      	ldr	r3, [pc, #76]	@ (800dad0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da86:	0e1b      	lsrs	r3, r3, #24
 800da88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800da8c:	ee07 3a90 	vmov	s15, r3
 800da90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da94:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800da98:	ee37 7a87 	vadd.f32	s14, s15, s14
 800da9c:	edd7 6a07 	vldr	s13, [r7, #28]
 800daa0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800daa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800daa8:	ee17 2a90 	vmov	r2, s15
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800dab0:	e008      	b.n	800dac4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	2200      	movs	r2, #0
 800dab6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2200      	movs	r2, #0
 800dabc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	2200      	movs	r2, #0
 800dac2:	609a      	str	r2, [r3, #8]
}
 800dac4:	bf00      	nop
 800dac6:	3724      	adds	r7, #36	@ 0x24
 800dac8:	46bd      	mov	sp, r7
 800daca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dace:	4770      	bx	lr
 800dad0:	58024400 	.word	0x58024400
 800dad4:	03d09000 	.word	0x03d09000
 800dad8:	46000000 	.word	0x46000000
 800dadc:	4c742400 	.word	0x4c742400
 800dae0:	4a742400 	.word	0x4a742400
 800dae4:	4af42400 	.word	0x4af42400

0800dae8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b084      	sub	sp, #16
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
 800daf0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800daf2:	2300      	movs	r3, #0
 800daf4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800daf6:	4b53      	ldr	r3, [pc, #332]	@ (800dc44 <RCCEx_PLL2_Config+0x15c>)
 800daf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dafa:	f003 0303 	and.w	r3, r3, #3
 800dafe:	2b03      	cmp	r3, #3
 800db00:	d101      	bne.n	800db06 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800db02:	2301      	movs	r3, #1
 800db04:	e099      	b.n	800dc3a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800db06:	4b4f      	ldr	r3, [pc, #316]	@ (800dc44 <RCCEx_PLL2_Config+0x15c>)
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	4a4e      	ldr	r2, [pc, #312]	@ (800dc44 <RCCEx_PLL2_Config+0x15c>)
 800db0c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800db10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800db12:	f7f6 fb51 	bl	80041b8 <HAL_GetTick>
 800db16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800db18:	e008      	b.n	800db2c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800db1a:	f7f6 fb4d 	bl	80041b8 <HAL_GetTick>
 800db1e:	4602      	mov	r2, r0
 800db20:	68bb      	ldr	r3, [r7, #8]
 800db22:	1ad3      	subs	r3, r2, r3
 800db24:	2b02      	cmp	r3, #2
 800db26:	d901      	bls.n	800db2c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800db28:	2303      	movs	r3, #3
 800db2a:	e086      	b.n	800dc3a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800db2c:	4b45      	ldr	r3, [pc, #276]	@ (800dc44 <RCCEx_PLL2_Config+0x15c>)
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800db34:	2b00      	cmp	r3, #0
 800db36:	d1f0      	bne.n	800db1a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800db38:	4b42      	ldr	r3, [pc, #264]	@ (800dc44 <RCCEx_PLL2_Config+0x15c>)
 800db3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db3c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	031b      	lsls	r3, r3, #12
 800db46:	493f      	ldr	r1, [pc, #252]	@ (800dc44 <RCCEx_PLL2_Config+0x15c>)
 800db48:	4313      	orrs	r3, r2
 800db4a:	628b      	str	r3, [r1, #40]	@ 0x28
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	685b      	ldr	r3, [r3, #4]
 800db50:	3b01      	subs	r3, #1
 800db52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	689b      	ldr	r3, [r3, #8]
 800db5a:	3b01      	subs	r3, #1
 800db5c:	025b      	lsls	r3, r3, #9
 800db5e:	b29b      	uxth	r3, r3
 800db60:	431a      	orrs	r2, r3
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	68db      	ldr	r3, [r3, #12]
 800db66:	3b01      	subs	r3, #1
 800db68:	041b      	lsls	r3, r3, #16
 800db6a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800db6e:	431a      	orrs	r2, r3
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	691b      	ldr	r3, [r3, #16]
 800db74:	3b01      	subs	r3, #1
 800db76:	061b      	lsls	r3, r3, #24
 800db78:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800db7c:	4931      	ldr	r1, [pc, #196]	@ (800dc44 <RCCEx_PLL2_Config+0x15c>)
 800db7e:	4313      	orrs	r3, r2
 800db80:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800db82:	4b30      	ldr	r3, [pc, #192]	@ (800dc44 <RCCEx_PLL2_Config+0x15c>)
 800db84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db86:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	695b      	ldr	r3, [r3, #20]
 800db8e:	492d      	ldr	r1, [pc, #180]	@ (800dc44 <RCCEx_PLL2_Config+0x15c>)
 800db90:	4313      	orrs	r3, r2
 800db92:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800db94:	4b2b      	ldr	r3, [pc, #172]	@ (800dc44 <RCCEx_PLL2_Config+0x15c>)
 800db96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db98:	f023 0220 	bic.w	r2, r3, #32
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	699b      	ldr	r3, [r3, #24]
 800dba0:	4928      	ldr	r1, [pc, #160]	@ (800dc44 <RCCEx_PLL2_Config+0x15c>)
 800dba2:	4313      	orrs	r3, r2
 800dba4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800dba6:	4b27      	ldr	r3, [pc, #156]	@ (800dc44 <RCCEx_PLL2_Config+0x15c>)
 800dba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbaa:	4a26      	ldr	r2, [pc, #152]	@ (800dc44 <RCCEx_PLL2_Config+0x15c>)
 800dbac:	f023 0310 	bic.w	r3, r3, #16
 800dbb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800dbb2:	4b24      	ldr	r3, [pc, #144]	@ (800dc44 <RCCEx_PLL2_Config+0x15c>)
 800dbb4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dbb6:	4b24      	ldr	r3, [pc, #144]	@ (800dc48 <RCCEx_PLL2_Config+0x160>)
 800dbb8:	4013      	ands	r3, r2
 800dbba:	687a      	ldr	r2, [r7, #4]
 800dbbc:	69d2      	ldr	r2, [r2, #28]
 800dbbe:	00d2      	lsls	r2, r2, #3
 800dbc0:	4920      	ldr	r1, [pc, #128]	@ (800dc44 <RCCEx_PLL2_Config+0x15c>)
 800dbc2:	4313      	orrs	r3, r2
 800dbc4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800dbc6:	4b1f      	ldr	r3, [pc, #124]	@ (800dc44 <RCCEx_PLL2_Config+0x15c>)
 800dbc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbca:	4a1e      	ldr	r2, [pc, #120]	@ (800dc44 <RCCEx_PLL2_Config+0x15c>)
 800dbcc:	f043 0310 	orr.w	r3, r3, #16
 800dbd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800dbd2:	683b      	ldr	r3, [r7, #0]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d106      	bne.n	800dbe6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800dbd8:	4b1a      	ldr	r3, [pc, #104]	@ (800dc44 <RCCEx_PLL2_Config+0x15c>)
 800dbda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbdc:	4a19      	ldr	r2, [pc, #100]	@ (800dc44 <RCCEx_PLL2_Config+0x15c>)
 800dbde:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800dbe2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dbe4:	e00f      	b.n	800dc06 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	2b01      	cmp	r3, #1
 800dbea:	d106      	bne.n	800dbfa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800dbec:	4b15      	ldr	r3, [pc, #84]	@ (800dc44 <RCCEx_PLL2_Config+0x15c>)
 800dbee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbf0:	4a14      	ldr	r2, [pc, #80]	@ (800dc44 <RCCEx_PLL2_Config+0x15c>)
 800dbf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dbf6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dbf8:	e005      	b.n	800dc06 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800dbfa:	4b12      	ldr	r3, [pc, #72]	@ (800dc44 <RCCEx_PLL2_Config+0x15c>)
 800dbfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbfe:	4a11      	ldr	r2, [pc, #68]	@ (800dc44 <RCCEx_PLL2_Config+0x15c>)
 800dc00:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800dc04:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800dc06:	4b0f      	ldr	r3, [pc, #60]	@ (800dc44 <RCCEx_PLL2_Config+0x15c>)
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	4a0e      	ldr	r2, [pc, #56]	@ (800dc44 <RCCEx_PLL2_Config+0x15c>)
 800dc0c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800dc10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dc12:	f7f6 fad1 	bl	80041b8 <HAL_GetTick>
 800dc16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dc18:	e008      	b.n	800dc2c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dc1a:	f7f6 facd 	bl	80041b8 <HAL_GetTick>
 800dc1e:	4602      	mov	r2, r0
 800dc20:	68bb      	ldr	r3, [r7, #8]
 800dc22:	1ad3      	subs	r3, r2, r3
 800dc24:	2b02      	cmp	r3, #2
 800dc26:	d901      	bls.n	800dc2c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800dc28:	2303      	movs	r3, #3
 800dc2a:	e006      	b.n	800dc3a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dc2c:	4b05      	ldr	r3, [pc, #20]	@ (800dc44 <RCCEx_PLL2_Config+0x15c>)
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d0f0      	beq.n	800dc1a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800dc38:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	3710      	adds	r7, #16
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bd80      	pop	{r7, pc}
 800dc42:	bf00      	nop
 800dc44:	58024400 	.word	0x58024400
 800dc48:	ffff0007 	.word	0xffff0007

0800dc4c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b084      	sub	sp, #16
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
 800dc54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dc56:	2300      	movs	r3, #0
 800dc58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dc5a:	4b53      	ldr	r3, [pc, #332]	@ (800dda8 <RCCEx_PLL3_Config+0x15c>)
 800dc5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc5e:	f003 0303 	and.w	r3, r3, #3
 800dc62:	2b03      	cmp	r3, #3
 800dc64:	d101      	bne.n	800dc6a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800dc66:	2301      	movs	r3, #1
 800dc68:	e099      	b.n	800dd9e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800dc6a:	4b4f      	ldr	r3, [pc, #316]	@ (800dda8 <RCCEx_PLL3_Config+0x15c>)
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	4a4e      	ldr	r2, [pc, #312]	@ (800dda8 <RCCEx_PLL3_Config+0x15c>)
 800dc70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dc74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dc76:	f7f6 fa9f 	bl	80041b8 <HAL_GetTick>
 800dc7a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dc7c:	e008      	b.n	800dc90 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dc7e:	f7f6 fa9b 	bl	80041b8 <HAL_GetTick>
 800dc82:	4602      	mov	r2, r0
 800dc84:	68bb      	ldr	r3, [r7, #8]
 800dc86:	1ad3      	subs	r3, r2, r3
 800dc88:	2b02      	cmp	r3, #2
 800dc8a:	d901      	bls.n	800dc90 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800dc8c:	2303      	movs	r3, #3
 800dc8e:	e086      	b.n	800dd9e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dc90:	4b45      	ldr	r3, [pc, #276]	@ (800dda8 <RCCEx_PLL3_Config+0x15c>)
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d1f0      	bne.n	800dc7e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800dc9c:	4b42      	ldr	r3, [pc, #264]	@ (800dda8 <RCCEx_PLL3_Config+0x15c>)
 800dc9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dca0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	051b      	lsls	r3, r3, #20
 800dcaa:	493f      	ldr	r1, [pc, #252]	@ (800dda8 <RCCEx_PLL3_Config+0x15c>)
 800dcac:	4313      	orrs	r3, r2
 800dcae:	628b      	str	r3, [r1, #40]	@ 0x28
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	685b      	ldr	r3, [r3, #4]
 800dcb4:	3b01      	subs	r3, #1
 800dcb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	689b      	ldr	r3, [r3, #8]
 800dcbe:	3b01      	subs	r3, #1
 800dcc0:	025b      	lsls	r3, r3, #9
 800dcc2:	b29b      	uxth	r3, r3
 800dcc4:	431a      	orrs	r2, r3
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	68db      	ldr	r3, [r3, #12]
 800dcca:	3b01      	subs	r3, #1
 800dccc:	041b      	lsls	r3, r3, #16
 800dcce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800dcd2:	431a      	orrs	r2, r3
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	691b      	ldr	r3, [r3, #16]
 800dcd8:	3b01      	subs	r3, #1
 800dcda:	061b      	lsls	r3, r3, #24
 800dcdc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800dce0:	4931      	ldr	r1, [pc, #196]	@ (800dda8 <RCCEx_PLL3_Config+0x15c>)
 800dce2:	4313      	orrs	r3, r2
 800dce4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800dce6:	4b30      	ldr	r3, [pc, #192]	@ (800dda8 <RCCEx_PLL3_Config+0x15c>)
 800dce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	695b      	ldr	r3, [r3, #20]
 800dcf2:	492d      	ldr	r1, [pc, #180]	@ (800dda8 <RCCEx_PLL3_Config+0x15c>)
 800dcf4:	4313      	orrs	r3, r2
 800dcf6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800dcf8:	4b2b      	ldr	r3, [pc, #172]	@ (800dda8 <RCCEx_PLL3_Config+0x15c>)
 800dcfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcfc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	699b      	ldr	r3, [r3, #24]
 800dd04:	4928      	ldr	r1, [pc, #160]	@ (800dda8 <RCCEx_PLL3_Config+0x15c>)
 800dd06:	4313      	orrs	r3, r2
 800dd08:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800dd0a:	4b27      	ldr	r3, [pc, #156]	@ (800dda8 <RCCEx_PLL3_Config+0x15c>)
 800dd0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd0e:	4a26      	ldr	r2, [pc, #152]	@ (800dda8 <RCCEx_PLL3_Config+0x15c>)
 800dd10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800dd14:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800dd16:	4b24      	ldr	r3, [pc, #144]	@ (800dda8 <RCCEx_PLL3_Config+0x15c>)
 800dd18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dd1a:	4b24      	ldr	r3, [pc, #144]	@ (800ddac <RCCEx_PLL3_Config+0x160>)
 800dd1c:	4013      	ands	r3, r2
 800dd1e:	687a      	ldr	r2, [r7, #4]
 800dd20:	69d2      	ldr	r2, [r2, #28]
 800dd22:	00d2      	lsls	r2, r2, #3
 800dd24:	4920      	ldr	r1, [pc, #128]	@ (800dda8 <RCCEx_PLL3_Config+0x15c>)
 800dd26:	4313      	orrs	r3, r2
 800dd28:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800dd2a:	4b1f      	ldr	r3, [pc, #124]	@ (800dda8 <RCCEx_PLL3_Config+0x15c>)
 800dd2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd2e:	4a1e      	ldr	r2, [pc, #120]	@ (800dda8 <RCCEx_PLL3_Config+0x15c>)
 800dd30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dd34:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800dd36:	683b      	ldr	r3, [r7, #0]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d106      	bne.n	800dd4a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800dd3c:	4b1a      	ldr	r3, [pc, #104]	@ (800dda8 <RCCEx_PLL3_Config+0x15c>)
 800dd3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd40:	4a19      	ldr	r2, [pc, #100]	@ (800dda8 <RCCEx_PLL3_Config+0x15c>)
 800dd42:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800dd46:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dd48:	e00f      	b.n	800dd6a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	2b01      	cmp	r3, #1
 800dd4e:	d106      	bne.n	800dd5e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800dd50:	4b15      	ldr	r3, [pc, #84]	@ (800dda8 <RCCEx_PLL3_Config+0x15c>)
 800dd52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd54:	4a14      	ldr	r2, [pc, #80]	@ (800dda8 <RCCEx_PLL3_Config+0x15c>)
 800dd56:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800dd5a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dd5c:	e005      	b.n	800dd6a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800dd5e:	4b12      	ldr	r3, [pc, #72]	@ (800dda8 <RCCEx_PLL3_Config+0x15c>)
 800dd60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd62:	4a11      	ldr	r2, [pc, #68]	@ (800dda8 <RCCEx_PLL3_Config+0x15c>)
 800dd64:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800dd68:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800dd6a:	4b0f      	ldr	r3, [pc, #60]	@ (800dda8 <RCCEx_PLL3_Config+0x15c>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	4a0e      	ldr	r2, [pc, #56]	@ (800dda8 <RCCEx_PLL3_Config+0x15c>)
 800dd70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dd74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dd76:	f7f6 fa1f 	bl	80041b8 <HAL_GetTick>
 800dd7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dd7c:	e008      	b.n	800dd90 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dd7e:	f7f6 fa1b 	bl	80041b8 <HAL_GetTick>
 800dd82:	4602      	mov	r2, r0
 800dd84:	68bb      	ldr	r3, [r7, #8]
 800dd86:	1ad3      	subs	r3, r2, r3
 800dd88:	2b02      	cmp	r3, #2
 800dd8a:	d901      	bls.n	800dd90 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800dd8c:	2303      	movs	r3, #3
 800dd8e:	e006      	b.n	800dd9e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800dd90:	4b05      	ldr	r3, [pc, #20]	@ (800dda8 <RCCEx_PLL3_Config+0x15c>)
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d0f0      	beq.n	800dd7e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800dd9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd9e:	4618      	mov	r0, r3
 800dda0:	3710      	adds	r7, #16
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}
 800dda6:	bf00      	nop
 800dda8:	58024400 	.word	0x58024400
 800ddac:	ffff0007 	.word	0xffff0007

0800ddb0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b082      	sub	sp, #8
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d101      	bne.n	800ddc2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ddbe:	2301      	movs	r3, #1
 800ddc0:	e049      	b.n	800de56 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ddc8:	b2db      	uxtb	r3, r3
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d106      	bne.n	800dddc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	2200      	movs	r2, #0
 800ddd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ddd6:	6878      	ldr	r0, [r7, #4]
 800ddd8:	f7f5 fed4 	bl	8003b84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	2202      	movs	r2, #2
 800dde0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681a      	ldr	r2, [r3, #0]
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	3304      	adds	r3, #4
 800ddec:	4619      	mov	r1, r3
 800ddee:	4610      	mov	r0, r2
 800ddf0:	f000 fbf0 	bl	800e5d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2201      	movs	r2, #1
 800ddf8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2201      	movs	r2, #1
 800de00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	2201      	movs	r2, #1
 800de08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	2201      	movs	r2, #1
 800de10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2201      	movs	r2, #1
 800de18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2201      	movs	r2, #1
 800de20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	2201      	movs	r2, #1
 800de28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	2201      	movs	r2, #1
 800de30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	2201      	movs	r2, #1
 800de38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2201      	movs	r2, #1
 800de40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2201      	movs	r2, #1
 800de48:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2201      	movs	r2, #1
 800de50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800de54:	2300      	movs	r3, #0
}
 800de56:	4618      	mov	r0, r3
 800de58:	3708      	adds	r7, #8
 800de5a:	46bd      	mov	sp, r7
 800de5c:	bd80      	pop	{r7, pc}
	...

0800de60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b084      	sub	sp, #16
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
 800de68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800de6a:	683b      	ldr	r3, [r7, #0]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d109      	bne.n	800de84 <HAL_TIM_PWM_Start+0x24>
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800de76:	b2db      	uxtb	r3, r3
 800de78:	2b01      	cmp	r3, #1
 800de7a:	bf14      	ite	ne
 800de7c:	2301      	movne	r3, #1
 800de7e:	2300      	moveq	r3, #0
 800de80:	b2db      	uxtb	r3, r3
 800de82:	e03c      	b.n	800defe <HAL_TIM_PWM_Start+0x9e>
 800de84:	683b      	ldr	r3, [r7, #0]
 800de86:	2b04      	cmp	r3, #4
 800de88:	d109      	bne.n	800de9e <HAL_TIM_PWM_Start+0x3e>
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800de90:	b2db      	uxtb	r3, r3
 800de92:	2b01      	cmp	r3, #1
 800de94:	bf14      	ite	ne
 800de96:	2301      	movne	r3, #1
 800de98:	2300      	moveq	r3, #0
 800de9a:	b2db      	uxtb	r3, r3
 800de9c:	e02f      	b.n	800defe <HAL_TIM_PWM_Start+0x9e>
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	2b08      	cmp	r3, #8
 800dea2:	d109      	bne.n	800deb8 <HAL_TIM_PWM_Start+0x58>
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800deaa:	b2db      	uxtb	r3, r3
 800deac:	2b01      	cmp	r3, #1
 800deae:	bf14      	ite	ne
 800deb0:	2301      	movne	r3, #1
 800deb2:	2300      	moveq	r3, #0
 800deb4:	b2db      	uxtb	r3, r3
 800deb6:	e022      	b.n	800defe <HAL_TIM_PWM_Start+0x9e>
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	2b0c      	cmp	r3, #12
 800debc:	d109      	bne.n	800ded2 <HAL_TIM_PWM_Start+0x72>
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800dec4:	b2db      	uxtb	r3, r3
 800dec6:	2b01      	cmp	r3, #1
 800dec8:	bf14      	ite	ne
 800deca:	2301      	movne	r3, #1
 800decc:	2300      	moveq	r3, #0
 800dece:	b2db      	uxtb	r3, r3
 800ded0:	e015      	b.n	800defe <HAL_TIM_PWM_Start+0x9e>
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	2b10      	cmp	r3, #16
 800ded6:	d109      	bne.n	800deec <HAL_TIM_PWM_Start+0x8c>
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800dede:	b2db      	uxtb	r3, r3
 800dee0:	2b01      	cmp	r3, #1
 800dee2:	bf14      	ite	ne
 800dee4:	2301      	movne	r3, #1
 800dee6:	2300      	moveq	r3, #0
 800dee8:	b2db      	uxtb	r3, r3
 800deea:	e008      	b.n	800defe <HAL_TIM_PWM_Start+0x9e>
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800def2:	b2db      	uxtb	r3, r3
 800def4:	2b01      	cmp	r3, #1
 800def6:	bf14      	ite	ne
 800def8:	2301      	movne	r3, #1
 800defa:	2300      	moveq	r3, #0
 800defc:	b2db      	uxtb	r3, r3
 800defe:	2b00      	cmp	r3, #0
 800df00:	d001      	beq.n	800df06 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800df02:	2301      	movs	r3, #1
 800df04:	e0ab      	b.n	800e05e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800df06:	683b      	ldr	r3, [r7, #0]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d104      	bne.n	800df16 <HAL_TIM_PWM_Start+0xb6>
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	2202      	movs	r2, #2
 800df10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800df14:	e023      	b.n	800df5e <HAL_TIM_PWM_Start+0xfe>
 800df16:	683b      	ldr	r3, [r7, #0]
 800df18:	2b04      	cmp	r3, #4
 800df1a:	d104      	bne.n	800df26 <HAL_TIM_PWM_Start+0xc6>
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2202      	movs	r2, #2
 800df20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800df24:	e01b      	b.n	800df5e <HAL_TIM_PWM_Start+0xfe>
 800df26:	683b      	ldr	r3, [r7, #0]
 800df28:	2b08      	cmp	r3, #8
 800df2a:	d104      	bne.n	800df36 <HAL_TIM_PWM_Start+0xd6>
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2202      	movs	r2, #2
 800df30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800df34:	e013      	b.n	800df5e <HAL_TIM_PWM_Start+0xfe>
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	2b0c      	cmp	r3, #12
 800df3a:	d104      	bne.n	800df46 <HAL_TIM_PWM_Start+0xe6>
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	2202      	movs	r2, #2
 800df40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800df44:	e00b      	b.n	800df5e <HAL_TIM_PWM_Start+0xfe>
 800df46:	683b      	ldr	r3, [r7, #0]
 800df48:	2b10      	cmp	r3, #16
 800df4a:	d104      	bne.n	800df56 <HAL_TIM_PWM_Start+0xf6>
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	2202      	movs	r2, #2
 800df50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800df54:	e003      	b.n	800df5e <HAL_TIM_PWM_Start+0xfe>
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	2202      	movs	r2, #2
 800df5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	2201      	movs	r2, #1
 800df64:	6839      	ldr	r1, [r7, #0]
 800df66:	4618      	mov	r0, r3
 800df68:	f000 ffe6 	bl	800ef38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	4a3d      	ldr	r2, [pc, #244]	@ (800e068 <HAL_TIM_PWM_Start+0x208>)
 800df72:	4293      	cmp	r3, r2
 800df74:	d013      	beq.n	800df9e <HAL_TIM_PWM_Start+0x13e>
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	4a3c      	ldr	r2, [pc, #240]	@ (800e06c <HAL_TIM_PWM_Start+0x20c>)
 800df7c:	4293      	cmp	r3, r2
 800df7e:	d00e      	beq.n	800df9e <HAL_TIM_PWM_Start+0x13e>
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	4a3a      	ldr	r2, [pc, #232]	@ (800e070 <HAL_TIM_PWM_Start+0x210>)
 800df86:	4293      	cmp	r3, r2
 800df88:	d009      	beq.n	800df9e <HAL_TIM_PWM_Start+0x13e>
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	4a39      	ldr	r2, [pc, #228]	@ (800e074 <HAL_TIM_PWM_Start+0x214>)
 800df90:	4293      	cmp	r3, r2
 800df92:	d004      	beq.n	800df9e <HAL_TIM_PWM_Start+0x13e>
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	4a37      	ldr	r2, [pc, #220]	@ (800e078 <HAL_TIM_PWM_Start+0x218>)
 800df9a:	4293      	cmp	r3, r2
 800df9c:	d101      	bne.n	800dfa2 <HAL_TIM_PWM_Start+0x142>
 800df9e:	2301      	movs	r3, #1
 800dfa0:	e000      	b.n	800dfa4 <HAL_TIM_PWM_Start+0x144>
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d007      	beq.n	800dfb8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800dfb6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	4a2a      	ldr	r2, [pc, #168]	@ (800e068 <HAL_TIM_PWM_Start+0x208>)
 800dfbe:	4293      	cmp	r3, r2
 800dfc0:	d02c      	beq.n	800e01c <HAL_TIM_PWM_Start+0x1bc>
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dfca:	d027      	beq.n	800e01c <HAL_TIM_PWM_Start+0x1bc>
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	4a2a      	ldr	r2, [pc, #168]	@ (800e07c <HAL_TIM_PWM_Start+0x21c>)
 800dfd2:	4293      	cmp	r3, r2
 800dfd4:	d022      	beq.n	800e01c <HAL_TIM_PWM_Start+0x1bc>
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	4a29      	ldr	r2, [pc, #164]	@ (800e080 <HAL_TIM_PWM_Start+0x220>)
 800dfdc:	4293      	cmp	r3, r2
 800dfde:	d01d      	beq.n	800e01c <HAL_TIM_PWM_Start+0x1bc>
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	4a27      	ldr	r2, [pc, #156]	@ (800e084 <HAL_TIM_PWM_Start+0x224>)
 800dfe6:	4293      	cmp	r3, r2
 800dfe8:	d018      	beq.n	800e01c <HAL_TIM_PWM_Start+0x1bc>
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	4a1f      	ldr	r2, [pc, #124]	@ (800e06c <HAL_TIM_PWM_Start+0x20c>)
 800dff0:	4293      	cmp	r3, r2
 800dff2:	d013      	beq.n	800e01c <HAL_TIM_PWM_Start+0x1bc>
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	4a23      	ldr	r2, [pc, #140]	@ (800e088 <HAL_TIM_PWM_Start+0x228>)
 800dffa:	4293      	cmp	r3, r2
 800dffc:	d00e      	beq.n	800e01c <HAL_TIM_PWM_Start+0x1bc>
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	4a1b      	ldr	r2, [pc, #108]	@ (800e070 <HAL_TIM_PWM_Start+0x210>)
 800e004:	4293      	cmp	r3, r2
 800e006:	d009      	beq.n	800e01c <HAL_TIM_PWM_Start+0x1bc>
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	4a1f      	ldr	r2, [pc, #124]	@ (800e08c <HAL_TIM_PWM_Start+0x22c>)
 800e00e:	4293      	cmp	r3, r2
 800e010:	d004      	beq.n	800e01c <HAL_TIM_PWM_Start+0x1bc>
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	4a1e      	ldr	r2, [pc, #120]	@ (800e090 <HAL_TIM_PWM_Start+0x230>)
 800e018:	4293      	cmp	r3, r2
 800e01a:	d115      	bne.n	800e048 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	689a      	ldr	r2, [r3, #8]
 800e022:	4b1c      	ldr	r3, [pc, #112]	@ (800e094 <HAL_TIM_PWM_Start+0x234>)
 800e024:	4013      	ands	r3, r2
 800e026:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	2b06      	cmp	r3, #6
 800e02c:	d015      	beq.n	800e05a <HAL_TIM_PWM_Start+0x1fa>
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e034:	d011      	beq.n	800e05a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	681a      	ldr	r2, [r3, #0]
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	f042 0201 	orr.w	r2, r2, #1
 800e044:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e046:	e008      	b.n	800e05a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	681a      	ldr	r2, [r3, #0]
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	f042 0201 	orr.w	r2, r2, #1
 800e056:	601a      	str	r2, [r3, #0]
 800e058:	e000      	b.n	800e05c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e05a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e05c:	2300      	movs	r3, #0
}
 800e05e:	4618      	mov	r0, r3
 800e060:	3710      	adds	r7, #16
 800e062:	46bd      	mov	sp, r7
 800e064:	bd80      	pop	{r7, pc}
 800e066:	bf00      	nop
 800e068:	40010000 	.word	0x40010000
 800e06c:	40010400 	.word	0x40010400
 800e070:	40014000 	.word	0x40014000
 800e074:	40014400 	.word	0x40014400
 800e078:	40014800 	.word	0x40014800
 800e07c:	40000400 	.word	0x40000400
 800e080:	40000800 	.word	0x40000800
 800e084:	40000c00 	.word	0x40000c00
 800e088:	40001800 	.word	0x40001800
 800e08c:	4000e000 	.word	0x4000e000
 800e090:	4000e400 	.word	0x4000e400
 800e094:	00010007 	.word	0x00010007

0800e098 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b082      	sub	sp, #8
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
 800e0a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	6839      	ldr	r1, [r7, #0]
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	f000 ff44 	bl	800ef38 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	4a3e      	ldr	r2, [pc, #248]	@ (800e1b0 <HAL_TIM_PWM_Stop+0x118>)
 800e0b6:	4293      	cmp	r3, r2
 800e0b8:	d013      	beq.n	800e0e2 <HAL_TIM_PWM_Stop+0x4a>
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	4a3d      	ldr	r2, [pc, #244]	@ (800e1b4 <HAL_TIM_PWM_Stop+0x11c>)
 800e0c0:	4293      	cmp	r3, r2
 800e0c2:	d00e      	beq.n	800e0e2 <HAL_TIM_PWM_Stop+0x4a>
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	4a3b      	ldr	r2, [pc, #236]	@ (800e1b8 <HAL_TIM_PWM_Stop+0x120>)
 800e0ca:	4293      	cmp	r3, r2
 800e0cc:	d009      	beq.n	800e0e2 <HAL_TIM_PWM_Stop+0x4a>
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	4a3a      	ldr	r2, [pc, #232]	@ (800e1bc <HAL_TIM_PWM_Stop+0x124>)
 800e0d4:	4293      	cmp	r3, r2
 800e0d6:	d004      	beq.n	800e0e2 <HAL_TIM_PWM_Stop+0x4a>
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	4a38      	ldr	r2, [pc, #224]	@ (800e1c0 <HAL_TIM_PWM_Stop+0x128>)
 800e0de:	4293      	cmp	r3, r2
 800e0e0:	d101      	bne.n	800e0e6 <HAL_TIM_PWM_Stop+0x4e>
 800e0e2:	2301      	movs	r3, #1
 800e0e4:	e000      	b.n	800e0e8 <HAL_TIM_PWM_Stop+0x50>
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d017      	beq.n	800e11c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	6a1a      	ldr	r2, [r3, #32]
 800e0f2:	f241 1311 	movw	r3, #4369	@ 0x1111
 800e0f6:	4013      	ands	r3, r2
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d10f      	bne.n	800e11c <HAL_TIM_PWM_Stop+0x84>
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	6a1a      	ldr	r2, [r3, #32]
 800e102:	f240 4344 	movw	r3, #1092	@ 0x444
 800e106:	4013      	ands	r3, r2
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d107      	bne.n	800e11c <HAL_TIM_PWM_Stop+0x84>
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800e11a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	6a1a      	ldr	r2, [r3, #32]
 800e122:	f241 1311 	movw	r3, #4369	@ 0x1111
 800e126:	4013      	ands	r3, r2
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d10f      	bne.n	800e14c <HAL_TIM_PWM_Stop+0xb4>
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	6a1a      	ldr	r2, [r3, #32]
 800e132:	f240 4344 	movw	r3, #1092	@ 0x444
 800e136:	4013      	ands	r3, r2
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d107      	bne.n	800e14c <HAL_TIM_PWM_Stop+0xb4>
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	681a      	ldr	r2, [r3, #0]
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	f022 0201 	bic.w	r2, r2, #1
 800e14a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d104      	bne.n	800e15c <HAL_TIM_PWM_Stop+0xc4>
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	2201      	movs	r2, #1
 800e156:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e15a:	e023      	b.n	800e1a4 <HAL_TIM_PWM_Stop+0x10c>
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	2b04      	cmp	r3, #4
 800e160:	d104      	bne.n	800e16c <HAL_TIM_PWM_Stop+0xd4>
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	2201      	movs	r2, #1
 800e166:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e16a:	e01b      	b.n	800e1a4 <HAL_TIM_PWM_Stop+0x10c>
 800e16c:	683b      	ldr	r3, [r7, #0]
 800e16e:	2b08      	cmp	r3, #8
 800e170:	d104      	bne.n	800e17c <HAL_TIM_PWM_Stop+0xe4>
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	2201      	movs	r2, #1
 800e176:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e17a:	e013      	b.n	800e1a4 <HAL_TIM_PWM_Stop+0x10c>
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	2b0c      	cmp	r3, #12
 800e180:	d104      	bne.n	800e18c <HAL_TIM_PWM_Stop+0xf4>
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	2201      	movs	r2, #1
 800e186:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e18a:	e00b      	b.n	800e1a4 <HAL_TIM_PWM_Stop+0x10c>
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	2b10      	cmp	r3, #16
 800e190:	d104      	bne.n	800e19c <HAL_TIM_PWM_Stop+0x104>
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	2201      	movs	r2, #1
 800e196:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e19a:	e003      	b.n	800e1a4 <HAL_TIM_PWM_Stop+0x10c>
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2201      	movs	r2, #1
 800e1a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800e1a4:	2300      	movs	r3, #0
}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	3708      	adds	r7, #8
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bd80      	pop	{r7, pc}
 800e1ae:	bf00      	nop
 800e1b0:	40010000 	.word	0x40010000
 800e1b4:	40010400 	.word	0x40010400
 800e1b8:	40014000 	.word	0x40014000
 800e1bc:	40014400 	.word	0x40014400
 800e1c0:	40014800 	.word	0x40014800

0800e1c4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b082      	sub	sp, #8
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d101      	bne.n	800e1d6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800e1d2:	2301      	movs	r3, #1
 800e1d4:	e049      	b.n	800e26a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e1dc:	b2db      	uxtb	r3, r3
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d106      	bne.n	800e1f0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800e1ea:	6878      	ldr	r0, [r7, #4]
 800e1ec:	f7f5 fd18 	bl	8003c20 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	2202      	movs	r2, #2
 800e1f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681a      	ldr	r2, [r3, #0]
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	3304      	adds	r3, #4
 800e200:	4619      	mov	r1, r3
 800e202:	4610      	mov	r0, r2
 800e204:	f000 f9e6 	bl	800e5d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	2201      	movs	r2, #1
 800e20c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	2201      	movs	r2, #1
 800e214:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2201      	movs	r2, #1
 800e21c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2201      	movs	r2, #1
 800e224:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	2201      	movs	r2, #1
 800e22c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	2201      	movs	r2, #1
 800e234:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	2201      	movs	r2, #1
 800e23c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2201      	movs	r2, #1
 800e244:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	2201      	movs	r2, #1
 800e24c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	2201      	movs	r2, #1
 800e254:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	2201      	movs	r2, #1
 800e25c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2201      	movs	r2, #1
 800e264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e268:	2300      	movs	r3, #0
}
 800e26a:	4618      	mov	r0, r3
 800e26c:	3708      	adds	r7, #8
 800e26e:	46bd      	mov	sp, r7
 800e270:	bd80      	pop	{r7, pc}

0800e272 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800e272:	b580      	push	{r7, lr}
 800e274:	b086      	sub	sp, #24
 800e276:	af00      	add	r7, sp, #0
 800e278:	60f8      	str	r0, [r7, #12]
 800e27a:	60b9      	str	r1, [r7, #8]
 800e27c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e27e:	2300      	movs	r3, #0
 800e280:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e288:	2b01      	cmp	r3, #1
 800e28a:	d101      	bne.n	800e290 <HAL_TIM_IC_ConfigChannel+0x1e>
 800e28c:	2302      	movs	r3, #2
 800e28e:	e088      	b.n	800e3a2 <HAL_TIM_IC_ConfigChannel+0x130>
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	2201      	movs	r2, #1
 800e294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d11b      	bne.n	800e2d6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800e2a2:	68bb      	ldr	r3, [r7, #8]
 800e2a4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800e2a6:	68bb      	ldr	r3, [r7, #8]
 800e2a8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800e2aa:	68bb      	ldr	r3, [r7, #8]
 800e2ac:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800e2ae:	f000 fd0d 	bl	800eccc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	699a      	ldr	r2, [r3, #24]
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	f022 020c 	bic.w	r2, r2, #12
 800e2c0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	6999      	ldr	r1, [r3, #24]
 800e2c8:	68bb      	ldr	r3, [r7, #8]
 800e2ca:	689a      	ldr	r2, [r3, #8]
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	430a      	orrs	r2, r1
 800e2d2:	619a      	str	r2, [r3, #24]
 800e2d4:	e060      	b.n	800e398 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	2b04      	cmp	r3, #4
 800e2da:	d11c      	bne.n	800e316 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800e2e0:	68bb      	ldr	r3, [r7, #8]
 800e2e2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800e2e4:	68bb      	ldr	r3, [r7, #8]
 800e2e6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800e2e8:	68bb      	ldr	r3, [r7, #8]
 800e2ea:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800e2ec:	f000 fd6e 	bl	800edcc <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	699a      	ldr	r2, [r3, #24]
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800e2fe:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	6999      	ldr	r1, [r3, #24]
 800e306:	68bb      	ldr	r3, [r7, #8]
 800e308:	689b      	ldr	r3, [r3, #8]
 800e30a:	021a      	lsls	r2, r3, #8
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	430a      	orrs	r2, r1
 800e312:	619a      	str	r2, [r3, #24]
 800e314:	e040      	b.n	800e398 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	2b08      	cmp	r3, #8
 800e31a:	d11b      	bne.n	800e354 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800e320:	68bb      	ldr	r3, [r7, #8]
 800e322:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800e324:	68bb      	ldr	r3, [r7, #8]
 800e326:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800e328:	68bb      	ldr	r3, [r7, #8]
 800e32a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800e32c:	f000 fd8b 	bl	800ee46 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	69da      	ldr	r2, [r3, #28]
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	f022 020c 	bic.w	r2, r2, #12
 800e33e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	69d9      	ldr	r1, [r3, #28]
 800e346:	68bb      	ldr	r3, [r7, #8]
 800e348:	689a      	ldr	r2, [r3, #8]
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	430a      	orrs	r2, r1
 800e350:	61da      	str	r2, [r3, #28]
 800e352:	e021      	b.n	800e398 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	2b0c      	cmp	r3, #12
 800e358:	d11c      	bne.n	800e394 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800e35e:	68bb      	ldr	r3, [r7, #8]
 800e360:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800e362:	68bb      	ldr	r3, [r7, #8]
 800e364:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800e366:	68bb      	ldr	r3, [r7, #8]
 800e368:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800e36a:	f000 fda8 	bl	800eebe <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	69da      	ldr	r2, [r3, #28]
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800e37c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	69d9      	ldr	r1, [r3, #28]
 800e384:	68bb      	ldr	r3, [r7, #8]
 800e386:	689b      	ldr	r3, [r3, #8]
 800e388:	021a      	lsls	r2, r3, #8
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	430a      	orrs	r2, r1
 800e390:	61da      	str	r2, [r3, #28]
 800e392:	e001      	b.n	800e398 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800e394:	2301      	movs	r3, #1
 800e396:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	2200      	movs	r2, #0
 800e39c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e3a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	3718      	adds	r7, #24
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}
	...

0800e3ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b086      	sub	sp, #24
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	60f8      	str	r0, [r7, #12]
 800e3b4:	60b9      	str	r1, [r7, #8]
 800e3b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e3c2:	2b01      	cmp	r3, #1
 800e3c4:	d101      	bne.n	800e3ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e3c6:	2302      	movs	r3, #2
 800e3c8:	e0ff      	b.n	800e5ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	2201      	movs	r2, #1
 800e3ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	2b14      	cmp	r3, #20
 800e3d6:	f200 80f0 	bhi.w	800e5ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e3da:	a201      	add	r2, pc, #4	@ (adr r2, 800e3e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e3dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3e0:	0800e435 	.word	0x0800e435
 800e3e4:	0800e5bb 	.word	0x0800e5bb
 800e3e8:	0800e5bb 	.word	0x0800e5bb
 800e3ec:	0800e5bb 	.word	0x0800e5bb
 800e3f0:	0800e475 	.word	0x0800e475
 800e3f4:	0800e5bb 	.word	0x0800e5bb
 800e3f8:	0800e5bb 	.word	0x0800e5bb
 800e3fc:	0800e5bb 	.word	0x0800e5bb
 800e400:	0800e4b7 	.word	0x0800e4b7
 800e404:	0800e5bb 	.word	0x0800e5bb
 800e408:	0800e5bb 	.word	0x0800e5bb
 800e40c:	0800e5bb 	.word	0x0800e5bb
 800e410:	0800e4f7 	.word	0x0800e4f7
 800e414:	0800e5bb 	.word	0x0800e5bb
 800e418:	0800e5bb 	.word	0x0800e5bb
 800e41c:	0800e5bb 	.word	0x0800e5bb
 800e420:	0800e539 	.word	0x0800e539
 800e424:	0800e5bb 	.word	0x0800e5bb
 800e428:	0800e5bb 	.word	0x0800e5bb
 800e42c:	0800e5bb 	.word	0x0800e5bb
 800e430:	0800e579 	.word	0x0800e579
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	68b9      	ldr	r1, [r7, #8]
 800e43a:	4618      	mov	r0, r3
 800e43c:	f000 f970 	bl	800e720 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	699a      	ldr	r2, [r3, #24]
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	f042 0208 	orr.w	r2, r2, #8
 800e44e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	699a      	ldr	r2, [r3, #24]
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	f022 0204 	bic.w	r2, r2, #4
 800e45e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	6999      	ldr	r1, [r3, #24]
 800e466:	68bb      	ldr	r3, [r7, #8]
 800e468:	691a      	ldr	r2, [r3, #16]
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	430a      	orrs	r2, r1
 800e470:	619a      	str	r2, [r3, #24]
      break;
 800e472:	e0a5      	b.n	800e5c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	68b9      	ldr	r1, [r7, #8]
 800e47a:	4618      	mov	r0, r3
 800e47c:	f000 f9e0 	bl	800e840 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	699a      	ldr	r2, [r3, #24]
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e48e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	699a      	ldr	r2, [r3, #24]
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e49e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	6999      	ldr	r1, [r3, #24]
 800e4a6:	68bb      	ldr	r3, [r7, #8]
 800e4a8:	691b      	ldr	r3, [r3, #16]
 800e4aa:	021a      	lsls	r2, r3, #8
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	430a      	orrs	r2, r1
 800e4b2:	619a      	str	r2, [r3, #24]
      break;
 800e4b4:	e084      	b.n	800e5c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	68b9      	ldr	r1, [r7, #8]
 800e4bc:	4618      	mov	r0, r3
 800e4be:	f000 fa49 	bl	800e954 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	69da      	ldr	r2, [r3, #28]
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	f042 0208 	orr.w	r2, r2, #8
 800e4d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	69da      	ldr	r2, [r3, #28]
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	f022 0204 	bic.w	r2, r2, #4
 800e4e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	69d9      	ldr	r1, [r3, #28]
 800e4e8:	68bb      	ldr	r3, [r7, #8]
 800e4ea:	691a      	ldr	r2, [r3, #16]
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	430a      	orrs	r2, r1
 800e4f2:	61da      	str	r2, [r3, #28]
      break;
 800e4f4:	e064      	b.n	800e5c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	68b9      	ldr	r1, [r7, #8]
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f000 fab1 	bl	800ea64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	69da      	ldr	r2, [r3, #28]
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e510:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	69da      	ldr	r2, [r3, #28]
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e520:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	69d9      	ldr	r1, [r3, #28]
 800e528:	68bb      	ldr	r3, [r7, #8]
 800e52a:	691b      	ldr	r3, [r3, #16]
 800e52c:	021a      	lsls	r2, r3, #8
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	430a      	orrs	r2, r1
 800e534:	61da      	str	r2, [r3, #28]
      break;
 800e536:	e043      	b.n	800e5c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	68b9      	ldr	r1, [r7, #8]
 800e53e:	4618      	mov	r0, r3
 800e540:	f000 fafa 	bl	800eb38 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	f042 0208 	orr.w	r2, r2, #8
 800e552:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	f022 0204 	bic.w	r2, r2, #4
 800e562:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e56a:	68bb      	ldr	r3, [r7, #8]
 800e56c:	691a      	ldr	r2, [r3, #16]
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	430a      	orrs	r2, r1
 800e574:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e576:	e023      	b.n	800e5c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	68b9      	ldr	r1, [r7, #8]
 800e57e:	4618      	mov	r0, r3
 800e580:	f000 fb3e 	bl	800ec00 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e592:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e5a2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e5aa:	68bb      	ldr	r3, [r7, #8]
 800e5ac:	691b      	ldr	r3, [r3, #16]
 800e5ae:	021a      	lsls	r2, r3, #8
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	430a      	orrs	r2, r1
 800e5b6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e5b8:	e002      	b.n	800e5c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e5ba:	2301      	movs	r3, #1
 800e5bc:	75fb      	strb	r3, [r7, #23]
      break;
 800e5be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e5c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	3718      	adds	r7, #24
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	bd80      	pop	{r7, pc}
 800e5d2:	bf00      	nop

0800e5d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e5d4:	b480      	push	{r7}
 800e5d6:	b085      	sub	sp, #20
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	6078      	str	r0, [r7, #4]
 800e5dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	4a44      	ldr	r2, [pc, #272]	@ (800e6f8 <TIM_Base_SetConfig+0x124>)
 800e5e8:	4293      	cmp	r3, r2
 800e5ea:	d013      	beq.n	800e614 <TIM_Base_SetConfig+0x40>
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e5f2:	d00f      	beq.n	800e614 <TIM_Base_SetConfig+0x40>
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	4a41      	ldr	r2, [pc, #260]	@ (800e6fc <TIM_Base_SetConfig+0x128>)
 800e5f8:	4293      	cmp	r3, r2
 800e5fa:	d00b      	beq.n	800e614 <TIM_Base_SetConfig+0x40>
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	4a40      	ldr	r2, [pc, #256]	@ (800e700 <TIM_Base_SetConfig+0x12c>)
 800e600:	4293      	cmp	r3, r2
 800e602:	d007      	beq.n	800e614 <TIM_Base_SetConfig+0x40>
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	4a3f      	ldr	r2, [pc, #252]	@ (800e704 <TIM_Base_SetConfig+0x130>)
 800e608:	4293      	cmp	r3, r2
 800e60a:	d003      	beq.n	800e614 <TIM_Base_SetConfig+0x40>
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	4a3e      	ldr	r2, [pc, #248]	@ (800e708 <TIM_Base_SetConfig+0x134>)
 800e610:	4293      	cmp	r3, r2
 800e612:	d108      	bne.n	800e626 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e61a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e61c:	683b      	ldr	r3, [r7, #0]
 800e61e:	685b      	ldr	r3, [r3, #4]
 800e620:	68fa      	ldr	r2, [r7, #12]
 800e622:	4313      	orrs	r3, r2
 800e624:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	4a33      	ldr	r2, [pc, #204]	@ (800e6f8 <TIM_Base_SetConfig+0x124>)
 800e62a:	4293      	cmp	r3, r2
 800e62c:	d027      	beq.n	800e67e <TIM_Base_SetConfig+0xaa>
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e634:	d023      	beq.n	800e67e <TIM_Base_SetConfig+0xaa>
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	4a30      	ldr	r2, [pc, #192]	@ (800e6fc <TIM_Base_SetConfig+0x128>)
 800e63a:	4293      	cmp	r3, r2
 800e63c:	d01f      	beq.n	800e67e <TIM_Base_SetConfig+0xaa>
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	4a2f      	ldr	r2, [pc, #188]	@ (800e700 <TIM_Base_SetConfig+0x12c>)
 800e642:	4293      	cmp	r3, r2
 800e644:	d01b      	beq.n	800e67e <TIM_Base_SetConfig+0xaa>
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	4a2e      	ldr	r2, [pc, #184]	@ (800e704 <TIM_Base_SetConfig+0x130>)
 800e64a:	4293      	cmp	r3, r2
 800e64c:	d017      	beq.n	800e67e <TIM_Base_SetConfig+0xaa>
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	4a2d      	ldr	r2, [pc, #180]	@ (800e708 <TIM_Base_SetConfig+0x134>)
 800e652:	4293      	cmp	r3, r2
 800e654:	d013      	beq.n	800e67e <TIM_Base_SetConfig+0xaa>
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	4a2c      	ldr	r2, [pc, #176]	@ (800e70c <TIM_Base_SetConfig+0x138>)
 800e65a:	4293      	cmp	r3, r2
 800e65c:	d00f      	beq.n	800e67e <TIM_Base_SetConfig+0xaa>
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	4a2b      	ldr	r2, [pc, #172]	@ (800e710 <TIM_Base_SetConfig+0x13c>)
 800e662:	4293      	cmp	r3, r2
 800e664:	d00b      	beq.n	800e67e <TIM_Base_SetConfig+0xaa>
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	4a2a      	ldr	r2, [pc, #168]	@ (800e714 <TIM_Base_SetConfig+0x140>)
 800e66a:	4293      	cmp	r3, r2
 800e66c:	d007      	beq.n	800e67e <TIM_Base_SetConfig+0xaa>
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	4a29      	ldr	r2, [pc, #164]	@ (800e718 <TIM_Base_SetConfig+0x144>)
 800e672:	4293      	cmp	r3, r2
 800e674:	d003      	beq.n	800e67e <TIM_Base_SetConfig+0xaa>
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	4a28      	ldr	r2, [pc, #160]	@ (800e71c <TIM_Base_SetConfig+0x148>)
 800e67a:	4293      	cmp	r3, r2
 800e67c:	d108      	bne.n	800e690 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e684:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e686:	683b      	ldr	r3, [r7, #0]
 800e688:	68db      	ldr	r3, [r3, #12]
 800e68a:	68fa      	ldr	r2, [r7, #12]
 800e68c:	4313      	orrs	r3, r2
 800e68e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e696:	683b      	ldr	r3, [r7, #0]
 800e698:	695b      	ldr	r3, [r3, #20]
 800e69a:	4313      	orrs	r3, r2
 800e69c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	68fa      	ldr	r2, [r7, #12]
 800e6a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e6a4:	683b      	ldr	r3, [r7, #0]
 800e6a6:	689a      	ldr	r2, [r3, #8]
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e6ac:	683b      	ldr	r3, [r7, #0]
 800e6ae:	681a      	ldr	r2, [r3, #0]
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	4a10      	ldr	r2, [pc, #64]	@ (800e6f8 <TIM_Base_SetConfig+0x124>)
 800e6b8:	4293      	cmp	r3, r2
 800e6ba:	d00f      	beq.n	800e6dc <TIM_Base_SetConfig+0x108>
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	4a12      	ldr	r2, [pc, #72]	@ (800e708 <TIM_Base_SetConfig+0x134>)
 800e6c0:	4293      	cmp	r3, r2
 800e6c2:	d00b      	beq.n	800e6dc <TIM_Base_SetConfig+0x108>
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	4a11      	ldr	r2, [pc, #68]	@ (800e70c <TIM_Base_SetConfig+0x138>)
 800e6c8:	4293      	cmp	r3, r2
 800e6ca:	d007      	beq.n	800e6dc <TIM_Base_SetConfig+0x108>
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	4a10      	ldr	r2, [pc, #64]	@ (800e710 <TIM_Base_SetConfig+0x13c>)
 800e6d0:	4293      	cmp	r3, r2
 800e6d2:	d003      	beq.n	800e6dc <TIM_Base_SetConfig+0x108>
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	4a0f      	ldr	r2, [pc, #60]	@ (800e714 <TIM_Base_SetConfig+0x140>)
 800e6d8:	4293      	cmp	r3, r2
 800e6da:	d103      	bne.n	800e6e4 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e6dc:	683b      	ldr	r3, [r7, #0]
 800e6de:	691a      	ldr	r2, [r3, #16]
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	2201      	movs	r2, #1
 800e6e8:	615a      	str	r2, [r3, #20]
}
 800e6ea:	bf00      	nop
 800e6ec:	3714      	adds	r7, #20
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f4:	4770      	bx	lr
 800e6f6:	bf00      	nop
 800e6f8:	40010000 	.word	0x40010000
 800e6fc:	40000400 	.word	0x40000400
 800e700:	40000800 	.word	0x40000800
 800e704:	40000c00 	.word	0x40000c00
 800e708:	40010400 	.word	0x40010400
 800e70c:	40014000 	.word	0x40014000
 800e710:	40014400 	.word	0x40014400
 800e714:	40014800 	.word	0x40014800
 800e718:	4000e000 	.word	0x4000e000
 800e71c:	4000e400 	.word	0x4000e400

0800e720 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e720:	b480      	push	{r7}
 800e722:	b087      	sub	sp, #28
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
 800e728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	6a1b      	ldr	r3, [r3, #32]
 800e72e:	f023 0201 	bic.w	r2, r3, #1
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	6a1b      	ldr	r3, [r3, #32]
 800e73a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	685b      	ldr	r3, [r3, #4]
 800e740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	699b      	ldr	r3, [r3, #24]
 800e746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e748:	68fa      	ldr	r2, [r7, #12]
 800e74a:	4b37      	ldr	r3, [pc, #220]	@ (800e828 <TIM_OC1_SetConfig+0x108>)
 800e74c:	4013      	ands	r3, r2
 800e74e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	f023 0303 	bic.w	r3, r3, #3
 800e756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e758:	683b      	ldr	r3, [r7, #0]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	68fa      	ldr	r2, [r7, #12]
 800e75e:	4313      	orrs	r3, r2
 800e760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e762:	697b      	ldr	r3, [r7, #20]
 800e764:	f023 0302 	bic.w	r3, r3, #2
 800e768:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e76a:	683b      	ldr	r3, [r7, #0]
 800e76c:	689b      	ldr	r3, [r3, #8]
 800e76e:	697a      	ldr	r2, [r7, #20]
 800e770:	4313      	orrs	r3, r2
 800e772:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	4a2d      	ldr	r2, [pc, #180]	@ (800e82c <TIM_OC1_SetConfig+0x10c>)
 800e778:	4293      	cmp	r3, r2
 800e77a:	d00f      	beq.n	800e79c <TIM_OC1_SetConfig+0x7c>
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	4a2c      	ldr	r2, [pc, #176]	@ (800e830 <TIM_OC1_SetConfig+0x110>)
 800e780:	4293      	cmp	r3, r2
 800e782:	d00b      	beq.n	800e79c <TIM_OC1_SetConfig+0x7c>
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	4a2b      	ldr	r2, [pc, #172]	@ (800e834 <TIM_OC1_SetConfig+0x114>)
 800e788:	4293      	cmp	r3, r2
 800e78a:	d007      	beq.n	800e79c <TIM_OC1_SetConfig+0x7c>
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	4a2a      	ldr	r2, [pc, #168]	@ (800e838 <TIM_OC1_SetConfig+0x118>)
 800e790:	4293      	cmp	r3, r2
 800e792:	d003      	beq.n	800e79c <TIM_OC1_SetConfig+0x7c>
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	4a29      	ldr	r2, [pc, #164]	@ (800e83c <TIM_OC1_SetConfig+0x11c>)
 800e798:	4293      	cmp	r3, r2
 800e79a:	d10c      	bne.n	800e7b6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e79c:	697b      	ldr	r3, [r7, #20]
 800e79e:	f023 0308 	bic.w	r3, r3, #8
 800e7a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	68db      	ldr	r3, [r3, #12]
 800e7a8:	697a      	ldr	r2, [r7, #20]
 800e7aa:	4313      	orrs	r3, r2
 800e7ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e7ae:	697b      	ldr	r3, [r7, #20]
 800e7b0:	f023 0304 	bic.w	r3, r3, #4
 800e7b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	4a1c      	ldr	r2, [pc, #112]	@ (800e82c <TIM_OC1_SetConfig+0x10c>)
 800e7ba:	4293      	cmp	r3, r2
 800e7bc:	d00f      	beq.n	800e7de <TIM_OC1_SetConfig+0xbe>
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	4a1b      	ldr	r2, [pc, #108]	@ (800e830 <TIM_OC1_SetConfig+0x110>)
 800e7c2:	4293      	cmp	r3, r2
 800e7c4:	d00b      	beq.n	800e7de <TIM_OC1_SetConfig+0xbe>
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	4a1a      	ldr	r2, [pc, #104]	@ (800e834 <TIM_OC1_SetConfig+0x114>)
 800e7ca:	4293      	cmp	r3, r2
 800e7cc:	d007      	beq.n	800e7de <TIM_OC1_SetConfig+0xbe>
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	4a19      	ldr	r2, [pc, #100]	@ (800e838 <TIM_OC1_SetConfig+0x118>)
 800e7d2:	4293      	cmp	r3, r2
 800e7d4:	d003      	beq.n	800e7de <TIM_OC1_SetConfig+0xbe>
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	4a18      	ldr	r2, [pc, #96]	@ (800e83c <TIM_OC1_SetConfig+0x11c>)
 800e7da:	4293      	cmp	r3, r2
 800e7dc:	d111      	bne.n	800e802 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e7de:	693b      	ldr	r3, [r7, #16]
 800e7e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e7e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e7e6:	693b      	ldr	r3, [r7, #16]
 800e7e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e7ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e7ee:	683b      	ldr	r3, [r7, #0]
 800e7f0:	695b      	ldr	r3, [r3, #20]
 800e7f2:	693a      	ldr	r2, [r7, #16]
 800e7f4:	4313      	orrs	r3, r2
 800e7f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	699b      	ldr	r3, [r3, #24]
 800e7fc:	693a      	ldr	r2, [r7, #16]
 800e7fe:	4313      	orrs	r3, r2
 800e800:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	693a      	ldr	r2, [r7, #16]
 800e806:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	68fa      	ldr	r2, [r7, #12]
 800e80c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e80e:	683b      	ldr	r3, [r7, #0]
 800e810:	685a      	ldr	r2, [r3, #4]
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	697a      	ldr	r2, [r7, #20]
 800e81a:	621a      	str	r2, [r3, #32]
}
 800e81c:	bf00      	nop
 800e81e:	371c      	adds	r7, #28
 800e820:	46bd      	mov	sp, r7
 800e822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e826:	4770      	bx	lr
 800e828:	fffeff8f 	.word	0xfffeff8f
 800e82c:	40010000 	.word	0x40010000
 800e830:	40010400 	.word	0x40010400
 800e834:	40014000 	.word	0x40014000
 800e838:	40014400 	.word	0x40014400
 800e83c:	40014800 	.word	0x40014800

0800e840 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e840:	b480      	push	{r7}
 800e842:	b087      	sub	sp, #28
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
 800e848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	6a1b      	ldr	r3, [r3, #32]
 800e84e:	f023 0210 	bic.w	r2, r3, #16
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	6a1b      	ldr	r3, [r3, #32]
 800e85a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	685b      	ldr	r3, [r3, #4]
 800e860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	699b      	ldr	r3, [r3, #24]
 800e866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e868:	68fa      	ldr	r2, [r7, #12]
 800e86a:	4b34      	ldr	r3, [pc, #208]	@ (800e93c <TIM_OC2_SetConfig+0xfc>)
 800e86c:	4013      	ands	r3, r2
 800e86e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e876:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e878:	683b      	ldr	r3, [r7, #0]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	021b      	lsls	r3, r3, #8
 800e87e:	68fa      	ldr	r2, [r7, #12]
 800e880:	4313      	orrs	r3, r2
 800e882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e884:	697b      	ldr	r3, [r7, #20]
 800e886:	f023 0320 	bic.w	r3, r3, #32
 800e88a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e88c:	683b      	ldr	r3, [r7, #0]
 800e88e:	689b      	ldr	r3, [r3, #8]
 800e890:	011b      	lsls	r3, r3, #4
 800e892:	697a      	ldr	r2, [r7, #20]
 800e894:	4313      	orrs	r3, r2
 800e896:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	4a29      	ldr	r2, [pc, #164]	@ (800e940 <TIM_OC2_SetConfig+0x100>)
 800e89c:	4293      	cmp	r3, r2
 800e89e:	d003      	beq.n	800e8a8 <TIM_OC2_SetConfig+0x68>
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	4a28      	ldr	r2, [pc, #160]	@ (800e944 <TIM_OC2_SetConfig+0x104>)
 800e8a4:	4293      	cmp	r3, r2
 800e8a6:	d10d      	bne.n	800e8c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e8a8:	697b      	ldr	r3, [r7, #20]
 800e8aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e8ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	68db      	ldr	r3, [r3, #12]
 800e8b4:	011b      	lsls	r3, r3, #4
 800e8b6:	697a      	ldr	r2, [r7, #20]
 800e8b8:	4313      	orrs	r3, r2
 800e8ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e8bc:	697b      	ldr	r3, [r7, #20]
 800e8be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e8c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	4a1e      	ldr	r2, [pc, #120]	@ (800e940 <TIM_OC2_SetConfig+0x100>)
 800e8c8:	4293      	cmp	r3, r2
 800e8ca:	d00f      	beq.n	800e8ec <TIM_OC2_SetConfig+0xac>
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	4a1d      	ldr	r2, [pc, #116]	@ (800e944 <TIM_OC2_SetConfig+0x104>)
 800e8d0:	4293      	cmp	r3, r2
 800e8d2:	d00b      	beq.n	800e8ec <TIM_OC2_SetConfig+0xac>
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	4a1c      	ldr	r2, [pc, #112]	@ (800e948 <TIM_OC2_SetConfig+0x108>)
 800e8d8:	4293      	cmp	r3, r2
 800e8da:	d007      	beq.n	800e8ec <TIM_OC2_SetConfig+0xac>
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	4a1b      	ldr	r2, [pc, #108]	@ (800e94c <TIM_OC2_SetConfig+0x10c>)
 800e8e0:	4293      	cmp	r3, r2
 800e8e2:	d003      	beq.n	800e8ec <TIM_OC2_SetConfig+0xac>
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	4a1a      	ldr	r2, [pc, #104]	@ (800e950 <TIM_OC2_SetConfig+0x110>)
 800e8e8:	4293      	cmp	r3, r2
 800e8ea:	d113      	bne.n	800e914 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e8ec:	693b      	ldr	r3, [r7, #16]
 800e8ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e8f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e8f4:	693b      	ldr	r3, [r7, #16]
 800e8f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e8fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e8fc:	683b      	ldr	r3, [r7, #0]
 800e8fe:	695b      	ldr	r3, [r3, #20]
 800e900:	009b      	lsls	r3, r3, #2
 800e902:	693a      	ldr	r2, [r7, #16]
 800e904:	4313      	orrs	r3, r2
 800e906:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	699b      	ldr	r3, [r3, #24]
 800e90c:	009b      	lsls	r3, r3, #2
 800e90e:	693a      	ldr	r2, [r7, #16]
 800e910:	4313      	orrs	r3, r2
 800e912:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	693a      	ldr	r2, [r7, #16]
 800e918:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	68fa      	ldr	r2, [r7, #12]
 800e91e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e920:	683b      	ldr	r3, [r7, #0]
 800e922:	685a      	ldr	r2, [r3, #4]
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	697a      	ldr	r2, [r7, #20]
 800e92c:	621a      	str	r2, [r3, #32]
}
 800e92e:	bf00      	nop
 800e930:	371c      	adds	r7, #28
 800e932:	46bd      	mov	sp, r7
 800e934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e938:	4770      	bx	lr
 800e93a:	bf00      	nop
 800e93c:	feff8fff 	.word	0xfeff8fff
 800e940:	40010000 	.word	0x40010000
 800e944:	40010400 	.word	0x40010400
 800e948:	40014000 	.word	0x40014000
 800e94c:	40014400 	.word	0x40014400
 800e950:	40014800 	.word	0x40014800

0800e954 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e954:	b480      	push	{r7}
 800e956:	b087      	sub	sp, #28
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
 800e95c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	6a1b      	ldr	r3, [r3, #32]
 800e962:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	6a1b      	ldr	r3, [r3, #32]
 800e96e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	685b      	ldr	r3, [r3, #4]
 800e974:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	69db      	ldr	r3, [r3, #28]
 800e97a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e97c:	68fa      	ldr	r2, [r7, #12]
 800e97e:	4b33      	ldr	r3, [pc, #204]	@ (800ea4c <TIM_OC3_SetConfig+0xf8>)
 800e980:	4013      	ands	r3, r2
 800e982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	f023 0303 	bic.w	r3, r3, #3
 800e98a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	68fa      	ldr	r2, [r7, #12]
 800e992:	4313      	orrs	r3, r2
 800e994:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e996:	697b      	ldr	r3, [r7, #20]
 800e998:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e99c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e99e:	683b      	ldr	r3, [r7, #0]
 800e9a0:	689b      	ldr	r3, [r3, #8]
 800e9a2:	021b      	lsls	r3, r3, #8
 800e9a4:	697a      	ldr	r2, [r7, #20]
 800e9a6:	4313      	orrs	r3, r2
 800e9a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	4a28      	ldr	r2, [pc, #160]	@ (800ea50 <TIM_OC3_SetConfig+0xfc>)
 800e9ae:	4293      	cmp	r3, r2
 800e9b0:	d003      	beq.n	800e9ba <TIM_OC3_SetConfig+0x66>
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	4a27      	ldr	r2, [pc, #156]	@ (800ea54 <TIM_OC3_SetConfig+0x100>)
 800e9b6:	4293      	cmp	r3, r2
 800e9b8:	d10d      	bne.n	800e9d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e9ba:	697b      	ldr	r3, [r7, #20]
 800e9bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800e9c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e9c2:	683b      	ldr	r3, [r7, #0]
 800e9c4:	68db      	ldr	r3, [r3, #12]
 800e9c6:	021b      	lsls	r3, r3, #8
 800e9c8:	697a      	ldr	r2, [r7, #20]
 800e9ca:	4313      	orrs	r3, r2
 800e9cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e9ce:	697b      	ldr	r3, [r7, #20]
 800e9d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800e9d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	4a1d      	ldr	r2, [pc, #116]	@ (800ea50 <TIM_OC3_SetConfig+0xfc>)
 800e9da:	4293      	cmp	r3, r2
 800e9dc:	d00f      	beq.n	800e9fe <TIM_OC3_SetConfig+0xaa>
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	4a1c      	ldr	r2, [pc, #112]	@ (800ea54 <TIM_OC3_SetConfig+0x100>)
 800e9e2:	4293      	cmp	r3, r2
 800e9e4:	d00b      	beq.n	800e9fe <TIM_OC3_SetConfig+0xaa>
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	4a1b      	ldr	r2, [pc, #108]	@ (800ea58 <TIM_OC3_SetConfig+0x104>)
 800e9ea:	4293      	cmp	r3, r2
 800e9ec:	d007      	beq.n	800e9fe <TIM_OC3_SetConfig+0xaa>
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	4a1a      	ldr	r2, [pc, #104]	@ (800ea5c <TIM_OC3_SetConfig+0x108>)
 800e9f2:	4293      	cmp	r3, r2
 800e9f4:	d003      	beq.n	800e9fe <TIM_OC3_SetConfig+0xaa>
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	4a19      	ldr	r2, [pc, #100]	@ (800ea60 <TIM_OC3_SetConfig+0x10c>)
 800e9fa:	4293      	cmp	r3, r2
 800e9fc:	d113      	bne.n	800ea26 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e9fe:	693b      	ldr	r3, [r7, #16]
 800ea00:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ea04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ea06:	693b      	ldr	r3, [r7, #16]
 800ea08:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ea0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	695b      	ldr	r3, [r3, #20]
 800ea12:	011b      	lsls	r3, r3, #4
 800ea14:	693a      	ldr	r2, [r7, #16]
 800ea16:	4313      	orrs	r3, r2
 800ea18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ea1a:	683b      	ldr	r3, [r7, #0]
 800ea1c:	699b      	ldr	r3, [r3, #24]
 800ea1e:	011b      	lsls	r3, r3, #4
 800ea20:	693a      	ldr	r2, [r7, #16]
 800ea22:	4313      	orrs	r3, r2
 800ea24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	693a      	ldr	r2, [r7, #16]
 800ea2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	68fa      	ldr	r2, [r7, #12]
 800ea30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ea32:	683b      	ldr	r3, [r7, #0]
 800ea34:	685a      	ldr	r2, [r3, #4]
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	697a      	ldr	r2, [r7, #20]
 800ea3e:	621a      	str	r2, [r3, #32]
}
 800ea40:	bf00      	nop
 800ea42:	371c      	adds	r7, #28
 800ea44:	46bd      	mov	sp, r7
 800ea46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4a:	4770      	bx	lr
 800ea4c:	fffeff8f 	.word	0xfffeff8f
 800ea50:	40010000 	.word	0x40010000
 800ea54:	40010400 	.word	0x40010400
 800ea58:	40014000 	.word	0x40014000
 800ea5c:	40014400 	.word	0x40014400
 800ea60:	40014800 	.word	0x40014800

0800ea64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ea64:	b480      	push	{r7}
 800ea66:	b087      	sub	sp, #28
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
 800ea6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	6a1b      	ldr	r3, [r3, #32]
 800ea72:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	6a1b      	ldr	r3, [r3, #32]
 800ea7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	685b      	ldr	r3, [r3, #4]
 800ea84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	69db      	ldr	r3, [r3, #28]
 800ea8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ea8c:	68fa      	ldr	r2, [r7, #12]
 800ea8e:	4b24      	ldr	r3, [pc, #144]	@ (800eb20 <TIM_OC4_SetConfig+0xbc>)
 800ea90:	4013      	ands	r3, r2
 800ea92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ea9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ea9c:	683b      	ldr	r3, [r7, #0]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	021b      	lsls	r3, r3, #8
 800eaa2:	68fa      	ldr	r2, [r7, #12]
 800eaa4:	4313      	orrs	r3, r2
 800eaa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800eaa8:	693b      	ldr	r3, [r7, #16]
 800eaaa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800eaae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800eab0:	683b      	ldr	r3, [r7, #0]
 800eab2:	689b      	ldr	r3, [r3, #8]
 800eab4:	031b      	lsls	r3, r3, #12
 800eab6:	693a      	ldr	r2, [r7, #16]
 800eab8:	4313      	orrs	r3, r2
 800eaba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	4a19      	ldr	r2, [pc, #100]	@ (800eb24 <TIM_OC4_SetConfig+0xc0>)
 800eac0:	4293      	cmp	r3, r2
 800eac2:	d00f      	beq.n	800eae4 <TIM_OC4_SetConfig+0x80>
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	4a18      	ldr	r2, [pc, #96]	@ (800eb28 <TIM_OC4_SetConfig+0xc4>)
 800eac8:	4293      	cmp	r3, r2
 800eaca:	d00b      	beq.n	800eae4 <TIM_OC4_SetConfig+0x80>
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	4a17      	ldr	r2, [pc, #92]	@ (800eb2c <TIM_OC4_SetConfig+0xc8>)
 800ead0:	4293      	cmp	r3, r2
 800ead2:	d007      	beq.n	800eae4 <TIM_OC4_SetConfig+0x80>
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	4a16      	ldr	r2, [pc, #88]	@ (800eb30 <TIM_OC4_SetConfig+0xcc>)
 800ead8:	4293      	cmp	r3, r2
 800eada:	d003      	beq.n	800eae4 <TIM_OC4_SetConfig+0x80>
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	4a15      	ldr	r2, [pc, #84]	@ (800eb34 <TIM_OC4_SetConfig+0xd0>)
 800eae0:	4293      	cmp	r3, r2
 800eae2:	d109      	bne.n	800eaf8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800eae4:	697b      	ldr	r3, [r7, #20]
 800eae6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800eaea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800eaec:	683b      	ldr	r3, [r7, #0]
 800eaee:	695b      	ldr	r3, [r3, #20]
 800eaf0:	019b      	lsls	r3, r3, #6
 800eaf2:	697a      	ldr	r2, [r7, #20]
 800eaf4:	4313      	orrs	r3, r2
 800eaf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	697a      	ldr	r2, [r7, #20]
 800eafc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	68fa      	ldr	r2, [r7, #12]
 800eb02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800eb04:	683b      	ldr	r3, [r7, #0]
 800eb06:	685a      	ldr	r2, [r3, #4]
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	693a      	ldr	r2, [r7, #16]
 800eb10:	621a      	str	r2, [r3, #32]
}
 800eb12:	bf00      	nop
 800eb14:	371c      	adds	r7, #28
 800eb16:	46bd      	mov	sp, r7
 800eb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1c:	4770      	bx	lr
 800eb1e:	bf00      	nop
 800eb20:	feff8fff 	.word	0xfeff8fff
 800eb24:	40010000 	.word	0x40010000
 800eb28:	40010400 	.word	0x40010400
 800eb2c:	40014000 	.word	0x40014000
 800eb30:	40014400 	.word	0x40014400
 800eb34:	40014800 	.word	0x40014800

0800eb38 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800eb38:	b480      	push	{r7}
 800eb3a:	b087      	sub	sp, #28
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
 800eb40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	6a1b      	ldr	r3, [r3, #32]
 800eb46:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	6a1b      	ldr	r3, [r3, #32]
 800eb52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	685b      	ldr	r3, [r3, #4]
 800eb58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800eb5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800eb60:	68fa      	ldr	r2, [r7, #12]
 800eb62:	4b21      	ldr	r3, [pc, #132]	@ (800ebe8 <TIM_OC5_SetConfig+0xb0>)
 800eb64:	4013      	ands	r3, r2
 800eb66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	68fa      	ldr	r2, [r7, #12]
 800eb6e:	4313      	orrs	r3, r2
 800eb70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800eb72:	693b      	ldr	r3, [r7, #16]
 800eb74:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800eb78:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	689b      	ldr	r3, [r3, #8]
 800eb7e:	041b      	lsls	r3, r3, #16
 800eb80:	693a      	ldr	r2, [r7, #16]
 800eb82:	4313      	orrs	r3, r2
 800eb84:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	4a18      	ldr	r2, [pc, #96]	@ (800ebec <TIM_OC5_SetConfig+0xb4>)
 800eb8a:	4293      	cmp	r3, r2
 800eb8c:	d00f      	beq.n	800ebae <TIM_OC5_SetConfig+0x76>
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	4a17      	ldr	r2, [pc, #92]	@ (800ebf0 <TIM_OC5_SetConfig+0xb8>)
 800eb92:	4293      	cmp	r3, r2
 800eb94:	d00b      	beq.n	800ebae <TIM_OC5_SetConfig+0x76>
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	4a16      	ldr	r2, [pc, #88]	@ (800ebf4 <TIM_OC5_SetConfig+0xbc>)
 800eb9a:	4293      	cmp	r3, r2
 800eb9c:	d007      	beq.n	800ebae <TIM_OC5_SetConfig+0x76>
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	4a15      	ldr	r2, [pc, #84]	@ (800ebf8 <TIM_OC5_SetConfig+0xc0>)
 800eba2:	4293      	cmp	r3, r2
 800eba4:	d003      	beq.n	800ebae <TIM_OC5_SetConfig+0x76>
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	4a14      	ldr	r2, [pc, #80]	@ (800ebfc <TIM_OC5_SetConfig+0xc4>)
 800ebaa:	4293      	cmp	r3, r2
 800ebac:	d109      	bne.n	800ebc2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ebae:	697b      	ldr	r3, [r7, #20]
 800ebb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ebb4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ebb6:	683b      	ldr	r3, [r7, #0]
 800ebb8:	695b      	ldr	r3, [r3, #20]
 800ebba:	021b      	lsls	r3, r3, #8
 800ebbc:	697a      	ldr	r2, [r7, #20]
 800ebbe:	4313      	orrs	r3, r2
 800ebc0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	697a      	ldr	r2, [r7, #20]
 800ebc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	68fa      	ldr	r2, [r7, #12]
 800ebcc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ebce:	683b      	ldr	r3, [r7, #0]
 800ebd0:	685a      	ldr	r2, [r3, #4]
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	693a      	ldr	r2, [r7, #16]
 800ebda:	621a      	str	r2, [r3, #32]
}
 800ebdc:	bf00      	nop
 800ebde:	371c      	adds	r7, #28
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe6:	4770      	bx	lr
 800ebe8:	fffeff8f 	.word	0xfffeff8f
 800ebec:	40010000 	.word	0x40010000
 800ebf0:	40010400 	.word	0x40010400
 800ebf4:	40014000 	.word	0x40014000
 800ebf8:	40014400 	.word	0x40014400
 800ebfc:	40014800 	.word	0x40014800

0800ec00 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ec00:	b480      	push	{r7}
 800ec02:	b087      	sub	sp, #28
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
 800ec08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	6a1b      	ldr	r3, [r3, #32]
 800ec0e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	6a1b      	ldr	r3, [r3, #32]
 800ec1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	685b      	ldr	r3, [r3, #4]
 800ec20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ec26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ec28:	68fa      	ldr	r2, [r7, #12]
 800ec2a:	4b22      	ldr	r3, [pc, #136]	@ (800ecb4 <TIM_OC6_SetConfig+0xb4>)
 800ec2c:	4013      	ands	r3, r2
 800ec2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ec30:	683b      	ldr	r3, [r7, #0]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	021b      	lsls	r3, r3, #8
 800ec36:	68fa      	ldr	r2, [r7, #12]
 800ec38:	4313      	orrs	r3, r2
 800ec3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ec3c:	693b      	ldr	r3, [r7, #16]
 800ec3e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ec42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ec44:	683b      	ldr	r3, [r7, #0]
 800ec46:	689b      	ldr	r3, [r3, #8]
 800ec48:	051b      	lsls	r3, r3, #20
 800ec4a:	693a      	ldr	r2, [r7, #16]
 800ec4c:	4313      	orrs	r3, r2
 800ec4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	4a19      	ldr	r2, [pc, #100]	@ (800ecb8 <TIM_OC6_SetConfig+0xb8>)
 800ec54:	4293      	cmp	r3, r2
 800ec56:	d00f      	beq.n	800ec78 <TIM_OC6_SetConfig+0x78>
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	4a18      	ldr	r2, [pc, #96]	@ (800ecbc <TIM_OC6_SetConfig+0xbc>)
 800ec5c:	4293      	cmp	r3, r2
 800ec5e:	d00b      	beq.n	800ec78 <TIM_OC6_SetConfig+0x78>
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	4a17      	ldr	r2, [pc, #92]	@ (800ecc0 <TIM_OC6_SetConfig+0xc0>)
 800ec64:	4293      	cmp	r3, r2
 800ec66:	d007      	beq.n	800ec78 <TIM_OC6_SetConfig+0x78>
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	4a16      	ldr	r2, [pc, #88]	@ (800ecc4 <TIM_OC6_SetConfig+0xc4>)
 800ec6c:	4293      	cmp	r3, r2
 800ec6e:	d003      	beq.n	800ec78 <TIM_OC6_SetConfig+0x78>
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	4a15      	ldr	r2, [pc, #84]	@ (800ecc8 <TIM_OC6_SetConfig+0xc8>)
 800ec74:	4293      	cmp	r3, r2
 800ec76:	d109      	bne.n	800ec8c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ec78:	697b      	ldr	r3, [r7, #20]
 800ec7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ec7e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ec80:	683b      	ldr	r3, [r7, #0]
 800ec82:	695b      	ldr	r3, [r3, #20]
 800ec84:	029b      	lsls	r3, r3, #10
 800ec86:	697a      	ldr	r2, [r7, #20]
 800ec88:	4313      	orrs	r3, r2
 800ec8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	697a      	ldr	r2, [r7, #20]
 800ec90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	68fa      	ldr	r2, [r7, #12]
 800ec96:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ec98:	683b      	ldr	r3, [r7, #0]
 800ec9a:	685a      	ldr	r2, [r3, #4]
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	693a      	ldr	r2, [r7, #16]
 800eca4:	621a      	str	r2, [r3, #32]
}
 800eca6:	bf00      	nop
 800eca8:	371c      	adds	r7, #28
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb0:	4770      	bx	lr
 800ecb2:	bf00      	nop
 800ecb4:	feff8fff 	.word	0xfeff8fff
 800ecb8:	40010000 	.word	0x40010000
 800ecbc:	40010400 	.word	0x40010400
 800ecc0:	40014000 	.word	0x40014000
 800ecc4:	40014400 	.word	0x40014400
 800ecc8:	40014800 	.word	0x40014800

0800eccc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800eccc:	b480      	push	{r7}
 800ecce:	b087      	sub	sp, #28
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	60f8      	str	r0, [r7, #12]
 800ecd4:	60b9      	str	r1, [r7, #8]
 800ecd6:	607a      	str	r2, [r7, #4]
 800ecd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	6a1b      	ldr	r3, [r3, #32]
 800ecde:	f023 0201 	bic.w	r2, r3, #1
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	699b      	ldr	r3, [r3, #24]
 800ecea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	6a1b      	ldr	r3, [r3, #32]
 800ecf0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	4a2c      	ldr	r2, [pc, #176]	@ (800eda8 <TIM_TI1_SetConfig+0xdc>)
 800ecf6:	4293      	cmp	r3, r2
 800ecf8:	d023      	beq.n	800ed42 <TIM_TI1_SetConfig+0x76>
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ed00:	d01f      	beq.n	800ed42 <TIM_TI1_SetConfig+0x76>
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	4a29      	ldr	r2, [pc, #164]	@ (800edac <TIM_TI1_SetConfig+0xe0>)
 800ed06:	4293      	cmp	r3, r2
 800ed08:	d01b      	beq.n	800ed42 <TIM_TI1_SetConfig+0x76>
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	4a28      	ldr	r2, [pc, #160]	@ (800edb0 <TIM_TI1_SetConfig+0xe4>)
 800ed0e:	4293      	cmp	r3, r2
 800ed10:	d017      	beq.n	800ed42 <TIM_TI1_SetConfig+0x76>
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	4a27      	ldr	r2, [pc, #156]	@ (800edb4 <TIM_TI1_SetConfig+0xe8>)
 800ed16:	4293      	cmp	r3, r2
 800ed18:	d013      	beq.n	800ed42 <TIM_TI1_SetConfig+0x76>
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	4a26      	ldr	r2, [pc, #152]	@ (800edb8 <TIM_TI1_SetConfig+0xec>)
 800ed1e:	4293      	cmp	r3, r2
 800ed20:	d00f      	beq.n	800ed42 <TIM_TI1_SetConfig+0x76>
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	4a25      	ldr	r2, [pc, #148]	@ (800edbc <TIM_TI1_SetConfig+0xf0>)
 800ed26:	4293      	cmp	r3, r2
 800ed28:	d00b      	beq.n	800ed42 <TIM_TI1_SetConfig+0x76>
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	4a24      	ldr	r2, [pc, #144]	@ (800edc0 <TIM_TI1_SetConfig+0xf4>)
 800ed2e:	4293      	cmp	r3, r2
 800ed30:	d007      	beq.n	800ed42 <TIM_TI1_SetConfig+0x76>
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	4a23      	ldr	r2, [pc, #140]	@ (800edc4 <TIM_TI1_SetConfig+0xf8>)
 800ed36:	4293      	cmp	r3, r2
 800ed38:	d003      	beq.n	800ed42 <TIM_TI1_SetConfig+0x76>
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	4a22      	ldr	r2, [pc, #136]	@ (800edc8 <TIM_TI1_SetConfig+0xfc>)
 800ed3e:	4293      	cmp	r3, r2
 800ed40:	d101      	bne.n	800ed46 <TIM_TI1_SetConfig+0x7a>
 800ed42:	2301      	movs	r3, #1
 800ed44:	e000      	b.n	800ed48 <TIM_TI1_SetConfig+0x7c>
 800ed46:	2300      	movs	r3, #0
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d008      	beq.n	800ed5e <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800ed4c:	697b      	ldr	r3, [r7, #20]
 800ed4e:	f023 0303 	bic.w	r3, r3, #3
 800ed52:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800ed54:	697a      	ldr	r2, [r7, #20]
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	4313      	orrs	r3, r2
 800ed5a:	617b      	str	r3, [r7, #20]
 800ed5c:	e003      	b.n	800ed66 <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800ed5e:	697b      	ldr	r3, [r7, #20]
 800ed60:	f043 0301 	orr.w	r3, r3, #1
 800ed64:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ed66:	697b      	ldr	r3, [r7, #20]
 800ed68:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ed6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800ed6e:	683b      	ldr	r3, [r7, #0]
 800ed70:	011b      	lsls	r3, r3, #4
 800ed72:	b2db      	uxtb	r3, r3
 800ed74:	697a      	ldr	r2, [r7, #20]
 800ed76:	4313      	orrs	r3, r2
 800ed78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ed7a:	693b      	ldr	r3, [r7, #16]
 800ed7c:	f023 030a 	bic.w	r3, r3, #10
 800ed80:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800ed82:	68bb      	ldr	r3, [r7, #8]
 800ed84:	f003 030a 	and.w	r3, r3, #10
 800ed88:	693a      	ldr	r2, [r7, #16]
 800ed8a:	4313      	orrs	r3, r2
 800ed8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	697a      	ldr	r2, [r7, #20]
 800ed92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	693a      	ldr	r2, [r7, #16]
 800ed98:	621a      	str	r2, [r3, #32]
}
 800ed9a:	bf00      	nop
 800ed9c:	371c      	adds	r7, #28
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda4:	4770      	bx	lr
 800eda6:	bf00      	nop
 800eda8:	40010000 	.word	0x40010000
 800edac:	40000400 	.word	0x40000400
 800edb0:	40000800 	.word	0x40000800
 800edb4:	40000c00 	.word	0x40000c00
 800edb8:	40010400 	.word	0x40010400
 800edbc:	40001800 	.word	0x40001800
 800edc0:	40014000 	.word	0x40014000
 800edc4:	4000e000 	.word	0x4000e000
 800edc8:	4000e400 	.word	0x4000e400

0800edcc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800edcc:	b480      	push	{r7}
 800edce:	b087      	sub	sp, #28
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	60f8      	str	r0, [r7, #12]
 800edd4:	60b9      	str	r1, [r7, #8]
 800edd6:	607a      	str	r2, [r7, #4]
 800edd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	6a1b      	ldr	r3, [r3, #32]
 800edde:	f023 0210 	bic.w	r2, r3, #16
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	699b      	ldr	r3, [r3, #24]
 800edea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	6a1b      	ldr	r3, [r3, #32]
 800edf0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800edf2:	697b      	ldr	r3, [r7, #20]
 800edf4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800edf8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	021b      	lsls	r3, r3, #8
 800edfe:	697a      	ldr	r2, [r7, #20]
 800ee00:	4313      	orrs	r3, r2
 800ee02:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ee04:	697b      	ldr	r3, [r7, #20]
 800ee06:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ee0a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800ee0c:	683b      	ldr	r3, [r7, #0]
 800ee0e:	031b      	lsls	r3, r3, #12
 800ee10:	b29b      	uxth	r3, r3
 800ee12:	697a      	ldr	r2, [r7, #20]
 800ee14:	4313      	orrs	r3, r2
 800ee16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ee18:	693b      	ldr	r3, [r7, #16]
 800ee1a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ee1e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800ee20:	68bb      	ldr	r3, [r7, #8]
 800ee22:	011b      	lsls	r3, r3, #4
 800ee24:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800ee28:	693a      	ldr	r2, [r7, #16]
 800ee2a:	4313      	orrs	r3, r2
 800ee2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	697a      	ldr	r2, [r7, #20]
 800ee32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	693a      	ldr	r2, [r7, #16]
 800ee38:	621a      	str	r2, [r3, #32]
}
 800ee3a:	bf00      	nop
 800ee3c:	371c      	adds	r7, #28
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee44:	4770      	bx	lr

0800ee46 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800ee46:	b480      	push	{r7}
 800ee48:	b087      	sub	sp, #28
 800ee4a:	af00      	add	r7, sp, #0
 800ee4c:	60f8      	str	r0, [r7, #12]
 800ee4e:	60b9      	str	r1, [r7, #8]
 800ee50:	607a      	str	r2, [r7, #4]
 800ee52:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	6a1b      	ldr	r3, [r3, #32]
 800ee58:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	69db      	ldr	r3, [r3, #28]
 800ee64:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	6a1b      	ldr	r3, [r3, #32]
 800ee6a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800ee6c:	697b      	ldr	r3, [r7, #20]
 800ee6e:	f023 0303 	bic.w	r3, r3, #3
 800ee72:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800ee74:	697a      	ldr	r2, [r7, #20]
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	4313      	orrs	r3, r2
 800ee7a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800ee7c:	697b      	ldr	r3, [r7, #20]
 800ee7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ee82:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800ee84:	683b      	ldr	r3, [r7, #0]
 800ee86:	011b      	lsls	r3, r3, #4
 800ee88:	b2db      	uxtb	r3, r3
 800ee8a:	697a      	ldr	r2, [r7, #20]
 800ee8c:	4313      	orrs	r3, r2
 800ee8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800ee90:	693b      	ldr	r3, [r7, #16]
 800ee92:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800ee96:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800ee98:	68bb      	ldr	r3, [r7, #8]
 800ee9a:	021b      	lsls	r3, r3, #8
 800ee9c:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800eea0:	693a      	ldr	r2, [r7, #16]
 800eea2:	4313      	orrs	r3, r2
 800eea4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	697a      	ldr	r2, [r7, #20]
 800eeaa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	693a      	ldr	r2, [r7, #16]
 800eeb0:	621a      	str	r2, [r3, #32]
}
 800eeb2:	bf00      	nop
 800eeb4:	371c      	adds	r7, #28
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebc:	4770      	bx	lr

0800eebe <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800eebe:	b480      	push	{r7}
 800eec0:	b087      	sub	sp, #28
 800eec2:	af00      	add	r7, sp, #0
 800eec4:	60f8      	str	r0, [r7, #12]
 800eec6:	60b9      	str	r1, [r7, #8]
 800eec8:	607a      	str	r2, [r7, #4]
 800eeca:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	6a1b      	ldr	r3, [r3, #32]
 800eed0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	69db      	ldr	r3, [r3, #28]
 800eedc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	6a1b      	ldr	r3, [r3, #32]
 800eee2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800eee4:	697b      	ldr	r3, [r7, #20]
 800eee6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800eeea:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	021b      	lsls	r3, r3, #8
 800eef0:	697a      	ldr	r2, [r7, #20]
 800eef2:	4313      	orrs	r3, r2
 800eef4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800eef6:	697b      	ldr	r3, [r7, #20]
 800eef8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800eefc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800eefe:	683b      	ldr	r3, [r7, #0]
 800ef00:	031b      	lsls	r3, r3, #12
 800ef02:	b29b      	uxth	r3, r3
 800ef04:	697a      	ldr	r2, [r7, #20]
 800ef06:	4313      	orrs	r3, r2
 800ef08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800ef0a:	693b      	ldr	r3, [r7, #16]
 800ef0c:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800ef10:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800ef12:	68bb      	ldr	r3, [r7, #8]
 800ef14:	031b      	lsls	r3, r3, #12
 800ef16:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800ef1a:	693a      	ldr	r2, [r7, #16]
 800ef1c:	4313      	orrs	r3, r2
 800ef1e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	697a      	ldr	r2, [r7, #20]
 800ef24:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	693a      	ldr	r2, [r7, #16]
 800ef2a:	621a      	str	r2, [r3, #32]
}
 800ef2c:	bf00      	nop
 800ef2e:	371c      	adds	r7, #28
 800ef30:	46bd      	mov	sp, r7
 800ef32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef36:	4770      	bx	lr

0800ef38 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ef38:	b480      	push	{r7}
 800ef3a:	b087      	sub	sp, #28
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	60f8      	str	r0, [r7, #12]
 800ef40:	60b9      	str	r1, [r7, #8]
 800ef42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ef44:	68bb      	ldr	r3, [r7, #8]
 800ef46:	f003 031f 	and.w	r3, r3, #31
 800ef4a:	2201      	movs	r2, #1
 800ef4c:	fa02 f303 	lsl.w	r3, r2, r3
 800ef50:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	6a1a      	ldr	r2, [r3, #32]
 800ef56:	697b      	ldr	r3, [r7, #20]
 800ef58:	43db      	mvns	r3, r3
 800ef5a:	401a      	ands	r2, r3
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	6a1a      	ldr	r2, [r3, #32]
 800ef64:	68bb      	ldr	r3, [r7, #8]
 800ef66:	f003 031f 	and.w	r3, r3, #31
 800ef6a:	6879      	ldr	r1, [r7, #4]
 800ef6c:	fa01 f303 	lsl.w	r3, r1, r3
 800ef70:	431a      	orrs	r2, r3
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	621a      	str	r2, [r3, #32]
}
 800ef76:	bf00      	nop
 800ef78:	371c      	adds	r7, #28
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef80:	4770      	bx	lr
	...

0800ef84 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b084      	sub	sp, #16
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
 800ef8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ef8e:	683b      	ldr	r3, [r7, #0]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d109      	bne.n	800efa8 <HAL_TIMEx_PWMN_Start+0x24>
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ef9a:	b2db      	uxtb	r3, r3
 800ef9c:	2b01      	cmp	r3, #1
 800ef9e:	bf14      	ite	ne
 800efa0:	2301      	movne	r3, #1
 800efa2:	2300      	moveq	r3, #0
 800efa4:	b2db      	uxtb	r3, r3
 800efa6:	e022      	b.n	800efee <HAL_TIMEx_PWMN_Start+0x6a>
 800efa8:	683b      	ldr	r3, [r7, #0]
 800efaa:	2b04      	cmp	r3, #4
 800efac:	d109      	bne.n	800efc2 <HAL_TIMEx_PWMN_Start+0x3e>
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800efb4:	b2db      	uxtb	r3, r3
 800efb6:	2b01      	cmp	r3, #1
 800efb8:	bf14      	ite	ne
 800efba:	2301      	movne	r3, #1
 800efbc:	2300      	moveq	r3, #0
 800efbe:	b2db      	uxtb	r3, r3
 800efc0:	e015      	b.n	800efee <HAL_TIMEx_PWMN_Start+0x6a>
 800efc2:	683b      	ldr	r3, [r7, #0]
 800efc4:	2b08      	cmp	r3, #8
 800efc6:	d109      	bne.n	800efdc <HAL_TIMEx_PWMN_Start+0x58>
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800efce:	b2db      	uxtb	r3, r3
 800efd0:	2b01      	cmp	r3, #1
 800efd2:	bf14      	ite	ne
 800efd4:	2301      	movne	r3, #1
 800efd6:	2300      	moveq	r3, #0
 800efd8:	b2db      	uxtb	r3, r3
 800efda:	e008      	b.n	800efee <HAL_TIMEx_PWMN_Start+0x6a>
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800efe2:	b2db      	uxtb	r3, r3
 800efe4:	2b01      	cmp	r3, #1
 800efe6:	bf14      	ite	ne
 800efe8:	2301      	movne	r3, #1
 800efea:	2300      	moveq	r3, #0
 800efec:	b2db      	uxtb	r3, r3
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d001      	beq.n	800eff6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800eff2:	2301      	movs	r3, #1
 800eff4:	e07d      	b.n	800f0f2 <HAL_TIMEx_PWMN_Start+0x16e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800eff6:	683b      	ldr	r3, [r7, #0]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d104      	bne.n	800f006 <HAL_TIMEx_PWMN_Start+0x82>
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	2202      	movs	r2, #2
 800f000:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f004:	e013      	b.n	800f02e <HAL_TIMEx_PWMN_Start+0xaa>
 800f006:	683b      	ldr	r3, [r7, #0]
 800f008:	2b04      	cmp	r3, #4
 800f00a:	d104      	bne.n	800f016 <HAL_TIMEx_PWMN_Start+0x92>
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	2202      	movs	r2, #2
 800f010:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f014:	e00b      	b.n	800f02e <HAL_TIMEx_PWMN_Start+0xaa>
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	2b08      	cmp	r3, #8
 800f01a:	d104      	bne.n	800f026 <HAL_TIMEx_PWMN_Start+0xa2>
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	2202      	movs	r2, #2
 800f020:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f024:	e003      	b.n	800f02e <HAL_TIMEx_PWMN_Start+0xaa>
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	2202      	movs	r2, #2
 800f02a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	2204      	movs	r2, #4
 800f034:	6839      	ldr	r1, [r7, #0]
 800f036:	4618      	mov	r0, r3
 800f038:	f000 fa0e 	bl	800f458 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800f04a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	4a2a      	ldr	r2, [pc, #168]	@ (800f0fc <HAL_TIMEx_PWMN_Start+0x178>)
 800f052:	4293      	cmp	r3, r2
 800f054:	d02c      	beq.n	800f0b0 <HAL_TIMEx_PWMN_Start+0x12c>
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f05e:	d027      	beq.n	800f0b0 <HAL_TIMEx_PWMN_Start+0x12c>
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	4a26      	ldr	r2, [pc, #152]	@ (800f100 <HAL_TIMEx_PWMN_Start+0x17c>)
 800f066:	4293      	cmp	r3, r2
 800f068:	d022      	beq.n	800f0b0 <HAL_TIMEx_PWMN_Start+0x12c>
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	4a25      	ldr	r2, [pc, #148]	@ (800f104 <HAL_TIMEx_PWMN_Start+0x180>)
 800f070:	4293      	cmp	r3, r2
 800f072:	d01d      	beq.n	800f0b0 <HAL_TIMEx_PWMN_Start+0x12c>
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	4a23      	ldr	r2, [pc, #140]	@ (800f108 <HAL_TIMEx_PWMN_Start+0x184>)
 800f07a:	4293      	cmp	r3, r2
 800f07c:	d018      	beq.n	800f0b0 <HAL_TIMEx_PWMN_Start+0x12c>
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	4a22      	ldr	r2, [pc, #136]	@ (800f10c <HAL_TIMEx_PWMN_Start+0x188>)
 800f084:	4293      	cmp	r3, r2
 800f086:	d013      	beq.n	800f0b0 <HAL_TIMEx_PWMN_Start+0x12c>
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	4a20      	ldr	r2, [pc, #128]	@ (800f110 <HAL_TIMEx_PWMN_Start+0x18c>)
 800f08e:	4293      	cmp	r3, r2
 800f090:	d00e      	beq.n	800f0b0 <HAL_TIMEx_PWMN_Start+0x12c>
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	4a1f      	ldr	r2, [pc, #124]	@ (800f114 <HAL_TIMEx_PWMN_Start+0x190>)
 800f098:	4293      	cmp	r3, r2
 800f09a:	d009      	beq.n	800f0b0 <HAL_TIMEx_PWMN_Start+0x12c>
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	4a1d      	ldr	r2, [pc, #116]	@ (800f118 <HAL_TIMEx_PWMN_Start+0x194>)
 800f0a2:	4293      	cmp	r3, r2
 800f0a4:	d004      	beq.n	800f0b0 <HAL_TIMEx_PWMN_Start+0x12c>
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	4a1c      	ldr	r2, [pc, #112]	@ (800f11c <HAL_TIMEx_PWMN_Start+0x198>)
 800f0ac:	4293      	cmp	r3, r2
 800f0ae:	d115      	bne.n	800f0dc <HAL_TIMEx_PWMN_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	689a      	ldr	r2, [r3, #8]
 800f0b6:	4b1a      	ldr	r3, [pc, #104]	@ (800f120 <HAL_TIMEx_PWMN_Start+0x19c>)
 800f0b8:	4013      	ands	r3, r2
 800f0ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	2b06      	cmp	r3, #6
 800f0c0:	d015      	beq.n	800f0ee <HAL_TIMEx_PWMN_Start+0x16a>
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f0c8:	d011      	beq.n	800f0ee <HAL_TIMEx_PWMN_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	681a      	ldr	r2, [r3, #0]
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	f042 0201 	orr.w	r2, r2, #1
 800f0d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f0da:	e008      	b.n	800f0ee <HAL_TIMEx_PWMN_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	681a      	ldr	r2, [r3, #0]
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	f042 0201 	orr.w	r2, r2, #1
 800f0ea:	601a      	str	r2, [r3, #0]
 800f0ec:	e000      	b.n	800f0f0 <HAL_TIMEx_PWMN_Start+0x16c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f0ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f0f0:	2300      	movs	r3, #0
}
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	3710      	adds	r7, #16
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	bd80      	pop	{r7, pc}
 800f0fa:	bf00      	nop
 800f0fc:	40010000 	.word	0x40010000
 800f100:	40000400 	.word	0x40000400
 800f104:	40000800 	.word	0x40000800
 800f108:	40000c00 	.word	0x40000c00
 800f10c:	40010400 	.word	0x40010400
 800f110:	40001800 	.word	0x40001800
 800f114:	40014000 	.word	0x40014000
 800f118:	4000e000 	.word	0x4000e000
 800f11c:	4000e400 	.word	0x4000e400
 800f120:	00010007 	.word	0x00010007

0800f124 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f124:	b580      	push	{r7, lr}
 800f126:	b082      	sub	sp, #8
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
 800f12c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	2200      	movs	r2, #0
 800f134:	6839      	ldr	r1, [r7, #0]
 800f136:	4618      	mov	r0, r3
 800f138:	f000 f98e 	bl	800f458 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	6a1a      	ldr	r2, [r3, #32]
 800f142:	f241 1311 	movw	r3, #4369	@ 0x1111
 800f146:	4013      	ands	r3, r2
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d10f      	bne.n	800f16c <HAL_TIMEx_PWMN_Stop+0x48>
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	6a1a      	ldr	r2, [r3, #32]
 800f152:	f240 4344 	movw	r3, #1092	@ 0x444
 800f156:	4013      	ands	r3, r2
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d107      	bne.n	800f16c <HAL_TIMEx_PWMN_Stop+0x48>
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800f16a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	6a1a      	ldr	r2, [r3, #32]
 800f172:	f241 1311 	movw	r3, #4369	@ 0x1111
 800f176:	4013      	ands	r3, r2
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d10f      	bne.n	800f19c <HAL_TIMEx_PWMN_Stop+0x78>
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	6a1a      	ldr	r2, [r3, #32]
 800f182:	f240 4344 	movw	r3, #1092	@ 0x444
 800f186:	4013      	ands	r3, r2
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d107      	bne.n	800f19c <HAL_TIMEx_PWMN_Stop+0x78>
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	681a      	ldr	r2, [r3, #0]
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	f022 0201 	bic.w	r2, r2, #1
 800f19a:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d104      	bne.n	800f1ac <HAL_TIMEx_PWMN_Stop+0x88>
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	2201      	movs	r2, #1
 800f1a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f1aa:	e013      	b.n	800f1d4 <HAL_TIMEx_PWMN_Stop+0xb0>
 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	2b04      	cmp	r3, #4
 800f1b0:	d104      	bne.n	800f1bc <HAL_TIMEx_PWMN_Stop+0x98>
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	2201      	movs	r2, #1
 800f1b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f1ba:	e00b      	b.n	800f1d4 <HAL_TIMEx_PWMN_Stop+0xb0>
 800f1bc:	683b      	ldr	r3, [r7, #0]
 800f1be:	2b08      	cmp	r3, #8
 800f1c0:	d104      	bne.n	800f1cc <HAL_TIMEx_PWMN_Stop+0xa8>
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	2201      	movs	r2, #1
 800f1c6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800f1ca:	e003      	b.n	800f1d4 <HAL_TIMEx_PWMN_Stop+0xb0>
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	2201      	movs	r2, #1
 800f1d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 800f1d4:	2300      	movs	r3, #0
}
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	3708      	adds	r7, #8
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	bd80      	pop	{r7, pc}
	...

0800f1e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f1e0:	b480      	push	{r7}
 800f1e2:	b085      	sub	sp, #20
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]
 800f1e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f1f0:	2b01      	cmp	r3, #1
 800f1f2:	d101      	bne.n	800f1f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f1f4:	2302      	movs	r3, #2
 800f1f6:	e077      	b.n	800f2e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	2201      	movs	r2, #1
 800f1fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	2202      	movs	r2, #2
 800f204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	685b      	ldr	r3, [r3, #4]
 800f20e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	689b      	ldr	r3, [r3, #8]
 800f216:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	4a35      	ldr	r2, [pc, #212]	@ (800f2f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f21e:	4293      	cmp	r3, r2
 800f220:	d004      	beq.n	800f22c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	4a34      	ldr	r2, [pc, #208]	@ (800f2f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f228:	4293      	cmp	r3, r2
 800f22a:	d108      	bne.n	800f23e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f232:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f234:	683b      	ldr	r3, [r7, #0]
 800f236:	685b      	ldr	r3, [r3, #4]
 800f238:	68fa      	ldr	r2, [r7, #12]
 800f23a:	4313      	orrs	r3, r2
 800f23c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f244:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f246:	683b      	ldr	r3, [r7, #0]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	68fa      	ldr	r2, [r7, #12]
 800f24c:	4313      	orrs	r3, r2
 800f24e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	68fa      	ldr	r2, [r7, #12]
 800f256:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	4a25      	ldr	r2, [pc, #148]	@ (800f2f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f25e:	4293      	cmp	r3, r2
 800f260:	d02c      	beq.n	800f2bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f26a:	d027      	beq.n	800f2bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	4a22      	ldr	r2, [pc, #136]	@ (800f2fc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800f272:	4293      	cmp	r3, r2
 800f274:	d022      	beq.n	800f2bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	4a21      	ldr	r2, [pc, #132]	@ (800f300 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800f27c:	4293      	cmp	r3, r2
 800f27e:	d01d      	beq.n	800f2bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	4a1f      	ldr	r2, [pc, #124]	@ (800f304 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800f286:	4293      	cmp	r3, r2
 800f288:	d018      	beq.n	800f2bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	4a1a      	ldr	r2, [pc, #104]	@ (800f2f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f290:	4293      	cmp	r3, r2
 800f292:	d013      	beq.n	800f2bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	4a1b      	ldr	r2, [pc, #108]	@ (800f308 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800f29a:	4293      	cmp	r3, r2
 800f29c:	d00e      	beq.n	800f2bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	4a1a      	ldr	r2, [pc, #104]	@ (800f30c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800f2a4:	4293      	cmp	r3, r2
 800f2a6:	d009      	beq.n	800f2bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	4a18      	ldr	r2, [pc, #96]	@ (800f310 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800f2ae:	4293      	cmp	r3, r2
 800f2b0:	d004      	beq.n	800f2bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	4a17      	ldr	r2, [pc, #92]	@ (800f314 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800f2b8:	4293      	cmp	r3, r2
 800f2ba:	d10c      	bne.n	800f2d6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f2bc:	68bb      	ldr	r3, [r7, #8]
 800f2be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f2c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f2c4:	683b      	ldr	r3, [r7, #0]
 800f2c6:	689b      	ldr	r3, [r3, #8]
 800f2c8:	68ba      	ldr	r2, [r7, #8]
 800f2ca:	4313      	orrs	r3, r2
 800f2cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	68ba      	ldr	r2, [r7, #8]
 800f2d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	2201      	movs	r2, #1
 800f2da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f2e6:	2300      	movs	r3, #0
}
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	3714      	adds	r7, #20
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f2:	4770      	bx	lr
 800f2f4:	40010000 	.word	0x40010000
 800f2f8:	40010400 	.word	0x40010400
 800f2fc:	40000400 	.word	0x40000400
 800f300:	40000800 	.word	0x40000800
 800f304:	40000c00 	.word	0x40000c00
 800f308:	40001800 	.word	0x40001800
 800f30c:	40014000 	.word	0x40014000
 800f310:	4000e000 	.word	0x4000e000
 800f314:	4000e400 	.word	0x4000e400

0800f318 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f318:	b480      	push	{r7}
 800f31a:	b085      	sub	sp, #20
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
 800f320:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f322:	2300      	movs	r3, #0
 800f324:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f32c:	2b01      	cmp	r3, #1
 800f32e:	d101      	bne.n	800f334 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f330:	2302      	movs	r3, #2
 800f332:	e087      	b.n	800f444 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	2201      	movs	r2, #1
 800f338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800f342:	683b      	ldr	r3, [r7, #0]
 800f344:	68db      	ldr	r3, [r3, #12]
 800f346:	4313      	orrs	r3, r2
 800f348:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f350:	683b      	ldr	r3, [r7, #0]
 800f352:	689b      	ldr	r3, [r3, #8]
 800f354:	4313      	orrs	r3, r2
 800f356:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	685b      	ldr	r3, [r3, #4]
 800f362:	4313      	orrs	r3, r2
 800f364:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800f36c:	683b      	ldr	r3, [r7, #0]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	4313      	orrs	r3, r2
 800f372:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f37a:	683b      	ldr	r3, [r7, #0]
 800f37c:	691b      	ldr	r3, [r3, #16]
 800f37e:	4313      	orrs	r3, r2
 800f380:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800f388:	683b      	ldr	r3, [r7, #0]
 800f38a:	695b      	ldr	r3, [r3, #20]
 800f38c:	4313      	orrs	r3, r2
 800f38e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800f396:	683b      	ldr	r3, [r7, #0]
 800f398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f39a:	4313      	orrs	r3, r2
 800f39c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	699b      	ldr	r3, [r3, #24]
 800f3a8:	041b      	lsls	r3, r3, #16
 800f3aa:	4313      	orrs	r3, r2
 800f3ac:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	4a27      	ldr	r2, [pc, #156]	@ (800f450 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800f3b4:	4293      	cmp	r3, r2
 800f3b6:	d004      	beq.n	800f3c2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	4a25      	ldr	r2, [pc, #148]	@ (800f454 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800f3be:	4293      	cmp	r3, r2
 800f3c0:	d106      	bne.n	800f3d0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800f3c8:	683b      	ldr	r3, [r7, #0]
 800f3ca:	69db      	ldr	r3, [r3, #28]
 800f3cc:	4313      	orrs	r3, r2
 800f3ce:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	4a1e      	ldr	r2, [pc, #120]	@ (800f450 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800f3d6:	4293      	cmp	r3, r2
 800f3d8:	d004      	beq.n	800f3e4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	4a1d      	ldr	r2, [pc, #116]	@ (800f454 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800f3e0:	4293      	cmp	r3, r2
 800f3e2:	d126      	bne.n	800f432 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800f3ea:	683b      	ldr	r3, [r7, #0]
 800f3ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f3ee:	051b      	lsls	r3, r3, #20
 800f3f0:	4313      	orrs	r3, r2
 800f3f2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800f3fa:	683b      	ldr	r3, [r7, #0]
 800f3fc:	6a1b      	ldr	r3, [r3, #32]
 800f3fe:	4313      	orrs	r3, r2
 800f400:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800f408:	683b      	ldr	r3, [r7, #0]
 800f40a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f40c:	4313      	orrs	r3, r2
 800f40e:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	4a0e      	ldr	r2, [pc, #56]	@ (800f450 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800f416:	4293      	cmp	r3, r2
 800f418:	d004      	beq.n	800f424 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	4a0d      	ldr	r2, [pc, #52]	@ (800f454 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800f420:	4293      	cmp	r3, r2
 800f422:	d106      	bne.n	800f432 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f42e:	4313      	orrs	r3, r2
 800f430:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	68fa      	ldr	r2, [r7, #12]
 800f438:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	2200      	movs	r2, #0
 800f43e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f442:	2300      	movs	r3, #0
}
 800f444:	4618      	mov	r0, r3
 800f446:	3714      	adds	r7, #20
 800f448:	46bd      	mov	sp, r7
 800f44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44e:	4770      	bx	lr
 800f450:	40010000 	.word	0x40010000
 800f454:	40010400 	.word	0x40010400

0800f458 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800f458:	b480      	push	{r7}
 800f45a:	b087      	sub	sp, #28
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	60f8      	str	r0, [r7, #12]
 800f460:	60b9      	str	r1, [r7, #8]
 800f462:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f464:	68bb      	ldr	r3, [r7, #8]
 800f466:	f003 031f 	and.w	r3, r3, #31
 800f46a:	2204      	movs	r2, #4
 800f46c:	fa02 f303 	lsl.w	r3, r2, r3
 800f470:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	6a1a      	ldr	r2, [r3, #32]
 800f476:	697b      	ldr	r3, [r7, #20]
 800f478:	43db      	mvns	r3, r3
 800f47a:	401a      	ands	r2, r3
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	6a1a      	ldr	r2, [r3, #32]
 800f484:	68bb      	ldr	r3, [r7, #8]
 800f486:	f003 031f 	and.w	r3, r3, #31
 800f48a:	6879      	ldr	r1, [r7, #4]
 800f48c:	fa01 f303 	lsl.w	r3, r1, r3
 800f490:	431a      	orrs	r2, r3
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	621a      	str	r2, [r3, #32]
}
 800f496:	bf00      	nop
 800f498:	371c      	adds	r7, #28
 800f49a:	46bd      	mov	sp, r7
 800f49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a0:	4770      	bx	lr

0800f4a2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f4a2:	b580      	push	{r7, lr}
 800f4a4:	b082      	sub	sp, #8
 800f4a6:	af00      	add	r7, sp, #0
 800f4a8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d101      	bne.n	800f4b4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f4b0:	2301      	movs	r3, #1
 800f4b2:	e042      	b.n	800f53a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d106      	bne.n	800f4cc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f4c6:	6878      	ldr	r0, [r7, #4]
 800f4c8:	f7f4 faa2 	bl	8003a10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	2224      	movs	r2, #36	@ 0x24
 800f4d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	681a      	ldr	r2, [r3, #0]
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	f022 0201 	bic.w	r2, r2, #1
 800f4e2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f4e4:	6878      	ldr	r0, [r7, #4]
 800f4e6:	f000 f983 	bl	800f7f0 <UART_SetConfig>
 800f4ea:	4603      	mov	r3, r0
 800f4ec:	2b01      	cmp	r3, #1
 800f4ee:	d101      	bne.n	800f4f4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800f4f0:	2301      	movs	r3, #1
 800f4f2:	e022      	b.n	800f53a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d002      	beq.n	800f502 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800f4fc:	6878      	ldr	r0, [r7, #4]
 800f4fe:	f000 ffe3 	bl	80104c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	685a      	ldr	r2, [r3, #4]
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f510:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	689a      	ldr	r2, [r3, #8]
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f520:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	681a      	ldr	r2, [r3, #0]
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	f042 0201 	orr.w	r2, r2, #1
 800f530:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f532:	6878      	ldr	r0, [r7, #4]
 800f534:	f001 f86a 	bl	801060c <UART_CheckIdleState>
 800f538:	4603      	mov	r3, r0
}
 800f53a:	4618      	mov	r0, r3
 800f53c:	3708      	adds	r7, #8
 800f53e:	46bd      	mov	sp, r7
 800f540:	bd80      	pop	{r7, pc}

0800f542 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f542:	b580      	push	{r7, lr}
 800f544:	b08a      	sub	sp, #40	@ 0x28
 800f546:	af02      	add	r7, sp, #8
 800f548:	60f8      	str	r0, [r7, #12]
 800f54a:	60b9      	str	r1, [r7, #8]
 800f54c:	603b      	str	r3, [r7, #0]
 800f54e:	4613      	mov	r3, r2
 800f550:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f558:	2b20      	cmp	r3, #32
 800f55a:	d17b      	bne.n	800f654 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800f55c:	68bb      	ldr	r3, [r7, #8]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d002      	beq.n	800f568 <HAL_UART_Transmit+0x26>
 800f562:	88fb      	ldrh	r3, [r7, #6]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d101      	bne.n	800f56c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800f568:	2301      	movs	r3, #1
 800f56a:	e074      	b.n	800f656 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	2200      	movs	r2, #0
 800f570:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	2221      	movs	r2, #33	@ 0x21
 800f578:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f57c:	f7f4 fe1c 	bl	80041b8 <HAL_GetTick>
 800f580:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	88fa      	ldrh	r2, [r7, #6]
 800f586:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	88fa      	ldrh	r2, [r7, #6]
 800f58e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	689b      	ldr	r3, [r3, #8]
 800f596:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f59a:	d108      	bne.n	800f5ae <HAL_UART_Transmit+0x6c>
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	691b      	ldr	r3, [r3, #16]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d104      	bne.n	800f5ae <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f5a8:	68bb      	ldr	r3, [r7, #8]
 800f5aa:	61bb      	str	r3, [r7, #24]
 800f5ac:	e003      	b.n	800f5b6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800f5ae:	68bb      	ldr	r3, [r7, #8]
 800f5b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f5b6:	e030      	b.n	800f61a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f5b8:	683b      	ldr	r3, [r7, #0]
 800f5ba:	9300      	str	r3, [sp, #0]
 800f5bc:	697b      	ldr	r3, [r7, #20]
 800f5be:	2200      	movs	r2, #0
 800f5c0:	2180      	movs	r1, #128	@ 0x80
 800f5c2:	68f8      	ldr	r0, [r7, #12]
 800f5c4:	f001 f8cc 	bl	8010760 <UART_WaitOnFlagUntilTimeout>
 800f5c8:	4603      	mov	r3, r0
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d005      	beq.n	800f5da <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	2220      	movs	r2, #32
 800f5d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800f5d6:	2303      	movs	r3, #3
 800f5d8:	e03d      	b.n	800f656 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800f5da:	69fb      	ldr	r3, [r7, #28]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d10b      	bne.n	800f5f8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f5e0:	69bb      	ldr	r3, [r7, #24]
 800f5e2:	881b      	ldrh	r3, [r3, #0]
 800f5e4:	461a      	mov	r2, r3
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f5ee:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800f5f0:	69bb      	ldr	r3, [r7, #24]
 800f5f2:	3302      	adds	r3, #2
 800f5f4:	61bb      	str	r3, [r7, #24]
 800f5f6:	e007      	b.n	800f608 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f5f8:	69fb      	ldr	r3, [r7, #28]
 800f5fa:	781a      	ldrb	r2, [r3, #0]
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800f602:	69fb      	ldr	r3, [r7, #28]
 800f604:	3301      	adds	r3, #1
 800f606:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f60e:	b29b      	uxth	r3, r3
 800f610:	3b01      	subs	r3, #1
 800f612:	b29a      	uxth	r2, r3
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800f620:	b29b      	uxth	r3, r3
 800f622:	2b00      	cmp	r3, #0
 800f624:	d1c8      	bne.n	800f5b8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f626:	683b      	ldr	r3, [r7, #0]
 800f628:	9300      	str	r3, [sp, #0]
 800f62a:	697b      	ldr	r3, [r7, #20]
 800f62c:	2200      	movs	r2, #0
 800f62e:	2140      	movs	r1, #64	@ 0x40
 800f630:	68f8      	ldr	r0, [r7, #12]
 800f632:	f001 f895 	bl	8010760 <UART_WaitOnFlagUntilTimeout>
 800f636:	4603      	mov	r3, r0
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d005      	beq.n	800f648 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	2220      	movs	r2, #32
 800f640:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800f644:	2303      	movs	r3, #3
 800f646:	e006      	b.n	800f656 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	2220      	movs	r2, #32
 800f64c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800f650:	2300      	movs	r3, #0
 800f652:	e000      	b.n	800f656 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800f654:	2302      	movs	r3, #2
  }
}
 800f656:	4618      	mov	r0, r3
 800f658:	3720      	adds	r7, #32
 800f65a:	46bd      	mov	sp, r7
 800f65c:	bd80      	pop	{r7, pc}

0800f65e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f65e:	b580      	push	{r7, lr}
 800f660:	b08a      	sub	sp, #40	@ 0x28
 800f662:	af02      	add	r7, sp, #8
 800f664:	60f8      	str	r0, [r7, #12]
 800f666:	60b9      	str	r1, [r7, #8]
 800f668:	603b      	str	r3, [r7, #0]
 800f66a:	4613      	mov	r3, r2
 800f66c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f674:	2b20      	cmp	r3, #32
 800f676:	f040 80b5 	bne.w	800f7e4 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800f67a:	68bb      	ldr	r3, [r7, #8]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d002      	beq.n	800f686 <HAL_UART_Receive+0x28>
 800f680:	88fb      	ldrh	r3, [r7, #6]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d101      	bne.n	800f68a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800f686:	2301      	movs	r3, #1
 800f688:	e0ad      	b.n	800f7e6 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	2200      	movs	r2, #0
 800f68e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	2222      	movs	r2, #34	@ 0x22
 800f696:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	2200      	movs	r2, #0
 800f69e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f6a0:	f7f4 fd8a 	bl	80041b8 <HAL_GetTick>
 800f6a4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	88fa      	ldrh	r2, [r7, #6]
 800f6aa:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	88fa      	ldrh	r2, [r7, #6]
 800f6b2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	689b      	ldr	r3, [r3, #8]
 800f6ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f6be:	d10e      	bne.n	800f6de <HAL_UART_Receive+0x80>
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	691b      	ldr	r3, [r3, #16]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d105      	bne.n	800f6d4 <HAL_UART_Receive+0x76>
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800f6ce:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f6d2:	e02d      	b.n	800f730 <HAL_UART_Receive+0xd2>
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	22ff      	movs	r2, #255	@ 0xff
 800f6d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f6dc:	e028      	b.n	800f730 <HAL_UART_Receive+0xd2>
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	689b      	ldr	r3, [r3, #8]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d10d      	bne.n	800f702 <HAL_UART_Receive+0xa4>
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	691b      	ldr	r3, [r3, #16]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d104      	bne.n	800f6f8 <HAL_UART_Receive+0x9a>
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	22ff      	movs	r2, #255	@ 0xff
 800f6f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f6f6:	e01b      	b.n	800f730 <HAL_UART_Receive+0xd2>
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	227f      	movs	r2, #127	@ 0x7f
 800f6fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f700:	e016      	b.n	800f730 <HAL_UART_Receive+0xd2>
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	689b      	ldr	r3, [r3, #8]
 800f706:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f70a:	d10d      	bne.n	800f728 <HAL_UART_Receive+0xca>
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	691b      	ldr	r3, [r3, #16]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d104      	bne.n	800f71e <HAL_UART_Receive+0xc0>
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	227f      	movs	r2, #127	@ 0x7f
 800f718:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f71c:	e008      	b.n	800f730 <HAL_UART_Receive+0xd2>
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	223f      	movs	r2, #63	@ 0x3f
 800f722:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800f726:	e003      	b.n	800f730 <HAL_UART_Receive+0xd2>
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	2200      	movs	r2, #0
 800f72c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800f736:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	689b      	ldr	r3, [r3, #8]
 800f73c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f740:	d108      	bne.n	800f754 <HAL_UART_Receive+0xf6>
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	691b      	ldr	r3, [r3, #16]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d104      	bne.n	800f754 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800f74a:	2300      	movs	r3, #0
 800f74c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f74e:	68bb      	ldr	r3, [r7, #8]
 800f750:	61bb      	str	r3, [r7, #24]
 800f752:	e003      	b.n	800f75c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800f754:	68bb      	ldr	r3, [r7, #8]
 800f756:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f758:	2300      	movs	r3, #0
 800f75a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800f75c:	e036      	b.n	800f7cc <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800f75e:	683b      	ldr	r3, [r7, #0]
 800f760:	9300      	str	r3, [sp, #0]
 800f762:	697b      	ldr	r3, [r7, #20]
 800f764:	2200      	movs	r2, #0
 800f766:	2120      	movs	r1, #32
 800f768:	68f8      	ldr	r0, [r7, #12]
 800f76a:	f000 fff9 	bl	8010760 <UART_WaitOnFlagUntilTimeout>
 800f76e:	4603      	mov	r3, r0
 800f770:	2b00      	cmp	r3, #0
 800f772:	d005      	beq.n	800f780 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	2220      	movs	r2, #32
 800f778:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800f77c:	2303      	movs	r3, #3
 800f77e:	e032      	b.n	800f7e6 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800f780:	69fb      	ldr	r3, [r7, #28]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d10c      	bne.n	800f7a0 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f78c:	b29a      	uxth	r2, r3
 800f78e:	8a7b      	ldrh	r3, [r7, #18]
 800f790:	4013      	ands	r3, r2
 800f792:	b29a      	uxth	r2, r3
 800f794:	69bb      	ldr	r3, [r7, #24]
 800f796:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800f798:	69bb      	ldr	r3, [r7, #24]
 800f79a:	3302      	adds	r3, #2
 800f79c:	61bb      	str	r3, [r7, #24]
 800f79e:	e00c      	b.n	800f7ba <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f7a6:	b2da      	uxtb	r2, r3
 800f7a8:	8a7b      	ldrh	r3, [r7, #18]
 800f7aa:	b2db      	uxtb	r3, r3
 800f7ac:	4013      	ands	r3, r2
 800f7ae:	b2da      	uxtb	r2, r3
 800f7b0:	69fb      	ldr	r3, [r7, #28]
 800f7b2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800f7b4:	69fb      	ldr	r3, [r7, #28]
 800f7b6:	3301      	adds	r3, #1
 800f7b8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f7c0:	b29b      	uxth	r3, r3
 800f7c2:	3b01      	subs	r3, #1
 800f7c4:	b29a      	uxth	r2, r3
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800f7d2:	b29b      	uxth	r3, r3
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d1c2      	bne.n	800f75e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	2220      	movs	r2, #32
 800f7dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	e000      	b.n	800f7e6 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800f7e4:	2302      	movs	r3, #2
  }
}
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	3720      	adds	r7, #32
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	bd80      	pop	{r7, pc}
	...

0800f7f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f7f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f7f4:	b092      	sub	sp, #72	@ 0x48
 800f7f6:	af00      	add	r7, sp, #0
 800f7f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f800:	697b      	ldr	r3, [r7, #20]
 800f802:	689a      	ldr	r2, [r3, #8]
 800f804:	697b      	ldr	r3, [r7, #20]
 800f806:	691b      	ldr	r3, [r3, #16]
 800f808:	431a      	orrs	r2, r3
 800f80a:	697b      	ldr	r3, [r7, #20]
 800f80c:	695b      	ldr	r3, [r3, #20]
 800f80e:	431a      	orrs	r2, r3
 800f810:	697b      	ldr	r3, [r7, #20]
 800f812:	69db      	ldr	r3, [r3, #28]
 800f814:	4313      	orrs	r3, r2
 800f816:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f818:	697b      	ldr	r3, [r7, #20]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	681a      	ldr	r2, [r3, #0]
 800f81e:	4bbe      	ldr	r3, [pc, #760]	@ (800fb18 <UART_SetConfig+0x328>)
 800f820:	4013      	ands	r3, r2
 800f822:	697a      	ldr	r2, [r7, #20]
 800f824:	6812      	ldr	r2, [r2, #0]
 800f826:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f828:	430b      	orrs	r3, r1
 800f82a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f82c:	697b      	ldr	r3, [r7, #20]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	685b      	ldr	r3, [r3, #4]
 800f832:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800f836:	697b      	ldr	r3, [r7, #20]
 800f838:	68da      	ldr	r2, [r3, #12]
 800f83a:	697b      	ldr	r3, [r7, #20]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	430a      	orrs	r2, r1
 800f840:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f842:	697b      	ldr	r3, [r7, #20]
 800f844:	699b      	ldr	r3, [r3, #24]
 800f846:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f848:	697b      	ldr	r3, [r7, #20]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	4ab3      	ldr	r2, [pc, #716]	@ (800fb1c <UART_SetConfig+0x32c>)
 800f84e:	4293      	cmp	r3, r2
 800f850:	d004      	beq.n	800f85c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f852:	697b      	ldr	r3, [r7, #20]
 800f854:	6a1b      	ldr	r3, [r3, #32]
 800f856:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f858:	4313      	orrs	r3, r2
 800f85a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f85c:	697b      	ldr	r3, [r7, #20]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	689a      	ldr	r2, [r3, #8]
 800f862:	4baf      	ldr	r3, [pc, #700]	@ (800fb20 <UART_SetConfig+0x330>)
 800f864:	4013      	ands	r3, r2
 800f866:	697a      	ldr	r2, [r7, #20]
 800f868:	6812      	ldr	r2, [r2, #0]
 800f86a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800f86c:	430b      	orrs	r3, r1
 800f86e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f870:	697b      	ldr	r3, [r7, #20]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f876:	f023 010f 	bic.w	r1, r3, #15
 800f87a:	697b      	ldr	r3, [r7, #20]
 800f87c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f87e:	697b      	ldr	r3, [r7, #20]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	430a      	orrs	r2, r1
 800f884:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f886:	697b      	ldr	r3, [r7, #20]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	4aa6      	ldr	r2, [pc, #664]	@ (800fb24 <UART_SetConfig+0x334>)
 800f88c:	4293      	cmp	r3, r2
 800f88e:	d177      	bne.n	800f980 <UART_SetConfig+0x190>
 800f890:	4ba5      	ldr	r3, [pc, #660]	@ (800fb28 <UART_SetConfig+0x338>)
 800f892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f894:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f898:	2b28      	cmp	r3, #40	@ 0x28
 800f89a:	d86d      	bhi.n	800f978 <UART_SetConfig+0x188>
 800f89c:	a201      	add	r2, pc, #4	@ (adr r2, 800f8a4 <UART_SetConfig+0xb4>)
 800f89e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8a2:	bf00      	nop
 800f8a4:	0800f949 	.word	0x0800f949
 800f8a8:	0800f979 	.word	0x0800f979
 800f8ac:	0800f979 	.word	0x0800f979
 800f8b0:	0800f979 	.word	0x0800f979
 800f8b4:	0800f979 	.word	0x0800f979
 800f8b8:	0800f979 	.word	0x0800f979
 800f8bc:	0800f979 	.word	0x0800f979
 800f8c0:	0800f979 	.word	0x0800f979
 800f8c4:	0800f951 	.word	0x0800f951
 800f8c8:	0800f979 	.word	0x0800f979
 800f8cc:	0800f979 	.word	0x0800f979
 800f8d0:	0800f979 	.word	0x0800f979
 800f8d4:	0800f979 	.word	0x0800f979
 800f8d8:	0800f979 	.word	0x0800f979
 800f8dc:	0800f979 	.word	0x0800f979
 800f8e0:	0800f979 	.word	0x0800f979
 800f8e4:	0800f959 	.word	0x0800f959
 800f8e8:	0800f979 	.word	0x0800f979
 800f8ec:	0800f979 	.word	0x0800f979
 800f8f0:	0800f979 	.word	0x0800f979
 800f8f4:	0800f979 	.word	0x0800f979
 800f8f8:	0800f979 	.word	0x0800f979
 800f8fc:	0800f979 	.word	0x0800f979
 800f900:	0800f979 	.word	0x0800f979
 800f904:	0800f961 	.word	0x0800f961
 800f908:	0800f979 	.word	0x0800f979
 800f90c:	0800f979 	.word	0x0800f979
 800f910:	0800f979 	.word	0x0800f979
 800f914:	0800f979 	.word	0x0800f979
 800f918:	0800f979 	.word	0x0800f979
 800f91c:	0800f979 	.word	0x0800f979
 800f920:	0800f979 	.word	0x0800f979
 800f924:	0800f969 	.word	0x0800f969
 800f928:	0800f979 	.word	0x0800f979
 800f92c:	0800f979 	.word	0x0800f979
 800f930:	0800f979 	.word	0x0800f979
 800f934:	0800f979 	.word	0x0800f979
 800f938:	0800f979 	.word	0x0800f979
 800f93c:	0800f979 	.word	0x0800f979
 800f940:	0800f979 	.word	0x0800f979
 800f944:	0800f971 	.word	0x0800f971
 800f948:	2301      	movs	r3, #1
 800f94a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f94e:	e326      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800f950:	2304      	movs	r3, #4
 800f952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f956:	e322      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800f958:	2308      	movs	r3, #8
 800f95a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f95e:	e31e      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800f960:	2310      	movs	r3, #16
 800f962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f966:	e31a      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800f968:	2320      	movs	r3, #32
 800f96a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f96e:	e316      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800f970:	2340      	movs	r3, #64	@ 0x40
 800f972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f976:	e312      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800f978:	2380      	movs	r3, #128	@ 0x80
 800f97a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f97e:	e30e      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800f980:	697b      	ldr	r3, [r7, #20]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	4a69      	ldr	r2, [pc, #420]	@ (800fb2c <UART_SetConfig+0x33c>)
 800f986:	4293      	cmp	r3, r2
 800f988:	d130      	bne.n	800f9ec <UART_SetConfig+0x1fc>
 800f98a:	4b67      	ldr	r3, [pc, #412]	@ (800fb28 <UART_SetConfig+0x338>)
 800f98c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f98e:	f003 0307 	and.w	r3, r3, #7
 800f992:	2b05      	cmp	r3, #5
 800f994:	d826      	bhi.n	800f9e4 <UART_SetConfig+0x1f4>
 800f996:	a201      	add	r2, pc, #4	@ (adr r2, 800f99c <UART_SetConfig+0x1ac>)
 800f998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f99c:	0800f9b5 	.word	0x0800f9b5
 800f9a0:	0800f9bd 	.word	0x0800f9bd
 800f9a4:	0800f9c5 	.word	0x0800f9c5
 800f9a8:	0800f9cd 	.word	0x0800f9cd
 800f9ac:	0800f9d5 	.word	0x0800f9d5
 800f9b0:	0800f9dd 	.word	0x0800f9dd
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9ba:	e2f0      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800f9bc:	2304      	movs	r3, #4
 800f9be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9c2:	e2ec      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800f9c4:	2308      	movs	r3, #8
 800f9c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9ca:	e2e8      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800f9cc:	2310      	movs	r3, #16
 800f9ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9d2:	e2e4      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800f9d4:	2320      	movs	r3, #32
 800f9d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9da:	e2e0      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800f9dc:	2340      	movs	r3, #64	@ 0x40
 800f9de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9e2:	e2dc      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800f9e4:	2380      	movs	r3, #128	@ 0x80
 800f9e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800f9ea:	e2d8      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800f9ec:	697b      	ldr	r3, [r7, #20]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	4a4f      	ldr	r2, [pc, #316]	@ (800fb30 <UART_SetConfig+0x340>)
 800f9f2:	4293      	cmp	r3, r2
 800f9f4:	d130      	bne.n	800fa58 <UART_SetConfig+0x268>
 800f9f6:	4b4c      	ldr	r3, [pc, #304]	@ (800fb28 <UART_SetConfig+0x338>)
 800f9f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f9fa:	f003 0307 	and.w	r3, r3, #7
 800f9fe:	2b05      	cmp	r3, #5
 800fa00:	d826      	bhi.n	800fa50 <UART_SetConfig+0x260>
 800fa02:	a201      	add	r2, pc, #4	@ (adr r2, 800fa08 <UART_SetConfig+0x218>)
 800fa04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa08:	0800fa21 	.word	0x0800fa21
 800fa0c:	0800fa29 	.word	0x0800fa29
 800fa10:	0800fa31 	.word	0x0800fa31
 800fa14:	0800fa39 	.word	0x0800fa39
 800fa18:	0800fa41 	.word	0x0800fa41
 800fa1c:	0800fa49 	.word	0x0800fa49
 800fa20:	2300      	movs	r3, #0
 800fa22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa26:	e2ba      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800fa28:	2304      	movs	r3, #4
 800fa2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa2e:	e2b6      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800fa30:	2308      	movs	r3, #8
 800fa32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa36:	e2b2      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800fa38:	2310      	movs	r3, #16
 800fa3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa3e:	e2ae      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800fa40:	2320      	movs	r3, #32
 800fa42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa46:	e2aa      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800fa48:	2340      	movs	r3, #64	@ 0x40
 800fa4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa4e:	e2a6      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800fa50:	2380      	movs	r3, #128	@ 0x80
 800fa52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa56:	e2a2      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800fa58:	697b      	ldr	r3, [r7, #20]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	4a35      	ldr	r2, [pc, #212]	@ (800fb34 <UART_SetConfig+0x344>)
 800fa5e:	4293      	cmp	r3, r2
 800fa60:	d130      	bne.n	800fac4 <UART_SetConfig+0x2d4>
 800fa62:	4b31      	ldr	r3, [pc, #196]	@ (800fb28 <UART_SetConfig+0x338>)
 800fa64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fa66:	f003 0307 	and.w	r3, r3, #7
 800fa6a:	2b05      	cmp	r3, #5
 800fa6c:	d826      	bhi.n	800fabc <UART_SetConfig+0x2cc>
 800fa6e:	a201      	add	r2, pc, #4	@ (adr r2, 800fa74 <UART_SetConfig+0x284>)
 800fa70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa74:	0800fa8d 	.word	0x0800fa8d
 800fa78:	0800fa95 	.word	0x0800fa95
 800fa7c:	0800fa9d 	.word	0x0800fa9d
 800fa80:	0800faa5 	.word	0x0800faa5
 800fa84:	0800faad 	.word	0x0800faad
 800fa88:	0800fab5 	.word	0x0800fab5
 800fa8c:	2300      	movs	r3, #0
 800fa8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa92:	e284      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800fa94:	2304      	movs	r3, #4
 800fa96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fa9a:	e280      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800fa9c:	2308      	movs	r3, #8
 800fa9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800faa2:	e27c      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800faa4:	2310      	movs	r3, #16
 800faa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800faaa:	e278      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800faac:	2320      	movs	r3, #32
 800faae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fab2:	e274      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800fab4:	2340      	movs	r3, #64	@ 0x40
 800fab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800faba:	e270      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800fabc:	2380      	movs	r3, #128	@ 0x80
 800fabe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fac2:	e26c      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800fac4:	697b      	ldr	r3, [r7, #20]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	4a1b      	ldr	r2, [pc, #108]	@ (800fb38 <UART_SetConfig+0x348>)
 800faca:	4293      	cmp	r3, r2
 800facc:	d142      	bne.n	800fb54 <UART_SetConfig+0x364>
 800face:	4b16      	ldr	r3, [pc, #88]	@ (800fb28 <UART_SetConfig+0x338>)
 800fad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fad2:	f003 0307 	and.w	r3, r3, #7
 800fad6:	2b05      	cmp	r3, #5
 800fad8:	d838      	bhi.n	800fb4c <UART_SetConfig+0x35c>
 800fada:	a201      	add	r2, pc, #4	@ (adr r2, 800fae0 <UART_SetConfig+0x2f0>)
 800fadc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fae0:	0800faf9 	.word	0x0800faf9
 800fae4:	0800fb01 	.word	0x0800fb01
 800fae8:	0800fb09 	.word	0x0800fb09
 800faec:	0800fb11 	.word	0x0800fb11
 800faf0:	0800fb3d 	.word	0x0800fb3d
 800faf4:	0800fb45 	.word	0x0800fb45
 800faf8:	2300      	movs	r3, #0
 800fafa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fafe:	e24e      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800fb00:	2304      	movs	r3, #4
 800fb02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb06:	e24a      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800fb08:	2308      	movs	r3, #8
 800fb0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb0e:	e246      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800fb10:	2310      	movs	r3, #16
 800fb12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb16:	e242      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800fb18:	cfff69f3 	.word	0xcfff69f3
 800fb1c:	58000c00 	.word	0x58000c00
 800fb20:	11fff4ff 	.word	0x11fff4ff
 800fb24:	40011000 	.word	0x40011000
 800fb28:	58024400 	.word	0x58024400
 800fb2c:	40004400 	.word	0x40004400
 800fb30:	40004800 	.word	0x40004800
 800fb34:	40004c00 	.word	0x40004c00
 800fb38:	40005000 	.word	0x40005000
 800fb3c:	2320      	movs	r3, #32
 800fb3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb42:	e22c      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800fb44:	2340      	movs	r3, #64	@ 0x40
 800fb46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb4a:	e228      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800fb4c:	2380      	movs	r3, #128	@ 0x80
 800fb4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fb52:	e224      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800fb54:	697b      	ldr	r3, [r7, #20]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	4ab1      	ldr	r2, [pc, #708]	@ (800fe20 <UART_SetConfig+0x630>)
 800fb5a:	4293      	cmp	r3, r2
 800fb5c:	d176      	bne.n	800fc4c <UART_SetConfig+0x45c>
 800fb5e:	4bb1      	ldr	r3, [pc, #708]	@ (800fe24 <UART_SetConfig+0x634>)
 800fb60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fb62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fb66:	2b28      	cmp	r3, #40	@ 0x28
 800fb68:	d86c      	bhi.n	800fc44 <UART_SetConfig+0x454>
 800fb6a:	a201      	add	r2, pc, #4	@ (adr r2, 800fb70 <UART_SetConfig+0x380>)
 800fb6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb70:	0800fc15 	.word	0x0800fc15
 800fb74:	0800fc45 	.word	0x0800fc45
 800fb78:	0800fc45 	.word	0x0800fc45
 800fb7c:	0800fc45 	.word	0x0800fc45
 800fb80:	0800fc45 	.word	0x0800fc45
 800fb84:	0800fc45 	.word	0x0800fc45
 800fb88:	0800fc45 	.word	0x0800fc45
 800fb8c:	0800fc45 	.word	0x0800fc45
 800fb90:	0800fc1d 	.word	0x0800fc1d
 800fb94:	0800fc45 	.word	0x0800fc45
 800fb98:	0800fc45 	.word	0x0800fc45
 800fb9c:	0800fc45 	.word	0x0800fc45
 800fba0:	0800fc45 	.word	0x0800fc45
 800fba4:	0800fc45 	.word	0x0800fc45
 800fba8:	0800fc45 	.word	0x0800fc45
 800fbac:	0800fc45 	.word	0x0800fc45
 800fbb0:	0800fc25 	.word	0x0800fc25
 800fbb4:	0800fc45 	.word	0x0800fc45
 800fbb8:	0800fc45 	.word	0x0800fc45
 800fbbc:	0800fc45 	.word	0x0800fc45
 800fbc0:	0800fc45 	.word	0x0800fc45
 800fbc4:	0800fc45 	.word	0x0800fc45
 800fbc8:	0800fc45 	.word	0x0800fc45
 800fbcc:	0800fc45 	.word	0x0800fc45
 800fbd0:	0800fc2d 	.word	0x0800fc2d
 800fbd4:	0800fc45 	.word	0x0800fc45
 800fbd8:	0800fc45 	.word	0x0800fc45
 800fbdc:	0800fc45 	.word	0x0800fc45
 800fbe0:	0800fc45 	.word	0x0800fc45
 800fbe4:	0800fc45 	.word	0x0800fc45
 800fbe8:	0800fc45 	.word	0x0800fc45
 800fbec:	0800fc45 	.word	0x0800fc45
 800fbf0:	0800fc35 	.word	0x0800fc35
 800fbf4:	0800fc45 	.word	0x0800fc45
 800fbf8:	0800fc45 	.word	0x0800fc45
 800fbfc:	0800fc45 	.word	0x0800fc45
 800fc00:	0800fc45 	.word	0x0800fc45
 800fc04:	0800fc45 	.word	0x0800fc45
 800fc08:	0800fc45 	.word	0x0800fc45
 800fc0c:	0800fc45 	.word	0x0800fc45
 800fc10:	0800fc3d 	.word	0x0800fc3d
 800fc14:	2301      	movs	r3, #1
 800fc16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc1a:	e1c0      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800fc1c:	2304      	movs	r3, #4
 800fc1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc22:	e1bc      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800fc24:	2308      	movs	r3, #8
 800fc26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc2a:	e1b8      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800fc2c:	2310      	movs	r3, #16
 800fc2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc32:	e1b4      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800fc34:	2320      	movs	r3, #32
 800fc36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc3a:	e1b0      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800fc3c:	2340      	movs	r3, #64	@ 0x40
 800fc3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc42:	e1ac      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800fc44:	2380      	movs	r3, #128	@ 0x80
 800fc46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc4a:	e1a8      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800fc4c:	697b      	ldr	r3, [r7, #20]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	4a75      	ldr	r2, [pc, #468]	@ (800fe28 <UART_SetConfig+0x638>)
 800fc52:	4293      	cmp	r3, r2
 800fc54:	d130      	bne.n	800fcb8 <UART_SetConfig+0x4c8>
 800fc56:	4b73      	ldr	r3, [pc, #460]	@ (800fe24 <UART_SetConfig+0x634>)
 800fc58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fc5a:	f003 0307 	and.w	r3, r3, #7
 800fc5e:	2b05      	cmp	r3, #5
 800fc60:	d826      	bhi.n	800fcb0 <UART_SetConfig+0x4c0>
 800fc62:	a201      	add	r2, pc, #4	@ (adr r2, 800fc68 <UART_SetConfig+0x478>)
 800fc64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc68:	0800fc81 	.word	0x0800fc81
 800fc6c:	0800fc89 	.word	0x0800fc89
 800fc70:	0800fc91 	.word	0x0800fc91
 800fc74:	0800fc99 	.word	0x0800fc99
 800fc78:	0800fca1 	.word	0x0800fca1
 800fc7c:	0800fca9 	.word	0x0800fca9
 800fc80:	2300      	movs	r3, #0
 800fc82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc86:	e18a      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800fc88:	2304      	movs	r3, #4
 800fc8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc8e:	e186      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800fc90:	2308      	movs	r3, #8
 800fc92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc96:	e182      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800fc98:	2310      	movs	r3, #16
 800fc9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fc9e:	e17e      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800fca0:	2320      	movs	r3, #32
 800fca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fca6:	e17a      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800fca8:	2340      	movs	r3, #64	@ 0x40
 800fcaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcae:	e176      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800fcb0:	2380      	movs	r3, #128	@ 0x80
 800fcb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcb6:	e172      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800fcb8:	697b      	ldr	r3, [r7, #20]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	4a5b      	ldr	r2, [pc, #364]	@ (800fe2c <UART_SetConfig+0x63c>)
 800fcbe:	4293      	cmp	r3, r2
 800fcc0:	d130      	bne.n	800fd24 <UART_SetConfig+0x534>
 800fcc2:	4b58      	ldr	r3, [pc, #352]	@ (800fe24 <UART_SetConfig+0x634>)
 800fcc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fcc6:	f003 0307 	and.w	r3, r3, #7
 800fcca:	2b05      	cmp	r3, #5
 800fccc:	d826      	bhi.n	800fd1c <UART_SetConfig+0x52c>
 800fcce:	a201      	add	r2, pc, #4	@ (adr r2, 800fcd4 <UART_SetConfig+0x4e4>)
 800fcd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcd4:	0800fced 	.word	0x0800fced
 800fcd8:	0800fcf5 	.word	0x0800fcf5
 800fcdc:	0800fcfd 	.word	0x0800fcfd
 800fce0:	0800fd05 	.word	0x0800fd05
 800fce4:	0800fd0d 	.word	0x0800fd0d
 800fce8:	0800fd15 	.word	0x0800fd15
 800fcec:	2300      	movs	r3, #0
 800fcee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcf2:	e154      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800fcf4:	2304      	movs	r3, #4
 800fcf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fcfa:	e150      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800fcfc:	2308      	movs	r3, #8
 800fcfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd02:	e14c      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800fd04:	2310      	movs	r3, #16
 800fd06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd0a:	e148      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800fd0c:	2320      	movs	r3, #32
 800fd0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd12:	e144      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800fd14:	2340      	movs	r3, #64	@ 0x40
 800fd16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd1a:	e140      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800fd1c:	2380      	movs	r3, #128	@ 0x80
 800fd1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fd22:	e13c      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800fd24:	697b      	ldr	r3, [r7, #20]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	4a41      	ldr	r2, [pc, #260]	@ (800fe30 <UART_SetConfig+0x640>)
 800fd2a:	4293      	cmp	r3, r2
 800fd2c:	f040 8082 	bne.w	800fe34 <UART_SetConfig+0x644>
 800fd30:	4b3c      	ldr	r3, [pc, #240]	@ (800fe24 <UART_SetConfig+0x634>)
 800fd32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fd34:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fd38:	2b28      	cmp	r3, #40	@ 0x28
 800fd3a:	d86d      	bhi.n	800fe18 <UART_SetConfig+0x628>
 800fd3c:	a201      	add	r2, pc, #4	@ (adr r2, 800fd44 <UART_SetConfig+0x554>)
 800fd3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd42:	bf00      	nop
 800fd44:	0800fde9 	.word	0x0800fde9
 800fd48:	0800fe19 	.word	0x0800fe19
 800fd4c:	0800fe19 	.word	0x0800fe19
 800fd50:	0800fe19 	.word	0x0800fe19
 800fd54:	0800fe19 	.word	0x0800fe19
 800fd58:	0800fe19 	.word	0x0800fe19
 800fd5c:	0800fe19 	.word	0x0800fe19
 800fd60:	0800fe19 	.word	0x0800fe19
 800fd64:	0800fdf1 	.word	0x0800fdf1
 800fd68:	0800fe19 	.word	0x0800fe19
 800fd6c:	0800fe19 	.word	0x0800fe19
 800fd70:	0800fe19 	.word	0x0800fe19
 800fd74:	0800fe19 	.word	0x0800fe19
 800fd78:	0800fe19 	.word	0x0800fe19
 800fd7c:	0800fe19 	.word	0x0800fe19
 800fd80:	0800fe19 	.word	0x0800fe19
 800fd84:	0800fdf9 	.word	0x0800fdf9
 800fd88:	0800fe19 	.word	0x0800fe19
 800fd8c:	0800fe19 	.word	0x0800fe19
 800fd90:	0800fe19 	.word	0x0800fe19
 800fd94:	0800fe19 	.word	0x0800fe19
 800fd98:	0800fe19 	.word	0x0800fe19
 800fd9c:	0800fe19 	.word	0x0800fe19
 800fda0:	0800fe19 	.word	0x0800fe19
 800fda4:	0800fe01 	.word	0x0800fe01
 800fda8:	0800fe19 	.word	0x0800fe19
 800fdac:	0800fe19 	.word	0x0800fe19
 800fdb0:	0800fe19 	.word	0x0800fe19
 800fdb4:	0800fe19 	.word	0x0800fe19
 800fdb8:	0800fe19 	.word	0x0800fe19
 800fdbc:	0800fe19 	.word	0x0800fe19
 800fdc0:	0800fe19 	.word	0x0800fe19
 800fdc4:	0800fe09 	.word	0x0800fe09
 800fdc8:	0800fe19 	.word	0x0800fe19
 800fdcc:	0800fe19 	.word	0x0800fe19
 800fdd0:	0800fe19 	.word	0x0800fe19
 800fdd4:	0800fe19 	.word	0x0800fe19
 800fdd8:	0800fe19 	.word	0x0800fe19
 800fddc:	0800fe19 	.word	0x0800fe19
 800fde0:	0800fe19 	.word	0x0800fe19
 800fde4:	0800fe11 	.word	0x0800fe11
 800fde8:	2301      	movs	r3, #1
 800fdea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fdee:	e0d6      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800fdf0:	2304      	movs	r3, #4
 800fdf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fdf6:	e0d2      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800fdf8:	2308      	movs	r3, #8
 800fdfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fdfe:	e0ce      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800fe00:	2310      	movs	r3, #16
 800fe02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe06:	e0ca      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800fe08:	2320      	movs	r3, #32
 800fe0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe0e:	e0c6      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800fe10:	2340      	movs	r3, #64	@ 0x40
 800fe12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe16:	e0c2      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800fe18:	2380      	movs	r3, #128	@ 0x80
 800fe1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fe1e:	e0be      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800fe20:	40011400 	.word	0x40011400
 800fe24:	58024400 	.word	0x58024400
 800fe28:	40007800 	.word	0x40007800
 800fe2c:	40007c00 	.word	0x40007c00
 800fe30:	40011800 	.word	0x40011800
 800fe34:	697b      	ldr	r3, [r7, #20]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	4aad      	ldr	r2, [pc, #692]	@ (80100f0 <UART_SetConfig+0x900>)
 800fe3a:	4293      	cmp	r3, r2
 800fe3c:	d176      	bne.n	800ff2c <UART_SetConfig+0x73c>
 800fe3e:	4bad      	ldr	r3, [pc, #692]	@ (80100f4 <UART_SetConfig+0x904>)
 800fe40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fe42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fe46:	2b28      	cmp	r3, #40	@ 0x28
 800fe48:	d86c      	bhi.n	800ff24 <UART_SetConfig+0x734>
 800fe4a:	a201      	add	r2, pc, #4	@ (adr r2, 800fe50 <UART_SetConfig+0x660>)
 800fe4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe50:	0800fef5 	.word	0x0800fef5
 800fe54:	0800ff25 	.word	0x0800ff25
 800fe58:	0800ff25 	.word	0x0800ff25
 800fe5c:	0800ff25 	.word	0x0800ff25
 800fe60:	0800ff25 	.word	0x0800ff25
 800fe64:	0800ff25 	.word	0x0800ff25
 800fe68:	0800ff25 	.word	0x0800ff25
 800fe6c:	0800ff25 	.word	0x0800ff25
 800fe70:	0800fefd 	.word	0x0800fefd
 800fe74:	0800ff25 	.word	0x0800ff25
 800fe78:	0800ff25 	.word	0x0800ff25
 800fe7c:	0800ff25 	.word	0x0800ff25
 800fe80:	0800ff25 	.word	0x0800ff25
 800fe84:	0800ff25 	.word	0x0800ff25
 800fe88:	0800ff25 	.word	0x0800ff25
 800fe8c:	0800ff25 	.word	0x0800ff25
 800fe90:	0800ff05 	.word	0x0800ff05
 800fe94:	0800ff25 	.word	0x0800ff25
 800fe98:	0800ff25 	.word	0x0800ff25
 800fe9c:	0800ff25 	.word	0x0800ff25
 800fea0:	0800ff25 	.word	0x0800ff25
 800fea4:	0800ff25 	.word	0x0800ff25
 800fea8:	0800ff25 	.word	0x0800ff25
 800feac:	0800ff25 	.word	0x0800ff25
 800feb0:	0800ff0d 	.word	0x0800ff0d
 800feb4:	0800ff25 	.word	0x0800ff25
 800feb8:	0800ff25 	.word	0x0800ff25
 800febc:	0800ff25 	.word	0x0800ff25
 800fec0:	0800ff25 	.word	0x0800ff25
 800fec4:	0800ff25 	.word	0x0800ff25
 800fec8:	0800ff25 	.word	0x0800ff25
 800fecc:	0800ff25 	.word	0x0800ff25
 800fed0:	0800ff15 	.word	0x0800ff15
 800fed4:	0800ff25 	.word	0x0800ff25
 800fed8:	0800ff25 	.word	0x0800ff25
 800fedc:	0800ff25 	.word	0x0800ff25
 800fee0:	0800ff25 	.word	0x0800ff25
 800fee4:	0800ff25 	.word	0x0800ff25
 800fee8:	0800ff25 	.word	0x0800ff25
 800feec:	0800ff25 	.word	0x0800ff25
 800fef0:	0800ff1d 	.word	0x0800ff1d
 800fef4:	2301      	movs	r3, #1
 800fef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800fefa:	e050      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800fefc:	2304      	movs	r3, #4
 800fefe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff02:	e04c      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800ff04:	2308      	movs	r3, #8
 800ff06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff0a:	e048      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800ff0c:	2310      	movs	r3, #16
 800ff0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff12:	e044      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800ff14:	2320      	movs	r3, #32
 800ff16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff1a:	e040      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800ff1c:	2340      	movs	r3, #64	@ 0x40
 800ff1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff22:	e03c      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800ff24:	2380      	movs	r3, #128	@ 0x80
 800ff26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff2a:	e038      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800ff2c:	697b      	ldr	r3, [r7, #20]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	4a71      	ldr	r2, [pc, #452]	@ (80100f8 <UART_SetConfig+0x908>)
 800ff32:	4293      	cmp	r3, r2
 800ff34:	d130      	bne.n	800ff98 <UART_SetConfig+0x7a8>
 800ff36:	4b6f      	ldr	r3, [pc, #444]	@ (80100f4 <UART_SetConfig+0x904>)
 800ff38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ff3a:	f003 0307 	and.w	r3, r3, #7
 800ff3e:	2b05      	cmp	r3, #5
 800ff40:	d826      	bhi.n	800ff90 <UART_SetConfig+0x7a0>
 800ff42:	a201      	add	r2, pc, #4	@ (adr r2, 800ff48 <UART_SetConfig+0x758>)
 800ff44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff48:	0800ff61 	.word	0x0800ff61
 800ff4c:	0800ff69 	.word	0x0800ff69
 800ff50:	0800ff71 	.word	0x0800ff71
 800ff54:	0800ff79 	.word	0x0800ff79
 800ff58:	0800ff81 	.word	0x0800ff81
 800ff5c:	0800ff89 	.word	0x0800ff89
 800ff60:	2302      	movs	r3, #2
 800ff62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff66:	e01a      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800ff68:	2304      	movs	r3, #4
 800ff6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff6e:	e016      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800ff70:	2308      	movs	r3, #8
 800ff72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff76:	e012      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800ff78:	2310      	movs	r3, #16
 800ff7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff7e:	e00e      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800ff80:	2320      	movs	r3, #32
 800ff82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff86:	e00a      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800ff88:	2340      	movs	r3, #64	@ 0x40
 800ff8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff8e:	e006      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800ff90:	2380      	movs	r3, #128	@ 0x80
 800ff92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ff96:	e002      	b.n	800ff9e <UART_SetConfig+0x7ae>
 800ff98:	2380      	movs	r3, #128	@ 0x80
 800ff9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ff9e:	697b      	ldr	r3, [r7, #20]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	4a55      	ldr	r2, [pc, #340]	@ (80100f8 <UART_SetConfig+0x908>)
 800ffa4:	4293      	cmp	r3, r2
 800ffa6:	f040 80f8 	bne.w	801019a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ffaa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ffae:	2b20      	cmp	r3, #32
 800ffb0:	dc46      	bgt.n	8010040 <UART_SetConfig+0x850>
 800ffb2:	2b02      	cmp	r3, #2
 800ffb4:	db75      	blt.n	80100a2 <UART_SetConfig+0x8b2>
 800ffb6:	3b02      	subs	r3, #2
 800ffb8:	2b1e      	cmp	r3, #30
 800ffba:	d872      	bhi.n	80100a2 <UART_SetConfig+0x8b2>
 800ffbc:	a201      	add	r2, pc, #4	@ (adr r2, 800ffc4 <UART_SetConfig+0x7d4>)
 800ffbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffc2:	bf00      	nop
 800ffc4:	08010047 	.word	0x08010047
 800ffc8:	080100a3 	.word	0x080100a3
 800ffcc:	0801004f 	.word	0x0801004f
 800ffd0:	080100a3 	.word	0x080100a3
 800ffd4:	080100a3 	.word	0x080100a3
 800ffd8:	080100a3 	.word	0x080100a3
 800ffdc:	0801005f 	.word	0x0801005f
 800ffe0:	080100a3 	.word	0x080100a3
 800ffe4:	080100a3 	.word	0x080100a3
 800ffe8:	080100a3 	.word	0x080100a3
 800ffec:	080100a3 	.word	0x080100a3
 800fff0:	080100a3 	.word	0x080100a3
 800fff4:	080100a3 	.word	0x080100a3
 800fff8:	080100a3 	.word	0x080100a3
 800fffc:	0801006f 	.word	0x0801006f
 8010000:	080100a3 	.word	0x080100a3
 8010004:	080100a3 	.word	0x080100a3
 8010008:	080100a3 	.word	0x080100a3
 801000c:	080100a3 	.word	0x080100a3
 8010010:	080100a3 	.word	0x080100a3
 8010014:	080100a3 	.word	0x080100a3
 8010018:	080100a3 	.word	0x080100a3
 801001c:	080100a3 	.word	0x080100a3
 8010020:	080100a3 	.word	0x080100a3
 8010024:	080100a3 	.word	0x080100a3
 8010028:	080100a3 	.word	0x080100a3
 801002c:	080100a3 	.word	0x080100a3
 8010030:	080100a3 	.word	0x080100a3
 8010034:	080100a3 	.word	0x080100a3
 8010038:	080100a3 	.word	0x080100a3
 801003c:	08010095 	.word	0x08010095
 8010040:	2b40      	cmp	r3, #64	@ 0x40
 8010042:	d02a      	beq.n	801009a <UART_SetConfig+0x8aa>
 8010044:	e02d      	b.n	80100a2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010046:	f7fd f93f 	bl	800d2c8 <HAL_RCCEx_GetD3PCLK1Freq>
 801004a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801004c:	e02f      	b.n	80100ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801004e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010052:	4618      	mov	r0, r3
 8010054:	f7fd f94e 	bl	800d2f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801005a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801005c:	e027      	b.n	80100ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801005e:	f107 0318 	add.w	r3, r7, #24
 8010062:	4618      	mov	r0, r3
 8010064:	f7fd fa9a 	bl	800d59c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010068:	69fb      	ldr	r3, [r7, #28]
 801006a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801006c:	e01f      	b.n	80100ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801006e:	4b21      	ldr	r3, [pc, #132]	@ (80100f4 <UART_SetConfig+0x904>)
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	f003 0320 	and.w	r3, r3, #32
 8010076:	2b00      	cmp	r3, #0
 8010078:	d009      	beq.n	801008e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801007a:	4b1e      	ldr	r3, [pc, #120]	@ (80100f4 <UART_SetConfig+0x904>)
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	08db      	lsrs	r3, r3, #3
 8010080:	f003 0303 	and.w	r3, r3, #3
 8010084:	4a1d      	ldr	r2, [pc, #116]	@ (80100fc <UART_SetConfig+0x90c>)
 8010086:	fa22 f303 	lsr.w	r3, r2, r3
 801008a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801008c:	e00f      	b.n	80100ae <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801008e:	4b1b      	ldr	r3, [pc, #108]	@ (80100fc <UART_SetConfig+0x90c>)
 8010090:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010092:	e00c      	b.n	80100ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010094:	4b1a      	ldr	r3, [pc, #104]	@ (8010100 <UART_SetConfig+0x910>)
 8010096:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010098:	e009      	b.n	80100ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801009a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801009e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80100a0:	e005      	b.n	80100ae <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80100a2:	2300      	movs	r3, #0
 80100a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80100a6:	2301      	movs	r3, #1
 80100a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80100ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80100ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	f000 81ee 	beq.w	8010492 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80100b6:	697b      	ldr	r3, [r7, #20]
 80100b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100ba:	4a12      	ldr	r2, [pc, #72]	@ (8010104 <UART_SetConfig+0x914>)
 80100bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80100c0:	461a      	mov	r2, r3
 80100c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80100c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80100c8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80100ca:	697b      	ldr	r3, [r7, #20]
 80100cc:	685a      	ldr	r2, [r3, #4]
 80100ce:	4613      	mov	r3, r2
 80100d0:	005b      	lsls	r3, r3, #1
 80100d2:	4413      	add	r3, r2
 80100d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80100d6:	429a      	cmp	r2, r3
 80100d8:	d305      	bcc.n	80100e6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80100da:	697b      	ldr	r3, [r7, #20]
 80100dc:	685b      	ldr	r3, [r3, #4]
 80100de:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80100e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80100e2:	429a      	cmp	r2, r3
 80100e4:	d910      	bls.n	8010108 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80100e6:	2301      	movs	r3, #1
 80100e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80100ec:	e1d1      	b.n	8010492 <UART_SetConfig+0xca2>
 80100ee:	bf00      	nop
 80100f0:	40011c00 	.word	0x40011c00
 80100f4:	58024400 	.word	0x58024400
 80100f8:	58000c00 	.word	0x58000c00
 80100fc:	03d09000 	.word	0x03d09000
 8010100:	003d0900 	.word	0x003d0900
 8010104:	08011fa4 	.word	0x08011fa4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010108:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801010a:	2200      	movs	r2, #0
 801010c:	60bb      	str	r3, [r7, #8]
 801010e:	60fa      	str	r2, [r7, #12]
 8010110:	697b      	ldr	r3, [r7, #20]
 8010112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010114:	4ac0      	ldr	r2, [pc, #768]	@ (8010418 <UART_SetConfig+0xc28>)
 8010116:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801011a:	b29b      	uxth	r3, r3
 801011c:	2200      	movs	r2, #0
 801011e:	603b      	str	r3, [r7, #0]
 8010120:	607a      	str	r2, [r7, #4]
 8010122:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010126:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801012a:	f7f0 f949 	bl	80003c0 <__aeabi_uldivmod>
 801012e:	4602      	mov	r2, r0
 8010130:	460b      	mov	r3, r1
 8010132:	4610      	mov	r0, r2
 8010134:	4619      	mov	r1, r3
 8010136:	f04f 0200 	mov.w	r2, #0
 801013a:	f04f 0300 	mov.w	r3, #0
 801013e:	020b      	lsls	r3, r1, #8
 8010140:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010144:	0202      	lsls	r2, r0, #8
 8010146:	6979      	ldr	r1, [r7, #20]
 8010148:	6849      	ldr	r1, [r1, #4]
 801014a:	0849      	lsrs	r1, r1, #1
 801014c:	2000      	movs	r0, #0
 801014e:	460c      	mov	r4, r1
 8010150:	4605      	mov	r5, r0
 8010152:	eb12 0804 	adds.w	r8, r2, r4
 8010156:	eb43 0905 	adc.w	r9, r3, r5
 801015a:	697b      	ldr	r3, [r7, #20]
 801015c:	685b      	ldr	r3, [r3, #4]
 801015e:	2200      	movs	r2, #0
 8010160:	469a      	mov	sl, r3
 8010162:	4693      	mov	fp, r2
 8010164:	4652      	mov	r2, sl
 8010166:	465b      	mov	r3, fp
 8010168:	4640      	mov	r0, r8
 801016a:	4649      	mov	r1, r9
 801016c:	f7f0 f928 	bl	80003c0 <__aeabi_uldivmod>
 8010170:	4602      	mov	r2, r0
 8010172:	460b      	mov	r3, r1
 8010174:	4613      	mov	r3, r2
 8010176:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801017a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801017e:	d308      	bcc.n	8010192 <UART_SetConfig+0x9a2>
 8010180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010182:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010186:	d204      	bcs.n	8010192 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8010188:	697b      	ldr	r3, [r7, #20]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801018e:	60da      	str	r2, [r3, #12]
 8010190:	e17f      	b.n	8010492 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8010192:	2301      	movs	r3, #1
 8010194:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010198:	e17b      	b.n	8010492 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801019a:	697b      	ldr	r3, [r7, #20]
 801019c:	69db      	ldr	r3, [r3, #28]
 801019e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80101a2:	f040 80bd 	bne.w	8010320 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80101a6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80101aa:	2b20      	cmp	r3, #32
 80101ac:	dc48      	bgt.n	8010240 <UART_SetConfig+0xa50>
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	db7b      	blt.n	80102aa <UART_SetConfig+0xaba>
 80101b2:	2b20      	cmp	r3, #32
 80101b4:	d879      	bhi.n	80102aa <UART_SetConfig+0xaba>
 80101b6:	a201      	add	r2, pc, #4	@ (adr r2, 80101bc <UART_SetConfig+0x9cc>)
 80101b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101bc:	08010247 	.word	0x08010247
 80101c0:	0801024f 	.word	0x0801024f
 80101c4:	080102ab 	.word	0x080102ab
 80101c8:	080102ab 	.word	0x080102ab
 80101cc:	08010257 	.word	0x08010257
 80101d0:	080102ab 	.word	0x080102ab
 80101d4:	080102ab 	.word	0x080102ab
 80101d8:	080102ab 	.word	0x080102ab
 80101dc:	08010267 	.word	0x08010267
 80101e0:	080102ab 	.word	0x080102ab
 80101e4:	080102ab 	.word	0x080102ab
 80101e8:	080102ab 	.word	0x080102ab
 80101ec:	080102ab 	.word	0x080102ab
 80101f0:	080102ab 	.word	0x080102ab
 80101f4:	080102ab 	.word	0x080102ab
 80101f8:	080102ab 	.word	0x080102ab
 80101fc:	08010277 	.word	0x08010277
 8010200:	080102ab 	.word	0x080102ab
 8010204:	080102ab 	.word	0x080102ab
 8010208:	080102ab 	.word	0x080102ab
 801020c:	080102ab 	.word	0x080102ab
 8010210:	080102ab 	.word	0x080102ab
 8010214:	080102ab 	.word	0x080102ab
 8010218:	080102ab 	.word	0x080102ab
 801021c:	080102ab 	.word	0x080102ab
 8010220:	080102ab 	.word	0x080102ab
 8010224:	080102ab 	.word	0x080102ab
 8010228:	080102ab 	.word	0x080102ab
 801022c:	080102ab 	.word	0x080102ab
 8010230:	080102ab 	.word	0x080102ab
 8010234:	080102ab 	.word	0x080102ab
 8010238:	080102ab 	.word	0x080102ab
 801023c:	0801029d 	.word	0x0801029d
 8010240:	2b40      	cmp	r3, #64	@ 0x40
 8010242:	d02e      	beq.n	80102a2 <UART_SetConfig+0xab2>
 8010244:	e031      	b.n	80102aa <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010246:	f7fb f9a1 	bl	800b58c <HAL_RCC_GetPCLK1Freq>
 801024a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801024c:	e033      	b.n	80102b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801024e:	f7fb f9b3 	bl	800b5b8 <HAL_RCC_GetPCLK2Freq>
 8010252:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010254:	e02f      	b.n	80102b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010256:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801025a:	4618      	mov	r0, r3
 801025c:	f7fd f84a 	bl	800d2f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010262:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010264:	e027      	b.n	80102b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010266:	f107 0318 	add.w	r3, r7, #24
 801026a:	4618      	mov	r0, r3
 801026c:	f7fd f996 	bl	800d59c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010270:	69fb      	ldr	r3, [r7, #28]
 8010272:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010274:	e01f      	b.n	80102b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010276:	4b69      	ldr	r3, [pc, #420]	@ (801041c <UART_SetConfig+0xc2c>)
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	f003 0320 	and.w	r3, r3, #32
 801027e:	2b00      	cmp	r3, #0
 8010280:	d009      	beq.n	8010296 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010282:	4b66      	ldr	r3, [pc, #408]	@ (801041c <UART_SetConfig+0xc2c>)
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	08db      	lsrs	r3, r3, #3
 8010288:	f003 0303 	and.w	r3, r3, #3
 801028c:	4a64      	ldr	r2, [pc, #400]	@ (8010420 <UART_SetConfig+0xc30>)
 801028e:	fa22 f303 	lsr.w	r3, r2, r3
 8010292:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010294:	e00f      	b.n	80102b6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8010296:	4b62      	ldr	r3, [pc, #392]	@ (8010420 <UART_SetConfig+0xc30>)
 8010298:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801029a:	e00c      	b.n	80102b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801029c:	4b61      	ldr	r3, [pc, #388]	@ (8010424 <UART_SetConfig+0xc34>)
 801029e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80102a0:	e009      	b.n	80102b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80102a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80102a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80102a8:	e005      	b.n	80102b6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80102aa:	2300      	movs	r3, #0
 80102ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80102ae:	2301      	movs	r3, #1
 80102b0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80102b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80102b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	f000 80ea 	beq.w	8010492 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80102be:	697b      	ldr	r3, [r7, #20]
 80102c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102c2:	4a55      	ldr	r2, [pc, #340]	@ (8010418 <UART_SetConfig+0xc28>)
 80102c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80102c8:	461a      	mov	r2, r3
 80102ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80102cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80102d0:	005a      	lsls	r2, r3, #1
 80102d2:	697b      	ldr	r3, [r7, #20]
 80102d4:	685b      	ldr	r3, [r3, #4]
 80102d6:	085b      	lsrs	r3, r3, #1
 80102d8:	441a      	add	r2, r3
 80102da:	697b      	ldr	r3, [r7, #20]
 80102dc:	685b      	ldr	r3, [r3, #4]
 80102de:	fbb2 f3f3 	udiv	r3, r2, r3
 80102e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80102e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102e6:	2b0f      	cmp	r3, #15
 80102e8:	d916      	bls.n	8010318 <UART_SetConfig+0xb28>
 80102ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80102f0:	d212      	bcs.n	8010318 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80102f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102f4:	b29b      	uxth	r3, r3
 80102f6:	f023 030f 	bic.w	r3, r3, #15
 80102fa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80102fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102fe:	085b      	lsrs	r3, r3, #1
 8010300:	b29b      	uxth	r3, r3
 8010302:	f003 0307 	and.w	r3, r3, #7
 8010306:	b29a      	uxth	r2, r3
 8010308:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801030a:	4313      	orrs	r3, r2
 801030c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 801030e:	697b      	ldr	r3, [r7, #20]
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8010314:	60da      	str	r2, [r3, #12]
 8010316:	e0bc      	b.n	8010492 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8010318:	2301      	movs	r3, #1
 801031a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801031e:	e0b8      	b.n	8010492 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010320:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010324:	2b20      	cmp	r3, #32
 8010326:	dc4b      	bgt.n	80103c0 <UART_SetConfig+0xbd0>
 8010328:	2b00      	cmp	r3, #0
 801032a:	f2c0 8087 	blt.w	801043c <UART_SetConfig+0xc4c>
 801032e:	2b20      	cmp	r3, #32
 8010330:	f200 8084 	bhi.w	801043c <UART_SetConfig+0xc4c>
 8010334:	a201      	add	r2, pc, #4	@ (adr r2, 801033c <UART_SetConfig+0xb4c>)
 8010336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801033a:	bf00      	nop
 801033c:	080103c7 	.word	0x080103c7
 8010340:	080103cf 	.word	0x080103cf
 8010344:	0801043d 	.word	0x0801043d
 8010348:	0801043d 	.word	0x0801043d
 801034c:	080103d7 	.word	0x080103d7
 8010350:	0801043d 	.word	0x0801043d
 8010354:	0801043d 	.word	0x0801043d
 8010358:	0801043d 	.word	0x0801043d
 801035c:	080103e7 	.word	0x080103e7
 8010360:	0801043d 	.word	0x0801043d
 8010364:	0801043d 	.word	0x0801043d
 8010368:	0801043d 	.word	0x0801043d
 801036c:	0801043d 	.word	0x0801043d
 8010370:	0801043d 	.word	0x0801043d
 8010374:	0801043d 	.word	0x0801043d
 8010378:	0801043d 	.word	0x0801043d
 801037c:	080103f7 	.word	0x080103f7
 8010380:	0801043d 	.word	0x0801043d
 8010384:	0801043d 	.word	0x0801043d
 8010388:	0801043d 	.word	0x0801043d
 801038c:	0801043d 	.word	0x0801043d
 8010390:	0801043d 	.word	0x0801043d
 8010394:	0801043d 	.word	0x0801043d
 8010398:	0801043d 	.word	0x0801043d
 801039c:	0801043d 	.word	0x0801043d
 80103a0:	0801043d 	.word	0x0801043d
 80103a4:	0801043d 	.word	0x0801043d
 80103a8:	0801043d 	.word	0x0801043d
 80103ac:	0801043d 	.word	0x0801043d
 80103b0:	0801043d 	.word	0x0801043d
 80103b4:	0801043d 	.word	0x0801043d
 80103b8:	0801043d 	.word	0x0801043d
 80103bc:	0801042f 	.word	0x0801042f
 80103c0:	2b40      	cmp	r3, #64	@ 0x40
 80103c2:	d037      	beq.n	8010434 <UART_SetConfig+0xc44>
 80103c4:	e03a      	b.n	801043c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80103c6:	f7fb f8e1 	bl	800b58c <HAL_RCC_GetPCLK1Freq>
 80103ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80103cc:	e03c      	b.n	8010448 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80103ce:	f7fb f8f3 	bl	800b5b8 <HAL_RCC_GetPCLK2Freq>
 80103d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80103d4:	e038      	b.n	8010448 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80103d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80103da:	4618      	mov	r0, r3
 80103dc:	f7fc ff8a 	bl	800d2f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80103e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80103e4:	e030      	b.n	8010448 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80103e6:	f107 0318 	add.w	r3, r7, #24
 80103ea:	4618      	mov	r0, r3
 80103ec:	f7fd f8d6 	bl	800d59c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80103f0:	69fb      	ldr	r3, [r7, #28]
 80103f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80103f4:	e028      	b.n	8010448 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80103f6:	4b09      	ldr	r3, [pc, #36]	@ (801041c <UART_SetConfig+0xc2c>)
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	f003 0320 	and.w	r3, r3, #32
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d012      	beq.n	8010428 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010402:	4b06      	ldr	r3, [pc, #24]	@ (801041c <UART_SetConfig+0xc2c>)
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	08db      	lsrs	r3, r3, #3
 8010408:	f003 0303 	and.w	r3, r3, #3
 801040c:	4a04      	ldr	r2, [pc, #16]	@ (8010420 <UART_SetConfig+0xc30>)
 801040e:	fa22 f303 	lsr.w	r3, r2, r3
 8010412:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010414:	e018      	b.n	8010448 <UART_SetConfig+0xc58>
 8010416:	bf00      	nop
 8010418:	08011fa4 	.word	0x08011fa4
 801041c:	58024400 	.word	0x58024400
 8010420:	03d09000 	.word	0x03d09000
 8010424:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8010428:	4b24      	ldr	r3, [pc, #144]	@ (80104bc <UART_SetConfig+0xccc>)
 801042a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801042c:	e00c      	b.n	8010448 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801042e:	4b24      	ldr	r3, [pc, #144]	@ (80104c0 <UART_SetConfig+0xcd0>)
 8010430:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010432:	e009      	b.n	8010448 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010434:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010438:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801043a:	e005      	b.n	8010448 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 801043c:	2300      	movs	r3, #0
 801043e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010440:	2301      	movs	r3, #1
 8010442:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010446:	bf00      	nop
    }

    if (pclk != 0U)
 8010448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801044a:	2b00      	cmp	r3, #0
 801044c:	d021      	beq.n	8010492 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801044e:	697b      	ldr	r3, [r7, #20]
 8010450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010452:	4a1c      	ldr	r2, [pc, #112]	@ (80104c4 <UART_SetConfig+0xcd4>)
 8010454:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010458:	461a      	mov	r2, r3
 801045a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801045c:	fbb3 f2f2 	udiv	r2, r3, r2
 8010460:	697b      	ldr	r3, [r7, #20]
 8010462:	685b      	ldr	r3, [r3, #4]
 8010464:	085b      	lsrs	r3, r3, #1
 8010466:	441a      	add	r2, r3
 8010468:	697b      	ldr	r3, [r7, #20]
 801046a:	685b      	ldr	r3, [r3, #4]
 801046c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010470:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010474:	2b0f      	cmp	r3, #15
 8010476:	d909      	bls.n	801048c <UART_SetConfig+0xc9c>
 8010478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801047a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801047e:	d205      	bcs.n	801048c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010482:	b29a      	uxth	r2, r3
 8010484:	697b      	ldr	r3, [r7, #20]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	60da      	str	r2, [r3, #12]
 801048a:	e002      	b.n	8010492 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 801048c:	2301      	movs	r3, #1
 801048e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010492:	697b      	ldr	r3, [r7, #20]
 8010494:	2201      	movs	r2, #1
 8010496:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 801049a:	697b      	ldr	r3, [r7, #20]
 801049c:	2201      	movs	r2, #1
 801049e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80104a2:	697b      	ldr	r3, [r7, #20]
 80104a4:	2200      	movs	r2, #0
 80104a6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80104a8:	697b      	ldr	r3, [r7, #20]
 80104aa:	2200      	movs	r2, #0
 80104ac:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80104ae:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80104b2:	4618      	mov	r0, r3
 80104b4:	3748      	adds	r7, #72	@ 0x48
 80104b6:	46bd      	mov	sp, r7
 80104b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80104bc:	03d09000 	.word	0x03d09000
 80104c0:	003d0900 	.word	0x003d0900
 80104c4:	08011fa4 	.word	0x08011fa4

080104c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80104c8:	b480      	push	{r7}
 80104ca:	b083      	sub	sp, #12
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80104d4:	f003 0301 	and.w	r3, r3, #1
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d00a      	beq.n	80104f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	685b      	ldr	r3, [r3, #4]
 80104e2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	430a      	orrs	r2, r1
 80104f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80104f6:	f003 0302 	and.w	r3, r3, #2
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d00a      	beq.n	8010514 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	685b      	ldr	r3, [r3, #4]
 8010504:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	430a      	orrs	r2, r1
 8010512:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010518:	f003 0304 	and.w	r3, r3, #4
 801051c:	2b00      	cmp	r3, #0
 801051e:	d00a      	beq.n	8010536 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	685b      	ldr	r3, [r3, #4]
 8010526:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	430a      	orrs	r2, r1
 8010534:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801053a:	f003 0308 	and.w	r3, r3, #8
 801053e:	2b00      	cmp	r3, #0
 8010540:	d00a      	beq.n	8010558 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	685b      	ldr	r3, [r3, #4]
 8010548:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	430a      	orrs	r2, r1
 8010556:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801055c:	f003 0310 	and.w	r3, r3, #16
 8010560:	2b00      	cmp	r3, #0
 8010562:	d00a      	beq.n	801057a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	689b      	ldr	r3, [r3, #8]
 801056a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	430a      	orrs	r2, r1
 8010578:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801057e:	f003 0320 	and.w	r3, r3, #32
 8010582:	2b00      	cmp	r3, #0
 8010584:	d00a      	beq.n	801059c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	689b      	ldr	r3, [r3, #8]
 801058c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	430a      	orrs	r2, r1
 801059a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d01a      	beq.n	80105de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	685b      	ldr	r3, [r3, #4]
 80105ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	430a      	orrs	r2, r1
 80105bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80105c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80105c6:	d10a      	bne.n	80105de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	685b      	ldr	r3, [r3, #4]
 80105ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	430a      	orrs	r2, r1
 80105dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d00a      	beq.n	8010600 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	685b      	ldr	r3, [r3, #4]
 80105f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	430a      	orrs	r2, r1
 80105fe:	605a      	str	r2, [r3, #4]
  }
}
 8010600:	bf00      	nop
 8010602:	370c      	adds	r7, #12
 8010604:	46bd      	mov	sp, r7
 8010606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060a:	4770      	bx	lr

0801060c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801060c:	b580      	push	{r7, lr}
 801060e:	b098      	sub	sp, #96	@ 0x60
 8010610:	af02      	add	r7, sp, #8
 8010612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	2200      	movs	r2, #0
 8010618:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801061c:	f7f3 fdcc 	bl	80041b8 <HAL_GetTick>
 8010620:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	f003 0308 	and.w	r3, r3, #8
 801062c:	2b08      	cmp	r3, #8
 801062e:	d12f      	bne.n	8010690 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010630:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010634:	9300      	str	r3, [sp, #0]
 8010636:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010638:	2200      	movs	r2, #0
 801063a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801063e:	6878      	ldr	r0, [r7, #4]
 8010640:	f000 f88e 	bl	8010760 <UART_WaitOnFlagUntilTimeout>
 8010644:	4603      	mov	r3, r0
 8010646:	2b00      	cmp	r3, #0
 8010648:	d022      	beq.n	8010690 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010652:	e853 3f00 	ldrex	r3, [r3]
 8010656:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010658:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801065a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801065e:	653b      	str	r3, [r7, #80]	@ 0x50
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	461a      	mov	r2, r3
 8010666:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010668:	647b      	str	r3, [r7, #68]	@ 0x44
 801066a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801066c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801066e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010670:	e841 2300 	strex	r3, r2, [r1]
 8010674:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010676:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010678:	2b00      	cmp	r3, #0
 801067a:	d1e6      	bne.n	801064a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	2220      	movs	r2, #32
 8010680:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	2200      	movs	r2, #0
 8010688:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801068c:	2303      	movs	r3, #3
 801068e:	e063      	b.n	8010758 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	f003 0304 	and.w	r3, r3, #4
 801069a:	2b04      	cmp	r3, #4
 801069c:	d149      	bne.n	8010732 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801069e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80106a2:	9300      	str	r3, [sp, #0]
 80106a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80106a6:	2200      	movs	r2, #0
 80106a8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80106ac:	6878      	ldr	r0, [r7, #4]
 80106ae:	f000 f857 	bl	8010760 <UART_WaitOnFlagUntilTimeout>
 80106b2:	4603      	mov	r3, r0
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d03c      	beq.n	8010732 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80106c0:	e853 3f00 	ldrex	r3, [r3]
 80106c4:	623b      	str	r3, [r7, #32]
   return(result);
 80106c6:	6a3b      	ldr	r3, [r7, #32]
 80106c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80106cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	461a      	mov	r2, r3
 80106d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80106d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80106d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80106dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80106de:	e841 2300 	strex	r3, r2, [r1]
 80106e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80106e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d1e6      	bne.n	80106b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	3308      	adds	r3, #8
 80106f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106f2:	693b      	ldr	r3, [r7, #16]
 80106f4:	e853 3f00 	ldrex	r3, [r3]
 80106f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	f023 0301 	bic.w	r3, r3, #1
 8010700:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	3308      	adds	r3, #8
 8010708:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801070a:	61fa      	str	r2, [r7, #28]
 801070c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801070e:	69b9      	ldr	r1, [r7, #24]
 8010710:	69fa      	ldr	r2, [r7, #28]
 8010712:	e841 2300 	strex	r3, r2, [r1]
 8010716:	617b      	str	r3, [r7, #20]
   return(result);
 8010718:	697b      	ldr	r3, [r7, #20]
 801071a:	2b00      	cmp	r3, #0
 801071c:	d1e5      	bne.n	80106ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	2220      	movs	r2, #32
 8010722:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	2200      	movs	r2, #0
 801072a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801072e:	2303      	movs	r3, #3
 8010730:	e012      	b.n	8010758 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	2220      	movs	r2, #32
 8010736:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	2220      	movs	r2, #32
 801073e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	2200      	movs	r2, #0
 8010746:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	2200      	movs	r2, #0
 801074c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	2200      	movs	r2, #0
 8010752:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010756:	2300      	movs	r3, #0
}
 8010758:	4618      	mov	r0, r3
 801075a:	3758      	adds	r7, #88	@ 0x58
 801075c:	46bd      	mov	sp, r7
 801075e:	bd80      	pop	{r7, pc}

08010760 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010760:	b580      	push	{r7, lr}
 8010762:	b084      	sub	sp, #16
 8010764:	af00      	add	r7, sp, #0
 8010766:	60f8      	str	r0, [r7, #12]
 8010768:	60b9      	str	r1, [r7, #8]
 801076a:	603b      	str	r3, [r7, #0]
 801076c:	4613      	mov	r3, r2
 801076e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010770:	e049      	b.n	8010806 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010772:	69bb      	ldr	r3, [r7, #24]
 8010774:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010778:	d045      	beq.n	8010806 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801077a:	f7f3 fd1d 	bl	80041b8 <HAL_GetTick>
 801077e:	4602      	mov	r2, r0
 8010780:	683b      	ldr	r3, [r7, #0]
 8010782:	1ad3      	subs	r3, r2, r3
 8010784:	69ba      	ldr	r2, [r7, #24]
 8010786:	429a      	cmp	r2, r3
 8010788:	d302      	bcc.n	8010790 <UART_WaitOnFlagUntilTimeout+0x30>
 801078a:	69bb      	ldr	r3, [r7, #24]
 801078c:	2b00      	cmp	r3, #0
 801078e:	d101      	bne.n	8010794 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010790:	2303      	movs	r3, #3
 8010792:	e048      	b.n	8010826 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	f003 0304 	and.w	r3, r3, #4
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d031      	beq.n	8010806 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	69db      	ldr	r3, [r3, #28]
 80107a8:	f003 0308 	and.w	r3, r3, #8
 80107ac:	2b08      	cmp	r3, #8
 80107ae:	d110      	bne.n	80107d2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	2208      	movs	r2, #8
 80107b6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80107b8:	68f8      	ldr	r0, [r7, #12]
 80107ba:	f000 f839 	bl	8010830 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	2208      	movs	r2, #8
 80107c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	2200      	movs	r2, #0
 80107ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

           return HAL_ERROR;
 80107ce:	2301      	movs	r3, #1
 80107d0:	e029      	b.n	8010826 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	69db      	ldr	r3, [r3, #28]
 80107d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80107dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80107e0:	d111      	bne.n	8010806 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80107ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80107ec:	68f8      	ldr	r0, [r7, #12]
 80107ee:	f000 f81f 	bl	8010830 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	2220      	movs	r2, #32
 80107f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	2200      	movs	r2, #0
 80107fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8010802:	2303      	movs	r3, #3
 8010804:	e00f      	b.n	8010826 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	69da      	ldr	r2, [r3, #28]
 801080c:	68bb      	ldr	r3, [r7, #8]
 801080e:	4013      	ands	r3, r2
 8010810:	68ba      	ldr	r2, [r7, #8]
 8010812:	429a      	cmp	r2, r3
 8010814:	bf0c      	ite	eq
 8010816:	2301      	moveq	r3, #1
 8010818:	2300      	movne	r3, #0
 801081a:	b2db      	uxtb	r3, r3
 801081c:	461a      	mov	r2, r3
 801081e:	79fb      	ldrb	r3, [r7, #7]
 8010820:	429a      	cmp	r2, r3
 8010822:	d0a6      	beq.n	8010772 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010824:	2300      	movs	r3, #0
}
 8010826:	4618      	mov	r0, r3
 8010828:	3710      	adds	r7, #16
 801082a:	46bd      	mov	sp, r7
 801082c:	bd80      	pop	{r7, pc}
	...

08010830 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010830:	b480      	push	{r7}
 8010832:	b095      	sub	sp, #84	@ 0x54
 8010834:	af00      	add	r7, sp, #0
 8010836:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801083e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010840:	e853 3f00 	ldrex	r3, [r3]
 8010844:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010848:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801084c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	461a      	mov	r2, r3
 8010854:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010856:	643b      	str	r3, [r7, #64]	@ 0x40
 8010858:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801085a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801085c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801085e:	e841 2300 	strex	r3, r2, [r1]
 8010862:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010866:	2b00      	cmp	r3, #0
 8010868:	d1e6      	bne.n	8010838 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	681b      	ldr	r3, [r3, #0]
 801086e:	3308      	adds	r3, #8
 8010870:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010872:	6a3b      	ldr	r3, [r7, #32]
 8010874:	e853 3f00 	ldrex	r3, [r3]
 8010878:	61fb      	str	r3, [r7, #28]
   return(result);
 801087a:	69fa      	ldr	r2, [r7, #28]
 801087c:	4b1e      	ldr	r3, [pc, #120]	@ (80108f8 <UART_EndRxTransfer+0xc8>)
 801087e:	4013      	ands	r3, r2
 8010880:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	3308      	adds	r3, #8
 8010888:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801088a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801088c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801088e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010890:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010892:	e841 2300 	strex	r3, r2, [r1]
 8010896:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801089a:	2b00      	cmp	r3, #0
 801089c:	d1e5      	bne.n	801086a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80108a2:	2b01      	cmp	r3, #1
 80108a4:	d118      	bne.n	80108d8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	e853 3f00 	ldrex	r3, [r3]
 80108b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80108b4:	68bb      	ldr	r3, [r7, #8]
 80108b6:	f023 0310 	bic.w	r3, r3, #16
 80108ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	461a      	mov	r2, r3
 80108c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80108c4:	61bb      	str	r3, [r7, #24]
 80108c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108c8:	6979      	ldr	r1, [r7, #20]
 80108ca:	69ba      	ldr	r2, [r7, #24]
 80108cc:	e841 2300 	strex	r3, r2, [r1]
 80108d0:	613b      	str	r3, [r7, #16]
   return(result);
 80108d2:	693b      	ldr	r3, [r7, #16]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d1e6      	bne.n	80108a6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	2220      	movs	r2, #32
 80108dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	2200      	movs	r2, #0
 80108e4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	2200      	movs	r2, #0
 80108ea:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80108ec:	bf00      	nop
 80108ee:	3754      	adds	r7, #84	@ 0x54
 80108f0:	46bd      	mov	sp, r7
 80108f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f6:	4770      	bx	lr
 80108f8:	effffffe 	.word	0xeffffffe

080108fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80108fc:	b480      	push	{r7}
 80108fe:	b085      	sub	sp, #20
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801090a:	2b01      	cmp	r3, #1
 801090c:	d101      	bne.n	8010912 <HAL_UARTEx_DisableFifoMode+0x16>
 801090e:	2302      	movs	r3, #2
 8010910:	e027      	b.n	8010962 <HAL_UARTEx_DisableFifoMode+0x66>
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	2201      	movs	r2, #1
 8010916:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	2224      	movs	r2, #36	@ 0x24
 801091e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	681a      	ldr	r2, [r3, #0]
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	f022 0201 	bic.w	r2, r2, #1
 8010938:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010940:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	2200      	movs	r2, #0
 8010946:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	68fa      	ldr	r2, [r7, #12]
 801094e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	2220      	movs	r2, #32
 8010954:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	2200      	movs	r2, #0
 801095c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010960:	2300      	movs	r3, #0
}
 8010962:	4618      	mov	r0, r3
 8010964:	3714      	adds	r7, #20
 8010966:	46bd      	mov	sp, r7
 8010968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801096c:	4770      	bx	lr

0801096e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801096e:	b580      	push	{r7, lr}
 8010970:	b084      	sub	sp, #16
 8010972:	af00      	add	r7, sp, #0
 8010974:	6078      	str	r0, [r7, #4]
 8010976:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801097e:	2b01      	cmp	r3, #1
 8010980:	d101      	bne.n	8010986 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010982:	2302      	movs	r3, #2
 8010984:	e02d      	b.n	80109e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	2201      	movs	r2, #1
 801098a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	2224      	movs	r2, #36	@ 0x24
 8010992:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	681a      	ldr	r2, [r3, #0]
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	f022 0201 	bic.w	r2, r2, #1
 80109ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	689b      	ldr	r3, [r3, #8]
 80109b4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	683a      	ldr	r2, [r7, #0]
 80109be:	430a      	orrs	r2, r1
 80109c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80109c2:	6878      	ldr	r0, [r7, #4]
 80109c4:	f000 f850 	bl	8010a68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	68fa      	ldr	r2, [r7, #12]
 80109ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	2220      	movs	r2, #32
 80109d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	2200      	movs	r2, #0
 80109dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80109e0:	2300      	movs	r3, #0
}
 80109e2:	4618      	mov	r0, r3
 80109e4:	3710      	adds	r7, #16
 80109e6:	46bd      	mov	sp, r7
 80109e8:	bd80      	pop	{r7, pc}

080109ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80109ea:	b580      	push	{r7, lr}
 80109ec:	b084      	sub	sp, #16
 80109ee:	af00      	add	r7, sp, #0
 80109f0:	6078      	str	r0, [r7, #4]
 80109f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80109fa:	2b01      	cmp	r3, #1
 80109fc:	d101      	bne.n	8010a02 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80109fe:	2302      	movs	r3, #2
 8010a00:	e02d      	b.n	8010a5e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	2201      	movs	r2, #1
 8010a06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	2224      	movs	r2, #36	@ 0x24
 8010a0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	681a      	ldr	r2, [r3, #0]
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	f022 0201 	bic.w	r2, r2, #1
 8010a28:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	689b      	ldr	r3, [r3, #8]
 8010a30:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	683a      	ldr	r2, [r7, #0]
 8010a3a:	430a      	orrs	r2, r1
 8010a3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010a3e:	6878      	ldr	r0, [r7, #4]
 8010a40:	f000 f812 	bl	8010a68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	68fa      	ldr	r2, [r7, #12]
 8010a4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	2220      	movs	r2, #32
 8010a50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	2200      	movs	r2, #0
 8010a58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010a5c:	2300      	movs	r3, #0
}
 8010a5e:	4618      	mov	r0, r3
 8010a60:	3710      	adds	r7, #16
 8010a62:	46bd      	mov	sp, r7
 8010a64:	bd80      	pop	{r7, pc}
	...

08010a68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010a68:	b480      	push	{r7}
 8010a6a:	b085      	sub	sp, #20
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d108      	bne.n	8010a8a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	2201      	movs	r2, #1
 8010a7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	2201      	movs	r2, #1
 8010a84:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010a88:	e031      	b.n	8010aee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010a8a:	2310      	movs	r3, #16
 8010a8c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010a8e:	2310      	movs	r3, #16
 8010a90:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	689b      	ldr	r3, [r3, #8]
 8010a98:	0e5b      	lsrs	r3, r3, #25
 8010a9a:	b2db      	uxtb	r3, r3
 8010a9c:	f003 0307 	and.w	r3, r3, #7
 8010aa0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	689b      	ldr	r3, [r3, #8]
 8010aa8:	0f5b      	lsrs	r3, r3, #29
 8010aaa:	b2db      	uxtb	r3, r3
 8010aac:	f003 0307 	and.w	r3, r3, #7
 8010ab0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010ab2:	7bbb      	ldrb	r3, [r7, #14]
 8010ab4:	7b3a      	ldrb	r2, [r7, #12]
 8010ab6:	4911      	ldr	r1, [pc, #68]	@ (8010afc <UARTEx_SetNbDataToProcess+0x94>)
 8010ab8:	5c8a      	ldrb	r2, [r1, r2]
 8010aba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010abe:	7b3a      	ldrb	r2, [r7, #12]
 8010ac0:	490f      	ldr	r1, [pc, #60]	@ (8010b00 <UARTEx_SetNbDataToProcess+0x98>)
 8010ac2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010ac4:	fb93 f3f2 	sdiv	r3, r3, r2
 8010ac8:	b29a      	uxth	r2, r3
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010ad0:	7bfb      	ldrb	r3, [r7, #15]
 8010ad2:	7b7a      	ldrb	r2, [r7, #13]
 8010ad4:	4909      	ldr	r1, [pc, #36]	@ (8010afc <UARTEx_SetNbDataToProcess+0x94>)
 8010ad6:	5c8a      	ldrb	r2, [r1, r2]
 8010ad8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010adc:	7b7a      	ldrb	r2, [r7, #13]
 8010ade:	4908      	ldr	r1, [pc, #32]	@ (8010b00 <UARTEx_SetNbDataToProcess+0x98>)
 8010ae0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010ae2:	fb93 f3f2 	sdiv	r3, r3, r2
 8010ae6:	b29a      	uxth	r2, r3
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8010aee:	bf00      	nop
 8010af0:	3714      	adds	r7, #20
 8010af2:	46bd      	mov	sp, r7
 8010af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af8:	4770      	bx	lr
 8010afa:	bf00      	nop
 8010afc:	08011fbc 	.word	0x08011fbc
 8010b00:	08011fc4 	.word	0x08011fc4

08010b04 <atoi>:
 8010b04:	220a      	movs	r2, #10
 8010b06:	2100      	movs	r1, #0
 8010b08:	f000 b894 	b.w	8010c34 <strtol>

08010b0c <__itoa>:
 8010b0c:	1e93      	subs	r3, r2, #2
 8010b0e:	2b22      	cmp	r3, #34	@ 0x22
 8010b10:	b510      	push	{r4, lr}
 8010b12:	460c      	mov	r4, r1
 8010b14:	d904      	bls.n	8010b20 <__itoa+0x14>
 8010b16:	2300      	movs	r3, #0
 8010b18:	700b      	strb	r3, [r1, #0]
 8010b1a:	461c      	mov	r4, r3
 8010b1c:	4620      	mov	r0, r4
 8010b1e:	bd10      	pop	{r4, pc}
 8010b20:	2a0a      	cmp	r2, #10
 8010b22:	d109      	bne.n	8010b38 <__itoa+0x2c>
 8010b24:	2800      	cmp	r0, #0
 8010b26:	da07      	bge.n	8010b38 <__itoa+0x2c>
 8010b28:	232d      	movs	r3, #45	@ 0x2d
 8010b2a:	700b      	strb	r3, [r1, #0]
 8010b2c:	4240      	negs	r0, r0
 8010b2e:	2101      	movs	r1, #1
 8010b30:	4421      	add	r1, r4
 8010b32:	f000 f889 	bl	8010c48 <__utoa>
 8010b36:	e7f1      	b.n	8010b1c <__itoa+0x10>
 8010b38:	2100      	movs	r1, #0
 8010b3a:	e7f9      	b.n	8010b30 <__itoa+0x24>

08010b3c <itoa>:
 8010b3c:	f7ff bfe6 	b.w	8010b0c <__itoa>

08010b40 <_strtol_l.constprop.0>:
 8010b40:	2b24      	cmp	r3, #36	@ 0x24
 8010b42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b46:	4686      	mov	lr, r0
 8010b48:	4690      	mov	r8, r2
 8010b4a:	d801      	bhi.n	8010b50 <_strtol_l.constprop.0+0x10>
 8010b4c:	2b01      	cmp	r3, #1
 8010b4e:	d106      	bne.n	8010b5e <_strtol_l.constprop.0+0x1e>
 8010b50:	f000 f8f4 	bl	8010d3c <__errno>
 8010b54:	2316      	movs	r3, #22
 8010b56:	6003      	str	r3, [r0, #0]
 8010b58:	2000      	movs	r0, #0
 8010b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b5e:	4834      	ldr	r0, [pc, #208]	@ (8010c30 <_strtol_l.constprop.0+0xf0>)
 8010b60:	460d      	mov	r5, r1
 8010b62:	462a      	mov	r2, r5
 8010b64:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010b68:	5d06      	ldrb	r6, [r0, r4]
 8010b6a:	f016 0608 	ands.w	r6, r6, #8
 8010b6e:	d1f8      	bne.n	8010b62 <_strtol_l.constprop.0+0x22>
 8010b70:	2c2d      	cmp	r4, #45	@ 0x2d
 8010b72:	d12d      	bne.n	8010bd0 <_strtol_l.constprop.0+0x90>
 8010b74:	782c      	ldrb	r4, [r5, #0]
 8010b76:	2601      	movs	r6, #1
 8010b78:	1c95      	adds	r5, r2, #2
 8010b7a:	f033 0210 	bics.w	r2, r3, #16
 8010b7e:	d109      	bne.n	8010b94 <_strtol_l.constprop.0+0x54>
 8010b80:	2c30      	cmp	r4, #48	@ 0x30
 8010b82:	d12a      	bne.n	8010bda <_strtol_l.constprop.0+0x9a>
 8010b84:	782a      	ldrb	r2, [r5, #0]
 8010b86:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010b8a:	2a58      	cmp	r2, #88	@ 0x58
 8010b8c:	d125      	bne.n	8010bda <_strtol_l.constprop.0+0x9a>
 8010b8e:	786c      	ldrb	r4, [r5, #1]
 8010b90:	2310      	movs	r3, #16
 8010b92:	3502      	adds	r5, #2
 8010b94:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8010b98:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8010b9c:	2200      	movs	r2, #0
 8010b9e:	fbbc f9f3 	udiv	r9, ip, r3
 8010ba2:	4610      	mov	r0, r2
 8010ba4:	fb03 ca19 	mls	sl, r3, r9, ip
 8010ba8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8010bac:	2f09      	cmp	r7, #9
 8010bae:	d81b      	bhi.n	8010be8 <_strtol_l.constprop.0+0xa8>
 8010bb0:	463c      	mov	r4, r7
 8010bb2:	42a3      	cmp	r3, r4
 8010bb4:	dd27      	ble.n	8010c06 <_strtol_l.constprop.0+0xc6>
 8010bb6:	1c57      	adds	r7, r2, #1
 8010bb8:	d007      	beq.n	8010bca <_strtol_l.constprop.0+0x8a>
 8010bba:	4581      	cmp	r9, r0
 8010bbc:	d320      	bcc.n	8010c00 <_strtol_l.constprop.0+0xc0>
 8010bbe:	d101      	bne.n	8010bc4 <_strtol_l.constprop.0+0x84>
 8010bc0:	45a2      	cmp	sl, r4
 8010bc2:	db1d      	blt.n	8010c00 <_strtol_l.constprop.0+0xc0>
 8010bc4:	fb00 4003 	mla	r0, r0, r3, r4
 8010bc8:	2201      	movs	r2, #1
 8010bca:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010bce:	e7eb      	b.n	8010ba8 <_strtol_l.constprop.0+0x68>
 8010bd0:	2c2b      	cmp	r4, #43	@ 0x2b
 8010bd2:	bf04      	itt	eq
 8010bd4:	782c      	ldrbeq	r4, [r5, #0]
 8010bd6:	1c95      	addeq	r5, r2, #2
 8010bd8:	e7cf      	b.n	8010b7a <_strtol_l.constprop.0+0x3a>
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d1da      	bne.n	8010b94 <_strtol_l.constprop.0+0x54>
 8010bde:	2c30      	cmp	r4, #48	@ 0x30
 8010be0:	bf0c      	ite	eq
 8010be2:	2308      	moveq	r3, #8
 8010be4:	230a      	movne	r3, #10
 8010be6:	e7d5      	b.n	8010b94 <_strtol_l.constprop.0+0x54>
 8010be8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010bec:	2f19      	cmp	r7, #25
 8010bee:	d801      	bhi.n	8010bf4 <_strtol_l.constprop.0+0xb4>
 8010bf0:	3c37      	subs	r4, #55	@ 0x37
 8010bf2:	e7de      	b.n	8010bb2 <_strtol_l.constprop.0+0x72>
 8010bf4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8010bf8:	2f19      	cmp	r7, #25
 8010bfa:	d804      	bhi.n	8010c06 <_strtol_l.constprop.0+0xc6>
 8010bfc:	3c57      	subs	r4, #87	@ 0x57
 8010bfe:	e7d8      	b.n	8010bb2 <_strtol_l.constprop.0+0x72>
 8010c00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010c04:	e7e1      	b.n	8010bca <_strtol_l.constprop.0+0x8a>
 8010c06:	1c53      	adds	r3, r2, #1
 8010c08:	d108      	bne.n	8010c1c <_strtol_l.constprop.0+0xdc>
 8010c0a:	2322      	movs	r3, #34	@ 0x22
 8010c0c:	f8ce 3000 	str.w	r3, [lr]
 8010c10:	4660      	mov	r0, ip
 8010c12:	f1b8 0f00 	cmp.w	r8, #0
 8010c16:	d0a0      	beq.n	8010b5a <_strtol_l.constprop.0+0x1a>
 8010c18:	1e69      	subs	r1, r5, #1
 8010c1a:	e006      	b.n	8010c2a <_strtol_l.constprop.0+0xea>
 8010c1c:	b106      	cbz	r6, 8010c20 <_strtol_l.constprop.0+0xe0>
 8010c1e:	4240      	negs	r0, r0
 8010c20:	f1b8 0f00 	cmp.w	r8, #0
 8010c24:	d099      	beq.n	8010b5a <_strtol_l.constprop.0+0x1a>
 8010c26:	2a00      	cmp	r2, #0
 8010c28:	d1f6      	bne.n	8010c18 <_strtol_l.constprop.0+0xd8>
 8010c2a:	f8c8 1000 	str.w	r1, [r8]
 8010c2e:	e794      	b.n	8010b5a <_strtol_l.constprop.0+0x1a>
 8010c30:	08011ff2 	.word	0x08011ff2

08010c34 <strtol>:
 8010c34:	4613      	mov	r3, r2
 8010c36:	460a      	mov	r2, r1
 8010c38:	4601      	mov	r1, r0
 8010c3a:	4802      	ldr	r0, [pc, #8]	@ (8010c44 <strtol+0x10>)
 8010c3c:	6800      	ldr	r0, [r0, #0]
 8010c3e:	f7ff bf7f 	b.w	8010b40 <_strtol_l.constprop.0>
 8010c42:	bf00      	nop
 8010c44:	24000048 	.word	0x24000048

08010c48 <__utoa>:
 8010c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c4a:	4c1f      	ldr	r4, [pc, #124]	@ (8010cc8 <__utoa+0x80>)
 8010c4c:	b08b      	sub	sp, #44	@ 0x2c
 8010c4e:	4605      	mov	r5, r0
 8010c50:	460b      	mov	r3, r1
 8010c52:	466e      	mov	r6, sp
 8010c54:	f104 0c20 	add.w	ip, r4, #32
 8010c58:	6820      	ldr	r0, [r4, #0]
 8010c5a:	6861      	ldr	r1, [r4, #4]
 8010c5c:	4637      	mov	r7, r6
 8010c5e:	c703      	stmia	r7!, {r0, r1}
 8010c60:	3408      	adds	r4, #8
 8010c62:	4564      	cmp	r4, ip
 8010c64:	463e      	mov	r6, r7
 8010c66:	d1f7      	bne.n	8010c58 <__utoa+0x10>
 8010c68:	7921      	ldrb	r1, [r4, #4]
 8010c6a:	7139      	strb	r1, [r7, #4]
 8010c6c:	1e91      	subs	r1, r2, #2
 8010c6e:	6820      	ldr	r0, [r4, #0]
 8010c70:	6038      	str	r0, [r7, #0]
 8010c72:	2922      	cmp	r1, #34	@ 0x22
 8010c74:	f04f 0100 	mov.w	r1, #0
 8010c78:	d904      	bls.n	8010c84 <__utoa+0x3c>
 8010c7a:	7019      	strb	r1, [r3, #0]
 8010c7c:	460b      	mov	r3, r1
 8010c7e:	4618      	mov	r0, r3
 8010c80:	b00b      	add	sp, #44	@ 0x2c
 8010c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c84:	1e58      	subs	r0, r3, #1
 8010c86:	4684      	mov	ip, r0
 8010c88:	fbb5 f7f2 	udiv	r7, r5, r2
 8010c8c:	fb02 5617 	mls	r6, r2, r7, r5
 8010c90:	3628      	adds	r6, #40	@ 0x28
 8010c92:	446e      	add	r6, sp
 8010c94:	460c      	mov	r4, r1
 8010c96:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8010c9a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8010c9e:	462e      	mov	r6, r5
 8010ca0:	42b2      	cmp	r2, r6
 8010ca2:	f101 0101 	add.w	r1, r1, #1
 8010ca6:	463d      	mov	r5, r7
 8010ca8:	d9ee      	bls.n	8010c88 <__utoa+0x40>
 8010caa:	2200      	movs	r2, #0
 8010cac:	545a      	strb	r2, [r3, r1]
 8010cae:	1919      	adds	r1, r3, r4
 8010cb0:	1aa5      	subs	r5, r4, r2
 8010cb2:	42aa      	cmp	r2, r5
 8010cb4:	dae3      	bge.n	8010c7e <__utoa+0x36>
 8010cb6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8010cba:	780e      	ldrb	r6, [r1, #0]
 8010cbc:	7006      	strb	r6, [r0, #0]
 8010cbe:	3201      	adds	r2, #1
 8010cc0:	f801 5901 	strb.w	r5, [r1], #-1
 8010cc4:	e7f4      	b.n	8010cb0 <__utoa+0x68>
 8010cc6:	bf00      	nop
 8010cc8:	08011fcc 	.word	0x08011fcc

08010ccc <siprintf>:
 8010ccc:	b40e      	push	{r1, r2, r3}
 8010cce:	b500      	push	{lr}
 8010cd0:	b09c      	sub	sp, #112	@ 0x70
 8010cd2:	ab1d      	add	r3, sp, #116	@ 0x74
 8010cd4:	9002      	str	r0, [sp, #8]
 8010cd6:	9006      	str	r0, [sp, #24]
 8010cd8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010cdc:	4809      	ldr	r0, [pc, #36]	@ (8010d04 <siprintf+0x38>)
 8010cde:	9107      	str	r1, [sp, #28]
 8010ce0:	9104      	str	r1, [sp, #16]
 8010ce2:	4909      	ldr	r1, [pc, #36]	@ (8010d08 <siprintf+0x3c>)
 8010ce4:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ce8:	9105      	str	r1, [sp, #20]
 8010cea:	6800      	ldr	r0, [r0, #0]
 8010cec:	9301      	str	r3, [sp, #4]
 8010cee:	a902      	add	r1, sp, #8
 8010cf0:	f000 f9ac 	bl	801104c <_svfiprintf_r>
 8010cf4:	9b02      	ldr	r3, [sp, #8]
 8010cf6:	2200      	movs	r2, #0
 8010cf8:	701a      	strb	r2, [r3, #0]
 8010cfa:	b01c      	add	sp, #112	@ 0x70
 8010cfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8010d00:	b003      	add	sp, #12
 8010d02:	4770      	bx	lr
 8010d04:	24000048 	.word	0x24000048
 8010d08:	ffff0208 	.word	0xffff0208

08010d0c <memset>:
 8010d0c:	4402      	add	r2, r0
 8010d0e:	4603      	mov	r3, r0
 8010d10:	4293      	cmp	r3, r2
 8010d12:	d100      	bne.n	8010d16 <memset+0xa>
 8010d14:	4770      	bx	lr
 8010d16:	f803 1b01 	strb.w	r1, [r3], #1
 8010d1a:	e7f9      	b.n	8010d10 <memset+0x4>

08010d1c <strcat>:
 8010d1c:	b510      	push	{r4, lr}
 8010d1e:	4602      	mov	r2, r0
 8010d20:	7814      	ldrb	r4, [r2, #0]
 8010d22:	4613      	mov	r3, r2
 8010d24:	3201      	adds	r2, #1
 8010d26:	2c00      	cmp	r4, #0
 8010d28:	d1fa      	bne.n	8010d20 <strcat+0x4>
 8010d2a:	3b01      	subs	r3, #1
 8010d2c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010d30:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010d34:	2a00      	cmp	r2, #0
 8010d36:	d1f9      	bne.n	8010d2c <strcat+0x10>
 8010d38:	bd10      	pop	{r4, pc}
	...

08010d3c <__errno>:
 8010d3c:	4b01      	ldr	r3, [pc, #4]	@ (8010d44 <__errno+0x8>)
 8010d3e:	6818      	ldr	r0, [r3, #0]
 8010d40:	4770      	bx	lr
 8010d42:	bf00      	nop
 8010d44:	24000048 	.word	0x24000048

08010d48 <__libc_init_array>:
 8010d48:	b570      	push	{r4, r5, r6, lr}
 8010d4a:	4d0d      	ldr	r5, [pc, #52]	@ (8010d80 <__libc_init_array+0x38>)
 8010d4c:	4c0d      	ldr	r4, [pc, #52]	@ (8010d84 <__libc_init_array+0x3c>)
 8010d4e:	1b64      	subs	r4, r4, r5
 8010d50:	10a4      	asrs	r4, r4, #2
 8010d52:	2600      	movs	r6, #0
 8010d54:	42a6      	cmp	r6, r4
 8010d56:	d109      	bne.n	8010d6c <__libc_init_array+0x24>
 8010d58:	4d0b      	ldr	r5, [pc, #44]	@ (8010d88 <__libc_init_array+0x40>)
 8010d5a:	4c0c      	ldr	r4, [pc, #48]	@ (8010d8c <__libc_init_array+0x44>)
 8010d5c:	f000 fc6e 	bl	801163c <_init>
 8010d60:	1b64      	subs	r4, r4, r5
 8010d62:	10a4      	asrs	r4, r4, #2
 8010d64:	2600      	movs	r6, #0
 8010d66:	42a6      	cmp	r6, r4
 8010d68:	d105      	bne.n	8010d76 <__libc_init_array+0x2e>
 8010d6a:	bd70      	pop	{r4, r5, r6, pc}
 8010d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010d70:	4798      	blx	r3
 8010d72:	3601      	adds	r6, #1
 8010d74:	e7ee      	b.n	8010d54 <__libc_init_array+0xc>
 8010d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8010d7a:	4798      	blx	r3
 8010d7c:	3601      	adds	r6, #1
 8010d7e:	e7f2      	b.n	8010d66 <__libc_init_array+0x1e>
 8010d80:	08012130 	.word	0x08012130
 8010d84:	08012130 	.word	0x08012130
 8010d88:	08012130 	.word	0x08012130
 8010d8c:	08012134 	.word	0x08012134

08010d90 <__retarget_lock_acquire_recursive>:
 8010d90:	4770      	bx	lr

08010d92 <__retarget_lock_release_recursive>:
 8010d92:	4770      	bx	lr

08010d94 <strcpy>:
 8010d94:	4603      	mov	r3, r0
 8010d96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010d9a:	f803 2b01 	strb.w	r2, [r3], #1
 8010d9e:	2a00      	cmp	r2, #0
 8010da0:	d1f9      	bne.n	8010d96 <strcpy+0x2>
 8010da2:	4770      	bx	lr

08010da4 <_free_r>:
 8010da4:	b538      	push	{r3, r4, r5, lr}
 8010da6:	4605      	mov	r5, r0
 8010da8:	2900      	cmp	r1, #0
 8010daa:	d041      	beq.n	8010e30 <_free_r+0x8c>
 8010dac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010db0:	1f0c      	subs	r4, r1, #4
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	bfb8      	it	lt
 8010db6:	18e4      	addlt	r4, r4, r3
 8010db8:	f000 f8e0 	bl	8010f7c <__malloc_lock>
 8010dbc:	4a1d      	ldr	r2, [pc, #116]	@ (8010e34 <_free_r+0x90>)
 8010dbe:	6813      	ldr	r3, [r2, #0]
 8010dc0:	b933      	cbnz	r3, 8010dd0 <_free_r+0x2c>
 8010dc2:	6063      	str	r3, [r4, #4]
 8010dc4:	6014      	str	r4, [r2, #0]
 8010dc6:	4628      	mov	r0, r5
 8010dc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010dcc:	f000 b8dc 	b.w	8010f88 <__malloc_unlock>
 8010dd0:	42a3      	cmp	r3, r4
 8010dd2:	d908      	bls.n	8010de6 <_free_r+0x42>
 8010dd4:	6820      	ldr	r0, [r4, #0]
 8010dd6:	1821      	adds	r1, r4, r0
 8010dd8:	428b      	cmp	r3, r1
 8010dda:	bf01      	itttt	eq
 8010ddc:	6819      	ldreq	r1, [r3, #0]
 8010dde:	685b      	ldreq	r3, [r3, #4]
 8010de0:	1809      	addeq	r1, r1, r0
 8010de2:	6021      	streq	r1, [r4, #0]
 8010de4:	e7ed      	b.n	8010dc2 <_free_r+0x1e>
 8010de6:	461a      	mov	r2, r3
 8010de8:	685b      	ldr	r3, [r3, #4]
 8010dea:	b10b      	cbz	r3, 8010df0 <_free_r+0x4c>
 8010dec:	42a3      	cmp	r3, r4
 8010dee:	d9fa      	bls.n	8010de6 <_free_r+0x42>
 8010df0:	6811      	ldr	r1, [r2, #0]
 8010df2:	1850      	adds	r0, r2, r1
 8010df4:	42a0      	cmp	r0, r4
 8010df6:	d10b      	bne.n	8010e10 <_free_r+0x6c>
 8010df8:	6820      	ldr	r0, [r4, #0]
 8010dfa:	4401      	add	r1, r0
 8010dfc:	1850      	adds	r0, r2, r1
 8010dfe:	4283      	cmp	r3, r0
 8010e00:	6011      	str	r1, [r2, #0]
 8010e02:	d1e0      	bne.n	8010dc6 <_free_r+0x22>
 8010e04:	6818      	ldr	r0, [r3, #0]
 8010e06:	685b      	ldr	r3, [r3, #4]
 8010e08:	6053      	str	r3, [r2, #4]
 8010e0a:	4408      	add	r0, r1
 8010e0c:	6010      	str	r0, [r2, #0]
 8010e0e:	e7da      	b.n	8010dc6 <_free_r+0x22>
 8010e10:	d902      	bls.n	8010e18 <_free_r+0x74>
 8010e12:	230c      	movs	r3, #12
 8010e14:	602b      	str	r3, [r5, #0]
 8010e16:	e7d6      	b.n	8010dc6 <_free_r+0x22>
 8010e18:	6820      	ldr	r0, [r4, #0]
 8010e1a:	1821      	adds	r1, r4, r0
 8010e1c:	428b      	cmp	r3, r1
 8010e1e:	bf04      	itt	eq
 8010e20:	6819      	ldreq	r1, [r3, #0]
 8010e22:	685b      	ldreq	r3, [r3, #4]
 8010e24:	6063      	str	r3, [r4, #4]
 8010e26:	bf04      	itt	eq
 8010e28:	1809      	addeq	r1, r1, r0
 8010e2a:	6021      	streq	r1, [r4, #0]
 8010e2c:	6054      	str	r4, [r2, #4]
 8010e2e:	e7ca      	b.n	8010dc6 <_free_r+0x22>
 8010e30:	bd38      	pop	{r3, r4, r5, pc}
 8010e32:	bf00      	nop
 8010e34:	2400103c 	.word	0x2400103c

08010e38 <sbrk_aligned>:
 8010e38:	b570      	push	{r4, r5, r6, lr}
 8010e3a:	4e0f      	ldr	r6, [pc, #60]	@ (8010e78 <sbrk_aligned+0x40>)
 8010e3c:	460c      	mov	r4, r1
 8010e3e:	6831      	ldr	r1, [r6, #0]
 8010e40:	4605      	mov	r5, r0
 8010e42:	b911      	cbnz	r1, 8010e4a <sbrk_aligned+0x12>
 8010e44:	f000 fba6 	bl	8011594 <_sbrk_r>
 8010e48:	6030      	str	r0, [r6, #0]
 8010e4a:	4621      	mov	r1, r4
 8010e4c:	4628      	mov	r0, r5
 8010e4e:	f000 fba1 	bl	8011594 <_sbrk_r>
 8010e52:	1c43      	adds	r3, r0, #1
 8010e54:	d103      	bne.n	8010e5e <sbrk_aligned+0x26>
 8010e56:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8010e5a:	4620      	mov	r0, r4
 8010e5c:	bd70      	pop	{r4, r5, r6, pc}
 8010e5e:	1cc4      	adds	r4, r0, #3
 8010e60:	f024 0403 	bic.w	r4, r4, #3
 8010e64:	42a0      	cmp	r0, r4
 8010e66:	d0f8      	beq.n	8010e5a <sbrk_aligned+0x22>
 8010e68:	1a21      	subs	r1, r4, r0
 8010e6a:	4628      	mov	r0, r5
 8010e6c:	f000 fb92 	bl	8011594 <_sbrk_r>
 8010e70:	3001      	adds	r0, #1
 8010e72:	d1f2      	bne.n	8010e5a <sbrk_aligned+0x22>
 8010e74:	e7ef      	b.n	8010e56 <sbrk_aligned+0x1e>
 8010e76:	bf00      	nop
 8010e78:	24001038 	.word	0x24001038

08010e7c <_malloc_r>:
 8010e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e80:	1ccd      	adds	r5, r1, #3
 8010e82:	f025 0503 	bic.w	r5, r5, #3
 8010e86:	3508      	adds	r5, #8
 8010e88:	2d0c      	cmp	r5, #12
 8010e8a:	bf38      	it	cc
 8010e8c:	250c      	movcc	r5, #12
 8010e8e:	2d00      	cmp	r5, #0
 8010e90:	4606      	mov	r6, r0
 8010e92:	db01      	blt.n	8010e98 <_malloc_r+0x1c>
 8010e94:	42a9      	cmp	r1, r5
 8010e96:	d904      	bls.n	8010ea2 <_malloc_r+0x26>
 8010e98:	230c      	movs	r3, #12
 8010e9a:	6033      	str	r3, [r6, #0]
 8010e9c:	2000      	movs	r0, #0
 8010e9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ea2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010f78 <_malloc_r+0xfc>
 8010ea6:	f000 f869 	bl	8010f7c <__malloc_lock>
 8010eaa:	f8d8 3000 	ldr.w	r3, [r8]
 8010eae:	461c      	mov	r4, r3
 8010eb0:	bb44      	cbnz	r4, 8010f04 <_malloc_r+0x88>
 8010eb2:	4629      	mov	r1, r5
 8010eb4:	4630      	mov	r0, r6
 8010eb6:	f7ff ffbf 	bl	8010e38 <sbrk_aligned>
 8010eba:	1c43      	adds	r3, r0, #1
 8010ebc:	4604      	mov	r4, r0
 8010ebe:	d158      	bne.n	8010f72 <_malloc_r+0xf6>
 8010ec0:	f8d8 4000 	ldr.w	r4, [r8]
 8010ec4:	4627      	mov	r7, r4
 8010ec6:	2f00      	cmp	r7, #0
 8010ec8:	d143      	bne.n	8010f52 <_malloc_r+0xd6>
 8010eca:	2c00      	cmp	r4, #0
 8010ecc:	d04b      	beq.n	8010f66 <_malloc_r+0xea>
 8010ece:	6823      	ldr	r3, [r4, #0]
 8010ed0:	4639      	mov	r1, r7
 8010ed2:	4630      	mov	r0, r6
 8010ed4:	eb04 0903 	add.w	r9, r4, r3
 8010ed8:	f000 fb5c 	bl	8011594 <_sbrk_r>
 8010edc:	4581      	cmp	r9, r0
 8010ede:	d142      	bne.n	8010f66 <_malloc_r+0xea>
 8010ee0:	6821      	ldr	r1, [r4, #0]
 8010ee2:	1a6d      	subs	r5, r5, r1
 8010ee4:	4629      	mov	r1, r5
 8010ee6:	4630      	mov	r0, r6
 8010ee8:	f7ff ffa6 	bl	8010e38 <sbrk_aligned>
 8010eec:	3001      	adds	r0, #1
 8010eee:	d03a      	beq.n	8010f66 <_malloc_r+0xea>
 8010ef0:	6823      	ldr	r3, [r4, #0]
 8010ef2:	442b      	add	r3, r5
 8010ef4:	6023      	str	r3, [r4, #0]
 8010ef6:	f8d8 3000 	ldr.w	r3, [r8]
 8010efa:	685a      	ldr	r2, [r3, #4]
 8010efc:	bb62      	cbnz	r2, 8010f58 <_malloc_r+0xdc>
 8010efe:	f8c8 7000 	str.w	r7, [r8]
 8010f02:	e00f      	b.n	8010f24 <_malloc_r+0xa8>
 8010f04:	6822      	ldr	r2, [r4, #0]
 8010f06:	1b52      	subs	r2, r2, r5
 8010f08:	d420      	bmi.n	8010f4c <_malloc_r+0xd0>
 8010f0a:	2a0b      	cmp	r2, #11
 8010f0c:	d917      	bls.n	8010f3e <_malloc_r+0xc2>
 8010f0e:	1961      	adds	r1, r4, r5
 8010f10:	42a3      	cmp	r3, r4
 8010f12:	6025      	str	r5, [r4, #0]
 8010f14:	bf18      	it	ne
 8010f16:	6059      	strne	r1, [r3, #4]
 8010f18:	6863      	ldr	r3, [r4, #4]
 8010f1a:	bf08      	it	eq
 8010f1c:	f8c8 1000 	streq.w	r1, [r8]
 8010f20:	5162      	str	r2, [r4, r5]
 8010f22:	604b      	str	r3, [r1, #4]
 8010f24:	4630      	mov	r0, r6
 8010f26:	f000 f82f 	bl	8010f88 <__malloc_unlock>
 8010f2a:	f104 000b 	add.w	r0, r4, #11
 8010f2e:	1d23      	adds	r3, r4, #4
 8010f30:	f020 0007 	bic.w	r0, r0, #7
 8010f34:	1ac2      	subs	r2, r0, r3
 8010f36:	bf1c      	itt	ne
 8010f38:	1a1b      	subne	r3, r3, r0
 8010f3a:	50a3      	strne	r3, [r4, r2]
 8010f3c:	e7af      	b.n	8010e9e <_malloc_r+0x22>
 8010f3e:	6862      	ldr	r2, [r4, #4]
 8010f40:	42a3      	cmp	r3, r4
 8010f42:	bf0c      	ite	eq
 8010f44:	f8c8 2000 	streq.w	r2, [r8]
 8010f48:	605a      	strne	r2, [r3, #4]
 8010f4a:	e7eb      	b.n	8010f24 <_malloc_r+0xa8>
 8010f4c:	4623      	mov	r3, r4
 8010f4e:	6864      	ldr	r4, [r4, #4]
 8010f50:	e7ae      	b.n	8010eb0 <_malloc_r+0x34>
 8010f52:	463c      	mov	r4, r7
 8010f54:	687f      	ldr	r7, [r7, #4]
 8010f56:	e7b6      	b.n	8010ec6 <_malloc_r+0x4a>
 8010f58:	461a      	mov	r2, r3
 8010f5a:	685b      	ldr	r3, [r3, #4]
 8010f5c:	42a3      	cmp	r3, r4
 8010f5e:	d1fb      	bne.n	8010f58 <_malloc_r+0xdc>
 8010f60:	2300      	movs	r3, #0
 8010f62:	6053      	str	r3, [r2, #4]
 8010f64:	e7de      	b.n	8010f24 <_malloc_r+0xa8>
 8010f66:	230c      	movs	r3, #12
 8010f68:	6033      	str	r3, [r6, #0]
 8010f6a:	4630      	mov	r0, r6
 8010f6c:	f000 f80c 	bl	8010f88 <__malloc_unlock>
 8010f70:	e794      	b.n	8010e9c <_malloc_r+0x20>
 8010f72:	6005      	str	r5, [r0, #0]
 8010f74:	e7d6      	b.n	8010f24 <_malloc_r+0xa8>
 8010f76:	bf00      	nop
 8010f78:	2400103c 	.word	0x2400103c

08010f7c <__malloc_lock>:
 8010f7c:	4801      	ldr	r0, [pc, #4]	@ (8010f84 <__malloc_lock+0x8>)
 8010f7e:	f7ff bf07 	b.w	8010d90 <__retarget_lock_acquire_recursive>
 8010f82:	bf00      	nop
 8010f84:	24001034 	.word	0x24001034

08010f88 <__malloc_unlock>:
 8010f88:	4801      	ldr	r0, [pc, #4]	@ (8010f90 <__malloc_unlock+0x8>)
 8010f8a:	f7ff bf02 	b.w	8010d92 <__retarget_lock_release_recursive>
 8010f8e:	bf00      	nop
 8010f90:	24001034 	.word	0x24001034

08010f94 <__ssputs_r>:
 8010f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f98:	688e      	ldr	r6, [r1, #8]
 8010f9a:	461f      	mov	r7, r3
 8010f9c:	42be      	cmp	r6, r7
 8010f9e:	680b      	ldr	r3, [r1, #0]
 8010fa0:	4682      	mov	sl, r0
 8010fa2:	460c      	mov	r4, r1
 8010fa4:	4690      	mov	r8, r2
 8010fa6:	d82d      	bhi.n	8011004 <__ssputs_r+0x70>
 8010fa8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010fac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010fb0:	d026      	beq.n	8011000 <__ssputs_r+0x6c>
 8010fb2:	6965      	ldr	r5, [r4, #20]
 8010fb4:	6909      	ldr	r1, [r1, #16]
 8010fb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010fba:	eba3 0901 	sub.w	r9, r3, r1
 8010fbe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010fc2:	1c7b      	adds	r3, r7, #1
 8010fc4:	444b      	add	r3, r9
 8010fc6:	106d      	asrs	r5, r5, #1
 8010fc8:	429d      	cmp	r5, r3
 8010fca:	bf38      	it	cc
 8010fcc:	461d      	movcc	r5, r3
 8010fce:	0553      	lsls	r3, r2, #21
 8010fd0:	d527      	bpl.n	8011022 <__ssputs_r+0x8e>
 8010fd2:	4629      	mov	r1, r5
 8010fd4:	f7ff ff52 	bl	8010e7c <_malloc_r>
 8010fd8:	4606      	mov	r6, r0
 8010fda:	b360      	cbz	r0, 8011036 <__ssputs_r+0xa2>
 8010fdc:	6921      	ldr	r1, [r4, #16]
 8010fde:	464a      	mov	r2, r9
 8010fe0:	f000 fae8 	bl	80115b4 <memcpy>
 8010fe4:	89a3      	ldrh	r3, [r4, #12]
 8010fe6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010fea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010fee:	81a3      	strh	r3, [r4, #12]
 8010ff0:	6126      	str	r6, [r4, #16]
 8010ff2:	6165      	str	r5, [r4, #20]
 8010ff4:	444e      	add	r6, r9
 8010ff6:	eba5 0509 	sub.w	r5, r5, r9
 8010ffa:	6026      	str	r6, [r4, #0]
 8010ffc:	60a5      	str	r5, [r4, #8]
 8010ffe:	463e      	mov	r6, r7
 8011000:	42be      	cmp	r6, r7
 8011002:	d900      	bls.n	8011006 <__ssputs_r+0x72>
 8011004:	463e      	mov	r6, r7
 8011006:	6820      	ldr	r0, [r4, #0]
 8011008:	4632      	mov	r2, r6
 801100a:	4641      	mov	r1, r8
 801100c:	f000 faa8 	bl	8011560 <memmove>
 8011010:	68a3      	ldr	r3, [r4, #8]
 8011012:	1b9b      	subs	r3, r3, r6
 8011014:	60a3      	str	r3, [r4, #8]
 8011016:	6823      	ldr	r3, [r4, #0]
 8011018:	4433      	add	r3, r6
 801101a:	6023      	str	r3, [r4, #0]
 801101c:	2000      	movs	r0, #0
 801101e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011022:	462a      	mov	r2, r5
 8011024:	f000 fad4 	bl	80115d0 <_realloc_r>
 8011028:	4606      	mov	r6, r0
 801102a:	2800      	cmp	r0, #0
 801102c:	d1e0      	bne.n	8010ff0 <__ssputs_r+0x5c>
 801102e:	6921      	ldr	r1, [r4, #16]
 8011030:	4650      	mov	r0, sl
 8011032:	f7ff feb7 	bl	8010da4 <_free_r>
 8011036:	230c      	movs	r3, #12
 8011038:	f8ca 3000 	str.w	r3, [sl]
 801103c:	89a3      	ldrh	r3, [r4, #12]
 801103e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011042:	81a3      	strh	r3, [r4, #12]
 8011044:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011048:	e7e9      	b.n	801101e <__ssputs_r+0x8a>
	...

0801104c <_svfiprintf_r>:
 801104c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011050:	4698      	mov	r8, r3
 8011052:	898b      	ldrh	r3, [r1, #12]
 8011054:	061b      	lsls	r3, r3, #24
 8011056:	b09d      	sub	sp, #116	@ 0x74
 8011058:	4607      	mov	r7, r0
 801105a:	460d      	mov	r5, r1
 801105c:	4614      	mov	r4, r2
 801105e:	d510      	bpl.n	8011082 <_svfiprintf_r+0x36>
 8011060:	690b      	ldr	r3, [r1, #16]
 8011062:	b973      	cbnz	r3, 8011082 <_svfiprintf_r+0x36>
 8011064:	2140      	movs	r1, #64	@ 0x40
 8011066:	f7ff ff09 	bl	8010e7c <_malloc_r>
 801106a:	6028      	str	r0, [r5, #0]
 801106c:	6128      	str	r0, [r5, #16]
 801106e:	b930      	cbnz	r0, 801107e <_svfiprintf_r+0x32>
 8011070:	230c      	movs	r3, #12
 8011072:	603b      	str	r3, [r7, #0]
 8011074:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011078:	b01d      	add	sp, #116	@ 0x74
 801107a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801107e:	2340      	movs	r3, #64	@ 0x40
 8011080:	616b      	str	r3, [r5, #20]
 8011082:	2300      	movs	r3, #0
 8011084:	9309      	str	r3, [sp, #36]	@ 0x24
 8011086:	2320      	movs	r3, #32
 8011088:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801108c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011090:	2330      	movs	r3, #48	@ 0x30
 8011092:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011230 <_svfiprintf_r+0x1e4>
 8011096:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801109a:	f04f 0901 	mov.w	r9, #1
 801109e:	4623      	mov	r3, r4
 80110a0:	469a      	mov	sl, r3
 80110a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80110a6:	b10a      	cbz	r2, 80110ac <_svfiprintf_r+0x60>
 80110a8:	2a25      	cmp	r2, #37	@ 0x25
 80110aa:	d1f9      	bne.n	80110a0 <_svfiprintf_r+0x54>
 80110ac:	ebba 0b04 	subs.w	fp, sl, r4
 80110b0:	d00b      	beq.n	80110ca <_svfiprintf_r+0x7e>
 80110b2:	465b      	mov	r3, fp
 80110b4:	4622      	mov	r2, r4
 80110b6:	4629      	mov	r1, r5
 80110b8:	4638      	mov	r0, r7
 80110ba:	f7ff ff6b 	bl	8010f94 <__ssputs_r>
 80110be:	3001      	adds	r0, #1
 80110c0:	f000 80a7 	beq.w	8011212 <_svfiprintf_r+0x1c6>
 80110c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80110c6:	445a      	add	r2, fp
 80110c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80110ca:	f89a 3000 	ldrb.w	r3, [sl]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	f000 809f 	beq.w	8011212 <_svfiprintf_r+0x1c6>
 80110d4:	2300      	movs	r3, #0
 80110d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80110da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80110de:	f10a 0a01 	add.w	sl, sl, #1
 80110e2:	9304      	str	r3, [sp, #16]
 80110e4:	9307      	str	r3, [sp, #28]
 80110e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80110ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80110ec:	4654      	mov	r4, sl
 80110ee:	2205      	movs	r2, #5
 80110f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80110f4:	484e      	ldr	r0, [pc, #312]	@ (8011230 <_svfiprintf_r+0x1e4>)
 80110f6:	f7ef f913 	bl	8000320 <memchr>
 80110fa:	9a04      	ldr	r2, [sp, #16]
 80110fc:	b9d8      	cbnz	r0, 8011136 <_svfiprintf_r+0xea>
 80110fe:	06d0      	lsls	r0, r2, #27
 8011100:	bf44      	itt	mi
 8011102:	2320      	movmi	r3, #32
 8011104:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011108:	0711      	lsls	r1, r2, #28
 801110a:	bf44      	itt	mi
 801110c:	232b      	movmi	r3, #43	@ 0x2b
 801110e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011112:	f89a 3000 	ldrb.w	r3, [sl]
 8011116:	2b2a      	cmp	r3, #42	@ 0x2a
 8011118:	d015      	beq.n	8011146 <_svfiprintf_r+0xfa>
 801111a:	9a07      	ldr	r2, [sp, #28]
 801111c:	4654      	mov	r4, sl
 801111e:	2000      	movs	r0, #0
 8011120:	f04f 0c0a 	mov.w	ip, #10
 8011124:	4621      	mov	r1, r4
 8011126:	f811 3b01 	ldrb.w	r3, [r1], #1
 801112a:	3b30      	subs	r3, #48	@ 0x30
 801112c:	2b09      	cmp	r3, #9
 801112e:	d94b      	bls.n	80111c8 <_svfiprintf_r+0x17c>
 8011130:	b1b0      	cbz	r0, 8011160 <_svfiprintf_r+0x114>
 8011132:	9207      	str	r2, [sp, #28]
 8011134:	e014      	b.n	8011160 <_svfiprintf_r+0x114>
 8011136:	eba0 0308 	sub.w	r3, r0, r8
 801113a:	fa09 f303 	lsl.w	r3, r9, r3
 801113e:	4313      	orrs	r3, r2
 8011140:	9304      	str	r3, [sp, #16]
 8011142:	46a2      	mov	sl, r4
 8011144:	e7d2      	b.n	80110ec <_svfiprintf_r+0xa0>
 8011146:	9b03      	ldr	r3, [sp, #12]
 8011148:	1d19      	adds	r1, r3, #4
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	9103      	str	r1, [sp, #12]
 801114e:	2b00      	cmp	r3, #0
 8011150:	bfbb      	ittet	lt
 8011152:	425b      	neglt	r3, r3
 8011154:	f042 0202 	orrlt.w	r2, r2, #2
 8011158:	9307      	strge	r3, [sp, #28]
 801115a:	9307      	strlt	r3, [sp, #28]
 801115c:	bfb8      	it	lt
 801115e:	9204      	strlt	r2, [sp, #16]
 8011160:	7823      	ldrb	r3, [r4, #0]
 8011162:	2b2e      	cmp	r3, #46	@ 0x2e
 8011164:	d10a      	bne.n	801117c <_svfiprintf_r+0x130>
 8011166:	7863      	ldrb	r3, [r4, #1]
 8011168:	2b2a      	cmp	r3, #42	@ 0x2a
 801116a:	d132      	bne.n	80111d2 <_svfiprintf_r+0x186>
 801116c:	9b03      	ldr	r3, [sp, #12]
 801116e:	1d1a      	adds	r2, r3, #4
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	9203      	str	r2, [sp, #12]
 8011174:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011178:	3402      	adds	r4, #2
 801117a:	9305      	str	r3, [sp, #20]
 801117c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011240 <_svfiprintf_r+0x1f4>
 8011180:	7821      	ldrb	r1, [r4, #0]
 8011182:	2203      	movs	r2, #3
 8011184:	4650      	mov	r0, sl
 8011186:	f7ef f8cb 	bl	8000320 <memchr>
 801118a:	b138      	cbz	r0, 801119c <_svfiprintf_r+0x150>
 801118c:	9b04      	ldr	r3, [sp, #16]
 801118e:	eba0 000a 	sub.w	r0, r0, sl
 8011192:	2240      	movs	r2, #64	@ 0x40
 8011194:	4082      	lsls	r2, r0
 8011196:	4313      	orrs	r3, r2
 8011198:	3401      	adds	r4, #1
 801119a:	9304      	str	r3, [sp, #16]
 801119c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80111a0:	4824      	ldr	r0, [pc, #144]	@ (8011234 <_svfiprintf_r+0x1e8>)
 80111a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80111a6:	2206      	movs	r2, #6
 80111a8:	f7ef f8ba 	bl	8000320 <memchr>
 80111ac:	2800      	cmp	r0, #0
 80111ae:	d036      	beq.n	801121e <_svfiprintf_r+0x1d2>
 80111b0:	4b21      	ldr	r3, [pc, #132]	@ (8011238 <_svfiprintf_r+0x1ec>)
 80111b2:	bb1b      	cbnz	r3, 80111fc <_svfiprintf_r+0x1b0>
 80111b4:	9b03      	ldr	r3, [sp, #12]
 80111b6:	3307      	adds	r3, #7
 80111b8:	f023 0307 	bic.w	r3, r3, #7
 80111bc:	3308      	adds	r3, #8
 80111be:	9303      	str	r3, [sp, #12]
 80111c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80111c2:	4433      	add	r3, r6
 80111c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80111c6:	e76a      	b.n	801109e <_svfiprintf_r+0x52>
 80111c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80111cc:	460c      	mov	r4, r1
 80111ce:	2001      	movs	r0, #1
 80111d0:	e7a8      	b.n	8011124 <_svfiprintf_r+0xd8>
 80111d2:	2300      	movs	r3, #0
 80111d4:	3401      	adds	r4, #1
 80111d6:	9305      	str	r3, [sp, #20]
 80111d8:	4619      	mov	r1, r3
 80111da:	f04f 0c0a 	mov.w	ip, #10
 80111de:	4620      	mov	r0, r4
 80111e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80111e4:	3a30      	subs	r2, #48	@ 0x30
 80111e6:	2a09      	cmp	r2, #9
 80111e8:	d903      	bls.n	80111f2 <_svfiprintf_r+0x1a6>
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d0c6      	beq.n	801117c <_svfiprintf_r+0x130>
 80111ee:	9105      	str	r1, [sp, #20]
 80111f0:	e7c4      	b.n	801117c <_svfiprintf_r+0x130>
 80111f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80111f6:	4604      	mov	r4, r0
 80111f8:	2301      	movs	r3, #1
 80111fa:	e7f0      	b.n	80111de <_svfiprintf_r+0x192>
 80111fc:	ab03      	add	r3, sp, #12
 80111fe:	9300      	str	r3, [sp, #0]
 8011200:	462a      	mov	r2, r5
 8011202:	4b0e      	ldr	r3, [pc, #56]	@ (801123c <_svfiprintf_r+0x1f0>)
 8011204:	a904      	add	r1, sp, #16
 8011206:	4638      	mov	r0, r7
 8011208:	f3af 8000 	nop.w
 801120c:	1c42      	adds	r2, r0, #1
 801120e:	4606      	mov	r6, r0
 8011210:	d1d6      	bne.n	80111c0 <_svfiprintf_r+0x174>
 8011212:	89ab      	ldrh	r3, [r5, #12]
 8011214:	065b      	lsls	r3, r3, #25
 8011216:	f53f af2d 	bmi.w	8011074 <_svfiprintf_r+0x28>
 801121a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801121c:	e72c      	b.n	8011078 <_svfiprintf_r+0x2c>
 801121e:	ab03      	add	r3, sp, #12
 8011220:	9300      	str	r3, [sp, #0]
 8011222:	462a      	mov	r2, r5
 8011224:	4b05      	ldr	r3, [pc, #20]	@ (801123c <_svfiprintf_r+0x1f0>)
 8011226:	a904      	add	r1, sp, #16
 8011228:	4638      	mov	r0, r7
 801122a:	f000 f879 	bl	8011320 <_printf_i>
 801122e:	e7ed      	b.n	801120c <_svfiprintf_r+0x1c0>
 8011230:	080120f2 	.word	0x080120f2
 8011234:	080120fc 	.word	0x080120fc
 8011238:	00000000 	.word	0x00000000
 801123c:	08010f95 	.word	0x08010f95
 8011240:	080120f8 	.word	0x080120f8

08011244 <_printf_common>:
 8011244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011248:	4616      	mov	r6, r2
 801124a:	4698      	mov	r8, r3
 801124c:	688a      	ldr	r2, [r1, #8]
 801124e:	690b      	ldr	r3, [r1, #16]
 8011250:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011254:	4293      	cmp	r3, r2
 8011256:	bfb8      	it	lt
 8011258:	4613      	movlt	r3, r2
 801125a:	6033      	str	r3, [r6, #0]
 801125c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011260:	4607      	mov	r7, r0
 8011262:	460c      	mov	r4, r1
 8011264:	b10a      	cbz	r2, 801126a <_printf_common+0x26>
 8011266:	3301      	adds	r3, #1
 8011268:	6033      	str	r3, [r6, #0]
 801126a:	6823      	ldr	r3, [r4, #0]
 801126c:	0699      	lsls	r1, r3, #26
 801126e:	bf42      	ittt	mi
 8011270:	6833      	ldrmi	r3, [r6, #0]
 8011272:	3302      	addmi	r3, #2
 8011274:	6033      	strmi	r3, [r6, #0]
 8011276:	6825      	ldr	r5, [r4, #0]
 8011278:	f015 0506 	ands.w	r5, r5, #6
 801127c:	d106      	bne.n	801128c <_printf_common+0x48>
 801127e:	f104 0a19 	add.w	sl, r4, #25
 8011282:	68e3      	ldr	r3, [r4, #12]
 8011284:	6832      	ldr	r2, [r6, #0]
 8011286:	1a9b      	subs	r3, r3, r2
 8011288:	42ab      	cmp	r3, r5
 801128a:	dc26      	bgt.n	80112da <_printf_common+0x96>
 801128c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011290:	6822      	ldr	r2, [r4, #0]
 8011292:	3b00      	subs	r3, #0
 8011294:	bf18      	it	ne
 8011296:	2301      	movne	r3, #1
 8011298:	0692      	lsls	r2, r2, #26
 801129a:	d42b      	bmi.n	80112f4 <_printf_common+0xb0>
 801129c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80112a0:	4641      	mov	r1, r8
 80112a2:	4638      	mov	r0, r7
 80112a4:	47c8      	blx	r9
 80112a6:	3001      	adds	r0, #1
 80112a8:	d01e      	beq.n	80112e8 <_printf_common+0xa4>
 80112aa:	6823      	ldr	r3, [r4, #0]
 80112ac:	6922      	ldr	r2, [r4, #16]
 80112ae:	f003 0306 	and.w	r3, r3, #6
 80112b2:	2b04      	cmp	r3, #4
 80112b4:	bf02      	ittt	eq
 80112b6:	68e5      	ldreq	r5, [r4, #12]
 80112b8:	6833      	ldreq	r3, [r6, #0]
 80112ba:	1aed      	subeq	r5, r5, r3
 80112bc:	68a3      	ldr	r3, [r4, #8]
 80112be:	bf0c      	ite	eq
 80112c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80112c4:	2500      	movne	r5, #0
 80112c6:	4293      	cmp	r3, r2
 80112c8:	bfc4      	itt	gt
 80112ca:	1a9b      	subgt	r3, r3, r2
 80112cc:	18ed      	addgt	r5, r5, r3
 80112ce:	2600      	movs	r6, #0
 80112d0:	341a      	adds	r4, #26
 80112d2:	42b5      	cmp	r5, r6
 80112d4:	d11a      	bne.n	801130c <_printf_common+0xc8>
 80112d6:	2000      	movs	r0, #0
 80112d8:	e008      	b.n	80112ec <_printf_common+0xa8>
 80112da:	2301      	movs	r3, #1
 80112dc:	4652      	mov	r2, sl
 80112de:	4641      	mov	r1, r8
 80112e0:	4638      	mov	r0, r7
 80112e2:	47c8      	blx	r9
 80112e4:	3001      	adds	r0, #1
 80112e6:	d103      	bne.n	80112f0 <_printf_common+0xac>
 80112e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80112ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112f0:	3501      	adds	r5, #1
 80112f2:	e7c6      	b.n	8011282 <_printf_common+0x3e>
 80112f4:	18e1      	adds	r1, r4, r3
 80112f6:	1c5a      	adds	r2, r3, #1
 80112f8:	2030      	movs	r0, #48	@ 0x30
 80112fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80112fe:	4422      	add	r2, r4
 8011300:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011304:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011308:	3302      	adds	r3, #2
 801130a:	e7c7      	b.n	801129c <_printf_common+0x58>
 801130c:	2301      	movs	r3, #1
 801130e:	4622      	mov	r2, r4
 8011310:	4641      	mov	r1, r8
 8011312:	4638      	mov	r0, r7
 8011314:	47c8      	blx	r9
 8011316:	3001      	adds	r0, #1
 8011318:	d0e6      	beq.n	80112e8 <_printf_common+0xa4>
 801131a:	3601      	adds	r6, #1
 801131c:	e7d9      	b.n	80112d2 <_printf_common+0x8e>
	...

08011320 <_printf_i>:
 8011320:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011324:	7e0f      	ldrb	r7, [r1, #24]
 8011326:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011328:	2f78      	cmp	r7, #120	@ 0x78
 801132a:	4691      	mov	r9, r2
 801132c:	4680      	mov	r8, r0
 801132e:	460c      	mov	r4, r1
 8011330:	469a      	mov	sl, r3
 8011332:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011336:	d807      	bhi.n	8011348 <_printf_i+0x28>
 8011338:	2f62      	cmp	r7, #98	@ 0x62
 801133a:	d80a      	bhi.n	8011352 <_printf_i+0x32>
 801133c:	2f00      	cmp	r7, #0
 801133e:	f000 80d2 	beq.w	80114e6 <_printf_i+0x1c6>
 8011342:	2f58      	cmp	r7, #88	@ 0x58
 8011344:	f000 80b9 	beq.w	80114ba <_printf_i+0x19a>
 8011348:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801134c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011350:	e03a      	b.n	80113c8 <_printf_i+0xa8>
 8011352:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011356:	2b15      	cmp	r3, #21
 8011358:	d8f6      	bhi.n	8011348 <_printf_i+0x28>
 801135a:	a101      	add	r1, pc, #4	@ (adr r1, 8011360 <_printf_i+0x40>)
 801135c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011360:	080113b9 	.word	0x080113b9
 8011364:	080113cd 	.word	0x080113cd
 8011368:	08011349 	.word	0x08011349
 801136c:	08011349 	.word	0x08011349
 8011370:	08011349 	.word	0x08011349
 8011374:	08011349 	.word	0x08011349
 8011378:	080113cd 	.word	0x080113cd
 801137c:	08011349 	.word	0x08011349
 8011380:	08011349 	.word	0x08011349
 8011384:	08011349 	.word	0x08011349
 8011388:	08011349 	.word	0x08011349
 801138c:	080114cd 	.word	0x080114cd
 8011390:	080113f7 	.word	0x080113f7
 8011394:	08011487 	.word	0x08011487
 8011398:	08011349 	.word	0x08011349
 801139c:	08011349 	.word	0x08011349
 80113a0:	080114ef 	.word	0x080114ef
 80113a4:	08011349 	.word	0x08011349
 80113a8:	080113f7 	.word	0x080113f7
 80113ac:	08011349 	.word	0x08011349
 80113b0:	08011349 	.word	0x08011349
 80113b4:	0801148f 	.word	0x0801148f
 80113b8:	6833      	ldr	r3, [r6, #0]
 80113ba:	1d1a      	adds	r2, r3, #4
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	6032      	str	r2, [r6, #0]
 80113c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80113c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80113c8:	2301      	movs	r3, #1
 80113ca:	e09d      	b.n	8011508 <_printf_i+0x1e8>
 80113cc:	6833      	ldr	r3, [r6, #0]
 80113ce:	6820      	ldr	r0, [r4, #0]
 80113d0:	1d19      	adds	r1, r3, #4
 80113d2:	6031      	str	r1, [r6, #0]
 80113d4:	0606      	lsls	r6, r0, #24
 80113d6:	d501      	bpl.n	80113dc <_printf_i+0xbc>
 80113d8:	681d      	ldr	r5, [r3, #0]
 80113da:	e003      	b.n	80113e4 <_printf_i+0xc4>
 80113dc:	0645      	lsls	r5, r0, #25
 80113de:	d5fb      	bpl.n	80113d8 <_printf_i+0xb8>
 80113e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80113e4:	2d00      	cmp	r5, #0
 80113e6:	da03      	bge.n	80113f0 <_printf_i+0xd0>
 80113e8:	232d      	movs	r3, #45	@ 0x2d
 80113ea:	426d      	negs	r5, r5
 80113ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80113f0:	4859      	ldr	r0, [pc, #356]	@ (8011558 <_printf_i+0x238>)
 80113f2:	230a      	movs	r3, #10
 80113f4:	e011      	b.n	801141a <_printf_i+0xfa>
 80113f6:	6821      	ldr	r1, [r4, #0]
 80113f8:	6833      	ldr	r3, [r6, #0]
 80113fa:	0608      	lsls	r0, r1, #24
 80113fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8011400:	d402      	bmi.n	8011408 <_printf_i+0xe8>
 8011402:	0649      	lsls	r1, r1, #25
 8011404:	bf48      	it	mi
 8011406:	b2ad      	uxthmi	r5, r5
 8011408:	2f6f      	cmp	r7, #111	@ 0x6f
 801140a:	4853      	ldr	r0, [pc, #332]	@ (8011558 <_printf_i+0x238>)
 801140c:	6033      	str	r3, [r6, #0]
 801140e:	bf14      	ite	ne
 8011410:	230a      	movne	r3, #10
 8011412:	2308      	moveq	r3, #8
 8011414:	2100      	movs	r1, #0
 8011416:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801141a:	6866      	ldr	r6, [r4, #4]
 801141c:	60a6      	str	r6, [r4, #8]
 801141e:	2e00      	cmp	r6, #0
 8011420:	bfa2      	ittt	ge
 8011422:	6821      	ldrge	r1, [r4, #0]
 8011424:	f021 0104 	bicge.w	r1, r1, #4
 8011428:	6021      	strge	r1, [r4, #0]
 801142a:	b90d      	cbnz	r5, 8011430 <_printf_i+0x110>
 801142c:	2e00      	cmp	r6, #0
 801142e:	d04b      	beq.n	80114c8 <_printf_i+0x1a8>
 8011430:	4616      	mov	r6, r2
 8011432:	fbb5 f1f3 	udiv	r1, r5, r3
 8011436:	fb03 5711 	mls	r7, r3, r1, r5
 801143a:	5dc7      	ldrb	r7, [r0, r7]
 801143c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011440:	462f      	mov	r7, r5
 8011442:	42bb      	cmp	r3, r7
 8011444:	460d      	mov	r5, r1
 8011446:	d9f4      	bls.n	8011432 <_printf_i+0x112>
 8011448:	2b08      	cmp	r3, #8
 801144a:	d10b      	bne.n	8011464 <_printf_i+0x144>
 801144c:	6823      	ldr	r3, [r4, #0]
 801144e:	07df      	lsls	r7, r3, #31
 8011450:	d508      	bpl.n	8011464 <_printf_i+0x144>
 8011452:	6923      	ldr	r3, [r4, #16]
 8011454:	6861      	ldr	r1, [r4, #4]
 8011456:	4299      	cmp	r1, r3
 8011458:	bfde      	ittt	le
 801145a:	2330      	movle	r3, #48	@ 0x30
 801145c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011460:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8011464:	1b92      	subs	r2, r2, r6
 8011466:	6122      	str	r2, [r4, #16]
 8011468:	f8cd a000 	str.w	sl, [sp]
 801146c:	464b      	mov	r3, r9
 801146e:	aa03      	add	r2, sp, #12
 8011470:	4621      	mov	r1, r4
 8011472:	4640      	mov	r0, r8
 8011474:	f7ff fee6 	bl	8011244 <_printf_common>
 8011478:	3001      	adds	r0, #1
 801147a:	d14a      	bne.n	8011512 <_printf_i+0x1f2>
 801147c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011480:	b004      	add	sp, #16
 8011482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011486:	6823      	ldr	r3, [r4, #0]
 8011488:	f043 0320 	orr.w	r3, r3, #32
 801148c:	6023      	str	r3, [r4, #0]
 801148e:	4833      	ldr	r0, [pc, #204]	@ (801155c <_printf_i+0x23c>)
 8011490:	2778      	movs	r7, #120	@ 0x78
 8011492:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011496:	6823      	ldr	r3, [r4, #0]
 8011498:	6831      	ldr	r1, [r6, #0]
 801149a:	061f      	lsls	r7, r3, #24
 801149c:	f851 5b04 	ldr.w	r5, [r1], #4
 80114a0:	d402      	bmi.n	80114a8 <_printf_i+0x188>
 80114a2:	065f      	lsls	r7, r3, #25
 80114a4:	bf48      	it	mi
 80114a6:	b2ad      	uxthmi	r5, r5
 80114a8:	6031      	str	r1, [r6, #0]
 80114aa:	07d9      	lsls	r1, r3, #31
 80114ac:	bf44      	itt	mi
 80114ae:	f043 0320 	orrmi.w	r3, r3, #32
 80114b2:	6023      	strmi	r3, [r4, #0]
 80114b4:	b11d      	cbz	r5, 80114be <_printf_i+0x19e>
 80114b6:	2310      	movs	r3, #16
 80114b8:	e7ac      	b.n	8011414 <_printf_i+0xf4>
 80114ba:	4827      	ldr	r0, [pc, #156]	@ (8011558 <_printf_i+0x238>)
 80114bc:	e7e9      	b.n	8011492 <_printf_i+0x172>
 80114be:	6823      	ldr	r3, [r4, #0]
 80114c0:	f023 0320 	bic.w	r3, r3, #32
 80114c4:	6023      	str	r3, [r4, #0]
 80114c6:	e7f6      	b.n	80114b6 <_printf_i+0x196>
 80114c8:	4616      	mov	r6, r2
 80114ca:	e7bd      	b.n	8011448 <_printf_i+0x128>
 80114cc:	6833      	ldr	r3, [r6, #0]
 80114ce:	6825      	ldr	r5, [r4, #0]
 80114d0:	6961      	ldr	r1, [r4, #20]
 80114d2:	1d18      	adds	r0, r3, #4
 80114d4:	6030      	str	r0, [r6, #0]
 80114d6:	062e      	lsls	r6, r5, #24
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	d501      	bpl.n	80114e0 <_printf_i+0x1c0>
 80114dc:	6019      	str	r1, [r3, #0]
 80114de:	e002      	b.n	80114e6 <_printf_i+0x1c6>
 80114e0:	0668      	lsls	r0, r5, #25
 80114e2:	d5fb      	bpl.n	80114dc <_printf_i+0x1bc>
 80114e4:	8019      	strh	r1, [r3, #0]
 80114e6:	2300      	movs	r3, #0
 80114e8:	6123      	str	r3, [r4, #16]
 80114ea:	4616      	mov	r6, r2
 80114ec:	e7bc      	b.n	8011468 <_printf_i+0x148>
 80114ee:	6833      	ldr	r3, [r6, #0]
 80114f0:	1d1a      	adds	r2, r3, #4
 80114f2:	6032      	str	r2, [r6, #0]
 80114f4:	681e      	ldr	r6, [r3, #0]
 80114f6:	6862      	ldr	r2, [r4, #4]
 80114f8:	2100      	movs	r1, #0
 80114fa:	4630      	mov	r0, r6
 80114fc:	f7ee ff10 	bl	8000320 <memchr>
 8011500:	b108      	cbz	r0, 8011506 <_printf_i+0x1e6>
 8011502:	1b80      	subs	r0, r0, r6
 8011504:	6060      	str	r0, [r4, #4]
 8011506:	6863      	ldr	r3, [r4, #4]
 8011508:	6123      	str	r3, [r4, #16]
 801150a:	2300      	movs	r3, #0
 801150c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011510:	e7aa      	b.n	8011468 <_printf_i+0x148>
 8011512:	6923      	ldr	r3, [r4, #16]
 8011514:	4632      	mov	r2, r6
 8011516:	4649      	mov	r1, r9
 8011518:	4640      	mov	r0, r8
 801151a:	47d0      	blx	sl
 801151c:	3001      	adds	r0, #1
 801151e:	d0ad      	beq.n	801147c <_printf_i+0x15c>
 8011520:	6823      	ldr	r3, [r4, #0]
 8011522:	079b      	lsls	r3, r3, #30
 8011524:	d413      	bmi.n	801154e <_printf_i+0x22e>
 8011526:	68e0      	ldr	r0, [r4, #12]
 8011528:	9b03      	ldr	r3, [sp, #12]
 801152a:	4298      	cmp	r0, r3
 801152c:	bfb8      	it	lt
 801152e:	4618      	movlt	r0, r3
 8011530:	e7a6      	b.n	8011480 <_printf_i+0x160>
 8011532:	2301      	movs	r3, #1
 8011534:	4632      	mov	r2, r6
 8011536:	4649      	mov	r1, r9
 8011538:	4640      	mov	r0, r8
 801153a:	47d0      	blx	sl
 801153c:	3001      	adds	r0, #1
 801153e:	d09d      	beq.n	801147c <_printf_i+0x15c>
 8011540:	3501      	adds	r5, #1
 8011542:	68e3      	ldr	r3, [r4, #12]
 8011544:	9903      	ldr	r1, [sp, #12]
 8011546:	1a5b      	subs	r3, r3, r1
 8011548:	42ab      	cmp	r3, r5
 801154a:	dcf2      	bgt.n	8011532 <_printf_i+0x212>
 801154c:	e7eb      	b.n	8011526 <_printf_i+0x206>
 801154e:	2500      	movs	r5, #0
 8011550:	f104 0619 	add.w	r6, r4, #25
 8011554:	e7f5      	b.n	8011542 <_printf_i+0x222>
 8011556:	bf00      	nop
 8011558:	08012103 	.word	0x08012103
 801155c:	08012114 	.word	0x08012114

08011560 <memmove>:
 8011560:	4288      	cmp	r0, r1
 8011562:	b510      	push	{r4, lr}
 8011564:	eb01 0402 	add.w	r4, r1, r2
 8011568:	d902      	bls.n	8011570 <memmove+0x10>
 801156a:	4284      	cmp	r4, r0
 801156c:	4623      	mov	r3, r4
 801156e:	d807      	bhi.n	8011580 <memmove+0x20>
 8011570:	1e43      	subs	r3, r0, #1
 8011572:	42a1      	cmp	r1, r4
 8011574:	d008      	beq.n	8011588 <memmove+0x28>
 8011576:	f811 2b01 	ldrb.w	r2, [r1], #1
 801157a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801157e:	e7f8      	b.n	8011572 <memmove+0x12>
 8011580:	4402      	add	r2, r0
 8011582:	4601      	mov	r1, r0
 8011584:	428a      	cmp	r2, r1
 8011586:	d100      	bne.n	801158a <memmove+0x2a>
 8011588:	bd10      	pop	{r4, pc}
 801158a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801158e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011592:	e7f7      	b.n	8011584 <memmove+0x24>

08011594 <_sbrk_r>:
 8011594:	b538      	push	{r3, r4, r5, lr}
 8011596:	4d06      	ldr	r5, [pc, #24]	@ (80115b0 <_sbrk_r+0x1c>)
 8011598:	2300      	movs	r3, #0
 801159a:	4604      	mov	r4, r0
 801159c:	4608      	mov	r0, r1
 801159e:	602b      	str	r3, [r5, #0]
 80115a0:	f7f2 fcac 	bl	8003efc <_sbrk>
 80115a4:	1c43      	adds	r3, r0, #1
 80115a6:	d102      	bne.n	80115ae <_sbrk_r+0x1a>
 80115a8:	682b      	ldr	r3, [r5, #0]
 80115aa:	b103      	cbz	r3, 80115ae <_sbrk_r+0x1a>
 80115ac:	6023      	str	r3, [r4, #0]
 80115ae:	bd38      	pop	{r3, r4, r5, pc}
 80115b0:	24001030 	.word	0x24001030

080115b4 <memcpy>:
 80115b4:	440a      	add	r2, r1
 80115b6:	4291      	cmp	r1, r2
 80115b8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80115bc:	d100      	bne.n	80115c0 <memcpy+0xc>
 80115be:	4770      	bx	lr
 80115c0:	b510      	push	{r4, lr}
 80115c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80115c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80115ca:	4291      	cmp	r1, r2
 80115cc:	d1f9      	bne.n	80115c2 <memcpy+0xe>
 80115ce:	bd10      	pop	{r4, pc}

080115d0 <_realloc_r>:
 80115d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115d4:	4680      	mov	r8, r0
 80115d6:	4615      	mov	r5, r2
 80115d8:	460c      	mov	r4, r1
 80115da:	b921      	cbnz	r1, 80115e6 <_realloc_r+0x16>
 80115dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80115e0:	4611      	mov	r1, r2
 80115e2:	f7ff bc4b 	b.w	8010e7c <_malloc_r>
 80115e6:	b92a      	cbnz	r2, 80115f4 <_realloc_r+0x24>
 80115e8:	f7ff fbdc 	bl	8010da4 <_free_r>
 80115ec:	2400      	movs	r4, #0
 80115ee:	4620      	mov	r0, r4
 80115f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115f4:	f000 f81a 	bl	801162c <_malloc_usable_size_r>
 80115f8:	4285      	cmp	r5, r0
 80115fa:	4606      	mov	r6, r0
 80115fc:	d802      	bhi.n	8011604 <_realloc_r+0x34>
 80115fe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011602:	d8f4      	bhi.n	80115ee <_realloc_r+0x1e>
 8011604:	4629      	mov	r1, r5
 8011606:	4640      	mov	r0, r8
 8011608:	f7ff fc38 	bl	8010e7c <_malloc_r>
 801160c:	4607      	mov	r7, r0
 801160e:	2800      	cmp	r0, #0
 8011610:	d0ec      	beq.n	80115ec <_realloc_r+0x1c>
 8011612:	42b5      	cmp	r5, r6
 8011614:	462a      	mov	r2, r5
 8011616:	4621      	mov	r1, r4
 8011618:	bf28      	it	cs
 801161a:	4632      	movcs	r2, r6
 801161c:	f7ff ffca 	bl	80115b4 <memcpy>
 8011620:	4621      	mov	r1, r4
 8011622:	4640      	mov	r0, r8
 8011624:	f7ff fbbe 	bl	8010da4 <_free_r>
 8011628:	463c      	mov	r4, r7
 801162a:	e7e0      	b.n	80115ee <_realloc_r+0x1e>

0801162c <_malloc_usable_size_r>:
 801162c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011630:	1f18      	subs	r0, r3, #4
 8011632:	2b00      	cmp	r3, #0
 8011634:	bfbc      	itt	lt
 8011636:	580b      	ldrlt	r3, [r1, r0]
 8011638:	18c0      	addlt	r0, r0, r3
 801163a:	4770      	bx	lr

0801163c <_init>:
 801163c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801163e:	bf00      	nop
 8011640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011642:	bc08      	pop	{r3}
 8011644:	469e      	mov	lr, r3
 8011646:	4770      	bx	lr

08011648 <_fini>:
 8011648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801164a:	bf00      	nop
 801164c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801164e:	bc08      	pop	{r3}
 8011650:	469e      	mov	lr, r3
 8011652:	4770      	bx	lr
